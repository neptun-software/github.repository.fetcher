{
  "metadata": {
    "timestamp": 1736708783797,
    "page": 277,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "baidu/uid-generator",
      "stars": 5490,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1484375,
          "content": "Copyright (c) 2017 Baidu, Inc. All Rights Reserved\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2017 Baidu, Inc. All Rights Reserved\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.5400390625,
          "content": "UidGenerator\n==========================\n[In Chinese 中文版](README.zh_cn.md)\n\nUidGenerator is a Java implemented, [Snowflake](https://github.com/twitter/snowflake) based unique ID generator. It\nworks as a component, and allows users to override workId bits and initialization strategy. As a result, it is much more\nsuitable for virtualization environment, such as [docker](https://www.docker.com/). Besides these, it overcomes\nconcurrency limitation of Snowflake algorithm by consuming future time; parallels UID produce and consume by caching\nUID with RingBuffer; eliminates CacheLine pseudo sharing, which comes from RingBuffer, via padding. And finally, it\ncan offer over <font color=red>6 million</font> QPS per single instance.\n\nRequires：[Java8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)+,\n[MySQL](https://dev.mysql.com/downloads/mysql/)(Default implement as WorkerID assigner; If there are other implements, MySQL is not required)\n\nSnowflake\n-------------\n![Snowflake](doc/snowflake.png)  \n** Snowflake algorithm：** An unique id consists of worker node, timestamp and sequence within that timestamp. Usually,\nit is a 64 bits number(long), and the default bits of that three fields are as follows:\n\n* sign(1bit)  \n  The highest bit is always 0.\n\n* delta seconds (28 bits)  \n  The next 28 bits, represents delta seconds since a customer epoch(2016-05-20). The maximum time will be 8.7 years.\n\n* worker id (22 bits)  \n  The next 22 bits, represents the worker node id, maximum value will be 4.2 million. UidGenerator uses a build-in\n  database based ```worker id assigner``` when startup by default, and it will dispose previous work node id after\n  reboot. Other strategy such like 'reuse' is coming soon.\n\n* sequence (13 bits)   \n  the last 13 bits, represents sequence within the one second, maximum is 8192 per second by default.\n  \n**The parameters above can be configured in spring bean**\n\n\nCachedUidGenerator\n-------------------\nRingBuffer is an array，each item of that array is called 'slot', every slot keeps a uid or a flag(Double RingBuffer).\nThe size of RingBuffer is 2^<sup>n</sup>, where n is positive integer and equal or greater than bits of\n```sequence```. Assign bigger value to ```boostPower``` if you want to enlarge RingBuffer to improve throughput.\n\n###### Tail & Cursor pointer\n* Tail Pointer\n\n  Represents the latest produced UID. If it catches up with cursor, the ring buffer will be full, at that moment, no put\n  operation should be allowed, you can specify a policy to handle it by assigning\n  property ```rejectedPutBufferHandler```.\n  \n* Cursor Pointer\n\n  Represents the latest already consumed UID. If cursor catches up with tail, the ring buffer will be empty, and\n  any take operation will be rejected. you can also specify a policy to handle it  by assigning\n  property ```rejectedTakeBufferHandler```.\n\n![RingBuffer](doc/ringbuffer.png)  \n\nCachedUidGenerator used double RingBuffer，one RingBuffer for UID, another for status(if valid for take or put)\n\nArray can improve performance of reading, due to the CUP cache mechanism. At the same time, it brought the side\neffect of 「False Sharing」, in order to solve it, cache line padding is applied.\n\n![FalseSharing](doc/cacheline_padding.png) \n\n#### RingBuffer filling\n* Initialization padding\n  During RingBuffer initializing，the entire RingBuffer will be filled.\n  \n* In-time filling\n  Whenever the percent of available UIDs is less than threshold ```paddingFactor```, the fill task is triggered. You can\n  reassign that  threshold in Spring bean configuration.\n  \n* Periodic filling\n  Filling periodically in a scheduled thread. The```scheduleInterval``` can be reassigned in Spring bean configuration.\n\n\nQuick Start\n------------\nHere we have a demo with 4 steps to introduce how to integrate UidGenerator into Spring based projects.<br/>\n\n### Step 1: Install Java8, Maven, MySQL\nIf you have already installed maven, jdk8+ and Mysql or other DB which supported by Mybatis, just skip to next.<br/>\nDownload [Java8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html),\n[MySQL](https://dev.mysql.com/downloads/mysql/) and [Maven](https://maven.apache.org/download.cgi),\nand install jdk, mysql. For maven, extracting and setting MAVEN_HOME is enough.\n\n#### Set JAVA_HOME & MAVEN_HOME\nHere is a sample script to set JAVA_HOME and MAVEN_HOME\n```shell\nexport MAVEN_HOME=/xxx/xxx/software/maven/apache-maven-3.3.9\nexport PATH=$MAVEN_HOME/bin:$PATH\nJAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home\";\nexport JAVA_HOME;\n```\n\n### Step 2: Create table WORKER_NODE\nReplace ```xxxxx``` with real database name, and run following script to create table,\n```sql\nDROP DATABASE IF EXISTS `xxxx`;\nCREATE DATABASE `xxxx` ;\nuse `xxxx`;\nDROP TABLE IF EXISTS WORKER_NODE;\nCREATE TABLE WORKER_NODE\n(\nID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'auto increment id',\nHOST_NAME VARCHAR(64) NOT NULL COMMENT 'host name',\nPORT VARCHAR(64) NOT NULL COMMENT 'port',\nTYPE INT NOT NULL COMMENT 'node type: ACTUAL or CONTAINER',\nLAUNCH_DATE DATE NOT NULL COMMENT 'launch date',\nMODIFIED TIMESTAMP NOT NULL COMMENT 'modified time',\nCREATED TIMESTAMP NOT NULL COMMENT 'created time',\nPRIMARY KEY(ID)\n)\n COMMENT='DB WorkerID Assigner for UID Generator',ENGINE = INNODB;\n```\n\nReset property of 'jdbc.url', 'jdbc.username' and 'jdbc.password' in [mysql.properties](src/test/resources/uid/mysql.properties).\n\n### Step 3: Spring configuration\n#### DefaultUidGenerator\nThere are two implements of UidGenerator: [DefaultUidGenerator](src/main/java/com/baidu/fsg/uid/impl/DefaultUidGenerator.java), [CachedUidGenerator](src/main/java/com/baidu/fsg/uid/impl/CachedUidGenerator.java).<br/>\nFor performance sensitive application, CachedUidGenerator is recommended.\n\n```xml\n<!-- DefaultUidGenerator -->\n<bean id=\"defaultUidGenerator\" class=\"com.baidu.fsg.uid.impl.DefaultUidGenerator\" lazy-init=\"false\">\n    <property name=\"workerIdAssigner\" ref=\"disposableWorkerIdAssigner\"/>\n\n    <!-- Specified bits & epoch as your demand. No specified the default value will be used -->\n    <property name=\"timeBits\" value=\"29\"/>\n    <property name=\"workerBits\" value=\"21\"/>\n    <property name=\"seqBits\" value=\"13\"/>\n    <property name=\"epochStr\" value=\"2016-09-20\"/>\n</bean>\n \n<!-- Disposable WorkerIdAssigner based on Database -->\n<bean id=\"disposableWorkerIdAssigner\" class=\"com.baidu.fsg.uid.worker.DisposableWorkerIdAssigner\" />\n\n```\n\n#### CachedUidGenerator\nCopy beans of CachedUidGenerator to 'test/resources/uid/cached-uid-spring.xml'.\n```xml\n<!-- CachedUidGenerator -->\n<bean id=\"cachedUidGenerator\" class=\"com.baidu.fsg.uid.impl.CachedUidGenerator\">\n    <property name=\"workerIdAssigner\" ref=\"disposableWorkerIdAssigner\" />\n \n    <!-- The config below is option -->\n    <!-- Specified bits & epoch as your demand. No specified the default value will be used -->\n    <property name=\"timeBits\" value=\"29\"/>\n    <property name=\"workerBits\" value=\"21\"/>\n    <property name=\"seqBits\" value=\"13\"/>\n    <property name=\"epochStr\" value=\"2016-09-20\"/>\n    <!-- RingBuffer size, to improve the throughput. -->\n    <!-- Default as 3. Sample: original bufferSize=8192, after boosting the new bufferSize= 8192 << 3 = 65536 -->\n    <property name=\"boostPower\" value=\"3\"></property>\n \n    <!-- In-time padding, available UIDs percentage(0, 100) of the RingBuffer, default as 50 -->\n    <!-- Sample: bufferSize=1024, paddingFactor=50 -> threshold=1024 * 50 / 100 = 512. -->\n    <!-- When the rest available UIDs < 512, RingBiffer will be padded in-time -->\n    <property name=\"paddingFactor\" value=\"50\"></property>\n \n    <!-- Periodic padding -->\n    <!-- Default is disabled. Enable as below, scheduleInterval unit as Seconds. -->\n    <property name=\"scheduleInterval\" value=\"60\"></property>\n \n    <!-- Policy for rejecting put on RingBuffer -->\n    <property name=\"rejectedPutBufferHandler\" ref=\"XxxxYourPutRejectPolicy\"></property>\n \n    <!-- Policy for rejecting take from RingBuffer -->\n    <property name=\"rejectedTakeBufferHandler\" ref=\"XxxxYourTakeRejectPolicy\"></property>\n \n</bean>\n \n<!-- Disposable WorkerIdAssigner based on Database -->\n<bean id=\"disposableWorkerIdAssigner\" class=\"com.baidu.fsg.uid.worker.DisposableWorkerIdAssigner\" />\n \n<!-- Mybatis config... -->\n```\n\n#### Mybatis config\n[mybatis-spring.xml](src/test/resources/uid/mybatis-spring.xml) shows as below:\n```xml\n<!-- Spring annotation scan -->\n<context:component-scan base-package=\"com.baidu.fsg.uid\" />\n\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:/META-INF/mybatis/mapper/M_WORKER*.xml\" />\n</bean>\n\n<!-- transaction -->\n<tx:annotation-driven transaction-manager=\"transactionManager\" order=\"1\" />\n\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t<property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n\n<!-- Mybatis Mapper scan -->\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t<property name=\"annotationClass\" value=\"org.springframework.stereotype.Repository\" />\n\t<property name=\"basePackage\" value=\"com.baidu.fsg.uid.worker.dao\" />\n\t<property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n</bean>\n\n<!-- datasource config -->\n<bean id=\"dataSource\" parent=\"abstractDataSource\">\n\t<property name=\"driverClassName\" value=\"${mysql.driver}\" />\n\t<property name=\"maxActive\" value=\"${jdbc.maxActive}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n</bean>\n\n<bean id=\"abstractDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n\t<property name=\"filters\" value=\"${datasource.filters}\" />\n\t<property name=\"defaultAutoCommit\" value=\"${datasource.defaultAutoCommit}\" />\n\t<property name=\"initialSize\" value=\"${datasource.initialSize}\" />\n\t<property name=\"minIdle\" value=\"${datasource.minIdle}\" />\n\t<property name=\"maxWait\" value=\"${datasource.maxWait}\" />\n\t<property name=\"testWhileIdle\" value=\"${datasource.testWhileIdle}\" />\n\t<property name=\"testOnBorrow\" value=\"${datasource.testOnBorrow}\" />\n\t<property name=\"testOnReturn\" value=\"${datasource.testOnReturn}\" />\n\t<property name=\"validationQuery\" value=\"${datasource.validationQuery}\" />\n\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"${datasource.timeBetweenEvictionRunsMillis}\" />\n\t<property name=\"minEvictableIdleTimeMillis\" value=\"${datasource.minEvictableIdleTimeMillis}\" />\n\t<property name=\"logAbandoned\" value=\"${datasource.logAbandoned}\" />\n\t<property name=\"removeAbandoned\" value=\"${datasource.removeAbandoned}\" />\n\t<property name=\"removeAbandonedTimeout\" value=\"${datasource.removeAbandonedTimeout}\" />\n</bean>\n\n<bean id=\"batchSqlSession\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n\t<constructor-arg index=\"0\" ref=\"sqlSessionFactory\" />\n\t<constructor-arg index=\"1\" value=\"BATCH\" />\n</bean>\n```\n\n### Step 4: Run UnitTest\nRun [CachedUidGeneratorTest](src/test/java/com/baidu/fsg/uid/CachedUidGeneratorTest.java), shows how to generate / parse UniqueID:\n```java\n@Resource\nprivate UidGenerator uidGenerator;\n\n@Test\npublic void testSerialGenerate() {\n    // Generate UID\n    long uid = uidGenerator.getUID();\n\n    // Parse UID into [Timestamp, WorkerId, Sequence]\n    // {\"UID\":\"180363646902239241\",\"parsed\":{    \"timestamp\":\"2017-01-19 12:15:46\",    \"workerId\":\"4\",    \"sequence\":\"9\"        }}\n    System.out.println(uidGenerator.parseUID(uid));\n\n}\n```\n\n### Tips\nFor low concurrency and long term application, less ```seqBits``` but more ```timeBits``` is recommended. For\nexample, if DisposableWorkerIdAssigner is adopted and the average reboot frequency is 12 per node per day, with the\nconfiguration ```{\"workerBits\":23,\"timeBits\":31,\"seqBits\":9}```, one project can run for 68 years with 28 nodes\nand entirely concurrency 14400 UID/s.\n\nFor frequent reboot and long term application, less ```seqBits``` but more ```timeBits``` and ```workerBits``` is\nrecommended. For example, if DisposableWorkerIdAssigner is adopted and the average reboot frequency is 24 * 12 per node\nper day, with the configuration ```{\"workerBits\":27,\"timeBits\":30,\"seqBits\":6}```, one project can run for 34 years\nwith 37 nodes and entirely concurrency 2400 UID/s.\n\n#### Experiment for Throughput\nTo figure out CachedUidGenerator's UID throughput, some experiments are carried out.<br/>\nFirstly, workerBits is arbitrarily fixed to 20, and change timeBits from 25(about 1 year) to 32(about 136 years),<br/>\n\n|timeBits|25|26|27|28|29|30|31|32|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,831,465|7,007,279|6,679,625|6,499,205|6,534,971|7,617,440|6,186,930|6,364,997|\n\n![throughput1](doc/throughput1.png)\n\nThen, timeBits is arbitrarily fixed to 31, and workerBits is changed from 20(about 1 million total reboots) to 29(about\n 500 million total reboots),<br/>\n\n|workerBits|20|21|22|23|24|25|26|27|28|29|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,186,930|6,642,727|6,581,661|6,462,726|6,774,609|6,414,906|6,806,266|6,223,617|6,438,055|6,435,549|\n\n![throughput2](doc/throughput2.png)\n\nIt is obvious that whatever the configuration is, CachedUidGenerator always has the ability to provide **6 million**\nstable throughput, what sacrificed is just life expectancy, this is very cool.\n\nFinally, both timeBits and workerBits are fixed to 31 and 23 separately, and change the number of CachedUidGenerator\nconsumer. Since our CPU only has 4 cores, \\[1, 8\\] is chosen.<br/>\n\n|consumers|1|2|3|4|5|6|7|8|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,462,726|6,542,259|6,077,717|6,377,958|7,002,410|6,599,113|7,360,934|6,490,969|\n\n![throughput3](doc/throughput3.png)\n"
        },
        {
          "name": "README.zh_cn.md",
          "type": "blob",
          "size": 13.7578125,
          "content": "UidGenerator\n==========================\n[In English](README.md)\n\nUidGenerator是Java实现的, 基于[Snowflake](https://github.com/twitter/snowflake)算法的唯一ID生成器。UidGenerator以组件形式工作在应用项目中,\n支持自定义workerId位数和初始化策略, 从而适用于[docker](https://www.docker.com/)等虚拟化环境下实例自动重启、漂移等场景。\n在实现上, UidGenerator通过借用未来时间来解决sequence天然存在的并发限制; 采用RingBuffer来缓存已生成的UID, 并行化UID的生产和消费,\n同时对CacheLine补齐，避免了由RingBuffer带来的硬件级「伪共享」问题. 最终单机QPS可达<font color=red>600万</font>。\n\n依赖版本：[Java8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)及以上版本,\n[MySQL](https://dev.mysql.com/downloads/mysql/)(内置WorkerID分配器, 启动阶段通过DB进行分配; 如自定义实现, 则DB非必选依赖）\n\nSnowflake算法\n-------------\n![Snowflake](doc/snowflake.png)  \nSnowflake算法描述：指定机器 & 同一时刻 & 某一并发序列，是唯一的。据此可生成一个64 bits的唯一ID（long）。默认采用上图字节分配方式：\n\n* sign(1bit)  \n  固定1bit符号标识，即生成的UID为正数。\n\n* delta seconds (28 bits)  \n  当前时间，相对于时间基点\"2016-05-20\"的增量值，单位：秒，最多可支持约8.7年\n\n* worker id (22 bits)  \n  机器id，最多可支持约420w次机器启动。内置实现为在启动时由数据库分配，默认分配策略为用后即弃，后续可提供复用策略。\n\n* sequence (13 bits)   \n  每秒下的并发序列，13 bits可支持每秒8192个并发。\n  \n**以上参数均可通过Spring进行自定义**\n\n\nCachedUidGenerator\n-------------------\nRingBuffer环形数组，数组每个元素成为一个slot。RingBuffer容量，默认为Snowflake算法中sequence最大值，且为2^N。可通过```boostPower```配置进行扩容，以提高RingBuffer\n读写吞吐量。\n\nTail指针、Cursor指针用于环形数组上读写slot：\n\n* Tail指针  \n  表示Producer生产的最大序号(此序号从0开始，持续递增)。Tail不能超过Cursor，即生产者不能覆盖未消费的slot。当Tail已赶上curosr，此时可通过```rejectedPutBufferHandler```指定PutRejectPolicy\n  \n* Cursor指针  \n  表示Consumer消费到的最小序号(序号序列与Producer序列相同)。Cursor不能超过Tail，即不能消费未生产的slot。当Cursor已赶上tail，此时可通过```rejectedTakeBufferHandler```指定TakeRejectPolicy\n\n![RingBuffer](doc/ringbuffer.png)  \n\nCachedUidGenerator采用了双RingBuffer，Uid-RingBuffer用于存储Uid、Flag-RingBuffer用于存储Uid状态(是否可填充、是否可消费)\n\n由于数组元素在内存中是连续分配的，可最大程度利用CPU cache以提升性能。但同时会带来「伪共享」FalseSharing问题，为此在Tail、Cursor指针、Flag-RingBuffer中采用了CacheLine\n补齐方式。\n\n![FalseSharing](doc/cacheline_padding.png) \n\n#### RingBuffer填充时机 ####\n* 初始化预填充  \n  RingBuffer初始化时，预先填充满整个RingBuffer.\n  \n* 即时填充  \n  Take消费时，即时检查剩余可用slot量(```tail``` - ```cursor```)，如小于设定阈值，则补全空闲slots。阈值可通过```paddingFactor```来进行配置，请参考Quick Start中CachedUidGenerator配置\n  \n* 周期填充  \n  通过Schedule线程，定时补全空闲slots。可通过```scheduleInterval```配置，以应用定时填充功能，并指定Schedule时间间隔\n\n\nQuick Start\n------------\n\n这里介绍如何在基于Spring的项目中使用UidGenerator, 具体流程如下:<br/>\n\n### 步骤1: 安装依赖\n先下载[Java8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html), [MySQL](https://dev.mysql.com/downloads/mysql/)和[Maven](https://maven.apache.org/download.cgi)\n\n#### 设置环境变量\nmaven无须安装, 设置好MAVEN_HOME即可. 可像下述脚本这样设置JAVA_HOME和MAVEN_HOME, 如已设置请忽略.\n```shell\nexport MAVEN_HOME=/xxx/xxx/software/maven/apache-maven-3.3.9\nexport PATH=$MAVEN_HOME/bin:$PATH\nJAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home\";\nexport JAVA_HOME;\n```\n\n### 步骤2: 创建表WORKER_NODE\n运行sql脚本以导入表WORKER_NODE, 脚本如下:\n```sql\nDROP DATABASE IF EXISTS `xxxx`;\nCREATE DATABASE `xxxx` ;\nuse `xxxx`;\nDROP TABLE IF EXISTS WORKER_NODE;\nCREATE TABLE WORKER_NODE\n(\nID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'auto increment id',\nHOST_NAME VARCHAR(64) NOT NULL COMMENT 'host name',\nPORT VARCHAR(64) NOT NULL COMMENT 'port',\nTYPE INT NOT NULL COMMENT 'node type: ACTUAL or CONTAINER',\nLAUNCH_DATE DATE NOT NULL COMMENT 'launch date',\nMODIFIED TIMESTAMP NOT NULL COMMENT 'modified time',\nCREATED TIMESTAMP NOT NULL COMMENT 'created time',\nPRIMARY KEY(ID)\n)\n COMMENT='DB WorkerID Assigner for UID Generator',ENGINE = INNODB;\n```\n\n修改[mysql.properties](src/test/resources/uid/mysql.properties)配置中, jdbc.url, jdbc.username和jdbc.password, 确保库地址, 名称, 端口号, 用户名和密码正确.\n\n### 步骤3: 修改Spring配置\n提供了两种生成器: [DefaultUidGenerator](src/main/java/com/baidu/fsg/uid/impl/DefaultUidGenerator.java)、[CachedUidGenerator](src/main/java/com/baidu/fsg/uid/impl/CachedUidGenerator.java)。如对UID生成性能有要求, 请使用CachedUidGenerator<br/>\n对应Spring配置分别为: [default-uid-spring.xml](src/test/resources/uid/default-uid-spring.xml)、[cached-uid-spring.xml](src/test/resources/uid/cached-uid-spring.xml)\n\n#### DefaultUidGenerator配置\n```xml\n<!-- DefaultUidGenerator -->\n<bean id=\"defaultUidGenerator\" class=\"com.baidu.fsg.uid.impl.DefaultUidGenerator\" lazy-init=\"false\">\n    <property name=\"workerIdAssigner\" ref=\"disposableWorkerIdAssigner\"/>\n\n    <!-- Specified bits & epoch as your demand. No specified the default value will be used -->\n    <property name=\"timeBits\" value=\"29\"/>\n    <property name=\"workerBits\" value=\"21\"/>\n    <property name=\"seqBits\" value=\"13\"/>\n    <property name=\"epochStr\" value=\"2016-09-20\"/>\n</bean>\n \n<!-- 用完即弃的WorkerIdAssigner，依赖DB操作 -->\n<bean id=\"disposableWorkerIdAssigner\" class=\"com.baidu.fsg.uid.worker.DisposableWorkerIdAssigner\" />\n\n```\n\n#### CachedUidGenerator配置\n```xml\n<!-- CachedUidGenerator -->\n<bean id=\"cachedUidGenerator\" class=\"com.baidu.fsg.uid.impl.CachedUidGenerator\">\n    <property name=\"workerIdAssigner\" ref=\"disposableWorkerIdAssigner\" />\n \n    <!-- 以下为可选配置, 如未指定将采用默认值 -->\n    <!-- Specified bits & epoch as your demand. No specified the default value will be used -->\n    <property name=\"timeBits\" value=\"29\"/>\n    <property name=\"workerBits\" value=\"21\"/>\n    <property name=\"seqBits\" value=\"13\"/>\n    <property name=\"epochStr\" value=\"2016-09-20\"/>\n \n    <!-- RingBuffer size扩容参数, 可提高UID生成的吞吐量. -->\n    <!-- 默认:3， 原bufferSize=8192, 扩容后bufferSize= 8192 << 3 = 65536 -->\n    <property name=\"boostPower\" value=\"3\"></property>\n \n    <!-- 指定何时向RingBuffer中填充UID, 取值为百分比(0, 100), 默认为50 -->\n    <!-- 举例: bufferSize=1024, paddingFactor=50 -> threshold=1024 * 50 / 100 = 512. -->\n    <!-- 当环上可用UID数量 < 512时, 将自动对RingBuffer进行填充补全 -->\n    <property name=\"paddingFactor\" value=\"50\"></property>\n \n    <!-- 另外一种RingBuffer填充时机, 在Schedule线程中, 周期性检查填充 -->\n    <!-- 默认:不配置此项, 即不实用Schedule线程. 如需使用, 请指定Schedule线程时间间隔, 单位:秒 -->\n    <property name=\"scheduleInterval\" value=\"60\"></property>\n \n    <!-- 拒绝策略: 当环已满, 无法继续填充时 -->\n    <!-- 默认无需指定, 将丢弃Put操作, 仅日志记录. 如有特殊需求, 请实现RejectedPutBufferHandler接口(支持Lambda表达式) -->\n    <property name=\"rejectedPutBufferHandler\" ref=\"XxxxYourPutRejectPolicy\"></property>\n \n    <!-- 拒绝策略: 当环已空, 无法继续获取时 -->\n    <!-- 默认无需指定, 将记录日志, 并抛出UidGenerateException异常. 如有特殊需求, 请实现RejectedTakeBufferHandler接口(支持Lambda表达式) -->\n    <property name=\"rejectedTakeBufferHandler\" ref=\"XxxxYourTakeRejectPolicy\"></property>\n \n</bean>\n \n<!-- 用完即弃的WorkerIdAssigner, 依赖DB操作 -->\n<bean id=\"disposableWorkerIdAssigner\" class=\"com.baidu.fsg.uid.worker.DisposableWorkerIdAssigner\" />\n \n```\n\n#### Mybatis配置\n[mybatis-spring.xml](src/test/resources/uid/mybatis-spring.xml)配置说明如下:\n\n```xml\n<!-- Spring annotation扫描 -->\n<context:component-scan base-package=\"com.baidu.fsg.uid\" />\n\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"mapperLocations\" value=\"classpath:/META-INF/mybatis/mapper/M_WORKER*.xml\" />\n</bean>\n\n<!-- 事务相关配置 -->\n<tx:annotation-driven transaction-manager=\"transactionManager\" order=\"1\" />\n\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t<property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n\n<!-- Mybatis Mapper扫描 -->\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t<property name=\"annotationClass\" value=\"org.springframework.stereotype.Repository\" />\n\t<property name=\"basePackage\" value=\"com.baidu.fsg.uid.worker.dao\" />\n\t<property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n</bean>\n\n<!-- 数据源配置 -->\n<bean id=\"dataSource\" parent=\"abstractDataSource\">\n\t<property name=\"driverClassName\" value=\"${mysql.driver}\" />\n\t<property name=\"maxActive\" value=\"${jdbc.maxActive}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n</bean>\n\n<bean id=\"abstractDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" destroy-method=\"close\">\n\t<property name=\"filters\" value=\"${datasource.filters}\" />\n\t<property name=\"defaultAutoCommit\" value=\"${datasource.defaultAutoCommit}\" />\n\t<property name=\"initialSize\" value=\"${datasource.initialSize}\" />\n\t<property name=\"minIdle\" value=\"${datasource.minIdle}\" />\n\t<property name=\"maxWait\" value=\"${datasource.maxWait}\" />\n\t<property name=\"testWhileIdle\" value=\"${datasource.testWhileIdle}\" />\n\t<property name=\"testOnBorrow\" value=\"${datasource.testOnBorrow}\" />\n\t<property name=\"testOnReturn\" value=\"${datasource.testOnReturn}\" />\n\t<property name=\"validationQuery\" value=\"${datasource.validationQuery}\" />\n\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"${datasource.timeBetweenEvictionRunsMillis}\" />\n\t<property name=\"minEvictableIdleTimeMillis\" value=\"${datasource.minEvictableIdleTimeMillis}\" />\n\t<property name=\"logAbandoned\" value=\"${datasource.logAbandoned}\" />\n\t<property name=\"removeAbandoned\" value=\"${datasource.removeAbandoned}\" />\n\t<property name=\"removeAbandonedTimeout\" value=\"${datasource.removeAbandonedTimeout}\" />\n</bean>\n\n<bean id=\"batchSqlSession\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n\t<constructor-arg index=\"0\" ref=\"sqlSessionFactory\" />\n\t<constructor-arg index=\"1\" value=\"BATCH\" />\n</bean>\n```\n\n### 步骤4: 运行示例单测\n运行单测[CachedUidGeneratorTest](src/test/java/com/baidu/fsg/uid/CachedUidGeneratorTest.java), 展示UID生成、解析等功能\n```java\n@Resource\nprivate UidGenerator uidGenerator;\n\n@Test\npublic void testSerialGenerate() {\n    // Generate UID\n    long uid = uidGenerator.getUID();\n\n    // Parse UID into [Timestamp, WorkerId, Sequence]\n    // {\"UID\":\"180363646902239241\",\"parsed\":{    \"timestamp\":\"2017-01-19 12:15:46\",    \"workerId\":\"4\",    \"sequence\":\"9\"        }}\n    System.out.println(uidGenerator.parseUID(uid));\n\n}\n```\n\n### 关于UID比特分配的建议\n对于并发数要求不高、期望长期使用的应用, 可增加```timeBits```位数, 减少```seqBits```位数. 例如节点采取用完即弃的WorkerIdAssigner策略, 重启频率为12次/天,\n那么配置成```{\"workerBits\":23,\"timeBits\":31,\"seqBits\":9}```时, 可支持28个节点以整体并发量14400 UID/s的速度持续运行68年.\n\n对于节点重启频率频繁、期望长期使用的应用, 可增加```workerBits```和```timeBits```位数, 减少```seqBits```位数. 例如节点采取用完即弃的WorkerIdAssigner策略, 重启频率为24*12次/天,\n那么配置成```{\"workerBits\":27,\"timeBits\":30,\"seqBits\":6}```时, 可支持37个节点以整体并发量2400 UID/s的速度持续运行34年.\n\n#### 吞吐量测试\n在MacBook Pro（2.7GHz Intel Core i5, 8G DDR3）上进行了CachedUidGenerator（单实例）的UID吞吐量测试. <br/>\n首先固定住workerBits为任选一个值(如20), 分别统计timeBits变化时(如从25至32, 总时长分别对应1年和136年)的吞吐量, 如下表所示:<br/>\n\n|timeBits|25|26|27|28|29|30|31|32|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,831,465|7,007,279|6,679,625|6,499,205|6,534,971|7,617,440|6,186,930|6,364,997|\n\n![throughput1](doc/throughput1.png)\n\n再固定住timeBits为任选一个值(如31), 分别统计workerBits变化时(如从20至29, 总重启次数分别对应1百万和500百万)的吞吐量, 如下表所示:<br/>\n\n|workerBits|20|21|22|23|24|25|26|27|28|29|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,186,930|6,642,727|6,581,661|6,462,726|6,774,609|6,414,906|6,806,266|6,223,617|6,438,055|6,435,549|\n\n![throughput1](doc/throughput2.png)\n\n由此可见, 不管如何配置, CachedUidGenerator总能提供**600万/s**的稳定吞吐量, 只是使用年限会有所减少. 这真的是太棒了.\n\n最后, 固定住workerBits和timeBits位数(如23和31), 分别统计不同数目(如1至8,本机CPU核数为4)的UID使用者情况下的吞吐量,<br/>\n\n|workerBits|1|2|3|4|5|6|7|8|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|throughput|6,462,726|6,542,259|6,077,717|6,377,958|7,002,410|6,599,113|7,360,934|6,490,969|\n\n![throughput1](doc/throughput3.png)"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.76171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <name>UID-Generator</name>\n    <description>An unique id generator</description>\n\n    <groupId>com.baidu.fsg</groupId>\n    <artifactId>uid-generator</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <!-- Properties -->\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <jdk.version>1.8</jdk.version>\n        <spring.version>4.2.5.RELEASE</spring.version>\n        <slf4j-version>1.7.7</slf4j-version>\n    </properties>\n\n    <!-- Dependencies -->\n    <dependencies>\n        <!-- Spring -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <!-- MyBatis -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>1.2.4</version>\n        </dependency>\n\n        <!-- Apache Commons -->\n        <dependency>\n            <groupId>commons-collections</groupId>\n            <artifactId>commons-collections</artifactId>\n            <version>3.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.6</version>\n        </dependency>\n\n        <!-- Logger -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j-version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>${slf4j-version}</version>\n        </dependency>\n\n        <!-- Test. Scope test only -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.18</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.19</version>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>${jdk.version}</source>\n                    <target>${jdk.version}</target>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                </configuration>\n                <version>3.5.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.3</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}