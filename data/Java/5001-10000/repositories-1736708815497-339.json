{
  "metadata": {
    "timestamp": 1736708815497,
    "page": 339,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ddd-by-examples/library",
      "stars": 5038,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.26953125,
          "content": "/target/\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/build/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.16015625,
          "content": "FROM openjdk:11.0.1-jre-slim-stretch\nEXPOSE 8080\nWORKDIR /app\nARG JAR=library-0.0.1-SNAPSHOT.jar\n\nCOPY  /target/$JAR /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n"
        },
        {
          "name": "Dockerfile.build",
          "type": "blob",
          "size": 0.263671875,
          "content": "FROM maven:3.6-jdk-11-slim as BUILD\nCOPY . /src\nWORKDIR /src\nRUN mvn install -DskipTests\n\nFROM openjdk:11.0.1-jre-slim-stretch\nEXPOSE 8080\nWORKDIR /app\nARG JAR=library-0.0.1-SNAPSHOT.jar\n\nCOPY --from=BUILD /src/target/$JAR /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Jakub Pilimon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.8271484375,
          "content": "[![CircleCI](https://circleci.com/gh/ddd-by-examples/library.svg?style=svg)](https://circleci.com/gh/ddd-by-examples/library)\n[![Code Coverage](https://codecov.io/gh/ddd-by-examples/library/branch/master/graph/badge.svg)](https://codecov.io/gh/ddd-by-examples/library)\n\n# Table of contents\n\n1. [About](#about)\n2. [Domain description](#domain-description)\n3. [General assumptions](#general-assumptions)  \n    3.1 [Process discovery](#process-discovery)  \n    3.2 [Project structure and architecture](#project-structure-and-architecture)    \n    3.3 [Aggregates](#aggregates)  \n    3.4 [Events](#events)  \n    3.4.1 [Events in Repositories](#events-in-repositories)   \n    3.5 [ArchUnit](#archunit)  \n    3.6 [Functional thinking](#functional-thinking)  \n    3.7 [No ORM](#no-orm)  \n    3.8 [Architecture-code gap](#architecture-code-gap)  \n    3.9 [Model-code gap](#model-code-gap)   \n    3.10 [Spring](#spring)  \n    3.11 [Tests](#tests)  \n4. [How to contribute](#how-to-contribute)\n5. [References](#references)\n\n## About\n\nThis is a project of a library, driven by real [business requirements](#domain-description).\nWe use techniques strongly connected with Domain Driven Design, Behavior-Driven Development,\nEvent Storming, User Story Mapping. \n\n## Domain description\n\nA public library allows patrons to place books on hold at its various library branches.\nAvailable books can be placed on hold only by one patron at any given point in time.\nBooks are either circulating or restricted, and can have retrieval or usage fees.\nA restricted book can only be held by a researcher patron. A regular patron is limited\nto five holds at any given moment, while a researcher patron is allowed an unlimited number\nof holds. An open-ended book hold is active until the patron checks out the book, at which time it\nis completed. A closed-ended book hold that is not completed within a fixed number of \ndays after it was requested will expire. This check is done at the beginning of a day by \ntaking a look at daily sheet with expiring holds. Only a researcher patron can request\nan open-ended hold duration. Any patron with more than two overdue checkouts at a library\nbranch will get a rejection if trying a hold at that same library branch. A book can be\nchecked out for up to 60 days. Check for overdue checkouts is done by taking a look at\ndaily sheet with overdue checkouts. Patron interacts with his/her current holds, checkouts, etc.\nby taking a look at patron profile. Patron profile looks like a daily sheet, but the\ninformation there is limited to one patron and is not necessarily daily. Currently a\npatron can see current holds (not canceled nor expired) and current checkouts (including overdue).\nAlso, he/she is able to hold a book and cancel a hold.\n\nHow actually a patron knows which books are there to lend? Library has its catalogue of\nbooks where books are added together with their specific instances. A specific book\ninstance of a book can be added only if there is book with matching ISBN already in\nthe catalogue.  Book must have non-empty title and price. At the time of adding an instance\nwe decide whether it will be Circulating or Restricted. This enables\nus to have book with same ISBN as circulated and restricted at the same time (for instance,\nthere is a book signed by the author that we want to keep as Restricted)\n\n## General assumptions\n\n### Process discovery\n\nThe first thing we started with was domain exploration with the help of Big Picture EventStorming.\nThe description you found in the previous chapter, landed on our virtual wall:    \n![Event Storming Domain description](docs/images/eventstorming-domain-desc.png)   \nThe EventStorming session led us to numerous discoveries, modeled with the sticky notes:  \n![Event Storming Big Picture](docs/images/eventstorming-big-picture.jpg)   \nDuring the session we discovered following definitions:  \n![Event Storming Definitions](docs/images/eventstorming-definitions.png)    \n\nThis made us think of real life scenarios that might happen. We discovered them described with the help of\nthe **Example mapping**:  \n![Example mapping](docs/images/example-mapping.png)  \n\nThis in turn became the base for our *Design Level* sessions, where we analyzed each example:  \n![Example mapping](docs/images/eventstorming-design-level.jpg)  \n\nPlease follow the links below to get more details on each of the mentioned steps:\n- [Big Picture EventStorming](./docs/big-picture.md)\n- [Example Mapping](docs/example-mapping.md)\n- [Design Level EventStorming](docs/design-level.md)\n\n### Project structure and architecture\nAt the very beginning, not to overcomplicate the project, we decided to assign each bounded context\nto a separate package, which means that the system is a modular monolith. There are no obstacles, though,\nto put contexts into maven modules or finally into microservices.\n\nBounded contexts should (amongst others) introduce autonomy in the sense of architecture. Thus, each module\nencapsulating the context has its own local architecture aligned to problem complexity.\nIn the case of a context, where we identified true business logic (**lending**) we introduced a domain model\nthat is a simplified (for the purpose of the project) abstraction of the reality and utilized\nhexagonal architecture. In the case of a context, that during Event Storming turned out to lack any complex\ndomain logic, we applied CRUD-like local architecture.  \n\n![Architecture](docs/images/architecture-big-picture.png) \n\nIf we are talking about hexagonal architecture, it lets us separate domain and application logic from\nframeworks (and infrastructure). What do we gain with this approach? Firstly, we can unit test most important\npart of the application - **business logic** - usually without the need to stub any dependency.\nSecondly, we create ourselves an opportunity to adjust infrastructure layer without the worry of\nbreaking the core functionality. In the infrastructure layer we intensively use Spring Framework\nas probably the most mature and powerful application framework with an incredible test support.\nMore information about how we use Spring you will find [here](#spring).\n\nAs we already mentioned, the architecture was driven by Event Storming sessions. Apart from identifying\ncontexts and their complexity, we could also make a decision that we separate read and write models (CQRS).\nAs an example you can have a look at **Patron Profiles** and *Daily Sheets*.\n\n### Aggregates\nAggregates discovered during Event Storming sessions communicate with each other with events. There is\na contention, though, should they be consistent immediately or eventually? As aggregates in general\ndetermine business boundaries, eventual consistency sounds like a better choice, but choices in software\nare never costless. Providing eventual consistency requires some infrastructural tools, like message broker\nor event store. That's why we could (and did) start with immediate consistency.\n\n> Good architecture is the one which postpones all important decisions\n\n... that's why we made it easy to change the consistency model, providing tests for each option, including\nbasic implementations based on **DomainEvents** interface, which can be adjusted to our needs and\ntoolset in future. Let's have a look at following examples:\n\n* Immediate consistency\n    ```groovy\n    def 'should synchronize Patron, Book and DailySheet with events'() {\n        given:\n            bookRepository.save(book)\n        and:\n            patronRepo.publish(patronCreated())\n        when:\n            patronRepo.publish(placedOnHold(book))\n        then:\n            patronShouldBeFoundInDatabaseWithOneBookOnHold(patronId)\n        and:\n            bookReactedToPlacedOnHoldEvent()\n        and:\n            dailySheetIsUpdated()\n    }\n    \n    boolean bookReactedToPlacedOnHoldEvent() {\n        return bookRepository.findBy(book.bookId).get() instanceof BookOnHold\n    }\n    \n    boolean dailySheetIsUpdated() {\n        return new JdbcTemplate(datasource).query(\"select count(*) from holds_sheet s where s.hold_by_patron_id = ?\",\n                [patronId.patronId] as Object[],\n                new ColumnMapRowMapper()).get(0)\n                .get(\"COUNT(*)\") == 1\n    }\n    ```\n   _Please note that here we are just reading from database right after events are being published_\n   \n   Simple implementation of the event bus is based on Spring application events:\n    ```java\n    @AllArgsConstructor\n    public class JustForwardDomainEventPublisher implements DomainEvents {\n    \n        private final ApplicationEventPublisher applicationEventPublisher;\n    \n        @Override\n        public void publish(DomainEvent event) {\n            applicationEventPublisher.publishEvent(event);\n        }\n    }\n    ```\n\n* Eventual consistency\n    ```groovy\n    def 'should synchronize Patron, Book and DailySheet with events'() {\n        given:\n            bookRepository.save(book)\n        and:\n            patronRepo.publish(patronCreated())\n        when:\n            patronRepo.publish(placedOnHold(book))\n        then:\n            patronShouldBeFoundInDatabaseWithOneBookOnHold(patronId)\n        and:\n            bookReactedToPlacedOnHoldEvent()\n        and:\n            dailySheetIsUpdated()\n    }\n    \n    void bookReactedToPlacedOnHoldEvent() {\n        pollingConditions.eventually {\n            assert bookRepository.findBy(book.bookId).get() instanceof BookOnHold\n        }\n    }\n    \n    void dailySheetIsUpdated() {\n        pollingConditions.eventually {\n            assert countOfHoldsInDailySheet() == 1\n        }\n    }\n    ```\n    _Please note that the test looks exactly the same as previous one, but now we utilized Groovy's\n    **PollingConditions** to perform asynchronous functionality tests_\n\n    Sample implementation of event bus is following:\n    \n    ```java\n    @AllArgsConstructor\n    public class StoreAndForwardDomainEventPublisher implements DomainEvents {\n    \n        private final JustForwardDomainEventPublisher justForwardDomainEventPublisher;\n        private final EventsStorage eventsStorage;\n    \n        @Override\n        public void publish(DomainEvent event) {\n            eventsStorage.save(event);\n        }\n    \n        @Scheduled(fixedRate = 3000L)\n        @Transactional\n        public void publishAllPeriodically() {\n            List<DomainEvent> domainEvents = eventsStorage.toPublish();\n            domainEvents.forEach(justForwardDomainEventPublisher::publish);\n            eventsStorage.published(domainEvents);\n        }\n    }\n    ```\n\nTo clarify, we should always aim for aggregates that can handle a business operation atomically\n(transactionally if you like), so each aggregate should be as independent and decoupled from other\naggregates as possible. Thus, eventual consistency is promoted. As we already mentioned, it comes\nwith some tradeoffs, so from the pragmatic point of view immediate consistency is also a choice.\nYou might ask yourself a question now: _What if I don't have any events yet?_. Well, a pragmatic\napproach would be to encapsulate the communication between aggregates in a _Service-like_ class,\nwhere you could call proper aggregates line by line explicitly.\n\n### Events\nTalking about inter-aggregate communication, we must remember that events reduce coupling, but don't remove\nit completely. Thus, it is very vital to share(publish) only those events, that are necessary for other\naggregates to exist and function. Otherwise there is a threat that the level of coupling will increase\nintroducing **feature envy**, because other aggregates might start using those events to perform actions\nthey are not supposed to perform. A solution to this problem could be the distinction of domain events\nand integration events, which will be described here soon.  \n\n### Events in Repositories \nRepositories are one of the most popular design pattern. They abstract our domain model from data layer. \nIn other words, they deal with state. That said, a common use-case is when we pass a new state to our repository,\nso that it gets persisted. It may look like so:\n\n```java\npublic class BusinessService {\n   \n    private final PatronRepository patronRepository;\n    \n    void businessMethod(PatronId patronId) {\n        Patron patron = patronRepository.findById(patronId);\n        //do sth\n        patronRepository.save(patron);\n    }\n}\n```\n\nConceptually, between 1st and 3rd line of that business method we change state of our Patron from A to B. \nThis change might be calculated by dirty checking or we might just override entire Patron state in the database. \nThird option is _Let's make implicit explicit_ and actually call this state change A->B an **event**. \nAfter all, event-driven architecture is all about promoting state changes as domain events.\n\nThanks to this our domain model may become immutable and just return events as results of invoking a command like so:\n\n```java\npublic BookPlacedOnHold placeOnHold(AvailableBook book) {\n      ...\n}\n```\n\nAnd our repository might operate directly on events like so:\n\n```java\npublic interface PatronRepository {\n     void save(PatronEvent event) {\n}\n```\n\n### ArchUnit\n\nOne of the main components of a successful project is technical leadership that lets the team go in the right\ndirection. Nevertheless, there are tools that can support teams in keeping the code clean and protect the\narchitecture, so that the project won't become a Big Ball of Mud, and thus will be pleasant to develop and\nto maintain. The first option, the one we proposed, is [ArchUnit](https://www.archunit.org/) - a Java architecture\ntest tool. ArchUnit lets you write unit tests of your architecture, so that it is always consistent with initial\nvision. Maven modules could be an alternative as well, but let's focus on the former.\n\nIn terms of hexagonal architecture, it is essential to ensure, that we do not mix different levels of\nabstraction (hexagon levels):\n```java \n@ArchTest\npublic static final ArchRule model_should_not_depend_on_infrastructure =\n    noClasses()\n        .that()\n        .resideInAPackage(\"..model..\")\n        .should()\n        .dependOnClassesThat()\n        .resideInAPackage(\"..infrastructure..\");\n```      \nand that frameworks do not affect the domain model  \n```java\n@ArchTest\npublic static final ArchRule model_should_not_depend_on_spring =\n    noClasses()\n        .that()\n        .resideInAPackage(\"..io.pillopl.library.lending..model..\")\n        .should()\n        .dependOnClassesThat()\n        .resideInAPackage(\"org.springframework..\");\n```    \n\n### Functional thinking\nWhen you look at the code you might find a scent of functional programming. Although we do not follow\na _clean_ FP, we try to think of business processes as pipelines or workflows, utilizing functional style through\nfollowing concepts.\n\n_Please note that this is not a reference project for FP._\n\n#### Immutable objects\nEach class that represents a business concept is immutable, thanks to which we:\n* provide full encapsulation and objects' states protection,\n* secure objects for multithreaded access,\n* control all side effects much clearer. \n\n#### Pure functions\nWe model domain operations, discovered in Design Level Event Storming, as pure functions, and declare them in\nboth domain and application layers in the form of Java's functional interfaces. Their implementations are placed\nin infrastructure layer as ordinary methods with side effects. Thanks to this approach we can follow the abstraction\nof ubiquitous language explicitly, and keep this abstraction implementation-agnostic. As an example, you could have\na look at `FindAvailableBook` interface and its implementation:\n\n```java\n@FunctionalInterface\npublic interface FindAvailableBook {\n\n    Option<AvailableBook> findAvailableBookBy(BookId bookId);\n}\n```\n\n```java\n@AllArgsConstructor\nclass BookDatabaseRepository implements FindAvailableBook {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    @Override\n    public Option<AvailableBook> findAvailableBookBy(BookId bookId) {\n        return Match(findBy(bookId)).of(\n                Case($Some($(instanceOf(AvailableBook.class))), Option::of),\n                Case($(), Option::none)\n        );\n    }  \n\n    Option<Book> findBy(BookId bookId) {\n        return findBookById(bookId)\n                .map(BookDatabaseEntity::toDomainModel);\n    }\n\n    private Option<BookDatabaseEntity> findBookById(BookId bookId) {\n        return Try\n                .ofSupplier(() -> of(jdbcTemplate.queryForObject(\"SELECT b.* FROM book_database_entity b WHERE b.book_id = ?\",\n                                      new BeanPropertyRowMapper<>(BookDatabaseEntity.class), bookId.getBookId())))\n                .getOrElse(none());\n    }  \n} \n```\n    \n#### Type system\n_Type system - like_ modelling - we modelled each domain object's state discovered during EventStorming as separate\nclasses: `AvailableBook`, `BookOnHold`, `CheckedOutBook`. With this approach we provide much clearer abstraction than\nhaving a single `Book` class with an enum-based state management. Moving the logic to these specific classes brings\nSingle Responsibility Principle to a different level. Moreover, instead of checking invariants in every business method\nwe leave the role to the compiler. As an example, please consider following scenario: _you can place on hold only a book\nthat is currently available_. We could have done it in a following way:\n```java\npublic Either<BookHoldFailed, BookPlacedOnHoldEvents> placeOnHold(Book book) {\n  if (book.status == AVAILABLE) {  \n      ...\n  }\n}\n```\nbut we use the _type system_ and declare method of following signature\n```java\npublic Either<BookHoldFailed, BookPlacedOnHoldEvents> placeOnHold(AvailableBook book) {\n      ...\n}\n```  \nThe more errors we discover at compile time the better.\n\nYet another advantage of applying such type system is that we can represent business flows and state transitions\nwith functions much easier. As an example, following functions:\n```\nplaceOnHold: AvailableBook -> BookHoldFailed | BookPlacedOnHold\ncancelHold: BookOnHold -> BookHoldCancelingFailed | BookHoldCanceled\n``` \nare much more concise and descriptive than these:\n```\nplaceOnHold: Book -> BookHoldFailed | BookPlacedOnHold\ncancelHold: Book -> BookHoldCancelingFailed | BookHoldCanceled\n```\nas here we have a lot of constraints hidden within function implementations.\n\nMoreover if you think of your domain as a set of operations (functions) that are being executed on business objects\n(aggregates) you don't think of any execution model (like async processing). It is fine, because you don't have to.\nDomain functions are free from I/O operations, async, and other side-effects-prone things, which are put into the\ninfrastructure layer. Thanks to this, we can easily test them without mocking mentioned parts. \n\n#### Monads\nBusiness methods might have different results. One might return a value or a `null`, throw an exception when something\nunexpected happens or just return different objects under different circumstances. All those situations are typical\nto object-oriented languages like Java, but do not fit into functional style. We are dealing with this issues\nwith monads (monadic containers provided by [Vavr](https://www.vavr.io)):\n* When a method returns optional value, we use the `Option` monad:\n\n    ```java\n    Option<Book> findBy(BookId bookId) {\n        ...\n    }\n    ```\n\n* When a method might return one of two possible values, we use the `Either` monad:\n\n    ```java\n    Either<BookHoldFailed, BookPlacedOnHoldEvents> placeOnHold(AvailableBook book) {\n        ...\n    }\n    ```\n\n* When an exception might occur, we use `Try` monad:\n\n    ```java\n    Try<Result> placeOnHold(@NonNull PlaceOnHoldCommand command) {\n        ...\n    }\n    ```\n\nThanks to this, we can follow the functional programming style, but we also enrich our domain language and\nmake our code much more readable for the clients.\n\n#### Pattern Matching\nDepending on a type of a given book object we often need to perform different actions. Series of if/else or switch/case statements\ncould be a choice, but it is the pattern matching that provides the most conciseness and flexibility. With the code\nlike below we can check numerous patterns against objects and access their constituents, so our code has a minimal dose\nof language-construct noise:\n```java\nprivate Book handleBookPlacedOnHold(Book book, BookPlacedOnHold bookPlacedOnHold) {\n    return API.Match(book).of(\n        Case($(instanceOf(AvailableBook.class)), availableBook -> availableBook.handle(bookPlacedOnHold)),\n        Case($(instanceOf(BookOnHold.class)), bookOnHold -> raiseDuplicateHoldFoundEvent(bookOnHold, bookPlacedOnHold)),\n        Case($(), () -> book)\n    );\n}\n```\n\n### (No) ORM\nIf you run `mvn dependency:tree` you won't find any JPA implementation. Although we think that ORM solutions (like Hibernate)\nare very powerful and useful, we decided not to use them, as we wouldn't utilize their features. What features are\ntalking about? Lazy loading, caching, dirty checking. Why don't we need them? We want to have more control\nover SQL queries and minimize the object-relational impedance mismatch ourselves. Moreover, thanks to relatively\nsmall aggregates, containing as little data as it is required to protect the invariants, we don't need the\nlazy loading mechanism either.\nWith Hexagonal Architecture we have the ability to separate domain and persistence models and test them\nindependently. Moreover, we can also introduce different persistence strategies for different aggregates. \nIn this project, we utilize both plain SQL queries and `JdbcTemplate` and use new and very promising \nproject called Spring Data JDBC, that is free from the JPA-related overhead mentioned before.\nPlease find below an example of a repository:\n\n```java\ninterface PatronEntityRepository extends CrudRepository<PatronDatabaseEntity, Long> {\n\n    @Query(\"SELECT p.* FROM patron_database_entity p where p.patron_id = :patronId\")\n    PatronDatabaseEntity findByPatronId(@Param(\"patronId\") UUID patronId);\n\n}\n```\n\nAt the same time we propose other way of persisting aggregates, with plain SQL queries and `JdbcTemplate`:  \n\n```java\n@AllArgsConstructor\nclass BookDatabaseRepository implements BookRepository, FindAvailableBook, FindBookOnHold {\n\n    private final JdbcTemplate jdbcTemplate;\n\n    @Override\n    public Option<Book> findBy(BookId bookId) {\n        return findBookById(bookId)\n                .map(BookDatabaseEntity::toDomainModel);\n    }\n\n    private Option<BookDatabaseEntity> findBookById(BookId bookId) {\n        return Try\n                .ofSupplier(() -> of(jdbcTemplate.queryForObject(\"SELECT b.* FROM book_database_entity b WHERE b.book_id = ?\",\n                                     new BeanPropertyRowMapper<>(BookDatabaseEntity.class), bookId.getBookId())))\n                .getOrElse(none());\n    }\n    \n    ...\n}\n```\n_Please note that despite having the ability to choose different persistence implementations for aggregates\nit is recommended to stick to one option within the app/team_ \n    \n### Architecture-code gap\nWe put a lot of attention to keep the consistency between the overall architecture (including diagrams)\nand the code structure. Having identified bounded contexts we could organize them in modules (packages, to\nbe more specific). Thanks to this we gain the famous microservices' autonomy, while having a monolithic\napplication. Each package has well defined public API, encapsulating all implementation details by using\npackage-protected or private scopes.\n\nJust by looking at the package structure:\n\n```\n└── library\n    ├── catalogue\n    ├── commons\n    │   ├── aggregates\n    │   ├── commands\n    │   └── events\n    │       └── publisher\n    └── lending\n        ├── book\n        │   ├── application\n        │   ├── infrastructure\n        │   └── model\n        ├── dailysheet\n        │   ├── infrastructure\n        │   └── model\n        ├── librarybranch\n        │   └── model\n        ├── patron\n        │   ├── application\n        │   ├── infrastructure\n        │   └── model\n        └── patronprofile\n            ├── infrastructure\n            ├── model\n            └── web\n```\nyou can see that the architecture is screaming that it has two bounded contexts: **catalogue**\nand **lending**. Moreover, the **lending context** is built around five business objects: **book**,\n**dailysheet**, **librarybranch**, **patron**, and **patronprofile**, while **catalogue** has no subpackages,\nwhich suggests that it might be a CRUD with no complex logic inside. Please find the architecture diagram\nbelow.\n\n![Component diagram](docs/c4/component-diagram.png)\n\nYet another advantage of this approach comparing to packaging by layer for example is that in order to \ndeliver a functionality you would usually need to do it in one package only, which is the aforementioned\nautonomy. This autonomy, then, could be transferred to the level of application as soon as we split our\n_context-packages_ into separate microservices. Following this considerations, autonomy can be given away\nto a product team that can take care of the whole business area end-to-end.\n\n### Model-code gap\nIn our project we do our best to reduce _model-code gap_ to bare minimum. It means we try to put equal attention\nto both the model and the code and keep them consistent. Below you will find some examples.\n\n#### Placing on hold\n![Placing on hold](docs/images/placing_on_hold.jpg)\n\nStarting with the easiest part, below you will find the model classes corresponding to depicted command and events:\n\n```java\n@Value\nclass PlaceOnHoldCommand {\n    ...\n}\n```\n```java\n@Value\nclass BookPlacedOnHold implements PatronEvent {\n    ...\n}\n```\n```java\n@Value\nclass MaximumNumberOfHoldsReached implements PatronEvent {\n    ...    \n}\n```\n```java\n@Value\nclass BookHoldFailed implements PatronEvent {\n    ...\n}\n```\n\nWe know it might not look impressive now, but if you have a look at the implementation of an aggregate,\nyou will see that the code reflects not only the aggregate name, but also the whole scenario of `PlaceOnHold` \ncommand handling. Let us uncover the details:\n\n```java\npublic class Patron {\n\n    public Either<BookHoldFailed, BookPlacedOnHoldEvents> placeOnHold(AvailableBook book) {\n        return placeOnHold(book, HoldDuration.openEnded());\n    }\n    \n    ...\n}    \n```\n\nThe signature of `placeOnHold` method screams, that it is possible to place a book on hold only when it\nis available (more information about protecting invariants by compiler you will find in [Type system section](#type-system)).\nMoreover, if you try to place available book on hold it can **either** fail (`BookHoldFailed`) or produce some events -\nwhat events?\n\n```java\n@Value\nclass BookPlacedOnHoldEvents implements PatronEvent {\n    @NonNull UUID eventId = UUID.randomUUID();\n    @NonNull UUID patronId;\n    @NonNull BookPlacedOnHold bookPlacedOnHold;\n    @NonNull Option<MaximumNumberOfHoldsReached> maximumNumberOfHoldsReached;\n\n    @Override\n    public Instant getWhen() {\n        return bookPlacedOnHold.when;\n    }\n\n    public static BookPlacedOnHoldEvents events(BookPlacedOnHold bookPlacedOnHold) {\n        return new BookPlacedOnHoldEvents(bookPlacedOnHold.getPatronId(), bookPlacedOnHold, Option.none());\n    }\n\n    public static BookPlacedOnHoldEvents events(BookPlacedOnHold bookPlacedOnHold, MaximumNumberOfHoldsReached maximumNumberOfHoldsReached) {\n        return new BookPlacedOnHoldEvents(bookPlacedOnHold.patronId, bookPlacedOnHold, Option.of(maximumNumberOfHoldsReached));\n    }\n\n    public List<DomainEvent> normalize() {\n        return List.<DomainEvent>of(bookPlacedOnHold).appendAll(maximumNumberOfHoldsReached.toList());\n    }\n}\n```\n\n`BookPlacedOnHoldEvents` is a container for `BookPlacedOnHold` event, and - if patron has 5 book placed on hold already -\n`MaximumNumberOfHoldsReached` (please mind the `Option` monad). You can see now how perfectly the code reflects\nthe model.\n\nIt is not everything, though. In the picture above you can also see a big rectangular yellow card with rules (policies)\nthat define the conditions that need to be fulfilled in order to get the given result. All those rules are implemented \nas functions **either** allowing or rejecting the hold:\n\n![Restricted book policy](docs/images/placing-on-hold-policy-restricted.png)\n```java\nPlacingOnHoldPolicy onlyResearcherPatronsCanHoldRestrictedBooksPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -> {\n    if (toHold.isRestricted() && patron.isRegular()) {\n        return left(Rejection.withReason(\"Regular patrons cannot hold restricted books\"));\n    }\n    return right(new Allowance());\n};\n```\n\n![Overdue checkouts policy](docs/images/placing-on-hold-policy-overdue.png)\n\n```java\nPlacingOnHoldPolicy overdueCheckoutsRejectionPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -> {\n    if (patron.overdueCheckoutsAt(toHold.getLibraryBranch()) >= OverdueCheckouts.MAX_COUNT_OF_OVERDUE_RESOURCES) {\n        return left(Rejection.withReason(\"cannot place on hold when there are overdue checkouts\"));\n    }\n    return right(new Allowance());\n};\n```\n\n![Max number of holds policy](docs/images/placing-on-hold-policy-max.png)\n\n```java\nPlacingOnHoldPolicy regularPatronMaximumNumberOfHoldsPolicy = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -> {\n    if (patron.isRegular() && patron.numberOfHolds() >= PatronHolds.MAX_NUMBER_OF_HOLDS) {\n        return left(Rejection.withReason(\"patron cannot hold more books\"));\n    }\n    return right(new Allowance());\n};\n```\n\n![Open ended hold policy](docs/images/placing-on-hold-policy-open-ended.png)\n\n```java\nPlacingOnHoldPolicy onlyResearcherPatronsCanPlaceOpenEndedHolds = (AvailableBook toHold, Patron patron, HoldDuration holdDuration) -> {\n    if (patron.isRegular() && holdDuration.isOpenEnded()) {\n        return left(Rejection.withReason(\"regular patron cannot place open ended holds\"));\n    }\n    return right(new Allowance());\n};\n```\n\n#### Spring\nSpring Framework seems to be the most popular Java framework ever used. Unfortunately it is also quite common\nto overuse its features in the business code. What you find in this project is that the domain packages\nare fully focused on modelling business problems, and are free from any DI, which makes it easy to\nunit-test it which is invaluable in terms of code reliability and maintainability. It does not mean,\nthough, that we do not use Spring Framework - we do. Below you will find some details:\n- Each bounded context has its own independent application context. It means that we removed the runtime\ncoupling, which is a step towards extracting modules (and microservices). How did we do that? Let's have\na look:\n    ```java\n    @SpringBootConfiguration\n    @EnableAutoConfiguration\n    public class LibraryApplication {\n    \n        public static void main(String[] args) {\n            new SpringApplicationBuilder()\n                    .parent(LibraryApplication.class)\n                    .child(LendingConfig.class).web(WebApplicationType.SERVLET)\n                    .sibling(CatalogueConfiguration.class).web(WebApplicationType.NONE)\n                    .run(args);\n        }\n    }\n    ```\n- As you could see above, we also try not to use component scan wherever possible. Instead we utilize\n`@Configuration` classes where we define module specific beans in the infrastructure layer. Those\nconfiguration classes are explicitly declared in the main application class.\n\n### Tests\nTests are written in a BDD manner, expressing stories defined with Example Mapping.\nIt means we utilize both TDD and Domain Language discovered with Event Storming. \n\nWe also made an effort to show how to create a DSL, that enables to write\ntests as if they were sentences taken from the domain descriptions. Please\nfind an example below:\n\n```groovy\ndef 'should make book available when hold canceled'() {\n    given:\n        BookDSL bookOnHold = aCirculatingBook() with anyBookId() locatedIn anyBranch() placedOnHoldBy anyPatron()\n    and:\n        PatronEvent.BookHoldCanceled bookHoldCanceledEvent = the bookOnHold isCancelledBy anyPatron()\n\n    when:\n        AvailableBook availableBook = the bookOnHold reactsTo bookHoldCanceledEvent\n    then:\n        availableBook.bookId == bookOnHold.bookId\n        availableBook.libraryBranch == bookOnHold.libraryBranchId\n        availableBook.version == bookOnHold.version\n}\n``` \n_Please also note the **when** block, where we manifest the fact that books react to \ncancellation event_\n\n## How to contribute\n\nThe project is still under construction, so if you like it enough to collaborate, just let us\nknow or simply create a Pull Request.\n\n\n## How to Build\n\n### Requirements\n\n* Java 11\n* Maven\n\n### Quickstart\n\nYou can run the library app by simply typing the following:\n\n```console\n$ mvn spring-boot:run\n...\n...\n2019-04-03 15:55:39.162  INFO 18957 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path '/actuator'\n2019-04-03 15:55:39.425  INFO 18957 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n2019-04-03 15:55:39.428  INFO 18957 --- [           main] io.pillopl.library.LibraryApplication    : Started LibraryApplication in 5.999 seconds (JVM running for 23.018)\n\n```\n\n### Build a Jar package\n\nYou can build a jar with maven like so:\n\n```console\n$ mvn clean package\n...\n...\n[INFO] Building jar: /home/pczarkowski/development/spring/library/target/library-0.0.1-SNAPSHOT.jar\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n```\n\n### Build with Docker\n\nIf you've already built the jar file you can run:\n\n```console\ndocker build -t spring/library .\n```\n\nOtherwise you can build the jar file using the multistage dockerfile:\n\n```console\ndocker build -t spring/library -f Dockerfile.build .\n```\n\nEither way once built you can run it like so:\n\n```console\n$ docker run -ti --rm --name spring-library -p 8080:8080 spring/library\n```\n\n### Production ready metrics and visualization\nTo run the application as well as Prometheus and Grafana dashboard for visualizing metrics you can run all services:\n\n```console\n$ docker-compose up\n```\n\nIf everything goes well, you can access the following services at given location:\n* http://localhost:8080/actuator/prometheus - published Micrometer metrics\n* http://localhost:9090 - Prometheus dashboard\n* http://localhost:3000 - Grafana dashboard\n\nIn order to see some metrics, you must create a dashboard. Go to `Create` -> `Import` and select attached `jvm-micrometer_rev8.json`. File has been pulled from \n`https://grafana.com/grafana/dashboards/4701`.\n\nPlease note application will be run with `local` Spring profile to setup some initial data.\n\n## References\n\n1. [Introducing EventStorming](https://leanpub.com/introducing_eventstorming) by Alberto Brandolini\n2. [Domain Modelling Made Functional](https://pragprog.com/book/swdddf/domain-modeling-made-functional) by Scott Wlaschin\n3. [Software Architecture for Developers](https://softwarearchitecturefordevelopers.com) by Simon Brown\n4. [Clean Architecture](https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164) by Robert C. Martin\n5. [Domain-Driven Design: Tackling Complexity in the Heart of Software](https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215) by Eric Evans\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.681640625,
          "content": "version: \"3\"\nservices:\n  app:\n    image: spring/library:latest\n    container_name: 'library'\n    build:\n      context: ./\n      dockerfile: Dockerfile\n    environment:\n      - \"SPRING_PROFILES_ACTIVE=local\"\n    ports:\n      - '8080:8080'\n\n  prometheus:\n    image: prom/prometheus:v2.4.3\n    container_name: 'prometheus'\n    volumes:\n      - ./monitoring/prometheus:/etc/prometheus/\n    ports:\n      - '9090:9090'\n\n  grafana:\n    image: grafana/grafana:5.2.4\n    container_name: 'grafana'\n    ports:\n      - '3000:3000'\n    volumes:\n      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/\n    env_file:\n      - ./monitoring/grafana/config.monitoring\n    depends_on:\n      - prometheus\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lombok.config",
          "type": "blob",
          "size": 0.041015625,
          "content": "lombok.addLombokGeneratedAnnotation = true"
        },
        {
          "name": "monitoring",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 8.8994140625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven2 Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n  # TODO classpath?\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`which java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\"\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        wget \"$jarUrl\" -O \"$wrapperJarPath\"\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        curl -o \"$wrapperJarPath\" \"$jarUrl\"\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 5.673828125,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Maven2 Start Up Batch script\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM M2_HOME - location of maven2's installed home dir\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM set title of command window\ntitle %0\n@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\nif exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\"\nFOR /F \"tokens=1,2 delims==\" %%A IN (%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties) DO (\n\tIF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B \n)\n\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\nif exist %WRAPPER_JAR% (\n    echo Found %WRAPPER_JAR%\n) else (\n    echo Couldn't find %WRAPPER_JAR%, downloading it ...\n\techo Downloading from: %DOWNLOAD_URL%\n    powershell -Command \"(New-Object Net.WebClient).DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"\n    echo Finished downloading %WRAPPER_JAR%\n)\n@REM End of extension\n\n%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 9.384765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.0.M6</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>io.pillopl</groupId>\n    <artifactId>library</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>library</name>\n    <description>Domain-Driven Design example</description>\n\n    <properties>\n        <java.version>11</java.version>\n        <spring-hateoas.version>1.0.0.BUILD-SNAPSHOT</spring-hateoas.version>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>central</id>\n            <url>https://repo1.maven.org/maven2/</url>\n        </repository>\n        <repository>\n            <id>spring-libs-snapshot</id>\n            <url>https://repo.spring.io/snapshot</url>\n        </repository>\n        <repository>\n            <id>repository.spring.milestone</id>\n            <name>Spring Milestone Repository</name>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n    <pluginRepositories>\n        <pluginRepository>\n            <id>central</id>\n            <url>https://repo1.maven.org/maven2/</url>\n        </pluginRepository>\n        <pluginRepository>\n            <id>spring-libs-snapshot</id>\n            <url>https://repo.spring.io/snapshot</url>\n        </pluginRepository>\n        <pluginRepository>\n            <id>repository.spring.release</id>\n            <name>Spring GA Repository</name>\n            <url>https://repo.spring.io/plugins-release/</url>\n        </pluginRepository>\n    </pluginRepositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.vavr</groupId>\n            <artifactId>vavr</artifactId>\n            <version>0.9.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-jdbc</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-hateoas</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-registry-prometheus</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.4</version>\n            <scope>provided</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.tngtech.archunit</groupId>\n            <artifactId>archunit-junit4</artifactId>\n            <version>0.9.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.codehaus.groovy</groupId>\n            <artifactId>groovy</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.spockframework</groupId>\n            <artifactId>spock-spring</artifactId>\n            <version>1.2-groovy-2.5</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.spockframework</groupId>\n            <artifactId>spock-core</artifactId>\n            <version>1.2-groovy-2.5</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <version>1.4.197</version>\n        </dependency>\n\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.20</version>\n                <configuration>\n                    <includes>\n                        <include>**/*Test.java</include>\n                    </includes>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.22.1</version>\n                <executions>\n                    <execution>\n                        <id>integration-tests</id>\n                        <goals>\n                            <goal>verify</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.gmavenplus</groupId>\n                <artifactId>gmavenplus-plugin</artifactId>\n                <version>1.6.2</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>compileTests</goal>\n                            <goal>addTestSources</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <testSources>\n                        <testSource>\n                            <directory>src/test/groovy</directory>\n                            <includes>\n                                <include>**/*.groovy</include>\n                            </includes>\n                        </testSource>\n                        <testSource>\n                            <directory>src/integration-test/groovy</directory>\n                            <includes>\n                                <include>**/*.groovy</include>\n                            </includes>\n                        </testSource>\n                    </testSources>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>1.12</version>\n                <executions>\n                    <execution>\n                        <id>add-integration-test-resources</id>\n                        <phase>generate-test-resources</phase>\n                        <goals>\n                            <goal>add-test-resource</goal>\n                        </goals>\n                        <configuration>\n                            <resources>\n                                <resource>\n                                    <directory>src/integration-test/resources</directory>\n                                    <filtering>true</filtering>\n                                </resource>\n                            </resources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.3</version>\n                <executions>\n                    <execution>\n                        <id>prepare-agent</id>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>prepare-agent-integration</id>\n                        <goals>\n                            <goal>prepare-agent-integration</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>merge-results</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>merge</goal>\n                        </goals>\n                        <configuration>\n                            <fileSets>\n                                <fileSet>\n                                    <directory>target</directory>\n                                    <includes>\n                                        <include>*.exec</include>\n                                    </includes>\n                                </fileSet>\n                            </fileSets>\n                            <destFile>target/jacoco-all.exec</destFile>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>report</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                        <configuration>\n                            <dataFile>target/jacoco-all.exec</dataFile>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}