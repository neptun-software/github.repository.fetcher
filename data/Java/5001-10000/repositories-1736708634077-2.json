{
  "metadata": {
    "timestamp": 1736708634077,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "resilience4j/resilience4j",
      "stars": 9884,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2509765625,
          "content": "root = true\n\n[*.{adoc, bat, groovy, html, java, js, jsp, kt, kts, md, properties, py, rb, sh, sql, svg, txt, xml, xsd}]\ncharset = utf-8\n\n[*.{groovy, java, kt, kts, xml, xsd}]\nindent_style = space\nindent_size = 4\ncontinuation_indent_size = 4\nend_of_line = lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1455078125,
          "content": "!.idea\n.idea/*\n!.idea/codeStyles\n*.iml\n.gradle\nbuild\nclasses\n*/out\n.classpath\n.project\n.settings\n*/bin\n*.orig\n.attach_pid*\njava_pid*.hprof\n.DS_Store\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.310546875,
          "content": "tasks:\n- init: ./gradlew compileTestJava compileJava\n\nvscode:\n  extensions:\n    - vscjava.vscode-java-pack\n    - redhat.java\n    - vscjava.vscode-java-debug\n    - vscjava.vscode-java-dependency\n    - vscjava.vscode-java-test\n    - richardwillis.vscode-gradle\n    - vscjava.vscode-maven\n    - EditorConfig.EditorConfig\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.adoc",
          "type": "blob",
          "size": 4.544921875,
          "content": ":toc: macro\nifdef::env-github[]\n:tip-caption: :bulb:\n:note-caption: :information_source:\n:important-caption: :heavy_exclamation_mark:\n:caution-caption: :fire:\n:warning-caption: :warning:\nendif::[]\n\n= Contributing\n\nWe appreciate your input! We want to make contributing to *Resilience4j* as easy and transparent as possible.\nAs a contributor, here are the guidelines we would like you to follow:\n\ntoc::[]\n\n== Questions\n\nFirst, visit our https://resilience4j.readme.io/docs[User Guide]\nand search https://stackoverflow.com/questions/tagged/resilience4j?tab=votes&pagesize=50[Stack Overflow].\nMaybe somebody asked similar question in the past.\n\nIMPORTANT: Before you submit new issue, please search the https://github.com/resilience4j/resilience4j/issues[GitHub Issues].\nMaybe the discussion might inform you of solutions readily available.\n\n== Bugs\nIf you discover unexpected behaviour or find a bug in the source code,\nyou can help us by submitting an issue via https://github.com/resilience4j/resilience4j/issues[GitHub Issues].\nUse link:ISSUE_TEMPLATE[ISSUE_TEMPLATE] to provide required details.\n\n* Use a clear and descriptive title for the issue to identify the problem.\n* Explain which behavior you expected to see instead and why.\n* Format your logs, configuration or code snippets in a proper way.\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it.\nHaving a minimal reproducible scenario gives us a wealth of important information without going back and forth to you with additional questions.\nWe ask you to provide a minimal reproduction as a JUnit test.\nIt allows us to quickly confirm a bug (or point out a coding problem)\nas well as confirm that we are fixing the right problem.\n\n== New features\nYou can propose a new feature by submitting an issue.\n\nTIP: No ideas? See issues tagged as https://github.com/resilience4j/resilience4j/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22[*help wanted*].\n\nCAUTION: Even if you would like to start with a Pull Request first,\nplease submit an issue with a proposal for your work first,\nto be sure that we can use it.\n\nFor a major feature, outline your proposal in an issue so that it can be discussed.\nThis will also allow us to better coordinate our efforts, prevent duplication of work,\nand help you to craft the change so that it is successfully accepted into the project.\n\nNOTE: We use https://guides.github.com/introduction/flow/index.html[Github Flow].\n\nPull Requests are the best way to propose changes to the codebase:\n\n. Fork the repo and create your branch from `+master+`.\n. If you added code, add tests.\n. Don't forget about backward compatibility and `+Javadoc+` for public methods.\n. Apply out Twitter based coding style link:.editorconfig[.editorconfig]\n(https://blog.jetbrains.com/idea/2019/06/managing-code-style-on-a-directory-level-with-editorconfig/[Idea])\nand https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29[Clean Code] rules.\n. Use our commit message format: `+Issue #699: Fixed/Added bla bla+`\n. Send that Pull Request and participate in a code review.\n. After a merge update the documentation especially if you've changed API (public methods).\n\n== Tests\n\nWe use https://assertj.github.io/doc/[AssertJ],\nhttps://javadoc.io/static/org.mockito/mockito-core/3.1.0/org/mockito/BDDMockito.html[BDDMockito]\nand static imports for them.\nPlease write test body in the _Arrange-Act-Assert_ manner.\nKeep _Act (When)_ section as small as possible.\n\nTIP: Instead of `+//Given+` `+//When+` `+//Then+` comments separate sections by a new line.\nFor complex _Given_ setup you can extract private methods.\n\n\n[source,java,title='Example test structure and conventions']\n----\n@Test\npublic void shouldConsumeOnErrorEvent() {\n    retry.getEventPublisher().onError(\n        event -> logger.info(event.getEventType().toString()));\n    Supplier<String> supplier = Retry.decorateSupplier(retry, helloWorldService::returnHelloWorld);\n    given(helloWorldService.returnHelloWorld()).willThrow(new HelloWorldException());\n\n    Try.ofSupplier(supplier)\n\n    // assertThat(result).isEqualTo...\n    then(logger).should().info(\"ERROR\");\n    then(helloWorldService).should(times(3)).returnHelloWorld();\n}\n----\n\n== Licence\n\nBy contributing, you agree that your contributions will be licensed under its\nlink:LICENSE.txt[Apache License, Version 2.0.]\n\n== References\n\nThis document was adapted from the open-source contribution guidelines:\nhttps://github.com/facebook/draft-js/blob/a9316a723f9e918afde44dea68b5f9f39b7d9b00/CONTRIBUTING.md[Facebook's Draft],\nhttps://github.com/angular/angular/blob/master/CONTRIBUTING.md[Angular].\n"
        },
        {
          "name": "COPYRIGHT.txt",
          "type": "blob",
          "size": 0.58984375,
          "content": "Copyright 2020 Robert Winkler, Bohdan Storozhuk, Mahmoud Romeh, Dan Maas and others\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1123046875,
          "content": "FROM gitpod/workspace-full\n\nRUN bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh && sdk install java 11.0.23-tem\""
        },
        {
          "name": "ISSUE_TEMPLATE",
          "type": "blob",
          "size": 0.2763671875,
          "content": "Resilience4j version:\n\nJava version:\n\nThanks for raising a Resilience4j issue.\nPlease replace this text with a brief description of your problem along with the versions you are using.\nIf possible, please also consider putting together a complete JUnit test that reproduces the issue."
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 16.958984375,
          "content": "= Fault tolerance library designed for functional programming\n:author: Robert Winkler and Bohdan Storozhuk\n:icons:\n:toc: macro\n:numbered: 1\nifdef::env-github[]\n:tip-caption: :bulb:\n:note-caption: :information_source:\n:important-caption: :heavy_exclamation_mark:\n:caution-caption: :fire:\n:warning-caption: :warning:\nendif::[]\n\nimage:https://github.com/resilience4j/resilience4j/actions/workflows/gradle-build.yml/badge.svg[\"Build Status\"]\nimage:https://img.shields.io/nexus/r/io.github.resilience4j/resilience4j-circuitbreaker?server=https%3A%2F%2Foss.sonatype.org[\"Release\"]\nimage:https://img.shields.io/nexus/s/io.github.resilience4j/resilience4j-circuitbreaker?server=https%3A%2F%2Foss.sonatype.org[\"Snapshot\"]\nimage:http://img.shields.io/badge/license-ASF2-blue.svg[\"Apache License 2\", link=\"http://www.apache.org/licenses/LICENSE-2.0.txt\"]\n\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=coverage[\"Coverage\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=sqale_rating[\"Maintainability\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=reliability_rating[\"Reliability\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=security_rating[\"Security\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=vulnerabilities[\"Vulnerabilities\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\nimage:https://sonarcloud.io/api/project_badges/measure?project=resilience4j_resilience4j&metric=bugs[\"Bugs\", link=\"https://sonarcloud.io/dashboard?id=resilience4j_resilience4j\"]\n\nimage:https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg[\"SWUbanner\",link=\"https://vshymanskyy.github.io/StandWithUkraine\"]\n\ntoc::[]\n\n== Introduction\n\nResilience4j is a lightweight fault tolerance library designed for functional programming.\nResilience4j provides higher-order functions (decorators) to enhance any functional interface,\nlambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead.\nYou can stack more than one decorator on any functional interface, lambda expression or method reference.\nThe advantage is that you have the choice to select the decorators you need and nothing else.\n\nResilience4j 2 requires Java 17.\n\n[source,java]\n----\n// Create a CircuitBreaker with default configuration\nCircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(\"backendService\");\n\n// Create a Retry with default configuration\n// 3 retry attempts and a fixed time interval between retries of 500ms\nRetry retry = Retry.ofDefaults(\"backendService\");\n\n// Create a Bulkhead with default configuration\nBulkhead bulkhead = Bulkhead.ofDefaults(\"backendService\");\n\nSupplier<String> supplier = () -> backendService\n  .doSomething(param1, param2);\n\n// Decorate your call to backendService.doSomething()\n// with a Bulkhead, CircuitBreaker and Retry\n// **note: you will need the resilience4j-all dependency for this\nSupplier<String> decoratedSupplier = Decorators.ofSupplier(supplier)\n  .withCircuitBreaker(circuitBreaker)\n  .withBulkhead(bulkhead)\n  .withRetry(retry)\n  .decorate();\n\n// Execute the decorated supplier and recover from any exception\nString result = Try.ofSupplier(decoratedSupplier)\n  .recover(throwable -> \"Hello from Recovery\").get();\n\n// When you don't want to decorate your lambda expression,\n// but just execute it and protect the call by a CircuitBreaker.\nString result = circuitBreaker\n  .executeSupplier(backendService::doSomething);\n\n// You can also run the supplier asynchronously in a ThreadPoolBulkhead\n ThreadPoolBulkhead threadPoolBulkhead = ThreadPoolBulkhead\n  .ofDefaults(\"backendService\");\n\n// The Scheduler is needed to schedule a timeout on a non-blocking CompletableFuture\nScheduledExecutorService scheduler = Executors.newScheduledThreadPool(3);\nTimeLimiter timeLimiter = TimeLimiter.of(Duration.ofSeconds(1));\n\nCompletableFuture<String> future = Decorators.ofSupplier(supplier)\n    .withThreadPoolBulkhead(threadPoolBulkhead)\n    .withTimeLimiter(timeLimiter, scheduler)\n    .withCircuitBreaker(circuitBreaker)\n    .withFallback(asList(TimeoutException.class, CallNotPermittedException.class, BulkheadFullException.class),\n      throwable -> \"Hello from Recovery\")\n    .get().toCompletableFuture();\n----\n\nNOTE: With Resilience4j you don’t have to go all-in, you can\nhttps://mvnrepository.com/artifact/io.github.resilience4j[*pick what you need*].\n\n==  Documentation\n\nSetup and usage is described in our *https://resilience4j.readme.io/docs[User Guide]*.\n\n- https://github.com/resilience4j-docs-ja/resilience4j-docs-ja[有志による日本語訳(非公式) Japanese translation by volunteers(Unofficial)]\n\n- https://github.com/lmhmhl/Resilience4j-Guides-Chinese[这是Resilience4j的非官方中文文档 Chinese translation by volunteers(Unofficial)]\n\n== Overview\n\nResilience4j provides several core modules:\n\n* resilience4j-circuitbreaker: Circuit breaking\n* resilience4j-ratelimiter: Rate limiting\n* resilience4j-bulkhead: Bulkheading\n* resilience4j-retry: Automatic retrying (sync and async)\n* resilience4j-timelimiter: Timeout handling\n* resilience4j-cache: Result caching\n\nThere are also add-on modules for metrics, Feign, Kotlin, Spring, Ratpack, Vertx, RxJava2 and more.\n\nNOTE: Find out full list of modules in our *https://resilience4j.readme.io/docs#section-modularization[User Guide]*.\n\nTIP: For core modules package or `+Decorators+` builder see *https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-all[resilience4j-all]*.\n\n== Resilience patterns\n\n[cols=\"<.<*\", options=\"header\"]\n|===\n|name |how does it work? |description |links\n\n|*Retry*\n|repeats failed executions\n|Many faults are transient and may self-correct after a short delay.\n|<<circuitbreaker-retry-fallback,overview>>,\nhttps://resilience4j.readme.io/docs/retry[documentation],\nhttps://resilience4j.readme.io/docs/getting-started-3#annotations[Spring]\n\n|**Circuit Breaker**\n|temporary blocks possible failures\n|When a system is seriously struggling, failing fast is better than making clients wait.\n|<<circuitbreaker-retry-fallback,overview>>,\nhttps://resilience4j.readme.io/docs/circuitbreaker[documentation],\nhttps://resilience4j.readme.io/docs/feign[Feign],\nhttps://resilience4j.readme.io/docs/getting-started-3#annotations[Spring]\n\n|**Rate Limiter**\n|limits executions/period\n|Limit the rate of incoming requests.\n|<<ratelimiter,overview>>,\nhttps://resilience4j.readme.io/docs/ratelimiter[documentation],\nhttps://resilience4j.readme.io/docs/feign[Feign],\nhttps://resilience4j.readme.io/docs/getting-started-3#annotations[Spring]\n\n|**Time Limiter**\n|limits duration of execution\n|Beyond a certain wait interval, a successful result is unlikely.\n|https://resilience4j.readme.io/docs/timeout[documentation],\nhttps://resilience4j.readme.io/docs/getting-started-3#annotations[Spring]\n\n|**Bulkhead**\n|limits concurrent executions\n|Resources are isolated into pools so that if one fails, the others will continue working.\n|<<bulkhead,overview>>,\nhttps://resilience4j.readme.io/docs/bulkhead[documentation],\nhttps://resilience4j.readme.io/docs/getting-started-3#annotations[Spring]\n\n|**Cache**\n|memorizes a successful result\n|Some proportion of requests may be similar.\n|https://resilience4j.readme.io/docs/cache[documentation]\n\n|**Fallback**\n|provides an alternative result for failures\n|Things will still fail - plan what you will do when that happens.\n|<<circuitbreaker-retry-fallback,Try::recover>>,\nhttps://resilience4j.readme.io/docs/getting-started-3#section-annotations[Spring],\nhttps://resilience4j.readme.io/docs/feign[Feign]\n\n|===\n\n_Above table is based on https://github.com/App-vNext/Polly#resilience-policies[Polly: resilience policies]._\n\nNOTE: To find more information about resilience patterns check link:#Talks[*Talks*] section.\nFind out more about components in our *https://resilience4j.readme.io/docs/getting-started-2[User Guide]*.\n\n== Spring Boot\n\nSetup and usage in Spring Boot 2 is demonstrated https://github.com/resilience4j/resilience4j-spring-boot2-demo[here].\n\n== Usage examples\n\n[[circuitbreaker-retry-fallback]]\n=== CircuitBreaker, Retry and Fallback\n\nThe following example shows how to decorate a lambda expression (Supplier) with a CircuitBreaker and how to retry the call at most 3 times when an exception occurs.\nYou can configure the wait interval between retries and also configure a custom backoff algorithm.\n\nThe example uses Vavr's Try Monad to recover from an exception and invoke another lambda expression as a fallback, when even all retries have failed.\n\n[source,java]\n----\n// Simulates a Backend Service\npublic interface BackendService {\n    String doSomething();\n}\n\n// Create a CircuitBreaker (use default configuration)\nCircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(\"backendName\");\n// Create a Retry with at most 3 retries and a fixed time interval between retries of 500ms\nRetry retry = Retry.ofDefaults(\"backendName\");\n\n// Decorate your call to BackendService.doSomething() with a CircuitBreaker\nSupplier<String> decoratedSupplier = CircuitBreaker\n    .decorateSupplier(circuitBreaker, backendService::doSomething);\n\n// Decorate your call with automatic retry\ndecoratedSupplier = Retry\n    .decorateSupplier(retry, decoratedSupplier);\n\n// Use of Vavr's Try to\n// execute the decorated supplier and recover from any exception\nString result = Try.ofSupplier(decoratedSupplier)\n    .recover(throwable -> \"Hello from Recovery\").get();\n\n// When you don't want to decorate your lambda expression,\n// but just execute it and protect the call by a CircuitBreaker.\nString result = circuitBreaker.executeSupplier(backendService::doSomething);\n----\n\n==== CircuitBreaker and RxJava2\n\nThe following example shows how to decorate an Observable by using the custom RxJava operator.\n\n[source,java]\n----\nCircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(\"testName\");\nObservable.fromCallable(backendService::doSomething)\n    .compose(CircuitBreakerOperator.of(circuitBreaker))\n----\n\nNOTE: Resilience4j also provides RxJava operators for `+RateLimiter+`, `+Bulkhead+`, `+TimeLimiter+` and `+Retry+`.\nFind out more in our *https://resilience4j.readme.io/docs/getting-started-2[User Guide]*.\n\n==== CircuitBreaker and Spring Reactor\n\nThe following example shows how to decorate a Mono by using the custom Reactor operator.\n\n[source,java]\n----\nCircuitBreaker circuitBreaker = CircuitBreaker.ofDefaults(\"testName\");\nMono.fromCallable(backendService::doSomething)\n    .transformDeferred(CircuitBreakerOperator.of(circuitBreaker))\n----\n\nNOTE: Resilience4j also provides Reactor operators for `+RateLimiter+`, `+Bulkhead+`, `+TimeLimiter+` and `+Retry+`.\nFind out more in our *https://resilience4j.readme.io/docs/getting-started-1[User Guide]*.\n\n[[ratelimiter]]\n=== RateLimiter\n\nThe following example shows how to restrict the calling rate of some method to be not higher than 1 request/second.\n\n[source,java]\n----\n// Create a custom RateLimiter configuration\nRateLimiterConfig config = RateLimiterConfig.custom()\n    .timeoutDuration(Duration.ofMillis(100))\n    .limitRefreshPeriod(Duration.ofSeconds(1))\n    .limitForPeriod(1)\n    .build();\n// Create a RateLimiter\nRateLimiter rateLimiter = RateLimiter.of(\"backendName\", config);\n\n// Decorate your call to BackendService.doSomething()\nSupplier<String> restrictedSupplier = RateLimiter\n    .decorateSupplier(rateLimiter, backendService::doSomething);\n\n// First call is successful\nTry<String> firstTry = Try.ofSupplier(restrictedSupplier);\nassertThat(firstTry.isSuccess()).isTrue();\n\n// Second call fails, because the call was not permitted\nTry<String> secondTry = Try.of(restrictedSupplier);\nassertThat(secondTry.isFailure()).isTrue();\nassertThat(secondTry.getCause()).isInstanceOf(RequestNotPermitted.class);\n----\n\n[[bulkhead]]\n=== Bulkhead\nThere are two isolation strategies and bulkhead implementations.\n\n==== SemaphoreBulkhead\nThe following example shows how to decorate a lambda expression with a Bulkhead.\nA Bulkhead can be used to limit the amount of parallel executions.\nThis bulkhead abstraction should work well across a variety of threading and io models.\nIt is based on a semaphore, and unlike Hystrix, does not provide \"shadow\" thread pool option.\n\n[source,java]\n----\n// Create a custom Bulkhead configuration\nBulkheadConfig config = BulkheadConfig.custom()\n    .maxConcurrentCalls(150)\n    .maxWaitDuration(100)\n    .build();\n\nBulkhead bulkhead = Bulkhead.of(\"backendName\", config);\n\nSupplier<String> supplier = Bulkhead\n    .decorateSupplier(bulkhead, backendService::doSomething);\n----\n\n[[threadpoolbulkhead]]\n==== ThreadPoolBulkhead\nThe following example shows how to use a lambda expression with a ThreadPoolBulkhead which uses a bounded queue and a fixed thread pool.\n\n[source,java]\n----\n// Create a custom ThreadPoolBulkhead configuration\nThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n    .maxThreadPoolSize(10)\n    .coreThreadPoolSize(2)\n    .queueCapacity(20)\n    .build();\n\nThreadPoolBulkhead bulkhead = ThreadPoolBulkhead.of(\"backendName\", config);\n\n// Decorate or execute immediately a lambda expression with a ThreadPoolBulkhead.\nSupplier<CompletionStage<String>> supplier = ThreadPoolBulkhead\n    .decorateSupplier(bulkhead, backendService::doSomething);\n\nCompletionStage<String> execution = bulkhead\n    .executeSupplier(backendService::doSomething);\n----\n\n[[events]]\n== Consume emitted events\n\n`+CircuitBreaker+`, `+RateLimiter+`, `+Cache+`, `+Bulkhead+`, `+TimeLimiter+` and `+Retry+` components emit a stream of events.\nIt can be consumed for logging, assertions and any other purpose.\n\n=== Examples\n\nA `+CircuitBreakerEvent+` can be a state transition, a circuit breaker reset, a successful call, a recorded error or an ignored error.\nAll events contains additional information like event creation time and processing duration of the call.\nIf you want to consume events, you have to register an event consumer.\n\n[source,java]\n----\ncircuitBreaker.getEventPublisher()\n    .onSuccess(event -> logger.info(...))\n    .onError(event -> logger.info(...))\n    .onIgnoredError(event -> logger.info(...))\n    .onReset(event -> logger.info(...))\n    .onStateTransition(event -> logger.info(...));\n// Or if you want to register a consumer listening to all events, you can do:\ncircuitBreaker.getEventPublisher()\n    .onEvent(event -> logger.info(...));\n----\n\nYou can use RxJava or Spring Reactor Adapters to convert the `+EventPublisher+` into a Reactive Stream.\nThe advantage of a Reactive Stream is that you can use RxJava's `+observeOn+` operator to specify a different Scheduler that the CircuitBreaker will use to send notifications to its observers/consumers.\n\n[source,java]\n----\nRxJava2Adapter.toFlowable(circuitBreaker.getEventPublisher())\n    .filter(event -> event.getEventType() == Type.ERROR)\n    .cast(CircuitBreakerOnErrorEvent.class)\n    .subscribe(event -> logger.info(...))\n----\n\nNOTE: You can also consume events from other components.\nFind out more in our *https://resilience4j.readme.io/[User Guide]*.\n\n== Talks\n\n[cols=\"4*\"]\n|===\n\n|0:34\n|https://www.youtube.com/watch?v=kR2sm1zelI4[Battle of the Circuit Breakers: Resilience4J vs Istio]\n|Nicolas Frankel\n|GOTO Berlin\n\n|0:33\n|https://www.youtube.com/watch?v=AwcjOhD91Q0[Battle of the Circuit Breakers: Istio vs. Hystrix/Resilience4J]\n|Nicolas Frankel\n|JFuture\n\n|0:42\n|https://www.youtube.com/watch?v=KosSsZEqS-k&t=157[Resilience patterns in the post-Hystrix world]\n|Tomasz Skowroński\n|Cloud Native Warsaw\n\n|0:52\n|https://www.youtube.com/watch?v=NHVxrLb3jFI[Building Robust and Resilient Apps Using Spring Boot and Resilience4j]\n|David Caron\n|SpringOne\n\n|0:22\n|https://www.youtube.com/watch?v=gvDvOWtPLVY&t=140[Hystrix is dead, now what?]\n|Tomasz Skowroński\n|DevoxxPL\n\n|===\n\n== Companies that use Resilience4j\n\n* *Deutsche Telekom* (In an application with over 400 million requests per day)\n* *AOL* (In an application with low latency requirements)\n* *Netpulse* (In a system with 40+ integrations)\n* *wescale.de* (In a B2B integration platform)\n* *Topia* (In an HR application built with microservices architecture)\n* *Auto Trader Group plc* (The largest Britain digital automotive marketplace)\n* *PlayStation Network* (A platform backend)\n* *TUI InfoTec GmbH* (Backend applications inside of reservation booking workflow streams for accommodations)\n\n== License\n\nCopyright 2020 Robert Winkler, Bohdan Storozhuk, Mahmoud Romeh, Dan Maas and others\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "RELEASENOTES.adoc",
          "type": "blob",
          "size": 26,
          "content": "= Release Notes\n\n== Version 0.1.0\n* Initial version\n\n=== Version 0.1.1\n* Added the functionality to add exceptions with are ignored by the CircuitBreaker\n\n=== Version 0.1.2\n* Added the feature to get Metrics for function executions\n\n=== Version 0.1.3\n* Added a static factory method for the CircuitBreakerConfig builder\n\n=== Version 0.1.4\n* Added the feature to retry a failed function\n\n=== Version 0.1.5\n* Added builders to simplify chaining of decorators\n\n=== Version 0.1.6\n* Renamed project to javaslang-circuitbreaker\n\n=== Version 0.1.7\n* Fixed Issue #2\n* Issue #3 Added a listener mechanism for state transitions\n\n== Version 0.2.0\n* Removed Dropwizard Metrics, because its a too heavy dependency for such a lightweight library.\n* Changed the way exceptions can be handled. You have to provide a Predicate now instead of a list of exceptions to ignore.\n\n== Version 0.3.0\n* The CircuitBreaker is based on a Ring Bit Buffer and a failure rate now.\n\n=== Version 0.3.1\n* Changed the visibility of CircuitBreakerUtils.isCallPermitted to public.\n\n=== Version 0.3.2\n* CircuitBreakerRegistry has a new method which takes a Supplier of a CircuitBreakerConfig so that the CircuitBreakerConfig is only created when needed.\n\n=== Version 0.3.3\n* CircuitBreaker has a new method `+getCircuitBreakerConfig+` which allows to retrieve the CircuitBreakerConfig of the CircuitBreaker.\n* Renamed the state HALF_CLOSED to HALF_OPEN to match the pattern description of Martin Fowler.\n\n=== Version 0.3.4\n* Added a Metrics interface to the CircuitBreaker which allows to retrieve current statistics like failureRate and number of buffer calls.\n\n== Version 0.4.0\n* Updated javaslang from 2.0.0-RC4 to 2.0.1\n\n== Version 0.5.0\n* Updated javaslang from 2.0.1 to 2.0.2\n* Fixed issue #6: The CB changes to OPEN state when the failure rate is above (>) the threshold, but it should be above or equal (>=).\n\n== Version 0.6.0\n* Updated javaslang from 2.0.2 to 2.0.4\n\n== Version 0.7.0\n* Added rxjava 2.0.1 as a dependency\n* Issue #13: CircuitBreaker should publish events as an event stream and clients should be able to subscribe\n* Issue #10: Reorder arguments in decorator methods\n* PR #19: Add a backoff function feature, to modify the waiting interval between failures\n* Renamed root package from javaslang to io.github.resilience4j, because the project had to leave the Javaslang GitHub organisation\n\n=== Version 0.7.1\n* Changed Event stream return type from Observable to Flowable\n* Events contain a create time\n* Added getThrowable method to CircuitBreakerOnErrorEvent which was missing\n* Added CircuitBreakerOnIgnoredErrorEvent to signal exceptions which have been ignored because of a custom predicate\n* Added getMaxNumberOfBufferedCalls and getNumberOfSuccessfulCalls methods to Metrics interface\n\n== Version 0.8.0\n* Added the SingleOperator interface to CircuitBreakerOperator\n* Issue #12: Added a new RateLimiter decorator\n* Added a new Cache decorator\n* Removed CacheEventConsumer and CircuitBreakerEventConsumer and created a generic CircularEventConsumer\n* Added a StopWatch which is used to measure the elapsed time of decorated calls. CircuitBreakerEvents also contain the elapsed duration of a call now.\n* Issue #33: Added the ability to 'force' state transitions manually\n* Issue #38: A CircuitBreaker records not permitted calls when the state is OPEN and emits a event for each attempt. The metric \"numberOfNotPermittedCalls\" can be access via CircuitBreaker.Metrics\n* Issue #39: A CircuitBreaker should copy the previous RingBitSet values during state transition from HALF_OPEN to CLOSED\n* Updated javaslang from 2.0.4 to 2.0.5\n* Updated rxjava from 2.0.1 to 2.0.3\n\n=== Version 0.8.1\n* Issue #41: Added a method to the CircuitBreakerRegistry which returns a list of all managed CircuitBreaker instances\n* Issue #42: Added a new EventConsumerRegistry which can be used to create and manage instances of EventConsumers.\n\n=== Version 0.8.2\n* Issue #43: Added a new higher-order function to decorate a method which returns a CompletableFuture.\n* Issue #49: Added execute methods to CircuitBreaker interface and Decorators builder. This makes it easier to decorate and call a function at once.\n* Updated rxjava from 2.0.3 to 2.0.6\n* Updated slf4j-api from 1.7.12 to 1.7.24\n\n== Version 0.9.0\n* PR #59: Project has been renamed to resilience4j and has been modularized.\n* PR #59: Renamed packages from io.github.robwin to io.github.resilience4j.\n* PR #76: Module for integration with Retrofit.\n* PR #82: Module for integration with Ratpack.\n* PR #80: Resilience4j metrics reporting with Dropwizard metrics.\n* PR #81: Resilience4j metrics reporting with Prometheus.\n* PR #103, #104, #101: Various improvements of rxJava integration.\n* PR #119: Zero allocation rate for CircuitBreaker when it has no event subscribers.\n* Issue #70: Module with Spring Boot starter.\n* Issue #61: Permissions aren't available from the first cycle in AtomicRateLimiter.\n* Performance improvements of ConcurrentEvictingQueue\n\nNOTE: Braking changes:\n\n* PR #119 - changed API of CircuitBreaker interface.\n* The *groupId* has been changed from *io.github.robwin* to *io.github.resilience4j*\n\nDetailed https://github.com/resilience4j/resilience4j/milestone/6?closed=1[PR list]\n\n== Version 0.10.0\n* Issue #123: Autobuild Ratpack CircuitBreaker, Retry, RateLimiter registry from properties.\n* Issue #126: Created Ratpack CircuitBreaker, RateLimiter sse event streams.\n* Issue #139: Support CircuitBreaker failure rate threshold < 1.\n\nNOTE: Breaking changes:\n\n* Issue #51: Removed RxJava2 dependency to make Resilience4j more lightweight. Added a RxJava2 module.\n* Issue #148: Created an EventPublisher which replaces the RxJava Event Stream.\n\n=== Version 0.10.1\n* Issue #153: Fixed CircuitBreakerTransformer error messaging\n* Issue #161: Fixed Spring Boot Prometheus AutoConfiguration\n* Updated Vavr from 0.9.0 to 0.9.1\n* Updated RxJava from 2.1.0 to 2.1.3\n\n== Version 0.11.0\n* RP #164: Additional gauges to monitor the circuit breaker state\n* PR #165: Allow explicit ordering for CircuitBreaker and RateLimiter aspects in SpringBoot starter\n* PR #166: Bulkhead metrics for Dropwizard metrics module\n* PR #176: Retrofit enqueue support for circuit breaker and rate limiter\n* PR #177: Dynamic rate limiter configuration\n* PR #181: RxJava bulkhead operator for `+Maybe+` and `+Completable+`\n* PR #169: Bulkhead integration with Ratpack and call finished metric for bulkhead\n* PR #184: Dynamic bulkhead configuration\n\n* Issue #182: Fix for circuit breaker show only first state values in Dropwizard metrics\n\n== Version 0.12.0\n* PR #188: Added reset method to Circuit Breaker\n* PR #194: Added disable and force_open states to Circuit Breaker\n* PR #205: Added Reactor support for circuit breaker, bulkhead and rate limiter.\n* PR #206: Added support for Micrometer\n* PR #208: Updated Retrofit version from 2.1 to 2.3\n* PR #211: Make sure the Reactor operators can be used together on a Flux\n* Updated Vavr from 0.9.1 to 0.9.2\n* Updated RxJava from 2.1.3 to 2.1.10\n* Updated Vertx from 3.4.1 to 3.5.1\n* Updated Dropwizard Metrics from 3.1.2 to 3.2.5\n* Updated Spring Boot from 1.4.3.RELEASE to 1.5.5.RELEASE\n* Updated Ratpack from 1.4.6 to 1.5.4\n* Updated Prometheus from 0.0.21 to 0.3.0\n\n* Issue #47: OSGI Support. Fixed bnd configuration in publishing.gradle\n\n=== Version 0.12.1\n* Issue #212: Fixed r4j-reactor bug when onSubscribe throws an error\n\n== Version 0.13.0\n* PR #216: Added Circuit Breaker option to auto transition to half open\n* PR #217: Added ignoreExceptions() and recordExceptions() to CircuitBreakerConfig.Builder\n* PR #226: Ratpack does no longer depend on Dropwizard or Prometheus\n* PR #227: Ratpack module uses Spring Reactor now\n* PR #229: Publish retry event for every retry\n* PR #231: Added validation to Spring Boot CircuitBreakerProperties\n* PR #234: Non-blocking API for RateLimiter\n* PR #236: Added Spring 4, Spring Boot 1 and Spring Boot 2 modules\n\n=== Version 0.13.1\n* PR #243: Allow Spring to bind MeterBinders instead of directly binding\n\n=== Version 0.13.2\n* PR #244: Corrected link to Prometheus Metrics Integration\n* PR #246: Make async retrofit call not make the request when circuit is open\n* PR #248: Removed rxjava2 dependency for time limiter\n* PR #253: Fixed documentation\n* PR #254: Additional factory methods for Micrometer CircuitBreakerMetrics\n* PR #271: Remove deprecated usage of Mockito Matchers\n* PR #276: Add response predicate to retry sync and async for enhancement\n* PR #277: Generate BOM for resilience4j\n* PR #281: Avoid creating unnecessary logging strings\n* PR #284: Avoiding calling bulkheadConfigSupplier needlessly\n* Issue #245; PR #260: Fix CircuitBreakerSubscriber for Reactor doesn't count successes when using Mono/Flux.toFuture()\n* Issue #263; PR #264: Fix bulkhead on Single and Maybe\n\n== Version 0.14.0\n* Issue #196: Added a new resilience4j-feign module\n* Issue #241: Added support to configure automaticTransitionFromOpenToHalfOpenEnabled in Spring Boot\n* Issue #248: Support The Use Of @CircuitBreaker on methods that return a mono Or flux\n* Issue #286: Spring Boot emitted warnings about invalid actuator endpoint name\n* Issue #307: Bulkhead Support in Prometheus\n* Issue #331: Fixed Retry.decorateCallable which catched RuntimeException instead of Exception\n* Issue #332: Bulkhead reactor operator did not release semaphore on cancel\n* Issue #338: Fixed that SpringBoot2 auto-configuration fails when not specifying all properties\n* Issue #344: Exposed bulkhead max allowed concurrent calls metric\n* Issue #348: Added Spring Boot 2 support for resilience4j-retry\n* Issue #351: Fixed that CircuitBreaker AutoTransitioner prevents JVM shutdown\n* Issue #359: Support for retryOnResult method and Completable, Maybe types missing\n* Issue #383: Added Retry support to Spring Reactor\n* Updated Vavr from 0.9.2 to 0.10.0\n* Updated Spring 4 from 4.3.15.RELEASE to 4.3.22.RELEASE\n* Updated Spring Boot from 1.5.5.RELEASE to 1.5.19.RELEASE\n* Updated Spring Boot 2 from 2.0.2.RELEASE to 2.1.3.RELEASE\n* Updated Dropwizard Metrics from 3.2.5 to 3.2.6\n* Updated Ratpack from 1.5.4 to 1.6.0\n* Updated Micrometer from 1.0.5 to 1.1.3\n* Updated Prometheus Simple Client from 0.3.0 to 0.6.0\n* Updated Feign from 10.0.1 to 10.2.0\n* Updated Retrofit from 2.3.0 to 2.5.0\n* Updated Spring Reactor from 3.0.7.RELEASE to 3.2.6.RELEASE\n\n== Version 0.15.0\n* Issue #309: Added fallbackMethod support to annotations for Spring and Ratpack\n* Issue #268: Added a functionality to add configurations to registries and reuse them.\n* Issue #398: Added an event publisher to all registries which allows to execute code when entries are created, deleted or replaced.\n* Issue #273: Added a remove method to all registries\n* Issue #282: Added a replace method to all registries\n* Issue #291: Added support to overwrite all resilience4j beans in Spring Boot.\n* Issue #417: Allow to fully close a bulkhead\n* Issue #311, #336, #357, #361: Refactored resilience4j-reactor and resilience4j-rxJava2 so that they try to acquire a permission before the subscriptions happens.\n* Issue #343: CircuitBreaker only allows a configurable number of concurrent calls when in half-open state and rejects all further calls.\n\n== Version 0.16.0\n* Issue #325: Added instance methods to decorate functions with a CircuitBreaker\n* Issue #431: Don't prevent using other call adapters in CircuitBreakerCallAdapter\n* Issue #458: Fixed a bug where the reactor context was not available when using circuit breaker\n* Issue #469: Fixed a bug that registerHealthIndicator defined in a default config is not inherited\n* Issue #480: Fixed a bug in the decoration of a CompletionStage, if it's a Runnable which is executed async\n* Issue #486: Added bulkhead configs to resilience4j-ratpack\n* Issue #489: Set the proper order of spring aspects to make thread pool spring aspect work properly\n* PR #478: Added a find() method to all registries\n\n== Version 0.17.0\n* Removed all deprecated methods in preparation for v1.0.0\n* Issue #500: Fixed bug where default external configs in Ratpack apps are not honored\n* Issue #506: Fixed bug where resilience4j-ratpack fails to run when Dropwizard metrics in not on classpath\n* Issue #515: Added Aspect ordering feature in resilience4j-spring again\n* Issue #518: Added support for Vavr Try and Either return types\n* Issue #538: Removed minimum waitDuration constraint for retry\n* Issue #544: Fixed bug where CircuitBreaker gets stuck in HALF_OPEN when the last test request throws an ignored exception\n* Issue #530: Improved RxJava2OnClasspathCondition and ReactorOnClasspathCondition\n\n== Version 1.0.0\n* Issue #607: Spring Boot HealthIndicators are by default disabled now\n* Issue #546: Added support for Spring Cloud Config\n* Issue #581: Enhancement in resilience4j-reactor and resilience4j-rxjava2 to better support the zip operator.\n* Issue #559: Added support for @FeignClient annotation\n* Issue #560: Fixed bug when using a lambda fallback in Feign\n* Issue #547: Replaced the CircuitBreaker ring buffer implementation by a count-based and time-based sliding window implementation\n* Issue #562: Fixed bug: Illegal state transition from CLOSED to HALF_OPEN\n* Issue #568: Allow to configure exceptions which should be treated as a success in the CircuitBreaker.\n* Issue #381: Allow to configure a slow response time threshold. If too many slow calls are recorded the CircuitBreaker opens.\n* Issue #488: Micrometer support for ThreadPoolBulkhead\n* Issue #540: Fixed a bug where IDE did not recognize the auto config properties\n\n== Version 1.1.0\n* Issue #235: Added a TimeLimiter operator to resilience4j-reactor and resilience4j-rxjava2\n* Issue #625: Fixed reliability and security issues raised by sonar\n* Issue #626: Handle thread interruption consistently in Bulkhead and RateLimiter blocking methods\n* Issue #634: Adapted resilience4j-metrics to latest changes in the CircuitBreaker\n* Issue #646: Fixed CircuitBreaker 'XX' tried an illegal state transition from OPEN to OPEN\n* Issue #607: Added a new config parameter to enable the CircuitBreaker and RateLimiter health indicator. They are disabled by default now.\n\n== Version 1.2.0\n* Issue #642: Added weight support in RateLimiter\n* Issue #659: Added support for Kotlin Flows\n* Issue #668: Added util class to determine whether Circuit Breaker permits calls\n* Issue #671: Allow configurable wait times for circuit breakers to be open as a function of # of close attempts\n* Issue #674: CircuitBreaker tried an illegal state transition from HALF_OPEN to HALF_OPEN\n* Issue #682: Retrofit call cancellations are recorded as circuit breaker failures\n* Issue #687: context.onSuccess called in case of maximum amount of retries reached\n* Issue #691: Exceptions thrown from fallback methods shouldn't be wrapped\n* Issue #699: Added CircuitBreaker waitIntervalFunction to spring boot config\n* Issue #701: Allow custom Prometheus Histogram buckets\n* Issue #756: Spring Boot module must work without a Spring actuator\n* PR #722: Health indicator overall status can be controlled with allowHealthIndicatorToFail property\n\n== Version 1.3.0\n* Issue #822: Fixed the case where resilience4j rateLimiter seems to ignore configuration\n* Issue #816: Fixed Reactor RetryOperator throws exception wrapped by RetryExceptionWrapper\n* Issue #806: Switched aggregated retry.calls metric to a counter from a gauage\n* Issue #803: Added new Circuit breaker state -> METRICS_ONLY\n* Issue #799: Fixed WritableStackTraceEnabled config setting in ThreadPool bulkhead configuration\n* Issue #775: Added Getter for RetryOnRetryEvent\n* Issue #769: Fixed Duplicated auto complete support in IDEA\n* Issue #765: Added support to use Retry with Feign client\n* Issue #751: Vavr upgrade to 0.10.2\n* Issue #718: Fixed blocking behavior in Reactor Retry Operator\n* Issue #711: Added support to use SpEL in resilienec4j spring annoations\n* Issue #751: Fixed Resilience4j Spring boot modules MetricsAutoConfiguration\n* Issue #565: Added ThreadLocal passing support to the Threadpool bulkhead implementation\n* Issue #430: Added TimeLimiter spring boot starter support\n* Issue #509: Added support to extend Micrometer tags\n* PR #831: non backward compatible API change in ThreadPoolBulkhead decorateRunnable(ThreadPoolBulkhead bulkhead, Runnable runnable) now return Supplier<CompletionStage<Void>> instead of Runnable\n\n=== Version 1.3.1\n* Issue #596: Fixed a bug that a fallback method is not invoked when using CompletableFutures and a ThreadPoolBulkhead annotation\n\n== Version 1.4.0\n* Issue #703: Add a feature that allows to plug-in your own Registry implementation which can be based on a cache library if needed.\n* Issue #737: Updated reactor version to 3.3.0.RELEASE\n* Issue #933: Add RegistryStore and builder methods to create BulkheadRegistry and ThreadPoolBulkheadRegistry\n* Issue #924: Add RegistryStore and builder methods to create RetryRegistry\n* Issue #910: Add RegistryStore and builder methods to create RateLimiterRegistry\n* Issue #928: Fix TimeLimiter does not set a message for TimeoutException\n* Issue #916: Allow setting Retry Wait Duration Limit to value equal >= zero\n* Issue #887: Fixing Spring Boot Common and Spring Boot 2 modules share the same packages which is not allowed in the Java Module system\n* Issue #886: Add support for RxJava 3\n* Issue #913: Add proper graceful cleanup of resilience4j thread pool executors which make it properly cleaned on spring boot applications\n* Issue #939: Fix actuator shows Whitelabel error page with \"Invalid Event\"\n* Issue #958: Added missing method to set contextProgagators in ThreadPoolBulkheadConfigurationProperties\n* PR #914: Adding non-coroutine kotlin wrapper functions as a convenience\n* PR #943: Removed deprecated documentation\n\n== Version 1.5.0\n* Issue #855: Updated resilience4j-spring-boot2 to 2.3.0.RELEASE\n* Issue #855: Updated resilience4j-spring-cloud2 to 2.2.2.RELEASE\n* Issue #942: Introduced new CB metric \"notPermittedCalls\"\n* Issue #964: Added Kotlin DSL for building *Config and *Registry classes\n* Issue #979: Added fairCallHandlingEnabled flag to BulkheadConfig which controls whether FairSync or NonfairSync should be used in the Semaphore.\n* Issue #982: Added support to configure exponential random backoff via Spring config\n* Issue #991: Fixed bug that auto transition to half_open happens even if the state is forced open.\n* Issue #1000: Added toString to CircuitBreakerConfig\n* Issue #1003: Fixed bug that CircuitBreaker tries to obtain permission twice in circuitBreaker.decorateEitherSupplier()\n\n== Version 1.6.0\n\n=== Enhancements\n* RetryConfig.DEFAULT_MAX_ATTEMPTS should be public [#1180](https://github.com/resilience4j/resilience4j/issues/1180)\n* Circuitbreaker doesn't open when nested TimeLimiter throws TimeOutCancellationException [#1123](https://github.com/resilience4j/resilience4j/issues/1123)\n* Enhance Server Side Events  `+/circuitbreaker/events+`  [#1076](https://github.com/resilience4j/resilience4j/issues/1076)\n* CallNotPermittedException should contain circuit breaker name (and possibly other information) [#1062](https://github.com/resilience4j/resilience4j/issues/1062)\n* Retry: Exponential backoff with constant behaviour after certain time [#1044](https://github.com/resilience4j/resilience4j/issues/1044)\n* Respecting the clock set in the CircuitBreakerStateMachine for detecting slow calls [#734](https://github.com/resilience4j/resilience4j/issues/734)\n\n=== Bugs\n* Circuit breaker stuck in HALF_OPEN state [#935](https://github.com/resilience4j/resilience4j/issues/935)\n* Circuit breaker global fallback seems to not work when annotated method has more than 1 parameter [#1174](https://github.com/resilience4j/resilience4j/issues/1174)\n* Timelimiter metrics not calculated when using resilince4j-kotlin [#1168](https://github.com/resilience4j/resilience4j/issues/1168)\n* Problem with registering metrics for more than one circuit breaker [#1131](https://github.com/resilience4j/resilience4j/issues/1131)\n* ConcurrentModificationException warning log while consuming events [#1115](https://github.com/resilience4j/resilience4j/issues/1115)\n* CircuitBreakerConfig.Builder.waitDurationInOpenState() false documentation of when the function throws exception [#1092](https://github.com/resilience4j/resilience4j/issues/1092)\n\n=== Version 1.6.1\n\n==== Bugs\n* Springboot application failing on startup with version 1.6.0 [#1192](https://github.com/resilience4j/resilience4j/issues/1192)\n\n== Version 1.7.0\n\n=== Enhancements\n- RateLimiter: Reduce RateLimiter memory footprint of high cardinality keys [#1221](https://github.com/resilience4j/resilience4j/issues/1221)\n- CircuitBreaker: When waitDurationInOpenState and waitIntervalFunctionInOpenStat are used together, waitDurationInOpenState will be overridden [#1214](https://github.com/resilience4j/resilience4j/issues/1214)\n- TimeLimiterAspect does not refresh static timeLimiterExecutorService on Spring context shutdown and restart [#1203](https://github.com/resilience4j/resilience4j/issues/1203)\n- CircuitBreaker: Record a failure on result [#384](https://github.com/resilience4j/resilience4j/issues/384)\n- Added support for Micronaut\n- Updated Spring Boot from 2.3.0.RELEASE to 2.4.1\n- Updated Reactor from 3.3.0.RELEASE to 3.4.0\n- Updated Spring Cloud Context from 2.2.2.RELEASE to 3.0.0\n- Updated Spring Framework from 5.2.6.RELEASE to 5.3.2\n- Updated Spring Boot Open Feign from 2.2.2.RELEASE to 2.2.6.RELEASE\n- Updated Kotlin Coroutines from 1.3.2 to 1.4.2\n- Updated Dropwizard Metrics from 3.2.6 to 4.1.16\n- Prevent the decoration of default methods in feign client [#1245](https://github.com/resilience4j/resilience4j/pull/1245)\n- Added RateLimiter.drainPermissions method [#1240](https://github.com/resilience4j/resilience4j/pull/1240)\n- Added failAfterMaxAttempts flag to RetryConfig and a new MaxRetriesExceededException [#1293](https://github.com/resilience4j/resilience4j/pull/1293)\n\n=== Bugs\n- NullPointerException requesting actuator metrics for retries using retryOnResult [#1205](https://github.com/resilience4j/resilience4j/issues/1205)\n- CircuitBreakers events endpoint doesn't work after replacing instances at runtime  [#1116](https://github.com/resilience4j/resilience4j/issues/1116)\n\n=== Version 1.7.1\n\n==== Enhancements\nIssue #1414: SpEL expressions support passing runtime method arguments to bean methods\n\n==== Bugs\n\n* Issue #1268: Stream events from springboot2 stopped SSE after the 1st message.\n* Issue #1372: Kotlin Timelimiter executeSuspendFunction throws TimeoutException after coroutine is canceled\n* Issue #1432: CircuitBreaker permits more calls then expected when switching from OPEN to HALF_OPEN state\n* Issue #1437: Event can be published twice when CircuitBreaker in MetricsOnlyState\n\n== Version 2.0.0\n\n=== Enhancements\n\n* Removed Vavr as a dependency\n* Upgraded to Java 17\n* Upgraded to Kotlin 1.7.20\n* Upgraded to Spring Boot 2.7\n* Upgraded to Micronaut 3.7.3\n\n=== Version 2.0.1\n\n==== Enhancements\n* Support Spring Boot 3 by adding resilience4j-spring-boot3 and resilience4j-spring6\n* Issue #1787: Apply Spring Boot customizers even if there is no instance entry in the config file\n* Removed deprecated configuration properties [#1188](https://github.com/resilience4j/resilience4j/pull/1188)\n** Circutbreaker:\n*** `+ringBufferSizeInClosedState+` replaced by `+slidingWindowSize+`\n*** `+ringBufferSizeInHalfOpenState+` replaced by `+permittedNumberOfCallsInHalfOpenState+`\n** Retry:\n*** `+maxRetryAttempts+` replaced by `+maxAttempts+`\n** Bulkhead:\n*** `+contextPropagator+` list replaced by `+contextPropagators+`\n\n==== Bugs\n\n* Issue #1825: Aspectj must not be mandatory in Spring Boot modules\n* Issue #1809: Fixed concurrency issue in Cache module\n\n=== Version 2.0.1\n\n==== Bugs\n\n* Issue #1835: Fixed CircuitBreaker CheckedSupplier and CheckedFunction decorator not opening on recordResultPredicate\n\n=== Version 2.1.0\n\n==== Enhancements\n* Fallbackmethod supports usage of annotations in Spring\n* Issue #1955: RecordResultPredicate can be configured in Spring Boot config now\n\n==== Bugs\n* Issue #1980: Fixed API regression following removal of io.vavr dependencies in v2.0.0\n\n=== Version 2.2.0\n\n==== Enhancements\n* Support Micronaut 4\n* Issue #1962: Added apache commons configuration based registries\n\n==== Bugs\n* Issue #2052: Support class name using SpEL expression at @Circuitbreaker name field enhancement\n* Issue #2040: ThreadPoolBulkhead always uses the \"default\" configuration in micronaut application bug\n* Issue #2037: Removing stale retry configurations from configuration map enhancement\n* Issue #1625: New module that collects overall information enhancement\n* Issue #1565: Do not retry if IntervalFunction returns interval less than 0\n* Issue #1865: Timelimiter always uses the \"default\" configuration in micronaut application\n* Issue #2038: java.lang.StackOverflowError due to infinite loop in CircuitBreakerStateMachine$OpenState.tryAcquirePermission\n\n=== Version 2.3.0\n\n==== Enhancements\n* Issue #2234: Allow passing custom Clock to CircuitBreaker without needing to use internal API.\n* Issue #2131: Added support for RxJava3 in Spring projects.\n* Issue #2029: Include `decorateSupplier` as a `Retry` instance method.\n* Issue #2246: Add handling for the case where a non-checked retry consumer is interrupted during sleep.\n* Issue #2245: Refactor `Retry#executeSuspendExecute` condition to enhance consistency with `FlowRetry`.\n* Issue #2232: Convert `Synchronized` to `ReentrantLock` to avoid virtual-thread pinning issues.\n* Issue #2241: Implement a lock-free sliding window for internal CircuitBreaker metrics.\n* Issue #2239: Add a `Clock` to `CircuitBreakerConfig` and utilize it in the state machine.\n* Issue #2200: Ignore unknown exceptions in CircuitBreaker configuration.\n* Issue #2233: Improve exception message for failure rate threshold in CircuitBreaker configuration.\n* Issue #1404: Configure exponential backoff or randomized wait duration if base configuration allows it.\n* Issue #2179: Ensure `RateLimiter.executeSuspendFunction` respects `drainPermissionsOnResult` in the configuration.\n* Issue #2152: Ensure the randomize function always returns a number greater than 1.0.\n* Issue #2130: Add support for Feign 12.5+.\n* Issue #2121: Specify required `RateLimiter` permits in annotations.\n\n==== Bugs\n\n* Issue #2243: Fixed potential memory leak in `DefaultEventConsumerRegistry`.\n* Issue #2209: Resolved issue where `CompletionStage` does not complete on user-supplied predicate failures.\n* Issue #2190: Fixed `StackOverflowError` and circular reference in CircuitBreaker configuration handling.\n* Issue #2175: Fixed validation error message for `slowCallDurationThreshold`.\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 4.2177734375,
          "content": "plugins {\n    id \"org.sonarqube\" version \"3.5.0.2730\"\n    id 'org.asciidoctor.jvm.convert' version '2.4.0'\n    id \"org.gradle.test-retry\" version \"1.5.0\"\n    id \"io.github.gradle-nexus.publish-plugin\"  version \"1.1.0\"\n    id \"me.champeau.jmh\" version \"0.6.8\"\n    id 'idea'\n    id 'jacoco-report-aggregation'\n    id 'jvm-test-suite'\n}\n\napply from: \"${rootDir}/libraries.gradle\"\n\nallprojects {\n    apply plugin: 'jacoco'\n\n    version = '2.4.0-SNAPSHOT'\n    group = 'io.github.resilience4j'\n    description = 'Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'\n\n    repositories {\n        mavenCentral()\n    }\n\n    jacoco {\n        toolVersion = \"0.8.8\"\n    }\n}\n\next {\n    coreProjects = subprojects.findAll {\n        p -> !p.name.endsWith(\"-bom\")\n    }\n}\n\nnormalization {\n    runtimeClasspath {\n        metaInf {\n            ignoreAttribute(\"Build-Time\")\n            ignoreAttribute(\"Build-Date\")\n        }\n    }\n}\n\ndependencies {\n    coreProjects.each { jacocoAggregation project(\":${it.name}\") }\n}\n\nnexusPublishing {\n    repositories {\n        sonatype {\n            stagingProfileId = '64e8d6879f4e95'\n        }\n    }\n}\n\nconfigure(project.coreProjects) {\n    apply plugin: 'java'\n    apply plugin: 'java-library'\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply from: \"${rootDir}/publishing.gradle\"\n    apply plugin: \"org.gradle.test-retry\"\n    apply plugin: 'me.champeau.jmh'\n\n    tasks.withType(Test).all {\n        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {\n            jvmArgs += [\n                    \"-XX:+AllowRedefinitionToAddDeleteMethods\", \"--add-opens=java.base/java.lang=ALL-UNNAMED\",  \"--add-opens=java.base/java.util.concurrent.locks=ALL-UNNAMED\", \"--add-opens=java.base/java.time=ALL-UNNAMED\", \"--add-opens=java.base/java.io=ALL-UNNAMED\"\n            ]\n        }\n    }\n\n\n    dependencies {\n        implementation (libraries.slf4j)\n\n        // JSR-305 only used for non-required meta-annotations\n        compileOnly \"com.google.code.findbugs:jsr305:3.0.2\"\n\n        testImplementation (libraries.vavr)\n        testImplementation (libraries.junit)\n        testImplementation (libraries.assertj)\n        testImplementation (libraries.logback)\n        testImplementation (libraries.mockito)\n        testImplementation (libraries.powermock)\n        testImplementation (libraries.powermock_api_mockito)\n        testImplementation (libraries.powermock_module_junit4)\n        testImplementation (libraries.awaitility)\n        testImplementation (libraries.jaxws)\n    }\n\n    tasks.withType(JavaCompile) {\n        sourceCompatibility = \"17\"\n        targetCompatibility = \"17\"\n        options.deprecation = true\n        options.encoding = 'UTF-8'\n        options.compilerArgs += [\"-Xlint:unchecked\", \"-parameters\"]\n    }\n\n    test {\n        retry {\n            maxRetries = 3\n            maxFailures = 20\n            failOnPassedAfterRetry = true\n        }\n    }\n\n    jacocoTestReport {\n        reports {\n            xml.required.set(true)\n        }\n    }\n\n    afterEvaluate {\n        jar {\n            from('../') {\n                include 'COPYRIGHT.txt'\n                include 'LICENSE.txt'\n            }\n\n            inputs.property('moduleName', moduleName)\n            manifest.attributes(\n                    'Automatic-Module-Name': moduleName\n            )\n        }\n    }\n}\n\ndef allTestCoverageFile = \"${rootProject.projectDir}/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml\"\n\nsonarqube {\n    properties {\n        property \"sonar.host.url\", \"https://sonarcloud.io\"\n        property \"sonar.organization\", \"resilience4j\"\n        property \"sonar.projectName\", \"resilience4j\"\n        property \"sonar.projectKey\", \"resilience4j_resilience4j\"\n        property \"sonar.links.homepage\", \"https://github.com/resilience4j/resilience4j\"\n        property \"sonar.links.ci\", \"https://github.com/resilience4j/resilience4j/actions\"\n        property \"sonar.links.scm\", \"https://github.com/resilience4j/resilience4j\"\n        property \"sonar.links.issue\", \"https://github.com/resilience4j/resilience4j/issues\"\n        property \"sonar.language\", \"java\"\n        property \"sonar.coverage.jacoco.xmlReportPaths\", allTestCoverageFile\n    }\n}\n\ntasks.check.dependsOn tasks.testCodeCoverageReport\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.11328125,
          "content": "kotlin.code.style=official\nsystemProp.file.encoding=UTF-8\nsystemProp.sun.jnu.encoding=UTF-8\norg.gradle.caching=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.1796875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"-Xmx512m\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.1328125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=-Xmx512m\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "grafana_dashboard.json",
          "type": "blob",
          "size": 31.822265625,
          "content": "{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": \"-- Grafana --\",\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations & Alerts\",\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"description\": \"Resilience4j Metrics\",\n  \"editable\": true,\n  \"gnetId\": null,\n  \"graphTooltip\": 0,\n  \"id\": 2,\n  \"iteration\": 1557141276207,\n  \"links\": [],\n  \"panels\": [\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 19,\n      \"panels\": [],\n      \"title\": \"Summary\",\n      \"type\": \"row\"\n    },\n    {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorPostfix\": false,\n      \"colorPrefix\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"#d44a3a\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"#73BF69\"\n      ],\n      \"datasource\": \"Prometheus\",\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 2,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"gridPos\": {\n        \"h\": 5,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 1\n      },\n      \"id\": 8,\n      \"interval\": null,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [\n        {\n          \"name\": \"value to text\",\n          \"value\": 1\n        },\n        {\n          \"name\": \"range to text\",\n          \"value\": 2\n        }\n      ],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"CLOSED:\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [\n        {\n          \"from\": \"null\",\n          \"text\": \"N/A\",\n          \"to\": \"null\"\n        }\n      ],\n      \"sparkline\": {\n        \"fillColor\": \"rgba(150, 217, 141, 0.22)\",\n        \"full\": false,\n        \"lineColor\": \"#73BF69\",\n        \"show\": true\n      },\n      \"tableColumn\": \"\",\n      \"targets\": [\n        {\n          \"expr\": \"sum(resilience4j_circuitbreaker_state{state=\\\"closed\\\"})\",\n          \"format\": \"time_series\",\n          \"instant\": false,\n          \"intervalFactor\": 1,\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": \"0,1\",\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Number of closed CircuitBreaker\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"100%\",\n      \"valueMaps\": [\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"null\"\n        }\n      ],\n      \"valueName\": \"current\"\n    },\n    {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorPostfix\": false,\n      \"colorPrefix\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"#299c46\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"#F2495C\"\n      ],\n      \"datasource\": \"Prometheus\",\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": false\n      },\n      \"gridPos\": {\n        \"h\": 5,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 1\n      },\n      \"id\": 6,\n      \"interval\": null,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [\n        {\n          \"name\": \"value to text\",\n          \"value\": 1\n        },\n        {\n          \"name\": \"range to text\",\n          \"value\": 2\n        }\n      ],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"OPEN: \",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [\n        {\n          \"from\": \"null\",\n          \"text\": \"N/A\",\n          \"to\": \"null\"\n        }\n      ],\n      \"sparkline\": {\n        \"fillColor\": \"#FFA6B0\",\n        \"full\": false,\n        \"lineColor\": \"#F2495C\",\n        \"show\": true\n      },\n      \"tableColumn\": \"\",\n      \"targets\": [\n        {\n          \"expr\": \"sum(resilience4j_circuitbreaker_state{state=~\\\"open|forced_open\\\"})\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": \"1,5\",\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Number of open CircuitBreaker\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"100%\",\n      \"valueMaps\": [\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"null\"\n        }\n      ],\n      \"valueName\": \"current\"\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"cacheTimeout\": null,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"decimals\": null,\n      \"description\": \"\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 6\n      },\n      \"id\": 4,\n      \"interval\": \"\",\n      \"legend\": {\n        \"alignAsTable\": false,\n        \"avg\": false,\n        \"current\": true,\n        \"hideEmpty\": false,\n        \"hideZero\": false,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": null,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pluginVersion\": \"6.1.6\",\n      \"pointradius\": 2,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"repeat\": null,\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"resilience4j_circuitbreaker_state{instance=~\\\"$instance\\\"}\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ name }}: {{ state }}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"CircuitBreaker States\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"decimals\": 0,\n          \"format\": \"short\",\n          \"label\": \"Number\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"decimals\": null,\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"#299c46\",\n        \"#FF9830\",\n        \"#d44a3a\"\n      ],\n      \"datasource\": \"Prometheus\",\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 6\n      },\n      \"id\": 21,\n      \"interval\": null,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [\n        {\n          \"name\": \"value to text\",\n          \"value\": 1\n        },\n        {\n          \"name\": \"range to text\",\n          \"value\": 2\n        }\n      ],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"pluginVersion\": \"6.1.6\",\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"HALF_OPEN: \",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [\n        {\n          \"from\": \"null\",\n          \"text\": \"N/A\",\n          \"to\": \"null\"\n        }\n      ],\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"tableColumn\": \"\",\n      \"targets\": [\n        {\n          \"expr\": \"sum(resilience4j_circuitbreaker_state{state=\\\"half_open\\\"})\",\n          \"format\": \"time_series\",\n          \"instant\": false,\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": \"0,1\",\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Number of half_open CircuitBreaker\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"100%\",\n      \"valueMaps\": [\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"null\"\n        }\n      ],\n      \"valueName\": \"current\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 13\n      },\n      \"id\": 15,\n      \"panels\": [],\n      \"repeat\": \"circuitbreaker_name\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"title\": \"CircuitBreaker\",\n      \"type\": \"row\"\n    },\n    {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"#299c46\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"#d44a3a\"\n      ],\n      \"datasource\": \"Prometheus\",\n      \"description\": \"\",\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": true,\n        \"thresholdMarkers\": true\n      },\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 8,\n        \"x\": 0,\n        \"y\": 14\n      },\n      \"id\": 2,\n      \"interval\": null,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [\n        {\n          \"name\": \"value to text\",\n          \"value\": 1\n        },\n        {\n          \"name\": \"range to text\",\n          \"value\": 2\n        }\n      ],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"pluginVersion\": \"6.1.6\",\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [\n        {\n          \"from\": \"null\",\n          \"text\": \"N/A\",\n          \"to\": \"null\"\n        }\n      ],\n      \"repeat\": null,\n      \"repeatDirection\": \"h\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"tableColumn\": \"\",\n      \"targets\": [\n        {\n          \"expr\": \"resilience4j_circuitbreaker_failure_rate{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}\",\n          \"format\": \"time_series\",\n          \"hide\": false,\n          \"interval\": \"\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ name }}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": \"40,50\",\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Failure Rate: $circuitbreaker_name\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"null\"\n        },\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"-1\"\n        }\n      ],\n      \"valueName\": \"current\"\n    },\n    {\n      \"aliasColors\": {\n        \"failed \": \"red\",\n        \"ignored \": \"blue\",\n        \"not_permitted \": \"orange\",\n        \"successful \": \"green\"\n      },\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 16,\n        \"x\": 8,\n        \"y\": 14\n      },\n      \"id\": 23,\n      \"interval\": \"\",\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"max\": true,\n        \"min\": true,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": true,\n      \"renderer\": \"flot\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"rate(resilience4j_circuitbreaker_calls_seconds_count{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m])\",\n          \"format\": \"time_series\",\n          \"hide\": false,\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ kind }} \",\n          \"refId\": \"A\"\n        },\n        {\n          \"expr\": \"rate(resilience4j_circuitbreaker_calls_total{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m])\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ kind  }} \",\n          \"refId\": \"B\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Call rate: $circuitbreaker_name\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": \"Calls/sec\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {\n        \"failed\": \"red\",\n        \"successful\": \"green\"\n      },\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 16,\n        \"x\": 8,\n        \"y\": 21\n      },\n      \"id\": 11,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"hideEmpty\": false,\n        \"hideZero\": false,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"repeat\": null,\n      \"repeatDirection\": \"h\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"resilience4j_circuitbreaker_buffered_calls{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ kind }}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"expr\": \"resilience4j_circuitbreaker_max_buffered_calls{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"maximum\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Buffered calls: $circuitbreaker_name\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"decimals\": 1,\n          \"format\": \"short\",\n          \"label\": \"Number\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 16,\n        \"x\": 8,\n        \"y\": 29\n      },\n      \"id\": 26,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideZero\": false,\n        \"max\": true,\n        \"min\": true,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"histogram_quantile(0.9, sum(rate(resilience4j_circuitbreaker_calls_seconds_bucket{application=~\\\"$application\\\", instance=~\\\"$instance\\\", name=~\\\"$circuitbreaker_name\\\"}[1m])) by (le))\",\n          \"format\": \"time_series\",\n          \"hide\": false,\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"90th Percentile\",\n          \"refId\": \"A\"\n        },\n        {\n          \"expr\": \"histogram_quantile(0.95, sum(rate(resilience4j_circuitbreaker_calls_seconds_bucket{application=~\\\"$application\\\", instance=~\\\"$instance\\\", name=~\\\"$circuitbreaker_name\\\"}[1m])) by (le))\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"95th Percentile\",\n          \"refId\": \"B\"\n        },\n        {\n          \"expr\": \"histogram_quantile(0.98, sum(rate(resilience4j_circuitbreaker_calls_seconds_bucket{application=~\\\"$application\\\", instance=~\\\"$instance\\\", name=~\\\"$circuitbreaker_name\\\"}[1m])) by (le))\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"98th Percentile\",\n          \"refId\": \"C\"\n        },\n        {\n          \"expr\": \"histogram_quantile(0.50, sum(rate(resilience4j_circuitbreaker_calls_seconds_bucket{application=~\\\"$application\\\", instance=~\\\"$instance\\\", name=~\\\"$circuitbreaker_name\\\"}[1m])) by (le))\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"Median\",\n          \"refId\": \"D\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Call duration percentiles\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"s\",\n          \"label\": \"Average duration\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {\n        \"failed\": \"red\",\n        \"ignored\": \"blue\",\n        \"successful\": \"green\"\n      },\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 16,\n        \"x\": 8,\n        \"y\": 36\n      },\n      \"id\": 25,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideZero\": false,\n        \"max\": true,\n        \"min\": true,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": true,\n      \"renderer\": \"flot\",\n      \"scopedVars\": {\n        \"circuitbreaker_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"increase(resilience4j_circuitbreaker_calls_seconds_sum{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m]) / increase(resilience4j_circuitbreaker_calls_seconds_count{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m])\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ kind }}\",\n          \"refId\": \"A\"\n        },\n        {\n          \"expr\": \"sum(increase(resilience4j_circuitbreaker_calls_seconds_sum{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m])) / sum(increase(resilience4j_circuitbreaker_calls_seconds_count{instance=~\\\"$instance\\\",name=~\\\"$circuitbreaker_name\\\"}[1m]))\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"total \",\n          \"refId\": \"B\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Average call durations\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"s\",\n          \"label\": \"Average duration\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 43\n      },\n      \"id\": 28,\n      \"panels\": [],\n      \"repeat\": \"retry_name\",\n      \"scopedVars\": {\n        \"retry_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"title\": \"Retry\",\n      \"type\": \"row\"\n    },\n    {\n      \"aliasColors\": {\n        \"failed_with_retry\": \"red\",\n        \"failed_without_retry\": \"orange\",\n        \"successful_with_retry\": \"yellow\",\n        \"successful_without_retry\": \"green\"\n      },\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 44\n      },\n      \"id\": 30,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": true,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": true,\n      \"renderer\": \"flot\",\n      \"scopedVars\": {\n        \"retry_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"rate(resilience4j_retry_calls_total{application=~\\\"$application\\\",name=~\\\"$retry_name\\\",}[1m])\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{ kind }}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Rate retryable calls: $retry_name\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": \"Number of calls\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 52\n      },\n      \"id\": 32,\n      \"panels\": [],\n      \"repeat\": \"bulkhead_name\",\n      \"scopedVars\": {\n        \"bulkhead_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"title\": \"Bulkhead\",\n      \"type\": \"row\"\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"Prometheus\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 8,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 53\n      },\n      \"id\": 34,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": true,\n      \"renderer\": \"flot\",\n      \"scopedVars\": {\n        \"bulkhead_name\": {\n          \"selected\": true,\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        }\n      },\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"resilience4j_bulkhead_available_concurrent_calls{application=~\\\"$application\\\",name=~\\\"$bulkhead_name\\\"}\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"Available Calls\",\n          \"refId\": \"A\"\n        },\n        {\n          \"expr\": \"resilience4j_bulkhead_max_allowed_concurrent_calls{application=~\\\"$application\\\",name=~\\\"$bulkhead_name\\\"}\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"Max allowed Calls\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeRegions\": [],\n      \"timeShift\": null,\n      \"title\": \"Bulkhead: $bulkhead_name\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    }\n  ],\n  \"refresh\": false,\n  \"schemaVersion\": 18,\n  \"style\": \"dark\",\n  \"tags\": [],\n  \"templating\": {\n    \"list\": [\n      {\n        \"allValue\": null,\n        \"current\": {\n          \"text\": \"resilience4j-demo\",\n          \"value\": \"resilience4j-demo\"\n        },\n        \"datasource\": \"Prometheus\",\n        \"definition\": \"label_values(application)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Application\",\n        \"multi\": false,\n        \"name\": \"application\",\n        \"options\": [],\n        \"query\": \"label_values(application)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {\n          \"text\": \"localhost:9080\",\n          \"value\": [\n            \"localhost:9080\"\n          ]\n        },\n        \"datasource\": \"Prometheus\",\n        \"definition\": \"label_values(resilience4j_circuitbreaker_state, instance)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"Instance\",\n        \"multi\": true,\n        \"name\": \"instance\",\n        \"options\": [\n          {\n            \"selected\": false,\n            \"text\": \"All\",\n            \"value\": \"$__all\"\n          },\n          {\n            \"selected\": true,\n            \"text\": \"localhost:9080\",\n            \"value\": \"localhost:9080\"\n          }\n        ],\n        \"query\": \"label_values(resilience4j_circuitbreaker_state, instance)\",\n        \"refresh\": 0,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        },\n        \"datasource\": \"Prometheus\",\n        \"definition\": \"label_values(resilience4j_circuitbreaker_state, name)\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"CircuitBreaker Name\",\n        \"multi\": true,\n        \"name\": \"circuitbreaker_name\",\n        \"options\": [],\n        \"query\": \"label_values(resilience4j_circuitbreaker_state, name)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {\n          \"tags\": [],\n          \"text\": \"backendA\",\n          \"value\": [\n            \"backendA\"\n          ]\n        },\n        \"datasource\": \"Prometheus\",\n        \"definition\": \"label_values(resilience4j_retry_calls_total, name)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"Retry Name\",\n        \"multi\": true,\n        \"name\": \"retry_name\",\n        \"options\": [],\n        \"query\": \"label_values(resilience4j_retry_calls_total, name)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {\n          \"text\": \"backendA\",\n          \"value\": \"backendA\"\n        },\n        \"datasource\": \"Prometheus\",\n        \"definition\": \"label_values(resilience4j_bulkhead_available_concurrent_calls, name)\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"Bulkhead Name\",\n        \"multi\": true,\n        \"name\": \"bulkhead_name\",\n        \"options\": [],\n        \"query\": \"label_values(resilience4j_bulkhead_available_concurrent_calls, name)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 1,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-5m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"7d\",\n      \"30d\"\n    ]\n  },\n  \"timezone\": \"\",\n  \"title\": \"Resilience4j\",\n  \"uid\": \"DshZ5zmWk\",\n  \"version\": 53\n}\n"
        },
        {
          "name": "libraries.gradle",
          "type": "blob",
          "size": 8.3466796875,
          "content": "// Allows centralized definition of the version of artifacts to\n// use.  In that respect it serves a role similar to <dependencyManagement> in Maven\next {\n    vavrVersion = '0.10.2'\n    rxJava2Version = '2.2.8'\n    rxJava3Version = '3.0.0'\n    reactorVersion = '3.4.24'\n    junitVersion = '4.12'\n    junitParams = '1.1.1'\n    lincheck='2.34'\n    slf4jVersion = '1.7.30'\n    assertjVersion = '3.18.1'\n    logbackVersion = '1.2.3'\n    mockitoVersion = '3.12.4'\n    powermockVersion = '2.0.7'\n    jcacheVersion = '1.1.0'\n    awaitilityVersion = '1.7.0'\n    metricsVersion = '4.1.16'\n    vertxVersion = '3.7.0'\n    aspectjVersion = '1.9.2'\n    springVersion = '5.3.23'\n    spring6Version = '6.0.2'\n    springBoot2Version = '2.7.5'\n    springBoot3Version = '3.0.0'\n    springCloudContext2Version = '3.1.5'\n    spockVersion = '1.3-groovy-2.5'\n    feignVersion = '12.0'\n    reactiveStreamsVersion = '1.0.2'\n    micrometerVersion = '1.10.0'\n    hibernateValidatorVersion = '6.0.18.Final'\n    wiremockVersion = '2.26.0'\n    validationApiVersion = '2.0.1.Final'\n    kotlinCoroutinesVersion = '1.6.4'\n    springBootOpenFeignVersion = '3.1.5'\n    blockhoundVersion = '1.0.6.RELEASE'\n    micronautVersion = '4.1.6'\n    micronautTestVersion = '4.1.0'\n    groovyVersion = '3.0.9'\n    spockVersion = '1.3-groovy-2.5'\n    apacheCommonsConfiguration2Version = '2.9.0'\n    apacheCommonsBeanutilsVersion = '1.9.4'\n    jacksonDataformatYamlVersion = '2.12.3'\n\n    libraries = [\n            // compile\n            vavr: \"io.vavr:vavr:${vavrVersion}\",\n            slf4j: \"org.slf4j:slf4j-api:${slf4jVersion}\",\n            rxjava2: \"io.reactivex.rxjava2:rxjava:${rxJava2Version}\",\n            rxjava3: \"io.reactivex.rxjava3:rxjava:${rxJava3Version}\",\n            jcache: \"javax.cache:cache-api:${jcacheVersion}\",\n            reactor: \"io.projectreactor:reactor-core:${reactorVersion}\",\n\n            // testCompile\n            junit: \"junit:junit:${junitVersion}\",\n            junitParams: \"pl.pragmatists:JUnitParams:${junitParams}\",\n            assertj: \"org.assertj:assertj-core:${assertjVersion}\",\n            logback: \"ch.qos.logback:logback-classic:${logbackVersion}\",\n            mockito: \"org.mockito:mockito-core:${mockitoVersion}\",\n            powermock: \"org.powermock:powermock-core:${powermockVersion}\",\n            powermock_api_mockito: \"org.powermock:powermock-api-mockito2:${powermockVersion}\",\n            powermock_module_junit4: \"org.powermock:powermock-module-junit4:${powermockVersion}\",\n            awaitility: \"com.jayway.awaitility:awaitility:${awaitilityVersion}\",\n            reactor_test: \"io.projectreactor:reactor-test:${reactorVersion}\",\n            reactive_streams_tck: \"org.reactivestreams:reactive-streams-tck:${reactiveStreamsVersion}\",\n            mock_clock: \"com.statemachinesystems:mock-clock:1.0\",\n            blockhound: \"io.projectreactor.tools:blockhound:${blockhoundVersion}\",\n            lincheck: \"org.jetbrains.kotlinx:lincheck:${lincheck}\",\n\n            // Vert.x addon\n            vertx: \"io.vertx:vertx-core:${vertxVersion}\",\n            vertx_unit: \"io.vertx:vertx-unit:${vertxVersion}\",\n\n            // Aspectj for Spring addon\n            aspectj: \"org.aspectj:aspectjrt:${aspectjVersion}\",\n            // spring test\n            spring_test: \"org.springframework:spring-test:${springVersion}\",\n\n            // Spring Boot2 addon\n            spring_core: \"org.springframework:spring-core:${springVersion}\",\n            spring_context: \"org.springframework:spring-context:${springVersion}\",\n            spring_boot2_aop: \"org.springframework.boot:spring-boot-starter-aop:${springBoot2Version}\",\n            spring_boot2_actuator: \"org.springframework.boot:spring-boot-starter-actuator:${springBoot2Version}\",\n            spring_boot2_web: \"org.springframework.boot:spring-boot-starter-web:${springBoot2Version}\",\n            spring_boot2_test: \"org.springframework.boot:spring-boot-starter-test:${springBoot2Version}\",\n            spring_boot2_config_processor: \"org.springframework.boot:spring-boot-configuration-processor:${springBoot2Version}\",\n            spring_boot2_autoconfigure: \"org.springframework.boot:spring-boot-autoconfigure:${springBoot2Version}\",\n            spring_boot2_autoconfigure_processor: \"org.springframework.boot:spring-boot-autoconfigure-processor:${springBoot2Version}\",\n            spring_boot2_webflux: \"org.springframework.boot:spring-boot-starter-webflux:${springBoot2Version}\",\n\n            // Spring Boot3 addon\n            spring6_core: \"org.springframework:spring-core:${spring6Version}\",\n            spring6_context: \"org.springframework:spring-context:${spring6Version}\",\n            spring_boot3_aop: \"org.springframework.boot:spring-boot-starter-aop:${springBoot3Version}\",\n            spring_boot3_actuator: \"org.springframework.boot:spring-boot-starter-actuator:${springBoot3Version}\",\n            spring_boot3_web: \"org.springframework.boot:spring-boot-starter-web:${springBoot3Version}\",\n            spring_boot3_test: \"org.springframework.boot:spring-boot-starter-test:${springBoot3Version}\",\n            spring_boot3_config_processor: \"org.springframework.boot:spring-boot-configuration-processor:${springBoot3Version}\",\n            spring_boot3_autoconfigure: \"org.springframework.boot:spring-boot-autoconfigure:${springBoot3Version}\",\n            spring_boot3_autoconfigure_processor: \"org.springframework.boot:spring-boot-autoconfigure-processor:${springBoot3Version}\",\n            spring_boot3_webflux: \"org.springframework.boot:spring-boot-starter-webflux:${springBoot3Version}\",\n\n            // Spring Cloud\n            spring_cloud_context2: \"org.springframework.cloud:spring-cloud-context:${springCloudContext2Version}\",\n\n            // Hibernate validator addon\n            hibernate_validator: \"org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}\",\n\n            // Feign addon\n            feign: \"io.github.openfeign:feign-core:${feignVersion}\",\n            feign_wiremock: \"com.github.tomakehurst:wiremock-jre8:${wiremockVersion}\",\n\n            // Metrics addon\n            metrics: \"io.dropwizard.metrics:metrics-core:${metricsVersion}\",\n\n            // Micronaut addon\n            micronaut: \"io.micronaut.platform:micronaut-platform:$micronautVersion\",\n            micronaut_inject: \"io.micronaut:micronaut-inject-groovy:$micronautVersion\",\n            micronaut_spock: \"io.micronaut.test:micronaut-test-spock:$micronautTestVersion\",\n            spock: \"org.spockframework:spock-core:${spockVersion}\",\n\n            // Micrometers addon\n            micrometer: \"io.micrometer:micrometer-core:${micrometerVersion}\",\n            micrometer_observation: \"io.micrometer:micrometer-observation:${micrometerVersion}\",\n            micrometer_observation_test: \"io.micrometer:micrometer-observation-test:${micrometerVersion}\",\n            micrometer_prometheus: \"io.micrometer:micrometer-registry-prometheus:${micrometerVersion}\",\n            micrometer_spring_legacy: \"io.micrometer:micrometer-spring-legacy:${micrometerVersion}\",\n\n            // CircuitBreaker documentation\n            metrics_healthcheck: \"io.dropwizard.metrics:metrics-healthchecks:${metricsVersion}\",\n\n\n            jaxws: \"com.sun.xml.ws:jaxws-ri:2.3.2\",\n\n            // Groovy\n            groovy: \"org.codehaus.groovy:groovy-all:${groovyVersion}\",\n            groovy_test: \"org.codehaus.groovy:groovy-test:$groovyVersion\",\n\n            // validation\n            validationApi: \"javax.validation:validation-api:${validationApiVersion}\",\n\n            // Kotlin addon\n            kotlin_stdlib: \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\",\n            kotlin_coroutines: \"org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}\",\n\n            // Spring cloud addon\n            spring_cloud_openfeign_core: \"org.springframework.cloud:spring-cloud-openfeign-core:${springBootOpenFeignVersion}\",\n            spring_cloud_starter_openfeign: \"org.springframework.cloud:spring-cloud-starter-openfeign:${springBootOpenFeignVersion}\",\n            spring_cloud_context: \"org.springframework.cloud:spring-cloud-context:${springCloudContext2Version}\",\n\n            // commons configuration addon\n            apache_commons_configuration2: \"org.apache.commons:commons-configuration2:${apacheCommonsConfiguration2Version}\",\n            apache_commons_beanutils: \"commons-beanutils:commons-beanutils:${apacheCommonsBeanutilsVersion}\",\n            jackson_dataformat_yaml: \"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataformatYamlVersion}\",\n\n    ]\n\n}\n"
        },
        {
          "name": "publishing.gradle",
          "type": "blob",
          "size": 2.9306640625,
          "content": "import java.text.SimpleDateFormat\n\nDate buildTimeAndDate = new Date()\next {\n    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)\n    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)\n}\n\ndef projectArtifactId = 'resilience4j'\ndef url = \"https://resilience4j.readme.io\"\n\nnormalization {\n    runtimeClasspath {\n        metaInf {\n            ignoreAttribute(\"Build-Time\")\n            ignoreAttribute(\"Build-Date\")\n        }\n    }\n}\n\njar {\n    manifest {\n        attributes(\n                'Built-By': 'Robert Winkler',\n                'Created-By': System.properties['java.version'] + \" (\" + System.properties['java.vendor'] + \" \" + System.properties['java.vm.version'] + \")\",\n                'Build-Date': project.buildDate,\n                'Build-Time': project.buildTime,\n                'Specification-Title': projectArtifactId,\n                'Specification-Version': project.version,\n                'Implementation-Title': projectArtifactId,\n                'Implementation-Version': project.version,\n        )\n    }\n}\n\ntask sourcesJar(type: Jar) {\n    from sourceSets.main.allSource\n    archiveClassifier = 'sources'\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    archiveClassifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\nartifacts {\n    archives sourcesJar\n    archives javadocJar\n}\n\ntasks.withType(Sign) {\n    onlyIf { !version.endsWith(\"SNAPSHOT\") }\n}\n\nsigning {\n    sign publishing.publications\n}\npublishing {\n    publications {\n        resilience4j(MavenPublication) {\n            from components.java\n            pom.withXml {\n                def devs = ['RobWin': 'Robert Winkler',\n                            'storozhukBM': 'Bogdan Storozhuk',\n                            'Romeh': 'Mahmoud Romeh',\n                            'dlsrb6342': 'Ingyu Hwhang',\n                            'Hexmind': 'Tomasz Skowroński',\n                            'drmaas': 'Dan Maas']\n                def root = asNode()\n\n                root.appendNode('name', \"${projectArtifactId}\")\n                root.appendNode('packaging', 'jar')\n                root.appendNode('url', \"${url}\")\n                root.appendNode('description', project.description)\n\n                def license = root.appendNode('licenses').appendNode('license')\n                license.appendNode('name', 'Apache-2.0')\n                license.appendNode('url', 'https://github.com/resilience4j/resilience4j/blob/master/LICENSE.txt')\n                license.appendNode('distribution', 'repo')\n\n                root.appendNode('scm').appendNode('url', 'https://github.com/resilience4j/resilience4j.git')\n\n                def developers = root.appendNode('developers')\n                devs.each {\n                    def d = developers.appendNode('developer')\n                    d.appendNode('id', it.key)\n                    d.appendNode('name', it.value)\n                }\n            }\n            artifact sourcesJar\n            artifact javadocJar\n        }\n    }\n}"
        },
        {
          "name": "resilience4j-all",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-bulkhead",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-circuitbreaker",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-circularbuffer",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-commons-configuration",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-consumer",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-feign",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-framework-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-hedge",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-micrometer",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-micronaut-annotation",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-micronaut",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-ratelimiter",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-reactor",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-retry",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-rxjava2",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-rxjava3",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-spring-boot2",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-spring-boot3",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-spring-cloud2",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-spring6",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-timelimiter",
          "type": "tree",
          "content": null
        },
        {
          "name": "resilience4j-vavr",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.072265625,
          "content": "buildCache {\n    local { enabled = true }\n}\n\nrootProject.name = 'resilience4j'\ninclude 'resilience4j-test'\ninclude 'resilience4j-core'\ninclude 'resilience4j-ratelimiter'\ninclude 'resilience4j-cache'\ninclude 'resilience4j-retry'\ninclude 'resilience4j-circuitbreaker'\ninclude 'resilience4j-bulkhead'\ninclude 'resilience4j-hedge'\ninclude 'resilience4j-all'\ninclude 'resilience4j-circularbuffer'\ninclude 'resilience4j-metrics'\ninclude 'resilience4j-consumer'\ninclude 'resilience4j-annotations'\ninclude 'resilience4j-spring'\ninclude 'resilience4j-spring6'\ninclude 'resilience4j-spring-boot2'\ninclude 'resilience4j-spring-boot3'\ninclude 'resilience4j-spring-cloud2'\ninclude 'resilience4j-feign'\ninclude 'resilience4j-timelimiter'\ninclude 'resilience4j-rxjava2'\ninclude 'resilience4j-rxjava3'\ninclude 'resilience4j-reactor'\ninclude 'resilience4j-micrometer'\ninclude 'resilience4j-bom'\ninclude 'resilience4j-framework-common'\ninclude 'resilience4j-kotlin'\ninclude 'resilience4j-vavr'\ninclude 'resilience4j-micronaut'\ninclude 'resilience4j-micronaut-annotation'\ninclude 'resilience4j-commons-configuration'\n"
        }
      ]
    }
  ]
}