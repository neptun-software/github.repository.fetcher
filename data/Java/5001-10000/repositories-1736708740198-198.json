{
  "metadata": {
    "timestamp": 1736708740198,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "micronaut-projects/micronaut-core",
      "stars": 6126,
      "defaultBranch": "4.8.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4775390625,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\n\n[{*.sh,gradlew}]\nend_of_line = lf\n\n[{*.bat,*.cmd}]\nend_of_line = crlf\n\n[{*.mustache,*.ftl}]\ninsert_final_newline = false\n\n[*.java]\nindent_size = 4\ntab_width = 4\nmax_line_length = 100\n# Import order can be configured with ij_java_imports_layout=...\n# See documentation https://youtrack.jetbrains.com/issue/IDEA-170643#focus=streamItem-27-3708697.0-0\n\n[*.xml]\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4814453125,
          "content": "# Auto detect text files and perform LF normalization\n*        text=auto\n\n*.java   text eol=lf\n*.groovy text eol=lf\n*.html   text eol=lf\n*.kt     text eol=lf\n*.kts    text eol=lf\n*.md     text diff=markdown eol=lf\n*.py     text diff=python executable\n*.pl     text diff=perl executable\n*.pm     text diff=perl\n*.css    text diff=css eol=lf\n*.js     text eol=lf\n*.sql    text eol=lf\n*.q      text eol=lf\n\n*.sh     text eol=lf\ngradlew  text eol=lf\n\n*.bat    text eol=crlf\n*.cmd    text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.65234375,
          "content": "dist/\n.DS_Store\ntarget/\n.gradle/\n.idea/\nbuild/\n!build-logic/src/main/java/io/micronaut/build\nclasses/\nout/\n*.db\n*.log\n*.iml\n.classpath\n.factorypath\nbin/\n.settings/\n.project\n*/test/\n*/META-INF/\n*.ipr\n*.iws\n.kotlintest\n*/.kotlintest/\n\n# ignore resources, are downloaded via a gradle task from micronaut_docs\nsrc/main/docs/resources/css/highlight/*.css\nsrc/main/docs/resources/css/highlight/*.png\nsrc/main/docs/resources/css/highlight/*.jpg\nsrc/main/docs/resources/css/*.css\nsrc/main/docs/resources/js/*.js\nsrc/main/docs/resources/style/*.html\nsrc/main/docs/resources/img/micronaut-logo-white.svg\n\n# Ignore files generated by test-resources\n**/.micronaut/test-resources/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.87890625,
          "content": "# Contributing Code or Documentation to the Micronaut Framework\n\n## Finding Issues to Work on\n\nIf you are interested in contributing to the Micronaut Framework and are looking for issues to work on, take a look at the issues tagged with [help wanted](https://github.com/micronaut-projects/micronaut-core/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).\n\n## JDK Setup\n\nThe Micronaut Framework currently requires JDK 17\n\n## IDE Setup\n\nThe Micronaut Framework project is imported into IntelliJ IDEA by opening the `build.gradle` file.\n\n## Docker Setup\n\nThe Micronaut Framework tests require Docker.\n\n## Running Tests\n\nTo run the tests use `./gradlew check`.\n\n[Geb](http://gebish.org) functional tests are ignored unless you specify the geb environment via system property.\n\nTo run with Chrome `./gradlew -Dgeb.env=chrome check`.\n\nTo run with Firefox `./gradlew -Dgeb.env=firefox check`.\n\n## Building Documentation\n\nThe documentation sources are located at `src/main/docs/guide`.\n\nTo build the documentation run `./gradlew publishGuide` or `./gradlew pG` then open `build/working/02-docs-raw/index.html`\n> This only generates the raw guide without the API and Configuration references; therefore, the API links in the manual\n> will not resolve in a browser.\n\nTo include the API (javadocs) and Configuration references run `./gradlew docs` instead and open `build/docs/index.html`\n\n\n## Working on the code base\n\nIf you are working with the IntelliJ IDEA development environment, you can import the project using Intellij's Gradle Tooling (\"File / Open...\" and select the \"build.gradle\" file or the project directory).\n\nCreate a branch from the release branch to which you anticipate merging back changes, e.g. `3.4.x`, `3.5.x`, `3.6.x`, etc.\n\nThe most important task to complete before submitting work is the `check` task. This executes all the unit tests as well as various code quality checks.\n\n```\n./gradlew check\n```\n\nThe `check` task should complete successfully. Otherwise, the initial pull request will fail, and you will need to make corrections before it can be reviewed (unless you are opening a draft pull request).\n\n## Creating a pull request\n\nOnce you are satisfied with your changes:\n\n- Commit changes to the local branch you created.\n- Push that branch with changes to the corresponding remote branch on GitHub\n- Submit a [pull request](https://help.github.com/articles/creating-a-pull-request)\n\n## Checkstyle\n\nThe code base should remain clean, following industry best practices for organization, javadoc and style, as much as possible.\n\nThe Micronaut Framework uses [Checkstyle](http://checkstyle.sourceforge.net/) to make sure that all the code follows those standards. The configuration file is defined in `config/checkstyle/checkstyle.xml`.\nTo execute the Checkstyle task run:\n\n```\n./gradlew <module-name>:checkstyleMain\n```\n\nBefore contributing new code it is recommended you install IntelliJ [CheckStyle-IDEA](https://plugins.jetbrains.com/plugin/1065-checkstyle-idea) plugin and configure it to use Micronaut Framework's checkstyle configuration file.\n\nIntelliJ will mark in red the issues Checkstyle finds. For example:\n\n![checkstyle-issue](https://docs.micronaut.io/docsassets/img/checkstyle-issue.png)\n\nIn this case, to fix the issues, we need to:\n\n- Add one empty line before `package` in line 16\n- Add the Javadoc for the constructor in line 27\n- Add a space after `if` in line 34\n\nThe plugin also adds a new tab in IDEA's bottom view pane to run a checkstyle report to display errors and warnings.\nRun the report and fix any exposed issues before submitting a pull request. The gradle `check` task also produces an HTML report if there are errors.\n\n## Building on Windows 10\n\nThe following prerequisites are needed for building and testing on Windows 10:\n\n* Docker Desktop version 2.0.0.0 win81 build 29211 or higher is installed and running.\n* OpenSSL's binaries are installed, for example (https://indy.fulgan.com/SSL/) and on the PATH.\n"
        },
        {
          "name": "GRAAL.md",
          "type": "blob",
          "size": 16.2548828125,
          "content": "# Test Micronaut and GraalVM\n\nThe problem we want to solve is detect regressions in both Micronaut and GraalVM as soon as they are introduced and\nbefore a new version is released.\n\n## Gitlab CI\n\nWe use [Gitlab CI](https://about.gitlab.com/product/continuous-integration/) for running the tests.\n\nWe could configure the CI pipeline to run the tests for every commit in Micronaut (configuring a webhook), but we don't\nhave permissions to configure the webhook in GraalVM repository. Also, running all the test suite takes about 30 minutes,\nand it uses a lot of resources. Instead of running all the tests for every commit there are scheduled jobs that run\nthem every work day if there are new commits in either Micronaut or GraalVM repositories. When that happens, the jobs\ntrigger a CI build.\n\n### Projects\n\nThere are two repositories:\n\n- https://gitlab.com/micronaut-projects/micronaut-graal-tests: The CI pipeline that runs all the tests is defined here.\n- https://gitlab.com/micronaut-projects/micronaut-graal-tests-scheduler: Additional repository that keeps track of the commits already processed. The scheduled jobs are configured here, and they are used to trigger the jobs in the previous repository.\n\n### Branch structure\n\nIt is possible to test different Micronaut and GraalVM versions. For Micronaut, we always test the current stable version\nand the next one (using snapshots in both cases).\nIn the case of GraalVM we can test up to three different branches at the same time: stable, prerelease and development,\nand we always test at least two of them.\n\nCurrently, we have:\n\n- Micronaut: `3.2.x-SNAPSHOT` and `3.3.0-SNAPSHOT`\n- GraalVM: Stable (`21.3.0`), prerelease (`22.0.0-dev`) and development (`22.1.0-dev`)\n\nThese are the current branches:\n- `3.2.x-stable`: Micronaut `3.2.x-SNAPSHOT` and GraalVM `21.3.0`. To test that current stable versions of Micronaut work properly with current GraalVM stable version.\n- `3.3.x-stable`: Micronaut `3.3.x-SNAPSHOT` and GraalVM `21.3.0`. To test that next Micronaut version works with current GraalVM stable version.\n- `3.3.x-prerelease`: Micronaut `3.3.x-SNAPSHOT` and GraalVM `22.0.0-dev` from the prerelease branch. To test the next Micronaut version works with the next GraalVM from the prerelease branch.\n- `3.3.x-dev`: Micronaut `3.3.x-SNAPSHOT` and GraalVM `22.1.0-dev` from master branch. To test the next Micronaut version works with the future GraalVM version.\n\nWhen GraalVM `22.0.0-dev` becomes the next stable version, i.e, `22.0.0` the new branches should be:\n\n- `3.3.x-stable`: Micronaut `3.3.x-SNAPSHOT` and GraalVM `21.2.0`.\n- `3.3.x-dev`: Micronaut `3.3.x-SNAPSHOT` and GraalVM `22.1.0-dev` from master branch\n- `3.4.x-dev`: Micronaut `3.4.x-SNAPSHOT` and GraalVM `22.1.0-dev` from master branch\n\nThen, approximately a month before the next GraalVM version scheduled for [April 19th 2022](https://www.graalvm.org/release-notes/version-roadmap/)\nthe GraalVM team will create the next prerelease branch `release/graal-vm/22.1` and we need to create the new branch and a\nnew scheduled job.\n\nAll the configuration is in [this repository](https://gitlab.com/micronaut-projects/micronaut-graal-tests-scheduler) and\nthe `README` explains how it works. The only thing that we need to modify is the file `should-trigger-the-build.sh` to\nuse the appropriate Micronaut and GraalVM branches.\n\n**Important:** When adding commits to more than one branch, **always** cherry-pick the changes instead of merging branches. It helps a lot of keeping the branches \"clean\" without merges.\n\n### CI pipeline\n\nThe CI pipeline is configured in four stages:\n\n- `log-commits`: It only contains one job that logs the previous Micronaut and GraalVM commits and the new that triggered the build.\n- `build-graal`: One job per JDK version (currently 11 and 17) that clones GraalVM repository and builds it from source code. For the GraalVM stable versions it just downloads it.\n- `micronaut`: It contains one job per test application and JDK version. These are Micronaut applications built with GraalVM that we know are compatible and work with GraalVM. Every job builds the native-image for the associated application.\n- `test`: There is one job per test application and JDK version. Every job starts the native-image created in the previous stage, run some functional tests and checks the result.\n\n#### Log commits stage\n\n```yaml\nlog-commits:\n  image: alpine:3.8\n  stage: log-commits\n  script:\n    - ./log-commits.sh # <1>\n```\n- Executes the script to log the commits. An example of the job execution can be found\n[here](https://gitlab.com/micronaut-projects/micronaut-graal-tests/-/jobs/1950176930).\n\n#### Build Graal stage\n\n```yaml\n.build-graalvm:template: &build-graalvm-template # <1>\n  stage: build-graalvm\n  dependencies:\n    - log-commits\n  needs: [\"log-commits\"]\n  artifacts:\n    expire_in: 5 days\n    paths:\n      - $CI_PROJECT_DIR/graal_dist # <3>\n  cache:\n    key: ${GRAAL_NEW_COMMIT}-${CI_JOB_NAME} # <2>\n    paths:\n      - $CI_PROJECT_DIR/graal_dist # <2>\n  tags: # <4>\n    - aws\n    - speed2x\n    - memory2x\n\njdk11:build-graalvm:\n  <<: *build-graalvm-template # <5>\n  script:\n    - if [ -d $CI_PROJECT_DIR/graal_dist ]; then exit 0; fi # <6>\n    - ./build-graalvm.sh jdk11 # <7>\n\njdk17:build-graalvm:\n  <<: *build-graalvm-template\n  script:\n    - if [ -d $CI_PROJECT_DIR/graal_dist ]; then exit 0; fi\n    - ./build-graalvm.sh jdk17\n```\n\n1. Any job starting with a dot is hidden and won't be executed. In this case this line also defines a template named `build-graalvm-template` that other jobs can extend from.\n2. Use GraalVM last commit id and the job name as the cache key. This allows to reuse the same GraalVM build from source code if it hasn't changed. The `paths` option defines the output of the GraalVM compilation and that is what will be cached.\n3. The `artifact` path defines all the files that are passed automatically to the next stage in the pipeline. They expire automatically (meaning they are removed) after 5 days. Gitlab CI will save the artifacts and download them automatically in the next stage. With this configuration the GraalVM SDK we just built is available to create Micronaut native-images.\n4. Tags for this job. Jobs without tags run on Gitlab CI shared runners. All jobs with `aws` tag run on our own custom runners on AWS. Additionally, there are more tags necessary to define in which instance type the job is run. The tags will be explained bellow.\n5. Extend from the template and add more configuration.\n6. If the cache is present then exit the build and let the rest of the pipeline continue.\n7. If not, build GraalVM from source code.\n\n\n\n#### Micronaut Stage\n\nThe structure of all the jobs in this stage is the same:\n\n```yaml\n.micronaut:build-template: &micronaut-build-template # <1>\n  stage: micronaut\n  image: registry.gitlab.com/micronaut-projects/micronaut-graal-tests/graalvm-builder # <2>\n  before_script:\n    - export APP_BRANCH=$(echo $CI_BUILD_REF_NAME | sed \"s/-dev//\" | sed \"s/-stable//\" | sed \"s/-prerelease//\") # <3>\n  artifacts:\n    expire_in: 5 days\n  allow_failure: true # <4>\n  retry:\n    max: 2 # <5>\n    when:\n      - always\n\n.jdk11:micronaut-build: &jdk11-build # <6>\n  <<: *micronaut-build-template\n  dependencies:\n    - jdk11:build-graalvm\n  needs: [\"jdk11:build-graalvm\"]\n\n.jdk17:micronaut-build: &jdk17-build\n  <<: *micronaut-build-template\n  dependencies:\n    - jdk17:build-graalvm\n  needs: [\"jdk17:build-graalvm\"]\n\njdk11:basic-app:micronaut-build:\n  <<: *jdk11-build # <7>\n  artifacts:\n    paths:\n      - $CI_PROJECT_DIR/micronaut-basic-app/basic-app # <7>\n  script:\n    - ./build-basic-app.sh # <8>\n  tags: # <9>\n    - aws\n    - speed\n\njdk17:basic-app:micronaut-build:\n  <<: *jdk17-build\n  artifacts:\n    paths:\n      - $CI_PROJECT_DIR/micronaut-basic-app/basic-app\n  script:\n    - ./build-basic-app.sh\n  tags:\n    - aws\n    - speed\n```\n1. Common parent template for all jobs in `micronaut` stage.\n2. Use a custom [Docker image](https://gitlab.com/micronaut-projects/micronaut-graal-tests/-/tree/3.3.x-dev/docker) for building the native image based on the official GraalVM docker.\n3. Remove the suffixes `-dev`,  `-stable` and `-prerelease` from the current branch. The environment variable `APP_BRANCH` is used in every test application build script to check out the appropriate git branch.\n4. Allow failures for the jobs in this stage. We don't want that a failure here stops the execution of the rest of the jobs.\n5. Retry if there is an error. Sometimes this happens for connectivity issues when downloading the dependencies.\n6. Template for building JDK11 applications. Extends from the parent one.\n7. Define the artifact that will be saved and passed to the next stage. This is the name of the native image that Micronaut creates.\n8. Run the script to build the native image for the specific application.\n9. Run the job on custom AWS runners.\n\n\n#### Test stage\n\n```yaml\n.micronaut:test-template: &micronaut-test-template # <1>\n  stage: test\n  image: frolvlad/alpine-glibc:alpine-3.12 # <2>\n  before_script:\n    - ./test-before-script.sh # <3>\n  timeout: 20m\n  retry:\n    max: 1\n\n.micronaut:test-distroless-template: &micronaut-test-distroless-template # <4>\n  <<: *micronaut-test-template\n  image:\n    name: gcr.io/distroless/cc-debian10:debug # <5>\n    entrypoint: [ \"\" ]\n  before_script:\n    - ./test-before-script-distroless.sh # <6>\n\njdk11:basic-app:test:\n  <<: *micronaut-test-distroless-template # <7>\n  dependencies:\n    - jdk11:basic-app:micronaut-build\n  needs: [\"jdk11:basic-app:micronaut-build\"]\n  script:\n    - ./test-basic-app.sh # <8>\n\njdk17:basic-app:test:\n  <<: *micronaut-test-distroless-template\n  dependencies:\n    - jdk17:basic-app:micronaut-build\n  needs: [\"jdk17:basic-app:micronaut-build\"]\n  script:\n    - ./test-basic-app.sh\n```\n1. Common parent template for all jobs in `test` stage that build dynamic native images.\n2. We use `frolvlad/alpine-glibc:3.12` Docker image to run the native-image applications.\n3. Script with common dependencies for all tests: `curl`, `jq` and `libstdc++`.\n4. Common parent template for all jobs in `test` stage that build \"mostly static\" native images.\n5. Distroless Docker image for \"mostly static\" native images.\n6. Script that downloads `curl` and `jq`.\n7. `basic-app` is generated as \"mostly static\" native image, so apply that parent template.\n8. Run the tests.\n\n### More information\n\nFor more information about Gitlab CI see https://docs.gitlab.com/ee/ci/.\n\n\n### CI Execution\n\nThere is a channel in OCI's chat named `micronaut-graal-tests` that gets notifications when jobs are executed.\n\n\n## Test applications\n\nThe tests applications are in the GitHub organization [micronaut-graal-tests](https://github.com/micronaut-graal-tests).\nAll the applications have similar structure, and they test different Micronaut integrations that we know work properly\nwith GraalVM.\n\nThere are two different branch names strategies in the test applications:\n\n- Same dependencies: These are almost all applications: basic-app, AWS, cache, rabbitmq, redis, schedule,... There is one branch per Micronaut branch: `3.3.x`, `3.2.x`, `3.1.x`,...\n- Common structure but different dependencies: This is for applications that use Micronaut Data, Views, MQTT... There is one branch per Micronaut branch and database/view technology/...: `3.3.x_h2`, `3.3.x_mysql`, `3.3.x_postgres`, `3.3.x_thymeleaf`, `3.3.x_handlebars`, `3.3.x_v3`, `3.3.x_v5`,...\n\n\n## Add a new Micronaut test application\n\nThese are the steps to add a new Micronaut-GraalVM test application to the pipeline:\n\n- Create the new test application repository in https://github.com/micronaut-graal-tests.\n- Do not use `master` branch. Just add a common README there like the one in `basic-app` or `data-jdbc`.\n- Create the appropriate branch for the Micronaut version we want to target, e.g: `3.3.x`.\n- Create a `build-native-image.sh` script similar to the one in the other applications.\n- Add a README with the `curl` endpoints needed to test the application.\n\n- Create a new branch in https://gitlab.com/micronaut-projects/micronaut-graal-tests and modify `gitlab-ci.yml` file:\n    - Add the jobs for the new application in `micronaut` and `test` stages.\n    - Create the scripts to build the native-image for the micronaut application and for the tests. If the application needs a Docker dependency make sure it is configured properly and define the appropriate environment variables for the CI Environment.\n    - Commit the changes (a).\n    - Remove/comment out the rest of the test applications, so they are not executed, and we don't waste time and resources running them.\n    - Commit the changes (b).\n    - Push the branch and wait for the build.\n    - If something fails, fix commit (c) and repeat.\n    - Once it passes, cherry-pick and squash the commits (a) and (c) that add the new application into the appropriate CI branch.\n    - Push the changes *without* triggering a build `git push -o ci.skip`\n    - When appropriate, cherry-pick the commit to the necessary branches. For example, if we are testing this initially in `3.3.x-stable` branch, then cherry-pick the commit that adds the new test applications to branches `3.3.x-dev` and `3.3.x-prerelease`.\n\n\n## AWS Custom runners\n\nWe use custom AWS runners with auto-scaling configured. Everything is based on the official documentation https://docs.gitlab.com/runner/configuration/runner_autoscale_aws/.\n\nThis kind of configuration only needs one instance running 24x7 that will handle the auto-scaling of the rest of the instances used to run the tests. This instance doesn't need to be too powerful and at this moment it is a `t3a.small` (2 vCPU and 2 GB RAM).\n\nIt is important to note that the auto-scaling uses Docker Machine under the hood to start the new instances. Docker Machine is not maintained anymore so the Gitlab team created a fork that they maintain with critical fixes. At this moment we are using the latest version available at https://gitlab.com/gitlab-org/ci-cd/docker-machine/-/releases.\n\n### Runners\n\nAt this moment we have three different runners depending on the needs of the task. Every job that should run on our custom runners needs to have the tag `aws` and additionally one of the following:\n\n- `speed`: When a job running on Gitlab CI custom runners takes a lot of time or fails because of memory constraints, this is the first tag we need to add. A job with this tag will use a `c5a.xlarge` EC2 instance (4 vCPU and 8 GB RAM).\n- `memory`: If a job still fails with the previous runner because it needs more memory, then we use this tag. It uses a `t3a.xlarge` EC2 instances (4 vCPU and 16 GB RAM).\n- `speed2x` and `memory2x`: These to tags need to be combined and a job with them will use a `c5a.2xlarge` EC2 instance (8 vCPU and 16 GB RAM). At this moment only the jobs that build GraalVM from source code use this instance.\n\n\n## Additional scripts to manage applications\n\nThere is [another project](https://gitlab.com/micronaut-projects/upgrade-micronaut-version) in the same Gitlab organization that contain bash utility scripts to upgrade the different versions in all the test applications:\n\n- `create-new-branch.sh`: Create a new branch based off other one. Used when there is a new Micronaut minor or major version.\n- `upgrade-gradle-plugin-version.sh`: Upgrade the Micronaut application Gradle plugin version.\n- `upgrade-gradle-version.sh`: Upgrade Gradle Wrapper version.\n- `upgrade-micronaut-data-version.sh`: Upgrade Micronaut Data version.\n- `upgrade-micronaut-version.sh`:  Upgrade Micronaut version.\n- `upgrade-shadow-plugin-version.sh`:  Upgrade Shadow plugin version.\n\n## Upgrade strategy for modules\n\n### Netty in core\n\nBefore upgrading Netty to a new version in Micronaut core we need to make sure it works with GraalVM. In the past there has been issues and regressions introduced by Netty.\nUse the [basic-app](https://github.com/micronaut-graal-tests/micronaut-basic-app) for the test. Upgrade Netty in core, publish a local snapshot and use it in the application. Make sure the endpoints documented in the application works (specially `hello` and HTTP-client related).\n\n### Liquibase and Flyway\n\nBefore upgrading versions of Liquibase and Flyway in the modules is necessary to make sure that they work with GraalVM. This is more important in Flyway because in Micronaut Flyway we have a few [GraalVM substitutions](https://github.com/micronaut-projects/micronaut-flyway/tree/master/flyway/src/main/java/io/micronaut/flyway/graalvm) from some internal Flyway classes. In the past, there has been issues in different Flyway versions because they team modified a constructor or added/removed a method.\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.001953125,
          "content": "Thanks for reporting an issue, please review the task list below before submitting the\nissue. Your issue report will be closed if the issue is incomplete and the below tasks not completed.\n\nNOTE: If you are unsure about something and the issue is more of a question a better place to ask questions is on Stack Overflow (https://stackoverflow.com/tags/micronaut) or Gitter (https://gitter.im/micronautfw/). DO NOT use the issue tracker to ask questions.\n\n### Task List\n\n- [ ] Steps to reproduce provided\n- [ ] Stacktrace (if present) provided\n- [ ] Example that reproduces the problem uploaded to GitHub\n- [ ] Full description of the issue provided (see below)\n\n### Steps to Reproduce\n\n1. TODO\n2. TODO\n3. TODO\n\n### Expected Behaviour\n\nTell us what should happen\n\n### Actual Behaviour\n\nTell us what happens instead\n\n### Environment Information\n\n- **Operating System**: TODO\n- **Micronaut Version:** TODO\n- **JDK Version:** TODO\n\n### Example Application\n\n- TODO: link to GitHub repository with example that reproduces the issue\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINING.md",
          "type": "blob",
          "size": 11.66796875,
          "content": "# Micronaut module maintenance tasks\n\n## Triage incoming issues\n\nNew issues need to be categorised. At least with one of the following labels:\n\n* `type: bug`: when something is not working as designed.\n* `type: improvement`: a minor improvement over an existing feature.\n* `type: enhancement`: a completely new feature.\n* `type: docs`: documentation change.\n\nThere are other labels that are useful for changelog generation:\n\n* `type: breaking`.\n* `type: deprecated`.\n* `type: removed`.\n\nIssues with the above labels will show up in their own section in the changelog.\n\nSometimes, before accepting bugs, we need to ask more information to the requester, or need to validate ourselves that it\nis actually a bug. There are some labels to help with these situations:\n\n* `status: awaiting feedback`: used to mark that we are waiting for more information to the user.\n* `status: awaiting validation`: we need to validate ourselves that it is actually an issue.\n* `status: awaiting third-party`: the issue is blocked by another bug in a third-party library\n\nNote that when the blockers are cleared, the awaiting labels need to be manually removed. There are some other labels\naround this:\n\n* `status: validated`: the issue is ready to be being worked on.\n* `status: acknowledged` (possibly duplicate?).\n* `status: in progress`: (could be removed, we assign issues to mark them being worked on)\n\nThere are sometimes where we are not sure whether we want or can solve an issue. The labels about this are:\n\n* `status: under consideration`: the issue is being considered, but has not been accepted yet.\n* `status: future consideration`: we won't fix it now (because either we can't or we don't want to), but this can be\n  revisited in the future.\n* `status: next major version`: it is a breaking change and therefore needs to be implemented in the next major version.\n\nThere are also a bunch of `relates-to` labels that can be used to further categorise issues. This is helpful in projects\nwith a lot of issues, or projects where different people work on different parts or modules.\n\nThe majority of the issues are defined in the\n[management](https://github.com/micronaut-projects/management/blob/master/labels.tf) repo, and propagated via Terraform.\nIf you want new labels:\n\n* If they can be beneficial to several repos, send a pull request to the management repo.\n* If they are repo-specific, just go ahead and create them with the GitHub UI.\n\nFinally, issues (especially bugs) should be prioritised with either `priority: high`, `priority: medium` or\n`priority: low`. Checkout the\n[Issue Priority Labels](https://github.com/micronaut-projects/micronaut-core/wiki/Issue-Priority-Labels) document for\nguidelines about when to use each of them.\n\n## Review pull requests\n\nPull requests, regardless of whether they are created by internal or external contributors, should meet the following\ncriteria:\n\n* All the GitHub checks are passing (CLA signed and builds passing).\n* Code has a minimum quality, it uses the Micronaut APIs correctly, doesn't contain bad smells, etc. Essentially, the\n  type of things you would review in every other software project.\n* Contains tests.\n* Includes documentation.\n* If it closes any issues,\n  [they should be linked](https://docs.github.com/en/free-pro-team@latest/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue)\n  either using closing keywords, or manually.\n\nRegarding the target branch, backwards-compatible bug fixes and improvements typically target the default branch,\nbackwards-compatible enhancements target the next minor version branch, and breaking changes target the next major version\nbranch. Check the\n[Micronaut Module Versioning](https://github.com/micronaut-projects/micronaut-core/wiki/Micronaut-Module-Versioning)\ndocument for more information.\n\nBefore merging pull requests, it is really important to ensure they target the correct branch, so that in the next\npatch/minor release we don't leak breaking changes. Check the\n[Micronaut Module Branch Naming](https://github.com/micronaut-projects/micronaut-core/wiki/Micronaut-Module-Branch-Naming)\ndocument for more information.\n\nNote that\n[Micronaut Core and Starter](https://github.com/micronaut-projects/micronaut-core/wiki/Micronaut-Core-and-Starter-Branching-Strategy)\nfollow a slightly different strategy.\n\n### Automated pull requests\n\n#### Dependency upgrades\n\nAll Micronaut repos have 2 dependency upgrade checking mechanism:\n\n1. Renovate: it has the advantage that it performs dependency upgrades not only on build dependencies, but also on\n   GitHub Actions workflows. On the other hand, its biggest downside is that it's unable to find newer versions for\n   those defined in `gradle.properties`. It will also send different PRs for the same version upgrade if the artifact ID\n   is different. For example, if you have `com.example:client:1.0` and `com.example:server:1.0`, and a new 1.1 version\n   arrives for both, it will send 2 PRs, where they should both be upgraded at the same time.\n\n2. To overcome those disadvantages, we have our own dependency upgrade solution based on the\n   [Gradle Use Latest Versions Plugin](https://github.com/patrikerdes/gradle-use-latest-versions-plugin). It runs daily\n   during weekdays.\n\nThe consequence of having both approaches in place is that we get multiple dependency upgrade PRs: one created by\n`micronaut-build` via our automation, and one or many (one per dependency) created by Renovate. When merging those, it\nis better to prefer the `micronaut-build` ones, if possible, for 2 reasons: a) they attempt to upgrade multiple dependencies\nin a single PR, which creates less noise in the Git history; b) Once you merge that, Renovate will react and automatically\nclose its own PRs if the dependency is up-to-date.\n\nWhen an upgrade to a new version arrives, we need to be careful when merging, so that we don't introduce an\nunnecessary upgrade burden on our users. Read the\n[Module Upgrade Strategy](https://github.com/micronaut-projects/micronaut-core/wiki/Module-Upgrade-Strategy) for more\ninformation.\n\nNote that if a new version arrives, and we are not ready yet to do the upgrade, you need to\n[pin the old version](https://github.com/micronaut-projects/micronaut-build/#configuration-options), because otherwise,\nRenovate and our workflow will keep sending PRs. You should also create an issue to upgrade so that it's not forgotten.\n\n#### Files sync\n\nWe have a [template repo](https://github.com/micronaut-projects/micronaut-project-template) that we use as the single\nsource of truth for certain files. It is used as a template to create new repos, and changes to certain files in the\ntemplate repo will get propagated automatically. The files propagated are:\n\n* Workflow files (`.github/workflows/*`). They are copied using rsync\"\n  * `central-sync.yml`.\n  * `dependency-update.yml`.\n  * `graalvm.yml`.\n  * `gradle.yml`.\n  * `release.yml`.\n  * `release-notes.yml`.\n* Renovate configuration (`.github/renovate.json`).\n* Gradle wrapper.\n* `.gitignore`.\n* `ISSUE_TEMPLATE.md`, `LICENSE`, `MAINTAINING.md`, `config/HEADER` and `config/spotless.license.java`.\n* Checkstyle's `config/checkstyle/checkstyle.xml` and `config/checkstyle/suppressions.xml`.\n\nRegarding the Gradle wrapper, the template repo checks every week if there is a new Gradle version. If there is, it will\nupgrade the wrapper in the template repo itself, and via the files sync workflow this gets propagated to all repos. This\nway we make sure we stay up-to-date regarding Gradle versions in all repos.\n\n##### Customised workflow files\n\nDue to limitations in the GitHub Actions design (such that they don't allow including snippets or any other kind of\nreusability), for the sync'ed workflow files listed above, it is not possible to have custom steps and still be part of\nthe sync process, since any modification to those files will be overwritten the next time the files sync workflow is\nexecuted.\n\nThe \"Java CI\" (`gradle.yml`) workflow does have the ability to have an optional setup step, though. If there is a `setup.sh`\nfile in the project root, it will be executed before invoking Gradle.\n\nThere are projects, such as micronaut-gcp and micronaut-kubernetes, that have made customisations to sync'ed workflows\nbecause it's absolutely necessary. In those projects, the sync pull requests are manually merged so that the customisations\naren't lost.\n\nNote that it is perfectly possible to have new workflows that aren't part of the sync process.\n\n## Releases\n\nThe release process is highly automated and normally involves just publishing a GitHub release. But before you get there,\nthere are some parts you need to understand first.\n\nFirst of all, all the repos have an automatic changelog generation mechanism: when a change is made to the repo\n(a push event), it creates (or updates if there is already one) a draft release, calculating the next patch version. The\nrelease notes will contain pull requests merged and issues closed since the last release.\n\nWhen the module is ready for a new release, check the generated release notes, and make changes if needed (for example,\nyou can add an introduction paragraph highlighting some items included in the release). If the version you are going to\npublish is not a new patch version, but a new minor or major, update the release notes text to reflect the new version.\nIf you are publishing a milestone or release candidate, check the pre-release checkbox.\n\nNote that the release tags must be preceded with `v`, e.g.: `v1.2.3`.\n\nOnce you publish the GitHub release, the\n[Release GitHub Action workflow](https://github.com/micronaut-projects/micronaut-project-template/blob/master/.github/workflows/release.yml)\nwill kick off, performing the following steps:\n\n* Pre-release: sets the `projectVersion` property in `gradle.properties` to the release version, and commit and pushes\n  the result.\n* Generates documentation guide and publishes it to the `gh-pages` branch.\n* Sends a pull request to Core to update the BOM.\n* Post-release:\n  * Determines the next patch version, and sets it as a `SNAPSHOT` version.\n  * Closes the milestone that matches the release version, and creates a new one for the next patch.\n\nIf everything goes well, you now need to manually trigger the Maven Central publishing workflow via the GitHub UI.\n\nIf there is an issue with the release, it's important not to trigger the Maven Central publishing workflow because once\nwe publish a version to Maven Central we cannot change or remove it anymore.\n\nThere are some properties in `gradle.properties` that affect the release process:\n\n* `githubBranch`: the current branch, usually `master`.\n* `githubCoreBranch`: the Micronaut Core branch where the BOM update pull requests will be sent to.\n* `bomProperty`: in Micronaut Core's `gradle.properties`, the property that represents this module's version.\n* `bomProperties`: if needed, additional properties for the BOM pull request.\n\nFor example, assuming a module has the release `1.0.0` as the latest version published, which was included in the\nMicronaut `2.2.0` BOM. If the next version you want to publish is:\n\n* A new patch release (`1.0.1`): simply publish the existing draft release.\n* A new minor release (`1.1.0`):\n  * Before the release, push a `1.0.x` branch off `master`.\n  * Bump the version in master to `1.1.0-SNAPSHOT`.\n  * Set the `githubCoreBranch` property to `2.3.x` (or `3.0.x` if it will be the next one).\n  * Edit the draft release setting the version to `1.1.0` in the release title, body, tag, etc.\n  * Publish the release.\n* A new major release (`2.0.0`):\n  * Before the release, push a `1.0.x` branch off `master`.\n  * Bump the version in master to `2.0.0-SNAPSHOT`.\n  * Set the `githubCoreBranch` property to `3.0.x` (or `2.3.x` if this new major version doesn't introduce breaking changes).\n  * Edit the draft release setting the version to `2.0.0` in the release title, body, tag, etc.\n  * Publish the release.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0517578125,
          "content": "# Micronaut Framework\n\n[![Build Status](https://github.com/micronaut-projects/micronaut-core/workflows/Java%20CI/badge.svg)](https://github.com/micronaut-projects/micronaut-core/actions)\n[![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.micronaut.io/scans)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=micronaut-projects_micronaut-core&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=micronaut-projects_micronaut-core)\n\n[Micronaut Framework](https://micronaut.io) is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin and the Groovy language.\n\nThe Micronaut framework was originally created by a team who had also worked on the Grails framework. The Micronaut framework takes inspiration from lessons learned over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and the Grails framework. The core team continues to develop and maintain the Micronaut project through the support of the Micronaut Foundation.\n\nMicronaut Framework aims to provide all the tools necessary to build JVM applications including:\n\n* Dependency Injection and Inversion of Control (IoC)\n* Aspect Oriented Programming (AOP)\n* Sensible Defaults and Auto-Configuration\n\nWith Micronaut Framework you can build Message-Driven Applications, Command Line Applications, HTTP Servers and more whilst for Microservices in particular Micronaut Framework also provides:\n\n* Distributed Configuration\n* Service Discovery\n* HTTP Routing\n* Client-Side Load Balancing\n\nAt the same time Micronaut Framework aims to avoid the downsides of frameworks like Spring, Spring Boot and Grails by providing:\n\n* Fast startup time\n* Reduced memory footprint\n* Minimal use of reflection\n* Minimal use of proxies\n* No runtime bytecode generation\n* Easy Unit Testing\n\nThis is achieved by pre-computing the framework infrastructure at compilation time which reduces the logic required at runtime for the application to work.\n\nFor more information on using Micronaut Framework see the documentation at [micronaut.io](https://micronaut.io)\n\n## Example Applications\n\nExample Micronaut Framework applications can be found in the [Examples repository](https://github.com/micronaut-projects/micronaut-examples)\n\n## Building From Source\n\nTo build from source checkout the code and run:\n\n```\n./gradlew publishToMavenLocal\n```\n\nTo build the documentation run `./gradlew docs`. The documentation is built to `build/docs/index.html`.\n\n## Contributing Code\n\nIf you wish to contribute to the development of Micronaut Framework please read the [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Versioning\n\nMicronaut Framework uses Semantic Versioning 2.0.0. To understand what that means, please see the specification [documentation](https://semver.org/). Exclusions to Micronaut Framework's public API include any classes annotated with `@Experimental` or `@Internal`, which reside in the `io.micronaut.core.annotation` package.\n"
        },
        {
          "name": "RELEASE.adoc",
          "type": "blob",
          "size": 1.0986328125,
          "content": "= Micronaut Core Release Process\n\n. Ensure all changes from previous branches are merged up\n. Ensure there are no snapshot dependencies \n. Set the version to a release version in `gradle.properties`\n. Commit the release `git commit -a -m \"Release Micronaut XXX\"`\n. Tag the release `git tag vXXX` (Don't forget the `v` prefix!)\n. Push the tag `git push --tags` and waiting for Travis to complete the tagged release https://travis-ci.org/micronaut-projects/micronaut-core/\n. Login to the Bintray repo at https://bintray.com/micronaut/core-releases-local and click the button to publish the staged release.\n. Update the release notes at https://github.com/micronaut-projects/micronaut-core/releases/tag/vXXX\n. Run the Maven Central sync locally `./gradlew sWMC` (may take over an hour, repeat if fails at any point)\n. Verify the release worked \n * Run `sdk install micronaut XXX` and perform smoke tests or creating an application etc.\n * Check the documentation published to docs.micronaut.io/XXX\n. Change the version in `gradle.properties` back to a snapshot of next release\n. Push the code `git push` \n. Announce the Release\n"
        },
        {
          "name": "ROADMAP.adoc",
          "type": "blob",
          "size": 0.126953125,
          "content": "= Micronaut ROADMAP\n\nMicronaut Foundation uses https://github.com/orgs/micronaut-projects/projects[GitHub projects] for planning.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.70703125,
          "content": "# Security Policy\n\nWe release patches for security vulnerabilities. Which versions are eligible\nreceiving such patches depend on the CVSS v3.0 Rating:\n\n| CVSS v3.0 | Supported Versions                        |\n|-----------|-------------------------------------------|\n| 9.0-10.0  | Releases within the previous three months |\n| 4.0-8.9   | Most recent release                       |\n\n## Reporting a Vulnerability\n\nPlease responsibly disclose (suspected) security vulnerabilities to\n**[The Micronaut Foundation](foundation@micronaut.io)**. You will receive a response from\nus within 48 hours. If the issue is confirmed, we will release a patch as soon\nas possible depending on complexity but historically within a few days.\n"
        },
        {
          "name": "aop",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "buffer-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.2958984375,
          "content": "plugins {\n    id \"io.micronaut.build.internal.docs\"\n    id \"io.micronaut.build.internal.dependency-updates\"\n    id \"io.micronaut.build.internal.version-catalog-updates\"\n    id \"io.micronaut.build.internal.convention-quality\"\n}\n\ntasks.named(\"updateVersionCatalogs\") {\n    // we set the list to empty because we accept upgrades which improve the status\n    rejectedQualifiers = []\n    // Invalid POM files\n    ignoredModules.add(\"io.micronaut.ignite:micronaut-ignite-core\")\n    ignoredModules.add(\"io.micronaut.ignite:micronaut-ignite-cache\")\n    // workaround Gradle variant selection problem\n    ignoredModules.add(\"com.github.ben-manes.caffeine:caffeine\")\n}\n\nif (System.getenv(\"SONAR_TOKEN\") != null) {\n    // deprecated and compile time only classes excluded from coverage\n    def coverageExcludes = [\n        \"**/StreamSoftServiceLoader.java\",\n        \"**/ServiceDescriptionProcessor.java\",\n        \"**/GraalReflectionConfigurer.java\",\n        \"**/graal/ServiceLoaderInitialization.java\",\n        \"**/graal/ServiceLoaderInitialization.java\",\n        \"**/DirectoryClassWriterOutputVisitor.java\",\n        \"**/GroovyClassWriterOutputVisitor.java\",\n        \"**/tck/**\",\n        \"**/test/support/**\"\n    ]\n    sonarqube {\n        properties {\n            property \"sonar.exclusions\", coverageExcludes.join(\",\")\n        }\n    }\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "context-propagation",
          "type": "tree",
          "content": null
        },
        {
          "name": "context",
          "type": "tree",
          "content": null
        },
        {
          "name": "core-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "core-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "core-reactive",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "discovery-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "function-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "function-web",
          "type": "tree",
          "content": null
        },
        {
          "name": "function",
          "type": "tree",
          "content": null
        },
        {
          "name": "graal",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 3.9814453125,
          "content": "projectVersion=4.8.0-SNAPSHOT\nprojectGroupId=io.micronaut\nprojectDesc=Core components supporting the Micronaut Framework\ntitle=Micronaut Core\ngithubSlug=micronaut-projects/micronaut-core\ndocsRepository=micronaut-projects/micronaut-docs\ntestsdir=inject-groovy/src/test/groovy/io/micronaut/docs\ntestssession=session/src/test/groovy/io/micronaut/session/docs\ntestskafka=configurations/kafka/src/test/groovy/io/micronaut/configuration/kafka/docs\ntestskafkastreams=configurations/kafka-streams/src/test/groovy/io/micronaut/configuration/kafka/streams\ntestsclient=http-client/src/test/groovy/io/micronaut/http/client/docs\ntestsjava=inject-java/src/test/java/io/micronaut/docs\ntestshttpservernetty=http-server-netty/src/test/groovy/io/micronaut/docs\ntestsuite=test-suite/src/test/groovy/io/micronaut/docs\ntestsuitekotlin=test-suite-kotlin/src/test/kotlin/io/micronaut/docs\ntestsuitegroovy=test-suite-groovy/src/test/groovy/io/micronaut/docs\ntestsuitejava=test-suite/src/test/java/io/micronaut/docs\ntestsredis=configurations/redis-lettuce/src/test/groovy/io/micronaut/configuration/lettuce\ntestsfunctionclient=function-client/src/test/groovy/io/micronaut/function/client/aws\ntestsmetricscore=configurations/micrometer-core/src/test/groovy/io/micronaut/docs\ntestsvalidation=validation/src/test/groovy/io/micronaut/docs\ntestsviews=views/src/test\ntestswebsocket=http-server-netty/src/test/groovy/io/micronaut/http/server/netty/websocket/\nmetricscore=configurations/micrometer-core/src/main/java/io/micronaut/configuration/metrics\nexamples=examples\njdkapi=https://docs.oracle.com/en/java/javase/17/docs/api\njakartaapi=https://jakarta.ee/specifications/platform/9/apidocs\nkafkaapi=https://kafka.apache.org/11/javadoc\nmicronautdiscoveryapi=https://micronaut-projects.github.io/micronaut-discovery-client/latest/api\nmicronautgroovyapi=https://micronaut-projects.github.io/micronaut-groovy/latest/api\nmicronauthystrixapi=https://micronaut-projects.github.io/micronaut-netflix/latest/api\nmicronautribbonapi=https://micronaut-projects.github.io/micronaut-netflix/latest/api\nmicronautcacheapi=https://micronaut-projects.github.io/micronaut-cache/latest/api\nmicronautreactorapi=https://micronaut-projects.github.io/micronaut-reactor/latest/api\nmicronautsessionapi=https://micronaut-projects.github.io/micronaut-session/snapshot/api\nmicronautsessiondocs=https://micronaut-projects.github.io/micronaut-session/snapshot/guide\nmicronautservletdocs=https://micronaut-projects.github.io/micronaut-servlet/latest/guide/\nmicronautspringapi=https://micronaut-projects.github.io/micronaut-spring/latest/api\nmicronauttracingapi=https://micronaut-projects.github.io/micronaut-tracing/latest/api\nmicronautvalidationdocs=https://micronaut-projects.github.io/micronaut-validation/snapshot/guide/index.html\nhibernateapi=http://docs.jboss.org/hibernate/orm/current/javadocs\nrsapi=http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc\nprojectUrl=https://micronaut.io\ndevelopers=Graeme Rocher\n\nkotlin.stdlib.default.dependency=false\n\n# For the docs\ngraalVersion=21.0.5\n\norg.gradle.caching=true\norg.gradle.parallel=true\norg.gradle.jvmargs=-Xmx1g\nsystemProp.predictiveTestSelection=false\npredictiveTestSelection=false\n\n# No matter which Java toolchain we use, the Kotlin Daemon is always invoked by the current JDK.\n# Therefor to fix Kapt errors when running tests under Java 21, we need to open up some modules for the Kotlin Daemon.\nkotlin.daemon.jvmargs=--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED\\\n --add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \\\n --add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "http-client-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-client-jdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-client-tck",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-client",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-server-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-server-tck",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-tck",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-validation",
          "type": "tree",
          "content": null
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-groovy-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-java-helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-java-helper2",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-java-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-java",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-kotlin-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject-test-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "inject",
          "type": "tree",
          "content": null
        },
        {
          "name": "jackson-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "jackson-databind",
          "type": "tree",
          "content": null
        },
        {
          "name": "json-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "management",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "messaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "retry",
          "type": "tree",
          "content": null
        },
        {
          "name": "router",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime-osx",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 2.271484375,
          "content": "pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        mavenCentral()\n    }\n}\n\nplugins {\n    id 'io.micronaut.build.shared.settings' version '7.3.2'\n}\nenableFeaturePreview(\"TYPESAFE_PROJECT_ACCESSORS\")\n\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n\nrootProject.name = 'micronaut-parent'\n\ninclude \"aop\"\ninclude \"core-bom\"\ninclude \"buffer-netty\"\ninclude \"core\"\ninclude \"core-reactive\"\ninclude \"core-processor\"\ninclude \"context\"\ninclude \"context-propagation\"\ninclude \"discovery-core\"\ninclude \"function\"\ninclude \"function-client\"\ninclude \"function-web\"\ninclude \"graal\"\ninclude \"http\"\ninclude \"http-client-core\"\ninclude \"http-client\"\ninclude \"http-client-jdk\"\ninclude \"http-client-tck\"\ninclude \"http-netty\"\ninclude \"http-server\"\ninclude \"http-server-tck\"\ninclude \"http-server-netty\"\ninclude \"http-tck\"\ninclude \"http-validation\"\ninclude \"inject\"\ninclude \"inject-groovy\"\ninclude \"inject-groovy-test\"\ninclude \"inject-java\"\ninclude \"inject-java-test\"\ninclude \"inject-java-helper\"\ninclude \"inject-java-helper2\"\ninclude 'inject-kotlin'\ninclude 'inject-kotlin-test'\ninclude \"inject-test-utils\"\ninclude \"jackson-core\"\ninclude \"jackson-databind\"\ninclude \"json-core\"\ninclude \"management\"\ninclude \"messaging\"\ninclude \"retry\"\ninclude \"router\"\ninclude \"runtime\"\ninclude \"runtime-osx\"\ninclude \"websocket\"\n\n// test suites\ninclude \"test-suite\"\ninclude \"test-suite-helper\"\ninclude \"test-suite-http-client-jdk-ssl\"\ninclude \"test-suite-http-client-tck-netty\"\ninclude \"test-suite-http-client-tck-jdk\"\ninclude \"test-suite-javax-inject\"\ninclude \"test-suite-jakarta-inject-bean-import\"\ninclude \"test-suite-http-server-tck-jdk\"\ninclude \"test-suite-http-server-tck-netty\"\ninclude \"test-suite-http2-server-tck-netty\"\ninclude \"test-suite-kotlin\"\ninclude \"test-suite-kotlin-ksp\"\ninclude \"test-suite-groovy\"\ninclude \"test-suite-groovy\"\ninclude \"test-suite-logback\"\ninclude \"test-suite-logback-external-configuration\"\ninclude \"test-suite-logback-graalvm\"\ninclude \"test-suite-netty-ssl-graalvm\"\ninclude \"test-suite-kotlin-graalvm\"\ninclude \"test-utils\"\ninclude \"test-suite-annotation-remapper\"\ninclude \"test-suite-annotation-remapper-visitor\"\n\n// benchmarks\ninclude \"benchmarks\"\n\nmicronautBuild {\n    useStandardizedProjectNames = true\n    nonStandardProjectNamePrefixes.addAll([\"test-\", \"benchmarks\"])\n}\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 0.013671875,
          "content": "./gradlew pTML"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-annotation-remapper-visitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-annotation-remapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-geb",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http-client-jdk-ssl",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http-client-tck-jdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http-client-tck-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http-server-tck-jdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http-server-tck-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-http2-server-tck-netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-jakarta-inject-bean-import",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-javax-inject",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-kotlin-graalvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-kotlin-ksp",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-logback-external-configuration",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-logback-graalvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-logback",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite-netty-ssl-graalvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-suite",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}