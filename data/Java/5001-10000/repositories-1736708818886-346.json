{
  "metadata": {
    "timestamp": 1736708818886,
    "page": 346,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjM0OA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yipianfengye/android-zxingLibrary",
      "stars": 5009,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "build\n*.iml\nout\n.idea/\nprebuilts\n.DS_Store\nlocal.properties\n.gradle\napp/libs/\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.498046875,
          "content": "# android-zxingLibrary\n\n\n**更新日志**\n\n- compile 1.3 2016/08/02 优化扫描API\n\n- compile 1.4 2016/08/03 修复扫描时二维码拉伸问题\n\n- compile 1.5 2016/08/05 更新控制闪光灯API\n\n- compile 1.6 2016/08/08 更新生成带logo二维码时logo不带边距可能存在的问题\n\n- compile 1.7 2016/08/09 修改默认扫描框的大小，适配不同分辨率手机，修改自定义扫描框属性类型\n\n- compile 1.8 2016/08/10 修复解析二维码图片时可能存在的OOM问题\n\n- compile 1.9 2016/09/07 Library库中删除Application，在demo库中的Application执行初始化操作\n\n- compile 2.0 2016/10/12 测试Demo中添加Android M权限处理，代码库添加自定义属性支持小圆点是否展示\n\n- compile 2.1 2016/11/22 修复扫描中的一些bug\n\n- compile 2.2 2017/07/04 更新zxing包，修复一些已知的bug\n\n**使用说明**\n\n- 可打开默认二维码扫描页面\n\n- 支持对图片Bitmap的扫描功能\n\n- 支持对UI的定制化操作\n\n- 支持对条形码的扫描功能\n\n- 支持生成二维码操作\n\n- 支持控制闪光灯开关\n\n**使用方式：**\n\n\n- **集成默认的二维码扫描页面**\n\n在具体介绍该扫描库之前我们先看一下其具体的使用方式，看看是不是几行代码就可以集成二维码扫描的功能。\n\n- 在module的build.gradle中执行compile操作\n\n```\ncompile 'cn.yipianfengye.android:zxing-library:2.2'\n```\n\n- 在demo Application中执行初始化操作\n```\n@Override\n    public void onCreate() {\n        super.onCreate();\n\n        ZXingLibrary.initDisplayOpinion(this);\n    }\n```\n\n- 在代码中执行打开扫描二维码界面操作\n\n```\n/**\n         * 打开默认二维码扫描界面\n         */\n        button1.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(MainActivity.this, CaptureActivity.class);\n                startActivityForResult(intent, REQUEST_CODE);\n            }\n        });\n```\n这里的REQUEST_CODE是我们定义的int型常量。\n\n- 在Activity的onActivityResult方法中接收扫描结果\n\n```\n/**\n         * 处理二维码扫描结果\n         */\n        if (requestCode == REQUEST_CODE) {\n            //处理扫描结果（在界面上显示）\n            if (null != data) {\n                Bundle bundle = data.getExtras();\n                if (bundle == null) {\n                    return;\n                }\n                if (bundle.getInt(CodeUtils.RESULT_TYPE) == CodeUtils.RESULT_SUCCESS) {\n                    String result = bundle.getString(CodeUtils.RESULT_STRING);\n                    Toast.makeText(this, \"解析结果:\" + result, Toast.LENGTH_LONG).show();\n                } else if (bundle.getInt(CodeUtils.RESULT_TYPE) == CodeUtils.RESULT_FAILED) {\n                    Toast.makeText(MainActivity.this, \"解析二维码失败\", Toast.LENGTH_LONG).show();\n                }\n            }\n        }\n```\n\n怎么样是不是很简单？下面我们可以来看一下具体的执行效果：\n\n**执行效果：**\n\n![image](https://github.com/yipianfengye/android-zxingLibrary/blob/master/images/ezgif.com-video-to-gif%20(2)%2015.33.08.gif)\n\n但是这样的话是不是太简单了，如果我想选择图片解析呢？别急，对二维码图片的解析也是支持的\n\n- **集成对二维码图片的解析功能**\n\n- 调用系统API打开图库\n\n```\nIntent intent = new Intent(Intent.ACTION_GET_CONTENT);\nintent.addCategory(Intent.CATEGORY_OPENABLE);\nintent.setType(\"image/*\");\nstartActivityForResult(intent, REQUEST_IMAGE);\n```\n\n- 在Activity的onActivityResult方法中获取用户选中的图片并调用二维码图片解析API\n```\nif (requestCode == REQUEST_IMAGE) {\n            if (data != null) {\n                Uri uri = data.getData();\n                ContentResolver cr = getContentResolver();\n                try {\n                    Bitmap mBitmap = MediaStore.Images.Media.getBitmap(cr, uri);//显得到bitmap图片\n\n                    CodeUtils.analyzeBitmap(mBitmap, new CodeUtils.AnalyzeCallback() {\n                        @Override\n                        public void onAnalyzeSuccess(Bitmap mBitmap, String result) {\n                            Toast.makeText(MainActivity.this, \"解析结果:\" + result, Toast.LENGTH_LONG).show();\n                        }\n\n                        @Override\n                        public void onAnalyzeFailed() {\n                            Toast.makeText(MainActivity.this, \"解析二维码失败\", Toast.LENGTH_LONG).show();\n                        }\n                    });\n\n                    if (mBitmap != null) {\n                        mBitmap.recycle();\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n```\n\n**执行效果**\n\n![image](http://img.blog.csdn.net/20160727170831543)\n\n有了默认的二维码扫描界面，也有了对二维码图片的解析，可能有的同学会说如果我想定制化显示UI怎么办呢？没关系也支持滴。\n\n- **定制化显示扫描UI**\n\n由于我们的扫描组件是通过Fragment实现的，所以能够很轻松的实现扫描UI的定制化。\n\n- 在新的Activity中定义Layout布局文件\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/activity_second\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <Button\n        android:id=\"@+id/second_button1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"取消\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginLeft=\"20dp\"\n        android:layout_marginRight=\"20dp\"\n        android:layout_marginBottom=\"10dp\"\n        android:layout_gravity=\"bottom|center_horizontal\"\n        />\n\n    <FrameLayout\n        android:id=\"@+id/fl_my_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        ></FrameLayout>\n\n</FrameLayout>\n```\n\n启动id为fl_my_container的FrameLayout就是我们需要替换的扫描组件，也就是说我们会将我们定义的扫描Fragment替换到id为fl_my_container的FrameLayout的位置。而上面的button是我们添加的一个额外的控件，在这里你可以添加任意的控件，各种UI效果等。具体可以看下面在Activity的初始化过程。\n\n- 在Activity中执行Fragment的初始化操作\n\n```\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        /**\n         * 执行扫面Fragment的初始化操作\n         */\n        CaptureFragment captureFragment = new CaptureFragment();\n        // 为二维码扫描界面设置定制化界面\n        CodeUtils.setFragmentArgs(captureFragment, R.layout.my_camera);\n        \n        captureFragment.setAnalyzeCallback(analyzeCallback);\n        /**\n         * 替换我们的扫描控件\n         */ getSupportFragmentManager().beginTransaction().replace(R.id.fl_my_container, captureFragment).commit();\n    }\n\n```\n\n其中analyzeCallback是我们定义的扫描回调函数，其具体的定义：\n\n```\n/**\n     * 二维码解析回调函数\n     */\n    CodeUtils.AnalyzeCallback analyzeCallback = new CodeUtils.AnalyzeCallback() {\n        @Override\n        public void onAnalyzeSuccess(Bitmap mBitmap, String result) {\n            Intent resultIntent = new Intent();\n            Bundle bundle = new Bundle();\n            bundle.putInt(CodeUtils.RESULT_TYPE, CodeUtils.RESULT_SUCCESS);\n            bundle.putString(CodeUtils.RESULT_STRING, result);\n            resultIntent.putExtras(bundle);\n            SecondActivity.this.setResult(RESULT_OK, resultIntent);\n            SecondActivity.this.finish();\n        }\n\n        @Override\n        public void onAnalyzeFailed() {\n            Intent resultIntent = new Intent();\n            Bundle bundle = new Bundle();\n            bundle.putInt(CodeUtils.RESULT_TYPE, CodeUtils.RESULT_FAILED);\n            bundle.putString(CodeUtils.RESULT_STRING, \"\");\n            resultIntent.putExtras(bundle);\n            SecondActivity.this.setResult(RESULT_OK, resultIntent);\n            SecondActivity.this.finish();\n        }\n    };\n```\n仔细看的话，你会发现我们调用了CondeUtils.setFragmentArgs方法，该方法主要用于修改扫描界面扫描框与透明框相对位置的，与若不调用的话，其会显示默认的组件效果，而如果调用该方法的话，可以修改扫描框与透明框的相对位置等UI效果，我们可以看一下my_camera布局文件的实现。\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\" >\n\n    <SurfaceView\n        android:id=\"@+id/preview_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        />\n\n    <com.uuzuche.lib_zxing.view.ViewfinderView\n        android:id=\"@+id/viewfinder_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:inner_width=\"200dp\"\n        app:inner_height=\"200dp\"\n        app:inner_margintop=\"150dp\"\n        app:inner_corner_color=\"@color/scan_corner_color\"\n        app:inner_corner_length=\"30dp\"\n        app:inner_corner_width=\"5dp\"\n        app:inner_scan_bitmap=\"@drawable/scan_image\"\n        app:inner_scan_speed=\"10\"\n        app:inner_scan_iscircle=\"false\"\n        />\n\n</FrameLayout>\n```\n\n上面我们自定义的扫描控件的布局文件，下面我们看一下默认的扫描控件的布局文件：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\" >\n\n    <SurfaceView\n        android:id=\"@+id/preview_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        />\n\n    <com.uuzuche.lib_zxing.view.ViewfinderView\n        android:id=\"@+id/viewfinder_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        />\n\n</FrameLayout>\n```\n\n可以发现其主要的区别就是在自定义的扫描控件中多了几个自定义的扫描框属性：\n\n```\n<declare-styleable name=\"innerrect\">\n        <attr name=\"inner_width\" format=\"dimension\"/><!-- 控制扫描框的宽度 -->\n        <attr name=\"inner_height\" format=\"dimension\"/><!-- 控制扫描框的高度 -->\n        <attr name=\"inner_margintop\" format=\"dimension\" /><!-- 控制扫描框距离顶部的距离 -->\n        <attr name=\"inner_corner_color\" format=\"color\" /><!-- 控制扫描框四角的颜色 -->\n        <attr name=\"inner_corner_length\" format=\"dimension\" /><!-- 控制扫描框四角的长度 -->\n        <attr name=\"inner_corner_width\" format=\"dimension\" /><!-- 控制扫描框四角的宽度 -->\n        <attr name=\"inner_scan_bitmap\" format=\"reference\" /><!-- 控制扫描图 -->\n        <attr name=\"inner_scan_speed\" format=\"integer\" /><!-- 控制扫描速度 -->\n        <attr name=\"inner_scan_iscircle\" format=\"boolean\" /><!-- 控制小圆点是否展示 -->\n    </declare-styleable>\n```\n\n通过以上几个属性我们就可以定制化的显示我们的扫描UI了，比如定制化微信扫描UI：\n\n**执行效果**\n\n![image](https://github.com/yipianfengye/android-zxingLibrary/blob/master/images/ezgif.com-video-to-gif%20(3)%2015.33.08.gif)\n\n当然了如果以上的以上，你还是对定制化UI方面不太满意，可以直接下载我的项目，然后引入lib-zxing module作为你的module，直接修改其代码。\n\n- **生成二维码图片**\n\n- 生成带Logo的二维码图片：\n\n```\n/**\n         * 生成二维码图片\n         */\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String textContent = editText.getText().toString();\n                if (TextUtils.isEmpty(textContent)) {\n                    Toast.makeText(ThreeActivity.this, \"您的输入为空!\", Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                editText.setText(\"\");\n                mBitmap = CodeUtils.createImage(textContent, 400, 400, BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\n                imageView.setImageBitmap(mBitmap);\n            }\n        });\n```\n\n- 生成不带logo的二维码图片\n\n```\n/**\n         * 生成不带logo的二维码图片\n         */\n        button1.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                String textContent = editText.getText().toString();\n                if (TextUtils.isEmpty(textContent)) {\n                    Toast.makeText(ThreeActivity.this, \"您的输入为空!\", Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                editText.setText(\"\");\n                mBitmap = CodeUtils.createImage(textContent, 400, 400, null);\n                imageView.setImageBitmap(mBitmap);\n            }\n        });\n```\n\n- 执行效果\n\n![image](https://github.com/yipianfengye/android-zxingLibrary/blob/master/images/ezgif.com-video-to-gif%20(5).gif)\n\n- 支持控制闪光灯\n\n```\n/**\n * 打开闪光灯\n */\nCodeUtils.isLightEnable(true);\n\n/**\n * 关闭闪光灯\n */\n CodeUtils.isLightEnable(false);\n```\n\n也可以参考我的博客：<a href=\"http://blog.csdn.net/qq_23547831/article/details/52037710\">几行代码快速集成二维码扫描库</a>\n"
        },
        {
          "name": "android-zxingLibrary.iml",
          "type": "blob",
          "size": 0.9287109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module external.linked.project.id=\"android-zxingLibrary\" external.linked.project.path=\"$MODULE_DIR$\" external.root.project.path=\"$MODULE_DIR$\" external.system.id=\"GRADLE\" external.system.module.group=\"\" external.system.module.version=\"unspecified\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"java-gradle\" name=\"Java-Gradle\">\n      <configuration>\n        <option name=\"BUILD_FOLDER_PATH\" value=\"$MODULE_DIR$/build\" />\n        <option name=\"BUILDABLE\" value=\"false\" />\n      </configuration>\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_7\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.gradle\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.486328125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib-zxing",
          "type": "tree",
          "content": null
        },
        {
          "name": "local.properties",
          "type": "blob",
          "size": 0.4453125,
          "content": "## This file is automatically generated by Android Studio.\n# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n#\n# This file must *NOT* be checked into Version Control Systems,\n# as it contains information specific to your local configuration.\n#\n# Location of the SDK. This is only used by Gradle.\n# For customization when using a Version Control System, please read the\n# header note.\n#Tue Jul 04 10:15:38 CST 2017\nsdk.dir=/Users/aaron/document/sdk\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.02734375,
          "content": "include ':app', ':lib-zxing'"
        }
      ]
    }
  ]
}