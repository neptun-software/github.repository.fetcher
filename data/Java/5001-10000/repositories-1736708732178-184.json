{
  "metadata": {
    "timestamp": 1736708732178,
    "page": 184,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AsyncHttpClient/async-http-client",
      "stars": 6307,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2001953125,
          "content": "*.class\n*~\n.*.swp\n.*.swo\n.loadpath\n.buildpath\n.classpath\n.project\n.settings\n.idea\n*.iml\n*.ipr\n*.iws\nnbproject\n.DS_Store\ntarget\ntest-output\nMANIFEST.MF\nwork\natlassian-ide-plugin.xml\n/bom/.flattened-pom.xml\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 2.08203125,
          "content": "## From 2.2 to 2.3\n\n* New `isFilterInsecureCipherSuites` config to disable unsecure and weak ciphers filtering performed internally in Netty.\n\n## From 2.1 to 2.2\n\n* New [Typesafe config](https://github.com/lightbend/config) extra module\n* new `enableWebSocketCompression` config to enable per-message and per-frame WebSocket compression extension\n\n## From 2.0 to 2.1\n\n* AHC 2.1 targets Netty 4.1.\n* `org.asynchttpclient.HttpResponseHeaders` was [dropped](https://github.com/AsyncHttpClient/async-http-client/commit/f4786f3ac7699f8f8664e7c7db0b7097585a0786) in favor\n  of `io.netty.handler.codec.http.HttpHeaders`.\n* `org.asynchttpclient.cookie.Cookie` was [dropped](https://github.com/AsyncHttpClient/async-http-client/commit/a6d659ea0cc11fa5131304d8a04a7ba89c7a66af) in favor\n  of `io.netty.handler.codec.http.cookie.Cookie` as AHC's cookie parsers were contributed to Netty.\n* AHC now has a RFC6265 `CookieStore` that is enabled by default. Implementation can be changed in `AsyncHttpClientConfig`.\n* `AsyncHttpClient` now exposes stats with `getClientStats`.\n* `AsyncHandlerExtensions` was [dropped](https://github.com/AsyncHttpClient/async-http-client/commit/1972c9b9984d6d9f9faca6edd4f2159013205aea) in favor of default methods\n  in `AsyncHandler`.\n* `WebSocket` and `WebSocketListener` methods were renamed to mention frames\n* `AsyncHttpClientConfig` various changes:\n    * new `getCookieStore` now lets you configure a CookieStore (enabled by default)\n    * new `isAggregateWebSocketFrameFragments` now lets you disable WebSocket fragmented frames aggregation\n    * new `isUseLaxCookieEncoder` lets you loosen cookie chars validation\n    * `isAcceptAnyCertificate` was dropped, as it didn't do what its name stated\n    * new `isUseInsecureTrustManager` lets you use a permissive TrustManager, that would typically let you accept self-signed certificates\n    * new `isDisableHttpsEndpointIdentificationAlgorithm` disables setting `HTTPS` algorithm on the SSLEngines, typically disables SNI and HTTPS hostname verification\n    * new `isAggregateWebSocketFrameFragments` lets you disable fragmented WebSocket frames aggregation\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.6103515625,
          "content": "   Copyright (c) 2014-2024 AsyncHttpClient Project. All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7353515625,
          "content": "# Async Http Client \n[![Build](https://github.com/AsyncHttpClient/async-http-client/actions/workflows/builds.yml/badge.svg)](https://github.com/AsyncHttpClient/async-http-client/actions/workflows/builds.yml)\n![Maven Central](https://img.shields.io/maven-central/v/org.asynchttpclient/async-http-client)\n\nFollow [@AsyncHttpClient](https://twitter.com/AsyncHttpClient) on Twitter.\n\nThe AsyncHttpClient (AHC) library allows Java applications to easily execute HTTP requests and asynchronously process HTTP responses.\nThe library also supports the WebSocket Protocol.\n\nIt's built on top of [Netty](https://github.com/netty/netty). It's compiled with Java 11.\n\n## Installation\n\nBinaries are deployed on Maven Central.\nAdd a dependency on the main AsyncHttpClient artifact:\n\nMaven:\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.asynchttpclient</groupId>\n        <artifactId>async-http-client</artifactId>\n        <version>3.0.1</version>\n    </dependency>\n</dependencies>\n```\n\nGradle:\n```groovy\ndependencies {\n    implementation 'org.asynchttpclient:async-http-client:3.0.1'\n}\n```\n\n### Dsl\n\nImport the Dsl helpers to use convenient methods to bootstrap components:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n```\n\n### Client\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient asyncHttpClient=asyncHttpClient();\n```\n\nAsyncHttpClient instances must be closed (call the `close` method) once you're done with them, typically when shutting down your application.\nIf you don't, you'll experience threads hanging and resource leaks.\n\nAsyncHttpClient instances are intended to be global resources that share the same lifecycle as the application.\nTypically, AHC will usually underperform if you create a new client for each request, as it will create new threads and connection pools for each.\nIt's possible to create shared resources (EventLoop and Timer) beforehand and pass them to multiple client instances in the config. You'll then be responsible for closing\nthose shared resources.\n\n## Configuration\n\nFinally, you can also configure the AsyncHttpClient instance via its AsyncHttpClientConfig object:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient c=asyncHttpClient(config().setProxyServer(proxyServer(\"127.0.0.1\",38080)));\n```\n\n## HTTP\n\n### Sending Requests\n\n### Basics\n\nAHC provides 2 APIs for defining requests: bound and unbound.\n`AsyncHttpClient` and Dsl` provide methods for standard HTTP methods (POST, PUT, etc) but you can also pass a custom one.\n\n```java\nimport org.asynchttpclient.*;\n\n// bound\nFuture<Response> whenResponse=asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\n\n// unbound\n        Request request=get(\"http://www.example.com/\").build();\n        Future<Response> whenResponse=asyncHttpClient.executeRequest(request);\n```\n\n#### Setting Request Body\n\nUse the `setBody` method to add a body to the request.\n\nThis body can be of type:\n\n* `java.io.File`\n* `byte[]`\n* `List<byte[]>`\n* `String`\n* `java.nio.ByteBuffer`\n* `java.io.InputStream`\n* `Publisher<io.netty.buffer.ByteBuf>`\n* `org.asynchttpclient.request.body.generator.BodyGenerator`\n\n`BodyGenerator` is a generic abstraction that let you create request bodies on the fly.\nHave a look at `FeedableBodyGenerator` if you're looking for a way to pass requests chunks on the fly.\n\n#### Multipart\n\nUse the `addBodyPart` method to add a multipart part to the request.\n\nThis part can be of type:\n\n* `ByteArrayPart`\n* `FilePart`\n* `InputStreamPart`\n* `StringPart`\n\n### Dealing with Responses\n\n#### Blocking on the Future\n\n`execute` methods return a `java.util.concurrent.Future`. You can simply block the calling thread to get the response.\n\n```java\nFuture<Response> whenResponse=asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\n        Response response=whenResponse.get();\n```\n\nThis is useful for debugging but you'll most likely hurt performance or create bugs when running such code on production.\nThe point of using a non blocking client is to *NOT BLOCK* the calling thread!\n\n### Setting callbacks on the ListenableFuture\n\n`execute` methods actually return a `org.asynchttpclient.ListenableFuture` similar to Guava's.\nYou can configure listeners to be notified of the Future's completion.\n\n```java\n        ListenableFuture<Response> whenResponse = ???;\n        Runnable callback = () - > {\n            try {\n               Response response = whenResponse.get();\n               System.out.println(response);\n            } catch (InterruptedException | ExecutionException e) {\n               e.printStackTrace();\n            }\n        };\n\n        java.util.concurrent.Executor executor = ???;\n        whenResponse.addListener(() - > ??? , executor);\n```\n\nIf the `executor` parameter is null, callback will be executed in the IO thread.\nYou *MUST NEVER PERFORM BLOCKING* operations in there, typically sending another request and block on a future.\n\n#### Using custom AsyncHandlers\n\n`execute` methods can take an `org.asynchttpclient.AsyncHandler` to be notified on the different events, such as receiving the status, the headers and body chunks.\nWhen you don't specify one, AHC will use a `org.asynchttpclient.AsyncCompletionHandler`;\n\n`AsyncHandler` methods can let you abort processing early (return `AsyncHandler.State.ABORT`) and can let you return a computation result from `onCompleted` that will be used\nas the Future's result.\nSee `AsyncCompletionHandler` implementation as an example.\n\nThe below sample just capture the response status and skips processing the response body chunks.\n\nNote that returning `ABORT` closes the underlying connection.\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nimport org.asynchttpclient.*;\nimport io.netty.handler.codec.http.HttpHeaders;\n\nFuture<Integer> whenStatusCode = asyncHttpClient.prepareGet(\"http://www.example.com/\")\n        .execute(new AsyncHandler<Integer> () {\n            private Integer status;\n            \n            @Override\n            public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {\n                status = responseStatus.getStatusCode();\n                return State.ABORT;\n            }\n            \n            @Override\n            public State onHeadersReceived(HttpHeaders headers) throws Exception {\n              return State.ABORT;\n            }\n            \n            @Override\n            public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {\n                 return State.ABORT;\n            }\n        \n            @Override\n            public Integer onCompleted() throws Exception{\n                return status;\n            }\n        \n            @Override\n            public void onThrowable(Throwable t) {\n                t.printStackTrace();\n            }\n        });\n\n        Integer statusCode = whenStatusCode.get();\n```\n\n#### Using Continuations\n\n`ListenableFuture` has a `toCompletableFuture` method that returns a `CompletableFuture`.\nBeware that canceling this `CompletableFuture` won't properly cancel the ongoing request.\nThere's a very good chance we'll return a `CompletionStage` instead in the next release.\n\n```java\nCompletableFuture<Response> whenResponse=asyncHttpClient\n        .prepareGet(\"http://www.example.com/\")\n        .execute()\n        .toCompletableFuture()\n        .exceptionally(t->{ /* Something wrong happened... */  })\n        .thenApply(response->{ /*  Do something with the Response */ return resp;});\n        whenResponse.join(); // wait for completion\n```\n\nYou may get the complete maven project for this simple demo\nfrom [org.asynchttpclient.example](https://github.com/AsyncHttpClient/async-http-client/tree/master/example/src/main/java/org/asynchttpclient/example)\n\n## WebSocket\n\nAsync Http Client also supports WebSocket.\nYou need to pass a `WebSocketUpgradeHandler` where you would register a `WebSocketListener`.\n\n```java\nWebSocket websocket = c.prepareGet(\"ws://demos.kaazing.com/echo\")\n        .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(\n                new WebSocketListener() {\n\n                  @Override\n                  public void onOpen(WebSocket websocket) {\n                    websocket.sendTextFrame(\"...\").sendTextFrame(\"...\");\n                  }\n\n                  @Override\n                  public void onClose(WebSocket websocket) {\n                    // ...\n                  }\n\n                  @Override\n                  public void onTextFrame(String payload, boolean finalFragment, int rsv) {\n                    System.out.println(payload);\n                  }\n\n                  @Override\n                  public void onError(Throwable t) {\n                    t.printStackTrace();\n                  }\n                }).build()).get();\n```\n\n## User Group\n\nKeep up to date on the library development by joining the Asynchronous HTTP Client discussion group\n\n[GitHub Discussions](https://github.com/AsyncHttpClient/async-http-client/discussions)\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.0419921875,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`\\\\unset -f command; \\\\command -v java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.7587890625,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Maven Start Up Batch script\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM M2_HOME - location of maven2's installed home dir\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho.\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho.\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %DOWNLOAD_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 16.0166015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  ~    Copyright (c) 2024 AsyncHttpClient Project. All rights reserved.\n  ~\n  ~    Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~    you may not use this file except in compliance with the License.\n  ~    You may obtain a copy of the License at\n  ~\n  ~        http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~    Unless required by applicable law or agreed to in writing, software\n  ~    distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~    See the License for the specific language governing permissions and\n  ~    limitations under the License.\n  -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.asynchttpclient</groupId>\n    <artifactId>async-http-client-project</artifactId>\n    <version>3.0.1</version>\n    <packaging>pom</packaging>\n\n    <name>AHC/Project</name>\n    <description>\n        The Async Http Client (AHC) library's purpose is to allow Java\n        applications to easily execute HTTP requests and\n        asynchronously process the response.\n    </description>\n\n    <url>https://github.com/AsyncHttpClient/async-http-client</url>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n\n    <properties>\n        <java.version>11</java.version>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n        <netty.version>4.1.116.Final</netty.version>\n        <netty.iouring>0.0.26.Final</netty.iouring>\n        <brotli4j.version>1.18.0</brotli4j.version>\n        <slf4j.version>2.0.16</slf4j.version>\n        <zstd-jni.version>1.5.6-8</zstd-jni.version>\n        <activation.version>2.0.1</activation.version>\n        <logback.version>1.5.12</logback.version>\n        <jetbrains-annotations.version>26.0.1</jetbrains-annotations.version>\n    </properties>\n\n    <developers>\n        <developer>\n            <id>hyperxpro</id>\n            <name>Aayush Atharva</name>\n            <email>aayush@shieldblaze.com</email>\n        </developer>\n    </developers>\n\n    <scm>\n        <connection>scm:git:git@github.com:AsyncHttpClient/async-http-client.git</connection>\n        <developerConnection>scm:git:git@github.com:AsyncHttpClient/async-http-client.git</developerConnection>\n        <url>https://github.com/AsyncHttpClient/async-http-client/tree/master</url>\n        <tag>HEAD</tag>\n    </scm>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>sonatype-nexus-staging</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>sonatype-nexus-staging</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <issueManagement>\n        <system>github</system>\n        <url>https://github.com/AsyncHttpClient/async-http-client/issues</url>\n    </issueManagement>\n\n    <mailingLists>\n        <mailingList>\n            <name>asynchttpclient</name>\n            <archive>https://groups.google.com/group/asynchttpclient/topics</archive>\n            <subscribe>https://groups.google.com/group/asynchttpclient/subscribe</subscribe>\n            <unsubscribe>https://groups.google.com/group/asynchttpclient/subscribe</unsubscribe>\n            <post>asynchttpclient@googlegroups.com</post>\n        </mailingList>\n    </mailingLists>\n\n    <modules>\n        <module>client</module>\n    </modules>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.junit</groupId>\n                <artifactId>junit-bom</artifactId>\n                <version>5.11.3</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.github.nettyplus</groupId>\n                <artifactId>netty-leak-detector-junit-extension</artifactId>\n                <version>0.0.5</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-buffer</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-codec-http</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-codec</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-codec-socks</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-handler-proxy</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-common</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-transport</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-handler</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-resolver-dns</artifactId>\n            <version>${netty.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-transport-native-epoll</artifactId>\n            <classifier>linux-x86_64</classifier>\n            <version>${netty.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-transport-native-epoll</artifactId>\n            <classifier>linux-aarch_64</classifier>\n            <version>${netty.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-transport-native-kqueue</artifactId>\n            <classifier>osx-x86_64</classifier>\n            <version>${netty.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-transport-native-kqueue</artifactId>\n            <classifier>osx-aarch_64</classifier>\n            <version>${netty.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty.incubator</groupId>\n            <artifactId>netty-incubator-transport-native-io_uring</artifactId>\n            <version>${netty.iouring}</version>\n            <classifier>linux-x86_64</classifier>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>io.netty.incubator</groupId>\n            <artifactId>netty-incubator-transport-native-io_uring</artifactId>\n            <version>${netty.iouring}</version>\n            <classifier>linux-aarch_64</classifier>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.luben</groupId>\n            <artifactId>zstd-jni</artifactId>\n            <version>${zstd-jni.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>brotli4j</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-linux-x86_64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-linux-aarch64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-linux-riscv64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-osx-x86_64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-osx-aarch64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.aayushatharva.brotli4j</groupId>\n            <artifactId>native-windows-x86_64</artifactId>\n            <version>${brotli4j.version}</version>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.sun.activation</groupId>\n            <artifactId>jakarta.activation</artifactId>\n            <version>${activation.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains</groupId>\n            <artifactId>annotations</artifactId>\n            <version>${jetbrains-annotations.version}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n                <configuration>\n                    <source>11</source>\n                    <target>11</target>\n                    <encoding>UTF-8</encoding>\n                    <compilerArgs>\n                        <arg>-XDcompilePolicy=simple</arg>\n                        <arg>-Xplugin:ErrorProne\n                            -Xep:JavaTimeDefaultTimeZone:ERROR\n                            -Xep:JavaUtilDate:ERROR\n                            -Xep:DateChecker:ERROR\n                            -Xep:DateFormatConstant:ERROR\n                            -Xep:EmptyBlockTag:ERROR\n                            -Xep:VariableNameSameAsType:ERROR\n                            -Xep:DoubleCheckedLocking:ERROR\n                            -Xep:DefaultCharset:ERROR\n                            -Xep:NullablePrimitive:ERROR\n                            -Xep:NullOptional:ERROR\n                            -XepExcludedPaths:.*/src/test/java/.*\n                            -XepOpt:NullAway:AnnotatedPackages=org.asynchttpclient\n                            -XepOpt:NullAway:UnannotatedSubPackages=org.asynchttpclient.netty,org.asynchttpclient.request\n                            -XepOpt:NullAway:AcknowledgeRestrictiveAnnotations=true\n                            -Xep:NullAway:ERROR\n                        </arg>\n                    </compilerArgs>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>com.google.errorprone</groupId>\n                            <artifactId>error_prone_core</artifactId>\n                            <version>2.31.0</version>\n                        </path>\n                        <path>\n                            <groupId>com.uber.nullaway</groupId>\n                            <artifactId>nullaway</artifactId>\n                            <version>0.12.1</version>\n                        </path>\n                        <!-- Other annotation processors go here -->\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.5.2</version>\n                <configuration>\n                    <argLine>\n                        @{argLine} --add-exports java.base/jdk.internal.misc=ALL-UNNAMED\n                    </argLine>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.12</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>report</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.2.1</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.11.1</version>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.7.0</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>false</autoReleaseAfterClose>\n                    <skipRemoteStaging>false</skipRemoteStaging>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>3.2.7</version>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                        <configuration>\n                            <!-- Prevent gpg from using pinentry programs -->\n                            <gpgArguments>\n                                <arg>--pinentry-mode</arg>\n                                <arg>loopback</arg>\n                            </gpgArguments>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
        }
      ]
    }
  ]
}