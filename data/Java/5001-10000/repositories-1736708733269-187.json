{
  "metadata": {
    "timestamp": 1736708733269,
    "page": 187,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koush/ion",
      "stars": 6284,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "bin\n.settings\nlocal.properties\ngen\n.gradle\nbuild\n.DS_Store\ngradle\ngradlew\ngradlew.bat\n\nion.iml\n*.iml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.9873046875,
          "content": "# Change Log\n\n## Version 2.0.0\n\n_2014-11-05_\n\n* Add support for SPDY. (HTTP/2 exists, is not enabled)\n* Conscrypt is the new SSL provider on all devices supporting GMS. Better https stack, with no changes necessary on your part.\n* Much lower memory footprint for ImageView operations. Faster too:\n * ImageView network requests are initiated onDraw (whereas they were immediately executed before). This results in automatic prioritization of on screen vs off screen ImageViews.\n * ImageView requests can now be center(Crop/Inside/etc) without a .resize(x,y) call. The ImageView dimensions are retrieved at draw time, and an intelligent decode sample size is used to fit the target dimensions. Eliminating the resize call also halves the total time it takes to get the image on screen. This is recommended.\n * GIF decoding is progressive. That means it is not loading all the frames up front before displaying the GIF. Tradeof is much less memory is used in exchange for more CPU time while the GIF is on screen.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5732421875,
          "content": "Copyright 2013 Koushik Dutta (2013)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9658203125,
          "content": "*Android Asynchronous Networking and Image Loading*\n\n![](ion-sample/ion-sample.png)\n\n#### Download\n * [Maven](https://github.com/koush/ion#get-ion)\n * [Git](https://github.com/koush/ion#get-ion)\n\n#### Features\n * [Kotlin coroutine/suspend support](https://github.com/koush/AndroidAsync/blob/master/AndroidAsync-Kotlin/README.md)\n * Asynchronously download:\n   * [Images](https://github.com/koush/ion#load-an-image-into-an-imageview) into ImageViews or Bitmaps (animated GIFs supported too)\n   * [JSON](https://github.com/koush/ion#get-json) (via [Gson](https://code.google.com/p/google-gson/))\n   * Strings\n   * [Files](https://github.com/koush/ion#download-a-file-with-a-progress-bar)\n   * Java types using [Gson](https://github.com/koush/ion#seamlessly-use-your-own-java-classes-with-gson)\n * Easy to use Fluent API designed for Android\n   * Automatically cancels operations when the calling Activity finishes\n   * Manages invocation back onto the UI thread\n   * All operations return a [Future](https://github.com/koush/ion#futures) and [can be cancelled](https://github.com/koush/ion#cancelling-requests)\n * HTTP POST/PUT:\n   * text/plain\n   * application/json - both [JsonObject](https://github.com/koush/ion#post-json-and-read-json) and [POJO](https://github.com/koush/ion#seamlessly-use-your-own-java-classes-with-gson)\n   * [application/x-www-form-urlencoded](https://github.com/koush/ion#post-applicationx-www-form-urlencoded-and-read-a-string)\n   * [multipart/form-data](https://github.com/koush/ion#post-multipartform-data-and-read-json-with-an-upload-progress-bar)\n * Transparent usage of HTTP features and optimizations:\n   * SPDY and HTTP/2\n   * Caching\n   * Gzip/Deflate Compression\n   * Connection pooling/reuse via HTTP Connection: keep-alive\n   * Uses the best/stablest connection from a server if it has multiple IP addresses\n   * Cookies\n * [View received headers](https://github.com/koush/ion#viewing-received-headers)\n * [Grouping and cancellation of requests](https://github.com/koush/ion#request-groups)\n * [Download progress callbacks](https://github.com/koush/ion#download-a-file-with-a-progress-bar)\n * Supports file:/, http(s):/, and content:/ URIs\n * Request level [logging and profiling](https://github.com/koush/ion#logging)\n * [Support for proxy servers](https://github.com/koush/ion#proxy-servers-like-charles-proxy) like [Charles Proxy](http://www.charlesproxy.com/) to do request analysis\n * Based on [NIO](http://en.wikipedia.org/wiki/New_I/O) and [AndroidAsync](https://github.com/koush/AndroidAsync)\n * Ability to use [self signed SSL certificates](https://github.com/koush/ion/issues/3)\n\n#### Samples\n\nThe included documented [ion-sample](https://github.com/koush/ion/tree/master/ion-sample) project includes some samples that demo common Android network operations:\n\n * [Twitter Client Sample](https://github.com/koush/ion/blob/master/ion-sample/src/com/koushikdutta/ion/sample/Twitter.java)\n   * Download JSON from a server (twitter feed)\n   * Populate a ListView Adapter and fetch more data as you scroll to the end\n   * Put images from a URLs into ImageViews (twitter profile pictures)\n * File Download with [Progress Bar Sample](https://github.com/koush/ion/blob/master/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java)\n * Get JSON and show images with the [Image Search Sample](https://github.com/koush/ion/blob/master/ion-sample/src/com/koushikdutta/ion/sample/ImageSearch.java)\n\n#### More Examples\n\nLooking for more? Check out the examples below that demonstrate some other common scenarios. You can also take a look\nat 30+ ion unit tests in the [ion-test](https://github.com/koush/ion/tree/master/ion/test/src/com/koushikdutta/ion/test).\n\n#### Get JSON\n\n```java\nIon.with(context)\n.load(\"http://example.com/thing.json\")\n.asJsonObject()\n.setCallback(new FutureCallback<JsonObject>() {\n   @Override\n    public void onCompleted(Exception e, JsonObject result) {\n        // do stuff with the result or error\n    }\n});\n```\n\n#### Post JSON and read JSON\n\n```java\nJsonObject json = new JsonObject();\njson.addProperty(\"foo\", \"bar\");\n\nIon.with(context)\n.load(\"http://example.com/post\")\n.setJsonObjectBody(json)\n.asJsonObject()\n.setCallback(new FutureCallback<JsonObject>() {\n   @Override\n    public void onCompleted(Exception e, JsonObject result) {\n        // do stuff with the result or error\n    }\n});\n```\n\n#### Post application/x-www-form-urlencoded and read a String\n\n```java\nIon.with(getContext())\n.load(\"https://koush.clockworkmod.com/test/echo\")\n.setBodyParameter(\"goop\", \"noop\")\n.setBodyParameter(\"foo\", \"bar\")\n.asString()\n.setCallback(...)\n```\n\n#### Post multipart/form-data and read JSON with an upload progress bar\n\n```java\nIon.with(getContext())\n.load(\"https://koush.clockworkmod.com/test/echo\")\n.uploadProgressBar(uploadProgressBar)\n.setMultipartParameter(\"goop\", \"noop\")\n.setMultipartFile(\"archive\", \"application/zip\", new File(\"/sdcard/filename.zip\"))\n.asJsonObject()\n.setCallback(...)\n```\n\n#### Download a File with a progress bar\n\n```java\nIon.with(context)\n.load(\"http://example.com/really-big-file.zip\")\n// have a ProgressBar get updated automatically with the percent\n.progressBar(progressBar)\n// and a ProgressDialog\n.progressDialog(progressDialog)\n// can also use a custom callback\n.progress(new ProgressCallback() {@Override\n   public void onProgress(long downloaded, long total) {\n       System.out.println(\"\" + downloaded + \" / \" + total);\n   }\n})\n.write(new File(\"/sdcard/really-big-file.zip\"))\n.setCallback(new FutureCallback<File>() {\n   @Override\n    public void onCompleted(Exception e, File file) {\n        // download done...\n        // do stuff with the File or error\n    }\n});\n```\n\n#### Setting Headers\n\n```java\nIon.with(context)\n.load(\"http://example.com/test.txt\")\n// set the header\n.setHeader(\"foo\", \"bar\")\n.asString()\n.setCallback(...)\n```\n\n#### Load an image into an ImageView\n\n```java\n// This is the \"long\" way to do build an ImageView request... it allows you to set headers, etc.\nIon.with(context)\n.load(\"http://example.com/image.png\")\n.withBitmap()\n.placeholder(R.drawable.placeholder_image)\n.error(R.drawable.error_image)\n.animateLoad(spinAnimation)\n.animateIn(fadeInAnimation)\n.intoImageView(imageView);\n\n// but for brevity, use the ImageView specific builder...\nIon.with(imageView)\n.placeholder(R.drawable.placeholder_image)\n.error(R.drawable.error_image)\n.animateLoad(spinAnimation)\n.animateIn(fadeInAnimation)\n.load(\"http://example.com/image.png\");\n```\n\nThe Ion Image load API has the following features:\n * Disk and memory caching\n * Bitmaps are held via weak references so memory is managed very efficiently\n * ListView Adapter recycling support\n * Bitmap transformations via the .transform(Transform)\n * Animate loading and loaded ImageView states\n * [DeepZoom](http://www.youtube.com/watch?v=yIMltNEAKZY) for extremely large images\n\n#### Futures\n\n_All_ operations return a custom [Future](http://developer.android.com/reference/java/util/concurrent/Future.html) that allows\nyou to specify a callback that runs on completion.\n\n```java\npublic interface Future<T> extends Cancellable, java.util.concurrent.Future<T> {\n    /**\n     * Set a callback to be invoked when this Future completes.\n     * @param callback\n     * @return\n     */\n    public Future<T> setCallback(FutureCallback<T> callback);\n}\n\nFuture<String> string = Ion.with(context)\n.load(\"http://example.com/string.txt\")\n.asString();\n\nFuture<JsonObject> json = Ion.with(context)\n.load(\"http://example.com/json.json\")\n.asJsonObject();\n\nFuture<File> file = Ion.with(context)\n.load(\"http://example.com/file.zip\")\n.write(new File(\"/sdcard/file.zip\"));\n\nFuture<Bitmap> bitmap = Ion.with(context)\n.load(\"http://example.com/image.png\")\n.intoImageView(imageView);\n```\n\n#### Cancelling Requests\n\nFutures can be cancelled by calling .cancel():\n\n```java\nbitmap.cancel();\njson.cancel();\n```\n\n#### Blocking on Requests\n\nThough you should try to use callbacks for handling requests whenever possible, blocking on requests is possible too.\nAll Futures have a Future<T>.get() method that waits for the result of the request, by blocking if necessary.\n\n```java\nJsonObject json = Ion.with(context)\n.load(\"http://example.com/thing.json\").asJsonObject().get();\n```\n\n#### Seamlessly use your own Java classes with [Gson](https://code.google.com/p/google-gson/)\n\n```java\npublic static class Tweet {\n    public String id;\n    public String text;\n    public String photo;\n}\n\npublic void getTweets() throws Exception {\n    Ion.with(context)\n    .load(\"http://example.com/api/tweets\")\n    .as(new TypeToken<List<Tweet>>(){})\n    .setCallback(new FutureCallback<List<Tweet>>() {\n       @Override\n        public void onCompleted(Exception e, List<Tweet> tweets) {\n          // chirp chirp\n        }\n    });\n}\n```\n\n#### Logging\n\nWondering why your app is slow? Ion lets you do both global and request level logging.\n\nTo enable it globally:\n\n```java\nIon.getDefault(getContext()).configure().setLogging(\"MyLogs\", Log.DEBUG);\n```\n\nOr to enable it on just a single request:\n\n```java\nIon.with(context)\n.load(\"http://example.com/thing.json\")\n.setLogging(\"MyLogs\", Log.DEBUG)\n.asJsonObject();\n```\n\nLog entries will look like this:\n\n```\nD/MyLogs(23153): (0 ms) http://example.com/thing.json: Executing request.\nD/MyLogs(23153): (106 ms) http://example.com/thing.json: Connecting socket\nD/MyLogs(23153): (2985 ms) http://example.com/thing.json: Response is not cacheable\nD/MyLogs(23153): (3003 ms) http://example.com/thing.json: Connection successful\n```\n\n#### Request Groups\n\nBy default, Ion automatically places all requests into a group with all the other requests\ncreated by that Activity or Service. Using the cancelAll(Activity) call, all requests\nstill pending can be easily cancelled:\n\n```java\nFuture<JsonObject> json1 = Ion.with(activity, \"http://example.com/test.json\").asJsonObject();\nFuture<JsonObject> json2 = Ion.with(activity, \"http://example.com/test2.json\").asJsonObject();\n\n// later... in activity.onStop\n@Override\nprotected void onStop() {\n    Ion.getDefault(activity).cancelAll(activity);\n    super.onStop();\n}\n```\n\nIon also lets you tag your requests into groups to allow for easy cancellation of requests in that group later:\n\n```java\nObject jsonGroup = new Object();\nObject imageGroup = new Object();\n\nFuture<JsonObject> json1 = Ion.with(activity)\n.load(\"http://example.com/test.json\")\n// tag in a custom group\n.group(jsonGroup)\n.asJsonObject();\n\nFuture<JsonObject> json2 = Ion.with(activity)\n.load(\"http://example.com/test2.json\")\n// use the same custom group as the other json request\n.group(jsonGroup)\n.asJsonObject();\n\nFuture<Bitmap> image1 = Ion.with(activity)\n.load(\"http://example.com/test.png\")\n// for this image request, use a different group for images\n.group(imageGroup)\n.intoImageView(imageView1);\n\nFuture<Bitmap> image2 = Ion.with(activity)\n.load(\"http://example.com/test2.png\")\n// same imageGroup as before\n.group(imageGroup)\n.intoImageView(imageView2);\n\n// later... to cancel only image downloads:\nIon.getDefault(activity).cancelAll(imageGroup);\n```\n\n#### Proxy Servers (like Charles Proxy)\n\nProxy server settings can be enabled all Ion requests, or on a per request basis:\n\n```java\n// proxy all requests\nIon.getDefault(context).configure().proxy(\"mycomputer\", 8888);\n\n// or... to proxy specific requests\nIon.with(context)\n.load(\"http://example.com/proxied.html\")\n.proxy(\"mycomputer\", 8888)\n.getString();\n```\n\nUsing Charles Proxy on your desktop computer in conjunction with request proxying will prove invaluable for debugging!\n\n![](ion-sample/charles.png)\n\n#### Viewing Received Headers\n\nIon operations return a [ResponseFuture](https://github.com/koush/ion/blob/master/ion/src/com/koushikdutta/ion/future/ResponseFuture.java),\nwhich grant access to response properties via the [Response object](https://github.com/koush/ion/blob/master/ion/src/com/koushikdutta/ion/Response.java).\nThe Response object contains the headers, as well as the result:\n\n```java\nIon.with(getContext())\n.load(\"http://example.com/test.txt\")\n.asString()\n.withResponse()\n.setCallback(new FutureCallback<Response<String>>() {\n    @Override\n    public void onCompleted(Exception e, Response<String> result) {\n        // print the response code, ie, 200\n        System.out.println(result.getHeaders().code());\n        // print the String that was downloaded\n        System.out.println(result.getResult());\n    }\n});\n```\n\n\n#### Get Ion\n\n##### Maven\n```xml\n<dependency>\n   <groupId>com.koushikdutta.ion</groupId>\n   <artifactId>ion</artifactId>\n   <version>(insert latest version)</version>\n</dependency>\n```\n\n##### Gradle\n```groovy\ndependencies {\n    compile 'com.koushikdutta.ion:ion:(insert latest version)'\n}\n````\n\n##### Local Checkout (with [AndroidAsync](https://github.com/koush/AndroidAsync) dependency)\n```\ngit clone git://github.com/koush/AndroidAsync.git\ngit clone git://github.com/koush/ion.git\ncd ion/ion\nant -Dsdk.dir=$ANDROID_HOME release install\n```\nJars are at\n * ion/ion/bin/classes.jar\n * AndroidAsync/AndroidAsync/bin/classes.jar\n\n#### Hack in Eclipse\n```\ngit clone git://github.com/koush/AndroidAsync.git\ngit clone git://github.com/koush/ion.git\n```\n* Import the project from AndroidAsync/AndroidAsync into your workspace\n* Import all the ion projects (ion/ion, ion/ion-sample) into your workspace.\n\n#### Projects using ion\n\nThere's hundreds of apps using ion. Feel free to contact me or submit a pull request to add yours to this list.\n\n* [AllCast](https://play.google.com/store/apps/details?id=com.koushikdutta.cast)\n* [Helium](https://play.google.com/store/apps/details?id=com.koushikdutta.backup)\n* [Repost](https://play.google.com/store/apps/details?id=com.dodgingpixels.repost)\n* [Cloupload](https://play.google.com/store/apps/details?id=de.gidix.cloupload)\n* [Binge](https://play.google.com/store/apps/details?id=com.stfleurs.binge)\n* [PictureCast](https://play.google.com/store/apps/details?id=com.unstableapps.picturecast.app)\n* [Eventius](https://play.google.com/store/apps/details?id=com.eventius.android)\n* [Plume](https://play.google.com/store/apps/details?id=com.levelup.touiteur)\n* [GameRaven](https://play.google.com/store/apps/details?id=com.ioabsoftware.gameraven)\n* [See You There](https://play.google.com/store/apps/details?id=com.maps.wearat&hl=en)\n* [Doogles](https://play.google.com/store/apps/details?id=io.dooglesapp)\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.73828125,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath project.hasProperty('global_gradleAndroidPlugin') ? global_gradleAndroidPlugin : 'com.android.tools.build:gradle:3.2.0'\n    }\n}\n\nsubprojects {\n    repositories {\n        jcenter()\n        google()\n        mavenCentral()\n    }\n\n    ext.global_compileSdkVersion = project.hasProperty('global_compileSdkVersion') ? global_compileSdkVersion : 28\n    ext.global_buildToolsVersion = project.hasProperty('global_buildToolsVersion') ? global_buildToolsVersion : '28.0.3'\n    ext.global_gradleAndroidPlugin = project.hasProperty('global_gradleAndroidPlugin') ? global_gradleAndroidPlugin : 'com.android.tools.build:gradle:3.2.0'\n}\n"
        },
        {
          "name": "ion-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ion-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "ion-test-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "ion",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}