{
  "metadata": {
    "timestamp": 1736708704147,
    "page": 139,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rest-assured/rest-assured",
      "stars": 6882,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1513671875,
          "content": "target\n*.iws\n*.ipr\n*.iml\n.classpath\n.project\n.settings\n.springBeans\n.idea\n.metals\n.vscode\n.bloop\nclasses/\nlib/\nrest-assured-all/dependency-reduced-pom.xml\n"
        },
        {
          "name": ".scalafmt.conf",
          "type": "blob",
          "size": 0.5390625,
          "content": "version = \"3.7.15\"\nrunner.dialect = scala3\nmaxColumn = 120\nalign.preset = most\nalign.multiline = false\ncontinuationIndent.defnSite = 2\nassumeStandardLibraryStripMargin = true\ndocstrings.style = Asterisk\ndocstrings.wrapMaxColumn = 80\nlineEndings = preserve\nincludeCurlyBraceInSelectChains = false\ndanglingParentheses.preset = true\noptIn.annotationNewlines = true\nnewlines.alwaysBeforeMultilineDef = false\nrewrite.rules = [RedundantBraces]\n\nrewrite.redundantBraces.generalExpressions = false\nrewriteTokens = {\n  \"⇒\": \"=>\"\n  \"→\": \"->\"\n  \"←\": \"<-\"\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5732421875,
          "content": "language: java\nsudo: false\n\ncache:\n  directories:\n  - $HOME/.m2\n  \nmatrix:\n  include:\n    - env: PROFILES='-P osgi-tests'\n      jdk: oraclejdk8\n      dist: trusty # Otherwise oraclejdk8 is not found, see https://travis-ci.community/t/solved-oraclejdk8-installation-failing-still-again/3428\n    - env: PROFILES=''\n      jdk: openjdk11\n    - env: PROFILES=''\n      jdk: openjdk12\n    - env: PROFILES=''\n      jdk: openjdk13\n    - env: PROFILES=''\n      jdk: openjdk14\n    - env: PROFILES=''\n      jdk: openjdk15\n\nscript:\n  - echo JAVA_HOME = ${JAVA_HOME}\n  - mvn clean install -B $PROFILES"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1123046875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n \n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n   1. Definitions.\n \n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n \n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n \n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n \n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n \n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n \n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n \n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n \n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n \n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n \n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n \n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n \n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n \n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n \n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n \n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n \n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n \n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n \n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n \n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n \n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n \n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n \n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n \n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n \n   END OF TERMS AND CONDITIONS\n \n   APPENDIX: How to apply the Apache License to your work.\n \n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n \n   Copyright [2018] [Johan Haleby]\n \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n \n       http://www.apache.org/licenses/LICENSE-2.0\n \n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6669921875,
          "content": "![REST Assured](rest-assured-logo-green.png)\n\n[![Build Status](https://github.com/rest-assured/rest-assured/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/rest-assured/rest-assured/actions/workflows/ci.yml)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.rest-assured/rest-assured/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.rest-assured/rest-assured)\n<!-- [![Javadoc](https://javadoc-badge.appspot.com/io.rest-assured/rest-assured.svg)](http://www.javadoc.io/doc/io.rest-assured/rest-assured) -->\n\n\nTesting and validation of REST services in Java is harder than in dynamic languages \nsuch as Ruby and Groovy. REST Assured brings the simplicity of using these \nlanguages into the Java domain.\n\n\n## News\n* 2024-07-05: REST Assured 5.5.0 is released with several bug fixes and a new [Scala 3 Extension Module](https://github.com/rest-assured/rest-assured/wiki/Scala#scala-extension-module). See [change log](https://raw.githubusercontent.com/rest-assured/rest-assured/master/changelog.txt) for more details.\n* 2023-12-08: REST Assured 5.4.0 is released with several bug fixes and a [Kotlin Extension Module for Spring WebTest](https://github.com/rest-assured/rest-assured/wiki/Kotlin#kotlin-extension-module-for-spring-webtest). See [change log](https://raw.githubusercontent.com/rest-assured/rest-assured/master/changelog.txt) for more details.\n* 2023-09-08: REST Assured 5.3.2 is released with several bug fixes, better Spring MockMvc Support, better support for newer versions of Spring Security etc. See [change log](https://raw.githubusercontent.com/rest-assured/rest-assured/master/changelog.txt) for more details.\n\n[Older News](https://github.com/rest-assured/rest-assured/wiki/OldNews)\n\n\n## Examples\nHere's an example of how to make a GET request and validate the JSON or XML response:\n\n```java\nget(\"/lotto\").then().assertThat().body(\"lotto.lottoId\", equalTo(5));\n```\n\nGet and verify all winner ids:\n\n```java\nget(\"/lotto\").then().assertThat().body(\"lotto.winners.winnerId\", hasItems(23, 54));\n```\n\nUsing parameters:\n\n```java\ngiven().\n    param(\"key1\", \"value1\").\n    param(\"key2\", \"value2\").\nwhen().\n    post(\"/somewhere\").\nthen().\n    body(containsString(\"OK\"));\n```\n\nUsing X-Path (XML only):\n\n```java\ngiven().\n    params(\"firstName\", \"John\", \"lastName\", \"Doe\").\nwhen().\n    post(\"/greetMe\").\nthen().\n    body(hasXPath(\"/greeting/firstName[text()='John']\")).\n```\n\nNeed authentication? REST Assured provides several authentication mechanisms:\n\n```java\ngiven().auth().basic(username, password).when().get(\"/secured\").then().statusCode(200);\n```\n\nGetting and parsing a response body:\n\n```java\n// Example with JsonPath\nString json = get(\"/lotto\").asString();\nList<String> winnerIds = from(json).get(\"lotto.winners.winnerId\");\n    \n// Example with XmlPath\nString xml = post(\"/shopping\").andReturn().body().asString();\nNode category = from(xml).get(\"shopping.category[0]\");\n```\n\nREST Assured supports any HTTP method but has explicit support for *POST*, *GET*, *PUT*, *DELETE*, *OPTIONS*, *PATCH* and *HEAD* and includes specifying and validating e.g. parameters, headers, cookies and body easily.\n\n\n## Documentation\n\n* [Getting started](https://github.com/rest-assured/rest-assured/wiki/GettingStarted)\n* [Usage Guide](https://github.com/rest-assured/rest-assured/wiki/Usage) (click [here](https://github.com/rest-assured/rest-assured/wiki/Usage_Legacy) for legacy documentation)\n* [Javadoc](http://www.javadoc.io/doc/io.rest-assured/rest-assured/5.5.0)\n* [Rest Assured Javadoc](http://static.javadoc.io/io.rest-assured/rest-assured/5.4.0/io/restassured/RestAssured.html)\n* [Rest AssuredMockMvc Javadoc](http://static.javadoc.io/io.rest-assured/spring-mock-mvc/5.5.0/io/restassured/module/mockmvc/RestAssuredMockMvc.html)\n* [XmlPath Javadoc](http://static.javadoc.io/io.rest-assured/xml-path/5.5.0/io/restassured/path/xml/XmlPath.html)\n* [JsonPath Javadoc](http://static.javadoc.io/io.rest-assured/json-path/5.5.0/io/restassured/path/json/JsonPath.html)\n* [Release Notes](https://github.com/rest-assured/rest-assured/wiki/ReleaseNotes)\n* [FAQ](https://github.com/rest-assured/rest-assured/wiki/FAQ)\n\n## Support and discussion\nJoin the mailing list at our [Google group](http://groups.google.com/group/rest-assured). \n\n## Links\n* [Change log](https://github.com/rest-assured/rest-assured/raw/master/changelog.txt)\n* REST Assured on [openhub](https://www.openhub.net/p/rest-assured)\n* [Mailing list](http://groups.google.com/group/rest-assured) for questions and support\n\n<a href=\"https://www.buymeacoffee.com/johanhaleby\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/arial-blue.png\" alt=\"Buy Me A Coffee\" style=\"height: 42px !important;width: 180px !important;\" height=\"42px\" width=\"180px\"></a>\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 167.630859375,
          "content": "Changelog 5.5.0 (2024-07-05)\n----------------------------\n* Removing custom validation of pathParams in the mock-mvc module and instead rely on the Spring implementation(issue 1782) (thanks to taeyeon-Kim for pull request)\n* Fixing \"Error java.lang.NoSuchMethodError for HttpMethod.resolve()\" in mock-mvc module (issue 1760) (thanks to d0vi for pull request)\n* Fix #1707: SVG file upload - fatal error :1:1: content is not allowed in prolog (#1777) (thanks to Byounghee kim for pull request)\n* Fix #1773: Remove check for response HTTP status code. (thanks to macmon for pull request)\n* Introducing the \"scala-extensions\" module for Scala 3 (#1770). This means that you can write tests like this in Scala 3:\n\n    @Test\n    def `extraction with rest assured scala extensions`: Unit =\n        val message: String = Given(req =>\n            req.port(7000)\n            req.header(\"Header\", \"Header\")\n            req.body(\"hello\")\n        )\n        .When(\n            _.put(\"/the/path\")\n        )\n        .Extract(\n            _.path(\"message\")\n        )\n    assertThat(message).isEqualTo(\"Hello World\")\n  (thanks to Carlos Eduardo for pull request)\n* Remove deprecated Content-Transfer-Encoding from multipart post headers (#1762) (thanks to Michal Trna for pull request)\n* Fixed pathParams double encoding in mock-mvd module (#1756) (thanks to Dmitry Kaukov for pull request)\n* Upgraded Groovy from version 4.0.16 to 4.0.22\n* Upgraded Jackson from version 2.14.3 to 2.17.1\n* Upgraded kotlin extension module to use Kotlin 2.0.0 (previously 1.9.20 was used)\n* Upgraded Guava library from 32.0.1-jre to 33.2.1-jre\n\nChangelog 5.4.0 (2023-12-08)\n----------------------------\n* Properly parse primitive JSON values (thanks to Jörg Eichhorn for pull request)\n* Upgraded Groovy from 4.0.10 to 4.0.16\n* Introduce spring-web-test-client-kotlin-extensions (#1731) (thanks for TheDevLuffy for pull request). This means that if you depend on: `org.restassured:spring-web-test-client-kotlin-extensions:<version>` you can write code like this for Spring WebTest client:\n   val id: Int =\n   Given {\n       webTestClient(webTestClient)\n       param(\"name\", \"Johan\")\n   } When {\n       get(\"/greeting\")\n   } Then {\n       body(\n               \"id\", Matchers.equalTo(1),\n               \"content\", Matchers.equalTo(\"Hello, Johan!\")\n       )\n   } Extract {\n       path(\"id\")\n   }\n* Fix 1746: JsonPath: wrong result and exception when jsonPath partly evaluates to string/boolean/number (#1747) (thanks to Oleksandr Kulychok for pull request)\n* Add support for negative indexes in JsonPath (thanks to Oleksandr Kulychok for pull request). This means that you can now do e.g. String object = JsonPath.from(\"<some json>\").getString(\"[-1].email\");\n* Upgraded Kotlin from 1.9.10 to 1.9.21\n\nChangelog 5.3.2 (2023-09-08)\n----------------------------\n* Add onFailMessage into validatable response (#1724). This means that you can use `onFailMessage` after `then` like: `when().get(\"/somewhere\").then().onFailMessage(\"My fail message\").statusCode(200);` (thanks to Ilya Koshaleu for pull request)\n* Added support for path parameters methods in RestAssuredMockMvc (#1723) (thanks to Jefersom Martins for pull request)\n* Make header blacklisting case-insensitive (#1722) (thanks to Bekh-Ivanov Aleksey for pull request)\n* Blacklisted headers added to LogConfig are now case-insensitive by default\n* Fixed so that testing multipart data request along with passing path parameters doesn't fail anymore in RestAssuredMockMvc (#1673) (thanks to Andrey Demin for pull request)\n* Improved compatibility issues with newer version of Spring Security\n* Upgraded kotlin from 1.8.22 to 1.9.10\n* Upgraded scala to 2.12.18\n\nChangelog 5.3.1 (2023-06-16)\n----------------------------\n* Upgraded Guava library to 32.0.1-jre\n* Fixed \"Unexpected logic in PathSupport.getPath\" (issue 1682) (thanks to fucct for pull request)\n* Fixed \"Not able to POST xml file using Inpustream\" (issue 1160) (thanks to Balasaravanan for pull request)\n* Fixed \"MockMvcRequestSenderImpl convertCookies function is not copying the httpOnly, sameSite and expires from the servletCookies into the cookieBuilder\" (issue 1462) (thanks to Justin Tay for pull request))\n* Fixed \"Accept cookies that have an expiration date\" (issue 1430) (thanks to Stéphane Épardaud for pull request)\n* Upgraded the Kotlin extension module to use Kotlin 1.8.22\n* Upgraded Groovy to 4.0.11\n* Upgraded faster jackson to 2.14.3\n* Upgraded Hamcrest to 2.2\n\nChangelog 5.3.0 (2022-11-18)\n----------------------------\n* Added (much) improved support for CSRF tokens when sent as a header and not in a form\n* Enable the use of relaxedHTTPSValidation with two-way ssl (issue #1631) (thanks to Mathieu Amblard for pull request)\n* Lastest Spring Framework 6 is now supported again (thanks to Marcin Grzejszczak for pull request)\n* Removed content assignment from asPrettyString() (thanks to Bartłomiej Chabowski for pull request)\n* Allow contentType() to accept Spring MediaType in Spring MockMvc module (thanks to Hantsy Bai for pull request)\n* Upgraded kotlin from 1.7.10 to 1.7.20 in the kotlin module\n* Upgraded groovy from 4.0.1 to 4.0.6\n* Updated jackson from version 2.13.2 to 2.13.4\n\nChangelog 5.2.1 (2022-11-18)\n----------------------------\n* Lastest Spring Framework 6 is now supported again (thanks to Marcin Grzejszczak for pull request)\n\nChangelog 5.2.0 (2022-09-09)\n----------------------------\n* Improved FilterContext used in Filters by adding the method FilterContext#hasValue(name, object). This makes it easier to check if a value exists _and_ is equal to the expect object.\n* Introducing a much improved CSRF (cross-site request forgery) support. For example:\n    given().\n           csrf(\"/users\").\n           formParm(\"firstName\", \"John\").\n           formParm(\"lastName\", \"Doe\").\n    when().\n           post(\"/users\").\n    then().\n           statusCode(200);\n\n    This will first make a GET request to /users (due to csrf(\"/users\")) to get an HTML page that contains the CSRF token.\n    Rest Assured will then automatically try to find the input field that contains the CSRF token and include in the POST to /users.\n\n    Here's an example of what Rest Assured expects as a response for the GET request to /users:\n\n    <html>\n    <head>\n      <title>Add User</title>\n    </head>\n    <body>\n    <form action=\"/users\" method=\"POST\">\n      <table>\n          <tr>\n              <td>First Name:</td>\n              <td><input type=\"text\" name=\"firstName\"></td>\n          </tr>\n          <tr>\n              <td>Last Name:</td>\n              <td><input type=\"text\" name=\"lastName\"></td>\n          </tr>\n          <tr>\n              <td colspan=\"2\"><input name=\"submit\" type=\"submit\"/></td>\n          </tr>\n      </table>\n      <input type=\"hidden\" name=\"_csrf\" value=\"8adf2ea1-b246-40aa-8e13-a85fb7914341\"/>\n    </form>\n    </body>\n    </html>\n    The csrf input field name is called \"_csrf\", and it'll be automatically detected by REST Assured.\n* Fixed so that form authentication takes CSRF into account. The previous form authentication CSRF implementation didn't really work (sorry!).\n  Now you can combine csrf with form authentication and it actually works as expected! Note that for requests other than GET or HEAD,\n  you need to specify _both_ form authentication _and_ csrf, e.g.\n\n    given().\n           csrf(\"/users\").\n           formParm(\"firstName\", \"John\").\n           formParm(\"lastName\", \"Doe\").\n           auth().form(\"j_spring_security_check\", \"j_username\", \"j_password\").\n    when().\n           post(\"/users\").\n    then().\n           statusCode(200);\n\n   The reason for this is that the server returns a new CSRF token per request. So after the login request (with will use the CSRF token from the login page),\n   REST Assured needs to make an additional GET request to /users to get a new CSRF token. This token will then finally be supplied with the \"POST\" request\n   to \"/users\".\n* Adds support for Multipart upload via http PATCH method (thanks to Madis Liias for pull request)\n* Upgraded kotlin module to using Kotlin 1.7.10 (previously 1.6.21 was used)\n\nChangelog 5.1.1 (2022-06-10)\n----------------------------\n* Added support for Spring Framework 6.0 in Spring WebClientTest module\n* Overwrite responseLogDetail when merging ResponseSpecificationImpl (issue 1493) (thanks to petur for pull request)\n* Fix: rootPath does not allow chaining paths with leading operators (issue 1577) (thanks to Roman Mitasov for pull request)\n* Fix: body(InputStream) does not work (issue 1480) (thanks to fedinskiy for pull request)\n* Fix: jsonPath - return null if list(array) does not exists in input document (issue 1544) (thanks to Oleksandr Kulychok for pull request)\n* Fix: Re-added groovy package to package imports for OSGi support (issue 1567) (thanks to Steven Huypens for pull request)\n* Fix: class cast exception in RequestPrinter with byte[] body (thanks to Andreas Grub for pull request)\n* Upgraded gson from 2.6.2 to 2.9.0\n\nChangelog 5.1.0 (2022-05-24)\n----------------------------\n* Upgrading kotlin to 1.6.21\n* Moved package io.restassured.assertion to io.restassured.internal.assertion since the classes in this package should be internal.\n  Not all files have been moved yet, but refactoring will continue in the next release.\n* Added support for Spring Framework 6.0 and Jakarta API's in Spring MockMvc module.\n\nChangelog 5.0.1 (2022-04-06)\n----------------------------\n* Fixed so that with RestAssuredHttpBuilder no longer requires ResponseSpecificationImpl but rather a FilterableResponseSpecification\n\nChangelog 5.0.0 (2022-03-25)\n----------------------------\n* Breaking change: REST Assured now builds on Groovy 4!\n* Excluded example projects from rest assured bom file (issue 1546)\n* Updated jackson from version 2.11.1 to 2.13.2 (issue 1555)\n\nChangelog 4.5.1 (2022-02-11)\n----------------------------\n* Fixed a bug in ObjectMapper that required JAXB/JakartaEE when this was not intended (issue 1542)\n\nChangelog 4.5.0 (2022-01-21)\n----------------------------\n* JAXB is now an optional dependency for XmlPath and is now longer required. Depend on 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3' and 'com.sun.xml.bind:jaxb-impl:2.3.3'\n* Implemented support for serializing and deserializing with Jakarta EE 8 and 9. To use it you need to have Jakarta EE on the classpath, for example by depending on 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1' and 'org.glassfish.jaxb:jaxb-runtime:3.0.2'.\n* Upgraded groovy from 3.0.8 to 3.0.9 (thanks to sullis for pull request)\n* Added support for adding multiple LogDetails to the RequestLoggingFilter. You can now do e.g.:\n\n    given().filter(RequestLoggingFilter.with(LogDetail.METHOD, LogDetail.HEADERS, LogDetail.BODY)).when(). ..\n\n  Thanks to lucasnguyen17 for pull request.\n* Fix default implementation of deprecated method detachRoot (#1503) (thanks to Guillaume Boucherie for pull request)\n* Add on fail message builder for response specification (#1502). This means that you can no do:\n  when().\n        get().\n  then().\n        onFailMessage(\"Some specific message\").\n        statusCode(200);\n The \"onFailMessage\" will be shown in the error. This is good if you want to e.g. distinguish more easily between tests if they fail. (thanks to Victor Borovlev for pull request)\n* Allow parsing responses with cookies that has numbers out of signed decimal range (#1069). This is a backward incompatible change if you're using the maxAge on \"DetailedCookie\" which now takes a long instead of an int. (thanks to Michał Radomyski for pull request)\n* Upgraded the kotlin extension module to use Kotlin 1.6.10 instead of 1.5.0\n* Introduced a rest-assured bom project for maven. Depend on 'io.rest-assured:rest-assured-bom:4.5.0' to use it. The bom contains configuration details for the rest-assured project that imports the correct dependencies (and versions) and to build your project. (thanks to George Gastaldi for pull request)\n* Added \"noContentType()\" method to RequestSpecification which allows you to remove the content-type from the request if needed. For example:\n    given().\n        noContentType().\n    when().\n        post(\"/somewhere\").\n    then().\n        statusCode(200);\n  (issue 1516)\n* Removed accidental import of jdk.nashorn.internal.runtime.JSType.UNDEFINED_LONG from the Cookie class\n\n\nChangelog 4.4.0 (2021-05-21)\n----------------------------\n* Upgrading kotlin extension module to use Kotlin 1.5.0 (previously 1.4.21 was used)\n* Upgrading commons-io from 2.4.0 to 2.8.0\n* Apache http client is upgraded from 4.5.3 to 4.5.13 (thanks to Daniel Reissenberger for pull request)\n* Improved oauth compatibility with new http client\n* Fixed a bug in EncoderConfig where user configured was accidentally set to true in default constructor\n* Non-backward compatible change: REST Assured will no longer add \"charset=utf-8\" by default to application/json content-type's since this is not recommended by RFC 7159.\n  REST Assured will still automatically encode content as UTF-8, it's just that the charset is not added. To revert to the old behavior do:\n\n    RestAssured.config(RestAssured.config().encoderConfig(EncoderConfig.encoderConfig().defaultCharsetForContentType(\"UTF-8\", \"application/json\")))\n\n  or specify the charset explicitly in the request:\n\n    given().contentType(ContentType.JSON.withCharset(UTF_8)). ..\n (thanks to Michal Domagala for initial pull request)\n* Added MULTIPART to as an option ContentType (thanks to Yusuf Tayman for pull request)\n* Upgraded groovy from 3.0.7 to 3.0.8\n\nChangelog 4.3.3 (2020-12-11)\n----------------------------\n* Upgrading kotlin extension module to use Kotlin 1.4.21 (previously 1.4.10 was used)\n* Upgraded groovy from 3.0.6 to 3.0.7\n* Ensure subclasses of ResponseOptions do not break Prettifier (#1425) (thanks to Sam Neirinck for PR)\n\nChangelog 4.2.1 (2020-12-11)\n----------------------------\n* Backport of: Fix content type name before charset recognition (#1341)\n\nChangelog 4.3.2 (2020-11-08)\n----------------------------\n* Upgrade json-schema-validator to 2.2.14 (issue 1397) (thanks to Guillaume Smet for PR)\n* Upgrading apache commons lang3 from 3.4 to 3.11.\n* Added asPrettyString method to ResponseBody (issue 1395) (thanks to GithubMood for PR)\n* Describe non matching actual method with Hamcrest matcher format (issue 1387) (thanks for Ivo Šmíd for PR)\n  Before you could run into cryptic error messages such as:\n\n      JSON path values.pi doesn't match.\n      Expected: <3.14>\n      Actual: 3.14\n\n  Now, you see this instead:\n\n      JSON path values.pi doesn't match.\n      Expected: <3.14>\n      Actual: <3.14F>\n* Upgraded groovy from 3.0.3 to 3.0.6\n* Upgrading Kotlin extension module to use Kotlin 1.4.10 (previously 1.3.72 was used)\n\nChangelog 4.3.1 (2020-07-03)\n----------------------------\n* Upgrading Kotlin extension module to use Kotlin 1.3.72 (previously 1.3.70 was used)\n* Upgraded Groovy from 3.0.2 to 3.0.3\n* Upgraded spring-security-core from 4.2.13.RELEASE to 4.2.17.RELEASE\n* Fixed content type name before charset recognition (issue 1341) (thanks to jekanik for pull request)\n* Removes dependencies javax.activation, com.sun.activation and org.apache.sling.javax.activation in favor of jakarta.activation (thanks to Geoffrey De Smet for pull request)\n* Upgraded jackson-module-kotlin and jackson-core from 2.10.2 to 2.11.1\n\nChangelog 4.3.0 (2020-03-13)\n----------------------------\n* Upgraded from Groovy 2.5.7 to Groovy 3.0.2\n* Upgrading Kotlin extension module to use Kotlin 1.3.70 (previously 1.3.50 was used)\n* Fixed so that DecoderConfig is properly set and used in the response in the Spring MockMvc module (thanks to dawiking for pull request)\n* Fix jsonb serialization method in JsonbMapper (issue 1274) (thanks to Matthias for pull request)\n* Fixed so that the predefined ResponseAwareMatchers \"endsWithPath\" and \"startsWithPath\" supports checking number properties\n* Allow multipart uploads using PUT with Spring MockMvc (thanks to Ankit Tomar for pull request)\n* Allow configuring CookieFilter (by using a new overloaded constructor) whether or not it should be allowed to specify multiple cookies with the same name (thanks to Ivo Šmíd for pull request)\n\nChangelog 4.2.0 (2020-01-17)\n----------------------------\n* Jakarta EE API: switch from javax.xml.bind:jaxb-api to jakarta.xml.bind:jakarta.xml.bind-api (issue 1228) (thanks to Sanne Grinovero for pull request)\n* Ignore unsupported by scripbejava verbs (thanks to Corneliu Duplachi for pull request)\n* Add support for SameSite in Cookie (issue 1255) (thanks to Andreas Jonsson for pull request)\n* Upgrading jackson2 from version 2.10.0 to 2.10.2\n* Introduced the spring-mock-mvc-kotlin-extensions project which allows a nicer experience for Kotlin developers using the spring-mock-mvc module. This allows one to write tests like this:\n\n    class RestAssuredMockMvcKotlinExtensionsTest {\n\n        @Test\n        fun example() {\n            val mockMvc =\n                MockMvcBuilders.standaloneSetup(GreetingController())\n                    .build()\n\n            val id: Int =\n            Given {\n                mockMvc(mockMvc)\n                param(\"name\", \"Johan\")\n            } When {\n                get(\"/greeting\")\n            } Then {\n                body(\n                    \"id\", Matchers.equalTo(1),\n                    \"content\", Matchers.equalTo(\"Hello, Johan!\")\n                )\n            } Extract {\n                path(\"id\")\n            }\n\n            assertThat(id).isEqualTo(1)\n    }\n\n  (thanks to Myeonghyeon-Lee for pull request)\n* Added a new object mapper type that supports the Jakarta EE JSON Binding (JSON-B) specification. By default it will use Eclipse Yasson as the JSON-B implementation. To use it simply include\n\n    <dependency>\n        <groupId>org.eclipse</groupId>\n        <artifactId>yasson</artifactId>\n         <version>${yasson.version}</version>\n    </dependency>\n\n  in your classpath and then configure REST Assured to use it as its default ObjectMapperType:\n\n    RestAssured.config = RestAssured.config.objectMapperConfig(ObjectMapperConfig.objectMapperConfig().defaultObjectMapperType(ObjectMapperType.JSONB));\n\n  (thanks to Andrew Guibert for pull request)\n* Added ability to blacklist headers so that they are not shown in the request or response log. Instead the header value will be replaced with \"[ BLACKLISTED ]\". You can enable this per header basis using the LogConfig:\n\n    given().config(config().logConfig(logConfig().blacklistHeader(\"Accept\"))). ..\n\n  The response log will the print:\n\n  Request method:\tGET\n  Request URI:    http://localhost:8080/something\n  Proxy:          <none>\n  Request params: <none>\n  Query params:   <none>\n  Form params:    <none>\n  Path params:    <none>\n  Headers:        Accept=[ BLACKLISTED ]\n  Cookies:        <none>\n  Multiparts:     <none>\n  Body:           <none>\n\n  (thanks to Simone Ivan Conte for the help)\n\nChangelog 4.1.2 (2019-10-02)\n----------------------------\n* The properties in a JSON document now preserves the order in which they are received (thanks to contextshuffling for pull request).\n* Added \"When\" method to Kotlin extensions API for consistency. This means that you can now call \"When\" directly without using \"Given\":\n    When {\n        get(\"/greeting\")\n    }\n* Fixed so that it's possible to extract values after body validations in the Kotlin extensions API (issue 1212)\n* Upgrading jackson2 from version 2.9.9 to 2.10.0\n* Upgraded Groovy from version 2.5.6 to 2.5.8\n* Support for Java 13 (enabled by groovy upgrade)\n\nChangelog 4.1.1 (2019-09-06)\n---------------------------\n* Upgraded jaxb-api from 2.2.12 to 2.3.1\n* Upgraded jaxb-osgi from 2.2.10 to 2.3.0.1\n\nChangelog 4.1.0 (2019-09-02)\n----------------------------\n* Upgraded jackson2 from version 2.9.8 to 2.9.9 because of security issue in jackson-databind 2.9.8\n* The ResponseBuilder now sets a default RestAssuredConfig instance when building responses from scratch. This is needed for example if extracting path's from the response.\n* Added a Kotlin module that contains Kotlin extension functions that makes REST Assured nicer to work with from Kotlin. Depend on:\n\n    <dependency>\n        <groupId>io.rest-assured</groupId>\n        <artifactId>kotlin-extensions</artifactId>\n        <version>${rest-assured.version}</version>\n        <scope>test</scope>\n    </dependency>\n\n  and then import \"Given\" from the \"io.restassured.module.kotlin.extensions\" package. You can then use it like this:\n\n    val message: String =\n    Given {\n        port(7000)\n        header(\"Header\", \"Header\")\n        body(\"hello\")\n    } When {\n        put(\"/the/path\")\n    } Then {\n        statusCode(200)\n        body(\"message\", equalTo(\"Another World\"))\n    } Extract {\n        path(\"message\")\n    }\n\n  Besides a more pleasing API for Kotlin developers it also has a couple of major benefits to the Java API:\n  \n  1. All failed expectations are reported at the same time\n  2. Formatting the code in your IDE won't mess up indentation\n\n  (issue 609)\n* No longer depending on hamcrest-core or hamcrest-library, instead the hamcrest module is used directly.\n* The scala support module has been upgraded to use Scala 2.13.0 (previously 2.12.7 was used)\n* RequestSpecBuilder no longer sets 8080 port for non localhost uri (issue #1197) (thanks to dr29bart for pull request)\n\nChangelog 4.0.0 (2019-05-10)\n----------------------------\n* Fix duplication of content type in the Spring MockMvc module (thanks to Gemini Kim for pull request)\n* Fixed issue with overwriting FailureConfig on settings other configs (#1127) (thanks to Victor Orlovsky for pull request)\n* Added version range for the Groovy dependency for the osgi module to be between 2.4 and less than 2.5. This is because the API has changed in Groovy 2.5. (thanks to Rikske54 for pull request)\n* Fixed so that using a ResponseSpecBuilder doesn't overwrite the configured config implicitly (issue 1128)\n* Add Apache Johnzon object mapper support (thanks to Andriy Redko for pull request)\n* Add support for MatcherConfig in RestAssuredMockMvcConfig (#1071) (thanks to Jurriaan Pruijs for pull request)\n* Supported for logging when assertion errors thrown from internal matcher #1129 (thanks to Gemini Kim for pull request)\n* Fixed so that there no longer are multiple versions of org.springframework:spring-web:jar, leading to inconsistent semantic behaviors (#1143) (thanks to HelloCoCooo for pull request)\n* Fixed issues with the use of maven-bundle-plugin which created duplicate classes in the distributed jar-files (#1117) (big thanks to Milen Dyankov, Steven Huypens and Mark Kolich for the help!)\n* Breaking changes introduced when solving #1117:\n    * io.restassured.mapper.TypeRef has been moved to io.restassured.common.mapper.TypeRef\n    * io.restassured.mapper.DataToDeserialize has been moved to io.restassured.common.mapper.DataToDeserialize\n    * io.restassured.mapper.ObjectDeserializationContext has been moved to io.restassured.common.mapper.ObjectDeserializationContext\n    * io.restassured.mapper.factory.GsonObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.GsonObjectMapperFactory\n    * io.restassured.mapper.factory.Jackson1ObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.Jackson1ObjectMapperFactory\n    * io.restassured.mapper.factory.Jackson2ObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.Jackson2ObjectMapperFactory\n    * io.restassured.mapper.factory.DefaultGsonObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.DefaultGsonObjectMapperFactory\n    * io.restassured.mapper.factory.DefaultJackson1ObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.DefaultJackson1ObjectMapperFactory\n    * io.restassured.mapper.factory.DefaultJackson2ObjectMapperFactory has been moved to io.restassured.path.json.mapper.factory.DefaultJackson2ObjectMapperFactory\n    * io.restassured.mapper.resolver.ObjectMapperResolver has been moved to io.restassured.common.mapper.resolver.ObjectMapperResolver\n    * io.restassured.exception.PathException has been moved to io.restassured.common.exception.PathException\n* Removed deprecated methods:\n    * io.restassured.RestAssured\n        * withArguments\n        * withNoArguments\n    * io.restassured.builder.ResponseSpecBuilder\n        * expectContent\n    * io.restassured.builder.RequestSpecBuilder\n        * setContent\n        * addParameters\n        * addParameter\n        * addQueryParameters\n        * addQueryParameter\n        * addFormParameters\n        * addFormParameter\n        * addPathParameter\n        * addPathParameters\n        * setAuthentication\n    * io.restassured.specification.ResponseSpecification\n        * content\n        * specification\n    * io.restassured.specification.RequestSpecification\n        * content\n        * formParameters\n        * formParameter\n        * pathParameter\n        * pathParameters\n        * authentication\n        * specification\n        * parameters\n        * parameter\n        * queryParameter\n        * queryParameters\n* Deprecations\n    * Deprecated all short versions of \"root\", for example \"root(..)\", \"appendRoot(..)\", \"detachRoot(..)\". Use \"rootPath(..)\", \"appendRootPath(..)\", \"detachRootPath(..)\" instead. This was introduced for better consistency and clearer intention..\n    * JsonPath#setRoot(..) - Use JsonPath#setRootPath(..) instead\n    * XmlPath#setRoot(..) - Use XmlPath#setRootPath(..) instead\n* Rest Assured now requires Java 8 (previously Java 6 was required)\n* Removed io.restassured.function.RestAssuredFunction - use java.util.function.Function instead\n* Made io.restassured.matcher.ResponseAwareMatcher a proper annotated functional interface\n* Made io.restassured.filter.Filter a proper annotated functional interface\n* Made io.restassured.listener.ResponseValidationFailureListener a proper annotated functional interface\n* Made io.restassured.module.mockmvc.intercept.MockHttpServletRequestBuilderInterceptor a proper annotated functional interface\n* Made io.restassured.path.json.mapping.JsonPathObjectDeserializer a proper annotated functional interface\n* Upgraded Groovy dependency from 2.4.15 to 2.5.6\n* Removed io.restassured.response.ValidatableResponseOptions#specification(..), use io.restassured.response.ValidatableResponseOptions#spec instead\n* Removed io.restassured.response.ValidatableResponseOptions#content(..), use io.restassured.response.ValidatableResponseOptions#body(..) instead\n* Upgraded Hamcrest from version 1.3 to 2.1\n* Made it possible to specify a multi-expectation body with arguments. For example:\n    when().\n            get(\"/jsonStore\").\n    then().\n            rootPath(\"store.book.find { it.author == '%s' }\").\n            body(\n                    \"price\", withArgs(\"Nigel Rees\"), is(8.95f),\n                    \"price\", withArgs(\"Evelyn Waugh\"), is(12.99f)\n            );\n  (issue #1154)\n* MockMvc module now supports using MediaType for Accept header value (issue #1142). Thanks to Gemini Kim for pull request.\n* Support for using \"HttpStatus\" when validating response status when using MockMvc module. Thanks to Gemini Kim for pull request.\n* MockMvc module now supports using MediaType for Accept header in WebTestClientRequest. Thanks to Gemini Kim for pull request.\n* Upgraded spring-webmvc dependency from version 4.3.19.RELEASE to 4.3.23.RELEASE (issue #1161)\n\nChangelog 3.3.0 (2019-01-11)\n----------------------------\n* Upgraded json-schema-validator from version 2.2.6 to 2.2.10 (thanks to thorin for pull request)\n* Added io.restassured.mapper.TypeRef class that allows you to deserialize the response to a container with generic type. For example:\n    List<Map<String, Object>> products = get(\"/products\").as(new TypeRef<List<Map<String, Object>>>() {});\n  Currently this only works for JSON :(\n* Add logging functionality to the ResponseSpecBuilder, i.e. you can now do:\n    ResponseSpecification spec = new ResponseSpecBuilder().log(LogDetail.ALL).build();\n  (issue 579). Thanks to Aleksandr Podkutin for pull request!\n* httpmime dependency is updated to version 4.5.3 and is now consistent with httpclient (thanks to Rüdiger Herrmann for pull request).\n* Updated commons-fileupload from 1.3.1 to 1.3.3 to fix security issues\n* Added a new artifact, rest-assured-all, which you can depend on instead of rest-assured to avoid split packages in Java 9+. (thanks to Tomasz Gaweda for pull request)\n* Introduces custom listeners on test validation failures. This makes it possible to hook into Rest Assured and get a callback when the test fails with full access to the request/response specification\n  as well as the response. You can do this by implementing the \"io.restassured.listener.ResponseValidationFailureListener\" and add it to the new \"FailureConfig\". For example:\n\n      given().config(RestAssured.config().failureConfig(failureConfig().with().failureListeners((requestSpec, responseSpec, response) -> log.info(\"Rest Assured validation failed!\")).when(). ..\n\n  (issue 1093) (thanks to Daniel Dyląg for pull request).\n\nChangelog 3.2.0 (2018-10-19)\n----------------------------\n* Added OSGi support (thanks to ponziani for pull request)\n* Make it clear that junit is only a test scope dependency (thanks to Eric Pabst for pull request)\n* Changed MockMvcParamConfig.attributeUpdateStrategy() to actually return the attributeUpdateStrategy and not the formParamsUpdateStrategy.\n* Added a spring-web-test-client module which let's you unit test Spring Webflux Controllers using the REST Assured DSL. Depend on artifact id \"spring-web-test-client\" using group id \"io.rest-assured\" from Maven to use it. Then use io.restassured.module.webtestclient.RestAssuredWebTestClient to get started (thanks to Olga Maciaszek-Sharma for pull request)\n* Upgraded to from Groovy 2.4.12 to 2.4.15\n* Upgraded Scala from version 2.11.12 to 2.12.7, this also means that the Scala support module now requires Java 8.\n* Rest Assured now requires Java 6 (previously Java 5 was required).\n* Moved XmlAssertion from io.restassured.assertion package to io.restassured.internal.path.xml since it's an internal class (issue 1051)\n\nChangelog 3.1.1 (2018-08-17)\n----------------------------\n* Ensure RequestSpecBuilder picks up static config (issue 1012). (thanks to Peter Major for pull request)\n* Support multiple 'Set-Cookie' headers in a response (issue 1016). (thanks to runtarinn for pull request)\n* Fixed OAuth 1 for GET requests (thanks to Corneliu Duplachi for pull request)\n* Add detailed cookie matching to RequestSpecBuilder (thanks to Peter Major for pull request)\n* Add File Size to InputStreamEntity (issue 988) (thanks to vjykumar for pull request)\n* Properly encodes JSON from InputStream (issue 1040) (thanks to Maksymilian Pawlak for pull request)\n* Implemented ability to add headers to a multipart using the MultiPartSpecBuilder\n\nChangelog 3.1.0 (2018-04-20)\n-----------------------------\n* Fixed generics handling of the detailed cookie matcher (thanks to Rafał Siwiec for pull request)\n* Now using Type instead of Class in the API for mapping to Java Objects. For users of the REST Assured API the change is most prominent in the\n  \"ResponseBodyExtractionOptions\" interface where the \"as\" method now takes a \"java.lang.Type\" instead of \"java.lang.Class\". This should not cause\n  any backward incompatibilities. However this change also applies to ObjectMapperFactory's where there is a chance of backward incompatibilities\n  to arise. For example if you previously had a custom JAXBObjectMapperFactory that looked like this:\n\n     public class MyJAXBObjectMapperFactory implements JAXBObjectMapperFactory {\n        public JAXBContext create(Class cls, String charset) {\n            ...\n        }\n     }\n\n  you now need to change it to:\n\n    public class MyJAXBObjectMapperFactory implements JAXBObjectMapperFactory {\n        public JAXBContext create(Type cls, String charset) {\n            ...\n        }\n   }\n\n  (note the change from Class to Type). This was needed for swagger integration (issue 980). (thanks to Victor Orlovsky for pull request)\n* Add better integration for standard HTTP methods with Apache HttpClient which also solves an issue content-type header being generated for empty GET requests (issue 974) (thanks to Daniel Dyląg for pull request)\n* No longer using DEF_CONTENT_CHARSET from Apache HttpClient since it caused compatibility issues (issue 757)\n* Fix for #979 Removing Authorization header when setting auth().none() (issue 979) (thanks to jovanovicivan for pull request)\n* Fixed so that header equals is case-insensitive (issue 999) (thanks to Todd Bradley for pull request)\n* Allow querying (extracting values out of) a request specification using the io.restassured.specification.SpecificationQuerier. For example:\n    RequestSpecification spec = ...\n    QueryableRequestSpecification queryable = SpecificationQuerier.query(spec);\n    String headerValue = queryable.getHeaders().getValue(\"header\");\n    String param = queryable.getFormParams().get(\"someparam\");\n* Fixed so that it's possible to specify arguments to root paths in multi expectation blocks such as:\n        get(\"/jsonStore\").then()\n            .root(\"store.book.find { it.author == '%s' }.price\")\n            .body(\n                    withArgs(\"Nigel Rees\"), is(8.95f),\n                    withArgs(\"Evelyn Waugh\"), is(12.99f),\n                    withArgs(\"Herman Melville\"), is(8.99f),\n                    withArgs(\"J. R. R. Tolkien\"), is(22.99f)\n            );\n* It's now possible to automatically include additional input fields when using form authentication. Just use the FormAuthConfig and specify the additional values to include using:\n    given().auth().form(\"username\", \"password\", formAuthConfig().withAdditionalFields(\"firstInputField\", \"secondInputField\"). ..\n  REST Assured will automatically parse the HTML page, find the values for the additional fields and include them as form parameters in the login request.\n\nChangelog 3.0.7 (2018-02-09)\n-----------------------------\n* CookieFilter now conforms to RFC6265 standard by only copying expected cookies instead of all (thanks to Maciej Ciszewski for pull request) (issue 956).\n* Prettifier can now prettify empty xml body (issue 960)\n* Introduced a \"detailed cookie matcher\" that allows you to verify more detailed aspects of a cookie, for example:\n    given().\n        get(\"/multiCookie\").\n    then()\n        cookie(\"cookie1\", detailedCookie().maxAge(1234567));\n  (thanks to Rafał Siwiec for pull request)\n\nChangelog 3.0.6 (2017-11-23)\n-----------------------------\n* Upgraded to Groovy 2.4.12\n* REST Assured now works on Java 9\n\nChangelog 3.0.5 (2017-10-05)\n-----------------------------\n* Reverted the API to take String instead of CharSequence again since this change introduced an accidental breaking change by not being binary compatible (only source compatible).\n\nChangelog 3.0.4 (2017-10-05)\n-----------------------------\n* Changed API to take CharSequence instead of String. For example the \"get\" method in when().get(\"/something\").. now takes a CharSequence instead of String (issue 858) (thanks to weaselmetal for pull request)\n* Fixed so that assertions on content type with a ContentType.BINARY argument don't fail for binary content (issue 861) (thanks to Grégory Fouquet for pull request)\n* Fixed an issue with two-way SSL whose root cause was Apache HTTP Client v4.5.2. Upgrading to 4.5.3 solved the issue (thanks to Ryan Tighe for pull request)\n* Added support for ntlm authentication (issue 869) (thanks to Pawel Cesar Sanjuan Szklarz for pull request)\n* Better support for empty GZIP responses (thanks to Sergey Trasko for pull request)\n* Treat text/json as JSON content type (thanks to Ionuț Păduraru for pull request)\n* RestAssured.oauth2(\"accessToken\") now uses PreemptiveOAuth2HeaderScheme instead of OAuth2Scheme\n* Added body params in OAuthRequest (issue 868) (thanks to Corneliu Duplachi for pull request)\n* Set authentication once to set in SecurityContextHolder and Principal in method parameter in the MockMvc module (thanks to Leonard Siu for pull request)\n* Allow passing multi-parts with content-types not starting with \"multipart/\" but also containing \"multipart+\" such as \"application/x-hub-multipart+xml\" (issue 919)\n\nChangelog 3.0.3 (2017-05-05)\n-----------------------------\n* Fixed issue with multi-word parameters that were treated as a list (issue 787) (thanks to britka for pull request)\n* Merges cookies of HttpServletResponse additionally to the Set-Cookie header (issue 791) (thanks to Andreas Gerstmayr for pull request)\n* Removed second negative from exception message \"... no supported Content-Type was not specified... \" (thanks to Mark N Broadhead for pull request)\n* Fixing EOFException for empty GZIP responses (issue 814)\n* Update groovy version to fix memory leaks (issue 735) (thanks to Nikolai Gladkov for pull request)\n* Improved cookie expiry parsing (issue 563) (thanks to Martin Aun for pull request)\n* Improved multipart log output to make it prettier (thanks to Andrey Smirnov for pull request)\n* Ignores spacing between content type and charset when validating content types (issue 804)\n* Allow specifying default charset (only applicable when HttpMultipartMode is not STRICT) that'll be used when sending multiparts (issue 844)\n\nChangelog 3.0.2 (2017-01-20)\n-----------------------------\n* Don't join root and path with '.' if path starts with array indexing (thanks to feshbach for pull request)\n* Updated SSLConfig to allow keystore and truststore passwords to differ (thanks to mike42 for pull request)\n* SSLConfig#getKeyStore() was returning trustStore rather than keyStore (thanks to mike42 for pull request)\n* Added ability to get Cookies as a list (using Cookies#asList)\n* Added new functionality to filters that allows removing and replacing headers and cookies.\n* Fixed so that form parameters (i.e. String-values) does get merged correctly with the multipart parameters (issue 762) (thanks to Klaus Dorninger for pull request)\n* Fixed so that the boundary of a request is set explicitly in the \"Content-Type\" header of the request (issue 762) (thanks to Klaus Dorninger for pull request)\n* Fixed error message thrown by RestAssuredMockMvc that hinted at using the regular RestAssured API instead of the MockMvc variant (thanks to Toshiaki Maki for pull request)\n* Fixed mismatch description from Hamcrest Matcher that previously was ignored for status codes (thanks to Javier Romero for pull request)\n* Added support for ordered filters. Implement the io.restassured.filter.OrderedFilter interface and specify the precedence (thanks to jcravi for initial pull request).\n* Fixed so that you can download binary data with the RestAssuredMockMvc module (thanks to Sergey Bespalov for pull request)\n* Improved exception message when there's no supported (de-)serialization library in classpath (issue 788)\n\nChangelog 3.0.1 (2016-09-02)\n-----------------------------\n* Fixed issues with colliding keys in multi-expectations for body and header validations. For example if \"/x\" returns the JSON { \"x\" : 2 } this would (previously) not throw an assertion error:\n    when().\n         get(\"/x\").\n    then().\n         body(\"x\", greaterThan(1),\n              \"x\", equalTo(5),\n              \"x\", lessThan(3));\n  The reason was the only the last first and last \"x\" expectation were taken into account (issue 714).\n* Removed log.warn(..) messages from internal classes (issue 715)\n* Cookie attributes are no longer sent in request in accordance with RFC6265. Thanks to Maciej Gawinecki for pull request. (issue 720)\n* Mismatch description from TypeSafeDiagnosingMatcher is no longer ignored for when validating cookies. Thanks to Maciej Gawinecki for pull request. (issue 717)\n* REST Assured no longer forces the use of the platform charset when parsing JSON as string when combined with expectations (issue 728)\n* Don't append '.' to root path if given path starts with array indexing. Thanks to Tobias Johansson for pull request (issue 727).\n* Removed the need for the cookie max age value to be greater than or equal to -1 (issue 732).\n* Fixed memory leak in JSONAssertion. Big thanks to Andrey for pull request and investigation (issue 735).\n* Releasing loaded classes in XmlAssertion after expression evaluation to reduce memory foot print.\n\nChangelog 3.0.0 (2016-06-03)\n-----------------------------\n* Upgrading scribe dependencies to latest version 2.5.3 (thanks to Aniket for pull request)\n* Added ability to specify an empty access token for OAuth1 authentication. Use com.jayway.restassured.config.OAuthConfig#addEmptyTokenToBaseString(boolean) to configure this.\n* Allow to specify -1 as Cookie Max-Age in accordance with RFC 6265 (https://tools.ietf.org/html/rfc6265#page-20). Thanks to Timofey Dmitriev for pull request (issue 580).\n* com.jayway.restassured.builder.RequestSpecBuilder#addMultiPart(MultiPartSpecification) is now public (issue 669)\n* Support for setting session attributes in the Spring MockMvc module using the \"sessionAttr\" and \"sessionAttrs\" methods (thanks to sneyyar for pull request) (issue 671)\n* It's now possible to map to java objects when extracting from a list in JsonPath. For example JsonPath.from(json).getList(\"store.books\", Book.class).\n* Added CookieFilter (com.jayway.restassured.filter.cookie.CookieFilter).  The cookie filter can be used to keep track of all the cookies sent by the server and use\n  them in subsequent requests.  It might come in handy when more than just com.jayway.restassured.filter.session.SessionFilter is needed. (thanks to Ranil Wijeyratne for pull request)\n* It's now possible to pass a File to the body/content method of the RequestSpecification when content-type is set to JSON, XML or TEXT. The contents of this file will be sent to the server (issue 674)\n* Fixed an issue where the Jackson and Jackson2 (Faster Jackson) object mappers didn't fully took charset into account when serializing POJO to String (issue 677).\n* Added ability to instruct REST Assured whether or not to URL encode the request URI when it's presented in the request specification log.\n  This is configured using the com.jayway.restassured.config.LogConfig#urlEncodeRequestUri method. By default url encoding of the request uri is enabled to show what the URL targeted by REST Assured actually looks like for real.\n  But there may be cases where you want to make the URI more readable and this is when you might want to consider setting urlEncodeRequestUri to false (issue 678)\n* Upgraded Groovy from 2.4.4 to 2.4.6\n* Upgraded http-client from 4.5.1 to 4.5.2\n* Improved JsonPath error messages when trying to verify a path with a parent that doesn't exist. For example if we have the following JSON document:\n    { \"myThing\" : { \"name\" : \"ThingName\" } }\n  and we try to test it like so:\n    when().get(\"/thing\").then().body(\"myThing1.name\", equalTo(\"ThingName\")); // Notice myThing1 is invalid\n  we now get an AssertionError like this:\n    1 expectation failed.\n    JSON path store.unknown.unknown.get(0) doesn't match.\n    Expected: (a collection containing \"none\")\n    Actual: null\n  whereas previously you would get an IllegalArgumentException with an error message like this:\n    Cannot get property 'name' on null object\n  (issue 668)\n* Multipart uploads now take the content-type boundary into account. For example you can specify:\n    given().contentType(\"multipart/mixed; boundary=abcdef\").multiPart(..). ..\n  which will use the specified boundary of \"abcdef\" instead of generating a \"random\" one. It's also possible to specify a default boundary\n  in the MultiPartConfig:\n    given().config(config().multiPartConfig(multiPartConfig().defaultBoundary(\"abcdef\"))). ..\n  (issue 670)\n* Fixed an issue with path parameters where REST Assured would say that a path parameter was not applied if the value was shorter than the template name in cases where you had defined multiple templates between two slashes (issue 683)\n* Fixed so that it's possible to declare whether or not XmlPath and Rest Assured should use care about XML namespaces, validation and/or allow doc type declaration.\n  To configure this when using XmlPath do:\n    XmlPath xmlPath = new XmlPath(xml).using(xmlPathConfig().namespaceAware(false)); // replace \"namespaceAware\" with \"validation\" or \"allowDocTypeDeclaration\" if needed\n  And like this if using REST Assured DSL:\n    given().config(RestAssured.config().xmlConfig(xmlConfig().namespaceAware(false))). ..\n* Deprecated com.jayway.restassured.filter.log.LogDetail#PATH since it actually configured REST Assured to log the request URI and not only the path. Use com.jayway.restassured.filter.log.LogDetail#URI instead (issue 687).\n* Added NumberReturnType.BIG_INTEGER which allows you to configure JsonPath to return non-decimal values as BigInteger (thanks to Jacob Krieger for pull request) (issue 695)\n* Upgraded spring-security from 4.0.2.RELEASE to 4.1.0.RELEASE in MockMvc module (optional dependency)\n* Upgraded spring from 4.2.0.RELEASE to 4.2.6.RELEASE in the MockMvc module\n* Upgraded commons-lang3 from 3.3.2 to 3.4\n* Improved proxy authentication to use Apache HTTP Client's built in features (issue 693)\n* Fixed NPE trying to close an empty response which was read as an inputstream (issue 685)\n* Added ability to remove headers from a filter by using the FilterableRequestSpecification#removeHeader method (issue 539)\n* Removed the following deprecated methods:\n    - io.restassured.specification.AuthenticationSpecification.certificate(java.lang.String, java.lang.String, java.lang.String, int) (use io.restassured.specification.AuthenticationSpecification.certificate(java.lang.String, java.lang.String, io.restassured.authentication.CertificateAuthSettings) instead)\n    - io.restassured.RestAssured.requestContentType(io.restassured.http.ContentType) (use a io.restassured.builder.RequestSpecBuilder, set the content-type and apply it to io.restassured.RestAssured.requestSpecification)\n    - io.restassured.RestAssured.responseContentType(java.lang.String) (Use io.restassured.builder.ResponseSpecBuilder.expectContentType(io.restassured.http.ContentType) and apply it to io.restassured.RestAssured.responseSpecification instead)\n    - io.restassured.config.EncoderConfig.appendDefaultContentCharsetToStreamingContentTypeIfUndefined(java.lang.boolean) (use io.restassured.config.EncoderConfig.appendDefaultContentCharsetToContentTypeIfUndefined(boolean) instead)\n    - io.restassured.specification.FilterableRequestSpecification.getRequestContentType() (use io.restassured.specification.FilterableRequestSpecification.getContentType() instead)\n    - io.restassured.RestAssured.requestContentType() (If you really need to know this then create a filter)\n    - io.restassured.RestAssured.responseContentType() (If you need to know this then extract it from the response)\n    - io.restassured.RestAssured.certificate(java.lang.String, java.lang.String, java.lang.String, int) (use io.restassured.RestAssured.certificate(java.lang.String, java.lang.String, io.restassured.authentication.CertificateAuthSettings) instead)\n    - io.restassured.filter.FilterContext.getRequestMethod() (use io.restassured.specification.FilterableRequestSpecification.getMethod() instead)\n    - io.restassured.filter.FilterContext.getRequestPath() (use io.restassured.specification.FilterableRequestSpecification.getDerivedPath() instead)\n    - io.restassured.filter.FilterContext.getOriginalRequestPath() (use io.restassured.specification.FilterableRequestSpecification.getUserDefinedPath() instead)\n    - io.restassured.filter.FilterContext.getRequestURI() (use io.restassured.specification.FilterableRequestSpecification.getURI() instead)\n    - io.restassured.filter.FilterContext.getCompleteRequestPath() (use io.restassured.specification.FilterableRequestSpecification.getURI() instead)\n    - io.restassured.filter.log.LogDetail.PATH (use io.restassured.filter.log.LogDetail.URI instead)\n    - io.restassured.module.mockmvc.specification.MockMvcRequestSpecification.resultHandlers (use io.restassured.module.mockmvc.response.ValidatableMockMvcResponse.apply(..) instead)\n    - io.restassured.mapper.ObjectMapper.JACKSON (isn't needed anymore)\n    - io.restassured.mapper.ObjectMapper.GSON (isn't needed anymore)\n    - io.restassured.mapper.ObjectMapper.JAXB (isn't needed anymore)\n    - io.restassured.config.SSLConfig.getPassword() (use io.restassured.config.SSLConfig.getKeyStorePassword() instead)\n* Renamed method com.jayway.restassured.specification.RequestLogSpecification.path(..) to com.jayway.restassured.specification.RequestLogSpecification.uri(..)\n* Added support for automatically recognizing content-type \"text/json\" as JSON\n* Changed Maven groupId from com.jayway.restassured to io.rest-assured\n* Changed package name from com.jayway.restassured to io.restassured\n* Removed ability send requests directly from the response specification. This means that you can't do for example \"expect().get(\"/\")\" anymore. Use \"when().get(\"/\")\" instead.\n* Changed io.restassured.specification.FilterableRequestSpecification.getMethod() to return a String instead of an instance of io.restassured.http.Method since custom HTTP verbs are now supported\n* All HTTP verbs now support data in the body (for example TRACE, OPTIONS etc)\n* Removed io.restassured.specification.RequestSpecification.then() since it's confusingly similar to the \"then\" method in RequestSender. Use then \"when\" method instead.\n* You can now use custom http methods/verbs with REST Assured by making using the the \"request method\" in the DSL (or from statically importing a io.restassured.RestAssured.request(..)). For example:\n    when().request(\"CONNECT\", \"/somewhere\").then().statusCode(200);\n  It you can also supply a predefined http method (defined in the io.restassured.http.Method enum):\n    when().request(Method.GET, \"/lotto\").then().statusCode(200);\n  This API has also been implemented for the MockMvc module (but MockMvc doesn't support arbitrary http methods as of now).\n* Fixed so that query parameters are included in the request URI in the Spring MockMvc module (issue 699) (thanks to lee myeong hyeon for pull request)\n* Handles non-integer cookie versions in responses better (issue 701)\n* Added ability to use ResponseAwareMatcher for headers. For example you can now use attributes from the response body to validate a Location header.\n  Let's say that \"/redirect\" returns the json document { \"id\" : 1 } and returns a redirect to a location ending with this id. If you want to validate the\n  Location header invariant you can do:\n    given().\n            redirects().follow(false).\n    when().\n            get(\"/redirect\").\n    then().\n            statusCode(301).\n            header(\"Location\", response -> endsWith(\"/redirect/\"+response.path(\"id\")));\n  This has also been implemented for the MockMvc module (issue 692).\n* Moved classes Cookie, Cookies, Header and Headers from package com.jayway.restassured.response to io.restassured.http since they were used for both requests and responses.\n* Moved io.restassured.internal.mapper.ObjectMapperType to io.restassured.mapper since ObjectMapperType should not be internal\n* Deprecated all long versions \"parameter\" as well as \"content\". Here's a full list:\n    io.restassured.builder.RequestSpecBuilder:\n        - io.restassured.builder.RequestSpecBuilder.setContent(byte[]) (use io.restassured.builder.RequestSpecBuilder.setBody(byte[]) instead)\n        - io.restassured.builder.RequestSpecBuilder.setContent(java.lang.Object) (use io.restassured.builder.RequestSpecBuilder.setBody(Object) instead)\n        - io.restassured.builder.RequestSpecBuilder.setContent(java.lang.Object, io.restassured.mapper.ObjectMapper) (use io.restassured.builder.RequestSpecBuilder.setBody(java.lang.Object, io.restassured.mapper.ObjectMapper) instead)\n        - io.restassured.builder.RequestSpecBuilder.setContent(java.lang.Object, io.restassured.mapper.ObjectMapperType) (use io.restassured.builder.RequestSpecBuilder.setBody(java.lang.Object, io.restassured.mapper.ObjectMapperType) instead)\n        - io.restassured.builder.RequestSpecBuilder.setContent(java.lang.Object, io.restassured.mapper.ObjectMapperType) (use io.restassured.builder.RequestSpecBuilder.setBody(java.lang.Object, io.restassured.mapper.ObjectMapperType) instead)\n        - io.restassured.builder.RequestSpecBuilder.setContent(java.lang.String) (use io.restassured.builder.RequestSpecBuilder.setBody(java.lang.String) instead)\n        - io.restassured.builder.RequestSpecBuilder.addParameter(java.lang.String, java.util.Collection<?>) (use io.restassured.builder.RequestSpecBuilder.addParam(java.lang.String, java.util.Collection<?>) instead)\n        - io.restassured.builder.RequestSpecBuilder.addParameter(java.lang.String, java.lang.Object...) (use io.restassured.builder.RequestSpecBuilder.addParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.builder.RequestSpecBuilder.addParameters (use io.restassured.builder.RequestSpecBuilder.addParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addFormParameter(java.lang.String, java.util.Collection<?>) (use io.restassured.builder.RequestSpecBuilder.addParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addFormParameter(java.lang.String, java.lang.Object...) (use io.restassured.builder.RequestSpecBuilder.addFormParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.builder.RequestSpecBuilder.addFormParameters (use io.restassured.builder.RequestSpecBuilder.addFormParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addPathParameter(java.lang.String, java.util.Collection<?>) (use io.restassured.builder.RequestSpecBuilder.addParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addPathParameters(java.lang.String, java.lang.Object, java.lang.Object...) (use io.restassured.builder.RequestSpecBuilder.addPathParams(java.lang.String, java.lang.Object, java.lang.Object...) instead)\n        - io.restassured.builder.RequestSpecBuilder.addPathParameters (use (use io.restassured.builder.RequestSpecBuilder.addPathParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addQueryParameter(java.lang.String, java.util.Collection<?>) (use io.restassured.builder.RequestSpecBuilder.addParams instead)\n        - io.restassured.builder.RequestSpecBuilder.addQueryParameter(java.lang.String, java.lang.Object...) (use io.restassured.builder.RequestSpecBuilder.addQueryParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.builder.RequestSpecBuilder.addQueryParameters (use io.restassured.builder.RequestSpecBuilder.addQueryParams instead)\n        - io.restassured.builder.RequestSpecBuilder.setAuthentication (use io.restassured.builder.RequestSpecBuilder.setAuth instead)\n    io.restassured.builder.ResponseSpecBuilder:\n        - io.restassured.builder.ResponseSpecBuilder.expectContent(org.hamcrest.Matcher<?>) (Use io.restassured.builder.ResponseSpecBuilder.expectBody(org.hamcrest.Matcher<?>) instead)\n        - io.restassured.builder.ResponseSpecBuilder.expectContent(java.lang.String, org.hamcrest.Matcher<?>) (Use io.restassured.builder.ResponseSpecBuilder.expectBody(java.lang.String, org.hamcrest.Matcher<?>) instead)\n        - io.restassured.builder.ResponseSpecBuilder.expectContent(java.lang.String, java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher<?>) (Use io.restassured.builder.ResponseSpecBuilder.expectBody(java.lang.String, java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher<?>) instead)\n    io.restassured.specification.RequestSpecification:\n        - io.restassured.specification.RequestSpecification.content(byte[]) (Use io.restassured.specification.RequestSpecification.body(byte[]) instead)\n        - io.restassured.specification.RequestSpecification.content(java.io.File) (Use io.restassured.specification.RequestSpecification.body(java.io.File) instead)\n        - io.restassured.specification.RequestSpecification.content(java.io.InputStream) (Use io.restassured.specification.RequestSpecification.body(java.io.InputStream) instead)\n        - io.restassured.specification.RequestSpecification.content(java.lang.Object) (Use io.restassured.specification.RequestSpecification.body(java.lang.Object) instead)\n        - io.restassured.specification.RequestSpecification.content(java.lang.Object, io.restassured.mapper.ObjectMapper) (Use io.restassured.specification.RequestSpecification.body(java.lang.Object, io.restassured.mapper.ObjectMapper) instead)\n        - io.restassured.specification.RequestSpecification.content(java.lang.Object, io.restassured.mapper.ObjectMapperType) (Use io.restassured.specification.RequestSpecification.body(java.lang.Object, io.restassured.mapper.ObjectMapperType) instead)\n        - io.restassured.specification.RequestSpecification.content(java.lang.String) (Use io.restassured.specification.RequestSpecification.body(java.lang.String) instead)\n        - io.restassured.specification.RequestSpecification.authentication (Use io.restassured.specification.RequestSpecification.auth instead)\n        - io.restassured.specification.RequestSpecification.parameter(java.lang.String, java.util.Collection<?>) (Use io.restassured.specification.RequestSpecification.param(java.lang.String, java.util.Collection<?>) instead)\n        - io.restassured.specification.RequestSpecification.parameter(java.lang.String, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.param(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.parameters(java.util.Map<java.lang.String,?>) (Use io.restassured.specification.RequestSpecification.params(java.util.Map<java.lang.String,?>) instead)\n        - io.restassured.specification.RequestSpecification.parameters(java.lang.String, java.lang.Object, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.params(java.lang.String, java.lang.Object, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.formParameter(java.lang.String, java.util.Collection<?>) (Use io.restassured.specification.RequestSpecification.formParam(java.lang.String, java.util.Collection<?>) instead)\n        - io.restassured.specification.RequestSpecification.formParameter(java.lang.String, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.formParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.formParameters(java.util.Map<java.lang.String,?>) (Use io.restassured.specification.RequestSpecification.formParams(java.util.Map<java.lang.String,?>) instead)\n        - io.restassured.specification.RequestSpecification.formParameters(java.lang.String, java.lang.Object, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.formParams(java.lang.String, java.lang.Object, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.queryParameter(java.lang.String, java.util.Collection<?>) (Use io.restassured.specification.RequestSpecification.queryParam(java.lang.String, java.util.Collection<?>) instead)\n        - io.restassured.specification.RequestSpecification.queryParameter(java.lang.String, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.queryParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.queryParameters(java.util.Map<java.lang.String,?>) (Use io.restassured.specification.RequestSpecification.queryParams(java.util.Map<java.lang.String,?>) instead)\n        - io.restassured.specification.RequestSpecification.queryParameters(java.lang.String, java.lang.Object, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.queryParams(java.lang.String, java.lang.Object, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.pathParameter(java.lang.String, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.pathParam(java.lang.String, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.pathParameters(java.util.Map<java.lang.String,?>) (Use io.restassured.specification.RequestSpecification.pathParams(java.util.Map<java.lang.String,?>) instead)\n        - io.restassured.specification.RequestSpecification.pathParameters(java.lang.String, java.lang.Object, java.lang.Object...) (Use io.restassured.specification.RequestSpecification.pathParams(java.lang.String, java.lang.Object, java.lang.Object...) instead)\n        - io.restassured.specification.RequestSpecification.specification (Use io.restassured.specification.RequestSpecification.spec instead)\n    io.restassured.specification.ResponseSpecification:\n        - io.restassured.specification.ResponseSpecification#rootPath(java.lang.String) (Use io.restassured.specification.ResponseSpecification.root(java.lang.String) instead)\n        - io.restassured.specification.ResponseSpecification.rootPath(java.lang.String, java.util.List<io.restassured.specification.Argument>) (Use io.restassured.specification.ResponseSpecification.rootPath(java.lang.String, java.util.List<io.restassured.specification.Argument>) instead)\n        - io.restassured.specification.ResponseSpecification.noRootPath (Use io.restassured.specification.ResponseSpecification.noRoot instead)\n        - io.restassured.specification.ResponseSpecification.content(java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) (Use io.restassured.specification.ResponseSpecification.body(java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) instead)\n        - io.restassured.specification.ResponseSpecification.content(org.hamcrest.Matcher<?>, org.hamcrest.Matcher<?>...) (Use io.restassured.specification.ResponseSpecification.body(org.hamcrest.Matcher<?>, org.hamcrest.Matcher<?>...) instead)\n        - io.restassured.specification.ResponseSpecification.content(java.lang.String, java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) (Use io.restassured.specification.ResponseSpecification.body(java.lang.String, java.util.List<io.restassured.specification.Argument>, org.hamcrest.Matcher, java.lang.Object...) instead)\n        - io.restassured.specification.ResponseSpecification.content(java.lang.String, org.hamcrest.Matcher<?>, java.lang.Object...) (Use io.restassured.specification.ResponseSpecification.body(java.lang.String, org.hamcrest.Matcher<?>, java.lang.Object...) instead)\n        - io.restassured.specification.ResponseSpecification.specification (Use io.restassured.specification.ResponseSpecification.spec instead)\n    io.restassured.RestAssured:\n        - io.restassured.RestAssured.withArguments (Use io.restassured.RestAssured.withArgs instead)\n        - io.restassured.RestAssured.withNoArguments (Use io.restassured.RestAssured.withNoArgs instead)\n* Renamed the following methods:\n    - io.restassured.authentication.CertificateAuthSettings.keystoreType to io.restassured.authentication.CertificateAuthSettings.keyStoreType\n    - io.restassured.authentication.CertificateAuthSettings.getKeystoreType to io.restassured.authentication.CertificateAuthSettings.getKeyStoreType\n    - io.restassured.specification.RequestSpecification.keystore to io.restassured.specification.RequestSpecification.keyStore\n    - io.restassured.RestAssured.keystore to io.restassured.RestAssured.keyStore\n    - io.restassured.builder.RequestSpecBuilder.setKeystore to io.restassured.builder.RequestSpecBuilder.setKeyStore\n* You can now do multipart file uploading for all HTTP verbs (even GET, OPTIONS etc)\n\nChangelog 2.9.0 (2016-03-04)\n-----------------------------\n* Added support for composing a Hamcrest matcher with a ResponseAwareMatcher when using a ResponseAwareMatcherComposer\n* Automatically escapes JsonPath and XmlPath fragments that contains a hyphen and an index lookup operator. For example consider the following JSON document:\n    { \"some-list\" : [\"one\", \"two\"] }\n  Previously you had to escape \"some-list\" manually if you wanted to get first element out of the list:\n    JsonPath jsonPath = ...\n    String firstElement = jsonPath.getString(\"'some-list'[0]\"); // one\n  Now no explicit escaping is necessary:\n    String firstElement = jsonPath.getString(\"some-list[0]\"); // one\n  But this means that if you previously had a JSON document like this:\n    { \"some-list[0]\" : [\"one\", \"two\"] }\n  you would now have to escape it:\n    String firstElement = jsonPath.getString(\"'some-list[0]'[0]\"); // one\n  which makes this an (unlikely but still) non-backward compatible change (issue 564).\n* Added support for multipart DELETE requests (issue 634)\n* It's now possible to use empty and whitespace path parameters (issue 631)\n* Replace deprecated HttpEntity.consume with EntityUtils.consume to fix problems with connections not closing properly (issue 633) (thanks to Marin Dzhigarov and Julian Engelhardt for help and PR)\n* Fixing NullPointerException for GET requests with an empty body (issue 642)\n* Form authentication for fully-qualified URIs now uses the URI specified in the request instead of just localhost (issue 641)\n* Improve escaping for XmlPath's containing colon. For example you can now do like this without manually having to escape anything in the path: \"x:something.x:y[0]\" (issue 647)\n* Getting an attribute value from an XmlPath expression that doesn't exists now returns null instead of an empty list (issue 650).\n* Deprecated com.jayway.restassured.config.SSLConfig#getPassword, use com.jayway.restassured.config.SSLConfig#getKeyStorePassword instead\n* Major improvements of certificate authentication. You can now use a keystore (without trust store) and a keystore and trust store at the same time.\n* Non-backward compatible change: keystore was previously used as a truststore. You must change \"given().keystore(..)\" to \"given().trustStore(..)\", \"RestAssured.keystore(..)\" to \"RestAssured.trustStore(..)\" and \"SSLConfig.keystore(..)\" to \"SSLConfig.trustStore(..)\". Sorry!\n\nChangelog 2.8.0 (2015-12-18)\n-----------------------------\n* Modify HttpClientConfig so parameter methods respect previous configuration (issue 612). Thanks to Adam Clarkson for pull request.\n* Fixed issue that caused filter context properties to be removed between filter invocations\n* Added support for measuring time. For example:\n    long timeInMs = get(\"/lotto\").time()\n  or using a specific time unit:\n    long timeInSeconds = get(\"/lotto\").timeIn(SECONDS);\n  where \"SECONDS\" is just a standard TimeUnit. You can also validate it using the validation DSL:\n    when().\n            get(\"/lotto\").\n    then().\n            time(lessThan(2000L)); // Milliseconds\n  or\n    when().\n            get(\"/lotto\").\n    then().\n            time(lessThan(2L), SECONDS);\n  Please note that response time measurement should be performed when the JVM is hot! (i.e. running a response time measurement when only running a single test will yield erroneous results)\n  This is also implemented in the Spring MockMvc module (issue 493)\n* Deprecated: com.jayway.restassured.filter.FilterContext#getRequestMethod, use com.jayway.restassured.specification.FilterableRequestSpecification#getMethod instead.\n* Deprecated: com.jayway.restassured.filter.FilterContext#getRequestPath, use com.jayway.restassured.specification.FilterableRequestSpecification#getUserDefinedPath instead.\n* Deprecated: com.jayway.restassured.filter.FilterContext#getRequestURI, use com.jayway.restassured.specification.FilterableRequestSpecification#getURI instead.\n* Deprecated: com.jayway.restassured.filter.FilterContext#getOriginalRequestPath, use com.jayway.restassured.specification.FilterableRequestSpecification#getUserDefinedPath instead.\n* Deprecated: com.jayway.restassured.specification.FilterableRequestSpecification#getRequestContentType, use com.jayway.restassured.specification.FilterableRequestSpecification#getContentType instead.\n* Added com.jayway.restassured.http.Method enum that represents the various HTTP methods that may be used in REST Assured\n* Added getUnnamedPathParams method to com.jayway.restassured.specification.FilterableRequestSpecification which returns all unnamed path parameters\n* Added getUnnamedPathParamValues method to com.jayway.restassured.specification.FilterableRequestSpecification which returns all unnamed path parameter values\n* Added getNamedPathParams method to com.jayway.restassured.specification.FilterableRequestSpecification which returns all named path parameters\n* Non-backward compatible change: com.jayway.restassured.specification.FilterableRequestSpecification#getPathParams now returns both unnamed and named path parameters (before only named parameters were returned).\n* com.jayway.restassured.specification.FilterableRequestSpecification#getQueryParams, getRequestParams, getFormParams and getPathParams now returns a Map of String -> String whereas before they returned a Map of String -> Object.\n* It's now possible to change the request path from a filter, use the \"path\" method in the \"requestSpec\" (com.jayway.restassured.specification.FilterableRequestSpecification#path).\n* You can now specify both named and unnamed path params at the same time\n* Added ability to remove parameters from the FilterableRequestSpecification. Use the remove methods such as \"removeQueryParam\".\n* Better error messages when unnamed path parameters are null.\n* Slightly improved logging in Spring MockMvc module\n* Removed the use of StandardCharset from DecoderConfig which prevented EncoderConfig to be used on Java 6 and older.\n* Multipart patch no longer produces an exception on a call that returns status other than 200 (issue 615)\n\nChangelog 2.7.0 (2015-10-31)\n-----------------------------\n* Significantly reduce sized of scala-support distribution package\n* Removed the use of StandardCharset from EncoderConfig which prevented EncoderConfig to be used on Java 6 and older.\n* Added support for sending a request body in a GET request (issue 544). Thanks to Manuel Möhlmann for pull request.\n* Response content-type validation now works correctly even if the response body is empty (issue 566). Thanks to Manuel Möhlmann for pull request.\n* Fixing dead links in javadocs (issue 605). Thanks to Ben Severson for pull request.\n* Changes to com.jayway.restassured.filter.FilterContext:\n   1. getRequestPath now only returns the the actual path of the request URI (previously this returned the request URI) (non-backward compatible change)\n   2. getRequestURI returns the entire request URI (new method)\n   3. getCompleteRequestPath has been deprecated, use getRequestURI\n   4. getOriginalRequestPath has been added which returns the path of the request BEFORE path parameters have been applied to it\n* Deprecated \"resultHandlers\" method in MockMvcRequestSpecification and added \"apply\" method to com.jayway.restassured.module.mockmvc.response.ValidatableMockMvcResponse that should be used instead.\n  For example previously you did \"given().resultHandlers(print()).when().get(\"/x\")\" but now you do \"get(\"/x\").then().apply(print())\" (issue 607)\n* Automatically escapes \"class\" keyword in JsonPath and XmlPath (issue 598)\n* Taking DecoderConfig into account when parsing non-string content (issue 599)\n* It's now possible to supply MockMvcConfigurers when calling standaloneSetup in the Spring Mock MVC module. For example:\n      given().standaloneSetup(new Controller1(), springSecurity()). ..\n* Automatically adds supports for spring rest docs path parameter documentation if spring-restdocs-mockmvc is in classpath. This can be disabled using the MockMvcConfig (issue 606).\n* It's now possible to change port, base path etc from a filter (issue 600)\n* Added support for specifying preemptive basic authentication for proxies. For example:\n    given().proxy(auth(\"username\", \"password\")).when() ..\n  where \"auth\" is statically imported from com.jayway.restassured.specification.ProxySpecification (issue 597).\n* Added getUUID method to JsonPath and XmlPath (thanks to Libor Ondrušek for the pull request)\n\nChangelog 2.6.0 (2015-10-09)\n-----------------------------\n* Changed com.jayway.restassured.config.HttpClientConfig$HttpClientFactory from an abstract class to an interface in order to create it as a lambda express in Java 8. Before you had to do like this:\n    given().config(RestAssured.config().httpClientConfig(httpClientConfig().httpClientFactory(new HttpClientConfig.HttpClientFactory() {\n        @Override\n        public HttpClient createHttpClient() {\n            return new SystemDefaultHttpClient();\n        }\n    }));\n  but now you can just use a lambda expression or method reference:\n    given().config(RestAssured.config().httpClientConfig(httpClientConfig().httpClientFactory(SystemDefaultHttpClient::new));\n* Fixed so that the \"multiPart(String name, File file, String mimeType)\" method doesn't use default control name (issue 588)\n* Added support for setting multipart filename when passing in an object to multiPart method (issue 587)\n* Multipart file-uploading now takes encoder config into account when serializing content. For example if you're trying to serialize an object\n  using mime-type \"application/vnd.ms-excel\" in a multipart then you can register that it should be serialize as JSON:\n    Greeting greeting = new Greeting();\n    greeting.setFirstName(\"John\");\n    greeting.setLastName(\"Doe\");\n\n    given().\n           config(config().encoderConfig(encoderConfig().encodeContentTypeAs(\"application/vnd.ms-excel\", ContentType.JSON))).\n           multiPart(new MultiPartSpecBuilder(greeting)\n                   .fileName(\"RoleBasedAccessFeaturePlan.csv\")\n                   .controlName(\"text\")\n                   .mimeType(\"application/vnd.ms-excel\").build()).\n    when().\n           post(\"/multipart/text\").\n    then().\n           statusCode(200);\n  This will now serialize the \"greeting\" as JSON even though the mime-type is set to \"application/vnd.ms-excel\" (which is unknown to REST Assured) (issue 586)\n* You can now pass in which ObjectMapperType or ObjectMapper to use when serializing an object using multipart. For example:\n    Greeting greeting = new Greeting();\n    greeting.setFirstName(\"John\");\n    greeting.setLastName(\"Doe\");\n\n    given().\n           multiPart(new MultiPartSpecBuilder(greeting, ObjectMapperType.GSON)\n                   .fileName(\"RoleBasedAccessFeaturePlan.csv\")\n                   .controlName(\"text\")\n                   .mimeType(\"application/vnd.ms-excel\").build()).\n    when().\n           post(\"/multipart/text\").\n    then().\n           statusCode(200);\n  This will force the use if the GSON ObjectMapper (if available in the classpath) even though mime type is not recognized by default by REST Assured.\n* Charset for multipart requests is now taken into account\n* Content-Type for multipart requests is now taken into account. For example you can now do:\n    given().contentType(\"multipart/mixed\").multiPart(..)\n  which was not possible in the previous version. (Only \"multipart/form-data\" worked) (issue 586)\n* It's now possible to specify default mime subtype for multipart content-type. Use the MultiPartConfig#defaultSubtype(..) method.\n  Default is \"form-data\" which results in a content-type of \"multipart/form-data\". This also works for the MockMvc module.\n* Upgraded JUnit to 4.12\n* Non-backward compatible change: Fixed so that GPath expressions using XML namespaces are evaluated from the root.\n  The implementation was previously a misunderstanding of how the Groovy's XmlSlurper worked when using namespace and has now been corrected. For example let's say\n  you have a service at \"/namespace-example\" that returns the following XML:\n\n    <foo xmlns:ns=\"http://localhost/\">\n      <bar>sudo </bar>\n      <ns:bar>make me a sandwich!</ns:bar>\n    </foo>\n\n  You NOW test it like this:\n\n    given().\n            config(newConfig().xmlConfig(xmlConfig().declareNamespace(\"ns\", \"http://localhost/\"))).\n    when().\n            get(\"/namespace-example\").\n    then().\n            body(\"foo.bar.text()\", equalTo(\"sudo make me a sandwich!\")).\n            body(\":foo.:bar.text()\", equalTo(\"sudo \")).\n            body(\"foo.ns:bar.text()\", equalTo(\"make me a sandwich!\"));\n\n  In the previous versions you did like this:\n\n    given().\n            config(newConfig().xmlConfig(xmlConfig().declareNamespace(\"ns\", \"http://localhost/\"))).\n    when().\n            get(\"/namespace-example\").\n    then().\n            body(\"bar.text()\", equalTo(\"sudo make me a sandwich!\")).\n            body(\":bar.text()\", equalTo(\"sudo \")).\n            body(\"ns:bar.text()\", equalTo(\"make me a sandwich!\"));\n\n  Which was not correct (notice the missing foo property)! Big thanks to Erich Eichinger for spotting this and providing a pull request (issue 592).\n* Simplified setting of accept header in the MockMvc module (issue 591)\n* It's now possible to use a mapping function when validating headers. For example let's say you want to validate that the Content-Length header is less than 1000.\n  You can then use a mapping function to first convert the header value to an int and then use an \"integer\" Hamcrest matcher:\n    when().get(\"/something\").then().header(\"Content-Length\", Integer::parseInt, lessThan(1000));\n  This is also implemented for the MockMvc module (issue 594).\n* Added new config called ParamConfig that allows you to configure how parameter types should be updated. By default all parameters are merged so if you do:\n    given().queryParam(\"param1\", \"value1\").queryParam(\"param1\", \"value2\").when().get(\"/x\"). ...\n  REST Assured will send a query string of \"param1=value1&param1=value2\". This is not always what you want though so from now on you can configure REST Assured to replace\n  values instead:\n    given().\n            config(config().paramConfig(paramConfig().queryParamsUpdateStrategy(REPLACE))).\n            queryParam(\"param1\", \"value1\").\n            queryParam(\"param1\", \"value2\").\n    when().\n            get(\"/x\"). ..\n  REST Assured will now replace \"param1\" with \"value2\" (since it's written last) instead of merging them together. You can configure the update strategy for each\n  parameter type of for all parameter types:\n    given().config(config().paramConfig(paramConfig().replaceAllParameters())). ..\n  This is also implemented for the MockMvc module (but the config there is called MockMvcParamConfig) (issue 589)\n* Non-backward compatible change: When multiple cookies or headers with the same name are returned in the response the LAST value is what's returned when\n  only getting one value from the entity (Headers or Cookies) or when validating values. For example let's say that the server returns headers:\n    HeaderName: Value 1\n    HeaderName: Value 2\n  then if you do:\n    get(\"/x\").extract().header(\"HeaderName\")\n  Value 2 will be returned (previous Value 1 would be returned).\n  Likewise if you do validation:\n    get(\"/x\").then().header(\"HeaderName\", equalTo(\"Value 2\");\n  This change also affects session ids. This is done to be compatible with the way browsers work (issue 543).\n* Added ability to specify which encoder charset to use for a specific content-type if no charset is defined explicitly for this content-type.\n  Previously you could only specify a default charset for ALL content-types. You do this by using the \"defaultCharsetForContentType\" method in the\n  com.jayway.restassured.config.EncoderConfig. For example:\n    RestAssured.config = config(config().encoderConfig(encoderConfig().defaultCharsetForContentType(\"UTF-16\", \"application/xml\")));\n  This will assume UTF-16 encoding for \"application/xml\" content-types that does explicitly specify a charset.\n  By default \"application/json\" is now specified to use \"UTF-8\" as default content-type as this is specified by RFC4627.\n  This is may be a backward incompatible change since previously \"application/json\" content-types\n  were encoded using the platform default content-type (or what was specified by defaultContentCharset(..)) (issue 567).\n* Added ability to specify which decoder charset to use for a specific content-type if no charset is defined explicitly for this content-type.\n  Previously you could only specify a default charset for ALL content-types. You do this by using the \"defaultCharsetForContentType\" method in the\n  com.jayway.restassured.config.DecoderConfig. For example:\n    RestAssured.config = config(config().decoderConfig(decoderConfig().defaultCharsetForContentType(\"UTF-16\", \"application/xml\")));\n  This will assume UTF-16 encoding for \"application/xml\" content-types that does explicitly specify a charset.\n  By default \"application/json\" is now specified to use \"UTF-8\" as default charset as this is specified by RFC4627.\n  This is may be a backward incompatible change since previously \"application/json\" content-types\n  were encoded using the platform default content-type (or what was specified by defaultContentCharset(..)).\n* Fixed so that com.jayway.restassured.builder.ResponseBuilder register a ResponseParserRegistrar by default to avoid NPE when logging custom built responses.\n* Fixed so that com.jayway.restassured.builder.ResponseBuilder now uses status code as status line if no status line was explicitly defined.\n* Added ability to set a header in com.jayway.restassured.builder.ResponseBuilder.\n* Setting contentType in com.jayway.restassured.builder.ResponseBuilder also sets the header.\n* Added ability to pass a ContentType as argument to \"setContentType\" method in com.jayway.restassured.builder.ResponseBuilder.\n* Added a new module called spring-support that adds an alias to the \"then\" method in Response or MockMvcResponse called \"Then\".\n  The reason for this is that \"then\" might be a reserved keyword in Scala in the future and the compiler gives a warning when using \"then\".\n  To enable the use of \"Then\" simply import the \"com.jayway.restassured.module.scala.RestAssuredSupport.AddThenToResponse\". For example:\n    import com.jayway.restassured.RestAssured.when\n    import com.jayway.restassured.module.scala.RestAssuredSupport.AddThenToResponse\n    import org.hamcrest.Matchers.equalTo\n    import org.junit.Test\n\n    @Test\n    def `trying out rest assured in scala with implicit conversion`() {\n        when().\n                get(\"/greetJSON\").\n        Then().\n                statusCode(200).\n                body(\"key\", equalTo(\"value\"))\n    }\n  This is also support for the spring-mock-mvc module.\n\nChangelog 2.5.0 (2015-08-09)\n-----------------------------\n* MockMvc module now supports async requests. For example \"given().body(..).when().async().post(\"/x\").then(). ..\". Big thanks to Marcin Grzejszczak (@mgrzejszczak) for helping out.\n* Fixed NPE when using logging with a custom filter that doesn't include any headers.\n* REST Assured can now resolve multiple path parameters inside the same URI \"path parameter\" (for example /somewhere/{x}{y}/z)\n* Using non-deprecated DateUtils from Apache HTTP Client in CookieMatcher\n* Quotations when extracting charset parameter is no longer required (thanks to Ronny Bräunlich for pull request)\n* Content specified with a content-type starting with \"text/\" or containing \"+text\" is now automatically encoded as using the text encoder (issue 574)\n* It's now possible to specify how content for a specific content-type should be serialized using com.jayway.restassured.config.EncoderConfig#encodeContentTypeAs(..).\n  For example let's say that you want to serialized content-type \"my-custom-content-type\" as text:\n  given().\n          config(RestAssured.config().encoderConfig(encoderConfig().encodeContentTypeAs(\"my-custom-content-type\", ContentType.TEXT))).\n          contentType(\"my-custom-content-type\").\n          content(\"Some text content\").\n  when().\n          post(\"/somewhere\"). ..\n* Improved escaping of certain attributes (such as 'properties') when parsing JSON and XML (issue 552)\n* REST Assured now show all failing body assertions when using multiple expectations in the same body clause. For example:\n    .. then().body(\"x.y\", equalTo(\"z\"), \"y.z\", is(2)). ..\n  If both \"x.y\" and \"y.z\" fails REST Assured will print both errors. Before only the error of \"x.y\" was shown.\n* Upgraded Groovy from 2.4.3 to 2.4.4\n* Pretty-printing of JSON now displays unicode characters correctly (issue 556)\n* Fixed so that the specified charset is actually used when calling com.jayway.restassured.path.json.config.JsonPathConfig#charset(String)\n* Fixed so that specifying number return type in com.jayway.restassured.path.json.config.JsonPathConfig#numberReturnType(..) doesn't override the other settings\n* Added new a new NumberReturnType that can be used with JsonPathConfig in order to always return non-integer numbers as doubles. This also you to for example use the \"closeTo\" Hamcrest matcher. For example:\n  RestAssured.config = RestAssured.config().jsonConfig(jsonConfig().numberReturnType(DOUBLE));\n  (issue 571)\n* Upgraded optional Scribe dependency for OAuth2 authentication from version 1.3.5 to version 1.3.7.\n* Possible to sign the request with an oauth2 access token (in the header) without using Scribe (issue 509)\n* Non-backward compatible change: Changed com.jayway.restassured.matcher.ResponseAwareMatcher from an abstract class to a (functional) interface.\n  The reason is to allow for creating ResponseAwareMatchers as lambda expressions in Java 8. Before you had to do like this (even in Java 8):\n    when().\n           get(\"/game\").\n    then().\n           body(\"_links.self.href\", new ResponseAwareMatcher<Response>() {\n               public Matcher<?> matcher(Response response) {\n                   return equalTo(\"http://localhost:8080/\" + response.path(\"id\"));\n               }\n           });\n  but with the new change you can now do (if using Java 8):\n    when().\n           get(\"/game\").\n    then().\n           body(\"_links.self.href\", response -> equalTo(\"http://localhost:8080/\" + response.path(\"id\")));\n  which is much less verbose. This change should be backward compatible unless you use composition of matchers. Before you composed ResponseAwareMatchers like this:\n    when().\n           get(\"/game\").\n    then().\n           body(\"_links.self.href\", responseAwareMatcher1.and(responseAwareMatcher2));\n  This now longer works (since we cannot implement default methods in the ResponseAwareMatcher interface in order to be compatible with older Java versions)\n  so now you use the new com.jayway.restassured.matcher.ResponseAwareMatcherComposer class to compose ResponseAwareMatchers instead:\n    when().\n           get(\"/game\").\n    then().\n           body(\"_links.self.href\", and(responseAwareMatcher1, responseAwareMatcher2));\n  where \"and\" is statically imported from ResponseAwareMatcherComposer. These can also be nested and combined with regular Hamcrest matchers, for example:\n    when().\n           get(\"/game\").\n    then().\n           body(\"_links.self.href\", and(responseAwareMatcher1, containsString(\"something\"), or(responseAwareMatcher2, responseAwareMatcher3, endsWith(\"x\"))));\n  (issue 575)\n* Updated com.github.fge.json-schema-validator from version 2.2.5 to 2.2.6 in the json-schema-validator module\n* Non-backward compatible change: multiPart methods taking java.io.File as argument now uses the filename of the File instead of just \"file\".\n* Fixed a NPE when using ResponseBuilder without setting a status code.\n* Multipart file uploading now supports specifying an empty filename.\n* It's now possible to set default filename and control name for multiparts. Before they were always equal to \"file\" but this is now configurable using the new MultiPartConfig. For example:\n    given().config(config().multiPartConfig(multiPartConfig().with().defaultFileName(\"custom1\").and().defaultControlName(\"custom2\"))). ..\n  This is also implemented for the Spring Mock MVC module.\n* Upgraded Spring from version 4.1.6.RELEASE to 4.2.0.RELEASE in the spring-mock-mvc module\n* Upgraded Spring Security from version 3.2.5.RELEASE to 4.0.2.RELEASE in the spring-mock-mvc module\n* Added support for RequestPostProcessor authentication to the Spring Mock MVC module. For example:\n     given().auth().with(httpBasic(\"username\", \"password\")). ..\n  where \"httpBasic\" is statically imported from org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors. This requires that you have \"spring-security-test\" in your classpath.\n* Added support for RequestPostProcessors to the Spring Mock MVC module, for example:\n    given().postProcessors(myRequestPostProcessor1, myRequestPostProcessor2). ..\n* It's now possible to supply MockMvcConfigurers when calling webAppContextSetup in the Spring Mock MVC module. For example:\n    given().webAppContextSetup(context, springSecurity()). ..\n* Non-backward compatible change: The field \"RestAssuredMockMvc.mockMvc\" has been replaced by a method: \"RestAssuredMockMvc.mockMvc(..)\". Before you did:\n    RestAssuredMockMvc.mockMvc = myMockMvcInstance;\n  but now you need to do:\n    RestAssuredMockMvc.mockMvc(myMockMvcInstance);\n* Added RestAssuredMockMvc#config() method that returns the assign static config or a new config if no static config has been assigned\n* Spring Mock MVC module automatically registers org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurer as request post processor if spring-security-test is available in classpath.\n  This means that you don't have to create a custom MockMvc instance with a \"SecurityMockMvcConfigurer\" manually which means easier setup.\n* Added MockMvcConfig to RestAssuredMockMvcConfig which allows you to configure whether or not SecurityMockMvcConfigurer should be applied by default (default is true). To disable it use:\n    given().config(config().mockMvcConfig(mockMvcConfig().dontAutomaticallyApplySpringSecurityMockMvcConfigurer())). ..\n* Added ability to supply an instance of MockMvcBuilder to the standaloneSetup method in MockMvcRequestSpecification.\n* Added support for standalone setup (setStandaloneSetup) and web app context setup (setWebAppContextSetup) in MockMvcRequestSpecBuilder.\n\nChangelog 2.4.1 (2015-04-12)\n----------------------------\n* DefaultJackson2ObjectMapperFactory now scans and registers additional modules (issue 385)\n* FilterableRequestSpecification#getPort now returns the correct port and not just -1.\n* Upgraded to Groovy 2.4.3\n* Upgraded Spring dependencies from 4.1.2.RELEASE to version 4.1.6.RELEASE in the Spring MockMvc module.\n* REST Assured now allows specifying \"File\" and \"InputStream\" as request body.\n* REST Assured MockMvc now allows specifying \"File\" as body.\n\nChangelog 2.4.0 (2014-11-15)\n-----------------------------\n* The \"matcherConfig\" method in com.jayway.restassured.config.MatcherConfig is now static as intended.\n* Fixed an issue in com.jayway.restassured.internal.path.xml.mapping.XmlPathJaxbObjectDeserializer that prevented parsing when XmlRootElement wasn't used.\n* defaultContentCharset and defaultQueryParameterCharset in com.jayway.restassured.config.EncoderConfig now accepts a java.nio.charset.Charset as parameter (issue 363).\n* com.jayway.restassured.config.DecoderConfig now accepts a java.nio.charset.Charset as parameter (issue 363).\n* Content-Type expectations are now matched by using ignore case.\n* Content-Type is now sent to the server if explicitly defined by a GET request (issue 362).\n* Added syntactic sugar method \"logRequestTo\" to com.jayway.restassured.filter.log.RequestLoggingFilter as a shortcut for doing \"new RequestLoggingFilter(printStream)\".\n* Default Content-Type charset is now visible in the request log.\n* Default Content-Type charset is now appended to Content-Type header in Spring MockMvc module by default. Use \"given().config(RestAssuredMockMvcConfig.config().encoderConfig(encoderConfig().appendDefaultContentCharsetToContentTypeIfUndefined(false))). ..\" to revert to previous behavior.\n* PUT now uses content-type application/x-www-form-urlencoded by default when using form parameters.\n* Content-Type is now correctly displayed in request log when not explicitly defined.\n* Content-Type charset is now available in Filters when calling getRequestContentType() on the request specification.\n* Deprecated RestAssured.responseContentType(..). Use com.jayway.restassured.builder.ResponseSpecBuilder#expectContentType(com.jayway.restassured.http.ContentType) and assign it to RestAssured.responseSpecification instead.\n* Deprecated RestAssured.requestContentType(..). Use com.jayway.restassured.builder.RequestSpecBuilder#contentType(com.jayway.restassured.http.ContentType) and assign it to RestAssured.requestSpecification instead.\n* Non-backward compatible change: Setting contentType on a ResponseSpecification no longer sets the accept header automatically. Previously this led to confusion and prevented separation between the ResponseSpecification and the RequestSpecification.\n* Added \"accept\" method to RequestSpecification to easier allow setting the Accept header. Also added setAccept to RequestSpecBuilder.\n* Added ability to configure if headers should be merged or overwritten when multiple headers with the same name are specified by using the new com.jayway.restassured.config.HeaderConfig. By default content-type and accept headers are now overwritten instead of merged. For example to configure \"header1\" to be overwritten instead of merged you can do:\n    RequestSpecification spec = new RequestSpecBuilder.addHeader(\"header1\", \"value2\").build();\n    given().\n            config(RestAssuredConfig.config().headerConfig(headerConfig().overwriteHeadersWithName(\"header1\"))).\n            header(\"header1\", \"value1\").\n            spec(spec).\n    when().\n            get(..)\n\n    will only send one header, \"header1\" with value \"value2\".\n* Fixed an issue in com.jayway.restassured.config.ObjectMapperConfig#defaultObjectMapperType(..) that reset state to default values.\n* Added asList method to Headers to make easier to transform them to a list.\n* Added method \"hasSameNameAs\" to com.jayway.restassured.response.Header.\n* Configurations are now overwritten only if they've been explicitly configured when applying a specification. For example:\n    RequestSpecification spec = new RequestSpecBuilder.config(config().headerConfig().overwriteHeadersWithName(\"header1\")).build();\n\n    given().\n            config(config().sessionConfig(sessionConfig().sessionIdName(\"phpsessionid\"))).\n            spec(spec).\n            ..\n    when().\n            get(..)\n\n    This will now cause the resulting config to include both the header config and session config. Before this change ONLY header config would be applied since all configs from the specs were overwritten. This also applies to the MockMvc extension.\n* Upgraded Spring version for RestAssuredMockMvc from version 4.0.6.RELEASE to 4.1.2.RELEASE.\n* Upgraded Groovy from version 2.3.6 to 2.3.7.\n* Upgraded commons-fileupload for RestAssuredMockMvc from version 1.2.2 to version 1.3.1.\n* Upgraded httpclient from version 4.3.5 to version 4.3.6.\n* It's now possible to specify the SSLContext protocol when configuring \"relaxedHTTPSValidation\" in SSLConfig. For example sslConfig.relaxedHTTPSValidation(\"TLS\"). Default is SSL just as in previous versions. (issue 367).\n* You can now send form parameters with a GET request in accordance with RFC1866 (page 46, HTML 4.x section 17.13.3). Form parameters will be added a query parameters for a GET request and Content-Type will automatically be set to \"application/x-www-form-urlencoded\" with the default charset.\n* Added ability to log request method and request path. Use \"given().log().method()\" and \"given().log().path()\" (issue 368).\n\nChangelog 2.3.4 (2014-10-06)\n-----------------------------\n* XmlXsdMatcher#matchesXsdInClasspath(..) now returns an instance of XmlXsdMatcher so that you can easily set a LSResourceResolver.\n* ObjectMapperResolver looks for third party libraries in both thread context- and ObjectMapperResolver classloader.\n* It's now possible to configure the way error messages are generated in REST Assured using the com.jayway.restassured.config.MatcherConfig. For example:\n    given().config(RestAssured.config().matcherConfig(new MatcherConfig(HAMCREST))). ..\n  will generate error messages that are close to original Hamcrest messages. The other option is REST_ASSURED which uses the default error messages generated by REST Assured.\n* Made it possible to configure whether to automatically append charset to content-type for all content types using the EncoderConfig (issue 355).\n* Deprecated \"appendDefaultContentCharsetToStreamingContentTypeIfUndefined\" in EncoderConfig. Just use \"appendDefaultContentCharsetToContentTypeIfUndefined\" instead.\n* Added ability to remove parameters from a request specification using the RequestSpecBuilder (thanks to Merkushev Kirill for the help).\n* Fully-qualified baseUris will no longer have to use explicit port 80 (issue 353)\n\nChangelog 2.3.3 (2014-08-29)\n----------------------------\n* Added CSRF (cross-site request forgery) support to form authentication config. For example:\n    given().\n            auth().form(\"John\", \"Doe\", formAuthConfig().withAutoDetectionOfCsrf()).\n    when().\n            get(\"/formAuthCsrf\");\n  This example tries to find the field specifying the CSRF token automatically but it's also possible to define it:\n    given(). auth().form(\"John\", \"Doe\", formAuthConfig().withCsrfFieldName(\"_csrf\")). ..\n  Note that REST Assured must always make an additional request to the server if enabling CSRF support.\n* com.jayway.restassured.internal.print.ResponsePrinter now returns the entire response (including headers, parameters etc) and not just the body.\n* Fixed so that all parameters are taken into account in RequestSpecBuilder when adding a multi-part with the controlName, contentBody, mimeType signature (issue 343).\n* Upgraded Spring version for RestAssuredMockMvc from version 4.0.5.RELEASE to 4.0.6.RELEASE.\n* Upgraded Spring Security optional dependency from version 3.2.0 to 3.2.5.RELEASE.\n* Upgraded faster Jackson optional dependency from version 2.4.0 to 2.4.2.\n* Upgraded commons-lang3 from version 3.1 to 3.3.2.\n* Upgraded Groovy from version 2.3.2 to 2.3.6.\n* Upgraded Http Client from version 4.2.6 to 4.3.5.\n* Made it possible to configure whether to automatically append charset to content-type for streaming content using the EncoderConfig (issue 345).\n* Support for request attributes in spring-mock-mvc (thanks to Jacek Kunicki for the pull request)\n* JsonSchemaValidator no longer parse URI's and URL's as JsonNode's by default since prevented resolving relative $ref in a parent schema. This is configurable using the JsonSchemaValidatorSettings (issue 346).\n* Fixed so that request and response is logged when \"enableLoggingOfRequestAndResponseIfValidationFails\" is defined when a response specifications fails to validate (issue 350).\n* Fixed so that multi-part file data uploading works for files without specifying an explicit filename when using HTTP Client version 4.3 and above (issue 351).\n\nChangelog 2.3.2 (2014-06-09)\n-----------------------------\n* Fixed an issue with logging of request and response using RestAssured.enableLoggingOfRequestAndResponseIfValidationFails() for certain validations.\n* Fixed issue with content-type validation when no content-type was sent from the server.\n* Updated Groovy to version 2.3.2\n* Widen the standaloneSetup builder method in Spring MVC module to accept a AbstractMockMvcBuilder (issue 321).\n* Added possibility to include parameters in JsonPath and XmlPath to prevent injection weaknesses (issue 328).\n* Added \"matchesXsdFromClasspath\" to com.jayway.restassured.matcher.RestAssuredMatchers and com.jayway.restassured.module.mockmvc.matcher.RestAssuredMockMvcMatchers (issue 330).\n* Added \"matchesDtdFromClasspath\" to com.jayway.restassured.matcher.RestAssuredMatchers and com.jayway.restassured.module.mockmvc.matcher.RestAssuredMockMvcMatchers (issue 331).\n* Upgraded Spring MVC module to depend on Spring 4.0.5. (issue 335)\n* Added possibility to use \"no wrap\" for response streams of type gzdeflate (RFC 1951) used by e.g. PHP. Usage example: given().config(config().decoderConfig(decoderConfig().useNoWrapForInflateDecoding(true))).when().get(\"/x\"). (issue 327).\n* basePath can now be set in the RequestSpecification as well as RequestSpecBuilder (issue 325).\n* Static usage of \"enableLoggingOfRequestAndResponseIfValidationFails\" can now be assigned after static request and response configurations (issue 323).\n* Multipart parameters are now logged when logging the request specification (issue 144).\n* Added ability to get multipart parameters from com.jayway.restassured.specification.FilterableRequestSpecification using the \"getMultiPartParams\" method.\n* Added \"replaceFiltersWith\" method to RestAssured which makes it possible to replace statically defined filters (issue 174).\n* Added support for specifying arguments to root or append paths at a later stage, for example:\n    when().\n         get(\"/jsonStore\").\n    then().\n         root(\"store.%s\", withArgs(\"book\")).\n         body(\"category.size()\", equalTo(4)).\n         appendRoot(\"%s.%s\", withArgs(\"author\")).\n         body(withArgs(\"size()\"), equalTo(4)); // The last argument defined in \"appendRoot\" is applied here\n (issue 267).\n* Added ability to log the request and response generated by the form authentication scheme, for example:\n    given().\n            auth().form(\"John\", \"Doe\", springSecurity().withLoggingEnabled()).\n    when().\n            get(\"/formAuth\").\n    then().\n            statusCode(200).\n            body(equalTo(\"OK\"));\n  (issue 274).\n* Fixed so that CharsetExtractor no longer fails to extract the charset when more than one key=value pair present in the content-type header (issue 337).\n* Updated json-schema-validator module to use version 2.2.5 of FGE's json schema validator project.\n* Updated commons-lang3 dependency to version 3.3.2.\n* Added static compilation to inner class PathType to avoid IncompatibleClassChangeError because of a bug in Groovy (GROOVY-6080) (issue 336).\n* Added better proxy support. For example:\n    given().proxy(\"localhost\", 8888). ..\n  or for all requests:\n    RestAssured.proxy(\"localhost\", 8888);\n    RestAssured.proxy = host(\"localhost\").withPort(8888); // \"host\" is statically imported from com.jayway.restassured.specification.ProxySpecification.\n  or using a RequestSpecification:\n    RequestSpecification specification = new RequestSpecBuilder().setProxy(\"localhost\").build();\n    given().spec(specification). ..\n  The proxy details are also visible in the request log and are available from the com.jayway.restassured.specification.FilterableRequestSpecification.\n  (issue 214).\n\nChangelog 2.3.1 (2014-03-31)\n-----------------------------\n* Fixed a bug where fully-qualified URLs showed up as localhost in the request path in logging (issue 304).\n* Fixed a NPE when parsing no-value cookies in HTTP response (issue 306).\n* Query params and values now splits the '=' with max count 2 (issue 305).\n* Added support for HttpOnly cookies (thanks to Luke Bunselmeyer for pull request).\n* Added support for specifying properties in XmlConfig and XmlPathConfig.\n* Updated json-schema-validator module to use version 2.1.8 of FGE's json schema validator project.\n* Fixed bug where query parameters with an empty value are no longer treated as query parameters without a value (issue 314).\n* Fixed issue where response could not be created using the ResponseBuilder if using the given-when-then syntax.\n* It's now possible to supply a resource resolver when matching XSD. For example:\n    get(\"/x\").then().body(matchesXsd(load(\"main.xsd\")).using(new ClasspathResourceResolver()));\n  (issue 317).\n* Upgraded Spring MVC module to depend on Spring 4.0.3.RELEASE.\n* Fixed a bug with JsonPath that prevented parsing of JSON attributes starting with a number (issue 318).\n* Added appendRootPath method to ResponseSpecBuilder\n* Added noRootPath method to ResponseSpecBuilder\n* Added detachRoot method to ResponseSpecification that allows you to detach parts of the root paths (issue 319).\n* Added detachRootPath method to ResponseSpecBuilder.\n* \"appendRoot\" method in ResponseSpecification can now be used even though no root path has previously been set.\n* Added a RestAssuredMockMvc.standaloneSetup(DefaultMockMvcBuilder) method in order to allow more flexible customization of the spring context (thanks to Martin Ahrer for the pull request) (issue 321).\n* Added static \"with\" method to RestAssuredMockMvc that can be used instead of \"given\" if needed (issue 320).\n* Added support for logging the request specification or response specification if the test validation fails. For example:\n    given().log().ifValidationFails(). ..\n  will log the request only if REST Assured's validations fail. It's also applicable for the response. This works in both vanilla REST Assured and REST Assured Mock Mvc (issue 212).\n* Added support for logging both the request specification and response specification if the test validation fails. For example:\n    RestAssured.config = RestAssured.config().logConfig(logConfig().enableLoggingOfRequestAndResponseIfValidationFails());\n  There's also a shortcut for this:\n    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n  This has also been implemented in RestAssuredMockMvc (issue 212).\n* Fixed so that pretty logging of the response body doesn't change the body returned to the matchers.\n* Fixed so that it's possible to log data with charset binary.\n* Getting a String from the response now stores the content as a byte-array internally to avoid messing up binary content.\n* Added tagsoup as transitive dependency to XmlPath so that it's easier to get started with HTML parsing (issue 311).\n\nChangelog 2.3.0 (2014-01-23)\n-----------------------------\n* Fixed an IllegalArgumentException with reusable response specifications when defined before other body expectations when using the given-when-then API.\n* Non-backward compatible change: The json-path module accidentally depended on faster-jackson, jackson, gson and simple-json and brought then in as transitive dependencies. This has now been resolved which means that these dependencies are optional as intended (issue 297).\n* Fixed serious issues with SSL config and certificate authentication. A TrustStore as accidentally used as a KeyStore which caused errors like: \"sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\".\n* Added support for adding a SSLSocketFactory to SSLConfig (issue 170).\n* RestAssuredMockMvc is now using \"/\" as default basePath so that you can use non-arg HTTP methods (such as get()) without first defining a basePath (issue 296).\n* Add static \"when\" method to RestAssuredMockMvc (issue 295).\n* Added support for specifying a trust store, either using the DSL using given().trustStore(..), or statically using RestAssured.trustStore(..) (issue 299).\n* Added support for relaxed https validation. This means that you'll trust all hosts regardless if the SSL certificate is invalid. By using this you don't need to specify a keystore or trust store. For example:\n    given().relaxedHTTPSValidation().when().get(\"https://some-url-with-invalid-cert.com\"). ..\n  You can also define it statically for all requests:\n    RestAssured.useRelaxedHTTPValidation();\n  (issue 298)\n* Added support for authentication in RestAssuredMockMvc. You can now do e.g. given().auth().principal(..). Some auth methods require Spring Security to be on the classpath (optional). It's also possible to defined authentication statically:\n    RestAssuredMockMvc.authentication = principal(\"username\", \"password\");\n  where the \"principal\" method is statically imported from RestAssuredMockMvc. It's also possible to define an authentication scheme in a request builder:\n    MockMvcRequestSpecification spec = new MockMvcRequestSpecBuilder.setAuth(principal(\"username\", \"password\")).build();\n* Non-backward compatible change: Statically defined configuration (such as RestAssured.config = ..) is now automatically applied to RequestSpecBuilders in both RestAssured and RestAssuredMockMvc. To revert to previous behavior you can do\n    new RequestSpecBuilder.config(newConfig()). ..\n* Updated Groovy dependency to 2.2.1.\n* MockMvcResponse now allows you to extract the MvcResult and MockHttpServletResponse (issue 294).\n* Added support for using parts of the response when verifying the response. For example consider the following JSON document returned from service x:\n    { \"userId\" : \"some-id\", \"href\" : \"http://localhost:8080/some-id\" }\n  You may notice that the \"href\" attribute ends with the value of the \"userId\" attribute. If we want to verify this we can implement a com.jayway.restassured.matcher.ResponseAwareMatcher and use it like this:\n    get(\"/x\").then().body(\"href\", new ResponseAwareMatcher<Response>() {\n                                        public Matcher<?> matcher(Response response) {\n                                              return equalTo(\"http://localhost:8080/\" + response.path(\"userId\"));\n                                        }\n                                  });\n  There are some predefined matchers that you can use defined in the com.jayway.restassured.matcher.RestAssuredMatchers (or com.jayway.restassured.module.mockmvc.matcher.RestAssuredMockMvcMatchers if using the spring-mock-mvc module). For example:\n    get(\"/x\").then().body(\"href\", endsWithPath(\"userId\"));\n  (issue 288).\n* Fixed NPE in RestAssuredMockMvc when path is null.\n\nChangelog 2.2.0 (2014-01-08)\n-----------------------------\n* Fixed an issue with content-type identification when passing in content-type header manually using a header.\n* Header values supplied to request specification using a java.util.Map are now serialized if needed.\n* Path parameters can now be used in the entire path, not just between two slashes (issue 275, 292).\n* Added ability to set logging from the RequestSpecBuilder, for example new RequestSpecBuilder().log(ALL).build();\n* Response specifications are now validated correctly when passed to spec or specification method after then is called. For example:\n    ResponseSpecification specification = new ResponseSpecBuilder().expectStatusCode(200).expectBody(\"greeting\", equalTo(\"Greetings John Doe\")).build();\n    given().\n            param(\"firstName\", \"John\").\n            param(\"lastName\", \"Doe\").\n    when().\n            get(\"/greet\").\n    then().\n            spec(specification);\n* REST Assured now supports OAuth2 authentication using the Scribe framework (https://github.com/fernandezpablo85/scribe-java). Big thanks to Waseem Shaik for all the help!\n* Non-backward compatible change: REST Assured now use the Scribe framework (https://github.com/fernandezpablo85/scribe-java) instead of Signpost for oauth1 authentication so you need to update your classpath dependencies. Please read the release notes for more info.\n* Added Spring Mock Mvc (Spring test) module which let's you unit test Spring MVC controllers using the REST Assured DSL. Depend on artifact id \"spring-mock-mvc\" using group id \"com.jayway.restassured\" from Maven to use it. Then use RestAssuredMockMvc to get started.\n* Fixed so that RestAssured.given(requestSpecification) now merges the static request specification correctly.\n\nChangelog 2.1.0 (2013-12-09)\n-----------------------------\n* Changed the way REST Assured finds key stores in classpath. It now uses thread context classloader to resolve the files instead of the class KeyStoreSpecImpl classloader.\n  This means means that you're able to do e.g. \"RestAssured.keystore(\"keystore.jks\", \"test1234\")\" where you before used \"RestAssured.keystore(\"/keystore.jks\", \"test1234\")\".\n* java.util.UUID is now serialized as a String (issue 285).\n* Non-backward compatible change: It's no longer possible to assert that an empty response object has a path that is null, for example let's say that the \"/statusCode409WithNoBody\" resource returns an empty body:\n    expect().contentType(ContentType.JSON).body(\"error\", equalTo(null)).when().get(\"/statusCode409WithNoBody\"); // This will now throw assertion error\n* Added support to for mixing text and path assertions. For example:\n    get(\"/lotto\").then().body(containsString(\"\\\"numbers\\\":[52\")).and().body(\"lotto.winners.winnerId\", hasItems(23, 54));\n* Non-backward compatible change: Changed default response content charset from ISO-8859-1 to system default charset. The reason for this that most users would probably expect the system default charset. To change the behavior use the DecoderConfig (issue 283).\n* Non-backward compatible change: Changed default request content charset from ISO-8859-1 to system default charset. The reason for this that most users would probably expect the system default charset. To change the behavior use the EncoderConfig (issue 283).\n* REST Assured now supports JSON schema validation (http://json-schema.org/). To allow for this you need to add the json schema validator module to classpath. Once you done that you should statically import \"com.jayway.restassured.module.jsv.JsonSchemaValidator.*\" and then you can do e.g.\n    get(\"/products\").then().assertThat().body(matchesJsonSchemaInClasspath(\"products-schema.json\"));\n  (issue 284)\n* Non-backward compatible change: Removed the following method from the RestAssured API: \"certificate(String certURL, String password, String certType, int port, KeystoreProvider trustStoreProvider, boolean checkServerHostname)\" and \"certificate(String certURL, String password, String certType, int port, KeystoreProvider trustStoreProvider)\".\n* Deprecated the following method from the RestAssured API: \"certificate(String certURL, String password, String certType, int port)\", \"certificate(String certURL, String password, String certType, int port, KeystoreProvider trustStoreProvider, boolean checkServerHostname)\". It's replaced by the \"certificate(String certURL, String password, CertificateAuthSettings certificateAuthSettings)\" method. For example:\n    RestAssured.authentication = certificate(certUrl, password, certAuthSettings().with().port(435));\n* Non-backward compatible change: Removed the following method from the AuthenticationSpecification API: \"certificate(String certURL, String password, String certType, int port, KeystoreProvider trustStoreProvider, boolean checkServerHostname)\" and \"certificate(String certURL, String password, String certType, int port, KeystoreProvider trustStoreProvider)\".\n* Deprecated the following method from the AuthenticationSpecification API: \"certificate(String certURL, String password, String certType, int port)\". It's replaced by the \"certificate(String certURL, String password, CertificateAuthSettings certificateAuthSettings)\" method. For example:\n    given().auth().certificate(certUrl, password, certAuthSettings().with().port(435)). ..\n* Added support for disabling hostname verification by disabling this using the CertificateAuthSettings:\n    given().auth().certificate(certUrl, password, certAuthSettings().with().allowAllHostnames(). ..\n  (issue 182)\n* Non-backward compatible change: Removed static method \"RestAssured.keystore()\". You can now get the keystore settings from the SSL configuration instead.\n* Non-backward compatible change: Removed the com.jayway.restassured.authentication.KeyStoreProvider interface. The KeyStoreProvider was actually NOT used to create a KeyStore but rather a trust store. To specify the trust store after this change use the SSLConfig or certificate authentication.\n* Non-backward compatible change: All keystore related methods in the RestAssured API now returns void instead of KeyStoreSpec.\n* You can now get the current REST Assured configuration by calling RestAssured.config()\n* Non-backward compatible change: Removed method \"RestAssured.keyStore()\". If you want to get the configured \"keystore\" configuration you can now call \"RestAssured.config().getSSLConfig();\".\n\nChangelog 2.0.1 (2013-11-29)\n-----------------------------\n* Fixed an issue which prevented extracting data from a response after body assertions had been used.\n\nChangelog 2.0.0 (2013-11-29)\n-----------------------------\n* Fixed a regression bug where Rest Assured didn't respected trailing slashes in URL's (issue 276).\n* Fixed so that the path method in the Response can be invoked multiple times, for example:\n    Response response = get(\"/jsonStore\");\n    float minPrice = response.path(\"store.book.price.min()\");\n    float maxPrice = response.path(\"store.book.price.max()\");\n  (issue 280)\n* Fixed so that JsonPath and XmlPath and path expressions work after the \"prettyPrint\" and \"print\" methods have been called on a Response instance.\n* Added support for performing requests with URI's and URL's, for example:\n    URI myUri = new URI(..)\n    Response response = get(myUri);\n  (issue 278)\n* Added possibility to call request methods without any parameters. This is useful if you want to call the root resource. For example:\n    RestAssured.baseURI = \"http://localhost:8080/hello\";\n    String y = get().path(\"x.y\");\n  (issue 279)\n* It's now possible to call asString() on a Response object after asByteArray() has been called and vice versa.\n* given(requestSpecification) now returns the RequestSpecification instead of RequestSender\n* Added support for given-when-then syntax, for example:\n      given().\n              param(\"firstName\", \"John\").\n              param(\"lastName\", \"Doe\").\n      when().\n              get(\"/greet\").\n      then().\n              statusCode(200).\n              body(\"greeting\", equalTo(\"Greetings John Doe\"));\n* Added peek and prettyPeek support to com.jayway.restassured.response.Response which allows you to print the response to system out but continue working with the Response instance afterwards.\n* Fixed a bug with RequestSpecBuilder that merged two too many cookies and headers when defined statically (issue 281).\n* Fixed a bug with ResponseSpecBuilder that didn't merge certain properties correctly.\n* Added static method \"when\" to com.jayway.restassured.RestAssured that allows you to write specifications without use of parameters, headers etc. For example:\n      when().\n             get(\"/x\").\n      then().\n             body(\"x.y.z1\", equalTo(\"Z1\")).\n             body(\"x.y.z2\", equalTo(\"Z2\"));\n* Added support for arguments when calling path(\"..\") on a Response object, for example:\n      String z = get(\"/x\").path(\"x.y.%s\", \"z\");\n\nChangelog 1.9.0 (2013-11-25)\n-----------------------------\n* It's now possible to validate if the ResponseSpecification is fulfilled by calling the validate method and passing in a Response object (thanks to Ian Forsey for the patch).\n* Getting cookies as a Map now returns the last value returned instead of the first one if multiple cookies with the same name are sent from the server to comply with the HTTP specification (thanks to DeviKiran Setti for the patch) (issue 257).\n* Fixed an issue with merging session ids when merging request specifications.\n* Fixed an issue with merging baseUri and port when merging request specifications.\n* Added ability to set base uri on the RequestSpecBuilder (issue 252).\n* CookieMatcher initialized cookie version with -1 if value was \"0\" (thanks to Sergey Podgurskiy for the patch)\n* Fixed stackoverflow in certificate authentication (issue 262) (thanks to douglasdedo for the patch)\n* It's now possible to configure the HTTP Client instance to be used by REST Assured when making requests. Use the HttpClientConfig and specify a http client factory if you want to do this. This makes it possible for some advanced configuration not exposed by the REST Assured API (issue 203).\n* Request filters now expose the http client instance which makes it possible to alter some advanced settings not exposed by REST Assured.\n* The xmlPath method in the REST Assured response (com.jayway.restassured.response.Response) now accepts a CompatibilityMode. This means that it's easy to get values from HTML responses:\n      String pageTitle = get(\"/index.html\").xmlPath(CompatibilityMode.HTML).getString(\"html.head.title\");\n  (issue 258)\n* Fixed a NPE when trying to parse an empty JSON response (issue 260).\n* Added ability to set base uri from RequestSpecBuilder (issue 252).\n* Fixed a bug where RequestSpecification was not checked against the correct type when merging request specifications.\n* Fixed a bug with pretty printing that sometimes didn't take user supplied value into account.\n* It's now possible to configure content decoders. Before GZIP and DEFLATE were always activated and there was no way to disable them. It's now possible to configure which to use, for example to remove GZIP but retain DEFLATE you can do the following:\n\t  given().config(newConfig().decoderConfig(decoderConfig().contentDecoders(DEFLATE))). ..\n  (issue 77)\n* The http client instance can now be reused between REST Assured requests. By default REST Assured creates a new instance for each \"given\" statement. To configure reuse do the following:\n      RestAssured.config = newConfig().httpClient(httpClientConfig().reuseHttpClientInstance());\n* Added support for appending a root path to an existing root path using \"appendRoot\" on the RequestSpecification, see javadoc for more info. (issue 248).\n* Added support for resetting an already defined root by using \"noRoot\" on the RequestSpecification, see javadoc for more info. (issue 248).\n* Added the \"given(requestSpecification)\" method to the RestAssured API (issue 56).\n* Added support for body expectations with empty path and only arguments, for example expect().root(\"x.y.%s\").body(withArgs(\"z\"), equalTo(\"w\")). .. (issue 265)\n* Added support for body expectations without any arguments using withNoArgs() or withNoArguments, for example:\n      expect().\n               root(\"store.%s\", withArgs(\"book\")).\n               body(\"category.size()\", equalTo(4)).\n               appendRoot(\"%s.%s\", withArgs(\"author\", \"size()\")).\n               body(withNoArgs(), equalTo(4)).\n      when().\n               get(\"/jsonStore\");\n  (issue 266)\n* Added method \"htmlPath\" to REST Assured Response which allows you to easily get values from an HTML page:\n      String pageTitle = get(\"/index.html\").htmlPath().getString(\"html.head.title\");\n  (issue 268)\n* Fixed an issue where a static preemptive basic authentication couldn't be overridden by instance authentication (issue 233).\n* Fixed an issue where multi-valued query parameters defined in the URL now works. For example get(\"/x?y=1&y=2\") (issue 169, 219).\n* Improved request logging so that query parameters are included in the complete path.\n* Allow URLs that contains double slashes, for example get(\"/x/y/http://localhost:8080\")\n* URL encoding (and disabling of URL encoding) has been completely re-written and will now work better (issue 181).\n* Fixed issues that made an incorrect port being used under certain conditions (issue 217).\n* Fixed so that Hamcrest's hasXPath() and not() can be combined (issue 215).\n* Fixed a bug in XmlPathConfig when setting charset.\n* It's now possible to use the Hamcrest XPath matcher with namespaces if XmlConfig in REST Assured is configured to be namespace aware, e.g.\n      given().\n              config(newConfig().xmlConfig(xmlConfig().with().namespaceAware(true))).\n      expect().\n              body(hasXPath(\"/db:package-database\", namespaceContext)).\n      when().\n              get(\"/package-db-xml\");\n  (issue 39)\n* Added possibility to add features to the javax.xml.parsers.DocumentBuilderFactory instance used by REST Assured when parsing XML for XPath validation. Use the XmlConfig to add achieve this.\n* Namespaces are now included when pretty printing or logging XML.\n* Added namespace support for body expectations if the namespace is declared correctly, for example given the following XML:\n      <foo xmlns:ns=\"http://localhost/\">\n         <bar>sudo </bar>\n         <ns:bar>make me a sandwich!</ns:bar>\n      </foo>\n  you can verify it like this:\n      given().\n              config(newConfig().xmlConfig(xmlConfig().declareNamespace(\"ns\", \"http://localhost/\"))).\n      expect().\n              body(\"bar.text()\", equalTo(\"sudo make me a sandwich!\")).\n              body(\":bar.text()\", equalTo(\"sudo \")).\n              body(\"ns:bar.text()\", equalTo(\"make me a sandwich!\")).\n      when().\n              get(\"/namespace-example\");\n  (issue 39)\n* XmlPath returned from REST Assured Response now takes features, namespaces, charset etc into account.\n* XmlPathConfig supports declaring namespaces which means that XmlPath is now namespace aware if needed.\n* Added ability to supply an XmlPathConfig instance when using the xmlPath() method from a REST Assured Response object. For example :\n      XmlPath xmlPath = get(\"/namespace-example\").xmlPath(xmlPathConfig().with().declaredNamespace(\"ns\", \"http://localhost/\"));\n* Non-backward compatible change: RestAssuredConfig no longer accepts a JsonPathConfig, it now uses a JsonConfig object instead.\n* Added ability to supply a JsonPathConfig instance when using the jsonPath() method from a REST Assured Response object. For example :\n      JsonPath jsonPath = get(\"/namespace-example\").jsonPath(jsonPathConfig().with().numberReturnType(BIG_DECIMAL));\n* Added peek and prettyPeek support to XmlPath which allows you to print the content to system out but continue working with XmlPath afterwards (issue 271).\n* Added peek and prettyPeek support to JsonPath which allows you to print the content to system out but continue working with JsonPath afterwards (issue 272).\n* FormAuthFilter is now added first to the filter chain.\n* Added hasValue(..) method to com.jayway.restassured.filter.FilterContext.\n* Added support for sessions by applying the com.jayway.restassured.filter.session.SessionFilter, for example:\n      SessionFilter sessionFilter = new SessionFilter();\n\n      given().\n              auth().form(\"John\", \"Doe\").\n              filter(sessionFilter).\n      expect().\n              statusCode(200).\n      when().\n              get(\"/formAuth\");\n\n      given().\n              filter(sessionFilter). // Reuse the same session filter instance to automatically apply the session id from the previous response\n      expect().\n              statusCode(200).\n      when().\n              get(\"/formAuth\");\n  (issue 229, 273)\n* Upgraded to Groovy 2.2.0\n* Upgraded to Http Client 4.2.6\n* Upgraded to Hamcrest 1.3 (issue 186)\n\nChangelog 1.8.1 (2013-06-07)\n-----------------------------\n* It's now possible to configure the HTTP Multipart mode when sending multi-parts. Configure this in the REST Assured HttpClientConfig (issue 223).\n* Non-backward compatible change: Default multi-part mode for multi-part uploads is changed from Browser Compatibility mode to Strict mode.\n* Fixed so that getting a single detailed cookie from the Response really works.\n* You can now specify a charset more easily when using com.jayway.restassured.http.Charset. For example Charset.JSON.withCharset(\"UTF-8\") (issue 228).\n* It's now possible to specify a truststore when doing certificate authentication (thanks to Ian Forsey for the help) (issue 205). Usage:\n  given().auth().certificate(\"file:///my/project/src/test/resources/soapui.p12\",  \"password\", \"pkcs12\", 8443, truststoreProvider)\n* Pretty printing in JsonPath now works for json elements represented as a Java Map (issue 218).\n* Reserved Groovy keyword \"properties\" is automatically escaped in JsonPath (issue 231).\n* Response body logger now uses \": \" instead of \"=\" when logging headers to mimic HTTP specification (issue 227).\n* Added com.jayway.restassured.builder.MultiPartSpecBuilder that can be used to build more advanced multi-part requests in a fluent way. This also allows you to specify charset for strings in multi-part uploads which was previously not possible (issue 239).\n* Added support for setting features in XmlPath using the XmlPathConfig. This can be used to for example disabling external DTD loading. There's also a shortcut for this by using the XmlPathConfig#disableLoadingOfExternalDtd() method (issue 237).\n\nChangelog 1.8.0 (2013-04-01)\n-----------------------------\n* Added support for settings a custom Jackson 2 object factory to JsonPath\n* Expecting content type to be a pre-defined content type (such as ContentType.XML) now accepts many kinds of different variations (thanks to exsuscito for the help) (issue 213).\n* Upgraded to Groovy 2.1.2\n* It's now possible to configure JsonPath with various settings so as returning a BigDecimal instead of floats and doubles. You can do this either statically using:\n\t  JsonPath.config = new JsonPathConfig(..);\n  or per instance:\n\t  new JsonPath().using(new JsonPathConfig(..)).get(..);\n* It's now possible to configure REST Assured to return BigDecimal instead of floats and doubles. You can do this either statically using:\n\t  RestAssured.config = new RestAssuredConfig().jsonPathConfig(new JsonPathConfig(..));\n* Added support for automatically converting a String to BigDecimal in JsonPath\n* Non-backward compatible change: com.jayway.restassured.exception.ParsePathException was renamed to com.jayway.restassured.exception.PathException.\n* Non-backward compatible change: JsonPath now throws JsonPathException instead of Groovy's JsonException when parsing invalid JSON documents\n* Non-backward compatible change: XmlPath now throws XmlPathException instead of PathException when parsing invalid XML documents\n* Non-backward compatible change: ObjectMapperDeserializationContext#getResponse() has been renamed to \"getDataToDeserialize()\". It no longer returns an instance of ResponseBodyData, it now returns an instance of \"DataToDeserialize\".\n* Improved error messages in XmlPath\n* Added getPath method to Node and NodeChildren elements in XmlPath which allows you get a subpath using the GPath notation.\n* Improved speed of JsonPath when parsing multiple values\n* JsonPath and XmlPath has been extracted to their own projects. This means that you can use them with the need to depend on REST Assured.\n* Major improvements to XmlPath\n* Possible to configure JsonPath and XmlPath both per instance and statically.\n\nChangelog 1.7.2 (2012-12-15)\n-----------------------------\n* StreamVerifier prints better error message when the response content-type is not recognized.\n* REST Assured now prints all validation errors in a single test run (issue 207).\n* Throws IllegalStateException when incorrectly trying to configure logging on a ResponseSpecBuilder instance after it has been built.\n\nChangelog 1.7.1 (2012-11-11)\n-----------------------------\n* Added methods object variants of setBody and setContent to RequestSpecBuilder.\n* Fixed so that form authentication can be added from RequestSpecBuilder.\n* You can now add non-string values in form parameters (such as primitives and enums) (issue 201).\n* Fixed a bug that accidentally used the content-type as character encoding on object serialization (issue 204).\n\nChangelog 1.7 (2012-10-11)\n---------------------------\n* Fixed an issue with XmlPath when parsing xml attributes and using findAll.\n* REST Assured now (finally) builds from Maven 3\n* Explicitly registered custom parsers have precedence over default parsers (issue 183).\n* It's now possible to manually set the content-type header, e.g. header(\"content-type\", \"something\") now works (issue 155).\n* It's now possible to create custom object mappers and configure existing ones (issue 122).\n* It's now possible to define a default object mapper using the com.jayway.restassured.config.ObjectMapperConfig (issue 123).\n* ObjectMapper.JACKSON, ObjectMapper.GSON and ObjectMapper.JAXB have been deprecated. Use the corresponding types in enum com.jayway.restassured.internal.mapper.ObjectMapperType instead.\n* Added object mapping support for Jackson 2.0 (issue 189).\n* Fixed an issue with the com.jayway.restassured.builder.ResponseBuilder that failed to clone the ResponseParserRegistrar.\n* JSON path with digits separated by dots can now be processed by JsonPath (issue 195).\n* Default filters accumulate and are not merged when reusing request specs (issue 197).\n* Fixed so that it's possible to download large (chunked) files again. This was broken in the last release, 1.6.2. (issue 194).\n* Added a ConnectionConfig (com.jayway.restassured.config.ConnectionConfig) object that allows you to modify if REST Assured should drop idle connections after each response. Enable connection dropping if you need to make several small and fast requests (e.g. stress testing).\n* Path parameters are no longer url encoded if REST Assured url encoding is disabled (issue 181).\n* Base path is now shown correctly in request logging when path is a fully qualified URL (issue 145).\n* Updated HTTP Client version to 4.2.1.\n* Added support for PATCH and OPTIONS requests (issue 164).\n\nChangelog 1.6.2 (2012-05-28)\n-----------------------------\n* You can now use all kinds of Collection instances (and not only List's as in the previous versions) as multi-value parameters (issue 165).\n* The specified content-type header is no longer ignored when specifying binary request body content (issue 167).\n* REST Assured now closes the HTTP Client connection after each invocation (issue 168).\n* JsonPath can now parse JSON documents with attribute names including dots and minus at the same time, e.g.\n  \t{ \"a-b\"  : \"minus\" , \"a.b\" : \"dot\"  , \"a.b-c\" : \"both\"  }\"\n  we can now get the result from \"a.b-c\" using:\n        from(json).get(\"'a.b-c'\"); // Returns \"both\"\n  (issue 172).\n* Fixed a NPE when getting the session id when no cookies were defined (issue 173).\n* You can now serialize Java objects to JSON and XML in multi-part bodies. E.g.\n       given().multiPart(\"controlName\", myJavaObject, \"application/json\"). ..\n  will serialize \"myJavaObject\" to a JSON string automatically (issue 166).\n* Fixed a bug that prevented using a single named path parameter multiple times. I.e. this will now work:\n\tgiven().\n                pathParam(\"firstName\", \"John\").\n        expect().\n                body(\"fullName\", equalTo(\"John John\")).\n        when().\n                get(\"/{firstName}/{firstName}\");\n  (issue 169).\n* Fixed an issue with RestAssured.urlEncodingEnabled which didn't take request parameters into account when url encoding was disabled (issue 175).\n\nChangelog 1.6.1 (2012-04-05)\n-----------------------------\n* Default encoder is set to binary instead of url encoded. This means that when setting a binary body with an (by REST Assured) unrecognized content-type it will automatically be treated as an octet stream.\n* Closed input stream when getting response body as byte-array (issue 163)\n* Improved session support. You can now define a session id value in the DSL:\n    given().sessionId(\"1234\"). ..\n  or for each request:\n    RestAssured.sessionId = \"1234\";\n  By default the session id name is JSESSIONID but you can change it using the SessionConfig:\n    RestAssured.config = newConfig().sessionConfig(new SessionConfig().sessionIdName(\"phpsessionid\"));\n  RequestSpecBuilder has been improved to support session id's as well (issue 28).\n* Added methods to the RequestSpecBuilder to enable adding cookies of type com.jayway.restassured.response.Cookie and com.jayway.restassured.response.Cookies.\n* JRE proxy settings are now applied by default (thanks to Wolfram Kroll for the patch).\n\nChangelog 1.6 (2012-02-18)\n---------------------------\n* Forked HTTPBuilder. This means that a lot of workarounds that had to be made in the past can be removed in the future. It also means that the Groovy version is updated to version 1.8 and HTML parsing is greatly improved as well as many other minor changes and improvements (issue 112).\n* The HTTP Delete method now supports a method body\n* PUT request now work for multi part form data uploading\n* Added support for pretty-printing the request and response body when logging if content-type is XML, JSON or HTML. Pretty-printing is enabled by default but it could be disabled either by:\n\tRestAssured.config = config().logConfig(logConfig().enablePrettyPrinting(false));\n  or using the DSL:\n\texpect().log.all(false). ..\n  You can also pretty-print the response from the Response object:\n\tget(\"/some-xml\").prettyPrint();\n  (issue 140)\n* Fixed a serious issue with content-type validation, it was actually ignored in the previous versions (issue 146).\n* XmlPath supports prettifying and pretty-printing XML and HTML, for example:\n\tString prettyXml = with(someXml).prettify(); // Return a prettified XML string.\n  or print the XML to System.out and then return it:\n        String prettyXml = with(someXml).prettyPrint(); // Prints and returns a prettified XML string.\n  \"with\" is statically imported from com.jayway.restassured.path.xml.XmlPath (issue 147).\n* JsonPath supports prettifying and pretty-printing JSON documents, for example:\n\tString prettyJson = with(someJson).prettify(); // Return a prettified JSON string.\n  or print the JSON to System.out and then return it:\n        String prettyJson = with(someJson).prettyPrint(); // Prints and returns a prettified JSON string.\n  \"with\" is statically imported from com.jayway.restassured.path.json.JsonPath (issue 147).\n* REST Assured now automatically detects content-types ending with +xml, +json and +html (for example application/something+json) and parses the content with the corresponding parser. This means that you don't need to register custom parsers for these kind of content-types (issue 142).\n* Added support for using \"bracket notation\" for parsing unnamed JSON root arrays. For example consider the following JSON document:\n\t[{\"email\":\"name1@mail.com\",\"alias\":\"name one\",\"phone\":\"3456789\"},\n         {\"email\":\"name2@mail.com\",\"alias\":\"name two\",\"phone\":\"1234567\"},\n\t {\"email\":\"name3@mail.com\",\"alias\":\"name three\",\"phone\":\"2345678\"}]\n  and let's say you want to get the first e-mail. You can now do like this:\n\tString email = from(jsonDocument).getString(\"[0].email\");\n  (issue 148).\n* Response cookies are no longer automatically set in subsequent requests by default. To re-enable this set the \"http.protocol.cookie-policy\" parameter in the HttpClientConfig to CookiePolicy.RFC_2109 (issue 149).\n* Implemented support for no-value parameters, for example:\n\tgiven().queryParam(\"someParameterName\").when().get(\"/something\");\n  This works for both \"request parameters\", query parameters and form parameters. (issue 143)\n* Added support for getting integer JSON types without escaping, e.g. {\"0\":\"value\"} can now be parsed as ..body(\"0\", equalTo(\"value\"). (issue 150)\n* REST Assured now takes the charset into consideration for both the request and the response. E.g.\n\tgiven().contentType(\"application/xml; charset=US-ASCII\").and().body(\"my body\"). .. will encode the body as US-ASCII.\n  you can also specify the default charset for each request:\n\tRestAssured.config = newConfig().encoderConfig(encoderConfig().defaultContentCharset(\"US-ASCII\"));\n  (issue 132)\n* Default content encoding charset has been changed from UTF-8 to ISO-8859-1 to comply with the RFC 2616. To change this use the EncoderConfig, e.g.\n\tRestAssured.config = newConfig().encoderConfig(encoderConfig().defaultContentCharset(\"UTF-8\"));\n  You can also specify the default query parameter charset.\n* Default decoding content charset has been changed from platform default to ISO-8859-1 to comply with the RFC 2616. To change this use the DecoderConfig, e.g.\n\tRestAssured.config = newConfig().decoderConfig(decoderConfig().defaultContentCharset(\"UTF-8\"));\n* Fixed a bug when setting content type to JSON and using a byte array as body (issue 156).\n* Multi-headers and multi-cookie cookie parsing now uses ignore-case equals to identify the entity.\n* Upgraded to Hamcrest 1.2.1 and changed the ResponseSpecification to allow for more flexible argument matchers.\n* Fixed a bug with the cookie parsing which couldn't deal with cookie values including an equal character (issue 159).\n* Added support for argument lists in root and rootPath methods in the response specification (issue 117).\n* Request logging filter now logs base path and base uri (issue 145).\n* Added method getCompleteRequestPath to com.jayway.restassured.filter.FilterContext. This method provides the fully-qualified URL including scheme and port number to the request path.\n* Fixed content encoding for content types ending with +xml, +json and +html to automatically be encoded using the correct encoder methods (issue 160).\n\nChangelog 1.5 (2011-12-20)\n---------------------------\n* Added methods \"noFilters\" and \"noFiltersOfType\" to RequestSpecification to allow for removal of filters. This is useful when specifying a default filter statically (e.g. a custom authentication filter) but you need to remove it in a Filter implementation in order to make requests without this filter.\n* Improved JsonPath to automatically convert e.g. ints to Strings if explicitly requested.\n* Fixed an issue with detailed cookie parsing that prevent the \"secured\" attribute to be parsed correctly.\n* Fixed a bug that failed to apply the root path for multi-body expectations, e.g this will now work:\n   expect().\n          root(\"store.book\").\n          body(\n             \"category.size()\", equalTo(4),\n             \"author.size()\", equalTo(4)\n          ).\n   when().\n          get(\"/jsonStore\");\n  (issue 135)\n* Fixed a bug with automatic port detection for certain base URI's.\n* Improved merging of baseUri, basePath and path. E.g. if the baseUri ends with slash and the path starts with slash one of the slashes are automatically removed (issue 134).\n* java.util.Locale will never be serialized to JSON/XML when provided in as a parameter object\n* Fixed an issue with PUT method duplicating form parameters as query parameters (issue 137)\n* Fixed so that JSON path fragments starting with @ are escaped automatically (issue 138).\n* Fixed a serious bug in the response parsing which ignored changes made to the response from a filter when using the DSL (issue 139).\n* Created a ResponseBuilder to make it easier to create new Response implementations. This is useful if you're working with filters and want to change the response you get from the sever somehow. E.g.\n\tResponse myResponse = new ResponseBuilder().clone(originalResponse).setBody(\"Something\").build();\n* Allows configuring redirect settings using the DSL, e.g.\n\tgiven().redirects().max(12).and().redirects().follow(true).when(). .. (issue 24)\n* Support for passing in a keystore located on the file-system, e.g.\n\tgiven().keystore(new File(\"..\"), \"password\"). ..\n  or for all requests:\n\tRestAssured.keystore(new File(\"..\"), \"password\"). ..\n  You can also specify the path to the file system as a string as well:\n       \tgiven().keystore(\"some/path/my_keystore.jks\", \"password\"). ..\n  In this case REST Assured will first try to find the keystore in the classpath but if it was not found it will look in the file-system (issue 136).\n* Status code and status line are now validated before headers and cookies (issue 131).\n* Quotes from strings in error messages has been removed.\n* Added possibility for more advanced configuration by providing a RestAssuredConfig instance. Right now you can configure the parameters of HTTP Client, Redirect and Log settings. Examples:\n  For a specific request:\n\tgiven().config(newConfig().redirect(redirectConfig().followRedirects(false))). ..\n  or using a RequestSpecBuilder:\n\tRequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();\n  or for all requests:\n\tRestAssured.config = config().redirect(redirectConfig().followRedirects(true).and().maxRedirects(0));\n  \"config()\" and \"newConfig()\" can be statically imported from com.jayway.restassured.config.RestAssuredConfig\n* Non-backward compatible change: getRequestParams and getQueryParams() now returns Map<String, ?> instead of Map<String, String> in FilterableRequestSpecification.\n* Added getFormParams() and getPathParams() to com.jayway.restassured.specification.FilterableRequestSpecification.\n* Header- and Cookie names are now case-insentive in com.jayway.restassured.response.Headers and com.jayway.restassured.response.Cookies.\n* Added a new method called filters(Filter filter, Filter...additionalFilter) in the com.jayway.restassured.specification.RequestSpecification and com.jayway.restassured.RestAssured.\n* Logging has undergone a major uplift. You can now not only log the response body but also headers, cookies and status line. You can also log the request details as defined in the request specification. Thus the following:\n\tgiven().log(). .. // Log the response body in versions prior to 1.5\n  and\n\texpect().log(). .. // Also logs the response body in versions prior to 1.5\n  will now look like this:\n\tgiven().log().body(). .. // Log the _request_ body in versions >= 1.5\n  and\n\texpect().log().body() .. // Log the response body in versions >= 1.5\n  You can also log e.g. only headers in the request and the response:\n\tgiven().log().headers(). .. // Log only the request headers\n  and\n\texpect().log().headers(). .. // Log only the response headers\n  Previously there was a method called \"logOnError\" in both the request and response specification. This has now been replaced with the following method in the response specification:\n\texpect().log().ifError(). ..\n  This change is not backward compatible (issue 81).\n\nChangelog 1.4.5 (2011-11-08)\n-----------------------------\n* REST Assured can now parse responses with no-value (empty) cookies (issue 124).\n* Added support for serializing objects to a parameter if the content-type is set:\n  given().\n          contentType(\"application/json\").\n          queryParam(\"category\", \"Games\").\n          formParam(\"object\", new GameObject(..)). // GameObject will be serialized to JSON\n  when().\n          post(\"/somewhere\");\n  (issue 127).\n* Fixed a bug with multi-value form parameters when using PUT.\n* You can now create multi-value headers using e.g.: given().header(\"headerName\", \"value1\", \"value2\")... This will create TWO headers, \"headerName=value1\" and \"headerName=value2\".\n* You can now create multi-value cookies using e.g.: given().cookie(\"cookieName\", \"value1\", \"value2\")... This will create TWO cookies, \"cookieName=value1\" and \"cookieName=value2\".\n* Fixed a bug in the specification merger which caused FormAuthFilters to be applied twice if using multiple specifications with form auth.\n* Fixed a serious bug in the cookie response parsing that caused cookie attributes to be parsed as a new cookie (issue 130).\n* This version introduces a number of non-backward compatible change: The headers() and getHeaders() methods in com.jayway.restassured.response.Response no longer return a Map of key-value pairs, it now returns an instance of com.jayway.restassured.response.Headers. The reason for this is to allow for multi-value headers. These are headers that has several values for the same header name, e.g. \"headerName=value1\" and \"headerName=value2\". See javadoc in com.jayway.restassured.response.Headers for more info.\n* Added support for getting \"detailed cookies\". A detailed cookie contains information such as Expiry Date, Path, Version etc. To get a detailed cookie use com.jayway.restassured.response.Response#getDetailedCookie(<cookie name>) or to get all use com.jayway.restassured.response.Response#getDetailedCookies().\n* Added support for sending detailed cookies, e.g.\n\tCookie someCookie = new Cookie.Builder(\"some_cookie\", \"some_value\").setSecured(true).build();\n\tgiven().cookie(someCookie).and().expect().body(equalTo(\"x\")).when().get(\"/cookie\");\n  you can also send multiple detailed cookies at the same time:\n  \tCookie cookie1 =  Cookie.Builder(\"username\", \"John\").setComment(\"comment 1\").build();\n\tCookie cookie2 =  Cookie.Builder(\"token\", 1234).setComment(\"comment 2\").build();\n\tCookies cookies = new Cookies(cookie1, cookie2);\n\tgiven().cookies(cookies).then().expect().body(equalTo(\"username, token\")).when().get(\"/cookie\");\n  (issue 99).\n* Added support for mapping a path to a Java object in JsonPath, e.g: Book book = from(JSON).getObject(\"store.book[2]\", Book.class); (half of issue 125)\n\nChangelog 1.4 (2011-10-07)\n---------------------------\n* Better error message when an actual JSON or XML path value doesn't match the expected value (issue 104).\n* Removed dependency to spring-web in example project\n* Improved support for getting a list with an explicit type using XmlPath (issue 106).\n* RestAssured.baseURI now works as expected. You can now use e.g. RestAssured.baseURI = \"http://somehost.org:1234\" and the subsequent requests will automatically go to that URI as base (issue 54).\n* Rest Assured now throws a java.lang.AssertionError instead of AssertionFailedException (issue 100).\n* Added support for setting a default Parser. This parser will automatically be used to parse all responses whose content-type doesn't match a pre-defined parser. You can set the default parser for all responses using:\n\t  RestAssured.defaultParser = Parser.JSON;\n  or for a single response:\n\t  expect().defaultParser(Parser.JSON).when(..).\n  or using a response specification builder:\n\t  new ResponseSpecBuilder().setDefaultParser(Parser.JSON).build();\n (issue 107).\n* Improved parsing of response content. If no body expectations are defined then the content is no longer encoded to an intermediate data structure when calling methods such as \"asString\", \"asByteArray\" etc on the Response object. This increases the performance of Rest Assured when using no body expectations (e.g. get(\"/something\").asString()) (issue 109).\n* Added an \"asInputStream\" to the Response object. This means that you can now do e.g. \"get(\"/something\").asInputStream()\" to get the body returned as an input stream.\n* Support for mapping a response content body directly to an Object using either Jackson or Gson for JSON responses and JAXB for XML responses. Usage example:\n\tSomeObject someObject = get(\"/something\").as(SomeObject.class);\n  This requires the the response content-type is defined. If you want to map the response using a specific object mapper you can do like this:\n\t\tSomeObject someObject = get(\"/something\").as(SomeObject.class, ObjectMapper.GSON);\n  Note that Rest Assured doesn't explicitly depend on any of the object mappers so you need to add them to the classpath manually or using a Maven dependency (issue 19).\n* Support for mapping a Java Object to JSON or XML using Jackson, Gson or JAXB. Use e.g. \"given().contentType(\"application/json\").and().body(someObject).when().post(\"/something\");\"\n  You can also specify an explicit object mapper instead of a content-type:\n\tgiven().body(someObject, ObjectMapper.JACKSON).when().post(\"/something\");\n  (issue 118).\n* getMap with explicit type now converts the key and value to the defined type for both JsonPath and XmlPath\n* JsonPath.getList with an explicit type now converts all list members to the defined type (issue 114).\n* Fixed a bug when defining root path that ends with a dot and a path that starts with a dot.\n* You can now provide ints, floats etc to the request body. E.g. given().body(42).when().post(\"/somewhere\");\n* getString in JsonPath converts the result to string if needed (issue 115).\n* Added \"path\", \"jsonPath\" and \"xmlPath\" methods to ResponseBody object. This make it very convenient to make a request and parse a single path from the response. E.g.\n    String messageBody = get(\"/message\").path(\"message.body\");\n  In this example the response content-type determines whether JsonPath or XmlPath should be used. It could also be defined explicitly:\n    String messageBody = get(\"/message\").jsonPath().getString(\"message.body\");\n  (issue 110, 116).\n* Fixed a bug when using a form auth per request and a default form auth which added two form auth filters to the filter list causing multiple requests to made to the server.\n\nChangelog 1.3.1 (2011-09-20)\n-----------------------------\n* Fixed a trivial bug in the error message that is displayed when no parser is found for a certain content type (issue 103).\n* Fixed a bug that caused the response body to be parsed as JSON if Content-Type of the response was JSON even though no body matchers were specified (issue 102).\n* Improved List parsing with XmlPath. E.g. from(XML).getList(\"shopping.category.item.price\") will now automatically convert the output from NodeChildren to a List. Also from(XML).getList(\"shopping.category.item.price\", Float.class) will automatically convert all list members to floats.\n* When result from XmlPath expression is a single entity it's treated as a list if explicitly defined: E.g. from(XML).getList(\"shopping.category.item.price[0]\") and from(XML).get(\"shopping.category.item.price.list()\") will return a list (issue 59).\n* All parameter values now take Object as parameter type. This means that you can supply e.g. ints, floats etc and not only Strings as parameter values. E.g. before you had to do given().param(\"number\", String.valueOf(1)).when().get(..) but now you can simply do given().param(\"number\", 1).when().get(..); (issue 82).\n* You can now register custom parsers directly in the response specification and the response specification builder and not only statically in the RestAssured class. E.g. expect().parser(\"some/xml\", Parser.XML).when().get(\"/something\"); (issue 101).\n\nChangelog 1.3 (2011-09-05)\n---------------------------\n* Added support for uploading files, input streams, byte arrays and text using multi-part form data upload. You can use the \"multiPart\" method to specify what to upload. E.g.\n  given().multiPart(new File(\"/home/user/myFile.txt\").when().post(\"/upload\"); (issue 93)\n* Request specification details such as port number are now taking into account when using form authentication (issue 95).\n* You can now pass string data to the content method in the RequestSpecification, e.g. given().content(\"{ \\\"message\\\" : \\\"hello world\n\\\"}\").then().expect().statusCode(200).when().post(\"/json\");\n* Added methods to get NodeChildren and Node to XmlPath class (issue 54 and 58).\n* Improved automatic escaping of attributes in cases of ranges. E.g. you can now type \"records.car[0..1].@year\" when parsing XML instead of having to escape the year attribute like \"records.car[0..1].'@year'\".\n* Improved escaping of the minus character inside closures when parsing JSON, XML and HTML.\n* When using XmlPath and getting primitive values from an XML graph the result is automatically converted to the expected primitive type if needed and possible.\n* Added support for depth-first parsing of XML using the double-star notation, e.g. \"int chocolatePrice = from(XML).getInt(\"shopping.**.find { it.name == 'Chocolate' }.price\");\" (issue 94).\n* RestAssured now uses the threads classloader to load net.sf.json.AbstractJSON instead of root classloader to avoid problems with Groovy Grape (issue 92).\n* When specifying a request body and using a custom/unregistered content-type the body will automatically be URL Encoded. Previously a NPE was thrown because no content encoder was registered to HTTP Builders encoder registry for the specified content type. (issue 96).\n* Fixed a bug in RequestSpecificationBuilder that treated form parameters as query parameters.\n\nChangelog 1.2.3 (2011-08-18)\n-----------------------------\n* Fixed a bug when using PUT with multi-value form parameters.\n* Improved path parameter support. Rest Assured no longer URL encodes path parameters in order to detect them as query parameters.\n* JsonPath now converts from Groovy primitives to Java primitives correctly (thanks to Erik Hjortsberg)\n* Added support for enabling and disabling URL encoding for parameters. This is useful if the parameters are URL encoded before you supply them to Rest Assured. In cases like this you need to use given().urlEncodingEnabled(false), RestAssured.urlEncodingEnabled = false or specify it using the RequestSpecificationBuilder to avoid double URL encoding (issue 88).\n* Fixed URL to web page in pom.xml (issue 90)\n* Added a no-argument get method to JsonPath and XmlPath to easier parse the entire object graph (issue 91).\n* Better support for re-usable path expressions by using arguments. E.g. let's say you want to expect a complex path like this:\n\t  expect().\n\t\t   body(\"filters.filterConfig[0].filterConfigGroups.find { it.name == 'GroupName' }.includes\", hasItem(\"first\")).\n\t\t   body(\"filters.filterConfig[1].filterConfigGroups.find { it.name == 'GroupName' }.includes\", hasItem(\"second\")).\n          ..\n  The only difference between the two body paths is the index of the \"filterConfig\". A root path wouldn't help since previously you could only append a path to the root path and not supply arguments to it. Now you can do:\n  \t  expect().\n\t\t   root(\"filters.filterConfig[%d].filterConfigGroups.find { it.name == 'GroupName' }.includes\").\n\t\t   body(\"\", withArgs(0), hasItem(\"first\")).\n\t\t   body(\"\", withArgs(1), hasItem(\"second\")).\n\n  I.e. the indices 0 and 1 was replaced with a \"%d\" and you then supply the arguments to the path expression using the \"withArgs\" method located in com.jayway.restassured.RestAssured. You can also use the \"withArgs\" method without\n  using a root-path (issue 17, 80).\n\nChangelog 1.2.2 (2011-06-28)\n-----------------------------\n* Added support for parsing an entire JSON graph. E.g. let's say you have a JSON snippet like this:\n  [{\"email\":\"name1@mail.com\",\"alias\":\"name one\",\"phone\":\"3456789\"},\n   {\"email\":\"name2@mail.com\",\"alias\":\"name two\",\"phone\":\"1234567\"},\n   {\"email\":\"name3@mail.com\",\"alias\":\"name three\",\"phone\":\"2345678\"}]\n  You can then parse the entire JSON snippet to a List of Map like this:\n     List<Map<String, String>> result = from(json).get(\"$\");\n  or\n   List<Map<String, String>> result = from(json).get(\"\");\n  (issue 78)\n* Added support for explicitly specifiying form parameters, e.g. using given().formParam(\"name\", \"value\"). This is useful e.g. when sending a PUT request with both form params and query params (issue 75).\n* It's now possible to check that a header does NOT exist: expect().header(\"someheader\", nullValue()). (issue 74).\n* Support for path parameters. E.g. get(\"/{firstName}/{lastName}\", \"John\", \"Doe\") will send a GET request to \"http://localhost:8080/John/Doe\". You can also specify path params like this:\n  given().\n          pathParam(\"firstName\", \"John\").\n          pathParam(\"lastName\", \"Doe\").\n  when().\n          get(\"/{firstName}/{lastName}\");\n (issue 36)\n* Support for specifying a Java keystore when using SSL. This is useful when you run into e.g. SSLPeerUnverifiedException when the server has an invalid certificate. Usage:\n  given().keystore(\"/pathToJksInClassPath\", <password>)\n  For more info refer to https://github.com/jgritman/httpbuilder/wiki/SSL (issue 79).\n* Fixed an issue that could cause parameters to be treated as lists parameters.\n\nChangelog 1.2.1 (2011-05-23)\n-----------------------------\n* Fixed an issue when defining default request specifications with form parameters when using POST.\n* Added support for getting the content type in the com.jayway.restassured.response.Response object.\n* Fixed a major issue with filters that caused the response expecations to be verified before filter chain was completed.\n* Added \"from\" method to XmlPath and JsonPath (issue 60).\n* XmlPath now supports parsing HTML by setting CompatibilityMode to HTML, e.g. new XmlPath(CompatibilityMode.HTML, <some html>);.\n* Form authentication now uses HTML parsing when parsing the login page (before XML parsing was used which was very fragile).\n* Improved HTML parsing with Groovy closures\n\nChangelog 1.2 (2011-05-22)\n---------------------------\n* Better support for multi-value parameters. You can now defined them using a List:\n    with().param(\"list\", asList(\"1\", \"2\", \"3)). ..\n  or with var-args:\n    with().param(\"list\", \"1\", \"2\", \"3). ..\n* Added support for form authentication: given().auth().form(\"username\", \"password\")... Rest Assured will automatically parse the login page and try to find the form action and the username and password input fields. If it fails to do so or if you want a faster request you can supply a FormAuthConfig as a third param that providers Rest Assured with these parameters. E.g. given().auth().form(\"username\", \"password\", new FormAuthConfig(..)).. There's a pre-defined form auth config for Spring Security: given().auth().form(\"username\", \"password\", FormAuthConfig.springSecurity())... You can also specify form as default authentication for all requests: RestAssured.authentication = form(\"username\", \"password\");. (issue 61).\n* Added support for filters with which you can inspect and alter a request before it's actually committed and also inspect and alter the response before it's returned to the expectations. You can regard it as an \"around advice\" in AOP terms. Filters can be used to implement custom authentication schemes, logging, session management etc. You implement com.jayway.restassured.filter.Filter and register it using: given().filter(new MyFilter()). .. or set it as default: RestAssured.filters(asList(new MyFilter()); (issue 71).\n* You can now define and expect cookies without values using e.g. given().cookie(\"some_cookie\").. or expect().cookie(\"some_cookie\").. (issue 69).\n* You can now specify default request and response content type using RestAssured.requestContentType(..) and RestAssured.responseContentType(..). (issue 68).\n* Support for specifying string content types (issue 72).\n* Support for specifying default request and response specifications (issue 67).\n* Added support for printing response body using filters. E.g. given().filter(ErrorLogger.errorLogger()).. will print the response body if an error occurred (400 <= status code <= 500). You can also use the ResponseLoggingFilter to print response bodies for all status codes: given().filter(ResponseLoggingFilter.loggingFilter()).., or you can make it print only for specific status codes: given().filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(302)).. and you can even use Hamcrest matchers: given().filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(greaterThan(200)))..\n  There's also a shortcut for error logging:\n    given().logOnError(). or expect().logOnError(). ..\n  and for logging:\n    given().log(). or expect().log(). (issue 66).\n* Added support for easily printing the response after a request (if the expectations pass), e.g. expect().body(\"greeting\", equalTo(\"Greetings John Doe\")).when().get(\"/greet?firstName=John&lastName=Doe\").print();\n\nChangelog 1.1.7 (2011-04-26)\n-----------------------------\n* Added support for mixing form and query parameters when using the POST method. E.g. \"with().param(\"firstName\", \"John\").and().queryParam(\"lastName\", \"Doe\").expect().body(\"greeting.lastName\", equalTo(\"Doe\")).post(\"/greetXML\");\"\n  When using POST the \"param\" method adds form parameters to the request and \"queryParam\" adds query parameters of the request.\n* Added support for multi-value paramters, e.g. with().param(\"list\", \"first\").and().param(\"list\", \"second\").when().get(\"/something\") will now send a GET request to \"/something\" with parameter list including first and second. (issue 62).\n\nChangelog 1.1.6 (2011-03-29)\n-----------------------------\n* Preemptive basic authentication really works (issue 52).\n\nChangelog 1.1.5 (2011-03-28)\n-----------------------------\n* Added suport for preemptive basic authentication. E.g. given().auth().preemptive().basic(\"username\", \"password\").when().get(\"/secured\");. You can also set preemptive basic authentication as default authentication scheme using:\n  RestAssured.authentication = preemptive().basic(\"username\", \"password\"); (issue 45)\n* Added support for specifying a root path. E.g. instead of writing:\n  expect().\n           body(\"x.y.firstName\", is(..)).\n           body(\"x.y.lastName\", is(..)).\n           body(\"x.y.age\", is(..)).\n           body(\"x.y.gender\", is(..)).\n  when().\n           get(\"/something\");\n  you can use a root path and do:\n  expect().\n           rootPath(\"x.y\").\n           body(\"firstName\", is(..)).\n           body(\"lastName\", is(..)).\n           body(\"age\", is(..)).\n           body(\"gender\", is(..)).\n  when().\n          get(\"/something\");\n  You can also set a default root path using: RestAssured.rootPath = \"x.y\"; (issue 47)\n* It's now possible to reuse specifications accross different tests (issue 46). E.g.\n  ResponseSpecification responseSpec = new ResponseSpecBuilder().expectStatusCode(200).expectBody(\"x.y.size()\", is(2)).build();\n\n  expect().\n         spec(responseSpec).\n         body(\"x.y.z\", equalTo(\"something\")).\n  when().\n         get(\"/something\");\n\n  The \"responseSpec\" can now be reused in a completely different test without having to duplicate the expecations in the \"responseSpec\" for each test.\n\n  The same thing can be achieved for request specifications:\n  RequestSpecification requestSpec = new RequestSpecBuilder().addParameter(\"parameter1\", \"value1\").build();\n\n  given().\n          spec(requestSpec).\n  expect().\n          body(\"x.y.z\", equalTo(\"something\")).\n  when().\n          get(\"/something\");\n* You can now get the response body content when request body is empty (issue 49).\n* Added support for getting response body even when using body expecations. I.e. now this works:\n  String body = expect().body(\"x.y.z\", equalTo(\"something\")).when().get(\"/x\").andReturn().body().asString(); (issue 50)\n* Specifying a fully-qualied request url overrides default base path, base uri, and port (issue 41).\n\nChangelog 1.1.2 (2011-03-04)\n-----------------------------\n* Fixed so that POST requests can return a response (e.g. Response response = post(\"/somewhere\");) when an error occurred (status code 400 to 999). (issue 37).\n* You can now get the status line and status code from the Response (issue 40). E.g\n      Response\" response = get(\"/something\");\n      String statusLine = response.getStatusLine();\"\n* Corrected some javadoc issues.\n\nChangelog 1.1.1 (2011-03-02)\n-----------------------------\n* Added support for getting headers and cookies from the Response, e.g. String headerValue = get(\"/something\").andReturn().header(\"headerName\"); (issue 27)\n* Fixed so that you don't need to add a \"@\" when calling getAttribute(..) on Node in XmlPath (issue 34)\n* Added support for validating XML body using XSD e.g. \"expect().body(matchesXsd(xsd)).when().get(\"/carRecords\");\" where matchesXsd(..) is a REST-Assured Hamcrest matcher located in com.jayway.restassured.matcher.RestAssuredMatchers and \"xsd\" can be either a String, InputStream, Reader, URL or File (issue 29).\n* Added support for validating XML body using DTD e.g. \"expect().body(matchesDtd(dtd)).when().get(\"/videos\");\" where matchesDtd(..) is a REST-Assured Hamcrest matcher located in com.jayway.restassured.matcher.RestAssuredMatchers and \"dtd\" can be either a String, InputStream, URL or File (issue 29).\n* Improved error messages on illegal paths when expecting XML (issue 35).\n\n\nChangelog 1.1 ((2011-02-18)\n----------------------------\n* Added support for specifying base path using \"RestAssured.basePath = /resource\". E.g. let's say that the base URI is http://localhost and base path is \"/resource\" will make create a request to \"http://localhost/resource/something\" when doing a 'get(\"/something\")'. Default value is empty. (issue 13)\n* Support for specifying request/query parameters in the url, e.g. get(\"/something?param1=first&param2=second\"). (issue 23)\n* Fixed a bug in RestAssuredResponse parser that caused a NPE when the input stream was null. (issue 25)\n* Major improvements to XML expectations. It now uses Groovy syntax for the expectation string to allow for much better expectations! Note that this fix will break backward compatibility on some expectations. E.g. given\n        <greeting>\n\t    <name>\n                <firstName>John</firstName>\n                <lastName>Doe</lastName>\n            </name>\n        </greeting>\n  you used to do:\n        expect().body(\"greeting.name\", hasItems(\"John\", \"Doe\"))..\n  Now this will not work, instead you have to do:\n        expect().body(\"greeting.name.children()\", hasItems(\"John\", \"Doe\"))..\n  But this also means that you can do:\n        expect().body(\"greeting.name.size()\", equalsTo(2))..\n  See http://www.groovy-lang.org/processing-xml.html#_manipulating_xml for more info about the syntax.\n* Support for expecting on XML attributes, e.g. expect().body(\"greeting.name.@firstName\", equalTo(\"John\")).when().get(\"/greetXMLAttribute?firstName=John&lastName=Doe\");\n* When forcing plain text verification for e.g. JSON or XML responses the response content type is no longer changed. Before this could cause Jersey to refuse to refuse the return a response. (issue 10)\n* PUT requests now supports specifying binary a request body\n* Major improvements to JSON expectations. It now uses Groovy syntax for the expectation string to allow for much better expectations! Note that this fix will break backward compatibility on some expectations.\n  - JSON lists are always returned as Java lists which means that you should use the hasItem(..) hamcrest matcher and not hasItemsInArray(..) hamcrest matcher.\n* Added support for specifying default authentication scheme. E.g. use RestAssured.authentication = basic(\"username\", \"password\") to cause all subsequent request to use basic authentication. You can reset to no authentication using RestAssured.reset(); (issue 20)\n* Added support for registering a predefined parser for unsupported mime-types by using RestAssured.registerParser(<mime-type>, <parser>). E.g. to register that mime-type 'application/vnd.uoml+xml' should be parsed using the XML parser do: RestAssured.registerParser(\"application/vnd.uoml+xml\", Parser.XML);. You can also unregister a parser using RestAssured.unregisterParser(\"application/vnd.uoml+xml\");. (issue 8)\n* Added XmlPath object which allows you to parse an XML response from a request easily. E.g.\n  String xml = post(\"/greeting\").asString();\n  String firstName = with(xml).get(\"greeting.firstName\");\n  For more information refer to the javadoc of com.jayway.restassured.path.xml.XmlPath\n* Added JsonPath object which allows you to parse an JSON response from a request easily. E.g.\n  String json = post(\"/greeting\").asString();\n  String firstName = with(json).get(\"greeting.firstName\");\n  For more information refer to the javadoc of com.jayway.restassured.path.json.JsonPath\n\nChangelog 1.0.3 (2011-01-17)\n-----------------------------\n* Fixed a bug in the JSON parsing which prevent parsing of nested arrays (issue 15)\n* Added support for getting an index in a JSON array. E.g. expect().body(\"items.get(0)\", equalTo(\"firstIndex\")).when().get(\"/something\");. Assuming that \"items\" is an array then \"items.get(0)\" returns the first element in that array.\n* Fixed so that you can expect on null values in JSON arrays.\n* Request senders can now return the body as byte array or string. E.g. get(\"/something\").asString() makes GET request to \"/something\" and returns the response body as a string. This is useful if you want to debug the response while creating your test or if you want to use third-party tools to validate the response. Note that it only works if you don't specify any expectations before making the request.\n\nChangelog 1.0.2 (2011-01-12)\n-----------------------------\n* JSON and XML matching now supports many more content types than before. Before you could only use XML matching for content type application/xml and JSON for application/json.\n* Support for HTML verification\n* Support for RSS verification (content type application/rss+xml)\n\nChangelog 1.0.1 (2010-12-27)\n-----------------------------\n* Refactored AuthenticationSpecification to be a Java interface in order to avoid Groovy methods being exposed and to allow for Javadoc.\n"
        },
        {
          "name": "deploy_bintray.sh",
          "type": "blob",
          "size": 0.6845703125,
          "content": "#!/bin/sh\nread -s -p \"Bintray api key: \" api_key\necho\nread -p \"Version to release: \" version\n\nfiles_to_deploy=$(find dist -name *$version-dist.zip)\nif [[ -z \"$files_to_deploy\" ]]\nthen\t\necho \"Couldn't find any files to deploy for version $version.\" \nexit 0\nfi\n\necho \"Files to deploy:\"\nfor file in ${files_to_deploy}\ndo\n   echo ${file}\ndone\nread -p \"Is this correct? [y/N]\" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n\tfor file in ${files_to_deploy}\n\tdo\n\t\techo \"Uploading $file\"\t   \n\t\tcurl -T $file -ujohanhaleby:$api_key https://api.bintray.com/content/johanhaleby/generic/rest-assured/$version/\n\tdone   \necho \"REST Assured $version was deployed to Bintray. Login to Bintray to publish the release.\"\nfi"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_javadoc.sh",
          "type": "blob",
          "size": 0.505859375,
          "content": "#!/bin/bash\nread -p \"Version to generate javadoc for: \" version\nproject_names=(json-path xml-path rest-assured rest-assured-commmon spring-mock-mvc json-schema-validator scala-support spring-web-test-client kotlin-extensions spring-mock-mvc-kotlin-extensions)\n\necho \"Generating Javadoc for version ${version}.\"\n\nfor project_name in ${project_names[*]}\ndo\n    echo \"Generating for ${project_name}\"\n    curl -Ss http://www.javadoc.io/doc/io.rest-assured/${project_name}/${version} >/dev/null 2>&1\ndone\necho \"Completed\"\n\n"
        },
        {
          "name": "json-path",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvn_release.sh",
          "type": "blob",
          "size": 0.37890625,
          "content": "#!/bin/bash\nread -p \"Enter the version to release: \" releaseVersion\necho \"Starting to relase REST Assured $releaseVersion\"\n\nmvn release:prepare -Prelease,osgi-tests -DautoVersionSubmodules=true -Dtag=rest-assured-${releaseVersion} -DreleaseVersion=${releaseVersion} &&\nmvn release:perform -Prelease,osgi-tests\n\necho \"Maven release of REST Assured $releaseVersion completed successfully\"\n\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 21.330078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  ~ Copyright 2019 the original author or authors.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~        http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>5</version>\n    </parent>\n    <groupId>io.rest-assured</groupId>\n    <artifactId>rest-assured-parent</artifactId>\n    <packaging>pom</packaging>\n    <version>5.5.1-SNAPSHOT</version>\n    <url>https://rest-assured.io/</url>\n    <name>REST Assured Parent POM</name>\n    <description>Java DSL for easy testing of REST services</description>\n    <inceptionYear>2010</inceptionYear>\n    <issueManagement>\n        <system>GitHub Issue Tracking</system>\n        <url />\n    </issueManagement>\n    <licenses>\n        <license>\n            <name>Apache 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.html</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>Johan Haleby</name>\n            <id>johan.haleby</id>\n            <organization>Jayway</organization>\n            <organizationUrl>https://www.jayway.com</organizationUrl>\n            <email>johan.haleby at gmail.com</email>\n            <timezone>+1</timezone>\n            <roles>\n                <role>Developer</role>\n            </roles>\n        </developer>\n    </developers>\n    <properties>\n        <scm.branch>master</scm.branch>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <groovy.version>4.0.22</groovy.version>\n        <groovy.range>[4.0,5.0)</groovy.range>\n        <gmaven.version>1.5</gmaven.version>\n        <hamcrest.version>2.2</hamcrest.version>\n        <jackson1.version>1.9.11</jackson1.version>\n        <jackson2.version>2.17.1</jackson2.version>\n        <johnzon.version>1.1.11</johnzon.version>\n        <yasson.version>1.0.6</yasson.version>\n        <jakarta.json.version>1.1.6</jakarta.json.version>\n        <maven-javadoc.version>2.9.1</maven-javadoc.version>\n        <surefire.version>2.22.0</surefire.version>\n        <kotlin.version>2.0.0</kotlin.version>\n        <scala.version>3.3.1</scala.version>\n        <assertj-core.version>3.16.1</assertj-core.version>\n        <scribe.version>2.5.3</scribe.version>\n        <sundrio.version>0.103.1</sundrio.version>\n        <guava.version>33.2.1-jre</guava.version>\n        <dokka.version>1.9.20</dokka.version>\n    </properties>\n    <scm>\n        <url>https://github.com/rest-assured/rest-assured/tree/${scm.branch}</url>\n        <connection>scm:git:git://github.com/rest-assured/rest-assured.git</connection>\n        <developerConnection>scm:git:ssh://git@github.com/rest-assured/rest-assured.git</developerConnection>\n    </scm>\n    <mailingLists>\n        <mailingList>\n            <name>rest-assured mailing-list</name>\n            <archive>https://groups.google.com/group/rest-assured/topics</archive>\n        </mailingList>\n    </mailingLists>\n    <modules>\n        <module>modules</module>\n        <module>rest-assured</module>\n        <module>rest-assured-all</module>\n        <module>examples</module>\n        <module>json-path</module>\n        <module>rest-assured-common</module>\n        <module>xml-path</module>\n    </modules>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>animal-sniffer-maven-plugin</artifactId>\n                    <version>1.15</version>\n                    <configuration>\n                        <signature>\n                            <groupId>org.codehaus.mojo.signature</groupId>\n                            <artifactId>java16</artifactId>\n                            <version>1.0</version>\n                        </signature>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>check-java-version-compatibility</id>\n                            <phase>test</phase>\n                            <goals>\n                                <goal>check</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.felix</groupId>\n                    <artifactId>maven-bundle-plugin</artifactId>\n                    <version>5.1.4</version>\n                </plugin>\n                <plugin>\n                    <groupId>org.codehaus.gmaven</groupId>\n                    <artifactId>gmaven-plugin</artifactId>\n                    <version>${gmaven.version}</version>\n                    <configuration>\n                        <providerSelection>2.0</providerSelection>\n                        <source />\n                    </configuration>\n                    <dependencies>\n                        <dependency>\n                            <groupId>org.codehaus.gmaven.runtime</groupId>\n                            <artifactId>gmaven-runtime-2.0</artifactId>\n                            <version>${gmaven.version}</version>\n                            <exclusions>\n                                <exclusion>\n                                    <groupId>org.apache.groovy</groupId>\n                                    <artifactId>groovy-all</artifactId>\n                                </exclusion>\n                            </exclusions>\n                        </dependency>\n                        <dependency>\n                            <groupId>org.apache.groovy</groupId>\n                            <artifactId>groovy</artifactId>\n                            <version>${groovy.version}</version>\n                        </dependency>\n                    </dependencies>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>generateStubs</goal>\n                                <goal>compile</goal>\n                                <goal>generateTestStubs</goal>\n                                <goal>testCompile</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.basepom.maven</groupId>\n                    <artifactId>duplicate-finder-maven-plugin</artifactId>\n                    <version>1.3.0</version>\n                    <executions>\n                        <execution>\n                            <id>duplicate-check</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>check</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                    <configuration>\n                        <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>\n                        <failBuildInCaseOfEqualContentConflict>true</failBuildInCaseOfEqualContentConflict>\n                        <failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>\n                        <ignoredResourcePatterns>\n                            <ignoredResourcePattern>.*\\.gitkeep$</ignoredResourcePattern>\n                            <ignoredResourcePattern>log4j\\.properties</ignoredResourcePattern>\n                            <!-- Jetty about.html pages -->\n                            <ignoredResourcePattern>.*about\\.html$</ignoredResourcePattern>\n                            <!--\n                                Found duplicate (but equal) resources in\n                                [com.github.fge:json-schema-core:1.2.5, com.github.fge:json-schema-validator:2.2.6]\n                            -->\n                            <ignoredResourcePattern>.*draftv[34]/schema$</ignoredResourcePattern>\n                            <!-- Scala lang -->\n                            <ignoredResourcePattern>rootdoc\\.txt</ignoredResourcePattern>\n                        </ignoredResourcePatterns>\n                        <ignoredClassPatterns>\n                            <!-- Jigsaw project (Java 9) and later module-info classes. -->\n                            <ignoredClassPattern>.*\\.module-info$</ignoredClassPattern>\n                            <ignoredClassPattern>javax\\.activation.*</ignoredClassPattern>\n                            <!-- Some classes that are duplicated in the (optional) JAXB / Jakarta EE dependencies. -->\n                            <ignoredClassPattern>com\\.sun\\.istack.*</ignoredClassPattern>\n                            <ignoredClassPattern>com\\.sun\\.xml.*</ignoredClassPattern>\n                            <ignoredClassPattern>META-INF\\.versions\\.9\\.com\\.sun\\.istack\\.logging.*</ignoredClassPattern>\n                            <!-- Spring AOP -->\n                            <ignoredClassPattern>org\\.aopalliance.*</ignoredClassPattern>\n                            <!-- OSGi -->\n                            <ignoredClassPattern>org\\.osgi.*</ignoredClassPattern>\n                            <ignoredClassPattern>org\\.ops4j.*</ignoredClassPattern>\n                        </ignoredClassPatterns>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>${maven-javadoc.version}</version>\n                <configuration>\n                    <failOnError>false</failOnError>\n                    <additionalparam>-Xdoclint:none</additionalparam>\n                </configuration>\n            </plugin>\n            <plugin>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${surefire.version}</version>\n                <configuration>\n                    <argLine>-Dfile.encoding=${project.build.sourceEncoding}</argLine>\n                    <excludes>\n                        <exclude>**/itest/**</exclude>\n                    </excludes>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>surefire-itest</id>\n                        <phase>integration-test</phase>\n                        <goals>\n                            <goal>test</goal>\n                        </goals>\n                        <configuration>\n                            <excludes>\n                                <exclude>none</exclude>\n                            </excludes>\n                            <includes>\n                                <include>**/itest/**</include>\n                            </includes>\n                            <argLine>-Xmx1024m</argLine>\n                            <argLine>-Dfile.encoding=UTF-8</argLine>\n                            <argLine>-Duser.language=en</argLine>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.basepom.maven</groupId>\n                <artifactId>duplicate-finder-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <profiles>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>${maven-javadoc.version}</version>\n                        <executions>\n                            <execution>\n                                <id>attach-javadocs</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <failOnError>false</failOnError>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>attach-sources</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>io.sundr</groupId>\n                        <artifactId>sundr-maven-plugin</artifactId>\n                        <version>${sundrio.version}</version>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>generate-bom</goal>\n                                </goals>\n                                <configuration>\n                                    <boms>\n                                        <bom>\n                                            <artifactId>rest-assured-bom</artifactId>\n                                            <name>REST Assured: BOM</name>\n                                            <description>Centralized dependencyManagement for the Rest Assured Project</description>\n                                            <properties>\n                                                <skipStagingRepositoryClose>true</skipStagingRepositoryClose>\n                                                <sonar.skip>true</sonar.skip>\n                                            </properties>\n                                            <modules>\n                                                <excludes>\n                                                    <exclude>io.rest-assured.examples:*</exclude>\n                                                </excludes>\n                                            </modules>\n                                        </bom>\n                                    </boms>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>dist</id>\n            <!-- Active profile when running release -->\n            <activation>\n                <property>\n                    <name>release</name>\n                </property>\n            </activation>\n            <modules>\n                <module>dist</module>\n            </modules>\n        </profile>\n    </profiles>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.ccil.cowan.tagsoup</groupId>\n                <artifactId>tagsoup</artifactId>\n                <version>1.2.1</version>\n            </dependency>\n            <!-- Backward compatibility with JAXB (Jakarta EE 8?) -->\n            <dependency>\n                <groupId>javax.xml.bind</groupId>\n                <artifactId>jaxb-api</artifactId>\n                <version>2.3.1</version>\n            </dependency>\n            <dependency>\n                <groupId>com.sun.xml.bind</groupId>\n                <artifactId>jaxb-impl</artifactId>\n                <version>2.3.4</version>\n            </dependency>\n            <!-- Jakarta EE 9 -->\n            <dependency>\n                <groupId>jakarta.xml.bind</groupId>\n                <artifactId>jakarta.xml.bind-api</artifactId>\n                <version>3.0.1</version>\n            </dependency>\n            <dependency>\n                <groupId>org.glassfish.jaxb</groupId>\n                <artifactId>jaxb-runtime</artifactId>\n                <version>3.0.2</version>\n            </dependency>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>4.13.1</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.hamcrest</groupId>\n                        <artifactId>hamcrest-core</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.commons</groupId>\n                <artifactId>commons-lang3</artifactId>\n                <version>3.11</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.groovy</groupId>\n                <artifactId>groovy</artifactId>\n                <version>${groovy.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-databind</artifactId>\n                <version>${jackson2.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.codehaus.jackson</groupId>\n                <artifactId>jackson-core-asl</artifactId>\n                <version>${jackson1.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.codehaus.jackson</groupId>\n                <artifactId>jackson-mapper-asl</artifactId>\n                <version>${jackson1.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.johnzon</groupId>\n                <artifactId>johnzon-mapper</artifactId>\n                <version>${johnzon.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.eclipse</groupId>\n                <artifactId>yasson</artifactId>\n                <version>${yasson.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>jakarta.json</groupId>\n                <artifactId>jakarta.json-api</artifactId>\n                <version>${jakarta.json.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.google.code.gson</groupId>\n                <artifactId>gson</artifactId>\n                <version>2.9.0</version>\n            </dependency>\n            <dependency>\n                <groupId>com.googlecode.json-simple</groupId>\n                <artifactId>json-simple</artifactId>\n                <version>1.1.1</version>\n            </dependency>\n            <dependency>\n                <groupId>org.hamcrest</groupId>\n                <artifactId>hamcrest</artifactId>\n                <version>${hamcrest.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>commons-io</groupId>\n                <artifactId>commons-io</artifactId>\n                <version>2.8.0</version>\n            </dependency>\n            <dependency>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-stdlib-jdk8</artifactId>\n                <version>${kotlin.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.scala-lang</groupId>\n                <artifactId>scala3-interfaces</artifactId>\n                <version>${scala.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.assertj</groupId>\n                <artifactId>assertj-core</artifactId>\n                <version>${assertj-core.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.squareup.okhttp3</groupId>\n                <artifactId>mockwebserver</artifactId>\n                <version>4.2.2</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n"
        },
        {
          "name": "rest-assured-all",
          "type": "tree",
          "content": null
        },
        {
          "name": "rest-assured-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "rest-assured-logo-green.png",
          "type": "blob",
          "size": 6.6337890625,
          "content": null
        },
        {
          "name": "rest-assured",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_wiki.sh",
          "type": "blob",
          "size": 1.2060546875,
          "content": "#!/bin/bash\nread -p \"Enter the old version: \" oldVersion\nread -p \"Enter the new version: \" newVersion\ntmpFolderRootName=/tmp/$RANDOM\nfolderName=${tmpFolderRootName}/rest-assured.wiki\n\nupdateFiles() {\nif [[ -z \"$filesToUpdate\" ]]\n    then\n        echo \"Couldn't find any files to update.\"\n    exit 0\nfi\n\nfor file in ${filesToUpdate}\n    do\n        echo \"Updating $file\" &&\n        sed -i \"\" \"s/${oldVersion}/${newVersion}/g\" \"$file\"\n    done\n}\ngit clone https://github.com/rest-assured/rest-assured.wiki.git ${folderName} && cd ${folderName} &&\nfilesToUpdate=$(find * ! -name \"ReleaseNotes*.md\" ! -name \"OldNews.md\" ! -name \"How_to_release.md\" ! -name \"Usage_Legacy.md\" -name \"*.md\" -type f -print) &&\nupdateFiles &&\nread -p \"Would you like to commit the changes? [y/N]\" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n\techo \"Committing and pushing changes\" && \n\tgit commit -am \"Updating docs for version ${newVersion}\" && git push && echo \"Changes pushed..\" &&\n\techo \"Cleaning up temporary files\" &&\n\trm -rf ${tmpFolderRootName} \nelse\n\techo \"Changes not committed, do \\\"cd ${folderName} && git commit -am \\\"Updating docs for version ${newVersion}\\\" && git push\\\" when ready\"\nfi\necho \"Note that you need to update README.md manually\"\ncd -\n"
        },
        {
          "name": "xml-path",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}