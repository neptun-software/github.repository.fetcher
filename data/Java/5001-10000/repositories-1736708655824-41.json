{
  "metadata": {
    "timestamp": 1736708655824,
    "page": 41,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spring-projects/spring-security",
      "stars": 8916,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.44140625,
          "content": "# EditorConfig for Spring Security\n# see https://github.com/spring-projects/spring-security/blob/master/CONTRIBUTING.adoc#mind-the-whitespace\n\nroot = true\n\n[*]\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nmax_line_length = 120\n\n[*.{java,xml}]\nindent_style = tab\nindent_size = 4\ncharset = utf-8\ncontinuation_indent_size = 8\n\nij_smart_tabs = false\nij_java_align_multiline_parameters = false\n\n[*.gradle]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3623046875,
          "content": "# Normalize line endings to auto.\n* text auto\n\n# Ensure that line endings for DOS batch files are not modified.\n*.bat -text\n\n# Ensure the following are treated as binary.\n*.cer      binary\n*.graffle  binary\n*.jar      binary\n*.jpeg     binary\n*.jpg      binary\n*.keystore binary\n*.odg      binary\n*.otg      binary\n*.png      binary\n*.hsx      binary\n*.serialized binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.375,
          "content": "classes/\ntarget/\n*/src/*/java/META-INF\n*/src/META-INF/\n*/src/*/java/META-INF/\n.classpath\n.springBeans\n.project\n.DS_Store\n.settings/\n.idea/*\nout/\nbin/\nintellij/\nbuild/\n*.log\n*.log.*\n*.iml\n*.ipr\n*.iws\n.gradle/\natlassian-ide-plugin.xml\n!etc/eclipse/.checkstyle\n.checkstyle\ns101plugin.state\n.attach_pid*\n.~lock.*#\n\n!.idea/checkstyle-idea.xml\n!.idea/externalDependencies.xml\n\nnode_modules\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".sdkmanrc",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Use sdkman to run \"sdk env\" to initialize with correct JDK version\n# Enable auto-env through the sdkman_auto_env config\n# See https://sdkman.io/usage#config\n# A summary is to add the following to ~/.sdkman/etc/config\n# sdkman_auto_env=true\njava=17.0.3-tem\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.adoc",
          "type": "blob",
          "size": 8.349609375,
          "content": "= Contributing to Spring Security\n\nFirst off, thank you for taking the time to contribute! :+1: :tada:\n\n== Table of Contents\n\n* <<code-of-conduct>>\n* <<how-to-contribute>>\n* <<ask-questions>>\n* <<find-an-issue>>\n* <<create-an-issue>>\n* <<issue-lifecycle>>\n* <<submit-a-pull-request>>\n* <<build-from-source>>\n* <<code-style>>\n\n[[code-of-conduct]]\n== Code of Conduct\n\nThis project is governed by the https://github.com/spring-projects/.github/blob/main/CODE_OF_CONDUCT.md[Spring code of conduct].\nBy participating you are expected to uphold this code.\nPlease report unacceptable behavior to spring-code-of-conduct@pivotal.io.\n\n[[how-to-contribute]]\n== How to Contribute\n\n[[ask-questions]]\n=== Ask Questions\n\nIf you have a question, check Stack Overflow using\nhttps://stackoverflow.com/questions/tagged/spring-security+or+spring-ldap+or+spring-authorization-server+or+spring-session?tab=Newest[this list of tags].\nFind an existing discussion, or start a new one if necessary.\n\nIf you believe there is an issue, search through https://github.com/spring-projects/spring-security/issues[existing issues] trying a  few different ways to find discussions, past or current, that are related to the issue.\nReading those discussions helps you to learn about the issue, and helps us to make a decision.\n\n[[find-an-issue]]\n=== Find an Existing Issue\n\nThere are many issues in Spring Security with the labels https://github.com/spring-projects/spring-security/issues?q=is%3Aissue+is%3Aopen+label%3A%22status%3A+ideal-for-contribution%22[`ideal-for-contribution`] or https://github.com/spring-projects/spring-security/issues?q=is%3Aissue+is%3Aopen+label%3A%22status%3A+first-timers-only%22[`first-timers-only`] that are a great way to contribute to a discussion or <<submit-a-pull-request,to a PR>>.\nYou can volunteer by commenting on these tickets, and we will assign them to you.\n\n[[create-an-issue]]\n=== Create an Issue\n\nReporting an issue or making a feature request is a great way to contribute.\nYour feedback and the conversations that result from it provide a continuous flow of ideas.\nHowever, before creating a ticket, please take the time to <<ask-questions,ask and research>> first.\n\nIf you create an issue after a discussion on Stack Overflow, please provide a description in the issue instead of simply referring to Stack Overflow.\nThe issue tracker is an important place of record for design discussions and should be self-sufficient.\n\nOnce you're ready, create an issue on https://github.com/spring-projects/spring-security/issues[GitHub].\n\nMany issues are caused by subtle behavior, typos, and unintended configuration.\nCreating a https://stackoverflow.com/help/minimal-reproducible-example[Minimal Reproducible Example] (starting with https://start.spring.io for example) of the problem helps the team quickly triage your issue and get to the core of the problem.\n\nWe love contributors, and we may ask you to <<submit-a-pull-request,submit a PR with a fix>>.\n\n[[issue-lifecycle]]\n=== Issue Lifecycle\n\nWhen an issue is first created, it is flagged `waiting-for-triage` waiting for a team member to triage it.\nOnce the issue has been reviewed, the team may ask for further information if needed, and based on the findings, the issue is either assigned a target branch (or no branch if a feature) or is closed with a specific status.\nThe target branch is https://spring.io/projects/spring-security#support[the earliest supported branch] where <<choose-a-branch,the change will be applied>>.\n\nWhen a fix is ready, the issue is closed and may still be re-opened until the fix is released.\nAfter that the issue will typically no longer be reopened.\nIn rare cases if the issue was not at all fixed, the issue may be re-opened.\nIn most cases however any follow-up reports will need to be created as new issues with a fresh description.\n\n[[build-from-source]]\n=== Build from Source\n\nSee https://github.com/spring-projects/spring-security/tree/main#building-from-source[Build from Source] for instructions on how to check out, build, and import the Spring Security source code into your IDE.\n\n[[code-style]]\n=== Source Code Style\n\nThe wiki pages https://github.com/spring-projects/spring-framework/wiki/Code-Style[Code Style] and https://github.com/spring-projects/spring-framework/wiki/IntelliJ-IDEA-Editor-Settings[IntelliJ IDEA Editor Settings] define the source file coding standards we use along with some IDEA editor settings we customize.\n\nTo format the code as well as check the style, run `./gradlew format check`.\n\n[[submit-a-pull-request]]\n=== Submit a Pull Request\n\nWe are excited for your pull request! :heart:\n\nPlease do your best to follow these steps.\nDon't worry if you don't get them all correct the first time, we will help you.\n\n[[sign-cla]]\n1. All commits must include a __Signed-off-by__ trailer at the end of each commit message to indicate that the contributor agrees to the Developer Certificate of Origin.\nFor additional details, please refer to the blog post https://spring.io/blog/2025/01/06/hello-dco-goodbye-cla-simplifying-contributions-to-spring[Hello DCO, Goodbye CLA: Simplifying Contributions to Spring].\n[[create-an-issue]]\n1. Must you https://github.com/spring-projects/spring-security/issues/new/choose[create an issue] first? No, but it is recommended for features and larger bug fixes. It's easier discuss with the team first to determine the right fix or enhancement.\nFor typos and straightforward bug fixes, starting with a pull request is encouraged.\nPlease include a description for context and motivation.\nNote that the team may close your pull request if it's not a fit for the project.\n[[choose-a-branch]]\n1. Always check out the branch indicated in the milestone and submit pull requests against it (for example, for milestone `5.8.3` use the `5.8.x` branch).\nIf there is no milestone, choose `main`.\nOnce merged, the fix will be forwarded-ported to applicable branches including `main`.\n[[create-a-local-branch]]\n1. Create a local branch\nIf this is for an issue, consider a branch name with the issue number, like `gh-22276`.\n[[write-tests]]\n1. Add documentation and JUnit Tests for your changes.\n[[update-copyright]]\n1. In all files you edited, if the copyright header is of the form 2002-20xx, update the final copyright year to the current year.\n[[add-since]]\n1. If on `main`, add `@since` JavaDoc attributes to new public APIs that your PR adds\n[[change-rnc]]\n1. If you are updating the XSD, please instead update the RNC file and then run `./gradlew :spring-security-config:rncToXsd`.\n[[format-code]]\n1. For each commit, build the code using `./gradlew format check`.\nThis command ensures the code meets most of <<code-style,the style guide>>; a notable exception is import order.\n[[commit-atomically]]\n1. Choose the granularity of your commits consciously and squash commits that represent\nmultiple edits or corrections of the same logical change.\nSee https://git-scm.com/book/en/Git-Tools-Rewriting-History[Rewriting History section of Pro Git] for an overview of streamlining the commit history.\n[[format-commit-messages]]\n1. Format commit messages using 55 characters for the subject line, 72 characters per line\nfor the description, followed by the issue fixed, for example, `Closes gh-22276`.\nSee the https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines[Commit Guidelines section of Pro Git] for best practices around commit messages, and use `git log` to see some examples.\nPresent tense is preferred.\n+\n[indent=0]\n----\nAddress NullPointerException\n\nCloses gh-22276\n----\n[[reference-issue]]\n1. If there is a prior issue, reference the GitHub issue number in the description of the pull request.\n+\n[indent=0]\n----\nCloses gh-22276\n----\n\nIf accepted, your contribution may be heavily modified as needed prior to merging.\nYou will likely retain author attribution for your Git commits granted that the bulk of your changes remain intact.\nYou may also be asked to rework the submission.\n\nIf asked to make corrections, simply push the changes against the same branch, and your pull request will be updated.\nIn other words, you do not need to create a new pull request when asked to make changes.\nWhen it is time to merge, you'll be asked to squash your commits.\n\n==== Participate in Reviews\n\nHelping to review pull requests is another great way to contribute.\nYour feedback can help to shape the implementation of new features.\nWhen reviewing pull requests, however, please refrain from approving or rejecting a PR unless you are a core committer for Spring Security.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0927734375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 3.783203125,
          "content": "image::https://badges.gitter.im/Join%20Chat.svg[Gitter,link=https://gitter.im/spring-projects/spring-security?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge]\n\nimage:https://github.com/spring-projects/spring-security/actions/workflows/continuous-integration-workflow.yml/badge.svg?branch=main[\"Build Status\", link=\"https://github.com/spring-projects/spring-security/actions/workflows/continuous-integration-workflow.yml\"]\n\nimage:https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A[\"Revved up by Develocity\", link=\"https://ge.spring.io/scans?search.rootProjectNames=spring-security\"]\n\n= Spring Security\n\nSpring Security provides security services for the https://docs.spring.io[Spring IO Platform]. Spring Security 6.0 requires Spring 6.0 as\na minimum and also requires Java 17.\n\nFor a detailed list of features and access to the latest release, please visit https://spring.io/projects[Spring projects].\n\n== Code of Conduct\nPlease see our https://github.com/spring-projects/.github/blob/main/CODE_OF_CONDUCT.md[code of conduct]\n\n== Downloading Artifacts\nSee https://docs.spring.io/spring-security/reference/getting-spring-security.html[Getting Spring Security] for how to obtain Spring Security.\n\n== Documentation\nBe sure to read the https://docs.spring.io/spring-security/reference/[Spring Security Reference].\nExtensive JavaDoc for the Spring Security code is also available in the https://docs.spring.io/spring-security/site/docs/current/api/[Spring Security API Documentation].\n\nYou may also want to check out https://docs.spring.io/spring-security/reference/whats-new.html[what's new in the latest release].\n\n== Quick Start\nSee https://docs.spring.io/spring-security/reference/servlet/getting-started.html[Hello Spring Security] to get started with a \"Hello, World\" application.\n\n== Building from Source\nSpring Security uses a https://gradle.org[Gradle]-based build system.\nIn the instructions below, https://vimeo.com/34436402[`./gradlew`] is invoked from the root of the source tree and serves as\na cross-platform, self-contained bootstrap mechanism for the build.\n\n=== Prerequisites\nhttps://docs.github.com/en/get-started/quickstart/set-up-git[Git] and the https://www.oracle.com/java/technologies/downloads/#java17[JDK17 build].\n\nBe sure that your `JAVA_HOME` environment variable points to the `jdk-17` folder extracted from the JDK download.\n\n=== Check out sources\n[indent=0]\n----\ngit clone git@github.com:spring-projects/spring-security.git\n----\n\n=== Install all `spring-*.jar` into your local Maven repository.\n\n[indent=0]\n----\n./gradlew publishToMavenLocal\n----\n\n=== Compile and test; build all JARs, distribution zips, and docs\n\n[indent=0]\n----\n./gradlew build\n----\n\nThe reference docs are not currently included in the distribution zip.\nYou can build the reference docs for this branch by running the following command:\n\n----\n./gradlew :spring-security-docs:antora\n----\n\nThat command publishes the docs site to the `_docs/build/site_` directory.\nThe https://github.com/spring-projects/spring-security/tree/docs-build[playbook branch] describes how to build the reference docs in detail.\n\nDiscover more commands with `./gradlew tasks`.\n\n== Getting Support\nCheck out the https://stackoverflow.com/questions/tagged/spring-security[Spring Security tags on Stack Overflow].\nhttps://spring.io/support[Commercial support] is available too.\n\n== Contributing\nhttps://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request[Pull requests] are welcome; see the https://github.com/spring-projects/spring-security/blob/main/CONTRIBUTING.adoc[contributor guidelines] for details.\n\n== License\nSpring Security is Open Source software released under the\nhttps://www.apache.org/licenses/LICENSE-2.0.html[Apache 2.0 license].\n"
        },
        {
          "name": "RELEASE.adoc",
          "type": "blob",
          "size": 12.2548828125,
          "content": "= Release Process\n\nThe release process for Spring Security is entirely automated via the https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc[Spring Security Release Plugin] and https://github.com/spring-io/spring-security-release-tools/tree/main/.github/workflows[reusable workflows].\nThe following table outlines the steps that are taken by the automation.\n\nWARNING: The `5.8.x` branch does not have all of the improvements from the `6.x.x` branches. See \"Status (5.8.x)\" for which steps are still manual.\n\nIn case of a failure, you can follow the links below to read about each step, which includes instructions for performing the step manually if applicable.\nSee <<frequently-asked-questions,FAQ>> for troubleshooting tips.\n\n[cols=\"1,1,1\"]\n|===\n| Step | Status (5.8.x) | Status (6.0.x+)\n\n| <<update-dependencies>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<check-all-issues-are-closed>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<update-release-version>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<tag-release>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<push-release-commit>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<build-locally>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<update-release-notes-on-github>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<update-version-on-project-page>>\n| :x: manual\n| :white_check_mark: automated\n\n| <<close-create-milestone,Close milestone>>\n| :x: manual\n| :white_check_mark: automated\n\n| <<announce-release-on-slack>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<update-to-next-development-version>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<close-create-milestone,Create milestone>>\n| :white_check_mark: automated\n| :white_check_mark: automated\n\n| <<announce-release-on-other-channels>>\n| :x: manual\n| :x: manual\n|===\n\n[#update-dependencies]\n== Update dependencies\n\nDependency versions are managed in the file xref:./gradle/libs.versions.toml[libs.versions.toml] and are automatically updated by xref:./.github/dependabot.yml[dependabot].\n\n[#check-all-issues-are-closed]\n== Check all issues are closed\n\nThe first step of a release is to check if there are any open issues remaining in a milestone.\n\nNOTE: A scheduled release will not proceed if there are any open issues.\n\nTIP: If you need to prevent a release from occurring automatically, the easiest way to block a release is to add an unresolved issue to the milestone.\n\nThe https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc#checkMilestoneHasNoOpenIssues[`checkMilestoneHasOpenIssues`] command will check if there are any open issues for the release.\nBefore running the command manually, replace the following values:\n\n* `<next-version>` - Replace with the title of the milestone you are releasing now (i.e. 5.5.0-RC1)\n* `<github-personal-access-token>` - Replace with a https://github.com/settings/tokens[GitHub personal access token] that has a scope of `public_repo`. This is optional since you are unlikely to reach the rate limit for such a simple check.\n\n[source,bash]\n----\n./gradlew checkMilestoneHasOpenIssues -PnextVersion=<next-version> -PgitHubAccessToken=<github-personal-access-token>\n----\n\nAlternatively, you can manually check using the https://github.com/spring-projects/spring-security/milestones[milestones] page.\n\n[#update-release-version]\n== Update release version\n\nIf all issues for the release are <<check-all-issues-are-closed,closed>>, the version number is automatically updated using the milestone title.\nWhen performing this step manually, update the version number in `gradle.properties` for the release (for example `5.5.0`) and commit the change using the message \"Release x.y.z\".\n\n[#tag-release]\n== Tag release\n\nThe release will automatically be tagged using the milestone title.\nIt is not required to tag manually.\nHowever, you can perform this step manually by running the following command:\n\n[source,bash]\n----\ngit tag 5.5.0\n----\n\n[#push-release-commit]\n== Push release commit\n\nDuring a scheduled release, the release commit will automatically be pushed to trigger a build.\nIf performing this step manually, you can push the commit and tag and GitHub actions will build and deploy the artifacts with the following command:\n\n[source,bash]\n----\ngit push --atomic origin main 5.5.0\n----\n\nThe build will automatically wait for artifacts to be released to Maven Central.\nYou can get notified manually when uploading is complete by running the following:\n\n[source,bash]\n----\n./scripts/release/wait-for-done.sh 5.5.0\n----\n\n[#build-locally]\n== Build\n\nAll checks will automatically be performed by the build prior to uploading the artifacts to Maven Central.\nIf something goes wrong, you can run the build locally using:\n\n[source,bash]\n----\n./gradlew check\n----\n\n[#update-release-notes-on-github]\n== Update release notes on GitHub\n\nOnce the release has been uploaded to Maven Central, release notes will automatically be generated and a GitHub release will be created.\nTo do this manually, you can use the https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc#generateChangelog[`generateChangelog`] command to generate the release notes by replacing:\n\n* `<next-version>` - Replace with the milestone you are releasing now (i.e. 5.5.0)\n\n[source,bash]\n----\n./gradlew generateChangelog -PnextVersion=<next-version>\n----\n\nThen copy the release notes to your clipboard (your mileage may vary with the following command):\n\n[source,bash]\n----\ncat build/changelog/release-notes.md | xclip -selection clipboard\n----\n\nFinally, create the\nhttps://github.com/spring-projects/spring-security/releases[release on\nGitHub], associate it with the tag, and paste the generated notes.\n\nAlternatively, you can run the https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc#createGitHubRelease[`createGitHubRelease`] command to perform these steps automatically, replacing:\n\n* `<next-version>` - Replace with the milestone you are releasing now (i.e. 5.5.0)\n* `<branch>` - The name of the branch to be tagged (if the release commit has not already been tagged)\n* `<github-personal-access-token>` - Replace with a https://github.com/settings/tokens[GitHub personal access token] that has a scope of `write:org`\n\n[source,bash]\n----\n./gradlew createGitHubRelease -PnextVersion=<next-version> -Pbranch=<branch> -PcreateRelease=true -PgitHubAccessToken=<github-personal-access-token>\n----\n\n[#update-version-on-project-page]\n== Update version on project page\n\nThe build will automatically update the project versions on https://spring.io/projects/spring-security#learn.\nTo do this manually, you can use the https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc#createSaganRelease[`createSaganRelease`] and https://github.com/spring-io/spring-security-release-tools/blob/main/release-plugin/README.adoc#deleteSaganRelease[`deleteSaganRelease`] commands using the following parameters:\n\n* `<next-version>` - Replace with the milestone you are releasing now (i.e. 5.5.0)\n* `<previous-version>` - Replace with the previous release which will be removed from the listed versions (i.e. 5.5.0-RC1)\n* `<github-personal-access-token>` - Replace with a https://github.com/settings/tokens[GitHub personal access token] that has a scope of `read:org` as https://spring.io/restdocs/index.html#authentication[documented for spring.io api]\n\n[source,bash]\n----\n./gradlew createSaganRelease deleteSaganRelease -PnextVersion=<next-version> -PpreviousVersion=<previous-version> -PgitHubAccessToken=<github-personal-access-token>\n----\n\nAlternatively, you can log into Contentful and update the versions manually on the Spring Security project page.\n\n[#close-create-milestone]\n== Close / Create milestone\n\nThe release milestone will be automatically closed once the release is complete.\nTo proceed manually, perform the following steps:\n\n1. Visit https://github.com/spring-projects/spring-security/milestones[GitHub\nMilestones] and create a new milestone for the next release version\n2. Move any open issues from the existing milestone you just released to the new milestone\n3. Close the milestone for the release\n\nNOTE: Remember that scheduled releases <<check-all-issues-are-closed,will not proceed>> if there are still open issues in the milestone.\n\n[#announce-release-on-slack]\n== Announce release on Slack\n\nThe release will automatically be announced on Slack.\nIf proceeding manually, announce the release on Slack in the channel https://pivotal.slack.com/messages/spring-release[#spring-release], including the keyword `+spring-security-announcing+` in the message.\nSomething like:\n\n....\nspring-security-announcing `5.5.0` is available now\n....\n\n[#update-to-next-development-version]\n== Update to next development version\n\nAfter the release is complete and artifacts have been uploaded to Maven Central, the build will automatically update to the next development version, commit and push.\nIf proceeding manually, update the version in `gradle.properties` to the next `+SNAPSHOT+` version with the commit message \"Next development version\" and then push.\n\n[#announce-release-on-other-channels]\n== Announce release on other channels\n\n* Create a blog post on Contentful\n* Tweet from https://twitter.com/springsecurity[@SpringSecurity]\n\n[[frequently-asked-questions]]\n== Frequently Asked Questions\n\n*When should I update dependencies manually?* Dependencies should be updated at the latest the end of the week prior to the release. This is usually the Friday following the 2nd Monday of the month (counting from the first week with a Monday). When in doubt, check the https://github.com/spring-projects/spring-security/milestones[milestones] page for release due dates.\n\n*When do scheduled releases occur?* Automated releases are scheduled to occur at *3:15 PM UTC* on the *3rd Monday of the month* (counting from the first week with a Monday).\n\n[NOTE]\nThe scheduled release process currently runs every Monday but only releases when a release is due. See the performed checks below for more information.\n\nThe automated release process occurs on the following branches:\n\n* `main`\n* `6.2.x`\n* `6.1.x`\n* `6.0.x` (commercial only)\n* `5.8.x`\n\nFor each of the above branches, the automated process performs the following checks before proceeding with the release:\n\n1. _Check if the milestone is due today._ This check compares the current (SNAPSHOT) version of the branch with available milestones and chooses the first match (sorted alphabetically). If the due date on the matched milestone is *not* today, the process stops.\n2. _Check if all issues are closed._ This check uses the milestone from the previous step and looks for open issues. If any open issues are found, the process stops.\n\n[IMPORTANT]\nYou should ensure all issues are closed or moved to another milestone prior to a scheduled release.\n\nIf the above checks pass, the version number is updated (in `gradle.properties`) and a commit is pushed to trigger the CI process.\n\n*How do I trigger a release manually?* You can trigger a release manually in two ways:\n\n1. Trigger a release for a particular branch via https://github.com/spring-projects/spring-security/actions/workflows/update-scheduled-release-version.yml[`update-scheduled-release-version.yml`] on the desired branch. The above checks are performed for that branch, and the release will proceed if all checks pass. _This is the recommended way to trigger a release that did not pass the above checks during a regularly scheduled release._\n2. Trigger releases for all branches via https://github.com/spring-projects/spring-security/actions/workflows/release-scheduler.yml[`release-scheduler.yml`] on the `main` branch. The above checks are performed for each branch, and only releases that pass all checks will proceed.\n\n*When should additional manual steps be performed?* All other automated steps listed above occur during the normal CI process. Additional manual steps can be performed at any time once the builds pass and releases are finished.\n\n*What if something goes wrong?* If the normal CI process fails, you can retry by re-running the failed jobs with the \"Re-run failed jobs\" option in GitHub Actions. If changes are required, you should revert the \"Release x.y.z\" commit, delete the tag, and proceed manually.\n"
        },
        {
          "name": "acl",
          "type": "tree",
          "content": null
        },
        {
          "name": "aspects",
          "type": "tree",
          "content": null
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 3.5283203125,
          "content": "import io.spring.gradle.IncludeRepoTask\nimport trang.RncToXsd\n\nbuildscript {\n\tdependencies {\n\t\tclasspath libs.io.spring.javaformat.spring.javaformat.gradle.plugin\n\t\tclasspath libs.io.spring.nohttp.nohttp.gradle\n\t\tclasspath libs.io.freefair.gradle.aspectj.plugin\n\t\tclasspath libs.org.jetbrains.kotlin.kotlin.gradle.plugin\n\t\tclasspath libs.com.netflix.nebula.nebula.project.plugin\n\t}\n\trepositories {\n\t\tmaven { url 'https://plugins.gradle.org/m2/' }\n\t}\n}\n\nplugins {\n\talias(libs.plugins.org.gradle.wrapper.upgrade)\n}\n\napply plugin: 'io.spring.nohttp'\napply plugin: 'locks'\napply plugin: 's101'\napply plugin: 'io.spring.convention.root'\napply plugin: 'org.jetbrains.kotlin.jvm'\napply plugin: 'org.springframework.security.versions.verify-dependencies-versions'\napply plugin: 'org.springframework.security.check-expected-branch-version'\napply plugin: 'io.spring.security.release'\n\ngroup = 'org.springframework.security'\ndescription = 'Spring Security'\n\next.snapshotBuild = version.contains(\"SNAPSHOT\")\next.releaseBuild = version.contains(\"SNAPSHOT\")\next.milestoneBuild = !(snapshotBuild || releaseBuild)\n\nrepositories {\n\tmavenCentral()\n\tmaven { url \"https://repo.spring.io/milestone\" }\n}\n\nspringRelease {\n\tweekOfMonth = 3\n\tdayOfWeek = 1\n\treferenceDocUrl = \"https://docs.spring.io/spring-security/reference/{version}/index.html\"\n\tapiDocUrl = \"https://docs.spring.io/spring-security/site/docs/{version}/api/\"\n\treplaceSnapshotVersionInReferenceDocUrl = true\n}\n\ndef toolchainVersion() {\n\tif (project.hasProperty('testToolchain')) {\n\t\treturn project.property('testToolchain').toString().toInteger()\n\t}\n\treturn 17\n}\n\nsubprojects {\n\tjava {\n\t\ttoolchain {\n\t\t\tlanguageVersion = JavaLanguageVersion.of(toolchainVersion())\n\t\t}\n\t}\n\tkotlin {\n\t\tjvmToolchain {\n\t\t\tlanguageVersion = JavaLanguageVersion.of(17)\n\t\t}\n\t}\n\ttasks.withType(JavaCompile).configureEach {\n\t\toptions.encoding = \"UTF-8\"\n\t\toptions.compilerArgs.add(\"-parameters\")\n\t\toptions.release.set(17)\n\t}\n}\n\nallprojects {\n\tif (!['spring-security-bom', 'spring-security-docs'].contains(project.name)) {\n\t\tapply plugin: 'io.spring.javaformat'\n\t\tapply plugin: 'checkstyle'\n\n\t\tpluginManager.withPlugin(\"io.spring.convention.checkstyle\", { plugin ->\n\t\t\tconfigure(plugin) {\n\t\t\t\tdependencies {\n\t\t\t\t\tcheckstyle libs.io.spring.javaformat.spring.javaformat.checkstyle\n\t\t\t\t}\n\t\t\t\tcheckstyle {\n\t\t\t\t\ttoolVersion = '8.34'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (project.name.contains('sample')) {\n\t\t\ttasks.whenTaskAdded { task ->\n\t\t\t\tif (task.name.contains('format') || task.name.contains('checkFormat') || task.name.contains(\"checkstyle\")) {\n\t\t\t\t\ttask.enabled = false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ndevelocity {\n\tbuildScan {\n\t\ttermsOfUseUrl = 'https://gradle.com/help/legal-terms-of-use'\n\t\ttermsOfUseAgree = 'yes'\n\t}\n}\n\nnohttp {\n\tsource.exclude \"buildSrc/build/**\", \"javascript/.gradle/**\", \"javascript/package-lock.json\", \"javascript/node_modules/**\", \"javascript/build/**\", \"javascript/dist/**\"\n\tsource.builtBy(project(':spring-security-config').tasks.withType(RncToXsd))\n}\n\ntasks.register('cloneRepository', IncludeRepoTask) {\n\trepository = project.getProperties().get(\"repositoryName\")\n\tref = project.getProperties().get(\"ref\")\n\tvar defaultDirectory = project.file(\"build/tmp/clone\")\n\toutputDirectory = project.hasProperty(\"cloneOutputDirectory\") ? project.file(\"$cloneOutputDirectory\") : defaultDirectory\n}\n\ns101 {\n\trepository = 'https://structure101.com/binaries/latest'\n\tconfigurationDirectory = project.file(\"etc/s101\")\n}\n\nwrapperUpgrade {\n\tgradle {\n\t\t'spring-security' {\n\t\t\trepo = 'spring-projects/spring-security'\n\t\t\tbaseBranch = '6.2.x' // runs only on 6.2.x and the update is merged forward to main\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "cas",
          "type": "tree",
          "content": null
        },
        {
          "name": "class_mapping_from_2.0.x.txt",
          "type": "blob",
          "size": 2.771484375,
          "content": "Class Mapping from 2.0.x to 3.0.x\n------------------------------------\n\nApproximate mapping of classes which have new names, or new implementations in 3.0. These may not be a \nstraightforward replacement, but the listed classes and interfaces from 3.0 will give some indication of where to\nlook in the APIs when upgrading.\n\nAbstractProcessingFilter, AbstractAuthenticationProcessingFilter\nAbstractFallbackMethodDefinitionSource, AbstractFallbackMethodSecurityMetadataSource\nAnonymousProcessingFilter, AnonymousAuthenticationFilter\nAuthenticationFailureConcurrentLoginEvent\nAuthenticationProcessingFilter, UsernamePasswordAuthenticationFilter\nAuthenticationProcessingFilterEntryPoint, LoginUrlAuthenticationEntryPoint\n\nBasicProcessingFilter, BasicAuthenticationFilter\nBasicProcessingFilterEntryPoint, BasicAuthenticationEntryPoint\n\nCasProcessingFilter, CasAuthenticationFilter\nCasProcessingFilterEntryPoint, CasAuthenticationEntryPoint\nConcurrentSessionController, ConcurrentSessionControlStrategy (Now implemented through the SessionManagementFilter)\nConfigAttributeDefinition, Collection<ConfigAttribute>\n\nDefaultFilterInvocationDefinitionSource, DefaultFilterInvocationSecurityMetadataSource\nDigestProcessingFilter, DigestAuthenticationFilter\nDigestProcessingFilterEntryPoint, DigestAuthenticationEntryPoint\n\nFilterInvocationDefinitionSource, FilterInvocationSecurityMetadataSource\n\nHttpSessionContextIntegrationFilter, SecurityContextPersistenceFilter (see also SecurityContextRepository)\n\nJsr250MethodDefinitionSource, Jsr250MethodSecurityMetadataSource\n\nMapBasedMethodDefinitionSource, MapBasedMethodSecurityMetadataSource\nMethodDefinitionAttributes\nMethodDefinitionSource, MethodSecurityMetadataSource\nMethodDefinitionSourceAdvisor, MethodSecurityMetadataSourceAdvisor\nMethodDefinitionSourceEditor, MethodSecurityMetadataSourceEditor\n\nObjectDefinitionSource SecurityMetadataSource\nOpenIDAuthenticationProcessingFilter, OpenIDAuthenticationFilter\n\nRedirectUtils, DefaultRedirectStrategy\nRememberMeProcessingFilter, RememberMeAuthenticationFilter\nRequestHeaderPreAuthenticatedProcessingFilter, RequestHeaderAuthenticationFilter\n\nSecuredMethodDefinitionSource, SecuredAnnotationSecurityMetadataSource\nSessionFixationProtectionFilter, SessionManagementFilter (See also SessionAuthenticationStrategy, SessionFixationProtectionStrategy)\nSpringSecurityContextSource, LdapContextSource (from Spring LDAP 1.3, which introduced the ability to bind as a specific user)\nSwitchUserFilter, SwitchUserProcessingFilter\n\nTargetUrlResolver, AuthenticationSuccessHandler (see also AuthenticationFailureHandler)\nTargetUrlResolverImpl, SavedRequestAwareAuthenticationSuccessHandler (see also SimpleUrlAuthenticationSuccessHandler)\n\nWASSecurityHelper, DefaultWASUsernameAndGroupsExtractor\n\nX509PreAuthenticatedProcessingFilter, X509AuthenticationFilter\n\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "git",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.798828125,
          "content": "#\n# Copyright 2002-2024 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nspringBootVersion=3.3.3\nversion=6.5.0-SNAPSHOT\nsamplesBranch=main\norg.gradle.jvmargs=-Xmx3g -XX:+HeapDumpOnOutOfMemoryError\norg.gradle.parallel=true\norg.gradle.caching=true\nkotlin.stdlib.default.dependency=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "itest",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "ldap",
          "type": "tree",
          "content": null
        },
        {
          "name": "messaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "notice.txt",
          "type": "blob",
          "size": 1.0205078125,
          "content": "   ======================================================================\n   == NOTICE file corresponding to section 4(d) of the Apache License, ==\n   == Version 2.0, in this case for the Spring Security distribution.  ==\n   ======================================================================\n\n   The end-user documentation included with a redistribution, if any,\n   must include the following acknowledgement:\n\n     \"This product includes software developed by Spring Security\n      Project (https://www.springframework.org/security).\"\n\n   Alternately, this acknowledgement may appear in the software itself,\n   if and wherever such third-party acknowledgements normally appear.\n\n   The names \"Spring\", \"Spring Security\", \"Spring Security System\",\n   \"SpringSource\", \"Acegi\", \"Acegi Security\", \"Acegi Security System\",\n   \"Acegi\" or any derivatives thereof may not be used to endorse or\n   promote products derived from this software without prior written\n   permission. For written permission, please contact \n   ben.alex@springsource.com.\n"
        },
        {
          "name": "oauth2",
          "type": "tree",
          "content": null
        },
        {
          "name": "rsocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "saml2",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.40234375,
          "content": "pluginManagement {\n\trepositories {\n\t\tgradlePluginPortal()\n\t}\n}\n\nplugins {\n\tid \"io.spring.develocity.conventions\" version \"0.0.22\"\n}\n\ndependencyResolutionManagement {\n\trepositories {\n\t\tmavenCentral()\n\t\tmaven { url \"https://repo.spring.io/milestone\" }\n\t}\n}\n\nrootProject.name = 'spring-security'\n\nFileTree buildFiles = fileTree(rootDir) {\n\tList excludes = gradle.startParameter.projectProperties.get(\"excludeProjects\")?.split(\",\")\n\tinclude '**/*.gradle', '**/*.gradle.kts'\n\texclude 'build', '**/gradle', 'settings.gradle', 'buildSrc', '/build.gradle', '.*', 'out'\n\texclude '**/grails3'\n\tif(excludes) {\n\t\texclude excludes\n\t}\n}\n\nString rootDirPath = rootDir.absolutePath + File.separator\nbuildFiles.each { File buildFile ->\n\n\tboolean isDefaultName = 'build.gradle'.equals(buildFile.name)\n\tboolean isKotlin = buildFile.name.endsWith(\".kts\")\n\tif(isDefaultName) {\n\t\tString buildFilePath = buildFile.parentFile.absolutePath\n\t\tString projectPath = buildFilePath.replace(rootDirPath, '').replace(File.separator, ':')\n\t\tinclude projectPath\n\t} else {\n\t\tString projectName\n\t\tif (isKotlin) {\n\t\t\tprojectName = buildFile.name.replace('.gradle.kts', '')\n\t\t} else {\n\t\t \tprojectName = buildFile.name.replace('.gradle', '')\n\t\t}\n\t\tString projectPath = ':' + projectName;\n\t\tinclude projectPath\n\t\tdef project = findProject(\"${projectPath}\")\n\t\tproject.name = projectName\n\t\tproject.projectDir = buildFile.parentFile\n\t\tproject.buildFileName = buildFile.name\n\t}\n}\n"
        },
        {
          "name": "taglibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}