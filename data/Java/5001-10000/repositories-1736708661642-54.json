{
  "metadata": {
    "timestamp": 1736708661642,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/epoxy",
      "stars": 8539,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# macOS\n.DS_Store\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# IntelliJ\n*.iml\n.idea/\n!.idea/codeStyles/\n!.idea/codeStyleSettings.xml\n\n# Android\n.gradle\nbuild/\nlocal.properties\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 35.7099609375,
          "content": "# 5.1.4\nChange the way the Compose interop works to avoid Android 12 bug (#1370)\n\n# 5.1.3\nUpdate to kotlin 1.8.21\nFix click listener kapt bug (#1327)\nResolve unchecked call warning for WrappedEpoxyModelClickListener (#1337)\nFix refresh KDoc (#1334)\nepoxy-kspsample : use ksp block to specify arguments (#1347)\n\n# 5.1.2\n\nUpdates kotlin, ksp, and the xprocessing library.\n\nNotably, the androidx.room:room-compiler-processing library (aka xprocessing) has been updated to 2.6.0-alpha01. This version is incompatible with previous versions due to a breaking API change. All annotation processors using this library must be on the same version. Other annotation processors such as Epoxy and Paris also use xprocessing and if you use them you need to use a version of them that also uses xprocessing 2.6.0-alpha01\n\n# 5.1.1\nRemove incorrect ksp symbol validation in processing of @EpoxyModelClass\n\n# 5.1.0\nUpdates Kotlin to 1.7.20 and KSP to 1.7.20-1.0.7, as well as the room compiler processing (xprocessing) library to 2.5.0-beta01.\n\nAlso deletes the epoxy-paging artifact in favor of the newer epoxy-paging3\n\n# 5.0.0\nThis adds support for Kotlin Symbol Processing, while maintaining backwards compatibility with java annotation processing via the xprocessing library from Room.\n\nThis includes a major version bump to 5.0.0 because there may be slight behavior differences with KSP, especially for generic types in generated code. For example, if you previously had an epoxy attribute in java source code with a raw type it may now appear in the generated code with a wildcard type, which may require tweaking the type that is passed to the model.\n\nAdditionally, some type checking was improved, for example more accurate validation of proper equals and hashcode implementations.\n\nTo use Epoxy with KSP, simply apply it with the ksp gradle plugin instead of kapt (https://github.com/google/ksp/blob/main/docs/quickstart.md). See the new epoxy-kspsample module for an example.\n\nNote that unfortunately the databinding processor does NOT support KSP, simply because Android databinding itself uses KAPT and KSP cannot currently depend on KAPT sources. The code changes are in place to enable KSP with databinding once the databinding plugin from Android supports KSP (although this is unlikely) - alternatively it may be possible to configure the KSP plugin to run after KAPT and depend on its outputs (you're on your own if you want to try that).\n\nAlso, parallel processing support was removed because it is not compatible with KSP.\n\nWe have also added easy interop with Jetpack Compose via functions in the `epoxy-composeinterop` artifact.\nSee the epoxy-composesample module for example usage.\n\n# 4.6.4 (September 23, 2021)\n- Clean up dependency for the experimental epoxy module\n\n# 4.6.3 (September 11, 2021)\n- Add EpoxyModel#preBind hook(#1225)\n- Add unbind extension to ItemViewBindingEpoxyHolder (#1223)\n- Add missing loadStateFlow to PagingDataEpoxyController (#1209)\n\n# 4.6.2 (June 11, 2021)\nFix Drag n Drop not working in 4.6.1 (#1195)\n\n# 4.6.1 (May 13, 2021)\nAdds \"epoxyDisableDslMarker\" annotation processor flag which you can use to delay migration to the model building scope DLSMarker introduced in 4.6.0 if it is a large breaking change for your project.\n\nNote that this only applies to your project modules that you apply it to, and does not apply to the handful of models that ship with the Epoxy library (like the Carousel or `group` builder).\n\nFor example:\n```groovy\nproject.android.buildTypes.all { buildType ->\n    buildType.javaCompileOptions.annotationProcessorOptions.arguments =\n            [\n                    epoxyDisableDslMarker     : \"true\",\n            ]\n}\n```\n\n# 4.6.0 (May 12, 2021)\n- View Binder Support (#1175) Bind epoxy models to views outside of a RecyclerView.\n\n### Potentially Breaking\n- Use kotlin dsl marker for model building receivers (#1180)\n\nThis change uses Kotlin's DSL marker annotation to enforce proper usage of model building extension\nfunctions. You may now need to change some references in your model building code to explicitly reference properties with `this`.\n\n# 4.5.0 (April 13, 2021)\n- Fix generated code consistency in builder interfaces (#1166)\n- Provided support to invalidate `modelCache` in `PagingDataEpoxyController` (#1161)\n- Explicitly add public modifier (#1162)\n- Unwrap context to find parent activity in order to share viewpool when using Hilt (#1157)\n\n# 4.4.4 (Mar 24, 2021)\n- Provide support for snapshot() function in PagingDataEpoxyController (#1144)\n\n# 4.4.3 (Mar 17, 2021)\n- Fixed interface model related regression introduced in the previous release.\n\n# 4.4.2 (Mar 1, 2021)\n- Updated package name of the model class generated for an interface\n\n# 4.4.1 (Feb 22, 2021)\n- Support for Paging3 (#1126) (Thanks to @osipxd and @anhanh11001!)\n- Update KotlinPoet to 1.7.2 (#1117)\n\n# 4.4.0 (Feb 18, 2021)\nBad release, don't use\n\n# 4.3.1 (Dec 2, 2020)\n- Fix ANR and view pool resolution in nested group (#1101)\n\n# 4.3.0 (Dec 1, 2020)\n- ModelGroupHolder get recycle pool from parent (#1097)\n- Add support for `EpoxyModelGroup` in the `EpoxyVisibilityTracker` (#1091)\n- Convert EpoxyVisibilityTracker code to Kotlin (#1090)\n\n## Breaking Changes\nNote that due to the conversion of EpoxyVisibilityTracker to kotlin you now need to access `EpoxyVisibilityTracker.partialImpressionThresholdPercentage` as a property\n`epoxyVisibilityTracker.setPartialImpressionThresholdPercentage(value)` -> `epoxyVisibilityTracker.partialImpressionThresholdPercentage = value`\n\nAlso, the ModelGroupHolder improvement required the `ModelGroupHolder#createNewHolder` function to change its signature to accept a `ViewParent` parameter.\n\nIf you override `createNewHolder()` anywhere you will need to change it to `createNewHolder(@NonNull ViewParent parent)`\n\n# 4.2.0 (Nov 11, 2020)\n- Add notify model changed method (#1063)\n- Update to Kotlin 1.4.20-RC and remove dependency on kotlin-android-extensions\n\n# 4.1.0 (Sept 17, 2020)\n- Fix some synchronization issues with the parallel Epoxy processing option\n- Add view visibility checks to EpoxyVisibilityItem and decouple RecyclerView #1052\n\n# 4.0.0 (Sept 5, 2020)\n\n## New\n- Incremental annotation processing for faster builds\n- Support for Android Jetpack Paging v3 library in new `epoxy-paging3` artifact\n- Model group building with Kotlin DSL (#1012)\n- A new annotation processor argument `logEpoxyTimings` can be set to get a detailed breakdown of how long the processors took and where they spent their time (off by default)\n- Another new argument `enableParallelEpoxyProcessing` can be set to true to have the annotation processor process annotations and generate files in parallel (via coroutines).\n\nYou can enable these processor options in your build.gradle file like so:\n```\nproject.android.buildTypes.all { buildType ->\n  buildType.javaCompileOptions.annotationProcessorOptions.arguments =\n      [\n          logEpoxyTimings  : \"true\",\n          enableParallelEpoxyProcessing     : \"true\"\n      ]\n}\n```\n\nParallel processing can greatly speed up processing time (moreso than the incremental support), but given the hairy nature of parallel processing it is still incubating.\nPlease report any issues or crashes that you notice.\n(We are currently using parallel mode in our large project at Airbnb with no problems.)\n\n- Add options to skip generation of functions for getters, reset, and method overloads to reduce generated code\n    - New annotation processor options are:\n        - epoxyDisableGenerateOverloads\n        - epoxyDisableGenerateGetters\n        - epoxyDisableGenerateReset\n\n\n## Fixes\n- Synchronize ListUpdateCallback and PagedListModelCache functions (#987)\n- Avoid generating bitset checks in models when not needed (reduces code size)\n- Fix minor memory leak\n\n## Breaking\n\n- Annotations that previously targeted package elements now target types (classes or interfaces).\n  This includes: `EpoxyDataBindingPattern`, `EpoxyDataBindingLayouts`, `PackageModelViewConfig`, `PackageEpoxyConfig`\n  This was necessary to work around an incremental annotation processor issue where annotation on package-info elements are not properly recompiled\n\n- In order to enable incremental annotation processing a change had to be made in how the processor of\n  `@AutoModel` annotations work. If you use `@AutoModel` in an EpoxyController the annotated Model types\n  must be either declared in a different module from the EpoxyController, or in the same module in the same java package.\n\n  Also make sure you have kapt error types enabled.\n\n  However, generally `@AutoModel` is considered legacy and is not recommended. It is a relic of Java Epoxy usage\n  and instead the current best practice is to use Kotlin with the Kotlin model extension functions to build models.\n\n- Removed support for generating Epoxy models from Litho components\n\n# 4.0.0-beta6 (July 15, 2020)\n- PackageModelViewConfig can now be applied to classes and interfaces in addition to package-info.java\n\n# 4.0.0-beta5 (July 9, 2020)\nFixes:\n- An occasional processor crash when the option to log timings is enabled\n- Incremental annotation processing of databinding models would fail to generate models (#1014)\n\nBreaking!\n- The annotation that support databinding, `EpoxyDataBindingLayouts` and `EpoxyDataBindingPattern`,\nmust now be placed on a class or interface instead of in a `package-info.java` file. The interface\nor class must be in Java, Kotlin is not supported. This is necessary to support incremental processing.\n\nExample usage:\n```java\npackage com.example.app;\n\nimport com.airbnb.epoxy.EpoxyDataBindingLayouts;\nimport com.airbnb.epoxy.EpoxyDataBindingPattern;\n\n@EpoxyDataBindingPattern(rClass = R.class, layoutPrefix = \"my_view_prefix\")\n@EpoxyDataBindingLayouts({R.layout.my_model_layout})\ninterface EpoxyDataBindingConfig {} \n```\n\n# 4.0.0-beta4 (June 1, 2020)\nFixes:\n- Synchronize ListUpdateCallback and PagedListModelCache functions (#987)\n- 4.0.0.beta1 generating duplicate method layout(int) #988\n\n# 4.0.0-beta3 (May 27, 2020)\n- Sort functions in generated kotlin extension function files deterministically to prevent generated sources from changing\n- Avoid generating bitset checks in models when not needed\n- Add options to skip generation of functions for getters, reset, and method overloads to reduce generated code\n\nNew annotation processor options are:\n- epoxyDisableGenerateOverloads\n- epoxyDisableGenerateGetters\n- epoxyDisableGenerateReset\n\nThese can also be controlled (and overridden) on a per package level with the `PackageModelViewConfig` package annotation.\n\n# 4.0.0-beta1 (May 22, 2020)\n- Support for incremental annotation processing as an Aggregating processor (#972)\n- Removed Litho support\n- A new annotation processor argument `logEpoxyTimings` can be set to get a detailed breakdown of how long the processors took and where they spent their time (off by default)\n- Another new argument `enableParallelEpoxyProcessing` can be set to true to have the annotation processor process annotations and generate files in parallel (via coroutines).\n\nYou can enable these processor options in your build.gradle file like so:\n```\nproject.android.buildTypes.all { buildType ->\n  buildType.javaCompileOptions.annotationProcessorOptions.arguments =\n      [\n          logEpoxyTimings  : \"true\",\n          enableParallelEpoxyProcessing     : \"true\"\n      ]\n}\n```\n\nParallel processing can greatly speed up processing time (moreso than the incremental support), but given the nature of parallel processing it is still incubating.\nPlease report any issues or crashes that you notice.\n(We are currently using parallel mode in our large project at Airbnb with no problems.)\n\n## Breaking\nIn order to enable incremental annotation processing a change had to be made in how the processor of\n`@AutoModel` annotations work. If you use `@AutoModel` in an EpoxyController the annotated Model types\nmust be either declared in a different module from the EpoxyController, or in the same module in the same java package.\n\nAlso make sure you have kapt error types enabled.\n\nHowever, generally `@AutoModel` is considered legacy and is not recommended. It is a relic of Java Epoxy usage\nand instead the current best practice is to use Kotlin with the Kotlin model extension functions to build models.\n \n# 3.11.0 (May 20, 2020)\n- Introduce partial impression visibility states (#973)\n- Fix sticky header crash (#976)\n\n# 3.10.0 (May 15, 2020)\n- Carousel building with Kotlin DSL (#967)\n- Android ViewBinding: added an example in the sample project. (#939)\n- Fix setter with default value lookup in kotlin 1.4 (#966)\n- Change \"result\" property name in generated model (#965)\n- Add support for Sticky Headers (#842)\n- Use measured width/height if it exists in Carousel. (#915)\n- Add a getter to EpoxyViewHolder.getHolder(). (#952) (#953)\n- Fix visibility tracking during RecyclerView animations (#962)\n- Fix leak in ActivityRecyclerPool ((#906)\n- Rename ResultCallack to ResultCallback in AsyncEpoxyDiffer (#899)\n- Fix incorrect license attributes in POM file (#898)\n\n# 3.9.0 (Dec 17, 2019)\n- Fix reading EpoxyDataBindingPattern enableDoNotHash (#837) \n- Make EpoxyRecyclerView.setItemSpacingPx() open (#829)\n- Use same version for Mockito Core and Inline (#860)\n- Minor documentation and variable name updates. (#870)\n- Move epoxy-modelfactory tests to their own module (#834) \n- Remove executable bit from non-executable files (#864)\n- Various repo clean ups and version bumps\n\n# 3.8.0 (Sept 16, 2019)\n- Add support for Kotlin delegation via annotated interface properties #812\n- Fix checked change crash and improve debug errors #806\n- Remove extra space in Kotlin extensions #777\n- Update project to AGP 3.5, Kotlin 1.3.50, Gradle 5.6\n\n# 3.7.0 (July 1, 2019)\n- **New** Add a method to request visibility check externally (https://github.com/airbnb/epoxy/pull/775)\n\n# 3.6.0 (June 18, 2019)\n- **New** Preloader system with glide extensions https://github.com/airbnb/epoxy/pull/766\n- **Fixed** model click listener crashing on nested model https://github.com/airbnb/epoxy/pull/767\n\n# 3.5.1 (May 21, 2019)\n- Bumped Kotlin to 1.3.31\n\n# 3.5.0 (May 8, 2019)\n- **New** Converted EpoxyRecyclerView to Kotlin (you may need to update your usage for this). Also added built in support for `EpoxyRecyclerView#withModels` for easy inline model building with Kotlin.\n- **Fixed** Crashes in visibility tracking\n\n# 3.4.2 (April 18, 2019)\n- **Fixed** Kotlin default param handling had issues with overloaded functions\n\n# 3.4.1 (April 16, 2019)\n- **New** Support kotlin default parameters in @ModelView classes (https://github.com/airbnb/epoxy/pull/722)\n\n# 3.4.0 (April 10, 2019)\n- **New** Generate OnModelCheckedChangeListener override for props of type `CompoundButton.OnCheckedChangeListener` (https://github.com/airbnb/epoxy/pull/725)\n- **New** Extract ID generation methods to new public IdUtils class (https://github.com/airbnb/epoxy/pull/724)\n- **Changed** Reset controller state on failed model build (https://github.com/airbnb/epoxy/pull/720)\n- **Changed** Disabled the auto-detach behavior on Carousels by default (https://github.com/airbnb/epoxy/pull/688)\n\n# 3.3.0 (Feb 5, 2019)\n- **Fixed** Two issues related to the recent EpoxyModelGroup changes (https://github.com/airbnb/epoxy/pull/676)\n\n# 3.2.0 (Jan 21, 2019)\n- **New** Enable recycling of views within EpoxyModelGroup (https://github.com/airbnb/epoxy/pull/657)\n- **New** Add support to tracking visibility in nested RecyclerViews (https://github.com/airbnb/epoxy/pull/633)\n- **New** Add method to clear cache in paging controller (https://github.com/airbnb/epoxy/pull/586)\n- **Fix** Crashes from synchronization in PagedListEpoxyController (https://github.com/airbnb/epoxy/pull/656)\n- **Fix** Get onSwipeProgressChanged callbacks on return to original item position (https://github.com/airbnb/epoxy/pull/654)\n\n# 3.1.0 (Dec 4, 2018)\n- **Fix** Memory leak in debug mode is removed (https://github.com/airbnb/epoxy/pull/613)\n- **Fix** For visibility callbacks, wrong visibility when the view becomes not visible (https://github.com/airbnb/epoxy/pull/619)\n\n# 3.0.0 (Nov 13, 2018)\n\n- **Breaking** Migrated to androidx packages (Big thanks to jeffreydelooff!)\n\n- **Breaking** The `Carousel.Padding` class changed the ordering of its parameters to match Android's ordering of \"left, top, right, bottom\". (https://github.com/airbnb/epoxy/pull/536 thanks to martinbonnin)\n    \n   This change won't break compilation, so you _must_ manually change your parameter ordering, otherwise you will get unexpected padding results.\n\n# 2.19.0 (Oct 18, 2018)\nThis release adds built in support for monitoring visibility of views in the RecyclerView. (https://github.com/airbnb/epoxy/pull/560)\n\nUsage instructions and details are in the wiki - https://github.com/airbnb/epoxy/wiki/Visibility-Events\n\nHuge thanks to Emmanuel Boudrant for contributing this!\n\n# 2.18.0 (Sep 26, 2018)\n- **New** A new `PagedListEpoxyController` to improve integration with the Android Paging architecture component (#533 Thanks to Yigit!)\n          With this change the old `PagingEpoxyController` has been deprecated, and [the wiki](https://github.com/airbnb/epoxy/wiki/Paging-Support) is updated.\n\n- **New** Add databinding option to not auto apply DoNotHash (#539)\n- **Fixed** Fix AsyncEpoxyController constructor to correctly use boolean setting (#537)\n- **Fixed** `app_name` is removed from module manifests (#543 Thanks @kettsun0123!)\n\n\n# 2.17.0 (Sep 6, 2018)\n- **New** Add support for setting the Padding via resource or directly in dp (https://github.com/airbnb/epoxy/pull/528 Thanks to pwillmann!)\n- **Fixed** Strip kotlin metadata annotation from generated classes (https://github.com/airbnb/epoxy/pull/523)\n- **Fixed** Reflect the annotations declared in constructor params (https://github.com/airbnb/epoxy/pull/519 Thanks to Shaishav Gandhi!)\n\n# 2.16.4 (Aug 29, 2018)\n- **New** `EpoxyAsyncUtil` and `AsyncEpoxyController` make it easier to use Epoxy's async behavior out of the box\n- **New** Epoxy's background diffing posts messages back to the main thread asynchronously so they are not blocked by waiting for vsync\n\n# 2.16.3 (Aug 24, 2018)\n- **New** Add `AsyncEpoxyController` for easy access to async support. Change background diffing to post asynchronously to the main thread (https://github.com/airbnb/epoxy/pull/509)\n\n# 2.16.2 (Aug 23, 2018)\n- **Fix** Kotlin lambdas can be used in model constructors (https://github.com/airbnb/epoxy/pull/501)\n- **New** Added function to check whether a model build is pending (https://github.com/airbnb/epoxy/pull/506)\n\n# 2.16.1 (Aug 15, 2018)\n- **Fix** Update EpoxyController async model building so threading works with tests (https://github.com/airbnb/epoxy/pull/504)\n\n# 2.16.0 (Aug 7, 2018)\n- **New** EpoxyController now supports asynchronous model building and diffing by allowing you to provide a custom Handler to run these tasks. See the [wiki](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#asynchronous-support) for more details.\n\n- **New** The `EpoxyController#addModelBuildListener` method was added to support listening for when model changes are dispatched to the recyclerview.\n\n# 2.15.0 (July 29, 2018)\n- **New** Added kotlin sample code for building models. Updated wiki with info (https://github.com/airbnb/epoxy/wiki/Kotlin-Model-Examples)\n\n- **Fix**  Generated kotlin extension functions now work with Models with type variables (https://github.com/airbnb/epoxy/pull/478)\n- **Fix**  Backup is not enabled in manifest now (https://github.com/airbnb/epoxy/pull/481)\n- **Fix**  Click listener setter on generated model has correct nullability annotation (https://github.com/airbnb/epoxy/pull/458)\n- **Fix**  Avoid kotlin crash using toString on lambdas (https://github.com/airbnb/epoxy/pull/482)\n- **Fix**  If EpoxyModelGroup has annotations the generated class now calls super methods correctly.  (https://github.com/airbnb/epoxy/pull/483)\n\n# 2.14.0 (June 27, 2018)\n- **New** Experimental support for creating Epoxy models from arbitrary data formats (#450)\n\n# 2.13.0 (June 19, 2018)\n- **Fix** Reduce memory usage in model groups and differ (#433)\n- **Fix** Support for wildcards in private epoxy attributes (#451)\n- **Fix** Generated Kotlin Extensions Don't Adhere to Constructor Nullability (#449)\n- **Fix** Infinite loop in annotation processor (#447)\n\n# 2.12.0 (April 18, 2018)\n\n- **Breaking** Several updates to the Paging Library integration were made (https://github.com/airbnb/epoxy/pull/421)\n    - The `PagingEpoxyController` class had the methods `setNumPagesToLoad` and `setPageSizeHint` removed\n    - Page hints are now taken from the `Config` object off of the PagedList. See the `setConfig` javadoc for information on how config values are used: https://github.com/airbnb/epoxy/blob/master/epoxy-paging/src/main/java/com/airbnb/epoxy/paging/PagingEpoxyController.java#L220\n    - Several tweaks were made to how the page size and prefetch distance affect model rebuilding. Take some time to make sure your config values make sense and produce good results for your use case\n    - A crash on empty list was fixed (https://github.com/airbnb/epoxy/issues/420)\n\n- **New** The [Paris](https://github.com/airbnb/paris) library is now officially supported to allow dynamically styling RecyclerView items though Epoxy models. See [the wiki](https://github.com/airbnb/epoxy/wiki/Paris-Integration-(Dynamic-Styling)) for more info.\n\n\n# 2.11.0 (April 7, 2018)\n\n- **Fix** Make databinding work with Android Studio 3.1 (https://github.com/airbnb/epoxy/pull/418)\n- Make `EpoxyController#isBuildingModels` public (https://github.com/airbnb/epoxy/pull/406\n\n\n# 2.10.0 (February 25, 2018)\n\n- **Improved** Allow the `Model_` class suffix for models generated via `@ModelView` to be customized (https://github.com/airbnb/epoxy/pull/402 Big thanks to geralt-encore!)\n\n# 2.9.0 (January 29, 2018)\n- **Improved** Global defaults for EpoxyController settings. Set duplicate filtering and exception handlers for all your controllers. (https://github.com/airbnb/epoxy/pull/394)\n- **Improved** Add `@NonNull` annotations in EpoxyModel for better Kotlin interop\n\n- **Fixed** Model click listeners now rebind correctly on partial model diffs (https://github.com/airbnb/epoxy/pull/393)\n- **Fixed** Update Android Paging library to fix placeholder support (Thanks @wkranich! https://github.com/airbnb/epoxy/pull/360)\n- **Fixed** Improve error message for inaccessible private fields (https://github.com/airbnb/epoxy/pull/388)\n\n# 2.8.0 (December 22, 2017)\n\n- **New** Use `@ModelProp` directly on fields to avoid creating a setter (https://github.com/airbnb/epoxy/pull/343)\n- **New** Set EpoxyRecyclerView item spacing via xml attribute (https://github.com/airbnb/epoxy/pull/364)\n- **New** More flexibility over setting Carousel padding values (https://github.com/airbnb/epoxy/pull/369)\n- **New** Allow custom EpoxyModelGroup root view (https://github.com/airbnb/epoxy/pull/370)\n\n- **Fixed** Public visibility settings of the Carousel snap helper settings (https://github.com/airbnb/epoxy/pull/356)\n- **Fixed** Add more nullability annotations to better support Kotlin\n- **Fixed** Saving view state now works better (https://github.com/airbnb/epoxy/pull/367)\n\n# 2.7.3 (November 21, 2017)\n\n- **Fixed** When a model changed and a partial update was bound to an existing view the wrong values could be set for prop groups (https://github.com/airbnb/epoxy/pull/347)\n\n# 2.7.2 (October 28, 2017)\n\n- **Fixed** Using `EpoxyDataBindingPattern` could result in the wrong package being used for the BR class in generated models.\n\n# 2.7.1 (October 24, 2017)\nSeveral fixes:\n\n- https://github.com/airbnb/epoxy/pull/332\n- https://github.com/airbnb/epoxy/pull/329\n- https://github.com/airbnb/epoxy/pull/330\n- https://github.com/airbnb/epoxy/pull/331\n\n# 2.7.0 (October 17, 2017)\n\n* **New** If a `@ModelView` generated model has a custom base class the generated model will now inherit constructors from the base class (https://github.com/airbnb/epoxy/pull/315)\n* **New** Use the `EpoxyDataBindingPattern` annotation to specify a naming pattern for databinding layouts. This removes the need to declare every databinding layout explicitly ([Wiki](https://github.com/airbnb/epoxy/wiki/Data-Binding-Support#automatic-based-on-naming-pattern) - https://github.com/airbnb/epoxy/pull/319)\n* **New** If a view with `@ModelView` implements an interface then the generated model will implement a similar interface, enabling polymorphism with models. [Wiki](https://github.com/airbnb/epoxy/wiki/Generating-Models-from-View-Annotations#view-interfaces)\n\n* **Improvement** `PagingEpoxyController` now has getters to access the underlying data lists (Thanks to @pcqpcq - https://github.com/airbnb/epoxy/pull/317)\n* **Improvement** `EpoxyModelGroup` now supports partial rebinds (https://github.com/airbnb/epoxy/pull/316)\n\n# 2.6.0 (October 10, 2017)\n* **Improvement** If a `OnModelClickListener` is used it will not be called if a view is clicked while it is being removed or otherwise has no position (https://github.com/airbnb/epoxy/issues/293 - Thanks @niccorder!)\n\n* **New** `EpoxyRecyclerView` and `Carousel` provide out of the box integration with Epoxy along with other enhancements over regular RecyclerView (https://github.com/airbnb/epoxy/wiki/EpoxyRecyclerView)\n* **New** `EpoxyPagingController` provides integration with the Android Paging architecture component as well as normal, large lists of items (https://github.com/airbnb/epoxy/wiki/Large-Data-Sets)\n\n#### Kotlin\n* **Improvement** Disable kotlin extension function generation with the annotation processor flag `disableEpoxyKotlinExtensionGeneration` (https://github.com/airbnb/epoxy/pull/309)\n* **Fix** If a model has a non empty constructor the generated extension function will now use it.\n\n\n# 2.5.1 (October 2, 2017)\n* **Fixed** The wrong import was being generated for models using a view holder in 2.5.0 (https://github.com/airbnb/epoxy/pull/294)\n* **Fixed** Fix generated code failing to compile if a subclass of View.OnClickListener is used as an attribute (https://github.com/airbnb/epoxy/pull/296)\n\n\n# 2.5.0 (September 14, 2017)\n* **New Feature** Epoxy now generates a Kotlin DSL to use when building models in your EpoxyController! See [the wiki](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#usage-with-kotlin) for details\n* **New Feature** You can use the `autoLayout` parameter in `@ModelView` instead of needing to create a layout resource for `defaultLayout`. Epoxy will then create your view programmatically (https://github.com/airbnb/epoxy/pull/282).\n\n**Breaking**\n* The `onSwipeProgressChanged` callback in `EpoxyTouchHelper` had a `Canvas` parameter added (https://github.com/airbnb/epoxy/pull/280). You will need to update any of your usages to add this. Sorry for the inconvenience; this will hopefully help you add better swipe animations.\n\n\n# 2.4.0 (September 4, 2017)\n* **Improvement** If you are setting options on a @ModelProp and have no other annotation parameters you can now omit the explicit `options = ` param name (https://github.com/airbnb/epoxy/pull/268)\n* **Improvement** If you are using `@TextProp` you can now specify a default string via a string resource (https://github.com/airbnb/epoxy/pull/269)\n\n* **Fixed** EpoxyModelGroup was not binding model click listeners correctly (https://github.com/airbnb/epoxy/pull/267)\n* **Fixed** A model created with @ModelView could fail to compile if it had nullable prop overloads  (https://github.com/airbnb/epoxy/pull/274)\n\n#### Potentially Breaking Fix\nA model created with @ModelView with a click listener had the wrong setter name for the model click listener overload (https://github.com/airbnb/epoxy/pull/275)\n\nIf you were setting this you will need to update the setter name. If you were setting the click listener to null you may now have to cast it.\n\n\n# 2.3.0 (August 16, 2017)\n* **New** An `AfterPropsSet` annotation for use in `@ModelView` classes. This allows initialization work to be done after all properties are bound from the model. (https://github.com/airbnb/epoxy/pull/242)\n* **New** Annotations `TextProp` and `CallbackProp`  as convenient replacements for `ModelProp`. (https://github.com/airbnb/epoxy/pull/260)\n* **New** Easy support for dragging and swiping via the `EpoxyTouchHelper` class. https://github.com/airbnb/epoxy/wiki/Touch-Support\n* **Change** Added the method `getRootView` to the view holder class in `EpoxyModelGroup` and made the bind methods on `EpoxyModelGroup` non final. This allows access to the root view of the group.\n* **Change** Generated models will now inherit class annotations from the base class (https://github.com/airbnb/epoxy/pull/255 Thanks geralt-encore!)\n\n# 2.2.0 (June 19, 2017)\n* **Main Feature** Models can now be completely generated from a custom view via annotations on the view. This should completely remove the overhead of creating a model manually in many cases! For more info, see [the wiki](https://github.com/airbnb/epoxy/wiki/Generating-Models-from-View-Annotations)\n\n* **New** Lowered the minimum SDK from 16 to 14.\n* **New** Models that have a `View.OnLongClickListener` as an EpoxyAttribute will now have an overloaded setter on the generated model that allows you to set a long click listener that will return the model, view, and adapter position. This is very similar to the `View.OnClickListener` support added in 2.0.0, but for long click listeners. **Upgrade Note** If you were setting a long click listener value to null anywhere you will need to now cast that to `View.OnLongClickListener` because of the new overloaded method.\n* **New** `id` overload on EpoxyModel to define a model id with multiple strings\n* **New** Option in `EpoxyAttribute` to not include the attribute in the generated `toString` method (Thanks to @geralt-encore!)\n* **New** @AutoModel models are now inherited from usages in super classes (Thanks to @geralt-encore!)\n* **Fixed** Generated getters could recursively call themselves (Thanks to @geralt-encore!)\n\n# 2.1.0 (May 9, 2017)\n\n* **New**: Support for Android Data Binding! Epoxy will now generate an EpoxyModel directly from a Data Binding xml layout, and handle all data binding details automatically. Thanks to @geralt-encore for helping with this! See more details in [the wiki](https://github.com/airbnb/epoxy/wiki/Data-Binding-Support).\n* **New**: Support for Litho. Epoxy will now generate an EpoxyModel for Litho Layout Specs. See more details in [the wiki](https://github.com/airbnb/epoxy/wiki/Litho-Support).\n* **New**: Support for implicitly adding AutoModels to an EpoxyController, this let's you drop the extra `.addTo(this)` line. More details and instructions [here](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#implicit-adding)\n\n# 2.0.0 (March 25, 2017)\n\n* **New**: The `EpoxyController` class helps you manage even models better. This should be used instead of the original `EpoxyAdapter` in most places. Read more about `EpoxyController` in [the wiki](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller).\n* **Change**: In the new EpoxyController, the diffing algorithm uses both `equals` and `hashCode` on each model to check for changes. This is a change from the EpoxyAdapter where only `hashCode` was used. Generated models have both hashCode and equals implemented properly already, but if you have any custom hashCode implementations in your models make sure you have equals implemented as well.\n* **New**: Models that have a `View.OnClickListener` as an EpoxyAttribute will now have an overloaded setter on the generated model that allows you to set a click listener that will return the model, view, and adapter position. **Upgrade Note** If you were setting a click listener value to null anywhere you will need to now cast that to `View.OnClickListener` because of the new overloaded method.\n* **New**: Attach an onBind/onUnbind listener directly to a model instead of overriding the onModelBound method. Generated models will have methods created to set this listener and handle the callback for you.\n* **New**: Support for creating models in Kotlin (Thanks to @geralt-encore! https://github.com/airbnb/epoxy/pull/144)\n* **New**: `EpoxyModelWithView` supports creating a View programmatically instead of inflating from XML.\n* **New**: `EpoxyModelGroup` supports grouping models together in arbitrary formations.\n* **New**: Instead of setting attribute options like `@EpoxyAttribute(hash = false)` you should now do `@EpoxyAttribute(DoNotHash)`. You can also set other options like that.\n* **New**: Annotation processor options can now be set via gradle instead of with `PackageEpoxyConfig`\n* **New**: In an EpoxyController, if a model with the same id changes state Epoxy will include its previous state as a payload in the change notification. The new model will have its `bind(view, previouslyBoundModel)` method called so it can compare what changed since the previous model, and so it can update the view with only the data that changed.\n\n# 1.7.5 (Feb 21, 2017)\n\n* **New**: Models inherit layouts specified in superclass `@EpoxyModelClass` annotations [#119](https://github.com/airbnb/epoxy/pull/119)\n* **New**: Support module configuration options [#124](https://github.com/airbnb/epoxy/pull/124)\n\n# 1.6.2 (Feb 8, 2017)\n\n* New: Support layout resource annotations in library projects (https://github.com/airbnb/epoxy/pull/116)\n\n# 1.6.1 (Feb 6, 2017)\n\n* Allow the default layout resource to be specified in the EpoxyModelClass class annotation [(#109)](https://github.com/airbnb/epoxy/pull/109) [(#111)](https://github.com/airbnb/epoxy/pull/111)\n* Allow the `createNewHolder` method to be omitted and generated automatically [(#105)](https://github.com/airbnb/epoxy/pull/105)\n* Generate a subclass for abstract model classes if the EpoxyModelClass annotation is present [(#105)](https://github.com/airbnb/epoxy/pull/105)\n* Allow strings as model ids [(#107)](https://github.com/airbnb/epoxy/pull/107)\n* Add instructions to readme for avoiding memory leaks [(#106)](https://github.com/airbnb/epoxy/pull/106)\n* Add model callbacks for view attached/detached from window, and onFailedToRecycleView [(#104)](https://github.com/airbnb/epoxy/pull/104)\n* Improve documentation on model unbind behavior [(#103)](https://github.com/airbnb/epoxy/pull/103)\n* Fix generated methods from super classes that have var args [(#100)](https://github.com/airbnb/epoxy/pull/100)\n* Remove apt dependency [(#95)](https://github.com/airbnb/epoxy/pull/95)\n* Add `removeAllModels` method to EpoxyAdapter [(#94)](https://github.com/airbnb/epoxy/pull/94)\n* Use actual param names when generating methods from super classes [(#85)](https://github.com/airbnb/epoxy/pull/85)\n\n# 1.5.0 (11/21/2016)\n\n* Fixes models being used in separate modules\n* Generates a `reset()` method on each model to reset annotated fields to their defaults.\n* Changes `@EpoxyAttribute(hash = false)` to still differentiate between null and non null values in the hashcode implementation\n* Adds a `notifyModelChanged` method to EpoxyAdapter that allows a payload to be specified\n* Generates a `toString()` method on all generated model classes that includes the values of all annotated fields.\n\n# 1.4.0 (10/13/2016)\n\n* Optimizations to the diffing algorithm\n* Setters on generated classes are not created if an @EpoxyAttribute field is marked as `final`\n* Adds @EpoxyModelClass annotation to force a model to have a generated class, even if it doesn't have any @EpoxyAttribute fields\n* Fix to not generate methods for package private @EpoxyAttribute fields that are in a different package from the generated class\n* Have generated classes duplicate any super methods that have the model as the return type to help with chaining\n\n# 1.3.0 (09/15/2016)\n\n* Add support for using the view holder pattern with models. See the readme for more information.\n* Throw an exception if `EpoxyAdapter#notifyDataSetChanged()` is called when diffing is enabled. It doesn't make sense to allow this alongside diffing, and calling this is most likely to be an accidental mixup with `notifyModelsChanged()`.\n* Some performance improvements with the diffing algorithm.\n\n# 1.2.0 (09/07/2016)\n\n* Change signature of `EpoxyAdapter#onModelBound` to include the model position\n* Fix EpoxyModel hashcode to include the layout specified by `getDefaultLayout`\n* Enforce that the id of an `EpoxyModel` cannot change once it has been added to the adapter\n* Add optional hash parameter to the `EpoxyAttribute` annotation to exclude a field from being included in the generated hashcode method.\n\n# 1.1.0 (08/24/2016)\n\n* Initial release\n"
        },
        {
          "name": "CONTRIBUTING.MD",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# Epoxy is an Open Source Project\n\nPull requests are welcome! We'd love help improving this library.\n\nWe have a code style setting for the project (checkstyle for Java, ktlint for Kotlin). Please run `Reformat Code` in Android Studio (or Intellij) on changed files before pushing them. Alternatively for Kotlin you can use [ktlint](https://ktlint.github.io/) tasks: check Kotlin code formatting with`./gradlew ktlint` and reformat all Kotlin code with `./gradlew ktlintformat`.\n\nAlso, run `./gradlew check` locally to make sure that style checks and tests pass.\n\nIf you update the model annotation processor you may find the `UpdateProcessorTestResults.kt` script very useful for updating the existing tests with your changes. (run it with kscript)\n - Run ./gradlew testDebug first to get test failures, then run `kscript UpdateProcessorTestResources.kt` to updates sources\n - You may have to repeat this cycle several times for all tests to be updated."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.076171875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Airbnb, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.77734375,
          "content": "[![Build Status](https://travis-ci.com/airbnb/epoxy.svg?branch=master)](https://travis-ci.com/github/airbnb/epoxy)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/epoxy/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/epoxy)\n[![GitHub license](https://img.shields.io/github/license/airbnb/epoxy)](https://github.com/airbnb/epoxy/blob/master/LICENSE)\n![GitHub contributors](https://img.shields.io/github/contributors/airbnb/epoxy)\n\n# Epoxy\n\nEpoxy is an Android library for building complex screens in a RecyclerView. Models are automatically generated from custom views or databinding layouts via annotation processing. These models are then used in an EpoxyController to declare what items to show in the RecyclerView.\n\nThis abstracts the boilerplate of view holders, diffing items and binding payload changes, item types, item ids, span counts, and more, in order to simplify building screens with multiple view types. Additionally, Epoxy adds support for saving view state and automatic diffing of item changes.\n\n[We developed Epoxy at Airbnb](https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394#.xv4ymrtmk) to simplify the process of working with RecyclerViews, and to add the missing functionality we needed. We now use Epoxy for most of the main screens in our app and it has improved our developer experience greatly.\n\n* [Installation](#installation)\n* [Basic Usage](#basic-usage)\n* [Documentation](#documentation)\n* [Min SDK](#min-sdk)\n* [Contributing](#contributing)\n* [Sample App](https://github.com/airbnb/epoxy/wiki/Sample-App)\n\n## Installation\n\nGradle is the only supported build configuration, so just add the dependency to your project `build.gradle` file:\n\n```groovy\ndependencies {\n  implementation \"com.airbnb.android:epoxy:$epoxyVersion\"\n  // Add the annotation processor if you are using Epoxy's annotations (recommended)\n  annotationProcessor \"com.airbnb.android:epoxy-processor:$epoxyVersion\"\n}\n```\n\nReplace the variable `$epoxyVersion` with the latest version : [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/epoxy/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.airbnb.android/epoxy)\n\nSee the [releases page](https://github.com/airbnb/epoxy/releases) for up to date release versions and details\n\n#### Kotlin\nIf you are using Kotlin you should also add\n```\napply plugin: 'kotlin-kapt'\n\nkapt {\n    correctErrorTypes = true\n}\n```\n\nso that `AutoModel` annotations work properly. More information [here](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#usage-with-kotlin)\n\nAlso, make sure to use `kapt` instead of `annotationProcessor` in your dependencies in the `build.gradle` file.\n\n## Library Projects\nIf you are using layout resources in Epoxy annotations then for library projects add [Butterknife's gradle plugin](https://github.com/JakeWharton/butterknife#library-projects) to your `buildscript`.\n\n```yaml\nbuildscript {\n  repositories {\n    mavenCentral()\n   }\n  dependencies {\n    classpath 'com.jakewharton:butterknife-gradle-plugin:10.1.0'\n  }\n}\n```\n\nand then apply it in your module:\n```yaml\napply plugin: 'com.android.library'\napply plugin: 'com.jakewharton.butterknife'\n```\n\nNow make sure you use R2 instead of R inside all Epoxy annotations.\n```java\n@ModelView(defaultLayout = R2.layout.view_holder_header)\npublic class HeaderView extends LinearLayout {\n   ....\n}\n```\n\nThis is not necessary if you don't use resources as annotation parameters, such as with [custom view models](https://github.com/airbnb/epoxy/wiki/Generating-Models-from-View-Annotations).\n\n## Basic Usage\nThere are two main components of Epoxy:\n\n1. The `EpoxyModel`s that describe how your views should be displayed in the RecyclerView.\n2. The `EpoxyController` where the models are used to describe what items to show and with what data.\n\n### Creating Models\nEpoxy generates models for you based on your view or layout. Generated model classes are suffixed with an underscore (`_`) are used directly in your EpoxyController classes.\n\n#### From Custom Views\nAdd the `@ModelView` annotation on a view class. Then, add a \"prop\" annotation on each setter method to mark it as a property for the model.\n\n```java\n@ModelView(autoLayout = Size.MATCH_WIDTH_WRAP_HEIGHT)\npublic class HeaderView extends LinearLayout {\n\n  ... // Initialization omitted\n\n  @TextProp\n  public void setTitle(CharSequence text) {\n    titleView.setText(text);\n  }\n}\n```\n\nA `HeaderViewModel_` is then generated in the same package.\n\n[More Details](https://github.com/airbnb/epoxy/wiki/Generating-Models-from-View-Annotations)\n\n#### From DataBinding\n\nIf you use Android DataBinding you can simply set up your xml layouts like normal:\n\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"title\" type=\"String\" />\n    </data>\n\n    <TextView\n        android:layout_width=\"120dp\"\n        android:layout_height=\"40dp\"\n        android:text=\"@{title}\" />\n</layout>\n```\n\nThen, create an interface or class in any package and add an `EpoxyDataBindingLayouts` annotation to declare your databinding layouts.\n\n```java\npackage com.airbnb.epoxy.sample;\n\nimport com.airbnb.epoxy.EpoxyDataBindingLayouts;\n\n@EpoxyDataBindingLayouts({R.layout.header_view, ... // other layouts })\ninterface EpoxyConfig {}\n```\n\nFrom this layout name Epoxy generates a `HeaderViewBindingModel_`.\n\n[More Details](https://github.com/airbnb/epoxy/wiki/Data-Binding-Support)\n\n#### From ViewHolders\nIf you use xml layouts without databinding you can create a model class to do the  binding.\n\n```java\n@EpoxyModelClass(layout = R.layout.header_view)\npublic abstract class HeaderModel extends EpoxyModelWithHolder<Holder> {\n  @EpoxyAttribute String title;\n\n  @Override\n  public void bind(Holder holder) {\n    holder.header.setText(title);\n  }\n\n  static class Holder extends BaseEpoxyHolder {\n    @BindView(R.id.text) TextView header;\n  }\n}\n```\n\nA `HeaderModel_` class is generated that subclasses HeaderModel and implements the model details.\n\n[More Details](https://github.com/airbnb/epoxy/wiki/ViewHolder-Models)\n\n### Using your models in a controller\n\nA controller defines what items should be shown in the RecyclerView, by adding the corresponding models in the desired order.\n\n The controller's `buildModels` method declares which items to show. You are responsible for calling `requestModelBuild` whenever your data changes, which triggers `buildModels` to run again. Epoxy tracks changes in the models and automatically binds and updates views.\n\nAs an example, our `PhotoController` shows a header, a list of photos, and a loader (if more photos are being loaded). The controller's `setData(photos, loadingMore)` method is called whenever photos are loaded, which triggers a call to `buildModels` so models representing the state of the new data can be built.\n\n```java\npublic class PhotoController extends Typed2EpoxyController<List<Photo>, Boolean> {\n    @AutoModel HeaderModel_ headerModel;\n    @AutoModel LoaderModel_ loaderModel;\n\n    @Override\n    protected void buildModels(List<Photo> photos, Boolean loadingMore) {\n      headerModel\n          .title(\"My Photos\")\n          .description(\"My album description!\")\n          .addTo(this);\n\n      for (Photo photo : photos) {\n        new PhotoModel()\n           .id(photo.id())\n           .url(photo.url())\n           .addTo(this);\n      }\n\n      loaderModel\n          .addIf(loadingMore, this);\n    }\n  }\n```\n\n#### Or with Kotlin\nAn extension function is generated for each model so we can write this:\n```kotlin\nclass PhotoController : Typed2EpoxyController<List<Photo>, Boolean>() {\n\n    override fun buildModels(photos: List<Photo>, loadingMore: Boolean) {\n        header {\n            id(\"header\")\n            title(\"My Photos\")\n            description(\"My album description!\")\n        }\n\n        photos.forEach {\n            photoView {\n                id(it.id())\n                url(it.url())\n            }\n        }\n\n        if (loadingMore) loaderView { id(\"loader\") }\n    }\n}\n```\n\n### Integrating with RecyclerView\n\nGet the backing adapter off the EpoxyController to set up your RecyclerView:\n```java\nMyController controller = new MyController();\nrecyclerView.setAdapter(controller.getAdapter());\n\n// Request a model build whenever your data changes\ncontroller.requestModelBuild();\n\n// Or if you are using a TypedEpoxyController\ncontroller.setData(myData);\n```\n\nIf you are using the [EpoxyRecyclerView](https://github.com/airbnb/epoxy/wiki/EpoxyRecyclerView) integration is easier.\n\n```java\nepoxyRecyclerView.setControllerAndBuildModels(new MyController());\n\n// Request a model build on the recyclerview when data changes\nepoxyRecyclerView.requestModelBuild();\n```\n\n#### Kotlin\nOr use [Kotlin Extensions](https://github.com/airbnb/epoxy/wiki/EpoxyRecyclerView#kotlin-extensions) to simplify further and remove the need for a controller class.\n```kotlin\nepoxyRecyclerView.withModels {\n        header {\n            id(\"header\")\n            title(\"My Photos\")\n            description(\"My album description!\")\n        }\n\n        photos.forEach {\n            photoView {\n                id(it.id())\n                url(it.url())\n            }\n        }\n\n        if (loadingMore) loaderView { id(\"loader\") }\n    }\n}\n```\n\n\n### More Reading\nAnd that's it! The controller's declarative style makes it very easy to visualize what the RecyclerView will look like, even when many different view types or items are used. Epoxy handles everything else. If a view only partially changes, such as the description, only that new value is set on the view, so the system is very efficient\n\nEpoxy handles much more than these basics, and is highly configurable. See [the wiki](https://github.com/airbnb/epoxy/wiki) for in depth documentation.\n\n## Documentation\nSee examples and browse complete documentation at the [Epoxy Wiki](https://github.com/airbnb/epoxy/wiki)\n\nIf you still have questions, feel free to create a new issue.\n\n## Min SDK\nWe support a minimum SDK of 14. However, Epoxy is based on the v7 support libraries so it should work with lower versions if you care to override the min sdk level in the manifest.\n\n## Contributing\nPull requests are welcome! We'd love help improving this library. Feel free to browse through open issues to look for things that need work. If you have a feature request or bug, please open a new issue so we can track it.\n\n## License\n\n```\nCopyright 2016 Airbnb, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.6044921875,
          "content": "Releasing\n========\n\n1. Bump the VERSION_NAME property in `gradle.properties` based on Major.Minor.Patch naming scheme\n2. Update `CHANGELOG.md` for the impending release.\n3. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the version you set in step 1)\n4. Add your sonatype login information under gradle properties mavenCentralUsername and mavenCentralPassword in your local user gradle.properties file\n5. Make sure you have a gpg signing key configured (https://vanniktech.github.io/gradle-maven-publish-plugin/central/#secrets)\n5. `./gradlew publishAllPublicationsToMavenCentral --no-configuration-cache` to build the artifacts and publish them to maven\n7. Open PR on Github, merge, and publish release through Github UI.\n\nPublishing a release to an internal repository\n========\n\nTo publish an internal release to an Artifactory repository:\n\n1. Set credential values for ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD in your local gradle.properties\n2. Set values for ARTIFACTORY_RELEASE_URL (and optionally ARTIFACTORY_SNAPSHOT_URL if you are publishing a snapshot)\n3. ./gradlew publishAllPublicationsToAirbnbArtifactoryRepository -PdoNotSignRelease=true --no-configuration-cache\n4. \"-PdoNotSignRelease=true\" is optional, but we don't need to sign artifactory releases and this allows everyone to publish without setting up a gpg key\n\nIf you need to publish to a different repository, look at the configuration in 'publishing.gradle'\nto see how to configure additional repositories.\n\nMaven Local Installation\n=======================\n\nIf testing changes locally, you can install to mavenLocal via `./gradlew publishToMavenLocal`"
        },
        {
          "name": "UpdateProcessorTestResources.kt",
          "type": "blob",
          "size": 2.779296875,
          "content": "#!/usr/bin/env kscript\n@file:DependsOn(\"org.jsoup:jsoup:1.13.1\")\n\nimport org.jsoup.Jsoup\nimport org.jsoup.nodes.Document\nimport java.io.File\n\n\nfun main() {\n    val testResultHtmlRegex = Regex(\"/build/reports/tests/.*/classes/.*\\\\.html\")\n    File(\".\")\n        .walk()\n        .filter { it.isFile }\n        .filter { it.path.contains(testResultHtmlRegex) }\n        .forEach { updateTestClass(it) }\n}\n\nfun updateTestClass(testReport: File) {\n    val doc: Document = Jsoup.parse(testReport, \"UTF-8\")\n\n    // Failing processor tests have their output in a <pre></pre> block\n    doc.getElementsByTag(\"pre\")\n        .filter { element ->\n            // A failing block contains the text \"Source declared the same top-level types of an expected source, but\n            // didn't match exactly.\"\n            element.text().contains(\"Source declared the same top-level types of an expected source\")\n        }.map { it.text() }\n        .forEach { failingTestText ->\n            updateIndividualTest(failingTestText)\n        }\n}\n\nprivate fun updateIndividualTest(failingTestText: String) {\n    val expectedFile = expectedFileRegex\n        .find(failingTestText)\n        ?.groupValues\n        ?.getOrNull(1)\n\n        ?.let { filePath ->\n            // The test copies the source file to the build folder. We need to modify the original file to update its expected source\n            File(\n                filePath.replace(\n                    \"/build/intermediates/sourceFolderJavaResources/debug/\",\n                    \"/src/test/resources/\"\n                )\n            )\n        }\n        ?.takeIf { it.isFile }\n        ?: error(\"Count not find expected file in $failingTestText\")\n\n    // The error message includes the source code that was generated.\n    // Actual Source:\n    //=================\n    // [code here]\n    //\n    // javaSources was: [com.google.testing.compile.JavaFileObjects$ResourceSourceJavaFileObject[file:/Users/elihart/repos/epoxy/epoxy-modelfactorytest/build/intermediates/sourceFolderJavaResources/debug/GroupPropMultipleSupportedAttributeDifferentNameModelView.java]]\n    // at com.airbnb.epoxy.ProcessorTestUtils.assertGeneration(ProcessorTestUtils.kt:33)\n    // ...\n\n    val actualSource = failingTestText.substringAfter(\n        \"\"\"\n            Actual Source:\n            =================\n\n        \"\"\".trimIndent()\n    ).substringBefore(\"javaSources was:\")\n        .substringBefore(\"object was:\")\n\n    expectedFile.writeText(actualSource)\n\n    println(\"Updated test source ${expectedFile.path.substringAfter(\"/epoxy/\")}\")\n}\n\n// We expect to see a line like:\n// Expected file: </Users/elihart/repos/epoxy/epoxy-modelfactorytest/build/intermediates/sourceFolderJavaResources/debug/AllTypesModelViewModel_.java>\n// Which tells us where the original processor test file lives\nval expectedFileRegex = Regex(\"Expected file: <(.*)>\")\n"
        },
        {
          "name": "blessedDeps.gradle",
          "type": "blob",
          "size": 7.7822265625,
          "content": "/**\n * \"Blessed\" dependencies give us the ability to force a dependency(s) version to be consistent\n *  for packaging a library. In turn, this also allows the ability to retract the forced update\n *  based off build type/flavor which reduces regressions caused by conflicts.\n *\n *  As an added bonus, we don't bloat our project build file by abstracting dependencies into its own\n *  gradle file, then applying it back in as necessary.\n */\n\nrootProject.ext.JAVA_SOURCE_VERSION = JavaVersion.VERSION_1_8\nrootProject.ext.JAVA_TARGET_VERSION = JavaVersion.VERSION_1_8\n\nrootProject.ext.TARGET_SDK_VERSION = 30\nrootProject.ext.COMPILE_SDK_VERSION = 33\nrootProject.ext.MIN_SDK_VERSION = 14\nrootProject.ext.COMPOSE_MIN_SDK_VERSION = 21\n\nrootProject.ext.ANDROIDX_ANNOTATION = \"1.5.0\"\nrootProject.ext.ANDROIDX_APPCOMPAT = \"1.5.1\"\nrootProject.ext.ANDROIDX_CARDVIEW = \"1.0.0\"\nrootProject.ext.ANDROIDX_CORE_KTX = \"1.3.2\"\nrootProject.ext.ANDROIDX_DATABINDING_ADAPTERS = \"3.2.1\"\nrootProject.ext.ANDROIDX_DATABINDING_COMPILER = \"3.2.1\"\nrootProject.ext.ANDROIDX_DATABINDING_LIBRARY = \"3.2.1\"\nrootProject.ext.ANDROIDX_ESPRESSO_CORE = \"3.5.1\"\nrootProject.ext.ANDROIDX_FRAGMENT_TESTING = \"1.3.3\"\nrootProject.ext.ANDROIDX_LEGACY = \"1.0.0\"\nrootProject.ext.ANDROIDX_MATERIAL = \"1.3.0\"\nrootProject.ext.ANDROIDX_PAGING = \"2.0.0\"\nrootProject.ext.ANDROIDX_PAGING3 = \"3.1.1\"\nrootProject.ext.ANDROIDX_RECYCLERVIEW = \"1.3.0-rc01\"\nrootProject.ext.ANDROIDX_ROOM = \"2.5.0-beta01\"\nrootProject.ext.ANDROIDX_RUNTIME = \"2.3.1\"\nrootProject.ext.ANDROIDX_VERSIONED_PARCELABLE = \"1.1.1\"\nrootProject.ext.ANDROID_ARCH_TESTING = \"2.1.0\"\nrootProject.ext.ANDROID_DATA_BINDING = \"1.3.1\"\nrootProject.ext.ANDROID_RUNTIME_VERSION = \"4.1.1.4\"\nrootProject.ext.ANDROID_TEST_RUNNER = \"1.5.2\"\nrootProject.ext.ANDROID_TEST_RULES = \"1.5.0\"\nrootProject.ext.ASSERTJ_VERSION = \"1.7.1\"\nrootProject.ext.AUTO_VALUE_VERSION = \"1.7.4\"\nrootProject.ext.GLIDE_VERSION = \"4.12.0\"\nrootProject.ext.GOOGLE_TESTING_COMPILE_VERSION = \"0.19\"\nrootProject.ext.INCAP_VERSION = \"0.3\"\nrootProject.ext.JUNIT_VERSION = \"4.13.2\"\nrootProject.ext.KOTLIN_COROUTINES_VERSION = \"1.6.4\"\nrootProject.ext.KOTLINX_METADATA = \"0.6.0\"\nrootProject.ext.LOTTIE_VERSION = \"2.8.0\"\nrootProject.ext.MOCKITO_VERSION = \"3.7.7\"\nrootProject.ext.PARIS_VERSION = \"2.0.2\"\nrootProject.ext.ROBOLECTRIC_VERSION = \"4.9.2\"\nrootProject.ext.SQUARE_JAVAPOET_VERSION = \"1.13.0\"\nrootProject.ext.SQUARE_KOTLINPOET_VERSION = \"1.12.0\"\nrootProject.ext.COMPOSE_COMPILER_VERSION = \"1.4.7\"\nrootProject.ext.COMPOSE_VERSION = \"1.4.2\"\nrootProject.ext.COMPOSE_ACTIVITY_VERSION = \"1.6.0\"\nrootProject.ext.KOTLINX_LIFECYCLE_RUNTIME_VERSION = \"2.5.1\"\nrootProject.ext.XPROCESSING_VERSION = \"2.6.0-alpha01\"\nrootProject.ext.KOTLIN_TESTING_COMPILE_VERSION = '1.5.0'\nrootProject.ext.LIFECYCLE_VIEWMODEL = '2.6.1'\n\nrootProject.ext.deps = [\n    activityCompose                     : \"androidx.activity:activity-compose:$COMPOSE_ACTIVITY_VERSION\",\n    androidAnnotations                  : \"androidx.annotation:annotation:$ANDROIDX_ANNOTATION\",\n    androidAppcompat                    : \"androidx.appcompat:appcompat:$ANDROIDX_APPCOMPAT\",\n    androidArchCoreTesting              : \"androidx.arch.core:core-testing:$ANDROID_ARCH_TESTING\",\n    androidCardView                     : \"androidx.cardview:cardview:$ANDROIDX_CARDVIEW\",\n    androidCoreKtx                      : \"androidx.core:core-ktx:$ANDROIDX_CORE_KTX\",\n    androidDesignLibrary                : \"com.google.android.material:material:$ANDROIDX_MATERIAL\",\n    androidEspressoCore                 : \"androidx.test.espresso:espresso-core:$ANDROIDX_ESPRESSO_CORE\",\n    androidFragmentTesting              : \"androidx.fragment:fragment-testing:$ANDROIDX_FRAGMENT_TESTING\",\n    androidLifecycleRuntimeKtx          : \"androidx.lifecycle:lifecycle-runtime-ktx:$KOTLINX_LIFECYCLE_RUNTIME_VERSION\",\n    androidPaging3Component             : \"androidx.paging:paging-runtime:$ANDROIDX_PAGING3\",\n    androidPagingComponent              : \"androidx.paging:paging-runtime:$ANDROIDX_PAGING\",\n    androidRecyclerView                 : \"androidx.recyclerview:recyclerview:$ANDROIDX_RECYCLERVIEW\",\n    androidRuntime                      : \"com.google.android:android:$ANDROID_RUNTIME_VERSION\",\n    androidTestCore                     : \"androidx.test:core:1.3.0\",\n    androidTestExtJunitKtx              : \"androidx.test.ext:junit-ktx:1.1.2\",\n    androidTestRules                    : \"androidx.test:rules:$ANDROID_TEST_RULES\",\n    androidTestRunner                   : \"androidx.test:runner:$ANDROID_TEST_RUNNER\",\n    assertj                             : \"org.assertj:assertj-core:$ASSERTJ_VERSION\",\n    autoValue                           : \"com.google.auto.value:auto-value:$AUTO_VALUE_VERSION\",\n    composeMaterial                     : \"androidx.compose.material:material:$COMPOSE_VERSION\",\n    composeUi                           : \"androidx.compose.ui:ui:$COMPOSE_VERSION\",\n    composeUiTooling                    : \"androidx.compose.ui:ui-tooling:$COMPOSE_VERSION\",\n    dataBindingAdapters                 : \"androidx.databinding:databinding-adapters:$ANDROIDX_DATABINDING_ADAPTERS\",\n    dataBindingLibrary                  : \"androidx.databinding:databinding-library:$ANDROIDX_DATABINDING_LIBRARY\",\n    glide                               : \"com.github.bumptech.glide:glide:$GLIDE_VERSION\",\n    googleTestingCompile                : \"com.google.testing.compile:compile-testing:$GOOGLE_TESTING_COMPILE_VERSION\",\n    incapProcessor                      : \"net.ltgt.gradle.incap:incap-processor:$INCAP_VERSION\",\n    incapRuntime                        : \"net.ltgt.gradle.incap:incap:$INCAP_VERSION\",\n    junit                               : \"junit:junit:$JUNIT_VERSION\",\n    kotlinCoroutines                    : \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$KOTLIN_COROUTINES_VERSION\",\n    kotlinCoroutinesTest                : \"org.jetbrains.kotlinx:kotlinx-coroutines-test:$KOTLIN_COROUTINES_VERSION\",\n    kotlinxMetadata                     : \"org.jetbrains.kotlinx:kotlinx-metadata-jvm:$KOTLINX_METADATA\",\n    lottie                              : \"com.airbnb.android:lottie:$LOTTIE_VERSION\",\n    mockito                             : \"org.mockito:mockito-core:$MOCKITO_VERSION\",\n    mockito_inline                      : \"org.mockito:mockito-inline:$MOCKITO_VERSION\",\n    paris                               : \"com.airbnb.android:paris:$PARIS_VERSION\",\n    parisProcessor                      : \"com.airbnb.android:paris-processor:$PARIS_VERSION\",\n    robolectric                         : \"org.robolectric:robolectric:$ROBOLECTRIC_VERSION\",\n    squareJavaPoet                      : \"com.squareup:javapoet:$SQUARE_JAVAPOET_VERSION\",\n    squareKotlinPoet                    : \"com.squareup:kotlinpoet:$SQUARE_KOTLINPOET_VERSION\",\n    kotlinPoetJavaInterop               : \"com.squareup:kotlinpoet-javapoet:$SQUARE_KOTLINPOET_VERSION\",\n    kotlinPoetKspInterop                : \"com.squareup:kotlinpoet-ksp:$SQUARE_KOTLINPOET_VERSION\",\n    versionedParcelable                 : \"androidx.versionedparcelable:versionedparcelable:$ANDROIDX_VERSIONED_PARCELABLE\",\n    ksp                                 : \"com.google.devtools.ksp:symbol-processing-api:$KSP_VERSION\",\n    kspImpl                             : \"com.google.devtools.ksp:symbol-processing:$KSP_VERSION\",\n    xProcessing                         : \"androidx.room:room-compiler-processing:$XPROCESSING_VERSION\",\n    xProcessingTesting                  : \"androidx.room:room-compiler-processing-testing:$XPROCESSING_VERSION\",\n    kotlinCompileTesting                : \"com.github.tschuchortdev:kotlin-compile-testing-ksp:$KOTLIN_TESTING_COMPILE_VERSION\",\n    kotlinAnnotationProcessingEmbeddable: \"org.jetbrains.kotlin:kotlin-annotation-processing-embeddable:$KOTLIN_VERSION\",\n    lifecycleViewmodel                  : \"androidx.lifecycle:lifecycle-viewmodel:$LIFECYCLE_VIEWMODEL\",\n    lifecycleViewmodelKtx               : \"androidx.lifecycle:lifecycle-viewmodel-ktx:$LIFECYCLE_VIEWMODEL\",\n]\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.640625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n\n  ext.KOTLIN_VERSION = \"1.8.21\"\n  ext.ANDROID_PLUGIN_VERSION = '7.4.0'\n  ext.KSP_VERSION = '1.8.21-1.0.11'\n\n  repositories {\n    google()\n    mavenCentral()\n    gradlePluginPortal()\n  }\n  dependencies {\n    classpath \"com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION\"\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION\"\n    // Upload with: (see RELEASING.md)\n    // ./gradlew publishAllPublicationsToMavenCentral --no-configuration-cache\n    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.22.0'\n    // Dokka is needed on classpath for vanniktech publish plugin\n    classpath \"org.jetbrains.dokka:dokka-gradle-plugin:1.6.10\"\n  }\n}\n\nplugins {\n  // Run ./gradlew dependencyUpdates to see avilable version updates\n  id 'com.github.ben-manes.versions' version '0.42.0'\n  id \"com.google.devtools.ksp\" version \"$KSP_VERSION\"\n}\n\nallprojects {\n\n  repositories {\n    google()\n    mavenCentral()\n  }\n\n  // Prevent javadoc task complaining about errors with kotlin files\n  tasks.withType(Javadoc) {\n    excludes = ['**/*.kt']\n  }\n}\n\nsubprojects { project ->\n  apply from: \"$rootDir/blessedDeps.gradle\"\n  apply plugin: 'com.github.ben-manes.versions'\n  apply from: \"${project.rootDir}/ktlint.gradle\"\n\n  afterEvaluate {\n    if (project.tasks.findByName('check')) {\n      check.dependsOn('ktlint')\n    }\n\n    if (project.extensions.findByType(com.android.build.gradle.LibraryExtension.class) != null) {\n      project.android.libraryVariants.all { variant ->\n        def outputFolder = new File(\"build/generated/ksp/${variant.name}/kotlin\")\n        variant.addJavaSourceFoldersToModel(outputFolder)\n        android.sourceSets.getAt(variant.name).java {\n          srcDir(outputFolder)\n        }\n      }\n    } else if (project.extensions.findByType(com.android.build.gradle.AbstractAppExtension.class) != null) {\n      project.android.applicationVariants.all { variant ->\n        def outputFolder = new File(\"build/generated/ksp/${variant.name}/kotlin\")\n        variant.addJavaSourceFoldersToModel(outputFolder)\n        android.sourceSets.getAt(variant.name).java {\n          srcDir(outputFolder)\n        }\n      }\n    }\n  }\n}\n\ndef isNonStable = { String version ->\n  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }\n  def regex = /^[0-9,.v-]+(-r)?$/\n  return !stableKeyword && !(version ==~ regex)\n}\n\ntasks.named(\"dependencyUpdates\").configure {\n  // disallow release candidates as upgradable versions from stable versions\n  rejectVersionIf {\n    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)\n  }\n}\n"
        },
        {
          "name": "epoxy-adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-compose",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-composeinterop-maverickssample",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-composesample",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-databinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-glide-preloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-integrationtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-kspsample",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-modelfactory",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-modelfactorytest",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-paging3",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-preloadersample",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-processortest",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-processortest2",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "epoxy-viewbinder",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.0703125,
          "content": "VERSION_NAME=5.1.4\nGROUP=com.airbnb.android\nPOM_DESCRIPTION=Epoxy is a system for composing complex screens with a ReyclerView in Android.\nPOM_URL=https://github.com/airbnb/epoxy\nPOM_SCM_URL=https://github.com/airbnb/epoxy\nPOM_SCM_CONNECTION=scm:git@github.com:airbnb/epoxy.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:airbnb/epoxy.git\nPOM_LICENCE_NAME=Apache-2.0\nPOM_LICENCE_URL=https://github.com/airbnb/epoxy/blob/master/LICENSE\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=airbnb\nPOM_DEVELOPER_NAME=Airbnb\nPOM_DEVELOPER_EMAIL=android@airbnb.com\nPOM_INCEPTION_YEAR=2016\n\nandroid.useAndroidX=true\nandroid.enableJetifier=false\n\nandroid.databinding.incremental=true\norg.gradle.parallel=true\norg.gradle.caching=true\norg.gradle.configuration-cache=true\n\n# Publishing configuration for vanniktech/gradle-maven-publish-plugin\nSONATYPE_HOST=DEFAULT\nSONATYPE_AUTOMATIC_RELEASE=true\n\n# Dokka fails without a larger metaspace https://github.com/Kotlin/dokka/issues/1405\norg.gradle.jvmargs=-Xmx6g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:MaxMetaspaceSize=2g\nkapt.includeCompileClasspath=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.634765625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    \n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.986328125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "kotlinsample",
          "type": "tree",
          "content": null
        },
        {
          "name": "ktlint.gradle",
          "type": "blob",
          "size": 0.9296875,
          "content": "repositories {\n  mavenCentral()\n}\n\nconfigurations {\n  ktlint\n}\n\ndependencies {\n  ktlint \"com.pinterest:ktlint:0.42.1\"\n  // additional 3rd party ruleset(s) can be specified here\n  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and\n  // ktlint will pick them up\n}\n\ntask ktlint(type: JavaExec, group: \"verification\") {\n  description = \"Check Kotlin code style.\"\n  classpath = configurations.ktlint\n  main = \"com.pinterest.ktlint.Main\"\n  args \"src/**/*.kt\", \"!src/**/resources/**\"\n  // to generate report in checkstyle format prepend following args:\n  // \"--reporter=plain\", \"--reporter=checkstyle,output=${buildDir}/ktlint.xml\"\n  // see https://github.com/pinterest/ktlint#usage for more\n}\n\ntask ktlintFormat(type: JavaExec, group: \"formatting\") {\n  description = \"Fix Kotlin code style deviations.\"\n  classpath = configurations.ktlint\n  main = \"com.pinterest.ktlint.Main\"\n  args \"-F\", \"src/**/*.kt\", \"!src/**/resources/**\"\n}"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "publishing.gradle",
          "type": "blob",
          "size": 1.0224609375,
          "content": "// Sets up publishing of release artifacts.\n// Note: Keep this script in sync across all airbnb open source projects.\napply plugin: 'com.vanniktech.maven.publish'\n\n\n// https://vanniktech.github.io/gradle-maven-publish-plugin/other/\npublishing {\n    repositories {\n        maven {\n            // The \"name\" value creates a task like `publishAllPublicationsTo[Name]Repository\n            // In this case, publishAllPublicationsToAirbnbArtifactoryRepository\n            name = 'airbnbArtifactory'\n            url = version.toString().endsWith(\"SNAPSHOT\") ? findProperty(\"ARTIFACTORY_SNAPSHOT_URL\") : findProperty(\"ARTIFACTORY_RELEASE_URL\")\n            credentials {\n                username = findProperty(\"ARTIFACTORY_USERNAME\")\n                password = findProperty(\"ARTIFACTORY_PASSWORD\")\n            }\n        }\n    }\n}\n\nmavenPublishing {\n    if (findProperty(\"doNotSignRelease\").toString().toBoolean()) {\n        println(\"Skipping release signing\")\n    } else {\n        println(\"Signing release with gpg\")\n        signAllPublications()\n    }\n}"
        },
        {
          "name": "reports",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.5546875,
          "content": "include ':epoxy-adapter'\ninclude ':epoxy-sample'\ninclude ':epoxy-processor'\ninclude ':epoxy-annotations'\ninclude ':epoxy-processortest'\ninclude ':epoxy-processortest2'\ninclude ':epoxy-integrationtest'\ninclude ':epoxy-databinding'\ninclude ':epoxy-paging3'\ninclude ':kotlinsample'\ninclude ':epoxy-modelfactory'\ninclude ':epoxy-modelfactorytest'\ninclude ':epoxy-glide-preloader'\ninclude ':epoxy-preloadersample'\ninclude ':epoxy-viewbinder'\ninclude ':epoxy-compose'\ninclude ':epoxy-composesample'\ninclude ':epoxy-composeinterop-maverickssample'\ninclude ':epoxy-kspsample'\n"
        }
      ]
    }
  ]
}