{
  "metadata": {
    "timestamp": 1736708758673,
    "page": 228,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lets-blade/blade",
      "stars": 5851,
      "defaultBranch": "v2.1.3",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8046875,
          "content": "### Java template\n# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Package Files #\n*.jar\n*.war\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n### JetBrains template\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# Gradle:\n.gradle\ngradle/\nbuild/\n!gradle/wrapper/gradle-wrapper.jar\n\n# IntelliJ\n/out/\n.idea/\n*.iml\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Eclipse Core\n.project\n\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n/target/\n\n.vscode/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.244140625,
          "content": "language: java\n\njdk:\n  - openjdk8\n\nnotifications:\n  email: false\n\nsudo: false\n\nbefore_install:\n    - export TZ='Asia/Shanghai'\n    - chmod +x gradlew\n\nscript: \"mvn clean cobertura:cobertura\"\n\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.2939453125,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open\nand welcoming community, we pledge to respect all people who contribute through reporting\nissues, posting feature requests, updating documentation, submitting pull requests or\npatches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses,\n  without explicit permission\n* Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments,\ncommits, code, wiki edits, issues, and other contributions that are not aligned to this\nCode of Conduct, or to ban temporarily or permanently any contributor for other behaviors\nthat they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to fairly and\nconsistently applying these principles to every aspect of managing this project. Project\nmaintainers who do not follow or enforce the Code of Conduct may be permanently removed\nfrom the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces when an\nindividual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by\ncontacting a project maintainer at blade-code-of-conduct@pivotal.io . All complaints will\nbe reviewed and investigated and will result in a response that is deemed necessary and\nappropriate to the circumstances. Maintainers are obligated to maintain confidentiality\nwith regard to the reporter of an incident.\n\nThis Code of Conduct is adapted from the\nhttp://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at\nhttp://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.083984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022 hellokaton@gmail.com\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.7939453125,
          "content": "<p align=\"center\">\n    <a href=\"https://lets-blade.com\"><img src=\"https://i.loli.net/2018/09/18/5ba0cd93c710e.png\" width=\"650\"/></a>\n</p>\n<p align=\"center\">Based on <code>Java8</code> + <code>Netty4</code> to create a lightweight, high-performance, simple and elegant Web framework 😋</p>\n<p align=\"center\">Spend <b>1 hour</b> to learn it to do something interesting, a tool in addition to the other available frameworks.</p>\n<p align=\"center\">\n    🐾 <a href=\"#quick-start\" target=\"_blank\">Quick Start</a> |\n    🌚 <a href=\"https://lets-blade.github.io/\" target=\"_blank\">Documentation</a> |\n    :green_book: <a href=\"https://www.baeldung.com/blade\" target=\"_blank\">Guidebook</a> |\n    💰 <a href=\"https://lets-blade.github.io/donate\" target=\"_blank\">Donate</a> |\n    🇨🇳 <a href=\"README_CN.md\">简体中文</a>\n</p>\n<p align=\"center\">\n    <a href=\"https://travis-ci.org/lets-blade/blade\"><img src=\"https://img.shields.io/travis/lets-blade/blade.svg?style=flat-square\"></a>\n    <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cblade-core\"><img src=\"https://img.shields.io/maven-central/v/com.hellokaton/blade-core.svg?style=flat-square\"></a>\n    <a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=flat-square\"></a>\n    <a class=\"badge-align\" href=\"https://www.codacy.com/gh/lets-blade/blade/dashboard\"><img src=\"https://app.codacy.com/project/badge/Grade/1eff0e30bf694402ac1b0ebe587bfa5a\"/></a>\n    <a href=\"https://gitter.im/lets-blade/blade\"><img src=\"https://badges.gitter.im/hellokaton/blade.svg?style=flat-square\"></a>\n    <a href=\"https://www.codetriage.com/lets-blade/blade\"><img src=\"https://www.codetriage.com/lets-blade/blade/badges/users.svg\"></a>\n</p>\n\n***\n\n## What Is Blade?\n\n`Blade` is a pursuit of simple, efficient Web framework, so that `JavaWeb` development becomes even more powerful, both in performance and flexibility.\nIf you like to try something interesting, I believe you will love it.\nIf you think it's good, you can support it with a [star](https://github.com/lets-blade/blade/stargazers) or by [donating](https://ko-fi.com/hellokaton) :blush:\n\n## Features\n\n* [x] A new generation MVC framework that doesn't depend on other libraries\n* [x] Get rid of SSH's bloated, modular design\n* [x] Source is less than `500kb`, learning it is also simple\n* [x] RESTful-style routing design\n* [x] Template engine support, view development more flexible\n* [x] High performance, 100 concurrent qps 20w/s\n* [x] Run the `JAR` package to open the web service\n* [x] Streams-style API\n* [x] `CSRF` and `XSS` defense\n* [x] `Basic Auth` and `Authorization`\n* [x] Supports plug-in extensions\n* [x] Support webjars resources\n* [x] Tasks based on `cron` expressions\n* [x] Built-in a variety of commonly used middleware\n* [x] Built-in Response output\n* [x] JDK8 +\n\n## Overview\n\n» Simplicity: The design is simple, easy to understand and doesn't introduce many layers between you and the standard library. The goal of this project is that the users should be able to understand the whole framework in a single day.<br/>\n» Elegance: `blade` supports the RESTful style routing interface, has no invasive interceptors and provides the writing of a DSL grammar.<br/>\n» Easy deploy: supports `maven` package `jar` file running.<br/>\n\n## Quick Start\n\nCreate a basic `Maven` or `Gradle` project.\n\n> Do not create a `webapp` project, Blade does not require much trouble.\n\nRun with `Maven`:\n\n```xml\n<dependency>\n    <groupId>com.hellokaton</groupId>\n    <artifactId>blade-core</artifactId>\n    <version>2.1.2.RELEASE</version>\n</dependency>\n```\n\nor `Gradle`:\n\n```sh\ncompile 'com.hellokaton:blade-core:2.1.2.RELEASE'\n```\n\nWrite the `main` method and the `Hello World`:\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/\", ctx -> ctx.text(\"Hello Blade\")).start();\n}\n```\n\nOpen http://localhost:9000 in your browser to see your first `Blade` application!\n\n## Contents\n\n- [**`Register Route`**](#register-route)\n    - [**`HardCode`**](#hardCode)\n    - [**`Controller`**](#controller)\n- [**`Request Parameter`**](#request-parameter)\n    - [**`URL Parameter`**](#URL-parameter)\n    - [**`Form Parameter`**](#form-parameter)\n    - [**`Path Parameter`**](#path-parameter)\n    - [**`Body Parameter`**](#body-parameter)\n    - [**`Parse To Model`**](#parse-to-model)\n- [**`Get Environment`**](#get-environment)\n- [**`Get Header`**](#get-header)\n- [**`Get Cookie`**](#get-cookie)\n- [**`Static Resource`**](#static-resource)\n- [**`Upload File`**](#upload-file)\n- [**`Download File`**](#download-file)\n- [**`Set Session`**](#set-session)\n- [**`Render To Browser`**](#render-to-browser)\n    - [**`Render Response`**](#render-json)\n    - [**`Render Text`**](#render-text)\n    - [**`Render Html`**](#render-html)\n- [**`Render Template`**](#render-template)\n    - [**`Default Template`**](#default-template)\n    - [**`Jetbrick Template`**](#jetbrick-template)\n- [**`Redirects`**](#redirects)\n- [**`Write Cookie`**](#write-cookie)\n- [**`Web Hook`**](#web-hook)\n- [**`Logging`**](#logging)\n- [**`Basic Auth`**](#basic-auth)\n- [**`Change Server Port`**](#change-server-port)\n- [**`Configuration SSL`**](#configuration-ssl)\n- [**`Custom Exception Handler`**](#custom-exception-handler)\n\n## Register Route\n\n### HardCode\n\n```java\npublic static void main(String[] args) {\n    // Create multiple routes GET, POST, PUT, DELETE using Blade instance\n    Blade.create()\n        .get(\"/user/21\", getting)\n        .post(\"/save\", posting)\n        .delete(\"/remove\", deleting)\n        .put(\"/putValue\", putting)\n        .start();\n}\n```\n\n### `Controller`\n\n```java\n@Path\npublic class IndexController {\n\n    @GET(\"/login\")\n    public String login(){\n        return \"login.html\";\n    }\n    \n    @POST(value = \"/login\", responseType = ResponseType.JSON)\n    public RestResponse doLogin(RouteContext ctx){\n        // do something\n        return RestResponse.ok();\n    }\n\n}\n```\n\n## Request Parameter\n\n### URL Parameter\n\n**Using RouteContext**\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/user\", ctx -> {\n        Integer age = ctx.queryInt(\"age\");\n        System.out.println(\"age is:\" + age);\n    }).start();\n}\n```\n\n**Using `@Query` annotation**\n\n```java\n@GET(\"/user\")\npublic void savePerson(@Query Integer age){\n  System.out.println(\"age is:\" + age);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X GET http://127.0.0.1:9000/user?age=25\n```\n\n### Form Parameter\n\nHere is an example:\n\n**Using RouteContext**\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/user\", ctx -> {\n        Integer age = ctx.fromInt(\"age\");\n        System.out.println(\"age is:\" + age);\n    }).start();\n}\n```\n\n**Using `@Form` Annotation**\n\n```java\n@POST(\"/save\")\npublic void savePerson(@Form String username, @Form Integer age){\n  System.out.println(\"username is:\" + username + \", age is:\" + age);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X POST http://127.0.0.1:9000/save -F username=jack -F age=16\n```\n\n### Path Parameter\n\n**Using RouteContext**\n\n```java\npublic static void main(String[] args) {\n    Blade blade = Blade.create();\n    // Create a route: /user/:uid\n    blade.get(\"/user/:uid\", ctx -> {\n        Integer uid = ctx.pathInt(\"uid\");\n        ctx.text(\"uid : \" + uid);\n    });\n\n    // Create two parameters route\n    blade.get(\"/users/:uid/post/:pid\", ctx -> {\n        Integer uid = ctx.pathInt(\"uid\");\n        Integer pid = ctx.pathInt(\"pid\");\n        String msg = \"uid = \" + uid + \", pid = \" + pid;\n        ctx.text(msg);\n    });\n    \n    // Start blade\n    blade.start();\n}\n```\n\n**Using `@PathParam` Annotation**\n\n```java\n@GET(\"/users/:username/:page\")\npublic void userTopics(@PathParam String username, @PathParam Integer page){\n    System.out.println(\"username is:\" + usernam + \", page is:\" + page);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X GET http://127.0.0.1:9000/users/hellokaton/2\n```\n\n### Body Parameter\n\n```java\npublic static void main(String[] args) {\n    Blade.create().post(\"/body\", ctx -> {\n        System.out.println(\"body string is:\" + ctx.bodyToString());\n    }).start();\n}\n```\n\n**Using `@Body` Annotation**\n\n```java\n@POST(\"/body\")\npublic void readBody(@Body String data){\n    System.out.println(\"data is:\" + data);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X POST http://127.0.0.1:9000/body -d '{\"username\":\"hellokaton\",\"age\":22}'\n```\n\n### Parse To Model\n\nThis is the `User` model.\n\n```java\npublic class User {\n    private String username;\n    private Integer age;\n    // getter and setter\n}\n```\n\n**By Annotation**\n\n```java\n@POST(\"/users\")\npublic void saveUser(@Form User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X POST http://127.0.0.1:9000/users -F username=jack -F age=16\n```\n\n**Custom model identification**\n\n```java\n@POST(\"/users\")\npublic void saveUser(@Form(name=\"u\") User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X POST http://127.0.0.1:9000/users -F u[username]=jack -F u[age]=16\n```\n\n**Body Parameter To Model**\n\n```java\n@POST(\"/body\")\npublic void body(@Body User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\nTest it with sample data from the terminal\n\n```bash\ncurl -X POST http://127.0.0.1:9000/body -d '{\"username\":\"hellokaton\",\"age\":22}'\n```\n\n## Get Environment\n\n```java\nEnvironment environment = WebContext.blade().environment();\nString version = environment.get(\"app.version\", \"0.0.1\");\n```\n\n## Get Header\n\n**By Context**\n\n```java\n@GET(\"header\")\npublic void readHeader(RouteContext ctx){\n    System.out.println(\"Host => \" + ctx.header(\"Host\"));\n    // get useragent\n    System.out.println(\"UserAgent => \" + ctx.userAgent());\n    // get client ip\n    System.out.println(\"Client Address => \" + ctx.address());\n}\n```\n\n**By Annotation**\n\n```java\n@GET(\"header\")\npublic void readHeader(@Header String host){\n    System.out.println(\"Host => \" + host);\n}\n```\n\n## Get Cookie\n\n**By Context**\n\n```java\n@GET(\"cookie\")\npublic void readCookie(RouteContext ctx){\n    System.out.println(\"UID => \" + ctx.cookie(\"UID\"));\n}\n```\n\n**By Annotation**\n\n```java\n@GET(\"cookie\")\npublic void readCookie(@Cookie String uid){\n    System.out.println(\"Cookie UID => \" + uid);\n}\n```\n\n## Static Resource\n\nBlade builds a few static resource catalog, as long as you will save the resource file in the static directory under the classpath, and then browse http://127.0.0.1:9000/static/style.css\n\nIf you want to customize the static resource URL\n\n```java\nBlade.create().addStatics(\"/mydir\");\n```\n\nOf course you can also specify it in the configuration file. `application.properties` (location in classpath)\n\n```bash\nmvc.statics=/mydir\n```\n\n## Upload File\n\n**By Request**\n\n```java\n@POST(\"upload\")\npublic void upload(Request request){\n    request.fileItem(\"img\").ifPresent(fileItem -> {\n        fileItem.moveTo(new File(fileItem.getFileName()));\n    });\n}\n```\n\n**By Annotation**\n\n```java\n@POST(\"upload\")\npublic void upload(@Multipart FileItem fileItem){\n    // Save to new path\n    fileItem.moveTo(new File(fileItem.getFileName()));\n}\n```\n\n## Download File\n\n```java\n@GET(value = \"/download\", responseType = ResponseType.STREAM)\npublic void download(Response response) throws IOException {\n    response.write(\"abcd.pdf\", new File(\"146373013842336153820220427172437.pdf\"));\n}\n```\n\n**If you want to preview certain files in your browser**\n\n```java\n@GET(value = \"/preview\", responseType = ResponseType.PREVIEW)\npublic void preview(Response response) throws IOException {\n    response.write(new File(\"146373013842336153820220427172437.pdf\"));\n}\n```\n\n## Set Session\n\nThe session is disabled by default, you must enable the session.\n\n```java\nBlade.create()\n     .http(HttpOptions::enableSession)\n     .start(Application.class, args);\n```\n\n> 💡 It can also be enabled using a configuration file，`http.session.enabled=true` \n\n```java\npublic void login(Session session){\n    // if login success\n    session.attribute(\"login_key\", SOME_MODEL);\n}\n```\n\n## Render To Browser\n\n### Render Response\n\n**By Context**\n\n```java\n@GET(\"users/json\")\npublic void printJSON(RouteContext ctx){\n    User user = new User(\"hellokaton\", 18);\n    ctx.json(user);\n}\n```\n\n**By Annotation**\n\nThis form looks more concise 😶\n\n```java\n@GET(value = \"/users/json\", responseType = ResponseType.JSON)\npublic User printJSON(){\n    return new User(\"hellokaton\", 18);\n}\n```\n\n### Render Text\n\n```java\n@GET(\"text\")\npublic void printText(RouteContext ctx){\n    ctx.text(\"I Love Blade!\");\n}\n```\n\nor\n\n```java\n@GET(value = \"/text\", responseType = ResponseType.TEXT)\npublic String printText(RouteContext ctx){\n    return \"I Love Blade!\";\n}\n```\n\n### Render Html\n\n```java\n@GET(\"html\")\npublic void printHtml(RouteContext ctx){\n    ctx.html(\"<center><h1>I Love Blade!</h1></center>\");\n}\n```\n\nor\n\n```java\n@GET(value = \"/html\", responseType = ResponseType.HTML)\npublic String printHtml(RouteContext ctx){\n    return \"<center><h1>I Love Blade!</h1></center>\";\n}\n```\n\n## Render Template\n\nBy default all template files are in the templates directory; in most of the cases you do not need to change it.\n\n### Default Template\n\nBy default, Blade uses the built-in template engine, which is very simple. In a real-world web project, you can try several other extensions.\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/hello\", ctx -> {\n        ctx.attribute(\"name\", \"hellokaton\");\n        ctx.render(\"hello.html\");\n    }).start(Hello.class, args);\n}\n```\n\nThe `hello.html` template\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Page</title>\n</head>\n<body>\n\n    <h1>Hello, ${name}</h1>\n\n</body>\n</html>\n```\n\n### Jetbrick Template\n\n**Config Jetbrick Template**\n\nCreate a `BladeLoader` class and load some config\n\n```java\n@Bean\npublic class TemplateConfig implements BladeLoader {\n\n    @Override\n    public void load(Blade blade) {\n        blade.templateEngine(new JetbrickTemplateEngine());\n    }\n\n}\n```\n\nWrite some data for the template engine to render\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/hello\", ctx -> {\n        User user = new User(\"hellokaton\", 50);\n        ctx.attribute(\"user\", user);\n        ctx.render(\"hello.html\");\n    }).start(Hello.class, args);\n}\n```\n\nThe `hello.html` template\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Page</title>\n</head>\n<body>\n\n    <h1>Hello, ${user.username}</h1>\n\n    #if(user.age > 18)\n        <p>Good Boy!</p>\n    #else\n        <p>Gooood Baby!</p>\n    #end\n\n</body>\n</html>\n```\n\n[Render API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#render-com.ModelAndView-)\n\n## Redirects\n\n```java\n@GET(\"redirect\")\npublic void redirectToGithub(RouteContext ctx){\n    ctx.redirect(\"https://github.com/hellokaton\");\n}\n```\n\n[Redirect API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#redirect-java.lang.String-)\n\n## Write Cookie\n\n```java\n@GET(\"write-cookie\")\npublic void writeCookie(RouteContext ctx){\n    ctx.cookie(\"hello\", \"world\");\n    ctx.cookie(\"UID\", \"22\", 3600);\n}\n```\n\n[Cookie API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#cookie-java.lang.String-java.lang.String-)\n\n## Web Hook\n\n`WebHook` is the interface in the Blade framework that can be intercepted before and after the execution of the route.\n\n```java\npublic static void main(String[] args) {\n    // All requests are exported before execution before\n    Blade.create().before(\"/*\", ctx -> {\n        System.out.println(\"before...\");\n    }).start();\n}\n```\n\n## Logging\n\nBlade uses slf4j-api as logging interface, the default implementation of a simple log package (modified from simple-logger); if you need complex logging you can also use a custom library, you only need to exclude the `blade-log` from the dependencies.\n\n```java\nprivate static final Logger log = LoggerFactory.getLogger(Hello.class);\n\npublic static void main(String[] args) {\n    log.info(\"Hello Info, {}\", \"2017\");\n    log.warn(\"Hello Warn\");\n    log.debug(\"Hello Debug\");\n    log.error(\"Hello Error\");\n}\n```\n\n## Basic Auth\n\nBlade includes a few middleware, like Basic Authentication; of course, it can also be customized to achieve more complex goals.\n\n```java\npublic static void main(String[] args) {\n    Blade.create().use(new BasicAuthMiddleware()).start();\n}\n```\n\nSpecify the user name and password in the `application.properties` configuration file.\n\n```bash\nhttp.auth.username=admin\nhttp.auth.password=123456\n```\n\n## Change Server Port\n\nThere are three ways to modify the port: hard coding it, in a configuration file, and through a command line parameter.\n\n**Hard Coding**\n\n```java\nBlade.create().listen(9001).start();\n```\n\n**Configuration For `application.properties`**\n\n```bash\nserver.port=9001\n```\n\n**Command Line**\n\n```bash\njava -jar blade-app.jar --server.port=9001\n```\n\n## Configuration SSL\n\n**Configuration For `application.properties`**\n\n```bash\nserver.ssl.enable=true\nserver.ssl.cert-path=cert.pem\nserver.ssl.private-key-path=private_key.pem\nserver.ssl.private-key-pass=123456\n```\n** Configuration using INettySslCustomizer **\n\n```bash\n#Specify any properties your customizer needs, for example\nserver.ssl.enable=true\nserver.keystore.path=fully qualified path\nserver.keystore.type=PKCS12\nserver.keystore.password=mypass\nserver.keystore.alias=optional alias\n```\n\n* Create your implementation of INettySslCustomizer\n* Register it with Blade class\n\n```java\n\t   MyNettySslCustomizer nc = new MyNettySslCustomizer();\t\n\t\tBlade.create()\n\t\t\t.setNettySslCustomizer(nc)\n\t\t\t.start(App.class, args);\n\t\t}\n```\n\nSample implementation of INettySslCustomizer\n\n```java\npublic class MyNettySSLCustomizer implements INettySslCustomizer {\n\n\tpublic SslContext getCustomSslContext(Blade blade) {\n\t\tSslContext sslctx = null;\n\n\t\t// get my custom properties from the environment\n\t\tString keystoreType = blade.getEnv(\"server.keystore.type\", null);\n\t\tString keystorePath = blade.getEnv(\"server.keystore.path\", null);\n\t\tString keystorePass = blade.getEnv(\"server.keystore.password\", null);\n\n\t\tif (verifyKeystore(keystoreType, keystorePath, keystorePass)) {\n\n\t\t\ttry (FileInputStream instream = new FileInputStream(new File(keystorePath))) {\n\n\t\t\t\t// verify I can load store and password is valid\n\t\t\t\tKeyStore keystore = KeyStore.getInstance(keystoreType);\n\t\t\t\tchar[] storepw = keystorePass.toCharArray();\n\t\t\t\tkeystore.load(instream, storepw);\n\t\t\t\t\n\t\t\t\tKeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n\t\t\t\tkmf.init(keystore, storepw);\n\t\t\t\tsslctx = SslContextBuilder.forServer(kmf).build();\n\t\t\t\t\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlog.error(\"Keystore validation failed \" + ex.getMessage());\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tlog.error(\"Unable to load keystore, sslContext creation failed.\");\n\t\t}\n\n\t\treturn sslctx;\n\t}\n```\n\n## Custom Exception Handler\n\nBlade has an exception handler already implemented by default; if you need to deal with custom exceptions, you can do it like follows.\n\n```java\n@Bean\npublic class GlobalExceptionHandler extends DefaultExceptionHandler {\n    \n    @Override\n    public void handle(Exception e) {\n        if (e instanceof CustomException) {\n            CustomException customException = (CustomException) e;\n            String code = customException.getCode();\n            // do something\n        } else {\n            super.handle(e);\n        }\n    }\n\n}\n```\n\nBesides looking easy, the features above are only the tip of the iceberg, and there are more surprises to see in the documentation and sample projects:\n\n+ [Blade Demos](https://github.com/lets-blade/blade-demos)\n+ [Awesome Blade](https://github.com/lets-blade/awesome-blade)\n\n## Change Logs\n\n[See Here](https://lets-blade.com/about/change-logs)\n\n## Contact\n\n- Twitter: [hellokaton](https://twitter.com/hellokaton)\n- Mail: hellokaton@gmail.com\n\n## Contributors\n\nThanks goes to these wonderful people\n\n![contributors.svg](https://opencollective.com/blade/contributors.svg?width=890&button=false)\n\nContributions of any kind are welcome!\n\n## Licenses\n\nPlease see [Apache License](LICENSE)\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 17.4794921875,
          "content": "<p align=\"center\">\n    <a href=\"https://lets-blade.github.io/\"><img src=\"https://i.loli.net/2018/09/18/5ba0cd93c710e.png\" width=\"650\"/></a>\n</p>\n<p align=\"center\">基于 <code>Java8</code> + <code>Netty4</code> 创造的轻量级、高性能、简洁优雅的Web框架 😋</p>\n<p align=\"center\">花 <b>1小时</b> 学会它做点有趣的项目，一款除了 Spring 系框架的不二之选。</p>\n<p align=\"center\">\n    🐾 <a href=\"#quick-start\" target=\"_blank\">快速开始</a> | \n    🌚 <a href=\"https://lets-blade.github.io/\" target=\"_blank\">官方文档</a> | \n    💰 <a href=\"https://lets-blade.github.io/donate.html\" target=\"_blank\">捐赠我们</a> |\n    🌾 <a href=\"README.md\">English</a>\n</p>\n<p align=\"center\">\n    <a href=\"https://travis-ci.org/lets-blade/blade\"><img src=\"https://img.shields.io/travis/lets-blade/blade.svg?style=flat-square\"></a>\n    <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cblade-core\"><img src=\"https://img.shields.io/maven-central/v/com.hellokaton/blade-core.svg?style=flat-square\"></a>\n    <a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=flat-square\"></a>\n    <a class=\"badge-align\" href=\"https://www.codacy.com/gh/lets-blade/blade/dashboard\"><img src=\"https://app.codacy.com/project/badge/Grade/1eff0e30bf694402ac1b0ebe587bfa5a\"/></a>\n    <a href=\"https://gitter.im/hellokaton/blade\"><img src=\"https://badges.gitter.im/hellokaton/blade.svg?style=flat-square\"></a>\n    <a href=\"https://www.codetriage.com/lets-blade/blade\"><img src=\"https://www.codetriage.com/lets-blade/blade/badges/users.svg\"></a>\n</p>\n\n***\n\n## Blade是什么？\n\n`Blade` 是一款追求简约、高效的 Web 框架，让 `JavaWeb` 开发如虎添翼，在性能与灵活性上同时兼顾。\n如果你喜欢尝试有趣的事物，相信你会爱上它。\n如果觉得这个项目不错可以 [star](https://github.com/hellokaton/blade/stargazers) 支持或者 [捐赠](https://dun.mianbaoduo.com/@hellokaton) 它 :blush:\n\n## 功能特性\n\n* [x] 新一代MVC框架，不依赖更多的库\n* [x] 摆脱SSH的臃肿，模块化设计\n* [x] 源码不到 `500kb`，学习也简单\n* [x] Restful风格路由设计\n* [x] 模板引擎支持，视图开发更灵活\n* [x] 高性能，100 并发下qps 20w/s\n* [x] 运行 `JAR` 包即可开启 web 服务\n* [x] 支持 `CSRF` 和 `XSS` 防御\n* [x] 支持 `BasicAuth` 和权限管理\n* [x] 流式API风格\n* [x] 支持插件扩展\n* [x] 支持 webjars 资源\n* [x] `cron` 表达式的定时任务\n* [x] 内置多种常用中间件\n* [x] 内置JSON输出\n* [x] JDK8+\n\n## 框架概述\n\n» 简洁的：框架设计简单,容易理解,不依赖于更多第三方库。Blade框架目标让用户在一天内理解并使用。<br/>\n» 优雅的：`Blade` 支持 REST 风格路由接口, 提供 DSL 语法编写，无侵入式的拦截器。<br/>\n» 易部署：支持 `maven` 打成 `jar` 包直接运行。<br/>\n\n## 快速入门\n\n`Maven` 配置：\n\n创建一个基础的 `Maven` 工程\n\n```xml\n<dependency>\n\t<groupId>com.hellokaton</groupId>\n\t<artifactId>blade-core</artifactId>\n\t<version>2.1.2.RELEASE</version>\n</dependency>\n```\n\n> 不需要创建 `webapp` 项目骨架, Blade 没这么麻烦。\n\n或者  `Gradle`:\n\n```sh\ncompile 'com.hellokaton:blade-core:2.1.2.RELEASE'\n```\n\n编写 `main` 函数写一个 `Hello World`：\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/\", ctx -> ctx.text(\"Hello Blade\")).start();\n}\n```\n\n用浏览器打开 http://localhost:9000 这样就可以看到第一个 `Blade` 应用了！\n\n\n## Contents\n\n- [**`注册路由`**](#注册路由)\n    - [**`硬编码方式`**](#硬编码方式)\n    - [**`控制器方式`**](#控制器方式)\n- [**`请求参数`**](#获取请求参数)\n    - [**`URL参数`**](#URL参数)\n    - [**`表单参数`**](#表单参数)\n    - [**`Restful参数`**](#restful参数)\n    - [**`Body参数`**](#body参数)\n    - [**`参数转为对象`**](#参数转为对象)\n- [**`获取环境配置`**](#获取环境配置)\n- [**`获取Header`**](#获取header)\n- [**`获取Cookie`**](#获取cookie)\n- [**`静态资源`**](#静态资源)\n- [**`上传文件`**](#上传文件)\n- [**`下载文件`**](#下载文件)\n- [**`设置会话`**](#设置会话)\n- [**`渲染到浏览器`**](#渲染到浏览器)\n    - [**`渲染JSON`**](#渲染json)\n    - [**`渲染文本`**](#渲染文本)\n    - [**`渲染Html`**](#渲染html)\n- [**`模板渲染`**](#模板渲染)\n    - [**`默认模板`**](#默认模板)\n    - [**`Jetbrick模板`**](#jetbrick模板)\n- [**`重定向`**](#重定向)\n- [**`写入Cookie`**](#写入cookie)\n- [**`路由拦截`**](#路由拦截)\n- [**`日志输出`**](#日志输出)\n- [**`Basic认证`**](#basic认证)\n- [**`修改服务端口`**](#修改服务端口)\n- [**`配置SSL`**](#配置ssl)\n- [**`自定义异常处理`**](#自定义异常处理)\n\n## 注册路由\n\n### 硬编码方式\n\n```java\npublic static void main(String[] args) {\n    // 使用 Blade 实例创建多种路由 GET、POST、PUT、DELETE\n    Blade.create()\n        .get(\"/user/21\", getting)\n        .post(\"/save\", posting)\n        .delete(\"/remove\", deleting)\n        .put(\"/putValue\", putting)\n        .start();\n}\n```\n\n### 控制器方式\n\n```java\n@Path\npublic class IndexController {\n\n    @GET(\"/login\")\n    public String login(){\n      return \"login.html\";\n    }\n    \n    @POST(value = \"/login\", responseType = ResponseType.JSON)\n    public RestResponse doLogin(RouteContext ctx){\n      // do something\n      return RestResponse.ok();\n    }\n    \n}\n```\n\n## 请求参数\n\n### URL参数\n\n下面是个例子:\n\n**使用 RouteContext 获取**\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/user\", ctx -> {\n        Integer age = ctx.queryInt(\"age\");\n        System.out.println(\"age is:\" + age);\n    }).start();\n}\n```\n\n**使用 `@Query` 注解获取**\n\n```java\n@GET(\"/user\")\npublic void savePerson(@Query Integer age){\n  System.out.println(\"age is:\" + age);\n}\n```\n\n在命令行下发送数据测试\n\n```bash\ncurl -X GET http://127.0.0.1:9000/user?age=25\n```\n\n### 表单参数\n\n下面是个例子:\n\n**使用 RouteContext 获取**\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/user\", ctx -> {\n        Integer age = ctx.fromInt(\"age\");\n        System.out.println(\"age is:\" + age);\n    }).start();\n}\n```\n\n**使用 `@Form` 注解获取**\n\n```java\n@POST(\"/save\")\npublic void savePerson(@Form String username, @Form Integer age){\n  System.out.println(\"username is:\" + username + \", age is:\" + age);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X POST http://127.0.0.1:9000/save -F username=jack -F age=16\n```\n\n### Restful 参数\n\n**使用 RouteContext 获取**\n\n```java\npublic static void main(String[] args) {\n    Blade blade = Blade.create();\n    // Create a route: /user/:uid\n    blade.get(\"/user/:uid\", ctx -> {\n        Integer uid = ctx.pathInt(\"uid\");\n        ctx.text(\"uid : \" + uid);\n    });\n\n    // Create two parameters route\n    blade.get(\"/users/:uid/post/:pid\", ctx -> {\n        Integer uid = ctx.pathInt(\"uid\");\n        Integer pid = ctx.pathInt(\"pid\");\n        String msg = \"uid = \" + uid + \", pid = \" + pid;\n        ctx.text(msg);\n    });\n    \n    // Start blade\n    blade.start();\n}\n```\n\n**使用注解获取**\n\n```java\n@GET(\"/users/:username/:page\")\npublic void userTopics(@PathParam String username, @PathParam Integer page){\n  System.out.println(\"username is:\" + username + \", page is:\" + page);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X GET http://127.0.0.1:9000/users/hellokaton/2\n```\n\n### Body 参数\n\n```java\npublic static void main(String[] args) {\n    Blade.create().post(\"/body\", ctx -> {\n        System.out.println(\"body string is:\" + ctx.bodyToString());\n    }).start();\n}\n```\n\n**使用 `@Body` 注解**\n\n```java\n@POST(\"/body\")\npublic void readBody(@Body String data){\n    System.out.println(\"data is:\" + data);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X POST http://127.0.0.1:9000/body -d '{\"username\":\"hellokaton\",\"age\":22}'\n```\n\n### 参数转为对象\n\n这是 `User` 类结构\n\n```java\npublic class User {\n  private String username;\n  private Integer age;\n  // getter and setter\n}\n```\n\n**使用注解获取**\n\n```java\n@POST(\"/users\")\npublic void saveUser(@Form User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X POST http://127.0.0.1:9000/users -F username=jack -F age=16\n```\n\n**自定义 `model` 名称**\n\n```java\n@POST(\"/users\")\npublic void saveUser(@Form(name=\"u\") User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X POST http://127.0.0.1:9000/users -F u[username]=jack -F u[age]=16\n```\n\n**Body 参数转对象**\n\n```java\n@POST(\"/body\")\npublic void body(@Body User user) {\n    System.out.println(\"user => \" + user);\n}\n```\n\n在终端下发送数据测试\n\n```bash\ncurl -X POST http://127.0.0.1:9000/body -d '{\"username\":\"hellokaton\",\"age\":22}'\n```\n\n## 获取环境配置\n\n```java\nEnvironment environment = WebContext.blade().environment();\nString version = environment.get(\"app.version\", \"0.0.1\");\n```\n\n## 获取 Header\n\n**使用 RouteContext 获取**\n\n```java\n@GET(\"header\")\npublic void readHeader(RouteContext ctx){\n    System.out.println(\"Host => \" + ctx.header(\"Host\"));\n    // get useragent\n    System.out.println(\"UserAgent => \" + ctx.userAgent());\n    // get client ip\n    System.out.println(\"Client Address => \" + ctx.address());\n}\n```\n\n**使用注解获取**\n\n```java\n@GET(\"header\")\npublic void readHeader(@Header String host){\n  System.out.println(\"Host => \" + host);\n}\n```\n\n## 获取 Cookie\n\n**使用 RouteContext 获取**\n\n```java\n@GET(\"cookie\")\npublic void readCookie(RouteContext ctx){\n    System.out.println(\"UID => \" + ctx.cookie(\"UID\"));\n}\n```\n\n**使用注解获取**\n\n```java\n@GET(\"cookie\")\npublic void readCookie(@Cookie String UID){\n  System.out.println(\"Cookie UID => \" + UID);\n}\n```\n\n## 静态资源\n\nBlade 内置了一些静态资源目录，只要将资源文件保存在 `classpath` 下的 `static` 目录中，然后浏览 http://127.0.0.1:9000/static/style.css\n\n如果要自定义静态资源URL，可以使用下面的代码\n\n```java\nBlade.create().addStatics(\"/mydir\");\n```\n\n当然你也可以在配置文件中指定 `application.properties` (位于classpath之下)\n\n```bash\nmvc.statics=/mydir\n```\n\n## 上传文件\n\n**使用Request获取**\n\n```java\n@POST(\"upload\")\npublic void upload(Request request){\n    request.fileItem(\"img\").ifPresent(fileItem -> {\n        fileItem.moveTo(new File(fileItem.getFileName()));              \n    });\n}\n```\n\n**使用注解获取**\n\n```java\n@POST(\"upload\")\npublic void upload(@Multipart FileItem fileItem){\n    // 保存到新位置\n    fileItem.moveTo(new File(fileItem.getFileName()));\n}\n```\n\n## 下载文件\n\n```java\n@GET(value = \"/download\", responseType = ResponseType.STREAM)\npublic void download(Response response) throws IOException {\n    response.write(\"abcd.pdf\", new File(\"146373013842336153820220427172437.pdf\"));\n}\n```\n\n**如果你想在浏览器预览某些文件**\n\n```java\n@GET(value = \"/preview\", responseType = ResponseType.PREVIEW)\npublic void preview(Response response) throws IOException {\n    response.write(new File(\"146373013842336153820220427172437.pdf\"));\n}\n```\n\n## 设置会话\n\n默认情况不开启会话功能，首先要开启会话\n\n```java\nBlade.create()\n     .http(HttpOptions::enableSession)\n     .start(Application.class, args);\n```\n\n> 💡 也可以使用配置文件开启，`http.session.enabled=true` \n\n```java\npublic void login(Session session){\n  // if login success\n  session.attribute(\"login_key\", SOME_MODEL);\n}\n```\n\n## 渲染到浏览器\n\n### 渲染JSON\n\n**使用 RouteContext 渲染**\n\n```java\n@GET(\"users/json\")\npublic void printJSON(RouteContext ctx){\n    User user = new User(\"hellokaton\", 18);\n    ctx.json(user);\n}\n```\n\n**使用注解获取**\n\n这种形式看起来更简洁 😶\n\n```java\n@GET(value = \"/users/json\", responseType = ResponseType.JSON)\npublic User printJSON(){\n  return new User(\"hellokaton\", 18);\n}\n```\n\n### 渲染文本\n\n```java\n@GET(\"text\")\npublic void printText(RouteContext ctx){\n    ctx.text(\"I Love Blade!\");\n}\n```\n\nor\n\n```java\n@GET(value = \"/text\", responseType = ResponseType.TEXT)\npublic String printText(RouteContext ctx){\n    return \"I Love Blade!\";\n}\n```\n\n### 渲染Html\n\n```java\n@GET(\"html\")\npublic void printHtml(RouteContext ctx){\n    ctx.html(\"<center><h1>I Love Blade!</h1></center>\");\n}\n```\n\nor\n\n```java\n@GET(value = \"/html\", responseType = ResponseType.HTML)\npublic String printHtml(RouteContext ctx){\n    return \"<center><h1>I Love Blade!</h1></center>\";\n}\n```\n\n## 模板渲染\n\n默认情况下，所有模板文件都 `在templates` 目录中，大多数情况下你不需要更改它。\n\n### 默认模板\n\n默认情况下，Blade使用内置的模板引擎，如果你真的做一个Web项目可以尝试其他几个扩展，这很简单。\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/hello\", ctx -> {\n        ctx.attribute(\"name\", \"hellokaton\");\n        ctx.render(\"hello.html\");\n    }).start(Hello.class, args);\n}\n```\n\n`hello.html` 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Page</title>\n</head>\n<body>\n\n  <h1>Hello, ${name}</h1>\n\n</body>\n</html>\n```\n\n### Jetbrick模板\n\n**配置 Jetbrick 模板引擎**\n\n实现一个 `BladeLoader` 加载初始化的操作\n\n```java\n@Bean\npublic class TemplateConfig implements BladeLoader {\n    \n    @Override\n    public void load(Blade blade) {\n        blade.templateEngine(new JetbrickTemplateEngine());\n    }\n    \n}\n```\n\n写一点数据让模板渲染\n\n```java\npublic static void main(String[] args) {\n    Blade.create().get(\"/hello\", ctx -> {\n        User user = new User(\"hellokaton\", 50);\n        ctx.attribute(\"user\", user);\n        ctx.render(\"hello.html\");\n    }).start(Hello.class, args);\n}\n```\n\n`hello.html` 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Page</title>\n</head>\n<body>\n\n  <h1>Hello, ${user.username}</h1>\n  \n  #if(user.age > 18)\n    <p>Good Boy!</p>\n  #else\n    <p>Gooood Baby!</p>\n  #end\n  \n</body>\n</html>\n```\n\n[Render API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#render-com.ModelAndView-)\n\n## 重定向\n\n```java\n@GET(\"redirect\")\npublic void redirectToGithub(RouteContext ctx){\n    ctx.redirect(\"https://github.com/hellokaton\");\n}\n```\n\n[Redirect API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#redirect-java.lang.String-)\n\n## 写入Cookie\n\n```java\n@GET(\"write-cookie\")\npublic void writeCookie(RouteContext ctx){\n    ctx.cookie(\"hello\", \"world\");\n    ctx.cookie(\"UID\", \"22\", 3600);\n}\n```\n\n[Cookie API](http://static.javadoc.io/com.hellokaton/blade-core/2.1.2.RELEASE/com/hellokaton/blade/mvc/http/Response.html#cookie-java.lang.String-java.lang.String-)\n\n## 路由拦截\n\n`WebHook` 是Blade框架中可以在执行路由之前和之后拦截的接口。\n\n```java\npublic static void main(String[] args) {\n    // All requests are exported before execution before\n    Blade.create().before(\"/*\", ctx -> {\n        System.out.println(\"before...\");\n    }).start();\n}\n```\n\n## 日志输出\n\nBlade 使用 `slf4-api` 作为日志接口，默认实现一个简单的日志（从simple-logger修改），如果你需要复杂的日志记录你也可以使用其他的日志框架，你只需要在依赖关系中排除 `blade-log` 然后添加你喜欢的。\n\n```java\nprivate static final Logger log = LoggerFactory.getLogger(Hello.class);\n\npublic static void main(String[] args) {\n  log.info(\"Hello Info, {}\", \"2017\");\n  log.warn(\"Hello Warn\");\n  log.debug(\"Hello Debug\");\n  log.error(\"Hello Error\");\n}\n```\n\n## Basic认证\n\nBlade 内置了几个中间件，当你需要Basic认证时可以使用如下代码，当然也可以定制来实现。\n\n```java\npublic static void main(String[] args) {\n  Blade.create().use(new BasicAuthMiddleware()).start();\n}\n```\n\n在 `application.properties` 配置文件中指定用户名和密码。\n\n```bash\nhttp.auth.username=admin\nhttp.auth.password=123456\n```\n\n## 修改服务端口\n\n有三种方式修改端口，硬编码，配置文件，启动命令行参数。\n\n**硬编码**\n\n```java\nBlade.create().listen(9001).start();\n```\n\n**配置文件 `application.properties`**\n\n```bash\nserver.port=9001\n```\n\n**命令行**\n\n```bash\njava -jar blade-app.jar --server.port=9001\n```\n\n## 配置SSL\n\n**配置文件 `application.properties`**\n\n```bash\nserver.ssl.enable=true\nserver.ssl.cert-path=cert.pem\nserver.ssl.private-key-path=private_key.pem\nserver.ssl.private-key-pass=123456\n```\n\n## 自定义异常处理\n\n默认情况下，Blade 已经实现了一个异常处理器，有时你需要处理自定义异常，因此你可以尝试像下面这样使用。\n\n```java\n@Bean\npublic class GolbalExceptionHandler extends DefaultExceptionHandler {\n    \n    @Override\n    public void handle(Exception e) {\n        if (e instanceof CustomException) {\n            CustomException customException = (CustomException) e;\n            String code = customException.getCode();\n            // do something\n        } else {\n            super.handle(e);\n        }\n    }\n  \n}\n```\n\n这一切看起来多么的简单，不过上面的功能可是冰山一角，查看文档和示例项目有更多惊喜:\n\n+ [Blade Demos](https://github.com/lets-blade/blade-demos)\n+ [Blade 资源列表](https://github.com/lets-blade/awesome-blade)\n\n## 联系我们\n\n- Twitter: [hellokaton](https://twitter.com/hellokaton)\n- Mail: hellokaton@gmail.com\n\n## 贡献者们\n\n非常感谢下面的开发者朋友对本项目的帮助，如果你也愿意提交PR，非常欢迎！\n\n![contributors.svg](https://opencollective.com/blade/contributors.svg?width=890&button=false)\n\n## 开源协议\n\n请查看 [Apache License](LICENSE)\n"
        },
        {
          "name": "blade-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "blade-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "blade-kit",
          "type": "tree",
          "content": null
        },
        {
          "name": "blade-security",
          "type": "tree",
          "content": null
        },
        {
          "name": "blade-websocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 15.0322265625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.hellokaton</groupId>\n    <artifactId>blade</artifactId>\n    <version>2.1.2.RELEASE</version>\n    <packaging>pom</packaging>\n\n    <name>blade</name>\n    <url>https://lets-blade.github.io</url>\n    <description>blade core</description>\n\n    <modules>\n        <module>blade-core</module>\n        <module>blade-kit</module>\n        <module>blade-security</module>\n        <module>blade-websocket</module>\n        <module>blade-examples</module>\n    </modules>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>hellokaton</name>\n            <email>hellokaton@gmail.com</email>\n        </developer>\n    </developers>\n    <scm>\n        <connection>scm:git@github.com:lets-blade/blade.git</connection>\n        <developerConnection>scm:git@github.com:lets-blade/blade.git</developerConnection>\n        <url>git@github.com:lets-blade/blade.git</url>\n    </scm>\n\n    <properties>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit-benchmarks.version>0.7.2</junit-benchmarks.version>\n        <junit.version>4.13.2</junit.version>\n        <slf4j-api.version>1.7.36</slf4j-api.version>\n        <netty.version>4.1.108.Final</netty.version>\n        <blade-asm.version>0.1.1</blade-asm.version>\n        <blade-log.version>0.2.0</blade-log.version>\n        <blade-kit.version>${project.parent.version}</blade-kit.version>\n        <blade-core.version>${project.parent.version}</blade-core.version>\n        <gson.version>2.9.0</gson.version>\n        <bootstrap.version>4.1.0</bootstrap.version>\n        <mockito.version>1.10.19</mockito.version>\n        <unirest-java.version>1.4.9</unirest-java.version>\n        <lombok.version>1.18.24</lombok.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>${slf4j-api.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.hellokaton</groupId>\n                <artifactId>blade-asm</artifactId>\n                <version>${blade-asm.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.hellokaton</groupId>\n                <artifactId>blade-log</artifactId>\n                <version>${blade-log.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.hellokaton</groupId>\n                <artifactId>blade-kit</artifactId>\n                <version>${blade-kit.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.hellokaton</groupId>\n                <artifactId>blade-core</artifactId>\n                <version>${blade-core.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>io.netty</groupId>\n                <artifactId>netty-codec-http</artifactId>\n                <version>${netty.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>io.netty</groupId>\n                <artifactId>netty-handler</artifactId>\n                <version>${netty.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>io.netty</groupId>\n                <artifactId>netty-transport-native-epoll</artifactId>\n                <version>${netty.version}</version>\n                <scope>provided</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n                <scope>provided</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>com.carrotsearch</groupId>\n                <artifactId>junit-benchmarks</artifactId>\n                <version>${junit-benchmarks.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.google.code.gson</groupId>\n                <artifactId>gson</artifactId>\n                <version>${gson.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.webjars</groupId>\n                <artifactId>bootstrap</artifactId>\n                <version>${bootstrap.version}</version>\n                <scope>test</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>org.mockito</groupId>\n                <artifactId>mockito-all</artifactId>\n                <version>${mockito.version}</version>\n                <scope>test</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>com.mashape.unirest</groupId>\n                <artifactId>unirest-java</artifactId>\n                <version>${unirest-java.version}</version>\n                <scope>test</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>org.projectlombok</groupId>\n                <artifactId>lombok</artifactId>\n                <version>${lombok.version}</version>\n                <scope>provided</scope>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <repositories>\n        <repository>\n            <id>oss-releases</id>\n            <url>https://oss.sonatype.org/content/repositories/releases</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>oss-snapshots</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <!--  Compile  -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>cobertura-maven-plugin</artifactId>\n                <version>2.7</version>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.ow2.asm</groupId>\n                        <artifactId>asm</artifactId>\n                        <version>5.0.4</version>\n                    </dependency>\n                </dependencies>\n                <configuration>\n                    <formats>\n                        <format>html</format>\n                        <format>xml</format>\n                    </formats>\n                    <instrumentation>\n                        <excludes>\n                            <exclude>com/hellokaton/blade/ioc/annotation/*.class</exclude>\n                            <exclude>com/hellokaton/blade/mvc/annotation/*.class</exclude>\n                            <exclude>com/hellokaton/blade/kit/*.class</exclude>\n                            <exclude>com/hellokaton/blade/server/*.class</exclude>\n                            <exclude>netty_hello/*.class</exclude>\n                        </excludes>\n                    </instrumentation>\n                    <check/>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <profiles>\n        <profile>\n            <id>release</id>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>ossrh</id>\n                    <url>\n                        https://s01.oss.sonatype.org/content/repositories/snapshots/\n                    </url>\n                </snapshotRepository>\n                <repository>\n                    <id>ossrh</id>\n                    <url>\n                        https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/\n                    </url>\n                </repository>\n            </distributionManagement>\n            <build>\n                <resources>\n                    <resource>\n                        <directory>src/main/java</directory>\n                        <filtering>false</filtering>\n                        <includes>\n                            <include>**/*.properties</include>\n                        </includes>\n                    </resource>\n                    <resource>\n                        <directory>src/main/resources</directory>\n                        <filtering>false</filtering>\n                    </resource>\n                </resources>\n                <plugins>\n                    <!--  Source  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.4</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!--  Javadoc  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.10.2</version>\n                        <configuration>\n                            <charset>UTF-8</charset>\n                            <docencoding>UTF-8</docencoding>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                                <configuration>\n                                    <additionalparam>-Xdoclint:none</additionalparam>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!--  Gpg Signature  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>snapshots</id>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>ossrh</id>\n                    <url>\n                        https://s01.oss.sonatype.org/content/repositories/snapshots/\n                    </url>\n                </snapshotRepository>\n                <repository>\n                    <id>ossrh</id>\n                    <url>\n                        https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/\n                    </url>\n                </repository>\n            </distributionManagement>\n            <build>\n                <plugins>\n                    <!--  Source  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.4</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!--skip test-->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <version>2.17</version>\n                        <configuration>\n                            <skipTests>true</skipTests>\n                        </configuration>\n                    </plugin>\n                    <!--  Javadoc  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.10.2</version>\n                        <configuration>\n                            <charset>UTF-8</charset>\n                            <docencoding>UTF-8</docencoding>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                                <configuration>\n                                    <additionalparam>-Xdoclint:none</additionalparam>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!--  Gpg Signature  -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n</project>"
        }
      ]
    }
  ]
}