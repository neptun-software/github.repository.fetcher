{
  "metadata": {
    "timestamp": 1736708795889,
    "page": 300,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "XRecyclerView/XRecyclerView",
      "stars": 5339,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": ".gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n*.iml\n.idea\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.64453125,
          "content": "# XRecyclerView\na RecyclerView that implements pullrefresh , loadingmore and header featrues.you can use it like a standard RecyclerView.\nyou don't need to implement a special adapter .qq 群478803619\nScreenshots\n-----------\n![demo](https://github.com/jianghejie/XRecyclerView/blob/master/art/demo.gif)\n\non real device it is much more smoother. \nUsage\n-----\n## gradle\n```groovy\n// 1.6.0 is the main\ncompile 'com.jcodecraeer:xrecyclerview:1.6.0'\n```\njust like a standard RecyclerView\n```java\nLinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\nlayoutManager.setOrientation(LinearLayoutManager.VERTICAL);\nmRecyclerView.setLayoutManager(layoutManager);\nmRecyclerView.setAdapter(mAdapter);\n```\n## pull to refresh and load more\nthe pull to refresh and load more featrue is enabled by default. we provide a callback to trigger the refresh and LoadMore event.\n```java\n mRecyclerView.setLoadingListener(new XRecyclerView.LoadingListener() {\n    @Override\n    public void onRefresh() {\n       //refresh data here\n    }\n\n    @Override\n    public void onLoadMore() {\n       // load more data here\n    }\n});\n```\nnew function of 1.5.7 version.\n```java\nmRecyclerView\n    .getDefaultRefreshHeaderView() // get default refresh header view\n    .setRefreshTimeVisible(true);  // make refresh time visible,false means hiding\n\n// if you are not sure that you are 100% going to\n// have no data load back from server anymore,do not use this\n@Deprecated\npublic void setEmptyView(View emptyView) {\n    ...\n}\n```\n\nnew function of 1.5.6 version,fixed a memory leak problem,use the code below to release XR's memory\n```java\n// any time,when you finish your activity or fragment,call this below\nif(mRecyclerView != null){\n    mRecyclerView.destroy(); // this will totally release XR's memory\n    mRecyclerView = null;\n}\n```\n\nnew function of 1.5.3 version,you can use XR in the sticky scroll model now,like the code below,the demo activity is 'LinearStickyScrollActivity'\n```java\nfinal View topView = findViewById(R.id.topView);\nfinal View tabView = findViewById(R.id.tabView);\nfinal View content = findViewById(R.id.contentView);\n\nfinal StickyScrollLinearLayout s = findViewById(R.id.StickyScrollLinearLayout);\ns.addOnLayoutChangeListener(\n        new View.OnLayoutChangeListener() {\n            @Override\n            public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {\n                if(s.getContentView() != null)\n                    return;\n                // 放在这里是为了等初始化结束后再添加，防止 height 获取 =0\n                // add from here just in case they height==0\n                s.setInitInterface(\n                        new StickyScrollLinearLayout.StickyScrollInitInterface() {\n                            @Override\n                            public View setTopView() {\n                                return topView;\n                            }\n\n                            @Override\n                            public View setTabView() {\n                                return tabView;\n                            }\n\n                            @Override\n                            public View setContentView() {\n                                return content;\n                            }\n                        }\n                );\n            }\n        }\n);\n```\n\ncall notifyItemRemoved or notifyItemInserted, remember to use the functions inside XRecyclerView\n```java\nlistData.remove(pos);\nmRecyclerView.notifyItemRemoved(listData,pos);\n```\n\nand of course you have to tell our RecyclerView when the refreshing or loading more work is done.\nyou can use\n```java\nmRecyclerView.loadMoreComplete();\n```\n\nto control when the item number of the screen is list.size-2,we call the onLoadMore\n\n```java\nmRecyclerView.setLimitNumberToCallLoadMore(2); // default is 1\n```\n\nto notify that the loading more work is done.\nand\n\n```java\n mRecyclerView.refreshComplete();\n```\n\nto notify that the refreshing work is done.\n\nhere is what we get:\n\n![default](https://github.com/jianghejie/XRecyclerView/blob/master/art/default.gif)\n\n## call refresh() manually(I change the previous setRefreshing() method to refresh() )\n\n```java\nmRecyclerView.refresh();\n```\n\n### custom refresh and loading more style\npull refresh and loading more style is highly customizable.\n\n#### custom loading style\nthe loading effect we use the  [AVLoadingIndicatorView](https://github.com/81813780/AVLoadingIndicatorView) . and it is built in(make a little change).\nwe provide all the effect in AVLoadingIndicatorView library besides we add a system style.\nyou can call \n```java\nmRecyclerView.setRefreshProgressStyle(int style);\n```\nand \n```java\nmRecyclerView.setLaodingMoreProgressStyle(int style);\n```\nto set the RefreshProgressStyle and  LaodingMoreProgressStyle respectively.\n\nfor example\n```java\nmRecyclerView.setRefreshProgressStyle(ProgressStyle.BallSpinFadeLoader);\n```\n![refreshloadingballspinfade](https://github.com/jianghejie/XRecyclerView/blob/master/art/refreshloadingballspinfade.gif)\n```java\nmRecyclerView.setLaodingMoreProgressStyle(ProgressStyle.SquareSpin);\n```\n![loadingmoresquarespin](https://github.com/jianghejie/XRecyclerView/blob/master/art/loadingmoresquarespin.gif)\n\n\nBallPulse  effect\n\n![BallPulse](https://github.com/jianghejie/XRecyclerView/blob/master/art/ballpulse.gif)\n\nall the effect can be get in the ProgressStyle class\n\n```java\npublic class ProgressStyle {\n    public static final int SysProgress=-1;\n    public static final int BallPulse=0;\n    public static final int BallGridPulse=1;\n    public static final int BallClipRotate=2;\n    public static final int BallClipRotatePulse=3;\n    public static final int SquareSpin=4;\n    public static final int BallClipRotateMultiple=5;\n    public static final int BallPulseRise=6;\n    public static final int BallRotate=7;\n    public static final int CubeTransition=8;\n    public static final int BallZigZag=9;\n    public static final int BallZigZagDeflect=10;\n    public static final int BallTrianglePath=11;\n    public static final int BallScale=12;\n    public static final int LineScale=13;\n    public static final int LineScaleParty=14;\n    public static final int BallScaleMultiple=15;\n    public static final int BallPulseSync=16;\n    public static final int BallBeat=17;\n    public static final int LineScalePulseOut=18;\n    public static final int LineScalePulseOutRapid=19;\n    public static final int BallScaleRipple=20;\n    public static final int BallScaleRippleMultiple=21;\n    public static final int BallSpinFadeLoader=22;\n    public static final int LineSpinFadeLoader=23;\n    public static final int TriangleSkewSpin=24;\n    public static final int Pacman=25;\n    public static final int BallGridBeat=26;\n    public static final int SemiCircleSpin=27;\n}\n```\n#### refresh arrow icon\nwe provide a default arrow icon:\n\n![ic_pulltorefresh_arrow](https://github.com/jianghejie/XRecyclerView/blob/master/art/ic_pulltorefresh_arrow.png)\n\nbut if you don't like it,you can replace it with any other icon  you want.\njust call\n```java\nmRecyclerView.setArrowImageView(R.drawable.iconfont_downgrey);\n```\n![customarrow](https://github.com/jianghejie/XRecyclerView/blob/master/art/customarrow.gif)\n### disable refresh and load more featrue\nif you don't want the refresh and load more featrue(in that case,you probably dont'n need the lib neither),you can call\n```java\nmRecyclerView.setPullRefreshEnabled(false);\n```\nand\n```java\nmRecyclerView.setPullRefreshEnabled(true);\n```\nin which false means disabled ,true means enabled.\n##Header\nyou can add header to XRecyclerView，just call addHeaderView().\n\n```java\nView header =   LayoutInflater.from(this).inflate(R.layout.recyclerview_header, (ViewGroup)findViewById(android.R.id.content),false);\nmRecyclerView.addHeaderView(header);\n```\nif you like ,you can add two header\n\n```java\nView header =   LayoutInflater.from(this).inflate(R.layout.recyclerview_header, (ViewGroup)findViewById(android.R.id.content),false);\nView header1 =   LayoutInflater.from(this).inflate(R.layout.recyclerview_header1, (ViewGroup)findViewById(android.R.id.content),false);\nmRecyclerView.addHeaderView(header);\nmRecyclerView.addHeaderView(header1);\n```\nLicense\n-------\n\n    Copyright 2015 jianghejie\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.4375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.2.3'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8349609375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0322265625,
          "content": "include ':app', ':xrecyclerview'\n"
        },
        {
          "name": "xrecyclerview",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}