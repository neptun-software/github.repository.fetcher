{
  "metadata": {
    "timestamp": 1736708698126,
    "page": 126,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gocd/gocd",
      "stars": 7158,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1865234375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = false\nmax_line_length = 120\ntab_width = 2\n\n[*.java]\nindent_size = 4\ntab_width = 4"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.58984375,
          "content": "*               text eol=lf\n\n# The above will normalize all line endings to LF (except for the below rules)\n#\n# See https://help.github.com/articles/dealing-with-line-endings/ and https://github.com/Danimoth/gitattributes\n\n# Explicitly Windows text files\n*.bat           text eol=crlf\n\n# Archives and binaries\n*.dll           binary\n*.jar           binary\n*.zip           binary\n*.gz            binary\n*.tgz           binary\n*.tar           binary\n*.p12           binary\n\n# Fonts\n*.woff          binary\n*.woff2         binary\n\n# Images\n*.png           binary\n*.jpg           binary\n*.gif           binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 14.541015625,
          "content": "##########################################################################\n# Copyright Thoughtworks, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##########################################################################\n\n# intellij\n.idea/\n!.idea/copyright/\n!.idea/codeStyleSettings.xml\n!.idea/jsLinters/eslint.xml\nbin/\n*.iml\n\n# eclipse\n.project\n.classpath\n.settings/\n\n# vim swap files\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n\n# auto-generated tag files\ntags\n\n# temporary files from vim and emacs\n*~\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\n.gradle/\n\n# gradle cache of project\n.gradletasknamecache\n\n# virtual machine crash logs\nhs_err_pid*\n*.hprof\n\n# intellij has a tendency to cache rake tasks\n.rakeTasks\n\n# ignore cipher file generated at runtime\nserver/config/cipher\nserver/config/cipher.aes\nserver/config/db.properties\n\nresources-generated/\n.DS_Store\n\ngo.feature.toggles\n/build/\nnode_modules/\nagent-bootstrapper/.tmp.file.list\nagent-bootstrapper/logs/\nagent-bootstrapper/out/\nagent-bootstrapper/target/\nagent-common/logs/\nagent-common/out/\nagent-common/target/\nagent-launcher/data/\nagent-launcher/logs/\nagent-launcher/out/\nagent-launcher/target/\nagent-process-launcher/logs/\nagent-process-launcher/out/\nagent-process-launcher/target/\nagent/config/\nagent/data/\nagent/logs/\nagent/out/\nagent/pipelines/\nagent/plugins_work/\nagent/agent-plugins.zip\nagent/plugins/\nagent/felix-cache/\nagent/tfs-impl.jar\nagent/target/\napi/api-admins-config-v1/logs/\napi/api-admins-config-v1/out/\napi/api-admins-config-v1/target/\napi/api-admins-config-v2/logs/\napi/api-admins-config-v2/out/\napi/api-admins-config-v2/target/\napi/api-artifact-store-config-v1/config/\napi/api-access-token-v1/logs/\napi/api-access-token-v1/out/\napi/api-access-token-v1/target/\napi/api-access-token-v1/config/\napi/api-artifact-store-config-v1/logs/\napi/api-artifact-store-config-v1/out/\napi/api-artifact-store-config-v1/target/\napi/api-backups-v2/out/\napi/api-backups-v2/target/\napi/api-backups-v2/logs/\napi/api-base/config/\napi/api-base/logs/\napi/api-base/out/\napi/api-base/target/\napi/api-build_cause-v1/config/\napi/api-build_cause-v1/logs/\napi/api-build_cause-v1/out/\napi/api-build_cause-v1/target/\napi/api-current-user-v1/logs/\napi/api-current-user-v1/out/\napi/api-current-user-v1/target/\napi/api-config-repo-operations-v1/config/\napi/api-config-repo-operations-v1/logs/\napi/api-config-repo-operations-v1/out/\napi/api-config-repo-operations-v1/target/\napi/api-version-v1/out/\napi/api-version-v1/logs/\napi/api-version-v1/target/\napi/api-environments-v3/config/\napi/api-environments-v3/logs/\napi/api-environments-v3/out/\napi/api-environments-v3/target/\napi/api-export-v1/config/\napi/api-export-v1/out/\napi/api-server-maintenance-mode-v1/logs/\napi/api-server-maintenance-mode-v1/out/\napi/api-server-maintenance-mode-v1/target/\napi/api-server-maintenance-mode-v1/config/\napi/api-elastic-profile-v2/out/\napi/api-elastic-profile-v2/logs/\napi/api-elastic-profile-v2/target/\napi/api-elastic-profile-v2/config/\napi/api-encryption-v1/config/\napi/api-encryption-v1/logs/\napi/api-encryption-v1/out/\napi/api-encryption-v1/target/\napi/api-material-search-v1/logs/\napi/api-material-search-v1/out/\napi/api-material-search-v1/target/\napi/api-pipeline-groups-v1/config/\napi/api-pipeline-groups-v1/logs/\napi/api-pipeline-groups-v1/out/\napi/api-pipeline-groups-v1/target/\napi/api-pipeline-operations-v1/config/\napi/api-pipeline-operations-v1/logs/\napi/api-pipeline-operations-v1/out/\napi/api-pipeline-operations-v1/target/\napi/api-pipeline-selection-v1/logs/\napi/api-pipeline-selection-v1/out/\napi/api-pipeline-selection-v1/target/\napi/api-plugin-images/logs/\napi/api-plugin-images/out/\napi/api-plugin-images/target/\napi/api-server-health-messages-v1/logs/\napi/api-server-health-messages-v1/out/\napi/api-server-health-messages-v1/target/\napi/api-server-health-v1/logs/\napi/api-server-health-v1/out/\napi/api-server-health-v1/target/\napi/api-user-representers-v1/logs/\napi/api-user-representers-v1/out/\napi/api-user-representers-v1/target/\napi/api-users-v3/logs/\napi/api-users-v3/out/\napi/api-users-v3/target/\napi/api-user-search-v1/logs/\napi/api-user-search-v1/out/\napi/api-user-search-v1/target/\napi/api-elastic-profile-operation-v1/out/\napp-server/out/\napp-server/target/\nbase/logs/\nbase/out/\nbase/target/\nbuildSrc/build/\nbuildSrc/out/\ncommandline/logs/\ncommandline/out/\ncommandline/target/\ncommon/config/\ncommon/data/\ncommon/logs/\ncommon/out/\ncommon/target/\nconfig/config-api/config/\nconfig/config-api/logs/\nconfig/config-api/out/\nconfig/config-api/target/\nconfig/config-server/config/\nconfig/config-server/logs/\nconfig/config-server/out/\nconfig/config-server/target/\ndb/out/\ndb/target/\ndb-support/db-migration/out/\ndb-support/db-migration/target/\ndb-support/db-support-base/out/\ndb-support/db-support-base/target/\ndb-support/db-support-h2/out/\ndb-support/db-support-h2/target/\ndb-support/db-support-mysql/out/\ndb-support/db-support-mysql/target/\ndb-support/db-support-postgresql/out/\ndb-support/db-support-postgresql/target/\ndevelopment-utility/development-agent/out/\ndevelopment-utility/development-agent/target/\ndevelopment-utility/development-server/out/\ndevelopment-utility/development-server/target/\ndomain/config/\ndomain/logs/\ndomain/out/\ndomain/target/\ninstallers/target/\njar-class-loader/out/\njar-class-loader/target/\njetty/logs/\njetty/out/\njetty/target/\nplugin-infra/go-plugin-access/config/\nplugin-infra/go-plugin-access/logs/\nplugin-infra/go-plugin-access/out/\nplugin-infra/go-plugin-access/target/\nplugin-infra/go-plugin-activator/out/\nplugin-infra/go-plugin-activator/target/\nplugin-infra/go-plugin-api-internal/out/\nplugin-infra/go-plugin-api-internal/target/\nplugin-infra/go-plugin-api/out/\nplugin-infra/go-plugin-api/target/\nplugin-infra/go-plugin-domain/out/\nplugin-infra/go-plugin-domain/target/\nplugin-infra/go-plugin-infra/descriptor-aware-test-plugin.jar/\nplugin-infra/go-plugin-infra/plugins_work/valid-plugin-with-multiple-extensions.jar\nplugin-infra/go-plugin-infra/logs/\nplugin-infra/go-plugin-infra/out/\nplugin-infra/go-plugin-infra/target/\nplugin-infra/go-plugin-config-repo/logs/\nplugin-infra/go-plugin-config-repo/out/\nplugin-infra/go-plugin-config-repo/target/\nplugin-infra/plugin-metadata-store/out/\nplugin-infra/plugin-metadata-store/target/\nrack_hack/logs/\nrack_hack/out/\nrack_hack/target/\nrelease/target/\nserver-launcher/out/\nserver-launcher/target/\nserver/agent-launcher.jar\nserver/agent.jar\nserver/defaultFiles/\nserver/artifacts/\nserver/artifactsDir/\nserver/config/agentkeystore\nserver/config/go.feature.toggles\nserver/config/keystore\nserver/config/truststore\nserver/current/\nserver/data/\nserver/db/config.git/\nserver/db/h2db/\nserver/felix-cache/\nserver/logs/\nserver/out/\nserver/pipelines/\nserver/plugins/\nserver/plugins_work/\nserver/scripts/\nserver/target/\nserver/test-repo/\nserver/testdata/test-agent.jar\nserver/tfs-impl-14.jar\nserver/src/main/webapp/WEB-INF/rails/db/config.git/\nserver/src/main/webapp/WEB-INF/rails/logs/\nserver/src/main/webapp/WEB-INF/rails/node_modules/\nserver/src/main/webapp/WEB-INF/rails/public/assets/\nserver/src/main/webapp/WEB-INF/rails/gems/jruby\nserver/src/main/webapp/WEB-INF/rails/webpack/gen/\nserver/src/main/webapp/WEB-INF/rails/yarn-license-report/\nspark/spark-base/out/\nspark/spark-base/target/\nspark/spark-spa/logs/\nspark/spark-spa/out/\nspark/spark-spa/target/\ntarget/\ntest/http-mocks/out/\ntest/http-mocks/target/\ntest/test-agent/out/\ntest/test-agent/target/\ntest/test-utils/out/\ntest/test-utils/target/\ntfs-impl/tfs-impl-14/logs/\ntfs-impl/tfs-impl-14/out/\ntfs-impl/tfs-impl-14/target/\ntools/jruby/\ntools/target/\ntw-go-plugins/target/\nutil/logs/\nutil/out/\nutil/target/\nutil/data\nplugin-infra/go-plugin-infra/felix-cache/\n**/*.log\napi/api-cctray/out/\napi/api-cctray/target/\napi/api-cctray/logs/\napi/api-cluster-profiles-v1/out/\napi/api-cluster-profiles-v1/target/\napi/api-cluster-profiles-v1/logs/\napi/api-cluster-profiles-v1/config/\napi/api-support/out/\napi/api-support/target/\napi/api-support/logs/\napi/api-support/config/\napi/api-dependency-material-autocomplete-v1/out/\napi/api-dependency-material-autocomplete-v1/target/\napi/api-dependency-material-autocomplete-v1/logs/\napi/api-plugin-settings-v1/out/\napi/api-plugin-settings-v1/target/\napi/api-plugin-settings-v1/logs/\napi/api-plugin-settings-v1/config/\napi/api-dashboard-v4/out/\napi/api-dashboard-v4/target/\napi/api-dashboard-v4/logs/\napi/api-dashboard-v4/config/\napi/api-backup-config-v1/out/\napi/api-backup-config-v1/target/\napi/api-backup-config-v1/logs/\napi/api-backup-config-v1/config/\napi/api-pipelines-as-code-internal-v1/out/\napi/api-pipelines-as-code-internal-v1/target/\napi/api-pipelines-as-code-internal-v1/logs/\napi/api-pipelines-as-code-internal-v1/config/\napi/api-mail-server-v1/out/\napi/api-mail-server-v1/target/\napi/api-mail-server-v1/logs/\napi/api-mail-server-v1/config/\napi/api-internal-resources-v1/out/\napi/api-internal-resources-v1/target/\napi/api-internal-resources-v1/logs/\napi/api-internal-resources-v1/config/\napi/api-internal-environments-v1/out/\napi/api-internal-environments-v1/target/\napi/api-internal-environments-v1/logs/\napi/api-internal-environments-v1/config/\napi/api-shared-v11/out/\napi/api-shared-v11/target/\napi/api-shared-v11/logs/\napi/api-shared-v11/config/\napi/api-internal-pipeline-structure-v1/out/\napi/api-internal-pipeline-structure-v1/target/\napi/api-internal-pipeline-structure-v1/logs/\napi/api-internal-pipeline-structure-v1/config/\napi/api-feature-toggles-v1/out/\napi/api-feature-toggles-v1/target/\napi/api-feature-toggles-v1/logs/\napi/api-feature-toggles-v1/config/\napi/api-server-site-urls-config-v1/out/\napi/api-server-site-urls-config-v1/target/\napi/api-server-site-urls-config-v1/logs/\napi/api-server-site-urls-config-v1/config/\napi/api-materials-v2/out/\napi/api-materials-v2/target/\napi/api-materials-v2/logs/\napi/api-materials-v2/config/\napi/api-default-job-timeout-v1/out/\napi/api-default-job-timeout-v1/target/\napi/api-default-job-timeout-v1/logs/\napi/api-default-job-timeout-v1/config/\napi/api-artifact-config-v1/out/\napi/api-artifact-config-v1/target/\napi/api-artifact-config-v1/logs/\napi/api-artifact-config-v1/config/\napi/api-package-repository-v1/out/\napi/api-package-repository-v1/target/\napi/api-package-repository-v1/logs/\napi/api-package-repository-v1/config/\napi/api-security-auth-config-v2/out/\napi/api-security-auth-config-v2/target/\napi/api-security-auth-config-v2/logs/\napi/api-security-auth-config-v2/config/\napi/api-roles-config-v3/out/\napi/api-roles-config-v3/target/\napi/api-roles-config-v3/logs/\napi/api-roles-config-v3/config/\napi/api-agent-job-history-v1/out/\napi/api-agent-job-history-v1/target/\napi/api-agent-job-history-v1/logs/\napi/api-agent-job-history-v1/config/\napi/api-pipeline-instance-v1/out/\napi/api-pipeline-instance-v1/target/\napi/api-pipeline-instance-v1/logs/\napi/api-pipeline-instance-v1/config/\napi/api-stage-operations-v2/out/\napi/api-stage-operations-v2/target/\napi/api-stage-operations-v2/logs/\napi/api-stage-operations-v2/config/\napi/api-job-instance-v1/out/\napi/api-job-instance-v1/target/\napi/api-job-instance-v1/logs/\napi/api-job-instance-v1/config/\napi/api-notification-filter-v2/out/\napi/api-notification-filter-v2/target/\napi/api-notification-filter-v2/logs/\napi/api-notification-filter-v2/config/\napi/api-feeds-api-v1/out/\napi/api-feeds-api-v1/target/\napi/api-feeds-api-v1/logs/\napi/api-feeds-api-v1/config/\napi/api-internal-material-test-v1/out/\napi/api-internal-material-test-v1/target/\napi/api-internal-material-test-v1/logs/\napi/api-internal-material-test-v1/config/\napi/api-webhook-v1/out/\napi/api-webhook-v1/target/\napi/api-webhook-v1/logs/\napi/api-webhook-v1/config/\napi/api-template-config-v7/out/\napi/api-template-config-v7/target/\napi/api-template-config-v7/logs/\napi/api-template-config-v7/config/\napi/api-permissions-v1/out/\napi/api-permissions-v1/target/\napi/api-permissions-v1/logs/\napi/api-permissions-v1/config/\napi/api-api-info-v2/out/\napi/api-api-info-v2/target/\napi/api-api-info-v2/logs/\napi/api-api-info-v2/config/\napi/api-compare-v2/out/\napi/api-compare-v2/target/\napi/api-compare-v2/logs/\napi/api-compare-v2/config/\napi/api-internal-dependency-pipelines-v1/out/\napi/api-internal-dependency-pipelines-v1/target/\napi/api-internal-dependency-pipelines-v1/logs/\napi/api-internal-dependency-pipelines-v1/config/\napi/api-packages-v2/out/\napi/api-packages-v2/target/\napi/api-packages-v2/logs/\napi/api-packages-v2/config/\napi/api-config-repos-v4/out/\napi/api-config-repos-v4/target/\napi/api-config-repos-v4/logs/\napi/api-config-repos-v4/config/\napi/api-internal-scms-v1/out/\napi/api-internal-scms-v1/target/\napi/api-internal-scms-v1/logs/\napi/api-internal-scms-v1/config/\napi/api-template-authorization-v1/out/\napi/api-template-authorization-v1/target/\napi/api-template-authorization-v1/logs/\napi/api-template-authorization-v1/config/\napi/api-plugin-infos-v7/out/\napi/api-plugin-infos-v7/target/\napi/api-plugin-infos-v7/logs/\napi/api-plugin-infos-v7/config/\napi/api-internal-pipeline-groups-v1/out/\napi/api-internal-pipeline-groups-v1/target/\napi/api-internal-pipeline-groups-v1/logs/\napi/api-internal-pipeline-groups-v1/config/\napi/api-agents-v7/out/\napi/api-agents-v7/target/\napi/api-agents-v7/logs/\napi/api-agents-v7/config/\napi/api-version-infos-v1/out/\napi/api-version-infos-v1/target/\napi/api-version-infos-v1/logs/\napi/api-version-infos-v1/config/\napi/api-abstract-material-test/out/\napi/api-abstract-material-test/target/\napi/api-abstract-material-test/logs/\napi/api-abstract-material-test/config/\napi/api-internal-materials-v1/out/\napi/api-internal-materials-v1/target/\napi/api-internal-materials-v1/logs/\napi/api-internal-materials-v1/config/\napi/api-pipeline-config-v11/out/\napi/api-pipeline-config-v11/target/\napi/api-pipeline-config-v11/logs/\napi/api-pipeline-config-v11/config/\napi/api-scms-v4/out/\napi/api-scms-v4/target/\napi/api-scms-v4/logs/\napi/api-scms-v4/config/\napi/api-internal-secret-config-v1/out/\napi/api-internal-secret-config-v1/target/\napi/api-internal-secret-config-v1/logs/\napi/api-internal-secret-config-v1/config/\napi/api-secret-configs-v3/out/\napi/api-secret-configs-v3/target/\napi/api-secret-configs-v3/logs/\napi/api-secret-configs-v3/config/\napi/api-stage-instance-v3/out/\napi/api-stage-instance-v3/target/\napi/api-stage-instance-v3/logs/\napi/api-stage-instance-v3/config/\napi/api-internal-agent-v1/out/\napi/api-internal-agent-v1/target/\napi/api-internal-agent-v1/logs/\napi/api-internal-agent-v1/config/\n\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".tool-versions",
          "type": "blob",
          "size": 0.166015625,
          "content": "# Configuration for https://mise.jdx.dev/ or https://github.com/asdf-vm/asdf as an alternative to jabba, sdkman, rvm, nvm etc\njava temurin-21.0.5+11.0.LTS\nnodejs 22.13.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.16015625,
          "content": "# Contributor Code of Conduct\n## Version 0.4\n\nAs contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nIf any participant in this project has issues or takes exception with a contribution, they are obligated to provide constructive feedback and never resort to personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct.  Project maintainers who do not follow the Code of Conduct may be removed from the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nWe promise to extend courtesy and respect to everyone involved in this project regardless of gender identity, sexual orientation, ability or disability, ethnicity, religion, or level of experience.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5146484375,
          "content": "# Contributing\n\nWe encourage you to contribute to GoCD. For information on contributing to this project, please see our <a href=\"https://www.gocd.org/contribute/\">contributor's guide</a>.\nA lot of useful information like links to user documentation, design documentation, mailing lists etc can be found in the <a href=\"https://www.gocd.org/community/resources.html\">resources</a> section.\n\n## Contributing Code?\n\nPull requests are always welcome. Please:\n\n1. Sign the [Contributor License Agreement (CLA)](https://www.gocd.org/contribute/cla.html). This is required before any of your code or pull-requests are accepted.\n2. Ensure that the source compiles before raising the pull request.\n3. Write [informative, well-formatted](https://chris.beams.io/posts/git-commit/) git commit messages.\n4. Provide details of your change and why you are making it in the PR description, referencing issues or other PRs that are relevant to your PR.\n\n## Issue triage [![Open Source Helpers](https://www.codetriage.com/gocd/gocd/badges/users.svg)](https://www.codetriage.com/gocd/gocd)\n\nYou can contribute to GoCD by triaging issues which may include reproducing bug reports or asking for vital information, such as version numbers or reproduction instructions. If you would like to start triaging issues, one easy way to get started is to [subscribe to GoCD on CodeTriage](https://www.codetriage.com/gocd/gocd).\n\nYou can contribute any security related issue by [responsibly reporting the issue](https://hackerone.com/gocd) that you find in our product or service.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright Thoughtworks, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3486328125,
          "content": "# GoCD\n\n[![Google Groups](https://img.shields.io/badge/Google_Groups-user_help-purple)](https://groups.google.com/g/go-cd)\n[![GitHub Discussions](https://img.shields.io/badge/GitHub_discussions-user_&amp;_dev_chat-green)](https://github.com/gocd/gocd/discussions)\n[![GitHub License](https://img.shields.io/github/license/gocd/gocd?color=yellow)](LICENSE)\n[![Server Docker Pulls](https://img.shields.io/docker/pulls/gocd/gocd-server?label=Server%20Docker%20pulls)](https://hub.docker.com/r/gocd/gocd-server/)\n\n\nThis is the main repository for [GoCD](https://gocd.org) - a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for worry-free, continuous delivery of your product.\n\n- To quickly build your first pipeline while learning key GoCD concepts, visit our [Test Drive GoCD](https://www.gocd.org/test-drive-gocd.html).\n- To download GoCD, visit the [downloads page](https://www.gocd.org/download/).\n\n## Security\n\nPlease see [the security policy](SECURITY.md) for details on GoCD's security status, and how to responsibly disclose issues.\n\n## Development\n\nGoCD is predominantly a Java & TypeScript project utilising [Spring Framework](https://spring.io/projects/spring-framework/), [SparkJava](https://sparkjava.com/) & [MithrilJS](https://mithril.js.org/) as key frameworks, built using [Gradle](https://gradle.org/) & [Webpack](https://webpack.js.org/) and running within [Eclipse Jetty](https://eclipse.dev/jetty/).\n\nThere are a small number of older parts of GoCD rendered server-side within [JRuby](https://www.jruby.org/) on [Rails](https://rubyonrails.org/) which utilise some legacy plain JavaScript with [JQuery](https://jquery.com/). GoCD itself is used to [build GoCD](https://build.gocd.org).\n\nHere is the guide to [setup your development environment](https://developer.gocd.org/current/).\n\n## Contributing\n\nWe'd love it if you contributed to GoCD. For information on contributing to this project, please see our [contributor's guide](https://gocd.org/contribute).\nA lot of useful information like links to user documentation, design documentation, mailing lists etc. can be found in the [resources](https://gocd.org/community/resources.html) section.\n\n## License\n\nGoCD is an open source project, sponsored by [Thoughtworks, Inc.](https://www.thoughtworks.com) under the [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 4.6513671875,
          "content": "# Security Policy\n\n## Supported Versions\n\nThe GoCD community only actively maintains and fixes security issues on top of the most recent released version.\n\nSince breaking changes are rare, and generally sign-posted well in advance, we encourage users to stay on a recent or current version to allow for upgrade as easily as possible in the event of a security defect.\n\nHaving said this, wherever possible we will try and provide suggested mitigations or workarounds for older versions.\n\n## Baseline\n\nThis represents the oldest versions which have **no known exploitable vulnerabilities** of a given severity, as assessed by GoCD maintainers and/or NIST NVD via CVSS 4.0 or 3.1. Users are strongly recommended to be on at least these versions; and preferably the latest version. \n\n| Without known vulns             | Version                                            |\n| ------------------------------- | -------------------------------------------------- |\n| No >= **high** severity vulns   | [`24.5.0`](https://www.gocd.org/releases/#24-5-0)+ |\n| No >= **medium** severity vulns | [`24.5.0`](https://www.gocd.org/releases/#24-5-0)+ |\n| No known vulns of any severity  | [`24.5.0`](https://www.gocd.org/releases/#24-5-0)+ |\n\nPlease note that this does *not* mean that there are zero potential vulnerabilities known from GoCD's dependencies\nin this or subsequent versions. However where such vulnerabilities exist, none have been confirmed to be exploitable via GoCD\nitself (without a prior non-GoCD breach).\n\n## Reporting a Vulnerability\n\nPlease report any issues to https://hackerone.com/gocd according to the listed policy.\n\n## Disclosure policy\n\nGoCD does not have a formal disclosure policy for vulnerability details, however generally our practice has been\n\n| Severity                     | During fix/patch development     | Upon fix/patched release             | Detailed disclosure / published CVE         |\n| ---------------------------- | -------------------------------- | ------------------------------------ | ------------------------------------------- |\n| >= **high** severity vulns   | Limited _(*)_ or zero disclosure | Limited disclosure with mitigations. | 2-4 weeks after patched version's release.  |\n| <= **medium** severity vulns | Limited _(*)_ disclosure         | More detailed disclosure             | Immediately upon patched version's release. |\n\n_(*)_ - As an open-source project for ease of collaboration fixes _may_ be developed in the open (with somewhat obfuscated PR or commit comments) rather than entirely developed in private.\n\n## How do I know if I am using a release with known vulnerabilities?\n\nIn more recent years, an effort has been made to publish and request CVEs for responsibly disclosed & fixed issues to increase transparency and help users assess risk of running older versions.\n\nWhile many are available as [GitHub Security Advisories](https://github.com/gocd/gocd/security/advisories), you can generally use the [NIST NVD database query tools](https://nvd.nist.gov/vuln/search?results_type=overview&query=cpe%3A2.3%3Aa%3Athoughtworks%3Agocd%3A22.3.0%3A*%3A*%3A*%3A*%3A*%3A*%3A*&search_type=all&form_type=Basic&isCpeNameSearch=true) to search for those affecting your specific version by replacing the version `22.3.0` with your own  and clicking \"_Search_\".\n\nNote that this unlikely to be a complete listing of _all_ reported, responsibly disclosed and fixed issues. If there is a _publicly disclosed_ historical issue that is missing, please [raise an issue](https://github.com/gocd/gocd/issues/new) to let us know, and we will endeavour to document it properly.\n\n## What about potential vulnerabilities from transitive dependencies?\n\nThe GoCD team make a concerted effort to keep dependencies up-to-date wherever possible, however GoCD does\nstill have some EOL dependencies with known vulnerabilities that GoCD is not vulnerable to, but which may create noise in scanner reports.\n\nWhile this is a moving target the GoCD team maintain documented suppressions with commentary via:\n- [OWASP Dependency Check](https://owasp.org/www-project-dependency-check/) - Java, JavaScript & Ruby/JRuby dependencies\n  - [current suppressions](https://github.com/gocd/gocd/blob/master/build-platform/dependency-check-suppress.xml)\n  - [build.gocd.org report off master](https://build.gocd.org/go/files/Security-Checks/latest/Security-Checks/latest/dependency-check/dependency-check-report.html) (use _Guest_ login)\n- [Trivy](https://trivy.dev/) - built container images (OS and packaged dependencies), especially server\n  - [current suppressions](https://github.com/gocd/gocd/blob/master/build-platform/.trivyignore.yaml)\n  - [build.gocd.org Security-Checks-Containers pipeline](https://build.gocd.org/) (use _Guest_ login)\n"
        },
        {
          "name": "agent-bootstrapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent-launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent-process-launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "app-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 49.0458984375,
          "content": "/*\n * Copyright Thoughtworks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport com.github.jk1.license.filter.LicenseBundleNormalizer\nimport com.github.jk1.license.render.JsonReportRenderer\nimport com.github.jk1.license.task.ReportTask\nimport com.thoughtworks.go.build.AdoptiumVersion\nimport com.thoughtworks.go.build.InstallerType\nimport de.undercouch.gradle.tasks.download.Download\nimport nl.javadude.gradle.plugins.license.License\nimport org.apache.tools.ant.filters.FixCrLfFilter\nimport org.gradle.plugins.ide.idea.model.IdeaLanguageLevel\n\nimport java.security.SecureRandom\nimport java.util.stream.Collectors\n\nplugins {\n  id 'base'\n  id 'org.owasp.dependencycheck' version '12.0.0'\n  id 'com.github.hierynomus.license-base' version '0.16.1'\n  id 'com.github.jk1.dependency-license-report' version '2.9'\n}\n\napply from: 'dependencies.gradle'\n\nif (file('build-ext.gradle').exists()) {\n  apply from: 'build-ext.gradle'\n}\n\ndef script = this\n\ndef determineGitRevision = { ->\n  def process = \"git rev-list HEAD --max-count=1\".execute(null, project.file(script.buildscript.sourceFile.canonicalFile.parent))\n  process.waitFor()\n  return process.text.stripIndent().trim()\n}\n\ndef determineReleaseRevision = { ->\n  def process = \"git rev-list HEAD --count\".execute(null, project.file(script.buildscript.sourceFile.canonicalFile.parent))\n  process.waitFor()\n  return process.text.stripIndent().trim()\n}\n\ndef getVersion = { ... args ->\n  try {\n    return providers.exec {\n      commandLine(args)\n    }.standardOutput.asText.getOrElse(\"could not determine version!\").trim()\n  } catch (Exception e) {\n    return \"could not determine version! (${e.message})\"\n  }\n}\n\nList<String> partitionFiles(Collection originalFiles) {\n  def files = originalFiles.unique().sort()\n  def seed = System.getenv('GO_PIPELINE_COUNTER')?.toInteger() ?: System.getenv('PARTITION_SEED')?.toInteger() ?: new SecureRandom().nextInt().abs()\n  def totalWorkers = System.getenv('GO_JOB_RUN_COUNT')?.toInteger() ?: 1\n  def currentWorkerIndex = System.getenv('GO_JOB_RUN_INDEX')?.toInteger() ?: 1\n\n  Integer testsPerBucket = (Integer) Math.ceil((double) files.size() / totalWorkers)\n\n  rootProject.logger.quiet(\"Partitioning ${files.size()} files into ${totalWorkers} buckets with approx ${testsPerBucket} files per bucket. Using seed ${seed}.\")\n  rootProject.logger.quiet(\"To reproduce the test failure, run with:\")\n  rootProject.logger.quiet(\"PARTITION_SEED=${seed} GO_JOB_RUN_COUNT=${totalWorkers} GO_JOB_RUN_INDEX=${currentWorkerIndex} ./gradlew YOUR_TARGET\")\n\n  // random shuffle, every agent uses the same seed, so shuffling is predictable\n  Collections.shuffle(files, new Random(seed))\n\n  def allPartitions = files.collate(testsPerBucket)\n  def currentPartition = allPartitions[currentWorkerIndex - 1]\n  return (currentPartition ?: []) as List<String>\n}\n\ndef GO_VERSION_PREVIOUS = '24.5.0'\ndef GO_VERSION_SEGMENTS = [year: 25, releaseInYear: 1, patch: 0]\ndef GO_VERSION_NEXT = '25.2.0'\n\ndef GO_VERSION = [GO_VERSION_SEGMENTS.year, GO_VERSION_SEGMENTS.releaseInYear, GO_VERSION_SEGMENTS.patch].join('.')\ndef DIST_VERSION = determineReleaseRevision()\ndef GIT_REVISION = determineGitRevision()\n\nif (System.getenv().containsKey(\"GO_SERVER_URL\")) {\n  def separator = \"=\".multiply(72)\n\n  println separator\n  println \"Gradle version:  ${gradle.gradleVersion}\"\n  println \"JVM:             ${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})\"\n  println \"OS:              ${System.getProperty('os.name')} ${System.getProperty('os.version')} ${System.getProperty('os.arch')}\"\n  println separator\n  println(\"\")\n\n  println(\"Tool Versions\")\n  println(separator)\n  println(\"node: ${getVersion(\"node\", \"--version\")}\")\n  println(\" git: ${getVersion(\"git\", \"--version\")}\")\n  println(\"  hg: ${getVersion(\"hg\", \"--quiet\", \"--version\")}\")\n  println(\" svn: ${getVersion(\"svn\", \"--quiet\", \"--version\")}\")\n  println(\"  p4: ${getVersion(\"p4\", \"-V\").readLines().grep(~/Rev.*/).join(\"\")}\")\n  println(\" p4d: ${getVersion(\"p4d\", \"-V\").readLines().grep(~/Rev.*/).join(\"\")}\")\n  println(separator)\n  println(\"\")\n}\n\next {\n  previousVersion = GO_VERSION_PREVIOUS\n  nextVersion = GO_VERSION_NEXT\n  goVersionSegments = GO_VERSION_SEGMENTS\n  goVersion = GO_VERSION\n  distVersion = DIST_VERSION\n  fullVersion = DIST_VERSION ? \"${GO_VERSION}-${DIST_VERSION}\" : GO_VERSION\n  gitRevision = GIT_REVISION\n\n  // Default target version. Can be overridden by sub-projects.\n  targetJavaVersion = 17\n\n  // Version of JVM to compile and test using.\n  buildJavaVersion = 21\n\n  // Version to package with installers and container images by default\n  packagedJavaVersion = new AdoptiumVersion(\n    feature: 21,\n    interim: 0,    // set to `null` for the first release of a new featureVersion\n    update : 5,    // set to `null` for the first release of a new featureVersion\n    patch  : null, // set to `null` for most releases. Patch releases are \"exceptional\".\n    build  : 11\n  )\n}\n\nallprojects {\n  apply plugin: 'idea'\n  group = 'com.thoughtworks.go'\n  version = project.fullVersion\n  layout.buildDirectory = \"${projectDir}/target\"\n\n  repositories {\n    mavenCentral()\n    maven { url = 'https://repo.terracotta.org/maven2/' } // Needed for later ehcache repos\n  }\n}\n\nidea {\n  project {\n    jdkName = project.buildJavaVersion\n    targetBytecodeVersion = JavaVersion.toVersion(project.targetJavaVersion)\n    languageLevel = new IdeaLanguageLevel(project.targetJavaVersion)\n  }\n}\n\nsubprojects {\n  if (!project.childProjects.isEmpty()) {\n    return\n  }\n  apply plugin: 'base'\n  apply plugin: \"com.github.hierynomus.license\"\n  license {\n    skipExistingHeaders = false\n    strictCheck = true\n    exclude '**/*.erb'\n    exclude '**/*.ejs'\n    exclude '**/*.keep'\n    exclude '**/*.md'\n    exclude '**/*.jar'\n    exclude '**/*.json'\n    exclude '**/*.html'\n    exclude '**/*.zip'\n    exclude '**/*.png'\n    exclude '**/*.jpg'\n    exclude '**/*.jpeg'\n    exclude '**/*.gif'\n    exclude '**/*.woff'\n    exclude '**/*.woff2'\n    exclude '**/*.svg'\n    exclude '**/*.json'\n    exclude '**/*.scss.d.ts'\n    exclude '**/.*.json'\n    exclude '**/hg.template'\n    exclude '**/available.toggles'\n    exclude '**/META-INF/services/*'\n    exclude '**/node_modules/**'\n    exclude '**/node-vendor/**'\n    exclude '**/vendor/**'\n    exclude '**/javascripts/lib/**'\n    exclude '**/gems/jruby/**'\n    exclude '**/tmp/**'\n    exclude '**/logs/**'\n    exclude '**/log/**'\n    exclude '**/robots.txt'\n    exclude '**/rails/bin/**'\n\n    // Code borrowed from other projects\n    exclude '**/JavaVersion.java'\n    exclude '**/CommandLine.java'\n    exclude '**/StreamPumper.java'\n    exclude '**/StreamConsumer.java'\n    exclude '**/RuntimeTypeAdapterFactory*.java'\n\n    // used by intellij for type hints when editing ftl files, intellij gets confused if it sees a license header in this file\n    exclude '**/freemarker_implicit.ftl'\n    header = rootProject.file('build-platform/Apache-2.0.txt')\n    headerDefinitions {\n      intellijStyleXML {\n        firstLine = \"<!--\"\n        beforeEachLine = '  ~ '\n        endLine = \"  -->\"\n        afterEachLine = ''\n        skipLinePattern = \"^<\\\\?xml.*>\\$\"\n        firstLineDetectionPattern = \"(\\\\s|\\\\t)*<!--.*\\$\"\n        lastLineDetectionPattern = \".*-->(\\\\s|\\\\t)*\\$\"\n        allowBlankLines = true\n        isMultiline = true\n        padLines = false\n      }\n\n      intellijStyleFTL {\n        firstLine = \"<#--\"\n        beforeEachLine = ' '\n        endLine = \"  -->\"\n        afterEachLine = ''\n        firstLineDetectionPattern = \"(\\\\s|\\\\t)*<#--.*\\$\"\n        lastLineDetectionPattern = \".*-->(\\\\s|\\\\t)*\\$\"\n        allowBlankLines = true\n        isMultiline = true\n        padLines = false\n      }\n    }\n    mapping {\n      java = 'SLASHSTAR_STYLE'\n      groovy = 'SLASHSTAR_STYLE'\n      scss = 'SLASHSTAR_STYLE'\n      sass = 'SLASHSTAR_STYLE'\n      css = 'SLASHSTAR_STYLE'\n\n      xml = 'intellijStyleXML'\n      xsl = 'intellijStyleXML'\n      xsd = 'intellijStyleXML'\n\n      ftl = 'intellijStyleFTL'\n      ftlh = 'intellijStyleFTL'\n      ts = 'SLASHSTAR_STYLE'\n      tsx = 'SLASHSTAR_STYLE'\n      msx = 'SLASHSTAR_STYLE'\n      js = 'SLASHSTAR_STYLE'\n    }\n  }\n\n  final List<String> includeInLicensing = [':server-launcher']\n  final boolean hasJavaSources = !project.fileTree(\"src/main/java\").files.isEmpty()\n\n  if (includeInLicensing.contains(project.path) || hasJavaSources) {\n    apply plugin: 'com.github.jk1.dependency-license-report'\n\n    licenseReport {\n      renderers = [new JsonReportRenderer(\"index.json\", false)]\n      excludeGroups = [\"com.thoughtworks.go\"]\n      filters = [new LicenseBundleNormalizer()]\n      outputDir = project.layout.buildDirectory.dir(\"reports/dependency-license\").get().asFile\n      configurations = ['runtimeClasspath', 'packagingInLibDir']\n    }\n\n    tasks.withType(ReportTask) { ReportTask reportTask ->\n      reportTask.outputs.cacheIf { true }\n      project.configurations.each { config ->\n        if (config.name in project.licenseReport.configurations) {\n          reportTask.inputs.files(config)\n        }\n      }\n    }\n  }\n\n  if (hasJavaSources) {\n    apply plugin: 'java-library'\n\n    layout.buildDirectory = \"${projectDir}/target\"\n\n    configurations {\n      packagingOnly\n      extractedAtTopLevel { transitive = false }\n      fatJarConfig\n\n      testJavaAgents { transitive = false }\n      testOutput {\n        extendsFrom testRuntimeClasspath\n        transitive = true\n      }\n    }\n\n    task testJar(type: Jar, description: \"Assembles a jar archive containing the test classes.\") {\n      archiveClassifier = 'tests'\n      from sourceSets.test.output\n    }\n\n    dependencies {\n      // Force all sub-projects to have managed dependency versions for certain transitive dependencies\n      implementation platform(project(':build-platform'))\n      testJavaAgents(\"${project.deps.mockitoCore}:${project.versions.mockitoBom}\")\n\n      modules {\n        module(\"dom4j:dom4j\") {\n          replacedBy(\"org.dom4j:dom4j\", \"Upgrade the legacy dom4j in old Hibernate 3.6; dom4j 2 should be sufficiently compatible\")\n        }\n        module(\"net.sf.ehcache:ehcache\") {\n          replacedBy(\"net.sf.ehcache.internal:ehcache-core\", \"Use the much slimmer core artifact which is fine for our use case\")\n        }\n        module(\"commons-logging:commons-logging\") {\n          replacedBy(project.deps.slf4jJcl, \"Replace commons-logging implementations with the slf4j apis that redirect logs to slf4j per https://www.slf4j.org/legacy.html\")\n        }\n      }\n      components {\n        // workaround for dom4j Gradle metadata optional dependency issues to avoid it pulling in\n        // optional dependencies when it should not (https://github.com/dom4j/dom4j/issues/99)\n        withModule('org.dom4j:dom4j', { details -> details.allVariants { withDependencies { clear() } } })\n        // workaround for Guava metadata declaring dependencies that are not needed at runtime\n        // see https://github.com/google/guava/pull/6606\n        withModule('com.google.guava:guava', { details ->\n          details.allVariants {\n            withDependencies {\n              removeAll {\n                it.name in [ \"jsr305\", \"checker-qual\", \"error_prone_annotations\", \"listenablefuture\", \"j2objc-annotations\" ]\n              }\n            }\n          }\n        })\n        withModule('com.google.code.gson:gson', { details ->\n          details.allVariants {\n            withDependencies {\n              removeAll {\n                it.name in [ \"error_prone_annotations\" ]\n              }\n            }\n          }\n        })\n      }\n    }\n  }\n\n  configurations.all {\n    resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n      // Hamcrest core/library/all have been merged together: https://hamcrest.org/JavaHamcrest/distributables\n      if (details.requested.group == 'org.hamcrest' && details.requested.name ==~ /hamcrest-(core|library|all)/) {\n        details.useTarget project.deps.hamcrest\n      }\n      // Javax Annotation has migrated to jakarta annotations\n      if (details.requested.group == 'javax.annotation' && details.requested.name == 'javax.annotation-api') {\n        details.useTarget project.deps.jakartaAnnotation\n      }\n      // Javax Servlet API has migrated to jakarta Servlet API\n      if (details.requested.group in ['javax.servlet', 'org.eclipse.jetty.toolchain'] && details.requested.name in ['javax.servlet-api', 'jetty-servlet-api']) {\n        details.useTarget project.deps.servletApi\n      }\n      // Javax Transaction API has migrated to jakarta Transaction API\n      if (details.requested.group == 'javax.transaction' && details.requested.name == 'jta') {\n        details.useTarget project.deps.jakartaTransaction\n      }\n\n    }\n  }\n\n  task cleanLogs(type: Delete) {\n    delete 'logs'\n  }\n\n  task cleanApiOut(type: Delete) {\n    delete 'out'\n  }\n\n  clean.dependsOn cleanLogs, cleanApiOut\n  check.dependsOn 'license'\n\n  tasks.withType(Jar) { jarTask ->\n    manifest {\n      attributes(\n        'Go-Version': project.version,\n        'Go-Revision': project.gitRevision,\n        'Implementation-Title': project.name,\n        'Implementation-Version': project.version\n      )\n    }\n\n    includeEmptyDirs = false\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n  }\n\n  artifacts { artifacts ->\n    tasks.withType(Jar).each { jarTask ->\n      artifacts.add(jarTask.name == 'testJar' ? 'testOutput' : 'archives', jarTask)\n    }\n  }\n\n  tasks.withType(AbstractArchiveTask) {\n    includeEmptyDirs = false\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n\n    preserveFileTimestamps = false\n    reproducibleFileOrder = true\n  }\n\n  tasks.withType(Exec) {\n    if (logger.isInfoEnabled()) {\n      standardOutput = System.out\n      errorOutput = System.err\n    } else {\n      standardOutput = new ByteArrayOutputStream()\n      errorOutput = new ByteArrayOutputStream()\n    }\n  }\n\n  tasks.withType(GroovyCompile).configureEach {\n    options.incremental = true\n  }\n\n  tasks.withType(JavaCompile) {\n    options.warnings = false\n    options.encoding = \"UTF-8\"\n    options.compilerArgs += '-Xlint:-deprecation'\n    options.release.set(project.targetJavaVersion as Integer)\n\n    javaCompiler = javaToolchains.compilerFor {\n      languageVersion = JavaLanguageVersion.of(project.buildJavaVersion)\n    }\n  }\n\n  project.afterEvaluate {\n    tasks.withType(License) { License thisTask ->\n      def sourceSetName = thisTask.name.replaceFirst('licenseFormat', '').replaceFirst('license', '')\n      def mappedSourceSet = sourceSets.find { sourceSet -> sourceSet.name.toLowerCase().equals(sourceSetName.toLowerCase()) }\n\n      if (project.path == ':server' && sourceSetName.toLowerCase() == 'test') {\n        thisTask.source += project.file(\"rails/\")\n        return\n      }\n\n      if (thisTask.name.toLowerCase().contains('test')) {\n        thisTask.source -= mappedSourceSet.resources\n      }\n\n      if (project.path == ':test:test-utils') {\n        thisTask.source -= mappedSourceSet.resources\n      }\n    }\n  }\n\n  tasks.withType(Test) { Test testTask ->\n    dependsOn 'jar'\n\n    testTask.useJUnitPlatform()\n    javaLauncher = javaToolchains.launcherFor {\n      languageVersion = JavaLanguageVersion.of(project.buildJavaVersion)\n    }\n\n    def allTestClasses\n\n    maxParallelForks = project.hasProperty('maxParallelForks') ? project.maxParallelForks as int : 1\n\n    // fixup a tempdir that is predictable and we can clean it up later\n    def tmpDir = project.file(\"${System.getProperty('java.io.tmpdir')}/gocd-tests/${new BigInteger(32, new SecureRandom()).toString(32)}\")\n    systemProperty 'java.io.tmpdir', tmpDir\n    systemProperty 'jdk.attach.allowAttachSelf', 'true'\n    jvmArgs += testTask.project.name.startsWith(\"agent\") ? InstallerType.agent.jvmModuleOpensArgs : InstallerType.server.jvmModuleOpensArgs\n    jvmArgs += testTask.project.configurations.hasProperty('testJavaAgents') ? \"-javaagent:${testTask.project.configurations.testJavaAgents.asPath}\" : []\n\n    doFirst {\n      // workaround for https://github.com/unbroken-dome/gradle-testsets-plugin/issues/40\n      classpath += rootProject.findProject(':test:test-utils').files(\"resource-include-in-all-projects\")\n    }\n\n    defaultCharacterEncoding = \"UTF-8\"\n\n    filter {\n      failOnNoMatchingTests = true\n    }\n\n    doFirst {\n      project.logger.info(\"Setting tmpdir ${tmpDir}\")\n      project.delete(tmpDir)\n      tmpDir.mkdirs()\n\n      List<String> files = []\n      testTask.testClassesDirs.files.each { File classDir ->\n        if (classDir.exists()) {\n          classDir.eachFileRecurse(groovy.io.FileType.FILES) { f ->\n            def relPath = new File(classDir.toURI().relativize(f.toURI()).toString()).toString().replaceAll(/\\$.*/, '.*').replaceAll(/\\.class/, '.*')\n            files << relPath\n          }\n        }\n      }\n\n      files = files.unique()\n\n      List testsToRun = partitionFiles(files)\n      allTestClasses = getTestClassesForTask(testsToRun)\n      List testsToIgnore = files - testsToRun\n\n      testsToIgnore.each { f ->\n        testTask.exclude f\n      }\n      testsToRun.each { f ->\n        testTask.include f\n      }\n    }\n\n    beforeTest { TestDescriptor test ->\n      allTestClasses.remove(test.className)\n    }\n\n    beforeSuite { TestDescriptor test ->\n      allTestClasses.remove(test.className)\n    }\n\n    doLast {\n      project.logger.info(\"Deleting tmpdir ${tmpDir}\")\n      project.delete(tmpDir)\n\n      def allowTestsToBeSkipped = false\n      if (project.hasProperty(\"allowTestsToBeSkipped\")) {\n        allowTestsToBeSkipped = Boolean.parseBoolean(project.property(\"allowTestsToBeSkipped\"))\n      }\n\n      if (!allTestClasses.empty && !allowTestsToBeSkipped) {\n        throw new GradleException(\"Missed the following classes to test: ${allTestClasses}\".toString())\n      }\n    }\n\n    testLogging {\n      showStandardStreams = project.path != ':server'\n\n      exceptionFormat = 'full'\n\n      beforeSuite { suite ->\n        if (suite.parent) {\n          logger.quiet(\"Running ${suite.name}\")\n        }\n      }\n\n      afterSuite { suite, result ->\n        if (suite.parent) {\n          logger.quiet(\"Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec\")\n          if (result.resultType == TestResult.ResultType.FAILURE) {\n            logger.quiet(\"Test ${suite.name} FAILED\")\n          }\n        } else {\n          logger.quiet(\"Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec\")\n        }\n      }\n    }\n  }\n\n  tasks.withType(Delete) { Delete deleteTask ->\n    project.afterEvaluate {\n      idea {\n        module {\n          excludeDirs += deleteTask.targetFiles\n        }\n      }\n    }\n  }\n}\n\ntask allDependencies {\n  dependsOn allprojects.collect { \"$it.path:dependencies\" }\n\n  description = \"Print dependency tree of all projects\"\n}\n\nprivate allCompileTasks(Closure<Boolean> include = { t -> true }) {\n  allprojects.collect { Project prj ->\n    prj.afterEvaluate {\n      compileAll.dependsOn(prj.getTasks().withType(JavaCompile).findAll(include))\n      compileAll.dependsOn(prj.getTasks().withType(GroovyCompile).findAll(include))\n    }\n  }\n}\n\n\ntask compileAll { compileAllTask ->\n  group = LifecycleBasePlugin.BUILD_GROUP\n  allCompileTasks()\n}\n\ntask prepare {\n  group = LifecycleBasePlugin.BUILD_GROUP\n  allCompileTasks { Task task -> !task.name.toLowerCase().contains('test') && !task.project.path.toLowerCase().contains('test') }\n}\n\ntask sparkTest { thisTask ->\n  group = LifecycleBasePlugin.VERIFICATION_GROUP\n  description = \"Run all api tests\"\n  (project(':api').subprojects + project(':spark').subprojects).each { Project subPrj ->\n    thisTask.dependsOn subPrj.tasks.withType(Test)\n  }\n  finalizedBy 'sparkTestJunitHtmlReport'\n}\n\ntask sparkTestJunitHtmlReport(type: TestReport) {\n  dependsOn sparkTest\n\n  testResults.from(project(':api').subprojects*.test.binaryResultsDirectory.locationOnly)\n  testResults.from(project(':spark').subprojects*.test.binaryResultsDirectory.locationOnly)\n  destinationDirectory = layout.buildDirectory.dir(\"reports/tests/sparkTest\")\n}\n\nprivate void forAllTask(Closure<Task> closure) {\n  allprojects.each { Project subPrj ->\n\n    // afterEvaluate, because the testsset plugin defines tasks much later\n    subPrj.afterEvaluate {\n      subPrj.tasks.withType(Test).each { eachTestTask ->\n        if (!(eachTestTask.path in [':server:integrationTest'])) {\n          closure.call(eachTestTask)\n        }\n      }\n    }\n  }\n}\n\ntask allTests { thisTask ->\n  group = LifecycleBasePlugin.VERIFICATION_GROUP\n  description = \"Run all tests\"\n\n  forAllTask { Test eachTestTask ->\n    thisTask.dependsOn eachTestTask\n  }\n\n  finalizedBy 'allTestsJunitHtmlReport'\n}\n\ntask allTestsJunitHtmlReport(type: TestReport) { TestReport thisTask ->\n  group = LifecycleBasePlugin.VERIFICATION_GROUP\n  description = \"Run all api tests\"\n\n  forAllTask { Test eachTestTask ->\n    testResults.from(eachTestTask.binaryResultsDirectory.locationOnly)\n    eachTestTask.finalizedBy(thisTask)\n  }\n  destinationDirectory = layout.buildDirectory.dir(\"reports/tests/allTests\")\n}\n\nstatic def toCamelCase(String input) {\n  return input.split(\"[^a-zA-Z0-9]\").collect { it.capitalize() }.join(\"\")\n}\n\nstatic List<String> getTestClassesForTask(List<String> testsToRun) {\n  return testsToRun.stream()\n    .filter { testToRun -> !testToRun.matches(\".*[/|\\\\\\\\].*Abstract.*Test.*\") }\n    .filter { testToRun -> testToRun.endsWith(\"Test.*\") }\n    .map { testToRun -> testToRun.replaceAll(\".\\\\*\", \"\").replaceAll(\"[^\\\\w.*]\", \".\") }\n    .collect(Collectors.toList())\n}\n\ndependencyCheck {\n  failBuildOnCVSS = 1\n  suppressionFile = rootProject.file('build-platform/dependency-check-suppress.xml').toPath().toString()\n\n  nvd {\n    apiKey = System.getenv(\"NVD_API_KEY\") ?: \"\"\n  }\n\n  analyzers {\n    nodeAudit.yarnEnabled = false // Doesn't work correctly with Yarn 3+ https://github.com/jeremylong/DependencyCheck/issues/4894\n    assemblyEnabled = false // Avoid dotnet false positives\n    retirejs.filterNonVulnerable = true // Reduces effort/memory processing retirejs results\n  }\n}\n\ndependencyCheckAggregate {\n  def injected = project.objects.newInstance(InjectedExecOps)\n  doFirst {\n    injected.execOps.exec {\n      commandLine = [ \"gem\", \"install\", \"bundler-audit\", \"--no-document\" ]\n      standardOutput = System.out\n      errorOutput = System.err\n    }\n    injected.execOps.exec {\n      commandLine = [ \"bundle\", \"audit\", \"update\" ]\n      standardOutput = System.out\n      errorOutput = System.err\n    }\n  }\n}\n\nif (System.getenv().containsKey(\"GO_SERVER_URL\")) {\n  dependencyCheck {\n    data.directory = layout.buildDirectory.dir(\"dependency-check-data\").get()\n  }\n\n  tasks.register('downloadDependencyCheckCache', Download) {\n    src 'https://nexus.gocd.io/repository/cache/dependency-check-data.zip'\n    dest layout.buildDirectory.file('dependency-check-data.zip')\n    onlyIfModified true\n  }\n\n  tasks.register('unzipDependencyCheckCache', Copy) {\n    dependsOn downloadDependencyCheckCache\n    from zipTree(downloadDependencyCheckCache.dest)\n    into layout.buildDirectory.dir(\"dependency-check-data\")\n    def copyDetails = []\n    eachFile { copyDetails << it }\n    doLast {\n      copyDetails.each { FileCopyDetails details ->\n        def target = new File(destinationDir, details.path)\n        if (target.exists()) { target.setLastModified(details.lastModified) }\n      }\n    }\n  }\n\n  dependencyCheckUpdate.dependsOn unzipDependencyCheckCache\n  dependencyCheckAnalyze.dependsOn unzipDependencyCheckCache\n  dependencyCheckAggregate.dependsOn unzipDependencyCheckCache\n\n  tasks.register('uploadDependencyCheckCache', Zip) {\n    mustRunAfter dependencyCheckUpdate, dependencyCheckAnalyze, dependencyCheckAggregate\n\n    from layout.buildDirectory.file(\"dependency-check-data\")\n    archiveFileName = \"dependency-check-data-updated.zip\"\n    destinationDirectory = layout.buildDirectory\n\n    def injected = project.objects.newInstance(InjectedExecOps)\n    doLast {\n      injected.execOps.exec {\n        workingDir = projectDir\n        commandLine = [\n          \"curl\",\n          \"-u\", \"${System.getenv(\"NEXUS_CACHE_USERNAME\")}:${System.getenv(\"NEXUS_CACHE_PASSWORD\")}\",\n          \"--include\",\n          \"--upload-file\", uploadDependencyCheckCache.archiveFile.get(), 'https://nexus.gocd.io/repository/cache/dependency-check-data.zip'\n        ]\n        standardOutput = System.out\n        errorOutput = System.err\n        ignoreExitValue = true\n      }\n    }\n  }\n}\n\ntask newSPA {\n  description = \"Helper to create a new SPA. Pass `-PspaName=maintenance_mode\"\n\n  doFirst {\n    String spaName = project.spaName\n    String entityName = toCamelCase(spaName)\n    String modelsBase = \"${project(':server').webAppDir}/WEB-INF/rails/webpack/models/${spaName}\"\n    String pagesBase = \"${project(':server').webAppDir}/WEB-INF/rails/webpack/views/pages\"\n    String widgetBase = \"${pagesBase}/${spaName}\"\n    String mountPoint = \"${project(':server').webAppDir}/WEB-INF/rails/webpack/single_page_apps\"\n\n    project.delete(modelsBase, widgetBase)\n    project.mkdir(modelsBase)\n    project.mkdir(widgetBase)\n\n    String licenseHeader =\n      \"\"\"\n      * Copyright Thoughtworks, Inc.\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *     http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      \"\"\".stripIndent().trim()\n\n    String javaOrJavaScriptLicenseHeader = \"/*\\n${licenseHeader.split('\\n').collect { eachLine -> \" ${eachLine}\" }.join(\"\\n\")}\\n */\\n\\n\"\n\n    file(\"${mountPoint}/${spaName}.tsx\").withWriter { out ->\n      def contents =\n        \"\"\"\n          import {SinglePageAppBase} from \"helpers/spa_base\";\n          import {${entityName}Page} from \"views/pages/${spaName}\";\n\n          export class ${entityName}SPA extends SinglePageAppBase {\n            constructor() {\n              super(${entityName}Page);\n            }\n          }\n\n          //tslint:disable-next-line\n          new ${entityName}SPA();\n        \"\"\"\n      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"${pagesBase}/${spaName}.tsx\").withWriter { out ->\n      def contents =\n        \"\"\"\n          import m from \"mithril\";\n          import {${entityName}} from \"models/${spaName}/${spaName}\";\n          import {${entityName}Widget} from \"views/pages/${spaName}/${spaName}_widget\";\n          import {Page} from \"views/pages/page\";\n\n          interface State {\n            dummy?: ${entityName};\n          }\n\n          export class ${entityName}Page extends Page<null, State> {\n            componentToDisplay(vnode: m.Vnode<null, State>): m.Children {\n              return <${entityName}Widget/>;\n            }\n\n            pageName(): string {\n              return \"SPA Name goes here!\";\n            }\n\n            fetchData(vnode: m.Vnode<null, State>): Promise<any> {\n              // to be implemented\n              return Promise.resolve();\n            }\n          }\n        \"\"\"\n      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"${widgetBase}/${spaName}_widget.tsx\").withWriter { out ->\n      def contents =\n        \"\"\"\n          import {MithrilViewComponent} from \"jsx/mithril-component\";\n          import m from \"mithril\";\n          import {${entityName}} from \"models/${spaName}/${spaName}\";\n\n          interface Attrs {\n            dummy?: ${entityName};\n          }\n\n          export class ${entityName}Widget extends MithrilViewComponent<Attrs> {\n            view(vnode: m.Vnode<Attrs>) {\n              return <div> This is widget</div>;\n            }\n          }\n        \"\"\"\n      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"${modelsBase}/${spaName}.ts\").withWriter { out ->\n      def contents =\n        \"\"\"\n          interface EmbeddedJSON {\n            dummy?: boolean;\n            // to be implemented\n          }\n\n          interface ${entityName}JSON {\n            _embedded: EmbeddedJSON;\n          }\n\n          export class ${entityName} {\n            // to be implemented\n            static fromJSON(data: ${entityName}JSON) {\n              // to be implemented\n            }\n          }\n        \"\"\"\n      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/${entityName}Controller.java\").withWriter { out ->\n      def contents =\n        \"\"\"\n          package com.thoughtworks.go.spark.spa;\n          import com.thoughtworks.go.spark.Routes;\n          import com.thoughtworks.go.spark.SparkController;\n          import com.thoughtworks.go.spark.spring.SPAAuthenticationHelper;\n          import spark.ModelAndView;\n          import spark.Request;\n          import spark.Response;\n          import spark.TemplateEngine;\n\n          import java.util.Map;\n\n          import static spark.Spark.*;\n\n          public class ${entityName}Controller implements SparkController {\n            private final SPAAuthenticationHelper authenticationHelper;\n            private final TemplateEngine engine;\n            public ${entityName}Controller(SPAAuthenticationHelper authenticationHelper, TemplateEngine engine) {\n              this.authenticationHelper = authenticationHelper;\n              this.engine = engine;\n            }\n\n            @Override\n            public String controllerBasePath() {\n                  return Routes.${entityName}.SPA_BASE;\n            }\n\n            @Override\n            public void setupRoutes() {\n               path(controllerBasePath(), () -> {\n                  before(\"\", authenticationHelper::checkAdminUserAnd403);\n                  get(\"\", this::index, engine);\n              });\n            }\n            public ModelAndView index(Request request, Response response) {\n                Map<String, Object> object = Map.of(\n                    \"viewTitle\", \"${entityName}\"\n                );\n                return new ModelAndView(object, null);\n            }\n          }\n        \"\"\"\n      out.println(javaOrJavaScriptLicenseHeader + contents.stripIndent().trim() + \"\\n\")\n    }\n\n    addUrlRewriteRule(\"${spaName} UI\")\n\n    List<String> lines = file('spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/spring/SpaControllers.java').readLines()\n    def insertionIdx = lines.findIndexOf { l -> (l =~ /^\\s*sparkControllers.add/).find() }\n    lines.add(insertionIdx, \"\\t\\tsparkControllers.add(new ${entityName}Controller(authenticationHelper, templateEngineFactory.create(${entityName}Controller.class, () -> COMPONENT_LAYOUT_PATH)));\")\n\n    file('spark/spark-spa/src/main/java/com/thoughtworks/go/spark/spa/spring/SpaControllers.java').withWriter { out ->\n      out.println(lines.join(\"\\n\").trim() + \"\\n\")\n    }\n\n    addRoute(entityName, spaName)\n  }\n}\n\ntask removeApi {\n  description = \"Helper to create a delete an api module. Pass `-PapiName=roles-config -PapiVersion=v1`\"\n  def injected = project.objects.newInstance(InjectedExecOps)\n\n  doFirst {\n    String apiName = project.apiName\n    String newProjectName = \"api-${apiName}-${project.apiVersion}\"\n    String moduleDir = file(\"api/${newProjectName}\")\n    String packageName = \"com.thoughtworks.go.api${project.apiVersion}.${apiName.replaceAll(~/[^a-zA-Z]/, '')}\"\n\n    project.delete(moduleDir)\n\n    List<String> springConfigContents = file(\"server/src/main/resources/applicationContext-global.xml\").readLines(\"utf-8\")\n    file(\"server/src/main/resources/applicationContext-global.xml\").withWriter { out ->\n      def newContents = springConfigContents\n        .stream()\n        .filter({ eachLine -> !eachLine.contains(\"base-package=\\\"${packageName}\\\"\") })\n        .collect(Collectors.joining(\"\\n\"))\n        .trim() + \"\\n\"\n      out.println(newContents)\n    }\n\n    List<String> settingsFileContents = file('settings.gradle').readLines(\"utf-8\")\n    file('settings.gradle').withWriter { out ->\n      def newContents = settingsFileContents\n        .stream()\n        .filter({ eachLine -> !eachLine.contains(\"':api:${newProjectName}'\") })\n        .collect(Collectors.joining(\"\\n\"))\n        .trim() + \"\\n\"\n      out.println(newContents)\n    }\n\n    List<String> gitIgnoreFileContents = file('.gitignore').readLines(\"utf-8\")\n    file('.gitignore').withWriter { out ->\n      def newContents = gitIgnoreFileContents\n        .stream()\n        .filter({ eachLine -> !eachLine.startsWith(\"api/${newProjectName}/\") })\n        .collect(Collectors.joining(\"\\n\"))\n        .trim() + \"\\n\"\n      out.println(newContents)\n    }\n\n    injected.execOps.exec {\n      commandLine = ['git', 'add', '-u']\n    }\n\n    injected.execOps.exec {\n      commandLine = ['git', 'commit', '-m', \"Removed ${apiName} version ${project.apiVersion}\"]\n    }\n  }\n}\n\ntask newApi {\n  description = \"Helper to create a new api module. Pass `-PapiName=roles-config -PapiVersion=v1`\"\n\n  doFirst {\n    String apiName = project.apiName\n    String newProjectName = \"api-${apiName}-${project.apiVersion}\"\n    String oldProjectName = \"api-${apiName}-v${project.apiVersion.replaceFirst('v', '').toInteger() - 1}\"\n    File oldModuleDir = file(\"api/${oldProjectName}\")\n    project.delete(oldModuleDir)\n    if (oldModuleDir.exists()) {\n      throw new GradleException(\"Please use `upgradeApi` task instead of `newApi`\")\n    }\n    String moduleDir = file(\"api/${newProjectName}\")\n    String basePackage = \"${moduleDir}/src/main/java/com/thoughtworks/go/api${project.apiVersion}/${apiName.replaceAll(~/[^a-zA-Z]/, '')}\"\n    String testPackage = \"${moduleDir}/src/test/groovy/com/thoughtworks/go/api${project.apiVersion}/${apiName.replaceAll(~/[^a-zA-Z]/, '')}\"\n    String packageName = \"com.thoughtworks.go.api${project.apiVersion}.${apiName.replaceAll(~/[^a-zA-Z]/, '')}\"\n    String entityClassName = toCamelCase(apiName)\n    String entityVariableName = entityClassName.uncapitalize()\n    String controllerClassName = \"${entityClassName}Controller${project.apiVersion.capitalize()}\"\n\n    project.delete(moduleDir)\n    project.mkdir(moduleDir)\n    project.mkdir(basePackage)\n    project.mkdir(testPackage)\n\n    file(\"${moduleDir}/build.gradle\").withWriter { out ->\n      def contents =\n        \"\"\"\n          /*\n           * Copyright Thoughtworks, Inc.\n           *\n           * Licensed under the Apache License, Version 2.0 (the \"License\");\n           * you may not use this file except in compliance with the License.\n           * You may obtain a copy of the License at\n           *\n           *     http://www.apache.org/licenses/LICENSE-2.0\n           *\n           * Unless required by applicable law or agreed to in writing, software\n           * distributed under the License is distributed on an \"AS IS\" BASIS,\n           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           * See the License for the specific language governing permissions and\n           * limitations under the License.\n           */\n\n          plugins {\n            id 'groovy'\n          }\n\n          dependencies {\n            implementation project(path: ':api:api-base', configuration: 'runtimeElements')\n\n            testImplementation project(path: ':api:api-base', configuration: 'testOutput')\n\n            testImplementation project.deps.junit5Api\n            testRuntimeOnly project.deps.junit5Engine\n          }\n        \"\"\"\n      out.println(contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"${basePackage}/${controllerClassName}.java\").withWriter { out ->\n      def contents =\n        \"\"\"\n          /*\n           * Copyright Thoughtworks, Inc.\n           *\n           * Licensed under the Apache License, Version 2.0 (the \"License\");\n           * you may not use this file except in compliance with the License.\n           * You may obtain a copy of the License at\n           *\n           *     http://www.apache.org/licenses/LICENSE-2.0\n           *\n           * Unless required by applicable law or agreed to in writing, software\n           * distributed under the License is distributed on an \"AS IS\" BASIS,\n           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           * See the License for the specific language governing permissions and\n           * limitations under the License.\n           */\n\n          package ${packageName};\n\n          import com.thoughtworks.go.api.ApiController;\n          import com.thoughtworks.go.api.ApiVersion;\n          import com.thoughtworks.go.api.CrudController;\n          import com.thoughtworks.go.api.base.OutputWriter;\n          import com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\n          import com.thoughtworks.go.config.exceptions.EntityType;\n          import com.thoughtworks.go.config.exceptions.HttpException;\n          import com.thoughtworks.go.server.service.EntityHashingService;\n          import com.thoughtworks.go.spark.spring.SparkSpringController;\n          import org.springframework.beans.factory.annotation.Autowired;\n          import org.springframework.stereotype.Component;\n          import spark.Request;\n          import spark.Response;\n\n          import java.io.IOException;\n          import java.util.function.Consumer;\n\n          import static spark.Spark.*;\n\n          @Component\n          public class ${controllerClassName} extends ApiController implements SparkSpringController, CrudController<${entityClassName}> {\n\n              private final ApiAuthenticationHelper apiAuthenticationHelper;\n              private final EntityHashingService entityHashingService;\n\n              @Autowired\n              public ${controllerClassName}(ApiAuthenticationHelper apiAuthenticationHelper, EntityHashingService entityHashingService) {\n                  super(ApiVersion.${project.apiVersion});\n                  this.apiAuthenticationHelper = apiAuthenticationHelper;\n                  this.entityHashingService = entityHashingService;\n              }\n\n              @Override\n              public String controllerBasePath() {\n                  return Routes.${entityClassName}.BASE;\n              }\n\n              @Override\n              public void setupRoutes() {\n                  path(controllerBasePath(), () -> {\n                      // uncomment the line below to set the content type on the base path\n                      // before(\"\", mimeType, this::setContentType);\n                      // uncomment the line below to set the content type on nested routes\n                      // before(\"/*\", mimeType, this::setContentType);\n\n                      // uncomment for the `index` action\n                      // get(\"\", mimeType, this::index);\n\n                      // change the line below to enable appropriate security\n                      before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n                      // to be implemented\n                  });\n              }\n\n              // public String index(Request request, Response response) throws IOException {\n              //    ${entityClassName} ${entityVariableName} = fetchEntityFromConfig(request.params(\":id\"));\n              //    return writerForTopLevelObject(request, response, outputWriter -> ${entityClassName}sRepresenter.toJSON(outputWriter, ${entityVariableName}));\n              // }\n\n\n              @Override\n              public String etagFor(${entityClassName} entityFromServer) {\n                  return entityHashingService.hashForEntity(entityFromServer);\n              }\n\n              @Override\n              public EntityType getEntityType() {\n                  return EntityType.${entityClassName};\n              }\n\n              @Override\n              public ${entityClassName} doFetchEntityFromConfig(String name) {\n                  return someService.getEntity(name);\n              }\n\n              @Override\n              public ${entityClassName} buildEntityFromRequestBody(Request req) {\n                JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());\n                return ${entityClassName}Representer.fromJSON(jsonReader);\n              }\n\n              @Override\n              public Consumer<OutputWriter> jsonWriter(${entityClassName} ${entityVariableName}) {\n                  return outputWriter -> ${entityClassName}Representer.toJSON(outputWriter, ${entityVariableName});\n              }\n          }\n        \"\"\"\n      out.println(contents.stripIndent().trim() + \"\\n\")\n    }\n\n    file(\"${testPackage}/${controllerClassName}Test.groovy\").withWriter { out ->\n      def contents =\n        \"\"\"\n          /*\n           * Copyright Thoughtworks, Inc.\n           *\n           * Licensed under the Apache License, Version 2.0 (the \"License\");\n           * you may not use this file except in compliance with the License.\n           * You may obtain a copy of the License at\n           *\n           *     http://www.apache.org/licenses/LICENSE-2.0\n           *\n           * Unless required by applicable law or agreed to in writing, software\n           * distributed under the License is distributed on an \"AS IS\" BASIS,\n           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           * See the License for the specific language governing permissions and\n           * limitations under the License.\n           */\n\n          package ${packageName}\n\n          import com.thoughtworks.go.api.spring.ApiAuthenticationHelper\n          import com.thoughtworks.go.spark.ControllerTrait\n          import com.thoughtworks.go.spark.SecurityServiceTrait\n          import org.junit.jupiter.api.BeforeEach\n          import org.junit.jupiter.api.Nested\n          import org.junit.jupiter.api.Test\n          import org.mockito.junit.jupiter.MockitoSettings\n          import org.mockito.quality.Strictness\n\n          @MockitoSettings(strictness = Strictness.LENIENT)\n          class ${controllerClassName}Test implements SecurityServiceTrait, ControllerTrait<${controllerClassName}> {\n\n            @Override\n            ${controllerClassName} createControllerInstance() {\n              new ${controllerClassName}(new ApiAuthenticationHelper(securityService, goConfigService))\n            }\n\n            @Nested\n            class Index {\n\n              @BeforeEach\n              void setUp() {\n                loginAsUser()\n              }\n\n              @Test\n              void 'test a request'() {\n              }\n\n              @Nested\n              class Security implements SecurityTestTrait, AdminUserSecurity {\n\n                @Override\n                String getControllerMethodUnderTest() {\n                  return \"index\"\n                }\n\n                @Override\n                void makeHttpCall() {\n                  getWithApiHeader(controller.controllerBasePath())\n                }\n              }\n            }\n          }\n        \"\"\"\n      out.println(contents.stripIndent().trim() + \"\\n\")\n    }\n\n    addRoute(entityClassName, apiName)\n    addPackageToSpringClasspathScanning(packageName)\n    addProjectToSettingsGradle(newProjectName, it)\n    addProjectToGitIgnore(newProjectName)\n  }\n}\n\ntask upgradeApi {\n  description = \"Helper to upgrade an new api module. Pass `-PapiName=roles-config`\"\n\n  doFirst {\n    String apiName = project.apiName\n    List<Integer> allApiVersions = rootProject.project(':api').allprojects\n      .findAll { Project eachProject -> eachProject.name.startsWith(\"api-${apiName}-v\") }\n      .collect { Project eachProject -> eachProject.name.replaceFirst(\"^api-${apiName}-v\", \"\").toInteger() }\n\n    Integer currentMaxApiVersion = allApiVersions.max()\n\n    if (currentMaxApiVersion == null) {\n      throw new GradleException(\"Unable to find any projects with path prefix `:api:api-${apiName}-v`\".toString())\n    }\n\n    Project oldProject = rootProject.project(\"api:api-${apiName}-v${currentMaxApiVersion}\")\n    Integer apiVersion = currentMaxApiVersion + 1\n\n    String newProjectName = \"api-${apiName}-v${apiVersion}\"\n    File moduleDir = file(\"api/${newProjectName}\")\n\n    String oldPackagePrefix = \"com.thoughtworks.go.apiv${currentMaxApiVersion}\"\n    String newPackagePrefix = \"com.thoughtworks.go.apiv${apiVersion}\"\n\n    String oldControllerClassSuffix = \"ControllerV${currentMaxApiVersion}\"\n    String newControllerClassSuffix = \"ControllerV${apiVersion}\"\n    String newPackage = newPackagePrefix\n\n    project.delete(moduleDir)\n\n    project.copy {\n      from oldProject.projectDir\n      into moduleDir\n\n      exclude \"out/**/*.*\", \"target/**/*.*\"\n\n      filter { String eachLine ->\n        eachLine\n          .replace(oldPackagePrefix, newPackagePrefix)\n          .replace(oldControllerClassSuffix, newControllerClassSuffix)\n          .replaceAll(\"ApiVersion\\\\.v${currentMaxApiVersion}\", \"ApiVersion.v${apiVersion}\")\n      }\n      filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance(\"unix\"))\n\n      eachFile { FileCopyDetails fcd ->\n        List<String> segments = fcd.relativePath.segments\n        segments.replaceAll({ String eachSegment ->\n          if (eachSegment == \"apiv${currentMaxApiVersion}\") {\n            return \"apiv${apiVersion}\"\n          } else if (eachSegment.contains(\"${oldControllerClassSuffix}\")) {\n            if (fcd.name.endsWith(\"${oldControllerClassSuffix}.java\")) {\n              newPackage = new File(oldProject.projectDir, fcd.path).readLines().find { it.startsWith(\"package ${oldPackagePrefix}\") }.replaceAll(/\\.apiv[\\d]+\\./, \".apiv${apiVersion}.\").replaceFirst(/^package ([\\w\\.\\-]+);.*$/, '$1')\n            }\n            return eachSegment.replace(oldControllerClassSuffix, newControllerClassSuffix)\n          } else {\n            return eachSegment\n          }\n        })\n        fcd.relativePath = new RelativePath(!fcd.isDirectory(), (segments as String[]))\n      }\n      includeEmptyDirs = false\n    }\n\n    addPackageToSpringClasspathScanning(newPackage)\n    addProjectToSettingsGradle(newProjectName, it)\n    addProjectToGitIgnore(newProjectName)\n  }\n\n}\n\nprivate void addUrlRewriteRule(String spaName) {\n  String rule =\n    \"\"\"\n        <rule>\n          <name>${spaName}</name>\n          <from>^/admin/${spaName}(/?)\\$</from>\n          <to last=\"true\">/spark/admin/${spaName}</to>\n        </rule>\n      \"\"\"\n\n  List<String> lines = file(\"${project(':server').webAppDir}/WEB-INF/urlrewrite.xml\").readLines()\n  int insertionIdx = lines.findIndexOf { l -> (l =~ /^\\s*<urlrewrite/).find() }\n  lines.add(insertionIdx + 1, rule.stripIndent().trim())\n\n  file(\"${project(':server').webAppDir}/WEB-INF/urlrewrite.xml\").withWriter { out ->\n    out.println(lines.join(\"\\n\").trim() + \"\\n\")\n  }\n}\n\nprivate void addRoute(String entityName, String route) {\n  List<String> lines = file('spark/spark-base/src/main/java/com/thoughtworks/go/spark/Routes.java').readLines()\n  lines.add(lines.size() - 1, \"\\tpublic class ${entityName} {public static final String BASE = \\\"/admin/api/${route}\\\";}\")\n\n  file('spark/spark-base/src/main/java/com/thoughtworks/go/spark/Routes.java').withWriter { out ->\n    out.println(lines.join(\"\\n\").trim() + \"\\n\")\n  }\n}\n\nprivate void addPackageToSpringClasspathScanning(String packageName) {\n  List<String> lines = file(\"server/src/main/resources/applicationContext-global.xml\").readLines()\n  int insertionIdx = lines.findIndexOf { l -> (l =~ /^\\s*<context:component-scan /).find() }\n  lines.add(insertionIdx, \"  <context:component-scan base-package=\\\"${packageName}\\\"/>\")\n\n  file(\"server/src/main/resources/applicationContext-global.xml\").withWriter { out ->\n    out.println(lines.join(\"\\n\").trim() + \"\\n\")\n  }\n}\n\nprivate Object addProjectToSettingsGradle(String newProjectName, it) {\n  file('settings.gradle').withWriter { out ->\n\n    def contents =\n      \"\"\"\n          /*\n           * Copyright Thoughtworks, Inc.\n           *\n           * Licensed under the Apache License, Version 2.0 (the \"License\");\n           * you may not use this file except in compliance with the License.\n           * You may obtain a copy of the License at\n           *\n           *     http://www.apache.org/licenses/LICENSE-2.0\n           *\n           * Unless required by applicable law or agreed to in writing, software\n           * distributed under the License is distributed on an \"AS IS\" BASIS,\n           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n           * See the License for the specific language governing permissions and\n           * limitations under the License.\n           */\n        \"\"\"\n\n    out.println(contents.stripIndent().trim())\n    out.println(\"\")\n    out.println(\"rootProject.name = 'gocd'\")\n    out.println(\"\")\n    def existingProjects = rootProject.allprojects.findAll { prj -> prj.childProjects.isEmpty() && !prj.path.startsWith(\":docker\") }.collect {\n      it.path\n    }\n    def newProjects = existingProjects + [\":api:${newProjectName}\"]\n    newProjects.sort().unique().each { out.println \"include '${it}'\" }\n    out.println(\"\")\n    out.println(\"apply from: 'settings-docker.gradle'\")\n  }\n}\n\nprivate void addProjectToGitIgnore(String newProjectName) {\n  String[] ignoredFiles = [\"api/${newProjectName}/out/\", \"api/${newProjectName}/target/\", \"api/${newProjectName}/logs/\", \"api/${newProjectName}/config/\"]\n  rootProject.file('.gitignore').withWriterAppend { out ->\n    ignoredFiles.each { line ->\n      out.println(line)\n    }\n  }\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "commandline",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "db-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.gradle",
          "type": "blob",
          "size": 13.3896484375,
          "content": "/*\n * Copyright Thoughtworks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Parses a version from a dependency declaration string */\nstatic String versionOf(String dependencySpec) {\n  return dependencySpec.split(':').last()\n}\n\nfinal Map<String, String> libraries = [\n  // Dependabot will parse these dependencies.\n  // Keep all of these as uninterpolated string literals so that Dependabot can parse the versions and create PRs for\n  // upgrades.\n  //\n  // DO NOT interpolate version variables here because Dependabot is not smart enough to understand those. Dependabot's\n  // version parsing is simply regex matching and never actually evaluates a gradle script.\n  activeMQ            : 'org.apache.activemq:activemq-broker:5.18.6',\n  angusMailSmtp       : 'org.eclipse.angus:smtp:2.0.3',\n  apacheAnt           : 'org.apache.ant:ant:1.10.15',\n  apacheHttpComponents: 'org.apache.httpcomponents:httpclient:4.5.14',\n  aspectj             : 'org.aspectj:aspectjweaver:1.9.22.1',\n  assertJ             : 'org.assertj:assertj-core:3.27.2',\n  assertJ_DB          : 'org.assertj:assertj-db:3.0.0',\n  awaitility          : 'org.awaitility:awaitility:4.2.2',\n  bouncyCastle        : 'org.bouncycastle:bcprov-jdk18on:1.79',\n  cloning             : 'io.github.kostaskougios:cloning:1.10.3',\n  commonsCodec        : 'commons-codec:commons-codec:1.17.2',\n  commonsCollections  : 'commons-collections:commons-collections:3.2.2',\n  commonsCollections4 : 'org.apache.commons:commons-collections4:4.4',\n  commonsConfiguration: 'org.apache.commons:commons-configuration2:2.11.0',\n  commonsDbcp         : 'org.apache.commons:commons-dbcp2:2.13.0',\n  commonsFileUpload   : 'commons-fileupload:commons-fileupload:1.5',\n  commonsIO           : 'commons-io:commons-io:2.18.0',\n  commonsLang3        : 'org.apache.commons:commons-lang3:3.17.0',\n  commonsPool         : 'org.apache.commons:commons-pool2:2.12.0',\n  commonsText         : 'org.apache.commons:commons-text:1.13.0',\n  dbunit              : 'org.dbunit:dbunit:2.8.0',\n  dom4j               : 'org.dom4j:dom4j:2.1.4',\n  ehcache             : 'net.sf.ehcache.internal:ehcache-core:2.11.1.3.11', // See https://repo.terracotta.org/maven2/net/sf/ehcache/internal/ehcache-core/maven-metadata.xml\n  felix               : 'org.apache.felix:org.apache.felix.framework:7.0.5',\n  freemarker          : 'org.freemarker:freemarker:2.3.34',\n  gradleDownload      : 'de.undercouch:gradle-download-task:5.6.0',\n  grolifant           : 'org.ysb33r.gradle:grolifant-herd:4.0.0',\n  gson                : 'com.google.code.gson:gson:2.11.0',\n  guava               : 'com.google.guava:guava:33.4.0-jre',\n  h2                  : 'com.h2database:h2:1.4.200',\n  hamcrest            : 'org.hamcrest:hamcrest:3.0',\n  hibernate           : 'org.hibernate:hibernate-ehcache:3.6.10.Final',\n  jacksonBom          : 'com.fasterxml.jackson:jackson-bom:2.18.2',\n  jakartaAnnotation   : 'jakarta.annotation:jakarta.annotation-api:1.3.5',\n  jakartaMail         : 'jakarta.mail:jakarta.mail-api:2.1.3',\n  jakartaTransaction  : 'jakarta.transaction:jakarta.transaction-api:1.3.3',\n  javassist           : 'javassist:javassist:3.12.1.GA',\n  jaxbBom             : 'org.glassfish.jaxb:jaxb-bom:4.0.5',\n  jaxen               : 'jaxen:jaxen:2.0.0',\n  jcommander          : 'com.beust:jcommander:1.82',\n  jdom                : 'org.jdom:jdom2:2.0.6.1',\n  jetBrainsAnnotations: 'org.jetbrains:annotations:26.0.1',\n  jetty               : 'org.eclipse.jetty:jetty-server:10.0.24',\n  jgit                : 'org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r',\n  jodaTime            : 'joda-time:joda-time:2.13.0', // joda-time version has to be compatible with the jruby version\n  jolt                : 'com.bazaarvoice.jolt:jolt-core:0.1.8',\n  jruby               : 'org.jruby:jruby-complete:9.4.9.0',\n  jsonUnit            : 'net.javacrumbs.json-unit:json-unit-assertj:4.1.0',\n  jsoup               : 'org.jsoup:jsoup:1.18.3',\n  junit5Bom           : 'org.junit:junit-bom:5.11.4',\n  liquibase           : 'org.liquibase:liquibase-core:4.29.2',\n  liquibaseSlf4j      : 'com.mattbertolini:liquibase-slf4j:5.1.0',\n  logback             : 'ch.qos.logback:logback-classic:1.5.16',\n  lombok              : 'org.projectlombok:lombok:1.18.36',\n  mockitoBom          : 'org.mockito:mockito-bom:5.15.2',\n  mybatis             : 'org.mybatis:mybatis:3.5.19',\n  mybatisSpring       : 'org.mybatis:mybatis-spring:2.1.2',\n  mysql               : 'com.mysql:mysql-connector-j:9.1.0',\n  objenesis           : 'org.objenesis:objenesis:3.4',\n  oscache             : 'opensymphony:oscache:2.4.1',\n  oshi                : 'com.github.oshi:oshi-core-java11:6.6.5',\n  postgresql          : 'org.postgresql:postgresql:42.7.4',\n  quartz              : 'org.quartz-scheduler:quartz:2.5.0',\n  rack                : 'org.jruby.rack:jruby-rack:1.1.22',\n  resilience4jRetry   : 'io.github.resilience4j:resilience4j-retry:2.3.0',\n  semanticVersion     : 'de.skuzzle:semantic-version:2.1.1',\n  servletApi          : 'jakarta.servlet:jakarta.servlet-api:4.0.4', // Should be compatible with Jetty and Spring implementations\n  slf4jBom            : 'org.slf4j:slf4j-bom:2.0.16',\n  spark               : 'com.sparkjava:spark-core:2.7.2',\n  spring              : 'org.springframework:spring-core:4.3.30.RELEASE',\n  springSecurity      : 'org.springframework.security:spring-security-config:4.2.20.RELEASE',\n  springTestJunit5    : 'com.github.sbrannen:spring-test-junit5:1.5.0',\n  systemStubs         : 'uk.org.webcompere:system-stubs-jupiter:2.1.7',\n  testcontainersBom   : 'org.testcontainers:testcontainers-bom:1.20.4',\n  tinybundles         : 'org.ops4j.pax.tinybundles:tinybundles:3.0.0',\n  tokenBucket         : 'org.isomorphism:token-bucket:1.7',\n  urlrewrite          : 'org.tuckey:urlrewritefilter:3.2.0',\n  xmlUnit             : 'org.xmlunit:xmlunit-assertj:2.10.0',\n  ztExec              : 'org.zeroturnaround:zt-exec:1.12',\n]\n\n// Export versions that are needed outside of this file (and elsewhere within)\nfinal Map<String, String> v = [\n  activeMQ            : versionOf(libraries.activeMQ),\n  angusMailSmtp       : versionOf(libraries.angusMailSmtp),\n  apacheAnt           : versionOf(libraries.apacheAnt),\n  apacheHttpComponents: versionOf(libraries.apacheHttpComponents),\n  aspectj             : versionOf(libraries.aspectj),\n  bouncyCastle        : versionOf(libraries.bouncyCastle),\n  cloning             : versionOf(libraries.cloning),\n  commonsCodec        : versionOf(libraries.commonsCodec),\n  commonsCollections  : versionOf(libraries.commonsCollections),\n  commonsCollections4 : versionOf(libraries.commonsCollections4),\n  commonsConfiguration: versionOf(libraries.commonsConfiguration),\n  commonsDbcp         : versionOf(libraries.commonsDbcp),\n  commonsFileUpload   : versionOf(libraries.commonsFileUpload),\n  commonsIO           : versionOf(libraries.commonsIO),\n  commonsLang3        : versionOf(libraries.commonsLang3),\n  commonsPool         : versionOf(libraries.commonsPool),\n  commonsText         : versionOf(libraries.commonsText),\n  dom4j               : versionOf(libraries.dom4j),\n  ehcache             : versionOf(libraries.ehcache),\n  felix               : versionOf(libraries.felix),\n  freemarker          : versionOf(libraries.freemarker),\n  gson                : versionOf(libraries.gson),\n  guava               : versionOf(libraries.guava),\n  h2                  : versionOf(libraries.h2),\n  hamcrest            : versionOf(libraries.hamcrest),\n  hibernate           : versionOf(libraries.hibernate),\n  jacksonBom          : versionOf(libraries.jacksonBom),\n  javassist           : versionOf(libraries.javassist),\n  jakartaAnnotation   : versionOf(libraries.jakartaAnnotation),\n  jakartaMail         : versionOf(libraries.jakartaMail),\n  jakartaTransaction  : versionOf(libraries.jakartaTransaction),\n  jaxb                : versionOf(libraries.jaxbBom),\n  jaxen               : versionOf(libraries.jaxen),\n  jcommander          : versionOf(libraries.jcommander),\n  jdom                : versionOf(libraries.jdom),\n  jetty               : versionOf(libraries.jetty),\n  jgit                : versionOf(libraries.jgit),\n  jodaTime            : versionOf(libraries.jodaTime),\n  jolt                : versionOf(libraries.jolt),\n  jruby               : versionOf(libraries.jruby),\n  liquibase           : versionOf(libraries.liquibase),\n  liquibaseSlf4j      : versionOf(libraries.liquibaseSlf4j),\n  logback             : versionOf(libraries.logback),\n  mockitoBom          : versionOf(libraries.mockitoBom),\n  mybatis             : versionOf(libraries.mybatis),\n  mybatisSpring       : versionOf(libraries.mybatisSpring),\n  mysql               : versionOf(libraries.mysql),\n  objenesis           : versionOf(libraries.objenesis),\n  oscache             : versionOf(libraries.oscache),\n  oshi                : versionOf(libraries.oshi),\n  postgresql          : versionOf(libraries.postgresql),\n  quartz              : versionOf(libraries.quartz),\n  rack                : versionOf(libraries.rack),\n  semanticVersion     : versionOf(libraries.semanticVersion),\n  servletApi          : versionOf(libraries.servletApi),\n  slf4jBom            : versionOf(libraries.slf4jBom),\n  spark               : versionOf(libraries.spark),\n  spring              : versionOf(libraries.spring),\n  springSecurity      : versionOf(libraries.springSecurity),\n  tokenBucket         : versionOf(libraries.tokenBucket),\n  urlrewrite          : versionOf(libraries.urlrewrite),\n  xmlUnit             : versionOf(libraries.xmlUnit),\n  ztExec              : versionOf(libraries.ztExec),\n\n  // misc\n  tanuki              : '3.5.60-st', // https://wrapper.tanukisoftware.com/doc/english/download.jsp#stable\n  tanukiSha256sum     : '6ead64eca8bebe7450a951e4dbd66f2c93397945dd255c16137a583f3723ad13',\n  tfsSdk              : '14.139.0', // https://github.com/microsoft/team-explorer-everywhere/releases\n  tfsSdkSha256sum     : '744df70f70d28f6039938917ce02b07cbe07a577bdd662a64bb7dffb42512b90',\n  tini                : '0.19.0', // https://github.com/krallin/tini/releases\n]\n\n// While Dependabot won't be able to parse these deps, these will get upgraded for free anyway since they share versions\n// with dependencies declared above that are parseable by Dependabot, or are managed by platforms.\n// This is just a workaround to be DRY while still benefiting from Dependabot's automatic PR upgrades.\nfinal Map<String, String> related = [\n  apacheHttpMime          : \"org.apache.httpcomponents:httpmime:${v.apacheHttpComponents}\",\n  bouncyCastlePkix        : \"org.bouncycastle:bcpkix-jdk18on:${v.bouncyCastle}\",\n  jacksonCore             : \"com.fasterxml.jackson.core:jackson-core\",\n  jacksonDatabind         : \"com.fasterxml.jackson.core:jackson-databind\",\n  jaxbApi                 : \"jakarta.xml.bind:jakarta.xml.bind-api\",\n  jaxbRuntime             : \"org.glassfish.jaxb:jaxb-runtime\",\n  jettyDeploy             : \"org.eclipse.jetty:jetty-deploy:${v.jetty}\",\n  jettyJmx                : \"org.eclipse.jetty:jetty-jmx:${v.jetty}\",\n  jettyServlet            : \"org.eclipse.jetty:jetty-servlet:${v.jetty}\",\n  jettyServlets           : \"org.eclipse.jetty:jetty-servlets:${v.jetty}\",\n  jettyUtil               : \"org.eclipse.jetty:jetty-util:${v.jetty}\",\n  jettyWebapp             : \"org.eclipse.jetty:jetty-webapp:${v.jetty}\",\n  jettyWebsocket          : \"org.eclipse.jetty.websocket:websocket-jetty-server:${v.jetty}\",\n  jgitServer              : \"org.eclipse.jgit:org.eclipse.jgit.http.server:${v.jgit}\",\n  joltJsonUtils           : \"com.bazaarvoice.jolt:json-utils:${v.jolt}\",\n  junit5Api               : \"org.junit.jupiter:junit-jupiter-api\",\n  junit5Engine            : \"org.junit.jupiter:junit-jupiter-engine\",\n  junit5Params            : \"org.junit.jupiter:junit-jupiter-params\",\n  mockitoCore             : \"org.mockito:mockito-core\",\n  mockitoJunit5           : \"org.mockito:mockito-junit-jupiter\",\n  slf4jApi                : \"org.slf4j:slf4j-api\",\n  slf4jJcl                : \"org.slf4j:jcl-over-slf4j\",\n  slf4jJul                : \"org.slf4j:jul-to-slf4j\",\n  springContext           : \"org.springframework:spring-context:${v.spring}\",\n  springContextSupport    : \"org.springframework:spring-context-support:${v.spring}\",\n  springOrm               : \"org.springframework:spring-orm:${v.spring}\",\n  springSecurityWeb       : \"org.springframework.security:spring-security-web:${v.springSecurity}\",\n  springTest              : \"org.springframework:spring-test:${v.spring}\",\n  springTx                : \"org.springframework:spring-tx:${v.spring}\",\n  springWeb               : \"org.springframework:spring-web:${v.spring}\",\n  springWebmvc            : \"org.springframework:spring-webmvc:${v.spring}\",\n  testcontainers          : \"org.testcontainers:testcontainers\",\n  testcontainersJdbc      : \"org.testcontainers:jdbc\",\n  testcontainersJunit     : \"org.testcontainers:junit-jupiter\",\n  testcontainersMysql     : \"org.testcontainers:mysql\",\n  testcontainersPostgresql: \"org.testcontainers:postgresql\",\n  xmlUnitMatchers         : \"org.xmlunit:xmlunit-matchers:${v.xmlUnit}\",\n]\n\next {\n  //noinspection GroovyAssignabilityCheck\n  deps = libraries + related\n  //noinspection GroovyAssignabilityCheck\n  versions = v\n}\n"
        },
        {
          "name": "development-utility",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "domain",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1962890625,
          "content": "org.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.workers.max=6\norg.gradle.caching=true\norg.gradle.java.installations.auto-download=false\norg.gradle.jvmargs=-Xmx784m -XX:MaxMetaspaceSize=384m\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "installers",
          "type": "tree",
          "content": null
        },
        {
          "name": "jar-class-loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "jetty",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin-infra",
          "type": "tree",
          "content": null
        },
        {
          "name": "rack_hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server-launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings-docker.gradle",
          "type": "blob",
          "size": 1.5146484375,
          "content": "/*\n * Copyright Thoughtworks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// As of Gradle 6 we can no longer allows settings.gradle to use the `buildSrc` project\n// we need to manually import the Distro class.\n//\n// See:\n//   https://docs.gradle.org/current/userguide/upgrading_version_5.html#classes_from_buildsrc_are_no_longer_visible_to_settings_scripts\ndef Distro = new GroovyScriptEngine(file('buildSrc/src/main/groovy').absolutePath).with {\n  loadScriptByName('com/thoughtworks/go/build/docker/Distro.groovy')\n}\n\nDistro.values().each { distro ->\n  distro.supportedVersions.each { version ->\n    dynamicProjectForPath(':docker:gocd-agent', distro.projectName(version) as String)\n  }\n}\n\ndynamicProjectForPath(':docker:gocd-server', Distro.wolfi.projectName(Distro.wolfi.getVersion('latest')) as String)\n\ndef dynamicProjectForPath(String parentPath, String subProjectName) {\n  def subProjectPath = \"$parentPath:$subProjectName\"\n  include subProjectPath\n  project(subProjectPath).projectDir = project(parentPath).projectDir\n}"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 4.748046875,
          "content": "/*\n * Copyright Thoughtworks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrootProject.name = 'gocd'\n\nenableFeaturePreview('GROOVY_COMPILATION_AVOIDANCE')\n\ninclude ':agent'\ninclude ':agent-bootstrapper'\ninclude ':agent-common'\ninclude ':agent-launcher'\ninclude ':agent-process-launcher'\ninclude ':api:api-abstract-material-test'\ninclude ':api:api-access-token-v1'\ninclude ':api:api-admins-config-v2'\ninclude ':api:api-agent-job-history-v1'\ninclude ':api:api-agents-v7'\ninclude ':api:api-api-info-v2'\ninclude ':api:api-artifact-config-v1'\ninclude ':api:api-artifact-store-config-v1'\ninclude ':api:api-backup-config-v1'\ninclude ':api:api-backups-v2'\ninclude ':api:api-base'\ninclude ':api:api-build_cause-v1'\ninclude ':api:api-cctray'\ninclude ':api:api-cluster-profiles-v1'\ninclude ':api:api-compare-v2'\ninclude ':api:api-config-repo-operations-v1'\ninclude ':api:api-config-repos-v4'\ninclude ':api:api-current-user-v1'\ninclude ':api:api-dashboard-v4'\ninclude ':api:api-default-job-timeout-v1'\ninclude ':api:api-dependency-material-autocomplete-v1'\ninclude ':api:api-elastic-profile-operation-v1'\ninclude ':api:api-elastic-profile-v2'\ninclude ':api:api-encryption-v1'\ninclude ':api:api-environments-v3'\ninclude ':api:api-export-v1'\ninclude ':api:api-feature-toggles-v1'\ninclude ':api:api-feeds-api-v1'\ninclude ':api:api-internal-agent-v1'\ninclude ':api:api-internal-dependency-pipelines-v1'\ninclude ':api:api-internal-environments-v1'\ninclude ':api:api-internal-material-test-v1'\ninclude ':api:api-internal-materials-v1'\ninclude ':api:api-internal-pipeline-groups-v1'\ninclude ':api:api-internal-pipeline-structure-v1'\ninclude ':api:api-internal-resources-v1'\ninclude ':api:api-internal-scms-v1'\ninclude ':api:api-internal-secret-config-v1'\ninclude ':api:api-job-instance-v1'\ninclude ':api:api-mail-server-v1'\ninclude ':api:api-material-search-v1'\ninclude ':api:api-materials-v2'\ninclude ':api:api-notification-filter-v2'\ninclude ':api:api-package-repository-v1'\ninclude ':api:api-packages-v2'\ninclude ':api:api-permissions-v1'\ninclude ':api:api-pipeline-config-v11'\ninclude ':api:api-pipeline-groups-v1'\ninclude ':api:api-pipeline-instance-v1'\ninclude ':api:api-pipeline-operations-v1'\ninclude ':api:api-pipeline-selection-v1'\ninclude ':api:api-pipelines-as-code-internal-v1'\ninclude ':api:api-plugin-images'\ninclude ':api:api-plugin-infos-v7'\ninclude ':api:api-plugin-settings-v1'\ninclude ':api:api-roles-config-v3'\ninclude ':api:api-scms-v4'\ninclude ':api:api-secret-configs-v3'\ninclude ':api:api-security-auth-config-v2'\ninclude ':api:api-server-health-messages-v1'\ninclude ':api:api-server-health-v1'\ninclude ':api:api-server-maintenance-mode-v1'\ninclude ':api:api-server-site-urls-config-v1'\ninclude ':api:api-shared-v11'\ninclude ':api:api-stage-instance-v3'\ninclude ':api:api-stage-operations-v2'\ninclude ':api:api-support'\ninclude ':api:api-template-authorization-v1'\ninclude ':api:api-template-config-v7'\ninclude ':api:api-user-representers-v1'\ninclude ':api:api-user-search-v1'\ninclude ':api:api-users-v3'\ninclude ':api:api-version-infos-v1'\ninclude ':api:api-version-v1'\ninclude ':api:api-webhook-v1'\ninclude ':app-server'\ninclude ':base'\ninclude ':build-platform'\ninclude ':commandline'\ninclude ':common'\ninclude ':config:config-api'\ninclude ':config:config-server'\ninclude ':db'\ninclude ':db-support:db-migration'\ninclude ':db-support:db-support-base'\ninclude ':db-support:db-support-h2'\ninclude ':db-support:db-support-mysql'\ninclude ':db-support:db-support-postgresql'\ninclude ':development-utility:development-agent'\ninclude ':development-utility:development-server'\ninclude ':domain'\ninclude ':installers'\ninclude ':jar-class-loader'\ninclude ':jetty'\ninclude ':plugin-infra:go-plugin-access'\ninclude ':plugin-infra:go-plugin-activator'\ninclude ':plugin-infra:go-plugin-api'\ninclude ':plugin-infra:go-plugin-api-internal'\ninclude ':plugin-infra:go-plugin-config-repo'\ninclude ':plugin-infra:go-plugin-domain'\ninclude ':plugin-infra:go-plugin-infra'\ninclude ':plugin-infra:plugin-metadata-store'\ninclude ':rack_hack'\ninclude ':release'\ninclude ':server'\ninclude ':server-launcher'\ninclude ':spark:spark-base'\ninclude ':spark:spark-spa'\ninclude ':test:http-mocks'\ninclude ':test:test-agent'\ninclude ':test:test-utils'\ninclude ':tfs-impl:tfs-impl-14'\ninclude ':tw-go-plugins'\ninclude ':util'\n\napply from: 'settings-docker.gradle'\n\n"
        },
        {
          "name": "spark",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tfs-impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "tw-go-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}