{
  "metadata": {
    "timestamp": 1736708737815,
    "page": 195,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Col-E/Recaf",
      "stars": 6168,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.943359375,
          "content": "# Auto detect text files and perform LF normalization\n*               text=auto\n\n# Java sources\n*.java          text diff=java eol=lf\n*.gradle        text diff=java eol=lf\n\n# These files are text and should be normalized (Convert crlf => lf)\n*.css           text diff=css eol=lf\n*.html          text diff=html eol=lf\n*.md            text diff=markdown eol=lf\n*.js            text eol=lf\n*.csv           text eol=lf\n*.json          text eol=lf\n*.properties    text eol=lf\n*.svg           text eol=lf\n*.xml           text eol=lf\n*.yaml          text eol=lf\n*.yml           text eol=lf\n*.toml          text eol=lf\n*.lang          text eol=lf\n\n# These files are binary and should be left untouched\n*.png           binary\n*.gif           binary\n*.jpg           binary\n*.jpeg          binary\n\n# Common build-tool wrapper scripts\nmvnw            text eol=lf\ngradlew         text eol=lf\n*.sh            text eol=lf\n*.bat           text eol=crlf\n*.cmd           text eol=crlf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2666015625,
          "content": "# IntelliJ\nout/\n.idea/\n.idea_modules/\n*.iws\n*.iml\n\n# Eclipse\n.settings/\n.classpath\n.checkstyle\n.project\n\n# Gradle\ntarget/\nbuild/\ngenerated/\ngradle-app.setting\n.gradle\n.gradletasknamecache\n!gradle-wrapper.jar\n**/build/\n\n# Misc\nhs_err_pid*\n*.log\n*.ctxt\ntemp/\n\n# IntelliJ\nlib/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0732421875,
          "content": "# Contributing to Recaf\n\nThe following is a series of guidelines for contributing to Recaf. They're not _\"rules\"_ per say, rather they're more like goals to strive towards. Regardless of how closely you adhere to the following guidelines I really appreciate you taking the time to contribute, it means a lot :+1:\n\n**Table of Contents**\n\n- [What if I am not a programmer?](#what-if-i-am-not-a-programmer)\n- [What should I know before I get started?](#what-should-i-know-before-getting-started)\n- [Is there a todo list?](#is-there-a-to-do-list)\n- [Reporting Bugs](#reporting-bugs)\n- [Suggesting Features](#suggesting-features)\n- [Coding Guidelines](#coding-guidelines)\n- [Pull Requests](#pull-requests)\n\n**TLDR?**\n\n- Follow the code style.\n- Document and comment your code.\n- Make sure the tests pass after making changes.\n- Translations and feature ideas are appreciated too.\n\n**Questions?**\n\nYou can DM `invokecoley` on discord, or join the [Recaf discord](https://discord.gg/Bya5HaA).\n\n## What if I am not a programmer?\n\n[There is plenty to contribute that isn't based in code.](https://www.youtube.com/watch?v=GAqfMNB-YBU&t=603)\n\nFor example, you can contribute ideas, add translations, or write documentation:\n\n- [User documentation](https://github.com/Col-E/recaf-user-documentation)\n- [Developer documentation](https://github.com/Col-E/recaf-developer-documentation)\n\n## What should I know before getting started?\n\nIt depends on what changes you are making. For instance, changing the user-interface requires very minimal or no reverse-engineering prior knowledge. If you do need JVM reversal knowledge to work on a feature you can check the [primer guide](PRIMER.md) which points to several good resources and outlines key details.\n\n## Is there a to-do list?\n\nUnfortunately the to-do list is scattered around a a few places. We're working on eventually consolidating everything into one place.\n\n## Reporting Bugs\n\nWhen creating an issue select the `Bug report` button.\nThis will provide a template that you can fill in the details for your bug.\nPlease include as much information as possible.\nThis can include:\n\n- Clear and descriptive title\n- Log files\n- Steps to reproduce the bug\n- An explanation of what you _\\*expected\\*_ to happen\n- The file being analyzed _(Do not share anything you do not own the rights to)_\n\n## Suggesting Features\n\nWhen creating an issue select the `Feature request` button.\nThis will provide a template that you can fill in the details for your feature idea.\nBe as descriptive as possible with your idea.\n\n**Note**: Not all ideas may be within Recaf's scope. In these cases the feature should be implemented as a script or plugin.\n\n## Coding Guidelines\n\n**Style**: IDE code formatting rules can be found in the [`/setup` directory](setup/).\n\n**Commits**: Try and keep commits small and focused on one thing at a time.\n\n## Pull Requests\n\nWhen creating a pull request please consider the following when filling in the template:\n\n- Clear and descriptive title\n- A clear description of what changes are included in the pull\n\nGithub's PR system will validate that your changes compile and pass the unit tests as well."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017-2023 Matthew Coley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "PRIMER.md",
          "type": "blob",
          "size": 2.2646484375,
          "content": "# What should I know before getting started?\n\n## JVM / Class file format\n\n### General concepts\n\nA basic understanding of the JVM / class file format is _highly_ reccomended before contributing. \nHere are some articles that should bring you up to speed:\n\n- [JVM Architecture 101: Get to Know Your Virtual Machine](https://blog.overops.com/jvm-architecture-101-get-to-know-your-virtual-machine/)\n- [JVM Internals](https://blog.jamesdbloom.com/JVMInternals.html)\n- [Java Code To Byte Code](https://blog.jamesdbloom.com/JavaCodeToByteCode_PartOne.html)\n\n### Terminology\n\n**Qualified name**: Package separators using the `.` character. \nThese are names used by runtime functions like `Class.forName(name)`.\n\nFor example: \n\n- `java.lang.String`\n- `com.example.MyClass.InnerClass`\n\n**Internal name**: Package separators using the `/` character. \nInner classes specified with the `$` character. \nThese are names how classes are specified internally in the class file.\n\nFor example: \n\n- `java/lang/String`\n- `com/example/MyClass$InnerClass`\n\nPrimitives *(Not the boxed types)* use single characters:\n\n| Primitive | Internal |\n|-----------|----------|\n| `long`    | `J`      |\n| `int`     | `I`      |\n| `short`   | `S`      |\n| `byte`    | `B`      |\n| `boolean` | `Z`      |\n| `float`   | `F`      |\n| `double`  | `D`      |\n| `void`    | `V`      |\n\n**Descriptor**: Used to describe field and method types. \nThese are essentially the same as internal names, but class names are wrapped in a prefix (`L`) and suffix character (`;`).\n\nFor example: \n\n * `Ljava/lang/String;`\n * `I` _(primitives stay the same)_\n \nMethod descriptors are formatted like so:\n \n * `double method(int i, String s)` = `(ILjava/lang/String;)D`\n * `void method()` = `()V`\n \nArrays are prefixed with a `[` for each level of the array.\n\n * `int[]` = `[I`\n * `String[][]` = `[[Ljava/lang/String;`\n \n### Quirks\n\n**Wide types**: `double` and `long` typed variables take up two slots _(On the stack and in the local variable table)_.\nFor example, declaring two doubles in a static method will use slots 0, then 2. \nSlots 0-3 are all in-use. \n\n**Lambdas**: The content of a lambda is defined in compiler-generated hidden methods and are invoked with `INVOKEDYNAMIC`. \nDecompilers will in-line the code so that it looks more similar to the source representation."
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.078125,
          "content": "## What's new\n\n* Summary of additions\n\n## What's fixed\n\n* Summary of bugs fixed\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9189453125,
          "content": "# Recaf [![Discord](https://dcbadge.limes.pink/api/server/https://discord.gg/Bya5HaA?style=flat)](https://discord.gg/Bya5HaA) [![codecov](https://codecov.io/gh/Col-E/Recaf/graph/badge.svg?token=N8GslpI1lL)](https://codecov.io/gh/Col-E/Recaf)  ![downloads](https://img.shields.io/github/downloads/Col-E/Recaf/total.svg) [![Contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](CONTRIBUTING.md)\n\n![Recaf 4x UI](recaf.png)\n\nAn easy to use modern Java bytecode editor that abstracts away the complexities of Java programs.\n\n## Download\n\n- [Launcher](https://github.com/Col-E/Recaf-Launcher)\n  - Usage & instructions found on the launcher repo\n- [Snapshot releases](https://github.com/Col-E/Recaf-Launcher/blob/master/MANUAL.md)\n  - See [CI actions](https://github.com/Col-E/Recaf/actions/workflows/build.yml) for release artifacts\n- [Independent releases](https://github.com/Col-E/Recaf/releases) _(None for 4X currently)_\n\n## Features\n\n- Edit Java bytecode with ease from a high or low level _(minus the annoying parts)_\n    - Editor features within Recaf abstract away complex details of compiled Java applications like:\n        - The constant pool\n        - Stack frame calculation\n        - Using wide instructions when needed\n        - And more!\n- Easy to use navigable interface with context-sensitive actions\n- Support for standard Java _and_ Android applications\n- Multiple decompilers to switch between, with all of their parameters made fully configurable\n- Built in compiler to allow recompiling decompiled classes, even if some referenced classes are missing *(When supported, support may vary depending on code complexity and obfuscation)*\n- A bytecode assembler with a simple syntax, and supporting tooling\n    - See the state of local variables and stack values at any point in methods\n    - Access variables by names instead of indices for clearer disassembled code\n    - Convert snippets of Java source code to bytecode sequences automatically\n- Searching for a variety of different content: Strings/numeric constants, classes and member references, instruction patterns\n- Tools for deobfuscating obfuscated code\n    - Specially crafted class files with the intent of crashing reverse engineering tools are automatically patched when opened in Recaf\n    - Specially crafted jar/zip files are read as the JVM does, bypassing sneaky tricks that can trick reverse engineering tools into showing the wrong data\n    - Support for automatically renaming obfuscated classes and their members\n    - Support for manually renaming classes and their members *_(And exporting these mappings to a variety of mapping formats for use in other tools)_*\n- Attach to running Java process with instrumentation capabilities\n- And much more\n\nA complete list of features can be found in the [user documentation](https://recaf.coley.software/user/index.html).\n\n## Scripting & Plugins\n\nRecaf exposes almost all of its functionality through modular API's. Automating behaviors can be done easily with scripts, or with plugins for more complex situations. Additional features can also be added via plugins, which can register hooks in API's that offer them.\n\nTo create your own script or plugin, see the [developer documentation](https://recaf.coley.software/dev/index.html), specifically the _\"plugins & scripts\"_ section.\n\n## Command Line\n\nRecaf can run as a command line application, which can be especially useful when paired with scripts provided at startup. You can see all the current launch arguments by passing `--help` as an application argument.\n\n## Development Setup\n\nClone the repository via `git clone https://github.com/Col-E/Recaf.git`\n\nOpen the project in an IDE or generate the build with gradle.\n\n**IDE**:\n1. Import the project from the `build.gradle` file\n2. Create a run configuration with the main class `software.coley.recaf.Main`\n\n**Without IDE**:\n1. Run `gradlew build`\n    - Output will be located at: `recaf-ui/build/libs/recaf-ui-{VERSION}-all.jar`\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 5.302734375,
          "content": "plugins {\n    alias(libs.plugins.benmanes.versions) apply false\n    alias(libs.plugins.gradle.coverage.report.aggregator)\n    alias(libs.plugins.gradle.checker.processor) apply false\n}\n\nallprojects {\n    group 'software.coley'\n    version '4.0.0-SNAPSHOT'\n}\n\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: 'jacoco'\n    apply plugin: 'maven-publish'\n    apply plugin: 'com.github.ben-manes.versions'\n\n    repositories {\n        mavenLocal()\n        mavenCentral()\n        google()\n        maven { url 'https://maven.quiltmc.org/repository/release/' }\n        maven { url 'https://jitpack.io' }\n    }\n\n    // ======================= DEPENDENCIES ========================\n    dependencies {\n        // Enforce jakarta annotations everywhere as the standard for Nullable/Nonnull\n        implementation(libs.jakarta.annotation)\n\n        // Local libraries for internal use only\n        //  (none of the types from these libraries should be part of a public API)\n        implementation fileTree(dir: \"$rootProject.projectDir/libs\", include: ['*.jar'])\n    }\n\n    configurations.configureEach {\n        // Annoying annotations that replace desired tab completions.\n        exclude group: 'org.checkerframework'\n\n        // Other annotations we don't use which are transitive deps of deps\n        exclude group: 'com.google.code.findbugs'\n        exclude group: 'com.google.errorprone'\n        exclude group: 'com.google.j2objc'\n        exclude group: 'org.jetbrains', module: 'annotations'\n\n        // Used by ANTLR runtime, has a lot of IL8N related files which we don't use.\n        // Removing this dependency doesn't inhibit the behavior of libraries using the\n        // runtime in practice though.\n        exclude group: 'com.ibm.icu'\n    }\n\n    // ========================== COMPILE ==========================\n\n    // https://docs.gradle.org/current/userguide/toolchains.html\n    // gradlew -q javaToolchains - see the list of detected toolchains.\n    java {\n        toolchain {\n            languageVersion = JavaLanguageVersion.of(22)\n        }\n    }\n\n    // Append options for unchecked/deprecation\n    tasks.withType(JavaCompile).configureEach {\n        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-g' << '-parameters'\n        options.encoding = 'UTF-8'\n        options.incremental = true\n    }\n\n    // Enable automatic generation of null checks on annotated methods\n    afterEvaluate { Project p ->\n        p.plugins.apply('gov.tak.gradle.plugins.checker-processor')\n    }\n\n    // ========================== TESTING ==========================\n\n    // All modules should have the same test framework setup.\n    test {\n        useJUnitPlatform()\n\n        // Required for Mockito in newer JDK's which disable useful features by default for 'integrity' reasons.\n        jvmArgs '-XX:+EnableDynamicAgentLoading'\n\n        systemProperty 'junit.jupiter.execution.parallel.enabled', true\n        systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'\n\n        testLogging {\n            showStandardStreams = true\n            events \"passed\", \"skipped\", \"failed\"\n        }\n    }\n\n    // All modules with Java components should share the same test dependencies.\n    plugins.withType(JavaPlugin).configureEach {\n        dependencies {\n            testImplementation(libs.junit.api)\n            testImplementation(libs.junit.params)\n            testImplementation(libs.mockito)\n            testImplementation(libs.assertj)\n            testRuntimeOnly(libs.junit.engine)\n        }\n    }\n\n    // Need to tell any test-fixture-plugin to include dependencies\n    // in its own configuration. Otherwise it can get confused.\n    plugins.withType(JavaTestFixturesPlugin).configureEach {\n        dependencies {\n            testFixturesApi(libs.junit.api)\n            testFixturesApi(libs.junit.params)\n            testFixturesApi(libs.mockito)\n        }\n    }\n\n    // Configure report outputs, and jacoco packages to target.\n    tasks.withType(Test).configureEach {\n        reports.html.required = false\n        reports.junitXml.required = true\n\n        // We want to cover all recaf classes, but not the test classes themselves.\n        // The exclusion list is applied after the inclusion list, so this ends up working out.\n        jacoco {\n            includes = ['software/coley/recaf/**']\n            excludes = ['software/coley/recaf/**Test']\n        }\n    }\n\n    // Setup artifact publishing to maven local\n    publishing {\n        publications {\n            mavenJava(MavenPublication) {\n                from components.java\n            }\n        }\n        repositories {\n            mavenLocal()\n        }\n    }\n}\n\n// Always emit HTML & XML aggregate reports\njacocoAggregation {\n    outputHtml = true\n    outputXml = true\n}\n\n// Build aggregate report for test coverage when subproject 'test' tasks complete.\n// But only do so when the 'test' tasks have executed.\n// You can skip tests by specifying '-x test' in your gradle task arguments.\ntasks.register('test') {\n    dependsOn(subprojects.test)\n    doLast {\n        if (subprojects.test.stream().anyMatch(Task::getDidWork))\n            buildJacocoAggregate.execute()\n    }\n}\n\ntasks.register('build') {\n    // Build will run tests, unless skipped by '-x test'.\n    // Even if skipped, this will still lead to the subproject build tasks being executed, such as:\n    //  - recaf-ui:shadowJar\n    dependsOn(tasks.named('test'))\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "coverage:\n  precision: 2\n  round: down\n  status:\n    project:\n      default:\n        informational: true\n    patch:\n      default:\n        informational: true\n\nignore:\n  - \"**/src/test/\"\n  - \"**/src/testFixtures\""
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.0224609375,
          "content": "org.gradle.caching=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jitpack.yml",
          "type": "blob",
          "size": 0.0947265625,
          "content": "jdk:\n  - openjdk22\nbefore_install:\n  - sdk install java 22.0.1-zulu\n  - sdk use java 22.0.1-zulu\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "recaf-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "recaf-ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "recaf.png",
          "type": "blob",
          "size": 76.119140625,
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1640625,
          "content": "rootProject.name = 'Recaf'\n\ninclude 'recaf-core'\ninclude 'recaf-ui'\n\nbuildCache {\n    local {\n        enabled = true\n        directory = new File('build/cache')\n    }\n}"
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}