{
  "metadata": {
    "timestamp": 1736708685518,
    "page": 99,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koush/AndroidAsync",
      "stars": 7527,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "bin\n.settings\nlocal.properties\ngen\n.gradle\nbuild\n.idea/\n.DS_Store\nokhttp/\nokio/\nlibs\n*.iml\n"
        },
        {
          "name": "AndroidAsync-Kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "AndroidAsync",
          "type": "tree",
          "content": null
        },
        {
          "name": "AndroidAsyncSample",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5732421875,
          "content": "Copyright 2013 Koushik Dutta (2013)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.564453125,
          "content": "# AndroidAsync\r\n\r\nAndroidAsync is a low level network protocol library. If you are looking for an easy to use, higher level, Android aware,\r\nhttp request library, check out [Ion](https://github.com/koush/ion) (it is built on top of AndroidAsync). The typical Android\r\napp developer would probably be more interested in Ion.\r\n\r\nBut if you're looking for a raw Socket, HTTP(s) client/server, and WebSocket library for Android, AndroidAsync\r\nis it.\r\n\r\n#### Features\r\n * Based on NIO. Single threaded and callback driven.\r\n * All operations return a Future that can be cancelled\r\n * Socket client + socket server\r\n * HTTP client + server\r\n * WebSocket client + server\r\n\r\n### Download\r\n\r\nDownload [the latest JAR](https://search.maven.org/remote_content?g=com.koushikdutta.async&a=androidasync&v=LATEST\r\n) or grab via Maven:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.koushikdutta.async</groupId>\r\n    <artifactId>androidasync</artifactId>\r\n    <version>(insert latest version)</version>\r\n</dependency>\r\n```\r\n\r\nGradle: \r\n```groovy\r\ndependencies {\r\n    compile 'com.koushikdutta.async:androidasync:2.+'\r\n}\r\n```\r\n\r\n### Download a url to a String\r\n\r\n```java\r\n// url is the URL to download.\r\nAsyncHttpClient.getDefaultInstance().getString(url, new AsyncHttpClient.StringCallback() {\r\n    // Callback is invoked with any exceptions/errors, and the result, if available.\r\n    @Override\r\n    public void onCompleted(Exception e, AsyncHttpResponse response, String result) {\r\n        if (e != null) {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n        System.out.println(\"I got a string: \" + result);\r\n    }\r\n});\r\n```\r\n\r\n\r\n### Download JSON from a url\r\n\r\n```java\r\n// url is the URL to download.\r\nAsyncHttpClient.getDefaultInstance().getJSONObject(url, new AsyncHttpClient.JSONObjectCallback() {\r\n    // Callback is invoked with any exceptions/errors, and the result, if available.\r\n    @Override\r\n    public void onCompleted(Exception e, AsyncHttpResponse response, JSONObject result) {\r\n        if (e != null) {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n        System.out.println(\"I got a JSONObject: \" + result);\r\n    }\r\n});\r\n```\r\n\r\nOr for JSONArrays...\r\n\r\n```java\r\n// url is the URL to download.\r\nAsyncHttpClient.getDefaultInstance().getJSONArray(url, new AsyncHttpClient.JSONArrayCallback() {\r\n    // Callback is invoked with any exceptions/errors, and the result, if available.\r\n    @Override\r\n    public void onCompleted(Exception e, AsyncHttpResponse response, JSONArray result) {\r\n        if (e != null) {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n        System.out.println(\"I got a JSONArray: \" + result);\r\n    }\r\n});\r\n```\r\n\r\n\r\n### Download a url to a file\r\n\r\n```java\r\nAsyncHttpClient.getDefaultInstance().getFile(url, filename, new AsyncHttpClient.FileCallback() {\r\n    @Override\r\n    public void onCompleted(Exception e, AsyncHttpResponse response, File result) {\r\n        if (e != null) {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n        System.out.println(\"my file is available at: \" + result.getAbsolutePath());\r\n    }\r\n});\r\n```\r\n\r\n\r\n### Caching is supported too\r\n\r\n```java\r\n// arguments are the http client, the directory to store cache files,\r\n// and the size of the cache in bytes\r\nResponseCacheMiddleware.addCache(AsyncHttpClient.getDefaultInstance(),\r\n                                  getFileStreamPath(\"asynccache\"),\r\n                                  1024 * 1024 * 10);\r\n```\r\n\r\n\r\n### Need to do multipart/form-data uploads? That works too.\r\n\r\n```java\r\nAsyncHttpPost post = new AsyncHttpPost(\"http://myservercom/postform.html\");\r\nMultipartFormDataBody body = new MultipartFormDataBody();\r\nbody.addFilePart(\"my-file\", new File(\"/path/to/file.txt\");\r\nbody.addStringPart(\"foo\", \"bar\");\r\npost.setBody(body);\r\nAsyncHttpClient.getDefaultInstance().executeString(post, new AsyncHttpClient.StringCallback(){\r\n        @Override\r\n        public void onCompleted(Exception ex, AsyncHttpResponse source, String result) {\r\n            if (ex != null) {\r\n                ex.printStackTrace();\r\n                return;\r\n            }\r\n            System.out.println(\"Server says: \" + result);\r\n        }\r\n    });\r\n```\r\n\r\n\r\n### Can also create web sockets:\r\n\r\n```java\r\nAsyncHttpClient.getDefaultInstance().websocket(get, \"my-protocol\", new WebSocketConnectCallback() {\r\n    @Override\r\n    public void onCompleted(Exception ex, WebSocket webSocket) {\r\n        if (ex != null) {\r\n            ex.printStackTrace();\r\n            return;\r\n        }\r\n        webSocket.send(\"a string\");\r\n        webSocket.send(new byte[10]);\r\n        webSocket.setStringCallback(new StringCallback() {\r\n            public void onStringAvailable(String s) {\r\n                System.out.println(\"I got a string: \" + s);\r\n            }\r\n        });\r\n        webSocket.setDataCallback(new DataCallback() {\r\n            public void onDataAvailable(DataEmitter emitter, ByteBufferList byteBufferList) {\r\n                System.out.println(\"I got some bytes!\");\r\n                // note that this data has been read\r\n                byteBufferList.recycle();\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n\r\n### AndroidAsync also let's you create simple HTTP servers:\r\n\r\n```java\r\nAsyncHttpServer server = new AsyncHttpServer();\r\n\r\nList<WebSocket> _sockets = new ArrayList<WebSocket>();\r\n\r\nserver.get(\"/\", new HttpServerRequestCallback() {\r\n    @Override\r\n    public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {\r\n        response.send(\"Hello!!!\");\r\n    }\r\n});\r\n\r\n// listen on port 5000\r\nserver.listen(5000);\r\n// browsing http://localhost:5000 will return Hello!!!\r\n\r\n```\r\n\r\n### And WebSocket Servers:\r\n\r\n```java\r\nAsyncHttpServer httpServer = new AsyncHttpServer();\r\n\r\nhttpServer.listen(AsyncServer.getDefault(), port);\r\n\r\nhttpServer.websocket(\"/live\", new AsyncHttpServer.WebSocketRequestCallback() {\r\n    @Override\r\n    public void onConnected(final WebSocket webSocket, AsyncHttpServerRequest request) {\r\n        _sockets.add(webSocket);\r\n        \r\n        //Use this to clean up any references to your websocket\r\n        webSocket.setClosedCallback(new CompletedCallback() {\r\n            @Override\r\n            public void onCompleted(Exception ex) {\r\n                try {\r\n                    if (ex != null)\r\n                        Log.e(\"WebSocket\", \"An error occurred\", ex);\r\n                } finally {\r\n                    _sockets.remove(webSocket);\r\n                }\r\n            }\r\n        });\r\n        \r\n        webSocket.setStringCallback(new StringCallback() {\r\n            @Override\r\n            public void onStringAvailable(String s) {\r\n                if (\"Hello Server\".equals(s))\r\n                    webSocket.send(\"Welcome Client!\");\r\n            }\r\n        });\r\n    \r\n    }\r\n});\r\n\r\n//..Sometime later, broadcast!\r\nfor (WebSocket socket : _sockets)\r\n    socket.send(\"Fireball!\");\r\n```\r\n\r\n### Futures\r\n\r\nAll the API calls return [Futures](http://en.wikipedia.org/wiki/Futures_and_promises).\r\n\r\n```java\r\nFuture<String> string = client.getString(\"http://foo.com/hello.txt\");\r\n// this will block, and may also throw if there was an error!\r\nString value = string.get();\r\n```\r\n\r\nFutures can also have callbacks...\r\n\r\n```java\r\nFuture<String> string = client.getString(\"http://foo.com/hello.txt\");\r\nstring.setCallback(new FutureCallback<String>() {\r\n    @Override\r\n    public void onCompleted(Exception e, String result) {\r\n        System.out.println(result);\r\n    }\r\n});\r\n```\r\n\r\nFor brevity...\r\n\r\n```java\r\nclient.getString(\"http://foo.com/hello.txt\")\r\n.setCallback(new FutureCallback<String>() {\r\n    @Override\r\n    public void onCompleted(Exception e, String result) {\r\n        System.out.println(result);\r\n    }\r\n});\r\n```\r\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.73828125,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath project.hasProperty('global_gradleAndroidPlugin') ? global_gradleAndroidPlugin : 'com.android.tools.build:gradle:3.2.0'\n    }\n}\n\nsubprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n        google()\n    }\n\n    ext.global_compileSdkVersion = project.hasProperty('global_compileSdkVersion') ? global_compileSdkVersion : 28\n    ext.global_buildToolsVersion = project.hasProperty('global_buildToolsVersion') ? global_buildToolsVersion : '28.0.3'\n    ext.global_gradleAndroidPlugin = project.hasProperty('global_gradleAndroidPlugin') ? global_gradleAndroidPlugin : 'com.android.tools.build:gradle:3.2.0'\n}\n"
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.06640625,
          "content": "include 'AndroidAsync', 'AndroidAsyncSample', 'AndroidAsyncStetho'\n\n"
        }
      ]
    }
  ]
}