{
  "metadata": {
    "timestamp": 1736708764795,
    "page": 242,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amitshekhariitbhu/Fast-Android-Networking",
      "stars": 5722,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1015625,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n/.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.943359375,
          "content": "language: android\n\nenv:\n  global:\n    - ADB_INSTALL_TIMEOUT=30\n# Using the new Container-Based Infrastructure\n    - sudo: false\n# Turning off caching to avoid caching Issues\n    - cache: false\n# Initiating clean Gradle output\n    - TERM=dumb\n# Giving even more memory to Gradle JVM\n    - GRADLE_OPTS=\"-Xmx2048m -XX:MaxPermSize=1024m\"\n\nandroid:\n  components:\n    - tools\n    - platform-tools\n    - build-tools-27.0.3\n    - android-27\n    - android-24\n    - android-23\n    - android-22\n    - extra-google-google_play_services\n    - extra-google-m2repository\n    - extra-android-m2repository\n    - sys-img-armeabi-v7a-android-22    \n\n# Emulator Management: Create, Start and Wait\nbefore_script:\n  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a -c 32M\n  - emulator -avd test -no-audio -no-window &\n  - android-wait-for-emulator\n  - sleep 180\n  - adb devices\n  - adb shell input keyevent 82 &\n  \nscript:\n  - ./gradlew connectedAndroidTest\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.736328125,
          "content": "Change Log\n==========\n\nVersion 1.0.2 *(2018-07-10)*\n----------------------------\n\n * New: Add support for multiple file upload with same key\n * New: Add support for multi contentType in multipart\n * Bump OkHttp Version to 3.10.0\n * Bump other dependencies\n\n\nVersion 1.0.1 *(2017-12-20)*\n----------------------------\n\n * New: Add support for `Single`, `Completable`, `Flowable`, `Maybe` Observable\n * New: Add support for OPTIONS request\n * Bump OkHttp Version to 3.9.1\n * Bump other dependencies\n * New: Add support for specifying request method dynamically\n * New: Add API to check isRequestRunning\n * Fix: Add more than one values for one key in header and query\n * Merge pull requests\n\n\nVersion 1.0.0 *(2017-03-19)*\n----------------------------\n\n * Fix: Progress bug for large files download\n * Merge pull requests\n * New: Add new API\n * Bump OkHttp Version to 3.6.0\n * New: Add config options for BitmapDecode\n * New: Add Consumer Proguard\n\n\nVersion 0.4.0 *(2017-02-01)*\n----------------------------\n\n * New: RxJava2 Support [link](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)\n * New: Add Java Object directly in any request [link](https://amitshekhariitbhu.github.io/Fast-Android-Networking/post_request.html)\n * New: Java Object is supported for query parameter, headers also\n * Update OkHttp to 3.5.0\n * Fix: Allow all Map implementations\n * New: Add better logging of request\n * New: Get parsed error body [link](https://amitshekhariitbhu.github.io/Fast-Android-Networking/error_code_handling.html)\n * Merged pull requests\n\n\nVersion 0.3.0 *(2016-11-07)*\n----------------------------\n\n * Fix: Few minor bug fixes\n * Remove unwanted tags from manifest file\n\n\nVersion 0.2.0 *(2016-09-16)*\n----------------------------\n\n* New: Jackson Parser Support \n* New: Making Synchronous Request - [Check Here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/synchronous_request.html)\n* New: setContentType(\"application/json; charset=utf-8\") in POST and Multipart request.\n* New: Getting OkHttpResponse in Response to access headers - [Check Here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/getting_okhttpresponse.html)\n* Bug fixes : As always we are squashing bugs.\n* New: Few other features which are request by the fans of Fast Android Networking.\n\n\nVersion 0.1.0 *(2016-07-31)*\n----------------------------\n\n * New: RxJava Support For Fast-Android-Networking\n * New: Now RxJava can be used with Fast-Android-Networking\n * New: Operators like `flatMap`, `filter`, `map`, `zip`, etc can be used easily with Fast-Android-Networking.\n * New: Chaining of Requests can be done.\n * New: Requests can be bind with Activity-Lifecycle.\n * New: Java Object Parsing Support\n\n\nVersion 0.0.1 *(2016-06-03)*\n----------------------------\n\nInitial release."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.365234375,
          "content": "# Contributing\n\n1. Fork it!\n2. Checkout the development branch: `git checkout development`\n3. Create your feature branch: `git checkout -b my-new-feature`\n4. Add your changes to the index: `git add .`\n5. Commit your changes: `git commit -m 'Add some feature'`\n6. Push to the branch: `git push origin my-new-feature`\n7. Submit a pull request against the `development` branch\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.625,
          "content": "<img src=https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/androidnetworking.png >\n\n# Fast Android Networking Library\n\n### About Fast Android Networking Library\n\nFast Android Networking Library is a powerful library for doing any type of networking in Android applications which is made on top of [OkHttp Networking Layer](http://square.github.io/okhttp/).\n\nFast Android Networking Library takes care of each and everything. So you don't have to do anything, just make request and listen for the response.\n\n### Why use Fast Android Networking ?\n* Recent removal of HttpClient in Android Marshmallow(Android M) made other networking libraries obsolete.\n* No other single library does each and everything like making request, downloading any type of file, uploading file, loading\n  image from network in ImageView, etc. There are some libraries but they are outdated.\n* No other library provides simple interface for doing all types of things in networking like setting priority, cancelling, etc.\n* As it uses [Okio](https://github.com/square/okio) , No more GC overhead in android applications.\n  [Okio](https://github.com/square/okio) is made to handle GC overhead while allocating memory.\n  [Okio](https://github.com/square/okio) does some clever things to save CPU and memory.\n* It uses [OkHttp](http://square.github.io/okhttp/) , more importantly it supports HTTP/2.  \n\n## About me\n\nHi, I am Amit Shekhar, Co-Founder @ [Outcome School](https://outcomeschool.com) • IIT 2010-14 • I have taught and mentored many developers, and their efforts landed them high-paying tech jobs, helped many tech companies in solving their unique problems, and created many open-source libraries being used by top companies. I am passionate about sharing knowledge through open-source, blogs, and videos.\n\nYou can connect with me on:\n\n- [Twitter](https://twitter.com/amitiitbhu)\n- [YouTube](https://www.youtube.com/@amitshekhar)\n- [LinkedIn](https://www.linkedin.com/in/amit-shekhar-iitbhu)\n- [GitHub](https://github.com/amitshekhariitbhu)\n\n## [Outcome School Blog](https://outcomeschool.com/blog) - High-quality content to learn Android concepts.\n\n### RxJava2 Support, [check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html).\n\n### Find this project useful ? :heart:\n* Support it by clicking the :star: button on the upper right of this page. :v:\n\nFor full details, visit the documentation on our web site :\n\n<a href=\"https://amitshekhariitbhu.github.io/Fast-Android-Networking\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/amitshekhariitbhu/Fast-Android-Networking/master/assets/get_started.png\" width=\"150\" height=\"42\"/></a>\n\n## Requirements\n\nFast Android Networking Library can be included in any Android application. \n\nFast Android Networking Library supports Android 2.3 (Gingerbread) and later. \n\n## Using Fast Android Networking Library in your application\n\nAdd this in your `settings.gradle`:\n```groovy\nmaven { url 'https://jitpack.io' }\n```\n\nIf you are using `settings.gradle.kts`, add the following:\n```kotlin\nmaven { setUrl(\"https://jitpack.io\") }\n```\n\nAdd this in your `build.gradle`\n```groovy\nimplementation 'com.github.amitshekhariitbhu.Fast-Android-Networking:android-networking:1.0.4'\n```\n\nIf you are using `build.gradle.kts`, add the following:\n```kotlin\nimplementation(\"com.github.amitshekhariitbhu.Fast-Android-Networking:android-networking:1.0.4\")\n```\n\nDo not forget to add internet permission in manifest if already not present\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\nThen initialize it in onCreate() Method of application class :\n```java\nAndroidNetworking.initialize(getApplicationContext());\n```\nInitializing it with some customization , as it uses [OkHttp](http://square.github.io/okhttp/) as networking layer, you can pass custom okHttpClient while initializing it.\n```java\n// Adding an Network Interceptor for Debugging purpose :\nOkHttpClient okHttpClient = new OkHttpClient() .newBuilder()\n                        .addNetworkInterceptor(new StethoInterceptor())\n                        .build();\nAndroidNetworking.initialize(getApplicationContext(),okHttpClient);                        \n```\n\nUsing the Fast Android Networking with Jackson Parser\n\nAdd this in your `build.gradle`\n```groovy\nimplementation 'com.github.amitshekhariitbhu.Fast-Android-Networking:jackson-android-networking:1.0.4'\n```\n\nIf you are using `build.gradle.kts`, add the following:\n```kotlin\nimplementation(\"com.github.amitshekhariitbhu.Fast-Android-Networking:jackson-android-networking:1.0.4\")\n```\n\n```java\n// Then set the JacksonParserFactory like below\nAndroidNetworking.setParserFactory(new JacksonParserFactory());\n```\n\nUsing the Fast Android Networking with RxJava2\n\nAdd this in your `build.gradle`\n```groovy\nimplementation 'com.github.amitshekhariitbhu.Fast-Android-Networking:rx2-android-networking:1.0.4'\n```\n\nIf you are using `build.gradle.kts`, add the following:\n```kotlin\nimplementation(\"com.github.amitshekhariitbhu.Fast-Android-Networking:rx2-android-networking:1.0.4\")\n```\n\nUsing the Fast Android Networking with RxJava\n\nAdd this in your `build.gradle`\n```groovy\nimplementation 'com.github.amitshekhariitbhu.Fast-Android-Networking:rx-android-networking:1.0.4'\n```\n\nIf you are using `build.gradle.kts`, add the following:\n```kotlin\nimplementation(\"com.github.amitshekhariitbhu.Fast-Android-Networking:rx-android-networking:1.0.4\")\n```\n\n### Making a GET Request\n```java\nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}\")\n                 .addPathParameter(\"pageNumber\", \"0\")\n                 .addQueryParameter(\"limit\", \"3\")\n                 .addHeaders(\"token\", \"1234\")\n                 .setTag(\"test\")\n                 .setPriority(Priority.LOW)\n                 .build()\n                 .getAsJSONArray(new JSONArrayRequestListener() {\n                    @Override\n                    public void onResponse(JSONArray response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });                \n```\n### Making a POST Request\n```java\nAndroidNetworking.post(\"https://fierce-cove-29863.herokuapp.com/createAnUser\")\n                 .addBodyParameter(\"firstname\", \"Amit\")\n                 .addBodyParameter(\"lastname\", \"Shekhar\")\n                 .setTag(\"test\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .getAsJSONObject(new JSONObjectRequestListener() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });\n```\nYou can also post java object, json, file, etc in POST request like this.\n```java\nUser user = new User();\nuser.firstname = \"Amit\";\nuser.lastname = \"Shekhar\";\n\nAndroidNetworking.post(\"https://fierce-cove-29863.herokuapp.com/createUser\")\n                 .addBodyParameter(user) // posting java object\n                 .setTag(\"test\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .getAsJSONArray(new JSONArrayRequestListener() {\n                    @Override\n                    public void onResponse(JSONArray response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });\n\n\nJSONObject jsonObject = new JSONObject();\ntry {\n    jsonObject.put(\"firstname\", \"Amit\");\n    jsonObject.put(\"lastname\", \"Shekhar\");\n} catch (JSONException e) {\n  e.printStackTrace();\n}\n       \nAndroidNetworking.post(\"https://fierce-cove-29863.herokuapp.com/createUser\")\n                 .addJSONObjectBody(jsonObject) // posting json\n                 .setTag(\"test\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .getAsJSONArray(new JSONArrayRequestListener() {\n                    @Override\n                    public void onResponse(JSONArray response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });\n                \nAndroidNetworking.post(\"https://fierce-cove-29863.herokuapp.com/postFile\")\n                 .addFileBody(file) // posting any type of file\n                 .setTag(\"test\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .getAsJSONObject(new JSONObjectRequestListener() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });               \n```\n\n### Using it with your own JAVA Object - JSON Parser\n```java\n/*--------------Example One -> Getting the userList----------------*/\nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}\")\n                .addPathParameter(\"pageNumber\", \"0\")\n                .addQueryParameter(\"limit\", \"3\")\n                .setTag(this)\n                .setPriority(Priority.LOW)\n                .build()\n                .getAsObjectList(User.class, new ParsedRequestListener<List<User>>() {\n                    @Override\n                    public void onResponse(List<User> users) {\n                      // do anything with response\n                      Log.d(TAG, \"userList size : \" + users.size());\n                      for (User user : users) {\n                        Log.d(TAG, \"id : \" + user.id);\n                        Log.d(TAG, \"firstname : \" + user.firstname);\n                        Log.d(TAG, \"lastname : \" + user.lastname);\n                      }\n                    }\n                    @Override\n                    public void onError(ANError anError) {\n                     // handle error\n                    }\n                });\n/*--------------Example Two -> Getting an user----------------*/\nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}\")\n                .addPathParameter(\"userId\", \"1\")\n                .setTag(this)\n                .setPriority(Priority.LOW)\n                .build()\n                .getAsObject(User.class, new ParsedRequestListener<User>() {\n                     @Override\n                     public void onResponse(User user) {\n                        // do anything with response\n                        Log.d(TAG, \"id : \" + user.id);\n                        Log.d(TAG, \"firstname : \" + user.firstname);\n                        Log.d(TAG, \"lastname : \" + user.lastname);\n                     }\n                     @Override\n                     public void onError(ANError anError) {\n                        // handle error\n                     }\n                 }); \n/*-- Note : YourObject.class, getAsObject and getAsObjectList are important here --*/              \n```\n\n### Downloading a file from server\n```java\nAndroidNetworking.download(url,dirPath,fileName)\n                 .setTag(\"downloadTest\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .setDownloadProgressListener(new DownloadProgressListener() {\n                    @Override\n                    public void onProgress(long bytesDownloaded, long totalBytes) {\n                      // do anything with progress  \n                    }\n                 })\n                 .startDownload(new DownloadListener() {\n                    @Override\n                    public void onDownloadComplete() {\n                      // do anything after completion\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error    \n                    }\n                });                 \n```\n### Uploading a file to server\n```java\nAndroidNetworking.upload(url)\n                 .addMultipartFile(\"image\",file)    \n                 .addMultipartParameter(\"key\",\"value\")\n                 .setTag(\"uploadTest\")\n                 .setPriority(Priority.HIGH)\n                 .build()\n                 .setUploadProgressListener(new UploadProgressListener() {\n                    @Override\n                    public void onProgress(long bytesUploaded, long totalBytes) {\n                      // do anything with progress \n                    }\n                 })\n                 .getAsJSONObject(new JSONObjectRequestListener() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                      // do anything with response                \n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error \n                    }\n                 }); \n```\n\n### Getting Response and completion in an another thread executor \n(Note : Error and Progress will always be returned in main thread of application)\n```java\nAndroidNetworking.upload(url)\n                 .addMultipartFile(\"image\",file)  \n                 .addMultipartParameter(\"key\",\"value\")  \n                 .setTag(\"uploadTest\")\n                 .setPriority(Priority.HIGH)\n                 .build()\n                 .setExecutor(Executors.newSingleThreadExecutor()) // setting an executor to get response or completion on that executor thread\n                 .setUploadProgressListener(new UploadProgressListener() {\n                    @Override\n                    public void onProgress(long bytesUploaded, long totalBytes) {\n                      // do anything with progress \n                    }\n                 })\n                 .getAsJSONObject(new JSONObjectRequestListener() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                      // below code will be executed in the executor provided\n                      // do anything with response                \n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error \n                    }\n                 }); \n```\n### Setting a Percentage Threshold For Not Cancelling the request if it has completed the given threshold\n```java\nAndroidNetworking.download(url,dirPath,fileName)\n                 .setTag(\"downloadTest\")\n                 .setPriority(Priority.MEDIUM)\n                 .setPercentageThresholdForCancelling(50) // even if at the time of cancelling it will not cancel if 50% \n                 .build()                                 // downloading is done.But can be cancalled with forceCancel.\n                 .setDownloadProgressListener(new DownloadProgressListener() {\n                    @Override\n                    public void onProgress(long bytesDownloaded, long totalBytes) {\n                      // do anything with progress  \n                    }\n                 })\n                 .startDownload(new DownloadListener() {\n                    @Override\n                    public void onDownloadComplete() {\n                      // do anything after completion\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error    \n                    }\n                });   \n```\n### Cancelling a request.\nAny request with a given tag can be cancelled. Just do like this.\n```java\nAndroidNetworking.cancel(\"tag\"); // All the requests with the given tag will be cancelled.\nAndroidNetworking.forceCancel(\"tag\");  // All the requests with the given tag will be cancelled , even if any percent threshold is\n                                       // set , it will be cancelled forcefully. \nAndroidNetworking.cancelAll(); // All the requests will be cancelled.  \nAndroidNetworking.forceCancelAll(); // All the requests will be cancelled , even if any percent threshold is\n                               // set , it will be cancelled forcefully.                           \n```\n### Loading image from network into ImageView\n```xml\n      <com.androidnetworking.widget.ANImageView\n          android:id=\"@+id/imageView\"\n          android:layout_width=\"100dp\"\n          android:layout_height=\"100dp\"\n          android:layout_gravity=\"center\" />\n          \n      imageView.setDefaultImageResId(R.drawable.default);\n      imageView.setErrorImageResId(R.drawable.error);\n      imageView.setImageUrl(imageUrl);          \n```\n### Getting Bitmap from url with some specified parameters\n```java\nAndroidNetworking.get(imageUrl)\n                 .setTag(\"imageRequestTag\")\n                 .setPriority(Priority.MEDIUM)\n                 .setBitmapMaxHeight(100)\n                 .setBitmapMaxWidth(100)\n                 .setBitmapConfig(Bitmap.Config.ARGB_8888)\n                 .build()\n                 .getAsBitmap(new BitmapRequestListener() {\n                    @Override\n                    public void onResponse(Bitmap bitmap) {\n                    // do anything with bitmap\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error\n                    }\n                });\n```\n### Error Code Handling\n```java\npublic void onError(ANError error) {\n   if (error.getErrorCode() != 0) {\n        // received error from server\n        // error.getErrorCode() - the error code from server\n        // error.getErrorBody() - the error body from server\n        // error.getErrorDetail() - just an error detail\n        Log.d(TAG, \"onError errorCode : \" + error.getErrorCode());\n        Log.d(TAG, \"onError errorBody : \" + error.getErrorBody());\n        Log.d(TAG, \"onError errorDetail : \" + error.getErrorDetail());\n        // get parsed error object (If ApiError is your class)\n        ApiError apiError = error.getErrorAsObject(ApiError.class);\n   } else {\n        // error.getErrorDetail() : connectionError, parseError, requestCancelledError\n        Log.d(TAG, \"onError errorDetail : \" + error.getErrorDetail());\n   }\n}\n```\n### Remove Bitmap from cache or clear cache\n```java\nAndroidNetworking.evictBitmap(key); // remove a bitmap with key from LruCache\nAndroidNetworking.evictAllBitmap(); // clear LruCache\n```\n### Prefetch a request (so that it can return from cache when required at instant)\n```java\nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}\")\n                .addPathParameter(\"pageNumber\", \"0\")\n                .addQueryParameter(\"limit\", \"30\")\n                .setTag(this)\n                .setPriority(Priority.LOW)\n                .build()\n                .prefetch();\n```\n### Customizing OkHttpClient for a particular request\n```java\nOkHttpClient okHttpClient = new OkHttpClient().newBuilder()\n                .addInterceptor(new GzipRequestInterceptor())\n                .build();\n                \nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}\")\n                 .addPathParameter(\"pageNumber\", \"0\")\n                 .addQueryParameter(\"limit\", \"3\")\n                 .addHeaders(\"token\", \"1234\")\n                 .setTag(\"test\")\n                 .setPriority(Priority.LOW)\n                 .setOkHttpClient(okHttpClient) // passing a custom okHttpClient \n                 .build()\n                 .getAsJSONArray(new JSONArrayRequestListener() {\n                    @Override\n                    public void onResponse(JSONArray response) {\n                      // do anything with response\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                    // handle error\n                    }\n                });\n```\n### Making a conditional request (Building a request)\n```java\nANRequest.GetRequestBuilder getRequestBuilder = new ANRequest.GetRequestBuilder(ApiEndPoint.BASE_URL + ApiEndPoint.CHECK_FOR_HEADER);\n               \nif(isHeaderRequired){\n getRequestBuilder.addHeaders(\"token\", \"1234\");\n}\n\nif(executorRequired){\n getRequestBuilder.setExecutor(Executors.newSingleThreadExecutor());\n}\n               \nANRequest anRequest = getRequestBuilder.build();       \n                 \nanRequest.getAsJSONObject(new JSONObjectRequestListener() {\n    @Override\n    public void onResponse(JSONObject response) {\n      // do anything with response\n    }\n    @Override\n    public void onError(ANError error) {\n      // handle error\n    }\n});\n```\n### ConnectionClass Listener to get current network quality and bandwidth\n```java\n// Adding Listener\nAndroidNetworking.setConnectionQualityChangeListener(new ConnectionQualityChangeListener() {\n            @Override\n            public void onChange(ConnectionQuality currentConnectionQuality, int currentBandwidth) {\n              // do something on change in connectionQuality\n            }\n        });\n        \n// Removing Listener   \nAndroidNetworking.removeConnectionQualityChangeListener();\n\n// Getting current ConnectionQuality\nConnectionQuality connectionQuality = AndroidNetworking.getCurrentConnectionQuality();\nif(connectionQuality == ConnectionQuality.EXCELLENT) {\n  // do something\n} else if (connectionQuality == ConnectionQuality.POOR) {\n  // do something\n} else if (connectionQuality == ConnectionQuality.UNKNOWN) {\n  // do something\n}\n// Getting current bandwidth\nint currentBandwidth = AndroidNetworking.getCurrentBandwidth(); // Note : if (currentBandwidth == 0) : means UNKNOWN\n```\n### Getting Analytics of a request by setting AnalyticsListener on that\n```java\nAndroidNetworking.download(url,dirPath,fileName)\n                 .setTag(\"downloadTest\")\n                 .setPriority(Priority.MEDIUM)\n                 .build()\n                 .setAnalyticsListener(new AnalyticsListener() {\n                      @Override\n                      public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceived, boolean isFromCache) {\n                          Log.d(TAG, \" timeTakenInMillis : \" + timeTakenInMillis);\n                          Log.d(TAG, \" bytesSent : \" + bytesSent);\n                          Log.d(TAG, \" bytesReceived : \" + bytesReceived);\n                          Log.d(TAG, \" isFromCache : \" + isFromCache);\n                      }\n                  })\n                 .setDownloadProgressListener(new DownloadProgressListener() {\n                    @Override\n                    public void onProgress(long bytesDownloaded, long totalBytes) {\n                      // do anything with progress  \n                    }\n                 })\n                 .startDownload(new DownloadListener() {\n                    @Override\n                    public void onDownloadComplete() {\n                      // do anything after completion\n                    }\n                    @Override\n                    public void onError(ANError error) {\n                      // handle error    \n                    }\n                });  \nNote : If bytesSent or bytesReceived is -1 , it means it is unknown                \n```\n### Getting OkHttpResponse in Response\n```java\nAndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAnUserDetail/{userId}\")\n                .addPathParameter(\"userId\", \"1\")\n                .setTag(this)\n                .setPriority(Priority.LOW)\n                .setUserAgent(\"getAnUser\")\n                .build()\n                .getAsOkHttpResponseAndParsed(new TypeToken<User>() {\n                }, new OkHttpResponseAndParsedRequestListener<User>() {\n                    @Override\n                    public void onResponse(Response okHttpResponse, User user) {\n                      // do anything with okHttpResponse and user\n                    }\n                    @Override\n                    public void onError(ANError anError) {\n                      // handle error\n                    }\n                });\n```\n### Making Synchronous Request\n```java                \nANRequest request = AndroidNetworking.get(\"https://fierce-cove-29863.herokuapp.com/getAllUsers/{pageNumber}\")\n                        .addPathParameter(\"pageNumber\", \"0\")\n                        .addQueryParameter(\"limit\", \"3\")\n                        .build();\nANResponse<List<User>> response = request.executeForObjectList(User.class);\nif (response.isSuccess()) {\n   List<User> users = responseTwo.getResult();\n} else {\n   //handle error\n}                                        \n```\n### How caching works ?\n* First of all the server must send cache-control in header so that is starts working.\n* Response will be cached on the basis of cache-control max-age,max-stale.\n* If internet is connected and the age is NOT expired it will return from cache.\n* If internet is connected and the age is expired and if server returns 304(NOT MODIFIED) it will return from cache.\n* If internet is NOT connected if you are using getResponseOnlyIfCached() - it will return from cache even it date is expired.\n* If internet is NOT connected , if you are NOT using getResponseOnlyIfCached() - it will NOT return anything.\n* If you are using getResponseOnlyFromNetwork() , it will only return response after validation from server.\n* If cache-control is set, it will work according to the max-age,max-stale returned from server.\n* If internet is NOT connected only way to get cache Response is by using getResponseOnlyIfCached().\n\n### Enabling Logging\n```java\nAndroidNetworking.enableLogging(); // simply enable logging\nAndroidNetworking.enableLogging(LEVEL.HEADERS); // enabling logging with level\n```\n### Enabling GZIP From Client to Server\n```java\n// Enabling GZIP for Request (Not needed if your server doesn't support GZIP Compression), anyway responses \n// from server are automatically unGzipped if required. So enable it only if you need your request to be \n// Gzipped before sending to server(Make sure your server support GZIP Compression).\nOkHttpClient okHttpClient = new OkHttpClient().newBuilder()\n                .addInterceptor(new GzipRequestInterceptor())\n                .build();\nAndroidNetworking.initialize(getApplicationContext(),okHttpClient);                \n```\n### IMPORTANT NOTE\n* Use IMMEDIATE Priority with caution - use is at appropriate place only when\n  1 or 2 (at max 2)IMMEDIATE request is required at instant.Otherwise use HIGH Priority.\n* Known Bug : As present if you are using GZIP Interceptor from client to server, Upload progress\n  is not working perfectly in Multipart.\n  \n  If you are using Proguard with Gradle build system (which is usually the case), you don't have to do anything. The appropriate Proguard rules will be automatically applied. If you still need the rules applied in `proguard-rules.pro`, it is as follows:\n  ```\n  -dontwarn okio.**\n  ```\n\n  \n### Fast Android Networking Library supports\n\n* Fast Android Networking Library supports all types of HTTP/HTTPS request like GET, POST, DELETE, HEAD, PUT, PATCH\n* Fast Android Networking Library supports downloading any type of file\n* Fast Android Networking Library supports uploading any type of file (supports multipart upload)\n* Fast Android Networking Library supports cancelling a request\n* Fast Android Networking Library supports setting priority to any request (LOW, MEDIUM, HIGH, IMMEDIATE)\n* Fast Android Networking Library supports [RxJava](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)\n\nAs it uses [OkHttp](http://square.github.io/okhttp/) as a networking layer, it supports:\n\n* Fast Android Networking Library supports HTTP/2 support allows all requests to the same host to share a socket\n* Fast Android Networking Library uses connection pooling which reduces request latency (if HTTP/2 isn’t available)\n* Transparent GZIP shrinks download sizes\n* Fast Android Networking Library supports response caching which avoids the network completely for repeat requests\n\n### Difference over other Networking Library\n* In Fast Android Networking Library, OkHttpClient can be customized for every request easily — like timeout customization, etc. for each request.\n* As Fast Android Networking Library uses [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio), it is faster.\n* Single library for all type of networking.\n* Supports RxJava, RxJava2 -> [Check here](https://amitshekhariitbhu.github.io/Fast-Android-Networking/rxjava2_support.html)\n* Current bandwidth and connection quality can be obtained to decide logic of code.\n* Executor can be passed to any request to get the response in another thread.\n* Complete analytics of any request can be obtained.\n* All types of customization are possible.\n* Immediate Request really is immediate now.\n* Prefetching of any request can be done so that it gives instant data when required from the cache.\n* Proper request canceling.\n* Prevents cancellation of a request if it’s completed more than a specific threshold percentage.\n* A simple interface to make any type of request.\n* Proper Response Caching — which leads to reduced bandwidth usage. \n\n### TODO\n* Integration with other library\n* And of course many many features and bug fixes\n\n### CREDITS\n* [Square](https://square.github.io/) - As both [OkHttp](http://square.github.io/okhttp/) and [Okio](https://github.com/square/okio)\n  used by Fast Android Networking is developed by [Square](https://square.github.io/).\n* [Volley](https://android.googlesource.com/platform/frameworks/volley/) - As Fast Android Networking uses ImageLoader that is developed by [Volley](https://android.googlesource.com/platform/frameworks/volley/).  \n* [Prashant Gupta](https://github.com/PrashantGupta17) - For RxJava, RxJava2 Support - [RxJava Support](https://github.com/amitshekhariitbhu/Fast-Android-Networking/wiki/Using-Fast-Android-Networking-Library-With-RxJava)\n\n### Contact - Let's become friend\n- [Twitter](https://twitter.com/amitiitbhu)\n- [Github](https://github.com/amitshekhariitbhu)\n- [Medium](https://medium.com/@amitshekhar)\n- [Facebook](https://www.facebook.com/amit.shekhar.iitbhu)\n\n### License\n```\n   Copyright (C) 2024 Amit Shekhar\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n### Contributing to Fast Android Networking\nAll pull requests are welcome, make sure to follow the [contribution guidelines](CONTRIBUTING.md)\nwhen you submit pull request.\n\n"
        },
        {
          "name": "android-networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.666015625,
          "content": "/*\n *    Copyright (C) 2016 Amit Shekhar\n *    Copyright (C) 2011 Android Open Source Project\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.0.4'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    // App tools version\n    compileSdkVersion = 27\n    minSdkVersion = 14\n    targetSdkVersion = 27\n    buildToolsVersion = \"27.0.3\"\n\n    // App dependencies versions\n    okHttp3Version = \"3.10.0\"\n    gsonVersion = \"2.8.2\"\n    jacksonVersion = \"2.8.2\"\n    rxJavaVersion = \"1.3.8\"\n    rxJavaAndroidVersion = \"1.2.1\"\n    rxJava2Version = \"2.1.12\"\n    rxJava2AndroidVersion = \"2.0.2\"\n    jUnitVersion = \"4.12\"\n    mockWebServerVersion = \"3.10.0\"\n    supportAppCompatVersion = \"27.1.1\"\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.486328125,
          "content": "#\n#    Copyright (C) 2016 Amit Shekhar\n#    Copyright (C) 2011 Android Open Source Project\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n#\n\n# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jackson-android-networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "rx-android-networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "rx2-android-networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "rx2sampleapp",
          "type": "tree",
          "content": null
        },
        {
          "name": "rxsampleapp",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.8193359375,
          "content": "/*\n *    Copyright (C) 2016 Amit Shekhar\n *    Copyright (C) 2011 Android Open Source Project\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\ninclude ':app', ':android-networking', ':rx-android-networking', ':rxsampleapp', ':jackson-android-networking', ':rx2-android-networking', ':rx2sampleapp'\n"
        }
      ]
    }
  ]
}