{
  "metadata": {
    "timestamp": 1736708702414,
    "page": 135,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MinecraftForge/MinecraftForge",
      "stars": 6988,
      "defaultBranch": "1.21.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.595703125,
          "content": "* text eol=lf\n*.bat text eol=crlf\n*.patch text eol=lf\n*.java text eol=lf\n*.gradle text eol=crlf\n**/MANIFEST.MF text eol=crlf\n*.png binary\n*.gif binary\n*.exe binary\n*.dll binary\n*.jar binary\n*.lzma binary\n*.zip binary\n*.pyd binary\n*.cfg text eol=lf\n*.py text eol=lf\n*.jks binary\n\n# Disable autocrlf on generated files, they always generate with LF\nsrc/generated/**/.cache/cache text eol=lf\nsrc/generated/**/*.json text eol=lf\nsrc/generated_test/**/.cache/cache text eol=lf\nsrc/generated_test/**/*.json text eol=lf\n\n# We force eclipse to use unix line endings\nide/eclipse/template/.settings/*.prefs text eol=lf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.728515625,
          "content": "#eclipse\n**/bin\n**/.settings\n**/.classpath\n*.project\n\n#In case people make their workspace in the repo\n/eclipse/\n\n#idea\n/.idea\n/*/out\n/classes\n*.iml\n\n# We however WANT the ide folder as it has tempaltes/configs for developing Forge.\n!ide/**\n\n#gradle\n/build\n/.gradle\n/*/build\n/*/.gradle\n\n# Projects repo, either ignore it, or ignore patches.\n/projects/mcp/\n/projects/clean/\n/projects/forge/\n\n#occupational hazards\n/projects/**/build/\n/projects/**/out/\n/projects/**/run/\n/projects/**/*.launch\n/repo/\nsrc/*/generated/**/.cache/\n\n# Generated by gradle every import\n**/src/main/resources/META-INF/MANIFEST.MF\n/fmlloader/src/main/resources/forge_version.json\n\n/ForgeRoot.ipr\n/ForgeRoot.iws\n\n# APT stuff\n/*/.gitignore\n/*/.factorypath\n/*/.apt_generated/\n"
        },
        {
          "name": ".teamcity",
          "type": "tree",
          "content": null
        },
        {
          "name": "CREDITS.txt",
          "type": "blob",
          "size": 3.236328125,
          "content": "Minecraft Forge: Credits/Thank You\n\nForge is a set of tools and modifications to the Minecraft base game code to assist \nmod developers in creating new and exciting content. It has been in development for \nseveral years now, but I would like to take this time thank a few people who have \nhelped it along its way.\n\nFirst, the people who originally created the Forge projects way back in Minecraft \nalpha. Eloraam of RedPower, and SpaceToad of Buildcraft, without their acceptiance \nof me taking over the project, who knows what Minecraft modding would be today.\n\nSecondly, someone who has worked with me, and developed some of the core features\nthat allow modding to be as functional, and as simple as it is, cpw. For developing\nFML, which stabilized the client and server modding ecosystem. As well as the base\nloading system that allows us to modify Minecraft's code as elegently as possible.\n\nMezz, who has stepped up as the issue and pull request manager. Helping to keep me\nsane as well as guiding the community into creating better additions to Forge.\n\nSearge, Bspks, Fesh0r, ProfMobious, and all the rest over on the MCP team {of which \nI am a part}. For creating some of the core tools needed to make Minecraft modding \nboth possible, and as stable as can be.\n  On that note, here is some specific information of the MCP data we use:\n    * Minecraft Coder Pack (MCP) *\n      Forge Mod Loader and Minecraft Forge have permission to distribute and automatically \n      download components of MCP and distribute MCP data files. This permission is not \n      transitive and others wishing to redistribute the Minecraft Forge source independently\n      should seek permission of MCP or remove the MCP data files and request their users \n      to download MCP separately.\n      \nAnd lastly, the countless community members who have spent time submitting bug reports, \npull requests, and just helping out the community in general. Thank you.\n\n--LexManos\n\n=========================================================================\n\nThis is Forge Mod Loader.\n\nYou can find the source code at all times at https://github.com/MinecraftForge/MinecraftForge/tree/1.12.x/src/main/java/net/minecraftforge/fml\n\nThis minecraft mod is a clean open source implementation of a mod loader for minecraft servers\nand minecraft clients.\n\nThe code is authored by cpw.\n\nIt began by partially implementing an API defined by the client side ModLoader, authored by Risugami.\nhttps://www.minecraftforum.net/topic/75440-\nThis support has been dropped as of Minecraft release 1.7, as Risugami no longer maintains ModLoader.\n\nIt also contains suggestions and hints and generous helpings of code from LexManos, author of MinecraftForge.\nhttps://minecraftforge.net/\n\nAdditionally, it contains an implementation of topological sort based on that \npublished at http://keithschwarz.com/interesting/code/?dir=topological-sort\n\nIt also contains code from the Maven project for performing versioned dependency\nresolution. http://maven.apache.org/\n\nIt also contains a partial repackaging of the javaxdelta library from http://sourceforge.net/projects/javaxdelta/\nwith credit to it's authors.\n\nForge Mod Loader downloads components from the Minecraft Coder Pack\n(http://mcp.ocean-labs.de/index.php/Main_Page) with kind permission from the MCP team.\n\n"
        },
        {
          "name": "LICENSE-header.txt",
          "type": "blob",
          "size": 0.0888671875,
          "content": "Copyright (c) Forge Development LLC and contributors\nSPDX-License-Identifier: LGPL-2.1-only"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 27.08203125,
          "content": "Unless noted below, Minecraft Forge, Forge Mod Loader, and all \nparts herein are licensed under the terms of the LGPL 2.1 found\nhere http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt and \ncopied below.\n\nHomepage: http://minecraftforge.net/\n          https://github.com/MinecraftForge/MinecraftForge\n          \n\nA note on authorship:\nAll source artifacts are property of their original author, with\nthe exclusion of the contents of the patches directory and others\ncopied from it from time to time. Authorship of the contents of\nthe patches directory is retained by the Minecraft Forge project.\nThis is because the patches are partially machine generated\nartifacts, and are changed heavily due to the way forge works.\nIndividual attribution within them is impossible.\n\nConsent:\nAll contributions to Forge must consent to the release of any\npatch content to the Forge project.\n\nA note on infectivity:\nThe LGPL is chosen specifically so that projects may depend on Forge\nfeatures without being infected with its license. That is the \npurpose of the LGPL. Mods and others using this code via ordinary\nJava mechanics for referencing libraries are specifically not bound\nby Forge's license for the Mod code.\n\n\n=== MCP Data ===\nThis software includes data from the Minecraft Coder Pack (MCP), with kind permission\nfrom them. The license to MCP data is not transitive - distribution of this data by\nthird parties requires independent licensing from the MCP team. This data is not\nredistributable without permission from the MCP team.\n\n=== Sharing ===\nI grant permission for some parts of FML to be redistributed outside the terms of the LGPL, for the benefit of\nthe minecraft modding community. All contributions to these parts should be licensed under the same additional grant.\n\n-- Runtime patcher --\nLicense is granted to redistribute the runtime patcher code (src/main/java/net/minecraftforge/fml/common/patcher\nand subdirectories) under any alternative open source license as classified by the OSI (http://opensource.org/licenses)\n\n-- ASM transformers --\nLicense is granted to redistribute the ASM transformer code (src/main/java/net/minecraftforge/common/asm/ and subdirectories)\nunder any alternative open source license as classified by the OSI (http://opensource.org/licenses)\n\n=========================================================================\nThis software includes portions from the Apache Maven project at\nhttp://maven.apache.org/ specifically the ComparableVersion.java code. It is\nincluded based on guidelines at\nhttp://www.softwarefreedom.org/resources/2007/gpl-non-gpl-collaboration.html\nwith notices intact. The only change is a non-functional change of package name.\n\nThis software contains a partial repackaging of javaxdelta, a BSD licensed program for generating\nbinary differences and applying them, sourced from the subversion at http://sourceforge.net/projects/javaxdelta/\nauthored by genman, heikok, pivot.\nThe only changes are to replace some Trove collection types with standard Java collections, and repackaged.\n\nThis software includes the Monocraft font from https://github.com/IdreesInc/Monocraft/ for use in the early loading\ndisplay.\n=========================================================================\n\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.65625,
          "content": "import net.minecraftforge.forge.tasks.*\nimport net.minecraftforge.gradleutils.PomUtils\n\nplugins {\n    id 'net.minecraftforge.licenser' version '1.0.1'\n    id 'com.github.ben-manes.versions' version '0.46.0'\n    id 'net.minecraftforge.gradleutils' version '[2.3.0,2.4.0)'\n    id 'eclipse'\n    id 'de.undercouch.download' version '5.4.0'\n    id 'net.minecraftforge.gradle.patcher' version '[6.0.22,6.2)' apply false\n    id 'net.minecraftforge.gradle.mcp' version '[6.0.22,6.2)' apply false\n    id 'net.minecraftforge.gradlejarsigner' version '1.0.4'\n    id 'org.barfuin.gradle.taskinfo' version '2.1.0'\n}\n\nUtil.init() //Init all our extension methods!\n\next {\n    GIT_INFO = gradleutils.gitInfo\n    VERSION = gradleutils.getFilteredMCTagOffsetBranchVersion(true, '[0-9]', MC_VERSION)\n    FORGE_VERSION = VERSION.substring(MC_VERSION.length() + 1)\n}\n\nchangelog {\n    from '47.999'\n}\n\ntasks.register('setup') {\n    dependsOn ':forge:extractMapped'\n    if (findProject(':clean'))\n        dependsOn ':clean:extractMapped'\n}\n\ntasks.register('doChecks') {\n    dependsOn ':forge:checkJarCompatibility'\n    dependsOn ':forge:publish'\n}\n\nproject(':mcp') {\n    apply plugin: 'net.minecraftforge.gradle.mcp'\n    mcp {\n        config MC_VERSION + '-' + MCP_VERSION\n        pipeline = 'joined'\n    }\n}\n\nif (System.env.TEAMCITY_VERSION) {\n    //Only setup the CI environment if and only if the environment variables are set.\n    tasks.named('configureTeamCity').configure {\n        doLast {\n            println \"##teamcity[buildNumber '${project(':forge').version}']\"\n            println \"##teamcity[setParameter name='env.PUBLISHED_JAVA_ARTIFACT_VERSION' value='${project(':forge').version}']\"\n        }\n    }\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_clean.gradle",
          "type": "blob",
          "size": 1.8349609375,
          "content": "plugins {\n    id 'java-library'\n    id 'net.minecraftforge.gradle.patcher'\n}\n\nevaluationDependsOn(':mcp')\n\nrepositories {\n    mavenCentral()\n    maven gradleutils.forgeMaven\n    maven gradleutils.minecraftLibsMaven\n}\n    \njava.toolchain.languageVersion = JavaLanguageVersion.of(JAVA_VERSION)\n\ndependencies {\n\timplementation(libs.forgespi)\n}\n\npatcher {\n\tparent = project(':mcp')\n\tmcVersion = MC_VERSION\n\tpatchedSrc = file('src/main/java')\n\n\tmappings channel: MAPPING_CHANNEL, version: MAPPING_VERSION\n\n\truns {\n\t\tclean_client {\n\t\t\tclient true\n\t\t\ttaskName 'clean_client'\n\t\t\tideaModule \"${rootProject.name}.${project.name}.main\"\n\n\t\t\tmain 'net.minecraft.client.main.Main'\n\t\t\tworkingDirectory project.file('run/client')\n\n\t\t\targs '--gameDir', '.'\n\t\t\targs '--version', MC_VERSION\n\t\t\targs '--assetsDir', downloadAssets.output\n\t\t\targs '--assetIndex', '{asset_index}'\n\t\t\targs '--accessToken', '0'\n\t\t}\n\n\t\tclean_server {\n\t\t\tclient false\n\t\t\ttaskName 'clean_server'\n\t\t\tideaModule \"${rootProject.name}.${project.name}.main\"\n\n\t\t\tmain 'net.minecraft.server.Main'\n\t\t\tworkingDirectory project.file('run/server')\n\t\t}\n\t}\n}\n\ntasks.withType(JavaCompile).configureEach {\n    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation\n    options.warnings = false // Shutup deprecated for removal warnings\n}\n\neclipse.classpath.file.whenMerged {\n\t// Disable optional warnings on the minecraft decompiled source code. It just muddies the warning window and hides warnings in our own codebase\n\tdef src = entries.find { it.path == 'src/main/java' }\n    if (src == null) throw new IllegalStateException(\"You must run `setup` task before importing\")\n    src.entryAttributes['ignore_optional_problems'] = 'true'\n}\n\ntasks.named('genPatches').configure {\n    onlyIf { false }\n}\n\ntasks.named('extractRangeMap').configure {\n    onlyIf { false }\n    tool = 'net.minecraftforge:Srg2Source:8.1.0:fatjar'\n}"
        },
        {
          "name": "build_forge.gradle",
          "type": "blob",
          "size": 39.0576171875,
          "content": "import de.undercouch.gradle.tasks.download.Download\nimport net.minecraftforge.forge.tasks.checks.CheckATs\nimport net.minecraftforge.forge.tasks.checks.CheckExcs\nimport net.minecraftforge.forge.tasks.checks.CheckPatches\nimport net.minecraftforge.forge.tasks.checks.CheckSAS\nimport net.minecraftforge.forge.tasks.checks.CheckTask\n\nimport java.nio.file.Files\nimport net.minecraftforge.forge.tasks.*\nimport static net.minecraftforge.forge.tasks.Util.*\nimport net.minecraftforge.gradle.common.tasks.ApplyBinPatches\nimport net.minecraftforge.gradle.common.tasks.CheckJarCompatibility\nimport net.minecraftforge.gradle.common.tasks.DownloadMavenArtifact\nimport net.minecraftforge.gradle.common.tasks.ExtractInheritance\nimport net.minecraftforge.gradle.patcher.tasks.FilterNewJar\nimport net.minecraftforge.gradle.patcher.tasks.GeneratePatches\nimport net.minecraftforge.gradle.userdev.tasks.RenameJar\nimport org.apache.tools.ant.filters.ReplaceTokens\nimport org.objectweb.asm.Opcodes\n\nplugins {\n    id 'idea'\n    id 'eclipse'\n    id 'java-library'\n    id 'maven-publish'\n    id 'net.minecraftforge.licenser'\n    id 'de.undercouch.download'\n    id 'net.minecraftforge.gradleutils'\n    id 'net.minecraftforge.gradle.patcher'\n    id 'net.minecraftforge.gradlejarsigner'\n}\n\nUtil.init() //Init all our extension methods!\n\n// We depend on all other projects so that we can know their versions for userdev config\nrootProject.subprojects.each { sib -> if (sib != project) evaluationDependsOn(sib.path) }\n\napply from: rootProject.file('build_shared.gradle')\n\njava {\n    toolchain.languageVersion = JavaLanguageVersion.of(JAVA_VERSION)\n    withSourcesJar()\n}\n\njarSigner.autoDetect('forge')\n\napplyPatches {\n    level 'WARNING'\n    failOnError = UPDATING != 'true'\n    rejects = rootProject.layout.projectDirectory.dir('rejects').asFile\n}\n\nsourceSets {\n    main {\n        java {\n            srcDir \"$rootDir/src/main/java\"\n        }\n        resources {\n            srcDir \"$rootDir/src/main/resources\"\n            srcDir \"$rootDir/src/main/generated\"\n        }\n    }\n    test {\n        java {\n            srcDir \"$rootDir/src/test/java\"\n        }\n        resources {\n            srcDir \"$rootDir/src/test/resources\"\n            srcDir \"$rootDir/src/test/generated\"\n        }\n    }\n}\n\nfinal String SPEC_VERSION = gradleutils.gitInfo.tag\n\n// The new versioning sceme is <MCVersion>-<ForgeMC>.<RB>.<CommitsSinceRB>\n// ForgeMC is a unique identifier for every MC version we have supported.\n// Essentially, the same as the old, except dropping the first number, and the builds are no longer unique.\nfinal def MCP_ARTIFACT = project(':mcp').mcp.config.get()\n\nfinal List<File> EXTRA_TXTS = [\n        rootProject.file('CREDITS.txt'),\n        rootProject.file('LICENSE.txt'),\n        rootProject.tasks.createChangelog.outputFile\n]\n\next {\n    MAVEN_PATH = \"${group.toString().replace('.', '/')}/${project.name}/${VERSION}\".toString()\n}\nfinal String MAVEN_PATH = ext.MAVEN_PATH\n\nfinal String BINPATCH_TOOL = 'net.minecraftforge:binarypatcher:1.2.0:fatjar'\nfinal String INSTALLER_TOOLS = 'net.minecraftforge:installertools:1.4.3'\nfinal String FART = 'net.minecraftforge:ForgeAutoRenamingTool:1.0.6'\nfinal String S2S_TOOL = 'net.minecraftforge:Srg2Source:8.1.0:fatjar'\n\nconfigurations {\n    // Don't pull all libraries, if we're missing something, add it to the installer list so the installer knows to download it.\n    bootstrap  { transitive = false }\n    installer {\n        extendsFrom(bootstrap)\n        transitive = false\n    }\n    installerextra {\n        extendsFrom(bootstrap)\n        transitive = false\n    }\n    api.extendsFrom(installer)\n}\n\ndependencies {\n    // These need to actually be on the classpath at the start. This is only used for the server shim jar.\n    // And this is only needed because custom file systems are REQUIRED to be on the boot classloader.\n    // This has ASM/BootStrap/Unsafe all because I haven't gotten around to moving UnionFileSystem out to its own project.\n    bootstrap(libs.jarjar.fs)     // JarInJar file system\n    bootstrap(libs.bundles.jimfs) // In memory file system used for ForgeDev launches\n    bootstrap(libs.securemodules) // Has Union file system in it\n    bootstrap(libs.unsafe)        // Needed by securemodules\n    bootstrap(libs.bundles.asm)   // Needed by securemodules\n\n    implementation(libs.jopt.simple) { version { strictly '5.0.4' } }\n\n    installer(libs.bootstrap)\n    installer(libs.bootstrap.api) // Needed by securemodules\n    installer(libs.accesstransformers)\n    installer(libs.eventbus)\n    installer(libs.typetools) // Dep of EventBus\n    installer(libs.forgespi)\n    installer(libs.coremods)\n    installer(libs.nashorn) // Dep of Coremods\n    installer(libs.modlauncher)\n    installer(libs.mergetool.api)\n    installer(libs.bundles.night.config)\n    installer(libs.maven.artifact)\n    installer(libs.bundles.terminalconsoleappender)\n    installer(libs.mixin)\n    installer(libs.bundles.jarjar)\n\n    installer(project(':fmlcore'))\n    installer(project(':fmlloader'))\n    installer(project(':fmlearlydisplay'))\n    installer(project(':javafmllanguage'))\n    installer(project(':lowcodelanguage'))\n    installer(project(':mclanguage'))\n\n    installerextra(\"${MCP_ARTIFACT.group}:${MCP_ARTIFACT.name}:${MCP_ARTIFACT.version}:srg2off\")\n\n    runtimeOnly(libs.bootstrap)\n    runtimeOnly(libs.bootstrap.dev)\n}\n\ntasks.named('extractRangeMap').configure {\n    tool = S2S_TOOL\n}\n\npatcher {\n    excs.from file(\"$rootDir/src/main/resources/forge.exc\")\n    parent = project(':mcp')\n    mcVersion = MC_VERSION\n    mappings channel: MAPPING_CHANNEL, version: MAPPING_VERSION\n    patches = file(\"$rootDir/patches/minecraft\")\n    patchedSrc = file('src/main/java')\n    srgPatches = false\n    accessTransformers.from file(\"$rootDir/src/main/resources/META-INF/accesstransformer.cfg\")\n    sideAnnotationStrippers.from file(\"$rootDir/src/main/resources/forge.sas\")\n\n    runs {\n        forge_client {\n            property 'eventbus.checkTypesOnDispatch', 'true'\n            property 'org.lwjgl.system.SharedLibraryExtractDirectory', 'lwjgl_dll'\n\n            args '--launchTarget', 'forge_dev_client',\n                 '--username', 'Dev',\n                 '--version', project.name,\n                 '--accessToken', '0',\n                 '--userType', 'mojang',\n                 '--versionType', 'release',\n                 '--assetsDir', downloadAssets.output,\n                 '--assetIndex', \"{asset_index}\"\n        }\n\n        forge_client_test {\n            parent runs.forge_client\n            source sourceSets.test\n        }\n\n        forge_server {\n            args '--launchTarget', 'forge_dev_server'\n        }\n\n        forge_server_test {\n            parent runs.forge_server\n            source sourceSets.test\n        }\n\n        forge_server_gametest {\n            args '--launchTarget', 'forge_dev_server_gametest'\n            args '--uniqueWorld' // Unique world is used so that the world regenerates, as well as the world config isn't influenced by other runs\n        }\n\n        forge_server_gametest_test {\n            parent runs.forge_server_gametest\n            source sourceSets.test\n        }\n\n        forge_data {\n            args '--launchTarget', 'forge_dev_data',\n                 '--mod', 'forge',\n                 '--all',\n                 '--validate',\n                 '--output', rootProject.file('src/main/generated/'),\n                 '--validate',\n                 '--existing', sourceSets.main.resources.srcDirs[0],\n                 '--assetsDir', downloadAssets.output,\n                 '--assetIndex', \"{asset_index}\"\n        }\n\n        forge_data_test {\n            source sourceSets.test\n            args '--launchTarget', 'forge_dev_data',\n                 '--mod', '.+',\n                 '--all',\n                 '--validate',\n                 '--output', rootProject.file('src/test/generated/'),\n                 '--existing', sourceSets.main.resources.srcDirs[0],\n                 '--existing', sourceSets.test.resources.srcDirs[0],\n                 '--assetsDir', downloadAssets.output,\n                 '--assetIndex', \"{asset_index}\"\n        }\n\n        forge_client_data {\n            args '--launchTarget', 'forge_dev_client_data',\n                 '--mod', 'forge',\n                 '--all',\n                 '--validate',\n                 '--output', rootProject.file('src/main/generated/'),\n                 '--existing', sourceSets.main.resources.srcDirs[0],\n                 '--assetsDir', downloadAssets.output,\n                 '--assetIndex', \"{asset_index}\"\n        }\n\n        forge_client_data_test {\n            source sourceSets.test\n            args '--launchTarget', 'forge_dev',\n                 '--launchEntry', 'minecraft/net.minecraft.client.data.Main',\n                 '--launchData',\n                 '--mod', '.+',\n                 '--all',\n                 '--output', rootProject.file('src/test/generated/'),\n                 '--existing', sourceSets.main.resources.srcDirs[0],\n                 '--existing', sourceSets.test.resources.srcDirs[0],\n                 '--assetsDir', downloadAssets.output,\n                 '--assetIndex', \"{asset_index}\"\n        }\n    }\n}\n\nafterEvaluate {\n    if (!patcher.srgPatches) {\n        srg2mcpClean {\n            dependsOn = []\n            input = project(':mcp').setupMCP.output\n        }\n        userdevJar {\n            onlyIf = { t -> true }\n        }\n        def patches = project.file('build/genPatchesForUserdev/output/')\n        patches.mkdirs()\n        def genPatchesForUserdev = tasks.register('genPatchesForUserdev', GeneratePatches){\n            base = project(':mcp').setupMCP.output\n            modified = applyRangeMapBase.output\n            originalPrefix = genPatches.originalPrefix\n            modifiedPrefix = genPatches.modifiedPrefix\n            output = patches\n            autoHeader true\n            lineEnding = '\\n'\n        }\n        bakePatches {\n            dependsOn = []\n            input = genPatchesForUserdev.get().output\n        }\n    }\n}\n\ntasks.register('downloadCrowdin', Download) {\n    src 'https://files.minecraftforge.net/crowdin.zip'\n    dest file('build/crowdin.zip')\n    useETag 'all'\n    onlyIfModified true\n    quiet true\n}\n\ntasks.userdevConfig.configure {\n    configurations.installer.allDependencies.forEach {\n        def dep = it.toString()\n        if (it instanceof ProjectDependency)\n            dep = \"net.minecraftforge:$it.dependencyProject.name:$it.dependencyProject.version\"\n        libraries.add(dep)\n    }\n\n    inject = '' // We don't have a userdev sourceset anymore. Empty as a gradle workaround...\n    runs {\n        client {\n            environment 'MCP_MAPPINGS', '{mcp_mappings}'\n            property 'forge.enableGameTest', 'true'\n            args '--launchTarget', \"forge_userdev_client\"\n            args '--version', 'MOD_DEV'\n            args '--assetIndex', '{asset_index}'\n            args '--assetsDir', '{assets_root}'\n        }\n\n        clientData {\n            environment 'MCP_MAPPINGS', '{mcp_mappings}'\n            args '--launchTarget', \"forge_userdev_client_data\"\n            args '--assetIndex', '{asset_index}'\n            args '--assetsDir', '{assets_root}'\n        }\n\n        server {\n            environment 'MCP_MAPPINGS', '{mcp_mappings}'\n            property 'forge.enableGameTest', 'true'\n            args '--launchTarget', \"forge_userdev_server\"\n        }\n\n        gameTestServer {\n            environment 'MCP_MAPPINGS', '{mcp_mappings}'\n            args '--launchTarget', \"forge_userdev_server_gametest\"\n        }\n\n        data {\n            environment 'MCP_MAPPINGS', '{mcp_mappings}'\n            args '--launchTarget', \"forge_userdev_data\"\n            args '--assetIndex', '{asset_index}'\n            args '--assetsDir', '{assets_root}'\n        }\n    }\n}\n\nfor (def run in patcher.runs + tasks.userdevConfig.runs) {\n    if (run.parents) continue // We already added this to the parent run config\n    //run.property 'bsl.debug', 'true'\n    run.args '--gameDir', '.'\n    run.jvmArgs '-Djava.net.preferIPv6Addresses=system'\n    run.client run.name.contains('client')\n    run.main 'net.minecraftforge.bootstrap.ForgeBootstrap'\n}\n\nfor (def run : patcher.runs) {\n    def isTest = run.name.endsWith('_test')\n    run.taskName = run.name\n    run.workingDirectory file('run/' + run.name)\n    run.ideaModule rootProject.name + '.' + project.name + '.' + (isTest ? 'test' : 'main')\n    run.property 'bsl.debug', 'true'\n    run.property 'terminal.jline', 'true'\n    if (isTest) {\n        run.property 'forge.enableGameTest', 'true'\n        run.property 'forgedev.enableTestMods', 'true'\n    }\n}\n\ntasks.register('downloadVersionManifest', Download) {\n    src 'https://piston-meta.mojang.com/mc/game/version_manifest_v2.json'\n    dest file('build/versions/version_manifest.json')\n    useETag 'all'\n    onlyIfModified true\n    quiet true\n}\ntasks.register('downloadJson', Download) {\n    dependsOn downloadVersionManifest\n    inputs.file downloadVersionManifest.dest\n    src { downloadVersionManifest.dest.json.versions.find { it.id == MC_VERSION }.url }\n    dest file(\"build/versions/$MC_VERSION/version.json\")\n    useETag 'all'\n    onlyIfModified true\n    quiet true\n}\ntasks.register('downloadClientRaw', Download) {\n    dependsOn downloadJson\n    inputs.file downloadJson.dest\n    src { downloadJson.dest.json.downloads.client.url }\n    dest file(\"build/versions/$MC_VERSION/client.jar\")\n    useETag 'all'\n    onlyIfModified true\n    quiet true\n}\ntasks.register('downloadServerRaw', Download) {\n    dependsOn downloadJson\n    inputs.file downloadJson.dest\n    src { downloadJson.dest.json.downloads.server.url }\n    dest file(\"build/versions/$MC_VERSION/server-bundled.jar\")\n    useETag 'all'\n    onlyIfModified true\n    quiet true\n}\ntasks.register('extractServer', ExtractFile) {\n    dependsOn downloadServerRaw\n    input = downloadServerRaw.dest\n    target = \"META-INF/versions/$MC_VERSION/server-${MC_VERSION}.jar\"\n    output = file(\"build/versions/$MC_VERSION/server.jar\")\n}\ntasks.register('downloadLibraries', DownloadLibraries) {\n    dependsOn downloadJson\n    input = downloadJson.dest\n    output = rootProject.file('build/libraries/')\n}\ntasks.register('extractInheritance', ExtractInheritance) {\n    dependsOn downloadLibraries\n    tool = INSTALLER_TOOLS + ':fatjar'\n    args.add '--annotations'\n    input = genJoinedBinPatches.cleanJar\n    libraries.addAll downloadLibraries.librariesOutput.map { rf ->\n        Files.readAllLines(rf.asFile.toPath()).stream().map(File::new).toList()\n    }\n}\ntasks.register(\"findFinalizeSpawnTargets\", BytecodePredicateFinder) {\n    jar = createClientOfficial.output\n    output = rootProject.file('src/main/resources/coremods/finalize_spawn_targets.json')\n    predicate = {\n        parent, node, insn ->\n            return 'net/minecraft/world/level/BaseSpawner' != parent.name // Ignore this class as we special case it.\n            && insn.getOpcode().equals(Opcodes.INVOKEVIRTUAL)\n            && insn.name == 'finalizeSpawn'\n            && insn.desc == '(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/EntitySpawnReason;Lnet/minecraft/world/entity/SpawnGroupData;)Lnet/minecraft/world/entity/SpawnGroupData;';\n    }\n}\ntasks.register('validateDeprecations', ValidateDeprecations) {\n    input = tasks.jar.archiveFile\n    mcVersion = MC_VERSION\n}\ntasks.named('jar', Jar).configure {\n    finalizedBy 'validateDeprecations'\n}\ntasks.register(\"downloadInstaller\", DownloadMavenArtifact) {\n    artifact = \"net.minecraftforge:installer:2.2.+:fatjar\"\n    changing = true\n}\ntasks.register(\"downloadServerShim\", DownloadMavenArtifact) {\n    artifact = libs.bootstrap.shim.get().toString()\n    changing = true\n}\ntasks.register('downloadClientMappings', net.minecraftforge.gradle.common.tasks.JarExec) {\n    ext.output = file('build/client_mappings.tsrg')\n    tool = INSTALLER_TOOLS + ':fatjar'\n    args = ['--task', 'DOWNLOAD_MOJMAPS', '--sanitize', '--version', MC_VERSION, '--side', 'client', '--output', output.absolutePath]\n    outputs.file(output)\n}\ntasks.register('downloadServerMappings', net.minecraftforge.gradle.common.tasks.JarExec) {\n    ext.output = file('build/server_mappings.tsrg')\n    tool = INSTALLER_TOOLS + ':fatjar'\n    args = ['--task', 'DOWNLOAD_MOJMAPS', '--sanitize', '--version', MC_VERSION, '--side', 'server', '--output', output.absolutePath]\n    outputs.file(output)\n}\ntasks.register(\"createJoinedSRG\", DownloadMavenArtifact) {\n    artifact = \"net.minecraft:joined:${MC_VERSION}-${MCP_VERSION}:srg\"\n}\ntasks.register(\"createClientOfficial\", RenameJar) {\n    tool = FART + ':all'\n    args = ['--input', '{input}', '--output', '{output}', '--names', '{mappings}', '--ann-fix', '--ids-fix', '--src-fix', '--record-fix', '--strip-sigs', '--reverse']\n    mappings = downloadClientMappings.output\n    dependsOn(downloadClientRaw, downloadClientMappings)\n    input = downloadClientRaw.dest\n    output = file(\"build/createClientOfficial/output.jar\")\n}\ntasks.register(\"createServerOfficial\", RenameJar) {\n    tool = FART + ':all'\n    args = ['--input', '{input}', '--output', '{output}', '--names', '{mappings}', '--ann-fix', '--ids-fix', '--src-fix', '--record-fix', '--strip-sigs', '--reverse']\n    mappings = downloadServerMappings.output\n    dependsOn(downloadServerMappings)\n    input = extractServer.output\n    output = file(\"build/createServerOfficial/output.jar\")\n}\ntasks.named('genClientBinPatches').configure {\n    tool = BINPATCH_TOOL\n    cleanJar = createClientOfficial.output\n    dirtyJar = jar.archiveFile\n}\ntasks.named('genServerBinPatches').configure {\n    tool = BINPATCH_TOOL\n    cleanJar = createServerOfficial.output\n    dirtyJar = jar.archiveFile\n}\ntasks.named('genJoinedBinPatches').configure {\n    tool = BINPATCH_TOOL\n    cleanJar = createJoinedSRG.output\n}\ntasks.register('applyClientBinPatches', ApplyBinPatches) {\n    tool = BINPATCH_TOOL\n    clean = createClientOfficial.output\n    patch = genClientBinPatches.output\n    args.addAll(['--data', '--unpatched'])\n}\ntasks.register('applyServerBinPatches', ApplyBinPatches) {\n    tool = BINPATCH_TOOL\n    clean = createServerOfficial.output\n    patch = genServerBinPatches.output\n    args.addAll(['--data', '--unpatched'])\n}\ntasks.register('applyJoinedBinPatches', ApplyBinPatches) {\n    tool = BINPATCH_TOOL\n    clean = genJoinedBinPatches.cleanJar\n    patch = genJoinedBinPatches.output\n}\ntasks.register('createServerShimClasspath', BundleList) {\n    dependsOn(downloadServerRaw)\n    serverBundle = downloadServerRaw.dest\n}\ntasks.register('createServerShimConfig') {\n    ext.output = file('build/libs/bootstrap-shim.properties')\n    doLast {\n        var cfg = new CleanProperties()\n        cfg['Main-Class'] = 'net.minecraftforge.bootstrap.ForgeBootstrap'\n        cfg['Java-Version'] = '21'\n        cfg['Arguments'] = '--launchTarget forge_server'\n        cfg.store(output)\n    }\n}\ntasks.register('serverShimJar', Jar) {\n    dependsOn(createServerShimConfig)\n    from (createServerShimConfig.output)\n    from (createServerShimClasspath.output) {\n        rename { 'bootstrap-shim.list' }\n    }\n    from (zipTree(downloadServerShim.output))\n    manifest {\n        from {\n            zipTree(downloadServerShim.output).find { it.name == 'MANIFEST.MF' }\n        }\n\n        attributes('Class-Path': configurations.bootstrap.resolvedConfiguration.resolvedArtifacts.collect { \"libraries/${Util.getMavenInfoFromDep(it).path}\" }.join(' '))\n    }\n    archiveClassifier = 'shim'\n    jarSigner.sign(it)\n}\ntasks.register('checkAll') {\n    dependsOn 'checkLicenses'\n    group = 'checks'\n}\ntasks.register('checkAllAndFix') {\n    dependsOn 'findFinalizeSpawnTargets', 'checkLicenses'\n    group = 'checks'\n}\n\nCheckTask.registerTask(tasks, 'ATs', CheckATs) {\n    dependsOn extractInheritance, createSrg2Mcp\n    ats.from patcher.accessTransformers\n    inheritance = extractInheritance.output\n    mappings = createSrg2Mcp.output\n}\n\nCheckTask.registerTask(tasks, 'SAS', CheckSAS) {\n    dependsOn extractInheritance\n    sass.from patcher.sideAnnotationStrippers\n    inheritance = extractInheritance.output\n}\n\nCheckTask.registerTask(tasks, 'Excs', CheckExcs) {\n    dependsOn jar\n    binary = jar.archiveFile.get().asFile\n    excs.from patcher.excs\n}\n\nCheckTask.registerTask(tasks, 'Patches', CheckPatches) {\n    dependsOn 'genPatches'\n    patchDir = file(\"$rootDir/patches\")\n    patchesWithS2SArtifact = [\n            'minecraft/net/minecraft/client/renderer/ViewArea.java.patch',\n            'minecraft/net/minecraft/data/models/blockstates/Variant.java.patch',\n    ]\n}\n\ntasks.named('genPatches', GeneratePatches).configure {\n    finalizedBy checkAndFixPatches\n    autoHeader true\n    lineEnding = '\\n'\n}\n\ndef baseForgeVersionProperty = project.objects.property(String)\nbaseForgeVersionProperty.set(project.provider { TeamcityRequests.attemptFindBase(rootDir) ?: getLatestForgeVersion(MC_VERSION) })\nbaseForgeVersionProperty.finalizeValueOnRead()\nfinal jarCompatibilityTaskSetup = { Task task ->\n    task.group = 'jar compatibility'\n    task.onlyIf {\n        baseForgeVersionProperty.getOrNull() !== null\n    }\n}\n\ntasks.register('setupCheckJarCompatibility', SetupCheckJarCompatibility) {\n    inputVersion = baseForgeVersionProperty\n}\n\ntasks.register('applyBaseCompatibilityJarBinPatches', ApplyBinPatches) {\n    jarCompatibilityTaskSetup(it)\n\n    clean = project.tasks.createJoinedSRG.output\n    patch = project.tasks.named('setupCheckJarCompatibility').flatMap { it.baseBinPatchesOutput }\n    output = project.layout.buildDirectory.dir(name).map { it.file('output.jar') }\n}\n\ntasks.register('mergeBaseForgeJar', MergeJars) {\n    jarCompatibilityTaskSetup(it)\n\n    inputJars.from(project.tasks.named('applyBaseCompatibilityJarBinPatches').flatMap { it.output })\n    inputJars.from(baseForgeVersionProperty.map { inputVersion ->\n        def output = project.layout.buildDirectory.dir(name).map { it.file(\"forge-${inputVersion}-universal.jar\") }.get().asFile\n        project.rootProject.extensions.download.run {\n            src \"https://maven.minecraftforge.net/net/minecraftforge/forge/${inputVersion}/forge-${inputVersion}-universal.jar\"\n            dest output\n        }\n        return output\n    })\n}\n\ntasks.register('checkJarCompatibility', CheckJarCompatibility) {\n    jarCompatibilityTaskSetup(it)\n    dependsOn 'setupCheckJarCompatibility'\n\n    baseJar = project.tasks.named('mergeBaseForgeJar').flatMap { it.output }\n    baseLibraries.from(project.tasks.named('createJoinedSRG').flatMap { it.output })\n\n    inputJar = project.tasks.named('reobfJar').flatMap { it.output }\n\n    commonLibraries.from(project.configurations.minecraftImplementation)\n    commonLibraries.from(project.configurations.installer)\n}\n\ntasks.register('launcherJson', LauncherJson).configure {\n    json.putAll([\n        mainClass: 'net.minecraftforge.bootstrap.ForgeBootstrap',\n        arguments: [\n            game: [\n                '--launchTarget', 'forge_client'\n            ],\n            jvm: [\n                '-Djava.net.preferIPv6Addresses=system'\n            ]\n        ]\n    ] as LinkedHashMap)\n}\n\ntasks.register('installerJson', InstallerJson) {\n    icon = rootProject.file('icon.ico')\n\n    // Json to install into the client's launcher\n    dependsOn(launcherJson)\n    input.from(launcherJson.output)\n\n    // Download Official Mappings\n    dependsOn(downloadClientMappings, downloadServerMappings)\n    input.from(downloadClientMappings.output, downloadServerMappings.output)\n    // Get 'base' MC jar, Client is straight download, server is extracted from the bundle\n    dependsOn(downloadClientRaw, extractServer)\n    input.from(downloadClientRaw.dest, extractServer.output)\n    // Rename MC Jar\n    dependsOn(createClientOfficial, createServerOfficial)\n    input.from(createClientOfficial.output, createServerOfficial.output)\n    // Apply Binary patches to vanilla jar\n    dependsOn(applyClientBinPatches, applyServerBinPatches)\n    input.from(applyClientBinPatches.output, applyServerBinPatches.output, genClientBinPatches.toolJar)\n\n    doFirst {\n        var libs = libraries\n        String[] INSTALLER_TOOLS_CLASSPATH = getClasspath(project, libs, INSTALLER_TOOLS)\n        json.putAll([\n            _comment: launcherJson.json._comment,\n            hideExtract: true,\n            spec: 1,\n            profile: project.name,\n            version: launcherJson.json.id,\n            path: Util.getMavenInfoFromTask(tasks.serverShimJar).name,\n            minecraft: MC_VERSION,\n            serverJarPath: '{LIBRARY_DIR}/net/minecraft/server/{MINECRAFT_VERSION}/server-{MINECRAFT_VERSION}-bundled.jar',\n            data: [\n                MOJMAPS: [\n                    client: \"[net.minecraft:client:${MC_VERSION}:mappings@tsrg]\",\n                    server: \"[net.minecraft:server:${MC_VERSION}:mappings@tsrg]\"\n                ],\n                MOJMAPS_SHA: [\n                    client: \"'${downloadClientMappings.output.sha1}'\",\n                    server: \"'${downloadServerMappings.output.sha1}'\"\n                ],\n                MC_UNPACKED: [\n                    client: \"[net.minecraft:client:${MC_VERSION}]\",\n                    server: \"[net.minecraft:server:${MC_VERSION}:unpacked]\"\n                ],\n                MC_UNPACKED_SHA: [\n                    client: \"'${downloadClientRaw.dest.sha1}'\",\n                    server: \"'${extractServer.output.get().asFile.sha1}'\"\n                ],\n                MC_OFF: [\n                    client: \"[net.minecraft:client:${MC_VERSION}:official]\",\n                    server: \"[net.minecraft:server:${MC_VERSION}:official]\"\n                ],\n                MC_OFF_SHA: [\n                    client: \"'${createClientOfficial.output.get().asFile.sha1}'\",\n                    server: \"'${createServerOfficial.output.get().asFile.sha1}'\"\n                ],\n                BINPATCH: [\n                    client: '/data/client.lzma',\n                    server: '/data/server.lzma'\n                ],\n                PATCHED: [\n                    client: \"[${project.group}:${project.name}:${project.version}:client]\",\n                    server: \"[${project.group}:${project.name}:${project.version}:server]\"\n                ],\n                PATCHED_SHA: [\n                    client: \"'${applyClientBinPatches.output.get().asFile.sha1}'\",\n                    server: \"'${applyServerBinPatches.output.get().asFile.sha1}'\"\n                ]\n            ],\n            processors: [\n                [\n                    sides: ['server'],\n                    jar: INSTALLER_TOOLS,\n                    classpath: INSTALLER_TOOLS_CLASSPATH,\n                    args: [\n                        '--task', 'EXTRACT_FILES',\n                        '--archive', '{INSTALLER}',\n\n                        '--from', 'data/README.txt',\n                        '--to', '{ROOT}/README.txt',\n\n                        '--from', 'data/run.sh',\n                        '--to', '{ROOT}/run.sh',\n                        '--exec', '{ROOT}/run.sh',\n\n                        '--from', 'data/run.bat',\n                        '--to', '{ROOT}/run.bat',\n\n                        '--from', 'data/user_jvm_args.txt',\n                        '--to', '{ROOT}/user_jvm_args.txt',\n                        '--optional', '{ROOT}/user_jvm_args.txt',\n\n                        '--from', 'data/unix_args.txt',\n                        '--to', \"{ROOT}/libraries/${MAVEN_PATH}/unix_args.txt\",\n\n                        '--from', 'data/win_args.txt',\n                        '--to', \"{ROOT}/libraries/${MAVEN_PATH}/win_args.txt\"\n                    ]\n                ], [\n                    sides: ['server'],\n                    jar: INSTALLER_TOOLS,\n                    classpath: INSTALLER_TOOLS_CLASSPATH,\n                    args: [\n                        '--task', 'BUNDLER_EXTRACT',\n                        '--input', '{MINECRAFT_JAR}',\n                        '--output', '{ROOT}/libraries/',\n                        '--libraries'\n                    ]\n                ], [\n                    sides: ['server'],\n                    jar: INSTALLER_TOOLS,\n                    classpath: INSTALLER_TOOLS_CLASSPATH,\n                    args: [\n                        '--task', 'BUNDLER_EXTRACT',\n                        '--input', '{MINECRAFT_JAR}',\n                        '--output', '{MC_UNPACKED}',\n                        '--jar-only'\n                    ],\n                    outputs: [\n                        '{MC_UNPACKED}': '{MC_UNPACKED_SHA}'\n                    ]\n                ], [\n                    jar: INSTALLER_TOOLS,\n                    classpath: INSTALLER_TOOLS_CLASSPATH,\n                    args: [\n                        '--task', 'DOWNLOAD_MOJMAPS',\n                        '--sanitize',\n                        '--version', MC_VERSION,\n                        '--side', '{SIDE}',\n                        '--output', '{MOJMAPS}'\n                    ],\n                    outputs: [\n                        '{MOJMAPS}': '{MOJMAPS_SHA}'\n                    ]\n                ], [\n                    sides: ['server'],\n                    jar: FART,\n                    classpath: getClasspath(project, libs, FART),\n                    args: [\n                        '--input', '{MC_UNPACKED}',\n                        '--output', '{MC_OFF}',\n                        '--names', '{MOJMAPS}',\n                        '--ann-fix', '--ids-fix', '--src-fix', '--record-fix', '--strip-sigs', '--reverse'\n                    ],\n                    outputs: [\n                        '{MC_OFF}': '{MC_OFF_SHA}'\n                    ]\n                ], [\n                    sides: ['client'],\n                    jar: FART,\n                    classpath: getClasspath(project, libs, FART),\n                    args: [\n                        '--input', '{MINECRAFT_JAR}',\n                        '--output', '{MC_OFF}',\n                        '--names', '{MOJMAPS}',\n                        '--ann-fix', '--ids-fix', '--src-fix', '--record-fix', '--strip-sigs', '--reverse'\n                    ],\n                    outputs: [\n                        '{MC_OFF}': '{MC_OFF_SHA}'\n                    ]\n                ], [\n                    jar: BINPATCH_TOOL.rsplit(':', 1)[0], // remove :fatjar\n                    classpath: getClasspath(project, libs, BINPATCH_TOOL.rsplit(':', 1)[0]),\n                    args: [\n                        '--clean', '{MC_OFF}',\n                        '--output', '{PATCHED}',\n                        '--apply', '{BINPATCH}',\n                        '--data', '--unpatched'\n                    ],\n                    outputs: [\n                        '{PATCHED}': '{PATCHED_SHA}'\n                    ]\n                ]\n            ]\n        ] as LinkedHashMap)\n        getClasspath(project, libs, MCP_ARTIFACT.descriptor) //Tell it to download mcp_config\n    }\n}\n\ntasks.register('officialClassesOnly', Zip).configure {\n    dependsOn(jar)\n    destinationDirectory = file('build/libs')\n    archiveClassifier = 'official-classes'\n    from zipTree(jar.archiveFile).matching {\n        include '**/*.class'\n        exclude 'mcp/**'\n    }\n}\n\ntasks.named('filterJarNew').configure {\n    dependsOn('officialClassesOnly')\n    input = officialClassesOnly.archiveFile\n}\n\ntasks.register('filterJarNewSRG', FilterNewJar).configure {\n    input = reobfJar.output\n    srg = filterJarNew.srg\n    blacklist = filterJarNew.blacklist\n}\n\ntasks.named('universalJar').configure {\n    dependsOn downloadCrowdin\n    from zipTree(downloadCrowdin.dest).matching {\n        include 'assets/forge/lang/*.json'\n    }\n\n    from(EXTRA_TXTS)\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n    exclude '.cache'\n\n    manifest {\n        attributes([\n            'Automatic-Module-Name': 'net.minecraftforge.forge'\n        ] as LinkedHashMap)\n        attributes([\n            'Specification-Title':   'Forge',\n            'Specification-Vendor':  'Forge Development LLC',\n            'Specification-Version':  SPEC_VERSION,\n            'Implementation-Title':   project.group,\n            'Implementation-Vendor': 'Forge Development LLC',\n            'Implementation-Version': FORGE_VERSION\n        ] as LinkedHashMap, 'net/minecraftforge/versions/forge/')\n        attributes([\n            'Specification-Title':   'Minecraft',\n            'Specification-Vendor':  'Forge Development LLC',\n            'Specification-Version':  MC_VERSION,\n            'Implementation-Title':  'MCP',\n            'Implementation-Vendor': 'Forge Development LLC',\n            'Implementation-Version': MCP_VERSION\n        ] as LinkedHashMap, 'net/minecraftforge/versions/mcp/')\n    }\n    jarSigner.sign(it)\n}\n\ntasks.register('universalJarSrg', Jar).configure {\n    from zipTree(filterJarNewSRG.output)\n    duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n    from zipTree(universalJar.archiveFile)\n    destinationDirectory = file('build/libs')\n    archiveClassifier = 'universal-srg'\n    manifest.from(universalJar.manifest)\n    jarSigner.sign(it)\n}\n\ntasks.named('userdevConfig').configure {\n    universal = \"$project.group:$project.name:$project.version:universal-srg@jar\"\n}\n\ntasks.register('installerJar', InstallerJar) {\n    fat = !System.env.TEAMCITY_VERSION\n    //offline = true\n    from(EXTRA_TXTS)\n    from(rootProject.file('/forge_installer_logo.png')) {\n        rename { 'big_logo.png' }\n    }\n    from(genClientBinPatches.output) {\n        rename { 'data/client.lzma' }\n    }\n    from(genServerBinPatches.output) {\n        rename { 'data/server.lzma' }\n    }\n\n    final var argsFile = rootProject.file('server_files/args.txt')\n    final Map<String, Map<String, String>> tokens = [tokens: [\n            SHIM_JAR_FILE: serverShimJar.archiveFileName.get(),\n            MAVEN_PATH: MAVEN_PATH\n    ]]\n    from(argsFile) {\n        filter(tokens, ReplaceTokens)\n        into 'data'\n        rename { 'unix_args.txt' }\n    }\n    from(argsFile) {\n        filter(tokens, ReplaceTokens)\n        into 'data'\n        rename { 'win_args.txt' }\n    }\n\n    from(rootProject.file('server_files')) {\n        filter(tokens, ReplaceTokens)\n        into 'data'\n        exclude 'args.txt'\n    }\n\n    jarSigner.sign(it)\n}\n\ntasks.register('mdkZip', Zip) {\n    archiveBaseName = project.name\n    archiveClassifier = 'mdk'\n    archiveVersion = project.version\n    destinationDirectory = file('build/libs')\n\n    from rootProject.file('gradlew')\n    from rootProject.file('gradlew.bat')\n    from(EXTRA_TXTS)\n    from(rootProject.file('gradle/')){\n        into('gradle/')\n    }\n    from(rootProject.file('mdk/')){\n        rootProject.file('mdk/gitignore.txt').eachLine{\n            if (!it.trim().isEmpty() && !it.trim().startsWith('#'))\n                exclude it\n        }\n        filter(ReplaceTokens, tokens: [\n            FORGE_VERSION: FORGE_VERSION,\n            FORGE_GROUP: project.group,\n            FORGE_NAME: project.name,\n            MC_VERSION: MC_VERSION,\n            MAPPING_CHANNEL: MAPPING_CHANNEL,\n            MAPPING_VERSION: MAPPING_VERSION,\n            FORGE_SPEC_VERSION: SPEC_VERSION.split(\"\\\\.\")[0],\n            MC_NEXT_VERSION: MC_NEXT_VERSION\n        ])\n        rename 'gitignore\\\\.txt', '.gitignore'\n        rename 'gitattributes\\\\.txt', '.gitattributes'\n    }\n    from(rootProject.file('src/test/java/com/example/examplemod/')) {\n        into('src/main/java/com/example/examplemod/')\n    }\n    from(rootProject.file('src/test/generated/mdk_datagen/')) {\n        into('src/main/resources/')\n        exclude '**/.cache/'\n    }\n}\n\nlicense {\n    header = file(\"$rootDir/LICENSE-header.txt\")\n\n    include 'net/minecraftforge/'\n    exclude 'net/minecraftforge/common/LenientUnboundedMapCodec.java'\n\n    tasks {\n        main {\n            files.from files(\"$rootDir/src/main/java\")\n        }\n        test {\n            files.from files(\"$rootDir/src/test/java\")\n        }\n    }\n}\n\ntasks.register('genAllData') {\n    dependsOn 'forge_data', 'forge_test_data'\n}\n\nif (project.hasProperty('UPDATE_MAPPINGS')) {\n    extractRangeMap {\n        sources.from sourceSets.test.java.srcDirs\n        addDependencies compileTestJava.classpath\n    }\n    applyRangeMap {\n        sources.from sourceSets.test.java.srcDirs\n    }\n    sourceSets.test.java.srcDirs.each { extractMappedNew.addTarget it }\n}\n\ntasks.named('javadoc', Javadoc).configure {\n    description 'Generates the combined javadocs for the FML projects and the main Forge project'\n    var includedProjects = [ ':fmlcore', ':fmlloader', ':javafmllanguage', ':mclanguage' ]\n    source includedProjects.collect { project(it).sourceSets.main.allJava }\n    classpath = classpath + files(includedProjects.collect { project(it).sourceSets.main.compileClasspath })\n\n    var docsDir = rootProject.file('src/docs/')\n    inputs.dir(docsDir)\n        .withPropertyName('docs resources directory')\n        .withPathSensitivity(PathSensitivity.RELATIVE)\n        .optional()\n\n    failOnError = false\n\n    // Exclude the Minecraft classes if not enabled\n    if (!project.hasProperty('generateAllDocumentation')) {\n        exclude 'net/minecraft/**'\n        exclude 'com/mojang/**'\n    }\n    exclude 'mcp/**'\n\n    options.addStringOption('Xdoclint:all,-missing', '-public')\n    options {\n        stylesheetFile = new File(docsDir, 'stylesheet.css')\n\n        tags = [\n            'apiNote:a:<em>API Note:</em>',\n            'implSpec:a:<em>Implementation Requirements:</em>',\n            'implNote:a:<em>Implementation Note:</em>'\n        ]\n\n        groups = [\n            'Forge Mod Loader': [\n                'net.minecraftforge.fml.common.asm*',\n                'net.minecraftforge.fml.loading*',\n                'net.minecraftforge.fml.server*'\n            ],\n            'FML Core':  [\n                'net.minecraftforge.fml',\n                'net.minecraftforge.fml.config*',\n                'net.minecraftforge.fml.event*',\n                'net.minecraftforge.fml.util*'\n            ],\n            'FML Common': [\n                'net.minecraftforge.fml.core',\n                'net.minecraftforge.fml.event.config',\n                'net.minecraftforge.fml.event.lifecycle'\n            ],\n            'FML Java/MC Language Providers': [\n                'net.minecraftforge.fml.common',\n                'net.minecraftforge.fml.javafmlmod',\n                'net.minecraftforge.fml.mclanguageprovider'\n            ],\n            'Minecraft Forge API': [\n                'net.minecraftforge*'\n            ]\n        ]\n\n        author = false\n        noSince = true\n        noHelp = true\n\n        bottom = \"Minecraft Forge is an open source modding API for Minecraft: Java Edition, licensed under the Lesser GNU General Public License, version 2.1.\"\n        windowTitle = \"Minecraft Forge API ${VERSION}\"\n        docTitle = \"Minecraft Forge API - ${FORGE_VERSION} for Minecraft ${MC_VERSION}\"\n        header = \"<div style=\\\"margin-top: 9px;padding: 5px 6px;\\\"><strong>${FORGE_VERSION} for Minecraft ${MC_VERSION}</strong></div>\"\n    }\n\n    doLast {\n        project.copy {\n            from docsDir\n            exclude '/stylesheet.css'\n            into destinationDir\n        }\n    }\n}\n\npublishing {\n    publications.register('mavenJava', MavenPublication).configure {\n        artifact universalJar\n        artifact universalJarSrg\n        artifact installerJar\n        artifact mdkZip\n        artifact userdevJar\n        artifact sourcesJar\n        artifact serverShimJar\n\n        artifactId = project.name\n        pom {\n            name = project.name\n            description = 'Modifactions to Minecraft to enable mod developers.'\n            url = 'https://github.com/MinecraftForge/MinecraftForge'\n            gradleutils.pom.setGitHubDetails(pom, 'MinecraftForge')\n            license gradleutils.pom.Licenses.LGPLv2_1\n        }\n    }\n\n    repositories {\n        maven gradleutils.publishingForgeMaven\n    }\n}\n\n// Make sure we run bin compat checking during local testing.\nif ((!System.env.MAVEN_USER || !System.env.MAVEN_PASSWORD) && CHECK_COMPATIBILITY == \"true\")\n    tasks.named('publish').configure { dependsOn(':forge:checkJarCompatibility') }\n"
        },
        {
          "name": "build_shared.gradle",
          "type": "blob",
          "size": 3.0380859375,
          "content": "import net.minecraftforge.forge.tasks.CleanProperties\n\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'net.minecraftforge.gradleutils'\n\ngroup = 'net.minecraftforge'\nversion = VERSION\nprintln(\"Version: $version\")\n\nrepositories {\n    mavenCentral()\n    maven gradleutils.forgeMaven\n    maven gradleutils.minecraftLibsMaven\n    //mavenLocal()\n}\n\ntasks.withType(Javadoc).configureEach {\n    options.tags = [\n        'apiNote:a:<em>API Note:</em>',\n        'implSpec:a:<em>Implementation Requirements:</em>',\n        'implNote:a:<em>Implementation Note:</em>'\n    ]\n    options.addStringOption('Xdoclint:all,-missing', '-public')\n}\n\n// We need to write the manifest to the binary file so we have properly versioned packaged at dev time.\ntasks.register('writeManifest') {\n    doLast {\n        if (plugins.findPlugin('net.minecraftforge.gradle.patcher')) // Forge project\n            universalJar.manifest.writeTo(rootProject.file('src/main/resources/META-INF/MANIFEST.MF'))\n        else\n            jar.manifest.writeTo(project.file('src/main/resources/META-INF/MANIFEST.MF'))\n    }\n}\n\ntasks.register('generateResources') {\n    dependsOn('writeManifest')\n}\n\n// Make sure out manifests get written before compiling the code, IDEA calls this task if you tell it to use the gradle build.\ntasks.withType(JavaCompile).configureEach {\n    dependsOn 'generateResources'\n    dependsOn 'processResources' // Needed because we merge the output of this with the output of the compile task. And gradle detects downstream tasks using the output without a hard dep\n    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation\n    options.warnings = false // Shutup deprecated for removal warnings\n    options.forkOptions.jvmArgs += '-Xmx3G' // Needed to make compiling faster, and not run out of heap space in some cases.\n}\n\n// Merge the resources and classes into the same directory. We'll need to split them at runtime because\n// Minecraft and Forge are in the same sourceSet as they are inter dependent.. for now..\nsourceSets.each {\n    def dir = layout.buildDirectory.dir(\"classes/java/$it.name\")\n    it.output.resourcesDir = dir\n    it.java.destinationDirectory = dir\n}\n\ntasks.register('copyEclipseSettings') {\n    doLast {\n        rootProject.fileTree('ide/eclipse/template/.settings/').matching { include '**/*.prefs' }.each { file ->\n            def target = project.file('.settings/' + file.name)\n            def temp = new CleanProperties().load(file)\n            def exst = new CleanProperties().load(target)\n            exst.put('eclipse.preferences.version', '1')\n            exst.putAll(temp)\n            exst.store(target)\n        }\n    }\n}\n\n// TODO: [Gradle][IntelliJ] Auto trigger these tasks on import.\neclipse {\n    // Run everytime eclipse builds the code\n    //autoBuildTasks writeManifest\n    // Run when importing the project\n    synchronizationTasks generateResources, copyEclipseSettings, eclipseClasspath, eclipseProject\n}\n\nidea {\n    module {\n        // IntelliJ IDEA does not do this by itself anymore...\n        downloadJavadoc = true\n        downloadSources = true\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmlcore",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmlearlydisplay",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmlloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "forge_installer_logo.png",
          "type": "blob",
          "size": 2.4150390625,
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.583984375,
          "content": "# Sets default memory used for gradle commands. Can be overridden by user or command line properties.\n# This is required to provide enough memory for the Minecraft decompilation process.\norg.gradle.jvmargs=-Xmx3G\norg.gradle.daemon=false\norg.gradle.parallel=true\n\nJAVA_VERSION=21\nMC_VERSION=1.21.4\nMC_NEXT_VERSION=1.22\nMCP_VERSION=20241203.143248\nMAPPING_CHANNEL=official\nMAPPING_VERSION=1.21.4\n\n// Set to true before the first build of a new MC version, so we don't do compatibility checks\nCHECK_COMPATIBILITY=false\n// Set to true to allow for fuzzy patching. Useful during updateing\nUPDATING=false"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.296875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "icon.ico",
          "type": "blob",
          "size": 7.232421875,
          "content": null
        },
        {
          "name": "ide",
          "type": "tree",
          "content": null
        },
        {
          "name": "javafmllanguage",
          "type": "tree",
          "content": null
        },
        {
          "name": "lowcodelanguage",
          "type": "tree",
          "content": null
        },
        {
          "name": "mclanguage",
          "type": "tree",
          "content": null
        },
        {
          "name": "mdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "server_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 6.6875,
          "content": "pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        //mavenLocal()\n        maven { url = 'https://maven.minecraftforge.net/' }\n    }\n}\n\nbuildscript {\n    dependencies {\n        classpath('com.google.code.gson:gson') {\n            version {\n                strictly '2.10.1'\n            }\n        }\n    }\n}\n\nplugins {\n    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.7.0'\n}\n\ndependencyResolutionManagement {\n    versionCatalogs {\n        libs {\n            plugin('apt', 'com.diffplug.eclipse.apt').version('4.2.0')\n\n            library('forgespi', 'net.minecraftforge:forgespi:7.1.5') // Needs modlauncher\n            library('modlauncher', 'net.minecraftforge:modlauncher:10.2.3') // Needs securemodules\n            library('securemodules', 'net.minecraftforge:securemodules:2.2.21') // Needs unsafe\n            library('unsafe', 'net.minecraftforge:unsafe:0.9.2')\n            library('accesstransformers', 'net.minecraftforge:accesstransformers:8.2.1')\n            library('coremods', 'net.minecraftforge:coremods:5.2.4')\n            library('nashorn', 'org.openjdk.nashorn:nashorn-core:15.4') // Needed by coremods, because the JRE no longer ships JS\n            library('eventbus', 'net.minecraftforge:eventbus:6.2.15')\n            library('typetools', 'net.jodah:typetools:0.6.3') // Needed by EventBus because of lambdas\n            library('mergetool-api', 'net.minecraftforge:mergetool-api:1.0')\n\n            library('mixin', 'org.spongepowered:mixin:0.8.7')\n            library('nulls', 'org.jetbrains:annotations:24.1.0') // Got to have our null annotations!\n            library('slf4j-api', 'org.slf4j:slf4j-api:2.0.7')\n            library('maven-artifact', 'org.apache.maven:maven-artifact:3.8.5')\n\n            // Google's InMemory File System. Used by ForgeDev Tests for now, but could be useful for a lot of things.\n            library('jimfs', 'com.google.jimfs:jimfs:1.3.0')\n            bundle('jimfs', ['guava', 'failureaccess'])\n\n            version('bootstrap', '2.1.8')\n            library('bootstrap',      'net.minecraftforge', 'bootstrap'     ).versionRef('bootstrap') // Needs modlauncher\n            library('bootstrap-api',  'net.minecraftforge', 'bootstrap-api' ).versionRef('bootstrap')\n            library('bootstrap-dev',  'net.minecraftforge', 'bootstrap-dev' ).versionRef('bootstrap')\n            library('bootstrap-shim', 'net.minecraftforge', 'bootstrap-shim').versionRef('bootstrap')\n\n            // ASM it's used for so many of our hacks\n            version('asm', '9.7.1')\n            library('asm',          'org.ow2.asm', 'asm'         ).versionRef('asm')\n            library('asm-tree',     'org.ow2.asm', 'asm-tree'    ).versionRef('asm')\n            library('asm-util',     'org.ow2.asm', 'asm-util'    ).versionRef('asm')\n            library('asm-commons',  'org.ow2.asm', 'asm-commons' ).versionRef('asm')\n            library('asm-analysis', 'org.ow2.asm', 'asm-analysis').versionRef('asm')\n            bundle('asm', ['asm', 'asm-tree', 'asm-util', 'asm-commons', 'asm-analysis'])\n\n            // Terminal Console Appender.. essentually make pretty colors in the console, but it's been a PITA\n            library('terminalconsoleappender', 'net.minecrell:terminalconsoleappender:1.2.0')\n            version('jline', '3.25.1')\n            library('jline-reader',       'org.jline', 'jline-reader'      ).versionRef('jline')\n            library('jline-terminal',     'org.jline', 'jline-terminal'    ).versionRef('jline')\n            library('jline-terminal-jna', 'org.jline', 'jline-terminal-jna').versionRef('jline') // Colors and tab completeion\n            bundle('terminalconsoleappender', ['terminalconsoleappender', 'jline-reader', 'jline-terminal', 'jline-terminal-jna'])\n\n            // The core of our configuration system, it has many flaws, but it works for the most part\n            version('night-config', '3.7.3')\n            library('night-config-toml', 'com.electronwill.night-config', 'toml').versionRef('night-config')\n            library('night-config-core', 'com.electronwill.night-config', 'core').versionRef('night-config')\n            bundle('night-config', ['night-config-toml', 'night-config-core'])\n\n            // Jar in Jar FileSystem\n            version('jarjar', '0.3.26')\n            library('jarjar-fs',       'net.minecraftforge', 'JarJarFileSystems').versionRef('jarjar')\n            library('jarjar-meta',     'net.minecraftforge', 'JarJarMetadata'   ).versionRef('jarjar')\n            library('jarjar-selector', 'net.minecraftforge', 'JarJarSelector'   ).versionRef('jarjar')\n            bundle('jarjar', ['jarjar-fs', 'jarjar-selector', 'jarjar-meta'])\n\n            // These are libraries shipped by the MC launcher, try and keep them in sync with the manifest\n            // but honestly if we don't it just means we ship them as normal libraries by adding them to the installer config in the forge project\n            library('gson', 'com.google.code.gson:gson:2.10.1')\n            library('guava', 'com.google.guava:guava:32.1.2-jre')\n            library('failureaccess', 'com.google.guava:failureaccess:1.0.1')\n\n            version('log4j', '2.22.1')\n            library('log4j-api',  'org.apache.logging.log4j', 'log4j-api' ).versionRef('log4j')\n            library('log4j-core', 'org.apache.logging.log4j', 'log4j-core').versionRef('log4j')\n            bundle('log4j', ['log4j-api', 'log4j-core'])\n\n            library('apache-commons', 'org.apache.commons:commons-lang3:3.14.0')\n            library('mojang-logging', 'com.mojang:logging:1.2.7')\n            library('jopt-simple', 'net.sf.jopt-simple:jopt-simple:5.0.4')\n            library('commons-io', 'commons-io:commons-io:2.15.1')\n\n            version('lwjgl', '3.3.3')\n            library('lwjgl',        'org.lwjgl', 'lwjgl'       ).versionRef('lwjgl')\n            library('lwjgl-glfw',   'org.lwjgl', 'lwjgl-glfw'  ).versionRef('lwjgl')\n            library('lwjgl-opengl', 'org.lwjgl', 'lwjgl-opengl').versionRef('lwjgl')\n            library('lwjgl-stb',    'org.lwjgl', 'lwjgl-stb'   ).versionRef('lwjgl')\n            library('lwjgl-tinyfd', 'org.lwjgl', 'lwjgl-tinyfd').versionRef('lwjgl')\n            bundle('lwjgl', ['lwjgl', 'lwjgl-glfw', 'lwjgl-opengl', 'lwjgl-stb', 'lwjgl-tinyfd'])\n        }\n    }\n}\n\nrootProject.name = 'ForgeRoot'\n\ninclude 'fmlloader'\ninclude 'fmlcore'\ninclude 'mclanguage'\ninclude 'javafmllanguage'\ninclude 'lowcodelanguage'\ninclude 'fmlearlydisplay'\n\ninclude ':mcp'\nproject(\":mcp\").projectDir = file(\"projects/mcp\")\n\ninclude ':forge'\nproject(\":forge\").projectDir = file(\"projects/forge\")\nproject(':forge').buildFileName = '../../build_forge.gradle'\n\nif (!System.env.TEAMCITY_VERSION) {\n    include ':clean'\n    project(':clean').projectDir = file('projects/clean')\n    project(':clean').buildFileName = '../../build_clean.gradle'\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}