{
  "metadata": {
    "timestamp": 1736708786723,
    "page": 282,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alibaba/freeline",
      "stars": 5477,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0302734375,
          "content": "*.groovy linguist-language=Java"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.068359375,
          "content": "*.iml\n.gradle\nlocal.properties\n.DS_Store\nbuild/\ncaptures/\n.idea/\n*.pyc"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4384765625,
          "content": "Copyright (c) 2016, Alibaba\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of freeline nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 6.37109375,
          "content": "# Freeline\n\n![Freeline](http://ww4.sinaimg.cn/large/006tNc79gw1f6ooza8pkuj30h804gjrk.jpg)\n\n[![Release Version](https://img.shields.io/badge/release-0.8.8-red.svg)](https://github.com/alibaba/freeline/releases) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/alibaba/freeline/blob/master/LICENSE) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/alibaba/freeline/pulls)\n\nFreeline 是 Android 平台上的秒级编译方案，Instant Run 的替代品，也可以从 [Freeline 官方主页](https://www.freelinebuild.com/)来获取更多的信息。\n\nFreeline 由[蚂蚁聚宝](https://www.antfortune.com/) Android 团队开发，它可以充分利用缓存文件，在几秒钟内迅速地对代码的改动进行编译并部署到设备上，有效地减少了日常开发中的大量重新编译与安装的耗时。\n\nFreeline能够为Android开发者节省很多喝杯咖啡的时间 : )\n\n## Freeline Insights\nFreeline 将整个编译过程拆分成多个小模块，根据模块间的依赖关系并发进行编译任务。它可以对所有编译缓存文件做到充分地利用，真正地做到了“增量”编译。同时，它也提取了 buck 的部分组件（dx 与 DexMerger），来加速构建流程。Freeline 会在 app 运行时启动一条独立进程来运行 Socket Server 以进行开发机与 app 的通信，同时也能确保即使在 app 出现 crash 之后，仍然能够使增量编译持续生效。\n\nFreeline 是通过 multi-dex 的方案来实现 Java 代码的增量更新的。与此同时，我们也专门对 aapt 工具做了深度优化，给出了独立的 FreelineAapt 资源打包工具用来生成增量的资源包以及加快资源包的打包速度。运行期的资源替换，Freeline 中使用了 Instant Run 的方案。除此之外，Freeline 也支持运行期动态更新 so 文件。\n\nFreeline 会根据代码文件的变更情况，自动在全量编译与增量编译中进行切换。\n\n实际上，Freeline 可以在经过简单的改造之后，作为线上热修复方案，通过动态下发增量资源，来对应用进行修复或者资源替换。经过压缩后的增量资源通常都会在 100kb 以下，用户可以在移动网络的环境下直接接收到热补丁。蚂蚁聚宝已经基于 Freeline 打造了完整的热修复框架，应用于线上问题修复以及 A/B Test。\n\n[中文原理说明](https://yq.aliyun.com/articles/59122?spm=5176.8091938.0.0.1Bw3mU)\n\n## Features\n- 支持标准的多模块 Gradle 工程的增量构建\n- 并发执行增量编译任务\n- 进程级别异常隔离机制\n- 支持 so 动态更新\n- 支持 resource.arsc 缓存\n- 支持 retrolambda\n- 支持 DataBinding\n- 支持各类主流注解库\n- 支持 Windows，Linux，Mac 平台\n\n以下列表为 Freeline 支持的热更新情况：\n\n|| Java | drawable, layout, etc. | res/values | native so|\n|:-----:|:----:|:----:|:----:|:----:|\n| add    | √    | √    |√ |   √   |     \n| change    | √    |  √   |√ |   √   | \n| remove   | √    |   √  |x|   -   | \n\nFreeline 已经分别在 API 17，19，22，23 的 Android 模拟器、Android 6.0 Nexus 6P 以及 Android 4.4 锤子手机上经过测试。如果想要充分体验 Freeline 增量编译的速度的话，最好使用 Android 5.0+ 的设备。\n\n## Download\n配置 project-level 的 build.gradle，加入 freeline-gradle 的依赖：\n\n````Gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.antfortune.freeline:gradle:0.8.8'\n    }\n}\n````\n然后，在你的主 module 的 build.gradle 中，应用 freeline 插件的依赖：\n\n````Gradle\napply plugin: 'com.antfortune.freeline'\n\nandroid {\n    ...\n}\n````\n\n最后，在命令行执行以下命令来下载 freeline 的 python 和二进制依赖。\n\n- Windows[CMD]: gradlew initFreeline\n- Linux/Mac: ./gradlew initFreeline\n\n对于国内的用户来说，如果你的下载的时候速度很慢，你也可以加上参数，执行`gradlew initFreeline -Pmirror`，这样就会从国内镜像地址来下载。\n\n你也可以使用参数`-PfreelineVersion={your-specific-version}`来下载特定版本的 freeline 依赖。\n\n如果你的工程结构较为复杂，在第一次使用 freeline 编译的时候报错了的话，你可以添加一些 freeline 提供的配置项，来适配你的工程。具体可以看 [Freeline DSL References](https://github.com/alibaba/freeline/wiki/Freeline-DSL-References)。\n\n## Usage\nFreeline 最快捷的使用方法就是直接安装 Android Studio 插件。\n\n在 Android Studio 中，通过以下路径：\n\n- MacOS\n> Android Studio → Preferences... → Plugins → Browse repositories...\n\n- Windows 和 Linux\n> File → Settings... → Plugins → Browse repositories...\n\n并搜索“freeline”，并安装。\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6gw1f82eknaeudj20tk01omxe.jpg)\n\n直接点击 `Run Freeline` 的按钮，就可以享受 Freeline 带来的开发效率的提升啦（当然，你可能会先需要一个较为耗时的全量编译过程）。\n\n插件也会提示你 Freeline 最新的版本是多少，你也可以通过插件来对 Freeline 进行更新。\n\n非常感谢 [@pengwei1024](https://github.com/pengwei1024) 和 [@act262](https://github.com/act262) 帮助我们开发了这个非常棒的 Freeline 插件。\n\n除此之外，你也可以通过在命令行执行 Python 脚本的方式来使用 Freeline，具体可以看我们的相应的链接 [Freeline CLI Usage](https://github.com/alibaba/freeline/wiki/Freeline-CLI-Usage)。\n\n## Sample Usage\n````\ngit clone git@github.com:alibaba/freeline.git\ncd freeline/sample\n./gradlew initFreeline\npython freeline.py\n````\n\n## TODO\n- 兼容性与稳定性的提升\n- 多设备同时连接 PC 的支持\n\n## Limitations\n- 第一次增量资源编译的时候可能会有点慢\n- 不支持删除带 id 的资源，否则可能导致 aapt 编译出错\n- 暂不支持抽象类的增量编译\n- 不支持开启 Jack 编译\n- 不支持 Kotlin/Groovy/Scala\n\n## Contributing\n不论是小的修改，还是大的feature更新，我们都非常欢迎大家为 Freeline 贡献代码。\n\n## Troubleshooting\nSee [wiki](https://github.com/alibaba/freeline/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98).\n\n## Thanks\n- [Instant Run](https://developer.android.com/studio/run/index.html#instant-run)\n- [Buck](https://github.com/facebook/buck)\n- [LayoutCast](https://github.com/mmin18/LayoutCast)\n\n## License\nBSD3 License\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.544921875,
          "content": "# Freeline\n\n![Freeline](http://ww4.sinaimg.cn/large/006tNc79gw1f6ooza8pkuj30h804gjrk.jpg)\n\n[![Release Version](https://img.shields.io/badge/release-0.8.8-red.svg)](https://github.com/alibaba/freeline/releases) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/alibaba/freeline/blob/master/LICENSE) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/alibaba/freeline/pulls)\n\n*Freeline* is a super fast build tool for Android and an alternative to Instant Run. Caching reusable class files and resource indices, it enables incremental building Android apps, and optionally deploying the updates to your device by hot swap.\n\nSee [Freeline official website](https://www.freelinebuild.com) for more information.\n\nDeveloped and used by **Ant Fortune ([about us](https://www.antfortune.com/ \"about us\")) Android Team**, Freeline has been significantly saving time in daily work. Inspiring by **Buck** and **Instant Run** but faster than ever, Freeline can make an incremental build in just a few seconds. No more recompile and reinstall again and again before seeing your modifications, Freeline brings life-changing development experience for Android.\n\n[中文说明](README-zh.md)\n\n## Freeline Insights\nFreeline splits the build task into several small tasks that run concurrently. It makes full use of the compiled cache files to implement a real incremental build and uses some components of Buck such as dx and DexMerger to speed up the build tasks. Freeline runs a socket server in a separate process on device side, which connects with build tool on developer's machine, so that deployment can still take effects even if the main process crashes.\n\nFreeline uses multi-dex solution for incremental dex hot swapping. A deeply optimized version of **aapt** tool (**FreelineAapt**) is made to generate incremental resource pack, which is several times faster than the original aapt tool and the resouce pack can be as small as 1kb. MonkeyPatcher from Instant Run is utilized to make hot resource replacement. Freeline support dynamic swap native .so library, you don't need to re-build your project after native .so files changed. \n\nFreeline will automatically switch between full build and incremental build.\n\nFreeline is also a great basis for over-the-air hotpatching. Deliverying Freeline's incremental output, which can be packed into a zip file and usually less than 100 kb, it is able to take effect to fix crashes or other problems and replace resoucres dynamically. Statistical data over large amount cases show that it is effective for 99% of users. Please note that the OTA patch delivery system is out of scope of this project.\n\nFreelineAapt will open source codes later. See wiki to know more about Freeline, only Chinese available now.\n\n[中文原理说明](https://yq.aliyun.com/articles/59122?spm=5176.8091938.0.0.1Bw3mU)\n\n## Features\n- Speed up standard android gradle projects with multiple modules\n- Concurrent tasks that incrementally build project\n- Hot deploy even if the main process crashes\n- Build incremental dex and resource pack\n- Caching resource.arsc support\n- Running on Windows, Linux and Mac\n- Native so hot swap support\n- Annotation support\n- Retrolambda support\n- DataBinding support\n\nSee the following table for changes support.\n\n|| Java | drawable, layout, etc. | res/values | native so|\n|:-----:|:----:|:----:|:----:|:----:|\n| add | √ | √ | √ | √ |     \n| change | √ | √ | √ | √ | \n| remove | √ | √ | x | - | \n\n\nFreeline has been tested with API versions 17, 19, 22, 23 on the android emulators, a Nexus 6p running marshmallow and a smartisan running Kitkat. Incremental resource patch would be much faster if the android device is running Lolipop or above.\n\n## Download\nConfigure your project-level build.gradle to include freeline plugin:\n\n````Gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.antfortune.freeline:gradle:0.8.8'\n    }\n}\n````\nThen, apply the freeline plugin in your android application module's build.gradle:\n\n````Gradle\napply plugin: 'com.antfortune.freeline'\n\nandroid {\n    ...\n}\n````\n\nFinally, execute the gradle task `initFreeline` to download freeline dependencies.\n\n- Windows[CMD]: gradlew initFreeline\n- Linux/Mac: ./gradlew initFreeline\n\nFor Chinese users, if you got stuck in the download process, you can execute `gradlew initFreeline -Pmirror` to speed up the progress.\n\nYou can also use `-PfreelineVersion={your-specific-version}` parameter to download the specific version of freeline's python and bin dependencies.\n\nIf you have a complex project structure, you may need to use freeline DSL to customize your build process. For more details about freeline DSL, see [Freeline DSL References](https://github.com/alibaba/freeline/wiki/Freeline-DSL-References).\n\n## Usage\nYou can install freeline plugin in Android Studio for quick usage.\n\nHow to install? In Android Studio, go to:\n\n- MacOS\n> Android Studio → Preferences... → Plugins → Browse repositories...\n\n- Windows and Linux\n> File → Settings... → Plugins → Browse repositories...\n\nand search for `freeline`.\n\n![](http://ww4.sinaimg.cn/large/65e4f1e6gw1f82eknaeudj20tk01omxe.jpg)\n\nJust use the `Run Freeline` button and enjoy it.\n\nThe plugin will show you the latest update of Freeline, you can use this plugin to update Freeline.\n\nMany thanks to [@pengwei1024](https://github.com/pengwei1024) and [@act262](https://github.com/act262) for creating such an awesome plugin.\n\nBesides, you can also execute python script in the command line in the root dir of your project. See [wiki](https://github.com/alibaba/freeline/wiki/Freeline-CLI-Usage) for more details.\n\n\n## Sample Usage\n````\ngit clone git@github.com:alibaba/freeline.git\ncd freeline/sample\n./gradlew initFreeline\npython freeline.py\n````\n\n## TODO\n- Compatibility Improvement\n- Multiple Devices Connection Support\n\n## Limitations\n- Sync incremental resource pack to the device first time may be a bit slow\n- Removing res/values is not supported, which may cause aapt exception\n- Incrementally build abstract class is not support\n- Not support Jack compile\n- Not support Kotlin/Groovy/Scala\n\n## Contributing\nWe are always very happy to have contributions, whether for trivial cleanups, big new features or other material rewards.\n\n## Troubleshooting\nSee [wiki](https://github.com/alibaba/freeline/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98).\n\n## Thanks\n- [Instant Run](https://developer.android.com/studio/run/index.html#instant-run)\n- [Buck](https://github.com/facebook/buck)\n- [LayoutCast](https://github.com/mmin18/LayoutCast)\n\n## License\nBSD3 License\n\n\n\n\n\n\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.6904296875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        mavenLocal()\n        google()\n        jcenter()\n        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.0'\n        classpath \"com.antfortune.freeline:gradle:$FREELINE_RELEASE_VERSION\"\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'\n        classpath 'me.tatarka:gradle-retrolambda:3.6.1'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        mavenLocal()\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\ndef supportLibVersion = '27.0.0'\n\next {\n    freelineDevVersion = FREELINE_RELEASE_VERSION\n    freelineReleaseVersion = FREELINE_RELEASE_VERSION\n    minSdkVersion = 14\n    targetSdkVersion = 25\n    compileSdkVersion = 27\n    buildToolsVersion = '27.0.0'\n}\n\ndef deps = [\n        appcompatV7        : \"com.android.support:appcompat-v7:$supportLibVersion\",\n        supportV4          : \"com.android.support:support-v4:$supportLibVersion\",\n        recyclerview       : \"com.android.support:recyclerview-v7:$supportLibVersion\",\n        design             : \"com.android.support:design:$supportLibVersion\",\n\n        freelineRuntime    : \"com.antfortune.freeline:runtime:$freelineReleaseVersion\",\n        freelineRuntimeNoOp: \"com.antfortune.freeline:runtime-no-op:$freelineReleaseVersion\"\n]\n\next.deps = deps"
        },
        {
          "name": "freeline-databinding-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-gradle-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-runtime-no-op",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline-studio-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeline.py",
          "type": "blob",
          "size": 1.65625,
          "content": "#!/usr/bin/python\n# -*- coding:utf-8 -*-\nfrom __future__ import print_function\nimport sys\nfrom argparse import ArgumentParser\n\nfrom freeline_core.dispatcher import Dispatcher\nfrom freeline_core.init import init\n\n\nclass Freeline(object):\n    def __init__(self):\n        self.dispatcher = Dispatcher()\n\n    def call(self, args=None):\n        if 'init' in args and args.init:\n            print('init freeline project...')\n            init()\n            exit()\n\n        self.dispatcher.call_command(args)\n\n\ndef get_parser():\n    parser = ArgumentParser()\n    parser.add_argument('-v', '--version', action='store_true', help='show version')\n    parser.add_argument('-f', '--cleanBuild', action='store_true', help='force to execute a clean build')\n    parser.add_argument('-w', '--wait', action='store_true', help='make application wait for debugger')\n    parser.add_argument('-a', '--all', action='store_true',\n                        help=\"together with '-f', freeline will force to clean build all projects.\")\n    parser.add_argument('-c', '--clean', action='store_true', help='clean cache directory and workspace')\n    parser.add_argument('-d', '--debug', action='store_true', help='show freeline debug output (NOT DEBUG APPLICATION)')\n    # parser.add_argument('-i', '--init', action='store_true', help='init freeline project')\n    parser.parse_args()\n    return parser\n\n\ndef main():\n    if sys.version_info > (3, 0):\n        print('Freeline only support Python 2.7+ now. Please use the correct version of Python for freeline.')\n        exit()\n\n    parser = get_parser()\n    args = parser.parse_args()\n    freeline = Freeline()\n    freeline.call(args=args)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "freeline_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.0947265625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\n# release version or dependencies\nFREELINE_ARTIFACT_VERSION=0.8.9-SNAPSHOT\n\nFREELINE_RELEASE_VERSION=0.8.9-SNAPSHOT\n\n# develop with idea\nandroid.injected.build.model.only.versioned=3\n# disable aapt2\nandroid.enableAapt2=false\n\n# debug gradle\n#org.gradle.debug=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "release-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.673828125,
          "content": "// freeline sample\ninclude ':freeline-sample:app'\ninclude ':freeline-sample:common'\ninclude ':freeline-sample:resources'\ninclude ':freeline-sample:ThirdParty:share'\ninclude ':freeline-sample:ThirdParty:payment'\ninclude ':freeline-sample:PureJavaLib'\n\n// freeline runtime\ninclude ':runtime'\nproject(':runtime').projectDir = new File('freeline-runtime')\ninclude ':runtime-no-op'\nproject(':runtime-no-op').projectDir = new File('freeline-runtime-no-op')\n\n// freeline databinding-cli\ninclude ':freeline-databinding-cli'\n\n// freeline gradle plugin\ninclude ':gradle'\nproject(':gradle').projectDir = new File('freeline-gradle-plugin')\n\n// freeline studio plugin\n//include ':freeline-studio-plugin'"
        }
      ]
    }
  ]
}