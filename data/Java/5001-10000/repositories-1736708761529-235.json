{
  "metadata": {
    "timestamp": 1736708761529,
    "page": 235,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yarolegovich/DiscreteScrollView",
      "stars": 5785,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0859375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea*\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.89453125,
          "content": "# DiscreteScrollView\n\nThe library is a RecyclerView-based implementation of a scrollable list, where current item is centered and can be changed using swipes.\nIt is similar to a ViewPager, but you can quickly and painlessly create layout, where views adjacent to the currently selected view are partially or fully visible on the screen. \n\n![GifSampleShop](https://github.com/yarolegovich/DiscreteScrollView/blob/master/images/cards_shop.gif)\n\n## Gradle \nAdd this into your dependencies block.\n```\ncompile 'com.yarolegovich:discrete-scrollview:1.5.1'\n```\n\n## Reporting an issue\n\nIf you are going to report an issue, I will greatly appreciate you including some code which I can run to see the issue. By doing so you maximize the chance that I will fix the problem. \n\nBy the way, before reporting a problem, try replacing DiscreteScrollView with a RecyclerView. If the problem is still present, it's likely somewhere in your code.\n\n## Sample\n<a href=\"https://play.google.com/store/apps/details?id=com.yarolegovich.discretescrollview.sample\"><img alt=\"Get it on Google Play\" src=\"https://play.google.com/intl/en_us/badges/images/apps/en-play-badge.png\" width=\"185\" height=\"60\"/></a><br>\n\nPlease see the [sample app](https://github.com/yarolegovich/DiscreteScrollView/tree/master/sample/src/main/java/com/yarolegovich/discretescrollview/sample) for examples of library usage.\n\n![GifSampleWeather](https://github.com/yarolegovich/DiscreteScrollView/blob/master/images/cards_weather.gif)\n\n## Wiki\n### General\nThe library uses a custom LayoutManager to adjust items' positions on the screen and handle scroll, however it is not exposed to the client \ncode. All public API is accessible through DiscreteScrollView class, which is a simple descendant of RecyclerView.\n\nIf you have ever used RecyclerView - you already know how to use this library. One thing to note - you should NOT set LayoutManager.\n\n#### Usage:\n 1. Add DiscreteScrollView to your layout either using xml or code:\n 2. Create your implementation of RecyclerView.Adapter. Refer to the [sample](https://github.com/yarolegovich/DiscreteScrollView/blob/master/sample/src/main/java/com/yarolegovich/discretescrollview/sample/shop/ShopAdapter.java) for an example, if you don't know how to do it.\n 3. Set the adapter.\n 4. You are done! \n```xml\n<com.yarolegovich.discretescrollview.DiscreteScrollView\n  android:id=\"@+id/picker\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"wrap_content\"\n  app:dsv_orientation=\"horizontal|vertical\" />  <!-- orientation is optional, default is horizontal -->\n```\n```java\nDiscreteScrollView scrollView = findViewById(R.id.picker);\nscrollView.setAdapter(new YourAdapterImplementation());\n```\n\n### API\n#### General\n```java\nscrollView.setOrientation(DSVOrientation o); //Sets an orientation of the view\nscrollView.setOffscreenItems(count); //Reserve extra space equal to (childSize * count) on each side of the view\nscrollView.setOverScrollEnabled(enabled); //Can also be set using android:overScrollMode xml attribute\n```\n#### Related to the current item:\n```java\nscrollView.getCurrentItem(); //returns adapter position of the currently selected item or -1 if adapter is empty.\nscrollView.scrollToPosition(int position); //position becomes selected\nscrollView.smoothScrollToPosition(int position); //position becomes selected with animated scroll\nscrollView.setItemTransitionTimeMillis(int millis); //determines how much time it takes to change the item on fling, settle or smoothScroll\n```\n#### Transformations\nOne useful feature of ViewPager is page transformations. It allows you, for example, to create carousel effect. DiscreteScrollView also supports \npage transformations.\n```java\nscrollView.setItemTransformer(transformer);\n\npublic interface DiscreteScrollItemTransformer {\n    /**\n     * In this method you apply any transform you can imagine (perfomance is not guaranteed).\n     * @param position is a value inside the interval [-1f..1f]. In idle state:\n     * |view1|  |currentlySelectedView|  |view2|\n     * -view1 and everything to the left is on position -1;\n     * -currentlySelectedView is on position 0;\n     * -view2 and everything to the right is on position 1.\n     */\n    void transformItem(View item, float position); \n}\n```\nIn the above example `view1Position == (currentlySelectedViewPosition - n)` and `view2Position == (currentlySelectedViewPosition + n)`, where `n` defaults to 1 and can be changed using the following API:\n```java\nscrollView.setClampTransformProgressAfter(n);\n```\nBecause scale transformation is the most common, I included a helper class - ScaleTransformer, here is how to use it:\n```java\ncityPicker.setItemTransformer(new ScaleTransformer.Builder()\n  .setMaxScale(1.05f) \n  .setMinScale(0.8f) \n  .setPivotX(Pivot.X.CENTER) // CENTER is a default one\n  .setPivotY(Pivot.Y.BOTTOM) // CENTER is a default one\n  .build());\n```\nYou may see how it works on GIFs.\n\n#### Slide through multiple items\n\nTo allow slide through multiple items call:\n```java\nscrollView.setSlideOnFling(true);\n```\nThe default threshold is set to 2100. Lower the threshold, more fluid the animation. You can adjust the threshold by calling:\n```java\nscrollView.setSlideOnFlingThreshold(value);\n```\n\n#### Infinite scroll\nInfinite scroll is implemented on the adapter level:\n```java\nInfiniteScrollAdapter wrapper = InfiniteScrollAdapter.wrap(yourAdapter);\nscrollView.setAdapter(wrapper);\n```\nAn instance of `InfiniteScrollAdapter` has the following useful methods:\n```java\nint getRealItemCount();\n\nint getRealCurrentPosition();\n\nint getRealPosition(int position);\n\n/*\n * You will probably want this method in the following use case:\n * int targetAdapterPosition = wrapper.getClosestPosition(targetPosition);\n * scrollView.smoothScrollTo(targetAdapterPosition);\n * To scroll the data set for the least required amount to reach targetPosition.\n */\nint getClosestPosition(int position); \n```\nCurrently `InfiniteScrollAdapter` handles data set changes inefficiently, so your contributions are welcome. \n#### Disabling scroll\nIt's possible to forbid user scroll in any or specific direction using:\n```java\nscrollView.setScrollConfig(config);\n```\nWhere `config` is an instance of `DSVScrollConfig` enum. The default value enables scroll in any direction.\n#### Callbacks\n* Scroll state changes:\n```java\nscrollView.addScrollStateChangeListener(listener);\nscrollView.removeScrollStateChangeListener(listener);\n\npublic interface ScrollStateChangeListener<T extends ViewHolder> {\n\n  void onScrollStart(T currentItemHolder, int adapterPosition); //called when scroll is started, including programatically initiated scroll\n  \n  void onScrollEnd(T currentItemHolder, int adapterPosition); //called when scroll ends\n  /**\n   * Called when scroll is in progress. \n   * @param scrollPosition is a value inside the interval [-1f..1f], it corresponds to the position of currentlySelectedView.\n   * In idle state:\n   * |view1|  |currentlySelectedView|  |view2|\n   * -view1 is on position -1;\n   * -currentlySelectedView is on position 0;\n   * -view2 is on position 1.\n   * @param currentIndex - index of current view\n   * @param newIndex - index of a view which is becoming the new current\n   * @param currentHolder - ViewHolder of a current view\n   * @param newCurrent - ViewHolder of a view which is becoming the new current\n   */\n  void onScroll(float scrollPosition, int currentIndex, int newIndex, @Nullable T currentHolder, @Nullable T newCurrentHolder); \n}\n```\n* Scroll:\n```java\nscrollView.addScrollListener(listener);\nscrollView.removeScrollListener(listener);\n\npublic interface ScrollListener<T extends ViewHolder> {\n  //The same as ScrollStateChangeListener, but for the cases when you are interested only in onScroll()\n  void onScroll(float scrollPosition, int currentIndex, int newIndex, @Nullable T currentHolder, @Nullable T newCurrentHolder);\n}\n```\n* Current selection changes:\n```java\nscrollView.addOnItemChangedListener(listener);\nscrollView.removeOnItemChangedListener(listener);\n\npublic interface OnItemChangedListener<T extends ViewHolder> {\n  /**\n   * Called when new item is selected. It is similar to the onScrollEnd of ScrollStateChangeListener, except that it is \n   * also called when currently selected item appears on the screen for the first time.\n   * viewHolder will be null, if data set becomes empty \n   */\n  void onCurrentItemChanged(@Nullable T viewHolder, int adapterPosition); \n}\n```\n\n## Special thanks\nThanks to [Tayisiya Yurkiv](https://www.behance.net/yurkivt) for sample app design and beautiful GIFs.\n\n## License\n```\nCopyright 2017 Yaroslav Shevchuk\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.443359375,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.0.1'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        maven { url \"https://maven.google.com\" }\n        maven { url \"https://jitpack.io\" }\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    compileSdkVersion = 29\n    buildToolsVersion = '29.0.2'\n    targetSdkVersion = 29\n\n    deps = [\n            recycler      : 'androidx.recyclerview:recyclerview:1.0.0',\n            designSupport : 'com.google.android.material:material:1.0.0',\n            annotations   : 'androidx.annotation:annotation:1.1.0',\n            androidxCompat: 'androidx.appcompat:appcompat:1.1.0',\n            glide         : 'com.github.bumptech.glide:glide:4.11.0',\n            materialPrefs : 'com.yarolegovich:mp:1.1.6'\n    ]\n\n    testDeps = [\n            hamcrest    : 'org.hamcrest:hamcrest-library:1.3',\n            mockito     : 'org.mockito:mockito-core:2.13.0',\n            jUnit       : 'junit:junit:4.13',\n            robolectric : 'org.robolectric:robolectric:3.0',\n            espresso    : 'androidx.test.espresso:espresso-core:3.1.0',\n            androidJUnit: 'androidx.test.ext:junit:1.1.1',\n            testRules   : 'androidx.test:rules:1.1.1',\n            testRunner  : 'androidx.test:runner:1.1.1'\n    ]\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.052734375,
          "content": "android.useAndroidX=true\n\norg.gradle.jvmargs=-Xmx1536m"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.1748046875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave ( ) {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.20703125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-bintray.gradle",
          "type": "blob",
          "size": 1.6240234375,
          "content": "apply plugin: 'maven-publish'\napply plugin: 'com.jfrog.bintray'\n\ndef upload = [\n        user       : 'yarolegovich',\n        artifactId : 'discrete-scrollview',\n        userOrg    : 'yarolegovich',\n        repository : 'maven',\n        groupId    : 'com.yarolegovich',\n        uploadName : 'DiscreteScrollView',\n        description: 'A scrollable list of items that centers the current element and provides easy-to-use APIs for cool item animations.',\n        version    : '1.5.1',\n        licences   : ['Apache-2.0']\n]\n\ntask androidSourcesJar(type: Jar) {\n    archiveClassifier.set('sources')\n    from android.sourceSets.main.java.srcDirs\n}\n\nversion upload.version\n\nafterEvaluate {\n\n    publishing {\n        publications {\n            LibRelease(MavenPublication) {\n                from components.release\n\n                artifact androidSourcesJar\n\n                artifactId upload.artifactId\n                groupId upload.groupId\n                version upload.version\n            }\n        }\n    }\n\n    Properties localProps = new Properties()\n    localProps.load(project.rootProject.file('local.properties').newDataInputStream())\n\n    bintray {\n        user = upload.user\n        key = localProps.getProperty('bintray.api_key')\n        publications = ['LibRelease']\n        configurations = ['archives']\n        pkg {\n            name = upload.uploadName\n            repo = upload.repository\n            userOrg = upload.userOrg\n            licenses = upload.licences\n            publish = true\n            dryRun = false\n            version {\n                name = upload.version\n                desc = upload.description\n            }\n        }\n    }\n}"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.029296875,
          "content": "include ':sample', ':library'\n"
        }
      ]
    }
  ]
}