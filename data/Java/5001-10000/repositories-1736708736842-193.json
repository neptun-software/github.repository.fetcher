{
  "metadata": {
    "timestamp": 1736708736842,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hazelcast/hazelcast",
      "stars": 6207,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0078125,
          "content": "* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.529296875,
          "content": "target/\n.clover/\n.idea/\n!.idea/icon.png\n!.idea/icon.svg\n.vscode/\n!.vscode/extensions.json\n.settings/\n.attach_pid*\n.classpath\n.directory\n.factorypath\n.patch\n.project\n.surefire-*\n.DS_Store\n*.iml\n*.ipr\n*.iws\natlassian-ide-plugin.xml\n*dependency-reduced-pom.xml\nhazelcast/src/main/java/com/hazelcast/instance/GeneratedBuildProperties.java\ndiagnostics-*.log\nperformance*.log\nbuild/\nreports/\n*/src/test/resources/data/file*\n*/src/test/resources/data/result*\n*.jfr\n.mvn/wrapper/maven-wrapper.jar\n.checkstyle\n\n# Hadoop files\n*.crc\n**/node_modules/**\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".officialRun",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.4580078125,
          "content": "# Contributing to Hazelcast\n\nHazelcast is Open Source software, licensed under the [Apache 2.0 license](LICENSE).\nThe main benefit of Open Source is that you don't need to wait for a vendor to provide a fix or a feature.\nIf you've got the skills (and the will), it's already at your fingertips.\n\nThere are multiple ways to contribute:\n\n1. [Reporting an issue](#issue-reports)\n2. [Sending a pull request](#pull-requests).\n   Note that you don't need to be a developer to help us.\n   Contributions that improve the documentation are always appreciated.\n\nIf you feel yourself in need of assistance, please reach us directly via [Slack](https://slack.hazelcast.com/).\n\n## Issue Reports\n\nThanks for reporting your issue.\nTo help us resolve your issue quickly and efficiently, we need as much data for diagnostics as possible.\nPlease share with us the following information:\n\n1. Exact Hazelcast version that you use (_e.g._ `4.0.1`, also whether it is a minor release, or the latest snapshot).\n2. Cluster size, _i.e._ the number of Hazelcast cluster members.\n3. Number of clients.\n4. Java version.\n   It is also helpful to mention the JVM parameters.\n5. Operating system.\n   If it is Linux, kernel version is helpful.\n6. Logs and stack traces, if available.\n7. Detailed description of the steps to reproduce your issue.\n8. Unit test with the `hazelcast.xml` file.\n   If you could include a unit test which reproduces your issue, it would speed the resolution time.\n9. If it's related to integration with an external system\n   (_e.g._ Tomcat, Spring, Hibernate, Kafka) details about the external\n   system and configuration parameters for connecting to it.\n\n## Pull requests\n\nThanks a lot for creating your <abbr title=\"Pull Request\">PR</abbr>!\n\nA PR can target many different subjects:\n\n* [Documentation](https://github.com/hazelcast/hz-docs):\n  either fix typos or improve the documentation as a whole\n* Fix a bug\n* Add a feature\n* Add additional tests to improve the test coverage, or fix flaky tests\n* Anything else that makes Hazelcast better!\n\nAll PRs follow the same process:\n\n1. Contributions are submitted, reviewed, and accepted using the PR system on GitHub.\n2. For first time contributors, our bot will automatically ask you to sign the Hazelcast Contributor Agreement on the\n   PR.\n3. The latest changes are in the `master` branch.\n4. Make sure to design clean commits that are easily readable.\n   That includes descriptive commit messages.\n5. Please keep your PRs as small as possible, _i.e._ if you plan to perform a huge change, do not submit a single and\n   large PR for it.\n   For an enhancement or larger feature, you can create a GitHub issue first to discuss.\n6. Before you push, run:\n   ```bash\n   ./mvnw clean validate\n   ```\n   Pushing your PR once it is free of CheckStyle errors.\n7. If you submit a PR as the solution to a specific issue, please mention the issue number either in the PR description\n   or commit message.\n8. Your PRs will first be merged into our internal repo.\n9. Following internal merging, the final commit will be pushed back to this repository.\n10. You will be acknowledged as a co-author of the final commit, recognizing your valuable contribution.\n11. Your original PR will be closed, accompanied by a comment indicating that it has been merged internally as part of\n    the monorepo process.\n\n## Additional Documentation\n\n* [IDE Configurations](./ide-configurations/README.md)\n* [Confluence - Setting up the IDE](https://hazelcast.atlassian.net/wiki/spaces/EN/pages/4443930652/Setting+up+the+IDE)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.33203125,
          "content": "Source code in this repository is covered by one of two licenses:\n(i) the Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n(ii) the Hazelcast Community License (http://hazelcast.com/hazelcast-community-license)\n\nThe default license throughout the repository is Apache License 2.0\nunless the header specifies another license.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.8583984375,
          "content": "The packages:\n\ncom.hazelcast.internal.util.collection\ncom.hazelcast.internal.util.concurrent\n\nand the classes:\n\ncom.hazelcast.internal.util.QuickMath\ncom.hazelcast.client.impl.protocol.util.UnsafeBuffer\ncom.hazelcast.client.impl.protocol.util.BufferBuilder\n\ncontain code originating from the Agrona project\n(https://github.com/real-logic/Agrona).\n\nThe class com.hazelcast.internal.util.HashUtil contains code originating\nfrom the Koloboke project (https://github.com/OpenHFT/Koloboke).\n\nThe class classloading.ThreadLocalLeakTestUtils contains code originating\nfrom the Tomcat project (https://github.com/apache/tomcat).\n\ncom.hazelcast.internal.cluster.fd.PhiAccrualFailureDetector contains code originating\nfrom the Akka project (https://github.com/akka/akka/).\n\nThe package com.hazelcast.internal.json contains code originating\nfrom minimal-json project (https://github.com/ralfstx/minimal-json).\n\nThe class com.hazelcast.instance.impl.MobyNames contains code originating\nfrom The Moby Project (https://github.com/moby/moby).\n\nThe class com.hazelcast.internal.util.graph.BronKerboschCliqueFinder contains code\noriginating from The JGraphT Project (https://github.com/jgrapht/jgrapht).\n\nThe packages:\ncom.hazelcast.sql\ncom.hazelcast.jet.sql\n\ncontain code originating from the Apache Calcite (https://github.com/apache/calcite)\n\nThe class com.hazelcast.jet.kafka.impl.ResumeTransactionUtil contains\ncode derived from the Apache Flink project.\n\nThe class com.hazelcast.internal.util.ConcurrentReferenceHashMap contains code written by Doug Lea\nand updated within the WildFly project (https://github.com/wildfly/wildfly).\n\nThe classes:\ncom.hazelcast.cp.internal.raft.impl.state.FollowerState\ncom.hazelcast.cp.internal.raft.impl.state.FollowerStateTest\ncom.hazelcast.cp.internal.raft.impl.SlowFollowerBackoffTest\n\ncontain code originating from the MicroRaft project (https://github.com/MicroRaft/MicroRaft)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8466796875,
          "content": "# Hazelcast\n\n[![Slack](https://img.shields.io/badge/slack-chat-green.svg)](https://slack.hazelcast.com/) \n[![javadoc](https://javadoc.io/badge2/com.hazelcast/hazelcast/latest/javadoc.svg)](https://javadoc.io/doc/com.hazelcast/hazelcast/latest)\n[![Docker pulls](https://img.shields.io/docker/pulls/hazelcast/hazelcast)](https://hub.docker.com/r/hazelcast/hazelcast)\n\n----\n\n## What is Hazelcast\n\nThe world’s leading companies trust Hazelcast to modernize applications and take instant action on data in motion to create new revenue streams, mitigate risk, and operate more efficiently. Businesses use Hazelcast’s unified **real-time data platform** to process **streaming** data, enrich it with historical context and take instant action with standard or **ML/AI-driven automation** - before it is stored in a database or data lake. \n\nHazelcast is named in the Gartner Market Guide to Event Stream Processing and a leader in the GigaOm Radar Report for Streaming Data Platforms. To join our community of CXOs, architects and developers at brands such as Lowe’s, HSBC, JPMorgan Chase, Volvo, New York Life, and others, visit [hazelcast.com](https://hazelcast.com).\n\n## When to use Hazelcast\n\nHazelcast provides a platform that can handle multiple types of workloads for\nbuilding real-time applications.\n\n* Stateful data processing over streaming data or data at rest\n* Querying streaming and batch data sources directly using SQL\n* Ingesting data through a library of connectors and serving it using\n  low-latency SQL queries\n* Pushing updates to applications on events\n* Low-latency queue-based or pub-sub messaging  \n* Fast access to contextual and transactional data via caching patterns such as\n  read/write-through and write-behind\n* Distributed coordination for microservices\n* Replicating data from one region to another or between data centers in the\n  same region\n\n## Key Features\n\n* [Stateful and fault-tolerant data processing and querying over data streams\n  and data](#stateful-data-Processing) at rest using [SQL](https://docs.hazelcast.com/hazelcast/latest/sql/sql-overview) or dataflow API\n* [A comprehensive library of connectors such as Kafka, Hadoop, S3, RDBMS, JMS\n  and many more](https://docs.hazelcast.com/hazelcast/latest/integrate/connectors)\n* Distributed messaging using [pub-sub](https://docs.hazelcast.com/hazelcast/latest/data-structures/topic.html) and [queues](https://docs.hazelcast.com/hazelcast/latest/data-structures/queue.html)\n* [Distributed, partitioned, queryable key-value store with event listeners,\n  which can also be used to store contextual data for enriching event streams\n  with low latency](https://docs.hazelcast.com/hazelcast/latest/data-structures/map)\n* Tight integration for deploying machine learning models with Python to a data\n  processing pipeline\n* Cloud-native, run everywhere architecture\n* Zero-downtime operations with rolling upgrades\n* At-least-once and exactly-once processing guarantees for stream processing\n  pipelines\n* Data replication between data centers and geographic regions using WAN \n* Microsecond performance for key-value point lookups and pub-sub\n* Unique data processing architecture results in 99.99% latency of under 10ms\n  for streaming queries with millions of events per second.\n* Client libraries in [Java](https://github.com/hazelcast/hazelcast),\n [Python](https://github.com/hazelcast/hazelcast-python-client), [Node.js](https://github.com/hazelcast/hazelcast-nodejs-client), [.NET](https://github.com/hazelcast/hazelcast-csharp-client), [C++](https://github.com/hazelcast/hazelcast-cpp-client) and [Go](https://github.com/hazelcast/hazelcast-go-client)\n\n### Stateful Data Processing\n\nHazelcast has a built-in data processing engine called\n[Jet](https://docs.hazelcast.com/hazelcast/latest/pipelines/overview#what-is-the-jet-engine), which can be used to build both streaming/real-time\nand batch/static data pipelines that are elastic. A single node of Hazelcast has been proven to [aggregate 10 million\nevents per second](https://foojay.io/today/sub-10-ms-latency-in-java-concurrent-gc-with-green-threads/) with\nlatency under 10 milliseconds. A cluster of Hazelcast nodes can process [billion\nevents per\nsecond](https://hazelcast.com/blog/billion-events-per-second-with-millisecond-latency-streaming-analytics-at-giga-scale/).\n\n## Get Started\n\nFollow the [Getting Started\nGuide](https://docs.hazelcast.com/hazelcast/latest/getting-started/install-hazelcast)\nto install and start using Hazelcast.\n\n## Documentation\n\nRead the [documentation](https://docs.hazelcast.com/) for\nin-depth details about how to install Hazelcast and an overview of the features.\n\n## Get Help\n\nYou can use [Slack](https://slack.hazelcast.com/) for getting help with Hazelcast.\n\n## How to Contribute\n\nThanks for your interest in contributing! The easiest way is to just send a pull\nrequest.\n\n### Building From Source\n\nBuilding Hazelcast requires at minimum JDK 17. Pull the latest source from the\nrepository and use Maven install (or package) to build:\n\n```bash\n$ git pull origin master\n$ ./mvnw clean package -DskipTests\n```\n\nIt is recommended to use the included Maven wrapper script.\nIt is also possible to use local Maven distribution with the same \nversion that is used in the Maven wrapper script.\n\nAdditionally, there is a `quick` build activated by setting the `-Dquick` system\nproperty that skips validation tasks for faster local builds (e.g. tests, checkstyle\nvalidation, javadoc, source plugins etc) and does not build `extensions` and `distribution` \nmodules.\n\n### Testing\n\nTake into account that the default build executes thousands of tests which may\ntake a considerable amount of time. Hazelcast has 3 testing profiles:\n\n* Default: \n  ```bash\n  ./mvnw test\n  ```\nto run quick/integration tests (those can be run\n  in parallel without using network by using `-P parallelTest` profile).\n* Slow Tests: \n  ```bash\n  ./mvnw test -P nightly-build\n  ```\nto run tests that are either slow\n  or cannot be run in parallel.\n* All Tests:\n  ```bash\n  ./mvnw test -P all-tests\n  ```\nto run all tests serially using\n  network.\n\nSome tests require Docker to run. Set `-Dhazelcast.disable.docker.tests` system property to ignore them.\n\nWhen developing a PR it is sufficient to run your new tests and some \nrelated subset of tests locally. Our PR builder will take care of running\nthe full test suite.\n\n## License\n\nSource code in this repository is covered by one of two licenses:\n\n * [Apache License 2.0](https://docs.hazelcast.com/hazelcast/latest/index.html#licenses-and-support)\n * [Hazelcast Community\n    License](http://hazelcast.com/hazelcast-community-license)\n\nThe default license throughout the repository is Apache License 2.0 unless the\nheader specifies another license.\n\n## Acknowledgments\nWe owe (the good parts of) our CLI tool's user experience to\n[picocli](https://picocli.info/).\n\n## Copyright\n\nCopyright (c) 2008-2025, Hazelcast, Inc. All Rights Reserved.\n\nVisit [www.hazelcast.com](http://www.hazelcast.com/) for more info.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.73828125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nHazelcast is committed to providing our users with secure software they can rely on.\nWe promptly investigate all reports of security vulnerabilities affecting Hazelcast products.\nIf you believe you have found a security vulnerability, we strongly encourage you to report\nit to us immediately, and we ask your help in working with our team before disclosure in a public forum.\nThis allows us to address the issue most effectively for the benefit and protection of all users.\n\n**It’s easy to submit a vulnerability report:**\n\n* If you’re a Hazelcast customer, open a support ticket and provide us with as much detail as you’re able.\n* If you are not a Hazelcast customer, please email **security@hazelcast.com**.  \n  *Note: This email address is only for reporting security vulnerabilities, not inquiries about security-related topics. Please reach out to us via one of our community channels for general security questions.*\n\nUsing either method, your report will be received promptly by Hazelcast staff.\n\n### What happens to my report?\n\nOur standard process is:\n\n1. Upon receiving your private report, Hazelcast will route it to the appropriate team for investigation.\n2. If we need additional information, we will directly and privately reach out to the person who sent the vulnerability report.\n3. We will verify the vulnerability and its fix.\n4. The security fix will be included in a new release.\n\nWe greatly appreciate your partnership in helping us provide the strongest security posture for all users. Thank you.\n\n## Supported Versions\n\nTo find out which Hazelcast versions are currently being supported please visit our [Version Support Windows](https://support.hazelcast.com/s/article/Version-Support-Windows) page.\n"
        },
        {
          "name": "checkstyle",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "comment: off\ncoverage:\n  status:\n    project: off\n    patch: off\n"
        },
        {
          "name": "distribution",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-archunit-rules",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-build-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-coverage-report",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-it",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-parent",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-spring-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast-tpc-engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "hazelcast",
          "type": "tree",
          "content": null
        },
        {
          "name": "ide-configurations",
          "type": "tree",
          "content": null
        },
        {
          "name": "kubernetes-rbac.yaml",
          "type": "blob",
          "size": 1.1142578125,
          "content": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: hazelcast-cluster-role\nrules:\n  - apiGroups:\n      - \"\"\n      # Access to apps API is only required to support automatic cluster state management\n      # when persistence (hot-restart) is enabled.\n      - apps\n    resources:\n      - endpoints\n      - pods\n      - nodes\n      - services\n      # Access to statefulsets resource is only required to support automatic cluster state management\n      # when persistence (hot-restart) is enabled.\n      - statefulsets\n    verbs:\n      - get\n      - list\n      # Watching resources is only required to support automatic cluster state management\n      # when persistence (hot-restart) is enabled.\n      - watch\n  - apiGroups:\n      - \"discovery.k8s.io\"\n    resources:\n      - endpointslices\n    verbs:\n      - get\n      - list\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: hazelcast-cluster-role-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: hazelcast-cluster-role\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: default\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "modulepath-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.4150390625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.3.2\n#\n# Optional ENV vars\n# -----------------\n#   JAVA_HOME - location of a JDK home dir, required when download maven via java source\n#   MVNW_REPOURL - repo url base for downloading maven distribution\n#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\n#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output\n# ----------------------------------------------------------------------------\n\nset -euf\n[ \"${MVNW_VERBOSE-}\" != debug ] || set -x\n\n# OS specific support.\nnative_path() { printf %s\\\\n \"$1\"; }\ncase \"$(uname)\" in\nCYGWIN* | MINGW*)\n  [ -z \"${JAVA_HOME-}\" ] || JAVA_HOME=\"$(cygpath --unix \"$JAVA_HOME\")\"\n  native_path() { cygpath --path --windows \"$1\"; }\n  ;;\nesac\n\n# set JAVACMD and JAVACCMD\nset_java_home() {\n  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched\n  if [ -n \"${JAVA_HOME-}\" ]; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n      JAVACCMD=\"$JAVA_HOME/jre/sh/javac\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n      JAVACCMD=\"$JAVA_HOME/bin/javac\"\n\n      if [ ! -x \"$JAVACMD\" ] || [ ! -x \"$JAVACCMD\" ]; then\n        echo \"The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run.\" >&2\n        echo \"JAVA_HOME is set to \\\"$JAVA_HOME\\\", but \\\"\\$JAVA_HOME/bin/java\\\" or \\\"\\$JAVA_HOME/bin/javac\\\" does not exist.\" >&2\n        return 1\n      fi\n    fi\n  else\n    JAVACMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v java\n    )\" || :\n    JAVACCMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v javac\n    )\" || :\n\n    if [ ! -x \"${JAVACMD-}\" ] || [ ! -x \"${JAVACCMD-}\" ]; then\n      echo \"The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run.\" >&2\n      return 1\n    fi\n  fi\n}\n\n# hash string like Java String::hashCode\nhash_string() {\n  str=\"${1:-}\" h=0\n  while [ -n \"$str\" ]; do\n    char=\"${str%\"${str#?}\"}\"\n    h=$(((h * 31 + $(LC_CTYPE=C printf %d \"'$char\")) % 4294967296))\n    str=\"${str#?}\"\n  done\n  printf %x\\\\n $h\n}\n\nverbose() { :; }\n[ \"${MVNW_VERBOSE-}\" != true ] || verbose() { printf %s\\\\n \"${1-}\"; }\n\ndie() {\n  printf %s\\\\n \"$1\" >&2\n  exit 1\n}\n\ntrim() {\n  # MWRAPPER-139:\n  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.\n  #   Needed for removing poorly interpreted newline sequences when running in more\n  #   exotic environments such as mingw bash on Windows.\n  printf \"%s\" \"${1}\" | tr -d '[:space:]'\n}\n\n# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties\nwhile IFS=\"=\" read -r key value; do\n  case \"${key-}\" in\n  distributionUrl) distributionUrl=$(trim \"${value-}\") ;;\n  distributionSha256Sum) distributionSha256Sum=$(trim \"${value-}\") ;;\n  esac\ndone <\"${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n[ -n \"${distributionUrl-}\" ] || die \"cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n\ncase \"${distributionUrl##*/}\" in\nmaven-mvnd-*bin.*)\n  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/\n  case \"${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)\" in\n  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;\n  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;\n  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;\n  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;\n  *)\n    echo \"Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version\" >&2\n    distributionPlatform=linux-amd64\n    ;;\n  esac\n  distributionUrl=\"${distributionUrl%-bin.*}-$distributionPlatform.zip\"\n  ;;\nmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;\n*) MVN_CMD=\"mvn${0##*/mvnw}\" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;\nesac\n\n# apply MVNW_REPOURL and calculate MAVEN_HOME\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\n[ -z \"${MVNW_REPOURL-}\" ] || distributionUrl=\"$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*\"$_MVNW_REPO_PATTERN\"}\"\ndistributionUrlName=\"${distributionUrl##*/}\"\ndistributionUrlNameMain=\"${distributionUrlName%.*}\"\ndistributionUrlNameMain=\"${distributionUrlNameMain%-bin}\"\nMAVEN_USER_HOME=\"${MAVEN_USER_HOME:-${HOME}/.m2}\"\nMAVEN_HOME=\"${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string \"$distributionUrl\")\"\n\nexec_maven() {\n  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :\n  exec \"$MAVEN_HOME/bin/$MVN_CMD\" \"$@\" || die \"cannot exec $MAVEN_HOME/bin/$MVN_CMD\"\n}\n\nif [ -d \"$MAVEN_HOME\" ]; then\n  verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\n  exec_maven \"$@\"\nfi\n\ncase \"${distributionUrl-}\" in\n*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;\n*) die \"distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'\" ;;\nesac\n\n# prepare tmp dir\nif TMP_DOWNLOAD_DIR=\"$(mktemp -d)\" && [ -d \"$TMP_DOWNLOAD_DIR\" ]; then\n  clean() { rm -rf -- \"$TMP_DOWNLOAD_DIR\"; }\n  trap clean HUP INT TERM EXIT\nelse\n  die \"cannot create temp dir\"\nfi\n\nmkdir -p -- \"${MAVEN_HOME%/*}\"\n\n# Download and Install Apache Maven\nverbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\nverbose \"Downloading from: $distributionUrl\"\nverbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\n\n# select .zip or .tar.gz\nif ! command -v unzip >/dev/null; then\n  distributionUrl=\"${distributionUrl%.zip}.tar.gz\"\n  distributionUrlName=\"${distributionUrl##*/}\"\nfi\n\n# verbose opt\n__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''\n[ \"${MVNW_VERBOSE-}\" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v\n\n# normalize http auth\ncase \"${MVNW_PASSWORD:+has-password}\" in\n'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nhas-password) [ -n \"${MVNW_USERNAME-}\" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nesac\n\nif [ -z \"${MVNW_USERNAME-}\" ] && command -v wget >/dev/null; then\n  verbose \"Found wget ... using wget\"\n  wget ${__MVNW_QUIET_WGET:+\"$__MVNW_QUIET_WGET\"} \"$distributionUrl\" -O \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" || die \"wget: Failed to fetch $distributionUrl\"\nelif [ -z \"${MVNW_USERNAME-}\" ] && command -v curl >/dev/null; then\n  verbose \"Found curl ... using curl\"\n  curl ${__MVNW_QUIET_CURL:+\"$__MVNW_QUIET_CURL\"} -f -L -o \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" \"$distributionUrl\" || die \"curl: Failed to fetch $distributionUrl\"\nelif set_java_home; then\n  verbose \"Falling back to use Java to download\"\n  javaSource=\"$TMP_DOWNLOAD_DIR/Downloader.java\"\n  targetZip=\"$TMP_DOWNLOAD_DIR/$distributionUrlName\"\n  cat >\"$javaSource\" <<-END\n\tpublic class Downloader extends java.net.Authenticator\n\t{\n\t  protected java.net.PasswordAuthentication getPasswordAuthentication()\n\t  {\n\t    return new java.net.PasswordAuthentication( System.getenv( \"MVNW_USERNAME\" ), System.getenv( \"MVNW_PASSWORD\" ).toCharArray() );\n\t  }\n\t  public static void main( String[] args ) throws Exception\n\t  {\n\t    setDefault( new Downloader() );\n\t    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );\n\t  }\n\t}\n\tEND\n  # For Cygwin/MinGW, switch paths to Windows format before running javac and java\n  verbose \" - Compiling Downloader.java ...\"\n  \"$(native_path \"$JAVACCMD\")\" \"$(native_path \"$javaSource\")\" || die \"Failed to compile Downloader.java\"\n  verbose \" - Running Downloader.java ...\"\n  \"$(native_path \"$JAVACMD\")\" -cp \"$(native_path \"$TMP_DOWNLOAD_DIR\")\" Downloader \"$distributionUrl\" \"$(native_path \"$targetZip\")\"\nfi\n\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\nif [ -n \"${distributionSha256Sum-}\" ]; then\n  distributionSha256Result=false\n  if [ \"$MVN_CMD\" = mvnd.sh ]; then\n    echo \"Checksum validation is not supported for maven-mvnd.\" >&2\n    echo \"Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  elif command -v sha256sum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | sha256sum -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  elif command -v shasum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | shasum -a 256 -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\" >&2\n    echo \"Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  fi\n  if [ $distributionSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified distributionSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\n# unzip and move\nif command -v unzip >/dev/null; then\n  unzip ${__MVNW_QUIET_UNZIP:+\"$__MVNW_QUIET_UNZIP\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -d \"$TMP_DOWNLOAD_DIR\" || die \"failed to unzip\"\nelse\n  tar xzf${__MVNW_QUIET_TAR:+\"$__MVNW_QUIET_TAR\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -C \"$TMP_DOWNLOAD_DIR\" || die \"failed to untar\"\nfi\nprintf %s\\\\n \"$distributionUrl\" >\"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url\"\nmv -- \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" \"$MAVEN_HOME\" || [ -d \"$MAVEN_HOME\" ] || die \"fail to move MAVEN_HOME\"\n\nclean || :\nexec_maven \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.8955078125,
          "content": "<# : batch portion\r\n@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.3.2\r\n@REM\r\n@REM Optional ENV vars\r\n@REM   MVNW_REPOURL - repo url base for downloading maven distribution\r\n@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\r\n@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@IF \"%__MVNW_ARG0_NAME__%\"==\"\" (SET __MVNW_ARG0_NAME__=%~nx0)\r\n@SET __MVNW_CMD__=\r\n@SET __MVNW_ERROR__=\r\n@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%\r\n@SET PSModulePath=\r\n@FOR /F \"usebackq tokens=1* delims==\" %%A IN (`powershell -noprofile \"& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}\"`) DO @(\r\n  IF \"%%A\"==\"MVN_CMD\" (set __MVNW_CMD__=%%B) ELSE IF \"%%B\"==\"\" (echo %%A) ELSE (echo %%A=%%B)\r\n)\r\n@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%\r\n@SET __MVNW_PSMODULEP_SAVE=\r\n@SET __MVNW_ARG0_NAME__=\r\n@SET MVNW_USERNAME=\r\n@SET MVNW_PASSWORD=\r\n@IF NOT \"%__MVNW_CMD__%\"==\"\" (%__MVNW_CMD__% %*)\r\n@echo Cannot start maven from wrapper >&2 && exit /b 1\r\n@GOTO :EOF\r\n: end batch / begin powershell #>\r\n\r\n$ErrorActionPreference = \"Stop\"\r\nif ($env:MVNW_VERBOSE -eq \"true\") {\r\n  $VerbosePreference = \"Continue\"\r\n}\r\n\r\n# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties\r\n$distributionUrl = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionUrl\r\nif (!$distributionUrl) {\r\n  Write-Error \"cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties\"\r\n}\r\n\r\nswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {\r\n  \"maven-mvnd-*\" {\r\n    $USE_MVND = $true\r\n    $distributionUrl = $distributionUrl -replace '-bin\\.[^.]*$',\"-windows-amd64.zip\"\r\n    $MVN_CMD = \"mvnd.cmd\"\r\n    break\r\n  }\r\n  default {\r\n    $USE_MVND = $false\r\n    $MVN_CMD = $script -replace '^mvnw','mvn'\r\n    break\r\n  }\r\n}\r\n\r\n# apply MVNW_REPOURL and calculate MAVEN_HOME\r\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\r\nif ($env:MVNW_REPOURL) {\r\n  $MVNW_REPO_PATTERN = if ($USE_MVND) { \"/org/apache/maven/\" } else { \"/maven/mvnd/\" }\r\n  $distributionUrl = \"$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')\"\r\n}\r\n$distributionUrlName = $distributionUrl -replace '^.*/',''\r\n$distributionUrlNameMain = $distributionUrlName -replace '\\.[^.]*$','' -replace '-bin$',''\r\n$MAVEN_HOME_PARENT = \"$HOME/.m2/wrapper/dists/$distributionUrlNameMain\"\r\nif ($env:MAVEN_USER_HOME) {\r\n  $MAVEN_HOME_PARENT = \"$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain\"\r\n}\r\n$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString(\"x2\")}) -join ''\r\n$MAVEN_HOME = \"$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME\"\r\n\r\nif (Test-Path -Path \"$MAVEN_HOME\" -PathType Container) {\r\n  Write-Verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\r\n  Write-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n  exit $?\r\n}\r\n\r\nif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {\r\n  Write-Error \"distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl\"\r\n}\r\n\r\n# prepare tmp dir\r\n$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile\r\n$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path \"$TMP_DOWNLOAD_DIR_HOLDER.dir\"\r\n$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null\r\ntrap {\r\n  if ($TMP_DOWNLOAD_DIR.Exists) {\r\n    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n    catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n  }\r\n}\r\n\r\nNew-Item -Itemtype Directory -Path \"$MAVEN_HOME_PARENT\" -Force | Out-Null\r\n\r\n# Download and Install Apache Maven\r\nWrite-Verbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\r\nWrite-Verbose \"Downloading from: $distributionUrl\"\r\nWrite-Verbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\r\n\r\n$webclient = New-Object System.Net.WebClient\r\nif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {\r\n  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)\r\n}\r\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n$webclient.DownloadFile($distributionUrl, \"$TMP_DOWNLOAD_DIR/$distributionUrlName\") | Out-Null\r\n\r\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\r\n$distributionSha256Sum = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionSha256Sum\r\nif ($distributionSha256Sum) {\r\n  if ($USE_MVND) {\r\n    Write-Error \"Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\"\r\n  }\r\n  Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash\r\n  if ((Get-FileHash \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {\r\n    Write-Error \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property.\"\r\n  }\r\n}\r\n\r\n# unzip and move\r\nExpand-Archive \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -DestinationPath \"$TMP_DOWNLOAD_DIR\" | Out-Null\r\nRename-Item -Path \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" -NewName $MAVEN_HOME_NAME | Out-Null\r\ntry {\r\n  Move-Item -Path \"$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME\" -Destination $MAVEN_HOME_PARENT | Out-Null\r\n} catch {\r\n  if (! (Test-Path -Path \"$MAVEN_HOME\" -PathType Container)) {\r\n    Write-Error \"fail to move MAVEN_HOME\"\r\n  }\r\n} finally {\r\n  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n  catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n}\r\n\r\nWrite-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n"
        },
        {
          "name": "owasp-check-suppressions.xml",
          "type": "blob",
          "size": 7.3466796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd\">\n    <suppress>\n        <notes><![CDATA[\n      False positive. The hazelcast:hazelcast component vulnerabilities are related to Hazelcast IMDG version and not the integration - hazelcast-gcp.\n      ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.hazelcast/hazelcast-gcp@.*$</packageUrl>\n        <cpe>cpe:/a:hazelcast:hazelcast</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n      False positive. The hazelcast:hazelcast component vulnerabilities are related to Hazelcast IMDG version and not the integration - hazelcast-azure.\n      ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.hazelcast/hazelcast-azure@.*$</packageUrl>\n        <cpe>cpe:/a:hazelcast:hazelcast</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n      False positive. The hazelcast:hazelcast component vulnerabilities are related to Hazelcast IMDG version and not the integration - hazelcast-wm.\n      ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.hazelcast/hazelcast-wm@.*$</packageUrl>\n        <cpe>cpe:/a:hazelcast:hazelcast</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The Avatica version is not related to the Calcite version.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.calcite\\.avatica/avatica\\-core@.*$</packageUrl>\n        <cpe>cpe:/a:apache:calcite</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the Hazelcast version and not the jsurfer.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.hazelcast\\.jsurfer/jsurfer\\-.*$</packageUrl>\n        <cpe>cpe:/a:hazelcast:hazelcast</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the postgres version and not the debezium-connector-postgres.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/io\\.debezium/debezium\\-connector\\-postgres@.*$</packageUrl>\n        <cpe>cpe:/a:postgresql:postgresql</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the Hadoop version and not the shaded guava.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.hadoop\\.thirdparty/hadoop\\-shaded\\-guava@.*$</packageUrl>\n        <cpe>cpe:/a:apache:hadoop</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the Hadoop version and not the shaded protobuf.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.hadoop\\.thirdparty/hadoop\\-shaded\\-protobuf_3_7@.*$</packageUrl>\n        <cpe>cpe:/a:apache:hadoop</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the Hadoop version and not the shaded protobuf.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.hadoop\\.thirdparty/hadoop\\-shaded\\-protobuf_3_21@.*$</packageUrl>\n        <cpe>cpe:/a:apache:hadoop</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the MySQL version and not the MySQL Binary Log connector.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.github\\.shyiko/mysql\\-binlog\\-connector\\-java@.*$</packageUrl>\n        <cpe>cpe:/a:mysql:mysql</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the MySQL version and not the MySQL Binary Log connector.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.zendesk/mysql\\-binlog\\-connector\\-java@.*$</packageUrl>\n        <cpe>cpe:/a:mysql:mysql</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the MySQL version and not the MySQL Debezium connector.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/io\\.debezium/debezium\\-connector\\-mysql@.*$</packageUrl>\n        <cpe>cpe:/a:mysql:mysql</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive. The flaws are relatated to the WildFly and OpenSSL version and not the wildfly-openssl library.\n        The OpenSSL is linked dynamically in the wildly-openssl.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.wildfly\\.openssl/wildfly\\-openssl.*@.*$</packageUrl>\n        <cpe>cpe:/a:openssl:openssl</cpe>\n        <cpe>cpe:/a:redhat:openssl</cpe>\n        <cpe>cpe:/a:redhat:wildfly</cpe>\n        <cpe>cpe:/a:wildfly:wildfly</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        The memory leak was fixed already in the wildfly-openssl-1.0.11.Final.jar\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.wildfly\\.openssl/wildfly\\-openssl.*@1\\.0\\.12.*$</packageUrl>\n        <cve>CVE-2020-25644</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - these log4j CVEs have the fixes present in the version 1.2.17.redhat-00008.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/log4j/log4j@.*$</packageUrl>\n        <cve>CVE-2020-9488</cve>\n        <cve>CVE-2020-9493</cve>\n        <cve>CVE-2022-23307</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - google-http-client-gson-.*.jar incorrectly identified as gson.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.google\\.http\\-client/google\\-http\\-client\\-gson@.*$</packageUrl>\n        <cpe>cpe:/a:google:gson</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - json version 20230227 have already fix for listed CVE.\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.json/json@20230227.*$</packageUrl>\n        <cve>CVE-2022-45688</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - this CVE is not a security issue according to jackson community\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.fasterxml\\.jackson\\.core/jackson\\-databind@.*$</packageUrl>\n        <cve>CVE-2023-35116</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - CVE-2023-37475 affects Avro Go lib but is falsely linked to Maven lib\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.avro/avro@.*$</packageUrl>\n        <cpe>cpe:/a:avro_project:avro</cpe>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - CVE-2023-37475 affects Avro Go lib but is falsely linked to Maven lib\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.parquet/parquet\\-avro@.*$</packageUrl>\n        <cve>CVE-2023-37475</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - CVE-2023-37475 affects Avro Go lib but is falsely linked to Maven lib\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/org\\.apache\\.avro/avro\\-mapred@.*$</packageUrl>\n        <cve>CVE-2023-37475</cve>\n    </suppress>\n    <suppress>\n        <notes><![CDATA[\n        False positive - Maven libs from opentelemetry are identified as GO and Python libs\n        ]]></notes>\n        <packageUrl regex=\"true\">^pkg:maven/com\\.google\\.cloud\\.opentelemetry/.*$</packageUrl>\n        <cve>CVE-2023-43810</cve>\n        <cve>CVE-2023-45142</cve>\n        <cve>CVE-2023-47108</cve>\n    </suppress>\n</suppressions>\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 51.7880859375,
          "content": "<!--\n  ~ Copyright (c) 2008-2025, Hazelcast, Inc. All Rights Reserved.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>com.hazelcast</groupId>\n        <artifactId>hazelcast-parent</artifactId>\n        <version>6.0.0-SNAPSHOT</version>\n        <relativePath>hazelcast-parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>hazelcast-root</artifactId>\n    <packaging>pom</packaging>\n    <version>6.0.0-SNAPSHOT</version>\n    <name>Hazelcast Root</name>\n    <description>Hazelcast In-Memory DataGrid</description>\n    <url>http://www.hazelcast.com/</url>\n\n    <modules>\n        <module>hazelcast-parent</module>\n        <module>hazelcast-tpc-engine</module>\n        <module>hazelcast</module>\n        <module>hazelcast-archunit-rules</module>\n        <module>hazelcast-spring</module>\n        <module>hazelcast-spring-tests</module>\n        <module>hazelcast-build-utils</module>\n        <module>hazelcast-sql</module>\n    </modules>\n\n    <properties>\n        <main.basedir>${project.basedir}</main.basedir>\n        <target.dir>target</target.dir>\n        <timestamp>${maven.build.timestamp}</timestamp>\n\n        <hazelcast.distribution>Hazelcast</hazelcast.distribution>\n        <hazelcast.serialization.version>1</hazelcast.serialization.version>\n        <hazelcast.serverMainClass>com.hazelcast.core.server.HazelcastMemberStarter</hazelcast.serverMainClass>\n\n        <!-- Additional JVM system arguments -->\n        <extraVmArgs/>\n        <vmHeapSettings>-Xms512m -Xmx2G</vmHeapSettings>\n        <!-- Java 9+ module system args to be appended during surefire/failsafe executions. -->\n        <hazelcast.module.name>ALL-UNNAMED</hazelcast.module.name>\n\n        <!-- needed for CheckStyle -->\n        <checkstyle.configLocation>${main.basedir}/checkstyle/checkstyle.xml</checkstyle.configLocation>\n        <checkstyle.supressionsLocation>${main.basedir}/checkstyle/suppressions.xml</checkstyle.supressionsLocation>\n        <checkstyle.headerLocation>${main.basedir}/checkstyle/ClassHeaderApache.txt</checkstyle.headerLocation>\n\n        <shade.jar-with-dependencies.phase>package</shade.jar-with-dependencies.phase>\n        <fat.dependency.classifier>jar-with-dependencies</fat.dependency.classifier>\n\n        <!--\n        Allow access to Operating system metrics:\n           open jdk.management/com.sun.management.internal\n           export jdk.management/com.ibm.lang.management.internal\n\n        Avoid warnings caused by reflection in\n        SelectorOptimizer:\n           open java.base/sun.nio.ch\n        FilteringClassLoader:\n           open java.base/java.lang\n        TimedMemberStateFactoryHelper:\n           open java.management/sun.management\n\n        NOTE: There are additional arguments for IBM OpenJ9, see the specific profile\n        -->\n        <javaStandardModuleArgs>\n            --add-exports java.base/jdk.internal.ref=${hazelcast.module.name}\n            --add-opens jdk.management/com.sun.management.internal=${hazelcast.module.name}\n            --add-opens java.base/sun.nio.ch=${hazelcast.module.name}\n            --add-opens java.base/java.lang=${hazelcast.module.name}\n            --add-opens java.management/sun.management=${hazelcast.module.name}\n        </javaStandardModuleArgs>\n        <javaModuleArgs>${javaStandardModuleArgs}</javaModuleArgs>\n    </properties>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n    <scm>\n        <connection>scm:git:git://github.com/hazelcast/hazelcast.git</connection>\n        <developerConnection>scm:git:git@github.com:hazelcast/hazelcast.git</developerConnection>\n        <url>https://github.com/hazelcast/hazelcast/</url>\n    </scm>\n    <developers>\n        <developer>\n            <id>hazelcast-team</id>\n            <name>Hazelcast team</name>\n            <email>info@hazelcast.com</email>\n            <organization>Hazelcast, Inc.</organization>\n            <organizationUrl>https://hazelcast.com</organizationUrl>\n        </developer>\n    </developers>\n\n    <contributors>\n        <contributor>\n            <name>Hazelcast Community</name>\n            <email>info@hazelcast.com</email>\n            <url>https://hazelcast.atlassian.net/wiki/display/COM/Hazelcast+Contributor+Agreement</url>\n        </contributor>\n    </contributors>\n\n    <issueManagement>\n        <system>Github</system>\n        <url>https://github.com/hazelcast/hazelcast/issues</url>\n    </issueManagement>\n    <organization>\n        <name>Hazelcast, Inc.</name>\n        <url>http://www.hazelcast.com/</url>\n    </organization>\n\n    <build>\n        <sourceDirectory>src/main/java</sourceDirectory>\n        <outputDirectory>${target.dir}/classes</outputDirectory>\n        <testSourceDirectory>src/test/java</testSourceDirectory>\n        <testOutputDirectory>${target.dir}/test-classes</testOutputDirectory>\n\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n                <includes>\n                    <include>**/*.html</include>\n                    <include>**/*.bat</include>\n                    <include>**/*.sh</include>\n                    <include>**/*.py</include>\n                    <include>**/*.properties</include>\n                    <include>**/*.xml</include>\n                    <include>**/*.yaml</include>\n                    <include>**/*.xsd</include>\n                    <include>**/*.txt</include>\n                    <include>**/hazelcast-config-*.json</include>\n                    <include>**/*.handlers</include>\n                    <include>**/*.schemas</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>false</filtering>\n                <includes>\n                    <include>**/*.so</include>\n                    <include>**/*.license</include>\n                    <include>**/*.key</include>\n                    <include>**/*.ftl</include>\n                    <include>**/META-INF/services/*.*</include>\n                </includes>\n            </resource>\n        </resources>\n\n        <!-- ignore the testjob module -->\n        <testResources>\n            <testResource>\n                <directory>src/test/resources</directory>\n                <excludes>\n                    <exclude>com/hazelcast/jet/server/testjob/**</exclude>\n                </excludes>\n            </testResource>\n        </testResources>\n\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <configuration combine.self=\"override\">\n                    <useFile>false</useFile>\n                    <trimStackTrace>false</trimStackTrace>\n                    <runOrder>failedfirst</runOrder>\n\n                    <!-- 1C means 1 process per cpu core -->\n                    <!-- forkCount>1C</forkCount>\n                    <reuseForks>true</reuseForks>\n\n                    <threadCount>1</threadCount>\n                    <perCoreThreadCount>true</perCoreThreadCount>\n                    <parallel>methods</parallel -->\n                    <!-- JaCoCo will use the argLine set here. Test profiles override it. -->\n                    <argLine>\n                        ${vmHeapSettings}\n                        ${javaModuleArgs}\n                        -Dhazelcast.phone.home.enabled=false\n                        -Dhazelcast.test.use.network=false\n                        -Dlog4j.skipJansi=true\n                        ${extraVmArgs}\n                    </argLine>\n                    <includes>\n                        <include>**/**.java</include>\n                    </includes>\n                    <excludes>\n                        <exclude>**/jsr/**.java</exclude>\n                        <exclude>**/**IT.java</exclude>\n                    </excludes>\n                    <excludedGroups>\n                        com.hazelcast.test.annotation.SlowTest,\n                        com.hazelcast.test.annotation.NightlyTest\n                    </excludedGroups>\n                    <!-- Use TCP for IPC communication to avoid warnings: Corrupted STDOUT by directly writing... -->\n                    <forkNode implementation=\"org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory\"/>\n                    <!-- Fixes missing parameters in test name for tests run via mvn -->\n                    <statelessTestsetReporter\n                            implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                        <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                    </statelessTestsetReporter>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <configuration combine.self=\"override\">\n                    <trimStackTrace>false</trimStackTrace>\n                    <argLine>\n                        ${vmHeapSettings}\n                        ${javaModuleArgs}\n                        -Dhazelcast.phone.home.enabled=false\n                        -Dhazelcast.test.use.network=true\n                        -Dlog4j.skipJansi=true\n                        ${extraVmArgs}\n                    </argLine>\n                    <useManifestOnlyJar>false</useManifestOnlyJar>\n                    <useSystemClassLoader>true</useSystemClassLoader>\n                    <excludedGroups>\n                        com.hazelcast.test.annotation.SlowTest,\n                        com.hazelcast.test.annotation.NightlyTest\n                    </excludedGroups>\n                    <!-- Use TCP for IPC communication to avoid warnings: Corrupted STDOUT by directly writing... -->\n                    <forkNode implementation=\"org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory\"/>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>integration-test</goal>\n                            <goal>verify</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <artifactId>maven-resources-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>add-notice-and-license</id>\n                        <phase>none</phase>\n                        <goals>\n                            <goal>copy-resources</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${project.build.outputDirectory}/META-INF</outputDirectory>\n                            <resources>\n                                <resource>\n                                    <directory>..</directory>\n                                    <includes>\n                                        <include>NOTICE</include>\n                                    </includes>\n                                </resource>\n                                <resource>\n                                    <!-- Don't include the top level LICENSE file which is valid for whole repository\n                                         use rather the ASF license file located in hazelcast-build-utils module.-->\n                                    <directory>../hazelcast-build-utils/src/main/resources</directory>\n                                    <includes>\n                                        <include>LICENSE</include>\n                                    </includes>\n                                </resource>\n                            </resources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.owasp</groupId>\n                <artifactId>dependency-check-maven</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>get-hz-3</id>\n                        <goals>\n                            <goal>get</goal>\n                        </goals>\n                        <phase>generate-test-resources</phase>\n                        <configuration>\n                            <artifact>com.hazelcast:hazelcast:4.0</artifact>\n                            <artifact>com.hazelcast:hazelcast:4.0:jar:tests</artifact>\n\n                            <artifact>com.hazelcast:hazelcast:4.0.1</artifact>\n                            <artifact>com.hazelcast:hazelcast:4.0.1:jar:tests</artifact>\n\n                            <artifact>com.hazelcast:hazelcast:4.0.2</artifact>\n                            <artifact>com.hazelcast:hazelcast:4.0.2:jar:tests</artifact>\n\n                            <artifact>com.hazelcast:hazelcast:4.0.3</artifact>\n                            <artifact>com.hazelcast:hazelcast:4.0.3:jar:tests</artifact>\n\n                        </configuration>\n                    </execution>\n                </executions>\n                <inherited>false</inherited>\n            </plugin>\n        </plugins>\n    </build>\n\n    <profiles>\n        <profile>\n            <!--\n            Executes:\n            - `ParallelJVMTest`s in parallel via several surefire forks (note: inside the fork tests still run serially)\n            - Excludes:\n                - `SlowTest`\n                - `NightlyTest`\n            - Typically `QuickTest`s\n\n            Duplicated in OS & EE\n\n            used by the PR builder\n            -->\n            <id>parallelTest</id>\n            <properties>\n                <skip-singlejvm-tests>false</skip-singlejvm-tests>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>default-test</id>\n                                <phase>test</phase>\n                                <goals>\n                                    <goal>test</goal>\n                                </goals>\n                                <configuration combine.self=\"override\">\n                                    <useFile>false</useFile>\n                                    <trimStackTrace>false</trimStackTrace>\n                                    <!-- 0.5C means half as many forks as cpu cores -->\n                                    <forkCount>0.5C</forkCount>\n                                    <reuseForks>true</reuseForks>\n                                    <argLine>\n                                        ${vmHeapSettings}\n                                        ${javaModuleArgs}\n                                        -ea\n                                        -Dhazelcast.phone.home.enabled=false\n                                        -Dhazelcast.test.use.network=false\n                                        -Dhazelcast.test.multiple.jvm=true\n                                        -Dlog4j.configurationFile=log4j2.xml\n                                        -Dlog4j.skipJansi=true\n                                        ${extraVmArgs}\n                                    </argLine>\n                                    <includes>\n                                        <include>**/**.java</include>\n                                    </includes>\n                                    <excludes>\n                                        <exclude>**/jsr/**.java</exclude>\n                                        <exclude>**/**IT.java</exclude>\n                                    </excludes>\n                                    <groups>\n                                        com.hazelcast.test.annotation.ParallelJVMTest\n                                    </groups>\n                                    <excludedGroups>\n                                        com.hazelcast.test.annotation.SlowTest,\n                                        com.hazelcast.test.annotation.NightlyTest\n                                    </excludedGroups>\n                                    <systemPropertyVariables>\n                                        <multipleJVM>true</multipleJVM>\n                                    </systemPropertyVariables>\n                                    <!-- Fixes missing parameters in test name for tests run via mvn -->\n                                    <statelessTestsetReporter\n                                            implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                        <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                                    </statelessTestsetReporter>\n                                </configuration>\n                            </execution>\n                            <execution>\n                                <id>singlejvm</id>\n                                <phase>test</phase>\n                                <goals>\n                                    <goal>test</goal>\n                                </goals>\n                                <configuration combine.self=\"override\">\n                                    <skip>${skip-singlejvm-tests}</skip>\n                                    <useFile>false</useFile>\n                                    <trimStackTrace>false</trimStackTrace>\n                                    <argLine>\n                                        ${vmHeapSettings}\n                                        ${javaModuleArgs}\n                                        -Dhazelcast.phone.home.enabled=false\n                                        -Dhazelcast.test.use.network=false\n                                        -Dlog4j.configurationFile=log4j2.xml\n                                        -Dlog4j.skipJansi=true\n                                        ${extraVmArgs}\n                                    </argLine>\n                                    <includes>\n                                        <include>**/**.java</include>\n                                    </includes>\n                                    <excludes>\n                                        <exclude>**/jsr/**.java</exclude>\n                                        <exclude>**/**IT.java</exclude>\n                                    </excludes>\n                                    <excludedGroups>\n                                        com.hazelcast.test.annotation.SlowTest,\n                                        com.hazelcast.test.annotation.NightlyTest,\n                                        com.hazelcast.test.annotation.ParallelJVMTest\n                                    </excludedGroups>\n                                    <!-- Fixes missing parameters in test name for tests run via mvn -->\n                                    <statelessTestsetReporter\n                                            implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                        <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                                    </statelessTestsetReporter>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-failsafe-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <useFile>false</useFile>\n                            <trimStackTrace>false</trimStackTrace>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=false\n                                -Dlog4j.configurationFile=log4j2.xml\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <useManifestOnlyJar>false</useManifestOnlyJar>\n                            <useSystemClassLoader>true</useSystemClassLoader>\n                            <excludedGroups>\n                                com.hazelcast.test.annotation.SlowTest,\n                                com.hazelcast.test.annotation.NightlyTest\n                            </excludedGroups>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>integration-test</goal>\n                                    <goal>verify</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <!--\n            Configures execution to optimize runtime of the PR builder, by excluding tasks not required for build validation (e.g., shading)\n            -->\n            <id>pr-builder</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-assembly-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>usercodedeployment-child-parent</id>\n                                <configuration>\n                                    <skipAssembly>false</skipAssembly>\n                                </configuration>\n                            </execution>\n                            <execution>\n                                <id>usercodedeployment-entry-processor-with-anonymous-and-inner</id>\n                                <configuration>\n                                    <skipAssembly>false</skipAssembly>\n                                </configuration>\n                            </execution>\n                            <execution>\n                                <id>usercodedeployment-incrementing-entry-processor</id>\n                                <configuration>\n                                    <skipAssembly>false</skipAssembly>\n                                </configuration>\n                            </execution>\n                            <execution>\n                                <id>usercodedeployment-incrementing-entry-processor-conflicting</id>\n                                <configuration>\n                                    <skipAssembly>false</skipAssembly>\n                                </configuration>\n                            </execution>\n                            <execution>\n                                <id>usercodedeployment-shaded-classes</id>\n                                <configuration>\n                                    <skipAssembly>false</skipAssembly>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n            <properties>\n                <!--\n                    To improve PR builder runtime, skip *some* assembly-plugins that are not required for build validation\n                    https://github.com/hazelcast/hazelcast/pull/18521\n                -->\n                <assembly.skipAssembly>true</assembly.skipAssembly>\n                <!-- Set the classifier to empty in this profile to use regular jar-->\n                <fat.dependency.classifier/>\n                <shade.jar-with-dependencies.phase>none</shade.jar-with-dependencies.phase>\n            </properties>\n        </profile>\n\n        <profile>\n            <id>test-coverage-Local</id>\n            <properties>\n                <vmHeapSettings>-Xms128m -Xmx1G</vmHeapSettings>\n            </properties>\n            <modules>\n                <module>hazelcast-coverage-report</module>\n            </modules>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>cobertura-maven-plugin</artifactId>\n                        <configuration>\n                            <instrumentation>\n                                <ignores/>\n                                <excludes/>\n                            </instrumentation>\n                            <check/>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>clean</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <useFile>false</useFile>\n                            <trimStackTrace>false</trimStackTrace>\n                            <testFailureIgnore>true</testFailureIgnore>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=false\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <includes>\n                                <include>**/YourTestFileHear.java</include>\n                            </includes>\n                            <!-- Fixes missing parameters in test name for tests run via mvn -->\n                            <statelessTestsetReporter\n                                    implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                            </statelessTestsetReporter>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n            <reporting>\n                <plugins>\n                    <plugin>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>cobertura-maven-plugin</artifactId>\n                    </plugin>\n                </plugins>\n            </reporting>\n        </profile>\n\n        <profile>\n            <id>test-coverage</id>\n            <modules>\n                <module>hazelcast-coverage-report</module>\n            </modules>\n            <properties>\n                <argLine>\n                    ${vmHeapSettings}\n                    ${javaModuleArgs}\n                    -Dhazelcast.phone.home.enabled=false\n                    -Dhazelcast.test.use.network=false\n                    -Dhazelcast.operation.call.timeout.millis=120000\n                    -Dhazelcast.graceful.shutdown.max.wait=240\n                    -Dlog4j.skipJansi=true\n                    ${extraVmArgs}\n                </argLine>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.jacoco</groupId>\n                        <artifactId>jacoco-maven-plugin</artifactId>\n                        <configuration>\n                            <excludes>\n                                <exclude>**DummyProperty**</exclude>\n                                <exclude>**DummyEntity**</exclude>\n                                <exclude>**test-hibernate**</exclude>\n                                <exclude>**HibernateStatisticsTestSupport**</exclude>\n                                <exclude>**HibernateTestSupport**</exclude>\n                                <exclude>**RegionFactoryDefaultTest**</exclude>\n                            </excludes>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>prepare-agent</id>\n                                <goals>\n                                    <goal>prepare-agent</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <useFile>false</useFile>\n                            <trimStackTrace>false</trimStackTrace>\n                            <testFailureIgnore>true</testFailureIgnore>\n                            <includes>\n                                <include>**/*.java</include>\n                            </includes>\n                            <excludes>\n                                <exclude>**/**IT.java</exclude>\n                            </excludes>\n                            <excludedGroups>\n                                com.hazelcast.test.annotation.NightlyTest\n                            </excludedGroups>\n                            <!-- Fixes missing parameters in test name for tests run via mvn -->\n                            <statelessTestsetReporter\n                                    implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                            </statelessTestsetReporter>\n                        </configuration>\n                    </plugin>\n\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-failsafe-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <trimStackTrace>false</trimStackTrace>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=true\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <excludedGroups>\n                                com.hazelcast.test.annotation.NightlyTest\n                            </excludedGroups>\n                            <useManifestOnlyJar>false</useManifestOnlyJar>\n                            <useSystemClassLoader>true</useSystemClassLoader>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>integration-test</goal>\n                                    <goal>verify</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <id>release-devel</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>com.hazelcast.maven</groupId>\n                        <artifactId>attribution-maven-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>aggregated-attribution-oss</id>\n                                <inherited>false</inherited>\n                                <goals>\n                                    <goal>aggregate</goal>\n                                </goals>\n                                <configuration>\n                                    <outputFile>${project.build.directory}/aggregated-attribution/attribution.txt</outputFile>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.sonatype.plugins</groupId>\n                        <artifactId>nexus-staging-maven-plugin</artifactId>\n                        <version>1.7.0</version>\n                        <extensions>true</extensions>\n                        <configuration>\n                            <serverId>release-repository</serverId>\n                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                            <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>com.hazelcast.maven</groupId>\n                        <artifactId>attribution-maven-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>aggregated-attribution-oss</id>\n                                <inherited>false</inherited>\n                                <goals>\n                                    <goal>aggregate</goal>\n                                </goals>\n                                <configuration>\n                                    <outputFile>${project.build.directory}/aggregated-attribution/attribution.txt</outputFile>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <!--\n            Executes:\n            - `SlowTest`s\n            - `NightlyTest`s\n            - Excludes all other tests\n\n            Duplicated in OS & EE\n\n            Used for scheduled, longer running tests\n            -->\n            <id>nightly-build</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <parallel>none</parallel>\n                            <useFile>false</useFile>\n                            <trimStackTrace>false</trimStackTrace>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=false\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <groups>\n                                com.hazelcast.test.annotation.NightlyTest,\n                                com.hazelcast.test.annotation.SlowTest\n                            </groups>\n                            <includes>\n                                <include>**/**Test.java</include>\n                            </includes>\n                            <excludes>\n                                <exclude>**/**IT.java</exclude>\n                                <exclude>**/jsr/**.java</exclude>\n                            </excludes>\n                            <!-- Fixes missing parameters in test name for tests run via mvn -->\n                            <statelessTestsetReporter\n                                    implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                            </statelessTestsetReporter>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-failsafe-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <trimStackTrace>false</trimStackTrace>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=true\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <useManifestOnlyJar>false</useManifestOnlyJar>\n                            <useSystemClassLoader>true</useSystemClassLoader>\n                            <includes>\n                                <include>**/*IT.java</include>\n                            </includes>\n                            <groups>\n                                com.hazelcast.test.annotation.NightlyTest,\n                                com.hazelcast.test.annotation.SlowTest\n                            </groups>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>integration-test</goal>\n                                    <goal>verify</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <!--\n            Executes all tests (`QuickTest` and `SlowTest`)\n\n            Duplicated in OS & EE\n            -->\n            <id>all-tests</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <useFile>false</useFile>\n                            <trimStackTrace>false</trimStackTrace>\n                            <parallel>none</parallel>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=false\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <includes>\n                                <include>**/**.java</include>\n                            </includes>\n                            <excludes>\n                                <exclude>**/jsr/**.java</exclude>\n                                <exclude>**/**IT.java</exclude>\n                            </excludes>\n                            <!-- Use TCP for IPC communication to avoid warnings: Corrupted STDOUT by directly writing... -->\n                            <forkNode implementation=\"org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory\"/>\n                            <!-- Fixes missing parameters in test name for tests run via mvn -->\n                            <statelessTestsetReporter\n                                    implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                            </statelessTestsetReporter>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-failsafe-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <trimStackTrace>false</trimStackTrace>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=true\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <useManifestOnlyJar>false</useManifestOnlyJar>\n                            <useSystemClassLoader>true</useSystemClassLoader>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>integration-test</goal>\n                                    <goal>verify</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <!--\n            Profile which allows to skip the modulepath-tests module.\n            The module runs by default, but can be skipped by adding -Dskip-modulepath-tests property.\n            This is used in PR builder when we run only `mvn test-compile` which is not possible due\n            to an automatic module name not being created in the hazelcast jar (no jar is built at all).\n            -->\n            <id>modulepath-tests</id>\n            <activation>\n                <property>\n                    <name>!skip-modulepath-tests</name>\n                </property>\n            </activation>\n            <modules>\n                <module>modulepath-tests</module>\n            </modules>\n        </profile>\n\n        <profile>\n            <!-- same as default build (excludes Nightly & Slow tests), outputs serialized objects to a blob -->\n            <!-- for compatibility testing -->\n            <id>generate-compatibility-samples</id>\n            <properties>\n                <vmHeapSettings>-Xms4G -Xmx8G</vmHeapSettings>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration combine.self=\"override\">\n                            <properties>\n                                <property>\n                                    <name>listener</name>\n                                    <value>com.hazelcast.test.compatibility.SamplingTestExecutionListener</value>\n                                </property>\n                            </properties>\n                            <trimStackTrace>false</trimStackTrace>\n                            <runOrder>failedfirst</runOrder>\n                            <argLine>\n                                ${vmHeapSettings}\n                                ${javaModuleArgs}\n                                -Dhazelcast.phone.home.enabled=false\n                                -Dhazelcast.test.use.network=false\n                                -Dhazelcast.test.sample.serialized.objects=${target.dir}/serialized-objects-${project.version}-\n                                -Dlog4j.skipJansi=true\n                                ${extraVmArgs}\n                            </argLine>\n                            <includes>\n                                <include>**/**.java</include>\n                            </includes>\n                            <excludes>\n                                <exclude>**/jsr/**.java</exclude>\n                                <!-- code triggered by UserCodeDeploymentSmokeTest and OperationRunnerImplTest -->\n                                <!-- casts to SerializationServiceV1 and fails when Node is configured with the -->\n                                <!-- sampling serialization service -->\n                                <exclude>**/OperationRunnerImplTest.java</exclude>\n                                <exclude>**/**IT.java</exclude>\n                                <exclude>**/jet/**/*.java</exclude>\n                                <exclude>**/*Jet*.java</exclude>\n                            </excludes>\n                            <excludedGroups>\n                                com.hazelcast.test.annotation.SlowTest,\n                                com.hazelcast.test.annotation.NightlyTest,\n                                com.hazelcast.test.annotation.SerializationSamplesExcluded\n                            </excludedGroups>\n                            <!-- Fixes missing parameters in test name for tests run via mvn -->\n                            <statelessTestsetReporter\n                                    implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter\">\n                                <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>\n                            </statelessTestsetReporter>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <!--\n            In isolation, does nothing as typically enabled by default\n            Works in conjunction with the `-Dquick` argument - which disables this profile - allowing additional modules to be skipped to reduce build time\n            This implementation is preferred as it also supports excluding child modules\n\n            Duplicated in OS & EE\n            -->\n            <id>not-quick</id>\n            <activation>\n                <property>\n                    <name>!quick</name>\n                </property>\n            </activation>\n            <modules>\n                <module>extensions</module>\n                <module>distribution</module>\n                <module>hazelcast-it</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>IBM</id>\n            <activation>\n                <property>\n                    <name>java.vendor</name>\n                    <value>IBM Corporation</value>\n                </property>\n            </activation>\n            <properties>\n                <javaModuleArgs>\n                    ${javaStandardModuleArgs}\n                    --add-exports jdk.management/com.ibm.lang.management.internal=${hazelcast.module.name}\n                </javaModuleArgs>\n            </properties>\n        </profile>\n    </profiles>\n\n    <dependencies>\n        <dependency>\n            <groupId>javax.cache</groupId>\n            <artifactId>cache-api</artifactId>\n            <version>${jsr107.api.version}</version>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.snakeyaml</groupId>\n            <artifactId>snakeyaml-engine</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.vintage</groupId>\n            <artifactId>junit-vintage-engine</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-params</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit-pioneer</groupId>\n            <artifactId>junit-pioneer</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>uk.org.webcompere</groupId>\n            <artifactId>system-stubs-jupiter</artifactId>\n            <version>2.1.7</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>uk.org.webcompere</groupId>\n            <artifactId>system-stubs-junit4</artifactId>\n            <version>2.1.7</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-junit-jupiter</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.reflections</groupId>\n            <artifactId>reflections</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-api</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-simple</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <scope>test</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.github.spotbugs</groupId>\n            <artifactId>spotbugs-annotations</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy-agent</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>nl.jqno.equalsverifier</groupId>\n            <artifactId>equalsverifier</artifactId>\n            <version>3.18.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n            <version>11.0.2</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}