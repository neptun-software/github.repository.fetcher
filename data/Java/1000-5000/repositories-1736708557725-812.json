{
  "metadata": {
    "timestamp": 1736708557725,
    "page": 812,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deeplearning4j/deeplearning4j-examples",
      "stars": 2470,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.0556640625,
          "content": "################################################################################\n#\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License, Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0.\nSee the NOTICE file distributed with this work for additional\ninformation regarding copyright ownership.\nSee the NOTICE file distributed with this work for additional\n  information regarding copyright ownership.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n################################################################################\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.java]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.40234375,
          "content": "################################################################################\n#\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License, Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0.\nSee the NOTICE file distributed with this work for additional\ninformation regarding copyright ownership.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n################################################################################\n\ntarget/\n.idea/*\n*.iml\nlogs/\n*.ser\n*.log\n*.ipynb_checkpoints\n*.pyc\ngraph-tmp/\n\n.DS_Store\npom.xml.releaseBackup\n\ndependency-reduced-pom.xml\napplication.home_IS_UNDEFINEiD\nREADME.md~\n*.png\n*.bin\n*.releaseBackup\n*.out\n*~\n.pydevproject\nrelease.properties\n.idea/\n*.prefs\n*.settings/*\nmodel-saver-*\nmnist-pretrain-dbn.bin-*\ndeeplearning4j-scaleout/deeplearning4j-aws/src/main/java/org/deeplearning4j/aws/ec2/provision/Ec2CommandRunner.java.settings/\n.project\n.classpath\n.settings/\nmetastore_db\n*.ipynb*\n!tutorials/*.ipynb\n*.html\nWord2vec-index/\n*.conf\n*.json\n!tutorials/*.json\n*end.model\n\narbiterExample/\ndl4j-examples/*.zip\n\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 2.12890625,
          "content": "# Contributing to dl4j-examples\n\nThanks for your interest in Deeplearning4j's examples. Our goal is to bring fast, open-source deep learning to all JVM-based communities.\n\n## Getting Started\n\nHere are Deeplearning4j's [open issues are here](https://github.com/eclipse/deeplearning4j/issues). In time, we'll tag issues that would make a good first pull request for new contributors. An easy way to get started helping the project is to *file an issue*. You can do that on the Deeplearning4j issues page by clicking on the green button at the right. Issues can include bugs to fix, features to add, or documentation that looks outdated. \n\nFor some tips on contributing to open source, this [post is helpful](http://blog.smartbear.com/programming/14-ways-to-contribute-to-open-source-without-being-a-programming-genius-or-a-rock-star/).\n\n## Contributions\n\nDeeplearning4j welcomes contributions from everyone.\n\nContributions to Deeplearning4j should be made in the form of GitHub pull requests. Each pull request will\nbe reviewed by a core contributor (someone with permission to land patches) and either landed in the\nmain tree or given feedback for changes that would be required.\n\n## Pull Request Checklist\n\n- Branch from the master branch and, if needed, rebase to the current master\n  branch before submitting your pull request. If it doesn't merge cleanly with\n  master you may be asked to rebase your changes.\n\n- Commits should be as small as possible, while ensuring that each commit is\n  correct independently (i.e., each commit should compile and pass tests). \n\n- Don't put submodule updates in your pull request unless they are to landed\n  commits.\n\n- If your patch is not getting reviewed or you need a specific person to review\n  it, you can @-reply a reviewer asking for a review in the pull request or a\n  comment.\n\n- Add tests relevant to the fixed bug or new feature.  \n\n## Conduct & License\n\nWe follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n\nAll code in this repository is released under the Apache Software Foundation License, 2.0, and by contributing to this repository, you agree to release your contribution under that same license. \n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.171875,
          "content": "Copyright (c) 2020 Konduit K.K\nCopyright 2015-2019 Skymind Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n##########################\n\n-- Misc files --\n*README.md\n*FAQ.md\n*readme.md\nCONTRIBUTORS.md\n.github/ISSUE_TEMPLATE.md\n.github/PULL_REQUEST_TEMPLATE.md\norg/deeplearning4j/examples/misc/customlayers/CustomLayerExampleReadme.md\nnd4j-ndarray-examples/src/main/resources/numpy_cheatsheet/file.txt\nnd4j-ndarray-examples/src/main/resources/numpy_cheatsheet/saveFile.txt\nnd4j-ndarray-examples/src/main/resources/numpyz.npz\npydatavec-examples/basic_example.csv\npydatavec-examples/reduction_example.csv\n\nCopyright (c) 2020 Konduit K.K\nCopyright (c) 2015-2019 Skymind, Inc.\nApache 2.0 License\n\n##########################\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.6650390625,
          "content": "Eclipse Deeplearning4j\nCopyright 2021 Eclipse Deeplearning4j Contributors\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nThis product includes software developed at\n* Skymind Inc  (Apache 2.0). Copyright (C) 2015-2018 Skymind Inc .\n\nThis product includes software developed at\n* Konduit KK  (Apache 2.0). Copyright (C) 2020.\n\n\nThis product includes software from the Tensorflow Project  (Apache 2.0).\n* Copyright (C) 2015-2018 Tensorflow Authors.\n\n# https://github.com/onnx/onnx\n\nThis product includes software from the Onnx Project project (Apache 2.0).\n* Copyright (C)  2020 Onnx Contributors (https://github.com/onnx/onnx)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9990234375,
          "content": "<pre>\n                                ########  ##       ##              ##\n                                ##     ## ##       ##    ##        ##\n                                ##     ## ##       ##    ##        ##\n                       **$**    ##     ## ##       ##    ##        ##    **$**\n                                ##     ## ##       ######### ##    ##\n                                ##     ## ##             ##  ##    ##\n                                ########  ########       ##   ######\n              .   :::: :   :    :   :     : ::::  :     ::::    :::::  :::: ::::  :::::   .\n              .   :    :   :   : :  ::   :: :   : :     :       :   :  :    :   : :   :   .\n              .   :     : :   :   : : : : : :   : :     :       :   :  :    :   : :   :   .\n              .   :::    :    :   : :  :  : ::::  :     :::     :::::  :::  ::::  :   :   .\n              .   :     : :   ::::: :     : :     :     :       :  :   :    :     :   :   .\n              .   :    :   :  :   : :     : :     :     :       :   :  :    :     :   :   .\n              .   :::: :   :  :   : :     : :     ::::: ::::    :    : :::: :     :::::   .\n</pre>\n\nFor support, please go over to:\nhttps://community.konduit.ai\n\nWe do not monitor the github issues of this repository very often.\n\n## Introduction\nThe **Eclipse Deeplearning4J** (DL4J) ecosystem is a set of projects intended to support all the needs of a JVM based deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks.\n\nThe DL4J stack comprises of:\n- **DL4J**: High level API to build MultiLayerNetworks and ComputationGraphs with a variety of layers, including custom ones. Supports importing Keras models from h5, including tf.keras models (as of 1.0.0-M2) and also supports distributed training on Apache Spark\n- **ND4J**: General purpose linear algebra library with over 500 mathematical, linear algebra and deep learning operations. ND4J is based on the highly-optimized C++ codebase LibND4J that provides CPU (AVX2/512) and GPU (CUDA) support and acceleration by libraries such as OpenBLAS, OneDNN (MKL-DNN), cuDNN, cuBLAS, etc\n- **SameDiff** : Part of the ND4J library, SameDiff is our automatic differentiation / deep learning framework. SameDiff uses a graph-based (define then run) approach, similar to TensorFlow graph mode. Eager graph (TensorFlow 2.x eager/PyTorch) graph execution is planned. SameDiff supports importing TensorFlow frozen model format .pb (protobuf) models. Import for ONNX, TensorFlow SavedModel and Keras models are planned. Deeplearning4j also has full SameDiff support for easily writing custom layers and loss functions.\n- **DataVec**: ETL for machine learning data in a wide variety of formats and files (HDFS, Spark, Images, Video, Audio, CSV, Excel etc)\n- **LibND4J** : C++ library that underpins everything. For more information on how the JVM accesses native arrays and operations refer to [JavaCPP](https://github.com/bytedeco/javacpp)\n\nAll projects in the DL4J ecosystem support Windows, Linux and macOS. Hardware support includes CUDA GPUs (10.0, 10.1, 10.2 except OSX), x86 CPU (x86_64, avx2, avx512), ARM CPU (arm, arm64, armhf) and PowerPC (ppc64le).\n\n## Prerequisites\nThis example repo consists of several separate Maven Java projects, each with their own pom files. Maven is a popular build automation tool for Java Projects. The contents of a \"pom.xml\" file dictate the configurations. Read more about how to configure Maven [here](https://deeplearning4j.konduit.ai/config/maven).\n\nUsers can also refer to the [simple sample project provided](./mvn-project-template/pom.xml) to get started with a clean project from scratch.\n\nBuild tools are considered standard software engineering best practice. Besides this the complexities posed by the projects in the DL4J ecosystem make dependencies too difficult to manage manually. All the projects in the DL4J ecosystem can be used with other build tools like Gradle, SBT etc. More information on that can be found [here](https://deeplearning4j.konduit.ai/config/buildtools).\n\n## Support\n\nFor help with the examples, please go to our [support forum](https://community.konduit.ai/)\n\nNote for users of 1.0.0-beta7 and prior, some examples and modules have been removed to reflect\nchanges in the framework's direction. Please see and comment on our post [here](https://community.konduit.ai/t/upcoming-removal-of-modules-and-roadmap-changes/1240)\n\nIf you would like a workaround for something you may be missing,\nplease feel free to post on the forums, and we will do what we can to help you.\n\n\n## Example Content\nProjects are based on what functionality the included examples demonstrate to the user and not necessarily which library in the DL4J stack the functionality lives in.\n\nExamples in a project are in general separated into \"quickstart\" and \"advanced\".\n\nEach project README also lists all the examples it contains, with a recommended order to explore them in.\n\n- [dl4j-examples](dl4j-examples/README.md)\nThis project contains a set of examples that demonstrate use of the high level DL4J API to build a variety of neural networks.\nSome of  these examples are end to end, in the sense they start with raw data, process it and then build and train neural networks on it.\n\n- [tensorflow-keras-import-examples](tensorflow-keras-import-examples/README.md)\nThis project contains a set of examples that demonstrate how to import Keras h5 models and TensorFlow frozen pb models into the DL4J ecosystem. Once imported into DL4J these models can be treated like any other DL4J model - meaning you can continue to run training on them or modify them with the transfer learning API or simply run inference on them.\n\n- [dl4j-distributed-training-examples](dl4j-distributed-training-examples/README.md)\nThis project contains a set of examples that demonstrate how to do distributed training, inference and evaluation in DL4J on Apache Spark. DL4J distributed training employs a \"hybrid\" asynchronous SGD approach - further details can be found in the distributed deep learning documentation [here](https://deeplearning4j.konduit.ai/distributed-deep-learning/intro)\n\n- [cuda-specific-examples](cuda-specific-examples/README.md)\nThis project contains a set of examples that demonstrate how to leverage multiple GPUs for data-parallel training of neural networks for increased performance.\n\n- [samediff-examples](samediff-examples/README.md)\nThis project contains a set of examples that demonstrate the SameDiff API. SameDiff (which is part of the ND4J library) can be used to build lower level auto-differentiating computation graphs. An analogue to the SameDiff API vs the DL4J API is the low level TensorFlow API vs the higher level of abstraction Keras API.\n\n- [data-pipeline-examples](data-pipeline-examples/README.md)\nThis project contains a set of examples that demonstrate how raw data in various formats can be loaded, split and preprocessed to build serializable (and hence reproducible) ETL pipelines.\n\n- [nd4j-ndarray-examples](nd4j-ndarray-examples/README.md)\nThis project contains a set of examples that demonstrate how to manipulate NDArrays. The functionality of ND4J demonstrated here can be likened to NumPy.\n\n- [rl4j-examples](rl4j-examples/README.md)\nThis project contains examples of using RL4J, the reinforcement learning library in DL4J.\n\n- [android-examples](android-examples/README.md)\nThis project contains an Android example project, that shows DL4J being used in an Android application.\n\n## Feedback & Contributions\nWhile these set of examples don't cover all the features available in DL4J the intent is to cover functionality required for most users - beginners and advanced.  File an issue [here](https://github.com/eclipse/deeplearning4j-examples/issues) if you have feedback or feature requests that are not covered here. We are also available via our [community forum](https://community.konduit.ai/) for questions.\nWe welcome contributions from the community. More information can be found [here](CONTRIBUTORS.md)\nWe **love** hearing from you. Cheers!\n"
        },
        {
          "name": "android-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "data-pipeline-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "dl4j-distributed-training-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "dl4j-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvn-project-template",
          "type": "tree",
          "content": null
        },
        {
          "name": "nd4j-ndarray-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnx-import-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "oreilly-book-dl4j-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "samediff-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow-keras-import-examples",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}