{
  "metadata": {
    "timestamp": 1736609090668,
    "page": 354,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Mojang/brigadier",
      "stars": 3477,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ado",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0673828125,
          "content": "# Created by https://www.gitignore.io\n\n### Intellij ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm\n\n/*.iml\n\n## Directory-based project format:\n.idea/\n# if you remove the above rule, at least ignore the follwing:\n\n# User-specific stuff:\n# .idea/workspace.xml\n# .idea/tasks.xml\n# .idea/dictionaries\n\n# Sensitive or high-churn files:\n# .idea/dataSources.ids\n# .idea/dataSources.xml\n# .idea/sqlDataSources.xml\n# .idea/dynamic.xml\n# .idea/uiDesigner.xml\n\n# Gradle:\n# .idea/gradle.xml\n# .idea/libraries\n\n# Mongo Explorer plugin:\n# .idea/mongoSettings.xml\n\n## File-based project format:\n*.ipr\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\n\n\n### Gradle ###\n.gradle\nbuild/\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n\n### Java ###\n*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n\nrepo/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "MIT License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2978515625,
          "content": "# Brigadier [![Latest release](https://img.shields.io/github/release/Mojang/brigadier.svg)](https://github.com/Mojang/brigadier/releases/latest) [![License](https://img.shields.io/github/license/Mojang/brigadier.svg)](https://github.com/Mojang/brigadier/blob/master/LICENSE)\n\nBrigadier is a command parser & dispatcher, designed and developed for Minecraft: Java Edition and now freely available for use elsewhere under the MIT license.\n\n# Installation\nBrigadier is available to Maven & Gradle via `libraries.minecraft.net`. Its group is `com.mojang`, and artifact name is `brigadier`.\n\n## Gradle\nFirst include our repository:\n```groovy\nmaven {\n    url \"https://libraries.minecraft.net\"\n}\n```\n\nAnd then use this library (change `(the latest version)` to the latest version!):\n```groovy\ncompile 'com.mojang:brigadier:(the latest version)'\n```\n\n## Maven\nFirst include our repository:\n```xml\n<repository>\n  <id>minecraft-libraries</id>\n  <name>Minecraft Libraries</name>\n  <url>https://libraries.minecraft.net</url>\n</repository>\n```\n\nAnd then use this library (change `(the latest version)` to the latest version!):\n```xml\n<dependency>\n    <groupId>com.mojang</groupId>\n    <artifactId>brigadier</artifactId>\n    <version>(the latest version)</version>\n</dependency>\n```\n\n# Contributing\nContributions are welcome! :D\n\nMost contributions will require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to,\nand actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n# Usage\nAt the heart of Brigadier, you need a `CommandDispatcher<S>`, where `<S>` is any custom object you choose to identify a \"command source\".\n\nA command dispatcher holds a \"command tree\", which is a series of `CommandNode`s that represent the various possible syntax options that form a valid command.\n\n## Registering a new command\nBefore we can start parsing and dispatching commands, we need to build up our command tree. Every registration is an append operation,\nso you can freely extend existing commands in a project without needing access to the source code that created them.\n\nCommand registration also encourages the use of a builder pattern to keep code cruft to a minimum.\n\nA \"command\" is a fairly loose term, but typically it means an exit point of the command tree.\nEvery node can have an `executes` function attached to it, which signifies that if the input stops here then this function will be called with the context so far.\n\nConsider the following example:\n```java\nCommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();\n\ndispatcher.register(\n    literal(\"foo\")\n        .then(\n            argument(\"bar\", integer())\n                .executes(c -> {\n                    System.out.println(\"Bar is \" + getInteger(c, \"bar\"));\n                    return 1;\n                })\n        )\n        .executes(c -> {\n            System.out.println(\"Called foo with no arguments\");\n            return 1;\n        })\n);\n``` \n\nThis snippet registers two \"commands\": `foo` and `foo <bar>`. It is also common to refer to the `<bar>` as a \"subcommand\" of `foo`, as it's a child node.\n\nAt the start of the tree is a \"root node\", and it **must** have `LiteralCommandNode`s as children. Here, we register one command under the root: `literal(\"foo\")`, which means \"the user must type the literal string 'foo'\".\n\nUnder that is two extra definitions: a child node for possible further evaluation, or an `executes` block if the user input stops here.\n\nThe child node works exactly the same way, but is no longer limited to literals. The other type of node that is now allowed is an `ArgumentCommandNode`, which takes in a name and an argument type.\n\nArguments can be anything, and you are encouraged to build your own for seamless integration into your own product. There are some standard arguments included in brigadier, such as `IntegerArgumentType`.\n\nArgument types will be asked to parse input as much as they can, and then store the \"result\" of that argument however they see fit or throw a relevant error if they can't parse.\n\nFor example, an integer argument would parse \"123\" and store it as `123` (`int`), but throw an error if the input were `onetwothree`.\n\nWhen a command is actually run, it can access these arguments in the context provided to the registered function.\n\n## Parsing user input\nSo, we've registered some commands and now we're ready to take in user input. If you're in a rush, you can just call `dispatcher.execute(\"foo 123\", source)` and call it a day.\n\nThe result of `execute` is an integer that was returned from an evaluated command. The meaning of this integer depends on the command, and will typically not be useful to programmers.\n\nThe `source` is an object of `<S>`, your own custom class to track users/players/etc. It will be provided to the command so that it has some context on what's happening.\n\nIf the command failed or could not parse, some form of `CommandSyntaxException` will be thrown. It is also possible for a `RuntimeException` to be bubbled up, if not properly handled in a command.\n\nIf you wish to have more control over the parsing & executing of commands, or wish to cache the parse results so you can execute it multiple times, you can split it up into two steps:\n\n```java\nfinal ParseResults<S> parse = dispatcher.parse(\"foo 123\", source);\nfinal int result = execute(parse);\n``` \n\nThis is highly recommended as the parse step is the most expensive, and may be easily cached depending on your application.\n\nYou can also use this to do further introspection on a command, before (or without) actually running it.\n\n## Inspecting a command\nIf you `parse` some input, you can find out what it will perform (if anything) and provide hints to the user safely and immediately.\n\nThe parse will never fail, and the `ParseResults<S>` it returns will contain a *possible* context that a command may be called with\n(and from that, you can inspect which nodes the user entered, complete with start/end positions in the input string).\nIt also contains a map of parse exceptions for each command node it encountered. If it couldn't build a valid context, then\nthe reason why is inside this exception map.\n\n## Displaying usage info\nThere are two forms of \"usage strings\" provided by this library, both require a target node.\n\n`getAllUsage(node, source, restricted)`  will return a list of all possible commands (executable end-points) under the target node and their human readable path. If `restricted`, it will ignore commands that `source` does not have access to. This will look like [`foo`, `foo <bar>`].\n\n`getSmartUsage(node, source)` will return a map of the child nodes to their \"smart usage\" human readable path. This tries to squash future-nodes together and show optional & typed information, and can look like `foo (<bar>)`.\n\n[![GitHub forks](https://img.shields.io/github/forks/Mojang/brigadier.svg?style=social&label=Fork)](https://github.com/Mojang/brigadier/fork) [![GitHub stars](https://img.shields.io/github/stars/Mojang/brigadier.svg?style=social&label=Stars)](https://github.com/Mojang/brigadier/stargazers)\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.255859375,
          "content": "import groovy.io.FileType\n\napply plugin: 'java-library'\napply plugin: 'maven-publish'\n\ngroup = 'com.mojang'\nversion = project.hasProperty('buildNumber') ? \"${project.majorMinor}.${project.buildNumber}\" : \"${project.majorMinor}.0-SNAPSHOT\"\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url \"https://libraries.minecraft.net\"\n        }\n    }\n}\n\nrepositories {\n    maven {\n        url \"https://libraries.minecraft.net\"\n    }\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'com.google.guava:guava:26.0-jre'\n    testCompile 'junit:junit-dep:4.11'\n    testCompile 'org.hamcrest:hamcrest-library:1.3'\n    testCompile 'org.mockito:mockito-core:1.10.19'\n    testCompile 'com.google.guava:guava-testlib:26.0-jre'\n    testCompile 'org.openjdk.jmh:jmh-core:1.21'\n    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'\n}\n\ntask sourcesJar(type: Jar) {\n    classifier = 'sources'\n    from sourceSets.main.allSource\n}\n\nsourceSets {\n    main {\n        java {\n            srcDirs = ['src/main/java']\n        }\n        resources {\n            srcDirs = ['src/main/resources']\n        }\n    }\n    test {\n        java {\n            srcDirs = ['src/test/java']\n        }\n        resources {\n            srcDirs = ['src/test/resources']\n        }\n    }\n}\n\nartifacts {\n    archives jar\n    archives sourcesJar\n}\n\ntest {\n    testLogging {\n        events \"failed\", \"skipped\"\n        showStandardStreams = true\n        showExceptions true\n    }\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            from components.java\n            artifact sourcesJar\n        }\n    }\n}\n\ntask report {\n    doLast {\n        println \"##vso[build.updatebuildnumber]${project.version}\"\n    }\n}\n\ndef publishDir = file(\"$buildDir/repo\")\n\nclean.doLast {\n    delete publishDir\n}\n\nif (version.endsWith(\"SNAPSHOT\")) {\n    publishing.repositories {\n        mavenLocal()\n    }\n} else {\n    publishing.repositories {\n        maven {\n           url \"$buildDir/repo\"\n        }\n    }\n\n    publish.doLast {\n        publishDir.eachFileRecurse {\n            if (!it.isFile()) {\n                return\n            }\n            // Remove junk files\n            if (it.name.contains(\".xml\") || it.name.contains(\".md5\")) {\n                it.delete()\n            }\n        }\n    }\n}\n\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.015625,
          "content": "majorMinor: 1.3\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0712890625,
          "content": "rootProject.name = 'brigadier'\nenableFeaturePreview('STABLE_PUBLISHING')\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}