{
  "metadata": {
    "timestamp": 1736608879718,
    "page": 55,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheoKanning/openai-java",
      "stars": 4799,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.150390625,
          "content": "#\n# https://help.github.com/articles/dealing-with-line-endings/\n#\n# These are explicitly windows files and should use crlf\n*.bat           text eol=crlf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5712890625,
          "content": "# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n!gradle/wrapper/gradle-wrapper.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# IntelliJ Files #\n.idea/\n*.iml\n# Ignore Gradle project-specific cache directory\n.gradle\n\n# Ignore Gradle build output directory\nbuild\n\n# VSCode\n.vscode\n\n# Ignore any files in /bin and /obj Folders\n**/bin/*\n**/obj/*\n\n# Ignore the macOS folder attribute file\n**/.DS_Store\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.279296875,
          "content": "# How to Contribute\n\n## How to Add a New API\n\n### Add POJOs to API library\nI usually have ChatGPT write them for me by copying and pasting from teh OpenAI API reference ([example chat](https://chat.openai.com/share/af48ef11-0354-40b2-a8e2-3bf8e93a94a3)), but double check everything because Chat always makes mistakes, especially around adding `@JsonProperty` annotations.\n\n- Make all java variables camel case, and use `@JsonProperty` for fields that OpenAI returns as snake case\n- Include comments for each variable, I take these directly from the OpenAI website\n- Include `@Data` on every response class, and `@Builder @NoArgsConstructor @AllArgsConstructor @Data` on every request\n- Include basic class-level documentation and a link to the OpenAI reference page, [example](api/src/main/java/com/theokanning/openai/threads/Thread.java)\n- Add a JSON test for every new java object, this ensures that your definition and variable name overrides are correct.\n  - Copy the sample response from OpenAI into an api test [fixture](api/src/test/resources/fixtures)\n  - Add any missing fields to the JSON file (OpenAI doesn't always include everything)\n  - Add the class name to the test cases here [JSON test](api/src/test/java/com/theokanning/openai/JsonTest.java)\n\n### Add to [OpenAiApi](client/src/main/java/com/theokanning/openai/client/OpenAiApi.java)\nThis is usually straightforward, use [OpenAiResponse](api/src/main/java/com/theokanning/openai/OpenAiResponse.java) for endpoints that return lists.\n\n### Add to [OpenAiService](service/src/main/java/com/theokanning/openai/OpenAiService.java)\n\n### Add an Integration Test\nSince 99% of the work of this library is done on OpenAI's servers, the objective of these tests is to call each endpoint at least once.  \nSpecify every available parameter to make sure that OpenAI accepts everything, but don't create extra test cases unless a parameter drastically affects the results.  \nFor example, [CompletionTest](service/src/test/java/com/theokanning/openai/service/CompletionTest.java) has one test for normal completions, and one for streaming.\n\nIf your test relies on creating and retrieving external resources, [FineTuningTest](service/src/test/java/com/theokanning/openai/service/FineTuningTest.java) is a good example of how to share resources between tests and clean up afterwards."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8134765625,
          "content": "![Maven Central](https://img.shields.io/maven-central/v/com.theokanning.openai-gpt3-java/client?color=blue)\n\n> ⚠️ Notice: This project is no longer maintained and has been archived as of June 6th, 2024.\nThank you to everyone who has contributed and supported this project. While the repository will remain available in its current state, no further updates or support will be provided. Please feel free to fork and modify the code as needed.\n\n> ⚠️OpenAI has deprecated all Engine-based APIs. See [Deprecated Endpoints](https://github.com/TheoKanning/openai-java#deprecated-endpoints) below for more info.\n\n# OpenAI-Java\nJava libraries for using OpenAI's GPT apis. Supports GPT-3, ChatGPT, and GPT-4.\n\nIncludes the following artifacts:\n- `api` : request/response POJOs for the GPT APIs.\n- `client` : a basic retrofit client for the GPT endpoints, includes the `api` module\n- `service` : A basic service class that creates and calls the client. This is the easiest way to get started.\n\nas well as an example project using the service.\n\n## Supported APIs\n- [Models](https://platform.openai.com/docs/api-reference/models)\n- [Completions](https://platform.openai.com/docs/api-reference/completions)\n- [Chat Completions](https://platform.openai.com/docs/api-reference/chat/create)\n- [Edits](https://platform.openai.com/docs/api-reference/edits)\n- [Embeddings](https://platform.openai.com/docs/api-reference/embeddings)\n- [Audio](https://platform.openai.com/docs/api-reference/audio)\n- [Files](https://platform.openai.com/docs/api-reference/files)\n- [Fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning)\n- [Images](https://platform.openai.com/docs/api-reference/images)\n- [Moderations](https://platform.openai.com/docs/api-reference/moderations)\n- [Assistants](https://platform.openai.com/docs/api-reference/assistants)\n\n#### Deprecated by OpenAI\n- [Engines](https://platform.openai.com/docs/api-reference/engines)\n- [Legacy Fine-Tunes](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n\n## Importing\n\n### Gradle\n`implementation 'com.theokanning.openai-gpt3-java:<api|client|service>:<version>'`\n\n### Maven\n```xml\n   <dependency>\n    <groupId>com.theokanning.openai-gpt3-java</groupId>\n    <artifactId>{api|client|service}</artifactId>\n    <version>version</version>       \n   </dependency>\n```\n\n## Usage\n### Data classes only\nIf you want to make your own client, just import the POJOs from the `api` module.\nYour client will need to use snake case to work with the OpenAI API.\n\n### Retrofit client\nIf you're using retrofit, you can import the `client` module and use the [OpenAiApi](client/src/main/java/com/theokanning/openai/OpenAiApi.java).  \nYou'll have to add your auth token as a header (see [AuthenticationInterceptor](client/src/main/java/com/theokanning/openai/AuthenticationInterceptor.java))\nand set your converter factory to use snake case and only include non-null fields.\n\n### OpenAiService\nIf you're looking for the fastest solution, import the `service` module and use [OpenAiService](service/src/main/java/com/theokanning/openai/service/OpenAiService.java).  \n\n> ⚠️The OpenAiService in the client module is deprecated, please switch to the new version in the service module.\n```java\nOpenAiService service = new OpenAiService(\"your_token\");\nCompletionRequest completionRequest = CompletionRequest.builder()\n        .prompt(\"Somebody once told me the world is gonna roll me\")\n        .model(\"babbage-002\"\")\n        .echo(true)\n        .build();\nservice.createCompletion(completionRequest).getChoices().forEach(System.out::println);\n```\n\n### Customizing OpenAiService\nIf you need to customize OpenAiService, create your own Retrofit client and pass it in to the constructor.\nFor example, do the following to add request logging (after adding the logging gradle dependency):\n\n```java\nObjectMapper mapper = defaultObjectMapper();\nOkHttpClient client = defaultClient(token, timeout)\n        .newBuilder()\n        .interceptor(HttpLoggingInterceptor())\n        .build();\nRetrofit retrofit = defaultRetrofit(client, mapper);\n\nOpenAiApi api = retrofit.create(OpenAiApi.class);\nOpenAiService service = new OpenAiService(api);\n```\n\n### Adding a Proxy\nTo use a proxy, modify the OkHttp client as shown below:\n```java\nObjectMapper mapper = defaultObjectMapper();\nProxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(host, port));\nOkHttpClient client = defaultClient(token, timeout)\n        .newBuilder()\n        .proxy(proxy)\n        .build();\nRetrofit retrofit = defaultRetrofit(client, mapper);\nOpenAiApi api = retrofit.create(OpenAiApi.class);\nOpenAiService service = new OpenAiService(api);\n```\n\n### Functions\nYou can create your functions and define their executors easily using the ChatFunction class, along with any of your custom classes that will serve to define their available parameters. You can also process the functions with ease, with the help of an executor called FunctionExecutor.\n\nFirst we declare our function parameters:\n```java\npublic class Weather {\n    @JsonPropertyDescription(\"City and state, for example: León, Guanajuato\")\n    public String location;\n    @JsonPropertyDescription(\"The temperature unit, can be 'celsius' or 'fahrenheit'\")\n    @JsonProperty(required = true)\n    public WeatherUnit unit;\n}\npublic enum WeatherUnit {\n    CELSIUS, FAHRENHEIT;\n}\npublic static class WeatherResponse {\n    public String location;\n    public WeatherUnit unit;\n    public int temperature;\n    public String description;\n    \n    // constructor\n}\n```\n\nNext, we declare the function itself and associate it with an executor, in this example we will fake a response from some API:\n```java\nChatFunction.builder()\n        .name(\"get_weather\")\n        .description(\"Get the current weather of a location\")\n        .executor(Weather.class, w -> new WeatherResponse(w.location, w.unit, new Random().nextInt(50), \"sunny\"))\n        .build()\n```\n\nThen, we employ the FunctionExecutor object from the 'service' module to assist with execution and transformation into an object that is ready for the conversation:\n```java\nList<ChatFunction> functionList = // list with functions\nFunctionExecutor functionExecutor = new FunctionExecutor(functionList);\n\nList<ChatMessage> messages = new ArrayList<>();\nChatMessage userMessage = new ChatMessage(ChatMessageRole.USER.value(), \"Tell me the weather in Barcelona.\");\nmessages.add(userMessage);\nChatCompletionRequest chatCompletionRequest = ChatCompletionRequest\n        .builder()\n        .model(\"gpt-3.5-turbo-0613\")\n        .messages(messages)\n        .functions(functionExecutor.getFunctions())\n        .functionCall(new ChatCompletionRequestFunctionCall(\"auto\"))\n        .maxTokens(256)\n        .build();\n\nChatMessage responseMessage = service.createChatCompletion(chatCompletionRequest).getChoices().get(0).getMessage();\nChatFunctionCall functionCall = responseMessage.getFunctionCall(); // might be null, but in this case it is certainly a call to our 'get_weather' function.\n\nChatMessage functionResponseMessage = functionExecutor.executeAndConvertToMessageHandlingExceptions(functionCall);\nmessages.add(response);\n```\n> **Note:** The `FunctionExecutor` class is part of the 'service' module.\n\nYou can also create your own function executor. The return object of `ChatFunctionCall.getArguments()` is a JsonNode for simplicity and should be able to help you with that.\n\nFor a more in-depth look, refer to a conversational example that employs functions in: [OpenAiApiFunctionsExample.java](example/src/main/java/example/OpenAiApiFunctionsExample.java).\nOr for an example using functions and stream: [OpenAiApiFunctionsWithStreamExample.java](example/src/main/java/example/OpenAiApiFunctionsWithStreamExample.java)\n\n### Streaming thread shutdown\nIf you want to shut down your process immediately after streaming responses, call `OpenAiService.shutdownExecutor()`.  \nThis is not necessary for non-streaming calls.\n\n## Running the example project\nAll the [example](example/src/main/java/example/OpenAiApiExample.java) project requires is your OpenAI api token\n```bash\nexport OPENAI_TOKEN=\"sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n```\nYou can try all the capabilities of this project using:\n```bash\n./gradlew runExampleOne\n```\nAnd you can also try the new capability of using functions:\n```bash\n./gradlew runExampleTwo\n```\nOr functions with 'stream' mode enabled:\n```bash\n./gradlew runExampleThree\n```\n\n## FAQ\n### Does this support GPT-4?\nYes! GPT-4 uses the ChatCompletion Api, and you can see the latest model options [here](https://platform.openai.com/docs/models/gpt-4).  \nGPT-4 is currently in a limited beta (as of 4/1/23), so make sure you have access before trying to use it.\n\n### Does this support functions?\nAbsolutely! It is very easy to use your own functions without worrying about doing the dirty work.\nAs mentioned above, you can refer to [OpenAiApiFunctionsExample.java](example/src/main/java/example/OpenAiApiFunctionsExample.java) or \n[OpenAiApiFunctionsWithStreamExample.java](example/src/main/java/example/OpenAiApiFunctionsWithStreamExample.java) projects for an example. \n\n### Why am I getting connection timeouts?\nMake sure that OpenAI is available in your country.\n\n### Why doesn't OpenAiService support x configuration option?\nMany projects use OpenAiService, and in order to support them best I've kept it extremely simple.  \nYou can create your own OpenAiApi instance to customize headers, timeouts, base urls etc.  \nIf you want features like retry logic and async calls, you'll have to make an `OpenAiApi` instance and call it directly instead of using `OpenAiService`\n\n## Deprecated Endpoints\nOpenAI has deprecated engine-based endpoints in favor of model-based endpoints. \nFor example, instead of using `v1/engines/{engine_id}/completions`, switch to `v1/completions` and specify the model in the `CompletionRequest`.\nThe code includes upgrade instructions for all deprecated endpoints.\n\nI won't remove the old endpoints from this library until OpenAI shuts them down.\n\n## License\nPublished under the MIT License\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.2158203125,
          "content": "plugins {\n    id \"com.vanniktech.maven.publish\" version \"0.19.0\" apply false\n}\n\nallprojects {\n    plugins.withId(\"com.vanniktech.maven.publish\") {\n        mavenPublish {\n            sonatypeHost = \"S01\"\n        }\n    }\n}\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.5126953125,
          "content": "GROUP=com.theokanning.openai-gpt3-java\nVERSION_NAME=0.18.2\n\nPOM_URL=https://github.com/theokanning/openai-java\nPOM_SCM_URL=https://github.com/theokanning/openai-java\nPOM_SCM_CONNECTION=https://github.com/theokanning/openai-java.git\nPOM_SCM_DEV_CONNECTION=https://github.com/theokanning/openai-java.git\n\nPOM_LICENSE_NAME=The MIT License\nPOM_LICENSE_URL=https://www.mit.edu/~amini/LICENSE.md\nPOM_LICENSE_DIST=repo\n\nPOM_DEVELOPER_ID=theokanning\nPOM_DEVELOPER_NAME=Theo Kanning\n\norg.gradle.parallel=true\norg.gradle.caching=true\n\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.2978515625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045 \n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045 \n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1806640625,
          "content": "rootProject.name = 'openai-java'\n\ninclude 'api'\ninclude 'client'\ninclude 'example'\ninclude 'service'\n\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n"
        }
      ]
    }
  ]
}