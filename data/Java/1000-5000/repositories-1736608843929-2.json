{
  "metadata": {
    "timestamp": 1736608843929,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mik3y/usb-serial-for-android",
      "stars": 4992,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5595703125,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Studio/Gradle\n*.iml\n.gradle/\nbuild/\n\n# User-specific stuff:\n.idea/workspace.xml\n.idea/tasks.xml\n.idea/dictionaries\n.idea/markdown-navigator*.xml\n\n# Sensitive or high-churn files:\n.idea/dataSources.ids\n.idea/dataSources.xml\n.idea/sqlDataSources.xml\n.idea/dynamic.xml\n.idea/uiDesigner.xml\n\n# Gradle:\n.idea/gradle.xml\n.idea/libraries\n.idea/jarRepositories.xml\n\n# Eclipse/Android/Misc\n.metadata/\nlocal.properties\n*.DS_Store\nproguard/\njacoco.exec\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.txt",
          "type": "blob",
          "size": 0.771484375,
          "content": "For recent changelog look here:\n  * https://github.com/mik3y/usb-serial-for-android/releases\n\nv0.2.0 (unreleased)\n  * Gradle, Android Studio support.\n  * New driver: CP2102 (thanks Ducky).\n  * New prober support: LUFA Virtual Serial, Leaflabs Maple, Teensyduino.\n  * New driver methods: getCD, getCTS, getDSR, getDTR, setDTR, getRI, getRTS,\n    setRTS.\n  * API change: setBaudrate() has been removed; use setParameters().\n  * API change: open() no longer implicitly sets the baud rate.  Clients should\n    call setParameters() immediately after open(), when necessary.\n  * Library version is available in `com.hoho.android.usbserial.BuildInfo`.\n\nv0.1.0 (2012-10-12)\n  * New driver: CdcAcmSerialDriver.\n  * Better tuned read and write buffer sizes.\n\nv0.0.1 (2011-12-28)\n  * Initial release.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0791015625,
          "content": "MIT License\n\nCopyright (c) 2011-2013 Google Inc.\nCopyright (c) 2013 Mike Wakerly\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6083984375,
          "content": "[![Actions Status](https://github.com/mik3y/usb-serial-for-android/workflows/build/badge.svg)](https://github.com/mik3y/usb-serial-for-android/actions)\r\n[![Jitpack](https://jitpack.io/v/mik3y/usb-serial-for-android.svg)](https://jitpack.io/#mik3y/usb-serial-for-android)\r\n[![Codacy](https://app.codacy.com/project/badge/Grade/ef799bba8a7343818af0a90eba3ecb46)](https://app.codacy.com/gh/kai-morich/usb-serial-for-android-mik3y/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)\r\n[![codecov](https://codecov.io/gh/mik3y/usb-serial-for-android/branch/master/graph/badge.svg)](https://codecov.io/gh/mik3y/usb-serial-for-android)\r\n\r\n# usb-serial-for-android\r\n\r\nThis is a driver library for communication with Arduinos and other USB serial hardware on\r\nAndroid, using the\r\n[Android USB Host Mode (OTG)](http://developer.android.com/guide/topics/connectivity/usb/host.html)\r\navailable since Android 3.1 and working reliably since Android 4.2.\r\n\r\nNo root access, ADK, or special kernel drivers are required; all drivers are implemented in\r\nJava.  You get a raw serial port with `read()`, `write()`, and [other functions](https://github.com/mik3y/usb-serial-for-android/wiki/FAQ#Feature_Matrix) for use with your own protocols.\r\n\r\n## Quick Start\r\n\r\n**1.** Add library to your project:\r\n\r\nAdd jitpack.io repository to your root build.gradle:\r\n```gradle\r\nallprojects {\r\n    repositories {\r\n        ...\r\n        maven { url 'https://jitpack.io' }\r\n    }\r\n}\r\n```\r\n\r\nStarting with gradle 6.8 you can alternatively add jitpack.io repository to your settings.gradle:\r\n```gradle\r\ndependencyResolutionManagement {\r\n    repositories {\r\n        ...\r\n        maven { url 'https://jitpack.io' }\r\n    }\r\n}\r\n```\r\n\r\nIf using gradle kotlin  use line\r\n```gradle.kts\r\n        maven(url = \"https://jitpack.io\")\r\n```\r\n\r\nAdd library to dependencies\r\n```gradle\r\ndependencies {\r\n    implementation 'com.github.mik3y:usb-serial-for-android:3.8.1'\r\n}\r\n```\r\n\r\n**2.** If the app should be notified when a device is attached, add \r\n[device_filter.xml](https://github.com/mik3y/usb-serial-for-android/blob/master/usbSerialExamples/src/main/res/xml/device_filter.xml) \r\nto your project's `res/xml/` directory and configure in your `AndroidManifest.xml`.\r\n\r\n```xml\r\n<activity\r\n    android:name=\"...\"\r\n    ...>\r\n    <intent-filter>\r\n        <action android:name=\"android.hardware.usb.action.USB_DEVICE_ATTACHED\" />\r\n    </intent-filter>\r\n    <meta-data\r\n        android:name=\"android.hardware.usb.action.USB_DEVICE_ATTACHED\"\r\n        android:resource=\"@xml/device_filter\" />\r\n</activity>\r\n```\r\n\r\n**3.** Use it! Example code snippet:\r\n\r\nopen device:\r\n```java\r\n    // Find all available drivers from attached devices.\r\n    UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);\r\n    List<UsbSerialDriver> availableDrivers = UsbSerialProber.getDefaultProber().findAllDrivers(manager);\r\n    if (availableDrivers.isEmpty()) {\r\n        return;\r\n    }\r\n\r\n    // Open a connection to the first available driver.\r\n    UsbSerialDriver driver = availableDrivers.get(0);\r\n    UsbDeviceConnection connection = manager.openDevice(driver.getDevice());\r\n    if (connection == null) {\r\n        // add UsbManager.requestPermission(driver.getDevice(), ..) handling here\r\n        return;\r\n    }\r\n\r\n    UsbSerialPort port = driver.getPorts().get(0); // Most devices have just one port (port 0)\r\n    port.open(connection);\r\n    port.setParameters(115200, 8, UsbSerialPort.STOPBITS_1, UsbSerialPort.PARITY_NONE);\r\n```\r\nthen use direct read/write\r\n```java\r\n    port.write(request, WRITE_WAIT_MILLIS);\r\n    len = port.read(response, READ_WAIT_MILLIS);\r\n```\r\nor direct write + event driven read:\r\n```java\r\n    usbIoManager = new SerialInputOutputManager(usbSerialPort, this);\r\n    usbIoManager.start();\r\n    ...\r\n    port.write(\"hello\".getBytes(), WRITE_WAIT_MILLIS);\r\n    \r\n@Override\r\npublic void onNewData(byte[] data) {\r\n    runOnUiThread(() -> { textView.append(new String(data)); });\r\n}\r\n```\r\nand finally:\r\n```java\r\n    port.close();\r\n```\r\n\r\nFor a simple example, see\r\n[UsbSerialExamples](https://github.com/mik3y/usb-serial-for-android/blob/master/usbSerialExamples)\r\nfolder in this project.\r\n\r\nSee separate github project [SimpleUsbTerminal](https://github.com/kai-morich/SimpleUsbTerminal) \r\nfor a more complete example with:\r\n* Background service to stay connected while the app is not visible or rotating\r\n* Flow control \r\n\r\n## Probing for Unrecognized Devices\r\n\r\nSometimes you may need to do a little extra work to support devices which\r\nusb-serial-for-android doesn't (yet) know about -- but which you know to be\r\ncompatible with one of the built-in drivers.  This may be the case for a brand\r\nnew device or for one using a custom VID/PID pair.\r\n\r\nUsbSerialProber is a class to help you find and instantiate compatible\r\nUsbSerialDrivers from the tree of connected UsbDevices.  Normally, you will use\r\nthe default prober returned by ``UsbSerialProber.getDefaultProber()``, which\r\nuses USB interface types and the built-in list of well-known VIDs and PIDs that\r\nare supported by our drivers.\r\n\r\nTo use your own set of rules, create and use a custom prober:\r\n\r\n```java\r\n// Probe for our custom FTDI device, which use VID 0x1234 and PID 0x0001 and 0x0002.\r\nProbeTable customTable = new ProbeTable();\r\ncustomTable.addProduct(0x1234, 0x0001, FtdiSerialDriver.class);\r\ncustomTable.addProduct(0x1234, 0x0002, FtdiSerialDriver.class);\r\n\r\nUsbSerialProber prober = new UsbSerialProber(customTable);\r\nList<UsbSerialDriver> drivers = prober.findAllDrivers(usbManager);\r\n// ...\r\n```\r\n*Note*: as of v3.5.0 this library detects CDC devices by USB interface types instead of fixed VID+PID,\r\nso custom probers are typically not required any more for CDC devices.\r\n\r\nOf course, nothing requires you to use UsbSerialProber at all: you can\r\ninstantiate driver classes directly if you know what you're doing; just supply\r\na compatible UsbDevice.\r\n\r\n## Compatible Devices\r\n\r\nThis library supports USB to serial converter chips:\r\n* FTDI FT232R, FT232H, FT2232H, FT4232H, FT230X, FT231X, FT234XD\r\n* Prolific PL2303\r\n* Silabs CP2102, CP210*\r\n* Qinheng CH340, CH341A, CH9102\r\n\r\ndevices implementing the CDC/ACM protocol like\r\n* Arduino using ATmega32U4\r\n* Digispark using V-USB software USB\r\n* BBC micro:bit using ARM mbed DAPLink firmware\r\n* ...\r\n\r\nand some device specific drivers:\r\n* GsmModem devices, e.g. for Unisoc based Fibocom GSM modems\r\n* Chrome OS CCD (Closed Case Debugging)\r\n\r\n## Help & Discussion\r\n\r\nFor common problems, see the [FAQ](https://github.com/mik3y/usb-serial-for-android/wiki/FAQ) wiki page.\r\n\r\nAre you using the library? Add your project to \r\n[ProjectsUsingUsbSerialForAndroid](https://github.com/mik3y/usb-serial-for-android/wiki/Projects-Using-usb-serial-for-android).\r\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.267578125,
          "content": "// Top-level gradle script.\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.4.0'\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        google()\n    }\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0830078125,
          "content": "codecov:\n  max_report_age: off\n  require_ci_to_pass: no\n  notify:\n    wait_for_ci: no"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.0986328125,
          "content": "android.enableJetifier=true\nandroid.useAndroidX=true\nandroid.defaults.buildfeatures.buildconfig=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.77734375,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8720703125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      http://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "jitpack.yml",
          "type": "blob",
          "size": 0.0810546875,
          "content": "jdk:\n  - openjdk17\ninstall:\n  - ./gradlew :usbSerialForAndroid:publishToMavenLocal\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0498046875,
          "content": "include 'usbSerialForAndroid', 'usbSerialExamples'\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "usbSerialExamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "usbSerialForAndroid",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}