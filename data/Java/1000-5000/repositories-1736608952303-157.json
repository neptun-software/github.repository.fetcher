{
  "metadata": {
    "timestamp": 1736608952303,
    "page": 157,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eirslett/frontend-maven-plugin",
      "stars": 4272,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1787109375,
          "content": ".idea\n*.iml\ntarget\n.settings\n.classpath\n.project\n.metadata\n.recommenders\nbin\ntravis/codesigning.asc\nfrontend-plugin-core/target\nfrontend-maven-plugin/target\n\n#macOS\n.DS_Store\n.vscode\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.935546875,
          "content": "# frontend-maven-plugin\n\nLast public release: [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.eirslett/frontend-maven-plugin/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.github.eirslett/frontend-maven-plugin/)\n\n## Changelog\n\n### 1.15.1\n\n* Fix #1150: Update lifecycle-mapping-metadata.xml for npx\n\n### 1.15.0\n\n* Bun support\n* Prevent `Bad zip entry` exceptions when installing Node to a relative directory ([#1124](https://github.com/eirslett/frontend-maven-plugin/issues/1124))\n\n### 1.14.2\n\n* Prevent corrupt downloaded files by waiting for the download to complete before writing the file to disk.\n\n### 1.14.1\n\n* Expose `pnpm` executable on Windows ([#1116](https://github.com/eirslett/frontend-maven-plugin/pull/1116))\n\n### 1.14.0\n\n* Use provided target host credentials also when downloading via proxy ([#725](https://github.com/eirslett/frontend-maven-plugin/pull/725))\n\n### 1.13.4\n\n* Add proxy environment variables for npm postinstalls ([#683](https://github.com/eirslett/frontend-maven-plugin/pull/683))\n\n### 1.13.3\n\n* Run CI against Java 8 ([187554f](https://github.com/eirslett/frontend-maven-plugin/commit/187554f87cf9169df8a1f5b73ac841ca6ffde9d5))\n\n### 1.13.2\n\n* Update various Maven dependencies ([16a131a](https://github.com/eirslett/frontend-maven-plugin/commit/16a131aa269c0e38ecb12dc0aa1f0021d60c34c4))\n\n### 1.13.1\n\n* Update various Maven dependencies ([#1092](https://github.com/eirslett/frontend-maven-plugin/pull/1092))\n\n### 1.13.0\n\nJust a lot of various small bug fixes and tweaks.\n\n### 1.12.1\n\n* update Dependency: Jackson (2.13.0), Mockito (4.1.0), JUnit (5.8.1), Hamcrest (2.2; now a direct dependency)\n* remove Dependency: Powermock\n* Added better support for Yarn 2.x and above (Berry)\n\n### 1.11.4\n* Support node arm64 binaries since v16 major release\n\n### 1.11.1\n\n* Fix wrong binary on AIX downloaded ([#839])\n\n### 1.11.0\n\n* Upgrade Jackson dependency to Jackson 2.9.10\n* Support Apple Silicon\n\n### 1.10.2\n\n* Supports Alpine Linux\n\n### 1.9.0\n\n* Copy npm scripts, so they are available for execution ([#868](https://github.com/eirslett/frontend-maven-plugin/pull/868))\n* Regression bug fix (tar files) ([#864](https://github.com/eirslett/frontend-maven-plugin/pull/864))\n* Fix bug related to archive extraction on case-insensitive file systems ([#845](https://github.com/eirslett/frontend-maven-plugin/pull/843))\n* Regression bug fix (tar files) ([#816](https://github.com/eirslett/frontend-maven-plugin/pull/816))\n* Added support for Raspbian OS armv7l architecture ([#809](https://github.com/eirslett/frontend-maven-plugin/pull/809))\n\n### 1.8.0\n\n* The plugin always logs output from npm/runners as INFO, not WARN or ERROR.\n* Support for quirky Windows handling of PATH environment variables.\n\n### 1.7.6\n\n* Fix #670: Plugin will no longer fail to install node.exe if node.exe already exists\n* Fix #794: Plugin will self-repair if previous node/npm/yarn archive download was interrupted\n\n### 1.5\n\n* Revert support for the maven.frontend.failOnError flag ([#572](https://github.com/eirslett/frontend-maven-plugin/pull/572)), due to\nthe major regression described in [#613](https://github.com/eirslett/frontend-maven-plugin/issues/613).\nfailOnError-like behavior can be implemented by ignoring exit codes;\n`npm run mytask` from the maven plugin, and `\"scripts\": { \"mytask\": \"runstuff || exit 0\"` in package.json\n\n### 1.4\n\n* Add maven.frontend.failOnError and maven.test.failure.ignore flags to best manage integration-test\n* Fix #41: Replaced ProcessBuilder usage with commons-exec\n* Use InstallDirectory to locate node tasks instead of the WorkingDirectory as fallback\n* Fix 531: update lifecycle-mapping-metadata.xml for yarn\n* Fix execute goal for gulp\n* Fix #532: fix NullPointerException for invalid yarn version\n* Added bower proxy ignore parameter\n* Document how to skip package managers and build tools'\n\n### 1.3\n\n* Fix `yarn` for Windows\n* Fix #515: Change \"yarn warning\" from ERROR to WARNING in log\n\n### 1.2\n\n* New goals `yarn` and `install-node-and-yarn` for Yarn support\n\n### 1.1\n\n* Update requirements to Java 1.7\n* Fix #469: Check write permissions on node installation folder\n* ThreadSafe Node and NPM installation\n* Add documentation and example for environmentVariables\n* Add ARM's 64bit server aarch64 support\n* Add Linux on Power Systems ppc64le support\n* Authenticated download\n* Support for using NPM provided by node versions >4.0.0\n* Fix #482: https-proxy setting from Maven\n\n### 1.0\n\n* Fix #384: Add parameter `npmInheritsProxyConfigFromMaven`\n* Update `maven-invoker-plugin` to v2.0.0 to fix the build on Windows mith Maven 3.2.2\n  Caused by this issue: https://issues.apache.org/jira/browse/MINVOKER-166\n* Fix #343: Change \"npm WARN\" from ERROR to WARNING in log\n\n\n### 0.0.29\n\n* Add support for caching downloaded files\n* Enable SSL client certificate authentication for node download url\n* Set paths in npm helper scripts so child node processes can be spawned\n* Updated README with example for maven 2\n* Fix #322: Use proxies more correctly\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.6298828125,
          "content": "# frontend-maven-plugin\n\n[![Build Status OSX and Linux](https://travis-ci.org/eirslett/frontend-maven-plugin.png?branch=master)](https://travis-ci.org/eirslett/frontend-maven-plugin)\n[![Build status Windows](https://ci.appveyor.com/api/projects/status/vxbccc1t9ceadhi9?svg=true)](https://ci.appveyor.com/project/eirslett/frontend-maven-plugin)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.eirslett/frontend-maven-plugin/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.github.eirslett/frontend-maven-plugin/)\n\nThis plugin downloads/installs Node and NPM locally for your project, runs `npm install`, and then any combination of \n[Bower](http://bower.io/), [Grunt](http://gruntjs.com/), [Gulp](http://gulpjs.com/), [Jspm](http://jspm.io), \n[Karma](http://karma-runner.github.io/), or [Webpack](http://webpack.github.io/).\nIt's supposed to work on Windows, OS X and Linux.\n\nIf you prefer [Yarn](https://yarnpkg.com/) over [NPM](https://www.npmjs.com/) for your node package fetching, \nthis plugin can also download Node and Yarn and then run `yarn install` for your project.\n\n#### What is this plugin meant to do?\n- Let you keep your frontend and backend builds as separate as possible, by\nreducing the amount of interaction between them to the bare minimum; using only 1 plugin.\n- Let you use Node.js and its libraries in your build process without installing Node/NPM\nglobally for your build system\n- Let you ensure that the version of Node and NPM being run is the same in every build environment\n\n#### What is this plugin not meant to do?\n- Not meant to replace the developer version of Node - frontend developers will still install Node on their\nlaptops, but backend developers can run a clean build without even installing Node on their computer.\n- Not meant to install Node for production uses. The Node usage is intended as part of a frontend build,\nrunning common javascript tasks such as minification, obfuscation, compression, packaging, testing etc.\n\n**Notice:** _This plugin does not support already installed Node or npm versions. Use the `exec-maven-plugin` instead._\n\n## Requirements\n\n* _Maven 3.6_ and _Java 1.8_\n* For _Maven 2_ support take a look at the [wiki](https://github.com/eirslett/frontend-maven-plugin/wiki#maven-2).\n\n## Installation\n\nInclude the plugin as a dependency in your Maven project. Change `LATEST_VERSION` to the latest tagged version.\n\n```xml\n<plugins>\n    <plugin>\n        <groupId>com.github.eirslett</groupId>\n        <artifactId>frontend-maven-plugin</artifactId>\n        <!-- Use the latest released version:\n        https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->\n        <version>LATEST_VERSION</version>\n        ...\n    </plugin>\n...\n```\n\n## Usage\n\nHave a look at the [example project](frontend-maven-plugin/src/it/example%20project),\nto see how it should be set up: https://github.com/eirslett/frontend-maven-plugin/blob/master/frontend-maven-plugin/src/it/example%20project/pom.xml\n\n- [frontend-maven-plugin](#frontend-maven-plugin)\n      - [What is this plugin meant to do?](#what-is-this-plugin-meant-to-do)\n      - [What is this plugin not meant to do?](#what-is-this-plugin-not-meant-to-do)\n  - [Requirements](#requirements)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [Installing node and npm](#installing-node-and-npm)\n    - [Installing node and yarn](#installing-node-and-yarn)\n    - [Installing node and corepack](#installing-node-and-corepack)\n    - [Installing bun](#installing-bun)\n    - [Running npm](#running-npm)\n      - [npx](#npx)\n    - [Running yarn](#running-yarn)\n      - [Yarn with Private Registry](#yarn-with-private-registry)\n    - [Running corepack](#running-corepack)\n    - [Running bower](#running-bower)\n    - [Running Grunt](#running-grunt)\n    - [Running gulp](#running-gulp)\n    - [Running jspm](#running-jspm)\n    - [Running Karma](#running-karma)\n    - [Running Webpack](#running-webpack)\n    - [Running bun](#running-bun)\n    - [Optional Configuration](#optional-configuration)\n      - [Working directory](#working-directory)\n      - [Installation Directory](#installation-directory)\n      - [Proxy settings](#proxy-settings)\n      - [Environment variables](#environment-variables)\n      - [Ignoring Failure](#ignoring-failure)\n      - [Skipping Execution](#skipping-execution)\n  - [Eclipse M2E support](#eclipse-m2e-support)\n  - [Helper scripts](#helper-scripts)\n  - [To build this project:](#to-build-this-project)\n  - [Issues, Contributing](#issues-contributing)\n  - [License](#license)\n    \n**Recommendation:** _Try to run all your tasks via npm scripts instead of running bower, grunt, gulp etc. directly._\n\n### Installing node and npm\n\nThe versions of Node and npm are downloaded from https://nodejs.org/dist, extracted and put into a `node` folder created \nin your [installation directory](#installation-directory) . Node/npm will only be \"installed\" locally to your project. \nIt will not be installed globally on the whole system (and it will not interfere with any Node/npm installations already \npresent). \n\n```xml\n<plugin>\n    ...\n    <executions>\n        <execution>\n            <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->\n            <id>install node and npm</id>\n            <goals>\n                <goal>install-node-and-npm</goal>\n            </goals>\n            <!-- optional: default phase is \"generate-resources\" -->\n            <phase>generate-resources</phase>\n        </execution>\n    </executions>\n    <configuration>\n        <nodeVersion>v4.6.0</nodeVersion>\n\n        <!-- optional: with node version greater than 4.0.0 will use npm provided by node distribution -->\n        <npmVersion>2.15.9</npmVersion>\n        \n        <!-- optional: where to download node and npm from. Defaults to https://nodejs.org/dist/ -->\n        <downloadRoot>http://myproxy.example.org/nodejs/</downloadRoot>\n    </configuration>\n</plugin>\n```\n\nYou can also specify separate download roots for npm and node as they are stored in separate repos. In case the root configured requires authentication, you can specify a server ID from your maven settings file:\n\n```xml\n<plugin>\n    ...\n    <configuration>\n        <!-- optional: where to download node from. Defaults to https://nodejs.org/dist/ -->\n        <nodeDownloadRoot>http://myproxy.example.org/nodejs/</nodeDownloadRoot>\n\t<!-- optional: credentials to use from Maven settings to download node -->\n        <serverId>server001</serverId>\n        <!-- optional: where to download npm from. Defaults to https://registry.npmjs.org/npm/-/ -->\n        <npmDownloadRoot>https://myproxy.example.org/npm/</npmDownloadRoot>\n    </configuration>\n</plugin>\n```\n\nYou can use Nexus repository Manager to proxy npm registries. See https://help.sonatype.com/display/NXRM3/Npm+Registry\n\n**Notice:** _Remember to gitignore the `node` folder, unless you actually want to commit it._\n\n### Installing node and yarn\n\nInstead of using Node with npm you can alternatively choose to install Node with Yarn as the package manager.\n\nThe versions of Node and Yarn are downloaded from `https://nodejs.org/dist` for Node \nand from the Github releases for Yarn, \nextracted and put into a `node` folder created in your installation directory. \nNode/Yarn will only be \"installed\" locally to your project. \nIt will not be installed globally on the whole system (and it will not interfere with any Node/Yarn installations already \npresent). \n\nIf your project is using Yarn Berry (2.x or above), the Yarn version is handled per project but a Yarn 1.x install is still needed as a \"bootstrap\".\nThe plugin will try to detect `.yarnrc.yml` file in the current Maven project/module folder, at the root of the multi-module project if relevant, and in the folder from which the `mvn` command was run. \nIf detected, the plugin will assume your project is using Yarn Berry. It will install the 1.x Yarn version you specify with `yarnVersion` as bootstrap, then hand over to your project-specific version.   \n\nHave a look at the example `POM` to see how it should be set up with Yarn: \nhttps://github.com/eirslett/frontend-maven-plugin/blob/master/frontend-maven-plugin/src/it/yarn-integration/pom.xml\n\n\n```xml\n<plugin>\n    ...\n    <execution>\n        <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->\n        <id>install node and yarn</id>\n        <goals>\n            <goal>install-node-and-yarn</goal>\n        </goals>\n        <!-- optional: default phase is \"generate-resources\" -->\n        <phase>generate-resources</phase>\n    </execution>\n    <configuration>\n        <nodeVersion>v6.9.1</nodeVersion>\n        <yarnVersion>v0.16.1</yarnVersion>\n\n        <!-- optional: where to download node from. Defaults to https://nodejs.org/dist/ -->\n        <nodeDownloadRoot>http://myproxy.example.org/nodejs/</nodeDownloadRoot>\n        <!-- optional: where to download yarn from. Defaults to https://github.com/yarnpkg/yarn/releases/download/ -->\n        <yarnDownloadRoot>http://myproxy.example.org/yarn/</yarnDownloadRoot>        \n    </configuration>\n</plugin>\n```\n\n### Installing node and corepack\n\nYou can choose to let corepack manage the package manager version in use. Node is\ndownloaded from `https://nodejs.org/dist`, and corepack either comes provided with\nNode, or will currently be downloaded from `https://repository.npmjs.org`, extracted\nand put into a `node` folder created in your installation directory.\n\nNode/corepack and any package managers will only be \"installed\" locally to your project.\nIt will not be installed globally on the whole system (and it will not interfere with any\nNode/corepack installations already present).\n\nHave a look at the example `POM` to see how it should be set up with corepack:\nhttps://github.com/eirslett/frontend-maven-plugin/blob/master/frontend-maven-plugin/src/it/corepack-provided-integration/pom.xml\nor\nhttps://github.com/eirslett/frontend-maven-plugin/blob/master/frontend-maven-plugin/src/it/corepack-integration/pom.xml\nif you need to override the version of corepack in use.\n\n\n```xml\n<plugin>\n    ...\n    <execution>\n        <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->\n        <id>install-node-and-corepack</id>\n        <goals>\n            <goal>install-node-and-corepack</goal>\n        </goals>\n        <!-- optional: default phase is \"generate-resources\" -->\n        <phase>generate-resources</phase>\n    </execution>\n    <configuration>\n        <nodeVersion>v20.12.2</nodeVersion>\n\n        <!-- Optional - only needed if Node <16.9, or if you need to use a version different\n             from the one packaged with Node -->\n        <corepackVersion>v0.25.2</corepackVersion>\n\n        <!-- optional: where to download node from. Defaults to https://nodejs.org/dist/ -->\n        <nodeDownloadRoot>http://myproxy.example.org/nodejs/</nodeDownloadRoot>\n        <!-- optional: where to download corepack from. Defaults to https://registry.npmjs.org/corepack/-/ -->\n        <corepackDownloadRoot>http://myproxy.example.org/corepack/</corepackDownloadRoot>\n    </configuration>\n</plugin>\n```\n\n### Installing bun\n\nThe version Bun is downloaded from https://github.com/oven-sh/bun/releases/download/, extracted and put into a `bun` folder created \nin your [installation directory](#installation-directory) . Bun will only be \"installed\" locally to your project. \nIt will not be installed globally on the whole system (and it will not interfere with any Bun installations already \npresent). \n\n```xml\n<plugin>\n    ...\n    <executions>\n        <execution>\n            <!-- optional: you don't really need execution ids, but it looks nice in your build log. -->\n            <id>install bun</id>\n            <goals>\n                <goal>install-bun</goal>\n            </goals>\n            <!-- optional: default phase is \"generate-resources\" -->\n            <phase>generate-resources</phase>\n        </execution>\n    </executions>\n    <configuration>\n        <!-- The version of Bun to install. IMPORTANT! Most Bun version names start with 'v', for example -->\n        <bunVersion>v1.1.34</bunVersion>\n    </configuration>\n</plugin>\n```\n\n### Running npm\n\nAll node packaged modules will be installed in the `node_modules` folder in your [working directory](#working-directory).\nBy default, colors will be shown in the log.\n\n```xml\n<execution>\n    <id>npm install</id>\n    <goals>\n        <goal>npm</goal>\n    </goals>\n\n    <!-- optional: default phase is \"generate-resources\" -->\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <!-- optional: The default argument is actually\n        \"install\", so unless you need to run some other npm command,\n        you can remove this whole <configuration> section.\n        -->\n        <arguments>install</arguments>\n    </configuration>\n</execution>\n```\n\n**Notice:** _Remember to gitignore the `node_modules` folder, unless you actually want to commit it. Npm packages will \nalways be installed in `node_modules` next to your `package.json`, which is default npm behavior._\n\n#### npx\n\nYou can also use [`npx` command](https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner), enabling you to execute the CLI of installed packages without a run-script, or even packages that aren't installed at all.\n\n```xml\n<execution>\n    <id>say hello</id>\n    <goals>\n        <goal>npx</goal>\n    </goals>\n\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <arguments>cowsay hello</arguments>\n    </configuration>\n</execution>\n```\n\n### Running yarn\n\nAs with npm above, all node packaged modules will be installed in the `node_modules` folder in your [working directory](#working-directory).\n\n```xml\n<execution>\n    <id>yarn install</id>\n    <goals>\n        <goal>yarn</goal>\n    </goals>\n    <configuration>\n         <!-- optional: The default argument is actually\n         \"install\", so unless you need to run some other yarn command,\n         you can remove this whole <configuration> section.\n         -->\n        <arguments>install</arguments>\n    </configuration>\n</execution>\n```\n\n#### Yarn with Private Registry\n\nNOTE: if you have a private npm registry that mirrors the npm registry, be aware that yarn.lock\nincludes URLs to the npmjs.org module registry and yarn install will use these paths when installing modules.\n\nIf you want yarn.lock to use your private npm registry, be sure to run these commands on your local machine before you generate yarn.lock:\n```\nyarn config set registry <your_registry_url>\nyarn install\n```\nThis will create URLs in your yarn.lock file that reference your private npm registry.\n\nAnother way to set a registry is to add a .npmrc file in your project's root directory that contains:\n```\nregistry=<your_registry_url>\n```\n\nAlso you can set a registry using a tag `npmRegistryURL`\n```\n<execution>\n    <id>yarn install</id>\n    <goals>\n        <goal>yarn</goal>\n    </goals>\n    <configuration>\n         <!-- optional: The default argument is actually\n         \"install\", so unless you need to run some other yarn command,\n         you can remove this whole <configuration> section.\n         -->\n        <arguments>install</arguments>\n\t<!-- optional: where to download npm modules from. Defaults to https://registry.yarnpkg.com/ -->\n\t<npmRegistryURL>http://myregistry.example.org/</npmRegistryURL>\n    </configuration>\n</execution>\n```\n\n### Running corepack\n\nIf your `packageManager` specifies `yarn`, then you'll want to have something like:\n\n\n```xml\n<execution>\n    <id>install</id>\n    <goals>\n        <goal>corepack</goal>\n    </goals>\n    <configuration>\n        <arguments>yarn install</arguments>\n    </configuration>\n</execution>\n<execution>\n    <id>build</id>\n    <goals>\n        <goal>corepack</goal>\n    </goals>\n    <configuration>\n        <arguments>yarn build</arguments>\n    </configuration>\n</execution>\n```\n\nand if you're using `pnpm` instead, you'll want something like\n\n```xml\n<execution>\n    <id>install</id>\n    <goals>\n        <goal>corepack</goal>\n    </goals>\n    <configuration>\n        <arguments>pnpm install</arguments>\n    </configuration>\n</execution>\n<execution>\n    <id>build</id>\n    <goals>\n        <goal>corepack</goal>\n    </goals>\n    <configuration>\n        <arguments>pnpm build</arguments>\n    </configuration>\n</execution>\n```\n\n### Running bower\n\nAll bower dependencies will be installed in the `bower_components` folder in your working directory.\n\n```xml\n<execution>\n    <id>bower install</id>\n    <goals>\n        <goal>bower</goal>\n    </goals>\n\n    <configuration>\n        <!-- optional: The default argument is actually\n        \"install\", so unless you need to run some other bower command,\n        you can remove this whole <configuration> section.\n        -->\n        <arguments>install</arguments>\n    </configuration>\n</execution>\n```\n\n**Notice:** _Remember to gitignore the `bower_components` folder, unless you actually want to commit it._\n\n### Running Grunt\n\nIt will run Grunt according to the `Gruntfile.js` in your working directory.\nBy default, colors will be shown in the log.\n\n```xml\n<execution>\n    <id>grunt build</id>\n    <goals>\n        <goal>grunt</goal>\n    </goals>\n\n    <!-- optional: the default phase is \"generate-resources\" -->\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <!-- optional: if not specified, it will run Grunt's default\n        task (and you can remove this whole <configuration> section.) -->\n        <arguments>build</arguments>\n    </configuration>\n</execution>\n```\n\n### Running gulp\n\nVery similar to the Grunt execution. It will run gulp according to the `gulpfile.js` in your working directory.\nBy default, colors will be shown in the log.\n\n```xml\n<execution>\n    <id>gulp build</id>\n    <goals>\n        <goal>gulp</goal>\n    </goals>\n\n    <!-- optional: the default phase is \"generate-resources\" -->\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <!-- optional: if not specified, it will run gulp's default\n        task (and you can remove this whole <configuration> section.) -->\n        <arguments>build</arguments>\n    </configuration>\n</execution>\n```\n\n### Running jspm\n\nAll jspm dependencies will be installed in the `jspm_packages` folder in your working directory.\n\n```xml\n<execution>\n    <id>jspm install</id>\n    <goals>\n        <goal>jspm</goal>\n    </goals>\n\n    <configuration>\n\t    <!-- optional: The default argument is actually\n\t    \"install\", so unless you need to run some other jspm command,\n\t    you can remove this whole <configuration> section.\n\t    -->\n        <arguments>install</arguments>\n    </configuration>\n</execution>\n```\n\n### Running Karma\n\n```xml\n<execution>\n    <id>javascript tests</id>\n    <goals>\n        <goal>karma</goal>\n    </goals>\n\n    <!-- optional: the default plase is \"test\". Some developers\n    choose to run karma in the \"integration-test\" phase. -->\n    <phase>test</phase>\n\n    <configuration>\n        <!-- optional: the default is \"karma.conf.js\" in your working directory -->\n        <karmaConfPath>src/test/javascript/karma.conf.ci.js</karmaConfPath>\n    </configuration>\n</execution>\n```\n\n**Skipping tests:** If you run maven with the `-DskipTests` flag, karma tests will be skipped.\n\n**Ignoring failed tests:** If you want to ignore test failures run maven with the `-Dmaven.test.failure.ignore` flag, \nkarma test results will not stop the build but test results will remain\nin test output files. Suitable for continuous integration tool builds.\n\n**Why karma.conf.ci.js?** When using Karma, you should have two separate\nconfigurations: `karma.conf.js` and `karma.conf.ci.js`. (The second one should inherit configuration\nfrom the first one, and override some options. The example project shows you how to set it up.)\nThe idea is that you use `karma.conf.js` while developing (using watch/livereload etc.), and\n`karma.conf.ci.js` when building - for example, when building, it should only run karma once,\nit should generate xml reports, it should run only in PhantomJS, and/or it should generate\ncode coverage reports.\n\n**Running Karma through Grunt or gulp:** You may choose to run Karma [directly through Grunt](https://github.com/karma-runner/grunt-karma) \nor [through gulp](https://github.com/karma-runner/gulp-karma) instead, as part of the `grunt` or `gulp` execution. That \nwill help to separate your frontend and backend builds even more.\n\n### Running Webpack\n\n```xml\n<execution>\n    <id>webpack build</id>\n    <goals>\n        <goal>webpack</goal>\n    </goals>\n\n    <!-- optional: the default phase is \"generate-resources\" -->\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <!-- optional: if not specified, it will run webpack's default\n        build (and you can remove this whole <configuration> section.) -->\n        <arguments>-p</arguments>\n    </configuration>\n</execution>\n```\n\n### Running bun\n\n```xml\n<execution>\n    <id>bun install</id>\n    <goals>\n        <goal>bun</goal>\n    </goals>\n\n    <!-- optional: default phase is \"generate-resources\" -->\n    <phase>generate-resources</phase>\n\n    <configuration>\n        <!-- optional: The default argument is actually\n        \"install\", so unless you need to run some other bun command,\n        you can remove this whole <configuration> section.\n        -->\n        <arguments>install</arguments>\n    </configuration>\n</execution>\n```\n\n### Optional Configuration \n\n#### Working directory\n\nThe working directory is where you've put `package.json` and your frontend configuration files (`Gruntfile.js` or \n`gulpfile.js` etc). The default working directory is your project's base directory (the same directory as your `pom.xml`). \nYou can change the working directory if you want:\n\n```xml\n<plugin>\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-maven-plugin</artifactId>\n\n    <!-- optional -->\n    <configuration>\n        <workingDirectory>src/main/frontend</workingDirectory>\n    </configuration>\n</plugin>\n```\n\n**Notice:** _Npm packages will always be installed in `node_modules` next to your `package.json`, which is default npm behavior._\n\n#### Installation Directory\n\nThe installation directory is the folder where your node and npm are installed.\nYou can set this property on the different goals. Or choose to set it for all the goals, in the maven configuration.\n\n```xml\n<plugin>\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-maven-plugin</artifactId>\n\n    <!-- optional -->\n    <configuration>\n        <installDirectory>target</installDirectory>\n    </configuration>    \n</plugin>\n```\n\n#### Proxy settings\n\nIf you have [configured proxy settings for Maven](http://maven.apache.org/guides/mini/guide-proxies.html)\nin your settings.xml file, the plugin will automatically use the proxy for downloading node and npm, as well\nas [passing the proxy to npm commands](https://docs.npmjs.com/misc/config#proxy).\n\n**Non Proxy Hosts:** npm does not currently support non proxy hosts - if you are using a proxy and npm install\nis not downloading from your repository, it may be because it cannot be accessed through your proxy. \nIf that is the case, you can stop the npm execution from inheriting the Maven proxy settings like this:\n\n```xml\n<configuration>\n    <npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>\n</configuration>\n```\n\nIf you have [configured proxy settings for Maven](http://maven.apache.org/guides/mini/guide-proxies.html)\nin your settings.xml file, the plugin will automatically [pass the proxy to bower commands](https://docs.npmjs.com/misc/config#proxy).\nIf that is the case, you can stop the bower execution from inheriting the Maven proxy settings like this:\n\n```xml\n<configuration>\n    <bowerInheritsProxyConfigFromMaven>false</bowerInheritsProxyConfigFromMaven>\n</configuration>\n```\n\nIf you want to disable proxy for Yarn you can use `yarnInheritsProxyConfigFromMaven`. When you have proxy settings in your settings.xml file if you don't use this param it will run code below with proxy settings, in some cases you don't want that. Adding this param into the configuration section will solve this issue\n\n```xml\n<execution>\n    <id>tests</id>\n    <goals>\n        <goal>yarn</goal>\n    </goals>\n    <phase>compile</phase>\n    <configuration>\n        <yarnInheritsProxyConfigFromMaven>false</yarnInheritsProxyConfigFromMaven>\n        <arguments>run test</arguments>\n    </configuration>\n</execution>\n\n```\n\n\n#### Environment variables\n\nIf you need to pass some variable to Node, you can set that using the property `environmentVariables` in configuration \ntag of an execution like this:\n\n```xml\n<configuration>\n    <environmentVariables>\n        <!-- Simple var -->\n        <Jon>Snow</Jon>\n        <Tyrion>Lannister</Tyrion>\n        \n        <!-- Var value take from maven properties -->\n        <NODE_ENV>${NODE_ENV}</NODE_ENV>\n    </environmentVariables>        \n</configuration>\n```\n\n#### Ignoring Failure\n\n**Ignoring failed tests:** If you want to ignore test failures in specific execution  you can set that using the property `maven.test.failure.ignore` in configuration tag of an execution like this:\n\n```xml\n<configuration>\n    <testFailureIgnore>true</testFailureIgnore>\n</configuration>\n```\n\n#### Skipping Execution\n\nEach frontend build tool and package manager allows skipping execution.\nThis is useful for projects that contain multiple builds (such as a module containing Java and frontend code).\n\n**Note** that if the package manager (npm or yarn) is skipped, other build tools will also need to be skipped because they\nwould not have been downloaded.\nFor example, in a project using npm and gulp, if npm is skipped, gulp must also be skipped or the build will fail.\n\nTools and property to enable skipping\n\n* npm `-Dskip.npm`\n* yarn `-Dskip.yarn`\n* bower `-Dskip.bower`\n* bun `-Dskip.bun`\n* grunt `-Dskip.grunt`\n* gulp `-Dskip.gulp`\n* jspm `-Dskip.jspm`\n* karma `-Dskip.karma`\n* webpack `-Dskip.webpack`\n\n## Eclipse M2E support\n\nThis plugin contains support for M2E, including lifecycle mappings and support for incremental builds in Eclipse.\nThe `install-node-and-npm` goal will only run on a full project build. The other goals support incremental builds\nto avoid doing unnecessary work. During an incremental build the `npm` goal will only run if the `package.json` file\nhas been changed. The `grunt` and `gulp` goals have new `srcdir` and `triggerfiles` optional configuration options; if\nthese are set they check for changes in your source files before being run. See the wiki for more information.\n\n## Helper scripts\n\nDuring development, it's convenient to have the \"npm\", \"bower\", \"grunt\", \"gulp\" and \"karma\" commands\navailable on the command line. If you want that, use [those helper scripts](frontend-maven-plugin/src/it/example%20project/helper-scripts)!\n\n## To build this project:\n\nRun `$ mvn clean install`\n\n## Issues, Contributing\n\nPlease post any issues on the [Github's Issue tracker](https://github.com/eirslett/frontend-maven-plugin/issues). \n[Pull requests](https://github.com/eirslett/frontend-maven-plugin/pulls) are welcome! \nYou can find a full list of [contributors here](https://github.com/eirslett/frontend-maven-plugin/graphs/contributors).\n\n## License\n\n[Apache 2.0](LICENSE)\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.255859375,
          "content": " \nversion: '{build}'\nskip_tags: true\nclone_depth: 10\nenvironment:\n  MAVEN_VERSION: 3.5.4\n  matrix:\n    - JAVA_HOME: C:\\Program Files\\Java\\jdk1.8.0\n    - JAVA_HOME: C:\\Program Files\\Java\\jdk11\ninstall:\n  - ps: |\n      Add-Type -AssemblyName System.IO.Compression.FileSystem\n      if (!(Test-Path -Path \"C:\\maven\" )) {\n        Write-Host \"Downloading Maven $env:MAVEN_VERSION\"\n        (new-object System.Net.WebClient).DownloadFile(\"http://apache.rediris.es/maven/maven-3/$env:MAVEN_VERSION/binaries/apache-maven-$env:MAVEN_VERSION-bin.zip\", 'C:\\maven-bin.zip')\n        [System.IO.Compression.ZipFile]::ExtractToDirectory(\"C:\\maven-bin.zip\", \"C:\\maven\")\n      }\n  - cmd: SET M2_HOME=C:\\maven\\apache-maven-%MAVEN_VERSION%\n  # Prepend Java entry, remove Ruby entry (C:\\Ruby193\\bin;) from PATH\n  - cmd: SET PATH=%M2_HOME%\\bin;%JAVA_HOME%\\bin;%PATH:C:\\Ruby193\\bin;=%;\n  # Required to avoid errors with JDK 8 because TSL 1.0 & 1.1 support was removed\n  - cmd: SET MAVEN_OPTS=-Xmx2g -Dhttps.protocols=TLSv1.2\n  - cmd: SET JAVA_OPTS=-Xmx2g\n  - cmd: mvn --version\n  - cmd: java -version\nbuild_script:\n  - mvn clean package --batch-mode -DskipTest -Dhttps.protocols=TLSv1.2\ntest_script:\n  - mvn clean install --batch-mode\ncache:\n  - C:\\maven\\ -> appveyor.yml\n  - C:\\Users\\appveyor\\.m2\\ -> pom.xml\n"
        },
        {
          "name": "frontend-maven-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend-plugin-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 7.07421875,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-plugins</artifactId>\n    <version>1.15.2-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n    </properties>\n\n    <name>Frontend Plugins</name>\n\n    <description>\n        This Maven plugin lets you install Node/NPM locally\n        for your project, install dependencies with NPM,\n        run Grunt tasks, and/or run Karma tests.\n    </description>\n\n    <url>https://github.com/eirslett/frontend-maven-plugin</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <scm>\n        <url>https://github.com/eirslett/frontend-maven-plugin</url>\n        <connection>scm:git:https://github.com/eirslett/frontend-maven-plugin.git</connection>\n        <developerConnection>scm:git:git@github.com:eirslett/frontend-maven-plugin.git</developerConnection>\n      <tag>frontend-plugins-1.14.2</tag>\n    </scm>\n\n    <developers>\n        <developer>\n            <id>eirslett</id>\n            <name>Eirik Sletteberg</name>\n            <email>eiriksletteberg@gmail.com</email>\n        </developer>\n    </developers>\n\n    <modules>\n        <module>frontend-plugin-core</module>\n        <module>frontend-maven-plugin</module>\n    </modules>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>3.0.1</version>\n                <configuration>\n                    <autoVersionSubmodules>true</autoVersionSubmodules>\n                    <useReleaseProfile>true</useReleaseProfile>\n                    <releaseProfiles>release</releaseProfiles>\n                    <branchName>master</branchName>\n                    <goals>deploy</goals>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <version>3.1.1</version>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.13</version>\n                <executions>\n                    <execution>\n                        <id>default-deploy</id>\n                        <phase>deploy</phase>\n                        <!-- By default, this is the phase deploy goal will bind to -->\n                        <goals>\n                            <goal>deploy</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <serverId>ossrh</serverId>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n        </plugins>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>3.11.0</version>\n                    <configuration>\n                        <source>1.8</source>\n                        <target>1.8</target>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-source-plugin</artifactId>\n                    <version>3.3.0</version>\n                    <executions>\n                        <execution>\n                            <id>attach-sources</id>\n                            <goals>\n                                <goal>jar-no-fork</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <version>3.5.0</version>\n                    <configuration>\n                        <source>${maven.compiler.source}</source>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>attach-javadocs</id>\n                            <goals>\n                                <goal>jar</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n    <profiles>\n        <profile>\n            <id>release</id>\n            <properties>\n                <gpg.executable>gpg</gpg.executable>\n                <gpg.keyname>${env.GPG_KEYNAME}</gpg.keyname>\n                <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>3.1.0</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <!-- Prevent `gpg` from using pinentry programs -->\n                            <gpgArguments>\n                                <arg>--pinentry-mode</arg>\n                                <arg>loopback</arg>\n                            </gpgArguments>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n"
        },
        {
          "name": "settings-github.xml",
          "type": "blob",
          "size": 0.23046875,
          "content": "<settings>\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>${env.OSSRH_TOKEN_USERNAME}</username>\n            <password>${env.OSSRH_TOKEN_PASSWORD}</password>\n        </server>\n    </servers>\n</settings>\n"
        }
      ]
    }
  ]
}