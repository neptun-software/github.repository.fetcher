{
  "metadata": {
    "timestamp": 1736609078474,
    "page": 338,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FasterXML/jackson-databind",
      "stars": 3537,
      "defaultBranch": "2.19",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2119140625,
          "content": "# Do not merge `pom.xml` from older version, as it will typically conflict\n#\n# note: also need:\n# git config --global merge.ours.driver true\n# (and if ever need to disable change `true` to `false`\n\npom.xml merge=ours\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2275390625,
          "content": "# use glob syntax.\nsyntax: glob\n\n*.class\n*~\n*.bak\n*.off\n*.old\n.DS_Store\n\n# building\n/target\n.mvn/wrapper/maven-wrapper.jar\n\n# Eclipse\n.classpath\n.project\n.settings\n\n# IDEA\n.idea\n*.iml\n*.ipr\n*.iws\n/target\n\n# Other/local\n/gh-workflows\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.583984375,
          "content": "# Overview\n\nThis project contains the general-purpose data-binding functionality\nand tree-model for [Jackson Data Processor](../../../jackson).\nIt builds on [Streaming API](../../../jackson-core) (stream parser/generator) package,\nand uses [Jackson Annotations](../../../jackson-annotations) for configuration.\nProject is licensed under [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\nWhile the original use case for Jackson was JSON data-binding, it can now be used to read content\nencoded in other data formats as well, as long as parser and generator implementations exist.\nNaming of classes uses word 'JSON' in many places even though there is no actual hard dependency to JSON format.\n\n## Status\n\n| Type | Status |\n| ---- | ------ |\n| Build (CI) | [![Build (github)](https://github.com/FasterXML/jackson-databind/actions/workflows/main.yml/badge.svg)](https://github.com/FasterXML/jackson-databind/actions/workflows/main.yml) |\n| Artifact | [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-databind/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-databind) |\n| OSS Sponsorship | [![Tidelift](https://tidelift.com/badges/package/maven/com.fasterxml.jackson.core:jackson-databind)](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind?utm_source=maven-com-fasterxml-jackson-core-jackson-databind&utm_medium=referral&utm_campaign=readme) |\n| Javadocs | [![Javadoc](https://javadoc.io/badge/com.fasterxml.jackson.core/jackson-databind.svg)](http://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind) |\n| Code coverage (2.18) | [![codecov.io](https://codecov.io/github/FasterXML/jackson-databind/coverage.svg?branch=2.18)](https://codecov.io/github/FasterXML/jackson-databind?branch=2.18) |\n| OpenSSF Score | [![OpenSSF  Scorecard](https://api.securityscorecards.dev/projects/github.com/FasterXML/jackson-databind/badge)](https://securityscorecards.dev/viewer/?uri=github.com/FasterXML/jackson-databind) |\n\n# Get it!\n\n## Maven\n\nFunctionality of this package is contained in Java package `com.fasterxml.jackson.databind`, and can be used using following Maven dependency:\n\n```xml\n<properties>\n  ...\n  <!-- Use the latest version whenever possible. -->\n  <jackson.version>2.17.1</jackson.version>\n  ...\n</properties>\n\n<dependencies>\n  ...\n  <dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>${jackson.version}</version>\n  </dependency>\n  ...\n</dependencies>\n```\n\nPackage also depends on `jackson-core` and `jackson-annotations` packages, but when using build tools\nlike Maven or Gradle, dependencies are automatically included.\nYou may, however, want to use [jackson-bom](../../../jackson-bom) to ensure compatible versions\nof dependencies.\nIf not using build tool that can handle dependencies using project's `pom.xml`, you will need to download\nand include these 2 jars explicitly.\n\n## Non-Maven dependency resolution\n\nFor use cases that do not automatically resolve dependencies from Maven repositories, you can still\ndownload jars from [Central Maven repository](https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/).\n\nDatabind jar is also a functional OSGi bundle, with proper import/export declarations, so it can be use on OSGi container as is.\n\nJackson 2.10 and above include `module-info.class` definitions so the jar is also a proper Java Module (JPMS).\n\nJackson 2.12 and above include additional Gradle 6 Module Metadata for version alignment with Gradle.\n\n-----\n## Compatibility\n\n### JDK\n\nJackson-databind package baseline JDK requirements are as follows:\n\n* Versions 2.0 - 2.7 require JDK 6\n* Versions 2.8 - 2.12 require JDK 7 to run (but 2.11 - 2.12 require JDK 8 to build)\n* Versions 2.13 and above require JDK 8\n\n### Android\n\nList is incomplete due to compatibility checker addition being done for Jackson 2.13.\n\n* 2.13: Android SDK 24+\n* 2.14: Android SDK 26+\n* 2.15: Android SDK 26+\n* 2.16: Android SDK 26+\n* 2.17: Android SDK 26+\n* 2.18: (planned) Android SDK 26+\n\nfor information on Android SDK versions to Android Release names see [https://en.wikipedia.org/wiki/Android_version_history]\n\n-----\n\n# Use It!\n\nMore comprehensive documentation can be found from [Jackson-docs](../../../jackson-docs) repository; as well as from [Wiki](../../wiki) of this project.\nBut here are brief introductionary tutorials, in recommended order of reading.\n\n## 1 minute tutorial: POJOs to JSON and back\n\nThe most common usage is to take piece of JSON, and construct a Plain Old Java Object (\"POJO\") out of it. So let's start there. With simple 2-property POJO like this:\n\n```java\n// Note: can use getters/setters as well; here we just use public fields directly:\npublic class MyValue {\n  public String name;\n  public int age;\n  // NOTE: if using getters/setters, can keep fields `protected` or `private`\n}\n```\n\nwe will need a `com.fasterxml.jackson.databind.ObjectMapper` instance, used for all data-binding, so let's construct one:\n\n```java\nObjectMapper mapper = new ObjectMapper(); // create once, reuse\n```\n\nThe default instance is fine for our use -- we will learn later on how to configure mapper instance if necessary. Usage is simple:\n\n```java\nMyValue value = mapper.readValue(new File(\"data.json\"), MyValue.class);\n// or:\nvalue = mapper.readValue(new URL(\"http://some.com/api/entry.json\"), MyValue.class);\n// or:\nvalue = mapper.readValue(\"{\\\"name\\\":\\\"Bob\\\", \\\"age\\\":13}\", MyValue.class);\n```\n\nAnd if we want to write JSON, we do the reverse:\n\n```java\nmapper.writeValue(new File(\"result.json\"), myResultObject);\n// or:\nbyte[] jsonBytes = mapper.writeValueAsBytes(myResultObject);\n// or:\nString jsonString = mapper.writeValueAsString(myResultObject);\n```\n\nSo far so good?\n\n## 3 minute tutorial: Generic collections, Tree Model\n\nBeyond dealing with simple Bean-style POJOs, you can also handle JDK `List`s, `Map`s:\n\n```java\nMap<String, Integer> scoreByName = mapper.readValue(jsonSource, Map.class);\nList<String> names = mapper.readValue(jsonSource, List.class);\n\n// and can obviously write out as well\nmapper.writeValue(new File(\"names.json\"), names);\n```\n\nas long as JSON structure matches, and types are simple.\nIf you have POJO values, you need to indicate actual type (note: this is NOT needed for POJO properties with `List` etc types):\n\n```java\nMap<String, ResultValue> results = mapper.readValue(jsonSource,\n   new TypeReference<Map<String, ResultValue>>() { } );\n// why extra work? Java Type Erasure will prevent type detection otherwise\n```\n\n(note: no extra effort needed for serialization, regardless of generic types)\n\nBut wait! There is more!\n\n(enters Tree Model...)\n\n### Tree Model\n\nWhile dealing with `Map`s, `List`s and other \"simple\" Object types (Strings, Numbers, Booleans) can be simple, Object traversal can be cumbersome.\nThis is where Jackson's [Tree model](https://github.com/FasterXML/jackson-databind/wiki/JacksonTreeModel) can come in handy:\n\n```java\n// can be read as generic JsonNode, if it can be Object or Array; or,\n// if known to be Object, as ObjectNode, if array, ArrayNode etc:\nJsonNode root = mapper.readTree(\"{ \\\"name\\\": \\\"Joe\\\", \\\"age\\\": 13 }\");\nString name = root.get(\"name\").asText();\nint age = root.get(\"age\").asInt();\n\n// can modify as well: this adds child Object as property 'other', set property 'type'\nroot.withObject(\"/other\").put(\"type\", \"student\");\nString json = mapper.writeValueAsString(root); // prints below\n\n/*\nwith above, we end up with something like as 'json' String:\n{\n  \"name\" : \"Bob\",\n  \"age\" : 13,\n  \"other\" : {\n    \"type\" : \"student\"\n  }\n} \n*/\n```\n\nTree Model can be more convenient than data-binding, especially in cases where structure is highly dynamic, or does not map nicely to Java classes.\n\nFinally, feel free to mix and match, and even in the same json document (useful when only part of the document is known and modeled in your code)\n\n```java\n// Some parts of this json are modeled in our code, some are not\nJsonNode root = mapper.readTree(complexJson);\nPerson p = mapper.treeToValue(root.get(\"person\"), Person.class); // known single pojo\nMap<String, Object> dynamicmetadata = mapper.treeToValue(root.get(\"dynamicmetadata\"), Map.class); // unknown smallish subfield, convert all to collections\nint singledeep = root.get(\"deep\").get(\"large\").get(\"hiearchy\").get(\"important\").intValue(); // single value in very deep optional subfield, ignoring the rest\nint singledeeppath = root.at(\"/deep/large/hiearchy/important\").intValue(); // json path\nint singledeeppathunique = root.findValue(\"important\").intValue(); // by unique field name\n\n// Send an aggregate json from heterogenous sources\nObjectNode root = mapper.createObjectNode();\nroot.putPOJO(\"person\", new Person(\"Joe\")); // simple pojo\nroot.putPOJO(\"friends\", List.of(new Person(\"Jane\"), new Person(\"Jack\"))); // generics\nMap<String, Object> dynamicmetadata = Map.of(\"Some\", \"Metadata\");\nroot.putPOJO(\"dynamicmetadata\", dynamicmetadata);  // collections\nroot.putPOJO(\"dynamicmetadata\", mapper.valueToTree(dynamicmetadata)); // same thing\nroot.set(\"dynamicmetadata\", mapper.valueToTree(dynamicmetadata)); // same thing\nroot.withObject(\"deep\").withObject(\"large\").withObject(\"hiearchy\").put(\"important\", 42); // create as you go\nroot.withObject(\"/deep/large/hiearchy\").put(\"important\", 42); // json path\nmapper.writeValueAsString(root);\n```\n\n**Supported for Jackson 2.16+ versions**\n\n```java\n// generics\nList<Person> friends = mapper.treeToValue(root.get(\"friends\"), new TypeReference<List<Person>>() { });\n// create as you go but without trying json path\nroot.withObjectProperty(\"deep\").withObjectProperty(\"large\").withObjectProperty(\"hiearchy\").put(\"important\", 42);\n```\n\n## 5 minute tutorial: Streaming parser, generator\n\nAs convenient as data-binding (to/from POJOs) can be; and as flexible as Tree model can be, there is one more canonical processing model available: incremental (aka \"streaming\") model.\nIt is the underlying processing model that data-binding and Tree Model both build upon, but it is also exposed to users who want ultimate performance and/or control over parsing or generation details.\n\nFor in-depth explanation, look at [Jackson Core component](https://github.com/FasterXML/jackson-core).\nBut let's look at a simple teaser to whet your appetite.\n\n```java\nObjectMapper mapper = ...;\n// First: write simple JSON output\nFile jsonFile = new File(\"test.json\");\n// note: method added in Jackson 2.11 (earlier would need to use\n// mapper.getFactory().createGenerator(...)\nJsonGenerator g = mapper.createGenerator(jsonFile, JsonEncoding.UTF8);\n// write JSON: { \"message\" : \"Hello world!\" }\ng.writeStartObject();\ng.writeStringField(\"message\", \"Hello world!\");\ng.writeEndObject();\ng.close();\n\n// Second: read file back\ntry (JsonParser p = mapper.createParser(jsonFile)) {\n  JsonToken t = p.nextToken(); // Should be JsonToken.START_OBJECT\n  t = p.nextToken(); // JsonToken.FIELD_NAME\n  if ((t != JsonToken.FIELD_NAME) || !\"message\".equals(p.getCurrentName())) {\n   // handle error\n  }\n  t = p.nextToken();\n  if (t != JsonToken.VALUE_STRING) {\n   // similarly\n  }\n  String msg = p.getText();\n  System.out.printf(\"My message to you is: %s!\\n\", msg);\n}\n```\n\n## 10 minute tutorial: configuration\n\nThere are two entry-level configuration mechanisms you are likely to use:\n[Features](https://github.com/FasterXML/jackson-databind/wiki/JacksonFeatures) and [Annotations](https://github.com/FasterXML/jackson-annotations).\n\n### Commonly used Features\n\nHere are examples of configuration features that you are most likely to need to know about.\n\nLet's start with higher-level data-binding configuration.\n\n```java\n// SerializationFeature for changing how JSON is written\n\n// to enable standard indentation (\"pretty-printing\"):\nmapper.enable(SerializationFeature.INDENT_OUTPUT);\n// to allow serialization of \"empty\" POJOs (no properties to serialize)\n// (without this setting, an exception is thrown in those cases)\nmapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n// to write java.util.Date, Calendar as number (timestamp):\nmapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\n// DeserializationFeature for changing how JSON is read as POJOs:\n\n// to prevent exception when encountering unknown property:\nmapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n// to allow coercion of JSON empty String (\"\") to null Object value:\nmapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n```\n\nIn addition, you may need to change some of low-level JSON parsing, generation details:\n\n```java\n// JsonParser.Feature for configuring parsing settings:\n\n// to allow C/C++ style comments in JSON (non-standard, disabled by default)\n// (note: with Jackson 2.5, there is also `mapper.enable(feature)` / `mapper.disable(feature)`)\nmapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n// to allow (non-standard) unquoted field names in JSON:\nmapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n// to allow use of apostrophes (single quotes), non standard\nmapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);\n\n// JsonGenerator.Feature for configuring low-level JSON generation:\n\n// to force escaping of non-ASCII characters:\nmapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);\n```\n\nFull set of features are explained on [Jackson Features](https://github.com/FasterXML/jackson-databind/wiki/JacksonFeatures) page.\n\n### Annotations: changing property names\n\nThe simplest annotation-based approach is to use `@JsonProperty` annotation like so:\n\n```java\npublic class MyBean {\n   private String _name;\n\n   // without annotation, we'd get \"theName\", but we want \"name\":\n   @JsonProperty(\"name\")\n   public String getTheName() { return _name; }\n\n   // note: it is enough to add annotation on just getter OR setter;\n   // so we can omit it here\n   public void setTheName(String n) { _name = n; }\n}\n```\n\nThere are other mechanisms to use for systematic naming changes, including use of \"Naming Strategy\" (via `@JsonNaming` annotation).\n\nYou can use [Mix-in Annotations](https://github.com/FasterXML/jackson-docs/wiki/JacksonMixinAnnotations) to associate any and all Jackson-provided annotations.\n\n### Annotations: Ignoring properties\n\nThere are two main annotations that can be used to ignore properties: `@JsonIgnore` for individual properties; and `@JsonIgnoreProperties` for per-class definition\n\n```java\n// means that if we see \"foo\" or \"bar\" in JSON, they will be quietly skipped\n// regardless of whether POJO has such properties\n@JsonIgnoreProperties({ \"foo\", \"bar\" })\npublic class MyBean\n{\n   // will not be written as JSON; nor assigned from JSON:\n   @JsonIgnore\n   public String internal;\n\n   // no annotation, public field is read/written normally\n   public String external;\n\n   @JsonIgnore\n   public void setCode(int c) { _code = c; }\n\n   // note: will also be ignored because setter has annotation!\n   public int getCode() { return _code; }\n}\n```\n\nAs with renaming, note that annotations are \"shared\" between matching fields, getters and setters: if only one has `@JsonIgnore`, it affects others.\nBut it is also possible to use \"split\" annotations, to for example:\n\n```java\npublic class ReadButDontWriteProps {\n   private String _name;\n   @JsonProperty public void setName(String n) { _name = n; }\n   @JsonIgnore public String getName() { return _name; }\n}\n```\n\nin this case, no \"name\" property would be written out (since 'getter' is ignored); but if \"name\" property was found from JSON, it would be assigned to POJO property!\n\nFor a more complete explanation of all possible ways of ignoring properties when writing out JSON, check [\"Filtering properties\"](http://www.cowtowncoder.com/blog/archives/2011/02/entry_443.html) article.\n\n### Annotations: using custom constructor\n\nUnlike many other data-binding packages, Jackson does not require you to define \"default constructor\" (constructor that does not take arguments).\nWhile it will use one if nothing else is available, you can easily define that an argument-taking constructor is used:\n\n```java\npublic class CtorBean\n{\n  public final String name;\n  public final int age;\n\n  @JsonCreator // constructor can be public, private, whatever\n  private CtorBean(@JsonProperty(\"name\") String name,\n    @JsonProperty(\"age\") int age)\n  {\n      this.name = name;\n      this.age = age;\n  }\n}\n```\n\nConstructors are especially useful in supporting use of\n[Immutable objects](http://www.cowtowncoder.com/blog/archives/2010/08/entry_409.html).\n\nAlternatively, you can also define \"factory methods\":\n\n```java\npublic class FactoryBean\n{\n    // fields etc omitted for brevity\n\n    @JsonCreator\n    public static FactoryBean create(@JsonProperty(\"name\") String name) {\n      // construct and return an instance\n    }\n}\n```\n\nNote that use of a \"creator method\" (`@JsonCreator` with `@JsonProperty` annotated arguments) does not preclude use of setters: you\ncan mix and match properties from constructor/factory method with ones that\nare set via setters or directly using fields.\n\n## Tutorial: fancier stuff, conversions\n\nOne useful (but not very widely known) feature of Jackson is its ability\nto do arbitrary POJO-to-POJO conversions. Conceptually you can think of conversions as sequence of 2 steps: first, writing a POJO as JSON, and second, binding that JSON into another kind of POJO. Implementation just skips actual generation of JSON, and uses more efficient intermediate representation.\n\nConversions work between any compatible types, and invocation is as simple as:\n\n```java\nResultType result = mapper.convertValue(sourceObject, ResultType.class);\n```\n\nand as long as source and result types are compatible -- that is, if to-JSON, from-JSON sequence would succeed -- things will \"just work\".\nBut here are a couple of potentially useful use cases:\n\n```java\n// Convert from List<Integer> to int[]\nList<Integer> sourceList = ...;\nint[] ints = mapper.convertValue(sourceList, int[].class);\n// Convert a POJO into Map!\nMap<String,Object> propertyMap = mapper.convertValue(pojoValue, Map.class);\n// ... and back\nPojoType pojo = mapper.convertValue(propertyMap, PojoType.class);\n// decode Base64! (default byte[] representation is base64-encoded String)\nString base64 = \"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz\";\nbyte[] binary = mapper.convertValue(base64, byte[].class);\n```\n\nBasically, Jackson can work as a replacement for many Apache Commons components, for tasks like base64 encoding/decoding, and handling of \"dyna beans\" (Maps to/from POJOs).\n\n## Tutorial: Builder design pattern + Jackson\nThe Builder design pattern is a creational design pattern and can be used to create complex objects step by step.\nIf we have an object that needs multiple checks on other dependencies, In such cases, it is preferred to use builder design pattern.\n\nLet's consider the person structure, which has some optional fields\n\n```java\npublic class Person {\n    private final String name;\n    private final Integer age;\n \n    // getters\n}\n```\n\nLet’s see how we can employ its power in deserialization. First of all, let’s declare a private all-arguments constructor, and a Builder class.\n```java\nprivate Person(String name, Integer age) {\n    this.name = name;\n    this.age = age;\n}\n \nstatic class Builder {\n    String name;\n    Integer age;\n    \n    Builder withName(String name) {\n        this.name = name;\n        return this;\n    }\n    \n    Builder withAge(Integer age) {\n        this.age = age;\n        return this;\n    }\n    \n    public Person build() {\n        return new Person(name, age);\n    } \n}\n```\nFirst of all, we need to mark our class with `@JsonDeserialize` annotation, passing a builder parameter with a fully qualified domain name of a builder class.\nAfter that, we need to annotate the builder class itself as `@JsonPOJOBuilder`.\n\n```java\n@JsonDeserialize(builder = Person.Builder.class)\npublic class Person {\n    //...\n    \n    @JsonPOJOBuilder\n    static class Builder {\n        //...\n    }\n}\n```\n\nA simple unit test will be:\n\n```java\nString json = \"{\\\"name\\\":\\\"Hassan\\\",\\\"age\\\":23}\";\nPerson person = new ObjectMapper().readValue(json, Person.class);\n \nassertEquals(\"Hassan\", person.getName());\nassertEquals(23, person.getAge().intValue());\n```\n\nIf your builder pattern implementation uses other prefixes for methods or uses other names than build() for the builder method Jackson also provide a handy way for you.\n\nFor example, if you have a builder class that uses the \"set\" prefix for its methods and use the create() method instead of build() for building the whole class, you have to annotate your class like:\n```java\n@JsonPOJOBuilder(buildMethodName = \"create\", withPrefix = \"set\")\nstatic class Builder {\n    String name;\n    Integer age;\n    \n    Builder setName(String name) {\n        this.name = name;\n        return this;\n    }\n    \n    Builder setAge(Integer age) {\n        this.age = age;\n        return this;\n    }\n    \n    public Person create() {\n        return new Person(name, age);\n    } \n}\n```\n\nTo deserialize JSON fields under a different name than their object counterparts,\nthe @JsonProperty annotation can be used within the builder on the appropriate fields.\n\n```java\n@JsonPOJOBuilder(buildMethodName = \"create\", withPrefix = \"set\")\nstatic class Builder {\n    @JsonProperty(\"known_as\")\n    String name;\n    Integer age;\n    //...\n}\n```\nThis will deserialize the JSON property `known_as` into the builder field `name`. If a mapping like this is not provided (and further annotations aren't supplied to handle this), an `Unrecognized field \"known_as\"` exception will be thrown during deserialization if the field is provided anyways.\n\nIf you wish to refer to properties with more than one alias for deserialization, the `@JsonAlias` annotation can be used.\n\n```java\n@JsonPOJOBuilder(buildMethodName = \"create\", withPrefix = \"set\")\nstatic class Builder {\n    @JsonProperty(\"known_as\")\n    @JsonAlias({\"identifier\", \"first_name\"})\n    String name;\n    Integer age;\n    //...\n}\n```\nThis will deserialize JSON fields with `known_as`, as well as `identifer` and `first_name` into `name`. Rather than an array of entries, a single alias can be used by specifying a string as such `JsonAlias(\"identifier\")`.  \nNote: to use the `@JsonAlias` annotation, a `@JsonProperty` annotation must also be used.\n\n\n\n\nOverall, Jackson library is very powerful in deserializing objects using builder pattern.\n \n# Contribute!\n\nWe would love to get your contribution, whether it's in form of bug reports, Requests for Enhancement (RFE), documentation, or code patches.\n\nSee [CONTRIBUTING](https://github.com/FasterXML/jackson/blob/master/CONTRIBUTING.md) for details on things like:\n\n* Community, ways to interact (mailing lists, gitter)\n* Issue tracking ([GitHub Issues](https://github.com/FasterXML/jackson-databind/issues))\n* Paperwork: CLA (just once before the first merged contribution)\n\n## Limitation on Dependencies by Core Components\n\nOne additional limitation exists for so-called core components (streaming api, jackson-annotations and jackson-databind): no additional dependencies are allowed beyond:\n\n* Core components may rely on any methods included in the supported JDK\n    * Minimum Java version is Java 7 for Jackson 2.7 - 2.12 of `jackson-databind` and most non-core components\n    * Minimum Java version is Java 8 for Jackson 2.13 and later\n* Jackson-databind (this package) depends on the other two (annotations, streaming).\n\nThis means that anything that has to rely on additional APIs or libraries needs to be built as an extension,\nusually a Jackson module.\n\n## Branches\n\n`master` branch is for developing the next major Jackson version -- 3.0 -- but there\nare active maintenance branches in which much of development happens:\n\n* `2.16` is the branch for \"next\" minor version to release (as of July 2023)\n* `2.15` is the current stable minor 2.x version\n* `2.14` is for selected backported fixes\n\nOlder branches are usually not maintained after being declared as closed\non [Jackson Releases](https://github.com/FasterXML/jackson/wiki/Jackson-Releases) page,\nbut exist just in case a rare emergency patch is needed.\nAll released versions have matching git tags (e.g. `jackson-dataformats-binary-2.12.3`).\n\n-----\n\n## Differences from Jackson 1.x\n\nProject contains versions 2.0 and above: source code for last (1.x) release, 1.9, is available at\n[Jackson-1](../../../jackson-1) repo.\n\nMain differences compared to 1.x \"mapper\" jar are:\n\n* Maven build instead of Ant\n* Java package is now `com.fasterxml.jackson.databind` (instead of `org.codehaus.jackson.map`)\n\n-----\n\n## Support\n\n### Community support\n\nJackson components are supported by the Jackson community through mailing lists, Gitter forum, Github issues. See [Participation, Contributing](../../../jackson#participation-contributing) for full details.\n\n\n### Enterprise support\n\nAvailable as part of the [Tidelift](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind) Subscription.\n\nThe maintainers of `jackson-databind` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind?utm_source=maven-com-fasterxml-jackson-core-jackson-databind&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n-----\n\n## Further reading\n\n* [Overall Jackson Docs](../../../jackson-docs)\n* [Project wiki page](https://github.com/FasterXML/jackson-databind/wiki)\n\nRelated:\n\n* [Core annotations](https://github.com/FasterXML/jackson-annotations) package defines annotations commonly used for configuring databinding details\n* [Core parser/generator](https://github.com/FasterXML/jackson-core) package defines low-level incremental/streaming parsers, generators\n* [Jackson Project Home](../../../jackson) has links to all modules\n* [Jackson Docs](../../../jackson-docs) is project's documentation hub\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.5849609375,
          "content": "# Security Policy\n\nLast Updated: 2022-09-20\n\n## Supported Versions\n\nCurrent status of open branches, with new releases, can be found from [Jackson Releases](https://github.com/FasterXML/jackson/wiki/Jackson-Releases)\nwiki page\n\n## Reporting a Vulnerability\n\nThe recommended mechanism for reporting possible security vulnerabilities follows\nso-called \"Coordinated Disclosure Plan\" (see [definition of DCP](https://vuls.cert.org/confluence/display/Wiki/Coordinated+Vulnerability+Disclosure+Guidance)\nfor general idea). The first step is to file a [Tidelift security contact](https://tidelift.com/security):\nTidelift will route all reports via their system to maintainers of relevant package(s), and start the\nprocess that will evaluate concern and issue possible fixes, send update notices and so on.\nNote that you do not need to be a Tidelift subscriber to file a security contact.\n\nAlternatively you may also report possible vulnerabilities to `info` at fasterxml dot com\nmailing address. Note that filing an issue to go with report is fine, but if you do that please\nDO NOT include details of security problem in the issue but only in email contact.\nThis is important to give us time to provide a patch, if necessary, for the problem.\n\n## Verifying Artifact signatures\n\n(for more in-depth explanation, see [Apache Release Signing](https://infra.apache.org/release-signing#keys-policy) document)\n\nTo verify that any given Jackson artifact has been signed with a valid key, have a look at `KEYS` file of the main Jackson repo:\n\nhttps://github.com/FasterXML/jackson/blob/master/KEYS\n\nwhich lists all known valid keys in use.\n"
        },
        {
          "name": "attic",
          "type": "tree",
          "content": null
        },
        {
          "name": "create-test-report.sh",
          "type": "blob",
          "size": 0.0390625,
          "content": "#!/bin/sh\n\nmvn surefire-report:report  \n"
        },
        {
          "name": "dep_build.yml",
          "type": "blob",
          "size": 1.04296875,
          "content": "name: Re-build on jackson-core push\non:\n  repository_dispatch:\n    types: [jackson-core-pushed]\n  # just for testing\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    # Do we want wide matrix build? For now, limited\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java_version: ['8', '17', '21']\n        os: ['ubuntu-22.04']\n    env:\n      JAVA_OPTS: \"-XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n    steps:\n    - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4\n    - name: Set up JDK\n      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1\n      with:\n        distribution: 'temurin'\n        java-version: ${{ matrix.java_version }}\n        cache: 'maven'\n    - name: Build and test\n      run: ./mvnw -B -ff -ntp clean verify\n\n  # And let's proceed recursively...\n  trigger-downstream-builds:\n    name: Trigger downstream builds\n    uses: ./.github/workflows/trigger_dep_builds.yml\n    with:\n      secrets:\n        token: ${{ secrets.REPO_DISPATCH }}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.0419921875,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`\\\\unset -f command; \\\\command -v java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.7587890625,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Maven Start Up Batch script\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM M2_HOME - location of maven2's installed home dir\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho.\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho.\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %DOWNLOAD_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 21.76953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- This module was also published with a richer model, Gradle metadata,  -->\n  <!-- which should be used instead. Do not delete the following line which  -->\n  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->\n  <!-- that they should prefer consuming it instead. -->\n  <!-- do_not_remove: published-with-gradle-metadata -->\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>com.fasterxml.jackson</groupId>\n    <artifactId>jackson-base</artifactId>\n    <version>2.19.0-SNAPSHOT</version>\n  </parent>\n  <groupId>com.fasterxml.jackson.core</groupId>\n  <artifactId>jackson-databind</artifactId>\n  <version>2.19.0-SNAPSHOT</version>\n  <name>jackson-databind</name>\n  <packaging>jar</packaging>\n  <description>General data-binding functionality for Jackson: works on core streaming API</description>\n  <url>https://github.com/FasterXML/jackson</url>\n  <inceptionYear>2008</inceptionYear>\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  \n  <scm>\n    <connection>scm:git:git@github.com:FasterXML/jackson-databind.git</connection>\n    <developerConnection>scm:git:git@github.com:FasterXML/jackson-databind.git</developerConnection>\n    <url>https://github.com/FasterXML/jackson-databind</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <properties>\n    <!-- Until Jackson 2.11 (inclusive) baseline was JDK 7 (except for annotations/streaming),\n         with 2.12 baseline became JDK8\n      -->\n    <javac.src.version>1.8</javac.src.version>\n    <javac.target.version>1.8</javac.target.version>\n\n    <!-- 12-Nov-2022, tatu: [databind#3659] Verify Android SDK compatibility.\n\n         Baseline compatibility:\n\n         * Jackson 2.13 compatible with Android SDK 24 and up\n         * Jackson 2.14 - 2.18 compatible with Android SDK 26 and up\n\n      -->\n    <version.android.sdk>26</version.android.sdk>\n    <version.android.sdk.signature>0.5.1</version.android.sdk.signature>\n\n    <version.bytebuddy>1.15.10</version.bytebuddy>\n    <version.mockito>4.11.0</version.mockito>\n\n    <!-- Can not use default, since group id != Java package name here -->\n    <osgi.export>com.fasterxml.jackson.databind.*;version=${project.version}</osgi.export>\n    <!-- fix for databind#2299: using jackson-databind in an OSGi environment under Android --> \n    <osgi.import>\n        org.w3c.dom.bootstrap;resolution:=optional,\n        *\n    </osgi.import>\n\n    <!-- Generate PackageVersion.java into this directory. -->\n    <packageVersion.dir>com/fasterxml/jackson/databind/cfg</packageVersion.dir>\n    <packageVersion.package>com.fasterxml.jackson.databind.cfg</packageVersion.package>\n\n    <!-- for Reproducible Builds -->\n    <project.build.outputTimestamp>2024-09-27T01:57:15Z</project.build.outputTimestamp>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <!-- We need to specify later Bytebuddy version because Mockito 4.11.0 depends on earlier\n           Bytebuddy which does not support JDK 21, since 2.17-->\n      <dependency>\n        <groupId>net.bytebuddy</groupId>\n        <artifactId>byte-buddy</artifactId>\n        <version>${version.bytebuddy}</version>\n      </dependency>\n      <dependency>\n        <groupId>net.bytebuddy</groupId>\n        <artifactId>byte-buddy-agent</artifactId>\n        <version>${version.bytebuddy}</version>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n  <dependencies>\n    <!-- Builds on core streaming API; also needs core annotations -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <!-- 06-Mar-2017, tatu: Although bom provides for dependencies, some legacy\n             usage seems to benefit from actually specifying version here in case\n             it is dependent on transitively\n        -->\n      <version>${jackson.version.annotations}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>${jackson.version.core}</version>\n    </dependency>\n\n    <!-- Test dependencies -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency> <!-- added in 2.16 -->\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava-testlib</artifactId>\n      <version>31.1-jre</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- For testing TestNoClassDefFoundDeserializer -->\n    <dependency>\n      <groupId>javax.measure</groupId>\n      <artifactId>jsr-275</artifactId>\n      <version>0.9.1</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- For heap usage testing see https://github.com/FasterXML/jackson-databind/pull/3675 -->\n    <dependency>\n      <groupId>org.openjdk.jol</groupId>\n      <artifactId>jol-core</artifactId>\n      <version>0.16</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- Since 2.17, started using Mockito instead of Powermock -->\n    <!-- For testing with static methods -->\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <version>${version.mockito}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-inline</artifactId>\n      <version>${version.mockito}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <!-- Dependencies for testing \"type pollution\", see:\n         https://github.com/FasterXML/jackson-databind/pull/4848\n      -->\n    <dependency>\n      <groupId>org.junit.platform</groupId>\n      <artifactId>junit-platform-suite-engine</artifactId>\n      <version>1.10.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.micronaut.test</groupId>\n      <artifactId>micronaut-test-type-pollution</artifactId>\n      <version>4.6.2</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <!-- Alas, need to include snapshot reference since otherwise can not find\n       snapshot of parent... -->\n  <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <releases><enabled>false</enabled></releases>\n      <snapshots><enabled>true</enabled></snapshots>\n    </repository>\n  </repositories>\n\n  <build>\n    <plugins>\n      <plugin>\n      <groupId>org.jacoco</groupId>\n      <artifactId>jacoco-maven-plugin</artifactId>\n      <executions>\n\t<execution>\n          <goals>\n            <goal>prepare-agent</goal>\n          </goals>\n        </execution>\n        <!-- attached to Maven test phase -->\n        <execution>\n\t  <id>report</id>\n\t  <phase>test</phase>\n\t  <goals>\n\t    <goal>report</goal>\n\t    </goals>\n\t  </execution>\n\t</executions>\n      </plugin>\n\n      <!-- Important: enable enforcer plug-in: -->\n      <plugin>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <executions> <!-- or?  combine.children=\"merge\"> -->\n          <execution>\n            <id>enforce-properties</id>\n\t    <phase>validate</phase>\n            <goals><goal>enforce</goal></goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <version>${version.plugin.surefire}</version>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <classpathDependencyExcludes>\n            <exclude>javax.measure:jsr-275</exclude>\n          </classpathDependencyExcludes>\n          <excludes>\n            <exclude>com.fasterxml.jackson.databind.MapperFootprintTest</exclude>\n          </excludes>\n          <test>com.fasterxml.jackson.databind.PrimarySuite</test>\n          <!-- 26-Nov-2019, tatu: moar parallelism! Per-class basis, safe, efficient enough\n                  ... although not 100% sure this makes much difference TBH\n            -->\n          <threadCount>4</threadCount>\n          <parallel>classes</parallel>\n        </configuration>\n      </plugin>\n\n      <!-- parent definitions should be ok, but need to add more links -->\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <configuration>\n          <links combine.children=\"append\">\n            <link>https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-annotations/2.19.0</link>>\n            <link>https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/2.19.0</link>>\n          </links>\n        </configuration>\n      </plugin>\n\n      <!-- settings are fine, but needed to trigger execution! -->\n      <plugin>\n        <groupId>com.google.code.maven-replacer-plugin</groupId>\n        <artifactId>replacer</artifactId>\n      </plugin>\n\n      <!--  04-Mar-2019, tatu: Add rudimentary JDK9+ module info. To build with JDK 8\n             will have to use `moduleInfoFile` as anything else requires JDK 9+\n        -->\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n      </plugin>\n      <!-- 03-Nov-2020, tatu: Add LICENSE from main level -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n      </plugin>\n\n      <plugin>\n        <groupId>de.jjohannes</groupId>\n        <artifactId>gradle-module-metadata-maven-plugin</artifactId>\n      </plugin>\n\n      <!-- 12-Nov-2022, tatu: [databind#3659] add verification of compatibility\n\t   wrt Android SDK versions using AnimalSniffer with \"gummy bears\" signatures.\n\n           To be run from CI, but manually with:\n\n              mvn animal-sniffer:check\n\t-->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>animal-sniffer-maven-plugin</artifactId>\n        <version>1.22</version>\n        <configuration>\n          <signature>\n            <groupId>com.toasttab.android</groupId>\n            <artifactId>gummy-bears-api-${version.android.sdk}</artifactId>\n            <version>${version.android.sdk.signature}</version>\n          </signature>\n          <ignores>\n            <!-- These are only accessed (safely) via \"Java7SupportImpl.java\" so ignore\n              -->\n            <ignore>java.beans.ConstructorProperties</ignore>\n            <ignore>java.beans.Transient</ignore>\n          </ignores>\n        </configuration>\n      </plugin>\n\n     </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>release</id>\n      <properties>\n        <maven.test.skip>true</maven.test.skip>\n        <skipTests>true</skipTests>\n      </properties>\n    </profile>\n    <!-- 07-Dec-2021, tatu: This is a huge mess, sorry folks... -->\n    <profile>\n      <id>java11</id>\n      <activation>\n        <jdk>11</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.codehaus.mojo</groupId>\n            <artifactId>build-helper-maven-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>add-test-source</id>\n                <phase>generate-test-sources</phase>\n                <goals>\n                  <goal>add-test-source</goal>\n                </goals>\n                <configuration>\n                  <sources>\n                    <source>src/test-jdk11/java</source>\n                  </sources>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <inherited>true</inherited>\n            <configuration>\n              <!-- Enable Java 11+ for all sources so that Intellij picks the right language level -->\n              <source>11</source>\n              <release>11</release>\n              <compilerArgs>\n                <arg>-parameters</arg>\n              </compilerArgs>\n              <fork>true</fork>\n              <useIncrementalCompilation>true</useIncrementalCompilation>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <!-- And different set up for JDK 17 -->\n      <id>java17</id>\n      <activation>\n        <jdk>17</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.codehaus.mojo</groupId>\n            <artifactId>build-helper-maven-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>add-test-source</id>\n                <phase>generate-test-sources</phase>\n                <goals>\n                  <goal>add-test-source</goal>\n                </goals>\n                <configuration>\n                  <sources>\n                    <source>src/test-jdk11/java</source>\n                    <source>src/test-jdk17/java</source>\n                  </sources>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <inherited>true</inherited>\n            <configuration>\n              <!-- Enable Java 17 for all sources so that Intellij picks the right language level -->\n              <source>17</source>\n              <release>17</release>\n              <compilerArgs>\n                <arg>-parameters</arg>\n                <arg>--add-opens=java.base/java.lang=ALL-UNNAMED</arg>\n                <arg>--add-opens=java.base/java.util=ALL-UNNAMED</arg>\n              </compilerArgs>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n              <argLine>--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED</argLine>\n            </configuration>\n            <executions>\n              <execution>\n                <id>type-pollution-test</id>\n                <phase>test</phase>\n                <goals>\n                  <goal>test</goal>\n                </goals>\n                <configuration>\n                  <test>com.fasterxml.jackson.databind.typepollution.TypePollutionSuite</test>\n                  <threadCount>1</threadCount>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <!-- And different set up for JDK 21 -->\n      <id>java21</id>\n      <activation>\n        <jdk>[21,)</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.codehaus.mojo</groupId>\n            <artifactId>build-helper-maven-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>add-test-source</id>\n                <phase>generate-test-sources</phase>\n                <goals>\n                  <goal>add-test-source</goal>\n                </goals>\n                <configuration>\n                  <sources>\n                    <source>src/test-jdk11/java</source>\n                    <source>src/test-jdk17/java</source>\n                    <source>src/test-jdk21/java</source>\n                  </sources>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <inherited>true</inherited>\n            <configuration>\n              <!-- Enable Java 21 for all sources so that Intellij picks the right language level -->\n              <source>21</source>\n              <release>21</release>\n              <compilerArgs>\n                <arg>-parameters</arg>\n                <arg>--add-opens=java.base/java.lang=ALL-UNNAMED</arg>\n                <arg>--add-opens=java.base/java.util=ALL-UNNAMED</arg>\n              </compilerArgs>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n              <argLine>--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED</argLine>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>errorprone</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n              <compilerArgs>\n                <arg>-XDcompilePolicy=simple</arg>\n                <arg>\n                  -Xplugin:ErrorProne\n                  <!--\n                  Disable all checks in test code. Bugs in tests can hide runtime failures,\n                  however these can be enabled later on. Many issues may require sub-optional\n                  code to reproduce failures.\n                  -->\n                  -XepExcludedPaths:.*/src/test/java/.*\n\n                  <!-- ############### -->\n                  <!-- UPGRADED CHECKS -->\n                  <!-- ############### -->\n\n                  <!-- Boxed primitive equality checks can be dangerous when presented with unexpected inputs -->\n                  -Xep:BoxedPrimitiveEquality:ERROR\n\n                  <!-- ############### -->\n                  <!-- DISABLED CHECKS -->\n                  <!-- ############### -->\n\n                  <!-- UnusedVariable is great at catching mistakes quickly, but\n                  requires a few suppressions to avoid noise. Deferring to avoid noise\n                  with the introduction of ErrorProne. -->\n                  -Xep:UnusedVariable:OFF\n                  <!--\n                  Disabled to avoid potential API changes. It's not clear if custom JsonNode types\n                  exist, and if any do implement equals without hashCode, it's likely they cause bugs.\n                  I plan to try fixing this separately.\n                  -->\n                  -Xep:EqualsHashCode:OFF\n                  <!-- Style: javadoc tag validation -->\n                  -Xep:MissingSummary:OFF\n                  -Xep:InvalidInlineTag:OFF\n                  -Xep:EmptyBlockTag:OFF\n                  -Xep:AlmostJavadoc:OFF\n                  -Xep:InvalidLink:OFF\n                  <!-- Style: low reward for enabling. -->\n                  -Xep:UnnecessaryParentheses:OFF\n                  <!-- Style: low signal -->\n                  -Xep:InconsistentCapitalization:OFF\n                  <!-- Style: requires specific comments when switch branches neither break nor return -->\n                  -Xep:FallThrough:OFF\n                  <!-- Style: disable noisy check for importing common names from nested classes -->\n                  -Xep:BadImport:OFF\n                  <!-- Style: requires a default case when not all cases are handled -->\n                  -Xep:MissingCasesInEnumSwitch:OFF\n                  <!-- Style: avoid clashes with java.lang. Possibly worth enabling, but this can be done later -->\n                  -Xep:JavaLangClash:OFF\n                  <!-- These can likely be updated from protected to private, but it's relatively low signal -->\n                  -Xep:ProtectedMembersInFinalClass:OFF\n                  <!-- These can likely be updated from public to protected, but it's relatively low signal -->\n                  -Xep:PublicConstructorForAbstractClass:OFF\n                  <!-- jackson-databind doesn't have a logger, in many cases there's no way to pre-validate inputs -->\n                  -Xep:EmptyCatch:OFF\n                  -Xep:EqualsGetClass:OFF\n                  <!-- Noisy check that's largely unnecessary unless the result is mutated.\n                  Returning only immutable collections requires additional overhead and\n                  impact must be carefully considered. -->\n                  -Xep:MixedMutabilityReturnType:OFF\n                  <!-- Noisy in jackson and libraries which must interact with generics -->\n                  -Xep:TypeParameterUnusedInFormals:OFF\n                  <!-- Check is noisy around code that's meant to handle types that are considered obsolete -->\n                  -Xep:JdkObsolete:OFF\n                  <!-- Avoid noise from tests -->\n                  -Xep:JUnit3FloatingPointComparisonWithoutDelta:OFF\n                  <!-- Disable the StringSplitter check because it requires a guava dependency -->\n                  -Xep:StringSplitter:OFF\n                  <!-- Disable checks which require custom annotations -->\n                  -Xep:AnnotateFormatMethod:OFF\n                  -Xep:GuardedBy:OFF\n                  <!-- This check is generally high signal, however it is noisy in\n                  low level projects which implement caches and interning. -->\n                  -Xep:ReferenceEquality:OFF\n                </arg>\n              </compilerArgs>\n              <annotationProcessorPaths>\n                <path>\n                  <groupId>com.google.errorprone</groupId>\n                  <artifactId>error_prone_core</artifactId>\n                  <version>2.4.0</version>\n                </path>\n              </annotationProcessorPaths>\n            \t<fork>true</fork>\n            \t<useIncrementalCompilation>true</useIncrementalCompilation>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n\n</project>\n"
        },
        {
          "name": "profile.sh",
          "type": "blob",
          "size": 0.1376953125,
          "content": "#!/bin/sh\n\njava -Xmx256m -server -cp lib/\\*:target/classes:target/test-classes \\\n -Xrunhprof:cpu=samples,depth=10,verbose=n,interval=2 \\\n$*\n\n"
        },
        {
          "name": "release-notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 0.0810546875,
          "content": "#!/bin/sh\n\njava -Xmx256m -server -cp lib/\\*:target/classes:target/test-classes $*\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}