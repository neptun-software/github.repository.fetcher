{
  "metadata": {
    "timestamp": 1736708123659,
    "page": 540,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sockeqwe/AdapterDelegates",
      "stars": 2933,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.724609375,
          "content": ".gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n\n# Built application files\n*.apk\n*.ap_\nbin/\ngen/\nclasses/\ngen-external-apklibs/\n\n# Eclipse project files\n.classpath\n.project\n.metadata\n.settings\n\n# IntelliJ files\n.idea\n*.iml\n\n# OSX files\n.DS_Store\n\n# Windows files\nThumbs.db\n\n# vi swap files\n*.swp\n\n# backup files\n*.bak\n\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\nbuild/\n.gradle\n\n#maven files\ntarget/\n/null\n\n# Local configuration file (sdk path, etc)\n\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n#Log Files\n*.log\n\n\n#crashlytics\napp/src/main/res/values/com_crashlytics_export_strings.xml\n\n#infer\ninfer-out/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0791015625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Hannes Dorfmann\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.373046875,
          "content": "# AdapterDelegates\nRead the motivation for this project in [my blog post](http://hannesdorfmann.com/android/adapter-delegates).\n\nThe idea of this library is to build your adapters by composing reusable components.\n\n    Favor composition over inheritance\n\nThe idea is that you define an AdapterDelegate for each view type. \nThis delegate is responsible for creating ViewHolder and binding ViewHolder for a certain viewtype. \nThen you can compose your RecyclerView Adapter by registering the AdapterDelegates that you really need.\n\n### Changelog\nSee [releases section](https://github.com/sockeqwe/AdapterDelegates/releases)\n\n\n# Quickstart: Kotlin DSL\nThere are 2 artifacts for kotlin users that allow you to write Adapter Delegates more convenient by providing a `DSL`:\n\n## Dependencies\n\n```\nimplementation 'com.hannesdorfmann:adapterdelegates4-kotlin-dsl:4.3.2'\n\n// If you use Kotlin Android Extensions and synthetic properties (alternative to findViewById())\nimplementation 'com.hannesdorfmann:adapterdelegates4-kotlin-dsl-layoutcontainer:4.3.2'\n\n// If you use ViewBinding\nimplementation 'com.hannesdorfmann:adapterdelegates4-kotlin-dsl-viewbinding:4.3.2'\n```\n\n## How to use it\n\n```kotlin\nfun catAdapterDelegate(itemClickedListener : (Cat) -> Unit) = adapterDelegate<Cat, Animal>(R.layout.item_cat) {\n\n    // This is the initializer block where you initialize the ViewHolder.\n    // Its called one time only in onCreateViewHolder.\n    // this is where you can call findViewById() and setup click listeners etc.\n\n    val name : TextView = findViewById(R.id.name)\n    name.setClickListener { itemClickedListener(item) } // Item is automatically set for you. It's set lazily though (set in onBindViewHolder()). So only use it for deferred calls like clickListeners.\n\n    bind { diffPayloads -> // diffPayloads is a List<Any> containing the Payload from your DiffUtils\n        // This is called anytime onBindViewHolder() is called\n        name.text = item.name // Item is of type Cat and is the current bound item.\n    }\n}\n```\n\nIn case you want to use kotlin android extensions and synthetic properties (as alternative to findViewById()) use `adapterDelegateLayoutContainer` instead of `adapterDelegate` like this:\n\n```kotlin\nfun catAdapterDelegate(itemClickedListener : (Cat) -> Unit) = adapterDelegateLayoutContainer<Cat, Animal>(R.layout.item_cat) {\n\n    name.setClickListener { itemClickedListener(item) } // no need for findViewById(). Name is imported as synthetic property from kotlinx.android.synthetic.main.item_cat\n\n    bind { diffPayloads ->\n        name.text = item.name\n    }\n}\n```\n\nIf you use `adapterDelegateLayoutContainer()` don't forget to add\n```\nandroidExtensions {\n    experimental = true\n}\n```\n\nto your build.gradle to enable LayoutContainer.\n\nIn case you want to use ViewBinding\\DataBinding use `adapterDelegateViewBinding` instead of `adapterDelegate` like this:\n\n```kotlin\nfun cat2AdapterDelegate(itemClickedListener : (Cat) -> Unit) = adapterDelegateViewBinding<Cat, DisplayableItem, ItemCatBinding>(\n    { layoutInflater, root -> ItemCatBinding.inflate(layoutInflater, root, false) }\n) {\n    binding.name.setOnClickListener {\n        itemClickedListener(item)\n    }\n    bind {\n        binding.name.text = item.name\n    }\n}\n```\n\nYou have to specify if a specific AdapterDelegate is responsible for a specific item.\nPer default this is done with an `instanceof` check like  `item instanceof Cat`.\nYou can override this if you want to handle it in a custom way by setting the `on` lambda\nand return true or false:\n\n```kotlin\nadapterDelegate<Cat, Animal> (\n    layout = R.layout.item_cat,\n    on = { item: Animal, items: List, position: Int ->\n        if (item is Cat && position == 0)\n            true // return true: this adapterDelegate handles it\n        else\n            false // return false\n    }\n){\n    ...\n    bind { ... }\n}\n```\n\nThe same `on` parameter is available for `adapterDelegateLayoutContainer()` and `adapterDelegateViewBinding()` DSL.\n\n### Compose your Adapter\nFinally, you can compose your `RecyclerView Adapter` by registering your AdapterDelegates like this:\n\n```kotlin\nval adapter = ListDelegationAdapter<List<Animal>>(\n    catAdapterDelegate(...),\n    dogAdapterDelegate(),\n    snakeAdapterDelegate()\n)\n```\n\n### `fun` vs. `val`\nYou could define your AdapterDelegate also as TopLevel `val` like this:\n\n```kotlin\n// top level property inside CatDelegate.kt\nval catDelegate = adapterDelegate<Cat, Animal> {\n    ...\n    bind { ... }\n}\n```\n\nbut a top level val is a static field at the end so that this adapter delegate will be kept for the\nlifetime of your application in memory.\nTherefore, we would recommend to prefer write your AdapterDelegate as a function and call this function to\nactually instantiate the AdapterDelegate.\nThen the AdapterDelegate can be garbage collected as soon as the user leaves the screen the\nAdapterDelegate is used in.\n\n\n```kotlin\n// top level function inside CatDelegate.kt\nfun catAdapterDelegate() = adapterDelegate<Cat, Animal> {\n   ...\n   bind { ... }\n}\n```\n\n\n## Dependencies if you don't use Kotlin DSL\nThis library is available on maven central:\n\n```groovy\nimplementation 'com.hannesdorfmann:adapterdelegates4:4.3.2'\n```\n[![Build Status](https://travis-ci.org/sockeqwe/AdapterDelegates.svg?branch=master)](https://travis-ci.org/sockeqwe/AdapterDelegates)\n\nPlease note that since 4.0 the group id has been changed to `adapterdelegates4`.\n\n### Snapshot\n\n```groovy\nimplementation 'com.hannesdorfmann:adapterdelegates4:4.3.3-SNAPSHOT'\n```\n\nYou also have to add the url to the snapshot repository:\n\n```groovy\nallprojects {\n  repositories {\n    ...\n\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n}\n```\n\n\n## How to use it in Java\n\nThe idea of this library is to build your adapters by composing reusable components.\n\n> Favor composition over inheritance\n\nThe idea is that you define an `AdapterDelegate` for each view type. This delegate is responsible for creating ViewHolder and binding ViewHolder for a certain viewtype.\nAn `AdapterDelegate` get added to an `AdapterDelegatesManager`. This manager is the man in the middle between `RecyclerView.Adapter` and each `AdapterDelegate`.\n\nFor example:\n```java\npublic class CatAdapterDelegate extends AdapterDelegate<List<Animal>> {\n\n  private LayoutInflater inflater;\n\n  public CatAdapterDelegate(Activity activity) {\n    inflater = activity.getLayoutInflater();\n  }\n\n  @Override public boolean isForViewType(@NonNull List<Animal> items, int position) {\n    return items.get(position) instanceof Cat;\n  }\n\n  @NonNull @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {\n    return new CatViewHolder(inflater.inflate(R.layout.item_cat, parent, false));\n  }\n\n  @Override public void onBindViewHolder(@NonNull List<Animal> items, int position,\n      @NonNull RecyclerView.ViewHolder holder, @Nullable List<Object> payloads) {\n\n    CatViewHolder vh = (CatViewHolder) holder;\n    Cat cat = (Cat) items.get(position);\n\n    vh.name.setText(cat.getName());\n  }\n\n  static class CatViewHolder extends RecyclerView.ViewHolder {\n\n    public TextView name;\n\n    public CatViewHolder(View itemView) {\n      super(itemView);\n      name = (TextView) itemView.findViewById(R.id.name);\n    }\n  }\n}\n```\n\nPlease note that `onBindViewHolder()` last parameter `payloads` is null unless you use from `adapter.notify`.  There are more methods like `onViewRecycled(ViewHolder)`, `onFailedToRecycleView(ViewHolder)`,\n`onViewAttachedToWindow(ViewHolder)` and `onViewDetachedFromWindow(ViewHolder)` you can override in your `AdapterDelegate` class.\n\n\nThen an `AnimalAdapter` could look like this:\n\n```java\npublic class AnimalAdapter extends RecyclerView.Adapter {\n\n  private AdapterDelegatesManager<List<Animal>> delegatesManager;\n  private List<Animal> items;\n\n  public AnimalAdapter(Activity activity, List<Animal> items) {\n    this.items = items;\n\n    delegatesManager = new AdapterDelegatesManager<>();\n\n    // AdapterDelegatesManager internally assigns view types integers\n    delegatesManager.addDelegate(new CatAdapterDelegate(activity))\n                    .addDelegate(new DogAdapterDelegate(activity))\n                    .addDelegate(new GeckoAdapterDelegate(activity));\n\n    // You can explicitly assign integer view type if you want to\n    delegatesManager.addDelegate(23, new SnakeAdapterDelegate(activity));\n  }\n\n  @Override public int getItemViewType(int position) {\n    return delegatesManager.getItemViewType(items, position);\n  }\n\n  @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    return delegatesManager.onCreateViewHolder(parent, viewType);\n  }\n\n  @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n    delegatesManager.onBindViewHolder(items, position, holder);\n  }\n\n  @Override public int getItemCount() {\n    return items.size();\n  }\n}\n```\n\n## Reducing boilerplate code\nAs you have seen in the code snippet above this may require to write the same boiler plate code again and again to hook in `AdapterDelegatesManager` to `Adapter`.\nThis can be reduced by extending either from `ListDelegationAdapter` if the data source the adapter displays is `java.util.List<?>` or `AbsDelegationAdapter` which is a more general one (not limited to `java.util.List`)\n\n#### ListDelegationAdapter\nFor example the same `AnimalAdapter` from above could be simplified as follows by extending from `ListDelegationAdapter`:\n\n```java\npublic class AnimalAdapter extends ListDelegationAdapter<List<Animal>> {\n\n  public AnimalAdapter(Activity activity, List<Animal> items) {\n\n    // DelegatesManager is a protected Field in ListDelegationAdapter\n    delegatesManager.addDelegate(new CatAdapterDelegate(activity))\n                    .addDelegate(new DogAdapterDelegate(activity))\n                    .addDelegate(new GeckoAdapterDelegate(activity))\n                    .addDelegate(23, new SnakeAdapterDelegate(activity));\n\n    // Set the items from super class.\n    setItems(items);\n  }\n}\n```\n#### AbsListItemAdapterDelegate\nAlso you may have noticed that you often have to write boilerplate code to cast items and ViewHolders when working with list of items as adapters dataset source.\n`AbsListItemAdapterDelegate` can help you here. Let's take this class to create a `CatListItemAdapterDelegate` similar to the `CatAdapterDelegate` from top of this page but without the code for casting items.\n\n```java\npublic class CatListItemAdapterDelegate extends AbsListItemAdapterDelegate<Cat, Animal, CatViewHolder> {\n\n  private LayoutInflater inflater;\n\n  public CatAdapterDelegate(Activity activity) {\n    inflater = activity.getLayoutInflater();\n  }\n\n  @Override public boolean isForViewType(Animal item, List<Animal> items, int position) {\n    return item instanceof Cat;\n  }\n\n  @Override public CatViewHolder onCreateViewHolder(ViewGroup parent) {\n    return new CatViewHolder(inflater.inflate(R.layout.item_cat, parent, false));\n  }\n\n  @Override public void onBindViewHolder(Cat item, CatViewHolder vh, @Nullable List<Object> payloads) {\n    vh.name.setText(item.getName());\n  }\n\n  static class CatViewHolder extends RecyclerView.ViewHolder {\n\n    public TextView name;\n\n    public CatViewHolder(View itemView) {\n      super(itemView);\n      name = (TextView) itemView.findViewById(R.id.name);\n    }\n  }\n}\n```\n\nAs you see, instead of writing code that casts list item to Cat we can use `AbsListItemAdapterDelegate` to do the same job (by declaring generic types).\n\n## DiffUtil & ListAdapter = AsyncListDifferDelegationAdapter\nSupport library 27.0.1 introduced `ListAdapter` - the new extension of `RecyclerView.Adapter` that uses `AsyncListDiffer` internally. It does calculating diff in the background thread by default and does all particular animations for you items collection. Hence you don't need carry about `notify*` methods, `AsyncListDiffer` does all the job for you. And AdapterDelegates supports it too. \n\nThis library offers the equivalent to `ListAdapter` which is called `AsyncListDifferDelegationAdapter` that can be used together with any regular `AdapterDelegate`.\n\n```java\npublic class DiffAdapter extends AsyncListDifferDelegationAdapter<Animal> {\n    public DiffAdapter() {\n        super(DIFF_CALLBACK) // Your diff callback for diff utils\n        delegatesManager\n            .addDelegate(new DogAdapterDelegate());\n            .addDelegate(new CatAdapterDelegate());\n    }\n}\n```\n\n\n## Pagination\nThere is an additional artifact for the pagination library:\n\n```gradle\nimplementation 'com.hannesdorfmann:adapterdelegates4-pagination:4.3.2'\n```\n\nUse `PagedListDelegationAdapter`.\n\n## Fallback AdapterDelegate\nWhat if your adapter's data source contains a certain element you don't have registered an `AdapterDelegate` for? In this case the `AdapterDelegateManager` will throw an exception at runtime. However, this is not always what you want. You can specify a fallback `AdapterDelegate` that will be used if no other `AdapterDelegate` has been found to handle a certain view type.\n\n```java\nAdapterDelegate fallbackDelegate = ...;\nadapterDelegateManager.setFallbackDelegate( fallbackDelegate );\n```\nNote also that boolean return type of `isForViewType()` of a fallback delegate will be ignored (will not be take into account). So it doesn't matter if you return true or false. You can use `AbsFallbackAdapterDelegate` that already implements `isForViewType()` so that you only have to override `onCreateViewHolder()` and `onBindViewHolder()` for your fallback adapter delegate.\n\n## Version 3.x to 4.0 migration\n`AdapterDelegates3` uses `com.android.support:recyclerview-v7:x.y.z` whereas `AdapterDelegates4` uses\n`androidx.recyclerview:recyclerview:1.0.0`.\nMigration should be easy. Just use IntelliJ IDE or Android Studio 'Replace in Path' (can be found inside `Edit` main menu then `Find` submenu):\nReplace `com.hannesdorfmann.adapterdelegates3` with `com.hannesdorfmann.adapterdelegates4`.\nYou might also have to replace `android.support.v7.widget.RecyclerView` with `androidx.recyclerview.widget.RecyclerView` and\n`android.support.annotation.NonNull` with `androidx.annotation.NonNull`.\n\n## License\n\n```\nCopyright 2015 Hannes Dorfmann\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.169921875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.5.31'\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.0.3'\n        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.18.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\n\next {\n    compileSdk = 31\n    targetSdk = 31\n    minSdk = 14\n    kotlinStdLib = \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n    recyclerView = 'androidx.recyclerview:recyclerview:1.2.1'\n    appCompat = 'androidx.appcompat:appcompat:1.3.1'\n    androidAnnotations = 'androidx.annotation:annotation:1.3.0'\n    core = 'androidx.core:core:1.7.0'\n    paging = \"androidx.paging:paging-runtime:2.0.0\"\n    junit = 'junit:junit:4.12'\n    mockito = 'org.mockito:mockito-inline:2.21.0'\n    constraintLayout = 'androidx.constraintlayout:constraintlayout:2.1.1'\n\n    javaSourceCompatibility = JavaVersion.VERSION_1_8\n    javaTargetCompatibility = JavaVersion.VERSION_1_8\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.728515625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\nVERSION_NAME=4.3.3-SNAPSHOT\nVERSION_CODE=433-SNAPSHOT\nGROUP=com.hannesdorfmann\n\n\nPOM_DESCRIPTION=Create reusable adapter components by favoring composition over inheritance\nPOM_URL=https://github.com/sockeqwe/AdapterDelegates\nPOM_SCM_URL=https://github.com/sockeqwe/AdapterDelegates\nPOM_SCM_CONNECTION=scm:git@github.com:sockeqwe/AdapterDelegates.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:sockeqwe/AdapterDelegates.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=hannesdorfmann\nPOM_DEVELOPER_NAME=Hannes Dorfmann\n\nsigning.keyId=E508C045\n# AndroidX package structure to make it clearer which packages are bundled with the\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.20703125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "kotlin-dsl-layoutcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin-dsl-viewbinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin-dsl",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "paging",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1005859375,
          "content": "include ':library', ':paging', ':kotlin-dsl', ':kotlin-dsl-layoutcontainer', ':kotlin-dsl-viewbinding'\n"
        }
      ]
    }
  ]
}