{
  "metadata": {
    "timestamp": 1736708630790,
    "page": 964,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "opentripplanner/OpenTripPlanner",
      "stars": 2262,
      "defaultBranch": "dev-2.x",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.5244140625,
          "content": "# reorder all Java classes with Intellij\n6468e42f1e348eba2568f0abc0799965b68723b7\n\n# project-wide reformatting with prettier\n9c9dd613489a348d2381acdcbeab8f86589154d7\n\n# graphql test and documentation reformatting with prettier\n12c51f44f204db31d34a1eeb0d59204226e0fa5d\n\n# reorder and reformat GTFS GraphQL API schema file with graphql-java\n14051fab312a67cae9a460aaf0bbc77223bec624\n\n# Make OTP a multi-module project\nead33ffe280dd7caf72cae5ff7a41542e8427636\n\n# json file reformatting with prettier\nc287575df6798810a69fafc54c8c4e1867b71367\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.669921875,
          "content": "\n# Files\n.classpath\n.externalToolBuilders\n.gradle\n.project\n.pydevproject\n.settings\n.sonar\n.nvmrc\n*~\n*.ipr\n*.iml\n*.iws\n*.swp\n*.DS_Store\n*.snap.debug\ndependency-reduced-pom.xml\ninteractive_otp_main.json\n/otp\n/otp-ui\nDockerfile\n.java-version\no_o_standalone_config_IncludeFileDirectiveTest_part.json\n\n# Directories\n.idea/\n.run/\n.venv/\n_site/\nbuild/\n!/application/src/build/\ndist/\ndoc/user/_build/\ngen-java/\ngen-javabean/\ngen-py/\nnode_modules/\ntarget/\n/graphs\n\n# for local dev only\n/src/test/resources/speedtest/travelSearch-results-*.csv\nsrc/ext/resources/reportapi/report.csv\n\nstreetGraph.obj\ngraph.obj\n# IntelliJ creates these pid files when you attach the debugger to tests\n.attach_pid*\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".prettierrc.yml",
          "type": "blob",
          "size": 0.15625,
          "content": "# Prettier configuration\noverrides:\n  - files:\n      - \"*.java\"\n    options:\n      printWidth: 100\n      tabWidth: 2\n      useTabs: false\n      endOfLine: auto\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 5.8994140625,
          "content": "# OTP Architecture\n\nOTP has been developed for more than 15 years, and most of the design documentation is in the code as\ncomments and JavaDoc. Over the years the complexity have increased, and the natural developer\nturnover creates a demand for more architecture and design documentation. The new OTP2 documentation\nis put together with the source; hopefully making it easier to maintain. Instead of documenting\nmodules in old style _package-info.java_ files we use _package.md_ files. This document should serve\nas an index to all existing top-level documented components.\n\nThis document is far from complete. Hopefully it can evolve over time and become a good\nintroduction to OTP architecture. The OTP project GitHub issues are a good place to look for\ndetailed discussions on many design decisions.\n\nWe document [Decision Records](DEVELOPMENT_DECISION_RECORDS.md) in a log. Make sure you as a developer are familiar \nwith the decisions and follow them. Reviewers should use them actively when reviewing code and may\nuse them to ask for changes.\n\nBe sure to also read the [developer documentation](doc/user/Developers-Guide.md).\n\n## Modules/Components\n\nThe diagram shows a simplified/generic version on how we want to model the OTP components with 2 \nexamples. The Transit model is more complex than the VehiclePosition model.   \n\n![MainModelOverview](doc/dev/images/ServiceModelOverview.png)\n\n - `Use Case Service` A service which combine the functionality in many `Domain Services` to fulfill\n   a use-case or set of features. It may have an api with request/response classes. These are \n   usually stateless; Hence the `Use Case Service` does normally not have a model. The implementing\n   class has the same name as the interface with prefix `Default`.\n - `Domain Model` A model which encapsulate a business area. In the drawing two examples are shown,\n   the `transit` and `vhicleposition` domain model. The transit model is more complex so the \n   implementation has a separate `Service` and `Repository`. Almost all http endpoints are, \n   read-only so the `Service` can focus on serving the http API endpoints, while the repository\n   is used to maintain the model by the updaters. \n\n> **Note!** The above is the goal, the current package structure needs cleanup.\n\n\nBelow is a list of documented components in OTP. Not every component is documented at a high level,\nbut this is a start and we would like to expand this list in the future.\n\n### [OTP Configuration design](application/src/main/java/org/opentripplanner/standalone/config/package.md)\n\nThe Configuration module is responsible for loading and parsing OTP configuration files and map them\ninto Plan Old Java Objects (POJOs). These POJOs are injected into the other components.\n\n### [GTFS import module](application/src/main/java/org/opentripplanner/gtfs/package.md)\n\nUsed to import GTFS transit data files.\n\n### [NeTEx import module](application/src/main/java/org/opentripplanner/netex/package.md)\n\nUsed to import NeTEx transit data files.\n\n### Transit Routing\n\n#### [Raptor transit routing](raptor/src/main/java/org/opentripplanner/raptor/package.md)\n\nThis is the OTP2 new transit routing engine implemented using the Raptor algorithm. It explains how\nRaptor works, the important concepts and the design. It might be worth reading even if you are not a\ndeveloper - just to understand how the transit routing works.\n\nThe Raptor functionality is quite complex, so we want to isolate it from the remaining code.\nTherefore, the raptor component is designed to have as few dependencies as possible. In fact there\nare _no_\ndependencies from Raptor to other parts of OTP code, only to utility classes not found in the JDK.\nAlso, the code follows a stricter object-oriented design, than most other parts of OTP. The Raptor\nimplementation is highly critical code, hence we set the bar higher with respect to code quality.\n\nOTP provides transit data to Raptor by implementing the _raptor/spi_. The \n[RoutingService](application/src/main/java/org/opentripplanner/routing/service/DefaultRoutingService.java)\nis responsible for mapping from the OTP context to a\n[RaptorRequest](raptor/src/main/java/org/opentripplanner/raptor/api/request/RaptorRequest.java)\nand then map the\nresult, [Raptor Path](raptor/src/main/java/org/opentripplanner/raptor/api/path/RaptorPath.java), back to\nthe OTP internal domain. This might seem like a lot of unnecessary mapping, but mapping is simple -\nrouting is not.\n\nThe performance of Raptor is important, and we care about every millisecond. All changes to the\nexisting Raptor coded should be tested with the\n[SpeedTest](application/src/test/java/org/opentripplanner/transit/speed_test/package.md) and compared\nwith an earlier version of the code to make sure the performance is NOT degraded.\n\n#### [Transfer path optimization](application/src/main/java/org/opentripplanner/routing/algorithm/transferoptimization/package.md)\n\nDescribes the transfer functionality, the design and the implementation. The logic for finding the\nbest transfer is distributed to the Raptor and\nthe [OptimizeTransferService](application/src/main/java/org/opentripplanner/routing/algorithm/transferoptimization/OptimizeTransferService.java)\n.\n\n#### [Itinerary list filter chain](application/src/main/java/org/opentripplanner/routing/algorithm/filterchain/package.md)\n\nDescribes the itinerary list filter chain, used to post-process the itineraries returned from the\nrouters in [RoutingWorker](application/src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java),\nin order to sort and reduce the number of returned itineraries. It can also be used to decorate the\nreturned itineraries, especially if it requires more complex calculations, which would be unfeasible\nto do during the routing process.\n\n### [Service](application/src/main/java/org/opentripplanner/service/package.md)\nThe service package contains small services usually specific to one or a few use-cases. In contrast \nto a domain model they may use one or many domain models and other services. \n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.87109375,
          "content": "# OpenTripPlanner Contributing Guide\n\nThank you for your interest in contributing to OpenTripPlanner. This document will give you some\npointers on how to contact and coordinate with the OTP development team, as well as a description of\nthe contribution process and expectations.\n\n## Primary Channels of Communication\n\nIf you have any questions about problems you are encountering with code, deployment, documentation,\nor development coordination, please don't hesitate to post to the [OpenTripPlanner Gitter chat](https://gitter.im/opentripplanner/OpenTripPlanner)\nor the mailing list. This is the Google Group which can be accessed as web forums or as traditional \nemail mailing lists:\n\n- https://groups.google.com/g/opentripplanner-users (opentripplanner-users@googlegroups.com)\n\nAny message posted there will be seen by most of the contributors, some of whom work on OTP full\ntime. It will also create a record of the discussion that will be useful to the larger community and\noften leads to issues being discussed at the twice-weekly development meetings.\n\n## Developer meetings\n\nOTP development meetings usually occur twice a week. These meetings are open to anyone who wants to\njoin, even if you simply want to observe the process or ask a few questions. The most effective way\nto advance pull requests and collaborate is to participate directly in these meetings. The meeting\ntimes have been deliberately chosen to allow participation during regular business hours across as\nmany time zones as possible, from the eastern Americas through Europe and Africa to Asia. If these\ntimes are not suitable for you, please let us know and we will attempt to schedule a call at a time\nthat suits you.\n\nCheck the specific times\non [this calendar](https://calendar.google.com/calendar/u/0/embed?src=ormbltvsqb6adl80ejgudt0glc@group.calendar.google.com)\nwhich will be updated to reflect holidays or changes to meeting times. Note that times on this\ncalendar are expressed in the Central European time zone by default. There is also\nan [iCal link to import this calendar](https://calendar.google.com/calendar/ical/ormbltvsqb6adl80ejgudt0glc@group.calendar.google.com/public/basic.ics)\ninto calendar apps. Check the details of the calendar events for the Google Meet link, which is\ndifferent on different days of the week.\n\nOur primary tools for organizing development are Github issues and pull requests. When creating\nissues and pull requests, please follow the instructions in the template: always specify the version\nof OTP you are running and provide command lines and configuration files, do not leave remnants of\nthe instructions in your submitted text etc.\n\n## Contributing Issues and Pull Requests\n\nOpenTripPlanner has been in active development and use for well over a decade and is now relied upon\nas infrastructure by large organizations and millions of public transit passengers around the world.\nThese organizations have invested a great deal of time, effort, and money in this project, and some\nhave gone all-in supporting and relying on OTP over the long term. Accordingly, when working on\nOpenTripPlanner 2 we have decided to make code quality and maintainability a top priority, and have\nbuilt up a culture of active collaboration and code review to support this. At this stage, the\nproject has relatively high expectations on code quality and a desire to maintain a professional and\norderly development process.\n\nWe welcome well-documented bug reports as Github Issues, and pull requests sharing your patches and\nnew features. However, for all but the simplest bugfixes and documentation updates, please be aware\nthat pull requests will be subject to review and you will almost certainly be asked to explain use\ncases, ensure encapsulation and integration with the rest of the system, and provide some assurance\nthat there is an organizational commitment to long term maintenance.\n\nMost of the contributors to OTP2 are full-time software developers working for organizations with a\nlong term stake in OpenTripPlanner, and are professionally bound to ensure its reliability and\nefficiency. It is an accepted fact among this team that a large part, perhaps the most important\npart of software development is careful design and communication with current collaborators and\nfuture maintainers of the system.\n\nYou will see a steady stream of pull requests being merged from different organizations. What almost\nall these have in common is that their authors participated in the weekly meetings, at which they\ndiscussed the problem or feature they were addressing, answered questions from the other developers\nabout their design and implementation, and were open to making changes based on the consensus\nreached at those meetings. If you do not have time to participate in a meeting (or organize a\nspecial-purpose call to review code together with other contributors), please understand up front\nthat contributions may stall.\n\nEven before you start working on a contribution, please feel free to join a call and discuss how you\nwant to solve your problem or implement your feature. In the past, most contributions that were\nundertaken without any discussion up front required major changes before acceptance.\n\nWe try to reduce the time demands on reviewers by putting more responsibilities on the PR submitter.\nThis does carry a risk of discouraging contributions, but without a \"sponsor\" organization for a\nchange, the time available to review is the bottleneck in the process.\n\nIn sum: if you are interested in integrating your code into core OTP, a significant amount of the\ntime you invest in OTP will need to be spent on collaboration, discussion, documentation, etc. and\nyou will need to be available for regular meetings. You will need to take this into consideration in\nyour budget and timeline.\n\n## Other ways to share development work\n\nWe don't want to discourage innovation and experimentation, and want promising new features to be\nvisible to other users, so we have also created a Sandbox system for fast-track review and inclusion\nin mainline OTP. Most code for a Sandbox feature must be located in its own package, and any code\nadded to the core of OTP must be in conditional blocks controlled by a feature flag and disabled by\ndefault. This greatly simplifies and accelerates the review process, as requirements on the code\noutside core OTP will be much less stringent. Please\nsee http://docs.opentripplanner.org/en/latest/SandboxExtension/ for more details.\n\nIf you don't have the time to participate in this process, the community is of course still\ninterested in the new ideas and capabilities in your fork of OTP. Please do share them on the\ngroups (mailing lists) where you may create awareness of your work and attract collaborators with\nmore resources. The goal of mainline OTP is not to be everything to everyone, but rather to contain\nthe most solid code relied upon daily by the primary OTP contributor organizations (as well as\nSandbox features that have been cleanly isolated from the core system). So in a sense it's\nencouraged for people to work on special-purpose forks.\n\n## Additional Considerations for Structuring Pull Requests\n\nWhen creating and building on a pull request, please do the following:\n\n- If possible, please discuss your proposed changes in advance before proceeding too far with\n  development. There are often other plans to address the same problem, or at least other points of\n  view and ideas. Coordinating with other OTP developers can avoid a lot of duplicated effort,\n  conflict, and technical debt and make the review process a lot easier.\n- Describe in detail the problem you are solving and any major design choices you have made. PR\n  descriptions must clearly state how your changes work.\n- Break large changes down into a series of smaller logical steps in separate PRs.\n- Tie such series of PRs together with an \"epic issue\" that explains the overall plan.\n- Use Github issue references (\"addresses #12\" etc.) to connect PRs and issues together.\n- Consider squashing and rebasing to make the PR history easier to understand, eliminating extra \"\n  noise\" commits like accidental changes to organization specific code, abandoned experiments, or\n  reverted configuration changes.\n\nIn turn, in order to prevent OTP2 from turning into a \"\nbig-ball-of-mud\" (https://en.wikipedia.org/wiki/Big_ball_of_mud) and ensure development does not\ngrind to a halt, the maintainers of the project will:\n\n- Keep an eye out for features which are not core, and suggest that they be Sandbox features.\n- Ask for example use cases for new functionality to make sure OTP is the right place to implement\n  it (rather than some external component).\n- Make sure the implementation avoids duplication and the addition of new layers and is\n  encapsulated, requesting refactoring if necessary.\n- Make sure non-functional characteristics (performance and memory usage) are maintained when\n  features are added.\n\n## OTP2 versus OTP1\n\nThe vast majority of the work done by the core development team is now on OTP2 (the `dev-2.x`\nbranch) as opposed to OTP1 (the `dev-1.x` branch). Please\nsee http://docs.opentripplanner.org/en/latest/Version-Comparison/ for a discussion of the difference\nbetween these two branches. At this point, OTP1 is essentially a legacy product that will receive\nbug and stability fixes to the extent that they can be readily backported from OTP2 or that the\nauthor of such patches can invest the effort to join a meeting and answer any questions about the\nimpact and design of their code.\n\nThere is a large base of existing deployments of OTP1, in both trip planning and academic research\nuse. OTP2 is different in many ways from OTP1, and some features that were research prototypes or\nnot actively maintained have been removed. We want to ensure long-term users can continue to rely on\nthese OTP1-specific if needed. Therefore we cannot apply changes to OTP1 which pose any significant\nrisk of introducing new bugs or behavior changes, as this will create additional maintenance or\ndocumentation work for which there is no budgeted developer time.\n"
        },
        {
          "name": "DEVELOPMENT_DECISION_RECORDS.md",
          "type": "blob",
          "size": 4.41015625,
          "content": "# Development Decision Records\n\n\n## Use-Decision-Records\n\nWe will [use decision-records](doc/dev/decisionrecords/UseDecisionRecords.md) to document OTP \ndevelopment relevant decision. Use the [template](doc/dev/decisionrecords/_TEMPLATE.md) to describe\nnew decision records.\n\n\n## Scout-Rule\n\nLeave things BETTER than you found them, clean up code you visit or/and add unit\ntests. Expect to include some code cleanup as part of all PRs.\n\n## Follow-Naming-Conventions\n\nUse established terminology from GTFS, NeTEx or the existing OTP code. Make sure the code is easy\nto read and understand. [Follow naming conventions](doc/dev/decisionrecords/NamingConventions.md#naming-conventions) . \n\n\n## Do Analysis-and-design if needed\n\nBe prepared to provide [analyses and/or design documentation](doc/dev/decisionrecords/AnalysesAndDesign.md)\nif a task is complex, changes the core model and/or the main APIs.\n\n\n## Write-Code-Documentation - Use JavaDoc\n\nDocument the business intention and decisions in the relevant code. Do not repeat the logic\nexpressed in the code. Use JavaDoc, you may have to refactor part of your code to encapsulate the\nbusiness logic into a method or class to do this. \n\nDocument all `public` types, methods and fields with JavaDoc. It is ok to document implementation \nnotes on `private` members and as inline comments.\n\n> If you decide to NOT follow these decision records, then you must document why.\n\n**See also**\n - [Developers-Guide &gt; Code comments](doc/user/Developers-Guide.md#code-comments).\n - [Codestyle &gt; Javadoc Guidelines](doc/dev/decisionrecords/Codestyle.md#javadoc-guidlines) - JavaDoc checklist\n\n\n## Document-Config-and-APIs\n\nDocument API and configuration parameters.\n\n\n## Respect-Codestyle\n\nOTP uses prettier to format code. For more information on code style see the \n[Codestyle](doc/dev/decisionrecords/Codestyle.md) document.\n\n\n## Use-Object-Oriented-Principals\n\nRespect Object-Oriented principals\n  - Honor encapsulation & Single-responsibility principle\n  - Abstraction - Use interfaces when a module needs \"someone\" to play a role\n  - Inheritance - Inheritances expresses “is-a” and/or “has-a” relationship, do not use it \"just\"\n    to share data/functionality. \n  - Use polymorphism and not `instanceof`.\n\n\n## Use-Dependency-Injection\n\nUse dependency injection to wire components. You can use manual DI or Dagger. Put the \nwiring code in `<module-name>/configure/<Module-name>Module.java`.\n\nOTP will use a dependency injection library or framework to handle object lifecycles (particularly\nrequest-scoped vs. singleton scoped) and ensure selective availability of components, services,\ncontext, and configuration at their site of use. Systems that operate via imperative Java code\n(whether hand-written or generated) will be preferred over those operating through reflection or\nexternal markup files. See [additional background](https://github.com/opentripplanner/OpenTripPlanner/pull/5360#issuecomment-1910134299).\n\n## Use-Module-Encapsulation\n\nKeep modules clean. Consider adding an `api`, `spi` and mapping code to\nisolate the module from the rest of the code. Avoid circular dependencies between modules.\n\n\n## DRY - Do not repeat yourself\n\nKeep the code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) - Do not \nrepeat yourself. Avoid implementing the same business rule in two places -> refactor.\n\n\n## Avoid-Feature-Envy\n\n[Feature envy](https://refactoring.guru/smells/feature-envy)\n\n\n## Test-Coverage\n\nAll _business_ logic should have unit tests. Keep integration/system tests to a minimum. Add test at\nthe lowest level practical to test the business feature. Prefer unit tests on a method over a class,\nover a module, over the system. On all non-trivial code, full _branch_ test coverage is preferable. \nTests should be designed to genuinely demonstrate correctness or adherence to specifications, not \nsimply inflate line coverage numbers.\n\n\n## Use-Immutable-Types\n\nPrefer immutable types over mutable. Use builders where appropriate. See \n[Records, POJOs and Builders](doc/dev/decisionrecords/RecordsPOJOsBuilders.md#records-pojos-and-builders)\n\n\n## Be-Careful-With-Records\n\n[Avoid using records if you cannot encapsulate it properly](doc/dev/decisionrecords/RecordsPOJOsBuilders.md#records)\n\n\n## GraphQL Best Practices - API Design\n\n[Follow best practices for designing GraphQL APIs. Our APIs need to be backwards compatible as they are used\nby hundreds of clients (web-pages/apps/services).](doc/dev/decisionrecords/APIGraphQLDesign.md)"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.1435546875,
          "content": "This program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public License\nas published by the Free Software Foundation, either version 3 of\nthe License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\nThis program incorporates work covered by the following copyright and permission notice:\n\n    Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>\n    Copyright (C) 2012 Google, Inc.\n    Copyright (C) 2013 Codemass, Inc. <aaron@codemass.com>\n    Copyright (C) 2011 Laurent Gregoire <laurent.gregoire@gmail.com>\n    Copyright (C) 2006 Jerry Huxtable (JH Labs)\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this program except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\nThis program incorporates work covered by the following copyright and permission notice:\n\n    Copyright (C) 2012 Eric Grosso\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.44921875,
          "content": "PYBABEL=.venv/bin/pybabel\nI18NEXT=./node_modules/.bin/i18next-conv\nLOCALE_FOLDER=./src/client/i18n\nBABEL_CFG=$(LOCALE_FOLDER)/babel.cfg\nTEMPLATE_FILE=$(LOCALE_FOLDER)/messages.pot\nLANGS=ca_ES de en es fr hu it no  pl pt sl\nJS_FILESPATH=./src/client/js/otp\nJS_FILES = $(shell find $(JS_FILESPATH)/ -name '*.js')\nLOCALE_FILES = $(shell find $(LOCALE_FOLDER)/ -name '*.po')\nLAN=sl_SI\n\n.PHONY: all\nall: $(LOCALE_FILES)\n\n.PHONY: update\nupdate: $(TEMPLATE_FILE)\n\n#Extracts new translation from JS files and creates PO template\n$(TEMPLATE_FILE): $(JS_FILES)\n\t$(PYBABEL) extract --project=OpenTripPlanner -F $(BABEL_CFG) -s -k _tr -c TRANSLATORS: -o $(TEMPLATE_FILE) $(JS_FILESPATH)\n\n#Updates translations with new unstraslated strings from template\n.PHONY: update_po\nupdate_po: $(LOCALE_FILES)\n\n$(LOCALE_FILES): $(TEMPLATE_FILE)\n\tfor LAN in $(LANGS); do $(PYBABEL) update --domain \"$$LAN\" --locale \"$$LAN\" --input-file $(TEMPLATE_FILE) --output-file $(LOCALE_FOLDER)/\"$$LAN.po\"; done\n\n#Updates js files from new translations in po files\n.PHONY: update_js\nupdate_js: $(LOCALE_FILES)\n\tfor LAN in $(LANGS); do $(I18NEXT) -l \"$$LAN\" -s \"$(LOCALE_FOLDER)/$$LAN.po\" -t \"$(JS_FILESPATH)/locale/$$LAN.json\"; done\n\ttouch update_js\n\n#Creates new translation with LAN culture info\n.PHONY: init\ninit:\n\t#$(PYBABEL) init --domain \"$(LAN)\" --locale \"$(LAN)\" --input-file $(TEMPLATE_FILE) --output-file $(LOCALE_FOLDER)/\"$(LAN).po\";\n\tmsginit -l \"$(LAN)\" -i $(TEMPLATE_FILE) -o \"$(LOCALE_FOLDER)/$(LAN).po\";\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.39453125,
          "content": "## Overview\n\n[![Join the chat at https://gitter.im/opentripplanner/OpenTripPLanner](https://badges.gitter.im/opentripplanner/OpenTripPlanner.svg)](https://gitter.im/opentripplanner/OpenTripPlanner)\n[![Matrix](https://img.shields.io/matrix/opentripplanner%3Amatrix.org?label=Matrix%20chat&?cacheSeconds=172800)](https://matrix.to/#/#opentripplanner_OpenTripPlanner:gitter.im)\n[![codecov](https://codecov.io/gh/opentripplanner/OpenTripPlanner/branch/dev-2.x/graph/badge.svg?token=ak4PbIKgZ1)](https://codecov.io/gh/opentripplanner/OpenTripPlanner)\n[![Commit activity](https://img.shields.io/github/commit-activity/y/opentripplanner/OpenTripPlanner)](https://github.com/opentripplanner/OpenTripPlanner/graphs/contributors)\n[![Docker Pulls](https://img.shields.io/docker/pulls/opentripplanner/opentripplanner)](https://hub.docker.com/r/opentripplanner/opentripplanner)\n\nOpenTripPlanner (OTP) is an open source multi-modal trip planner, focusing on travel by scheduled\npublic transportation in combination with bicycling, walking, and mobility services including bike\nshare and ride hailing. Its server component runs on any platform with a Java virtual machine (\nincluding Linux, Mac, and Windows). It exposes GraphQL APIs that can be accessed by various\nclients including open source Javascript components and native mobile applications. It builds its\nrepresentation of the transportation network from open data in open standard file formats (primarily\nGTFS and OpenStreetMap). It applies real-time updates and alerts with immediate visibility to\nclients, finding itineraries that account for disruptions and service changes.\n\nNote that this branch contains **OpenTripPlanner 2**, the second major version of OTP, which has\nbeen under development since 2018. The latest version of OTP is v2.5.0, released in March 2024.\n\nIf you do not want to use this version, please switch to the final 1.x release\ntag `v1.5.0` or the `dev-1.x` branch.\n\n## Performance Test\n\n[📊 Dashboard](https://otp-performance.leonard.io/) \n\nWe run a speed test (included in the code) to measure the performance for every PR merged into OTP. \n\n[More information about how to set up and run it.](./test/performance/README.md)\n\n## Repository layout\n\nThe main Java server code is in `application/src/main/`. OTP also includes a Javascript client \nbased on the MapLibre mapping library in `client/src/`. This client is now used for testing, with\nmost major deployments building custom clients from reusable components. The Maven build produces a\nunified (\"shaded\") JAR file at `otp-shaded/target/otp-shaded-VERSION.jar` containing all necessary\ncode and dependencies to run OpenTripPlanner.\n\nAdditional information and instructions are available in\nthe [main documentation](http://docs.opentripplanner.org/en/dev-2.x/), including a\n[quick introduction](http://docs.opentripplanner.org/en/dev-2.x/Basic-Tutorial/).\n\n## Development\n\n\nOpenTripPlanner is a collaborative project incorporating code, translation, and documentation from\ncontributors around the world. We welcome new contributions.\nFurther [development guidelines](http://docs.opentripplanner.org/en/latest/Developers-Guide/) can be\nfound in the documentation.\n\n### Development history\n\nThe OpenTripPlanner project was launched by Portland, Oregon's transport agency\nTriMet (http://trimet.org/) in July of 2009. As of this writing in Q3 2020, it has been in\ndevelopment for over ten years. See the main documentation for an overview\nof [OTP history](http://docs.opentripplanner.org/en/dev-2.x/History/) and a list\nof [cities and regions using OTP](http://docs.opentripplanner.org/en/dev-2.x/Deployments/) around\nthe world.\n\n## Getting in touch\n\nThe fastest way to get help is to use our [Gitter chat room](https://gitter.im/opentripplanner/OpenTripPlanner) where most of the core developers\nare. Bug reports may be filed via the Github [issue tracker](https://github.com/openplans/OpenTripPlanner/issues). The OpenTripPlanner [mailing list](http://groups.google.com/group/opentripplanner-users)\nis used almost exclusively for project announcements. The mailing list and issue tracker are not\nintended for support questions or discussions. Please use the chat for this purpose. Other details\nof [project governance](http://docs.opentripplanner.org/en/dev-2.x/Governance/) can be found in the main documentation.\n\n## OTP Ecosystem\n\n- [awesome-transit](https://github.com/MobilityData/awesome-transit) Community list of transit APIs,\n  apps, datasets, research, and software.\n"
        },
        {
          "name": "application",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0859375,
          "content": "coverage:\n  status:\n    project: off\n    patch: off\ngithub_checks:\n  annotations: false\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtfs-realtime-protobuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "lgpl-3.0.txt",
          "type": "blob",
          "size": 7.4580078125,
          "content": "\t\t   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "magidoc.mjs",
          "type": "blob",
          "size": 1.55859375,
          "content": "export default {\n  introspection: {\n    type: 'sdl',\n    paths: ['application/src/main/resources/org/opentripplanner/apis/gtfs/schema.graphqls'],\n  },\n  website: {\n    template: 'carbon-multi-page',\n    output: 'target/magidoc/api/graphql-gtfs/',\n    options: {\n      siteRoot: '/api/dev-2.x/graphql-gtfs',\n      appLogo: 'https://docs.opentripplanner.org/en/dev-2.x/images/otp-logo.svg',\n      customStyles: ['https://docs.opentripplanner.org/en/dev-2.x/css/magidoc-overrides.css'],\n      pages: [{\n        title: 'Introduction',\n        content: `\n# OTP GTFS GraphQL API documentation\n\nThis is the static documentation of the OTP GraphQL GTFS API.\n\nThe GraphQL endpoint of your instance, which you should point your tooling to, is \n\\`http://localhost:8080/otp/gtfs/v1\\`\n\nPlease also check out the interactive API explorer built into every instance and available\nat http://localhost:8080/graphiql \n\n![GraphiQL screenshot](https://docs.opentripplanner.org/en/dev-2.x/images/graphiql.png)\n\n## Configuration\n\nThis API is activated by default.\n\nTo learn how to deactivate it, read the\n[documentation](https://docs.opentripplanner.org/en/dev-2.x/apis/GTFS-GraphQL-API/).\n`,\n      }],\n      appTitle: 'OTP GTFS GraphQL API',\n      queryGenerationFactories: {\n        'Polyline': '<>',\n        'GeoJson': '<>',\n        'OffsetDateTime': '2024-02-05T18:04:23+01:00',\n        'LocalDate': '2024-05-24',\n        'Duration': 'PT10M',\n        'CoordinateValue': 19.24,\n        'Reluctance': 3.1,\n        'Speed': 3.4,\n        'Cost': 100,\n        'Ratio': 0.25,\n        'Locale': 'en'\n      },\n    }\n  },\n}\n"
        },
        {
          "name": "maven-settings.xml",
          "type": "blob",
          "size": 0.4482421875,
          "content": "<!-- This file provides credentials and other details to the Maven plugins that deploy our artifacts.\n     These are provided with Github repo secrets (and secrets.GITHUB_TOKEN is provided automatically).\n     Those secrets are copied to environment variables by the CI Action. -->\n<settings>\n  <servers>\n    <server>\n      <id>github</id>\n      <username>NONE</username>\n      <password>${env.GITHUB_TOKEN}</password>\n    </server>\n  </servers>\n</settings>\n\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 4.4833984375,
          "content": "# This file configures the generation of static documentation by MkDocs\n# based on Markdown source files in the 'docs' directory of the OTP repo.\n# This static documentation is built and served by Readthedocs\n# at opentripplanner.readthedocs.org\n\nsite_name: OpenTripPlanner 2\nsite_url: https://docs.opentripplanner.org\nrepo_url: https://github.com/opentripplanner/OpenTripPlanner\ndocs_dir: doc/user\nsite_dir: target/mkdocs\nstrict: true\n\nplugins:\n    - \"no-sitemap\"\n    - search\n\ntheme:\n    name: material\n    features:\n        - toc.integrate\n        - content.code.copy\n        - search.suggest\n        - search.highlight\n    palette:\n        primary: blue\n        accent: blue\n        scheme: default\n\n\nextra:\n    version:\n        provider: mike\n\nmarkdown_extensions:\n    - pymdownx.highlight:\n          anchor_linenums: true\n    - pymdownx.inlinehilite\n    - pymdownx.snippets\n    - pymdownx.superfences\n    - admonition\n\n# MkDocs will automatically discover pages if you don't list them here.\n# In that case subdirectories can be used to organize pages.\n# The list below organizes them into categories and controls the order.\n\nnav:\n- Home: 'index.md'\n- About:\n    - Product Overview: 'Product-Overview.md'\n    - Governance: 'Governance.md'\n    - History: 'History.md'\n    - Presentations: 'Presentations.md'\n    - Roadmap: 'Roadmap.md'\n    - Deployments: 'Deployments.md'\n    - Changelog: 'Changelog.md'\n    - Visual Identity: 'Visual-Identity.md'\n- 'Usage':\n    - Basic Tutorial: 'Basic-Tutorial.md'\n    - Netex and SIRI Tutorial: 'Netex-Tutorial.md'\n    - Getting OTP: 'Getting-OTP.md'\n    - Data Sources: 'Data-Sources.md'\n    - Container Image: 'Container-Image.md'\n    - System Requirements and Suggestions: 'System-Requirements.md'\n    - Preparing OSM Data: 'Preparing-OSM.md'\n    - Troubleshooting: 'Troubleshooting-Routing.md'\n    - Comparing OTP2 to OTP1: 'Version-Comparison.md'\n    - Frontends: 'Frontends.md'\n- APIs:\n    - Introduction: 'apis/Apis.md'\n    - GraphQL Tutorial: 'apis/GraphQL-Tutorial.md'\n    - GTFS GraphQL API: 'apis/GTFS-GraphQL-API.md'\n    - Transmodel (NeTEx) GraphQL API: 'apis/TransmodelApi.md'\n- Configuration:\n    - Introduction: 'Configuration.md'\n    - Build: 'BuildConfiguration.md'\n    - OSM Tag Mapping:\n        - Default: 'osm/OsmTag.md'\n        - Finland: 'osm/Finland.md'\n        - Germany: 'osm/Germany.md'\n        - Norway: 'osm/Norway.md'\n        - UK: 'osm/UK.md'\n    - Router: 'RouterConfiguration.md'\n    - \"Route Request\": 'RouteRequest.md'\n    - \"Realtime Updaters\": 'UpdaterConfig.md'\n    - \"Debug UI\": 'DebugUiConfiguration.md'\n    - \"Migrating between versions/builds\": 'Migrating-Configuration.md'\n- Features explained:\n    - \"Routing modes\": 'RoutingModes.md'\n    - \"In-station navigation\": 'In-Station-Navigation.md'\n    - \"Boarding Locations\": 'BoardingLocations.md'\n    - \"Stop Area Relations\": 'StopAreas.md'\n    - \"Street Graph Pruning\": 'IslandPruning.md'\n    - Accessibility: 'Accessibility.md'\n    - NeTEx and SIRI compatibility: 'features-explained/Netex-Siri-Compatibility.md'\n    - \"Travel Time Analysis\": 'Analysis.md'\n    - \"Logging\": \"Logging.md\"\n- Development:\n    - \"Developers' Guide\": 'Developers-Guide.md'\n    - Bibliography: 'Bibliography.md'\n    - Sandbox Development: 'SandboxExtension.md'\n    - Release Checklist: 'ReleaseChecklist.md'\n- Sandbox:\n    - About: 'SandboxExtension.md'\n    - Actuator API: 'sandbox/ActuatorAPI.md'\n    - Direct Transfer Analyzer: 'sandbox/transferanalyzer.md'\n    - Google Cloud Storage: 'sandbox/GoogleCloudStorage.md'\n    - SIRI Updaters: 'sandbox/siri/SiriUpdater.md'\n    - SIRI Updaters (Google Cloud): 'sandbox/siri/SiriGooglePubSubUpdater.md'\n    - SIRI Updater (Azure): 'sandbox/siri/SiriAzureUpdater.md'\n    - Vehicle Rental Service Directory API support: 'sandbox/VehicleRentalServiceDirectory.md'\n    - Smoove Bike Rental Updator Support: 'sandbox/SmooveBikeRental.md'\n    - Mapbox Vector Tiles API: 'sandbox/MapboxVectorTilesApi.md'\n    - Flex Routing: 'sandbox/Flex.md'\n    - Report API: 'sandbox/ReportApi.md'\n    - Interactive OTP Launcher: 'sandbox/InteractiveOtpMain.md'\n    - Park and Ride API: 'sandbox/ParkAndRideApi.md'\n    - Data Overlay: 'sandbox/DataOverlay.md'\n    - Vehicle Parking Updaters: 'sandbox/VehicleParking.md'\n    - Geocoder API: 'sandbox/GeocoderAPI.md'\n    - IBI Accessibility Score: 'sandbox/IBIAccessibilityScore.md'\n    - Fares: 'sandbox/Fares.md'\n    - Ride Hailing: 'sandbox/RideHailing.md'\n    - Emissions: 'sandbox/Emissions.md'\n    - Stop Consolidation: 'sandbox/StopConsolidation.md'\n    - Sørlandsbanen: 'sandbox/Sorlandsbanen.md'\n"
        },
        {
          "name": "otp-shaded",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 26.6181640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.opentripplanner</groupId>\n    <artifactId>otp-root</artifactId>\n    <version>2.7.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <name>OpenTripPlanner - Root</name>\n    <description>The OpenTripPlanner multimodal journey planning system</description>\n    <url>https://opentripplanner.org</url>\n\n    <licenses>\n        <license>\n            <name>GNU Lesser General Public License</name>\n            <url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>\n        </license>\n    </licenses>\n\n    <scm>\n        <url>https://github.com/opentripplanner/OpenTripPlanner</url>\n    </scm>\n\n    <!--\n      Developer entries are provided for the main contributors on the GitHub stats page for to the\n      dev-2.x branch. This minimal information is only present to meet the Sonatype artifact upload\n      requirements. For other contributors, see\n      https://github.com/opentripplanner/OpenTripPlanner/graphs/contributors\n    -->\n    <developers>\n        <developer>\n            <name>Andrew Byrd</name>\n            <email>andrew@fastmail.net</email>\n            <organization>Conveyal</organization>\n            <organizationUrl>http://conveyal.com/</organizationUrl>\n        </developer>\n        <developer>\n            <name>Thomas Gran</name>\n            <email>t2gran@gmail.com</email>\n            <organization>Entur</organization>\n            <organizationUrl>http://entur.org/</organizationUrl>\n        </developer>\n        <developer>\n            <name>Leonard Ehrenfried</name>\n            <email>mail@leonard.io</email>\n            <organization>Independent Contractor</organization>\n            <organizationUrl>https://leonard.io</organizationUrl>\n        </developer>\n        <developer>\n            <name>Hannes Junnila</name>\n            <email>hannes.junnila@gmail.com</email>\n            <organization>Entur</organization>\n            <organizationUrl>http://entur.org/</organizationUrl>\n        </developer>\n    </developers>\n\n\n    <properties>\n        <otp.serialization.version.id>176</otp.serialization.version.id>\n\n        <!-- Lib versions - keep list sorted on property name -->\n        <geotools.version>32.1</geotools.version>\n        <google.dagger.version>2.53</google.dagger.version>\n        <jackson.version>2.18.2</jackson.version>\n        <jaxb-runtime.version>4.0.5</jaxb-runtime.version>\n        <jersey.version>3.1.10</jersey.version>\n        <junit.version>5.11.4</junit.version>\n        <micrometer.version>1.14.1</micrometer.version>\n        <netcdf4.version>5.6.0</netcdf4.version>\n        <logback.version>1.5.12</logback.version>\n        <lucene.version>10.1.0</lucene.version>\n        <micrometer.version>1.14.1</micrometer.version>\n        <netex-java-model.version>2.0.15</netex-java-model.version>\n        <netcdf4.version>5.6.0</netcdf4.version>\n        <protobuf.version>4.28.3</protobuf.version>\n        <siri-java-model.version>1.28</siri-java-model.version>\n        <slf4j.version>2.0.16</slf4j.version>\n        <!-- Other properties -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <GITHUB_REPOSITORY>opentripplanner/OpenTripPlanner</GITHUB_REPOSITORY>\n        <!-- Set argLine to an empty string so that running the tests without the coverage agent works.\n             When running `mvn jacoco:prepare-agent test` argLine is replaced with the one activating the agent.\n        -->\n        <argLine/>\n        <plugin.prettier.version>0.22</plugin.prettier.version>\n        <plugin.prettier.goal>write</plugin.prettier.goal>\n        <plugin.prettier.skip>false</plugin.prettier.skip>\n    </properties>\n\n    <distributionManagement>\n        <repository>\n            <id>github</id>\n            <name>OpenTripPlanner Maven Repository on Github Packages</name>\n            <url>https://maven.pkg.github.com/${GITHUB_REPOSITORY}/</url>\n        </repository>\n    </distributionManagement>\n\n    <modules>\n        <module>utils</module>\n        <module>raptor</module>\n        <module>gtfs-realtime-protobuf</module>\n        <module>application</module>\n        <module>otp-shaded</module>\n    </modules>\n\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-shade-plugin</artifactId>\n                    <version>3.6.0</version>\n                </plugin>\n                <plugin>\n                    <groupId>com.hubspot.maven.plugins</groupId>\n                    <artifactId>prettier-maven-plugin</artifactId>\n                    <version>${plugin.prettier.version}</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n                <configuration>\n                    <!-- Target Java version -->\n                    <release>21</release>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>com.google.dagger</groupId>\n                            <artifactId>dagger-compiler</artifactId>\n                            <version>${google.dagger.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.4.2</version>\n                <configuration>\n                    <archive>\n                        <manifestEntries>\n                            <!-- For Java 11 Modules, specify a module name. Do not create module-info.java until all\n                                 our dependencies specify a module name. -->\n                            <Automatic-Module-Name>org.opentripplanner.otp</Automatic-Module-Name>\n                            <OTP-Serialization-Version-Id>${otp.serialization.version.id}</OTP-Serialization-Version-Id>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <!-- OTP includes an empty javadoc.jar file. See doc/javadoc/README.md -->\n                        <id>package-javadoc</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                        <configuration>\n                            <classesDirectory>${basedir}/doc/javadoc</classesDirectory>\n                            <classifier>javadoc</classifier>\n                            <skipIfEmpty>true</skipIfEmpty>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.3.1</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <!-- we are seeing random failures in Windows CI builds which appear related to the\n                 properties files: https://issues.apache.org/jira/browse/MRESOURCES-265\n            -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <version>3.3.1</version>\n                <configuration>\n                    <propertiesEncoding>UTF-8</propertiesEncoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.5.2</version>\n                <dependencies>\n                    <dependency>\n                        <groupId>me.fabriciorby</groupId>\n                        <artifactId>maven-surefire-junit5-tree-reporter</artifactId>\n                        <version>1.4.0</version>\n                    </dependency>\n                </dependencies>\n                <configuration>\n                    <!-- we have to fork the JVM during tests so that the argLine is passed along -->\n                    <forkCount>3</forkCount>\n                    <!-- enable the restricted reflection under Java 11 so that the ObjectDiffer works\n                         the @{argLine} part is there to allow jacoco to insert its arguments as well\n                    -->\n                    <argLine>\n                        @{argLine}\n                        -Xmx2G\n                        -Dfile.encoding=UTF-8\n                        --add-opens java.base/java.io=ALL-UNNAMED\n                        --add-opens java.base/java.lang=ALL-UNNAMED\n                        --add-opens java.base/java.lang.module=ALL-UNNAMED\n                        --add-opens java.base/java.lang.invoke=ALL-UNNAMED\n                        --add-opens java.base/java.lang.ref=ALL-UNNAMED\n                        --add-opens java.base/java.math=ALL-UNNAMED\n                        --add-opens java.base/java.net=ALL-UNNAMED\n                        --add-opens java.base/java.text=ALL-UNNAMED\n                        --add-opens java.base/java.time=ALL-UNNAMED\n                        --add-opens java.base/java.time.zone=ALL-UNNAMED\n                        --add-opens java.base/java.time.format=ALL-UNNAMED\n                        --add-opens java.base/java.time.temporal=ALL-UNNAMED\n                        --add-opens java.base/java.time.chrono=ALL-UNNAMED\n                        --add-opens java.base/java.util=ALL-UNNAMED\n                        --add-opens java.base/java.util.concurrent.locks=ALL-UNNAMED\n                        --add-opens java.base/java.util.regex=ALL-UNNAMED\n                        --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.reflect=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.misc=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.loader=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.ref=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.util=ALL-UNNAMED\n                        --add-opens java.base/jdk.internal.module=ALL-UNNAMED\n                        --add-opens java.base/sun.net.www.protocol.http=ALL-UNNAMED\n                        --add-opens java.base/sun.net.www.protocol.jar=ALL-UNNAMED\n                        --add-opens java.base/sun.util.calendar=ALL-UNNAMED\n                        --add-opens java.base/sun.util.locale=ALL-UNNAMED\n                        --add-opens java.base/sun.invoke.util=ALL-UNNAMED\n                        --add-opens java.xml/org.xml.sax.helpers=ALL-UNNAMED\n                    </argLine>\n                    <reportFormat>plain</reportFormat>\n                    <consoleOutputReporter>\n                        <disable>true</disable>\n                    </consoleOutputReporter>\n                    <statelessTestsetInfoReporter implementation=\"org.apache.maven.plugin.surefire.extensions.junit5.JUnit5StatelessTestsetInfoTreeReporter\">\n                        <printStacktraceOnError>true</printStacktraceOnError>\n                        <printStacktraceOnFailure>true</printStacktraceOnFailure>\n                        <printStdoutOnError>true</printStdoutOnError>\n                        <printStdoutOnFailure>true</printStdoutOnFailure>\n                        <printStdoutOnSuccess>false</printStdoutOnSuccess>\n                        <printStderrOnError>true</printStderrOnError>\n                        <printStderrOnFailure>true</printStderrOnFailure>\n                        <printStderrOnSuccess>false</printStderrOnSuccess>\n                        <theme>UNICODE</theme>\n                    </statelessTestsetInfoReporter>\n                </configuration>\n            </plugin>\n            <!-- code coverage report -->\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.12</version>\n            </plugin>\n            <plugin>\n                <!-- Get current Git commit information for use in MavenVersion class.\n                  Commit information is stored in Maven variables, which are then substituted\n                  into the properties file. The plugin has a mode to generate a git.properties file,\n                  but we need the Maven project version as well, so we perform substitution. -->\n                <groupId>io.github.git-commit-id</groupId>\n                <artifactId>git-commit-id-maven-plugin</artifactId>\n                <version>9.0.1</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>revision</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <verbose>false</verbose>\n                    <dateFormat>yyyy-MM-dd'T'HH:mm:ssXXX</dateFormat>\n                    <includeOnlyProperties>\n                        <!-- Including each property used reduce the plugin execution time. -->\n                        <includeOnlyProperty>git.commit.id</includeOnlyProperty>\n                        <includeOnlyProperty>git.commit.id.describe</includeOnlyProperty>\n                        <includeOnlyProperty>git.commit.time</includeOnlyProperty>\n                        <includeOnlyProperty>git.build.time</includeOnlyProperty>\n                        <includeOnlyProperty>git.branch</includeOnlyProperty>\n                        <includeOnlyProperty>git.dirty</includeOnlyProperty>\n                    </includeOnlyProperties>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>com.hubspot.maven.plugins</groupId>\n                <artifactId>prettier-maven-plugin</artifactId>\n                <configuration>\n                    <skip>${plugin.prettier.skip}</skip>\n                    <prettierJavaVersion>2.0.0</prettierJavaVersion>\n                    <inputGlobs>\n                        <inputGlob>src/main/java/**/*.java</inputGlob>\n                        <inputGlob>src/test/java/**/*.java</inputGlob>\n                        <inputGlob>src/**/*.json</inputGlob>\n                        <inputGlob>src/test/resources/org/opentripplanner/apis/**/*.graphql</inputGlob>\n                    </inputGlobs>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>${plugin.prettier.goal}</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>com.google.cloud.tools</groupId>\n                <artifactId>jib-maven-plugin</artifactId>\n                <version>3.4.4</version>\n                <configuration>\n                    <container>\n                        <mainClass>org.opentripplanner.standalone.OTPMain</mainClass>\n                        <entrypoint>/docker-entrypoint.sh</entrypoint>\n                        <volumes>\n                            <volume>\n                                /var/opentripplanner/\n                            </volume>\n                        </volumes>\n                        <ports>\n                            <port>8080</port>\n                            <port>8081</port>\n                        </ports>\n                    </container>\n                    <from>\n                        <image>eclipse-temurin:21-jre</image>\n                        <platforms>\n                            <platform>\n                                <architecture>amd64</architecture>\n                                <os>linux</os>\n                            </platform>\n                            <platform>\n                                <architecture>arm64</architecture>\n                                <os>linux</os>\n                            </platform>\n                        </platforms>\n                    </from>\n                    <to>\n                        <image>${env.CONTAINER_REPO}</image>\n                        <auth>\n                            <username>${env.CONTAINER_REGISTRY_USER}</username>\n                            <password>${env.CONTAINER_REGISTRY_PASSWORD}</password>\n                        </auth>\n                    </to>\n                    <extraDirectories>\n                        <permissions>\n                            <permission>\n                                <file>/docker-entrypoint.sh</file>\n                                <mode>755</mode>\n                            </permission>\n                            <permission>\n                                <file>/var/opentripplanner/</file>\n                                <mode>755</mode>\n                            </permission>\n                        </permissions>\n                    </extraDirectories>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <repositories>\n        <!-- Hack to force maven to check central first. Maven central is inherited from the superpom,\n          but ends up at the end of the list. Though most of the time the artifact is in central,\n          Maven tries to download from every other repository and fails before checking central.\n          Do not change the id from central2 to central, otherwise the entry will be ignored. -->\n        <repository>\n            <id>central2</id>\n            <name>Check central first to avoid a lot of not found warnings</name>\n            <url>https://repo.maven.apache.org/maven2</url>\n        </repository>\n        <repository>\n            <id>osgeo</id>\n            <name>Open Source Geospatial Foundation Repository</name>\n            <url>https://repo.osgeo.org/repository/release/</url>\n        </repository>\n    </repositories>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <!-- This makes sure all google libraries are using compatible versions. -->\n                <groupId>com.google.cloud</groupId>\n                <artifactId>libraries-bom</artifactId>\n                <version>26.51.0</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>com.google.protobuf</groupId>\n                <artifactId>protobuf-java</artifactId>\n                <version>${protobuf.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.google.guava</groupId>\n                <artifactId>guava</artifactId>\n                <version>33.4.0-jre</version>\n            </dependency>\n\n            <!-- Logging API -->\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n\n            <dependency>\n                <!--\n                 This is implicitly used in the current OTP codebase. Should be disallowed and\n                 replaced with the standard annotation JARs. Leaving this for now to reduce number\n                 of changes.\n                -->\n                <groupId>com.google.code.findbugs</groupId>\n                <artifactId>jsr305</artifactId>\n                <version>3.0.2</version>\n            </dependency>\n            <dependency>\n                <groupId>net.sf.trove4j</groupId>\n                <artifactId>trove4j</artifactId>\n                <version>3.0.3</version>\n            </dependency>\n\n            <!-- GEOTOOLS AND JTS TOPOLOGY: geometry, rasters and projections. -->\n            <!-- GEOTOOLS includes JTS as a transitive dependency. -->\n            <dependency>\n                <groupId>org.geotools</groupId>\n                <artifactId>gt-coverage</artifactId>\n                <version>${geotools.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.geotools</groupId>\n                <artifactId>gt-geotiff</artifactId>\n                <version>${geotools.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.geotools</groupId>\n                <artifactId>gt-api</artifactId>\n                <version>${geotools.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.geotools</groupId>\n                <artifactId>gt-geojson-core</artifactId>\n                <version>${geotools.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>de.grundid.opendatalab</groupId>\n                <artifactId>geojson-jackson</artifactId>\n                <version>1.14</version>\n            </dependency>\n\n            <!-- Testing -->\n\n            <dependency>\n                <groupId>org.junit.jupiter</groupId>\n                <artifactId>junit-jupiter-api</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.junit.jupiter</groupId>\n                <artifactId>junit-jupiter-params</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.google.truth</groupId>\n                <artifactId>truth</artifactId>\n                <version>1.4.4</version>\n            </dependency>\n            <dependency>\n                <groupId>com.tngtech.archunit</groupId>\n                <artifactId>archunit</artifactId>\n                <version>1.3.0</version>\n            </dependency>\n            <dependency>\n                <groupId>org.mockito</groupId>\n                <artifactId>mockito-core</artifactId>\n                <version>5.14.2</version>\n            </dependency>\n            <dependency>\n                <groupId>io.github.origin-energy</groupId>\n                <artifactId>java-snapshot-testing-junit5</artifactId>\n                <version>2.3.0</version>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <profiles>\n        <profile>\n            <id>prettierCheck</id>\n            <properties>\n                <!-- In the CI environment we want to validate that code is formatted -->\n                <plugin.prettier.goal>check</plugin.prettier.goal>\n            </properties>\n        </profile>\n        <profile>\n            <id>prettierSkip</id>\n            <activation>\n                <property>\n                    <!--\n                      This works as a short alias to enable this from the command line. To skip\n                      prettier, set the 'ps' system property with the '-D ps' parameter:\n                      # mvn test -D ps\n                    -->\n                    <name>ps</name>\n                    <value/>\n                </property>\n            </activation>\n            <properties>\n                <plugin.prettier.skip>true</plugin.prettier.skip>\n            </properties>\n        </profile>\n        <profile>\n            <id>clean-test-snapshots</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-clean-plugin</artifactId>\n                        <configuration>\n                            <filesets>\n                                <fileset>\n                                    <directory>${project.build.testSourceDirectory}</directory>\n                                    <includes>\n                                        <include>**/__snapshots__/*</include>\n                                        <include>**/__snapshots__</include>\n                                    </includes>\n                                </fileset>\n                            </filesets>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>deployGitHub</id>\n            <distributionManagement>\n                <repository>\n                    <id>github</id>\n                    <name>OpenTripPlanner Maven Repository on Github Packages</name>\n                    <url>https://maven.pkg.github.com/${GITHUB_REPOSITORY}/</url>\n                </repository>\n            </distributionManagement>\n        </profile>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>3.2.7</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <!-- We sign in the verify phase, which means it will happen before install and deploy (the last two phases)\n                                     but not before earlier phases like test or package. -->\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                                <configuration>\n                                    <keyname>74ED86891C2BCCD1352D928460B7785172A9FE89</keyname>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <!-- Recommended way to deploy to OSSRH , which allows deferred manual release to Central. -->\n                        <groupId>org.sonatype.plugins</groupId>\n                        <artifactId>nexus-staging-maven-plugin</artifactId>\n                        <version>1.7.0</version>\n                        <extensions>true</extensions>\n                        <configuration>\n                            <serverId>ossrh</serverId>\n                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                            <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n"
        },
        {
          "name": "raptor",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json5",
          "type": "blob",
          "size": 5.7294921875,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ],\n  \"prConcurrentLimit\": 3,\n  \"labels\": [\n    \"skip changelog\"\n  ],\n  \"rebaseWhen\": \"conflicted\",\n  \"enabledManagers\": [\n    \"npm\",\n    \"maven\",\n    \"pip_requirements\"\n  ],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"jakarta.xml.bind:jakarta.xml.bind-api\",\n        // need code changes, don't want to upgrade\n        \"io.github.origin-energy:java-snapshot-testing-junit5\",\n        \"commons-cli:commons-cli\",\n        \"org.processing:core\",\n        // Skanetrafiken doesn't want automatic updates for these Azure libraries\n        \"com.microsoft.azure:azure-servicebus\",\n        \"com.azure.resourcemanager:azure-resourcemanager-servicebus\",\n        \"com.azure:azure-core\",\n        \"com.azure:azure-messaging-servicebus\",\n        \"com.azure:azure-identity\"\n      ],\n      \"enabled\": false\n    },\n    {\n      \"matchFiles\": [\"client/package.json\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"groupName\": \"Debug UI dependencies (non-major)\",\n      \"schedule\": [\"after 6pm on the 3rd and 17th day of the month\"],\n      \"reviewers\": [\"testower\"]\n    },\n    {\n      \"matchFiles\": [\"client/package.json\"],\n      \"matchUpdateTypes\": [\"major\"],\n      \"reviewers\": [\"testower\"]\n    },\n    // some dependencies that we auto-merge release very often and even the auto-merges create a lot of\n    // noise, so we slow it down a bit\n    {\n      \"description\": \"Automerge test dependencies in a single PR\",\n      \"groupName\": \"Test dependencies\",\n      \"matchPackageNames\": [\n        \"org.mockito:mockito-core\",\n        \"com.tngtech.archunit:archunit\",\n        \"org.apache.maven.plugins:maven-surefire-plugin\",\n        \"me.fabriciorby:maven-surefire-junit5-tree-reporter\",\n        \"com.google.truth:truth\",\n        \"org.jacoco:jacoco-maven-plugin\", // coverage plugin\n        \"org.apache.commons:commons-compress\", // only used by tests\n        \"org.junit.jupiter:{/,}**\"\n      ],\n      \"automerge\": true,\n      \"schedule\": \"on the 17th day of the month\"\n    },\n    {\n      \"matchPackageNames\": [\n        \"org.mobilitydata:gbfs-java-model\"\n      ],\n      \"matchUpdateTypes\": [\"patch\"],\n      \"schedule\": \"on the 18th day of the month\",\n      \"automerge\": true\n    },\n    {\n      \"description\": \"Automerge Maven plugins in a single PR\",\n      \"groupName\": \"Maven plugins\",\n      \"matchPackageNames\": [\n        \"io.github.git-commit-id:git-commit-id-maven-plugin\",\n        \"org.apache.maven.plugins:maven-gpg-plugin\",\n        \"org.codehaus.mojo:build-helper-maven-plugin\",\n        \"org.apache.maven.plugins:maven-source-plugin\",\n        \"com.hubspot.maven.plugins:prettier-maven-plugin\",\n        \"com.google.cloud.tools:jib-maven-plugin\",\n        \"org.apache.maven.plugins:maven-shade-plugin\",\n        \"org.apache.maven.plugins:maven-compiler-plugin\",\n        \"org.apache.maven.plugins:maven-jar-plugin\",\n        \"org.sonatype.plugins:nexus-staging-maven-plugin\"\n      ],\n      \"schedule\": \"on the 23rd day of the month\",\n      \"automerge\": true\n    },\n    {\n      // https://github.com/graphql-java-kickstart/renovate-config/blob/main/default.json\n      \"description\": \"GraphQL Java (ignoring snapshot builds)\",\n      \"matchPackageNames\": [\n        \"com.graphql-java:{/,}**\"\n      ],\n      \"allowedVersions\": \"/^[0-9]+\\\\.[0-9]+(\\\\.[0-9]+)?$/\"\n    },\n    {\n      // at most monthly updates (as they tend to happen frequently)\n      \"matchPackageNames\": [\n        \"org.onebusaway:onebusaway-gtfs\",\n        \"com.google.cloud:libraries-bom\",\n        \"com.google.guava:guava\",\n        \"io.micrometer:micrometer-registry-prometheus\",\n        \"io.micrometer:micrometer-registry-influx\",\n        \"com.google.protobuf:protobuf-java\"\n      ],\n      \"schedule\": \"on the 7th through 8th day of the month\"\n    },\n    {\n      \"groupName\": \"Update GTFS API code generation in a single PR\",\n      \"matchFiles\": [\"src/main/java/org/opentripplanner/apis/gtfs/generated/package.json\"],\n      \"reviewers\": [\"optionsome\", \"leonardehrenfried\"],\n      \"schedule\": \"on the 11th through 12th day of the month\"\n    },\n    {\n      \"description\": \"in order to keep review burden low, don't update these quite so frequently\",\n      \"matchPackageNames\": [\n        \"org.apache.lucene:{/,}**\",\n      ],\n      \"extends\": [\n        \"schedule:quarterly\"\n      ]\n    },\n    {\n      \"groupName\": \"mkdocs\",\n      \"description\": \"automerge mkdocs-material every quarter\",\n      \"matchPackageNames\": [\n        \"mkdocs\",\n        \"mkdocs-material\"\n      ],\n      \"extends\": [\n        \"schedule:quarterly\"\n      ],\n      \"automerge\": true\n    },\n    {\n      \"description\": \"Automerge logging dependencies in a single PR\",\n      \"groupName\": \"logging dependencies\",\n      \"matchPackageNames\": [\n        \"org.slf4j:{/,}**\",\n        \"ch.qos.logback:{/,}**\"\n      ],\n      \"automerge\": true,\n      \"schedule\": \"on the 4th day of the month\"\n    },\n    {\n      \"groupName\": \"Low-risk dependencies (patch)\",\n      \"matchUpdateTypes\": [\"patch\"],\n      \"schedule\": [\"on the 27th day of the month\"],\n      \"matchPackageNames\": [\n        \"org.glassfish.jersey.{/,}**\",\n      ]\n    },\n    {\n      \"description\": \"give some projects time to publish a changelog before opening the PR\",\n      \"matchPackageNames\": [\n        \"com.google.dagger:{/,}**\",\n        \"com.fasterxml.jackson:{/,}**\",\n        \"com.fasterxml.jackson.datatype::{/,}**\"\n      ],\n      \"minimumReleaseAge\": \"1 week\",\n      \"schedule\": \"on the 13th through 14th day of the month\"\n    },\n    {\n      \"description\": \"Geotools takes a while to publish a changelog and since it pulls in JTS it can change the serialization of the graph\",\n      \"matchPackageNames\": [\n        \"org.geotools:{/,}**\"\n      ],\n      \"minimumReleaseAge\": \"1 week\",\n      \"labels\": [\"skip changelog\", \"bump serialization id\"]\n    }\n  ],\n  \"timezone\": \"Europe/Berlin\"\n}\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}