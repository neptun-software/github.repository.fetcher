{
  "metadata": {
    "timestamp": 1736609178996,
    "page": 493,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KeepSafe/dexcount-gradle-plugin",
      "stars": 3081,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\n# Change these settings to your own preference\nindent_style = space\nindent_size = 4\n\n# We recommend you to keep these unchanged\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# Markdown files sometimes need trailing whitespaces.\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0927734375,
          "content": "*.iml\n.idea/\n.gradle/\nbuild/\n*.log\nlocal.properties\nout/\n.cxx/\n*.hprof\nbuild-cache/\ntmp/\nsite/\n"
        },
        {
          "name": ".java-version",
          "type": "blob",
          "size": 0.0029296875,
          "content": "17\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.732421875,
          "content": "4.0.0 (16 January 2023)\n---------\n* **BREAKING** Raise minimum JDK version to 11 (#462)\n* Add support for AGP 8.0.0 alphas - and drop support for AGP versions below 7.0.0 (#491)\n* Add support for AGP 7.4.0 (#492)\n* Add support for AGP 7.3.0 (#475)\n* Add support for AGP 7.2.0 (#444)\n* Remove (broken) color console output (#432)\n\n3.1.0 (25 January 2022)\n---------\n* Add support for AGP 7.1.0\n* Add preliminary support for AGP 7.2.0 alphas\n\n3.0.1 (20 September 2021)\n---------\n* Fix plugin compatibility with Gradle 6.1.1 (#411)\n\n3.0.0 (9 August 2021)\n---------\n* **BREAKING** Port plugin from Kotlin to Java for better Gradle compatibility; public extension API changed. (#379)\n* Add support for AGP 7.0.0\n* Preliminary support for AGP 7.1.0 alphas\n\n3.0.0-RC02 (30 July 2021)\n---------\n* Fix support for AGP 4.2.0 and below (#400)\n\n3.0.0-RC01 (29 July 2021)\n---------\n* **BREAKING** Port plugin from Kotlin to Java for better Gradle compatibility; public extension API changed. (#379)\n* Add support for AGP 7.0.0\n* Preliminary support for AGP 7.1.0 alphas\n\n2.1.0 (unreleased)\n---------\n\n2.1.0-RC01 (9 May 2021)\n---------\n* Add support for AGP 4.2.0\n\n2.0.0 (15 October 2020)\n---------\n* **BREAKING** Raise minimum Gradle version to 6.0\n* **BREAKING** Raise minimum AGP version to 3.4.0\n* **BREAKING** Raise minimum JDK version to 1.8\n* **BREAKING** On AGP 4.1.0 and above, Dexcount tasks do not run automatically during a build and must be manually executed.\n* **BREAKING** Dexcount output layout on disk has changed; all output files now go in a directory named `build/outputs/dexcount/$variant/`, where `$variant` is the name of the variant whose output was analyzed.\n* Added support for AGP 4.1.0 (#305)\n* Added support for counting AAB files, AGP 4.1.0+ only (#309)\n* Fix: Crash in Android Studio 4.0.1 (#353)\n* Fix: JvmStatic methods on Kotlin interface companion objects, in AARs (#311)\n* Fix: Properly publish Gradle Plugin DSL marker artifact (#333)\n\n1.0.3\n---------\n* Fix: AGP 4.1 bugfixes (#300)\n* Fix: Don't use getProject() in DexCountTask (#297)\n\n1.0.2\n---------\n* Fix: don't use Gradle APIs introduced after 5.1 (#293)\n\n1.0.1\n---------\n* Fix counting of renamed APKs (#292)\n\n1.0.0\n---------\n* **BREAKING** Drop support for AGP 2.x\n* **BREAKING** Require Gradle 5.1 or later\n* **BREAKING** Renamed DexMethodCountTask to DexCountTask\n* **BREAKING** Changed task input types to Gradle Properties\n* Added support for counting regular java modules (#271) (thanks, @vRallev)\n* Added support for AGP 3.6 (#275)\n* Fix: support magic dex version v039\n\n0.8.6 (released 5 February 2018)\n---------\n* Fix more deprecated-API usage (#264)\n\n0.8.5 (released 2 January 2018)\n---------\n* Don't use deprecated Variant methods in AGP 3.3+ (#261)\n\n0.8.4 (released 2 October 2018)\n---------\n* Add `enabled` configuration flag (#255)\n* Enable TeamCity by default when running on TeamCity (#252)\n\n0.8.3 (released 19 June 2018)\n---------\n* Update dexdeps to handle .dex format version 038 (#248)\n\n0.8.2 (released 30 November 2017)\n---------\n* Remove ported SdkResolver (#232)\n* Fix counts where output file has been renamed (#229)\n* Update Android Gradle support to 3.1.0 (#225)\n\n0.8.1 (released 21 September 2017)\n---------\n* Fix for users of Android Gradle Plugin versions below 3.0\n\n0.8.0 (released 20 September 2017)\n---------\n* Update modern counting task to use Android Studio 3.0's new variant API (#218)\n* Rewrite from Groovy -> Kotlin\n\n0.7.3 (released 14 July 2017)\n---------\n* Fix builds when Instant Run is enabled and `dexcount` extension is used (#190)\n\n0.7.2 (released 10 July 2017)\n---------\n* Fix counting AAR projects on AGP 3.0+ (#188)\n\n0.7.1 (released 22 June 2017)\n---------\n* Add class count to output and summary files (#184)\n* Fix counting renamed variant outputs (#182)\n* Remove use of `uncapitalize()` for users of Gradle < 2.5 (#180)\n\n0.7.0 (released 12 June 2017)\n---------\n* Deprecate `runOnEachAssemble` configuration property\n* Make Android Gradle plugin a compileOnly dependency (#176)\n* Disable Instant Run support; incompatible with the new build tools\n* Add support for Android Gradle Plugin 3.0.0\n* Add class counts (#164)\n* Fix zip-file-handle leaks (#160)\n\n0.6.4 (released 6 April 2017)\n---------\n* Update dexdeps to handle .dex format version 037 (#158)\n\n0.6.3 (released Ï€ 2017)\n---------\n* Add maxMethodCount option to fail builds if the count is exceeded (#152)\n* Add NDK support for AARs (#145)\n\n0.6.2 (released 16 December 2016)\n---------\n* Don't attempt to count methods on files that don't exist (#139)\n\n0.6.1 (released 14 September 2016)\n---------\n* Add runOnEachAssemble option to prevent task from running after assemble (#133)\n\n0.6.0 (released 31 August 2016)\n---------\n* Remove output annotations to opt out of Gradle caching (#132)\n* Add configurable slug for TeamCity statistics (#129)\n\n0.5.6 (released 17 August 2016)\n---------\n* Remove StyledTextOutput use to un-break Gradle 3.0 (#126)\n* Remove use of JDK-8-only methods on Process (#122)\n\n0.5.5 (released 30 June 2016)\n---------\n* Warn when building with Java 7 and below (#120)\n* Don't count Instant Run builds by default (#119)\n\n0.5.4 (released 15 June 2016)\n---------\n* Fix crash on old versions Gradle (#112)\n* Fix plugin for Gradle 2.14 (#110)\n\n0.5.3 (released 7 June 2016)\n---------\n* Fix crash when logging a crash (thanks, Gradle) (#105)\n* Add extra diagonistics when running with `--stacktrace` (#102)\n\n0.5.2 (released 17 May 2016)\n---------\n* Un-break for JVM 7 and below (PR #99)\n\n0.5.1 (released 16 May 2016)\n---------\n\n* Fix duplicate task invocation when `assemble` and `countDexMethods` are named on the command line (#97)\n* Fix crash when `chartDir` already exists (#94)\n* Fix crash when dx invocation fails for .aar (#93)\n* Fix JVM verifier crash, again (#86)\n\n0.5.0 (released 18 April 2016)\n---------\n\n* Add Android Test Module support (#81)\n* Add Instant Run support (#78)\n* Add AAR support (#70)\n* Add TeamCity support (#68)\n\n0.4.4 (released 4 April 2016)\n---------\n\n* Fix display of methods-remaining for multidex builds (don't show negative numbers) (issue #64)\n* Add 'maxTreeDepth' config option (issue #54)\n\n0.4.3 (released 14 March 2016)\n---------\n\n* Add sunburst chart generation (issue #57)\n\n0.4.2 (released 16 February 2016)\n---------\n\n* Add percentage-used for method and field counts to Gradle output\n\n0.4.1 (released 29 January 2016)\n----------\n\n* Change output-file extensions to '.json' and '.yml' for JSON and YAML outputs.\n* Revert pull request #32 and remove `@Input` from `apkOrDex` (issues #40 and #46)\n\n0.4.0 (released 23 January 2016)\n----------\n\n* BUG: Fix incorrect indentation on field-count-only YAML output\n* Add YAML as a format option\n* Add JSON as a format option\n* Replace `printAsTree` with `format` and associated enum\n\n0.3.1 (released 5 December 2015)\n----------\n\n* Report number of methods/fields remaining in console output\n* Add description and group to Gradle tasks\n* Add `includeTotalMethodCount` config option to print total count in the PackageTree output\n\n0.3.0 (released 27 October 2015)\n----------\n\n* Remove `exportAsCSV` and just print the file unconditionally\n* CHANGED: field counts are enabled by default\n* Use Proguard mappings to de-obfuscate class and package names\n* Add `exportAsCSV` option to support Jenkins Plot Plugin\n\n0.2.1 (released 11 September 2015)\n----------\n\n* BUG: Fix invalid bytecode (issue #11)\n* BUG: Work around Groovy-Java interop bug (issue #12)\n\n0.2.0 (released 2 September 2015)\n------------------\n\n* Add field-reference count to DexMethodCountTask stdout\n* Add configurability via a `dexcount` Gradle extension\n* Add verbose output option\n* Add option to include field counts in printed package lists\n* Add option to sort printed package list by method count (issue #7)\n* Add header to list-formatted output\n* Include methods in the unnamed package (e.g. primitive arrays) in task output\n\n\n0.1.1\n-----\n\nInitial open-source release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.544921875,
          "content": "## Contributing\n\nContributions are welcome!\n\n1. Make your own fork of this repo\n2. Make your changes in a branch, in your own repo.\n3. If you add any new files, please make sure the Apache license header is included up top.\n4. When you are done coding, be sure to run `test.sh` and make sure that it passes!\n5. When your code is ready and the tests are passing, open up a pull request against our master branch.\n\nIf you have bug reports or feature requests, please open a GitHub Issue, and we'll get to it ASAP.\n\n## Building\n\n```sh\n./gradlew build\n```\n\nNote that this runs the integration tests, which can be rather slow.  To run only the regular unit tests:\n\n```sh\n./gradlew test\n```\n\n## Releasing\n\nWe use the [`gradle-maven-publish-plugin`](https://github.com/vanniktech/gradle-maven-publish-plugin) to publish to Sonatype OSS (and from thence to Maven Central), and the [`com.gradle.plugin-publish](https://plugins.gradle.org/plugin/com.gradle.plugin-publish) plugin to publish to the Gradle Plugin Portal.  Each of these plugins requires a fair bit of configuration.\n\n### Publishing to Sonatype\n\nPushing artifacts to Sonatype requires membership in the KeepSafe Sonatype org, which is by employment only.  Once\nyou have a login, put it in your private global Gradle file (e.g. `~/.gradle/gradle.properties`, along with a valid\nGPG signing configuration.  Your properties file should look like so:\n\n```properties\nSONATYPE_NEXUS_USERNAME=<your username here>\nSONATYPE_NEXUS_PASSWORD=<your password here>\nsigning.secretKeyRingFile=/path/to/your/.gnupg/secring.gpg\nsigning.keyId=<short hex key ID>\nsigning.password=<password associated with the key>\n```\n\n### Publishing to the Gradle Plugin Portal\n\nPublishing to the Gradle Plugin Portal also requires credentials tied to your employment.  You'll need an API key and secret from `https://plugins.gradle.org`.  Put them in your global Gradle properties file like so:\n\n```properties\ngradle.publish.key=<your API key>\ngradle.publish.secret=<your secret here>\n```\n\nNote that the Plugin Portal is incredibly lame and does not have a notion of more than one person being able to publish artifacts.  Consequently, we need to share credentials; in practice, only @benjamin-bader has the keys.\n\n### Release Script\n\n1. `git checkout master`\n1. Edit version number in gradle.properties, remove \"-SNAPSHOT\" suffix\n1. Edit version number in README.md\n1. Edit version number in docs/index.html\n1. Update CHANGELOG.md\n1. `git add . && git commit -S -m \"Release version <version number here>`\n1. `git tag -s -a <version number> -m \"Release version <version number>\"`\n1. `./gradlew clean check`\n1. `./gradlew uploadArchives`\n1. `./gradlew publishPlugins`\n1. Edit version number in gradle.properties to the next SNAPSHOT version.\n1. `git add . && git commit -S -m \"Prepare next development version\"`\n1. `git push --tags`\n1. Go to https://oss.sonatype.org, log in\n1. Click \"Staging Repositories\"\n1. Select the appropriate repo, then click \"Close\", then wait\n1. Once closed, select the repo and click \"Release\", then wait\n\n### Working with the website\n\nWe use [mkdocs](https://www.mkdocs.org/) with the [Material theme](https://squidfunk.github.io/mkdocs-material/getting-started/).  Follow the instructions at each link to install all the things. \n\nThe site is generated from the Markdown files in `docs/`, according to the template and settings in `mkdocs.yml`.  The general workflow is:\n\n1. `mkdocs serve`\n1. Open the browser to `http://localhost:8000`\n1. Edit docs and/or mkdocs.yml\n1. Look at the changes in the browser\n1. Repeat as necessary\n1. Open a doc PR\n1. Once merged, `mkdocs gh-deploy`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.83203125,
          "content": "<h1 align=\"center\">\n\t<p>Dexcount Gradle Plugin</p>\n    <img src=\"docs/images/example.png\" alt=\"a chart showing sample methods counts by package\">\n</h1>\n\n[![Build Status](https://github.com/KeepSafe/dexcount-gradle-plugin/workflows/CI/badge.svg)](https://github.com/KeepSafe/dexcount-gradle-plugin/actions?query=workflow%3ACI)\n[![Android Weekly](http://img.shields.io/badge/Android%20Weekly-%23174-2CB3E5.svg?style=flat)](http://androidweekly.net/issues/issue-174)\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Dexcount%20Gradle%20Plugin-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/1940)\n\nA Gradle plugin to report the number of method references in your APK, AAR, or java module.\n\nThis helps you keep tabs on the growth of your app, with an eye to staying under the 65,536 method-reference limit, and avoiding the headache of eliminating methods or enabling multidex.\n\nFor more information, please see [the website](https://keepsafe.github.io/dexcount-gradle-plugin/).\n\n## Download\n\nThe plugin is available from the Gradle Plugin Portal under the ID `com.getkeepsafe.dexcount`, and from Maven Central under the coordinates `com.getkeepsafe.dexcount:dexcount-gradle-plugin:4.0.0`.\n\nSnapshot builds are available from the Sonatype Snapshot Repository at `https://oss.sonatype.org/content/repositories/snapshots`.\n\nDexcount requires Java 11 or higher, Gradle 7.0 or higher, and Android Gradle Plugin 7.0.0 or higher.  (_Building_ the plugin requires Java 17 or higher.)\n\n## Credits\n\nThe Java code from the `com.android.dexdeps` package is sourced from the [Android source tree](https://android.googlesource.com/platform/dalvik.git/+/master/tools/dexdeps/).\nInspired by Mihail Parparita's [`dex-method-counts`](https://github.com/mihaip/dex-method-counts) project, to whom much credit is due.\n\nCopyright 2015-2023 Keepsafe Software, Inc\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 3.0810546875,
          "content": "How To Release\n==============\n\nDue to Maven Central's very particular requirements, the release process is a bit\nelaborate and requires a good deal of local configuration.  This guide should walk\nyou through it.  It won't do anyone outside of KeepSafe any good, but the workflow\nis representative of just about any project deploying via Sonatype.\n\nWe currently deploy to both Maven Central (via Sonatype's OSS Nexus instance) and to\nplugins.gradle.org.\n\n### Prerequisites\n\n1. A *published* GPG code-signing key\n1. A Sonatype Nexus OSS account with permission to publish in com.getkeepsafe\n1. A plugins.gradle.org account with permission to publish in com.getkeepsafe\n1. Permission to push directly to https://github.com/KeepSafe/dexcount-gradle-plugin\n\n### Setup\n\n1. Add your GPG key to your github profile - this is required\n   for github to know that your commits and tags are \"verified\".\n1. Configure your code-signing key in ~/.gradle.properties:\n   ```gradle\n   signing.keyId=<key ID of your GPG signing key>\n   signing.password=<your key's passphrase>\n   signing.secretKeyRingFile=/path/to/your/secring.gpg\n   ```\n1. Configure your Sonatype credentials in ~/.gradle.properties:\n   ```gradle\n   SONATYPE_NEXUS_USERNAME=<nexus username>\n   SONATYPE_NEXUS_PASSWORD=<nexus password>\n   ```\n1. Configure git with your codesigning key; make sure it's the same as the one\n   you use to sign binaries (i.e. it's the same one you added to gradle.properties):\n   ```bash\n   # Do this for the dexcount repo only\n   git config user.email \"your@email.com\"\n   git config user.signingKey \"your-key-id\"\n   ```\n1. Add your plugins.gradle.org credentials to ~/.gradle/gradle.properties:\n   ```gradle\n   gradle.publish.key=<the key>\n   gradle.publish.secret=<the secret>\n   ```\n\n### Pushing a build\n\n1. Edit gradle.properties, remove '-SNAPSHOT' from the VERSION property\n1. Edit readme so that Gradle examples point to the new version\n1. Edit changelog, add relevant changes, note the date and new version (follow the existing pattern)\n1. Verify that the everything works:\n   ```bash\n   ./gradlew clean check\n   ```\n1. Make a *signed* commit:\n   ```bash\n   git commit -S -m \"Release version X.Y.Z\"\n   ``` \n1. Make a *signed* tag ()check existing tags for message format):\n   ```bash\n   git tag -s -a X.Y.Z\n   ```\n1. Upload binaries to Sonatype:\n   ```bash\n   ./gradlew publish\n   ```\n1. Go to oss.sonatype.org, log in with your credentials\n1. Click \"Staging Repositories\"\n1. Find the \"comgetkeepsafe\" repo, usually at the bottom of the list\n1. \"Close\" the repository (select it then click the \"close\" button up top), the text field doesn't matter so put whatever you want in it\n1. Wait until that's done\n1. \"Release\" the repository, leave the checkbox checked.  Hooray, we're in Maven Central now!\n1. Upload binaries to Gradle's plugin portal:\n   ```bash\n   ./gradlew publishPlugins\n   ```\n1. Edit gradle.properties, bump the version number and add '-SNAPSHOT'\n1. Make a *signed* commit:\n   ```bash\n   git commit -S -m \"Prepare next development version\"\n   ```\n1. Push all of our work to Github to make it official:\n   ```bash\n   git push --tags origin master\n   ```\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 8.3486328125,
          "content": "/*\n * Copyright (C) 2015-2016 KeepSafe Software\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nplugins {\n    id \"groovy\"\n    id \"java-gradle-plugin\"\n\n    alias libs.plugins.gradlePluginPublish\n    alias libs.plugins.mavenPublish\n    alias libs.plugins.thrifty\n    alias libs.plugins.versions\n}\n\ngroup = GROUP\nversion = VERSION_NAME\ndescription = POM_DESCRIPTION\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_11\n}\n\nsourceSets {\n    integrationTest\n}\n\nconfigurations {\n    // Runtime dependencies provided by consuming Android projects - if you're\n    // building an Android project, you've already got these on the build classpath\n    // and we can't bundle our own copies.\n    androidBuildTool\n\n    // Runtime dependencies that are run only in Gradle Workers\n    // and must be restricted to an isolated classpath\n    workerImplementation\n\n    testImplementation {\n        extendsFrom androidBuildTool\n        extendsFrom workerImplementation\n    }\n\n    integrationTestImplementation {\n        extendsFrom testImplementation\n    }\n\n    compileOnly {\n        extendsFrom androidBuildTool\n        extendsFrom workerImplementation\n    }\n}\n\njar {\n    manifest {\n        attributes(\n                \"Implementation-Title\": POM_ARTIFACT_ID,\n                \"Implementation-Version\": VERSION_NAME)\n    }\n}\n\nrepositories {\n    mavenLocal {\n        content {\n            includeGroup \"com.getkeepsafe.dexcount\"\n        }\n    }\n    gradlePluginPortal()\n    google()\n}\n\ndependencies {\n    compileOnlyApi libs.autoValue.annotations\n    annotationProcessor libs.autoValue.processor\n\n    implementation libs.commons.io\n\n    androidBuildTool libs.androidTools.agp\n    androidBuildTool libs.androidTools.r8\n    androidBuildTool libs.androidTools.repository\n\n    workerImplementation libs.gson\n    workerImplementation libs.javassist\n    workerImplementation libs.thriftyRuntime\n\n    testImplementation dependencies.create(libs.spock.get()) {\n        exclude module: \"groovy-all\"\n    }\n    testImplementation libs.thriftyRuntime\n}\n\nthrifty {\n    java {}\n}\n\ndef generateDependencyResource = tasks.register(\"generateDependencyResource\") { t ->\n    // This task generates a text file containing versions of our worker-specific\n    // dependencies.  At runtime, we'll stuff these into a custom configuration\n    // and hand that to Gradle Worker tasks.\n\n    def generatedResourcesDir = project.layout.buildDirectory.dir([\"generated\", \"sources\", \"dexcount\", \"src\", \"main\", \"resources\"].join(File.separator))\n    def outputFile = generatedResourcesDir.map { it -> it.file(\"dependencies.list\") }\n    def dependencies = configurations.workerImplementation.getDependencies()\n\n    dependencies.forEach { dep ->\n        t.inputs.property(dep.name, dep.version)\n    }\n\n    t.outputs.dir(generatedResourcesDir)\n\n    t.doFirst {\n        File file = outputFile.get().getAsFile()\n        file.getParentFile().mkdirs()\n        file.delete()\n\n        dependencies\n            .collect { \"${it.group}:${it.name}:${it.version}\" }\n            .forEach { file << \"$it\\n\" }\n    }\n}\n\nsourceSets {\n    main {\n        resources {\n            srcDirs += generateDependencyResource\n        }\n    }\n}\n\ndef installForTesting = tasks.register(\"installForIntegrationTests\") { t ->\n    t.dependsOn \"publishToMavenLocal\"\n}\n\ndef integrationTest = tasks.register(\"integrationTest\", Test) { t ->\n    t.dependsOn installForTesting\n    t.mustRunAfter tasks.named(\"test\")\n\n    t.outputs.cacheIf { false }\n    t.outputs.upToDateWhen { false }\n\n    t.group \"verification\"\n    t.description \"Runs integration tests.\"\n\n    t.testClassesDirs = sourceSets.integrationTest.output.classesDirs\n    t.classpath = sourceSets.integrationTest.runtimeClasspath\n\n    // Workaround for https://github.com/gradle/gradle/issues/4506#issuecomment-570815277\n    t.systemProperty(\"org.gradle.testkit.dir\", file(\"build/tmp/.test-kit\"))\n\n    t.jvmArgs(\n        \"-XX:+HeapDumpOnOutOfMemoryError\", \"-XX:GCTimeLimit=20\", \"-XX:GCHeapFreeLimit=10\",\n        \"-XX:MaxMetaspaceSize=2g\"\n    )\n\n    t.beforeTest { testCase ->\n        logger.lifecycle(\"Running test: $testCase\")\n    }\n}\n\ntasks.named(\"check\").configure { t ->\n    t.dependsOn integrationTest\n}\n\ntasks.register(\"publishEverywhere\") { t ->\n    t.group \"publishing\"\n    t.description \"Publish to Maven Central and the Gradle Plugin Portal\"\n\n    t.dependsOn(\"publish\", \"publishPlugins\")\n}\n\n// Compiler settings\n\ntasks.withType(JavaCompile).configureEach {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n\n    // Show all warnings except boot classpath\n    configure(options) {\n        compilerArgs << \"-Xlint:all\"            // Turn on all warnings\n        compilerArgs << \"-Xlint:-options\"       // Turn off \"missing\" bootclasspath warning\n        compilerArgs << \"-Xlint:-processing\"    // Turn off \"no processor claimed these annotations\" warning\n        compilerArgs << \"-Werror\"               // Turn warnings into errors\n        encoding = \"utf-8\"\n        fork = true\n    }\n}\n\ntasks.withType(GroovyCompile).configureEach {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n\n    // Show all warnings except boot classpath\n    configure(options) {\n        compilerArgs << \"-Xlint:all\"            // Turn on all warnings\n        compilerArgs << \"-Xlint:-options\"       // Turn off \"missing\" bootclasspath warning\n        compilerArgs << \"-Werror\"               // Turn warnings into errors\n        incremental = true\n        encoding = \"utf-8\"\n        fork = true\n    }\n\n    configure(groovyOptions) {\n        encoding = \"utf-8\"\n        fork = true\n    }\n}\n\n// Don't fork too much on CI - it tends to run out of metaspace memory.\ndef isCi = providers.environmentVariable(\"CI\").isPresent()\n\ntasks.withType(Test).configureEach {\n    // Turn on logging for all tests, filter to show failures/skips only\n    testLogging {\n        exceptionFormat \"full\"\n        showCauses true\n        showExceptions true\n        showStackTraces true\n        events \"failed\", \"skipped\"\n    }\n\n    useJUnitPlatform()\n\n    failFast = true\n    maxParallelForks = isCi ? 1 : Runtime.runtime.availableProcessors().intdiv(2) ?: 1\n}\n\ntasks.withType(Javadoc).configureEach {\n    title = \"${project.name} ${project.version}\"\n    configure(options) {\n        source = JavaVersion.VERSION_11\n        header = project.name\n        encoding \"UTF-8\"\n        docEncoding \"UTF-8\"\n        charSet \"UTF-8\"\n        linkSource true\n        author = true\n        links \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n        exclude \"**/*Test.java\"\n        if (JavaVersion.current().java8Compatible) addStringOption(\"Xdoclint:none\", \"-quiet\")\n    }\n}\n\ntasks.withType(Groovydoc).configureEach {\n    docTitle = \"${project.name} ${project.version}\"\n    header = project.name\n    link(\"http://docs.oracle.com/javase/8/docs/api/\",\n        \"http://docs.oracle.com/javaee/7/api/\",\n        \"http://groovy.codehaus.org/gapi/\")\n    exclude \"**/*Spec.java\"\n}\n\nsigning {\n    useGpgCmd()\n}\n\n// Plugin Portal publishing\n\ngradlePlugin {\n    website = POM_URL\n    vcsUrl = POM_SCM_URL\n\n    plugins {\n        dexcount {\n            id = \"com.getkeepsafe.dexcount\"\n            implementationClass = \"com.getkeepsafe.dexcount.DexMethodCountPlugin\"\n            displayName = POM_NAME\n            description = POM_DESCRIPTION\n            tags.set([\"android\", \"dex\", \"method count\"])\n        }\n    }\n}\n\n// Convenient entrypoint for the \"upload snapshot\" CI action.\n// It's easier to do the version check here than in a Github action.\ndef isSnapshot = providers.gradleProperty(\"VERSION_NAME\").map { it.endsWith(\"-SNAPSHOT\") }\ntasks.register(\"uploadSnapshot\") {\n    if (isSnapshot.get()) {\n        dependsOn tasks.named(\"publish\")\n    } else {\n        doFirst {\n            logger.lifecycle(\"Skipping upload of non-snapshot version '{}'\", VERSION_NAME)\n        }\n    }\n}\n\nwrapper {\n    gradleVersion = \"8.4\"\n    distributionType = Wrapper.DistributionType.ALL\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.0068359375,
          "content": "GROUP=com.getkeepsafe.dexcount\nVERSION_NAME=4.0.1-SNAPSHOT\n\nPOM_ARTIFACT_ID=dexcount-gradle-plugin\nPOM_NAME=Dexcount Gradle Plugin\nPOM_PACKAGING=jar\n\nPOM_DESCRIPTION=A Gradle plugin for counting methods in an .apk\nPOM_INCEPTION_YEAR=2015\n\nPOM_URL=https://github.com/KeepSafe/dexcount-gradle-plugin/\nPOM_SCM_URL=https://github.com/KeepSafe/dexcount-gradle-plugin/\nPOM_SCM_CONNECTION=scm:git:git://github.com/KeepSafe/dexcount-gradle-plugin.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/KeepSafe/dexcount-gradle-plugin.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=keepsafe\nPOM_DEVELOPER_NAME=KeepSafe Software, Inc.\n\nRELEASE_SIGNING_ENABLED=true\nSONATYPE_HOST=DEFAULT\n\norg.gradle.caching=true\norg.gradle.jvmargs=-XX:MaxMetaspaceSize=1024m\n\n# Affects the ben-manes versions plugin's resolution strategy.\n# Default is \"milestone\", we only want to hear about release versions.\nsystemProp.revision=release\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright Â© 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions Â«$varÂ», Â«${var}Â», Â«${var:-default}Â», Â«${var+SET}Â»,\n#           Â«${var#prefix}Â», Â«${var%suffix}Â», and Â«$( cmd )Â»;\n#         * compound commands having a testable exit status, especially Â«caseÂ»;\n#         * various built-in commands including Â«commandÂ», Â«setÂ», and Â«ulimitÂ».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.80078125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.875,
          "content": "site_name: Dexcount Gradle Plugin\nrepo_name: dexcount-gradle-plugin\nrepo_url: https://github.com/keepsafe/dexcount-gradle-plugin\nsite_url: https://keepsafe.github.io/dexcount-gradle-plugin\nsite_description: A Gradle plugin to report the number of method references in your APK on every build.\nsite_author: Benjamin Bader\n\ncopyright: \"Copyright &copy; 2014-2021 KeepSafe Software, Inc\"\n\ntheme:\n  name: material\n  icon:\n    logo: material/chart-bar\n  favicon: images/favicon.png\n  palette:\n    primary: indigo\n    accent: lime\n\nmarkdown_extensions:\n  - smarty\n  - codehilite:\n      guess_lang: false\n  - footnotes\n  - meta\n  - toc:\n      permalink: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - tables\n\nnav:\n  - Overview: index.md\n  - Options: config.md\n  - CI: ci.md\n\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.2529296875,
          "content": "// Sets the output JAR filename\nrootProject.name = \"dexcount-gradle-plugin\"\n\nbuildCache {\n    local {\n        directory = new File(rootDir, \"build-cache\")\n        removeUnusedEntriesAfterDays = 30\n    }\n}\n\nenableFeaturePreview(\"GROOVY_COMPILATION_AVOIDANCE\")\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}