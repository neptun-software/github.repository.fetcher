{
  "metadata": {
    "timestamp": 1736609045025,
    "page": 288,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "uber/NullAway",
      "stars": 3679,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buildscript",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.138671875,
          "content": "###OSX###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must ends with two \\r.\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n\n###Linux###\n\n*~\n\n# KDE directory preferences\n.directory\n\n\n###Android###\n\n# Built application files\n*.apk\n*.ap_\n\n# Files for ART and Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\n.gradletasknamecache\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\njar-infer/scripts/android-jar.conf\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Lint\nlint-report.html\nlint-report_files/\nlint_result.txt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n\n###IntelliJ###\n\n*.iml\n*.ipr\n*.iws\n.idea/\n\n\n###Eclipse###\n\n*.pydevproject\n.metadata\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# TeXlipse plugin\n.texlipse\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 44.177734375,
          "content": "Changelog\n=========\nVersion 0.12.3\n---------------\n* Remove InferredJARModelsHandler (#1079)\n* Fix crash with annotation on enum (#1097)\n* Handle case null in switch statements (#1100)\n* Don't report errors for writes to @NullUnmarked fields (#1102)\n* Support primitive static final fields as constant args in access paths (#1105)\n* Fix issue with annotations in module-info.java files (#1109)\n* Report error for @nullable synchronized block expression (#1106)\n* Add support for parameter types with wildcards for JarInfer (#1107)\n* Properly handle nested generics and multiple wildcard type args in JarInfer (#1114)\n* Proper checking of vararg overrides with JSpecify annotations (#1116)\n* Add flag to indicate only @NullMarked code should be checked (#1117)\n* Add support for static fields in contracts (#1118)\n* Maintenance\n  - Fix comment positions (#1098)\n  - [refactoring] Wrap calls to Types.subst and Types.memberType (#1115)\n  - Build latest Caffeine on CI (#1111)\n\nVersion 0.12.2\n---------------\n* Fix reading of JSpecify @nullable annotations from varargs parameter in bytecode (#1089)\n* Fix JarInfer handling of generic types (#1078)\n* Fix another JSpecify mode crash involving raw types (#1086)\n* Fix bugs in handling of valueOf calls for map keys (#1085)\n* Suggest correct fix when array component of non-nullable array is made null. (#1087)\n* Substitute type arguments when checking type parameter nullability at call site (#1070)\n* Fix JarInfer parameter indexes for instance methods (#1071)\n* JSpecify mode: initial support for generic methods (with explicit type arguments at calls) (#1053)\n* Maintenance\n  - Update to latest Error Prone and Error Prone Gradle plugin (#1064)\n  - Refactor serialization adapter retrieval by version (#1066)\n  - Remove fixes.tsv serialization from NullAway serialization service (#1063)\n  - Enable javac -parameters flag (#1069)\n  - Update to Gradle 8.11 (#1073)\n  - Add test for issue 1035 (#1074)\n  - remove use of deprecated Gradle API (#1076)\n  - Update to Error Prone 2.36.0 (#1077)\n\nVersion 0.12.1\n---------------\n* Add library model for Apache Commons CollectionUtils.isNotEmpty (#932) (#1062)\n* Handle records in targetTypeMatches (#1061)\n\nVersion 0.12.0\n---------------\nIMPORTANT:\n* We now by default check/enforce that pure type-use annotations from JSpecify are written in the \"right place\" on array types, varargs types, and nested types. More\ndetails can be found in the [wiki](https://github.com/uber/NullAway/wiki/JSpecify-Support).\nWe also expose `-XepOpt:NullAway:LegacyAnnotationLocations` flag to disable this new\nbehavior for now to ease the migration. We expect to remove this flag in a future version\nof NullAway.\n* We now support writing @EnsuresNonNullIf on methods to capture cases where a method conditionally ensures that a field is @NonNull. Thanks @mauricioaniche for the contributions!\n\n(The changelog below contains all changes from version 0.11.2, since version 0.11.3\ncontains only one cherry-picked PR from master).\n\n* Enforce Strict Interpretation Of Type Use Annotation Locations Outside of JSpecify mode (#1010)\n* Update handling of annotations on varargs argument (#1025)\n* Create basic unit tests for library model generation (#1031)\n* Partial handling for restrictive annotations on varargs in unannotated code (#1029)\n* Add missing source files in android-jarinfer-models-sdk modules (#1033)\n* External Library Models: Adding support for @nullable Method parameters (#1006)\n* JDK 23 support (#1034)\n* Support @EnsuresNonNullIf (#1044)\n* Update some Android astubx models (#1052)\n* Remove unused or unneeded JarInfer flags (#1050)\n* Enforce correct type-use annotation locations for nested types (#1045)\n* Update Android SDK 31 astubx models (#1054)\n* Fix bugs in reading varargs annotations from bytecodes (#1055)\n* General maintenance:\n  - Update to Gradle 8.10 (#1023)\n  - Update to Gradle 8.10.1 (#1036)\n  - Update to Error Prone 2.32.0 (#1037)\n  - Typo fix in README.md (#1041)\n  - Fix Gradle config instructions (#1039)\n  - Update to v4 of setup-gradle GitHub action (#1043)\n  - Add extra JVM args needed for JMH on recent JDK versions (#1049)\n  - Use HTTP instead of SSH for cloning repo for JMH Benchmarks (#1056)\n  - Various version updates (#1051)\n  - Update to Checker Framework 3.48.0 (#1030)\n\nVersion 0.11.3\n---------------\nIMPORTANT: We have cherry-picked one PR in master since 0.11.2 for this release, it\ndoes not contain all changes in master!\n\n* Add missing source files in android-jarinfer-models-sdk modules (#1033)\n\nVersion 0.11.2\n---------------\n* JSpecify: add another bailout check for raw types (#1021)\n* JSpecify: handle intersection type in one place (#1015)\n* JSpecify: fix for crash with wildcard types (#1020)\n* Maintenance:\n  - Update to Error Prone 2.30.0 (#1017)\n  - Add test for #1011 (#1018)\n\nVersion 0.11.1\n---------------\n* Fix issue 1008 (#1009)\n* JSpecify: read upper bound annotations from bytecode and add tests (#1004)\n* Fix crash with suggested suppressions in JSpecify mode (#1001)\n* Update to JSpecify 1.0 and use JSpecify annotations in NullAway code (#1000)\n* Expose @EnsuresNonNull and @RequiresNonNull in annotations package (#999)\n* Don't report initializer warnings on @NullUnmarked constructors / methods (#997)\n* Strip annotations from MethodSymbol strings (#993)\n* JSpecify: fix crashes where declared parameter / return types were raw (#989)\n* JSpecify: Handle @nullable elements for enhanced-for-loops on arrays (#986)\n* Features/944 tidy stream nullability propagator (#985)\n* Tests for loops over arrays (#982)\n* Bug fixes for array subtyping at returns / parameter passing (#980)\n* JSpecify: Handle @nonnull elements in @nullable content arrays (#963)\n* Don't report @nullable type argument errors for unmarked classes (#958)\n* External Library Models: Adding support for Nullable upper bounds of Generic Type parameters (#949)\n* Refactoring / code cleanups:\n  - Test on JDK 22 (#992)\n  - Add test case for @nullable Void with override in JSpecify mode (#990)\n  - Enable UnnecessaryFinal and PreferredInterfaceType EP checks (#991)\n  - Add missing @test annotation (#988)\n  - Fix typo in variable name (#987)\n  - Remove AbstractConfig class (#974)\n  - Fix Javadoc for MethodRef (#973)\n  - Refactored data clumps with the help of LLMs (research project) (#960)\n* Build / CI tooling maintenance:\n  - Various cleanups enabled by bumping minimum Java and Error Prone versions (#962)\n  - Disable publishing of snapshot builds from CI (#967)\n  - Update Gradle action usage in CI workflow (#969)\n  - Update Gradle config to always compile Java code using JDK 17 (#971)\n  - Update JavaParser to 3.26.0 (#970)\n  - Reenable JMH benchmarking in a safer manner (#975)\n  - Updated JMH Benchmark Comment Action (#976)\n  - Update to Gradle 8.8 (#981)\n  - Update to Error Prone 2.28.0 (#984)\n  - Update to Gradle 8.9 (#998)\n  - Update to WALA 1.6.6 (#1003)\n\nVersion 0.11.0\n---------------\nIMPORTANT: Support for JDK 8 is dropped and NullAway now requires 2.14.0 or higher.\n\n* Delete OptionalEmptinessHandler method that is no longer needed (#954)\n* Refactor PreservedAnnotationTreeVisitor (#955)\n* Update to Error Prone 2.27.1 (#957)\n* JSpecify subtyping checks for arrays (#956)\n* Bump to Checker Framework 3.43.0 (#959)\n* Drop Java 8 support (#961)\n\nVersion 0.10.26\n---------------\n* External Library Models Integration (#922)\n* Rename test classes (#951)\n* Propagate more nullability info to lambdas known to be invoked synchronously (#952)\n\nVersion 0.10.25\n---------------\n* JSpecify: Handle @nullable assignments to @nonnull arrays (#929)\n* Handle JDK 21 case operands in type refinement (#928)\n* Track access paths of the form Foo.this.bar (#937)\n* Add test for boolean contract with extra message argument (#945)\n* Collectors.toMap handling for streams (#938)\n* Handle methods that fail unconditionally in ContractHandler (#946)\n* Build / CI tooling upgrades:\n  - Update various dependencies (#939)\n\nVersion 0.10.24\n---------------\n* Add library model for Files.isDirectory (#913)\n* JSpecify test case for generic methods (#918)\n* Check dereference of qualifier expression in method reference (#920)\n* JSpecify: skip checking when type is primitive (#924)\n* Fix another JSpecify raw type issue (#925)\n* Fix handling of references to methods of array types and type variables (#926)\n* Build / CI / Documentation upgrades/fixes:\n  - Fix lombok config example more correctly on README (#911)\n  - Update to Gradle 8.6 (#914)\n  - Update to Error Prone 2.25.0 (#916)\n  - Add codecov token (#921)\n\nVersion 0.10.23\n---------------\n* Update for missing a couple possibly unsafe xml parser (#902)\n* Add foojay-resolver-convention plugin (#905)\n* JSpecify: Reason about nullability of reads from arrays (#875)\n* Fix handling of static imports from subclasses (#904)\n* Adding support for nullable type upper bounds considering Library models (#903)\n* Support for extra Futures classes (#909)\n* Build / CI tooling upgrades:\n  - Bump various CI workflow versions (#906)\n\nVersion 0.10.22\n---------------\nIMPORTANT: The support for JDK 8 is deprecated in this release and will be removed in\n    an upcoming release.\n\n* Fix bug with implicit equals() methods in interfaces (#898)\n* Fix crash with raw types in overrides in JSpecify mode (#899)\n* Docs fix: Update instructions for Android and our sample app (#900)\n\nVersion 0.10.21\n---------------\nIMPORTANT: This release fixes a crash when running against <2.24.0 release of\n    Error Prone (see #894) introduced in NullAway v0.10.20 and another crash related to\n    Checker Framework (see #895) introduced in NullAway v0.10.19.\n\n* Fix backwards-incompatible calls to ASTHelpers.hasDirectAnnotationWithSimpleName (#894)\n* Downgrade to Checker Framework 3.40.0 (#895)\n\nVersion 0.10.20\n---------------\n* Fix JSpecify support on JDK 21 (#869)\n* Build / CI tooling upgrades for NullAway itself:\n  - Update to WALA 1.6.3 (#887)\n  - Update to Error Prone 2.24.1 (#888)\n\nVersion 0.10.19\n---------------\n* Update to Checker Framework 3.41.0 (#873)\n* Extend library models to mark fields as nullable (#878)\n  - Main use case is NullAwayAnnotator\n* Fix jarinfer cli output determinism (#884)\n* Add support for AssertJ as() and describedAs() in AssertionHandler (#885)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify: In generics code, get rid of checks for ClassType (#863)\n* Update some dependencies (#883)\n\nVersion 0.10.18\n---------------\n* Fix assertion check for structure of enhanced-for loop over a Map keySet (#868)\n\nVersion 0.10.17\n---------------\n* Fix bug with computing direct type use annotations on parameters (#864)\n* Model Apache Flink's RichFunction.open as an @Initializer method (#862)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify: adding com.google.common to annotated packages in build.gradle (#857)\n  - JSpecify: handling the return of a diamond operator anonymous object method caller (#858)\n  - Create com.uber.nullaway.generics package (#855)\n  - Clarifications and small fixes for checking JSpecify @Nullable annotation (#859)\n  - Apply minor cleanups suggested by IntelliJ in generics code (#860)\n\nVersion 0.10.16\n---------------\nNOTE: Maven Central signing key rotated for this release following a revocation.\n\n* Minor cleanup in AccessPathElement (#851)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify: handle return types of method references in Java Generics (#847)\n  - JSpecify: handle Nullability for lambda expression parameters for Generic Types (#852)\n  - JSpecify: Modify Array Type Use Annotation Syntax (#850)\n  - JSpecify: handle Nullability for return types of lambda expressions for Generic Types (#854)\n* Build / CI tooling for NullAway itself:\n  - Update to Gradle 8.4 and Error Prone 2.23.0 (#849)\n\nVersion 0.10.15\n---------------\n* [IMPORTANT] Update minimum Error Prone version and Guava version (#843)\n  NullAway now requires Error Prone 2.10.0 or later\n* Add Spring mock/testing annotations to excluded field annotation list (#757)\n* Update to Checker Framework 3.39.0 (#839) [Support for JDK 21 constructs]\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - Properly check generic method overriding in explicitly-typed anonymous classes (#808)\n  - JSpecify: handle incorrect method parameter nullability for method reference (#845)\n  - JSpecify: initial handling of generic enclosing types for inner classes (#837)\n* Build / CI tooling for NullAway itself:\n  - Update Gradle and a couple of plugin versions (#832)\n  - Run recent JDK tests on JDK 21 (#834)\n  - Fix which JDKs are installed on CI (#835)\n  - Update to Error Prone 2.22.0 (#833)\n  - Ignore code coverage for method executed non-deterministically in tests (#838 and #844)\n  - Build NullAway with JSpecify mode enabled (#841)\n\nVersion 0.10.14\n---------------\nIMPORTANT: This version introduces EXPERIMENTAL JDK21 support.\n* Bump Checker Framework dependency to 3.38.0 (#819)\n  - Note: Not just an internal implementation change. Needed to support JDK 21!\n* Treat parameter of generated Record.equals() methods as @Nullable (#825)\n* Build / CI tooling for NullAway itself:\n  - Fixes Codecov Report Expired error (#821)\n  - Updated Readme.md with Codecov link (#823)\n  - Remove ASM-related hack in build config (#824)\n  - Run tests on JDK 21 (#826)\n\nVersion 0.10.13\n---------------\n* Allow library models to define custom stream classes (#807)\n* Avoid suggesting castToNonNull fixes in certain cases (#799)\n* Ensure castToNonNull insertion/removal suggested fixes do not remove comments (#815)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - Generics checks for method overriding (#755)\n  - Make GenericsChecks methods static (#805)\n  - Add visitors for handling different types in generic type invariance check (#806)\n* Build / CI tooling for NullAway itself:\n  - Bump versions for some dependencies (#800)\n  - Update to WALA 1.6.2 (#798)\n  - Update to Error Prone 2.21.1 (#797)\n  - Enable contract checking when building NullAway (#802)\n  - Bump Error Prone Gradle Plugin version (#804)\n  - Modify JMH Benchmark Workflow For Shellcheck (#813)\n  - Bump gradle maven publish plugin from 0.21.0 to 0.25.3 (#810)\n  - Use Spotless to enforce consistent formatting for Gradle build scripts (#809)\n  - Remove unnecessary compile dependence for jar-infer-cli (#816)\n  - Added Codecov to CI Pipeline (#820)\n\nVersion 0.10.12\n---------------\nNote: This is the first release built with Java 11. In particular, running\n    JarInfer now requires a JDK 11 JVM. NullAway is still capable of analyzing JDK 8\n    source/target projects, and should be compatible with the Error Prone JDK 9 javac\n    just as the release before, but a JDK 11 javac is recommended.\n* Update to WALA 1.6.1 and remove ability to build on JDK 8 (#777)\n* Fix compatibility issue when building on JDK 17 but running on JDK 8 (#779)\n* Fix JDK compatibility issue in LombokHandler (#795)\n* Improve auto-fixing of unnecessary castToNonNull calls (#796)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify: avoid crashes when encountering raw types (#792)\n  - Fix off-by-one error in JSpecify checking of parameter passing (#793)\n* Build / CI tooling for NullAway itself:\n  - Fix Publish Snapshot CI job (#774)\n  - Add step to create release on GitHub (#775)\n  - Build the Android sample app on JDK 17 (#776)\n  - Update to Error Prone 2.20.0 (#772)\n  - Add tasks to run JDK 8 tests on JDK 11+ (#778)\n  - Switch to Spotless for formatting Java code (#780)\n  - Added GCP JMH Benchmark Workflow (#770)\n  - Set concurrency for JMH benchmarking workflow (#784)\n  - Disable daemon when running benchmarks (#786)\n  - Update to Gradle 8.2.1 (#781)\n\nVersion 0.10.11\n---------------\n* NULL_LITERAL expressions may always be null (#749)\n* Fix error in Lombok generated code for @Nullable @Builder.Default (#765)\n* Support for specific libraries/APIs:\n  - Added support for Apache Validate (#769)\n  - Introduce FluentFutureHandler as a workaround for Guava FluentFuture (#771)\n* Internal code refactorings:\n  - [Refactor] Pass resolved Symbols into Handler methods (#729)\n  - Prepare for Nullable ASTHelpers.getSymbol (#733)\n  - Refactor: streamline mayBeNullExpr flow (#753)\n  - Refactor LibraryModelsHandler.onOverrideMayBeNullExpr (#754)\n  - Refactor simple onOverrideMayBeNullExpr handlers (#747)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify generics checks for conditional expressions (#739)\n  - Generics checks for parameter passing (#746)\n  - Clearer printing of types in errors related to generics (#758)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Update path serialization for class files (#752)\n* Build / CI tooling for NullAway itself:\n  - Update to Gradle 8.0.2 (#743)\n  - Fix CI on Windows (#759)\n  - Upgrade to Error Prone 2.19.1 (#763)\n  - Upgrade maven publish plugin to 0.21.0 (#773)\n\nVersion 0.10.10\n---------------\n* Add command line option to skip specific library models. (#741)\n* Support for specific libraries/APIs:\n  - Model Map.getOrDefault (#724)\n  - Model Class.cast (#731)\n  - Model Class.isInstance (#732)\n* Internal code refactorings:\n  - Refactor code to use Map.getOrDefault where possible (#727)\n  - Break loops when result can no longer change (#728)\n* Support for JSpecify's 0.3.0 annotation [experimental]\n  - JSpecify: initial checks for generic type compatibility at assignments (#715)\n  - Add JSpecify checking for return statements (#734)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Refactoring in symbol serialization (#736)\n  - Refactoring tabSeparatedToString logic to prepare for serialization version 3 (#738)\n  - Update method serialization to exclude type use annotations and type arguments (#735)\n* Docs fix: -XepExcludedPaths was added in 2.1.3, not 2.13 (#744)\n\nVersion 0.10.9\n--------------\n* Add support for external init annotations in constructors (#725)\n* Ignore incompatibly annotated var args from Kotlin code. (#721)\n* Support for specific libraries/APIs:\n  - Add Throwable.getCause and getLocalizedMessage() library models (#717)\n  - Support more test assertions in OptionalEmptinessHandler (#718)\n  - Support isInstanceOf(...) as implying non-null in assertion libraries (#726)\n* [Refactor] Avoid redundant Map lookups (#722)\n* Build / CI tooling for NullAway itself:\n  - Update to Error Prone 2.18.0 (#707)\n\nVersion 0.10.8\n--------------\n* Don't do checks for type casts and parameterized trees in unannotated code (#712)\n* Add an initial `nullaway:nullaway-annotations` artifact. (#709)\n  - Contains only an implementation of `@Initializer` for now.\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Update region selection for initialization errors. (#713)\n  - Update path serialization for reported errors and fixes. (#714)\n* Build / CI tooling for NullAway itself:\n  - Turn up various Error Prone checks (#710)\n\nVersion 0.10.7\n--------------\n(Bug fix release)\n* Resolve regression for type annotations directly on inner types. (#706)\n\nVersion 0.10.6\n--------------\n* Handle BITWISE_COMPLEMENT operator (#696)\n* Add support for AssertJ (#698)\n* Fix logic for @Nullable annotation on type parameter (#702)\n* Preserve nullness checks in final fields when propagating nullness into inner contexts (#703)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Add source offset and path to reported errors in error serialization. (#704)\n* Build / CI tooling for NullAway itself:\n  - [Jspecify] Update test dep to final JSpecify 0.3.0 release (#700)\n     = Intermediate PRs: 0.3.0-alpha-3 (#692), 0.3-alpha2 (#691)\n  - Update to Gradle 7.6 (#690)\n\n\nVersion 0.10.5\n--------------\n* Report more unboxing errors in a single compilation (#686)\n* Remove AccessPath.getAccessPathForNodeNoMapGet (#687)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Fix Serialization: Split field initialization region into smaller regions (#658)\n  - Add serialization format version to fix serialization output (#688)\n  - Fix serialization field region computation bug fix (#689)\n* EXPERIMENTAL support for JSpecify's 0.3.0 annotations\n  - [Jspecify] Update tests to JSpecify 0.3.0-alpha-1 (#673)\n  - [Jspecify] Add checks for proper JSpecify generic type instantiations (#680)\n  - (Note: Annotation support for generics is not complete/useful just yet)\n\nVersion 0.10.4\n--------------\n(Bug fix release)\n* Fix LibraryModels recording of dataflow nullness for Map APs (#685)\n* Proper checking of unboxing in binary trees (#684)\n* Build / CI tooling for NullAway itself:\n  - Bump dependency versions in GitHub Actions config (#683)\n\nVersion 0.10.3\n--------------\n* Report an error when casting @Nullable expression to primitive type (#663)\n* Fix an NPE in the optional emptiness handler (#678)\n* Add support for boolean constraints (about nullness) in Contract annotations (#669)\n* Support for specific libraries/APIs:\n  - PreconditionsHandler reflects Guava Preconditions exception types (#668)\n  - Handle Guava Verify functions (#682)\n* Dependency Updates:\n  - checkerframework 3.26.0 (#671)\n* Build / CI tooling for NullAway itself:\n  - Build and test against Error Prone 2.15.0 (#665)\n  - Bump Error Prone and EP plugin to 2.16 (#675)\n\nVersion 0.10.2\n--------------\n* Make AbstractConfig collection fields explicity Immutable (#601)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Fix crash in fixserialization when ClassSymbol.sourcefile is null (#656)\n\nVersion 0.10.1\n--------------\nThis is a bug-fixing release for a crash introduced in 0.10.1 on type.class\n(for primitive type = boolean/int/void/etc.).\n* Fix crash when querying null-markedness of primitive.class expressions (#654)\n* Fix for querying for generated code w/ primitive.class expressions. (#655)\n\nVersion 0.10.0\n--------------\n* Switch parameter overriding handler to use Nullness[] (#648) [performance opt!]\n* EXPERIMENTAL support for JSpecify's 0.3.0 @NullMarked and @NullUnmarked semantics\n  - [JSpecify] Support @NullMarked on methods. (#644)\n  - [JSpecify] Support @NullUnmarked. (#651)\n  - Allow AcknowledgeRestrictiveAnnotations to work on fields (#652)\n* Dependency Updates:\n  - Update to WALA 1.5.8 (#650)\n* Build / CI tooling for NullAway itself:\n  - Update to Gradle 7.5.1 (#647)\n  - Add Gradle versions plugin and update some \"safe\" dependencies (#649)\n\nVersion 0.9.10\n--------------\n* Improved support for library models on annotated code:\n  - Make library models override annotations by default. (#636)\n  - Generalize handler APIs for argument nullability on (un-)annotated code (#639)\n    - [Follow-up] Optimizations for parameter nullness handler / overriding (#646)\n  - Generalize handler APIs for return nullability on (un-)annotated code (#641)\n* Support for specific libraries/APIs:\n  - Add library model for Guava's Closer.register (#632)\n  - Support for Map.computeIfAbsent(...) (#640)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Augment error serializarion info (#643)\n* Dependency Updates:\n  - Update to Checker Framework 3.24.0 (#631)\n* Fix javadoc and CONTRIBUTING.md typos (#642)\n\nVersion 0.9.9\n-------------\n* Fix handling of empty contract arguments (#616)\n* Fix inconsistent treament of generated code in RestrictiveAnnotationHandler (#618)\n* Allow Library Models to override annotations. (#624)\n* Allow tracking field accesses outside the this instance and static fields (#625)\n* Add Guava 31+ support by treating @ParametricNullness as @nullable (#629)\n* Refactoring:\n  - Clean up: Remove method parameter protection analysis (#622)\n  - Clean up: Remove nullable annotation configuration in fix serialization. (#621)\n* Build / CI tooling for NullAway itself:\n  - Add a microbenchmark for type inference / dataflow (#617)\n\nVersion 0.9.8\n-------------\n* Fix false positive involving type parameter @Nullable annotations (#609)\n* Add config option to register custom @Generated annotations. (#600)\n* Treat Void formal arguments as @Nullable (#613)\n* Generalize support for castToNonNull methods using library models (#614)\n* Support for specific libraries/APIs:\n  - Support for Preconditions.checkArgument (#608)\n  - Model for com.google.api.client.util.Strings.isNullOrEmpty (#605)\n* Refactoring:\n  - Cleanups to AccessPath representation and implementation (#603)\n  - Clean-up: Remove unused fix suggestion code. (#615)\n* Dependency Updates:\n  - Update to Checker Framework 3.22.2 (#610)\n* Build / CI tooling for NullAway itself:\n  - Add NullAway 0.9.7 as a JMH benchmark (#602)\n  - Update to Error Prone 2.14.0 (#606)\n\nVersion 0.9.7\n-------------\n* Allow zero-argument static method calls to be the root of an access path (#596)\n* Support for specific libraries/APIs\n  - Add support for Optional.isEmpty() (#590)\n  - Model System.console() as returning @nullable (#591)\n* JDK 17+ support improvements\n  - Add a test of binding patterns (#583)\n* JSpecify support:\n  - Move JSpecify tests to correct package (#587)\n* NullAwayInfer/Annotator data serialization support [experimental]\n  - Fixes line breaks and tabs in serializing errors. (#584)\n  - Using flatNames for LocalType/anon. classes in fix serialization (#592)\n  - Fixes to computing class and method info for error serialization (#599)\n* Dependency updates\n  - [JarInfer] Update Apache Commons IO dependency. (#582)\n  - Update to Checker Framework 3.21.3 (#564)\n* Build / CI tooling for NullAway itself:\n  - NullAway now builds with NullAway (#560)\n  - Switch to using gradle-build-action (#581)\n  - Compile and test against Error Prone 2.12.0 (#585)\n  - Enabled a few more EP checks on our code (#586)\n    (Note: the `Void` related portion of this changes was reverted)\n  - Update to Gradle 7.4.2 (#589)\n  - Update to Error Prone 2.13.1 and latest Lombok (#588)\n\nVersion 0.9.6\n-------------\n* Initial support for JSpecify's @NullMarked annotation (#493)\n  - Fix bug in handling of TreatGeneratedAsUnannotated (#580)\n    (Note: this bug is not in any released NullAway version, but was temporarily\n     introduced to the main/master branch by #493)\n* Improved tracking of map nullness\n  - Improve nullness tracking of map calls in the presence of type casts (#537)\n  - Reason about iterating over a map's key set using an enhanced for loop (#554)\n  - Reason about key set iteration for subtypes of Map (#559)\n  - Add support for Map.putIfAbsent. (#568)\n* Add support for data serialization for Nullaway data for UCR's NullAwayAnnotator\n  - Serialization of Type Change Suggestions for Type Violations (#517)\n  - Measurement of Method protection against nullability of arguments (#575)\n  - Enhanced Serialization Test Infrastructure (#579)\n  - Field initialization serialization (#576)\n* Build / CI tooling for NullAway itself:\n  - Enable parallel builds (#549) (#555)\n  - Add dependence from coveralls task to codeCoverageReport (#552)\n  - Switch to temurin on CI (#553)\n  - Separating NullAwayTests into smaller files (#550)\n  - Require braces for all conditionals and loops (#556)\n  - Enable build cache (#562)\n  - Fix JarInfer integration test on Java 11 (#529)\n  - Get Android sample apps building on JDK 11 (#531)\n  - Limit metaspace size (#563)\n  - Update CI jobs (#565)\n  - Set epApiVersion for jacoco coverage reporting (#566)\n  - Compile and test against Error Prone 2.11.0 (#567)\n  - Fix EP version for jacoco coverage step (#571)\n  - Update to latest Google Java Format (#572)\n\nVersion 0.9.5\n-------------\n* JDK17 support improvements:\n  - Fix crash with switch expression as a lambda body (#543, follow up: #545)\n  - Better fix for crash on member selects inside module-info.java (#544)\n* Bump Guava dependency to 24.1.1 (#536)\n* Build / CI tooling for NullAway itself:\n  - Bump AutoValue and AutoService versions (#538)\n  - Add task to run NullAway on itself (#542)\n  - Add test case for unsound map reassignment handling (#541)\n\nVersion 0.9.4\n-------------\n* Fix crash with fully-qualified names in module-info.java import (#534)\n\nVersion 0.9.3\n-------------\nIMPORTANT: This version introduces EXPERIMENTAL JDK17 support.\n  There is a known crash on lambdas with switch expressions as body\n  (see #524). Best current workaround is to\n  `@SuppressWarnings(\"NullAway\")` on the enclosing method\n* Improve reporting of multiple parameter errors on a single method call (#503)\n* Support compile-time constant field args in method Access Paths (#504)\n* Add basic library support for grpc Metadata through GrpcHandler (#505)\n* Fix soundness bug with dereference of ternary expressions (#516)\n* Add support for switch expressions (#520) [JDK 17]\n* Allow setting custom Nullable Annotation via Error Prone CLI flags (#522)\n* Add JarInfer models for Android SDK 31 (Android 12) (#532)\n* Build / CI tooling for NullAway itself:\n  - Prevent JMH tests from running on pre-v11 JDKs (#492)\n  - Bump to Error Prone 2.8.1 (#494), 2.9.0 (#497), and 2.10.0 (#507)\n  - Docs: Fix a broken link in README.md (#495)\n  - Update to Gradle 7.2 (#496), 7.3.1 (#509), and 7.3.3 (#530)\n  - Add Autodispose benchmark (#498)\n  - Bump jmh plugin to 0.6.6 (#500)\n  - Bump to Checker dataflow 3.20.0 (#510)\n  - CI tests for JDK 17 (#512)\n  - Some fixes to GitHub Actions config (#514)\n  - Make jar-infer-lib tests pass on JDK 11 (#523)\n  - Extra tests for all DummyOptionsConfig's methods (#525)\n  - Pull jmh Gradle plugin version to top level (#526)\n  - Add tests for JDK 16+ records (#527)\n  - Support for Coveralls on multiple modules (#521)\n  - Changes to avoid re-running Gradle tasks unnecessarily (#528)\n\nVersion 0.9.2\n-------------\n* Allow specifying custom names for Contract annotations (#476)\n* Use shaded Checker Framework dataflow artifact made for NullAway (#485)\n* Bump Checker dataflow to 3.16.0 (#490)\n* Library Models:\n  - Add library model for java.nio.file.Path.getParent() (#464)\n  - Default models support for Spring's Autowired (#477)\n  - Models for `Objects.requireNonNull()` with `Supplier` (#483)\n* Build / CI tooling for NullAway itself:\n  - Small Gradle build cleanup (#469)\n  - Allow Error Prone API version to be configured via a property (#470)\n  - Also test NullAway on Error Prone 2.6.0 (#471)\n  - Check our code with Error Prone 2.6.0 (#472) [temporary, see below]\n  - Check code with Error Prone 2.7.1 (#480)\n  - Update to Gradle 7.0.2 (#481) then 7.1 (#486)\n  - Add a jmh module for benchmarking (#487, #489)\n  - Test on CI with Error Prone 2.8.0 (#491)\n\nVersion 0.9.1\n--------------\n* Add baseline support for (Java 15) records (#377)\n* Multiple build tooling fixed:\n  - Update Gradle to 6.8.3 (#451)\n  - Gradle: switch to java-library plugin where possible (#455)\n  - Switch from mvn-push script to gradle-maven-publish-plugin (#457)\n  - Fix publication of fat jar for jar-infer-cli. (#461)\n* Add JarInfer models for Android 11 (SDK 30) (#460)\n\nVersion 0.9.0\n--------------\n* IMPORTANT: Error Prone minimum version moved to 2.4.0 (#447)\n  - This allows compatibility with Error Prone 2.5.1 by\n    moving to updated APIs.\n  - Remove Checker Framework shadow config from nullaway module (#449)\n* `@Contract` annotations are now checked (#312) (#428) (#450)\n* Add support for @RequiresNonnull/@EnsuresNonnull annotations (#423)\n* [Fix] Handle WideningConversionNode in Map key specifiers (#415)\n* [Fix] Try to handle lombok.Builder without crashing. (#414)\n* [Fix] Ignore library models return nullability on first-party code (#446)\n* Update to Checker Dataflow dependency to 3.6.0 (#416)\n* Library Models:\n  - Add library model for TextView.getLayout() (#418)\n  - Add library model for Service.onStartCommand (#419)\n  - Models for common Spring/Spark/Apache utility classes (#436)\n  - Add support for jakarta.inject-api (#439)\n* Build / CI tooling for NullAway itself:\n  - Update to Gradle 6.6.1 (#420)\n  - Switch CI to GitHub Actions (#440) (#442) (#450)\n\nVersion 0.8.0\n--------------\n* Improve suppression of subcheckers, using full AST path (#392)\n* Support null implies false library models (#394)\n* Make `@ChecksForNull` an alias for `@Nullable` (#397)\n* Fix: android-jar.py's exit code. (#399)\n* Upgrade Error Prone dependencies to 2.4.0. (#400)\n  - And fix detected issues (#403, #404)\n* Allow library models of the form null param -> null return (#407)\n* Make excluded class annotations work on nested classes (#412)\n* Improved Map handling: Strings and integers. (#413)\n* Also `-SNAPSHOT` builds are being published correctly again (#409)\n* New android-jarinfer-models-sdk29 artifact for Android 10\n\nVersion 0.7.10\n--------------\n* Add Java 8 streams nullness-propagation support (#371)\n* Give line numbers for uninitialized fields when reporting error on an initializer (#380)\n* Include outer$inner class name when reporting field init errors (#375)\n* Update to Gradle 6.1.1 (#381)\n* Add @MonotonicNonNull as lazy initialization annotation. (#383)\n* Add default library model for CompilationUnitTree.getPackageName() (#384)\n* Improve matching of native Map methods (#390)\n  - Fixes an IndexOutOfBoundsException checker crash\n\nVersion 0.7.9\n-------------\n* Multiple dependency upgrades\n  - Gradle to 5.6.2. (#362)\n  - WALA to 1.5.4 (#337)\n  - Checker Dataflow to 3.0.0 (#369)\n* Added OPTIONAL_CONTENT synthetic field to track Optional  emptiness (#364)\n  - With this, `-XepOpt:NullAway:CheckOptionalEmptiness` should be\n    ready for use.\n* Handle Nullchk operator (#368)\n\nVersion 0.7.8\n-------------\n* Added NullAway.Optional suppression (#359)\n* [JarInfer] Ignore non-public classes when inferring annotations. (#360)\n\nVersion 0.7.7\n-------------\n* [Optionals] Support Optional isPresent call in assertThat (#349)\n* Preconditions checkNotNull support, added missing cases. (#355)\n* [JarInfer] Use Android Nullable/NonNull annotations for AARs (not javax) (#357)\n\nVersion 0.7.6\n-------------\n* Library models for guava's AsyncFunction (#328)\n* Annotate StringUtils.isBlank() of org.apache.commons (lang & lang3) (#330)\n* Adding support for Aar-to-aar transformation (#334)\n* Add support for @RecentlyNullable and @RecentlyNonNull (#335)\n* Update to Gradle 5.5.1 (#336)\n* Don't compute frames on bytecode writting in JarInfer (#338)\n* Use exact jar output path when possible in JarInfer (#339)\n* Avoid adding redundant annotations during bytecode rewriting in JarInfer (#341)\n* Handle cases when there are no annotations on methods or parameters in JarInfer (#342)\n* Fix #333 Nullaway init suppression issue (#343)\n* Add option to JarInfer to deal with signed jars (#345)\n* Fix #344 onActivityCreated known initializer (#346)\n* Skip read-before-init analysis for assert statements (#348)\n\nVersion 0.7.5\n------------\n* Allow models to override @nullable on third-party functional interfaces (#326)\n  - Defines Guava's Function and Predicate as @NonNull->@NonNull\n    by default.\n\nVersion 0.7.4\n-------------\n* Add support for Jar to Jar transformation to JarInfer (#316)\n* Refactor the driver and annotation summary type in JarInfer (#317)\n* Minor refactor and cleanup in JarInfer-lib (#319)\n* Different approach for param analysis (#320)\n* Fix @NullableDecl support (#324)\n* Treat methods of final classes as final for initialization. (#325)\n\nVersion 0.7.3\n-------------\n* Optional support for assertThat(...).isNotNull() statements (#304)\n* Fix NPE in AccessPathElement.toString() (#306)\n* Add tests for optional emptiness support with Rx (#308)\n* Support for assertThat in JUnit and Hamcrest. (#310)\n* Add support for CoreMatchers and core.IsNull in hamcrest. (#311)\n* Make class-level caches for InferredJARModelsHandler instance fields. (#315)\n\nVersion 0.7.2\n-------------\n* Install GJF hook using a gradle task, rather than a gradlew hack (#298).\n* Nullable switch expression support (#300).\n* Upgrade to Error Prone 2.3.3 (#295).\nUpdate Gradle, Error Prone plugin, and Android Gradle Plugin (#294).\nAdd support for UNSIGNED_RIGHT_SHIFT (#303).\n\nVersion 0.7.1\n--------------\n* Remove warning about @nullable var args (#296).\n\nVersion 0.7.0\n--------------\n* Added Optional emptiness handler (#278).\n  `-XepOpt:NullAway:CheckOptionalEmptiness=true` to enable (experimental) support for `Optional` emptiness.\n* Improved (partial but sound-er) varargs support (#291).\n* Refactor for ErrorMessage class use (#284).\n* Custom path to Optional class for Optional emptiness handler (#288).\n* Add support for methods taking literal constant args in Access Paths. (#285).\n\nVersion 0.6.6\n---------------\nThis only adds a minor library fix supporting Guava's Preconditions.checkNotNull with an error message\nargument (#283)\n\nVersion 0.6.5\n---------------\n* Various fixes for generating @SuppressWarnings (#271)\n* Improved error message now doesn't tell users to report NullAway config errors to Error Prone  (#273)\n* Adding support for Activity and Fragment coming from the support libraries (#275)\n* Library models fixes (#277)\n* Add Fragment.onViewCreated as a known initializer. (#279)\n\nVersion 0.6.4\n---------------\n* Initial support for JDK 11 (#263).  Core NullAway should be working, but JarInfer does not yet work.\n* Disable JarInfer handler by default (#261).  `-XepOpt:NullAway:JarInferEnabled=true` is now required to enable the JarInfer handler.\n* Add models for Apache StringUtils isEmpty methods (#264)\n* Optimize library model lookups to reduce overhead (#265)\n\nVersion 0.6.3\n-------------\n* Fix handling of enhanced for loops (#256)\n\nVersion 0.6.2\n-------------\n* Handle lambda override with AcknowledgeRestrictiveAnnotations (#255)\n* Handle interaction between AcknowledgeRestrictiveAnnotations and TreatGeneratedAsUnannotated (#254)\n\nVersion 0.6.1\n-------------\n* Enable excluded class annotations to (mostly) work on inner classes (#239)\n* Assertion of not equal to null updates the access path (#240)\n* Update Gradle examples in README (#244)\n* Change how jarinfer finds astubx model jars. (#243)\n* Update to Error Prone 2.3.2 (#242)\n* Update net.ltgt.errorprone to 0.6, and build updates ((#248)\n* Restrictive annotated method overriding (#249)\n   Note: This can require significant annotation changes if\n   `-XepOpt:NullAway:AcknowledgeRestrictiveAnnotations=true` is set.\n   Not a new minor version, since that option is false by default.\n* Fix error on checking the initTree2PrevFieldInit cache. (#252)\n* Add support for renamed android.support packages in models. (#253)\n\nVersion 0.6.0\n-------------\n* Add support for marking library parameters as explicitly @Nullable (#228)\n* De-genericize NullnessStore (#231)\n* Bump Checker Framework to 2.5.5 (#233)\n* Pass nullability info on enclosing locals into dataflow analysis for\n  lambdas and anonymous / local classes (#235)\n\nVersion 0.5.6\n-------------\n* Add coverage measurement through coveralls. (#224)\n* Fix empty comment added when AutoFixSuppressionComment is not set. (#225)\n* Make JarInfer generated jars fully deterministic by removing timestamps. (#227)\n\nVersion 0.5.5\n-------------\n* Allow for custom Error URLS (#220)\n* Fix crash with native methods invoked from initializer (#222)\n\nVersion 0.5.4\n-------------\n* Add AutoFixSuppressionComment flag. (#213)\n* [JarInfer] Write to/load from separate astubx model jars (#214)\n* Update readme and tooling versions (#217)\n* Update to Error Prone 2.3.1 and centralize Java compiler flags (#218)\n* [JarInfer] Handler for @Nullable return value annotations (#216)\n\nVersion 0.5.3\n-------------\n* JarInfer: Third-party bytecode analysis (MVP version) (#199)\n* Handle @NotNull in hasNonNullAnnotation. (#204)\n* Handler for separate Android models jar (#206)\n* fix: zip entry size error (#207)\n* Small test for restrictive annotations and generics. (#209)\n* Create android-jarinfer-models-sdk28 and fix release scripts. (#210)\n* JarInfer checks for null tested parameters #211\n\nNote: This is the first release to include jar-infer-cli, jar-infer-lib, and\nandroid-jarinfer-models-sdk28 artifacts\n\nVersion 0.5.2\n-------------\n* Fix NPE in Thrift handler on complex receiver expressions (#195)\n* Add ExcludedFieldAnnotations unit tests. (#192)\n* Various crash fixes (#196)\n* Fix @NonNull argument detection in RestrictiveAnnotationHandler. (#198)\n\nVersion 0.5.1\n-------------\n* Various fixes for AcknowledgeRestrictiveAnnotations (#194)\n\nVersion 0.5.0\n-------------\n* Breaking change: Warn when castToNonNull method is not passed @NonNull (#191)\n* Add -XepOpt:NullAway:AcknowledgeRestrictiveAnnotations config flag. (#189)\n  - WARNING: This feature is broken in this release, fixed on 0.5.1\n* Add support for LEFT_SHIFT and RIGHT_SHIFT (#188)\n* Remove a suppression from a test that doesn't need it. (#183)\n* Support Objects.isNull (#179)\n\nVersion 0.4.7\n-------------\n* Clean up some unnecessary state (#168)\n* Properly read type use annotations when code is present as a class file (#172)\n* Fix NPE inside NullAway when initializer methods use try-with-resources (#177)\n\nVersion 0.4.6\n-------------\n* Fix a couple of Thrift issues (#164)\n* Don't report initialization warnings on fields for @ExternalInit classes with\n  no initializer methods (#166)\n\nVersion 0.4.5\n-------------\n* Fix bug with handling Thrift `TBase.isSet()` calls (#161)\n\nVersion 0.4.4\n-------------\n* add UnannotatedClasses option (#160)\n\nVersion 0.4.3\n-------------\n* properly handle compound assignments (#157)\n* handle unboxing of array index expression (#158)\n\nVersion 0.4.2\n-------------\n* Upgrade Checker Framework dependency to upstream version 2.5.0 (#150)\n* Don't crash on field initialization inside an enum (#146)\n* Properly find super constructor for anonymous classes (#147)\n* Add a Handler for supporting isSetXXXX() methods in Thrift-generated code (#148)\n* Use `@SuppressWarnings` as autofix in a couple more places (#149)\n\nVersion 0.4.1\n-------------\n* Initial RxNullabilityPropagator support for method\n  references. (#141)\n\nVersion 0.4.0\n-------------\n* Support for checking uses of method references (#139, #140).  Note\n  that this may lead to new NullAway warnings being reported for code\n  that previously passed.\n* Add support for `Observable.doOnNext` to RxNullabilityPropagator\n  (#137)\n\nVersion 0.3.7\n-------------\n* Small bug fix in `@Contract` support (#136)\n\nVersion 0.3.6\n-------------\n* Support for a subset of JetBrains `@Contract` annotations (#129)\n* Built-in support for JUnit 4/5 assertNotNull, Objects.requireNonNull\n* Fix crash when using try-with-resource with an empty try block. (#135)\n\nVersion 0.3.5\n-------------\n* Support for treating `@Generated`-annotated classes as unannotated (#127)\n\nVersion 0.3.4\n-------------\n* Support for classes with external initialization (#124)\n\nVersion 0.3.3\n-------------\n* Made dependence on Guava explicit (#120)\n* Significantly improved handling of try/finally (#123)\n\nVersion 0.3.2\n-------------\n* Just fixed a Gradle configuration problem\n\nVersion 0.3.1 (never made it to Maven Central)\n-------------\n* Bug fixes (#107, #108, #110, #112)\n\nVersion 0.3.0\n-------------\n* Update library models to require full method signatures rather than\n  just method names (#90).  This is an API-breaking change; if you've\n  written your own library models, they will need to be updated.\n* Support @BeforeEach and @BeforeAll as initializer annotations, and\n  @Inject and @LazyInit as excluded field annotations. (#81)\n* Support Checker Framework's @NullableDecl annotation (#84)\n* Add models for java.util.Deque methods (#86)\n* Add model for WebView.getUrl() (#91)\n\nVersion 0.2.2\n-------------\n* minor fixes (#69, #71)\n\nVersion 0.2.1\n-------------\n* Fix bug with accesses of fields from unannotated packages (#67)\n* Add models for ArrayDeque (#68)\n\nVersion 0.2.0\n-------------\n* New feature: NullAway now does some checking that `@NonNull` fields\n  are not used before the are initialized (#58, #63).  Updating to\n  0.2.0 may cause \"read before initialized\" problems to be detected in\n  code that was NullAway-clean before.\n* Model `Throwable.getMessage()` as returning `@Nullable`, matching\n  the spec.  This may also cause new warnings in code that was\n  previously NullAway-clean.\n\nVersion 0.1.8\n-------------\n* Make NullAway's Error Prone dependence compileOnly (#50).  This could help reduce size of annotation processor paths, speeding build times.\n* Handle AND, OR, XOR expressions getting autoboxed (#55)\n* Handle @Nullable type use annotations (#56)\n\nVersion 0.1.7\n-------------\n* -XepOpt:NullAway:ExcludedClasses accepts package prefixes. (#38)\n* Handle unary minus and unary plus (#40)\n* Handle prefix increment / decrement (#43)\n* add check for unannotated packages when excluding a class (#46)\n\nVersion 0.1.6\n-------------\n\n* We now check static fields and initializer blocks (#34)\n* Fix for lambdas where the functional interface method had `void` return type (#37)\n\nVersion 0.1.5\n-------------\n* Add finer grained suppressions and auto-fixes (#31).  You can\n  suppress initialization errors specifically now with\n  `@SuppressWarnings(\"NullAway.Init\")`\n* Fix performance issue with lambdas (#29)\n* Add lambda support to the RxNullabilityPropagator handler. (#12)\n\nVersion 0.1.4\n-------------\n* Another lambda fix (#23)\n\nVersion 0.1.3\n-------------\n* Fixes for lambdas (#13, #17)\n\nVersion 0.1.2\n-------------\n\n* Downgrade Checker Framework due to crash (#7)\n* More modeling of Rx operators (#8)\n\nVersion 0.1.1\n-------------\n\n* Update Checker Framework dependence to pick up bug fix (#4)\n\n\nVersion 0.1.0\n-------------\n\n* Initial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mobile-open-source@uber.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6748046875,
          "content": "Contributing to NullAway\n=======================\n\nUber welcomes contributions of all kinds and sizes. This includes everything from simple bug reports to large features.\n\nWorkflow\n--------\n\nWe love GitHub issues!\n\nFor small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice.\n\nFor big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking.\n\nSmall pull requests for things like typos, bug fixes, etc are always welcome.\n\nDOs and DON'Ts\n--------------\n\n* DO format your code using Google Java Format.  An appropriate Git pre-commit hook is automatically installed the first time you run `./gradlew`.\n* DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.\n* DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion.\n\n* DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it.\n\nGuiding Principles\n------------------\n\n* We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them\n* Always be respectful of one another. Assume the best in others and act with empathy at all times\n* Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it's a pull request helps reduce redundancy and ensures we're all connected to the decision making process\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0419921875,
          "content": "Copyright (c) 2017 Uber Technologies, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9853515625,
          "content": "## NullAway: Fast Annotation-Based Null Checking for Java [![Build Status](https://github.com/uber/nullaway/actions/workflows/continuous-integration.yml/badge.svg)](https://github.com/uber/nullaway/actions/workflows/continuous-integration.yml) [![Coverage Status](https://codecov.io/github/uber/NullAway/coverage.svg?branch=master)](https://codecov.io/github/uber/NullAway?branch=master)\n\nNullAway is a tool to help eliminate `NullPointerException`s (NPEs) in your Java code.  To use NullAway, first add `@Nullable` annotations in your code wherever a field, method parameter, or return value may be `null`.  Given these annotations, NullAway performs a series of type-based, local checks to ensure that any pointer that gets dereferenced in your code cannot be `null`.  NullAway is similar to the type-based nullability checking in the Kotlin and Swift languages, and the [Checker Framework](https://checkerframework.org/) and [Eradicate](https://fbinfer.com/docs/checker-eradicate/) null checkers for Java.\n\nNullAway is *fast*.  It is built as a plugin to [Error Prone](http://errorprone.info/) and can run on every single build of your code.  In our measurements, the build-time overhead of running NullAway is usually less than 10%.  NullAway is also *practical*: it does not prevent all possible NPEs in your code, but it catches most of the NPEs we have observed in production while imposing a reasonable annotation burden, giving a great \"bang for your buck.\"\n\n## Installation\n\n### Overview\n\nNullAway requires that you build your code with [Error Prone](http://errorprone.info), version 2.14.0 or higher.  See the [Error Prone documentation](http://errorprone.info/docs/installation) for instructions on getting started with Error Prone and integration with your build system.  The instructions below assume you are using Gradle; see [the docs](https://github.com/uber/NullAway/wiki/Configuration#other-build-systems) for discussion of other build systems.\n\n### Gradle\n\n#### Java (non-Android)\n\nTo integrate NullAway into your non-Android Java project, add the following to your `build.gradle` file:\n\n```gradle\nplugins {\n  // we assume you are already using the Java plugin\n  id \"net.ltgt.errorprone\" version \"<plugin version>\"\n}\n\ndependencies {\n  errorprone \"com.uber.nullaway:nullaway:<NullAway version>\"\n\n  // Some source of nullability annotations; JSpecify recommended,\n  // but others supported as well.\n  api \"org.jspecify:jspecify:1.0.0\"\n\n  errorprone \"com.google.errorprone:error_prone_core:<Error Prone version>\"\n}\n\nimport net.ltgt.gradle.errorprone.CheckSeverity\n\ntasks.withType(JavaCompile) {\n  options.errorprone {\n    check(\"NullAway\", CheckSeverity.ERROR)\n    option(\"NullAway:AnnotatedPackages\", \"com.uber\")\n  }\n  // Include to disable NullAway on test code\n  if (name.toLowerCase().contains(\"test\")) {\n    options.errorprone {\n      disable(\"NullAway\")\n    }\n  }\n}\n```\n\nLet's walk through this script step by step.  The `plugins` section pulls in the [Gradle Error Prone plugin](https://github.com/tbroyer/gradle-errorprone-plugin) for Error Prone integration.\n\nIn `dependencies`, the first `errorprone` line loads NullAway, and the `api` line loads the [JSpecify](https://jspecify.dev) library which provides suitable nullability annotations, e.g., `org.jspecify.annotations.Nullable`.  NullAway allows for any `@Nullable` annotation to be used, so, e.g., `@Nullable` from the AndroidX annotations Library or JetBrains annotations is also fine. The second `errorprone` line sets the version of Error Prone is used.\n\nFinally, in the `tasks.withType(JavaCompile)` section, we pass some configuration options to NullAway.  First `check(\"NullAway\", CheckSeverity.ERROR)` sets NullAway issues to the error level (it's equivalent to the `-Xep:NullAway:ERROR` standard Error Prone argument); by default NullAway emits warnings.  Then, `option(\"NullAway:AnnotatedPackages\", \"com.uber\")` (equivalent to the `-XepOpt:NullAway:AnnotatedPackages=com.uber` standard Error Prone argument) tells NullAway that source code in packages under the `com.uber` namespace should be checked for null dereferences and proper usage of `@Nullable` annotations, and that class files in these packages should be assumed to have correct usage of `@Nullable` (see [the docs](https://github.com/uber/NullAway/wiki/Configuration) for more detail).  NullAway requires exactly one of the `AnnotatedPackages` or `OnlyNullMarked` configuration arguments to run, in order to distinguish between annotated and unannotated code.  See [the configuration docs](https://github.com/uber/NullAway/wiki/Configuration) for more details and other useful configuration options.  For even simpler configuration of NullAway options, use the [Gradle NullAway plugin](https://github.com/tbroyer/gradle-nullaway-plugin).  Finally, we show how to disable NullAway on test code, if desired.\n\nWe recommend addressing all the issues that Error Prone reports, particularly those reported as errors (rather than warnings).  But, if you'd like to try out NullAway without running other Error Prone checks, you can use `options.errorprone.disableAllChecks` (equivalent to passing `\"-XepDisableAllChecks\"` to the compiler, before the NullAway-specific arguments).\n\n#### Android\n\nVersions 3.0.0 and later of the Gradle Error Prone Plugin [no longer support Android](https://github.com/tbroyer/gradle-errorprone-plugin/releases/tag/v3.0.0).  So if you're using a recent version of this plugin, you'll need to add some further configuration to run Error Prone and NullAway.  Our [sample app `build.gradle` file](https://github.com/uber/NullAway/blob/master/sample-app/build.gradle) shows one way to do this, but your Android project may require tweaks.  Alternately, 2.x versions of the Gradle Error Prone Plugin still support Android and may still work with your project.\n\nBeyond that, compared to the Java configuration, the JSpecify dependency can be removed; you can use the `androidx.annotation.Nullable` annotation from the AndroidX annotation library instead.\n\n#### Annotation Processors / Generated Code\n\nSome annotation processors like [Dagger](https://google.github.io/dagger/) and [AutoValue](https://github.com/google/auto/tree/master/value) generate code into the same package namespace as your own code.  This can cause problems when setting NullAway to the `ERROR` level as suggested above, since errors in this generated code will block the build.  Currently the best solution to this problem is to completely disable Error Prone on generated code, using the `-XepExcludedPaths` option added in Error Prone 2.1.3 (documented [here](http://errorprone.info/docs/flags), use `options.errorprone.excludedPaths=` in Gradle).  To use, figure out which directory contains the generated code, and add that directory to the excluded path regex.\n\n**Note for Dagger users**: Dagger versions older than 2.12 can have bad interactions with NullAway; see [here](https://github.com/uber/NullAway/issues/48#issuecomment-340018409).  Please update to Dagger 2.12 to fix the problem.\n\n#### Lombok\n\nUnlike other annotation processors above, Lombok modifies the in-memory AST of the code it processes, which is the source of numerous incompatibilities with Error Prone and, consequently, NullAway. \n\nWe do not particularly recommend using NullAway with Lombok. However, NullAway encodes some knowledge of common Lombok annotations and we do try for best-effort compatibility. In particular, common usages like `@lombok.Builder` and `@Data` classes should be supported.\n\nIn order for NullAway to successfully detect Lombok generated code within the in-memory Java AST, the following configuration option must be passed to Lombok as part of an applicable `lombok.config` file:\n\n```\nlombok.addLombokGeneratedAnnotation = true\n```\n\nThis causes Lombok to add `@lombok.Generated` to the methods/classes it generates. NullAway will ignore (i.e. not check) the implementation of this generated code, treating it as unannotated. \n\n## Code Example\n\nLet's see how NullAway works on a simple code example:\n```java\nstatic void log(Object x) {\n    System.out.println(x.toString());\n}\nstatic void foo() {\n    log(null);\n}\n```\nThis code is buggy: when `foo()` is called, the subsequent call to `log()` will fail with an NPE.  You can see this error in the NullAway sample app by running:\n```bash\ncp sample/src/main/java/com/uber/mylib/MyClass.java.buggy sample/src/main/java/com/uber/mylib/MyClass.java\n./gradlew build\n```\n\nBy default, NullAway assumes every method parameter, return value, and field is _non-null_, i.e., it can never be assigned a `null` value.  In the above code, the `x` parameter of `log()` is assumed to be non-null.  So, NullAway reports the following error:\n```\nwarning: [NullAway] passing @Nullable parameter 'null' where @NonNull is required\n    log(null);\n        ^\n```\nWe can fix this error by allowing `null` to be passed to `log()`, with a `@Nullable` annotation:\n```java\nstatic void log(@Nullable Object x) {\n    System.out.println(x.toString());\n}\n```\nWith this annotation, NullAway points out the possible null dereference:\n```\nwarning: [NullAway] dereferenced expression x is @Nullable\n    System.out.println(x.toString());\n                        ^\n```\nWe can fix this warning by adding a null check:\n```java\nstatic void log(@Nullable Object x) {\n    if (x != null) {\n        System.out.println(x.toString());\n    }\n}\n```\nWith this change, all the NullAway warnings are fixed.\n\nFor more details on NullAway's checks, error messages, and limitations, see [our detailed guide](https://github.com/uber/NullAway/wiki).\n\n## Support\n\nPlease feel free to [open a GitHub issue](https://github.com/uber/NullAway/issues) if you have any questions on how to use NullAway.  Or, you can [join the NullAway Discord server](https://discord.gg/QH2F779) and ask us a question there.\n\n## Contributors\n\nWe'd love for you to contribute to NullAway!  Please note that once\nyou create a pull request, you will be asked to sign our [Uber Contributor License Agreement](https://docs.google.com/a/uber.com/forms/d/1pAwS_-dA1KhPlfxzYLBqK6rsSWwRwH95OCCZrcsY5rk/viewform).\n\n## License\n\nNullAway is licensed under the MIT license.  See the LICENSE.txt file for more information.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 2.009765625,
          "content": "(For testing only) Publishing an unsigned LOCAL build\n=====================================================\nBy default, we set `RELEASE_SIGNING_ENABLED=true` in `gradle.properties`, which means\npublished builds must be signed unless they are for a `SNAPSHOT` version.  To publish\na non-`SNAPSHOT` build locally without signing (e.g., a `LOCAL` version), use the\nfollowing command:\n\n```bash\nORG_GRADLE_PROJECT_RELEASE_SIGNING_ENABLED=false ./gradlew publishToMavenLocal\n```\n\n(Recommended, but optional) Update JarInfer Android SDK Models\n==============================================================\n\n 1. Change the version in `gradle.properties` to a non-SNAPSHOT version and `./gradlew build`.\n 2. Get a copy of the AOSP `framework_intermediates` for the corresponding Android version.\n    2a. At Uber? http://t.uber.com/aosp_framework_intermediate\n    2b. Elsewhere? You can still build the corresponding AOSP version and look for\n        out/target/common/obj/JAVA_LIBRARIES/**\n 3. (first time) `cp jar-infer/scripts/android-jar.conf.template jar-infer/scripts/android-jar.conf`\n 4. Set the correct paths and versions in `android-jar.conf`\n 5. `rm jar-infer/android-jarinfer-models-sdk28/src/main/resources/jarinfer.astubx` (for SDK 28)\n 6. `python jar-infer/scripts/android-jar.py`\n 7. Continue to release instructions below\n\n\nReleasing\n=========\n\n 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.\n 2. Update the `CHANGELOG.md` for the impending release.\n 3. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n 4. `git tag -a vX.Y.Z -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n 5. `./gradlew clean publish`\n 6. Update the `gradle.properties` to the next SNAPSHOT version.\n 7. `git commit -am \"Prepare next development version.\"`\n 8. `git push && git push --tags`\n 9. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.\n 10. Go to [this page](https://github.com/uber/NullAway/releases/new) to create a new release on GitHub, using the release notes from `CHANGELOG.md`.\n"
        },
        {
          "name": "annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 5.4716796875,
          "content": "/*\n * Copyright (C) 2017. Uber Technologies\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net.ltgt.gradle.errorprone.CheckSeverity\nbuildscript {\n    repositories {\n        mavenCentral()\n        google() // For Gradle 4.0+\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.3.0'\n        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.25.3'\n    }\n}\nplugins {\n    id \"com.diffplug.spotless\" version \"6.25.0\"\n    id \"net.ltgt.errorprone\" version \"4.1.0\" apply false\n    id \"com.github.johnrengelman.shadow\" version \"8.1.1\" apply false\n    id \"me.champeau.jmh\" version \"0.7.1\" apply false\n    id \"com.github.ben-manes.versions\" version \"0.51.0\"\n    id \"com.felipefzdz.gradle.shellcheck\" version \"1.5.0\"\n}\n\nrepositories {\n    // to get the google-java-format jar and dependencies\n    mavenCentral()\n}\n\napply from: \"gradle/dependencies.gradle\"\n\nsubprojects { project ->\n    project.apply plugin: \"net.ltgt.errorprone\"\n    project.dependencies {\n        errorprone deps.build.errorProneCore\n    }\n    project.tasks.withType(JavaCompile) {\n        dependsOn(installGitHooks)\n        // Always compile using JDK 17, independent of the JDK version used to run Gradle.\n        // We can't compile on JDK 21 since some internal javac APIs changed between 17\n        // and 21, and for now NullAway compiles against the JDK 17 APIs and uses reflection\n        // on JDK 21+.  This configuration means compilation will succeed even if Gradle\n        // is running on JDK 21+.\n        javaCompiler = javaToolchains.compilerFor {\n            languageVersion = JavaLanguageVersion.of(17)\n        }\n        options.compilerArgs += [\n            \"-Xlint:deprecation\",\n            \"-Xlint:rawtypes\",\n            \"-Xlint:unchecked\",\n            \"-Werror\",\n            \"-parameters\",\n        ]\n        options.errorprone {\n            // disable warnings in generated code; AutoValue code fails UnnecessaryParentheses check\n            disableWarningsInGeneratedCode = true\n            // this check is too noisy\n            check(\"StringSplitter\", CheckSeverity.OFF)\n            // https://github.com/google/error-prone/issues/3366\n            check(\"CanIgnoreReturnValueSuggester\", CheckSeverity.OFF)\n            // turn up various checks\n            check(\"WildcardImport\", CheckSeverity.ERROR)\n            check(\"MissingBraces\", CheckSeverity.ERROR)\n            check(\"TypeToString\", CheckSeverity.ERROR)\n            check(\"SymbolToString\", CheckSeverity.ERROR)\n            check(\"MultipleTopLevelClasses\", CheckSeverity.ERROR)\n            check(\"ClassName\", CheckSeverity.ERROR)\n            check(\"PackageLocation\", CheckSeverity.ERROR)\n            check(\"UnnecessaryAnonymousClass\", CheckSeverity.ERROR)\n            check(\"UnusedException\", CheckSeverity.ERROR)\n            check(\"UnnecessaryFinal\", CheckSeverity.ERROR)\n            check(\"PreferredInterfaceType\", CheckSeverity.ERROR)\n            check(\"AnnotationPosition\", CheckSeverity.ERROR)\n            // To enable auto-patching, uncomment the line below, replace [CheckerName] with\n            // the checker(s) you want to apply patches for (comma-separated), and above, disable\n            // \"-Werror\"\n            // errorproneArgs.addAll(\"-XepPatchChecks:[CheckerName]\", \"-XepPatchLocation:IN_PLACE\")\n        }\n    }\n\n    // We need to use the older sourceCompatibility / targetCompatibility settings, rather than the newer \"release\"\n    // option, since we use internal javac APIs, which \"release\" doesn't allow\n    tasks.withType(JavaCompile) {\n        java.sourceCompatibility = JavaVersion.VERSION_11\n        java.targetCompatibility = JavaVersion.VERSION_11\n    }\n\n    tasks.withType(Test).configureEach {\n        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1\n    }\n\n    repositories {\n        mavenCentral()\n        google()\n    }\n\n    // Spotless complains when applied to the folders containing projects\n    // when they do not have a build.gradle file\n    if (project.name != \"jar-infer\" && project.name != \"library-model\") {\n        project.apply plugin: \"com.diffplug.spotless\"\n        spotless {\n            java {\n                googleJavaFormat(deps.versions.googlejavaformat)\n            }\n        }\n    }\n}\n\nspotless {\n    predeclareDeps()\n    groovyGradle {\n        target '**/*.gradle'\n        greclipse()\n        indentWithSpaces(4)\n        trimTrailingWhitespace()\n        endWithNewline()\n    }\n}\nspotlessPredeclare {\n    java { googleJavaFormat(deps.versions.googlejavaformat) }\n    groovyGradle {\n        greclipse()\n    }\n}\n\nshellcheck {\n    useDocker = false\n    shellcheckBinary = \"shellcheck\"\n    sourceFiles =\n            fileTree(\".\") {\n                include(\"**/*.sh\")\n            }\n}\n\n////////////////////////////////////////////////////////////////////////\n//\n//  Google Java Format pre-commit hook installation\n//\n\ntasks.register('installGitHooks', Copy) {\n    from(file('config/hooks/pre-commit-stub')) {\n        rename 'pre-commit-stub', 'pre-commit'\n    }\n    into file('.git/hooks')\n    filePermissions {\n        unix(0777)\n    }\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "code-coverage-report",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.046875,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\norg.gradle.parallel=true\norg.gradle.caching=true\norg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\n\nGROUP=com.uber.nullaway\nVERSION_NAME=0.12.4-SNAPSHOT\n\nPOM_DESCRIPTION=A fast annotation-based null checker for Java\n\nPOM_URL=https://github.com/uber/NullAway/\nPOM_SCM_URL=https://github.com/uber/NullAway/\nPOM_SCM_CONNECTION=scm:git:git://github.com/uber/NullAway.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/uber/NullAway.git\n\nPOM_LICENCE_NAME=The MIT License\nPOM_LICENCE_URL=https://opensource.org/licenses/MIT\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=uber\nPOM_DEVELOPER_NAME=Uber Technologies\nPOM_DEVELOPER_URL=https://uber.com\n\n# Publishing configuration for vanniktech/gradle-maven-publish-plugin\nSONATYPE_HOST=DEFAULT\nRELEASE_SIGNING_ENABLED=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "guava-recent-unit-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "jar-infer",
          "type": "tree",
          "content": null
        },
        {
          "name": "jdk-recent-unit-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "jmh",
          "type": "tree",
          "content": null
        },
        {
          "name": "library-model",
          "type": "tree",
          "content": null
        },
        {
          "name": "nullaway",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample-app",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample-library-model",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.220703125,
          "content": "pluginManagement {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n        google()\n    }\n}\n\nplugins {\n    // to automatically pull in relevant JDK toolchains when not present on the local machine\n    id(\"org.gradle.toolchains.foojay-resolver-convention\") version \"0.8.0\"\n}\n\ninclude ':annotations'\ninclude ':nullaway'\ninclude ':sample-library-model'\ninclude ':sample'\ninclude ':test-java-lib'\ninclude ':test-java-lib-lombok'\ninclude ':test-library-models'\ninclude ':jar-infer:android-jarinfer-models-sdk28'\ninclude ':jar-infer:android-jarinfer-models-sdk29'\ninclude ':jar-infer:android-jarinfer-models-sdk30'\ninclude ':jar-infer:android-jarinfer-models-sdk31'\ninclude ':jar-infer:jar-infer-lib'\ninclude ':jar-infer:jar-infer-cli'\ninclude ':jar-infer:test-java-lib-jarinfer'\ninclude ':jar-infer:nullaway-integration-test'\ninclude ':jmh'\ninclude ':guava-recent-unit-tests'\ninclude ':jdk-recent-unit-tests'\ninclude ':code-coverage-report'\ninclude ':sample-app'\ninclude ':jar-infer:test-android-lib-jarinfer'\ninclude ':library-model:library-model-generator'\ninclude ':library-model:library-model-generator-integration-test'\ninclude ':library-model:library-model-generator-cli'\ninclude ':library-model:test-library-model-generator'\n"
        },
        {
          "name": "test-java-lib-lombok",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-java-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-library-models",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}