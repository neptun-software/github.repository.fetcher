{
  "metadata": {
    "timestamp": 1736608981645,
    "page": 190,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xpipe-io/xpipe",
      "stars": 4115,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.080078125,
          "content": "* text=auto eol=lf\n*.sh text eol=lf\n*.bat text eol=crlf\n*.png binary\n*.xcf binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": ".gradle/\nbuild/\n.idea/*\n!.idea/codeStyles\n!.idea/inspectionProfiles\nlib/\ndev.properties\nextensions.txt\ndev_storage\nlocal/\nlocal_*/\n.vs\n.vscode\nobj\nout\nbin\n.DS_Store\nComponentsGenerated.wxs\n!dist/javafx/**/lib\n!dist/javafx/**/bin\nxcuserdata/\n*.dylib\nproject.xcworkspace\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1181640625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement via [hello@xpipe.io](mailto:hello@xpipe.io).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.9482421875,
          "content": "# Development\n\nAny contribution is welcomed!\nThere are no real formal contribution guidelines right now, they will maybe come later.\n\n## Repository Structure\n\n- [core](core) - Shared core classes of the XPipe Java API, XPipe extensions, and the XPipe daemon implementation.\n  This mainly concerns API classes not a lot of implementation.\n- [beacon](beacon) - The XPipe beacon component is responsible for handling all communications between the XPipe\n  daemon and the client applications, for example APIs and the CLI\n- [app](app) - Contains the XPipe daemon implementation, the XPipe desktop application, and an\n  API to create all different kinds of extensions for the XPipe platform\n- [dist](dist) - Tools to create a distributable package of XPipe\n- [ext](ext) - Available XPipe extensions. Essentially every concrete feature implementation is implemented as an extension\n\n## Development Setup\n\nYou need to have an up-to-date version of XPipe installed on your local system in order to properly\nrun XPipe in a development environment.\nThis is due to the fact that some components are only included in the release version and not in this repository.\nXPipe is able to automatically detect your local installation and fetch the required\ncomponents from it when it is run in a development environment.\n\nNote that in case the current master branch is ahead of the latest release, it might happen that there are some incompatibilities when loading data from your local XPipe installation.\nYou should therefore always check out the matching version tag for your local repository and local XPipe installation.\nYou can find the available version tags at https://github.com/xpipe-io/xpipe/tags.\nSo for example if you currently have XPipe `13.0` installed, you should run `git reset --hard 13.0` first to properly compile against it.\n\nYou need to have JDK for Java 22 installed to compile the project.\nIf you are on Linux or macOS, you can easily accomplish that by running\n```bash\ncurl -s \"https://get.sdkman.io\" | bash\n. \"$HOME/.sdkman/bin/sdkman-init.sh\"\nsdk install java 22.0.2-graalce\nsdk default java 22.0.2-graalce\n```\n.\nOn Windows, you have to manually install a JDK, e.g. from [Adoptium](https://adoptium.net/temurin/releases/?version=21).\n\nYou can configure a few development options in the file `app/dev.properties` which will be automatically generated when gradle is first run.\n\n## Building and Running\n\nYou can use the gradle wrapper to build and run the project:\n- `gradlew app:run` will run the desktop application. You can set various useful properties in `app/build.gradle`\n- `gradlew clean dist` will create a distributable production version in `dist/build/dist/base`.\n- `gradlew <project>:test` will run the tests of the specified project.\n\nYou are also able to properly debug the built production application through two different methods:\n- The `dist/build/dist/base/app/scripts/xpiped_debug` script will launch the application in debug mode and with a console attached to it\n- The `dist/build/dist/base/app/scripts/xpiped_debug_attach` script attaches a debugger with the help of [AttachMe](https://plugins.jetbrains.com/plugin/13263-attachme).\n  Just make sure that the attachme process is running within IntelliJ, and the debugger should launch automatically once you start up the application.\n\nNote that when any unit test is run using a debugger, the XPipe daemon process that is started will also attempt\nto connect to that debugger through [AttachMe](https://plugins.jetbrains.com/plugin/13263-attachme) as well.\n\n## Modularity and IDEs\n\nAll XPipe components target [Java 22](https://openjdk.java.net/projects/jdk/22/) and make full use of the Java Module System (JPMS).\nAll components are modularized, including all their dependencies.\nIn case a dependency is (sadly) not modularized yet, module information is manually added using [extra-java-module-info](https://github.com/gradlex-org/extra-java-module-info).\nFurther, note that as this is a pretty complicated Java project that fully utilizes modularity,\nmany IDEs still have problems building this project properly.\n\nFor example, you can't build this project in eclipse or vscode as it will complain about missing modules.\nThe tested and recommended IDE is IntelliJ.\nWhen setting up the project in IntelliJ, make sure that the correct JDK (Java 22)\nis selected both for the project and for gradle itself.\n\n## Contributing guide\n\nEspecially when starting out, it might be a good idea to start with easy tasks first. Here's a selection of suitable common tasks that are very easy to implement:\n\n### Interacting via the HTTP API\n\nYou can create clients that communicate with the XPipe daemon via its HTTP API.\nTo get started, see the [OpenAPI spec](/openapi.yaml).\n\n### Implementing support for a new editor\n\nAll code for handling external editors can be found [here](https://github.com/xpipe-io/xpipe/blob/master/app/src/main/java/io/xpipe/app/prefs/ExternalEditorType.java). There you will find plenty of working examples that you can use as a base for your own implementation.\n\n### Implementing support for a new terminal\n\nAll code for handling external terminals can be found [here](https://github.com/xpipe-io/xpipe/blob/master/app/src/main/java/io/xpipe/app/terminal/). There you will find plenty of working examples that you can use as a base for your own implementation.\n\n### Adding more context menu actions in the file browser\n\nIn case you want to implement your own actions for certain file types in the file browser, you can easily do so. You can find most existing actions [here](https://github.com/xpipe-io/xpipe/tree/master/ext/base/src/main/java/io/xpipe/ext/base/browser) to get some inspiration.\nOnce you created your custom classes, you have to register them in your module info, just like [here](https://github.com/xpipe-io/xpipe/blob/master/ext/base/src/main/java/module-info.java).\n\n### Implementing custom actions for the connection hub\n\nAll actions that you can perform for certain connections in the connection overview tab are implemented using an [Action API](https://github.com/xpipe-io/xpipe/blob/master/app/src/main/java/io/xpipe/app/ext/ActionProvider.java). You can find a sample implementation [here](https://github.com/xpipe-io/xpipe/blob/master/ext/base/src/main/java/io/xpipe/ext/base/action/SampleAction.java) and many common action implementations [here](https://github.com/xpipe-io/xpipe/tree/master/ext/base/src/main/java/io/xpipe/ext/base/action).\n\n### Adding more predefined scripts\n\nYou can add custom script definitions [here](https://github.com/xpipe-io/xpipe/tree/master/ext/base/src/main/java/io/xpipe/ext/base/script/PredefinedScriptStore.java) and [here](https://github.com/xpipe-io/xpipe/tree/master/ext/base/src/main/resources/io/xpipe/ext/base/resources/scripts).\n\n### Adding more system icons for system autodetection\n\nYou can register new system types [here](https://github.com/xpipe-io/xpipe/blob/master/app/src/main/java/io/xpipe/app/resources/SystemIcons.java) and add the respective icons [here](https://github.com/xpipe-io/xpipe/tree/master/app/src/main/resources/io/xpipe/app/resources/img/system).\n\n### Adding more file icons for specific types\n\nYou can register file types [here](https://github.com/xpipe-io/xpipe/blob/master/app/src/main/resources/io/xpipe/app/resources/file_list.txt) and add the respective icons [here](https://github.com/xpipe-io/xpipe/tree/master/app/src/main/resources/io/xpipe/app/resources/img/browser).\n\nThe existing file list and icons are taken from the [vscode-icons](https://github.com/vscode-icons/vscode-icons) project. Due to limitations in the file definition list compatibility, some file types might not be listed by their proper extension and are therefore not being applied correctly even though the images and definitions exist already.\n\n### Implementing something else\n\nif you want to work on something that was not listed here, you can still do so of course. You can reach out on the [Discord server](https://discord.gg/8y89vS8cRb) to discuss any development plans and get you started.\n\n### Adding translations\n\nSee the [translation guide](/lang) for details.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 10.5419921875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n   Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n   stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n   that You distribute, all copyright, patent, trademark, and\n   attribution notices from the Source form of the Work,\n   excluding those notices that do not pertain to any part of\n   the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n   distribution, then any Derivative Works that You distribute must\n   include a readable copy of the attribution notices contained\n   within such NOTICE file, excluding those notices that do not\n   pertain to any part of the Derivative Works, in at least one\n   of the following places: within a NOTICE text file distributed\n   as part of the Derivative Works; within the Source form or\n   documentation, if provided along with the Derivative Works; or,\n   within a display generated by the Derivative Works, if and\n   wherever such third-party notices normally appear. The contents\n   of the NOTICE file are for informational purposes only and\n   do not modify the License. You may add Your own attribution\n   notices within Derivative Works that You distribute, alongside\n   or as an addendum to the NOTICE text from the Work, provided\n   that such additional attribution notices cannot be construed\n   as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\nCopyright 2024 Christopher Schnick\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.423828125,
          "content": "<p align=\"center\">\n    <a href=\"https://xpipe.io\" target=\"_blank\" rel=\"noopener\">\n        <img src=\"https://github.com/xpipe-io/.github/raw/main/img/banner.png\" alt=\"XPipe Banner\" />\n    </a>\n</p>\n\n<h1></h1>\n\n## About\n\nXPipe is a new type of shell connection hub and remote file manager that allows you to access your entire server infrastructure from your local machine. It works on top of your installed command-line programs and does not require any setup on your remote systems. So if you normally use CLI tools like `ssh`, `docker`, `kubectl`, etc. to connect to your servers, you can just use XPipe on top of that.\n\nXPipe fully integrates with your tools such as your favourite text/code editors, terminals, shells, command-line tools and more. The platform is designed to be extensible, allowing anyone to add easily support for more tools or to implement custom functionality through a modular extension system.\n\nIt currently supports:\n- [SSH](https://www.ssh.com/academy/ssh/protocol) connections, config files, and tunnels\n- [Docker](https://www.docker.com/), [Podman](https://podman.io/), and [LXD](https://linuxcontainers.org/lxd/introduction/) container instances located on any host\n- [Proxmox PVE](https://www.proxmox.com/en/proxmox-virtual-environment/overview) virtual machines and containers\n- [Hyper-V](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/), [KVM/QEMU](https://linux-kvm.org/page/Main_Page), [VMware Player/Workstation/Fusion](https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion) virtual machines\n- [Kubernetes](https://kubernetes.io/) clusters, pods, and containers\n- [Windows Subsystem for Linux](https://ubuntu.com/wsl), [Cygwin](https://www.cygwin.com/), and [MSYS2](https://www.msys2.org/) instances\n- [Powershell Remote Sessions](https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.3)\n- [Teleport tsh connections](https://goteleport.com/)\n- VNC connections\n- Any other custom remote connection methods that work through the command-line\n\n## Connection hub\n\n- Easily connect to and access all kinds of remote connections in one place\n- Organize all your connections in hierarchical categories so you can keep an overview hundreds of connections\n- Create specific login environments on any system to instantly jump into a properly set up environment for every use case\n- Quickly perform various commonly used actions like starting/stopping containers, establishing tunnels, and more\n- Create desktop shortcuts that automatically open remote connections in your terminal without having to open any GUI\n\n![Connections](https://github.com/xpipe-io/.github/raw/main/img/hub_shadow.png)\n\n## Powerful file management\n\n- Interact with the file system of any remote system using a workflow optimized for professionals\n- Quickly open a terminal session into any directory in your favourite terminal emulator\n- Utilize your entire arsenal of locally installed programs to open and edit remote files\n- Dynamically elevate sessions with sudo when required without having to restart the session\n- Seamlessly transfer files from and to your system desktop environment\n- Work and perform transfers on multiple systems at the same time with the built-in tabbed multitasking\n\n![Browser](https://github.com/xpipe-io/.github/raw/main/img/browser_shadow.png)\n\n## Terminal launcher\n\n- Boots you into a shell session in your favourite terminal with one click. Automatically fills password prompts and more\n- Comes with support for all commonly used terminal emulators across all operating systems\n- Supports opening custom terminal emulators as well via a custom command-line spec\n- Works with all command shells such as bash, zsh, cmd, PowerShell, and more, locally and remote\n- Connects to a system while the terminal is still starting up, allowing for faster connections than otherwise possible\n\n![Terminal](https://github.com/xpipe-io/.github/raw/main/img/terminal_shadow.png)\n\n<br>\n<p align=\"center\">\n  <img src=\"https://github.com/xpipe-io/.github/raw/main/img/terminal.gif\" alt=\"Terminal launcher\"/>\n</p>\n<br>\n\n## Versatile scripting system\n\n- Create reusable simple shell scripts, templates, and groups to run on connected remote systems\n- Automatically make your scripts available in the PATH on any remote system without any setup\n- Setup shell init environments for connections to fully customize your work environment for every purpose\n- Open custom shells and custom remote connections by providing your own commands\n\n![scripts](https://github.com/xpipe-io/.github/raw/main/img/scripts_shadow.png)\n\n## Secure vault\n\n- All data is stored exclusively on your local system in a cryptographically secure vault. You can also choose to increase security by using a custom master passphrase for further encryption\n- XPipe is able to retrieve secrets automatically from your password manager via it's command-line interface.\n- There are no servers involved, all your information stays on your systems. The XPipe application does not send any personal or sensitive information to outside services.\n- Vault changes can be pushed and pulled from your own remote git repository by multiple team members across many systems\n\n## Programmatic connection control via the API\n\n- The XPipe API provides programmatic access to XPipe’s features via an HTTP interface\n- Manage all your remote systems and access their file systems in your own favorite programming language\n- Either call the API directly or with the help of the [python library](https://github.com/xpipe-io/xpipe-python-api)\n- Full documentation can be either found in the application itself under the API tab or in the [OpenAPI](/openapi.yaml) spec file\n\n# Downloads\n\nNote that this is a desktop application that should be run on your local desktop workstation, not on any server or containers. It will be able to connect to your server infrastructure from there.\n\n## Windows\n\nInstallers are the easiest way to get started and come with an optional automatic update functionality:\n\n- [Windows .msi Installer (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-windows-x86_64.msi)\n\nYou can also install XPipe by pasting the installation command into your terminal. This will perform the .msi setup for the current user automatically:\n\n```\npowershell -ExecutionPolicy Bypass -Command iwr \"https://github.com/xpipe-io/xpipe/raw/master/get-xpipe.ps1\" -OutFile \"$env:TEMP\\get-xpipe.ps1\" \";\"  \"&\" \"$env:TEMP\\get-xpipe.ps1\"\n```\n\nIf you don't like installers, you can also use a portable version that is packaged as an archive:\n\n- [Windows .zip Portable (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-windows-x86_64.zip)\n\nAlternatively, you can also use the following package managers:\n- [choco](https://community.chocolatey.org/packages/xpipe) to install it with `choco install xpipe`.\n- [winget](https://github.com/microsoft/winget-cli) to install it with `winget install xpipe-io.xpipe --source winget`.\n\n## Linux\n\nYou can install XPipe the fastest by pasting the installation command into your terminal. This will perform the setup automatically.\nThe script supports installation via `apt`, `dnf`, `yum`, `zypper`, `rpm`, and `pacman` on Linux:\n\n```\nbash <(curl -sL https://github.com/xpipe-io/xpipe/raw/master/get-xpipe.sh)\n```\n\nOf course, there are also other installation methods available.\n\n### Debian-based distros\n\nThe following debian installers are available:\n\n- [Linux .deb Installer (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-linux-x86_64.deb)\n- [Linux .deb Installer (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-linux-arm64.deb)\n\nNote that you should use apt to install the package with `sudo apt install <file>` as other package managers, for example dpkg,\nare not able to resolve and install any dependency packages.\n\n### RHEL-based distros\n\nThe following rpm installers are available:\n\n- [Linux .rpm Installer (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-linux-x86_64.rpm)\n- [Linux .rpm Installer (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-linux-arm64.rpm)\n\nThe same applies here, you should use a package manager that supports resolving and installing required dependencies if needed.\n\n### Arch\n\nThere is an official [AUR package](https://aur.archlinux.org/packages/xpipe) available that you can either install manually or via an AUR helper such as with `yay -S xpipe`.\n\n### NixOS\n\nThere's an official [xpipe nixpkg](https://search.nixos.org/packages?channel=unstable&show=xpipe&from=0&size=50&sort=relevance&type=packages&query=xpipe) available that you can install with `nix-env -iA nixos.xpipe`. This one is however not always up to date.\n\nThere is also a custom repository that contains the latest up-to-date releases: https://github.com/xpipe-io/nixpkg.\nYou can install XPipe by following the instructions in the linked repository.\n\n### Portable\n\nIn case you prefer to use an archive version that you can extract anywhere, you can use these:\n\n- [Linux .tar.gz Portable (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-linux-x86_64.tar.gz)\n- [Linux .tar.gz Portable (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-linux-arm64.tar.gz)\n\nAlternatively, there are also AppImages available:\n\n- [Linux .AppImage Portable (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-linux-x86_64.AppImage)\n- [Linux .AppImage Portable (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-linux-arm64.AppImage)\n\nNote that the portable version assumes that you have some basic packages for graphical systems already installed\nas it is not a perfect standalone version. It should however run on most systems.\n\n## macOS\n\nInstallers are the easiest way to get started and come with an optional automatic update functionality:\n\n- [MacOS .pkg Installer (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-macos-x86_64.pkg)\n- [MacOS .pkg Installer (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-installer-macos-arm64.pkg)\n\nYou also can install XPipe by pasting the installation command into your terminal. This will perform the `.pkg` installation automatically:\n\n```\nbash <(curl -sL https://github.com/xpipe-io/xpipe/raw/master/get-xpipe.sh)\n```\n\nIf you don't like installers, you can also use a portable version that is packaged as an archive:\n\n- [MacOS .dmg Portable (x86-64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-macos-x86_64.dmg)\n- [MacOS .dmg Portable (ARM 64)](https://github.com/xpipe-io/xpipe/releases/latest/download/xpipe-portable-macos-arm64.dmg)\n\nAlternatively, you can also use [Homebrew](https://github.com/xpipe-io/homebrew-tap) to install XPipe with `brew install --cask xpipe-io/tap/xpipe`.\n\n## Early access releases\n\nPrior to major releases, there will be several Public Test Build (PTB) releases published at https://github.com/xpipe-io/xpipe-ptb to see whether everything is production ready and contain the latest new features.\n\nIn case you're interested in trying out the PTB versions, you can easily do so without any limitations. The regular releases and PTB releases are designed to not interfere with each other and can therefore be installed and used side by side.\n\n## XPipe Webtop\n\nXPipe is a desktop application first and foremost. It requires a full desktop environment to function with various installed applications such as terminals, editors, shells, CLI tools, and more. So there is no true web-based interface for XPipe. Since it might make sense however to access your XPipe environment from the web, there is also a so-called webtop docker container image for XPipe. [XPipe Webtop](https://github.com/xpipe-io/xpipe-webtop) is a web-based desktop environment that can be run in a container and accessed from a browser via KasmVNC. The desktop environment comes with XPipe and various terminals and editors preinstalled and configured. \n\n# Further information\n\n## Open source model\n\nXPipe follows an open core model, which essentially means that the main application is open source while certain other components are not. This mainly concerns the features only available in the homelab/professional plan and the shell handling library implementation. Furthermore, some CI pipelines and tests that run on private servers are also not included in the open repository.\n\nThe distributed XPipe application consists out of two parts:\n- The open-source core that you can find this repository. It is licensed under the [Apache License 2.0](/LICENSE.md).\n- The closed-source extensions, mostly for homelab/professional plan features, which are not included in this repository\n\nAdditional features are available in the homelab/professional plan . For more details see https://xpipe.io/pricing.\nIf your enterprise puts great emphasis on having access to the full source code, there are also full source-available enterprise options available.\n\n## More links\n\nYou have more questions? Then check out the [FAQ](https://xpipe.io/#faq).\n\nFor information about the security model of XPipe, see the [security page](https://xpipe.io/features#security).\n\nFor information about the privacy policy of XPipe, see the [privacy policy](https://docs.xpipe.io/privacy-policy).\n\nIn case you're interested in development, check out the [contributing page](/CONTRIBUTING.md).\n\n[![Discord](https://discordapp.com/api/guilds/979695018782646285/widget.png?style=banner2)](https://discord.gg/8y89vS8cRb)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.552734375,
          "content": "# Security \n\nDue to its nature, XPipe has to handle a lot of sensitive information. Therefore, the security, integrity, and privacy of your data has topmost priority.\n\nGeneral information about the security approach of the XPipe application can be found on the website at https://xpipe.io/features#security. If you're interested in security implementation details, you can find them at https://docs.xpipe.io/security.\n\nYou can report security vulnerabilities in this GitHub repository in a confidential manner. We will get back to you as soon as possible if you do.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "beacon",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 9.451171875,
          "content": "import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform\n\nimport java.util.stream.Stream\n\nbuildscript {\n    configurations.classpath {\n        resolutionStrategy {\n            // Fix https://github.com/jreleaser/jreleaser/issues/1643\n            force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'\n        }\n    }\n}\n\nplugins {\n    id(\"io.github.gradle-nexus.publish-plugin\") version \"2.0.0\"\n    id 'org.gradlex.extra-java-module-info' version '1.9' apply false\n    id(\"com.diffplug.spotless\") version \"6.25.0\" apply false\n}\n\nallprojects { subproject ->\n    apply plugin: 'org.gradlex.extra-java-module-info'\n    extraJavaModuleInfo {\n        failOnMissingModuleInfo.set(false)\n    }\n    apply from: \"$rootDir/gradle/gradle_scripts/modules.gradle\"\n}\n\nsubprojects {subproject ->\n    if (subproject.name == 'dist') {\n        return\n    }\n\n    apply plugin: 'com.diffplug.spotless'\n    spotless {\n        java {\n            palantirJavaFormat()\n            trimTrailingWhitespace()\n            endWithNewline()\n            importOrder('io.xpipe', 'javafx', '', 'java', '\\\\#')\n        }\n    }\n}\n\n\ndef user = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : System.getenv('SONATYPE_USERNAME')\ndef pass = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASSWORD')\n\ntasks.withType(GenerateModuleMetadata) {\n    enabled = false\n}\n\nnexusPublishing  {\n    repositories {\n        sonatype  {\n            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))\n            snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))\n            username = user\n            password = pass\n        }\n    }\n    useStaging = true\n}\n\nvar devProps = file(\"$rootDir/app/dev.properties\")\nif (!devProps.exists()) {\n    devProps.text = file(\"$rootDir/gradle/gradle_scripts/dev_default.properties\").text\n}\n\ndef getArchName() {\n    var arch = System.getProperty(\"os.arch\").toLowerCase(Locale.ROOT)\n    if (arch == 'amd64' || arch == 'x86_64') {\n        return 'x86_64'\n    }\n\n    if (arch == 'arm' || arch == 'aarch64') {\n        return 'arm64'\n    }\n\n    if (arch == 'x86') {\n        return 'x86'\n    }\n\n    return arch\n}\n\ndef getPlatformName() {\n    def currentOS = DefaultNativePlatform.currentOperatingSystem;\n    def platform\n    if (currentOS.isWindows()) {\n        platform = 'windows'\n    }  else if (currentOS.isMacOsX()) {\n        platform = 'osx'\n    } else {\n        platform = 'linux'\n    }\n    return platform;\n}\n\nproject.ext {\n    ci = System.getenv('CI') != null\n    os = org.gradle.internal.os.OperatingSystem.current()\n    allExtensions = Stream.concat(Stream.of(project(':base')), Arrays.stream(file(\"$rootDir/ext\").list())\n            .filter(s -> file(\"$rootDir/ext/$s/build.gradle\").exists())\n            .filter(s -> !s.equals('base'))\n            .map(l -> project(\":$l\"))).toList()\n    fullVersion = file(\"$rootDir/private_files.txt\").exists()\n    arch = getArchName()\n    privateExtensions = file(\"$rootDir/private_extensions.txt\").exists() ? file(\"$rootDir/private_extensions.txt\").readLines() : []\n    isFullRelease = System.getenv('RELEASE') != null && Boolean.parseBoolean(System.getenv('RELEASE'))\n    isStage = System.getenv('STAGE') != null && Boolean.parseBoolean(System.getenv('STAGE'))\n    rawVersion = file('version').text.trim()\n    versionString = rawVersion + (isFullRelease || isStage ? '' : '-SNAPSHOT')\n    versionReleaseNumber = rawVersion.split('-').length == 2 ? Integer.parseInt(rawVersion.split('-')[1]) : 1\n    canonicalVersionString = rawVersion.split('-').length == 2 ? rawVersion.split('-')[0] : rawVersion\n    buildId = UUID.nameUUIDFromBytes(versionString.getBytes())\n    obfuscate = true\n    changelog = file(\"dist/changelogs/${canonicalVersionString}.md\").exists() ? file(\"dist/changelogs/${canonicalVersionString}.md\").text.trim() + '\\n' : \"\"\n    productName = isStage ? 'XPipe PTB' : 'XPipe'\n    kebapProductName = isStage ? 'xpipe-ptb' : 'xpipe'\n    flatcaseProductName = isStage ? 'xpipeptb' : 'xpipe'\n    publisher = 'XPipe UG (haftungsbeschränkt)'\n    shortDescription = isStage ? 'XPipe PTB (Public Test Build)' : 'Your entire server infrastructure at your fingertips'\n    longDescription = 'XPipe is a new type of shell connection hub and remote file manager that allows you to access your entire server infrastructure from your local machine. It works on top of your installed command-line programs that you normally use to connect and does not require any setup on your remote systems.'\n    website = 'https://xpipe.io'\n    sourceWebsite = isStage ? 'https://github.com/xpipe-io/xpipe-ptb' : 'https://github.com/xpipe-io/xpipe'\n    authors = 'Christopher Schnick'\n    javafxVersion = '24-ea+15'\n    platformName = getPlatformName()\n    languages = [\"en\", \"nl\", \"es\", \"fr\", \"de\", \"it\", \"pt\", \"ru\", \"ja\", \"zh\", \"tr\", \"da\"]\n    jvmRunArgs = [\n            \"--add-opens\", \"java.base/java.lang=io.xpipe.app\",\n            \"--add-opens\", \"java.base/java.lang=io.xpipe.core\",\n            \"--add-opens\", \"java.desktop/java.awt=io.xpipe.app\",\n            \"--add-opens\", \"net.synedra.validatorfx/net.synedra.validatorfx=io.xpipe.app\",\n            \"--add-opens\", \"java.base/java.nio.file=io.xpipe.app\",\n            \"--add-exports\", \"javafx.graphics/com.sun.javafx.tk=io.xpipe.app\",\n            \"--add-exports\", \"jdk.zipfs/jdk.nio.zipfs=io.xpipe.modulefs\",\n            \"--add-opens\", \"javafx.graphics/com.sun.glass.ui=io.xpipe.app\",\n            \"--add-opens\", \"javafx.graphics/javafx.stage=io.xpipe.app\",\n            \"--add-opens\", \"javafx.graphics/com.sun.javafx.tk.quantum=io.xpipe.app\",\n            \"-Xmx8g\",\n            \"-Dio.xpipe.app.arch=$rootProject.arch\",\n            \"-Dio.xpipe.app.languages=${String.join(\",\", languages)}\",\n            \"-Dfile.encoding=UTF-8\",\n            \"-Dvisualvm.display.name=XPipe\",\n            \"-Djavafx.preloader=io.xpipe.app.core.AppPreloader\",\n            \"-Djdk.virtualThreadScheduler.parallelism=8\"\n    ]\n    // Disable this on Windows for now as it requires Windows 10+\n    if (org.gradle.internal.os.OperatingSystem.current().isLinux() || org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {\n        jvmRunArgs += ['-XX:+UseZGC']\n    }\n    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {\n        jvmRunArgs += [\"-Dapple.awt.application.appearance=system\"]\n    }\n    useBundledJavaFx = fullVersion\n    useBundledJna = fullVersion\n    announce = System.getenv('SKIP_ANNOUNCEMENT') == null || !Boolean.parseBoolean(System.getenv('SKIP_ANNOUNCEMENT'))\n    changelogFile = file(\"$rootDir/dist/changelogs/${versionString}.md\").exists() ?\n            file(\"$rootDir/dist/changelogs/${versionString}.md\") :\n            file(\"$rootDir/dist/changelogs/${canonicalVersionString}.md\")\n    incrementalChangelogFile = file(\"$rootDir/dist/changelogs/${canonicalVersionString}_incremental.md\")\n    signingKeyId = project.hasProperty('signingKeyId') ? project.property(\"signingKeyId\") : System.getenv('GPG_KEY_ID')\n    signingKey = project.hasProperty('signingKeyFile') ? file(project.property(\"signingKeyFile\")).text : System.getenv('GPG_KEY')\n    signingPassword = project.hasProperty('signingKeyPassword') ? project.property(\"signingKeyPassword\") : System.getenv('GPG_KEY_PASSWORD')\n    if (signingPassword == null) {\n        signingPassword = ''\n    }\n    deeplApiKey = findProperty('DEEPL_API_KEY')\n    customJavaFxPath = null\n}\n\nif (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.LINUX) {\n    jvmRunArgs.addAll(\"--add-opens\", \"java.desktop/sun.awt.X11=io.xpipe.app\")\n}\nif (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.MAC_OS) {\n    jvmRunArgs.addAll(\"--add-exports\", \"java.desktop/com.apple.eawt=io.xpipe.app\")\n}\n\nif (isFullRelease && rawVersion.contains(\"-\")) {\n    throw new IllegalArgumentException(\"Releases must have canonical versions\")\n}\n\n\nif (isStage && !rawVersion.contains(\"-\")) {\n    throw new IllegalArgumentException(\"Stage releases must have release numbers\")\n}\n\ndef replaceVariablesInFileAsString(String f, Map<String, String> replacements) {\n    def fileName = file(f).getName()\n    def text = file(f).text\n    def replaced = text.replace(replacements)\n    return replaced\n}\n\ndef replaceVariablesInFile(String f, Map<String, String> replacements) {\n    def fileName = file(f).getName()\n    def text = file(f).text\n    def replaced = text.replace(replacements)\n    def build = \"${project.layout.buildDirectory.get()}/${UUID.randomUUID()}\"\n    file(build).mkdirs()\n    def temp = \"$build/$fileName\"\n    file(temp).text = replaced\n    return file(temp)\n}\n\ndef testTasks = [\n        project(':core').getTasksByName('test', true),\n        project(':app').getTasksByName('test', true),\n        project(':base').getTasksByName('localTest', true),\n        project(':proc').getTasksByName('localTest', true),\n]\n\n\nif (file(\"cli\").exists()) {\n    testTasks += [project(':cli').getTasksByName('remoteTest', true)]\n}\n\ntasks.register('testReport', TestReport) {\n    getDestinationDirectory().set(file(\"$rootProject.buildDir/reports/all\"))\n    getTestResults().from(testTasks.stream().filter {!it.isEmpty()}.map {\n        file(\"${it.project.buildDir.get(0)}/test-results/${it.name.get(0)}/binary\")\n    }.toList())\n}\n\ntask testAll(type: DefaultTask) {\n    for (final def t in testTasks) {\n        t.forEach {dependsOn(it.getTaskDependencies())}\n    }\n    doFirst {\n        for (final def t in testTasks) {\n            t.forEach {it.executeTests()}\n        }\n    }\n    finalizedBy(testReport)\n}\n\ngroup = 'io.xpipe'\nversion = versionString"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "get-xpipe.ps1",
          "type": "blob",
          "size": 5.119140625,
          "content": "<#\n    .SYNOPSIS\n    Downloads and installs XPipe on the local machine.\n\n    .DESCRIPTION\n    Retrieves the XPipe msi for the latest or a specified version, and\n    downloads and installs the application to the local machine.\n#>\n[CmdletBinding(DefaultParameterSetName = 'Default')]\nparam(\n    # Specifies a target version of XPipe to install. By default, the latest\n    # stable version is installed.\n    [Parameter(Mandatory = $false)]\n    [string]\n    $XPipeVersion = $xpipeVersion,\n\n    # If set, will download releases from the staging repository instead.\n    [Parameter(Mandatory = $false)]\n    [switch]\n    $UseStageDownloads = $useStageDownloads\n)\n\n#region Functions\n\nfunction Get-Downloader {\n    <#\n    .SYNOPSIS\n    Gets a System.Net.WebClient that respects relevant proxies to be used for\n    downloading data.\n\n    .DESCRIPTION\n    Retrieves a WebClient object that is pre-configured according to specified\n    environment variables for any proxy and authentication for the proxy.\n    Proxy information may be omitted if the target URL is considered to be\n    bypassed by the proxy (originates from the local network.)\n\n    .PARAMETER Url\n    Target URL that the WebClient will be querying. This URL is not queried by\n    the function, it is only a reference to determine if a proxy is needed.\n\n    .EXAMPLE\n    Get-Downloader -Url $fileUrl\n\n    Verifies whether any proxy configuration is needed, and/or whether $fileUrl\n    is a URL that would need to bypass the proxy, and then outputs the\n    already-configured WebClient object.\n    #>\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Url\n    )\n\n    $downloader = New-Object System.Net.WebClient\n\n    $defaultCreds = [System.Net.CredentialCache]::DefaultCredentials\n    if ($defaultCreds) {\n        $downloader.Credentials = $defaultCreds\n    }\n\n    $downloader\n}\n\nfunction Request-File {\n    <#\n    .SYNOPSIS\n    Downloads a file from a given URL.\n\n    .DESCRIPTION\n    Downloads a target file from a URL to the specified local path.\n    Any existing proxy that may be in use will be utilised.\n\n    .PARAMETER Url\n    URL of the file to download from the remote host.\n\n    .PARAMETER File\n    Local path for the file to be downloaded to.\n\n    Downloads the file to the path specified in $targetFile.\n    #>\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory = $false)]\n        [string]\n        $Url,\n\n        [Parameter(Mandatory = $false)]\n        [string]\n        $File\n    )\n\n    Write-Host \"Downloading $url to $file\"\n    (Get-Downloader $url).DownloadFile($url, $file)\n}\n\n\nfunction Uninstall {\n    [CmdletBinding()]\n    param()\n\n    # Quick heuristic to see whether is can be possibly installed\n    if (-not ((Test-Path \"$env:LOCALAPPDATA\\$ProductName\" -PathType Container) -or (Test-Path \"$env:ProgramFiles\\$ProductName\" -PathType Container))) {\n        return\n    }\n\n    Write-Host \"Looking for previous $ProductName installations ...\"\n\n    $cim = Get-CimInstance Win32_Product | Where {$_.Name -eq \"$ProductName\" } | Select-Object -First 1\n    if ($cim) {\n        $message = @(\n            \"Uninstalling existing $ProductName $($cim.Version) installation ...\"\n        ) -join [Environment]::NewLine\n        Write-Host $message\n        $cimResult = Invoke-CimMethod -InputObject $cim -Name Uninstall\n        if ($cimResult.ReturnValue) {\n            Write-Host \"Uninstallation failed: Code $($cimResult.ReturnValue)\"\n            exit\n        }\n    }\n}\n\n#endregion Functions\n\n#region Pre-check\n\nif ($UseStageDownloads) {\n    $XPipeRepoUrl = \"https://github.com/xpipe-io/xpipe-ptb\"\n    $ProductName = \"XPipe PTB\"\n} else {\n    $XPipeRepoUrl = \"https://github.com/xpipe-io/xpipe\"\n    $ProductName = \"XPipe\"\n}\n\nif ($XPipeVersion) {\n    $XPipeDownloadUrl = \"$XPipeRepoUrl/releases/download/$XPipeVersion\"\n} else {\n    $XPipeDownloadUrl = \"$XPipeRepoUrl/releases/latest/download\"\n}\n\nUninstall\n\n#endregion Pre-check\n\n#region Setup\n\n$XPipeDownloadUrl = \"$XPipeDownloadUrl/xpipe-installer-windows-x86_64.msi\"\n\nif (-not $env:TEMP) {\n    $env:TEMP = Join-Path $env:SystemDrive -ChildPath 'temp'\n}\n\n$tempDir = $env:TEMP\n\nif (-not (Test-Path $tempDir -PathType Container)) {\n    $null = New-Item -Path $tempDir -ItemType Directory\n}\n\n#endregion Setup\n\n#region Download\n\n$file = Join-Path $tempDir \"xpipe-installer.msi\"\nWrite-Host \"Getting $ProductName from $XPipeRepoUrl.\"\nRequest-File -Url $XPipeDownloadUrl -File $file\n\n#endregion Download\n\n#region Install XPipe\n\nWrite-Host \"Installing $ProductName ...\"\n\n# Wait for completion\n# The file variable can contain spaces, so we have to accommodate for that\nStart-Process -FilePath \"msiexec\" -Wait -ArgumentList \"/i\", \"`\"$file`\"\", \"/quiet\"\n\n# Update current process PATH environment variable\n$env:Path=(\n    [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\"),\n    [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n) -match '.' -join ';'\n\nWrite-Host\nWrite-Host \"$ProductName has been successfully installed. You should be able to find it in your applications.\"\nWrite-Host\n\n# Use absolute path as we can't assume that the user has selected to put XPipe into the Path\n& \"$env:LOCALAPPDATA\\$ProductName\\cli\\bin\\xpipe.exe\" open\n\n#endregion Install XPipe\n"
        },
        {
          "name": "get-xpipe.sh",
          "type": "blob",
          "size": 5.2568359375,
          "content": "#!/usr/bin/env bash\n\nrelease_url() {\n  local repo=\"$1\"\n  local version=\"$2\"\n  if [[ -z \"$version\" ]] ; then\n    echo \"$repo/releases/latest/download\"\n  else\n    echo \"$repo/releases/download/$version\"\n  fi\n}\n\nget_file_ending() {\n  local uname_str=\"$(uname -s)\"\n  case \"$uname_str\" in\n  Linux)\n    if [ -f \"/etc/debian_version\" ]; then\n      echo \"deb\"\n    else\n      echo \"rpm\"\n    fi\n    ;;\n  Darwin)\n    echo \"pkg\"\n    ;;\n  *)\n    exit 1\n    ;;\n  esac\n}\n\ndownload_release_from_repo() {\n  local os_info=\"$1\"\n  local tmpdir=\"$2\"\n  local repo=\"$3\"\n  local version=\"$4\"\n  local arch=\"$5\"\n\n  local ending=$(get_file_ending)\n  local release_url=$(release_url \"$repo\" \"$version\")\n\n  local filename=\"xpipe-installer-$os_info-$arch.$ending\"\n  local download_file=\"$tmpdir/$filename\"\n  local archive_url=\"$release_url/$filename\"\n\n  info \"Downloading file $archive_url\"\n  curl --progress-bar --show-error --location --fail \"$archive_url\" --output \"$download_file\" --write-out \"$download_file\"\n}\n\ninfo() {\n  local action=\"$1\"\n  local details=\"$2\"\n  command printf '\\033[1;32m%12s\\033[0m %s\\n' \"$action\" \"$details\" 1>&2\n}\n\nerror() {\n  command printf '\\033[1;31mError\\033[0m: %s\\n\\n' \"$1\" 1>&2\n}\n\nwarning() {\n  command printf '\\033[1;33mWarning\\033[0m: %s\\n\\n' \"$1\" 1>&2\n}\n\nrequest() {\n  command printf '\\033[1m%s\\033[0m\\n' \"$1\" 1>&2\n}\n\neprintf() {\n  command printf '%s\\n' \"$1\" 1>&2\n}\n\nbold() {\n  command printf '\\033[1m%s\\033[0m' \"$1\"\n}\n\n# returns the os name to be used in the packaged release\nparse_os_name() {\n  local uname_str=\"$1\"\n  local arch=\"$(uname -m)\"\n\n  case \"$uname_str\" in\n  Linux)\n    echo \"linux\"\n    ;;\n  FreeBSD)\n    echo \"linux\"\n    ;;\n  Darwin)\n    echo \"macos\"\n    ;;\n  *)\n    return 1\n    ;;\n  esac\n  return 0\n}\n\ninstall() {\n  local uname_str=\"$(uname -s)\"\n  local file=\"$1\"\n\n  case \"$uname_str\" in\n  Linux)\n    if [ -f \"/etc/debian_version\" ]; then\n      info \"Installing file $file with apt\"\n      sudo apt update\n      DEBIAN_FRONTEND=noninteractive sudo apt install \"$file\"\n    elif [ -x \"$(command -v zypper)\" ]; then\n      info \"Installing file $file with zypper\"\n      sudo zypper refresh\n      sudo zypper install \"$file\"\n    elif [ -x \"$(command -v dnf)\" ]; then\n      info \"Installing file $file with dnf\"\n      sudo dnf install --refresh \"$file\"\n    elif [ -x \"$(command -v yum)\" ]; then\n      info \"Installing file $file with yum\"\n      sudo yum clean expire-cache\n      sudo yum install \"$file\"\n    else\n      info \"Installing file $file with rpm\"\n      sudo rpm -U -v --force \"$file\"\n    fi\n    ;;\n  Darwin)\n    sudo installer -verboseR -allowUntrusted -pkg \"$file\" -target /\n    ;;\n  *)\n    exit 1\n    ;;\n  esac\n}\n\nlaunch() {\n  \"$kebap_product_name\" open\n}\n\ndownload_release() {\n  local uname_str=\"$(uname -s)\"\n  local os_info\n  os_info=\"$(parse_os_name \"$uname_str\")\"\n  if [ \"$?\" != 0 ]; then\n    error \"The current operating system ($uname_str) does not appear to be supported.\"\n    return 1\n  fi\n\n  # store the downloaded archive in a temporary directory\n  local download_dir=\"$(mktemp -d)\"\n  local repo=\"$1\"\n  local version=\"$2\"\n  download_release_from_repo \"$os_info\" \"$download_dir\" \"$repo\" \"$version\" \"$arch\"\n}\n\ncheck_architecture() {\n  local arch=\"$(uname -m)\"\n  case \"$arch\" in\n  x86_64)\n    echo x86_64\n    ;;\n  amd64)\n    echo x86_64\n    ;;\n  arm64)\n    echo arm64\n    ;;\n  aarch64)\n    echo arm64\n    ;;\n  *)\n    exit 1\n    ;;\n  esac\n}\n\n# return if sourced (for testing the functions above)\nreturn 0 2>/dev/null\n\narch=$(check_architecture)\nexit_status=\"$?\"\nif [ \"$exit_status\" != 0 ]; then\n  error \"Sorry! $product_name currently does not support your processor architecture.\"\n  exit \"$exit_status\"\nfi\n\nrepo=\"https://github.com/xpipe-io/xpipe\"\naur=\"https://aur.archlinux.org/xpipe.git\"\nproduct_name=\"XPipe\"\nkebap_product_name=\"xpipe\"\nversion=\nwhile getopts 'sv:' OPTION; do\n  case \"$OPTION\" in\n    s)\n      repo=\"https://github.com/xpipe-io/xpipe-ptb\"\n      aur=\"https://aur.archlinux.org/xpipe-ptb.git\"\n      product_name=\"XPipe PTB\"\n      kebap_product_name=\"xpipe-ptb\"\n      ;;\n\n    v)\n      version=\"$OPTARG\"\n      ;;\n\n    ?)\n      echo \"Usage: $(basename $0) [-s] [-v <version>]\"\n      exit 1\n      ;;\n  esac\ndone\n\nif [ \"$(uname -s)\" = \"Linux\" ]; then\n  if ! [ -x \"$(command -v apt)\" ] && ! [ -x \"$(command -v rpm)\" ] && [ -x \"$(command -v pacman)\" ]; then\n    info \"Installing from AUR at $aur\"\n    rm -rf \"/tmp/xpipe_aur\" || true\n    if [[ -z \"$version\" ]] ; then\n      git clone \"$aur\" /tmp/xpipe_aur\n    else\n      git clone --branch \"$version\" \"$aur\" /tmp/xpipe_aur\n    fi\n    cd \"/tmp/xpipe_aur\"\n    makepkg -si\n    launch\n    exit 0\n  fi\n\n  if ! [ -x \"$(command -v apt)\" ] && ! [ -x \"$(command -v rpm)\" ] && ! [ -x \"$(command -v pacman)\" ]; then\n    info \"Installation is not supported on this system (no apt, rpm, pacman). Can you try a portable version of $product_name?\"\n    info \"https://github.com/xpipe-io/xpipe#portable\"\n    exit 1\n  fi\nfi\n\ndownload_archive=\"$(\n  download_release \"$repo\" \"$version\" \"$arch\"\n  exit \"$?\"\n)\"\nexit_status=\"$?\"\nif [ \"$exit_status\" != 0 ]; then\n  error \"Could not download $product_name release.\"\n  exit \"$exit_status\"\nfi\n\ninstall \"$download_archive\"\n\nexit_status=\"$?\"\nif [ \"$exit_status\" != 0 ]; then\n  error \"Installation failed.\"\n  exit \"$exit_status\"\nfi\n\necho \"\"\necho \"$product_name was successfully installed. You should be able to find $product_name in your desktop environment now.\"\n\nlaunch\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "openapi.yaml",
          "type": "blob",
          "size": 37.2841796875,
          "content": "openapi: 3.0.1\ninfo:\n  title: XPipe API Documentation\n  description: |\n    The XPipe API provides programmatic access to XPipe’s features.\n    You can get started by either using this page as an API reference or alternatively import the OpenAPI definition file into your API client of choice:\n    \n    <a download href=\"/openapi.yaml\" style=\"font-size: 20px\">OpenAPI .yaml specification</a>\n    \n    The XPipe application will start up an HTTP server that can be used to send requests.\n    Note that this server is HTTP-only for now as it runs only on localhost. HTTPS requests are not accepted.\n    \n    You can either call the API directly or using the official [XPipe Python API](https://github.com/xpipe-io/xpipe-python-api).\n    \n    To start off with the API, you can query connections based on various filters.\n    With the matched connections, you can start remote shell sessions for each one and run arbitrary commands in them.\n    You get the command exit code and output as a response, allowing you to adapt your control flow based on command outputs.\n    Any kind of passwords and other secrets are automatically provided by XPipe when establishing a shell connection.\n    If a required password is not stored and is set to be dynamically prompted, the running XPipe application will ask you to enter any required passwords.\n    \n    See the authentication handshake below on how to authenticate prior to sending requests.\n    For development, you can also skip the authentication step by disabling it in the settings menu.\n  termsOfService: https://docs.xpipe.io/terms-of-service\n  contact:\n    name: XPipe - Contact us\n    url: mailto:hello@xpipe.io\n  version: \"13.0\"\nexternalDocs:\n  description: XPipe - Plans and pricing\n  url: https://xpipe.io/pricing\nservers:\n  - url: http://localhost:21721\n    description: XPipe Daemon API\npaths:\n  /handshake:\n    post:\n      summary: Establish a new API session\n      description: |\n        Prior to sending requests to the API, you first have to establish a new API session via the handshake endpoint.\n        In the response you will receive a session token that you can use to authenticate during this session.\n        \n        This is done so that the daemon knows what kind of clients are connected and can manage individual capabilities for clients.\n        If your client is running on the same system as the daemon, you can choose the local authentication method to avoid having to deal with API keys.\n        If your client does not have file system access, e.g. if it is running remotely, then you have to use an API key.\n        \n        Note that for development you can also turn off the required authentication in the XPipe settings menu, allowing you to send unauthenticated requests.\n      operationId: handshake\n      security: [ ]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HandshakeRequest'\n            examples:\n              standard:\n                summary: API key handshake\n                value: { \"auth\": { \"type\": \"ApiKey\", \"key\": \"<API key>\" }, \"client\": { \"type\": \"Api\", \"name\": \"My client name\" } }\n              local:\n                summary: Local application handshake\n                value: { \"auth\": { \"type\": \"Local\", \"authFileContent\": \"<Contents of the local file <temp dir>/xpipe_auth>\" }, \"client\": { \"type\": \"Api\", \"name\": \"My client name\" } }\n              local-ptb:\n                summary: Local PTB application handshake\n                value: { \"auth\": { \"type\": \"Local\", \"authFileContent\": \"<Contents of the local file <temp dir>/xpipe_ptb_auth>\" }, \"client\": { \"type\": \"Api\", \"name\": \"My client name\" } }\n      responses:\n        '200':\n          description: The handshake was successful. The returned token can be used for authentication in this session. The token is valid as long as XPipe is running.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HandshakeResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/query:\n    post:\n      summary: Query connections\n      description: |\n        Queries all connections using various filters.\n        \n        The filters support globs and can match the category names and connection names.\n        All matching is case insensitive.\n      operationId: connectionQuery\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionQueryRequest'\n            examples:\n              all:\n                summary: All\n                value: { \"categoryFilter\": \"*\", \"connectionFilter\": \"*\", \"typeFilter\": \"*\" }\n              simple:\n                summary: Simple filter\n                value: { \"categoryFilter\": \"default\", \"connectionFilter\": \"local machine\", \"typeFilter\": \"*\" }\n              globs:\n                summary: Globs\n                value: { \"categoryFilter\": \"*\", \"connectionFilter\": \"*/podman/*\", \"typeFilter\": \"*\" }\n      responses:\n        '200':\n          description: The query was successful. The body contains all matched connections.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionQueryResponse'\n              examples:\n                standard:\n                  summary: Matched connections\n                  value: { \"found\": [ \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" ] }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/info:\n    post:\n      summary: Connection information\n      description: |\n        Queries detailed information about a connection.\n      operationId: connectionInfo\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionInfoRequest'\n            examples:\n              simple:\n                summary: Standard\n                value: { \"connections\": [ \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" ] }\n      responses:\n        '200':\n          description: The query was successful. The body contains the detailed connection information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionInfoResponse'\n              examples:\n                standard:\n                  summary: Connection information\n                  value: { \"infos\": [ { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"category\": [ \"default\" ] ,\n                                        \"name\": [ \"local machine\" ], \"type\": \"local\", \"rawData\": { }, \"usageCategory\": \"shell\",\n                                        \"lastUsed\": \"2024-05-31T11:53:02.408504600Z\", \"lastModified\": \"2024-06-23T21:15:25.608097Z\",\n                                        \"state\": { } } ] }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/add:\n    post:\n      summary: Add new connection\n      description: |\n        Creates the new connection in the xpipe vault from raw json data.\n        This can also perform an optional validation first to make sure that the connection can be established.\n        \n        If an equivalent connection already exists, no new one will be added.\n      operationId: connectionAdd\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionAddRequest'\n            examples:\n              simple:\n                summary: Add new pwsh shell environment\n                value: { \"name\": \"my connection\", \"validate\": true, \"category\": \"97458c07-75c0-4f9d-a06e-92d8cdf67c40\", \"data\":\n                  {\n                    \"type\": \"shellEnvironment\",\n                    \"commands\": null,\n                    \"host\": {\n                      \"storeId\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\"\n                    },\n                    \"shell\": \"pwsh\",\n                    \"elevated\": false,\n                  }\n                }\n      responses:\n        '200':\n          description: The request was successful. The connection was added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionAddResponse'\n              examples:\n                standard:\n                  summary: Connection information\n                  value: { \"connection\": \"36ad9716-a209-4f7f-9814-078d3349280c\" }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/remove:\n    post:\n      summary: Remove connection\n      description: |\n        Removes a set of connection. This includes any possible children associated with the connection.\n        \n        Some connections, for example the local machine, can not be removed.\n      operationId: connectionRemove\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionRemoveRequest'\n            examples:\n              simple:\n                summary: Remove single connection\n                value: { \"connections\": [ \"36ad9716-a209-4f7f-9814-078d3349280c\" ] }\n      responses:\n        '200':\n          description: The removal was successful.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/browse:\n    post:\n      summary: Open connection in file browser\n      description: |\n        Creates a new tab in the file browser and opens the specified connections with an optional starting directory.\n      operationId: connectionBrowse\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionBrowseRequest'\n            examples:\n              simple:\n                summary: Open local file browser\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" }\n      responses:\n        '200':\n          description: The request was successful. The connection was opened.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/terminal:\n    post:\n      summary: Open terminal for shell connection\n      description: |\n        Launches a new terminal session for a connection with an optional specified working directory.\n      operationId: connectionTerminal\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionTerminalRequest'\n            examples:\n              simple:\n                summary: Open terminal for local shell\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" }\n      responses:\n        '200':\n          description: The request was successful. The connection was opened.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/toggle:\n    post:\n      summary: Toggle state of a connection\n      description: |\n        Updates the state of a connection to either start or stop a session.\n        \n        This can be used for all kinds of services and tunnels.\n      operationId: connectionToggle\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionToggleRequest'\n            examples:\n              simple:\n                summary: Activate connection\n                value: { \"connection\": \"36ad9716-a209-4f7f-9814-078d3349280c\", \"state\": true }\n      responses:\n        '200':\n          description: The request was successful. The connection state was updated.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /connection/refresh:\n    post:\n      summary: Refresh state of a connection\n      description: |\n        Performs a refresh on the specified connection.\n        \n        This will update the connection state information and also any children if the connection type has any.\n      operationId: connectionRefresh\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionRefreshRequest'\n            examples:\n              simple:\n                summary: Refresh connection\n                value: { \"connection\": \"36ad9716-a209-4f7f-9814-078d3349280c\" }\n      responses:\n        '200':\n          description: The request was successful. The connection state was updated.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /shell/start:\n    post:\n      summary: Start shell connection\n      description: |\n        Starts a new shell session for a connection. If an existing shell session is already running for that connection, this operation will do nothing.\n        \n        Note that there are a variety of possible errors that can occur here when establishing the shell connection.\n        These errors will be returned with the HTTP return code 500.\n      operationId: shellStart\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShellStartRequest'\n            examples:\n              local:\n                summary: Start local shell\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" }\n      responses:\n        '200':\n          description: The operation was successful. The shell session was started.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShellStartResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /shell/stop:\n    post:\n      summary: Stop shell connection\n      description: |\n        Stops an existing shell session for a connection.\n        \n        This operation will return once the shell has exited.\n        If the shell is busy or stuck, you might have to work with timeouts to account for these cases.\n      operationId: shellStop\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShellStopRequest'\n            examples:\n              local:\n                summary: Stop local shell\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\" }\n      responses:\n        '200':\n          description: The operation was successful. The shell session was stopped.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /shell/exec:\n    post:\n      summary: Execute command in a shell session\n      description: |\n        Runs a command in an active shell session and waits for it to finish. The exit code and output will be returned in the response.\n        \n        Note that a variety of different errors can occur when executing the command.\n        If the command finishes, even with an error code, a normal HTTP 200 response will be returned.\n        However, if any other error occurs like the shell not responding or exiting unexpectedly, an HTTP 500 response will be returned.\n      operationId: shellExec\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShellExecRequest'\n            examples:\n              user:\n                summary: echo $USER\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"command\": \"echo $USER\" }\n              invalid:\n                summary: invalid\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"command\": \"invalid\" }\n      responses:\n        '200':\n          description: The operation was successful. The shell command finished.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShellExecResponse'\n              examples:\n                user:\n                  summary: echo $USER\n                  value: { \"exitCode\": 0, \"stdout\": \"root\", \"stderr\": \"\" }\n                fail:\n                  summary: invalid\n                  value: { \"exitCode\": 127, \"stdout\": \"\", \"stderr\": \"invalid: command not found\" }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /fs/blob:\n    post:\n      summary: Store a raw blob to be used later\n      description: |\n        Stores arbitrary binary data in a blob such that it can be used later on to for example write to a remote file.\n        \n        This will return a uuid which can be used as a reference to the blob.\n        You can also store normal text data in blobs if you intend to create text or shell script files with it.\n      operationId: fsData\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: The operation was successful. The data was stored.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FsBlobResponse'\n              examples:\n                success:\n                  summary: Success\n                  value: { \"blob\": \"854afc45-eadc-49a0-a45d-9fb76a484304\" }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /fs/read:\n    post:\n      summary: Read the content of a remote file\n      description: |\n        Reads the entire content of a remote file through an active shell session.\n      operationId: fsRead\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsReadRequest'\n            examples:\n              simple:\n                summary: Read file\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"path\": \"/home/user/myfile.txt\" }\n      responses:\n        '200':\n          description: The operation was successful. The file was read.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /fs/write:\n    post:\n      summary: Write a blob to a remote file\n      description: |\n        Writes blob data to a file through an active shell session.\n      operationId: fsWrite\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsWriteRequest'\n            examples:\n              simple:\n                summary: Write simple file\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"blob\": \"854afc45-eadc-49a0-a45d-9fb76a484304\", \"path\": \"/home/user/myfile.txt\" }\n      responses:\n        '200':\n          description: The operation was successful. The file was written.\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /fs/script:\n    post:\n      summary: Create a shell script file from a blob\n      description: |\n        Creates a shell script in the temporary directory of the file system that is access through the shell connection.\n        \n        This can be used to run more complex commands on remote systems.\n      operationId: fsScript\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FsScriptRequest'\n            examples:\n              standard:\n                summary: Standard write\n                value: { \"connection\": \"f0ec68aa-63f5-405c-b178-9a4454556d6b\", \"blob\": \"854afc45-eadc-49a0-a45d-9fb76a484304\" }\n      responses:\n        '200':\n          description: The operation was successful. The script file was created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FsScriptResponse'\n              examples:\n                success:\n                  summary: Success\n                  value: { \"path\": \"/tmp/exec-123.sh\" }\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n  /daemon/version:\n    post:\n      summary: Query daemon version\n      description: Retrieves version information from the daemon\n      operationId: daemonVersion\n      responses:\n        '200':\n          description: The operation was successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DaemonVersionResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\ncomponents:\n  schemas:\n    ShellStartRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - connection\n    ShellStartResponse:\n      type: object\n      properties:\n        shellDialect:\n          type: integer\n          description: The shell dialect\n        osType:\n          type: string\n          description: The general type of operating system\n        osName:\n          type: string\n          description: The display name of the operating system\n        ttyState:\n          type: string\n          description: Whether a tty/pty has been allocated for the connection. If allocated, input and output will be unreliable. It is not recommended to use a shell connection then.\n        temp:\n          type: string\n          description: The location of the temporary directory\n      required:\n        - shellDialect\n        - osType\n        - osName\n        - temp\n    ShellStopRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - connection\n    ShellExecRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n        command:\n          type: string\n          description: The command to execute\n      required:\n        - connection\n        - command\n    ShellExecResponse:\n      type: object\n      properties:\n        exitCode:\n          type: integer\n          description: The exit code of the command\n        stdout:\n          type: string\n          description: The stdout output of the command\n        stderr:\n          type: string\n          description: The stderr output of the command\n      required:\n        - exitCode\n        - stdout\n        - stderr\n    FsBlobResponse:\n      type: object\n      properties:\n        blob:\n          type: string\n          description: The data uuid\n      required:\n        - blob\n    FsWriteRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n        blob:\n          type: string\n          description: The blob uuid\n        path:\n          type: string\n          description: The target filepath\n      required:\n        - connection\n        - blob\n        - path\n    FsReadRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n        path:\n          type: string\n          description: The target file path\n      required:\n        - connection\n        - path\n    FsScriptRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n        blob:\n          type: string\n          description: The blob uuid\n      required:\n        - connection\n        - blob\n    FsScriptResponse:\n      type: object\n      properties:\n        path:\n          type: string\n          description: The generated script file path\n      required:\n        - path\n    ConnectionQueryRequest:\n      type: object\n      properties:\n        categoryFilter:\n          type: string\n          description: The filter string to match categories. Categories are delimited by / if they are hierarchical. The filter supports globs.\n        connectionFilter:\n          type: string\n          description: The filter string to match connection names. Connection names are delimited by / if they are hierarchical. The filter supports globs.\n        typeFilter:\n          type: string\n          description: The filter string to connection types. Every unique type of connection like SSH or docker has its own type identifier that you can match. The filter supports globs.\n      required:\n        - categoryFilter\n        - connectionFilter\n        - typeFilter\n    ConnectionQueryResponse:\n      type: object\n      properties:\n        found:\n          type: array\n          description: The found connections\n          items:\n            type: string\n            description: The connection uuid\n      required:\n        - found\n    ConnectionInfoRequest:\n      type: object\n      properties:\n        connections:\n          type: array\n          description: The connections\n          items:\n            type: string\n            description: The unique id of the connection\n      required:\n        - connections\n    ConnectionInfoResponse:\n      type: array\n      items:\n        type: object\n        description: The array of information for each connection\n        properties:\n          connection:\n            type: string\n            description: The unique id of the connection\n          category:\n            type: array\n            description: The full category path as an array\n            items:\n              type: string\n              description: Individual category name\n          name:\n            type: array\n            description: The full connection name path as an array\n            items:\n              type: string\n              description: Individual connection name\n          type:\n            type: string\n            description: The type identifier of the connection\n          rawData:\n            type: object\n            description: The raw internal configuration data for the connection. The schema for these is internal and should not be relied upon.\n          usageCategory:\n            type: string\n            description: The category of how this connection can be used.\n            enum:\n              - shell\n              - tunnel\n              - script\n              - database\n              - command\n              - desktop\n              - group\n          lastModified:\n            type: string\n            description: The timestamp of when the connection configuration was last modified in ISO 8601\n          lastUsed:\n            type: string\n            description: The timestamp of when the connection was last launched in ISO 8601\n          state:\n            type: object\n            description: The internal persistent state information about the connection\n          cache:\n            type: object\n            description: The temporary cache data for the connection\n        required:\n          - connection\n          - category\n          - name\n          - type\n          - rawData\n          - usageCategory\n          - lastUsed\n          - lastModified\n          - state\n          - cache\n    ConnectionRefreshRequest:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - connection\n    ConnectionAddRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The connection name\n        data:\n          type: object\n          description: The raw connection store data. Schemas for connection types are not documented but you can find the connection data of your existing connections in the xpipe vault.\n        validate:\n          type: boolean\n          description: Whether to perform a connection validation before adding it, i.e., probe the connection first. If validation is enabled and fails, the connection will not be added\n      required:\n        - name\n        - data\n        - validate\n    ConnectionAddResponse:\n      type: object\n      properties:\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - connection\n    ConnectionRemoveRequest:\n      type: object\n      properties:\n        connections:\n          type: array\n          description: The connections to remove\n          items:\n            type: string\n            description: The unique id of the connection\n      required:\n        - connections\n    ConnectionBrowseRequest:\n      type: object\n      properties:\n        directory:\n          type: string\n          description: The optional directory to browse to\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n      - directory\n      - connection\n    ConnectionToggleRequest:\n      type: object\n      properties:\n        state:\n          type: boolean\n          description: The state to switch to\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - state\n        - connection\n    ConnectionTerminalRequest:\n      type: object\n      properties:\n        directory:\n          type: string\n          description: The optional directory to use as the working directory\n        connection:\n          type: string\n          description: The connection uuid\n      required:\n        - directory\n        - connection\n    HandshakeRequest:\n      type: object\n      properties:\n        auth:\n          $ref: '#/components/schemas/AuthMethod'\n        client:\n          $ref: '#/components/schemas/ClientInformation'\n      required:\n        - auth\n        - client\n    HandshakeResponse:\n      type: object\n      properties:\n        sessionToken:\n          type: string\n          description: The generated bearer token that can be used for authentication in this session\n      required:\n        - sessionToken\n    DaemonVersionResponse:\n      type: object\n      properties:\n        version:\n          type: string\n          description: The version of the running daemon\n        canonicalVersion:\n          type: string\n          description: The canonical version of the running daemon\n        buildVersion:\n          type: string\n          description: The build timestamp\n        jvmVersion:\n          type: string\n          description: The version of the Java Virtual Machine in which the daemon is running\n        pro:\n          type: boolean\n          description: Whether the daemon supports professional edition features\n      required:\n        - version\n        - canonicalVersion\n        - buildVersion\n        - jvmVersion\n        - pro\n    AuthMethod:\n      discriminator:\n        propertyName: type\n        mapping:\n          apiKey: '#/components/schemas/ApiKey'\n          local: '#/components/schemas/Local'\n      oneOf:\n        - $ref: '#/components/schemas/ApiKey'\n        - $ref: '#/components/schemas/Local'\n    ApiKey:\n      description: API key authentication\n      type: object\n      properties:\n        type:\n          type: string\n        key:\n          type: string\n          description: The API key\n      required:\n        - key\n        - type\n    Local:\n      description: |\n        Authentication method for local applications. Uses file system access as proof of authentication.\n        \n        You can find the authentication file at:\n        - %TEMP%\\xpipe_auth on Windows\n        - $TMP/xpipe_auth on Linux\n        - $TMPDIR/xpipe_auth on macOS\n        \n        For the PTB releases the file name is changed to xpipe_ptb_auth to prevent collisions.\n        \n        As the temporary directory on Linux is global, the daemon might run as another user and your current user might not have permissions to access the auth file.\n      type: object\n      properties:\n        type:\n          type: string\n        authFileContent:\n          type: string\n          description: The contents of the local file <temp dir>/xpipe_auth. This file is automatically generated when XPipe starts.\n      required:\n        - authFileContent\n        - type\n    ClientInformation:\n      type: object\n      discriminator:\n        propertyName: type\n      properties:\n        type:\n          type: string\n      required:\n        - type\n    ApiClientInformation:\n      description: Provides information about the client that connected to the XPipe API.\n      allOf:\n        - $ref: '#/components/schemas/ClientInformation'\n        - type: object\n          properties:\n            name:\n              type: string\n              description: The name of the client.\n          required:\n            - name\n    ClientErrorResponse:\n      description: Error returned in case of a client exception\n      type: object\n      properties:\n        message:\n          type: string\n          description: The error message\n      required:\n        - message\n    ServerErrorResponse:\n      description: Error returned in case of a server exception with HTTP code 500\n      type: object\n      properties:\n        error:\n          type: object\n          description: The exception information\n          properties:\n            cause:\n              type: object\n              description: The exception cause\n            stackTrace:\n              type: array\n              description: The java stack trace information\n            suppressed:\n              type: array\n              description: Any suppressed exceptions\n            localizedMessage:\n              type: string\n              description: Not used\n            message:\n              type: string\n              description: The error message\n          required:\n            - message\n      required:\n        - error\n  responses:\n    Success:\n      description: The action was successfully performed.\n    BadRequest:\n      description: Bad request. Please check error message and your parameters.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ClientErrorResponse'\n    Unauthorized:\n      description: Authorization failed. Please supply a `Bearer` token via\n        the `Authorization` header.\n    Forbidden:\n      description: Authorization failed. Please supply a valid `Bearer` token via\n        the `Authorization` header.\n    NotFound:\n      description: The requested resource could not be found.\n    InternalServerError:\n      description: Internal error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ServerErrorResponse'\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      description: The bearer token used is the session token that you receive from the handshake exchange.\nsecurity:\n  - bearerAuth: [ ]\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.4150390625,
          "content": "rootProject.name = 'xpipe'\n\ninclude 'core'\ninclude 'beacon'\n\ninclude \"base\"\nproject(\":base\").projectDir = file(\"ext/base\")\n\nfor (def ext : file(\"ext\").list()) {\n    if (ext == 'base') {\n        continue\n    }\n\n    if (file(\"ext/$ext/build.gradle\").exists()) {\n\n        include \"$ext\"\n        project(\":$ext\").projectDir = file(\"ext/$ext\")\n    }\n}\n\ninclude 'app'\nif (file(\"cli\").exists()) {\n    include 'cli'\n}\ninclude 'dist'\n"
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.0068359375,
          "content": "13.4.4\n"
        }
      ]
    }
  ]
}