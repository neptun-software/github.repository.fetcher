{
  "metadata": {
    "timestamp": 1736608962961,
    "page": 171,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "failsafe-lib/failsafe",
      "stars": 4212,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "target/\n*~\n.project\n.classpath\n.settings/\ntest-output/\ndocs/\n.idea\n*.iml\n_site\n.java-version"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.376953125,
          "content": "# 3.3.2\n\n### Bug Fixes\n\n- Issue #365 - Bulkhead policy may drop requests when maxWaitTime is specified.\n\n# 3.3.1\n\n### Improevments\n\n- Issue #358 - Added full java module descriptors to Failsafe jars.\n- Issue #361 - Released execution references inside Failsafe provided CompletableFutures.\n\n# 3.3.0\n\n### API Changes\n\n- `ExecutionContext.getStartTime` now returns a `Instant` rather than `Duration`, and `ExecutionEvent.getStartTime` now returns `Optional<Instant>`.\n- `getFailure`, `getLastFailure`, `recordFailure` and similar methods for recording Exceptions, which were previously deprecated, were removed. Use `getException`, `getLastException`, `recordException`, etc. instead.\n\n# 3.2.4\n\n### Improvements\n\n- Added additional thread safety checks.\n\n# 3.2.3\n\n### Bug Fixes\n\n- Fixed an issue where Timeouts would not fire under certain conditions when used outside a RetryPolicy.\n\n# 3.2.2\n\n### Improvements\n\n- Released [OkHttp](https://square.github.io/okhttp/) module.\n- Released [Retrofit](https://square.github.io/retrofit/) module.\n- Added `Call` support to `FailsafeExecutor`, which can cancel synchrnous calls.\n- Added `onCancel` callback to `ExecutionContext`, which can propagate cancellations.\n\n### SPI Changes\n\n- `SyncExecutionInternal.isInterruptable()` and `.setInterrupted` were removed and `.interrupt()` was added instead to simplify performing an interruption.\n\n# 3.2.1\n\n### Improvements\n\n- Issue #326 - Added support for reserving a `RateLimiter` permit with a wait time.\n\n### API Changes\n\n- Deprecated `ExecutionContext.getLastFailure`, `Execution.recordFailure` and similar methods throughout that API that refer to exceptions as failures. In their place, new methods have been added, such as `getLastException`, `recordException` and so on. This clarifies the difference between an exception and a failure, since an exception may or may not be a failure, depending on the policy configuration.\n- Changed the policy builders to use `CheckedPredicate` and `CheckedBiPredicate` instead of `Predicate` and `BiPredicate`, allowing exceptions to be thrown which are ignored.\n\n# 3.2.0\n\n### Improvements\n\n- Issue #309 - Introduced a `Bulkhead` policy.\n- Issue #318 - Add non-blocking async waiting for rate limiters.\n\n### SPI Changes\n\n- `PolicyExecutor.preExecuteAsync` was introduced to support async pre-execution. This is backwards compatible with `preExecute`.\n\n# 3.1.0\n\n### Improvements\n\n- Issue #308 - Introduced a `RateLimiter` policy.\n\n# 3.0.2\n\n### Bug Fixes\n\n- Issue #311 - `with(Executor)` not working as expected in some cases.\n\n# 3.0.1\n\n### Improvements\n\n- Issue #310 - Added `.builder(PolicyConfig)` methods to each of the policy interfaces, to allow new policies to be built from existing config.\n- Issue #251 - Relaxed the illegal state validation in `RetryPolicyBuilder` to allow different types of delays to be configured, replacing previous configuration. Also removed the requirement that a jitter duration be configured after a delay.\n\n### Bug Fixes\n\n- Issue #215 - Added overflow checking for large user-provided `Duration` values.\n\n# 3.0\n\n### API Changes\n\nThis release introduces some breaking changes to the API:\n\n#### General\n\n- The maven group id for Failsafe has changed to `dev.failsafe`. Be sure to update your build config.\n- All files have been moved to the `dev.failsafe` package. Be sure to update your imports.\n\n#### Policies\n\n- All policies now use a builder API. Using the builder API mostly requires inserting `builder()` and `build()` methods into the call chain for constructing a policy since the actual `with` configuration methods are mostly the same as in 2.x policies, with a few changes described below. Some notes:\n  - A policy builder can be created via `builder()`, ex: `RetryPolicy.builder()`.\n  - `RetryPolicy` and `CircuitBreaker` can also be constructed with default values using `ofDefaults()`.\n  - `Fallback` and `Timeout` offer additional factory methods for creating a a policy with only their required arguments, without using a builder, ex: `Timeout.of(Duration.ofSeconds(10))`. Optional arguments must be specified through a builder, ex: `Timeout.builder(duration).withInterrupt().build()`.\n  - Policy configuration is now accessible via a `policy.getConfig()`.\n\n#### RetryPolicy and CircuitBreaker\n\n- In `RetryPolicyBuilder` and `CircuitBreakerBuilder`: \n  - `withDelay` has been renamed to `withDelayFn`.\n  - `withDelayOn` has been renamed to `withDelayFnOn`.\n  - `withDelayWhen` has been renamed to `withDelayFnWhen`.\n  - The above method signatures have also been changed to accept a `ContextualSupplier` instead of a `DelayFunction`, since it provides access to the same information.\n\n#### CircuitBreaker\n\n- `onOpen`, `onClose`, and `onHalfOpen` methods now accept a `CircuitBreakerStateChangedEvent` argument.\n- `allowsExecution()` was removed in favor of `acquirePermit()` and `tryAcquirePermit()`, which are meant for standalone CircuitBreaker usage.\n\n#### Fallback\n\n- The `Fallback` async factory methods have been removed in favor of a `FallbackBuilder.withAsync()` option.\n\n#### Timeout\n\n- `Timeout.withInterrupt(boolean)` is now `TimeoutBuilder.withInterrupt()`.\n\n#### Execution and AsyncExecution\n\n- The standalone `Execution` API, and the `AsyncExecution` API created via the `FailsafeExecutor.runAsyncExecution` and `getAsyncExecution` methods, have been unified to include:\n  - `record(R, Throwable)`\n  - `recordResult(R)`\n  - `recordException(Throwable)`\n  - `complete()`\n- The previously supported `Execution` and `AsyncExecution` methods for recording a result have been removed. The methods for performing a retry have also been removed. For `Execution`, `isComplete` will indicate whether the execution is complete else if retries can be performed. For `AsyncExecution` retries will automatically be performed, if possible, immediately after a result or failure is recorded.\n- The `Execution` constructor is no longer visible. `Execution` instances must now be constructed via `Execution.of(policies)`.\n- `Execution.getWaitTime()` was renamed to `getDelay()`.\n\n#### Failsafe class\n\n- `Failsafe.with(P[] policies)` was removed in favor of `Failsafe.with(P, P...)`. This should only affect users who were explicitly passing an array to `Failsafe.with`.\n\n### SPI Changes\n\nThe following changes effect the SPI classes, for users who are extending Failsafe with custom schedulers or policies:\n\n- `Scheduler` and `DefauledScheduledFuture` were moved to the `spi` package.\n- `Policy` and `PolicyExecutor` were moved to the `spi` package and some method signatures changed.\n- `ExecutionResult` was moved to the `spi` package and made generic.\n- Several new classes were added to the `spi` package to contain internal execution APIs including `ExecutionInternal`, `SyncExecutionInternal`, and `AsyncExecutionInternal`.\n- `FailsafeFuture` was moved to the SPI package and some method signatures changed.\n\n### Bug Fixes\n\n- Improved the reliability of async executions, cancellations, and Timeouts.\n\n### Improvements\n\n- Issue #47 - All policies and policy config classes are now threadsafe. Policy builders are not threadsafe.\n- Issue #201 - Thread safety is clearly documented in policy, policy config, and policy builder classes.\n- Issue #292 - Created an extensible Policy SPI.\n- Issue #254 - Added an explicit `compose` method to `FailsafeExecutor`.\n- Issue #293 - Added `RetryPolicyBuilder.withBackoff(Duration, Duration)` and `.withDelay(Duration, Duration)`.\n- Issue #221 - `Executor` instances configured via `FailsafeExecutor.with(Executor)` are now used on all executions, including sync executions, and can be used in conjunction with a separately configured `ExecutorService` or `Scheduler` for async executions.\n- Added `FailsafeExecutor.getPolicies()`.\n- Added `isFirstAttempt()` and `isRetry()` to `ExecutionAttempt`, which is available via a few event listeners.\n\n# 2.4.4\n\n### Bug Fixes\n\n- Fixed #298 - `Fallback.onFailedAttempt` not being called correctly\n\n### Improvements\n\n- Fixed #296 - Add Automatic-Module-Name entry to the generated manifest file\n\n### API Changes\n\n- Added a generic result type `R` to `ExecutionContext`, `Execution`, `AsyncExecution`, and `AsyncRunnable`. This ensures that result types are unified across the API. It does mean that there are a few minor breaking changes to the API:\n  - `ContextualSupplier` now has an additional result type parameter `R`. Normally this type is used as lambda parameters where the type is inferred, so most users should not be impacted. But any explicit generic declaration of this type will not compile until the new parameter is added.\n  - `PolicyExecutor`, which is part of the SPI, now accepts an additional result type parameter `R`. This is only relevant for SPI users who are implementing their own Policies.\n- Changed `FailsafeExecutor.getAsyncExecution` to accept `AsyncRunnable` instead of `AsyncSupplier`. This is a breaking change for any `getAsyncExecution` calls, but the fix is to simply remove any `return` statement. The reason for this change is that the provided object does not need to return a result since the result will already be passed asynchronously to one of the `AsyncExecution` `complete` or `retry` methods.\n\n# 2.4.3\n\n### Bug Fixes\n\n- Fixed #289 - Binary imcompatibility with code that was compiled against previous Failsafe versions.\n  \n# 2.4.2\n\n### Improvements\n\n- Added `RetryPolicy.onRetryScheduled` event handler.\n- Added `ExecutionEvent.getExecutionCount()` and `ExecutionContext.getExecutionCount()`, which distinguishes between attempts which may have been rejected and completed executions.\n- Added `Failsafe.none` to create a no-op `FailsafeExecutor`.\n- Improved support for outer Timeouts with retries.\n- Fixed #221 - Added support for `FailsafeExecutor.with(Executor)`.\n- Fixed #277 - Changed `Timeout` to use Failsafe's internal scheduler, so that user provided `ExecutorService` shutdowns do not interfere with timeouts.\n- Fixed #266 - Propagate `Future` cancellation to supplied `CompletionStage` when using `getStageAsync`.\n\n### Bug Fixes\n\n- Fixed #267 - Allow null fallback values to be passed through when using nested fallbacks.\n\n# 2.4.1\n\n### Improvements\n\n- Fixed #234 - An outer `Timeout` should cancel any inner retries.\n\n### API Changes\n\n- Deprecated `Timeout.withCancel(boolean)` and `Timeout.canCancel()`. Timeouts always cancel any executions and inner retries.\n- Added `Timeout.withInterrupt(boolean)` to take the place of `withCancel`.\n- Added `ExecutionEvent.getElapsedAttemptTime()`.\n\n# 2.4.0\n\n### Improvements\n\n- Added time based thresholding support to `CircuitBreaker` via:\n  - `withFailureThreshold(int failureThreshold, Duration failureThresholdingPeriod)`\n  - `withFailureThreshold(int failureThreshold, int failureExecutionThreshold, Duration failureThresholdingPeriod)`\n  - `withFailureRateThreshold(int failureRateThreshold, int failureExecutionThreshold, Duration failureThresholdingPeriod)`\n- Added getters to `CircuitBreaker` for existing count based thresholding settings:\n  - `getFailureThresholdingCapacity()`\n  - `getSuccessThresholdingCapacity()`\n- And added getters to `CircuitBreaker` for new time based thresholding settings:\n  - `getFailureRateThreshold()`\n  - `getFailureExecutionThreshold()`\n  - `getFailureThresholdingPeriod()` \n- Added some new metrics to `CircuitBreaker`:\n  - `getSuccessRate()`\n  - `getFailureRate()`\n  - `getExecutionCount()` \n\n### API Changes\n\n- Changed the return type of `CircuitBreaker`'s `getFailureThreshold()` and `getSuccessThreshold()` from `Ratio` to `int`. `getFailureThresholdingCapacity`, `getFailureRateThreshold`, `getFailureExecutionThreshold`, and `getSuccessThresholdingCapacity` provide additional detail about thresholding configuration.\n- Removed support for the previously deprecated `CircuitBreaker.withTimeout`. The `Timeout` policy should be used instead.\n\n# 2.3.5\n\n### Bug Fixes\n\n- Fixed #242 - Delays not occurring between manually triggered async execution retries.\n\n# 2.3.4\n\n### Improvements\n\n- Re-worked internal threading to only create async threads immediately prior to supplier execution. See #230.\n\n### Bug Fixes\n\n- Fixed #240 - `handleResult(null)` always triggering when an exception is thrown.\n\n# 2.3.3\n\n### Improvements\n\nAdded support for `CompletionStage` to the `Fallback` policy.\n\n### Bug Fixes\n\n- Fixed #224 - Allow combining random delay and jitter.\n\n### API Changes\n\n- `Fallback.apply` was made package private.\n- `DelayablePolicy.computeDelay` was made package private.\n\n# 2.3.2\n\n### Improvements\n\n- Added `CircuitBreaker.getRemainingDelay()`.\n- Added support for `Fallback.VOID`.\n\n### Bug Fixes\n\n- Fixed #216 - Incorrect computation of randomDelay.\n\n# 2.3.1\n\n### Improvements\n\n- Set `setRemoveOnCancelPolicy(true)` for the internal delay scheduler.\n- Added `Scheduler.DEFAULT` to return the default scheduler Failsafe uses.\n\n### Bug Fixes\n\n- Fixed #206 - Problem with Fallback converting from failure to success.\n\n# 2.3.0\n\n### Behavior Changes\n\n- `FailsafeExecutor.get` and `FailsafeExecutor.run` will no longer wrap `Error` instances in `FailsafeException` before throwing.\n\n### Bug Fixes\n\n- Fixed potential race between `Timeout` interrupts and execution completion.\n\n# 2.2.0\n\n### Improvements\n\n- Added a new `Timeout` policy that fails with `TimeoutExceededException`.\n- Added `ExecutionContext.isCancelled()`.\n- Added `ExecutionContext.getElapsedAttemptTime()`.\n- Made the internal delay scheduler more adaptive.\n\n### API Changes\n\n- Deprecated `CircuitBreaker.withTimeout` in favor of using a separate `Timeout` policy.\n\n### Bug Fixes\n\n- Reset interrupt flag when a synchronous execution is interrupted.\n- Improved handling around externally completing a Failsafe `CompletableFuture`.\n\n# 2.1.1\n\n### Improvements\n\n- Added support for `CircuitBreaker.withDelay(DelayFunction)`\n- Added `Fallback.ofException` for returning custom exceptions.\n- Added `ExecutionContext.getLastResult` and `.getLastFailure` to support retries that depend on previous executions\n- Added `CircuitBreakerOpenException.getCircuitBreaker`\n\n### API Changes\n\n- `RetryPolicy.DelayedFunction` was moved to the `net.jodah.failsafe.function` package.\n- Removed `RetryPolicy.canApplyDelayFn`\n\n# 2.1.0\n\n### Improvements\n\n- Added support for `Failsafe.with(List<Policy<R>>)`.\n- Allow `null` `Fallback` values.\n\n### Behavior Changes\n\n- A [standalone](https://github.com/jhalterman/failsafe#execution-tracking) or [async execution](https://github.com/jhalterman/failsafe#asynchronous-api-integration) will only be marked as complete when all policies are complete. `Execution.isComplete` reflects this. \n\n### Bug Fixes\n\n- Issue #190 - Failure listener called on success for async executions.\n- Issue #191 - Add missing listeners to RetryPolicy copy constructor.\n- Issue #192 - Problem with detecting completion when performing async execution.\n\n# 2.0.1\n\n### Improvements\n\n- Added support for using `ExecutorService` via `FailsafeExecutor.with(ExecutorService)`.\n- Added interruptable cancellation for executions ran on `ForkJoinPool` via `CompletableFuture.cancel(true)`.\n\n### Bug Fixes\n\n- Issue #171 - Handle completed futures when using `getStageAsync`.\n\n# 2.0\n\n### Improvements\n\n* [Policy composition](README.md#policy-composition) is now supported.\n* [A Policy SPI](README.md#policy-spi) is now available.\n* Async execution is now supported without requiring that a `ScheduledExecutorService` or `Scheduler` be configured. When no scheduler is configured, the `ForkJoinPool`'s common pool will be used by default.\n* `Fallback` now support async execution via `ofAsync`.\n* `CircuitBreaker` supports execution metrics (see below).\n* Strong typing based on result types is supported throughout the API.\n\n### Behavior Changes\n\n- `RetryPolicy` now has 3 max attempts by default.\n- `CircuitBreaker` now has a 1 minute delay by default.\n\n### JRE Changes\n\n- Java 8+ is now required\n\n### API Changes\n\nFailsafe 2.0 includes a few API changes from 1.x that were meant to consolidate behavior such as the execution APIs, which are now based on common `Policy` implementations, while adding some new features such as `Policy` composition.\n\n- Policies\n  - Policy implementations now take a type parameter `R` that represents the expected result type.\n  - Some of the time related policy configurations have been changed to use `Duration` instead of `long` + `TimeUnit`.\n- Policy configuration\n  - Multiple policies can no longer be configured by chaining multiple `Failsafe.with` calls. Instead they must be supplied in a single `Failsafe.with` call. This is was intentional to require users to consider the ordering of composed policies. See the README section on [policy composition](README.md#policy-composition) for more details.\n- RetryPoilicy\n  - The `retryOn`, `retryIf`, and `retryWhen` methods have been replace with `handleOn`, etc.\n- CircuitBreaker\n  - The `failOn`, `failIf`, and `failWhen` methods have been replace with `handleOn`, etc.\n- Fallbacks\n  - Fallbacks must be wrapped in a `Fallback` instance via `Fallback.of`\n- Failsafe APIs\n  - `Supplier`s are now used instead of `Callable`s.\n  - `java.util.function.Predicate` is used instead of Failsafe's internal Predicate.\n  - `withFallback` is no longer supported. Instead, `Failsafe.with(fallback...)` should be used.\n- Async execution\n  - Async execution is now performed with the `getAsync`, `runAsync`, `getStageAsync`, etc. methods.\n  - Async API integration is now supported via the `getAsyncExecution`, `runAsyncExecution`, etc. methods.\n- Event listeners\n  - Event listeners now all consume a single `ExecutionEvent` object, which includes references to the result, failure, and other information.\n  - Event listeners that are specific to policies, such as `onRetry` for `RetryPolicy`, must now be configured through the policy instance. The top level `Failsafe` API only supports `onComplete`, `onSuccess`, and `onFailure`. Individual `Policy` implementations still support  `onSuccess` and `onFailure` in addition to policy specific events.\n  - The top level `Failsafe.onSuccess` event listener will only be called if *all* configured policies consider an execution to be successful, otherwise `onFailure` will be called. \n  - The `Listeners` class was removed, since it was mostly intended for Java 6/7 users.\n  - The async event listener APIs were removed. Events will always be delivered in the same thread as the execution that they follow or preceed, including for async executions.\n- Java 8\n  - `java.time.Duration` is used instead of Failsafe's own `Duration` impl.\n  - `ChronoUnit` is used instead of `TimeUnit` in policies.\n- `ExecutionContext.getExecutions` is now `getAttemptCount`.\n- `Schedulers.of(ScheduledExecutorService)` was moved to the `Scheduler` interface.\n\n### API Additions\n\n- `CircuitBreaker`\n  - `preExecute` is now exposed to support standalone usage.\n  - Execution metrics are available via `getFailureCount`, `getFailureRatio`, `getSuccessCount`, and `getSuccessRatio`.\n\n### Bug Fixes\n\n* Issue #152 - Min/max delay was not being computed correctly\n\n# 1.1.0\n\n### Bug Fixes\n\n* Issue #115 - Jitter bigger than Delay causes a (random) failure at runtime\n* Issue #116 - Setting jitter without a delay works fine bug\n* Issue #123 - Ability to reset the jitterFactor\n\n### Improvements\n\n* Issue #110 - Added support for computed delays: `RetryPolicy.withDelay(DelayFunction)`\n* Issue #126 - Added support for random delays: `RetryPolicy.withDelay(1, 10, TimeUnit.MILLISECONDS)`\n\n# 1.0.5\n\n### Bug Fixes\n\n* Issue #97 - Should not increment exponential backoff time on first attempt\n* Issue #92 - `handleRetriesExceeded` called incorrectly.\n\n# 1.0.4\n\n### API Changes\n\n* Asynchronous execution attempts no longer throw `CircuitBreakerOpenException` if a configured `CircuitBreaker` is open when an execution is first attempted. Instead, the resulting `Future` is completed exceptionally with `CircuitBreakerOpenException`. See [issue #84](https://github.com/jhalterman/failsafe/issues/84).\n\n### Improvements\n\n* Issue #81 - Added single argument failure configuration to avoid varargs related warnings.\n\n# 1.0.3\n\n### Bug Fixes\n\n* Fixed #76 - Make sure AsyncExecution.completeOrRetry is called when Error is thrown.\n\n# 1.0.2\n\n### Bug Fixes\n\n* Fixed #75 - Incorrect future completion when a fallback is present.\n\n# 1.0.1\n\n### Changes\n\n* `FailsafeException` now has public constructors, for easier mocking and testing.\n\n# 1.0.0\n\n### API Changes\n\n* Failsafe will now only throw `FailsafeException` when an execution fails with a checked `Exception`. See [issue #66](https://github.com/jhalterman/failsafe/issues/66) for details.\n\n# 0.9.5\n\n### Bug Fixes\n\n* Fixed #59 - Classloading issue on Java 6/7.\n\n# 0.9.4\n\n### Bug Fixes\n\n* Fixed #63 - Proper handling of thread interrupts during synchronous execution delays.\n* Fixed #54 - Added hashCode and equals implementations to Duration.\n\n# 0.9.3\n\n### New Features\n\n* Added OSGi support.\n* `FailsafeFutuer.cancel` calls completion handlers. `.get` after cancel throws `CancellationException`.\n\n### Bug Fixes\n\n* Fixed #52 - FailsafeFuture.cancel not working as expected.\n* Fixed #55 - Fallback always called for asynchronous executions.\n\n### API Changes\n\n* `CircuitBreakerOpenException` now extends `FailsafeException`.\n\n# 0.9.2\n\n### New Features\n\n* Various fallback and listener API additions and improvements\n\n# 0.9.1\n\n### New Features\n\n* Added support for retry delay [jitter](https://github.com/jhalterman/failsafe#retry-policies).\n\n# 0.9.0\n\n### New Features\n\n* Added support for [fallbacks](https://github.com/jhalterman/failsafe#fallbacks).\n\n### Bug Fixes\n\n* Fixed issue #36 - Failed attempt listener not always called on completion.\n* Fixed issue #34 - CircuitBreaker should default to closed state.\n\n# 0.8.3\n\n### Bug Fixes\n\n* Fixed #33 - `CircuitBreaker` not decrementing currentExections when under load\n\n# 0.8.2\n\n### New Features\n\n* Added support for `onRetriesExceeded` listeners.\n* `RetryPolicy` can be extended (it's no longer marked as final)\n\n### Bug Fixes\n\n* Abort should not call failure listeners.\n\n# 0.8.1\n\n### New Features\n\n* Simplified listeners API.\n* Added support for failure listeners via `Failsafe.with(...).onFailure(e -> {})`.\n* Added `onAbort` listeners.\n* Added additional async listeners.\n* `RetryPolicy` and `CircuitBreaker` now support multiple configuration rules. Ex: `new RetryPolicy().retryWhen(null).retryWhen(\"\")`. If any rule matches then the policy is matched.\n\n### API Changes\n\n* Added top level support for listener registration via `Failsafe.with(...).onXxx`. The `Listeners` class is now only meant for Java 6 and 7 usage via method overrides.\n* Removed listener registration from `Listeners` class.\n* Removed `AsyncListeners` class. \n* Removed listener registration from `FailsafeFuture` class.\n\n# 0.8.0\n\n### New Features\n\n* Added support for circuit breakers\n\n### API Changes\n\n* Project renamed from Recurrent to Failsafe\n\n# 0.7.1\n\n### Bug Fixes\n\n* Added better support for scheduling failure handling\n* Fixed RetryPolicy failure assignability checking\n\n### API Changes\n\n* Invocation APIs were renamed to Execution to better align with the `java.util.concurrent` naming.\n* `InvocationStats.getAttemptCount()` was renamed to `ExecutionStats.getExecutions()`\n\n# 0.7.0\n\n### New Features\n\n* Added additional contextual callable and runnable support\n\n### API Changes\n\n* Changed to a new API entry point: `Recurrent.with`.\n* Added `.with` for configuring listeners.\n\n\n# 0.6.0\n\n### New Features\n\n* Added `RetryPolicy.abortOn`, `abortWhen` and `abortIf` methods to abort retries when matched.\n\n### API Changes\n\n* `RetryPolicy.retryWhen` was renamed to `retryIf` for retrying if a `Predicate` is matched.\n* `RetryPolicy.retryFor` was renamed to `retryWhen` for retrying when a result is matched.\n* `Scheduler` and `Schedulers` were moved to `net.jodah.recurrent.util.concurrent`.\n\n# 0.5.0\n\n### New Features\n\n* Added support for synchronous and asynchronous event listeners\n* Added support for `CheckedRunnable`\n\n### API Changes\n\n* The `Recurrent.run` methods now require a `CheckedRunnable` rather than `Runnable`. This allows Recurrent to be used on code that throws checked exceptions without having to wrap the code in try/catch blocks.\n* The synchronous `Recurrent.run` and `Recurrent.get` methods will throw a `RecurrentException` if a failure occurs and the retry policy is exceeded.\n\n# 0.4.0\n\n### New Features\n\n* Added better support for invocation tracking\n\n### API Changes\n\n* New Invocation and `AsyncInvocation` APIs\n\n# 0.3.3\n\n### New Features\n\n* Add `Scheduler` API\n* Make `RetryPolicy` copyable\n\n### Behavior Changes\n\n* Require `ContextualCallable` and `ContextualRunnable` to be manually retried\n* Add support for checking multiple retry policy conditions\n\n### API Changes\n\n* Make ContextualRunnable throw Exception\n\n# 0.3.2\n\n### New Features\n\n* Add support for retrying when an invocation result matches a policy\n\n# 0.3.1\n\n### New Features\n\n* Added support for seprate retry tracking.\n\n# 0.3.0\n\n* Initial Release"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4521484375,
          "content": "### Reporting Bugs\n\nBug reports are welcome and appreciated. When filing an issue, please include a small code snippet that demonstrates the bug if you can, else include a good description of how to reproduce the bug.\n\n### Contributing Bug Fixes\n\nPull requests for bugs related to existing features are always welcome.\n\n### Requesting Features\n\nFeature requests are welcome by filing an issue. In general we try to make sure that new features fit well with the existing ones and that they're broadly useful. If your feature will require new APIs or API changes, feel free to share an example of how you think the API should look.\n\n### Contributing Features\n\nIf you have an idea for a new feature, the best place to start is not with a pull request but rather  by opening an issue describing how the feature or API change should work and why you think it is necessary. The reason we suggest starting with an issue rather than a pull request is that we like to make sure every feature and API change is widely useful and a good fit for the library, and would hate to reject a PR that someone puts a lot of time into if it's not a good fit.\n\nIf your feature idea sounds good, you can then submit a PR, else we'll schedule the feature for implementation.\n\n### Contributing Documentation or Website Fixes\n\nFixes to the Failsafe documentation or website are welcome. Just clone the [website repo](https://github.com/failsafe-lib/failsafe-lib.github.io) and feel free to submit a pull request.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.763671875,
          "content": "# Failsafe\n\n[![Build Status](https://github.com/failsafe-lib/failsafe/workflows/build/badge.svg)](https://github.com/failsafe-lib/failsafe/actions)\n[![Maven Central](https://img.shields.io/maven-central/v/dev.failsafe/failsafe.svg?maxAge=60&colorB=53C92E)](https://maven-badges.herokuapp.com/maven-central/dev.failsafe/failsafe)\n[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n[![Slack](https://img.shields.io/badge/slack-failsafe-brightgreen.svg?logo=slack)](https://failsafe-lib.slack.com)\n[![JavaDoc](https://img.shields.io/maven-central/v/dev.failsafe/failsafe.svg?maxAge=60&label=javadoc)](https://failsafe.dev/javadoc/core)\n\nFailsafe is a lightweight, zero-dependency library for handling failures in Java 8+, with a concise API for handling everyday use cases and the flexibility to handle everything else. It works by wrapping executable logic with one or more resilience policies, which can be combined and composed as needed. \n\nPolicies include [Retry](https://failsafe.dev/retry/), [CircuitBreaker](https://failsafe.dev/circuit-breaker/), [RateLimiter](https://failsafe.dev/rate-limiter/), [Timeout](https://failsafe.dev/timeout/), [Bulkhead](https://failsafe.dev/bulkhead/), and [Fallback](https://failsafe.dev/fallback/). Additional modules include [OkHttp](https://failsafe.dev/okhttp/) and [Retrofit](https://failsafe.dev/retrofit/).\n\n## Usage\n\nVisit [failsafe.dev](https://failsafe.dev) for usage info, docs, and additional resources.\n\n## Contributing\n\nCheck out the [contributing guidelines](https://github.com/failsafe-lib/failsafe/blob/master/CONTRIBUTING.md).\n\n## License\n\nCopyright Jonathan Halterman and friends. Released under the [Apache 2.0 license](https://github.com/failsafe-lib/failsafe/blob/master/LICENSE)."
        },
        {
          "name": "VERSIONING.md",
          "type": "blob",
          "size": 0.4404296875,
          "content": "### Versioning\n\nFailsafe follows MAJOR.MINOR.PATCH versioning where:\n\n- MAJOR versions contain significant new features and potentially significant incompatible API changes.\n- MINOR versions contain new features and potentially minor yet incompatible API changes.\n- PATCH versions contain bug fixes and minor new features that are fully backwards compatible.\n\nAll versions, new features, and API changes are described in the [CHANGELOG](CHANGELOG.md)."
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 8.951171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <packaging>pom</packaging>\n  <groupId>dev.failsafe</groupId>\n  <artifactId>failsafe-parent</artifactId>\n  <version>3.3.3-SNAPSHOT</version>\n  <name>Failsafe Parent</name>\n  <description>Fault tolerance and resilience patterns</description>\n  <url>https://failsafe.dev</url>\n\n  <licenses>\n    <license>\n      <name>Apache License, Version 2.0</name>\n      <url>http://apache.org/licenses/LICENSE-2.0</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <developers>\n    <developer>\n      <name>Jonathan Halterman</name>\n      <url>http://jodah.net</url>\n    </developer>\n  </developers>\n\n  <scm>\n    <connection>scm:git:git@github.com:failsafe-lib/failsafe.git</connection>\n    <developerConnection>scm:git:git@github.com:failsafe-lib/failsafe.git</developerConnection>\n    <url>https://github.com/failsafe-lib/failsafe</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <properties>\n    <java.module.name>undefined</java.module.name>\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n  </properties>\n\n  <modules>\n    <module>core</module>\n    <module>modules/okhttp</module>\n    <module>modules/retrofit</module>\n  </modules>\n\n  <dependencies>\n    <!-- Test Dependencies -->\n    <dependency>\n      <groupId>org.testng</groupId>\n      <artifactId>testng</artifactId>\n      <version>6.9.10</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <version>4.2.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>net.jodah</groupId>\n      <artifactId>concurrentunit</artifactId>\n      <version>0.4.4</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.10.1</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.22.2</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>3.1.1</version>\n        </plugin>\n        <plugin>\n          <groupId>org.moditect</groupId>\n          <artifactId>moditect-maven-plugin</artifactId>\n          <version>1.0.0.RC2</version>\n          <executions>\n            <execution>\n              <id>add-module-infos</id>\n              <phase>package</phase>\n              <goals>\n                <goal>add-module-info</goal>\n              </goals>\n              <configuration>\n                <jvmVersion>9</jvmVersion>\n                <overwriteExistingFiles>true</overwriteExistingFiles>\n                <module>\n                  <moduleInfo>\n                    <name>${java.module.name}</name>\n                    <!-- export everything -->\n                    <exports>*;</exports>\n                    <!-- declare services consumed by the artifact -->\n                    <addServiceUses>true</addServiceUses>\n                  </moduleInfo>\n                </module>\n                <jdepsExtraArgs>\n                  <arg>--multi-release=9</arg>\n                </jdepsExtraArgs>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <trimStackTrace>false</trimStackTrace>\n          <properties>\n            <property>\n              <name>listener</name>\n              <value>dev.failsafe.testing.TestCaseLogger</value>\n            </property>\n          </properties>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-release-plugin</artifactId>\n        <configuration>\n          <releaseProfiles>release</releaseProfiles>\n          <arguments>-Prelease</arguments>\n          <mavenExecutorId>forked-path</mavenExecutorId>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n          </archive>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <version>5.1.3</version>\n        <extensions>true</extensions>\n        <executions>\n          <execution>\n            <id>bundle-manifest</id>\n            <phase>process-classes</phase>\n            <goals>\n              <goal>manifest</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <supportedProjectTypes>\n            <supportedProjectType>jar</supportedProjectType>\n            <supportedProjectType>bundle</supportedProjectType>\n          </supportedProjectTypes>\n          <instructions>\n            <Implementation-Title>${project.description}</Implementation-Title>\n            <Implementation-Version>${project.version}</Implementation-Version>\n            <Bundle-Name>Failsafe</Bundle-Name>\n            <Bundle-SymbolicName>dev.failsafe</Bundle-SymbolicName>\n            <Automatic-Module-Name>dev.failsafe</Automatic-Module-Name>\n            <Export-Package>dev.failsafe*;version=1.0</Export-Package>\n            <Import-Package>*</Import-Package>\n          </instructions>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <version>2.10.4</version>\n        <executions>\n          <execution>\n            <id>attach-javadocs</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <author>false</author>\n          <show>protected</show>\n          <excludePackageNames>*.internal</excludePackageNames>\n          <detectOfflineLinks />\n          <additionalparam>\n            -Xdoclint:none\n            -notimestamp\n            -link http://docs.oracle.com/javase/8/docs/api/\n            -link https://failsafe.dev/javadoc/core/\n          </additionalparam>\n        </configuration>\n      </plugin>\n\n      <!-- Coverage -->\n      <plugin>\n        <groupId>org.eluder.coveralls</groupId>\n        <artifactId>coveralls-maven-plugin</artifactId>\n        <version>3.1.0</version>\n      </plugin>\n      <plugin>\n        <groupId>org.jacoco</groupId>\n        <artifactId>jacoco-maven-plugin</artifactId>\n        <version>0.8.7</version>\n        <executions>\n          <execution>\n            <id>prepare-agent</id>\n            <goals>\n              <goal>prepare-agent</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.1.2</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar-no-fork</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.1</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <version>1.6.7</version>\n            <extensions>true</extensions>\n            <configuration>\n              <serverId>sonatype-nexus-staging</serverId>\n              <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>\n              <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-release-plugin</artifactId>\n            <configuration>\n              <goals>deploy nexus-staging:release</goals>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        }
      ]
    }
  ]
}