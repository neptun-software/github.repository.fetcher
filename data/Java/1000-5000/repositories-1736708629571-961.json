{
  "metadata": {
    "timestamp": 1736708629571,
    "page": 961,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FasterXML/jackson-core",
      "stars": 2272,
      "defaultBranch": "2.19",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0927734375,
          "content": "# Do not merge `pom.xml` from older version, as it will typically conflict\n\npom.xml merge=ours\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# use glob syntax.\nsyntax: glob\n*.class\n*~\n*.bak\n*.off\n*.old\n*.java.orig\n.DS_Store\n\n# building\n/target\n.mvn/wrapper/maven-wrapper.jar\n\n# Eclipse\n.classpath\n.project\n.settings\n\n# IDEA\n*.iml\n*.ipr\n*.iws\n/.idea/\ndependency-reduced-pom.xml\n\n# Other/local\n/gh-workflows\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.662109375,
          "content": "# Overview\n\nThis project contains core low-level incremental (\"streaming\") parser and generator abstractions used by\n[Jackson Data Processor](https://github.com/FasterXML/jackson).\nIt also includes the default implementation of handler types (parser, generator) that handle JSON format.\nThe core abstractions are not JSON specific, although naming does contain 'JSON' in many places, due to historical reasons. Only packages that specifically contain word 'json' are JSON-specific.\n\nThis package is the base on which [Jackson data-binding](https://github.com/FasterXML/jackson-databind) package builds on.\nIt is licensed under [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n\nAlternate data format implementations (like\n[Smile (binary JSON)](https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile),\n[XML](https://github.com/FasterXML/jackson-dataformat-xml),\n[CSV](https://github.com/FasterXML/jackson-dataformats-text/tree/master/csv),\n[Protobuf](https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf),\nand [CBOR](https://github.com/FasterXML/jackson-dataformats-binary/tree/master/cbor))\nalso build on this base package, implementing the core interfaces,\nmaking it possible to use standard [data-binding package](https://github.com/FasterXML/jackson-databind) regardless of underlying data format.\n\nProject contains versions 2.0 and above: source code for earlier (1.x) versions can be found from\n[Jackson-1](../../../jackson-1) github repo.\n\n## Status\n\n| Type | Status |\n| ---- | ------ |\n| Build (CI) | [![Build (github)](https://github.com/FasterXML/jackson-core/actions/workflows/main.yml/badge.svg)](https://github.com/FasterXML/jackson-core/actions/workflows/main.yml) |\n| Artifact | [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.fasterxml.jackson.core/jackson-core) |\n| OSS Sponsorship | [![Tidelift](https://tidelift.com/badges/package/maven/com.fasterxml.jackson.core:jackson-core)](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-core?utm_source=maven-com-fasterxml-jackson-core-jackson-core&utm_medium=referral&utm_campaign=readme) |\n| Javadocs | [![Javadoc](https://javadoc.io/badge/com.fasterxml.jackson.core/jackson-core.svg)](https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core) |\n| Code coverage (2.18) | [![codecov.io](https://codecov.io/github/FasterXML/jackson-core/coverage.svg?branch=2.18)](https://codecov.io/github/FasterXML/jackson-core?branch=2.18) |\n| CodeQ (ClusterFuzz) | [![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/jackson-core.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:jackson-core) |\n| OpenSSF Score | [![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/FasterXML/jackson-core/badge)](https://securityscorecards.dev/viewer/?uri=github.com/FasterXML/jackson-core) |\n\n# Get it!\n\n## Maven\n\nFunctionality of this package is contained in \nJava package `com.fasterxml.jackson.core`.\n\nTo use the package, you need to use following Maven dependency:\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-core</artifactId>\n    <version>${jackson.version.core}</version>\n</dependency>\n```\n\nor download jars from Maven repository or links on [Wiki](../../wiki).\nCore jar is a functional OSGi bundle, with proper import/export declarations.\n\nPackage has no external dependencies, except for testing (which uses `JUnit`).\n\n## Non-Maven\n\nFor non-Maven use cases, you download jars from [Central Maven repository](https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/).\n\nCore jar is also a functional OSGi bundle, with proper import/export declarations, so it can be use on OSGi container as is.\n\nJackson 2.10 and above include `module-info.class` definitions so the jar is also a proper Java module (JPMS).\n\nJackson 2.12 and above include additional Gradle 6 Module Metadata for version alignment with Gradle.\n\n-----\n# Use it!\n\n## General\n\nUsage typically starts with creation of a reusable (and thread-safe, once configured) `JsonFactory` instance:\n\n```java\n// Builder-style since 2.10:\nJsonFactory factory = JsonFactory.builder()\n// configure, if necessary:\n     .enable(JsonReadFeature.ALLOW_JAVA_COMMENTS)\n     .build();\n\n// older 2.x mechanism, still supported for 2.x\nJsonFactory factory = new JsonFactory();\n// configure, if necessary:\nfactory.enable(JsonReadFeature.ALLOW_JAVA_COMMENTS);\n```\n\nAlternatively, you have an `ObjectMapper` (from [Jackson Databind package](https://github.com/FasterXML/jackson-databind)) handy; if so, you can do:\n\n```java\nJsonFactory factory = objectMapper.getFactory();\n```\n\n## Usage, simple reading\n\nAll reading is by using `JsonParser` (or its sub-classes, in case of data formats other than JSON),\ninstance of which is constructed by `JsonFactory`.\n\nAn example can be found from [Reading and Writing Event Streams](http://www.cowtowncoder.com/blog/archives/2009/01/entry_132.html)\n\n## Usage, simple writing\n\nAll writing is by using `JsonGenerator` (or its sub-classes, in case of data formats other than JSON),\ninstance of which is constructed by `JsonFactory`:\n\nAn example can be found from [Reading and Writing Event Streams](http://www.cowtowncoder.com/blog/archives/2009/01/entry_132.html)\n\n## Processing limits\n\nStarting with [Jackson 2.15](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.15), Jackson has configurable limits for some aspects of input decoding and output generation.\n\nImplemented limits are:\n\n* Length are expressed in input/output units -- `byte`s or `char`s -- depending on input source\n* Defined as longest allowed length, but not necessarily imposed at 100% accuracy: that is, if maximum allowed length is specified as 1000 units, something with length of, say 1003 may not cause exception (but 1500 would typically do)\n* Defined using new `StreamReadConstraints` / `StreamWriteConstraints` classes, configurable on per-`JsonFactory` basis\n* Main focus is to reduce likelihood of excessive memory usage/retention and/or processing costs; not validation\n\n### Input parsing limits\n\n* Maximum Number token length (2.15+): (see https://github.com/FasterXML/jackson-core/issues/815)\n    * Default: Maximum 1000 for both integral and floating-point numbers.\n* Maximum String value length (2.15+): (see https://github.com/FasterXML/jackson-core/issues/863)\n    * Default: 20_000_000 (20 million) (since 2.15.1; 2.15.0 had lower limit, 5 million)\n* Maximum Input nesting depth (2.15+): (see https://github.com/FasterXML/jackson-core/pull/943)\n    * Default: 1000 levels\n* Maximum Property name length (2.16+): (see https://github.com/FasterXML/jackson-core/issues/1047)\n    * Default: 50,000\n* Maximum Document length (2.16+): (see https://github.com/FasterXML/jackson-core/issues/1046)\n    * Default: Unlimited (-1)\n\n### Output generation limits\n\n* Maximum Output nesting depth (2.16+): (see https://github.com/FasterXML/jackson-core/pull/1055)\n    * Default: 1000 levels\n\n### Re-configuring limits\n\nYou can change per-factory limits as follows:\n\n```java\nJsonFactory f = JsonFactory.builder()\n  .streamReadConstraints(StreamReadConstraints.builder().maxDocumentLength(10_000_000L).build())\n  .streamReadConstraints(StreamReadConstraints.builder().maxNumberLength(250).build())\n  .streamWriteConstraints(StreamWriteConstraints.builder().maxNestingDepth(2000).build())\n  .build();\n```\n\n## Error Report Configuration\n\nStarting with [Jackson 2.16](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.16), Jackson offers configurable\nbehavior around error-reporting.\n\nCurrently supported configuration options are:\n\n- `maxErrorTokenLength` : Maximum length of token to include in error messages (2.16+): (see [#1066](https://github.com/FasterXML/jackson-core/issues/1066))\n- `maxRawContentLength` : Maximum length of raw content to include in error messages (2.16+): (see [#1066](https://github.com/FasterXML/jackson-core/issues/1066))\n\n... see [Example](#example) section below.\n\n### Example\n\n```java\nJsonFactory f = JsonFactory.builder()\n .errorReportConfiguration(ErrorReportConfiguration.builder()\n   .maxErrorTokenLength(1004)\n   .maxRawContentLength(2008)\n   .build()\n ).build();\n```\n\n-----\n\n## Compatibility\n\n### JDK\n\nJackson-core package baseline JDK requirement:\n\n* Versions 2.0 - 2.13 require JDK 6\n* Versions 2.14 and above require JDK 8\n\n### Android\n\nList is incomplete due to recent addition of compatibility checker.\n\n* 2.13: Android SDK 19+\n* 2.14 and above: Android SDK 26+\n\nfor information on Android SDK versions to Android Release names see [Android version history](https://en.wikipedia.org/wiki/Android_version_history)\n\n-----\n\n## Release Process\n\nStarting with Jackson 2.15, releases of this module will be [SLSA](https://slsa.dev/) compliant: see issue #844 for details.\n\nRelease process is triggered by\n\n    ./release.sh\n\nscript which uses Maven Release plug-in under the hood (earlier release plug-in was directly invoked).\n\n-----\n\n## Support\n\n### Community support\n\nJackson components are supported by the Jackson community through mailing lists, Gitter forum, Github issues. See [Participation, Contributing](../../../jackson#participation-contributing) for full details.\n\n### Enterprise support\n\nAvailable as part of the [Tidelift](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-databind) Subscription.\n\nThe maintainers of `jackson-core` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-core?utm_source=maven-com-fasterxml-jackson-core-jackson-core&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n-----\n\n# Further reading\n\n## Differences from Jackson 1.x\n\nProject contains versions 2.0 and above: source code for the latest 1.x version (1.9.13) is available from\n[FasterXML/jackson-1](https://github.com/FasterXML/jackson-1) repo (unmaintained).\n\nNote that the main differences compared to 1.0 core jar are:\n\n* Maven build instead of Ant\n* Annotations carved out to a separate package (that this package depends on)\n* Java package is now `com.fasterxml.jackson.core` (instead of `org.codehaus.jackson`)\n\n## Links\n\n* Project  [Wiki](../../wiki) has JavaDocs and links to downloadable artifacts\n* [Jackson (portal)](https://github.com/FasterXML/jackson) has links to all FasterXML-maintained \"official\" Jackson components\n* [Jackson Docs](https://github.com/FasterXML/jackson-docs) is the portal/hub for all kinds of Jackson documentation\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.5849609375,
          "content": "# Security Policy\n\nLast Updated: 2022-09-20\n\n## Supported Versions\n\nCurrent status of open branches, with new releases, can be found from [Jackson Releases](https://github.com/FasterXML/jackson/wiki/Jackson-Releases)\nwiki page\n\n## Reporting a Vulnerability\n\nThe recommended mechanism for reporting possible security vulnerabilities follows\nso-called \"Coordinated Disclosure Plan\" (see [definition of DCP](https://vuls.cert.org/confluence/display/Wiki/Coordinated+Vulnerability+Disclosure+Guidance)\nfor general idea). The first step is to file a [Tidelift security contact](https://tidelift.com/security):\nTidelift will route all reports via their system to maintainers of relevant package(s), and start the\nprocess that will evaluate concern and issue possible fixes, send update notices and so on.\nNote that you do not need to be a Tidelift subscriber to file a security contact.\n\nAlternatively you may also report possible vulnerabilities to `info` at fasterxml dot com\nmailing address. Note that filing an issue to go with report is fine, but if you do that please\nDO NOT include details of security problem in the issue but only in email contact.\nThis is important to give us time to provide a patch, if necessary, for the problem.\n\n## Verifying Artifact signatures\n\n(for more in-depth explanation, see [Apache Release Signing](https://infra.apache.org/release-signing#keys-policy) document)\n\nTo verify that any given Jackson artifact has been signed with a valid key, have a look at `KEYS` file of the main Jackson repo:\n\nhttps://github.com/FasterXML/jackson/blob/master/KEYS\n\nwhich lists all known valid keys in use.\n"
        },
        {
          "name": "create-test-report.sh",
          "type": "blob",
          "size": 0.0390625,
          "content": "#!/bin/sh\n\nmvn surefire-report:report  \n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.0419921875,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`\\\\unset -f command; \\\\command -v java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.7587890625,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Maven Start Up Batch script\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM M2_HOME - location of maven2's installed home dir\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho.\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho.\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %DOWNLOAD_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 12.5712890625,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- This module was also published with a richer model, Gradle metadata,  -->\n  <!-- which should be used instead. Do not delete the following line which  -->\n  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->\n  <!-- that they should prefer consuming it instead. -->\n  <!-- do_not_remove: published-with-gradle-metadata -->\n  <modelVersion>4.0.0</modelVersion> \n  <parent>\n    <groupId>com.fasterxml.jackson</groupId>\n    <artifactId>jackson-base</artifactId>\n    <version>2.19.0-SNAPSHOT</version>\n  </parent>\n  <groupId>com.fasterxml.jackson.core</groupId>\n  <artifactId>jackson-core</artifactId>\n  <name>Jackson-core</name>\n  <version>2.19.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n  <description>Core Jackson processing abstractions (aka Streaming API), implementation for JSON</description>\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <inceptionYear>2008</inceptionYear>\n  <url>https://github.com/FasterXML/jackson-core</url>\n  <scm>\n    <connection>scm:git:git@github.com:FasterXML/jackson-core.git</connection>\n    <developerConnection>scm:git:git@github.com:FasterXML/jackson-core.git</developerConnection>\n    <url>https://github.com/FasterXML/jackson-core</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <properties>\n    <!-- 03-May-2022: Change Java compatibility for Jackson-Core 2.14 from Java6 to Java8,\n       still use Moditect to get JDK9+ module info support; need newer bundle plugin as well\n       (can just defaults from `jackson-parent`)\n      -->\n\n    <!-- 16-Nov-2022, tatu: [core#838] Verify Android SDK compatibility.\n         Baseline compatibility:\n         * Jackson 2.13 compatible with Android SDK 19 and up\n         * Jackson 2.14 - 2.18 compatible with Android SDK 26 and up\n      -->\n    <version.android.sdk>26</version.android.sdk>\n    <version.android.sdk.signature>0.5.1</version.android.sdk.signature>\n    <version.plugin.animal-sniffer>1.23</version.plugin.animal-sniffer>\n\n    <osgi.export>com.fasterxml.jackson.core;version=${project.version},\ncom.fasterxml.jackson.core.*;version=${project.version}\n    </osgi.export>\n    <osgi.import>!ch.randelshofer.fastdoubleparser, *</osgi.import>\n\n    <!-- Generate PackageVersion.java into this directory. -->\n    <packageVersion.dir>com/fasterxml/jackson/core/json</packageVersion.dir>\n    <packageVersion.package>${project.groupId}.json</packageVersion.package>\n\n    <!-- for Reproducible Builds -->\n    <project.build.outputTimestamp>2024-09-27T01:42:02Z</project.build.outputTimestamp>\n  </properties>\n\n  <!-- Alas, need to include snapshot reference since otherwise can not find\n       snapshot of parent... -->\n  <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <releases><enabled>false</enabled></releases>\n      <snapshots><enabled>true</enabled></snapshots>\n    </repository>\n  </repositories>\n\n  <build>\n\n    <plugins>\n\n      <!-- 26-Aug-2019, tatu: JaCoCo for code coverage -->\n      <plugin>\n\t<groupId>org.jacoco</groupId>\n\t<artifactId>jacoco-maven-plugin</artifactId>\n\t<executions>\n          <execution>\n            <goals>\n              <goal>prepare-agent</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>report</id>\n            <phase>test</phase>\n            <goals>\n              <goal>report</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <!-- Important: enable enforcer plug-in: -->\n      <plugin>\n        <artifactId>maven-enforcer-plugin</artifactId>\n\t<executions> <!-- or?  combine.children=\"merge\"> -->\n          <execution>\n            <id>enforce-properties</id>\n\t        <phase>validate</phase>\n            <goals><goal>enforce</goal></goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-site-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>${version.plugin.surefire}</version>\n        <configuration>\n          <redirectTestOutputToFile>${surefire.redirectTestOutputToFile}</redirectTestOutputToFile>\n<!-- 13-Apr-2018, tatu: for debugging [core#400]\n          <systemPropertyVariables>\n<com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers>true</com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers>\n          </systemPropertyVariables>\n-->\n        </configuration>\n      </plugin>\n      <!-- settings are fine, but needed to trigger execution! -->\n      <plugin>\n        <groupId>com.google.code.maven-replacer-plugin</groupId>\n        <artifactId>replacer</artifactId>\n      </plugin>\n\n      <!-- 04-Mar-2019, tatu: Add rudimentary JDK9+ module info. To build with JDK 8\n             will have to use `moduleInfoFile` as anything else requires JDK 9+\n        -->\n      <plugin>\n        <groupId>org.moditect</groupId>\n        <artifactId>moditect-maven-plugin</artifactId>\n      </plugin>\n      <!-- 03-Nov-2020, tatu: Add LICENSE from main level -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n      </plugin>\n      \n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-shade-plugin</artifactId>\n        <configuration>\n          <promoteTransitiveDependencies>true</promoteTransitiveDependencies>\n          <createDependencyReducedPom>true</createDependencyReducedPom>\n          <minimizeJar>true</minimizeJar>\n        </configuration>\n        <executions>\n          <execution>\n            <id>shade-jackson-core</id>\n            <phase>package</phase>\n            <goals>\n              <goal>shade</goal>\n            </goals>\n            <configuration>\n              <filters>\n                <filter>\n                  <artifact>ch.randelshofer:fastdoubleparser</artifact>\n                  <excludes>\n                    <exclude>META-INF/versions/**/module-info.*</exclude>\n                  </excludes>\n                </filter>\n              </filters>\n              <relocations>\n                <relocation>\n                  <pattern>ch/randelshofer/fastdoubleparser</pattern>\n                  <!-- 04-May-2024, tatu: [core#1264] Shade with version-specific package\n                     to prevent reuse by downstream deps.\n                     NOTE: `project.version.underscore' comes from `jackson-base/pom.xml`\n                     parent pom\n                    -->\n                  <shadedPattern>com/fasterxml/jackson/core/internal/shaded/fdp/v${project.version.underscore}</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/LICENSE</pattern>\n                  <shadedPattern>META-INF/FastDoubleParser-LICENSE</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/NOTICE</pattern>\n                  <shadedPattern>META-INF/FastDoubleParser-NOTICE</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/jackson-core-LICENSE</pattern>\n                  <shadedPattern>META-INF/LICENSE</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/jackson-core-NOTICE</pattern>\n                  <shadedPattern>META-INF/NOTICE</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/versions/11/ch/randelshofer/fastdoubleparser</pattern>\n                  <shadedPattern>META-INF/versions/11/com/fasterxml/jackson/core/internal/shaded/fdp/v${project.version.underscore}</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/versions/17/ch/randelshofer/fastdoubleparser</pattern>\n                  <shadedPattern>META-INF/versions/17/com/fasterxml/jackson/core/internal/shaded/fdp/v${project.version.underscore}</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/versions/21/ch/randelshofer/fastdoubleparser</pattern>\n                  <shadedPattern>META-INF/versions/21/com/fasterxml/jackson/core/internal/shaded/fdp/v${project.version.underscore}</shadedPattern>\n                </relocation>\n                <relocation>\n                  <pattern>META-INF/versions/22/ch/randelshofer/fastdoubleparser</pattern>\n                  <shadedPattern>META-INF/versions/22/com/fasterxml/jackson/core/internal/shaded/fdp/v${project.version.underscore}</shadedPattern>\n                </relocation>\n              </relocations>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>de.jjohannes</groupId>\n        <artifactId>gradle-module-metadata-maven-plugin</artifactId>\n\t<!-- 27-Apr-2023, tatu: [core#999]: Need to exclude shaded FDP\n\t   dependency from GMM\n\t  -->\n\t<configuration>\n          <removedDependencies>\n            <dependency>\n              <groupId>ch.randelshofer</groupId>\n              <artifactId>fastdoubleparser</artifactId>\n            </dependency>\n          </removedDependencies>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <Multi-Release>true</Multi-Release>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n\n      <!-- 23-Mar-2023, tatu: [core#965] Need to put back Gradle module metadata marker -->\n      <plugin>\n        <groupId>io.github.floverfelt</groupId>\n        <artifactId>find-and-replace-maven-plugin</artifactId>\n        <version>1.1.0</version>\n        <executions>\n          <execution>\n            <id>exec</id>\n            <phase>package</phase>\n            <goals>\n              <goal>find-and-replace</goal>\n            </goals>\n            <configuration>\n              <replacementType>file-contents</replacementType>\n              <baseDir>${basedir}</baseDir>\n              <findRegex><![CDATA[<modelVersion>4.0.0</modelVersion>]]></findRegex>\n              <fileMask>dependency-reduced-pom.xml</fileMask>\n              <replaceValue><![CDATA[  <!-- This module was also published with a richer model, Gradle metadata,  -->\n  <!-- which should be used instead. Do not delete the following line which  -->\n  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->\n  <!-- that they should prefer consuming it instead. -->\n  <!-- do_not_remove: published-with-gradle-metadata -->\n  <modelVersion>4.0.0</modelVersion>]]></replaceValue>\n              <recursive>false</recursive>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <!-- 16-Nov-2022, tatu: [core#838] add verification of compatibility\n           wrt Android SDK versions using AnimalSniffer with \"gummy bears\" signatures.\n           To be run from CI, but manually with:\n              mvn clean package animal-sniffer:check\n        -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>animal-sniffer-maven-plugin</artifactId>\n        <version>${version.plugin.animal-sniffer}</version>\n        <configuration>\n          <signature>\n            <groupId>com.toasttab.android</groupId>\n            <artifactId>gummy-bears-api-${version.android.sdk}</artifactId>\n            <version>${version.android.sdk.signature}</version>\n          </signature>\n        </configuration>\n      </plugin>\n\n    </plugins>\n  </build>\n\n  <dependencies>\n    <dependency>\n      <groupId>ch.randelshofer</groupId>\n      <artifactId>fastdoubleparser</artifactId>\n      <version>1.0.90</version>\n    </dependency>\n    <!-- Test dependencies -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n</project>\n"
        },
        {
          "name": "release-notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 1.4521484375,
          "content": "#!/bin/bash\n\n# This script simulates the Maven Release Plugin, but only performs\n# release:clean and release:prepare. The release:perform step is handled by the\n# CI when the tag is pushed.\n#\n# However, release:perform on Git requires the release.properties file. We must\n# therefore modify the first commit created by release:prepare to include this\n# file, and then delete the file in the second commit.\n#\n# This will ensure that release.properties is available to release:perform in\n# the CI, while keeping with the expectation that this file does not get\n# commited (long-term) to the repository.\n#\n# See https://github.com/FasterXML/jackson-core/issues/844 for details.\n\nset -euo pipefail\n\n# Prepare but don't push, we'll need to modify the commits\n./mvnw release:clean release:prepare -DpushChanges=false\n\n# Step back to the first commit (from SNAPSHOT to release)\ngit reset HEAD~1\n\n# delete tag created by release:prepare\ntag_name=\"$(git tag --points-at)\"\ngit tag -d \"$tag_name\"\n\n# Add release.properties to that commit\ngit add release.properties\ngit commit --amend --no-edit\n\n# recreate tag\ngit tag \"$tag_name\" -m \"[maven-release-plugin] copy for tag $tag_name\"\n\n# Recreate second commit (from release to SNAPSHOT), removing\n# release.properties from the repository\ngit rm release.properties\ngit add pom.xml\ngit commit -m \"[maven-release-plugin] prepare for next development iteration\"\n\n# push everything\ngit push\ngit push origin \"$tag_name\"\n\n# clean up\nrm pom.xml.releaseBackup\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}