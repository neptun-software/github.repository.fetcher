{
  "metadata": {
    "timestamp": 1736708593929,
    "page": 893,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Rajawali/Rajawali",
      "stars": 2368,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.607421875,
          "content": "# Built application files\nexamples/build/\nrajawali/build/\nvr/build/\nvuforia/build/\nwear/build/\nbuild/\nscreenshots\n\nvuforia/src/main/obj/\nvuforia/src/main/libs/\n\n# Crashlytics configuations\ncom_crashlytics_export_strings.xml\n\n# Local configuration file (sdk path, etc)\nlocal.properties\nlocal.gradle\n\n# Gradle generated files\n.gradle/\n\n# Signing files\n.signing/\n\n# User-specific configurations\n.idea\n*.iml\n\n# OS-specific files\n.DS_Store\n.DS_Store?._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\nbin/\ngen/\n.idea/dictionaries/dennis.xml\nlocal.properties~\n.idea/\nrajawali_secret.gpg\nsecring.gpg\n*.alloc\n*.properties\n*.hprof\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.2470703125,
          "content": "Rajawali v1.1.x \"Bombshell\"\n-------------------------------------------------\n\n\"Bombshell\", the next Rajawali version contains some minor changes to the API.\n\n### Anti-Aliasing\n\nFXAA and Super-sample anti aliasing have been added as post processing options. See the FXAA Post Processing example to see how.\n\n### Examples and Support Modules\n\nThe examples application and all support modules such as Android Wear, Vuforia and Cardboard support have been moved to this repository. \n\n### Color Picking\n\n* `Scene.java`\n * Added `doColorPicking()` to isolate color-picking render from normal render() control flow\n * Renamed `requestColorPickingTexture()` to `requestColorPicking()` \n* `Object3D.java`\n * Introduced `UNPICKABLE` color/index, made it a default value\n * Updated `setPickingColor()`, removed `getPickingColor()`\n * Eliminated `mIsPickingEnabled`, now check for `UNPICKABLE`\n * Added `renderColorPicking()` for optimized/independent color-picking rendering of the `Object3D` and its children (per #1387)\n* `ObjectColorPicker.java`\n * Updated `unregisterObject()` to reset picking color to `UNPICKABLE`\n * Renamed `createColorPickingTexture()` to `pickObject()`\n * In `pickObject()` call to `GLES20.glReadPixels()`, replaced `getDefaultViewportHieght()` with `getViewportHeight()`\n\n### Textures\n\nStores texture handles in a hashmap keyed by texture name. This allows reusing textures between materials if the same names are used. An initial attempt to find the locations is made on first compiling a material but if the texture name is not known there (such as for post processing) then it will be cached on the first use.\n\n### Desmurfing\n\nThe old class names that were prefixed with \"Rajawali\" have been removed. For example, `RajawaliRenderer` is now just `Renderer`.\n\n### Textures\n \n`ATexture.setUniformHandle(int)` and `ATexture.getUniformHandle()` have been removed. They were an incomplete implementation and the ownership of these handles has been moved to the `Material` level, allowing reused of identically named textures across materials as well as helping cache for vertex textures, if available on the device.\n\nRajawali v1.0.x \"Anchor Steam\"\n-------------------------------------------------\n\n\"Anchor Steam\", the next Rajawali version contains significant changes to the API.\nHere's what's new:\n\n### Android Studio and Continuous Integration\n\nThe project has been migrated to Android Studio and the Gradle build system. Along with this, we have setup builds with Travis CI. Build status badges have been added to the [Readme](https://github.com/Rajawali/Rajawali/blob/master/README.md) to indicate the status. We are currently in the process of deploying the project to Maven.\n\n### Package Name\n\nIn preparation for deployment into Maven, the package name of the Rajawali library has changed. The old packages `rajawali` and `rajawali.framework` are now `org.rajawali3d`, which is the Maven group id.\n\n### No more `RajawaliFragment` or `RajawaliActivity`\n\n`RajawaliSurfaceView` and `RajawaliTextureView` are the classes which replace `RajawaliFragment`, `RajawaliSupportFragment` and `RajawaliActivity`. They extend a common interface, `IRajawaliSurface`. This was done to simplify development of the framework by reducing the duplication of life cycle related code as much as possible. While you may need to take a few extra steps to bring Rajawali into your Fragment/Activity, these steps have been simplified and made more consistent across the multiple use cases. What follows is an explanation of setting up these views in a `Fragment`, though it would be no different for an `Activity`. For more details, see [Using RajawaliSurfaceView and RajawaliTextureView](https://github.com/Rajawali/Rajawali/wiki/Using-RajawaliSurfaceView-and-RajawaliTextureView)\n\n### Debugging\n\nA new renderer class, `RajawaliDebugRenderer` has been added. It has an additional constructor parameter for a `RajawaliGLDebug.Builder` instance which will configure the debug behavior. You can enable automatic glError() calls after every GL call, enforcment of all GL calls coming from the same thread and argument name printing for GL calls. With the addition of this class, `RajawaliRenderer` no longer checks for GL errors at the end of each frame. This is for performance reasons. Of course in your own implementation you could still check at the end of each frame if you so chose. \n\nAdditionally, the `org.rajawali3d.util.debugvisualizer` package has been added. It contains several classes which allow you to easily add visuals to your scene for things like camera frustrum, lights, bounding volumes, etc. \n\n### OpenGL ES 3.0\n\nRajawali will automatically determine if a device supports OpenGL ES 3.x. If it does, Rajawali will automatically request a GLES 3 context rather than 2. If the device does not support GLES 3, Rajawali will request a GLES 2 surface. The GLES 3 feature set supported Rajawali is currently minimal, but the following has been implemented:\n\n- ETC2 Texture compression. All formats of ETC2 compression except for the 3 sRGB formats are currently supported. At present, we have been unable to find information relating to the internal format codes of the PKM file header for the sRGB formats. When that information is available, a very small modification will be all that is required to add support for these files. The `Etc2Texture` class is the Rajawali native wrapper for these textures. It has the added benefit of accepting ETC1 textures.\n\n### Garbage\n\nAcross the library we have tried to reduce the ammount of garbage that is generated. Animations now generate little to\nno garbage, even when run for very long periods of time.\n\n### Thread Safety\n\nTo eliminate a number of issues which stemmed from trying to change scene contents in the middle of a render cycle,\na task queue system has been added to Rajawali. You no longer have direct access to lists such as `mChildren`. Helper\nmethods such as `addChild()` exist and will automatically queue everything for you.\n\n### Asyncronous Loading\n\nTo fully take advantage of `RajawaliScene` (see the Scenes section below), it is necessary to be able to load models on a background thread while rendering is active. To fascilitate this, asyncronous loading options have been added to `RajawaliRenderer`. Your code can now request an asyncronous load of any `ALoader` implementation (your own included) and receive a notification of success or failure via the `IAsyncLoaderCallback` interface. See [The wiki explanation](https://github.com/Rajawali/Rajawali/wiki/Async-Loaders) or Rajawali Examples for more information.\n\n### Scene Frame Callbacks\n\nScene frame callbacks were added to provide a easy way for user code to tie into the render cycle while receiving timing information about the scene. These callbacks receive the typical frame delta time (measured in seconds), used by the animation system, as well as an additional parameter - the rendering elapsed time (measured in nanoseconds). For more information, see [The Wiki](https://github.com/Rajawali/Rajawali/wiki/Scene-Frame-Callbacks)\n\n### Lazy VBO creation\n\nIn the past, all VBOs were created immediately in the `Object3D` constructor. This is still the default behavior, however a new constructor has been added with a `boolean` parameter which allows for the creation of these VBOs to be deferred until the first render pass. If they are deferred, the initial frame may incur a slight delay, but in most cases this will not be noticable. Deferred creation is useful if you would like to build a complete `RajawaliScene` before having a running `RajawaliRenderer`.\n\n### Conversion to double precision\n\nRajawali has been converted to double precision internally. Some of the public API has changed as a result of this switch,\nhowever it is not significant and likely affects only advanced users. Most notably the method signature of the `render()` methods.\nThis was done to eliminate some bugs being caused by floating point roundoff errors since current and emerging devices have little\nto no performance loss. There will be a slight increase in memory consumption but it should be negligible compared to texture consumption.\nFor more information see issue #988.\n\nSince the `android.opengl.Matrix` class only supports float arrays, the class has been copied as `rajawali.math.Matrix` and converted\nto use doubles. To avoid needless casting, you should utilize this class instead. The only change to the class is to utilize double precision\nfloating point numbers instead of single precision, however a few native methods had to be implemented in Java. Similarly, `android.opengl.GLU`\nonly supports float math, so the class has been copied as `rajawali.util.GLU` and convert to use doubles.\n\nPosition and orientation information are now handled as double precision, however the object geometry and any colors are not. This\nis done primarily to reduce the overhead of casting a lot of data from double to float on each frame, but there is also no need for it,\nand it doesn't come free. Promoting these to double will happen automatically anytime they are used in math with a double and because they\nare provided to the library in float form, we do not loose any precision this way. The one exception to this is if you are dynamically\nmodifying the geometry data at run time which is an advanced process with a lot of other implications anyway.\n\n### Number3D\n\nThe `Number3D` class has been refactored into `Vector3` which is way more appropriate.\nThis will most likely affect a lot of your code. Furthermore, the class has been entirely\nrefactored to be more consistent and reduce the amount of garbage it generates. The public\nAPI has been modified considerably but should be much more robust, clean and useful.\nIt has also been moved to the `rajawali.math.vector` package.\n - Operations which set their result on the calling object are named/documented accordingly.\n - Operations which create new objects are named/documented accordingly.\n\n### Vector2D\n\nThe `Vector2D` has been refactored into `Vector2` which falls in line with the new `Vector3` class.\nIt has also been moved to the `rajawali.math.vector` package.\n\n### Vector3\n\nThe `Number3D` class has been refactored to `Vector3`. This name is much more appropriate.\n\n### Quaternion\n\nThe `Quaternion` class has been overhauled and refactored similarly to the `Vector3` class. This may affect a lot of your code,\ndepending on your use of quaternions. It has been made more consistent and efficient, reducing garbage. Other noteworthy changes include:\n - The method `Quaternion#fromRotationMatrix(float[])` has become `Quaternion#fromMatrix(Matrix4)`.\n - The method `Quaternion#unitInverse()` has been removed as it was the same as `Quaternion#conjugate()`\n - Operations which set their result on the calling object are named/documented accordingly.\n - Operations which create new objects are named/documented accordingly.\n\n### AngleAxis\n\nThe `AngleAxis` class has been removed. It was essentially an incomplete `Quaternion` class and was not being\nused anywhere in the library or in the examples project.\n\n### Matrix4\n\nPreviously, the `Matrix4` class was incomplete and never used internal to the library. The class has been filled out\nand the library has been switched over to using it internally. This was done for clarity, concise code and as the ground\nwork for being able to add more complex features to the library. An exception to this is skeletal animation, which still uses\ndouble arrays. This with absolute certainty will require you to change some of your code. At a bare minimum, common method\nsignatures have changed, but only in their data types.\n\nWhile you can still use float or double arrays for matrices if you prefer, `Matrix4` has been implemented in an efficient manner\nwhich should not produce extra garbage and will dramatically simplify code which performs lots of matrix operations.\n\n### ATransformable3D \n\nThe orientation, rotation and look at functionality of `ATransformable3D` have been modified. Look at tracking has the ability to operate automatically now. To enable, set your look at point via `ATransformable3D.setLookAt(Vector3 look)` and call `ATransformable3D.enableLookAt()`. At this point, anytime your object moves, it will automatically re-orient itself to look at its look at point. \n\nThe model matrix is now the responsibility of `ATransformable3D`. Calculation is handled on an as needed basis now, saving processing time. When an object is moved/rotated, its model matrix is marked as dirty. The next time it is requested in a render loop, the matrix will then be re-calculated. By marking as dirty, we save multiple recalculations when an object has several transformations applied between frames. \n\nFinally, the orientation of all `ATransformable3D` objects is defined solely as a quaternion. This eliminates the ambiguity of the old system, provides no chance of gimble lock and generally increases efficiency. The previous model matrix calculation required 100 floating point operations and 4 loops. The new method requires only 27 floating point operations. View matrix calculation has seen similar improvements.\n\n### BaseObject3D\n\n`BaseObject3D` has been renamed to `Object3D`.\n\n### FPSUpdateListener\n\n`FPSUpdateListener` has been renamed to `OnFPSUpdateLister`.\n\n### Parsers\n\nAll parser classes which were previously called `xxParser` are now called `Loaderxx`. For example, `OBJParser` is now `LoaderOBJ`. They have also been moved from the `parser` package to `loader`.\n\n### GL State\n\nTo help increase ultimate frame rate, a default GL state has been implemented and set once at GL surface creation. `BaseObject3D`\ninstances which are transparent, double-sided or otherwise differ in their culling automatically change the state for their render\nand return the state when they are done. This means the GL state is not managed as efficiently as it could be, however it is a dramatic\nimprovement over the previous method of explicitly declaring the state on each render for each object and has in some testing shown a\n6 FPS improvement for ~12%.\n\n### Scenes\n\nA new class, `RajawaliScene` has been added which fully encompasses everything to render a scene. Essentially everything you\nwould have previously done in `RajawaliRenderer#initScene()` now fits in a `RajawaliScene` and you can have multiple instances\nof `RajawaliScene` and feely switch between them, allowing you to do all sorts of cool things such as loading a new scene in the\nbackground, showing different areas, etc.\nFor more info please see [Tutorial 31](https://github.com/MasDennis/Rajawali/wiki/Tutorial-31-Using-RajawaliScene).\n\n### Multiple Cameras\n\nYou can now use multiple cameras in Rajawali and freely switch between them in a thread safe manner.\n\n```java\npublic void nextCamera() {\n\tif (getCurrentCamera().equals(mCamera1)) {\n\t\tgetCurrentScene().switchCamera(mCamera2);\n\t} else {\n\t\tgetCurrentScene().switchCamera(mCamera1);\n\t}\n}\n```\n\n### Texture Management & Materials\n\nMaterials & textures have become much more flexible. Please check this wiki pages for all the changes: https://github.com/MasDennis/Rajawali/wiki/Materials\n\n\n### Post Processing\n\nThe old filter system has been replaced with a new modular post processing framework. This allows for complex effects based on frame buffer objects and multi-pass rendering. The documentation of details of this will be a work in progress. In the meantime, the examples app is the best place to start.\n\n### Lights\n\nLights aren't added directly to objects anymore. In Anchor Steam they have to be added to the scene:\n\n```java\ngetCurrentScene().addLight(myLight);\n```\n\n### Paths/Curves\n\n\"Paths\" now have the more appropriate name \"Curves\". The reason for this is that curves aren't necessarily paths.\nThe have also been moved from `rajawali.animation` to `rajawali.curves`.\nThese existing classes have been renamed:\n- `CatmullRomPath3D`: `CatmullRomCurve3D`\n- `ISpline3D`: `ICurve3D`\n- `BezierPath3D`: `CubicBezier3D`\n\nSome new classes have been added:\n- `CompoundCurve3D`: This is a container for an n number of curves of any type.\n- `LinearBezierCurve3D`: A linear bezier curve. Basically just a straight line. This is useful for compound curves.\n- `QuadraticBezierCurve3D`: A quadratic bezier curve. This type of Bezier curve take only one control point instead of two.\n- `SVGPath`: takes an SVG-style path string and creates a `CompoundCurve3D`. Still a work in progress.\n- `LogarithmicSpiral3D` : A spiral curve, often refered to as a \"Golden Spiral\" or \"Nautalus Spiral\"\n- `ArchimedeanSpiral3D` : A spiral curve, with several variants based on a constant exponent.\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4609375,
          "content": "Issue Submission Guidelines\n---------------------------\n\nWhile the Rajawali collaborators are very happy to assist and provide support for the library, they are all doing this voluntarily on their personal time and are not compensated whatsoever for their efforts. So before you post, please read the guidelines below.\n* When submitting a support issue about a question, please make sure it is related to the Rajawali library. Below are some common support questions we get that has nothing to do with Rajawali and should be asked elsewhere such as [Stack Overflow](http://www.stackoverflow.com/):\n  * How to use SharedPreferences and preference listeners in your application\n  * How to capture touch events and detect gestures\n  * How to use broadcast receivers to receive system events\n  * Anything about custom GLSL shaders themselves (submitting support issue on getting them hooked up to Rajawali is fine as long as you tried the tutorial [here](https://github.com/MasDennis/Rajawali/wiki/Tutorial-09-Creating-a-Custom-Material---GLSL-Shader) first)\n* Search the Issues list before you submit an issue. If you are new to the Rajawali framework, chances are, somebody asked a similar question before you did. We often notice that same questions that have been answered before get asked over and over again. Below are the most common answered questions that pop back up:\n  * [How to import Rajawali library into your project](https://github.com/MasDennis/Rajawali/wiki/Importing-Rajawali-and-RajawaliExamples)\n  * [How to use object parsers to import exported 3D objects into your scene](https://github.com/MasDennis/Rajawali/wiki/Tutorial-02-Creating-a-Live-Wallpaper-and-Importing-a-Model)\n* When submitting an issue, please be as constructive as possible. Non-constructive questions such as merely asking for more examples will be viewed as asking us to do your work for you. These issues will be closed immediately by our collaborators.\n* If you think there is a bug in the library, please provide exact details to reproduce the bug and stack traces (in case of runtime exceptions) when submitting an issue.\n* Please use Markdown to format your issue and to properly format your code. This ensures better readability for others which helps to receive better support. Hard-to-understand submission resulting from poorly formatted post will result in immediate closure by our collaborators.\n* Rajawali is documented and supported in language that is more widely used internationally: English. Our collaborators are located all over the globe in America, Asia, and Europe and use English to collaborate and provide support. Please submit your issues written in comprehensive English so that our collaborators and others around the world may be able to easily read and understand what your issue is. Submissions written in any other languages or in very uncomprehensive English will be closed. If English is not your native tongue, please use a translator and we will do our best to accommodate.\n* If there are no activity within the issue thread for 10 days, it will be deemed stale by our collaborators and will be closed. You may re-open the issue after 10 days if you need further help. When the issue is solved, please mention whether the issue was helpful (it would also be nice to thank whoever helped solve the issue) and close the issue.\n\nPull Request Guidelines\n-----------------------\n\n* Changes should be tested with https://github.com/MasDennis/RajawaliExamples\n* Affected public classes and functions should have accurate Javadoc.\n* Affected documentation, such as tutorials, should be clearly noted in the pull request description.\n* Source code formatting should be hygienic:\n  * No trailing or inconsistent whitespace.\n  * No exceptionally long lines.\n  * Consistent placement of brackets.\n  * ...etc.\n  * _Hint: Use Eclipse's auto-formatter on affected files (but please commit separately from functional changes)._\n* Commit history should be relatively hygienic:\n  * _Roughly_ one commit per logical change.\n  * Log messages are clear and understandable.\n  * Few (or no) \"merge\" commits.\n  * _Hint: `git rebase -i` is great for cleaning up a branch._\n\nPull requests for branches that are still in development should be prefixed with `WIP:` so that they don't get accidently merged. Remove `WIP:` once the pull request is considered finalized and ready to be reviewed and merged.\n\nLicense\n-------\n\nBy contributing code to Rajawali, you are agreeing to release it under the [Apache License, Version 2.0](http://opensource.org/licenses/Apache-2.0).\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.654296875,
          "content": "#### Rajawali Version or Branch\n[describe the _precise_ release version or branch and commit id, feature requests can simply specify master]. Responses such as \"last one\" or \"latest\" will not be treated seriously until it is an issue that impacts our developers.\n\n#### Device and Android Version\n[list at least one device and the version number that produced a stace trace if applicable]\n\n#### Summary\n[describe the issue or feature]\n\n#### Steps to Reproduce\n[Describe reproducable steps and sample code]\n\n#### Trace or Log Output\n[include stacktrace(s) if relevant to the issue. Engine crashes can not be debugged without a stacktrace or at minimum reproduction code.]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.5390625,
          "content": "Copyright 2013 Dennis Ippel\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.90234375,
          "content": "[![AndroidLibs](https://img.shields.io/badge/AndroidLibs-Rajawali-brightgreen.svg?style=flat)](https://www.android-libs.com/lib/rajawali?utm_source=github-badge&utm_medium=github-badge&utm_campaign=github-badge)\n[![License](https://img.shields.io/badge/license-Apache%202.0%20License-blue.svg)](https://github.com/Rajawali/Rajawali/blob/master/LICENSE.txt)\n[![Maven Central](https://img.shields.io/maven-metadata/v/https/oss.sonatype.org/content/repositories/releases/org/rajawali3d/rajawali/maven-metadata.xml.svg)](https://oss.sonatype.org/content/repositories/releases/org/rajawali3d)\n[![Maven Central](https://img.shields.io/maven-metadata/v/https/oss.sonatype.org/content/repositories/snapshots/org/rajawali3d/rajawali/maven-metadata.xml.svg)](https://oss.sonatype.org/content/repositories/snapshots/org/rajawali3d)\n[![](https://jitpack.io/v/rajawali/rajawali.svg)](https://jitpack.io/#rajawali/rajawali)\n\n# Build Status\n**Master Branch Status**  \n[![CircleCI](https://circleci.com/gh/Rajawali/Rajawali/tree/master.svg?style=svg)](https://circleci.com/gh/Rajawali/Rajawali/)\n[![codecov](https://codecov.io/gh/Rajawali/Rajawali/branch/master/graph/badge.svg)](https://codecov.io/gh/Rajawali/Rajawali)\n\n**Develop Branch Status**  \n[![CircleCI](https://circleci.com/gh/Rajawali/Rajawali/tree/develop.svg?style=svg)](https://circleci.com/gh/Rajawali/Rajawali/)\n\n### News\n\n**06/23/2017**\n`Bombshell 1.1.970` has been released. It fixes behavior of Objects of zero size, TextureView, TextureManager, Toon Shader color setters, custom shaders and more... It also adds preprocessor directive support for shader plugins, configurable skybox geometry, and extends our Unit Text Framework.\n\n**11/16/2016**\n`Bombshell 1.1.777` has been released. It fixes a small number of bugs and adds a Scan Line post processing effect (thanks @contriteobserver). \n\n**9/7/2016**\nThe official release of `Bombshell 1.1.610` is out. We will continue to support this release moving forward how ever bug fixes will be minimal. The decision was made that the design of the core engine was inhibiting correcting some of the larger issues. To this end, we have begun development of a `2.0` version - see issue [1755](https://github.com/Rajawali/Rajawali/issues/1755) for details. Development is happening in the `v2.0-development` branch [here](https://github.com/Rajawali/Rajawali/tree/v2.0-development)\n\n**8/29/2016**\nAn initial effort for adding unit testing to Rajawali has been made. This initial focus has been on the core math classes and will ideally expand as bug fixes progress. Pull requests for unit tests are welcome and any \"bug fix\" PRs which include unit tests  or issues which include unit tests to demonstrate a failure will be given the highest priority. \n\n### General\n\nRajawali is a 3D engine for Android based on OpenGL ES 2.0/3.0. It can be used for normal apps as well as live wallpapers.\n\nWant to keep the developers going? Buy them a beer! (http://www.pledgie.com/campaigns/21807)\n\n[Join the Rajawali Community](https://plus.google.com/u/0/communities/116529974266844528013) on [![Rajawali Community on Google Plus](http://sinceresocial.com/wp-content/uploads/2012/05/google+-20px.png)](https://plus.google.com/u/0/communities/116529974266844528013) to stay up-to-date on the latest news. \n\nThe [RajawaliExamples](https://github.com/MasDennis/RajawaliExamples) project is an ever growing toolkit for developing 3D content. [Check it out!](https://github.com/MasDennis/RajawaliExamples)\n\n## Made With Rajawali\n\nNumerous apps and live wallpapers have been made with Rajawali. [Check them out!](https://plus.google.com/u/0/communities/116529974266844528013/stream/526227da-cf2d-46f9-8ad6-beaca7b8ddd5)\n\n## Using Rajawali with mavenCentral()\n\nUsing Rajawali is as simple as adding a single line to your gradle dependencies:\n\n`implementation 'org.rajawali3d:rajawali:x.x.x@aar` where x.x.x is the version number (and the last number is the build number). If you wish to use the `master` branch snapshot, append `-SNAPSHOT`. For example, to use release `1.0.325`, you would use:\n\n`implementation 'org.rajawali3d:rajawali:1.0.325@aar`\n\nTo use the `master` branch build 48 snapshot `1.0.48-SNAPSHOT`, you would use:\n\n`implementation 'org.rajawali3d:rajawali:1.0.48-SNAPSHOT@aar`\n\nAll commits to `master` and `development` branch are deployed as snapshots. All tags will be deployed as releases. To see the latest build number, see the [build history](https://travis-ci.org/Rajawali/Rajawali/builds) and be sure you choose a `master` branch build.\n\nFor the above to work you will need to make sure your repository list includes:\n\n`mavenCentral()` for releases, and `maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }` for snapshots.\n\nAlternatively, if you checkout Rajawali via GIT, you can run `gradle assembleRelease uploadArchives` (or simply add a Gralde launch config to Android Studio for the `assembleRelease` and `uploadArchives` tasks). This will deploy to your local maven repository. Consuming apps should have `mavenLocal()` in their repository list and add `implementation 'org.rajawali3d:rajawali:1.0.0-SNAPSHOT@aar` to their dependencies.\n\n## Using Rajawali with Jitpack\n\nJust add the following lines to your `build.gradle` Here you see more details https://jitpack.io/#rajawali/rajawali\n\n```groovy\ndependencies {\n    implementation \"com.github.rajawali:rajawali:$latest_version\"\n}\n```\n\nTo tell Gradle where to find the library, make sure `build.gradle` also contains this:\n\n```groovy\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n## Rajawali Examples On The Market\n\n[Download the free app](https://market.android.com/details?id=com.monyetmabuk.rajawali.tutorials)\n\n## Rajawali + Augmented Reality\n\n[RajawaliVuforia GitHub](https://github.com/MasDennis/RajawaliVuforia)\n\n[YouTube Video of RajawaliVuforia in action](http://www.youtube.com/watch?v=rjLa4K9Ffuo)\n\n## Rajawali + Virtual Reality\n\n[RajawaliVR GitHub](https://github.com/MasDennis/RajawaliVR)\n\n[YouTube Video of RajawaliVR in action](https://www.youtube.com/watch?v=3L0l_jmkcBE&feature=youtu.be)\n\n## Tutorials\n1. [Basic Setup & Sphere (Maven)](http://www.clintonmedbery.com/?p=59)\n~~1. [Basic Setup & a Sphere (Out of date)](https://github.com/MasDennis/Rajawali/wiki/Tutorial-01----Basic-Setup-&-a-Sphere)~~  \n2. [Creating a Live Wallpaper and Importing a Model](https://github.com/MasDennis/Rajawali/wiki/Tutorial-02-Creating-a-Live-Wallpaper-and-Importing-a-Model)  \n3. [Materials](https://github.com/MasDennis/Rajawali/wiki/Tutorial-03-Materials)  \n4. [Optimization](https://github.com/MasDennis/Rajawali/wiki/Tutorial-04-Optimization)  \n5. [Skybox] (https://github.com/MasDennis/Rajawali/wiki/Tutorial-05-Skybox)  \n6. [Screenshots] (https://github.com/MasDennis/Rajawali/wiki/Tutorial-06-Screenshots)  \n7. [Plugins] (https://github.com/MasDennis/Rajawali/wiki/Tutorial-07-Plugins)  \n8. [User Interface Elements] (https://github.com/MasDennis/Rajawali/wiki/Tutorial-08-Adding-User-Interface-Elements)  \n9. [Creating a Custom Material GLSL Shader](https://github.com/MasDennis/Rajawali/wiki/Tutorial-09-Creating-a-Custom-Material---GLSL-Shader)  \n10. [2D Renderer](https://github.com/MasDennis/Rajawali/wiki/Tutorial-10-2D-Renderer)  \n11. [Particles](https://github.com/MasDennis/Rajawali/wiki/Tutorial-11-Particles)  \n12. [Object Picking](https://github.com/MasDennis/Rajawali/wiki/Tutorial-12-Object-Picking)  \n13. [Animation Classes](https://github.com/MasDennis/Rajawali/wiki/Tutorial-13-Animation-Classes)  \n14. [Bump Normal Mapping](https://github.com/MasDennis/Rajawali/wiki/Tutorial-14-Bump-Normal-Mapping)  \n15. [MD2 Animation](https://github.com/MasDennis/Rajawali/wiki/Tutorial-15-MD2-Animation)  \n16. [Collision Detection](https://github.com/MasDennis/Rajawali/wiki/Tutorial-16-Collision-Detection)  \n17. [Importing .Obj Files](https://github.com/MasDennis/Rajawali/wiki/Tutorial-17-Importing-.Obj-Files)  \n18. [Drawing Lines](https://github.com/MasDennis/Rajawali/wiki/Tutorial-18-Drawing-Lines)  \n19. [Catmull Rom Splines](https://github.com/MasDennis/Rajawali/wiki/Tutorial-19-Catmull-Rom-Splines)  \n20. [Animated Sprites](https://github.com/MasDennis/Rajawali/wiki/Tutorial-20-Animated-Sprites)  \n21. [Fog](https://github.com/MasDennis/Rajawali/wiki/Tutorial-21-Fog)  \n22. [More Optimisation](https://github.com/MasDennis/Rajawali/wiki/Tutorial-22-More-Optimisation)  \n23. [Custom Vertex Shader](https://github.com/MasDennis/Rajawali/wiki/Tutorial-23-Custom-Vertex-Shader)  \n24. [Using Geometry Data To Position And Rotate Objects](https://github.com/MasDennis/Rajawali/wiki/Tutorial-24-Using-Geometry-Data-To-Position-And-Rotate-Objects)  \n25. [Video Material](https://github.com/MasDennis/Rajawali/wiki/Tutorial-25-Video-Material)  \n26. [Orthographic Camera](https://github.com/MasDennis/Rajawali/wiki/Tutorial-26-Orthographic-Camera)\n27. [Texture Compression](https://github.com/MasDennis/Rajawali/wiki/Tutorial-27-Texture-Compression)\n28. [Transparent Textures](https://github.com/MasDennis/Rajawali/wiki/Tutorial-28-Transparent-Textures)\n29. [Skeletal Animation](https://github.com/MasDennis/Rajawali/wiki/Tutorial-29-Skeletal-Animation)\n30. [Creating a Day Dream](https://github.com/MasDennis/Rajawali/wiki/Tutorial-30-Creating-a-Day-Dream)\n31. [Using RajawaliScene] (https://github.com/MasDennis/Rajawali/wiki/Tutorial-31-Using-RajawaliScene)\n\n## Tutorials & Articles By Others\n* (Kean Walmsley from Autodesk) Creating a 3D viewer for our Apollonian service using Android [Part 1](http://through-the-interface.typepad.com/through_the_interface/2012/04/creating-a-3d-viewer-for-our-apollonian-service-using-android-part-1.html) [Part 2](http://through-the-interface.typepad.com/through_the_interface/2012/05/creating-a-3d-viewer-for-our-apollonian-service-using-android-part-2.html) [Part 3](http://through-the-interface.typepad.com/through_the_interface/2012/05/creating-a-3d-viewer-for-our-apollonian-service-using-android-part-3.html)\n* Rajawali と戯れる [Part 1](http://dev.classmethod.jp/smartphone/android/android-rajawali-tutorials-01/) [Part 2](http://dev.classmethod.jp/smartphone/android/android-rajawali-tutorials-02/) (Japanese)\n* [Introducing Plugin Architecture for Rajawali](http://www.andrewjo.com/blog/mobile-development/introducing-plugin-architecture-for-rajawali)\n* [Object Occlusion Testing in Rajawali](http://www.andrewjo.com/blog/mobile-development/object-occlusion-testing-in-rajawali)\n* [Ниже пример как сделать простую 3D модель и запустить сцену на Android](http://konsultantspb.ru/3d-engine-rajawali/)(Russian)\n* [Android in razvoj 3D igre](http://www.monitor.si/clanek/android-in-razvoj-3d-igre/142302/)(Slovenian)\n* [Rajawali là gì?](http://www.trithucmoi.co/en/component/content/article/101-rajawali-va-ardor3d.html)(Vietnamese)\n\n## Learn Rajawali at a Training Center\n* [Android Game Development in India](http://virtualinfocom.com/android_game/android_game_development_institute.html)\n* [Android Application Programming in India](http://virtualinfocom.com/android_game_application_development_training.html)\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.208984375,
          "content": "import org.gradle.internal.jvm.Jvm\n\nbuildscript {\n    ext.kotlin_version = '1.7.22'\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.3.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"org.jetbrains.dokka:dokka-gradle-plugin:1.7.20\"\n        classpath 'digital.wup:android-maven-publish:3.6.3'\n        classpath \"org.jacoco:org.jacoco.core:0.8.8\"\n    }\n}\n\nprintln \"Gradle uses Java ${Jvm.current()}\"\n\next {\n    minSdk = 15\n    targetSdk = 33\n    compileSdk = 33\n    wear = \"2.9.0\"\n    wearService = \"18.0.0\"\n\n    isCi = System.env.CI == \"true\"\n}\n\nprintln(\"Building project ${getTag()}\")\n\nsubprojects {\n    group 'org.rajawali3d'\n\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n@SuppressWarnings('unused')\nstatic def getTag() {\n    def process = \"git describe --tags\".execute()\n    return process.text.toString().trim()\n}\n\n@SuppressWarnings('unused')\nstatic def getGitCommitCount() {\n    def process = \"git rev-list HEAD --count\".execute()\n    return process.text.toInteger()\n}"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.4052734375,
          "content": "codecov:\n  notify:\n    require_ci_to_pass: true\ncomment:\n  behavior: default\n  layout: header, diff\n  require_changes: false\ncoverage:\n  precision: 2\n  range:\n  - 70.0\n  - 100.0\n  round: down\n  status:\n    changes: false\n    patch: true\n    project: true\nparsers:\n  gcov:\n    branch_detection:\n      conditional: true\n      loop: true\n      macro: false\n      method: false\n  javascript:\n    enable_partials: false\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.763671875,
          "content": "POM_NAME=Rajawali\nPOM_PACKAGING=aar\nPOM_DESCRIPTION=Android OpenGL ES 2.0/3.0 Engine\nPOM_URL=https://github.com/Rajawali/Rajawali\nPOM_SCM_URL=https://github.com/Rajawali/Rajawali.git\nPOM_SCM_CONNECTION=scm:git@github.com:Rajawali/Rajawali.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:Rajawali/Rajawali.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=Rajawali\nPOM_DEVELOPER_NAME=Rajawali Development Team\nPOM_DEVELOPER_EMAIL=rajawali.framework@gmail.com\nPOM_DEVELOPER_ORGANIZATION=Rajawali\nPOM_DEVELOPER_ORGANIZATION_URL=https://plus.google.com/u/0/communities/116529974266844528013\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n\norg.gradle.jvmargs=-Xmx1536m\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.99609375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.771484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "maven.keystore.gpg",
          "type": "blob",
          "size": 4.86328125,
          "content": null
        },
        {
          "name": "publish.gradle",
          "type": "blob",
          "size": 3.5634765625,
          "content": "apply plugin: 'org.jetbrains.dokka'\napply plugin: 'digital.wup.android-maven-publish'\napply plugin: 'signing'\napply plugin: 'jacoco'\n\njacoco {\n    toolVersion = '0.8.6'\n    tasks.withType(Test) {\n        jacoco.includeNoLocationClasses = true\n        jacoco.excludes = ['jdk.internal.*']\n    }\n}\n\ntasks.withType(Test) {\n    jacoco.includeNoLocationClasses = true\n}\n\ntask jacocoTestReport(type: JacocoReport) {\n    group = \"Reporting\"\n    description = \"Combine code coverage to unified report.\"\n\n    reports {\n        xml.enabled = true\n        html.enabled = true\n    }\n\n    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']\n    def debugTree = fileTree(dir: \"${project.buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes\", excludes: fileFilter)\n    def mainSrc = \"${project.projectDir}/src/main/java\"\n    def ecSrc = fileTree(dir: \"$project.buildDir\", include: \"**/*.ec\")\n    def execSrc = fileTree(dir: \"$project.buildDir\", include: \"**/*.exec\")\n\n    doFirst {\n        def files = files([ecSrc, execSrc]).files\n        println \"Creating Jacoco Report for ${files.size()} coverage files\"\n        files.each { file -> println file }\n    }\n}\n\ntask dokkaJar(type: Jar, dependsOn: dokkaHtmlPartial) {\n    classifier = 'javadoc'\n    from \"$buildDir/dokka/htmlPartial\"\n}\n\ntasks.named(\"dokkaHtml\") {\n    outputDirectory.set(buildDir.resolve(\"dokka\"))\n}\n\ntask androidSourcesJar(type: Jar) {\n    classifier = 'sources'\n    from android.sourceSets.main.java.srcDirs\n}\n\npublishing {\n    publications {\n        mavenAar(MavenPublication) {\n            from components.android\n            groupId group\n            artifactId POM_ARTIFACT_ID\n            version version\n\n            artifact dokkaJar\n            artifact androidSourcesJar\n\n            pom.withXml {\n                def root = asNode()\n\n                root.children().last() + {\n                    resolveStrategy = DELEGATE_FIRST\n\n                    description POM_DESCRIPTION\n                    name POM_NAME\n                    url POM_URL\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                            email POM_DEVELOPER_EMAIL\n                            organization POM_DEVELOPER_ORGANIZATION\n                            organizationUrl POM_DEVELOPER_ORGANIZATION_URL\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    repositories {\n        def releaseUrl = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n        def snapshotUrl = \"https://oss.sonatype.org/content/repositories/snapshots\"\n\n        if (!version.contains(\"DIRTY\")) {\n            maven {\n                url !version.contains(\"SNAPSHOT\") ? releaseUrl : snapshotUrl\n                credentials {\n                    username System.getenv('SONATYPE_USERNAME') ?: \"\"\n                    password System.getenv('SONATYPE_PASSWORD') ?: \"\"\n                }\n            }\n        }\n    }\n}\n\nsigning {\n    required false\n    sign publishing.publications\n}\n"
        },
        {
          "name": "rajawali",
          "type": "tree",
          "content": null
        },
        {
          "name": "rajawali_secret.gpg.enc",
          "type": "blob",
          "size": 4.78125,
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1123046875,
          "content": "include ':rajawali'\ninclude ':examples'\n//include ':vuforia'\ninclude ':wear'\ninclude ':wear-example'\ninclude ':vr'\n"
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "vr",
          "type": "tree",
          "content": null
        },
        {
          "name": "wear-example",
          "type": "tree",
          "content": null
        },
        {
          "name": "wear",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}