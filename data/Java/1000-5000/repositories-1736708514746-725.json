{
  "metadata": {
    "timestamp": 1736708514746,
    "page": 725,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chennaione/sugar",
      "stars": 2618,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.40234375,
          "content": ".DS_Store\n\n# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Eclipse project files\n.classpath\n.project\n\n*.a\n*.dylib\n*.log\n*.o\n*.pot\n*.pyc\n*.pydevproject\n*.so\n*.suo\n*.xcworkspace\n*_ReSharper*\n\n.DS_Store\n._.DS_Store\n\nproject.properties\n\n.settings\nbuild/\n.gradle/\n.idea\n*.iml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.734375,
          "content": "language: android\njdk: oraclejdk7\n\nenv:\n  global:\n    - TERM=dumb\nandroid:\n  components:\n    - sys-img-armeabi-v7a-android-23\n    - tools\n    - build-tools-23.0.3\n    - android-23\n    - extra-android-m2repository\nbefore_script:\n  - sudo service postgresql stop || true\n  - sudo service mysql stop || true\n  - sudo service memcached stop || true\n  - sudo service bootlogd stop || true\n  - sudo service elasticsearch stop || true\n  - sudo service mongodb stop || true\n  - sudo service neo4j stop || true\n  - sudo service cassandra stop || true\n  - sudo service riak stop || true\n  - sudo service rsync stop || true\n  - sudo service x11-common stop || true\nscript:\n  - ./gradlew clean build connectedCheck coveralls\n\ncache:\n  directories:\n    - $HOME/.m2\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.998046875,
          "content": "# Sugar Releases\n\n## [Unreleased]\n\n\n## v1.5\n### Added\n* [#328](https://github.com/satyan/sugar/pull/328) @jedid auto add new columns during database upgrade, fix [#299](https://github.com/satyan/sugar/issues/299) and [#151](https://github.com/satyan/sugar/issues/151)\n* [#389](https://github.com/satyan/sugar/pull/389) @alfmatos MultiUnique DSL to handle MultiColumn Unique Table constraint\n* @sibeliusseraphini update, updateInTx methods based on Unique values of SugarRecord\n* [#155](https://github.com/satyan/sugar/issues/155) @benohalloran adding Cursors for Cursor Adapters [Pull 312](https://github.com/satyan/sugar/pull/312)\n* [#430](https://github.com/satyan/sugar/pull/430) @sibeliusseraphini update to roboelectric 3.0 and target android-32\n\n### Changed\n* [#437](https://github.com/satyan/sugar/pull/437) @dnalves removing guava dependency, using synchronized WeakHashMap instead\n* [#423](https://github.com/satyan/sugar/pull/423) @sibeliusseraphini moving changelog of README.md to CHANGELOG.md\n\n### Fixed\n* [#362](https://github.com/satyan/sugar/pull/362) @mitchyboy9 fixed NoClassDefFoundError\n* [#455](https://github.com/satyan/sugar/pull/455) @nurolopher fixed travis and coveralls config \n* [#434](https://github.com/satyan/sugar/pull/434) @bendaniel10 fix multi-dex\n* [#410](https://github.com/satyan/sugar/pull/410) [#408](https://github.com/satyan/sugar/pull/408) @RoyMontoya simplify code\n* [#327](https://github.com/satyan/sugar/pull/327) @tracytheron support multi-dex\n* [#373](https://github.com/satyan/sugar/pull/373) @salimkamboh use existing tables\n\n## v1.4\n### Added\n* [#306](https://github.com/satyan/sugar/pull/306) @Shyish return boolean/integer on delete methods\n* [#304](https://github.com/satyan/sugar/pull/304) @benohalloran add support to enum type\n* [#197](https://github.com/satyan/sugar/pull/197) @andresteves add suport for bytes[]\n* [#293](https://github.com/satyan/sugar/pull/293) @neilw4 support NULL in queries\n* [#273](https://github.com/satyan/sugar/pull/273) @dominicwong617 findById support an array of ids\n* [#246](https://github.com/satyan/sugar/pull/246) @kwf2030 use sqlite\\_master to check whether table already exist\n* [#253](https://github.com/satyan/sugar/pull/202) @JeroenMols add bulk delete\n* [#285](https://github.com/satyan/sugar/pull/202) @Shyish add listAll with orderBy param\n* No need to extend SugarApp - just call SugarContext.init(Context) instead\n* [#129](https://github.com/satyan/sugar/pull/129) @satyan support sugar entities using @Table annotations\n\n### Fixed\n* [#314](https://github.com/satyan/sugar/pull/314) @abscondment fix StrictMode DexFile\n* [#303](https://github.com/satyan/sugar/pull/303) @RossinesP fixed saving row string bug\n* [#258](https://github.com/satyan/sugar/pull/258) @nosrak113 change SugarRecord ID to private to not conflit with other libraries\n* [#254](https://github.com/satyan/sugar/pull/254) @jivimberg use weak keys to keep track of annotated entities\n* [#215](https://github.com/satyan/sugar/issues/215) @jivimberg fix bug persisting relationship\n* [#185](https://github.com/satyan/sugar/issues/185) [#243](https://github.com/satyan/sugar/issues/243) @whoshuu fix save and update method\n* [#202](https://github.com/satyan/sugar/pull/202) @allieus improve getDomainsClass()\n* [#104](https://github.com/satyan/sugar/issues/104) @whoshuu fix nesting \"and\" and \"or\"\n\n## v1.4 Beta [[jar](https://github.com/satyan/sugar/releases/download/v1.4_beta/sugar-1.4_beta.jar)]\n### Added\n* [#112](https://github.com/satyan/sugar/pull/112) @androdevcafe added Unique and NotNull annotations\n* [#78](https://github.com/satyan/sugar/pull/78) @HiddenCleverde capability to specify primary key\n\n### Fixed\n* [#113](https://github.com/satyan/sugar/pull/113) @whoshuu override findById to support int\n* [#106](https://github.com/satyan/sugar/issues/106) @whoshuu add documentation to onTerminate\n* [#54](https://github.com/satyan/sugar/issues/54) @whoshuu simplify count interface\n* [#43](https://github.com/satyan/sugar/issues/43) @whoshuu return id on save\n* [#72](https://github.com/satyan/sugar/issues/72) @whoshuu allow null values to Date and Calendar objects\n* [#96](https://github.com/satyan/sugar/issues/96) @whoshuu roboeletric fallback\n\n## v1.3 [[jar](https://github.com/satyan/sugar/releases/download/v1.3/sugar-1.3.jar)]\n\n- Transaction Support\n- Bulk Insert of records \n- Encrypted datastore (branch : sugar-cipher using sqlcipher)\n- Removed Constructor with context parameter. Needs default constructor now.\n- Enhancements to QueryBuilder\n- Bug fixes and other improvements.\n\n## v1.2 [[jar](https://github.com/satyan/sugar/releases/download/v1.2/sugar-1.2.jar)]\n\n- package restriction for domain classes.\n- metadata caching\n- QueryBuilder v1\n- Database Migrations\n- Provision for Raw queries\n- Better and more organized api guide and usage instructions.\n\n## v1.1 [[jar](https://github.com/satyan/sugar/releases/download/v1.1/sugar-1.1.jar)]\n\n- Static api doesn't take context anymore. Hence\n\n```java\nBook.findById(context, Book.class, 1);\n```\n\nbecomes\n\n```java\nBook.findById(Book.class, 1);\n```\n\n- Some cleanup in the code.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (C) 2012 by Satya Narayan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.08984375,
          "content": "# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master) [![Code Triagers Badge](http://www.codetriage.com/satyan/sugar/badges/users.svg)](http://www.codetriage.com/satyan/sugar)\n\n[![Join the chat at https://gitter.im/satyan/sugar](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/satyan/sugar?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nInsanely easy way to work with Android databases.\n\nOfficial documentation can be found [here](http://satyan.github.io/sugar) - Check some examples below. The example application is provided in the **example** folder in the source.\n\n## Looking for contributors\nWe need contributors to help maintain this project, ask @satyan for repo permission\n\nOtherwise you can use another ORM, like https://github.com/requery/requery or https://realm.io/\n\n## Features\n\nSugar ORM was built in contrast to other ORM's to have:\n\n- A simple, concise, and clean integration process with minimal configuration.\n- Automatic table and column naming through reflection.\n- Support for migrations between different schema versions.\n\n## Installing\n\nThere are four ways to install Sugar:\n\n#### As a Gradle dependency\n\nThis is the preferred way. Simply add:\n\n```groovy\ncompile 'com.github.satyan:sugar:1.5'\n```\n\nto your project dependencies and run `gradle build` or `gradle assemble`.\n\n#### As a Maven dependency\n\nDeclare the dependency in Maven:\n\n```xml\n<dependency>\n    <groupId>com.github.satyan</groupId>\n    <artifactId>sugar</artifactId>\n    <version>1.5</version>\n</dependency>\n```\n\n#### As a library project\n\nDownload the source code and import it as a library project in Eclipse. The project is available in the folder **library**. For more information on how to do this, read [here](http://developer.android.com/tools/projects/index.html#LibraryProjects).\n\n#### As a jar\n\nVisit the [releases](https://github.com/satyan/sugar/releases) page to download jars directly. You can drop them into your `libs` folder and configure the Java build path to include the library. See this [tutorial](http://www.vogella.com/tutorials/AndroidLibraryProjects/article.html) for an excellent guide on how to do this.\n\n\n### How to use master version\nFirst, download sugar repository\n```\ngit clone git@github.com:satyan/sugar.git\n```\n\ninclude this in your **settings.gradle**\n```gradle\ninclude ':app' // your module app\ninclude ':sugar'\n\ndef getLocalProperty(prop) {\n\tProperties properties = new Properties()\n\tproperties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())\n\treturn properties.getProperty(prop, '')\n}\n\nproject(':sugar').projectDir = new File(getLocalProperty('sugar.dir'))\n\n```\n\ninclude this in your **local.properties**\n```\nsugar.dir=/path/to/sugar/library\n```\n\nadd sugar project to the dependencies of your main project (build.gradle)\n```gradle\ndependencies {\n    compile project(':sugar')\n}\n```\n\nYou should also comment this line just comment this line (library/build.gradle): https://github.com/satyan/sugar/blob/master/library%2Fbuild.gradle#L2\n\n```gradle\n// apply from: '../maven_push.gradle'\n```\n===================\n\nAfter installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html) **Outdated**. Check examples of 1.4 and master below: \n\n## Examples\n### SugarRecord\n```java\npublic class Book extends SugarRecord {\n  @Unique\n  String isbn;\n  String title;\n  String edition;\n\n  // Default constructor is necessary for SugarRecord\n  public Book() {\n\n  }\n\n  public Book(String isbn, String title, String edition) {\n    this.isbn = isbn;\n    this.title = title;\n    this.edition = edition;\n  }\n}\n```\nor\n```java\n@Table\npublic class Book { ... }\n```\n\n### Save Entity\n```java\nBook book = new Book(\"isbn123\", \"Title here\", \"2nd edition\")\nbook.save();\n```\n\nor\n```java\nSugarRecord.save(book); // if using the @Table annotation \n```\n\n### Load Entity\n```java\nBook book = Book.findById(Book.class, 1);\n```\n\n### Update Entity\n```java\nBook book = Book.findById(Book.class, 1);\nbook.title = \"updated title here\"; // modify the values\nbook.edition = \"3rd edition\";\nbook.save(); // updates the previous entry with new values.\n```\n\n\n### Delete Entity\n```java\nBook book = Book.findById(Book.class, 1);\nbook.delete();\n```\n\nor\n```java\nSugarRecord.delete(book); // if using the @Table annotation \n```\n\n### Update Entity based on Unique values\n```java\nBook book = new Book(\"isbn123\", \"Title here\", \"2nd edition\")\nbook.save();\n\n// Update book with isbn123\nBook sameBook = new Book(\"isbn123\", \"New Title\", \"5th edition\")\nsameBook.update();\n\nbook.getId() == sameBook.getId(); // true\n```\n\nor\n```java\nSugarRecord.update(sameBook); // if using the @Table annotation \n```\n\n### Bulk Insert\n```java\nList<Book> books = new ArrayList<>();\nbooks.add(new Book(\"isbn123\", \"Title here\", \"2nd edition\"))\nbooks.add(new Book(\"isbn456\", \"Title here 2\", \"3nd edition\"))\nbooks.add(new Book(\"isbn789\", \"Title here 3\", \"4nd edition\"))\nSugarRecord.saveInTx(books);\n```\n\n### When using ProGuard\n```java\n# Ensures entities remain un-obfuscated so table and columns are named correctly\n-keep class com.yourpackage.yourapp.domainclasspackage.** { *; }\n```\n\n### Known Issues. \n#### 1. Instant Run. \nInstant-Run seems to prevent Sugar ORM from finding the \"table\" classes, therefore it cannot create the DB tables if you run the app for the first time \n\nWhen running your app for the first time Turn off Instant run once to allow for the DB tables to be created\nYou can enable it after the tables have been created. \n\nTo disable Instant-Run in Android Studio: \n\n``(Preferences (Mac) or Settings (PC) -> Build, Execution, Deployment -> Instant Run -> Untick \"Enable Instant Run...\" )``\n\n## [CHANGELOG](https://github.com/satyan/sugar/blob/master/CHANGELOG.md)\n\n## Contributing\n\nPlease fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.509765625,
          "content": "apply plugin: 'jacoco'\napply plugin: 'com.github.kt3k.coveralls'\napply plugin: 'java'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.0.0'\n        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'\n    }\n}\n\ndef isReleaseBuild() {\n    return version.contains(\"SNAPSHOT\") == false\n}\ntest{\n    testLogging{\n        exceptionFormat = 'full'\n    }\n}\nallprojects {\n    version = VERSION_NAME\n    group = GROUP\n\n    repositories {\n        mavenLocal()\n        mavenCentral()\n        jcenter()\n    }\n}\n\nsubprojects { proj ->\n    apply plugin: 'jacoco'\n\n    jacoco {\n        version \"0.7.1.201405082137\"\n    }\n\n    task jacocoTestReport(type: JacocoReport) {\n        group = \"Reporting\"\n        description = \"Generate Jacoco coverage reports after running tests.\"\n        reports {\n            xml.enabled = true\n            html.enabled = true\n        }\n        classDirectories = fileTree(\n            dir: 'build/intermediates/classes/debug',\n            excludes: ['**/R*.class',\n                       '**/BuildConfig*'])\n        sourceDirectories = files('src/main/java')\n        executionData = files('build/jacoco/testDebugUnitTest.exec')\n        doFirst {\n            files('build/intermediates/classes/debug').getFiles().each { file ->\n                if (file.name.contains('$$')) {\n                    file.renameTo(file.path.replace('$$', '$'))\n                }\n            }\n        }\n    }\n}\n\njacoco {\n    toolVersion \"0.7.1.201405082137\"\n}\n\ntask jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {\n    group = \"Reporting\"\n    description = 'Generates an aggregate report from all subprojects'\n    dependsOn(subprojects.jacocoTestReport)\n\n    additionalSourceDirs = files('library/src/main/java')\n    sourceDirectories = files('library/src/main/java')\n    classDirectories = files('library/build/intermediates/classes/debug')\n    executionData = files(subprojects.jacocoTestReport.executionData)\n\n    reports {\n        html.enabled = true\n        xml.enabled = true\n    }\n\n    onlyIf = {\n        true\n    }\n\n    doFirst {\n        executionData = files(executionData.findAll { it.exists() })\n    }\n}\n\ncoveralls {\n    sourceDirs = files('library/src/main/java').flatten()\n    jacocoReportPath = \"${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml\"\n}\n\ntasks.coveralls {\n    group = 'Coverage reports'\n    description = 'Uploads the aggregated coverage report to Coveralls'\n\n    dependsOn jacocoRootReport\n    onlyIf { System.env.'CI' }\n}"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.373046875,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Settings specified in this file will override any Gradle settings\n# configured through the IDE.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\norg.gradle.daemon=true\n\nVERSION_NAME=2\nVERSION_CODE=2\nGROUP=com.github.satyan\n\nPOM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database\nPOM_URL=https://github.com/satyan/sugar\nPOM_SCM_URL=https://github.com/satyan/sugar\nPOM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=satyan\nPOM_DEVELOPER_NAME=Satya Narayan"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven_push.gradle",
          "type": "blob",
          "size": 2.68359375,
          "content": "apply plugin: 'maven'\napply plugin: 'signing'\n\ndef sonatypeRepositoryUrl\nif (isReleaseBuild()) {\n    println 'RELEASE BUILD'\n    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n} else {\n    println 'DEBUG BUILD'\n    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('nexusUsername') ? nexusUsername : \"\"\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('nexusPassword') ? nexusPassword : \"\"\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.artifactId = POM_ARTIFACT_ID\n\n                repository(url: sonatypeRepositoryUrl) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    task androidJavadocs(type: Javadoc) {\n        source = android.sourceSets.main.java.sourceFiles\n    }\n\n    task androidJavadocsJar(type: Jar) {\n        classifier = 'javadoc'\n        //basename = artifact_id\n        from androidJavadocs.destinationDir\n    }\n\n    task androidSourcesJar(type: Jar) {\n        classifier = 'sources'\n        //basename = artifact_id\n        from android.sourceSets.main.java.sourceFiles\n    }\n\n    artifacts {\n        //archives packageReleaseJar\n        archives androidSourcesJar\n        archives androidJavadocsJar\n    }\n}"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.037109375,
          "content": "include ':library'\ninclude ':example'\n"
        }
      ]
    }
  ]
}