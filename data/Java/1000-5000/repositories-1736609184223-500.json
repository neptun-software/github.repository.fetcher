{
  "metadata": {
    "timestamp": 1736609184223,
    "page": 500,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "szerhusenBC/jwt-spring-security-demo",
      "stars": 3052,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4287109375,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\n\n# We recommend you to keep these unchanged\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# Change these settings to your own preference\nindent_style = space\nindent_size = 3\n\n[*.yml]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.048828125,
          "content": "### JetBrains template\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion\n\n*.iml\n\n## Directory-based project format:\n.idea/\n# if you remove the above rule, at least ignore the following:\n\n# User-specific stuff:\n# .idea/workspace.xml\n# .idea/tasks.xml\n# .idea/dictionaries\n\n# Sensitive or high-churn files:\n# .idea/dataSources.ids\n# .idea/dataSources.xml\n# .idea/sqlDataSources.xml\n# .idea/dynamic.xml\n# .idea/uiDesigner.xml\n\n# Gradle:\n# .idea/gradle.xml\n# .idea/libraries\n\n# Mongo Explorer plugin:\n# .idea/mongoSettings.xml\n\n## File-based project format:\n*.ipr\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n### Maven template\ntarget/\npom.xml.tag\npom.xml.releaseBackup\npom.xml.versionsBackup\npom.xml.next\nrelease.properties\ndependency-reduced-pom.xml\nbuildNumber.properties\n.mvn/timing.properties\n\n### Java\n\n*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0341796875,
          "content": "language: java\n\njdk:\n  - openjdk11\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2018 Stephan Zerhusen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.865234375,
          "content": "# JWT Spring Security Demo\n\n![Screenshot from running application](etc/screenshot-jwt-spring-security-demo.png?raw=true \"Screenshot JWT Spring Security Demo\")\n\n## About\nThis is a demo for using **[JWT (JSON Web Token)](https://jwt.io)** with **[Spring Security](https://spring.io/projects/spring-security)** and\n**[Spring Boot](https://spring.io/projects/spring-boot)**. I completely rewrote my first version. Now this solution is based on the code base\nfrom the [JHipster Project](https://www.jhipster.tech/). I tried to extract the minimal configuration and classes that are needed \nfor JWT-Authentication and did some changes.\n\n[![Build Status](https://travis-ci.org/szerhusenBC/jwt-spring-security-demo.svg?branch=master)](https://travis-ci.org/szerhusenBC/jwt-spring-security-demo)\n\n## Requirements\nThis demo is build with with Maven 3.6.x and Java 11.\n\n## Usage\nJust start the application with the Spring Boot maven plugin (`mvn spring-boot:run`). The application is\nrunning at [http://localhost:8080](http://localhost:8080).\n\nYou can use the **H2-Console** for exploring the database under [http://localhost:8080/h2-console](http://localhost:8080/h2-console):\n\n![Screenshot from h2-console login](etc/screenshot-h2-console-login.png?raw=true \"Screenshot H2-Console login\")\n\n## Backend\nThere are three user accounts present to demonstrate the different levels of access to the endpoints in\nthe API and the different authorization exceptions:\n```\nAdmin - admin:admin\nUser - user:password\nDisabled - disabled:password (this user is deactivated)\n```\n\nThere are four endpoints that are reasonable for the demo:\n```\n/api/authenticate - authentication endpoint with unrestricted access\n/api/user - returns detail information for an authenticated user (a valid JWT token must be present in the request header)\n/api/persons - an example endpoint that is restricted to authorized users with the authority 'ROLE_USER' (a valid JWT token must be present in the request header)\n/api/hiddenmessage - an example endpoint that is restricted to authorized users with the authority 'ROLE_ADMIN' (a valid JWT token must be present in the request header)\n```\n\n## Frontend\nI've written a small Javascript client and put some comments in the code that hopefully makes this demo understandable.\nYou can find it at [/src/main/resources/static/js/client.js](/src/main/resources/static/js/client.js).\n\n### Generating password hashes for new users\n\nI'm using [bcrypt](https://en.wikipedia.org/wiki/Bcrypt) to encode passwords. Your can generate your hashes with this simple \ntool: [Bcrypt Generator](https://www.bcrypt-generator.com)\n\n### Using another database\n\nActually this demo is using an embedded H2 database that is automatically configured by Spring Boot. If you want to connect \nto another database you have to specify the connection in the *application.yml* in the resource directory. Here is an example for a MySQL DB:\n\n```\nspring:\n  jpa:\n    hibernate:\n      # possible values: validate | update | create | create-drop\n      ddl-auto: create-drop\n  datasource:\n    url: jdbc:mysql://localhost/myDatabase\n    username: myUser\n    password: myPassword\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n*Hint: For other databases like MySQL sequences don't work for ID generation. So you have to change the GenerationType in the entity beans to 'AUTO' or 'IDENTITY'.*\n\nYou can find a reference of all application properties [here](http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html).\n\n### Using Flyway\n\nhttps://github.com/szerhusenBC/jwt-spring-security-demo/issues/81\n\n## Docker\nThis project has a docker image. You can find it at [https://hub.docker.com/r/hubae/jwt-spring-security-demo/](https://hub.docker.com/r/hubae/jwt-spring-security-demo/).\n\n## Questions\nIf you have project related questions please take a look at the [past questions](https://github.com/szerhusenBC/jwt-spring-security-demo/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%2Cclosed%20label%3Aquestion%20) or create a new ticket with your question.\n\n*If you have questions that are not directly related to this project (e.g. common questions to the Spring Framework or Spring Security etc.) please search the web or look at [Stackoverflow](http://www.stackoverflow.com).*\n\nSorry for that but I'm very busy right now and don't have much time.\n\n## Interesting projects\n\n* [spring-security-pac4j](https://github.com/pac4j/spring-security-pac4j) a Spring Boot integration for Pac4j (a Java security engine that covers JWT beside others)\n* For more complex microservice environments take a look here: [Using JWT with Spring Security OAuth](http://www.baeldung.com/spring-security-oauth-jwt)\n\n## Author\n\n**Stephan Zerhusen**\n\n* https://twitter.com/stzerhus\n* https://github.com/szerhusenBC\n\n## Copyright and license\n\nThe code is released under the [MIT license](LICENSE?raw=true).\n\n---------------------------------------\n\nPlease feel free to send me some feedback or questions!\n"
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.189453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>org.zerhusen</groupId>\n   <artifactId>jwtdemo</artifactId>\n   <version>2.0.0</version>\n   <packaging>jar</packaging>\n\n   <name>jwtdemo</name>\n   <description>Demo project for JWT with Spring Security</description>\n\n   <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>2.1.8.RELEASE</version>\n      <relativePath/> <!-- lookup parent from repository -->\n   </parent>\n\n   <properties>\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n      <java.version>11</java.version>\n\n      <jjwt.version>0.10.6</jjwt.version>\n\n      <dockerfile-maven-plugin.version>1.4.12</dockerfile-maven-plugin.version>\n   </properties>\n\n   <dependencies>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-data-jpa</artifactId>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-data-rest</artifactId>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-security</artifactId>\n      </dependency>\n\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-devtools</artifactId>\n      </dependency>\n\n      <dependency>\n         <groupId>com.h2database</groupId>\n         <artifactId>h2</artifactId>\n         <scope>runtime</scope>\n      </dependency>\n\n      <dependency>\n         <groupId>io.jsonwebtoken</groupId>\n         <artifactId>jjwt-api</artifactId>\n         <version>${jjwt.version}</version>\n      </dependency>\n      <dependency>\n         <groupId>io.jsonwebtoken</groupId>\n         <artifactId>jjwt-impl</artifactId>\n         <version>${jjwt.version}</version>\n      </dependency>\n      <dependency>\n         <groupId>io.jsonwebtoken</groupId>\n         <artifactId>jjwt-jackson</artifactId>\n         <version>${jjwt.version}</version>\n      </dependency>\n\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-test</artifactId>\n         <scope>test</scope>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.security</groupId>\n         <artifactId>spring-security-test</artifactId>\n         <scope>test</scope>\n      </dependency>\n   </dependencies>\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n         </plugin>\n      </plugins>\n   </build>\n\n   <profiles>\n      <profile>\n         <id>build-docker</id>\n         <build>\n            <plugins>\n               <plugin>\n                  <groupId>com.spotify</groupId>\n                  <artifactId>dockerfile-maven-plugin</artifactId>\n                  <version>${dockerfile-maven-plugin.version}</version>\n                  <executions>\n                     <execution>\n                        <id>default</id>\n                        <goals>\n                           <goal>build</goal>\n                           <goal>push</goal>\n                        </goals>\n                        <!-- I don't have deployment -->\n                        <phase>pre-integration-test</phase>\n                     </execution>\n                  </executions>\n                  <configuration>\n                     <dockerfile>${project.basedir}/src/main/docker/Dockerfile</dockerfile>\n                     <repository>hubae/jwt-spring-security-demo</repository>\n                     <tag>${project.version}</tag>\n                     <useMavenSettingsForAuth>true</useMavenSettingsForAuth>\n                     <buildArgs>\n                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n                     </buildArgs>\n                  </configuration>\n               </plugin>\n            </plugins>\n         </build>\n      </profile>\n   </profiles>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}