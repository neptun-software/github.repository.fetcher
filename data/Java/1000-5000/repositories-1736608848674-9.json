{
  "metadata": {
    "timestamp": 1736608848674,
    "page": 9,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "remkop/picocli",
      "stars": 4979,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.158203125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.1259765625,
          "content": "# Handle line endings automatically for files detected as text\n# and leave all files detected as binary untouched.\n* text=auto\n\n#\n# The above will handle all files NOT found below\n#\n# These files are text and should be normalized (Convert crlf => lf)\n*.adoc          text eol=lf\n*.css           text eol=lf\n*.gradle        text eol=lf\n*.groovy        text eol=lf\n*.java          text eol=lf\n*.js            text eol=lf\n*.md            text eol=lf\n*.properties    text eol=lf\n*.txt           text eol=lf\n*.yml           text eol=lf\n*.html          text eol=lf\n\n# These files are text and must be normalized to lf\ngradlew         text eol=lf\n*.sh            text eol=lf\n*.bash          text eol=lf\n*.html          text eol=lf\nrun             text eol=lf\nrunCompletion   text eol=lf\nbashrc          text eol=lf\ninputrc         text eol=lf\n\n\n# These files are text and must be normalized to crlf\n*.bat           text eol=crlf\n\n# These files are binary and should be left untouched\n# (binary is a macro for -text -diff)\n*.gif           binary\n*.ico           binary\n*.jar           binary\n*.jpg           binary\n*.jpeg          binary\n*.png           binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.48046875,
          "content": ".gradle/\n.idea/\nbuild/\nlocal.properties\ntarget/\ntmp/\npicocli.iml\n/out/\n/picocli-*/out/\n/src/test/dejagnu.tests/xtrace.log\n/src/test/dejagnu.tests/log/completion.sum\n/src/test/dejagnu.tests/log/completion.log\n/src/test/dejagnu.tests/completion.log\n/src/test/dejagnu.tests/completion.sum\n/src/test/dejagnu.tests/testrun.log\n/src/test/dejagnu.tests/testrun.sum\n/src/test/dejagnu.tests/tmp/\n/picocli-tests-java567/gradle/wrapper/dists/**/*.lck\n/picocli-tests-java567/gradle/wrapper/dists/**/*.ok\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4521484375,
          "content": "# Contributing to picocli\n\n:+1::star_struck: Wow, thanks for taking the time to contribute! :tada::+1:\n\nThe following is a set of guidelines for contributing to [picocli](https://github.com/remkop/picocli). These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.\n\n## <a name=\"questions\"></a> It is okay to raise an issue to ask a question\nIf you have a question about picocli, feel free to raise an issue for it.\n\n## <a name=\"helpful\"></a> Helpful problem reports look like this\nA helpful issue (problem report) is one that saves the maintainer time.\nTry to include these elements:\n\n* How to reproduce the problem\n* What is the expected behaviour\n* What do you actually see\n\nIf you can provide code that reproduces the problem, great!\nIf this code is in the form of a failing unit test, even better!\n\n## <a name=\"issue_or_pr\"></a> Issues or pull requests?\nAs a rule of thumb, it may be good to raise an issue first before providing a pull request.\n\nIt is a good idea to check we all have the same understanding that there actually is a problem to solve, and for complex pull requests it may save time when we discuss in advance what shape the solution should take.\n\nThat said, for bugfixes and documentation fixes, reporting the issue and providing a pull request to fix it in one PR is perfectly fine.\nWhen in doubt, maybe raise an issue first.\n\n\n## <a name=\"pr_conventions\"></a> Conventions for pull requests\nIf there is a corresponding GitHub issue, please mention the issue number in the pull request title.\n\nIdeally prefix commit comments with either the pull request number, or the associated GitHub issue number.\n\n\n## <a name=\"java_version\"></a> Java version\nThe project is built with Java 8, and different artifacts target different versions of Java.\nSee the table below.\n\nArtifact | Target Java Version\n------------ | -------------\n`picocli` | Java 5\n`picocli-codegen` | Java 6\n`picocli-groovy` | Java 5\n`picocli-shell-jline2` | Java 5\n`picocli-shell-jline3` | Java 8\n`picocli-spring-boot-starter` | Java 8\n\nPlease be aware that pull requests can only use language features that are supported in the above version of Java.\n\n## <a name=\"build\"> Building\n\n```\ngit clone https://github.com/remkop/picocli.git\ncd picocli\ngradlew publishToMavenLocal\n```\n\nThat should publish `picocli-4.7.0-SNAPSHOT` to your local .m2 Maven cache. You can then try this in a project that uses the `info.picocli:picocli:4.7.0-SNAPSHOT` dependency.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE-DOCS",
          "type": "blob",
          "size": 19.02734375,
          "content": "This project includes one or more documentation files from OpenJDK, licensed under GPL v2 with Classpath Exception.\n\nThese files are included in the source distributions, not in the binary distributions of this project.\n\nThe GNU General Public License (GPL)\n\nVersion 2, June 1991\n\nCopyright (C) 1989, 1991 Free Software Foundation, Inc.\n59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this license\ndocument, but changing it is not allowed.\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to share\nand change it.  By contrast, the GNU General Public License is intended to\nguarantee your freedom to share and change free software--to make sure the\nsoftware is free for all its users.  This General Public License applies to\nmost of the Free Software Foundation's software and to any other program whose\nauthors commit to using it.  (Some other Free Software Foundation software is\ncovered by the GNU Library General Public License instead.) You can apply it to\nyour programs, too.\n\nWhen we speak of free software, we are referring to freedom, not price.  Our\nGeneral Public Licenses are designed to make sure that you have the freedom to\ndistribute copies of free software (and charge for this service if you wish),\nthat you receive source code or can get it if you want it, that you can change\nthe software or use pieces of it in new free programs; and that you know you\ncan do these things.\n\nTo protect your rights, we need to make restrictions that forbid anyone to deny\nyou these rights or to ask you to surrender the rights.  These restrictions\ntranslate to certain responsibilities for you if you distribute copies of the\nsoftware, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether gratis or for\na fee, you must give the recipients all the rights that you have.  You must\nmake sure that they, too, receive or can get the source code.  And you must\nshow them these terms so they know their rights.\n\nWe protect your rights with two steps: (1) copyright the software, and (2)\noffer you this license which gives you legal permission to copy, distribute\nand/or modify the software.\n\nAlso, for each author's protection and ours, we want to make certain that\neveryone understands that there is no warranty for this free software.  If the\nsoftware is modified by someone else and passed on, we want its recipients to\nknow that what they have is not the original, so that any problems introduced\nby others will not reflect on the original authors' reputations.\n\nFinally, any free program is threatened constantly by software patents.  We\nwish to avoid the danger that redistributors of a free program will\nindividually obtain patent licenses, in effect making the program proprietary.\nTo prevent this, we have made it clear that any patent must be licensed for\neveryone's free use or not licensed at all.\n\nThe precise terms and conditions for copying, distribution and modification\nfollow.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License applies to any program or other work which contains a notice\nplaced by the copyright holder saying it may be distributed under the terms of\nthis General Public License.  The \"Program\", below, refers to any such program\nor work, and a \"work based on the Program\" means either the Program or any\nderivative work under copyright law: that is to say, a work containing the\nProgram or a portion of it, either verbatim or with modifications and/or\ntranslated into another language.  (Hereinafter, translation is included\nwithout limitation in the term \"modification\".) Each licensee is addressed as\n\"you\".\n\nActivities other than copying, distribution and modification are not covered by\nthis License; they are outside its scope.  The act of running the Program is\nnot restricted, and the output from the Program is covered only if its contents\nconstitute a work based on the Program (independent of having been made by\nrunning the Program).  Whether that is true depends on what the Program does.\n\n1. You may copy and distribute verbatim copies of the Program's source code as\nyou receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this License\nand to the absence of any warranty; and give any other recipients of the\nProgram a copy of this License along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and you may\nat your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Program or any portion of it, thus\nforming a work based on the Program, and copy and distribute such modifications\nor work under the terms of Section 1 above, provided that you also meet all of\nthese conditions:\n\n    a) You must cause the modified files to carry prominent notices stating\n    that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in whole or\n    in part contains or is derived from the Program or any part thereof, to be\n    licensed as a whole at no charge to all third parties under the terms of\n    this License.\n\n    c) If the modified program normally reads commands interactively when run,\n    you must cause it, when started running for such interactive use in the\n    most ordinary way, to print or display an announcement including an\n    appropriate copyright notice and a notice that there is no warranty (or\n    else, saying that you provide a warranty) and that users may redistribute\n    the program under these conditions, and telling the user how to view a copy\n    of this License.  (Exception: if the Program itself is interactive but does\n    not normally print such an announcement, your work based on the Program is\n    not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If identifiable\nsections of that work are not derived from the Program, and can be reasonably\nconsidered independent and separate works in themselves, then this License, and\nits terms, do not apply to those sections when you distribute them as separate\nworks.  But when you distribute the same sections as part of a whole which is a\nwork based on the Program, the distribution of the whole must be on the terms\nof this License, whose permissions for other licensees extend to the entire\nwhole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your\nrights to work written entirely by you; rather, the intent is to exercise the\nright to control the distribution of derivative or collective works based on\nthe Program.\n\nIn addition, mere aggregation of another work not based on the Program with the\nProgram (or with a work based on the Program) on a volume of a storage or\ndistribution medium does not bring the other work under the scope of this\nLicense.\n\n3. You may copy and distribute the Program (or a work based on it, under\nSection 2) in object code or executable form under the terms of Sections 1 and\n2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable source\n    code, which must be distributed under the terms of Sections 1 and 2 above\n    on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three years, to\n    give any third party, for a charge no more than your cost of physically\n    performing source distribution, a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of Sections 1\n    and 2 above on a medium customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer to\n    distribute corresponding source code.  (This alternative is allowed only\n    for noncommercial distribution and only if you received the program in\n    object code or executable form with such an offer, in accord with\n    Subsection b above.)\n\nThe source code for a work means the preferred form of the work for making\nmodifications to it.  For an executable work, complete source code means all\nthe source code for all modules it contains, plus any associated interface\ndefinition files, plus the scripts used to control compilation and installation\nof the executable.  However, as a special exception, the source code\ndistributed need not include anything that is normally distributed (in either\nsource or binary form) with the major components (compiler, kernel, and so on)\nof the operating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the source\ncode from the same place counts as distribution of the source code, even though\nthird parties are not compelled to copy the source along with the object code.\n\n4. You may not copy, modify, sublicense, or distribute the Program except as\nexpressly provided under this License.  Any attempt otherwise to copy, modify,\nsublicense or distribute the Program is void, and will automatically terminate\nyour rights under this License.  However, parties who have received copies, or\nrights, from you under this License will not have their licenses terminated so\nlong as such parties remain in full compliance.\n\n5. You are not required to accept this License, since you have not signed it.\nHowever, nothing else grants you permission to modify or distribute the Program\nor its derivative works.  These actions are prohibited by law if you do not\naccept this License.  Therefore, by modifying or distributing the Program (or\nany work based on the Program), you indicate your acceptance of this License to\ndo so, and all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n6. Each time you redistribute the Program (or any work based on the Program),\nthe recipient automatically receives a license from the original licensor to\ncopy, distribute or modify the Program subject to these terms and conditions.\nYou may not impose any further restrictions on the recipients' exercise of the\nrights granted herein.  You are not responsible for enforcing compliance by\nthird parties to this License.\n\n7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues), conditions\nare imposed on you (whether by court order, agreement or otherwise) that\ncontradict the conditions of this License, they do not excuse you from the\nconditions of this License.  If you cannot distribute so as to satisfy\nsimultaneously your obligations under this License and any other pertinent\nobligations, then as a consequence you may not distribute the Program at all.\nFor example, if a patent license would not permit royalty-free redistribution\nof the Program by all those who receive copies directly or indirectly through\nyou, then the only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply and\nthe section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or\nother property right claims or to contest validity of any such claims; this\nsection has the sole purpose of protecting the integrity of the free software\ndistribution system, which is implemented by public license practices.  Many\npeople have made generous contributions to the wide range of software\ndistributed through that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing to\ndistribute software through any other system and a licensee cannot impose that\nchoice.\n\nThis section is intended to make thoroughly clear what is believed to be a\nconsequence of the rest of this License.\n\n8. If the distribution and/or use of the Program is restricted in certain\ncountries either by patents or by copyrighted interfaces, the original\ncopyright holder who places the Program under this License may add an explicit\ngeographical distribution limitation excluding those countries, so that\ndistribution is permitted only in or among countries not thus excluded.  In\nsuch case, this License incorporates the limitation as if written in the body\nof this License.\n\n9. The Free Software Foundation may publish revised and/or new versions of the\nGeneral Public License from time to time.  Such new versions will be similar in\nspirit to the present version, but may differ in detail to address new problems\nor concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any later\nversion\", you have the option of following the terms and conditions either of\nthat version or of any later version published by the Free Software Foundation.\nIf the Program does not specify a version number of this License, you may\nchoose any version ever published by the Free Software Foundation.\n\n10. If you wish to incorporate parts of the Program into other free programs\nwhose distribution conditions are different, write to the author to ask for\npermission.  For software which is copyrighted by the Free Software Foundation,\nwrite to the Free Software Foundation; we sometimes make exceptions for this.\nOur decision will be guided by the two goals of preserving the free status of\nall derivatives of our free software and of promoting the sharing and reuse of\nsoftware generally.\n\nNO WARRANTY\n\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR\nTHE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE\nSTATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE\nPROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND\nPERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE,\nYOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL\nANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE\nPROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR\nINABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA\nBEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER\nOR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\nHow to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest possible\nuse to the public, the best way to achieve this is to make it free software\nwhich everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest to attach\nthem to the start of each source file to most effectively convey the exclusion\nof warranty; and each file should have at least the \"copyright\" line and a\npointer to where the full notice is found.\n\n    One line to give the program's name and a brief idea of what it does.\n\n    Copyright (C) <year> <name of author>\n\n    This program is free software; you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by the Free\n    Software Foundation; either version 2 of the License, or (at your option)\n    any later version.\n\n    This program is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc., 59\n    Temple Place, Suite 330, Boston, MA 02111-1307 USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this when it\nstarts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author Gnomovision comes\n    with ABSOLUTELY NO WARRANTY; for details type 'show w'.  This is free\n    software, and you are welcome to redistribute it under certain conditions;\n    type 'show c' for details.\n\nThe hypothetical commands 'show w' and 'show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may be\ncalled something other than 'show w' and 'show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.  Here\nis a sample; alter the names:\n\n    Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n    'Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n    signature of Ty Coon, 1 April 1989\n\n    Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General Public\nLicense instead of this License.\n\n\n\"CLASSPATH\" EXCEPTION TO THE GPL\n\nCertain source files distributed by Oracle America and/or its affiliates are\nsubject to the following clarification and special exception to the GPL, but\nonly where Oracle has expressly included in the particular source file's header\nthe words \"Oracle designates this particular file as subject to the \"Classpath\"\nexception as provided by Oracle in the LICENSE file that accompanied this code.\"\n\n    Linking this library statically or dynamically with other modules is making\n    a combined work based on this library.  Thus, the terms and conditions of\n    the GNU General Public License cover the whole combination.\n\n    As a special exception, the copyright holders of this library give you\n    permission to link this library with independent modules to produce an\n    executable, regardless of the license terms of these independent modules,\n    and to copy and distribute the resulting executable under terms of your\n    choice, provided that you also meet, for each linked independent module,\n    the terms and conditions of the license of that module.  An independent\n    module is a module which is not derived from or based on this library.  If\n    you modify this library, you may extend this exception to your version of\n    the library, but you are not obligated to do so.  If you do not wish to do\n    so, delete this exception statement from your version.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 40.5166015625,
          "content": "<p align=\"center\"><img src=\"docs/images/logo/horizontal-400x150.png\" alt=\"picocli\" height=\"150px\"></p>\n\n[![GitHub Release](https://img.shields.io/github/release/remkop/picocli.svg)](https://github.com/remkop/picocli/releases)\n[![Maven Central](https://img.shields.io/maven-central/v/info.picocli/picocli.svg?label=Maven%20Central)](https://search.maven.org/search?q=g:%22info.picocli%22%20AND%20a:%22picocli%22)\n[![GitHub Actions Build Status](https://github.com/remkop/picocli/actions/workflows/ci.yml/badge.svg)](https://github.com/remkop/picocli/actions/workflows/ci.yml)\n[![Tests](https://gist.githubusercontent.com/remkop/36bc8a3b4395f2fbdb9bc271e97ba2dd/raw/badge.svg)](https://github.com/remkop/picocli/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/remkop/picocli/branch/master/graph/badge.svg)](https://codecov.io/gh/remkop/picocli)\n[![Follow @remkopopma](https://img.shields.io/twitter/follow/remkopopma.svg?style=social)](https://twitter.com/intent/follow?screen_name=remkopopma)\n[![Follow @picocli](https://img.shields.io/twitter/follow/picocli.svg?style=social)](https://twitter.com/intent/follow?screen_name=picocli)\n[![Follow picocli on StackShare](https://img.shields.io/badge/Follow%20on-StackShare-blue.svg?logo=stackshare&style=flat)](https://stackshare.io/picocli)\n\n# picocli - a mighty tiny command line interface\n\nPicocli aims to be the easiest-to-use way to create rich command line applications that can run on and off the JVM.\nConsidering picocli? Check [what happy users say](https://github.com/remkop/picocli/wiki/Feedback-from-Users) about picocli.\n\nPicocli is a modern library and framework, written in Java, that contains both an annotations API and a programmatic API. It features usage help with [ANSI colors and styles](https://picocli.info/#_ansi_colors_and_styles), [TAB autocompletion](https://picocli.info/autocomplete.html) and nested subcommands.\nIn a single file, so you can include it _in source form_.\nThis lets users run picocli-based applications without requiring picocli as an external dependency.\n\nPicocli-based applications can be ahead-of-time compiled to a <img src=\"https://www.graalvm.org/resources/img/logo-colored.svg\" alt=\"GraalVM\">\n[native image](https://picocli.info/#_graalvm_native_image), with extremely fast startup time and lower memory requirements,\nwhich can be distributed as a single executable file.\nPicocli comes with an [annotation processor](https://picocli.info/#_annotation_processor) that automatically Graal-enables your jar during compilation.\n\nPicocli applications can be very compact with no boilerplate code: your command (or subcommand) can be executed with a [single line of code](#example \"(example below)\").\nSimply implement `Runnable` or `Callable`, or put the business logic of your command in a `@Command`-annotated method.\n\n<a id=\"picocli_demo\"></a>\n![Picocli Demo help message with ANSI colors](docs/images/picocli.Demo.png?raw=true)\n\nPicocli makes it easy to follow [Command Line Interface Guidelines](https://clig.dev/#guidelines).\n\nHow it works: annotate your class and picocli initializes it from the command line arguments,\nconverting the input to strongly typed data. Supports git-like [subcommands](https://picocli.info/#_subcommands)\n(and nested [sub-subcommands](https://picocli.info/#_nested_sub_subcommands)),\nany option prefix style, POSIX-style [grouped short options](https://picocli.info/#_short_posix_options),\ncustom [type converters](https://picocli.info/#_custom_type_converters),\n[password options](https://picocli.info/#_interactive_password_options) and more.\n\nPicocli distinguishes between [named options](https://picocli.info/#_options) and\n[positional parameters](https://picocli.info/#_positional_parameters) and allows _both_ to be\n[strongly typed](https://picocli.info/#_strongly_typed_everything).\n[Multi-valued fields](https://picocli.info/#_multiple_values) can specify\nan exact number of parameters or a [range](https://picocli.info/#_arity) (e.g., `0..*`, `1..2`).\nSupports [Map options](https://picocli.info/#_maps) like `-Dkey1=val1 -Dkey2=val2`, where both key and value can be strongly typed.\nParser [tracing](https://picocli.info/#_tracing) facilitates troubleshooting.\nCommand-line [argument files](https://picocli.info/#AtFiles) (@-files) allow applications to handle very long command lines.\n\nGenerates polished and easily tailored [usage help](https://picocli.info/#_usage_help)\nand  [version help](https://picocli.info/#_version_help),\nusing [ANSI colors](https://picocli.info/#_ansi_colors_and_styles) where possible.\nRequires at minimum Java 5, but is designed to facilitate the use of Java 8 lambdas. Tested on all [Java versions between 5 and 18-ea](https://github.com/remkop/picocli/actions/workflows/ci.yml) (inclusive).\n\nPicocli-based command line applications can have [TAB autocompletion](https://picocli.info/autocomplete.html),\ninteractively showing users what options and subcommands are available.\nWhen an option has [`completionCandidates`](https://picocli.info/#_completion_candidates_variable) or has an `enum` type, autocompletion can also suggest option values.\nPicocli can generate completion scripts for bash and zsh, and offers [`picocli-shell-jline2`](picocli-shell-jline2/README.md) and [`picocli-shell-jline3`](picocli-shell-jline3/README.md) modules with JLine `Completer` implementations for building interactive shell applications.\n\nUnique features in picocli include support for [negatable options](https://picocli.info/#_negatable_options),\nadvanced [quoted values](https://picocli.info/#_quoted_values),\nand [argument groups](https://picocli.info/#_argument_groups).\nArgument groups can be used to create mutually [exclusive](https://picocli.info/#_mutually_exclusive_options) options,\nmutually [dependent](https://picocli.info/#_mutually_dependent_options) options,\noption [sections](https://picocli.info/#_option_sections_in_usage_help) in the usage help message\nand [repeating composite arguments](https://picocli.info/#_repeating_composite_argument_groups) like\n`([-a=<a> -b=<b> -c=<c>] (-x | -y | -z))...`.\nFor advanced use cases, applications can access the picocli command object model with the\n[`@Spec` annotation](https://picocli.info/#spec-annotation), and\nimplement [custom parameter processing](https://picocli.info/#_custom_parameter_processing) for option parameters if the built-in logic is insufficient.\n\n\nPicocli-based applications can easily [integrate](https://picocli.info/#_dependency_injection) with Dependency Injection containers.\nThe [Micronaut](https://micronaut.io/) microservices framework has [built-in support](https://docs.micronaut.io/latest/guide/index.html#commandLineApps) for picocli.\n[Quarkus](https://quarkus.io/) has a [Command Mode with Picocli](https://quarkus.io/guides/picocli) extension for facilitating the creation of picocli-based CLI applications with Quarkus.\nPicocli ships with a [`picocli-spring-boot-starter` module](https://github.com/remkop/picocli/tree/main/picocli-spring-boot-starter)\nthat includes a `PicocliSpringFactory` and Spring Boot auto-configuration to use Spring dependency injection in your picocli command line application.\nThe user manual has examples of integrating with [Guice](https://picocli.info/#_guice_example), [Spring Boot](https://picocli.info/#_spring_boot_example), [Micronaut](https://picocli.info/#_micronaut_example), [Quarkus](https://picocli.info/#_quarkus_example) and with containers that comply to [CDI 2.0 specification](https://picocli.info/#_cdi_2_0_jsr_365) (JSR 365).\n\n### Releases\n* [All Releases](https://github.com/remkop/picocli/releases)\n* Latest: 4.7.6 [Release Notes](https://github.com/remkop/picocli/releases/tag/v4.7.6)\n* Older: Picocli 4.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v4.0.0)\n* Older: Picocli 3.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v3.0.0)\n* Older: Picocli 2.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v2.0.0)\n\n### Documentation\n* [4.x User manual: https://picocli.info](https://picocli.info)\n* [4.x Quick Guide](https://picocli.info/quick-guide.html)\n* [4.x API Javadoc](https://picocli.info/apidocs/)\n* [PREVIEW: Modular Javadoc for all artifacts (4.7.6-SNAPSHOT)](https://picocli.info/apidocs-all/)\n* [Command line autocompletion](https://picocli.info/autocomplete.html)\n* [Programmatic API](https://picocli.info/picocli-programmatic-api.html)\n* [FAQ](https://github.com/remkop/picocli/wiki/FAQ)\n* [GraalVM AOT Compilation to Native Image](https://picocli.info/picocli-on-graalvm.html) <img src=\"https://www.graalvm.org/resources/img/logo-colored.svg\" >\n\n### Older\n* ~~[3.x User manual](https://picocli.info/man/3.x)~~\n* ~~[3.x Quick Guide](https://picocli.info/man/3.x/quick-guide.html)~~\n* ~~[3.x API Javadoc](https://picocli.info/man/3.x/apidocs/)~~\n* ~~[2.x User manual](https://picocli.info/man/2.x)~~\n* ~~[2.x API Javadoc](https://picocli.info/man/2.x/apidocs/)~~\n* ~~[1.x User manual](https://picocli.info/man/1.x)~~\n\n### Articles & Presentations\n#### English\n* [6 things you can do with JBang but you can’t with Shell](http://www.mastertheboss.com/java/jbang-vs-jshell/) (2022-02-28) by [F.Marchioni](http://www.mastertheboss.com/author/admin/).\n* [VIDEO][Kotlin, CLIs and StarWars! - An introduction to creating CLI applications with Kotlin using Picocli](https://fosdem.org/2022/schedule/event/kotlin_clis_and_starwars/?utm_medium=social&utm_source=twitter&utm_campaign=postfity&utm_content=postfity77511) (2022-02-05) by [Julien Lengrand-Lambert](https://fosdem.org/2022/schedule/speaker/julien_lengrand_lambert/).\n* [VIDEO][Autocomplete Java CLI using Picocli](https://www.youtube.com/watch?v=tCrQqgOYszQ) (2022-01-24) by [raksrahul](https://www.youtube.com/channel/UCpYkDrjOq3xtt0Uyg9tEqvw).\n* [Picocli – Easiness for CLI arguments in Java](https://blog.adamgamboa.dev/picocli-easiness-for-cli-arguments-in-java/) (2021-10-27) by [agamboa](https://blog.adamgamboa.dev/author/agamboa/).\n* [Building Command Line Interfaces with Kotlin using picoCLI](https://foojay.io/today/building-command-line-interfaces-with-kotlin-using-picocli/) (2021-09-23) by [Julien Lengrand-Lambert](https://foojay.io/today/author/jlengrand/).\n* [VIDEO][Create Java CLI applications with picocli](https://www.youtube.com/watch?v=PaxBXABJIzY) (2021-09-14) by [coder4life](https://www.youtube.com/channel/UCt9lHt5bMpafypEDwj6J2WQ).\n* [PICOCLI](https://www.linkedin.com/pulse/picocli-sybren-boland/) (2021-06-30) by [Sybren Boland](https://www.linkedin.com/in/sybrenboland/).\n* [Picocli | Create your first Kotlin /JVM CLI application with GraalVM](https://manserpatrice.medium.com/picocli-create-your-first-kotlin-jvm-cli-application-with-graalvm-a7fea4da7e2) (2021-02-13) by [manserpatrice](https://manserpatrice.medium.com/).\n* [VIDEO] [Building kubectl plugins with Quarkus, picocli, fabric8io and jbang](https://www.youtube.com/watch?v=ZL29qrpk_Kc) (2021-01-22) by [Sébastien Blanc](https://twitter.com/sebi2706).\n* [VIDEO] [J-Fall Virtual 2020: Julien Lengrand - An introduction to creating CLI applications using picoCLI](https://www.youtube.com/watch?v=Rc_D4OTKidU&list=PLpQuPreMkT6D36w9d13uGpIPi5nf9I_0c&index=13) (2020-12-07) by [Julien Lengrand-Lambert](https://twitter.com/jlengrand). This was the top rated talk for [@nljug](https://twitter.com/nljug) #jfall virtual 2020! Congrats, Julien!\n* [Paginate results in a command line application using picoCLI](https://lengrand.fr/paginate-results-in-a-jvm-cli-application-using-picocli/) (2020-11-17) by [Julien Lengrand-Lambert](https://twitter.com/jlengrand).\n* [CLI applications with GraalVM Native Image](https://medium.com/graalvm/cli-applications-with-graalvm-native-image-d629a40aa0be) (2020-11-13) by [Oleg Šelajev](https://twitter.com/shelajev).\n* [Picocli subcommands - One program, many purposes](https://aragost.com/blog/java/picocli-subcommands.html) (2020-09-22) by [Jonas Andersen](https://twitter.com/PrimusAlgo).\n* [Native CLI with Picocli and GraalVM](https://dev.to/jbebar/native-cli-with-picocli-and-graalvm-566m) (2020-08-20) by [jbebar](https://dev.to/jbebar).\n* [How to build a CLI app in Java using jbang and picocli](https://www.twilio.com/blog/cli-app-java-jbang-picocli) (2020-08-13) by [Matthew Gilliard](https://twitter.com/MaximumGilliard).\n* [Building a GitHub Dependents Scraper with Quarkus and Picocli](https://blog.marcnuri.com/github-dependents-scraper-quarkus-picocli/) (2020-07-31) by [Marc Nuri](https://twitter.com/MarcNuri).\n* [Building a decent Java CLI](https://atextor.de/2020/07/27/building-a-decent-java-cli.html) (2020-07-27) by [Andreas Textor](https://twitter.com/atextor).\n* [VIDEO] (Another very well-produced video by Szymon Stepniak) [Implementing OAuth 2.0 in a Java command-line app using Micronaut, Picocli, and GraalVM](https://www.youtube.com/watch?v=js5H9UbmmMY) (2020-07-23) by [Szymon Stepniak](https://e.printstacktrace.blog/) ([YouTube channel](https://www.youtube.com/channel/UCEf8e5YAYnowq-2deW4tpsw)).\n* [Micronaut, Picocli, and GraalVM](https://e.printstacktrace.blog/building-stackoverflow-cli-with-java-11-micronaut-picocli-and-graalvm/) (2020-07-08) by [Szymon Stepniak](https://e.printstacktrace.blog/).\n* [VIDEO] (Extremely well-produced and informative, recommended!) [Building command-line app with Java 11, Micronaut, Picocli, and GraalVM](https://www.youtube.com/watch?v=Xdcg4Drg1hc) (2020-07-01) by [Szymon Stepniak](https://e.printstacktrace.blog/) ([YouTube channel](https://www.youtube.com/channel/UCEf8e5YAYnowq-2deW4tpsw)).\n* [AUDIO] [Scala Valentines #2](https://scala.love/scala-valentines-2/) (2020-06-21) Podcast talks about picocli (from 18:11).\n* [How to create a command line tool using Java?](https://fullstackdeveloper.guru/2020/06/18/how-to-create-a-command-line-tool-using-java/) (2020-06-18) by [Vijay SRJ](https://twitter.com/FullStackDevel6).\n* [Command-line tools with Quarkus and Picocli](https://quarkify.net/command-line-tools-with-quarkus-and-picocli/) (2020-06-08) by [Dmytro Chaban](https://twitter.com/dmi3coder).\n* Quarkus guide for [Quarkus command mode with picocli](https://quarkus.io/guides/picocli), thanks to a picocli extension by [Michał Górniewski](https://github.com/mgorniew) included in [Quarkus 1.5](https://quarkus.io/blog/quarkus-1-5-final-released/) (2020-06-03).\n* [Native images with Micronaut and GraalVM](https://dev.to/stack-labs/native-images-with-micronaut-and-graalvm-4koe) (2020-06-01) by [Λ\\: Olivier Revial](https://twitter.com/pommeDouze).\n* [CLI applications with Micronaut and Picocli](https://dev.to/stack-labs/cli-applications-with-micronaut-and-picocli-4mc8) (2020-06-01) by [Λ\\: Olivier Revial](https://twitter.com/pommeDouze).\n* [Picocli introduction - Modern Java command-line parsing](https://aragost.com/blog/java/picocli-introduction.html) (2020-05-19) by [Jonas Andersen](https://twitter.com/PrimusAlgo).\n* [Building Native Covid19 Tracker CLI using Java, PicoCLI & GraalVM](https://aboullaite.me/java-covid19-cli-picocli-graalvm/) (2020-05-11) by [Mohammed Aboullaite](https://aboullaite.me/author/mohammed/).\n* [Quarkus Command mode with Picocli](https://quarkify.net/quarkus-command-mode-with-picocli/) (2020-04-27) by [Dmytro Chaban](https://twitter.com/dmi3coder).\n* [Creating CLI tools with Scala, Picocli and GraalVM](https://medium.com/@takezoe/creating-cli-tools-with-scala-picocli-and-graalvm-ffde05bbd01d) (2020-03-09) by [Naoki Takezoe](https://twitter.com/takezoen)\n* [Building native Java CLIs with GraalVM, Picocli, and Gradle](https://medium.com/@mitch.seymour/building-native-java-clis-with-graalvm-picocli-and-gradle-2e8a8388d70d) (2020-03-08) by [Mitch Seymour](https://medium.com/@mitch.seymour)\n* [Build Great Native CLI Apps in Java with Graalvm and Picocli](https://www.infoq.com/articles/java-native-cli-graalvm-picocli/) (2020-03-07)\n* [Picocli Structured Objects](https://gist.github.com/hanslovsky/8276da86c53bc6d95bf01447cd5cb2b7#file-00_picocli-structured-objects-md) (2019-09-10) by [Philipp Hanslovsky](https://gist.github.com/hanslovsky) explains how to use picocli's support for repeating argument groups to add or configure structured objects from the command line.\n* [Create a Java Command Line Program with Picocli|Baeldung](https://www.baeldung.com/java-picocli-create-command-line-program) (2019-05-07) by [François Dupire](https://www.baeldung.com/author/francois-dupire/).\n* A whirlwind tour of picocli [JAX Magazine \"Putting the spotlight on Java tools\"](https://jaxenter.com/jax-mag-java-tools-157592.html) (2019-04-08).\n* [An Introduction to PicoCLI](https://devops.datenkollektiv.de/an-introduction-to-picocli.html) (2019-02-10) by [devop](https://devops.datenkollektiv.de/author/devop.html).\n* [Corda CLI UX (User Experience) Guide](https://docs.corda.net/head/cli-ux-guidelines.html) (2018 by R3 Limited) gives useful advice.\n* [Develop a CLI tool using groovy scripts](https://medium.com/@chinthakadinadasa/develop-a-cli-tool-using-groovy-scripts-a7d545eecddd) (2018-10-26) by [Chinthaka Dinadasa](https://medium.com/@chinthakadinadasa).\n* [Migrating from Commons CLI to picocli](https://picocli.info/migrating-from-commons-cli.html). You won't regret it! :-) (also on: [DZone](https://dzone.com/articles/migrating-from-commons-cli-to-picocli) and [Java Code Geeks](https://www.javacodegeeks.com/2018/11/migrating-commons-cli-picocli.html)).\n* [Groovy 2.5 CliBuilder Renewal](https://picocli.info/groovy-2.5-clibuilder-renewal.html) (also on [blogs.apache.org](https://blogs.apache.org/logging/entry/groovy-2-5-clibuilder-renewal)). In two parts: [Part 1](https://picocli.info/groovy-2.5-clibuilder-renewal-part1.html) (also on: [DZone](https://dzone.com/articles/groovy-25-clibuilder-renewal), [Java Code Geeks](https://www.javacodegeeks.com/2018/06/groovy-clibuilder-renewal-part-1.html)), [Part 2](https://picocli.info/groovy-2.5-clibuilder-renewal-part2.html) (also on: [DZone](https://dzone.com/articles/groovy-25-clibuilder-renewal-part-2), [Java Code Geeks](https://www.javacodegeeks.com/2018/06/groovy-clibuilder-renewal-part-2.html)).\n* Micronaut user manual for running microservices [standalone with picocli](https://docs.micronaut.io/snapshot/guide/index.html#commandLineApps).\n* [Java Command-Line Interfaces (Part 30): Observations](https://marxsoftware.blogspot.jp/2017/11/java-cmd-line-observations.html) by Dustin Marx about picocli 2.0.1 (also on: [DZone](https://dzone.com/articles/java-command-line-interfaces-part-30-finale-observations), [Java Code Geeks](https://www.javacodegeeks.com/2017/11/java-command-line-interfaces-part-30-observations.html))\n* [Java Command-Line Interfaces (Part 10): Picocli](https://marxsoftware.blogspot.jp/2017/08/picocli.html) by Dustin Marx about picocli 0.9.7 (also on: [DZone](https://dzone.com/articles/java-command-line-interfaces-part-10-picocli), [Java Code Geeks](https://www.javacodegeeks.com/2017/08/java-command-line-interfaces-part-10-picocli.html))\n* [Picocli 2.0: Groovy Scripts on Steroids](https://picocli.info/picocli-2.0-groovy-scripts-on-steroids.html) (also on: [DZone](https://dzone.com/articles/picocli-v2-groovy-scripts-on-steroids), [Java Code Geeks](https://www.javacodegeeks.com/2018/01/picocli-2-0-groovy-scripts-steroids.html))\n* [Picocli 2.0: Do More With Less](https://picocli.info/picocli-2.0-do-more-with-less.html) (also on: [DZone](https://dzone.com/articles/whats-new-in-picocli-20), [Java Code Geeks](https://www.javacodegeeks.com/2018/01/picocli-2-0-less.html))\n* [Announcing picocli 1.0](https://picocli.info/announcing-picocli-1.0.html) (also on: [DZone](https://dzone.com/articles/announcing-picocli-10))\n\n#### русский\n* [Выбор необходимых опций Picocli на основе основного варианта](https://coderoad.ru/61665865/%D0%92%D1%8B%D0%B1%D0%BE%D1%80-%D0%BD%D0%B5%D0%BE%D0%B1%D1%85%D0%BE%D0%B4%D0%B8%D0%BC%D1%8B%D1%85-%D0%BE%D0%BF%D1%86%D0%B8%D0%B9-Picocli-%D0%BD%D0%B0-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B5-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B2%D0%B0%D1%80%D0%B8%D0%B0%D0%BD%D1%82%D0%B0) (2020-05-07)\n* [Интерфейсы командной строки Java: picocli](https://habr.com/ru/company/otus/blog/419401/) (2018-08-06): Russian translation by [MaxRokatansky](https://habr.com/ru/users/MaxRokatansky/) of Dustin Marx' blog post.\n\n#### Español\n* [picocli, un poderoso framework para la creación de aplicaciones de línea de comandos](https://laboratoriolinux.es/index.php/-noticias-mundo-linux-/software/34261-picocli-un-poderoso-framework-para-la-creacion-de-aplicaciones-de-linea-de-comandos.html) (2023-09-09) by [Darkcrizt](https://ubunlog.com/author/darkcrizt/)\n* [picocli, un poderoso framework para la creación de aplicaciones de línea de comandos](https://ubunlog.com/picocli-un-poderoso-framework-para-la-creacion-de-aplicaciones-de-linea-de-comandos/) (2023-09-09) by [Darkcrizt](https://ubunlog.com/author/darkcrizt/)\n* [Quarkus + Picocli: Web scaper para extraer proyectos dependientes en GitHub](https://blog.marcnuri.com/quarkus-picocli-web-scaper-dependientes-github/) (2020-08-15) by [Marc Nuri](https://twitter.com/MarcNuri).\n* [Quarkus - Introducción: picocli](https://gerardo.dev/aws-quarkus-picocli.html) (2020-06-15) by [Gerardo Arroyo](https://twitter.com/codewarrior506).\n* [VIDEO] [Picocli - Spring Boot example](https://youtu.be/y9ayfjfrTF4) (2020-05-24) 7-minute quick introduction by Gonzalo H. Mendoza.\n\n#### Français\n* [Application mobile: Créez de superbes applications CLI natives en Java avec Graalvm et Picocli](https://seodigitalmarketing.net/application-mobile-creez-de-superbes-applications-cli-natives-en-java-avec-graalvm-et-picocli/) (2020-05-07) Translation of [Build Great Native CLI Apps in Java with Graalvm and Picocli](https://www.infoq.com/articles/java-native-cli-graalvm-picocli/) by [bouf1450](https://seodigitalmarketing.net/author/bouf1450/).\n* [VIDEO] [Des applications en ligne de commande avec Picocli et GraalVM (N. Peters)](https://www.youtube.com/watch?v=8ENbMwkaFyk) (2019-05-07): 15-minute presentation by Nicolas Peters during Devoxx FR. Presentation slides are [available on GitHub](https://t.co/tXhtpTpAff?amp=1).\n\n#### Português\n* [Desenvolva aplicações CLI nativas em Java com Graalvm e Picocli](https://www.infoq.com/br/articles/java-native-cli-graalvm-picocli/) (2020-08-28): Portuguese translation of [Build Great Native CLI Apps in Java with Graalvm and Picocli](https://www.infoq.com/articles/java-native-cli-graalvm-picocli/), thanks to [Rodrigo Ap G Batista](https://www.infoq.com/br/profile/Rodrigo-Ap-G-Batista/).\n* [VIDEO] [Quarkus #40: Command Mode com Picocli](https://www.youtube.com/watch?v=LweGDh-Jxlc) (2020-06-23): 13-minute presentation by [Vinícius Ferraz](https://www.youtube.com/channel/UCJNOHl-pTTTj4S9yq60Ps9A) (@viniciusfcf).\n\n#### 日本語\n* [CLI applications with GraalVM Native Image](https://logico-jp.io/2020/11/21/cli-applications-with-graalvm-native-image/) (2020-11-21) translation by [Logico_jp](https://logico-jp.io/who-is-logico/) of Oleg Šelajev's [post](https://medium.com/graalvm/cli-applications-with-graalvm-native-image-d629a40aa0be).\n* [Picocli + Kotlin + graalvm-native-image plugin でネイティブツールを作る](https://mike-neck.hatenadiary.com/entry/2020/04/24/090000) (2020-04-24) blog post by [mike-neck](https://mike-neck.hatenadiary.com/about) ([引きこもり持田](https://twitter.com/mike_neck) on Twitter).\n* [pythonのArgumentParserような使い心地！picocliのご紹介](https://lab.astamuse.co.jp/entry/2020/04/15/115000) (2020-04-15) by [@astamuseLab](https://lab.astamuse.co.jp/)\n* [Javaのコマンドラインアプリケーション向けのフレームワーク、picocliで遊ぶ](https://kazuhira-r.hatenablog.com/entry/2020/03/07/013626) (2020-03-07) blog post by [かずひら](https://twitter.com/kazuhira_r).\n* [KuromojiのCLIコマンドとpicocliとGraalVM](https://blog.johtani.info/blog/2020/02/28/kuromoji-cli/) (2020-02-28) blog post by [@johtani](https://twitter.com/johtani).\n* [GraalVM, PicocliとJavaでときめくネイティブコマンドラインアプリを作ろう](https://remkop.github.io/presentations/20191123/) (2019-11-23) Slides for my presentation at Japan Java User Group's [JJUG CCC 2019 Fall](https://ccc2019fall.java-users.jp/) conference.\n* [Picocliを使用してJavaコマンドラインプログラムを作成する - 開発者ドキュメント](https://ja.getdocs.org/java-picocli-create-command-line-program/) (2019-10-18)\n* [GraalVM と Picocliで Javaのネイティブコマンドラインアプリを作ろう](https://remkop.github.io/presentations/20190906/) (2019-09-06) Slides for my lightning talk presentation at [【東京】JJUG ナイトセミナー: ビール片手にLT大会 9/6（金）](https://jjug.doorkeeper.jp/events/95987)\n* [Picocli＋Spring Boot でコマンドラインアプリケーションを作成してみる](https://ksby.hatenablog.com/entry/2019/07/20/092721) (2019-07-20) by [かんがるーさんの日記](https://ksby.hatenablog.com/).\n* [GraalVM の native image を使って Java で爆速 Lambda の夢を見る](https://qiita.com/kencharos/items/69e43965515f368bc4a3) (2019-05-02) by [@kencharos](https://qiita.com/kencharos)\n\n#### 中文\n* [Java命令行界面（第10部分）：picocli](https://blog.csdn.net/dnc8371/article/details/106702365) (2020-06-07) translation by [dnc8371](https://blog.csdn.net/dnc8371).\n* [如何借助 Graalvm 和 Picocli 构建 Java 编写的原生 CLI 应用](https://www.infoq.cn/article/4RRJuxPRE80h7YsHZJtX) (2020-03-26): Chinese translation of [Build Great Native CLI Apps in Java with Graalvm and Picocli](https://www.infoq.com/articles/java-native-cli-graalvm-picocli/), thanks to [张卫滨](https://www.infoq.cn/profile/1067660).\n* [从Commons CLI迁移到Picocli](https://blog.csdn.net/genghaihua/article/details/88529409) (2019-03-13): Chinese translation of Migrating from Commons CLI to picocli, thanks to [genghaihua](https://me.csdn.net/genghaihua).\n* [Picocli 2.0: Steroids上的Groovy脚本](https://picocli.info/zh/picocli-2.0-groovy-scripts-on-steroids.html)\n* [Picocli 2.0: 以少求多](https://picocli.info/zh/picocli-2.0-do-more-with-less.html)\n\n### Mailing List\nJoin the [picocli Google group](https://groups.google.com/d/forum/picocli) if you are interested in discussing anything picocli-related and receiving announcements on new releases.\n\n### Credit\n<img src=\"https://picocli.info/images/logo/horizontal-400x150.png\" height=\"100\">\n\n[Reallinfo](https://github.com/reallinfo) designed the picocli logo! Many thanks!\n\n### Commitments\n\n| This project follows [semantic versioning](https://semver.org/) and adheres to the **[Zero Bugs Commitment](https://github.com/classgraph/classgraph/blob/f24fb4e8f2e4f3221065d755be6e65d59939c5d0/Zero-Bugs-Commitment.md)**. |\n|------------------------|\n\n## Adoption\n\n<div>\n<img src=\"https://picocli.info/images/groovy-logo.png\" height=\"50\"> <!--groovy--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://objectcomputing.com/files/3416/2275/4315/micronaut_horizontal_black.svg\" height=\"50\"><!--micronaut--><img src=\"https://picocli.info/images/1x1.png\" width=\"10\"><img src=\"https://avatars.githubusercontent.com/u/47638783?s=200&v=4\" height=\"50\"><!--quarkus--><img src=\"https://picocli.info/images/1x1.png\" width=\"10\"><img src=\"https://picocli.info/images/junit5logo-172x50.png\" height=\"50\"><!--junit5--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://picocli.info/images/debian-logo-192x50.png\" height=\"50\"> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/8433081?s=200&v=4\" height=\"50\"><!--intel--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/4430336?s=200&v=4\" height=\"50\"><!--oracle--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/1666512?s=200&v=4\" height=\"50\"><!--JOOQ--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"><img src=\"https://avatars.githubusercontent.com/u/545988?s=200&v=4\" height=\"50\"><!--SonarSource--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/47359?s=200&v=4\" height=\"50\"><!--Apache--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/3287599?s=200&v=4\" height=\"50\"><!--ESA--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/438548?s=200&v=4\" height=\"50\"><!--Liquibase--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/8976946?s=200&v=4\" height=\"50\"><!--Harvard PL--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://avatars.githubusercontent.com/u/2810941?s=200&v=4\" height=\"50\"><!--Google Cloud services--> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\">\n\n<img src=\"https://avatars.githubusercontent.com/u/317776?s=200&v=4\" height=\"50\"><!--Spring-->\n<img src=\"https://avatars0.githubusercontent.com/u/3299148?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars3.githubusercontent.com/u/39734771?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars3.githubusercontent.com/u/1453152?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars1.githubusercontent.com/u/201120?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars0.githubusercontent.com/u/6154722?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars3.githubusercontent.com/u/453694?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars0.githubusercontent.com/u/82592?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars0.githubusercontent.com/u/9312489?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars0.githubusercontent.com/u/59439283?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars1.githubusercontent.com/u/4186383?s=200&v=4\" height=\"50\">\n<img src=\"https://redis.com/wp-content/uploads/2021/08/redis-logo.png\" height=\"50\">\n<img src=\"https://picocli.info/images/karate-logo.png\" height=\"50\" width=\"50\"/>  <img src=\"https://picocli.info/images/checkstyle-logo-260x50.png\" height=\"50\"><img src=\"https://picocli.info/images/1x1.png\" width=\"10\">  <img src=\"https://picocli.info/images/ballerina-logo.png\" height=\"40\"><img src=\"https://picocli.info/images/1x1.png\" width=\"10\">  <img src=\"https://picocli.info/images/apache-hive-logo.png\" height=\"50\"><img src=\"https://picocli.info/images/1x1.png\" width=\"10\">  <img src=\"https://hadoop.apache.org/hadoop-logo.jpg\" height=\"50\"><img src=\"https://picocli.info/images/1x1.png\" width=\"10\"> <img src=\"https://picocli.info/images/apache-ozone-logo.png\" height=\"50\"> <img src=\"https://picocli.info/images/1x1.png\" width=\"10\">  <img src=\"https://picocli.info/images/stackshare-logo.png\" height=\"50\"> <img src=\"https://ignite.apache.org/images/Ignite_tm_Logo_blk_RGB.svg\" height=\"50\"> <img src=\"https://camo.githubusercontent.com/501aae78d282faf7a904bbb92f46eb8d19445ad5/687474703a2f2f736c696e672e6170616368652e6f72672f7265732f6c6f676f732f736c696e672e706e67\" height=\"50\">\n<img src=\"https://avatars1.githubusercontent.com/u/541152?s=200&v=4\" height=\"50\">  <img src=\"https://camo.qiitausercontent.com/ec81e80366e061c8488b25c013003267b7a578d4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3939352f33323331306534352d303537332d383534322d373035652d6530313138643434323632302e706e67\" height=\"50\">\n<img src=\"https://mk0upserved13l70iwek.kinstacdn.com/media/Upserve_LS_Lockup_000000_RGB_Vertical.svg\" height=\"50\">\n<img src=\"https://www.kloudtek.com/logo-dark.png\" height=\"50\">\n<img src=\"https://www.schemacrawler.com/images/schemacrawler_logo.svg\" height=\"50\">\n<img src=\"https://avatars1.githubusercontent.com/u/22600631?s=200&v=4\" height=\"50\">\n<img src=\"https://fisco-bcos-documentation.readthedocs.io/en/latest/_static/images/FISCO_BCOS_Logo.svg\" height=\"50\">\n<img src=\"https://avatars0.githubusercontent.com/u/35625214?s=200&v=4\" height=\"50\">\n<img src=\"https://avatars1.githubusercontent.com/u/2386734?s=200&v=4\" height=\"50\">\n<img src=\"https://www.e-contract.be/images/logo.svg\" height=\"50\">\n<img src=\"https://present.co/images/logn-new@2x.png\" height=\"50\">\n<img src=\"https://avatars2.githubusercontent.com/u/13641167?s=200&v=4\" height=\"50\">\n<img src=\"https://concord.walmartlabs.com/assets/img/logo.png\" height=\"50\">\n<img src=\"https://res-3.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_120,w_120,f_auto,b_white,q_auto:eco/etxip1k2sx4sphvwgkdu\" height=\"50\">\n<img src=\"https://avatars.githubusercontent.com/u/1390178?s=200&v=4\" height=\"50\"><!-- minecraft forge-->\n\n</div>\n\n\n* Picocli is now part of Groovy. From Groovy 2.5, all Groovy command line tools are picocli-based, and picocli is the underlying parser for Groovy's [CliBuilder DSL](https://groovy-lang.org/dsls.html#_clibuilder).\n* Picocli is now part of Micronaut. The Micronaut CLI has been rewritten with picocli, and Micronaut has dedicated support for running microservices [standalone with picocli](https://docs.micronaut.io/snapshot/guide/index.html#commandLineApps). See also [Micronaut Picocli Guide](https://micronaut-projects.github.io/micronaut-picocli/latest/guide/).\n* Quarkus now offers [Command mode with picocli](https://quarkus.io/guides/picocli).\n* Picocli is now part of JUnit 5. JUnit 5.3 migrated its `ConsoleLauncher` from jopt-simple to picocli to support @-files (argument files); this helps users who need to specify many tests on the command line and run into system limitations.\n* Debian now offers a [libpicocli-java package](https://tracker.debian.org/pkg/picocli). Thanks to [Miroslav Kravec](https://udd.debian.org/dmd/?kravec.miroslav%40gmail.com).\n* Picocli is used in the Intuit [Karate](https://github.com/intuit/karate) standalone JAR / executable.\n* Picocli is part of [Ballerina](https://ballerina.io/). Ballerina uses picocli for all its command line utilities.\n* Picocli is used in the [CheckStyle](https://checkstyle.org/cmdline.html) standalone JAR / executable from Checkstyle 8.15.\n* Picocli is included in the [OpenJDK Quality Outreach](https://wiki.openjdk.java.net/display/quality/Quality+Outreach) list of Free Open Source Software (FOSS) projects that actively test against OpenJDK builds.\n* Picocli is used in the Apache Hadoop Ozone/HDDS command line tools, the Apache Hive benchmark CLI, Apache [Ignite TensorFlow](https://github.com/apache/ignite), and Apache Sling [Feature Model Converter](https://github.com/apache/sling-org-apache-sling-feature-modelconverter).\n* Picocli is listed on [StackShare](https://stackshare.io/picocli). Please add it to your stack and add/upvote reasons why you like picocli!\n* Picocli is used in Pinterest [ktlint](https://ktlint.github.io/).\n* Picocli is used in Spring IO [nohttp-cli](https://github.com/spring-io/nohttp/tree/main/nohttp-cli).\n* The [MinecraftPicocli](https://github.com/Rubydesic/MinecraftPicocli) library facilitates the use of picocli in [Minecraft Forge](https://files.minecraftforge.net/).\n* [Simple Java Mail](https://www.simplejavamail.org/) now offers a picocli-based [CLI](https://www.simplejavamail.org/cli.html#navigation).\n* [jbang](https://github.com/maxandersen/jbang) not only uses picocli internally, but also has a CLI template to generate an initial script: use `jbang --init=cli helloworld.java` to generate a sample picocli-enabled jbang script. See [asciinema](https://asciinema.org/a/AVwA19yijKRNKEO0bJENN2ME3?autoplay=true&speed=2).\n* Picocli is the main library used in the CookieTemple [cli-java template](https://cookietemple.readthedocs.io/en/latest/available_templates/available_templates.html#cli-java) for building GraalVM native CLI executables in Java. See [this preview](https://user-images.githubusercontent.com/21954664/86740903-474a3000-c037-11ea-9ae3-1a8f7bf1743f.gif).\n* Picocli is [mentioned](https://clig.dev/#the-basics) in [Command Line Interface Guidelines](https://clig.dev/).\n\n<img src=\"https://picocli.info/images/downloads-202011.png\">\n\nGlad to see more people are using picocli. We must be doing something right. :-)\n\n### Contribute by helping to promote picocli\nIf you like picocli, help others discover picocli:\n\n#### Easy and impactful :sweat_smile:\n* Give picocli a star on GitHub!\n* Upvote my [StackOverflow answer](https://stackoverflow.com/a/43780433/1446916) to \"How do I parse command line arguments in Java?\"\n* Upvote my [Quora answer](https://www.quora.com/What-is-the-best-way-to-parse-command-line-arguments-with-Java/answer/Remko-Popma) to \"What is the best way to parse command-line arguments with Java?\"\n\n#### Spread the joy! :tada:\n* Tweet about picocli! What do you like about it? How has it helped you? How is it different from the alternatives?\n* Mention that your project uses picocli in the documentation of your project.\n* Show that your GitHub project uses picocli, with this badge in your README.md: [![picocli](https://img.shields.io/badge/picocli-4.7.6-green.svg)](https://github.com/remkop/picocli)\n```\n[![picocli](https://img.shields.io/badge/picocli-4.7.6-green.svg)](https://github.com/remkop/picocli)\n```\n\n#### Preach it! :muscle:\n* Perhaps the most impactful way to show people how picocli can make their life easier is to write a blog post or article, or even do a video!\n\n\n## Example\n\nAnnotate fields with the command line parameter names and description. Optionally implement `Runnable` or `Callable` to delegate error handling and requests for usage help or version help to picocli. For example:\n\n\n```java\nimport picocli.CommandLine;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\nimport java.io.File;\n\n@Command(name = \"example\", mixinStandardHelpOptions = true, version = \"Picocli example 4.0\")\npublic class Example implements Runnable {\n\n    @Option(names = { \"-v\", \"--verbose\" },\n      description = \"Verbose mode. Helpful for troubleshooting. Multiple -v options increase the verbosity.\")\n    private boolean[] verbose = new boolean[0];\n\n    @Parameters(arity = \"1..*\", paramLabel = \"FILE\", description = \"File(s) to process.\")\n    private File[] inputFiles;\n\n    public void run() {\n        if (verbose.length > 0) {\n            System.out.println(inputFiles.length + \" files to process...\");\n        }\n        if (verbose.length > 1) {\n            for (File f : inputFiles) {\n                System.out.println(f.getAbsolutePath());\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        // By implementing Runnable or Callable, parsing, error handling and handling user\n        // requests for usage help or version help can be done with one line of code.\n\n        int exitCode = new CommandLine(new Example()).execute(args);\n        System.exit(exitCode);\n    }\n}\n```\n\nImplement `Runnable` or `Callable`, and your command can be [executed](https://picocli.info/#execute) in one line of code. The example above uses the `CommandLine.execute` method to parse the command line, handle errors, handle requests for usage and version help, and invoke the business logic. Applications can call `System.exit` with the returned exit code to signal success or failure to their caller.\n\n```bash\n$ java Example -v inputFile1 inputFile2\n\n2 files to process...\n```\n\nThe `CommandLine.execute` method automatically prints the usage help message if the user requested help or when the input was invalid.\n\n![Usage help message with ANSI colors](docs/images/ExampleUsageANSI.png?raw=true)\n\nThis can be customized in many ways. See the user manual [section on Executing Commands](https://picocli.info/#execute) for details.\n\n## Usage Help with ANSI Colors and Styles\n\nColors, styles, headers, footers and section headings are easily [customized with annotations](https://picocli.info/#_ansi_colors_and_styles).\nFor example:\n\n![Longer help message with ANSI colors](docs/images/UsageHelpWithStyle.png?raw=true)\n\nSee the [source code](https://github.com/remkop/picocli/blob/v0.9.4/src/test/java/picocli/Demo.java#L337).\n\n\n\n## Usage Help API\n\nPicocli annotations offer many ways to customize the usage help message.\n\nIf annotations are not sufficient, you can use picocli's [Help API](https://picocli.info/#_usage_help_api) to customize even further.\nFor example, your application can generate help like this with a custom layout:\n\n![Usage help message with two options per row](docs/images/UsageHelpWithCustomLayout.png?raw=true)\n\nSee the [source code](https://github.com/remkop/picocli/blob/main/src/test/java/picocli/CustomLayoutDemo.java#L61).\n\n## Download\nYou can add picocli as an external dependency to your project, or you can include it as source.\nSee the [source code](https://github.com/remkop/picocli/blob/main/src/main/java/picocli/CommandLine.java). Copy and paste it into a file called `CommandLine.java`, add it to your project, and enjoy!\n\n### Gradle\n```\nimplementation 'info.picocli:picocli:4.7.6'\n```\n### Maven\n```\n<dependency>\n  <groupId>info.picocli</groupId>\n  <artifactId>picocli</artifactId>\n  <version>4.7.6</version>\n</dependency>\n```\n### Scala SBT\n```\nlibraryDependencies += \"info.picocli\" % \"picocli\" % \"4.7.6\"\n```\n### Ivy\n```\n<dependency org=\"info.picocli\" name=\"picocli\" rev=\"4.7.6\" />\n```\n### Grape\n```groovy\n@Grapes(\n    @Grab(group='info.picocli', module='picocli', version='4.7.6')\n)\n```\n### Leiningen\n```\n[info.picocli/picocli \"4.7.6\"]\n```\n### Buildr\n```\n'info.picocli:picocli:jar:4.7.6'\n```\n\n### JBang\n```\n//DEPS info.picocli:picocli:4.7.6\n```\n\n"
        },
        {
          "name": "RELEASE-NOTES.md",
          "type": "blob",
          "size": 512.6591796875,
          "content": "# picocli Release Notes\n\n# <a name=\"4.7.7\"></a> Picocli 4.7.7\nThe picocli community is pleased to announce picocli 4.7.7.\n\nThis release includes bugfixes and enhancements.\n\nMany thanks to the picocli community for raising these issues and providing the pull requests to address them!\n\nThis is the eighty-sixth public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.7-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.7-new)\n* [Fixed issues](#4.7.7-fixes)\n* [Deprecations](#4.7.7-deprecated)\n* [Potential breaking changes](#4.7.7-breaking-changes)\n\n## <a name=\"4.7.7-new\"></a> New and Noteworthy\n\nThe built-in `picocli.CommandLine.HelpCommand` subcommand now implements `Callable<Integer>` and returns the exit code of the subcommand's `exitCodeOnUsageHelp` value for the subcommand whose help was requested.\n\nFrom this release, if a command implements both `Callable` and `Runnable`, then the default execution strategy will invoke the `call` method instead of the `run` method.\n\n\n\n## <a name=\"4.7.7-fixes\"></a> Fixed issues\n\n* [#2355] Bugfix: The built-in `help` subcommand should return the exit code of the subcommand's `exitCodeOnUsageHelp` value for the subcommand whose help was requested. Thanks to [marco-brandizi](https://github.com/marco-brandizi) for raising this.\n* [#2335] Bugfix: Module info missing in all jars except the main picocli jar file. Thanks to [Oliver B. Fischer](https://github.com/obfischer) for raising this.\n* [#2331] Bugfix: AutoComplete with jline3 was showing hidden commands. Thanks to [clebertsuconic](https://github.com/clebertsuconic) for raising this.\n* [#2291] Bugfix: NullPointerException when using PropertiesDefaultProvider. Thanks to [JessHolle](https://github.com/JessHolle) for raising this.\n* [#2290] DOC: User guide, CDI 2.0 (JSR 365) section: fix example and add warning about dynamic proxies. Thanks to [Mert Zeybekler](https://github.com/Mert-Z) for the pull request.\n* [#2347] DOC: Fix line-endings in generated asciidoc HTML. Thanks to [Fridrich Štrba](https://github.com/fridrich) for the pull request.\n\n## <a name=\"4.7.7-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.7-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.7.6\"></a> Picocli 4.7.6\nThe picocli community is pleased to announce picocli 4.7.6.\n\nThis release includes bugfixes and enhancements.\n\nMany thanks to the picocli community for raising these issues and providing the pull requests to address them!\n\nThis is the eighty-fifth public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.6-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.6-new)\n* [Fixed issues](#4.7.6-fixes)\n* [Deprecations](#4.7.6-deprecated)\n* [Potential breaking changes](#4.7.6-breaking-changes)\n\n## <a name=\"4.7.6-new\"></a> New and Noteworthy\n\n`PropertiesDefaultProvider` now tries to load properties from the classpath if the file cannot be found  in the user.home directory.\n\n\n## <a name=\"4.7.6-fixes\"></a> Fixed issues\n\n* [#2102][#2107] Enhancement: `PropertiesDefaultProvider` should try to load properties from classpath (last). Thanks to [Lumír Návrat](https://github.com/rimuln) for the pull request.\n* [#2202] Enhancement: Change log level from WARN to INFO when bean not found in ApplicationContext. Thanks to [Desmond Kirrane](https://github.com/dkirrane) for raising this.\n* [#2248] Enhancement: Don't show hidden commands in JLine3 command description. Thanks to [Reinhard Handler](https://github.com/rehand) for the pull request.\n* [#2170] Enhancement: Use `...` vararg instead of array parameter to match overridden method signature. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2058] Bugfix: `defaultValue` should not be applied in addition to user-specified value for options with a custom `IParameterConsumer`. Thanks to [Staffan Arvidsson McShane](https://github.com/StaffanArvidsson) for raising this.\n* [#2148] Bugfix: Fix NPE in jline3 `Example.jar` as `ConfigurationPath` cannot be `null` anymore. Thanks to [llzen44](https://github.com/llzen44) for the pull request.\n* [#2232] Bugfix: fix bug for `Optional<T>` arguments with initial value. Thanks to [hq6](https://github.com/hq6) for raising this.\n* [#2149] Bugfix: `@Option`-annotated setter method not invoked with default value when used in mixin for both command and subcommand. Thanks to [Zhonghao Wang](https://github.com/JBWKZsf) for raising this.\n* [#2270] Bugfix: Custom type converter for primitive `boolean` options should not be ignored. Thanks to [Sven Kammerer](https://codeberg.org/sven.k) for raising this.\n* [#2234] BUILD: fix errorprone `TruthSelfEquals` warnings\n* [#2172] BUILD: Fix broken build. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2174] BUILD: Fix .gitattributes related CR/LF problems. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2054][#2176] BUILD: Add Error Prone. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2053] [#2175] CLEAN: Remove unused extra format arguments. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2171] DOC: Fix a few typos in CommandLine's JavaDoc. Thanks to [Michael Vorburger](https://github.com/vorburger) for the pull request.\n* [#2217] DOC: Clarify documentation for negatable options. Thanks to [dbear496](https://github.com/dbear496) for raising this.\n* [#2228] DOC: Clarify that `ParseResult` passed to `IExecutionExceptionHandler` is the top-level parse result, not the parse result of the subcommand that failed. Thanks to [Abel Salgado Romero](https://github.com/abelsromero) for raising this.\n* [#2047] DEP: Bump andymckay/append-gist-action from 1fbfbbce708a39bd45846f0955ed5521f2099c6d to 6e8d64427fe47cbacf4ab6b890411f1d67c07f3e\n* [#2091] DEP: Bump actions/checkout from 3.5.2 to 3.6.0\n* [#2108] DEP: Bump actions/checkout from 3.6.0 to 4.0.0\n* [#2120] DEP: Bump actions/checkout from 4.0.0 to 4.1.0\n* [#2225] DEP: Bump actions/checkout from 4.1.0 to 4.1.2\n* [#2272] DEP: Bump actions/checkout from 4.1.2 to 4.1.4\n* [#2098] DEP: Bump actions/setup-java from 3.11.0 to 3.12.0\n* [#2158] DEP: Bump actions/setup-java from 3.12.0 to 4.0.0\n* [#2236] DEP: Bump actions/setup-java from 4.0.0 to 4.2.1.\n* [#2111] DEP: Bump actions/upload-artifact from 3.1.2 to 3.1.3\n* [#2204] DEP: Bump actions/upload-artifact from 3.1.3 to 4.3.1\n* [#2273] DEP: Bump actions/upload-artifact from 4.3.1 to 4.3.3\n* [#2227] DEP: Bump com.google.errorprone:error_prone_core from 2.23.0 to 2.26.1\n* [#2271] DEP: Bump com.google.errorprone:error_prone_core from 2.26.1 to 2.27.1\n* [#2237] DEP: Bump emibcn/badge-action from 2.0.2 to 2.0.3.\n* [#2099] DEP: Bump gradle/gradle-build-action from 2.4.2 to 2.8.0\n* [#2165] DEP: Bump gradle/gradle-build-action from 2.8.0 to 2.11.0\n* [#2206] DEP: Bump gradle/gradle-build-action from 2.11.1 to 3.1.0\n* [#2246] DEP: Bump gradle/gradle-build-action from 3.1.0 to 3.3.0.\n* [#2096] DEP: Bump gradle/wrapper-validation-action from 1.0.6 to 1.1.0\n* [#2247] DEP: Bump gradle/wrapper-validation-action from 1.1.0 to 3.3.0.\n* [#2263] DEP: Bump gradle/wrapper-validation-action from 3.3.0 to 3.3.2\n* [#2085] DEP: Bump github/codeql-action from 2.3.5 to 2.21.4\n* [#2114] DEP: Bump github/codeql-action from 2.21.4 to 2.21.7\n* [#2167] DEP: Bump github/codeql-action from 2.21.7 to 3.22.11\n* [#2230] DEP: Bump github/codeql-action from 3.22.11 to 3.24.8\n* [#2235] DEP: Bump github/codeql-action from 3.24.8 to 3.24.10.\n* [#2262] DEP: Bump github/codeql-action from 3.24.10 to 3.25.3\n* [#2093] DEP: Bump junit5Version from 5.9.3 to 5.10.0\n* [#2180] DEP: Bump junit5Version from 5.10.0 to 5.10.1\n* [#2240] DEP: Bump junit5Version from 5.10.1 to 5.10.2.\n* [#2140] DEP: Bump log4j2Version from 2.20.0 to 2.21.1\n* [#2178] DEP: Bump log4j2Version from 2.21.1 to 2.22.0\n* [#2252] DEP: Bump log4j2Version from 2.22.0 to 2.23.1\n* [#2095] DEP: Bump org.apache.ivy:ivy from 2.5.1 to 2.5.2\n* [#2094] DEP: Bump org.asciidoctor:asciidoctorj-pdf from 2.3.7 to 2.3.9\n* [#2229] DEP: Bump org.asciidoctor:asciidoctorj-pdf from 2.3.9 to 2.3.15\n* [#2244] DEP: Bump org.asciidoctor:asciidoctor-gradle-jvm from 3.3.2 to 4.0.2.\n* [#2135] DEP: Bump org.fusesource.jansi:jansi from 2.4.0 to 2.4.1\n* [#2089] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.8.21 to 1.9.10\n* [#2154] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.9.10 to 1.9.21\n* [#2090] DEP: Bump org.jetbrains.kotlin:kotlin-script-runtime from 1.8.21 to 1.9.10\n* [#2221] DEP: Bump org.jetbrains.kotlin:kotlin-script-runtime from 1.9.10 to 1.9.23\n* [#2243] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.9.21 to 1.9.23.\n* [#2146] DEP: Bump org.jline:jline from 3.23.0 to 3.24.1\n* [#2241] DEP: Bump org.jline:jline from 3.24.1 to 3.25.1.\n* [#2261] DEP: Bump org.jline:jline from 3.25.1 to 3.26.1\n* [#2049] DEP: Bump org.hibernate.validator:hibernate-validator from 8.0.0.Final to 8.0.1.Final\n* [#2037] DEP: Bump org.scala-lang:scala-library from 2.13.10 to 2.13.11\n* [#2112] DEP: Bump org.scala-lang:scala-library from 2.13.11 to 2.13.12\n* [#2242] DEP: Bump org.scala-lang:scala-library from 2.13.12 to 2.13.13.\n* [#2267] DEP: Bump org.scala-lang:scala-library from 2.13.13 to 2.13.14\n* [#2052] DEP: Bump ossf/scorecard-action from 2.1.3 to 2.2.0\n* [#2183] DEP: Bump ossf/scorecard-action from 2.2.0 to 2.3.1\n* [#2082] DEP: Bump step-security/harden-runner from 2.4.0 to 2.5.1\n* [#2152] DEP: Bump step-security/harden-runner from 2.5.1 to 2.6.1\n* [#2268] DEP: Bump step-security/harden-runner from 2.6.1 to 2.7.1\n* DEP: Bump SpringBoot from 2.7.1 to 2.7.2 (for Java versions prior to 17)\n* [#2255] DEP: Bump andymckay/append-gist-action from 0.2 to 0.3\n\n\n\n## <a name=\"4.7.6-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.6-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.7.5\"></a> Picocli 4.7.5\nThe picocli community is pleased to announce picocli 4.7.5.\n\nThis release includes bugfixes and enhancements.\n\nMany thanks to the picocli community for raising these issues and providing the pull requests to address them!\n\nThis is the eighty-forth public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.5-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.5-new)\n* [Fixed issues](#4.7.5-fixes)\n* [Deprecations](#4.7.5-deprecated)\n* [Potential breaking changes](#4.7.5-breaking-changes)\n\n## <a name=\"4.7.5-new\"></a> New and Noteworthy\n\n\n\n## <a name=\"4.7.5-fixes\"></a> Fixed issues\n* [#2083][#2084] Enhancement: Java 22 update: improve logic for detecting if the output stream is connected to a terminal. Thanks to [Liam Miller-Cushon](https://github.com/cushon) for the pull request.\n* [#2087] Enhancement: Mask parameters in trace log when `echo=false` for `interactive` options and positional parameters. Thanks to [szzsolt](https://github.com/szzsolt) for raising this.\n* [#2060] Bugfix: Fix positional parameters bug with late-resolved arity variable. Thanks to [daisukeoto](https://github.com/daisukeoto) for raising this.\n* [#2074][#2075] Bugfix: Don't generate auto-complete for hidden attributes in `picocli.shell.jline3.PicoCommand`. Thanks to [clebertsuconic](https://github.com/clebertsuconic) for the pull request.\n* [#2059] Bugfix: ArgGroup with `exclusive=false` and `multiplicity=1` should require at least one option; fix regression and refine solution introduced in [#1848][#2030].  Thanks to [Utkarsh Mittal](https://github.com/utmittal) for raising this.\n* [#2080] DOC: Improve GraalVM documentation: add `graalvm-native-image-plugin`. Thanks to [Bhavik Patel](https://github.com/bhavikp19) for the pull request.\n* [#2045] DOC: Commit html files with LF line-endings. Thanks to [Fridrich Strba](https://github.com/fridrich) for the pull request.\n\n## <a name=\"4.7.5-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.5-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.7.4\"></a> Picocli 4.7.4\nThe picocli community is pleased to announce picocli 4.7.4.\n\nThis release includes bugfixes and enhancements.\n\nMany thanks to the picocli community for raising these issues and providing the pull requests to address them!\n\nThis is the eighty-third public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.4-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.4-new)\n* [Fixed issues](#4.7.4-fixes)\n* [Deprecations](#4.7.4-deprecated)\n* [Potential breaking changes](#4.7.4-breaking-changes)\n\n## <a name=\"4.7.4-new\"></a> New and Noteworthy\n\nSee fixed items below.\n\nI cheated on the semantic versioning in this release: a public setter method was added in a class in the `picocli.shell.jline3` module. In spite of that, the version number went from 4.7.3 to 4.7.4 (not 4.8.0). My apologies.\n\n\n## <a name=\"4.7.4-fixes\"></a> Fixed issues\n* [#2028][#2031] API: Add setter for name in `picocli.shell.jline3.PicocliCommands`. Thanks to [Irina Leontyuk](https://github.com/irinaleo) for raising this.\n* [#2026][#2027] Enhancement: Improved feedback on mistyped subcommands. Thanks to [David Pond](https://github.com/mauvo) for the pull request.\n* [#2029][#2034] Enhancement: prevent `java.nio.charset.UnsupportedCharsetException: cp0` on windows, and fall back to the default charset if the charset provided by System property `sun.stdout.encoding` is invalid. Thanks to [\n  Bartosz Spyrko-Smietanko](https://github.com/spyrkob) for the pull request.\n* [#2035][#2036] Bugfix: Option \"mapFallbackValue\" ignored when inherited to subcommand. Thanks to [Dan Ziemba](https://github.com/zman0900) for the pull request.\n* [#1848][#2030] Bugfix: fix issue with required options in `ArgGroup` becoming optional when combined with `DefaultValueProvider`. Thanks to [Ruud Senden](https://github.com/rsenden) and [Mike Snowden](https://github.com/wtfacoconut) for the pull request.\n* [#2020] DEP: Bump step-security/harden-runner from 2.3.0 to 2.4.0\n* [#2033] DEP: Bump github/codeql-action from 2.2.12 to 2.3.5\n* [#2015] DEP: Bump junit5Version from 5.9.2 to 5.9.3\n* [#2014] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.8.20 to 1.8.21\n* [#2013] DEP: Bump org.jetbrains.kotlin:kotlin-script-runtime from 1.8.20 to 1.8.21\n* [#2008] DEP: Bump springBootVersion from 2.7.10 to 2.7.11\n* [#2007] DEP: Bump org.asciidoctor:asciidoctorj-pdf from 2.3.6 to 2.3.7\n\n## <a name=\"4.7.4-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.4-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.7.3\"></a> Picocli 4.7.3\nThe picocli community is pleased to announce picocli 4.7.3.\n\nThis release includes bugfixes and enhancements.\n\nThis is the eighty-second public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.3-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.3-new)\n* [Fixed issues](#4.7.3-fixes)\n* [Deprecations](#4.7.3-deprecated)\n* [Potential breaking changes](#4.7.3-breaking-changes)\n\n## <a name=\"4.7.3-new\"></a> New and Noteworthy\n\nFixed a regression introduced in picocli 4.7.2.\nMulti-value options whose `fallbackValue` is set to `CommandLine.Option.NULL_VALUE`, may see a `NullPointerException` if the option is specified on the command line without a parameter but with a `=` attached, like `--option=`.\n\nAlso, this release fixes broken links in the Javadoc.\n\n\n## <a name=\"4.7.3-fixes\"></a> Fixed issues\n* [#1998] Bugfix: ParameterException: NullPointerException: null while processing argument at or before arg[0]. Thanks to [Jiri Daněk](https://github.com/jiridanek) for raising this.\n* [#1957] DOC: Fixed broken links in the javadoc. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#2002] DEP: Bump actions/checkout from 3.5.0 to 3.5.2\n* [#2005] DEP: Bump gradle/gradle-build-action from 2.4.0 to 2.4.2\n* [#2003] DEP: Bump github/codeql-action from 2.2.11 to 2.2.12\n* [#1997] DEP: Bump org.asciidoctor:asciidoctorj-pdf from 2.3.4 to 2.3.6\n\n## <a name=\"4.7.3-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.3-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.7.2\"></a> Picocli 4.7.2\nThe picocli community is pleased to announce picocli 4.7.2.\n\nThis release includes bugfixes and enhancements.\n\nThis is the eighty-first public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.2-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.2-new)\n* [Fixed issues](#4.7.2-fixes)\n* [Deprecations](#4.7.2-deprecated)\n* [Potential breaking changes](#4.7.2-breaking-changes)\n\n## <a name=\"4.7.2-new\"></a> New and Noteworthy\n\n* Bugfix: `fallbackValue=Option.NULL_VALUE` did not work for `Collection` or array options.\n* Fixed `isJansiConsoleInstalled` performance issue.\n* Kotlin enhancement: improved `paramLabel` string auto-generated from Kotlin `internal` methods which have mangled names with embedded \"$\".\n* Various documentation fixes.\n\n## <a name=\"4.7.2-fixes\"></a> Fixed issues\n* [#1959] API: Add ability to enable loading resource bundles in annotation processor for tests.\n* [#1993] Bugfix: `fallbackValue=Option.NULL_VALUE` did not work for `Collection` or array options. Thanks to [Jiri Daněk](https://github.com/jiridanek) for raising this.\n* [#1975][#1976] Enhancement: Fixed `isJansiConsoleInstalled` performance issue. Thanks to [ChrisTrenkamp](https://github.com/ChrisTrenkamp) for the pull request.\n* [#1932] Enhancement: Move System-Rules tests to Java 5 test module; move System-Lambda tests to Java 8+ test module. Facilitate testing with recent JRE's.\n* [#1984] Enhancement (Kotlin): improve `paramLabel` string auto-generated from Kotlin `internal` methods which have mangled names with embedded \"$\". Thanks to [Ken Yee](https://github.com/kenyee) for raising this.\n* [#1945] DOC: Code sample: add Java version. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1956] Doc: Fix broken link in user manual. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1955] DEP: Bump asciidoctorj from 2.5.5 to 2.5.7. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1980] DEP: Bump actions/checkout from 3.3.0 to 3.5.0\n* [#1952] DEP: Bump actions/setup-java from 3.9.0 to 3.10.0\n* [#1985] DEP: Bump actions/setup-java from 3.10.0 to 3.11.0\n* [#1941] DEP: Bump emibcn/badge-action from 1.2.4 to 2.0.2\n* [#1942] DEP: Bump github/codeql-action from 2.1.39 to 2.2.1\n* [#1953] DEP: Bump github/codeql-action from 2.2.1 to 2.2.3\n* [#1958] DEP: Bump github/codeql-action from 2.2.3 to 2.2.4\n* [#1979] DEP: Bump github/codeql-action from 2.2.4 to 2.2.8\n* [#1995] DEP: Bump github/codeql-action from 2.2.8 to 2.2.11\n* [#1961] DEP: Bump gradle/gradle-build-action from 2.3.3 to 2.4.0\n* [#1960] DEP: Bump gradle/wrapper-validation-action from 1.0.5 to 1.0.6\n* [#1962] DEP: Bump log4j2Version from 2.19.0 to 2.20.0\n* [#1947] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.7.20 to 1.8.10\n* [#1989] DEP: Bump org.jetbrains.kotlin:kotlin-gradle-plugin from 1.8.10 to 1.8.20\n* [#1948] DEP: Bump org.jetbrains.kotlin:kotlin-script-runtime from 1.7.20 to 1.8.10\n* [#1988] DEP: Bump org.jetbrains.kotlin:kotlin-script-runtime from 1.8.10 to 1.8.20\n* [#1968] DEP: Bump org.jline:jline from 3.22.0 to 3.23.0\n* [#1990] DEP: Bump ossf/scorecard-action from 2.1.2 to 2.1.3\n* [#1964] DEP: Bump springBootVersion from 2.7.8 to 2.7.9\n* [#1978] DEP: Bump springBootVersion from 2.7.9 to 2.7.10\n* [#1963] DEP: Bump step-security/harden-runner from 2.1.0 to 2.2.0\n* [#1970] DEP: Bump step-security/harden-runner from 2.2.0 to 2.2.1\n* [#1992] DEP: Bump step-security/harden-runner from 2.2.1 to 2.3.0\n\n\n## <a name=\"4.7.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n\n\n# <a name=\"4.7.1\"></a> Picocli 4.7.1\nThe picocli community is pleased to announce picocli 4.7.1.\n\nThis release includes bugfixes and enhancements.\n\n\n\nThis is the eightieth public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.1-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.1-new)\n* [Fixed issues](#4.7.1-fixes)\n* [Deprecations](#4.7.1-deprecated)\n* [Potential breaking changes](#4.7.1-breaking-changes)\n\n## <a name=\"4.7.1-new\"></a> New and Noteworthy\n\n## <a name=\"4.7.1-fixes\"></a> Fixed issues\n* [#1874][#1885][#1933] Bugfix: The `picocli-groovy` module should not declare `org.codehaus.groovy:groovy-all` as dependency. Thanks to [Mattias Andersson](https://github.com/attiand) and [Michael Kutz](https://github.com/mkutz) for raising this, and to [Paul King](https://github.com/paulk-asert) for the analysis.\n* [#1886][#1896] Bugfix: AsciiDoc generator now correctly outputs options even if all options are in ArgGroups. Thanks to [Ruud Senden](https://github.com/rsenden) for the discussion and the pull request.\n* [#1878][#1876] Bugfix: Annotation processor now avoids loading resource bundles at compile time. Thanks to [Ruud Senden](https://github.com/rsenden) for the discussion and the pull request.\n* [#1911] Avoid using boxed boolean in `CommandLine.Interpreter.applyValueToSingleValuedField`. Thanks to [Jiehong](https://github.com/Jiehong) for the pull request.\n* [#1870] Bugfix: `StringIndexOutOfBoundsException` in usage help when command has too many (and long) aliases. Thanks to [Martin](https://github.com/martlin2cz) for raising this.\n* [#1904] Bugfix: Apply `fallbackValue` to vararg multi-value options, not just single-value options. Thanks to [Andreas Sewe](https://github.com/sewe) for raising this.\n* [#1930] Bugfix: Ensure tests pass in environments for Java 5-18.\n* [#1940] Bugfix: fix 3 failing tests in `ManPageGeneratorTest`. Thanks to [Mike Snowden](https://github.com/wtfacoconut) for the pull request.\n* [#1881] DOC: Many documentation improvements. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1855][#1857] DOC: Add new user manual section called [Rare Use Cases](https://picocli.info/#_rare_use_cases) detailing `System.exit` usage. Thanks to [Tadaya Tsuyukubo](https://github.com/ttddyy) for the pull request.\n* [#1880] DOC: Improve documentation for negatable options that are true by default. Thanks to [Sebastian Hoß](https://github.com/sebhoss) for raising this.\n* [#1815] DOC: Improve user manual section for non-validating ArgGroups. Thanks for [Paul Harris](https://github.com/rolfyone) for raising this.\n* [#1908] DOC: Update the user manual GraalVM section to use the new official native-maven-plugin. Thanks to [tison](https://github.com/tisonkun) for the pull request.\n* [#1924] DOC: Update `picocli-codegen/README.adoc`. Thanks to [Seyyed Emad Razavi](https://github.com/razavioo) for the pull request.\n* [#1910][#1917] DOC: Fix broken link to Zero Bug Commitment. Thanks to [Jiehong](https://github.com/Jiehong) for raising this and thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1915] DOC: Improve default provider examples. Thanks to [David](https://github.com/DavidTheExplorer) for raising this.\n* [#1918][#1920] DOC: Removed unused Travis CI badge and associated broken link from README. Thanks to [Andreas Deininger](https://github.com/deining) for raising this and the pull request.\n* [#706] DOC: Add GitHub badge with test count to README.\n* [#1939] BUILD: Fix `picocli-annotation-processing-tests` failures on Java 16+: rewrite tests to avoid Google `compiler-test` API that internally uses `com.sun.tools.javac.util.Context`.\n* [#1887] DEP: Bump biz.aQute.bnd.gradle from 6.3.1 to 6.4.0\n* [#1865] DEP: Bump ivy from 2.5.0 to 2.5.1\n* [#1931] DEP: Bump springBootVersion from 2.7.5 to 3.0.2\n* [#1929] DEP: Bump github/codeql-action from 2.1.29 to 2.1.39\n* [#1926] DEP: Bump step-security/harden-runner from 1.5.0 to 2.1.0\n* [#1914] DEP: Bump actions/checkout from 3.1.0 to 3.3.0\n* [#1897] DEP: Bump actions/setup-java from 3.6.0 to 3.9.0\n* [#1902] DEP: Bump ossf/scorecard-action from 2.0.6 to 2.1.2\n* [#1938] DEP: Bump actions/upload-artifact from 3.1.1 to 3.1.2\n* [#1937] DEP: Bump asciidoctorj-pdf from 2.3.3 to 2.3.4\n* [#1936] DEP: Bump jline from 3.21.0 to 3.22.0\n* [#1935] DEP: Bump compile-testing from 0.19 to 0.21.0\n\n## <a name=\"4.7.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n\n# <a name=\"4.7.0\"></a> Picocli 4.7.0\nThe picocli community is pleased to announce picocli 4.7.0.\n\nThis release includes bugfixes and enhancements.\n\nA potentially breaking change is that the parser now treats `char[]` as a single-value type.\n\nFrom this release, applications can programmatically set the trace level, and use tracing in custom components.\n\nApplications can improve startup time by setting system property `picocli.disable.closures` to `true` to disable support for [closures in annotations](https://picocli.info/#_closures_in_annotations).\n\nMany more fixes and enhancements, see the sections below for more details.\n\n\nThis is the seventy-ninth public release.\nPicocli follows [semantic versioning](https://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.7.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.7.0-new)\n* [Fixed issues](#4.7.0-fixes)\n* [Deprecations](#4.7.0-deprecated)\n* [Potential breaking changes](#4.7.0-breaking-changes)\n\n## <a name=\"4.7.0-new\"></a> New and Noteworthy\n\n### Tracing API\nFrom picocli 4.7.0, applications can programmatically set the trace level, and use tracing in custom components.\n\nIn addition to setting system property `picocli.trace`, applications can now change the trace level via the `Tracer::setLevel` method. For example:\n\n```java\nCommandLine.tracer().setLevel(CommandLine.TraceLevel.INFO);\n```\n\nThe new public method `CommandLine.tracer()` returns the singleton `Tracer` object that is used internally by picocli, and can also be used by custom component implementations to do tracing. For example:\n\n```java\nclass MyIntConverter implements ITypeConverter<Integer> {\n    public Integer convert(String value) {\n        try {\n            return Integer.parseInt(value);\n        } catch (NumberFormatException ex) {\n            CommandLine.tracer().info(\n                    \"Could not convert %s to Integer, returning default value -1\", value);\n            return -1;\n        }\n    }\n}\n```\n\n### Enable Consuming Option Names or Subcommands\n\nBy default, options that take a parameter do not consume values that match a subcommand name or an option name.\n\nThis release introduces two parser configuration options to change this behaviour:\n\n* `CommandLine::setAllowOptionsAsOptionParameters` allows options to consume option names\n* `CommandLine::setAllowSubcommandsAsOptionParameters` allows options to consume subcommand names\n\nWhen set to `true`, all options in the command (options that take a parameter) can consume values that match option names or subcommand names.\n\nThis means that any option will consume the maximum number of arguments possible for its [arity](https://picocli.info/#_arity).\n\nUSE WITH CAUTION!\n\nIf an option is defined as `arity = \"*\"`, this option will consume _all_ remaining command line arguments following this option (until the [End-of-options delimiter](https://picocli.info/#_double_dash)) as parameters of this option.\n\n### Unsorted Synopsis\nBy default, the synopsis displays options in alphabetical order.\nPicocli 4.7.0 introduces a `sortSynopsis = false` attribute to let the synopsis display options in the order they are declared in your class, or sorted by their `order` attribute.\n\n```java\n@Command(sortSynopsis = false)\n```\n\n### Parser change for `char[]` options\nPrior to 4.7, the picocli parser treated options and positional parameters with type `char[]` as array (multi-value) options, except for interactive options. However, it is more intuitive to treat all `char[]` options as single-value options, similar to `String` options.\n\nFor end users, this means that existing applications that use non-interactive `char[]` options will no longer allow multiple characters to be specified separately on the command line. That is, input like `-c A -c B -c C` will be rejected and the user needs to specify `-c ABC` instead.\n\nApplications that want to preserve the previous behaviour will need to change their code to use `java.lang.Character[]` instead of `char[]`.\n\n## <a name=\"4.7.0-fixes\"></a> Fixed issues\n* [#1599] API: The `picocli-codegen` artifact is now an explicitly declared named JPMS module with a `module-info.class`.\n* [#1611] API: The `picocli-groovy` artifact is now an explicitly declared named JPMS module with a `module-info.class`.\n* [#1610] API: The `picocli-shell-jline2` is now an explicitly declared named JPMS module with a `module-info.class`.\n* [#1609] API: The `picocli-shell-jline3` is now an explicitly declared named JPMS module with a `module-info.class`.\n* [#1608] API: The `picocli-spring-boot-starter` is now an explicitly declared named JPMS module with a `module-info.class`. NOTE: its module name changed to `info.picocli.spring.boot` from `info.picocli.spring`.\n* [#1614] API: Change `picocli-spring-boot-starter` JPMS module name to `info.picocli.spring.boot` from `info.picocli.spring`.\n* [#1600] API: Add `requires static java.sql` to picocli `module-info`.\n* [#1471] API: Provide a programmatic way to configure Picocli's `TraceLevel`. Thanks to [ekinano](https://github.com/ekinano) for raising this.\n* [#1125] API: Add parser configuration to allow options to consume values that match subcommand names or option names.\n* [#1396][#1401] API: Support generic types in containers (e.g. List, Map). Thanks to [Michał Górniewski](https://github.com/mgorniew) for the pull request.\n* [#1380][#1505] API, bugfix: `requiredOptionMarker` should not be displayed on `ArgGroup` options. Thanks to [Ahmed El Khalifa](https://github.com/ahmede41) for the pull request.\n* [#1563] API: Add constructor to `PicocliSpringFactory` to allow custom fallback `IFactory`. Thanks to [Andrew Holland](https://github.com/a1dutch) for raising this.\n* [#1767][#1802] API: avoid NPE on `OptionSpec.getValue()` and add `IScoped` internal API. Thanks to [Ruud Senden](https://github.com/rsenden) for the discussion and the pull request.\n* [#1574] API: Add annotation API to control whether synopsis should be sorted alphabetically or by explicit `order`.\n* [#1708][#1712][#1723] API: The `setUsageHelpLongOptionsMaxWidth` method no longer throws an exception when an invalid value is specified; instead, the value is ignored and an INFO-level trace message is logged. Thanks to [Fabio](https://github.com/fabio-franco) for the pull request.\n* [#648][#1846] Enhancement: Treat `char[]` as single-value types (Potentially breaking change). Thanks to [Lukáš Petrovický](https://github.com/triceo) for the pull request with the test to verify the solution.\n* [#1571] Enhancement: Variables in values from the default value provider should be interpolated. Thanks to [Bas Passon](https://github.com/bpasson) for raising this.\n* [#1773] Enhancement: Applications can improve startup time by setting system property `picocli.disable.closures` to `true` to disable support for [closures in annotations](https://picocli.info/#_closures_in_annotations). Thanks to [patric-r](https://github.com/patric-r) for raising this.\n* [#1408] Enhancement: Synopsis should respect `order` if specified. Thanks to [Simon](https://github.com/sbernard31) for raising this.\n* [#964][#1080] Enhancement: ArgGroup synopsis should respect `order` (if specified). Thanks to [Enderaoe](https://github.com/Lyther) for the pull request with unit tests.\n* [#1706][#1710] Enhancement: Subcommands should get missing messages from parent command resource bundle. Thanks to [Ruud Senden](https://github.com/rsenden) and [Mike Snowden](https://github.com/wtfacoconut) for the pull request.\n* [#899][#1578][#1579] Enhancement: improve built-in `Help` command description. Thanks to [Michael L Heuer](https://github.com/heuermh) for the pull request. Thanks to [Garret Wilson](https://github.com/garretwilson) for raising this.\n* [#1713][#1714] Enhancement: Support optional booleans in annotation processor. Thanks to [Jan Waś](https://github.com/nineinchnick) for the pull request.\n* [#1387][#1711] Enhancement: Annotation processor should validate final primitive and String fields with `Option` and `Parameters` annotations. Thanks to [xehpuk](https://github.com/xehpuk) for raising this, and thanks to [Adam McElwee](https://github.com/acmcelwee) for the pull request.\n* [#1572] Enhancement: Remove redundant braces in ArgGroup synopsis.\n* [#1602] Enhancement: Fix incorrect debug output for add/removeAlias.\n* [#1603] Enhancement: Improve debug tracing information for help requests and command execution.\n* [#1629] Enhancement: Omit empty braces in standard prompt for interactive options without description. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1778] Enhancement: Add support for new Spring Boot auto configuration introduced in Spring Boot 2.7. Thanks to [Andreas Asplund](https://github.com/aspan) for the pull request.\n* [#1836][#1841] Enhancement: Command aliases on Mixin were not being applied. Thanks to [Mike Snowden](https://github.com/wtfacoconut) for the pull request and to [Ruud Senden](https://github.com/rsenden) for raising this.\n* [#1754][#1759] Enhancement: Autocompletion now correctly handles completion candidates with spaces. Thanks to [Juan Martín Sotuyo Dodero](https://github.com/jsotuyod) for the pull request.\n* [#1834][#1838] Bugfix: Incorrect synopsis for char[] options. Thanks to [Ruud Senden](https://github.com/rsenden) and [Mike Snowden](https://github.com/wtfacoconut) for the pull request.\n* [#1680] Bugfix: ArgGroups with `multiplicity=\"0\"` are now disallowed at construction time and no longer throw a `StackOverflowError` while parsing. Thanks to [ARNOLD Somogyi](https://github.com/zappee) for raising this.\n* [#1615][#1616] Bugfix: `getCJKAdjustedLength()` no longer miscalculates for supplementary code points. Thanks to [gwalbran](https://github.com/gwalbran) for the pull request.\n* [#1575] Bugfix: Synopsis should not cluster boolean options if `posixClusteredShortOptionsAllowed` is set to false.\n* [#1642] Bugfix: Negatable options should negate explicit values. Thanks to [Nat Burns](https://github.com/burnnat) for raising this.\n* [#1696][#1697] Bugfix: ManPageGenerator asciidoc output now correctly shows options in nested ArgGroups. Thanks to [Ruud Senden](https://github.com/rsenden) for the pull request.\n* [#1741] Bugfix: `@Command`-annotated method parameters are assigned incorrect indices when contained in a `@Command` class that is added as a subcommand to another `@Command` class which has `scope = CommandLine.ScopeType.INHERIT`. Thanks to [Onedy](https://github.com/Onedy) for raising this.\n* [#1779] Bugfix: Custom factory should be used when creating `CommandSpec`. Thanks to [Philippe Charles](https://github.com/charphi) for raising this.\n* [#1644][#1863] Bugfix: autocompletion of directory names stopped working from picocli 4.6.3. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request, and thanks to [philgdn](https://github.com/philgdn) for raising this and verifying the solution.\n* [#1807] BUILD: Optimize incremental builds and local build cache usage. Thanks to [Jean André Gauthier](https://github.com/jean-andre-gauthier) for the pull request and [Nelson Osacky](https://github.com/runningcode) for the review.\n* [#1298] DOC: Publish all-in-one javadoc for all picocli modules.\n* [#812] DOC: Document how to test a picocli spring-boot application.\n* [#1596] DOC: fix javadoc typos and incorrect links.\n* [#1597] DOC: Add examples to Execution Configuration section in user manual.\n* [#1140] DOC: Add subsection Forcing Interactive Input to user manual Interactive Options section. Thanks to [smalirizvi](https://github.com/smalirizvi) for raising this.\n* [#967] DOC: User manual now shows how to configure `null` as `defaultValue` and `fallbackValue`.\n* [#1625] DOC: Fix broken links after renaming default branch to `main` from `master`. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1628][#1630] DOC: Fix broken link in `picocli-codegen` `README`. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1627] DOC: User guide, chapter 3.2.3. Forcing Interactive Input: code sample: add Kotlin version. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1650] DOC: User guide, Spring Boot section: add warning about dynamic proxies. Thanks to [Ernst Plüss](https://github.com/pluess) for raising this.\n* [#1677] DOC: Many improvements and corrections to the user manual. Thanks to [Björn Kautler](https://github.com/Vampire) for the pull request.\n* [#1678] DOC: Change links from http to https, fix broken links. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1750] DOC: Clarify that GPL licensing NOTICE is for docs only.\n* [#1788] DOC: add link to `picocli-examples` in the user manual. Thanks to [Markus Elfring](https://github.com/Markus-Elfring) for raising this.\n* [#1796] DOC: Fixing broken links and typos. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1798] DOC: update examples for jakarta.validation-api. Thanks to [Roy](https://github.com/ashr123) for raising this.\n* [#1803] DOC: show `@Command`-annotated method with `int` return value in user manual. Thanks to [SinaMobasheri](https://github.com/SinaMobasheri) for raising this.\n* [#1581] BUILD: Fix dependabot config.\n* [#1613] DEP: The `picocli-groovy` module now declares `groovy-all` as dependency.\n* [#1604] DEP: Remove dependency on `slf4j` from `picocli-spring-boot-starter`.\n* [#1783] DEP: Update actions/checkout requirement to 2541b1294d2704b0964813337f33b291d3f8596b\n* [#1837] DEP: Bump actions/checkout from 3.0.2 to 3.1.0\n* [#1607] DEP: Bump actions/setup-java from 2.5.0 to 3\n* [#1646] DEP: Bump actions/setup-java from 3.0.0 to 3.1.0\n* [#1655] DEP: Bump actions/setup-java from 3.1.0 to 3.1.1\n* [#1667] DEP: Bump actions/setup-java from 3.1.1 to 3.2.0\n* [#1674] DEP: Bump actions/setup-java from 3.2.0 to 3.3.0\n* [#1717] DEP: Bump actions/setup-java from 3.3.0 to 3.4.0\n* [#1736] DEP: Bump actions/setup-java from 3.4.0 to 3.4.1\n* [#1806] DEP: Bump actions/setup-java from 3.4.1 to 3.5.0\n* [#1826] DEP: Bump actions/setup-java from 3.5.0 to 3.5.1\n* [#1624] DEP: Bump actions/upload-artifact from 2.3.1 to 3\n* [#1687] DEP: Bump actions/upload-artifact from 3.0.0 to 3.1.0\n* [#1859] DEP: Bump actions/upload-artifact from 3.1.0 to 3.1.1\n* [#1585] DEP: Bump github/codeql-action from 1.0.30 to 1.1.0\n* [#1593] DEP: Bump github/codeql-action from 1.1.0 to 1.1.2\n* [#1601] DEP: Bump github/codeql-action from 1.1.2 to 1.1.3\n* [#1631] DEP: Bump github/codeql-action from 1.1.3 to 1.1.4\n* [#1636] DEP: Bump github/codeql-action from 1.1.4 to 1.1.5\n* [#1643] DEP: Bump github/codeql-action from 1.1.5 to 2.1.6\n* [#1652] DEP: Bump github/codeql-action from 2.1.6 to 2.1.7\n* [#1654] DEP: Bump github/codeql-action from 2.1.7 to 2.1.8\n* [#1669] DEP: Bump github/codeql-action from 2.1.8 to 2.1.9\n* [#1676] DEP: Bump github/codeql-action from 2.1.9 to 2.1.10\n* [#1682] DEP: Bump github/codeql-action from 2.1.10 to 2.1.11\n* [#1700] DEP: Bump github/codeql-action from 2.1.11 to 2.1.12\n* [#1720] DEP: Bump github/codeql-action from 2.1.12 to 2.1.14\n* [#1728] DEP: Bump github/codeql-action from 2.1.14 to 2.1.15\n* [#1739] DEP: Bump github/codeql-action from 2.1.15 to 2.1.16\n* [#1781] DEP: Bump github/codeql-action from 2.1.18 to 2.1.1\n* [#1786] DEP: Bump github/codeql-action from 2.1.18 to 2.1.20\n* [#1792] DEP: Bump github/codeql-action from 2.1.20 to 2.1.21\n* [#1797] DEP: Bump github/codeql-action from 2.1.21 to 2.1.22\n* [#1817] DEP: Bump github/codeql-action from 2.1.22 to 2.1.23\n* [#1820] DEP: Bump github/codeql-action from 2.1.22 to 2.1.24\n* [#1823] DEP: Bump github/codeql-action from 2.1.24 to 2.1.25\n* [#1831] DEP: Bump github/codeql-action from 2.1.25 to 2.1.26\n* [#1842] DEP: Bump github/codeql-action from 2.1.26 to 2.1.27\n* [#1862] DEP: Bump github/codeql-action from 2.1.28 to 2.1.29\n* [#1782] DEP: Bump gradle/gradle-build-action from c6619898ec857b418d6436d3efe8a0becf74eb9e to 2.2.4\n* [#1787] DEP: Bump gradle/gradle-build-action from c6619898ec857b418d6436d3efe8a0becf74eb9e to 2.2.5\n* [#1825] DEP: Bump gradle/gradle-build-action from 2.3.0 to 2.3.1\n* [#1832] DEP: Bump gradle/gradle-build-action from 2.3.1 to 2.3.2\n* [#1860] DEP: Bump gradle/gradle-build-action from 2.3.2 to 2.3.3\n* [#1861] DEP: Bump gradle/wrapper-validation-action from 1.0.4 to 1.0.5\n* [#1586] DEP: Bump ossf/scorecard-action from 1.0.2 to 1.0.3\n* [#1594] DEP: Bump ossf/scorecard-action from 1.0.3 to 1.0.4\n* [#1691] DEP: Bump ossf/scorecard-action from 1.0.4 to 1.1.0\n* [#1699] DEP: Bump ossf/scorecard-action from 1.1.0 to 1.1.1\n* [#1805] DEP: Bump ossf/scorecard-action from 1.1.2 to 2.0.0\n* [#1813] DEP: Bump ossf/scorecard-action from 2.0.0 to 2.0.2\n* [#1816] DEP: Bump ossf/scorecard-action from 2.0.0 to 2.0.3\n* [#1828] DEP: Bump ossf/scorecard-action from 2.0.3 to 2.0.4\n* [#1583] DEP: Bump step-security/harden-runner from 1.3.0 to 1.4.0\n* [#1639] DEP: Bump step-security/harden-runner from 1.4.0 to 1.4.1\n* [#1666] DEP: Bump step-security/harden-runner from 1.4.1 to 1.4.2\n* [#1730] DEP: Bump step-security/harden-runner from 1.4.3 to 1.4.4\n* [#1833] DEP: Bump step-security/harden-runner from 1.4.5 to 1.5.0\n* [#1580] DEP: Bump asciidoctor to 2.5.3 from 2.5.2. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1688] DEP: Bump asciidoctorj-pdf from 1.6.2 to 2.0.0\n* [#1690] DEP: Bump asciidoctorj-pdf from 2.0.0 to 2.0.2\n* [#1692] DEP: Bump asciidoctorj-pdf from 2.0.2 to 2.0.3\n* [#1694] DEP: Bump asciidoctorj-pdf from 2.0.3 to 2.0.4\n* [#1695] DEP: Bump asciidoctorj-pdf from 2.0.4 to 2.0.6\n* [#1715] DEP: Bump asciidoctorj-pdf from 2.0.6 to 2.0.8\n* [#1722] DEP: Bump asciidoctorj-pdf from 2.0.8 to 2.1.2\n* [#1785] DEP: Bump asciidoctorj-pdf from 2.1.6 to 2.3.0\n* [#1854] DEP: Bump asciidoctorj-pdf from 2.3.0 to 2.3.3\n* [#1618] DEP: Bump biz.aQute.bnd.gradle from 6.1.0 to 6.2.0\n* [#1698] DEP: Bump biz.aQute.bnd.gradle from 6.2.0 to 6.3.0\n* [#1703] DEP: Bump biz.aQute.bnd.gradle from 6.3.0 to 6.3.1\n* [#1582] DEP: Bump groovy-all from 2.4.10 to 2.5.15 // latest version of Groovy that supports Java 5\n* [#1589] DEP: Bump hamcrest-core from 1.3 to 2.2\n* [#1621] DEP: Bump hibernate-validator from 7.0.2.Final to 7.0.3.Final\n* [#1633][#1635] DEP: Bump hibernate-validator from 7.0.3.Final to 7.0.4.Final\n* [#1821] DEP: Bump hibernate-validator from 7.0.5.Final to 8.0.0.Final\n* [#1812] DEP: Bump hibernate-validator from 7.0.5.Final to 8.0.0.Final\n* [#1622] DEP: Bump hibernate-validator-annotation-processor from 7.0.2.Final to 7.0.3.Final\n* [#1634] DEP: Bump hibernate-validator-annotation-processor from 7.0.3.Final to 7.0.4.Final\n* [#1587] DEP: Bump ivy from 2.4.0 to 2.5.0\n* [#1584] DEP: Bump jansi from 2.1.0 to 2.4.0\n* [#1573] DEP: Bump JLine3 version to 3.21.0 from 3.19.0.\n* [#1590] DEP: Bump junit-dep from 4.11 to 4.11.20120805.1225\n* [#1591] DEP: Bump junit from 4.12 to 4.13.2\n* [#1649] DEP: Bump kotlin-gradle-plugin from 1.6.10 to 1.6.20\n* [#1829] DEP: Bump kotlin-gradle-plugin from 1.7.10 to 1.7.20\n* [#1648] DEP: Bump kotlin-script-runtime from 1.6.10 to 1.6.20\n* [#1830] DEP: Bump kotlin-script-runtime from 1.7.10 to 1.7.20\n* [#1617] DEP: Bump log4j2Version from 2.17.1 to 2.17.2\n* [#1729] DEP: Bump log4j2Version from 2.17.2 to 2.18.0\n* [#1819] DEP: Bump log4j2Version from 2.18.0 to 2.19.0\n* [#1822] DEP: Bump scala-library from 2.13.8 to 2.13.9\n* [#1843] DEP: Bump scala-library from 2.13.9 to 2.13.10\n* [#1576] DEP: Bump Spring Boot version from 2.5.6 to 2.6.3\n* [#1606] DEP: Bump Spring Boot version from 2.6.3 to 2.6.4\n* [#1641] DEP: Bump Spring Boot version from 2.6.4 to 2.6.5\n* [#1645] DEP: Bump Spring Boot version from 2.6.5 to 2.6.6\n* [#1684] DEP: Bump Spring Boot version from 2.6.7 to 2.6.8\n* [#1686] DEP: Bump Spring Boot version from 2.6.8 to 2.7.0\n* [#1719] DEP: Bump Spring Boot version from 2.7.0 to 2.7.1\n* [#1747] DEP: Bump Spring Boot version from 2.7.1 to 2.7.2\n* [#1780] DEP: Bump spring Boot Version from 2.7.2 to 2.7.3\n* [#1824] DEP: Bump springBootVersion from 2.7.3 to 2.7.4\n* [#1853] DEP: Bump springBootVersion from 2.7.4 to 2.7.5\n* [#1588] DEP: Bump system-rules from 1.17.1 to 1.19.0\n\n\n## <a name=\"4.7.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.7.0-breaking-changes\"></a> Potential breaking changes\n\n* The JPMS module name of `picocli-spring-boot-starter` has been changed to `info.picocli.spring.boot` from `info.picocli.spring`.\n* The `picocli-groovy` module now declares `groovy-all` as dependency.\n* The parser now treats `char[]` as a single-value type.\n* Redundant braces are now omitted in ArgGroup synopsis in usage help messages.\n\n\n# <a name=\"4.6.3\"></a> Picocli 4.6.3\nThe picocli community is pleased to announce picocli 4.6.3.\n\nThis release includes bugfixes and enhancements, as well as documentation and security improvements.\n\nSeveral improvements to the annotation processor and the generated autocompletion scripts.\n\nMuch gratitude to the picocli community for the many pull requests and other contributions!\n\nThis is the seventy-eighth public release.\nPicocli follows [semantic versioning](http://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.6.3-toc\"></a> Table of Contents\n* [New and noteworthy](#4.6.3-new)\n* [Fixed issues](#4.6.3-fixes)\n* [Deprecations](#4.6.3-deprecated)\n* [Potential breaking changes](#4.6.3-breaking-changes)\n\n## <a name=\"4.6.3-new\"></a> New and Noteworthy\n\n### Default branch renamed to `main`\nThe default branch has been renamed! `master` is now named `main`.\n\nIf you have a local clone, you can update it by running the following commands:\n\n```bash\ngit branch -m master main\ngit fetch origin\ngit branch -u origin/main main\ngit remote set-head origin -a\n```\n\n### Autocompletion script improvements\n\n* Autocompletion now shows subcommand aliases in the completion candidates\n* Autocompletion now displays completion candidates on exact match\n* Autocompletion now supports file names containing spaces\n* Remove file name extension and local dir prefix from the command name in generated autocomplete scripts\n* Fix Bash error `compopt: command not found` on older versions of Bash\n* Autocompletion on ZSH should only call `compinit` once\n\n## <a name=\"4.6.3-fixes\"></a> Fixed issues\n* [#1440] Bugfix: annotation processor incorrectly failed with `DuplicateOptionAnnotationsException` when multiple commands had a subcommand in common and an inherited (`scope = ScopeType.INHERIT`) option. Thanks to [nemetsSY](https://github.com/nemetsSY) for raising this.\n* [#1472] Bugfix: annotation processor option `-Averbose=true` no longer incorrectly triggers `warning: The following options were not recognized by any processor: '[verbose]'`. Thanks to [Lorenz Leutgeb](https://github.com/lorenzleutgeb) for raising this.\n* [#1384][#1493] Bugfix: parser now correctly handles ArgGroups with optional positional parameters. Thanks to [Matthew Lewis](https://github.com/mattjlewis) for raising this and to [Kurt Kaiser](https://github.com/kurtkaiser) for the pull request.\n* [#1474] Bugfix: Avoid `UnsupportedCharsetException: cp65001` on Microsoft Windows console when code page is set to UTF-8. Thanks to [epuni](https://github.com/epuni) for raising this.\n* [#1528][#1529] Bugfix: Allow aliases of a CommandSpec that is already a subcommand to be properly & consistently modified. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1466][#1467] Bugfix/Enhancement: Autocomplete now shows subcommand aliases in the completion candidates. Thanks to [Ruud Senden](https://github.com/rsenden) for the pull request.\n* [#1468] Bugfix/Enhancement: Autocompletion now displays completion candidates on exact match. Thanks to [Ruud Senden](https://github.com/rsenden) for raising this.\n* [#1537][#1541] Bugfix: AbbreviationMatcher now treats aliases of the same object as one match. Thanks to [Staffan Arvidsson McShane](https://github.com/StaffanArvidsson) for raising this and [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1531] Bugfix: Options defined as annotated methods should reset between `parseArgs` invocations when `CommandLine` instance is reused. Thanks to [kaushalkumar](https://github.com/kaushalkumar) for raising this.\n* [#1458][#1473] Enhancement: Autocompletion now supports file names containing spaces. Thanks to [zpater345](https://github.com/zpater345) for raising this and thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1477] Enhancement: Remove file name extension and local dir prefix from the command name in generated autocomplete scripts. Thanks to [Andrea Peruffo](https://github.com/andreaTP) for the pull request.\n* [#1464] Enhancement: Fix Bash error `compopt: command not found` on older versions Bash. Thanks to [Andres Almiray](https://github.com/aalmiray) for raising this.\n* [#1476] Enhancement: improve error message in `AbstractCommandSpecProcessor#extractTypedMember`. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for raising this.\n* [#1475] Enhancement: Fix typo in annotation target-type error message. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1366][#1370] Enhancement: show in usage help that the built-in `help` command only works on the first argument. Thanks to [Patrice Duroux](https://github.com/peutch) for the pull request.\n* [#1492] Enhancement: Use EditorConfig to define file formats and coding style; Thanks to [Goooler](https://github.com/Goooler) for the pull request.\n* [#1530] Enhancement: Simplified `CommandSpec#validateSubcommandName` implementation. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1484] Enhancement: Fixed `org.junit.Assert.assertThat` deprecation warning; Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1485] Enhancement: Fix build warnings; build doc enhancements; Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1483] Enhancement: Improved `AbstractCommandSpecProcessor#isSubcommand`; Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1499] Enhancement: Improved `DefaultFactory#create(Class<T>)`. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1518] Enhancement: Simplified detection of getter & setter in `TypedMember` constructor. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1568] Enhancement: CommandLine cleanup. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1526][#1548] Enhancement: Autocompletion on ZSH should only call `compinit` once. Thanks to [Ben Herweyer](https://github.com/bherw) for the pull request.\n* [#1539] DOC: Various documentation improvements. Thanks to [Hamid Nazari](https://github.com/hamid-nazari) for the pull request.\n* [#1481] DOC: Removed repeated \"whether\" typo in JavaDoc; Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1125][#1538] DOC: Update \"Option Names or Subcommands as Option Values\" section in user manual; Thanks to [Scott Turner](https://github.com/turnef) for raising this.\n* [#1409][#1463] DOC: add documentation section on using default values in argument groups. Thanks to [Ben Kedo](https://github.com/MadFoal) for the pull request.\n* [#1383][#1502] DOC: add tests demonstrating usage of multiple arguments. Thanks to [Ben Kedo](https://github.com/MadFoal) and [lind6](https://github.com/lind6) for the pull request.\n* [#1462] DOC, BUILD, DEP: Extend documentation on argument files, fix broken/outdated links, update dependencies. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1457] DOC: add caution about arguments in @files with quoted option parameters. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1544][#1545] DOC: Add NOTICE file with GPL v2 + CPE license. Thanks to [Keith M Swartz](https://github.com/kswartz26) for the pull request.\n* [#1553] SECURITY: Fix code scanning alert - Token-Permissions\n* [#1554] SECURITY: Fix code scanning alert - Pinned-Dependencies\n* [#1555] SECURITY: Fix code scanning alert - Create SECURITY.md\n* [#1556][#1557] SECURITY: Fix code scanning alert - SAST\n* [#1558] SECURITY: Fix code scanning alert - Pinned-Dependencies in codeql-analysis.yml\n* [#1559] SECURITY: Fix code scanning alert - Token-Permissions in codeql-analysis.yml\n* [#1560] SECURITY: Fix code scanning alert - Binary-Artifacts - Validate Gradle Wrapper\n* [#1561] SECURITY: Fix code scanning alert - Doc/example code uses a broken or risky cryptographic algorithm\n* [#1562] BUILD: Rename 'master' branch to 'main'\n* [#1491] BUILD: Add build job in CI; Thanks to [Goooler](https://github.com/Goooler) for the pull request.\n* [#1482] BUILD: Optimize gradle; Thanks to [Goooler](https://github.com/Goooler) for the pull request.\n* [#1461] BUILD: Allow publishing without signing for non-release versions. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1459] BUILD: The nexus-staging Gradle plugin must be applied to the root project, not to subprojects. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1503] BUILD: Fix failing `System.exit` tests on Java 18.\n* [#1504] BUILD: Run tests on Java 6-7 in CI environment, semi-automate testing on Java 5.\n* [#1516] DEP: Remove redundant dependency on `jline-console` in `picocli-shell-jline3`. Thanks to [kaushalkumar](https://github.com/kaushalkumar) for raising this.\n* [#1495] DEP: Bump validation-api from 2.0.0.Final to 2.0.1.Final\n* [#1496] DEP: Bump biz.aQute.bnd.gradle from 5.1.2 to 6.1.0\n* [#1494] DEP: Bump kotlin-gradle-plugin from 1.5.31 to 1.6.0\n* [#1497] DEP: Bump badass-jar from 1.1.3 to 1.2.0\n* [#1498] DEP: Bump hibernate-validator from 6.1.2.Final to 7.0.1.Final\n* [#1490] DEP: Bump hibernate-validator-annotation-processor from 6.1.2.Final to 7.0.1.Final\n* [#1489] DEP: Bump log4j-core from 2.13.0 to 2.14.1\n* [#1488] DEP: Bump log4j-api from 2.13.0 to 2.14.1\n* [#1487] DEP: Bump kotlin-script-runtime from 1.5.31 to 1.6.0\n* [#1486] DEP: Bump gradle-nexus-staging-plugin from 0.21.0 to 0.30.0\n* [#1500][#1517] DEP: Bump gradle from 7.3 to 7.3.3. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1569] DEP: Bump gradle from 7.3.3 to 7.4. Thanks to [Ross Goldberg](https://github.com/rgoldberg) for the pull request.\n* [#1515] DEP: Bump kotlin-gradle-plugin from 1.6.0 to 1.6.10\n* [#1512] DEP: Bump kotlin-script-runtime from 1.6.0 to 1.6.10\n* [#1514] DEP: Bump log4j-api from 2.14.1 to 2.17.1\n* [#1513] DEP: Bump log4j-core from 2.14.1 to 2.17.1\n* [#1543] DEP: Bump asciidoctorj-pdf from 1.6.0 to 1.6.2\n* [#1547] DEP: Bump scala-library from 2.13.7 to 2.13.8\n* [#1550] DEP: Bump hibernate-validator from 7.0.1.Final to 7.0.2.Final\n* [#1551] DEP: Bump hibernate-validator-annotation-processor from 7.0.1.Final to 7.0.2.Final\n\n\n## <a name=\"4.6.3-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.6.3-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.6.2\"></a> Picocli 4.6.2\nThe picocli community is pleased to announce picocli 4.6.2.\n\nThis release includes bugfixes and enhancements. Many improvements in the documentation.\n\nThanks to the many people in the picocli community for raising issues and contributing pull requests to fix issues!\n\nFrom this release, picocli uses system properties `sun.stdout.encoding` and `sun.stderr.encoding` when creating the `PrintWriters` returned by  `CommandLine::getOut` and `CommandLine::getErr`.\nWhen these system properties do not exist, picocli falls back to the default charset (determined by `file.encoding`).\nThis addresses an issue on Windows, where the default charset is not the same as the encoding for its console (often the older `cp437` codepage on English-language versions of Windows).\nNote that these system properties [seem to have been](https://wrapper.tanukisoftware.com/doc/english/prop-jvm-encoding.html) introduced in Java 8 (although I cannot find it in the JDK 8 release notes) and may not exist on earlier JVMs or on JVMs other than the Oracle and OpenJDK implementations.\n\nThis is the seventy-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\nArtifacts in this release are signed by Remko Popma (6601 E5C0 8DCC BB96).\n\n## <a name=\"4.6.2-toc\"></a> Table of Contents\n* [New and noteworthy](#4.6.2-new)\n* [Fixed issues](#4.6.2-fixes)\n* [Deprecations](#4.6.2-deprecated)\n* [Potential breaking changes](#4.6.2-breaking-changes)\n\n## <a name=\"4.6.2-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.6.2-fixes\"></a> Fixed issues\n* [#1422] API: Un-deprecate the `@Option` `help` attribute; it is useful for custom help options. Thanks to [kaushalkumar](https://github.com/kaushalkumar) for raising this.\n* [#1337][#1338] Enhancement: prevent spurious `WARNING: tag not found in include file` messages when generating man pages. Thanks to [Philip Crotwell](https://github.com/crotwell) for the pull request.\n* [#1340] Enhancement: add xref to generated man page document to link to subcommands from the parent command page. Thanks to [Philip Crotwell](https://github.com/crotwell) for the pull request.\n* [#1351][#1362] Enhancement: avoid calling option `completionCandidates` when displaying usage help if `${COMPLETION-CANDIDATES}` is not specified in description. Thanks to [Wenhao ZHANG](https://github.com/wtd2), [sustc11810424](https://github.com/sustc11810424) and [Yining Tang](https://github.com/Lanninger08) for the pull request.\n* [#1303] Bugfix: Prevent `IllegalArgumentException: argument type mismatch` error in method subcommands with inherited mixed-in standard help options. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1300] Bugfix: Avoid spurious warning \"Could not set initial value for field boolean\" when reusing `CommandLine` with ArgGroup. Thanks to [Yashodhan Ghadge](https://github.com/codexetreme) for raising this.\n* [#1316] Bugfix: Avoid `DuplicateOptionAnnotationsException` thrown on `mixinStandardHelpOptions` for subcommands when parent has `scope = INHERIT` by `picocli-codegen` annotation processor. Thanks to [Philippe Charles](https://github.com/charphi) for raising this.\n* [#1319] Bugfix: Avoid `DuplicateOptionAnnotationsException` when parent has inherited mixed-in help options and the built-in `HelpCommand` subcommand. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1331] Bugfix: Avoid `IllegalArgumentException` when parent has no standard help options and `scope = INHERIT`, while subcommand does have mixed-in standard help options. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1381][#1382] Bugfix: Default value of option in repeated subcommand was not applied correctly. Thanks to [sfeuerhahn](https://github.com/sfeuerhahn) for the pull request.\n* [#1434][#1435] `CommandSpec.remove(arg)` should also remove the arg from the `args` collection in the CommandSpec. Thanks to [kaushalkumar](https://github.com/kaushalkumar) for the pull request.\n* [#1404] Bugfix/Enhancement: Print paramLabel only when it could exist. Thanks to [João Guerra](https://github.com/joca-bt) for the pull request.\n* [#1320][#1321] Bugfix/Enhancement: Use system properties `sun.stdout.encoding` and `sun.stderr.encoding` when creating the `PrintWriters` returned by  `CommandLine::getOut` and `CommandLine::getErr`. Thanks to [Philippe Charles](https://github.com/charphi) for the investigation and the pull request.\n* [#1431] Bugfix/enhancement: `.gitattributes` should include HTML files to convert CRLF to LF. Thanks to [wenhoujx](https://github.com/wenhoujx) for pointing this out.\n* [#1388][#1430] Bugfix: Fix subcommand aliases autocomplete regression. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1415] Bugfix/DOC: fix NullPointerException in README Example. Thanks to [shannonbay](https://github.com/shannonbay) for raising this.\n* [#1421] Bugfix/DOC: `execute` method in `RunAll`, `RunFirst` and `RunLast` should not be deprecated. Thanks to [Gamal DeWeever](https://github.com/gadeweever) for raising this.\n* [#1326][#1339] DOC: Added documentation and examples for controlling the locale. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1296] DOC: add Kotlin code samples to user manual; other user manual improvements. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1299] DOC: Link to `IParameterPreprocessor` from `IParameterConsumer` javadoc. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1304] DOC: Manual, chapter '17.9 Inherited Command Attributes': added Kotlin version of code sample. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1305] DOC: Document use of `IParameterConsumer` as n-ary type converter. Thanks to [Martin](https://github.com/martlin2cz) for raising this.\n* [#1307] DOC: Added CAUTION admonitions, Kotlin code sample. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1308] DOC: Add example for Option `converter`, improve text for default values. Thanks to [Abhijit Sarkar](https://github.com/asarkar) for raising this.\n* [#1314] DOC: Fix use of deprecated Maven properties in README. Thanks to [Philippe Charles](https://github.com/charphi) for the pull request.\n* [#1323] DOC: Update Testing section of the user manual for Stefan Birkner's library [System-Lambda](https://github.com/stefanbirkner/system-lambda).\n* [#1325] DOC: Add section on Short and Long Option Columns to user manual. Thanks to [Andrei Ciobanu](https://github.com/nomemory) for raising this.\n* [#1336] DOC: Kotlin sample code, documentation improvements. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1342] DOC: Improve user manual chapter 28.3 'Testing the Exit Code'. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1344] DOC: Documentation, chapter 'Testing environment variables:': add Kotlin test sample. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1443] DOC: Fix incorrect method name `setLongOptionsMaxWidth` to `setUsageHelpLongOptionsMaxWidth` in user manual section 'Long Option Column Width'. Thanks to [kunlk](https://github.com/kunlk) for raising this.\n* [#1360][#1359] DOC: add JReleaser as packaging option. Thanks to [Andres Almiray](https://github.com/aalmiray) for the pull request.\n* [#1363][#1364] DOC: Add caution on Variable interpolation in Kotlin. Thanks to [MagnusMG](https://github.com/MagnusMG) for the pull request.\n* [#1397][#1399] DOC: Update Jline2 README.md to add some recommended workaround about ANSI incompatible terminals. Thanks to [Simon](https://github.com/sbernard31) for the pull request.\n* [#1398][#1400] DOC: Arity of boolean options is now documented correctly. Thanks to [João Guerra](https://github.com/joca-bt) for the pull request.\n* [#1428][#1433] DOC: Add section about subcommands with the same name as option default value. Thanks to [cbcmg](https://github.com/cbcmg) for the pull request.\n* [#1390][#1432] DOC: Update examples to not throw Exception from main method. Thanks to [wenhoujx](https://github.com/wenhoujx) for the pull request.\n* [#1423] DOC: Fixed broken link in README.md to annotation processor documentation. Thanks to [Sevy007](https://github.com/Sevy007) for raising this.\n* [#1449] DOC: Fix typo in `picocli-shell-jline2/README.md`. Thanks to [Ahmed Ashour](https://github.com/asashour) for the pull request.\n* [#1426] Fix README adoption logos. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1313] DEP: Bump jline3Version in order to avoid stackoverflow error. Thanks to [Rupert Madden-Abbott](https://github.com/rupert-madden-abbott) for the pull request.\n* [#1455] DEP: Bump spring-boot version to 2.5.6.\n* [#1369][#1371] Upgrade jline3 to version 3.19.0 to avoid \"ReadConsoleInputW failed: Incorrect function\" error. Thanks to [auricgoldfinger](https://github.com/auricgoldfinger) for the pull request.\n* [#1336] BUILD: Bump Spring Boot, Gradle and Kotlin to latest version. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1327] BUILD: fix incorrect version in `MANIFEST.MF`. Thanks to [Fiouz](https://github.com/Fiouz) for the pull request.\n* [#1328] BUILD: Upgrade Gradle to 6.8.2 and enable official Gradle Wrapper Validation GitHub Action. Thanks to [Fiouz](https://github.com/Fiouz) for the pull request.\n* [#1329] BUILD: OSGi manifest entry in picocli-4.6.0.jar should not require groovy. Thanks to [Fiouz](https://github.com/Fiouz) for raising this.\n* [#1330] BUILD: use type-safe DSL instead of direct XML manipulation to generate `pom.xml`. Thanks to [Fiouz](https://github.com/Fiouz) for the pull request.\n* [#1332] BUILD: Bumping asciidoctor + asciidoctor gradle plugin to latest versions. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1413] BUILD: Improve Travis CI build Performance. Thanks to [YunLemon](https://github.com/YunLemon) for the pull request.\n* [#1322] BUILD: switch from Bintray jcenter to Maven Central.\n\n## <a name=\"4.6.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\nThe `@Option` `help` attribute is no longer deprecated from this release; it is useful for custom help options.\n\n## <a name=\"4.6.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.6.1\"></a> Picocli 4.6.1\nThe picocli community is pleased to announce picocli 4.6.1.\n\nThis release fixes a problem with dependency scope in the following sub-modules:\n\n* picocli-codegen\n* picocli-groovy\n* picocli-shell-jline2\n* picocli-shell-jline3\n* picocli-spring-boot-starter\n\nThe problem was that these modules contained dependencies that were declared to have `implementation` scope instead of `api` scope.\nHowever, these were transitive dependencies, and necessary to compile any project that uses the above picocli modules.\n\nIn this release, transitive dependencies are declared with `api` scope in the above modules.\n\nSpecial thanks to [Sualeh Fatehi](https://github.com/sualeh), [Dejan Stojadinović](https://github.com/dejan2609) and [Semyon Levin](https://github.com/remal) for the quick community feedback, pull request and reviews!\n\n\nThis is the seventy-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.6.1-toc\"></a> Table of Contents\n* [New and noteworthy](#4.6.1-new)\n* [Fixed issues](#4.6.1-fixes)\n* [Deprecations](#4.6.1-deprecated)\n* [Potential breaking changes](#4.6.1-breaking-changes)\n\n## <a name=\"4.6.1-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.6.1-fixes\"></a> Fixed issues\n* [#1291] Fix dependency scope for `picocli-shell-jline3`. Thanks to [Sualeh Fatehi](https://github.com/sualeh) for raising this.\n* [#1292] PR to fix dependency scope for `picocli-shell-jline3`. Thanks to [Dejan Stojadinović](https://github.com/dejan2609) for the pull request, and [Semyon Levin](https://github.com/remal) for the review.\n* [#1294] Fix dependency scope for `picocli-spring-boot-starter`. Thanks to [Semyon Levin](https://github.com/remal) for raising this.\n\n\n## <a name=\"4.6.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.6.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.6.0\"></a> Picocli 4.6.0\nThe picocli community is pleased to announce picocli 4.6.0.\n\nThis release contains new features, bug fixes and other enhancements.\n\n## <a name=\"4.6.0-community-contributions\"></a> Community Contributions\n\nThis release contains many, many community contributions, for which I am extremely grateful. Let's give them some credit!\n\n* [Andreas Deininger](https://github.com/deining) has been contributing to the documentation and other areas for a long time, but recently went into overdrive :-) and contributed many, many new pull requests to improve the documentation. The user manual and Quick Guide now have a \"foldable\" table of contents, and examples in tabs, with many additional examples in Kotlin, Scala and Groovy. A lot of work went into this! Many thanks, Andreas!\n* [Marko Mackic](https://github.com/MarkoMackic) contributed a pull request to add `IModelTransformer` API for user-defined model transformations after initialization and before parsing.\n* [Sualeh Fatehi](https://github.com/sualeh) contributed a pull request to the `picocli-shell-jline3` module that adds a built-in `clear` command and improves the `help` command.\n* [H.Sakata](https://github.com/sakata1222) contributed a pull request that adds support for `echo` and `prompt` for interactive options and positional parameters.\n* [Daniel Gray](https://github.com/danielthegray) contributed a bug fix to prevent incorrectly defaulting inherited positional params after a subcommand.\n* [nveeser-google](https://github.com/nveeser-google) contributed a fix for compiler warnings about `Annotation::getClass` and assignment in `if` condition.\n* [Petr Hála](https://github.com/pehala) contributed a pull request to add a section on Mocking to user manual.\n* [Max Rydahl Andersen](https://github.com/maxandersen) contributed a pull request to include jbang in the Build Tools section of the user manual.\n* [David Phillips](https://github.com/electrum) contributed a section to the user manual on [Really Executable JARs](https://skife.org/java/unix/2011/06/20/really_executable_jars.html).\n* [Laurent Almeras](https://github.com/lalmeras) contributed a pull request to fix the user manual: `@ParentObject` should be `@ParentCommand`.\n* [Mattias Andersson](https://github.com/attiand) raised the idea of supporting subcommand methods in Groovy scripts.\n* [Adrian A.](https://github.com/aadrian) raised the idea of using closures in the picocli annotations in Groovy programs instead of specifying a class.\n* [Nick Cross](https://github.com/rnc) raised the idea of inheriting `@Command` attributes with `scope=INHERIT`.\n* [Marko Mackic](https://github.com/MarkoMackic) raised the idea of adding a `CommandSpec::removeSubcommand` method.\n* [Max Rydahl Andersen](https://github.com/maxandersen) raised the idea of supporting `Optional<T>` type for options and positional parameters.\n* [Max Rydahl Andersen](https://github.com/maxandersen) and [David Walluck](https://github.com/dwalluck) raised the idea of supporting key-only Map options (to support `-Dkey` as well as `-Dkey=value`).\n* [David Walluck](https://github.com/dwalluck) raised the idea of a \"preprocessor\" parser plugin.\n* [Jannick Hemelhof](https://github.com/clone1612) raised the idea of supporting `@Spec`-annotated members in `ArgGroup` classes.\n* [Vitaly Shukela](https://github.com/vi) raised a bug report: the error message for unmatched positional argument reports an incorrect index when value equals a previously matched argument.\n* [drkilikil](https://github.com/drkilikil) raised a bug report: `MissingParameterException` should not be thrown when subcommand has required options and help option is specified on parent command.\n* [Sebastian Thomschke](https://github.com/sebthom) raised a bug report: `ReflectionConfigGenerator` should not generate method section in subclass config for private superclass methods in `reflect-config.json`.\n* [Lukas Heumos](https://github.com/Zethson) added the picocli-based [cli-java template](https://cookietemple.readthedocs.io/en/latest/available_templates/available_templates.html#cli-java) to CookieTemple.\n* [Sualeh Fatehi](https://github.com/sualeh) raised the idea of adding add `CommandLine::getFactory` accessor method.\n* [David Walluck](https://github.com/dwalluck) contributed a test improvement that allows the tests to run reliably in more environments.\n\n\n## What is in this release\nImproved Groovy support: this release introduces a new `@PicocliScript2` annotation that adds support for exit codes and `@Command`-annotated methods to define subcommands. Also, from this release, Groovy programs can use closures in the picocli annotations instead of specifying a class.\n\nFrom this release, Map options accept key-only parameters, so end users can specify `-Dkey` as well as `-Dkey=value`.\nThere is a new `mapFallbackValue` attribute that enables this, which can be used to control the value that is put into the map when only a key was specified on the command line.\n\nAlso, this release adds support for `java.util.Optional<T>`: single-value types can be wrapped in an `Optional` container object when running on Java 8 or higher.\nIf the option or positional parameter was not specified on the command line, picocli assigns the value `Optional.empty()` instead of `null`.\n\nThis release also adds support for commands with `scope = ScopeType.INHERIT`. Commands with this scope have their attributes copied to all subcommands (and sub-subcommands).\n\nNew parser plugin: `IParameterPreprocessor` and new configuration plugin: `IModelTransformer`.\n\nFrom this release, `@Spec`-annotated elements can be used in `ArgGroup` classes, which can be convenient for validation.\n\nInteractive options and positional parameters can now set `echo = true` (for non-security sensitive data) so that user input is echoed to the console, and control the `prompt` text that is shown before asking the user for input.\n\nHelp API: this release adds public methods `Help.Layout::colorScheme`, `Help.Layout::textTable`, `Help.Layout::optionRenderer`, `Help.Layout::parameterRenderer`, and `Help::calcLongOptionColumnWidth`, making it easier to customize the table format used to lay out options and positional parameters in the usage help message.\n\nCommandSpec API: added method `CommandSpec::removeSubcommand`.\n\nThis is the seventy-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.6.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.6.0-new)\n  * [New `@PicocliScript2` annotation](#4.6.0-PicocliScript2-annotation)\n  * [Groovy Closures in Annotations](#4.6.0-closures-in-annotation)\n  * [Key-only map parameters](#4.6.0-key-only-map-params)\n  * [System Properties](#4.6.0-system-properties)\n  * [`java.util.Optional<T>`](#4.6.0-java-util-optional)\n  * [Inherited Command Attributes](#4.6.0-inherited-command-attributes)\n  * [Preprocessor Parser Plugin](#4.6.0-preprocessor)\n  * [Model Transformations](#4.6.0-model-transformations)\n* [Fixed issues](#4.6.0-fixes)\n* [Deprecations](#4.6.0-deprecated)\n* [Potential breaking changes](#4.6.0-breaking-changes)\n\n## <a name=\"4.6.0-new\"></a> New and Noteworthy\n\n### <a name=\"4.6.0-PicocliScript2-annotation\"></a> New `@PicocliScript2` annotation\nThe older `@picocli.groovy.PicocliScript` annotation is deprecated from picocli 4.6.\nNew scripts should use the `@picocli.groovy.PicocliScript2` annotation (and associated `picocli.groovy.PicocliBaseScript2` base class) instead.\nThe table below lists the differences between the `PicocliBaseScript2` and `PicocliBaseScript` script base classes.\n\n| `PicocliBaseScript2` | `PicocliBaseScript`\n|---- | ----\n| Subcommands can be defined as `@Command`-annotated methods in the script. | No support for `@Command`-annotated methods.\n| Support for `help` subcommands (both the built-in one and custom ones). | No support for `help` subcommands.\n| Exit code support: scripts can override `afterExecution(CommandLine, int, Exception)` to call `System.exit`.| No support for exit code.\n| Invokes `CommandLine::execute`. Scripts can override `beforeParseArgs(CommandLine)` to install a custom  `IExecutionStrategy`.| Execution after parsing is defined in `PicocliBaseScript::run` and is not easy to customize. Any subcommand _and_ the main script are _both_ executed.\n| Scripts can override `beforeParseArgs(CommandLine)` to install a custom `IParameterExceptionHandler`. | Invalid input handling can be customized by overriding `PicocliBaseScript::handleParameterException`.\n| Scripts can override `beforeParseArgs(CommandLine)` to install a custom `IExecutionExceptionHandler`. | Runtime exception handling can be customized by overriding `PicocliBaseScript::handleExecutionException`.\n| Implements `Callable<Object>`, script body is transformed to the `call` method. | Script body is transformed to the `runScriptBody` method.\n\n### <a name=\"4.6.0-closures-in-annotation\"></a> Groovy Closures in Annotations\nFrom picocli 4.6, Groovy programs can use closures in the picocli annotations instead of specifying a class.\nThis can be especially useful in Groovy scripts, where one cannot define a static inner class.\n\nExample:\n\n```java\n@Command(name = \"ClosureDemo\",\n        versionProvider = {\n            { -> [\"line1\" , \"line2\"] as String[] } as IVersionProvider // <1>\n        },\n        defaultValueProvider = {\n            { argSpec -> \"some default\" } as IDefaultValueProvider // <2>\n        })\nclass ClosureDemo {\n    @Option(names = '-x', completionCandidates = {[\"A\", \"B\", \"C\"]}) // <3>\n    String x\n\n    @Option(names = '-y',\n            parameterConsumer = {\n                { args, argSpec, commandSpec ->  // <4>\n                    argSpec.setValue(args.toString() + commandSpec.name())\n                    args.clear()\n                } as IParameterConsumer\n            })\n    String y\n\n    @Option(names = '-z', converter = [ // requires Groovy 3.0.7\n            { { str -> MessageDigest.getInstance(str) } as ITypeConverter } // <5>\n    ])\n    MessageDigest z\n}\n```\n\nWhen a class is specified, picocli creates an instance of the class. By contrast, when a closure is specified, picocli _calls the closure_ to get an instance.\n(To be precise, both of these are delegated to the configured [factory](https://picocli.info/#_custom_factory), and the default factory implementation supports closures from picocli 4.6.)\n\nAs you can see in the above example, each closure in the annotation should contain another closure that has the required type (`IVersionProvider`, `IDefaultValueProvider`, etc.)\n\n* <1> Command `versionProvider`: note the empty parameter list before the `->` arrow. This is needed to help the Groovy compiler. The closure must be cast to `IVersionProvider`.\n* <2> Command `defaultProvider`: return a default value for the specified `ArgSpec` parameter. The closure must be cast to `IDefaultValueProvider`.\n* <3> Option or Parameters `completionCandidates`: return a list of Strings. No parameter list or casting is required.\n* <4> Option or Parameters `parameterConsumer`: given a `Stack`, `ArgSpec` and `CommandSpec`, process the remaining arguments. The closure must be cast to `IParameterConsumer`.\n* <5> Option or Parameters type `converter` takes an array of closures. Groovy 3.0.7 or greater is required: older versions of Groovy ignore closures in class array annotations. Each closure must have a parameter and be cast to `ITypeConverter`.\n\n\n### <a name=\"4.6.0-key-only-map-params\"></a> Key-only map parameters\nBy default, picocli expects Map options and positional parameters to look like `key=value`, that is, the option parameter or positional parameter is expected to have a key part and a value part, separated by a `=` character. If this is not the case, picocli shows a user-facing error message: `Value for ... should be in KEY=VALUE format but was ...`.\n\nFrom picocli 4.6, applications can specify a `mapFallbackValue` to allow end users to specify only the key part. The specified `mapFallbackValue` is put into the map when end users to specify only a key. The value type can be wrapped in a `java.util.Optional`. For example:\n\n```java\n@Option(names = {\"-P\", \"--properties\"}, mapFallbackValue = Option.NULL_VALUE)\nMap<String, Optional<Integer>> properties;\n\n@Parameters(mapFallbackValue = \"INFO\", description = \"... ${MAP-FALLBACK-VALUE} ...\")\nMap<Class<?>, LogLevel> logLevels;\n```\n\nThis allows input like the following:\n\n```\n<cmd> --properties=key1 -Pkey2 -Pkey3=3 org.myorg.MyClass org.myorg.OtherClass=DEBUG\n```\n\nThe above input would give the following results:\n\n```\nproperties = [key1: Optional.empty, key2: Optional.empty, key3: Optional[3]]\nlogLevels  = [org.myorg.MyClass: INFO, org.myorg.OtherClass: DEBUG]\n```\n\nNote that the option description may contain the [`${MAP-FALLBACK-VALUE}` variable](https://picocli.info/#_predefined_variables) which will be replaced with the actual map fallback value when the usage help is shown.\n\n### <a name=\"4.6.0-system-properties\"></a> System Properties\nA common requirement for command line applications is to support the `-Dkey=value` syntax to allow end users to set system properties.\n\nThe example below uses the `Map` type to define an `@Option`-annotated method that delegates all key-value pairs to `System::setProperty`.\nNote the use of `mapFallbackValue = \"\"` to allow key-only option parameters.\n\n```java\nclass SystemPropertiesDemo {\n    @Option(names = \"-D\", mapFallbackValue = \"\") // allow -Dkey\n    void setProperty(Map<String, String> props) {\n        props.forEach((k, v) -> System.setProperty(k, v));\n    }\n}\n```\n\n### <a name=\"4.6.0-java-util-optional\"></a> `java.util.Optional<T>`\nFrom version 4.6, picocli supports single-value types wrapped in a `java.util.Optional` container when running on Java 8 or higher.\nIf the option or positional parameter was not specified on the command line, picocli assigns the value `Optional.empty()` instead of `null`.\nFor example:\n\n```java\n@Option(names = \"-x\")\nOptional<Integer> x;\n\n@Option(names = \"-D\", mapFallbackValue = Option.NULL_VALUE)\nMap<String, Optional<Integer>> map;\n```\n\nWARNING: Picocli has only limited support for `java.util.Optional` types:\nonly single-value types, and the values in a `Map` (but not the keys!) can be wrapped in an `Optional` container.\n`java.util.Optional` cannot be combined with arrays or other `Collection` classes.\n\n### <a name=\"4.6.0-inherited-command-attributes\"></a> Inherited Command Attributes\nPicocli 4.6 adds support for inheriting `@Command` attributes with the `scope = ScopeType.INHERIT` annotation.\nCommands with this scope have their `@Command` attributes copied to all subcommands (and sub-subcommands, to any level of depth).\n\nWhen a subcommand specifies an explicit value in its `@Command` annotation, this value is used instead of the inherited value.\nFor example:\n\n```java\n@Command(name = \"app\", scope = ScopeType.INHERIT,\n        mixinStandardHelpOptions = true, version = \"app version 1.0\",\n        header = \"App header\",\n        description = \"App description\",\n        footerHeading = \"Copyright%n\", footer = \"(c) Copyright by the authors\",\n        showAtFileInUsageHelp = true)\nclass App implements Runnable {\n    @Option(names = \"-x\") int x;\n\n    public void run() { System.out.printf(\"Hello from app %d%n!\", x); }\n\n    @Command(header = \"Subcommand header\", description = \"Subcommand description\")\n    void sub(@Option(names = \"-y\") int y) {\n        System.out.printf(\"Hello app sub %d%n!\", y);\n    }\n}\n```\n\nThe `app` command in the above example has `scope = ScopeType.INHERIT`, so its `@Command` properties are inherited by the `sub` subcommand.\n\nThe `sub` subcommand defines its own `header` and `description`, so these are not inherited from the parent command.\nThe help message for the subcommand looks like this:\n\n```\nSubcommand header\nUsage: app sub [-hV] [-y=<arg0>] [@<filename>...]\nSubcommand description\n      [@<filename>...]   One or more argument files containing options.\n  -h, --help             Show this help message and exit.\n  -V, --version          Print version information and exit.\n  -y=<arg0>\nCopyright\n(c) Copyright by the authors\n```\n\nNote that the subcommand has inherited the mixed-in standard help options (`--help` and `--version`), the `@file` usage help, and the footer and footer heading.\nIt also inherited the version string, shown when the user invokes `app sub --version`.\n\nWhen a command has `scope = INHERIT`, the following attributes are copied to its subcommands:\n\n* all usage help attributes: description, descriptionHeading, header, headerHeading, footer, footerHeading, customSynopsis, synopsisHeading, synopsisSubcommandLabel, abbreviateSynopsis, optionListHeading, parameterListHeading, commandListHeading, exitCodeList, exitCodeListHeading, requiredOptionMarker, showDefaultValues, sortOptions, autoWidth, width, showAtFileInUsageHelp, showEndOfOptionsDelimiterInUsageHelp, and hidden\n* exit codes: exitCodeOnSuccess, exitCodeOnUsageHelp, exitCodeOnVersionHelp, exitCodeOnInvalidInput, exitCodeOnExecutionException\n* the help and version options mixed in by `mixinStandardHelpOptions`\n* separator between option and option parameter\n* version\n* versionProvider\n* defaultValueProvider\n* subcommandsRepeatable\n* whether this command is a `helpCommand`\n\nAttributes that are _not_ copied include:\n\n* command name\n* command aliases\n* options and parameters (other than the help and version options mixed in by `mixinStandardHelpOptions`)\n* other mixins than `mixinStandardHelpOptions`\n* subcommands\n* argument groups\n\n\n### <a name=\"4.6.0-preprocessor\"></a> Preprocessor Parser Plugin\n\nIntroduced in picocli 4.6, the `IParameterPreprocessor` is also a parser plugin, similar to `IParameterConsumer`, but more flexible.\n\nOptions, positional parameters and commands can be assigned a `IParameterPreprocessor` that implements custom logic to preprocess the parameters for this option, position or command.\nWhen an option, positional parameter or command with a custom `IParameterPreprocessor` is matched on the command line, picocli's internal parser is temporarily suspended, and this custom logic is invoked.\n\nThis custom logic may completely replace picocli's internal parsing for this option, positional parameter or command, or augment it by doing some preprocessing before picocli's internal parsing is resumed for this option, positional parameter or command.\n\nThe \"preprocessing\" actions can include modifying the stack of command line parameters, or modifying the model.\n\n\n#### Example use case\nThis may be useful when disambiguating input for commands that have both a positional parameter and an option with an optional parameter.\nFor example, suppose we have a command with the following synopsis:\n\n```\nedit [--open[=<editor>]] <file>\n```\n\nOne of the limitations of options with an optional parameter is that they are difficult to combine with positional parameters.\n\nWith a custom parser plugin, we can customize the parser, such that `VALUE` in `--option=VALUE` is interpreted as the option parameter, and in `--option VALUE` (without the `=` separator), VALUE is interpreted as the positional parameter.\nThe code below demonstrates:\n\n\n```java\n@Command(name = \"edit\")\nclass Edit {\n\n    @Parameters(index = \"0\", description = \"The file to edit.\")\n    File file;\n\n    enum Editor { defaultEditor, eclipse, idea, netbeans }\n\n    @Option(names = \"--open\", arity = \"0..1\", preprocessor = Edit.MyPreprocessor.class,\n        description = {\n            \"Optionally specify the editor to use; if omitted the default editor is used. \",\n            \"Example: edit --open=idea FILE opens IntelliJ IDEA (notice the '=' separator)\",\n            \"         edit --open FILE opens the specified file in the default editor\"\n        })\n    Editor editor = Editor.defaultEditor;\n\n    static class MyPreprocessor implements IParameterPreprocessor {\n        public boolean preprocess(Stack<String> args,\n                                  CommandSpec commandSpec,\n                                  ArgSpec argSpec,\n                                  Map<String, Object> info) {\n            // we need to decide whether the next arg is the file to edit\n            // or the name of the editor to use...\n            if (\" \".equals(info.get(\"separator\"))) { // parameter was not attached to option\n\n                // act as if the user specified --open=defaultEditor\n                args.push(Editor.defaultEditor.name());\n            }\n            return false; // picocli's internal parsing is resumed for this option\n        }\n    }\n}\n```\n\nWith this preprocessor, the following user input gives the following command state:\n\n```\n# User input # Command State\n# --------------------------\n--open A B   # editor: defaultEditor, file: A,    unmatched: [B]\n--open A     # editor: defaultEditor, file: A,    unmatched: []\n--open=A B   # editor: A,             file: B,    unmatched: []\n--open=A     # editor: A,             file: null, unmatched: []\n```\n\n### <a name=\"4.6.0-model-transformations\"></a> Model Transformations\nFrom picocli 4.6, it is possible to use the annotations API to modify the model (commands, options, subcommands, etc.) dynamically at runtime.\nThe `@Command` annotation now has a `modelTransformer` attribute where applications can specify a class that implements the `IModelTransformer` interface:\n\nThis allows applications to dynamically add or remove options, positional parameters or subcommands, or modify the command in any other way, based on some runtime condition.\n\n```java\n@Command(modelTransformer = Dynamic.SubCmdFilter.class)\nclass Dynamic {\n\n    private static class SubCmdFilter implements IModelTransformer {\n        public CommandSpec transform(CommandSpec commandSpec) {\n            if (Boolean.getBoolean(\"disable_sub\")) {\n                commandSpec.removeSubcommand(\"sub\");\n            }\n            return commandSpec;\n        }\n    }\n\n    @Command\n    private void sub() {\n        // subcommand business logic\n    }\n}\n```\n\n## <a name=\"4.6.0-fixes\"></a> Fixed issues\n* [#1164] API: Add support for `@Command(scope=INHERIT)`. Thanks to [Nick Cross](https://github.com/rnc) for raising this.\n* [#1191] API: Add `@PicocliScript2` annotation to support subcommand methods in Groovy scripts. Thanks to [Mattias Andersson](https://github.com/attiand) for raising this.\n* [#1241] API: Add `mapFallbackValue` attribute to `@Options` and `@Parameters` annotations, and corresponding `ArgSpec.mapFallbackValue()`.\n* [#1217] API: Add `IParameterPreprocessor` parser plugin to invoke custom logic when a command, option or positional parameter is matched. Thanks to [David Walluck](https://github.com/dwalluck) for raising this.\n* [#1259][#1266] API: Add `IModelTransformer` to support user-defined model transformations after initialization and before parsing. Thanks to [Marko Mackic](https://github.com/MarkoMackic) for the pull request.\n* [#802][#1284] API: Add support for `echo` and `prompt` in for interactive options and positional parameters. Thanks to [H.Sakata](https://github.com/sakata1222) for the pull request.\n* [#1184] API: Added public methods `Help.Layout::colorScheme`, `Help.Layout::textTable`, `Help.Layout::optionRenderer`, `Help.Layout::parameterRenderer`, and `Help::calcLongOptionColumnWidth`.\n* [#1254] API: Added `ArgSpec::root`: this method returns the original `ArgSpec` for inherited `ArgSpec` objects, and `null` for other `ArgSpec` objects. Thanks to [Daniel Gray](https://github.com/danielthegray) for the pull request.\n* [#1256] API: Added `CommandSpec::removeSubcommand` method. Thanks to [Marko Mackic](https://github.com/MarkoMackic) for raising this.\n* [#1258] API: Groovy programs can now use closures in the picocli annotations instead of specifying a class. Thanks to [Adrian A.](https://github.com/aadrian) for raising this.\n* [#1267] API: Add `CommandLine::getFactory` accessor for the factory. Thanks to [Sualeh Fatehi](https://github.com/sualeh) for the suggestion.\n* [#1108] Enhancement: Support `Optional<T>` type for options and positional parameters. Thanks to [Max Rydahl Andersen](https://github.com/maxandersen) for raising this.\n* [#1214] Enhancement: Support Map options with key-only (support `-Dkey` as well as `-Dkey=value`). Thanks to [Max Rydahl Andersen](https://github.com/maxandersen) and [David Walluck](https://github.com/dwalluck) for raising this and subsequent discussion.\n* [#1260] Enhancement: Support `@Spec`-annotated members in `ArgGroup` classes. Thanks to [Jannick Hemelhof](https://github.com/clone1612) for raising this.\n* [#1265] Enhancement in `picocli-shell-jline3`: add built-in `clear` command and improve `help` command. Thanks to [Sualeh Fatehi](https://github.com/sualeh) for the pull request.\n* [#1236] Enhancement/bugfix: Fix compiler warnings about `Annotation::getClass` and assignment in `if` condition. Thanks to [nveeser-google](https://github.com/nveeser-google) for the pull request.\n* [#1229] Bugfix: Fix compilation error introduced with fc5ef6de6 (#1184). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1225] Bugfix: Error message for unmatched positional argument reports an incorrect index when value equals a previously matched argument. Thanks to [Vitaly Shukela](https://github.com/vi) for raising this.\n* [#1250] Bugfix: Inherited positional parameter should not be overridden by default value if placed after subcommand. Thanks to [Daniel Gray](https://github.com/danielthegray) for the pull request.\n* [#1183] Bugfix: Prevent `MissingParameterException` thrown when subcommand has required options and help option is specified on parent command. Thanks to [drkilikil](https://github.com/drkilikil) for raising this.\n* [#1273] Bugfix: The `Help.calcLongOptionColumnWidth` now calls `Help.createDefaultOptionRenderer`, so overriding `createDefaultOptionRenderer` uses the correct column width in the options and parameters list.\n* [#1274] Bugfix: `ReflectionConfigGenerator` should not generate method section in subclass config for private superclass methods in `reflect-config.json`. Thanks to [Sebastian Thomschke](https://github.com/sebthom) for raising this.\n* [#1215] DOC: User manual improvements, including more tabs with Kotlin source code. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1219] DOC: User manual improvements: added more tabs with Kotlin code. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1220] DOC: User manual improvements: corrections, more Kotlin tabs. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1221] DOC: User manual improvements: add tabs with Kotlin code for samples (chapter 14: Usage help). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1222] DOC: User manual improvements: add tabs with Kotlin code for samples (chapter 7 + 12). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1223] DOC: User manual improvements: add tabs with Kotlin code for samples (chapter 10: Validation). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1224] DOC: User manual improvements: add tabs with Kotlin code for samples (chapter 5: Default Values). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1226] DOC: User manual improvements: add tabs with Kotlin code for samples (chapter 9.6 - 9.8: Executing commands). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1228] DOC: User manual improvements: add tabs with Kotlin code for samples (chapters 8, 16, 20). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1230] DOC: User manual improvements: add tabs with Kotlin code for samples (Chapters 6, 11, 15, 19). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1232] DOC: User manual improvements for Micronaut example: add Kotlin version, extended description of Micronaut usage. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1233] DOC: User manual improvements: add tabs with Kotlin code for samples (Chapter 21: Tips & Tricks). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1234] DOC: add system properties example to user manual.\n* [#1235][#1238] DOC: User manual: update DI section on Quarkus. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1246] DOC: User manual improvements: Guice and Spring Boot examples: add Kotlin versions. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1242] DOC: \"Foldable\" table of contents for User Manual and Quick Guide. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1247] DOC: User manual: extended Spring Boot example. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1249] DOC: Added section on Mocking to user manual. Thanks to [Petr Hála](https://github.com/pehala) for the pull request.\n* [#1244] DEP: Bump `Spring-Boot-Starter` version to 2.3.5.RELEASE. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1289] DEP: Bump Spring boot dependency to 2.4.1. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1248] BUILD: Fix gradle warnings. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1280] BUILD: Remove trailing comment from gradle.properties to prevent build error. Thanks to [David Walluck](https://github.com/dwalluck) for raising this.\n* [#1253] DOC: Fix line endings to LF in documentation files. Thanks to [Daniel Gray](https://github.com/danielthegray) for the pull request.\n* [#1255] DOC: User manual and Quick Guide: add Groovy, Kotlin and Scala examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1261] DOC: User manual improvements: add Scala code samples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1262] DOC: User manual: include jbang in the Build Tools section. Thanks to [Max Rydahl Andersen](https://github.com/maxandersen) for the pull request.\n* [#1263] DOC: User manual: show build scripts in tabs. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1264] DOC: Fix broken links to GraalVm native image build configuration. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1005] DOC: Add link to the CookieTemple [cli-java template](https://cookietemple.readthedocs.io/en/latest/available_templates/available_templates.html#cli-java) README. Thanks to [Lukas Heumos](https://github.com/Zethson) for getting this added to CookieTemple.\n* [#1276] DOC: User manual: add section for \"really executable JARs\". Thanks to [David Phillips](https://github.com/electrum) for the pull request.\n* [#1286] DOC: Fix: `@ParentObject` should be `@ParentCommand`. Thanks to [Laurent Almeras](https://github.com/lalmeras) for the pull request.\n* [#1290] DOC: JLine: change keystroke syntax 'Ctl-D' to more common used syntax 'Ctrl-D'. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1270] TEST: Fix issue #1103 in `Issue1225UnmatchedArgBadIndex`. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n\n## <a name=\"4.6.0-deprecated\"></a> Deprecations\nFrom this release, the `@picocli.groovy.PicocliScript` annotation in the `picocli-groovy` module is deprecated in favor of `@picocli.groovy.PicocliScript2`, and the `picocli.groovy.PicocliBaseScript` class is deprecated in favor of `picocli.groovy.PicocliBaseScript2`.\n\n## <a name=\"4.6.0-breaking-changes\"></a> Potential breaking changes\nAdded method `isOptional()` to the `picocli.CommandLine.Model.ITypeInfo` interface.\n\n\n# <a name=\"4.5.2\"></a> Picocli 4.5.2\nThe picocli community is pleased to announce picocli 4.5.2.\n\nThis release contains bug fixes and enhancements:\n\n* Auto-enable ANSI colors on MSYS2 terminals.\n* Abbreviated options are now matched correctly even when value attached with '=' separator.\n* The built-in `HelpCommand` now respects subcommands case-sensitivity and abbreviations.\n* Required parameters no longer consume negated options.\n* Positional parameters in Argument Groups no longer result in `ArithmeticException: / by zero` exceptions.\n* The user manual now has tabs showing examples in languages other than Java.\n  This is a work in progress: many examples still only have a Java version.\n  Contributions welcome!\n* Many, many documentation enhancements, most of which contributed by the community.\n\nMany thanks to the picocli community who contributed 28 pull requests in this release!\nPlease see the Fixed Issues section below for the individual contributors. Great work!\n\nThis is the seventy-fourth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.5.2-toc\"></a> Table of Contents\n* [New and noteworthy](#4.5.2-new)\n* [Fixed issues](#4.5.2-fixes)\n* [Deprecations](#4.5.2-deprecated)\n* [Potential breaking changes](#4.5.2-breaking-changes)\n\n## <a name=\"4.5.2-new\"></a> New and Noteworthy\nThe user manual now has tabs showing examples in languages other than Java.\nThis is a work in progress: many examples still only have a Java version.\nContributions welcome!\n\n## <a name=\"4.5.2-fixes\"></a> Fixed issues\n* [#1186] Enhancement: Auto-enable ANSI colors on MSYS2 (Git for Windows, MSYS2-based Windows Terminal shells, etc.). Thanks to [Sysmat](https://github.com/sysmat) for raising this.\n* [#1162] Bugfix: Abbreviated options are not matched if value attached with '=' separator (like `-x=3`). Thanks to [Chris Laprun](https://github.com/metacosm) for raising this.\n* [#1156][#1172] Bugfix: the built-in `HelpCommand` now respects subcommands case-sensitivity and abbreviations. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1197] Bugfix: required parameters should not consume negated options. Thanks to [Kevin Turner](https://github.com/keturn) for raising this.\n* [#1213] Bugfix: `@Parameters` in `@ArgGroup` should not result in `ArithmeticException: / by zero`. Thanks to [Loren Keagle](https://github.com/LorenKeagle) for raising this.\n* [#1158] DOC: Fix broken links to GraalVM repo. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1155] DOC: Fix sample code in chapter \"Validation\". Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1157] DOC: Fix typo \"a argument group\" in user manual. Thanks to sabrina for raising this.\n* [#1160] DOC: Added section [Was a Value Defaulted?](https://picocli.info/#_was_a_value_defaulted) to the user manual.\n* [#1161] DOC: Fix typo \"4,2\" (should be 4.2) in user manual. Thanks to sabrina for raising this.\n* [#1165] DOC: Fix jline3 example: add `AnsiConsole::systemUninstall` in `finally` clause. Thanks to [David Walluck](https://github.com/dwalluck) for raising this.\n* [#1168][#1169] DOC: Ensure `org.jline.terminal.Terminal` is closed when done. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n* [#1167] DOC: Fix broken links in Quick Guide. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1171] DOC: Various documentation improvements. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1173] DOC: Improve example applications for the user manual and Quick Guide. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1175] DOC: section on compatible versions to `picocli-shell-jline3/README.md`. Thanks to [Nick Cross](https://github.com/rnc) for raising this.\n* [#1176] DOC: Update JLine `picocli-shell-jline3` example to 3.16.0. Thanks to [Nick Cross](https://github.com/rnc) for the pull request.\n* [#890][#1187] DOC: Extend and improve subcommands documentation. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1190] DOC: Improve InetSocketAddressConverter demo. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1192] DOC: Fix broken links in documentation. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1196] DOC: Quick Guide examples can now be executed on the documentation page via [JDoodle.com](https://www.jdoodle.com). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1200] DOC: User manual `checksum` example can now be executed on the documentation page via [JDoodle.com](https://www.jdoodle.com). Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1199] DOC: Fix `paramLabel` in examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1198] DOC: Add copy button to code blocks. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1201] DOC: User manual `checksum` example: add Kotlin source code on second tab. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1202] DOC: Update to latest Asciidoctor gradle plugin. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1203] DOC: Replace 'coderay' source code highlighter with 'rouge' to support Kotlin, Scala and Groovy. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1205] DOC: User manual `checksum` example: add more tabs for Groovy, Groovy script and Scala. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1208] DOC: Fix: Show copy buttons in code blocks with latest Asciidoctor gradle plugin. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1209] DOC: Show Maven coordinates in JLine2/3 README. Thanks to [Jiří Holuša](https://github.com/Holmistr) for the pull request.\n* [#1210] DOC: User manual `subcommands` example: add tab with Kotlin source code. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1211] DOC: User manual `subcommands` section: add several tabs with Kotlin source code. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1170] TEST: Ensure ANSI is disabled in `ManPageGeneratorTest` regardless of environment. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n* [#1166][#1103] TEST: Ensure ANSI is disabled in `TracerTest` regardless of environment. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n* [#1179] TEST: Use `.invalid` domain name for `InetAddress` test. Thanks to [David Phillips](https://github.com/electrum) for the pull request.\n* [#1178] BUILD: Run Travis build on macOS. Thanks to [David Phillips](https://github.com/electrum) for the pull request.\n* [#1192] Dependency Upgrade: Bump AsciiDoctor to 2.1.0 from 1.6.2. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n\n## <a name=\"4.5.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.5.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.5.1\"></a> Picocli 4.5.1\nThe picocli community is pleased to announce picocli 4.5.1.\n\nThis release contains bug fixes and enhancements.\n\nFixed bug in the `picocli-codegen` annotation processor that resulted in errors in native images that used `ManPageGenerator` as subcommand.\n\nSuppress generation of Gradle Module Metadata, to fix Gradle build failures for projects using picocli 4.4.0 or 4.5.0.\n\nFixed terminal width detection on macOS.\n\nThe user manual now has a new section on [Validation](https://picocli.info/#_validation). Various other documentation improvements.\n\n\nThis is the seventy-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.5.1-toc\"></a> Table of Contents\n* [New and noteworthy](#4.5.1-new)\n* [Fixed issues](#4.5.1-fixes)\n* [Deprecations](#4.5.1-deprecated)\n* [Potential breaking changes](#4.5.1-breaking-changes)\n\n## <a name=\"4.5.1-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.5.1-fixes\"></a> Fixed issues\n* [#1151] Bugfix: `ManPageGenerator` as subcommand with native-image throws exception. Thanks to [Sebastian Hoß](https://github.com/sebhoss) for raising this.\n* [#1152] Bugfix: Gradle build fail when using picocli 4.4.0 or 4.5.0: Gradle Module Metadata for picocli 4.4.0+ missing from Maven Central. Thanks to [Frank Pavageau](https://github.com/fpavageau) for reporting this.\n* [#1150] Bugfix: Fix terminal width detection on macOS. Thanks to [David Phillips](https://github.com/electrum) for the pull request.\n* [#1142] DOC: Update Kotlin GraalVM native image example - Update native image gradle plugin. Now supports jdk 11. Thanks to [OndrejMalek](https://github.com/OndrejMalek) for the pull request.\n* [#1153] DOC: Fix documentation leading code quote. Thanks to sabrina for raising this.\n* [#1147] DOC: Add documentation on how to do custom parameter validation. Thanks to [Loren Keagle](https://github.com/LorenKeagle) for raising this.\n\n\n## <a name=\"4.5.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.5.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.5.0\"></a> Picocli 4.5.0\nThe picocli community is pleased to announce picocli 4.5.0.\n\nThis release contains bug fixes and enhancements.\n\nThe `ColorScheme` class now has new methods `stackTraceText` and `richStackTraceString`, which can be convenient when creating [custom error handlers](https://picocli.info/#_handling_errors) with colors.\n\nVarious bugfixes in the `picocli-codegen` annotation processor.\n\nThe user manual now has anchor links before all section titles.\n\nThis is the seventy-second public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.5.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.5.0-new)\n* [Fixed issues](#4.5.0-fixes)\n* [Deprecations](#4.5.0-deprecated)\n* [Potential breaking changes](#4.5.0-breaking-changes)\n\n## <a name=\"4.5.0-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.5.0-fixes\"></a> Fixed issues\n* [#1129] API: Add methods `ColorScheme::stackTraceText(Throwable)` and `ColorScheme::richStackTraceString(Throwable)`.\n* [#1124] Enhancement: automatically generate a better summary in the `AutoComplete.GenerateCompletion` generated man page.\n* [#1126] Enhancement: Make picocli trace levels case-insensitive.\n* [#1128] Enhancement: `ParameterException` caused by `TypeConversionException` now have their cause exception set.\n* [#1137] Bugfix: The `picocli-codegen` annotation processor causes the build to fail with a `ClassCastException` when an option has `completionCandidates` defined.\n* [#1134] Bugfix: The `picocli-codegen` annotation processor should allow `@Spec`-annotated field in classes implementing `IVersionProvider`.\n* [#1138] Bugfix: The `picocli-codegen` annotation processor no longer gives `FATAL ERROR: picocli.CommandLine$InitializationException: ArgGroup has no options or positional parameters, and no subgroups` during incremental compilation in Intelli/J IDEA.\n* [#1127] DOC: Custom ShortErrorMessageHandler manual example should use bold red for error message.\n* [#1130] DOC: Clarify how to run picocli-based applications.\n* [#1131] DOC: Add anchor links before section titles in user manual.\n\n## <a name=\"4.5.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.5.0-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.4.0\"></a> Picocli 4.4.0\nThe picocli community is pleased to announce picocli 4.4.0.\n\nThis release contains over 45 bugfixes, enhancements, and new features.\n\nA major new feature in this release is support for abbreviated options and subcommands. When abbreviations are enabled, users can specify the initial letter(s) of the first \"component\" and optionally of one or more subsequent components of an option or subcommand name.\n\"Components\" are parts of a name, separated by `-` dash characters or by upper/lower case. So for example, both `--CamelCase` and `--kebab-case` have two components.\nFor details see the [New and Noteworthy](#4.4.0-new) section below.\n\nAnother important change are parser fixes and improvements: the parser will no longer assign values that match an option name to options that take a parameter, unless the value is in quotes. Also, values that resemble, but not exactly match, option names are now treated more consistently and parser behaviour for such values is configurable.\n\nAlso worth highlighting: from this release, the `ManPageGenerator` tool can be used as a subcommand in your application.\n\nThis release has many more improvements for customizing the usage help message, JANSI fixes, and other bugfixes and improvements. See the [Fixed Issues](#4.4.0-fixes) list for details.\n\nThis is the seventy-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.4.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.4.0-new)\n  * [Abbreviated Options and Subcommands](#4.4.0-abbreviated-options-and-commands)\n  * [Parser Fixes and Improvements](#4.4.0-parser)\n  * [ManPageGenerator as Subcommand in Your App](#4.4.0-gen-manpage-subcommand)\n* [Fixed issues](#4.4.0-fixes)\n* [Deprecations](#4.4.0-deprecated)\n* [Potential breaking changes](#4.4.0-breaking-changes)\n\n## <a name=\"4.4.0-new\"></a> New and Noteworthy\n\n### <a name=\"4.4.0-abbreviated-options-and-commands\"></a> Abbreviated Options and Subcommands\n\nSince picocli 4.4, the parser can recognize abbreviated options and subcommands.\nThis needs to be enabled explicitly with `CommandLine::setAbbreviatedOptionsAllowed` and `CommandLine::setAbbreviatedSubcommandsAllowed`.\n\n#### Recognized Abbreviations\nWhen abbreviations are enabled, users can specify the initial letter(s) of the first component and optionally of one or more subsequent components of an option or subcommand name.\n\n\"Components\" are separated by `-` dash characters or by case, so for example, both `--CamelCase` and `--kebab-case` have two components.\n\nNOTE: When case sensitivity is disabled, only the `-` dash character can be used to separate components.\n\nExamples of valid abbreviations:\n\n```\nOption or Subcommand | Recognized Abbreviations\n-------------------- | ------------------------\n--veryLongCamelCase  | --very, --vLCC  --vCase\n--super-long-option  | --sup, --sLO, --s-l-o, --s-lon, --s-opt, --sOpt\nsome-long-command    | so, sLC, s-l-c, soLoCo, someCom\n```\n\n#### Ambiguous Abbreviations\nWhen the user specifies input that can match multiple options or subcommands, the parser throws a `ParameterException`.\nWhen applications use the `execute` method, a short error message and the usage help is displayed to the user.\n\nFor example, given a command with subcommands `help` and `hello`, then ambiguous user input like `hel` will show this error message:\n\n```\nError: 'hel' is not unique: it matches 'hello', 'help'\n```\n\n#### Abbreviated Long Options and POSIX Clustered Short Options\n\nWhen an argument can match both a long option and a set of clustered short options, picocli matches the long option.\n\nFor example:\n\n```java\nclass AbbreviationsAndPosix {\n    @Option(names = \"-A\") boolean a;\n    @Option(names = \"-B\") boolean b;\n    @Option(names = \"-AaaBbb\") boolean aaaBbb;\n}\nAbbreviationsAndPosix app = new AbbreviationsAndPosix();\nnew CommandLine(app).setAbbreviatedOptionsAllowed(true).parseArgs(\"-AB\");\nassertTrue(app.aaaBbb);\nassertFalse(app.a);\nassertFalse(app.b);\n```\n\nWhen abbreviated options are enabled, user input `-AB` will match the long `-AaaBbb` option, but not the `-A` and `-B` options.\n\n### <a name=\"4.4.0-parser\"></a> Parser Fixes and Improvements\n\n#### Option Names as Option Values\n\nOptions that take a parameter previously were able to take option names as the parameter value.\nFrom this release, this is no longer possible.\nThe parser will no longer assign values that match an option name to an option, unless the value is in quotes. For example:\n\n```java\nclass App {\n    @Option(names = \"-x\") String x;\n    @Option(names = \"-y\") String y;\n\n    public static void main(String... args) {\n        App app = new App();\n        new CommandLine(app).setTrimQuotes(true).parseArgs(args);\n        System.out.printf(\"x='%s', y='%s'%n\", app.x, app.y);\n    }\n}\n```\n\nIn previous versions of picocli, the above command would accept input `-x -y`, and the value `-y` would be assigned to the `x` String field. From this release, the above input will be rejected with an error message indicating that the `-x` option requires a parameter.\n\nIf it is necessary to accept values that match option names, these values need to be quoted. For example:\n\n```\njava App -x=\"-y\"\n```\n\nThis will print the following output:\n\n```\nx='-y', y='null'\n```\n\n#### Vararg Positional Parameters No Longer Consume Unmatched Options\n\nVararg positional arguments no longer consume unmatched options unless configured to do so. For example:\n\n```java\nclass App {\n    @Parameters(arity = \"*\") String[] positionals;\n}\n```\n\nIn previous versions of picocli, the parser behaviour was not consistent:\n\n* input `-z 123` would be rejected with error `\"Unmatched argument: '-z'`\n* input `123 -z` would be accepted and the `positionals` String array would contain two values, `123` and `-z`\n\n(Note that this problem only occurred with multi-value positional parameters defined with variable arity: `arity = \"*\"`.)\n\nFrom this release, both of the above input sequences will be rejected with an error message indicating that `-z` is an unknown option.\nAs before, to accept such values as positional parameters, call `CommandLine::setUnmatchedOptionsArePositionalParams` with `true`.\n\n#### Configure Whether Options Should Consume Unknown Options\n\nBy default, options accept parameter values that \"resemble\" (but don't exactly match) an option.\n\nThis release introduces a `CommandLine::setUnmatchedOptionsAllowedAsOptionParameters` method that makes it possible to configure the parser to reject values that resemble options as option parameters.\nSetting it to `false` will result in values resembling option names being rejected as option values.\n\nFor example:\n\n```java\nclass App {\n    @Option(names = \"-x\") String x;\n}\n```\n\nBy default, a value like `-z`, which resembles an option, is accepted as the parameter for `-x`:\n\n```java\nApp app = new App();\nnew CommandLine(app).parseArgs(\"-x\", \"-z\");\nassertEquals(\"-z\", app.x);\n```\n\nAfter setting the `unmatchedOptionsAllowedAsOptionParameters` parser option to `false`, values resembling an option are rejected as parameter for `-x`:\n\n```java\nnew CommandLine(new App())\n        .setUnmatchedOptionsAllowedAsOptionParameters(false)\n        .parseArgs(\"-x\", \"-z\");\n```\n\nThis will throw an `UnmatchedArgumentException` with message:\n\n```\n\"Unknown option '-z'; Expected parameter for option '-x' but found '-z'\"\n```\n\nNOTE: Negative numbers are not considered to be unknown options, so even when `unmatchedOptionsAllowedAsOptionParameters` is set to `false`, option parameters like `-123`, `-NaN`, `-Infinity`, `-#ABC` and `-0xCAFEBABE` will not be rejected for resembling but not matching an option name.\n\n\n\n### <a name=\"4.4.0-gen-manpage-subcommand\"></a> ManPageGenerator as Subcommand in Your App\n\nFrom picocli 4.4, the `ManPageGenerator` tool can be used as a subcommand in your application, with the usual syntax:\n\n```\nimport picocli.codegen.docgen.manpage.ManPageGenerator;\n\n@Command(subcommands = ManPageGenerator.class)\n...\n```\n\nTo use the `ManPageGenerator` tool as a subcommand, you will need the `picocli-codegen` jar in your classpath.\n\n## <a name=\"4.4.0-fixes\"></a> Fixed issues\n* [#10][#732][#1047] API: Support abbreviated options and commands. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#639] API: Add method `CommandLine::is/setUnmatchedOptionsAllowedAsOptionParameters` to disallow option parameter values resembling option names. Thanks to [Peter Murray-Rust ](https://github.com/petermr) for raising this.\n* [#1074][#1075] API: Added method `ParseResult::expandedArgs` to return the list of arguments after `@-file` expansion. Thanks to [Kevin Bedi](https://github.com/mashlol) for the pull request.\n* [#1052] API: Show/Hide commands in usage help on specific conditions. Thanks to [Philippe Charles](https://github.com/charphi) for raising this.\n* [#1088] API: Add method `Help::allSubcommands` to return all subcommands, including hidden ones. Clarify the semantics of `Help::subcommands`.\n* [#1090] API: Add methods `Help::optionListExcludingGroups` to return a String with the rendered section of the usage help containing only the specified options, including hidden ones.\n* [#1092] API: Add method `Help::parameterList(List<PositionalParamSpec>)` to return a String with the rendered section of the usage help containing only the specified positional parameters, including hidden ones.\n* [#1093] API: Add method `Help::commandList(Map<String, Help>)` to return a String with the rendered section of the usage help containing only the specified subcommands, including hidden ones.\n* [#1091] API: Add method `Help::optionListGroupSections` to return a String with the rendered section of the usage help containing only the option groups.\n* [#1089] API: Add method `Help::createDefaultOptionSort` to create a `Comparator` that follows the command and options' configuration.\n* [#1084][#1094] API: Add method `Help::createDefaultLayout(List<OptionSpec>, List<PositionalParamSpec>, ColorScheme)` to create a layout for the specified options and positionals.\n* [#1087] API: Add methods `ArgumentGroupSpec::allOptionsNested` and `ArgumentGroupSpec::allPositionalParametersNested`.\n* [#1086] API: add methods `Help.Layout::addAllOptions` and `Help.Layout::addAllPositionals`, to show all specified options, including hidden ones.\n* [#1085] API: Add method `Help::optionSectionGroups` to get argument groups with a header.\n* [#1101] API: Add method `Help::createDetailedSynopsisOptionsText` to specify which options to show in the synopsis.\n* [#1061] API: Add method `Help::makeSynopsisFromParts` for building complex synopsis strings; synopsis now shows non-group options before argument groups, for a more natural synopsis when groups contain only positional parameters.\n* [#983] Allow making inherited options hidden on subcommands. This can now be accomplished with the new `Help` methods by providing a custom option list and customizing the synopsis.\n* [#1051][#1056] Enhancement: `GenerateCompletion` command no longer needs to be a direct subcommand of the root command. Thanks to [Philippe Charles](https://github.com/charphi) for the pull request.\n* [#1083] Enhancement: `@Command`-annotated methods no longer need the enclosing class to have a `@Command` annotation.\n* [#1068] Enhancement: Make `ParserSpec::toString` output settings in alphabetic order.\n* [#1069] Enhancement: Debug output should show `optionsCaseInsensitive` and `subcommandsCaseInsensitive` settings.\n* [#1070] Enhancement: Code cleanup: removed redundant modifiers and initializations, unused variables, incorrect javadoc references, and more. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1096] Enhancement: Override `Help.Column` `equals`, `hashCode` and `toString` methods to facilitate testing.\n* [#1106] Enhancement: First check if JANSI is explicitly disabled _without loading any JANSI classes_, to avoid JANSI extracting a DLL to the temporary folder when one of its classes is loaded. This avoids problems where AppLocker can forbid loading of non-signed libraries from the Windows temporary folder. Thanks to [Philippe Charles](https://github.com/charphi) for raising this.\n* [#1110] Enhancement: Fix broken javadoc links, fix Kotlin compiler warnings, bump to latest Kotlin and Scala versions. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1109][#1112] Enhancement: Fix `ManPageGenerator` to ensure generated AsciiDoc man pages use UTF-8 encoding. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1063][#1064] `ManPageGenerator` now correctly excludes hidden options, parameters, and subcommands from man page generation. Thanks to [Brian Demers](https://github.com/bdemers) for the pull request.\n* [#1103] Enhancement: Tests no longer fail under Cygwin/ConEmu due to ANSI in output. Thanks to [David Walluck](https://github.com/dwalluck) for raising this.\n* [#1055] Bugfix: The parser will no longer assign values that match an option name to options that take a parameter, unless the value is in quotes. Thanks to [waacc-gh](https://github.com/waacc-gh) for raising this.\n* [#1015] Bugfix: Parser improvement: varargs positional arguments no longer consume unmatched options unless `unmatchedOptionsArePositionalParams` is configured. Thanks to [Chris Smowton](https://github.com/smowton) for raising this.\n* [#1071] Bugfix: Usage help no longer renders options header when it is specified via `optionListHeading` when all options are hidden.\n* [#1076] Bugfix: Don't generate Autocomplete for hidden commands. Thanks to [power721](https://github.com/power721) for raising this.\n* [#1081] Bugfix: `CommandLine.Help` constructor no longer calls overridable methods `addAllSubcommands` and `createDefaultParamLabelRenderer`.\n* [#1065] Bugfix: With a `List<>` option in `@ArgGroup`, group incorrectly appears twice in the synopsis. Thanks to [kap4lin](https://github.com/kap4lin) for raising this.\n* [#1067] Bugfix: `ParserSpec::initFrom` was not copying `useSimplifiedAtFiles`.\n* [#1054] Bugfix: Fixed issue in argument group parsing where incorrect input with missing mandatory elements was accepted when an option was specified multiple times. Thanks to [waacc-gh](https://github.com/waacc-gh) for raising this.\n* [#1072] Bugfix: Mixin `UsageMessageSpec::width` and `UsageMessageSpec::longOptionsMaxWidth` is no longer ignored.\n* [#1100] Bugfix: The factory of the original `CommandSpec` is now correctly used in the `CommandSpec` copy for repeatable subcommands. Thanks to [Michael Kunz](https://github.com/protogenes) for the pull request.\n* [#1058][#1059] DOC: Man page generator: fix incorrect asciidoctor call in synopsis.  Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1058][#1060] DOC: Man page generator: add documentation about creating language variants.  Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1120] Clean up compiler warnings.\n* [#1073] DOC: Improve user manual: fix typos, update content. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1102] DOC: Show `descriptionKeys` for `@file` and EndOfOptions (--) delimiter in resource bundles.\n* [#1116] DOC: Improved Guice example in user manual. Thanks to [H.Sakata](https://github.com/sakata1222) for the pull request.\n* [#1098][#1117] DOC: Simplify JLine 3 documentation by moving examples for older JLine 3 and picocli to the [picocli wiki](https://github.com/remkop/picocli/wiki/JLine-3-Examples). Thanks to [Kevin Arthur](https://github.com/thetoothpick) for the pull request.\n* [#1121] DOC: Link to alternative in `@deprecated` Javadoc tag for `Help::addSubcommand`.\n* [#1099] Dependency Upgrade: Bump JLine to 3.15.0. Thanks to [mattirn](https://github.com/mattirn) for the pull request.\n\n\n## <a name=\"4.4.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.4.0-breaking-changes\"></a> Potential breaking changes\n\n### Parser Changes\nThe parser behaviour has changed: picocli will no longer assign values that match an option name to options that take a parameter, unless the value is in quotes.\nApplications that rely on this behaviour need to use quoted values.\n\n### Error Message for Unknown Options\nUnmatched arguments that look like options now result in an error message `Unknown option: '-unknown'`.\n\nPreviously, the error message was: `Unmatched argument: '-unknown'`.\n\n\n### Usage Help: Synopsis for Arg Groups\nThis release changes the synopsis for commands with argument groups:\nthe synopsis now shows the non-group options before argument groups, where previously argument groups were shown first.\n\nThis gives a more natural synopsis when groups contain only positional parameters.\n\n\n# <a name=\"4.3.2\"></a> Picocli 4.3.2\nThe picocli community is pleased to announce picocli 4.3.2.\n\nThis release fixes a bug where the stack trace of an exception in the business logic would omit nested cause exceptions.\n\nThis is the seventieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.3.2-toc\"></a> Table of Contents\n* [New and noteworthy](#4.3.2-new)\n* [Fixed issues](#4.3.2-fixes)\n* [Deprecations](#4.3.2-deprecated)\n* [Potential breaking changes](#4.3.2-breaking-changes)\n\n## <a name=\"4.3.2-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.3.2-fixes\"></a> Fixed issues\n* [#1048][#1049] Bugfix: Cause exception not printed by default execution exception handler. Thanks to [Neko Null](https://github.com/jerrylususu) for the pull request.\n\n\n## <a name=\"4.3.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.3.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.3.1\"></a> Picocli 4.3.1\nThe picocli community is slightly embarrassed to announce picocli 4.3.1. :-)\n\nThis release fixes some critical bugs:\n\n* an `IllegalArgumentException: wrong number of arguments` was thrown when the `@Option(scope = INHERIT)` feature is used in a command that has subcommands defined in `@Command`-annotated methods\n* a `NullPointerException` was thrown in `DefaultParamLabelRenderer.renderParameterLabel` for programmatically built models that have a non-`null` `split` regex and do not have a `splitSynopsisLabel`\n* removed call to a `String` method introduced in Java 6, which prevented picocli from running on Java 5\n\nSee [Fixed issues](#4.3.1-fixes) for the full list of changes.\n\nThis is the sixty-ninth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.3.1-toc\"></a> Table of Contents\n* [New and noteworthy](#4.3.1-new)\n* [Fixed issues](#4.3.1-fixes)\n* [Deprecations](#4.3.1-deprecated)\n* [Potential breaking changes](#4.3.1-breaking-changes)\n\n## <a name=\"4.3.1-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.3.1-fixes\"></a> Fixed issues\n* [#1042] Bugfix: \"wrong number of arguments\" exception when using inherited options with `@Command`-annotated methods. Thanks to [Garret Wilson](https://github.com/garretwilson) for raising this.\n* [#1043] Bugfix: NullPointerException thrown in `DefaultParamLabelRenderer.renderParameterLabel` for programmatically built models that have a non-`null` `split` regex and do not have a `splitSynopsisLabel`.\n* [#1044] Bugfix: only display `splitSynopsisLabel` in usage help message if the option has a `split` regex. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#1045] Bugfix: replace use of Java 6 API `String.isEmpty` with picocli-internal Java 5 equivalent.\n* [#1046] DOC: mention picocli's programmatic API and link to the programmatic API documentation from the user manual.\n\n## <a name=\"4.3.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.3.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.3.0\"></a> Picocli 4.3.0\nThe picocli community is pleased to announce picocli 4.3.0.\n\nThis is a fairly big release with 70 [tickets closed](https://github.com/remkop/picocli/milestone/65?closed=1), and over 50 [bugfixes and enhancements](#4.3.0-fixes). Many thanks to the picocli community who contributed 21 pull requests!\n\nA major theme of this release is sharing options between commands:\n* New feature: \"inherited\" options. Options defined with `scope = ScopeType.INHERIT` are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands.\n* More powerful mixins. Mixin classes can declare a `@Spec(MIXEE)`-annotated field, and picocli will inject the `CommandSpec` of the command _receiving_ this mixin (the \"mixee\") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.\n\nAnother major theme is improved support for positional parameters:\n* Automatic indexes for positional parameters. Single-value positional parameters without an explicit `index = \"...\"` attribute are now automatically assigned an index based on the other positional parameters in the command. One use case is mixins with positional parameters.\n* Repeatable ArgGroups can now define positional parameters.\n\nOther improvements:\n* The parser now supports case-insensitive mode for options and subcommands.\n* Error handlers now use ANSI colors and styles. The default styles are bold red for the error message, and italic for stack traces. Applications can customize with the new `Help.ColorScheme` methods `errors` and `stackTraces`.\n* The usage help message can now show an entry for `--` in the options list with the `@Command(showEndOfOptionsDelimiterInUsageHelp = true)` annotation.\n* Easily make subcommands mandatory by making the top-level command a class that does not implement `Runnable` or `Callable`.\n\n\nThis is the sixty-eighth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.3.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.3.0-new)\n  * [Inherited Options](#4.3.0-inherited-options)\n  * [Case-insensitive mode](#4.3.0-case-insensitive)\n  * [Automatic Indexes for Positional Parameters](#4.3.0-auto-index)\n  * [Repeatable ArgGroups with Positional Parameters](#4.3.0-positionals-in-groups)\n  * [`@Spec(MIXEE)` Annotation](#4.3.0-mixee)\n  * [Showing `--` End of Options in usage help](#4.3.0-end-of-options)\n* [Fixed issues](#4.3.0-fixes)\n* [Deprecations](#4.3.0-deprecated)\n* [Potential breaking changes](#4.3.0-breaking-changes)\n\n## <a name=\"4.3.0-new\"></a> New and Noteworthy\n### <a name=\"4.3.0-inherited-options\"></a> Inherited Options\n\nThis release adds support for \"inherited\" options. Options defined with `scope = ScopeType.INHERIT` are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands.\n\nBelow is an example where an inherited option is used to configure logging.\n\n```java\n@Command(name = \"app\", subcommands = Sub.class)\nclass App implements Runnable {\n    private static Logger logger = LogManager.getLogger(App.class);\n\n    @Option(names = \"-x\", scope = ScopeType.LOCAL) // option is not shared: this is the default\n    int x;\n\n    @Option(names = \"-v\", scope = ScopeType.INHERIT) // option is shared with subcommands, sub-subcommands, etc\n    public void setVerbose(boolean verbose) {\n        // Configure log4j.\n        // This is a simplistic example: you probably only want to modify the ConsoleAppender level.\n        Configurator.setRootLevel(verbose ? Level.DEBUG : Level.INFO);\n    }\n\n    public void run() {\n        logger.debug(\"-x={}\", x);\n    }\n}\n\n@Command(name = \"sub\")\nclass Sub implements Runnable {\n    private static Logger logger = LogManager.getLogger(Sub.class);\n\n    @Option(names = \"-y\")\n    int y;\n\n    public void run() {\n        logger.debug(\"-y={}\", y);\n    }\n}\n```\n\nUsers can specify the `-v` option on either the top-level command or on the subcommand, and it will have the same effect.\n\n```\n# the -v option can be specified on the top-level command\njava App -x=3 -v sub -y=4\n```\n\nSpecifying the `-v` option on the subcommand will have the same effect. For example:\n```\n# specifying the -v option on the subcommand also changes the log level\njava App -x=3 sub -y=4 -v\n```\n\nNOTE: Subcommands don't need to do anything to receive inherited options, but a potential drawback is that subcommands do not get a reference to inherited options.\n\nSubcommands that need to inspect the value of an inherited option can use the `@ParentCommand` annotation to get a reference to their parent command, and access the inherited option via the parent reference.\nAlternatively, for such subcommands, sharing options via mixins may be a more suitable mechanism.\n\n### <a name=\"4.3.0-case-insensitive\"></a> Case-insensitive mode\nBy default, all options and subcommands are case sensitive. Case sensitivity can be switched off globally, as well as on a per-command basis.\n\nTo toggle case sensitivity for all commands, use the `CommandLine::setSubcommandsCaseInsensitive` and `CommandLine::setOptionsCaseInsensitive` methods. Use the `CommandSpec::subcommandsCaseInsensitive` and `CommandSpec::optionsCaseInsensitive` methods to give some commands a different case sensitivity than others.\n\n\n### <a name=\"4.3.0-auto-index\"></a> Automatic Indexes for Positional Parameters\n\nFrom this release, when the `index = \"...\"` attribute is omitted, the default index is `index = \"0+\"`, which tells picocli to assign an index automatically, starting from zero, based on the other positional parameters defined in the same command.\n\nA simple example can look like this:\n\n```java\nclass AutomaticIndex {\n    @Parameters(hidden = true)  // \"hidden\": don't show this parameter in usage help message\n    List<String> allParameters; // no \"index\" attribute: captures _all_ arguments\n\n    @Parameters String group;    // assigned index = \"0\"\n    @Parameters String artifact; // assigned index = \"1\"\n    @Parameters String version;  // assigned index = \"2\"\n}\n```\n\nPicocli initializes fields with the values at the specified index in the arguments array.\n\n```java\nString[] args = { \"info.picocli\", \"picocli\", \"4.3.0\" };\nAutomaticIndex auto = CommandLine.populateCommand(new AutomaticIndex(), args);\n\nassert auto.group.equals(\"info.picocli\");\nassert auto.artifact.equals(\"picocli\");\nassert auto.version.equals(\"4.3.0\");\nassert auto.allParameters.equals(Arrays.asList(args));\n```\n\nThe default automatic index (`index = \"0+\"`) for single-value positional parameters is \"anchored at zero\": it starts at zero, and is increased with each additional positional parameter.\n\nSometimes you want to have indexes assigned automatically from a different starting point than zero. This can be useful when defining Mixins with positional parameters.\n\nTo accomplish this, specify an index with the anchor point and a `+` character to indicate that picocli should start to automatically assign indexes from that anchor point. For example:\n\n```java\nclass Anchored {\n    @Parameters(index = \"1+\") String p1; // assigned index = \"1\" or higher\n    @Parameters(index = \"1+\") String p2; // assigned index = \"2\" or higher\n}\n```\n\nFinally, sometimes you want to have indexes assigned automatically to come at the end. Again, this can be useful when defining Mixins with positional parameters.\n\nTo accomplish this, specify an index with a `+` character to indicate that picocli should automatically assign indexes that come at the end. For example:\n\n```java\nclass Unanchored {\n    @Parameters(index = \"+\") String penultimate; // assigned the penultimate index in the command\n    @Parameters(index = \"+\") String last;        // assigned the last index in the command\n}\n```\n\n### <a name=\"4.3.0-positionals-in-groups\"></a>  Repeatable ArgGroups with Positional Parameters\n\nFrom this release, positional parameters can be used in repeating [Argument Groups](https://picocli.info/#_argument_groups).\n\nWhen a `@Parameters` positional parameter is part of a group, its `index` is the index _within the group_, not within the command.\n\nBelow is an example of an application that uses a repeating group of positional parameters:\n\n```java\n@Command(name = \"grades\", mixinStandardHelpOptions = true, version = \"grades 1.0\")\npublic class Grades implements Runnable {\n\n    static class StudentGrade {\n        @Parameters(index = \"0\") String name;\n        @Parameters(index = \"1\") BigDecimal grade;\n    }\n\n    @ArgGroup(exclusive = false, multiplicity = \"1..*\")\n    List<StudentGrade> gradeList;\n\n    @Override\n    public void run() {\n        gradeList.forEach(e -> System.out.println(e.name + \": \" + e.grade));\n    }\n\n    public static void main(String[] args) {\n        System.exit(new CommandLine(new Grades()).execute(args));\n    }\n}\n```\n\nRunning the above program with this input:\n\n```\nAlice 3.1 Betty 4.0 \"X Æ A-12\" 3.5 Zaphod 3.4\n```\nProduces the following output:\n\n```\nAlice: 3.1\nBetty: 4.0\nX Æ A-12: 3.5\nZaphod: 3.4\n```\n\n### <a name=\"4.3.0-mixee\"></a>  `@Spec(MIXEE)` Annotation\nFrom this release, mixins are more powerful. Mixin classes can declare a `@Spec(MIXEE)`-annotated field, and picocli will inject the `CommandSpec` of the command _receiving_ this mixin (the \"mixee\") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.\n\nSince picocli 4.3, the `@Spec` annotation has a `value` element.\nThe value is `Spec.Target.SELF` by default, meaning that the `CommandSpec` of the enclosing class is injected into the `@Spec`-annotated field.\n\nFor classes that are used as a [mixins](https://picocli.info/#_mixins), there is another value that may be useful.\nWhen `@Spec(Spec.Target.MIXEE)` is specified in a mixin class, the `CommandSpec` of the command _receiving_ this mixin (the \"mixee\") is injected into the `@Spec`-annotated field.\nThis can be useful when a mixin contains logic that is common to many commands. For example:\n\n```java\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Spec;\n\nclass AdvancedMixin {\n    @Spec(Spec.Target.MIXEE) CommandSpec mixee;\n\n    /**\n     * When the -x option is specified on any subcommand,\n     * multiply its value with another integer supplied by this subcommand\n     * and set the result on the top-level command.\n     * @param x the value of the -x option\n     */\n    @Option(names = \"-x\")\n    void setValue(int x) {\n        // Get another value from the command we are mixed into.\n        // This mixin requires the command(s) it is mixed into to implement `IntSupplier`.\n        int y = ((java.util.function.IntSupplier) mixee.userObject()).getAsInt();\n\n        int product = x * y;\n\n        // Set the result on the top-level (root) command.\n        // This mixin requires the root command to implement `IntConsumer`.\n        ((java.util.function.IntConsumer) mixee.root().userObject()).accept(product);\n    }\n}\n```\n\n### <a name=\"4.3.0-end-of-options\"></a> Showing `--` End of Options in usage help\nFrom picocli 4.3, an entry for the `--` End of Options delimiter can be shown in the options list of the usage help message of a command with the `@Command(showEndOfOptionsDelimiterInUsageHelp = true)` annotation.\n\nExample command:\n\n```java\n@Command(name = \"myapp\", showEndOfOptionsDelimiterInUsageHelp = true,\n        mixinStandardHelpOptions = true, description = \"Example command.\")\nclass MyApp {\n    @Parameters(description = \"A file.\") File file;\n}\n```\n\nThe usage help message for this command looks like this:\n\n```\nUsage: myapp [-hV] [--] <file>\nExample command.\n      <file>      A file.\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\n  --              This option can be used to separate command-line options from\n                    the list of positional parameters.\n```\n\n\n## <a name=\"4.3.0-fixes\"></a> Fixed issues\n* [#649][#948] Provide convenience API for inherited/global options (was: Feature request: inheriting mixins in subcommands). Thanks to [Garret Wilson](https://github.com/garretwilson) for the request and subsequent discussion (and patience!).\n* [#1001] Support required inherited options.\n* [#996] Default values should not be applied to inherited options.\n* [#985] API: Show end-of-options `--` in usage help options list.\n* [#958] API: Add `@Spec(Spec.Target.MIXEE)` annotation element to allow mixins to get a reference to the command they are mixed into.\n* [#960] API: Add method `CommandSpec::root` to return the `CommandSpec` of the top-level command.\n* [#484][#845][#1008] API: Error handlers now use ANSI colors and styles. Added methods `errors` and `stackTraces` to `Help.ColorScheme`. Thanks to [Neko Null](https://github.com/jerrylususu) for the pull request.\n* [#765][#1017] API: Added `splitSynopsisLabel` attribute on `@Option` and `@Parameters` for controlling how `split` regular expressions are displayed in the synopsis. Thanks to [Murphy Han](https://github.com/Hannnnnn) for the pull request and thanks to [deining](https://github.com/deining) for raising this.\n* [#9][#1021][#1020][#1023][#154] API: Added support for case-insensitive subcommands and options. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request, thanks to [ifsheldon](https://github.com/ifsheldon) for exploring alternative solutions and helping clarify the requirements, and thanks to [Neko Null](https://github.com/jerrylususu) for the pull request with documentation and executable examples.\n* [#564] Add support for relative indices for positional parameters. Useful in mixins and inherited positional parameters. Thanks to [krisleonard-mcafee](https://github.com/krisleonard-mcafee) for raising this topic.\n* [#956] Enhancement: Default ParameterExceptionHandler should show stack trace when tracing is set to DEBUG level.\n* [#952] Enhancement: Make annotation processor quiet by default; add `-Averbose` annotation processor option to enable printing NOTE-level diagnostic messages to the console.\n* [#959] Enhancement: Print \"Missing required subcommand\" instead of throwing exception if command with subcommands does not implement `Runnable` or `Callable`. Thanks to [Max Rydahl Andersen](https://github.com/maxandersen) for the suggestion.\n* [#693][#1009][#1011] Enhancement: Add autocompletion for the built-in `HelpCommand`. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1022][#1029] Enhancement/Bugfix: Duplicate negated options were incorrectly accepted. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1030][#1029] Enhancement/Bugfix: `setOptionsCaseInsensitive` should make negatable options case insensitive. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#1027][#1036] Enhancement: Support repeatable ArgGroups with positional parameters. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#974] Enhancement/Bugfix: Add support for `@ArgGroup` argument groups in `@Command`-annotated methods. Thanks to [Usman Saleem](https://github.com/usmansaleem) for raising this.\n* [#962][#961] Enhancement/Bugfix: Default value should only be applied if value is missing. Thanks to [粟嘉逸](https://github.com/sjyMystery) and [chirlo](https://github.com/chirlo) for raising this.\n* [#995][#1024][#1035] Enhancement/Bugfix: Reset multi-value options/positional params to initial value when reusing `CommandLine` instances. Thanks to [Linyer-qwq](https://github.com/Linyer-qwq), [WU Jiangning](https://github.com/licia-tia), and [Wycers](https://github.com/Wycers) for the pull request.\n* [#991][#993] Enhancement/Bugfix: Detecting terminal width fails on non-English Windows versions. Thanks to [Stefan Gärtner](https://github.com/S-Gaertner) for the pull request.\n* [#1040] Enhancement: internal code cleanup and minor fixes. Thanks to [NewbieOrange](https://github.com/NewbieOrange) for the pull request.\n* [#987] Bugfix: Bump JLine to 3.14.1 and fix [#969] autocompletion in Picocli Shell JLine3. Thanks to [mattirn](https://github.com/mattirn) for the pull request.\n* [#969] Bugfix: Fixed broken autocompletion for nested subcommands in Picocli Shell JLine3. Thanks to [niklas97](https://github.com/niklas97) for raising this.\n* [#968] Bugfix: Avoid creating user object in Help constructor. Thanks to [Immueggpain](https://github.com/Immueggpain) for raising this.\n* [#990] Bugfix: Options in subcommands were not reset to their initial value between invocations when the `CommandLine` object is reused. Thanks to [marinier](https://github.com/marinier) for [pointing this out](https://stackoverflow.com/questions/61191211).\n* [#984][#997] Bugfix: Parameters heading is now shown in the usage help message when `@filename` is the only parameter. Thanks to [Wycer](https://github.com/Wycers) for the pull request.\n* [#1004] Bugfix: Prevent `NullPointerException` in `IParameterConsumer` with `@Option` in `@ArgGroup`. Thanks to [masupilami](https://github.com/masupilami) for raising this.\n* [#988][#1002] Bugfix: Option group sections in the usage help message now include subgroup options. Thanks to [Wycer](https://github.com/Wycers) for the pull request.\n* [#957] Bugfix: Debug tracing now shows variable value instead of variable name.\n* [#955] Bugfix: TargetInvocationMessage handling in `MethodBinding.set` methods should use `getTargetException` not `getCause`; better error reporting.\n* [#1007] Bugfix: Custom Type Converters are missing for repeated subcommands. Thanks to [Bastian Diehl](https://github.com/diba1013) for raising this.\n* [#1026] Bugfix: Hidden options should not impact usage help.\n* [#1034] Bugfix: Writer should `flush()` in `UnmatchedArgumentException.printSuggestions`. Thanks to [darkmoonka](https://github.com/darkmoonka) for raising this.\n* [#963] DOC: Fixed broken link in README. Thanks to [vladimirf7](https://github.com/vladimirf7) for the pull request.\n* [#895] DOC: Added [Initialization Before Execution](https://picocli.info/#_initialization_before_execution) section on initialization with subcommands to the user manual. Thanks to [Walter Scott Johnson](https://github.com/li-wjohnson) for raising this.\n* [#951] DOC: Fixed typo in `picocli-codegen` annotation processor documentation: `disable.resource.config` is correct (the option name was incorrectly spelled as `disable.resources.config`). Thanks to [Max Rydahl Andersen](https://github.com/maxandersen) for raising this.\n* [#966] DOC: Add section about Testing to the user manual.\n* [#973] DOC: Update documentation for using the `picocli-codegen` annotation processor during the build with Kotlin.\n* [#972] DOC: Add section \"Handling Invalid Input\" for custom type converters to user manual, demonstrating `TypeConversionException`. Add example `InetSocketAddressConverter` to `picocli-examples`. Thanks to [Simon](https://github.com/sbernard31) for raising this.\n* [#975] DOC: Update user manual [Annotation Processor](https://picocli.info/#_enabling_the_annotation_processor) section to use `${project.groupId}` instead of deprecated `${groupId}`. Thanks to [Dmitry Timofeev](https://github.com/dmitry-timofeev) for the pull request.\n* [#976] DOC: Update user manual Testing section; add subsection on [Testing Environment Variables](file:///C:/Users/remko/IdeaProjects/picocli3/build/docs/html5/index.html#_testing_environment_variables). Thanks to [David M. Carr](https://github.com/davidmc24) for raising this and providing a [sample project](https://github.com/remkop/picocli/files/4359943/bulk-scripts-public.zip).\n* [#979][#981] DOC: Update user manual: add section [Options with an Optional Parameter](https://picocli.info/#_options_with_an_optional_parameter). Thanks to [razvanh](https://github.com/razvanh), [Jake](https://github.com/kyeo138) and [mohdpasha](https://github.com/mohdpasha) for raising this.\n* [#989] DOC: Update examples for `picocli-shell-jline3` prior to and after the [#987][#969] bugfix. Thanks to [Ralf D. Müller](https://github.com/rdmueller) for raising this.\n* [#998] DOC: Update manual: quote option parameter containing pipe characters in `split` regex for FIX message example. Thanks to [Galder Zamarreño](https://github.com/galderz) and [Max Rydahl Andersen](https://github.com/maxandersen) for raising this and subsequent discussion.\n* [#1012] DOC: Update user manual: add to ArgGroup limitations. Thanks to [masupilami](https://github.com/masupilami) and [patric-r](https://github.com/patric-r) for raising this and subsequent discussion.\n* [#1015] DOC: Update user manual: added section Variable Arity Options and Unknown Options. Thanks to [Chris Smowton](https://github.com/smowton) for raising this.\n* [#1019] DOC: Fix PrintExceptionMessageHandler example. Thanks to [Adam Hosman](https://github.com/hosmanadam) for the pull request.\n* [#1006] DOC: Add Mixin example: MyLogger to the user manual.\n* [#1028][#1031] DOC: Update user manual: added Java 15 text blocks example. Thanks to [Enderaoe](https://github.com/Lyther) for the pull request.\n* [#1037] DOC: Update user manual for programmatic API: fix typo. Thanks to [Yoshida](https://github.com/grimrose) for the pull request.\n* [#1041] DOC: Fix broken links in javaDoc. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#1033] TEST: Added tests for [#984][#997]. Thanks to [WU Jiangning](https://github.com/licia-tia) for the pull request.\n* [#965] Dependency Upgrade: in `picocli-examples`, bump `hibernate-validator` from 6.0.2 to 6.1.2 to deal with [CVE-2019-10219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10219). Thanks to [https://github.com/Security3rd](Security3rd) for raising this.\n\n## <a name=\"4.3.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.3.0-breaking-changes\"></a> Potential breaking changes\n\nBehaviour has changed for some cases involving positional parameters.\nOne example is applications that define multiple positional parameters without an explicit `index` (see next section).\nI hope these are edge cases.\nOther than that, some error messages and details of the usage help message have changed.\nSee details below.\n\n### Default index for single-value positional parameters\n\nPrior to picocli 4.3.0, if your application defines any single-value positional parameters without explicit `index`, these parameters would all point to index zero.\nFrom picocli 4.3.0, picocli automatically assigns an index, so the first such parameter gets index `0` (zero), the next parameter gets index `1` (one), the next parameter gets index `2` (two), etc.\n\nThis may break applications that have multiple single-value positional parameters without explicit `index`, that expect to capture the first argument in all of these parameters.\n\n### Different error when user specifies too many parameters\n\nThe error message has changed when a user specifies more positional parameters than the program can accept. For example:\n\n```java\nclass SingleValue {\n    @Parameters String str;\n}\n```\n\nThis program only accepts one parameter. What happens when this program is invoked incorrectly with two parameters, like this:\n\n```java\njava SingleValue val1 val2\n```\n\nBefore this release, picocli would throw an `OverwrittenOptionException` with message `\"positional parameter at index 0..* (<str>) should be specified only once\"`.\n\nFrom picocli 4.3, picocli throws an `UnmatchedArgumentException` with message `\"Unmatched argument at index 1: 'val2'\"`.\n\nThis may break applications that have error handling that depends on an `OverwrittenOptionException` being thrown.\n\n### Different mechanism for dealing with too many parameters\n\nContinuing with the previous example, before this release, applications could deal with this by allowing single-value options to be overwritten:\n\n```java\n// before\nCommandLine cmd = new CommandLine(new SingleValue());\ncmd.setOverwrittenOptionsAllowed(true);\n// ...\n```\n\nFrom picocli 4.3, applications need to allow unmatched arguments instead:\n\n```java\n// after\nCommandLine cmd = new CommandLine(new SingleValue());\ncmd.setUnmatchedArgumentsAllowed(true);\n// ...\n// get the invalid values\ncmd.getUnmatchedArguments();\n```\n\n### Usage help message for single-value positional parameters\nBefore picocli 4.3.0, single-value positional parameters would incorrectly show an ellipsis (`...`) after their parameter label. This ellipsis is incorrect because it indicates that multiple values can be specified. The ellipsis is no longer shown for single-value positional parameters from picocli 4.3.0.\n\nBefore:\n\n```\nUsage: <main class> PARAM...\n      PARAM...   Param description.\n```\n\nAfter:\n\n```\nUsage: <main class> PARAM\n      PARAM   Param description.\n```\n\nThis may break application tests that expect a specific usage help message format.\n\n### Different error for missing required options or parameters\n\n#### Missing options list now starts with colon, no more square brackets\nBefore:\n\n```\nMissing required option '--required=<required>'\nMissing required options [-a=<first>, -b=<second>, -c=<third>]\n```\n\nAfter:\n\n```\nMissing required option: '--required=<required>'\nMissing required options: '-a=<first>', '-b=<second>', '-c=<third>'\n```\n\n#### Better message when both options and positional parameters are missing\nBefore:\n\n```\nMissing required options [-x=<x>, params[0]=<p0>, params[1]=<p1>]\n```\n\nAfter:\n\n```\nMissing required options and parameters: '-x=<x>', '<p0>', '<p1>'\n```\n\n#### Missing positional parameters are now quoted\nBefore:\n\n```\nMissing required parameter: <mandatory>\nMissing required parameters: <mandatory>, <anotherMandatory>\n```\n\nAfter:\n\n```\nMissing required parameter: '<mandatory>'\nMissing required parameters: '<mandatory>', '<anotherMandatory>'\n```\n\n\n# <a name=\"4.2.0\"></a> Picocli 4.2.0\nThe picocli community is pleased to announce picocli 4.2.0.\n\nThis release adds support for Repeatable Subcommands: when a command is marked as `@Command(subcommandsRepeatable = true)` it becomes possible to specify that command's subcommands multiple times on the command line.\n\nThe `picocli-codegen` module can now generate AsciiDoc documentation for picocli-based applications. AsciiDoc is a lightweight markup language that can easily can be converted to unix man pages, HTML and PDF with the wonderful [asciidoctor](https://asciidoctor.org/docs/user-manual/#man-pages) tool.\n\nFrom this release, subcommands are not instantiated until they are matched on the command line. This should improve the startup time for applications with subcommands that do a lot of initialization when they are instantiated.\n\nAutocompletion improvements: from this release the generated bash completions scripts support completing positional parameters, and are implemented without the use of associative arrays (so they should work on MacOS or other systems that use older versions of bash).\nAdditionally there are now automated tests using Expect to verify that the generated completion scripts work as expected.\n\nGraalVM configuration generation improvement: added `--factory` option to `ReflectionConfigGenerator`, `ResourceConfigGenerator` and `DynamicProxyConfigGenerator`.\nThis makes it possible to generate configurations for command classes without a default no-arg constructor.\n\nFrom this release it is possible to inject the `CommandSpec` into a `IVersionProvider`, making it easier to write version provider implementations that are reusable across multiple commands or even applications.\n\nSimilarly, from this release it is possible to inject the parent command object into mixins via a `@ParentCommand`-annotated field.\n\nThis release adds programmatic API to allow the long options column to grow larger than 20 characters in the usage help message via the `CommandLine::setLongOptionsMaxWidth` and `UsageMessageSpec::longOptionsMaxWidth` methods.\n\n\nFinally, it is now possible let the usage help show that [@-files](https://picocli.info/#AtFiles) are supported by listing a `@<filename>` entry above the list of positional parameters in the usage help.\n\nThis is the sixty-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.2.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.2.0-new)\n  * [Generate AsciiDoc Documentation for Your Application](#4.2.0-generate-docs)\n  * [Repeatable Subcommands](#4.2.0-repeatable-subcommands)\n  * [Inject `CommandSpec` into a `IVersionProvider`](#4.2.0-versionprovider-with-spec)\n  * [Subcommands are now lazily instantiated](#4.2.0-lazy-instantiation)\n  * [Mixins with `@ParentCommand`-annotated fields](#4.2.0-mixins)\n  * [Showing `@filename` in usage help](#4.2.0-atfiles-usage)\n  * [Configurable long options column width](#4.2.0-long-options-width)\n* [Fixed issues](#4.2.0-fixes)\n* [Deprecations](#4.2.0-deprecated)\n* [Potential breaking changes](#4.2.0-breaking-changes)\n\n## <a name=\"4.2.0-new\"></a> New and Noteworthy\n\n### <a name=\"4.2.0-generate-docs\"></a> Generate AsciiDoc Documentation for Your Application (convertable to unix man pages, HTML and PDF)\nThis release adds a new class `picocli.codegen.docgen.manpage.ManPageGenerator` to the `picocli-codegen` module that generates AsciiDoc documentation for picocli-based applications using the `manpage` doctype and manpage document structure.\nThe generated AsciiDoc files can be converted to HTML, PDF and unix man pages with the [asciidoctor](https://asciidoctor.org/docs/user-manual/#man-pages) tool.\n\nThe [`picocli-codegen` README](https://github.com/remkop/picocli/blob/main/picocli-codegen/README.adoc) has more details.\n\n### <a name=\"4.2.0-repeatable-subcommands\"></a> Repeatable Subcommands\nFrom picocli 4.2, it is possible to specify that a command's subcommands can be specified multiple times by marking it with `@Command(subcommandsRepeatable = true)`.\n\n#### Example\nBelow is an example where the top-level command `myapp` is marked as `subcommandsRepeatable = true`.\nThis command has three subcommands, `add`, `list` and `send-report`:\n\n```java\n@Command(name = \"myapp\", subcommandsRepeatable = true)\nclass MyApp implements Runnable {\n\n    @Command\n    void add(@Option(names = \"-x\") String x, @Option(names = \"-w\") double w) { ... }\n\n    @Command\n    void list(@Option(names = \"--where\") String where) { ... }\n\n    @Command(name = \"send-report\")\n    void sendReport(@Option(names = \"--to\", split = \",\") String[] recipients) { ... }\n\n    // ...\n}\n```\n\nThe above example command allows users to specify one or more of its subcommands multiple time. For example, this would be a valid invocation:\n\n```bash\nmyapp add -x=item1 -w=0.2 \\\n      add -x=item2 -w=0.5 \\\n      add -x=item3 -w=0.7 \\\n      list --where \"w>0.2\" \\\n      send-report --to=recipient@myorg.com\n```\n\nIn the above command line invocation, the `myapp` top-level command is followed by its subcommand `add`.\nNext, this is followed by another two occurrences of `add`, followed by `list` and `send-report`.\nThese are all \"sibling\" commands, that share the same parent command `myapp`.\nThis invocation is valid because `myapp` is marked with `subcommandsRepeatable = true`.\n\n#### Repeatable Subcommands Specification\n\nNormally, `subcommandsRepeatable` is `false`, so for each command, only one of its subcommands can be specified, potentially followed by only one sub-subcommand of that subcommand, etc.\nIn mathematical terms, a valid sequence of commands and subcommands can be represented by a _directed rooted tree_ that starts at the top-level command. This is illustrated by the diagram below.\n\n![subcommands not repeatable](https://picocli.info/images/subcommands-non-repeatable.png)\n\nWhen `subcommandsRepeatable` is set to `true` on a command, the subcommands of this command may appear multiple times.\nAlso, a subcommand can be followed by a \"sibling\" command (another command with the same parent command).\n\nIn mathematical terms, when a parent command has this property, the additional valid sequences of its subcommands form a fully connected subgraph (_a complete digraph_).\n\nThe blue and green dotted arrows in the diagram below illustrate the additional sequences that are allowed when a command has repeatable subcommands.\n\n![subcommands-repeatable](https://picocli.info/images/subcommands-repeatable2.png)\n\n\nNote that it is not valid to specify a subcommand followed by its parent command:\n\n```bash\n# invalid: cannot move _up_ the hierarchy\nmyapp add -x=item1 -w=0.2 myapp\n```\n\n### <a name=\"4.2.0-lazy-instantiation\"></a> Subcommands are now lazily instantiated\n\nFrom this release,  subcommands are not instantiated until they are matched on the command line,\nunless the user object has a `@Spec` or `@ParentObject`-annotated field; these are instantiated during initialization.\n\n\n### <a name=\"4.2.0-versionprovider-with-spec\"></a> Injecting `CommandSpec` Into a `IVersionProvider`\n\nFrom this release, `IVersionProvider` implementations can have `@Spec`-annotated fields. If such a field\nexists, picocli will inject the `CommandSpec` of the command that uses this version provider.\nThis gives the version provider access to the full command hierarchy,\nand may make it easier to implement version providers that can be reused among multiple commands.\n\nFor example:\n\n```java\nclass MyVersionProvider implements IVersionProvider {\n    @Spec CommandSpec spec;\n\n    public String[] getVersion() {\n        return new String[] { \"Version info for \" + spec.qualifiedName() };\n    }\n}\n```\n\n### <a name=\"4.2.0-atfiles-usage\"></a> Showing `@filename` in usage help\n\nFrom picocli 4.2, an entry for `@<filename>` can be shown in the options and parameters list of the usage help message of a command with the `@Command(showAtFileInUsageHelp = true)` annotation.\n\nExample:\n\n```java\n@Command(name = \"myapp\", showAtFileInUsageHelp = true,\n        mixinStandardHelpOptions = true, description = \"Example command.\")\nclass MyApp {\n    @Parameters(description = \"A file.\") File file;\n}\n```\n\nThe usage help message for this command looks like this:\n\n```\nUsage: myapp [-hV] [@<filename>...] <file>\nExample command.\n      [@<filename>...]   One or more argument files containing options.\n      <file>             A file.\n  -h, --help             Show this help message and exit.\n  -V, --version          Print version information and exit.\n```\n\nBy default, the `@<filename>` entry is shown before the positional parameters in the synopsis as well as in the parameters list.\nThis can be changed with the Help API for [reordering sections](https://picocli.info/#_reordering_sections).\n\nBoth the label and the description of the `@<filename>` entry have been defined with [custom variables](https://picocli.info/#_custom_variables), to allow applications to change the text. The variables are:\n\n* `picocli.atfile.label`\n* `picocli.atfile.description`\n\nBy setting the above variables in either system properties, environment variables or the [resource bundle](https://picocli.info/#_internationalization) for a command, the text can be customized.\n\nSee the [user manual](https://picocli.info/#_show_at_files) for examples.\n\n### <a name=\"4.2.0-mixins\"></a> Mixins with `@ParentCommand`-annotated fields\n\nA common use case is sharing options between different levels of the command hierarchy, so that \"global\" options from the top-level command are also available on subcommands.\n\nSince picocli 4.2, [`@ParentCommand`-annotated](https://picocli.info/#_parentcommand_annotation) fields can be used in mixins, which makes this easier. See the [Use Case: Sharing Options](https://picocli.info/#_use_case_sharing_options) section of the user manual for a full example.\n\nFor mixins that need to be reusable across more than two levels in the command hierarchy, injecting a [`@Spec`-annotated](https://picocli.info/#_spec_annotation) field gives the mixin access to the full command hierarchy.\n\n### <a name=\"4.2.0-long-options-width\"></a> Configurable long options column width\n\nThe default layout shows short options and long options in separate columns, followed by the description column.\nThe width of the long options column shrinks automatically if all long options are very short,\nbut by default this column does not grow larger than 20 characters.\n\nIf the long option with its option parameter is longer than 20 characters\n(for example: `--output=<outputFolder>`), the long option overflows into the description column, and the option description is shown on the next line.\n\nThis (the default) looks like this:\n\n```\nUsage: myapp [-hV] [-o=<outputFolder>]\n  -h, --help      Show this help message and exit.\n  -o, --output=<outputFolder>\n                  Output location full path.\n  -V, --version   Print version information and exit.\n```\n\nFrom picocli 4.2, there is programmatic API to change this via the `CommandLine::setLongOptionsMaxWidth` and `UsageMessageSpec::longOptionsMaxWidth` methods.\n\nIn the above example, if we call `commandLine.setLongOptionsMaxWidth(23)` before printing the usage help, we get this result:\n\n```\nUsage: myapp [-hV] [-o=<outputFolder>]\n  -h, --help                    Show this help message and exit.\n  -o, --output=<outputFolder>   Output location full path.\n  -V, --version                 Print version information and exit.\n```\n\n## <a name=\"4.2.0-fixes\"></a> Fixed issues\n* [#454] API: Added support for repeatable subcommands. Thanks to [Idan Arye](https://github.com/idanarye), [Miroslav Kravec](https://github.com/kravemir), [Philipp Hanslovsky](https://github.com/hanslovsky) and [Jay](https://github.com/lakemove) for raising this and the subsequent discussion.\n* [#629] API: Support injecting `@Spec CommandSpec spec` into `IVersionProvider` implementations. Thanks to [Garret Wilson](https://github.com/garretwilson) for raising this.\n* [#795] API: Added `@Command(showAtFileInUsageHelp=true)` attribute to show `@filename` in usage help.\n* [#925] API: Support `@ParentCommand`-annotated fields in mixin classes.\n* [#936] API: Change visibility of `Help.subcommands()` method from protected to public.\n* [#459] API: Generate manpage documentation. Thanks to [Miroslav Kravec](https://github.com/kravemir) for raising this. The `picocli-codegen` module can now generate AsciiDoc documentation that uses the `manpage` doctype and adheres to the manpage document structure so it can be converted to unix man pages in troff format with the [asciidoctor](https://asciidoctor.org/docs/user-manual/#man-pages) tool.\n* [#299] API: Generate AsciiDoc documentation. Thanks to [Philippe Charles](https://github.com/charphi) for raising this.\n         Added a new class `picocli.codegen.docgen.manpage.ManPageGenerator` to the `picocli-codegen` module that generates AsciiDoc documentation using the `manpage` doctype and manpage document structure.\n         Custom markup like `@|bold mytext|@`, `@|italic mytext|@` etc., originally intended to be converted to ANSI escape codes, can from this release also be converted to custom markup like `<b>mytext</b>` and `<i>mytext</i>` in HTML, or `*mytext*` and `_mytext_` in lightweight markup languages like AsciiDoc.\n         Applications can control this by setting a `ColorScheme` with a custom markup map.\n         This ticket resulted in the following additional methods: `ColorScheme::text`, `ColorScheme::string`, `ColorScheme::customMarkupMap`, `ColorScheme::parse`, `ColorScheme::resetStyle`, `ColorScheme::apply`,  `ColorScheme.Builder::customMarkupMap` (getter and setter) and a new `picocli.CommandLine.Help.Ansi.Text(String, ColorScheme)` constructor.\n         The `picocli.CommandLine.Help.Ansi::apply` method is now deprecated in favor of `ColorScheme::apply`.\n* [#906] Auto-completion: Added automated tests for picocli-generated bash/zsh completion scripts.\n* [#468][#505][#852] Auto-completion: added support for positional parameter completion. Thanks to [Serhii Avsheniuk](https://github.com/avshenuk) for the pull request.\n* [#644][#671] Auto-completion: fix [shellcheck](https://github.com/koalaman/shellcheck) warnings in generated autocompletion scripts. Thanks to [Dylan Cali](https://github.com/calid) for raising this, and thanks to [AlcaYezz](https://github.com/AlcaYezz) for the pull request.\n* [#396] Auto-completion: completion scripts no longer use associative arrays, and should now work on OSX.\n* [#934] Enhancement: Make long options column width configurable. Thanks to [tomerz90](https://github.com/tomerz90) for raising this.\n* [#930] Enhancement: Add `--factory` option to `ReflectionConfigGenerator`, `ResourceConfigGenerator` and `DynamicProxyConfigGenerator`. Thanks to [Santiago Acosta](https://github.com/hanzo2001) for raising this.\n* [#690] Enhancement: Postpone instantiating subcommands until they are matched on the command line. Thanks to [Daniel Breitlauch](https://github.com/danielBreitlauch) for raising this.\n* [#942] Enhancement: Show at files in usage help for picocli built-in commands.\n* [#941] Enhancement: Allow default values for predefined variables.\n* [#926] Enhancement: Clarify debug trace output when adding aliases.\n* [#928] Enhancement: Improve debug tracing: show command user object identity hashcode and prefix \"Processing argument...\" with argument index.\n* [#920] Enhancement: Reduce `DEBUG` tracing noise if no resource bundle is set.\n* [#946] Enhancement: Add `--exit` option to picocli codegen utilities.\n* [#940] Bugfix: ArgGroups with a negatable option no longer cause a `NullPointerException` during initialization.\n* [#938] Bugfix: ArgGroups validation now correctly reports an error when a required option is missing, while an optional subgroup is present. Thanks to [Trent Mohay](https://github.com/rain-on) for raising this.\n* [#933] Bugfix: Incorrect error message when multiple exclusive groups are used. Thanks to [Mikaël Barbero](https://github.com/mbarbero) for raising this.\n* [#905] Bugfix: non-public `@Command`-annotated methods without arguments caused a `IllegalAccessException`. From this release such methods no longer need to be public. Thanks to [David Connelly](https://github.com/dconnelly) for raising this.\n* [#924] Bugfix: `CommandSpec.mixinAnnotatedElements` map should be initialized when discovering `@Mixin`-annotated fields and methods via reflection.\n* [#937] Bugfix: `Text.getStyledChars` no longer incorrectly inserts ANSI escape chars into the next line prefix when lines are broken.\n* [#945] Bugfix: `Text.substring` now leaves out `StyledSection` instances that do not apply.\n* [#944] DOC: Fix typo in picocli user manual - remove unnecessary semicolon. Thanks to [ztbx](https://github.com/ztbx) for raising this.\n* [#943] DOC: Create man pages for built-in picocli commands.\n* [#929] DOC: Add [jbang](https://github.com/maxandersen/jbang) under [packaging](https://picocli.info/#_packaging_your_application) in the user manual.\n* [#927] DOC: Show current picocli version in the Spring Boot section of the user manual. Thanks to [Christian Grobmeier](https://github.com/grobmeier) for the pull request.\n* [#919] DOC: Added example Gradle project with Kotlin and Graal Native Image. Thanks to [OndrejMalek](https://github.com/OndrejMalek) for the pull request.\n* [#918] DOC: Added more Scala examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#916] DOC: Added Scala examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#914] DOC: Added Java and Kotlin examples for using `ResourceBundle` to internationalize and localize your CLI app. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#915] DOC: Ensure Kotlin examples compile correctly. Thanks to [Andreas Deininger](https://github.com/deining) for the suggestion.\n* [#913] DOC: Added more Java and Kotlin examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#912] DOC: Fixed broken links in javadoc. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#911] DOC: Fixed syntax error in javadoc. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#909] DOC: User manual: minor fixes. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#908] DOC: Fix typo in user manual: Add missing closing curly bracket. Thanks to [Piotrek Żygieło](https://github.com/pzygielo) for the pull request.\n* [#907] DOC: Updated and added Kotlin examples. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#910] Dependency Upgrade: Bump Spring Boot dependency to 2.2.2 to allow it to work under Java 13. Thanks to [Stéphane Vanacker](https://github.com/svanacker) for raising this.\n\n## <a name=\"4.2.0-deprecated\"></a> Deprecations\n* The `picocli.CommandLine.Help.Ansi#apply` method has been deprecated in favor of the `picocli.CommandLine.Help.ColorScheme#apply` method.\n* The `picocli.CommandLine.Help.TextTable forDefaultColumns(Ansi, int, int)` method has been deprecated in favor of the new `TextTable.forDefaultColumns(ColorScheme, int, int)` method.\n* The `picocli.CommandLine.Help.TextTable forColumnWidths(Ansi, int...)` method has been deprecated in favor of the new `TextTable.forColumnWidths(ColorScheme, int...)` method.\n* The `picocli.CommandLine.Help.TextTable forColumns(Ansi, Column...)` method has been deprecated in favor of the new `TextTable.forColumns(ColorScheme, Column...)` method.\n* The `picocli.CommandLine.Help.TextTable constructor (Ansi, Column[])` has been deprecated in favor of the new `TextTable(ColorScheme, Column...)` constructor.\n\n\n## <a name=\"4.2.0-breaking-changes\"></a> Potential breaking changes\nAnnotated command objects are now not instantiated until the command is matched on the command line.\nPreviously all subcommands were instantiated when the top-level command's `CommandLine` was constructed.\n\n\n# <a name=\"4.1.4\"></a> Picocli 4.1.4\nThe picocli community is pleased to announce picocli 4.1.4.\n\nThis release contains a bugfix for GraalVM users, and minor documentation enhancements.\n\nThis release fixes a bug in the `picocli-codegen` annotation processor that generates an incorrect `reflect-config.json` file with invalid entries for inner classes of commands in the unnamed package, that are unnecessarily prefixed with a dot. This makes the GraalVM `native-image` generator fail with an error like \"Class .Outer$Inner not found\".\n\n\n\nThis is the sixty-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.1.4-toc\"></a> Table of Contents\n* [New and noteworthy](#4.1.4-new)\n* [Fixed issues](#4.1.4-fixes)\n* [Deprecations](#4.1.4-deprecated)\n* [Potential breaking changes](#4.1.4-breaking-changes)\n\n## <a name=\"4.1.4-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.1.4-fixes\"></a> Fixed issues\n[#903] Bugfix: `picocli-codegen` generates invalid reflect-config.json for classes in unnamed package.\n[#902] DOC: replace deprecated `CommandLine.invoke()` function. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n\n## <a name=\"4.1.4-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.1.4-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n\n# <a name=\"4.1.3\"></a> Picocli 4.1.3\nThe picocli community is pleased to announce picocli 4.1.3.\n\nThis release contains a bugfix for GraalVM users.\n\nThis release fixes a bug in the `picocli-codegen` annotation processor that generates an incorrect `reflect-config.json` file with duplicate entries for inner classes of a command, one with the standard class name and one with the canonical class name. This makes the GraalVM `native-image` generator fail with an error like \"Class Outer.Inner not found\".\n\n\n\nThis is the sixty-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.1.3-toc\"></a> Table of Contents\n* [New and noteworthy](#4.1.3-new)\n* [Fixed issues](#4.1.3-fixes)\n* [Deprecations](#4.1.3-deprecated)\n* [Potential breaking changes](#4.1.3-breaking-changes)\n\n## <a name=\"4.1.3-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.1.3-fixes\"></a> Fixed issues\n* [#901] Bugfix: `picocli-codegen` generated invalid reflect-config.json for inner classes.\n\n## <a name=\"4.1.3-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.1.3-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.1.2\"></a> Picocli 4.1.2\nThe picocli community is pleased to announce picocli 4.1.2.\n\nThis release contains bugfixes, improvements, and documentation enhancements.\n\nThis version of picocli requires JLine 3.13.2 or higher and adds a `PicocliCommands` class that provides command descriptions that can be displayed in the terminal status bar via the new JLine `TailTipWidgets` functionality.\n\nThe built-in `picocli.AutoComplete.GenerateCompletion` (`generate-completion`) subcommand now omits validation of mandatory options in the parent command.\n\n\"Hidden\" subcommands and options are no longer shown as suggestions in unmatched argument usage help or autocompletion scripts.\n\nFrom picocli 4.1.2, all options in an exclusive group are automatically considered required, even if they are not marked as `required = true` in the annotations. Applications using older versions of picocli should mark all options in exclusive groups as required.\n\n\n\n\nThis is the sixty-fourth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.1.2-toc\"></a> Table of Contents\n* [New and noteworthy](#4.1.2-new)\n* [Fixed issues](#4.1.2-fixes)\n* [Deprecations](#4.1.2-deprecated)\n* [Potential breaking changes](#4.1.2-breaking-changes)\n\n## <a name=\"4.1.2-new\"></a> New and Noteworthy\n\n### <a name=\"4.1.2-jline3\"></a> JLine3\nJLine has had some interesting improvements in its 3.12 release.\n\nThis version of picocli requires JLine 3.13.2 or higher and adds a `PicocliCommands` class that provides command descriptions that can be displayed in the terminal status bar via the new JLine `TailTipWidgets` functionality.\n\nSee the `picocli-shell-jline3` [README](https://github.com/remkop/picocli/tree/main/picocli-shell-jline3) for details.\n\n### <a name=\"4.1.2-completion\"></a> Completion\nThe built-in `picocli.AutoComplete.GenerateCompletion` (`generate-completion`) subcommand now omits validation of mandatory options in the parent command.\n\nAlso, \"hidden\" subcommands and options are no longer shown as suggestions in unmatched argument usage help or autocompletion scripts.\n\n\n## <a name=\"4.1.2-fixes\"></a> Fixed issues\n* [#888] (API) Added new `PicocliCommands` class to `picocli-shell-jline3` module; bumped `JLine` to 3.13.2. Thanks to [mattirn](https://github.com/mattirn) for the pull request.\n* [#884] (Bugfix) Built-in `picocli.AutoComplete.GenerateCompletion` (`generate-completion`) subcommand now omits validation of mandatory options in the parent command. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#887] (Bugfix) \"Hidden\" subcommands and options are no longer shown as suggestions in unmatched argument usage help or autocompletion scripts. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#871] (Bugfix) All options in an exclusive group are now automatically considered `required`, to prevent unexpected results when mixing required and non-required options in exclusive ArgGroups. Thanks to [W Scott Johnson](https://github.com/wjohnson5) for raising this.\n* [#883] (DOC) Update of Quick Guide. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#889][#885] (DOC) Update of Picocli Programmatic API documentation. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#891] (DOC) Fixed broken links in README. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#892] (DOC) Minor improvements to example app in `picocli-shell-jline3`.\n\n## <a name=\"4.1.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.1.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.1.1\"></a> Picocli 4.1.1\nThe picocli community is pleased to announce picocli 4.1.1.\n\nThis release contains bugfixes, and documentation enhancements.\n\n\n\nThis is the sixty-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.1.1-toc\"></a> Table of Contents\n* [New and noteworthy](#4.1.1-new)\n* [Fixed issues](#4.1.1-fixes)\n* [Deprecations](#4.1.1-deprecated)\n* [Potential breaking changes](#4.1.1-breaking-changes)\n\n## <a name=\"4.1.1-new\"></a> New and Noteworthy\n\n\n\n## <a name=\"4.1.1-fixes\"></a> Fixed issues\n* [#880] (Bugfix) Built-in `picocli.AutoComplete.GenerateCompletion` (`generate-completion`) subcommand does not flush, resulting in no output. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#875] (DOC) Fix broken internal links in RELEASE-NOTES for 4.1. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#881] (DOC) Update of Quick Guide to the latest `execute` API. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#874] (DOC) Fix Javadoc issues. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n\n\n## <a name=\"4.1.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.1.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.1.0\"></a> Picocli 4.1.0\nThe picocli community is pleased to announce picocli 4.1.0.\n\nThis release contains bugfixes, and enhancements.\n\nThe library now provides functionality that previously required custom code:\n\n[PropertiesDefaultProvider](#4.1.0-propertiesdefaultprovider) - this release includes a built-in default provider allows end users to maintain their own default values for options and positional parameters, which may override the defaults that are hard-coded in the application.\n\n[AutoComplete.GenerateCompletion](#4.1.0-completion) - this release includes a built-in `generate-completion` subcommand that end users can use to easily install Bash/ZSH completion for your application.\n\n[Help API improvements](#4.1.0-helpapi) make it even easier to add custom sections to the usage help message.\n\nThis release also includes various bug fixes for [ArgGroups](#4.1.0-arggroups), which were first introduced in picocli 4.0, and are still maturing.\n\nThis is the sixty-second public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.1.0-toc\"></a> Table of Contents\n* [New and noteworthy](#4.1.0-new)\n* [Fixed issues](#4.1.0-fixes)\n* [Deprecations](#4.1.0-deprecated)\n* [Potential breaking changes](#4.1.0-breaking-changes)\n\n## <a name=\"4.1.0-new\"></a> New and Noteworthy\n\n\n###  <a name=\"4.1.0-propertiesdefaultprovider\" id=\"4.1.0-propertiesdefaultprovider\"></a> PropertiesDefaultProvider\nFrom picocli 4.1, applications can use the built-in `PropertiesDefaultProvider` implementation that loads default values from a properties file.\n\nBy default, this implementation tries to find a properties file named `.${COMMAND-NAME}.properties` in the user home directory, where `${COMMAND-NAME}` is the name of the command. If a command has aliases in addition to its name, these aliases are also used to try to find the properties file. For example:\n\n```java\nimport picocli.CommandLine.PropertiesDefaultProvider;\n// ...\n@Command(name = \"git\", defaultValueProvider = PropertiesDefaultProvider.class)\nclass Git { }\n```\n\nThe above will try to load default values from `new File(System.getProperty(\"user.home\"), \".git.properties\")`.\nThe location of the properties file can also be controlled with system property `\"picocli.defaults.${COMMAND-NAME}.path\"` (`\"picocli.defaults.git.path\"` in this example), in which case the value of the property must be the path to the file containing the default values.\n\nThe location of the properties file may also be specified programmatically. For example:\n\n```java\nCommandLine cmd = new CommandLine(new MyCommand());\nFile defaultsFile = new File(\"path/to/config/mycommand.properties\");\ncmd.setDefaultValueProvider(new PropertiesDefaultProvider(defaultsFile));\ncmd.execute(args);\n```\n\n\n#### PropertiesDefaultProvider Format\nThe `PropertiesDefaultProvider` expects the properties file to be in the standard java `.properties` https://en.wikipedia.org/wiki/.properties[format].\n\nFor options, the key is either the [descriptionKey](https://picocli.info/apidocs/picocli/CommandLine.Option.html#descriptionKey--), or the option's [longest name](https://picocli.info/apidocs/picocli/CommandLine.Model.OptionSpec.html#longestName--), without the prefix. So, for an option `--verbose`, the key would be `verbose`, and for an option `/F`, the key would be `F`.\n\nFor positional parameters, the key is either the [descriptionKey](https://picocli.info/apidocs/picocli/CommandLine.Parameters.html#descriptionKey--), or the positional parameter's [param label](https://picocli.info/apidocs/picocli/CommandLine.Parameters.html#paramLabel--).\n\nEnd users may not know what the `descriptionKey` of your options and positional parameters are, so be sure  to document that with your application.\n\n#### Subcommands Default Values\n\nThe default values for options and positional parameters of subcommands can be included in the properties file for the top-level command, so that end users need to maintain only a single file.\nThis can be achieved by prefixing the keys for the options and positional parameters with their command's qualified name.\nFor example, to give the  `git commit` command's `--cleanup` option a default value of `strip`, define a key of `git.commit.cleanup` and assign it a default value:\n\n```\n# /home/remko/.git.properties\ngit.commit.cleanup = strip\n```\n\n\n### <a name=\"4.1.0-completion\"></a> AutoComplete.GenerateCompletion\n\nThis release adds a built-in `generate-completion` subcommand that generates a completion script for its parent command.\n\nExample usage:\n\n```java\n@Command(name = \"myapp\",\n        subcommands = picocli.AutoComplete.GenerateCompletion.class)\nstatic class MyApp { //...\n}\n```\n\nThis allows users to install completion for the `myapp` command by running the following command:\n\n```bash\nsource <(myapp generate-completion)\n```\n\n### Autocompletion script improvements\n\nThe generated completion script itself now enables bash completion in zsh.\n\nThat means it is no longer necessary to run the below commands in ZSH before sourcing the completion script:\n\n```zsh\nautoload -U +X compinit && compinit\nautoload -U +X bashcompinit && bashcompinit\n```\n\n\n### <a name=\"4.1.0-helpapi\"></a> Help API improvements\nThe new `Help.createHeading(String, Object...)` and  `Help.createTextTable(Map<?, ?>)` methods\n facilitate creating tabular custom Help sections.\n\n\nThe below example shows how to add a custom Environment Variables section to the usage help message.\n\n```java\n// help section keys\nstatic final String SECTION_KEY_ENV_HEADING = \"environmentVariablesHeading\";\nstatic final String SECTION_KEY_ENV_DETAILS = \"environmentVariables\";\n// ...\n\n// the data to display\nMap<String, String> env = new LinkedHashMap<>();\nenv.put(\"FOO\", \"explanation of foo\");\nenv.put(\"BAR\", \"explanation of bar\");\nenv.put(\"XYZ\", \"xxxx yyyy zzz\");\n\n// register the custom section renderers\nCommandLine cmd = new CommandLine(new MyApp());\ncmd.getHelpSectionMap().put(SECTION_KEY_ENV_HEADING,\n                            help -> help.createHeading(\"Environment Variables:%n\"));\ncmd.getHelpSectionMap().put(SECTION_KEY_ENV_DETAILS,\n                            help -> help.createTextTable(env).toString());\n\n// specify the location of the new sections\nList<String> keys = new ArrayList<>(cmd.getHelpSectionKeys());\nint index = keys.indexOf(CommandLine.Model.UsageMessageSpec.SECTION_KEY_FOOTER_HEADING);\nkeys.add(index, SECTION_KEY_ENV_HEADING);\nkeys.add(index + 1, SECTION_KEY_ENV_DETAILS);\ncmd.setHelpSectionKeys(keys);\n```\n\nThere are also new convenience methods `Help.fullSynopsis()` and `CommandLine.getHelp()`.\n\n### <a name=\"4.1.0-arggroups\"></a> ArgGroup improvements\n\n* ArgGroups with `@Option`-annotated methods no longer fail with `NullPointerException`\n* ArgGroups now match multiple occurrences of a multi-value `@Option` in the same group instance, and don't create a new group for each occurrence\n* ArgGroups now don't validate when marked as `validate = false`\n* ArgGroups now correctly validate that required options are present\n* Non-validating ArgGroups are now automatically set to be non-exclusive\n\n## <a name=\"4.1.0-fixes\"></a> Fixed issues\n* [#841] (API) Add `JniConfigGenerator` to `picocli-codegen` module.\n* [#865] (API) Add `Help.createHeading(String, Object...)` and  `Help.createTextTable(Map<?, ?>)` to facilitate creating tabular custom Help sections.\n* [#829] (Bugfix) `@ArgGroup` with `@Option`-annotated methods fail with `NullPointerException`. Thanks to [A2 Geek](https://github.com/a2geek) for raising this.\n* [#828] (Bugfix/enhancement) Subcommands should not be parsed as option values for options with optional parameters. Thanks to [Martin Paljak](https://github.com/martinpaljak) for raising this.\n* [#811] (Bugfix) `CommandLine.setResourceBundle` did not propagate resource bundle to subcommands recursively. Thanks to [thope](https://github.com/frontfact) for the pull request with the bug fix.\n* [#850] (Bugfix) `@Mixin`-annotated fields were not included in `reflect-config.json` by `picocli-codegen` annotation processor. Thanks to [Nikolaos Georgiou](https://github.com/ngeor) for raising this.\n* [#826] (Enhancement) Suppress compiler warning \"Supported source version 'RELEASE_6' from annotation processor... less than -source...\" in picocli-codegen.\n* [#815] (Enhancement) `@ArgGroup` should match multiple occurrences of a multi-value `@Option` in the same group instance, not create new group for each occurrence. Thanks to [kacchi](https://github.com/kacchi) for raising this.\n* [#810] (Bugfix) `@ArgGroup` should not validate when marked as `validate = false`. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#870] (Bugfix) Required options were not validated when mixing required and non-required options in an ArgGroup. Thanks to [W Scott Johnson](https://github.com/wjohnson5) for raising this.\n* [#868] (Enhancement) Add built-in default value provider implementation `PropertiesDefaultProvider` that loads default values from properties file in home directory or specified location.\n* [#809] (Enhancement) Add built-in `generate-completion` subcommand that generates a completion script for its parent command. Thanks to [George Gastaldi](https://github.com/gastaldi) for the suggestion.\n* [#836] (Enhancement) Add convenience methods `Help.fullSynopsis()` and `CommandLine.getHelp()`.\n* [#833] (Enhancement) Non-validating ArgGroups are now automatically set to be non-exclusive. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n* [#830] (Enhancement) Enum constants can now be matched by their `toString()` as well as their `name()`. Improved error reporting. Thanks to [Henning Makholm](https://github.com/hmakholm) for the pull request.\n* [#846] (Enhancement) Allow value `tty` for system property `picocli.ansi`: force picocli to emit ANSI escape characters if the process is using an interactive console.\n* [#772] (Enhancement) Generated completion script should enable bash completion in zsh. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for raising this.\n* [#480] (DOC) Added a [Handling Errors](https://picocli.info#_handling_errors) subsection to the Executing Commands section of the user manual to show how to customize how your application deals with invalid input or business logic exceptions.\n* [#813] (DOC) Clarify usage of negatable boolean `@Option` with default value \"true\". Thanks to [Yann ROBERT](https://github.com/YannRobert) for raising this.\n* [#814] (DOC) Document how a CLI application can be packaged for distribution.\n* [#820] (DOC) Update user manual section on ANSI supported platforms: mention Windows Subsystem for Linux under Windows 10.\n* [#819] (DOC) Update user manual section on Variable Interpolation: improve example, link to this section from other parts of the manual.\n* [#818] (DOC) Update user manual section on Usage Help API to point to `picocli-examples`.\n* [#816] (DOC) Update user manual for `IHelpCommandInitializable2`.\n* [#817] (DOC) Update user manual section on Subcommands for the execute API.\n* [#809] (DOC) Output completion script as a subcommand of the command itself. Thanks to [George Gastaldi](https://github.com/gastaldi) for the suggestion.\n* [#456] (DOC) Integrate completion generation into command itself. Thanks to [jvassev](https://github.com/jvassev) for the suggestion.\n* [#835] (DOC) Document how to create ANSI colored output in an application.\n* [#847] (DOC) Improve documentation for ANSI colors in Windows.\n* [#844] (DOC) Clarify when `@ArgGroup`-annotated fields are initialized in user manual.\n* [#860] (DOC) Fix broken link to GraalVM Native Image section. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#861] (DOC) Fix broken link to `ShowCommandHierarchy` example. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#864] (DOC) Fix code examples in documentation. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n* [#867] (DOC) Update user manual to clarify that the toggling behaviour is no longer the default from picocli 4.0. Thanks to [Linus Fernandes](https://github.com/Fernal73) for raising this.\n\n## <a name=\"4.1.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.1.0-breaking-changes\"></a> Potential breaking changes\n\n* From picocli 4.1, subcommands will not be parsed as option values for options with optional parameters.\n* Enum constants can now be matched by their `toString()` as well as their `name()`.\n\n\n# <a name=\"4.0.4\"></a> Picocli 4.0.4\nThe picocli community is pleased to announce picocli 4.0.4.\n\nThis release contains a bugfixes and enhancements.\n\nGraalVM native image-configuration generation for options or positional parameters with custom type converters or custom parameter consumers now work correctly.\n\nAlso fixed a bug where validation was performed on `ArgGroup`s even when they were marked as `validate = false`.\n\nThis is the sixty-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.4\"></a> Table of Contents\n* [New and noteworthy](#4.0.4-new)\n* [Fixed issues](#4.0.4-fixes)\n* [Deprecations](#4.0.4-deprecated)\n* [Potential breaking changes](#4.0.4-breaking-changes)\n\n## <a name=\"4.0.4-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.0.4-fixes\"></a> Fixed issues\n* [#803] (Bugfix) Custom `IParameterConsumer` caused native-image to fail. Thanks to [Patrick Plenefisch](https://github.com/byteit101) for raising this.\n* [#804][#806] (Bugfix) Visit Parameter Consumers when doing GraalVM reflection generation; added test. Thanks to [Patrick Plenefisch](https://github.com/byteit101) for the pull requests.\n* [#808] (Bugfix) Option-specific `ITypeConverter` class is now correctly included in generated `reflect-config.json`.\n* [#807] (Bugfix) `ArgGroup` should not validate when marked as `validate = false`. Thanks to [cranphin](https://github.com/cranphin) for the bug report.\n* [#799] (DOC) Update adoption section in README.\n* [#805] (DOC) Add example for alphabetically sorting subcommands by subclassing `Help`. Thanks to []() for raising this issue.\n\n## <a name=\"4.0.4-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.4-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.0.3\"></a> Picocli 4.0.3\nThe picocli community is pleased to announce picocli 4.0.3.\n\nThis release contains a bugfixes and enhancements.\n\nGraalVM native image-configuration generation for picocli commands with argument groups now work correctly.\n\nThis is the sixtieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.3\"></a> Table of Contents\n* [New and noteworthy](#4.0.3-new)\n* [Fixed issues](#4.0.3-fixes)\n* [Deprecations](#4.0.3-deprecated)\n* [Potential breaking changes](#4.0.3-breaking-changes)\n\n## <a name=\"4.0.3-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.0.3-fixes\"></a> Fixed issues\n* [#794] (Bugfix) Perform topological sort on ArgGroups in annotation processor before wiring up the model to prevent FATAL ERROR in annotation processor: picocli.CommandLine$InitializationException: ArgGroup has no options or positional parameters, and no subgroups.\n* [#793] (Bugfix) Argument groups disappear in GraalVM native-image (the generated `reflect-config.json` was missing the `@ArgGroup`-annotated fields). Thanks to [Mike Hearn](https://github.com/mikehearn) for the bug report.\n* [#787] (Enhancement) Throw `InitializationException` instead of `StackOverflowError` when subcommand is subclass of itself. Thanks to [Peter Murray-Rust](https://github.com/petermr) for raising this.\n* [#784] (DOC) Update documentation to show custom `IFactory` implementations should fall back to the default factory to enable the creation of collections for `@Option`-annotated methods and fields.\n* [#788] (DOC) Add link to GitHub examples in user manual Mixins section. Thanks to [Peter Murray-Rust](https://github.com/petermr) for the suggestion.\n* [#789] (DOC) Add example usage help to the user manual Negatable Options section.\n\n## <a name=\"4.0.3-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.3-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n\n# <a name=\"4.0.2\"></a> Picocli 4.0.2\nThe picocli community is pleased to announce picocli 4.0.2.\n\nThis release contains a bugfixes and enhancements.\n\nThis is the fifty-ninth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.2\"></a> Table of Contents\n* [New and noteworthy](#4.0.2-new)\n* [Fixed issues](#4.0.2-fixes)\n* [Deprecations](#4.0.2-deprecated)\n* [Potential breaking changes](#4.0.2-breaking-changes)\n\n## <a name=\"4.0.2-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.0.2-fixes\"></a> Fixed issues\n- [#781] Bugfix: Standard help mixin options not added in source order when running on Java 12+.\n- [#773] Bugfix: Add public `NativeImageConfigGeneratorProcessor` constructor to fix build error in IntelliJ IDEA 2019.2. Thanks to [Lukáš Petrovický](https://github.com/triceo) for raising this issue.\n- [#779] Bugfix: `DuplicateOptionAnnotationsException` when a nested group is defined inside a mixin. Thanks to [Matteo Melli](https://github.com/teoincontatto) for the bug report.\n- [#777] Bugfix: Codegen failed when command contains field with argGroup annotation. Thanks to [eomeara](https://github.com/eomeara) for the bug report.\n- [#776] Bugfix: Argument groups in mixins were ignored. Thanks to [Matteo Melli](https://github.com/teoincontatto) for the bug report.\n- [#780] (DOC) Fixed the provided flag usage in the `picocli-codegen` readme. Thanks to [Lasantha Kularatne](https://github.com/lasanthak) for the pull request.\n- [#778] (DOC) Improve documentation for argument group sections in the help. Thanks to [Matteo Melli](https://github.com/teoincontatto) for raising this.\n- [#774] (DOC) Add example demonstrating how to left-align long options in the usage help.\n- [#766] (DOC) Update user manual: mention the dependency required for using `PicocliSpringFactory`. Thanks to [rome-legacy](https://github.com/rome-legacy) for the suggestion.\n- [#775] (DOC) Document jline2 incompatibility with picocli's `interactive` options for passwords, and update the example to show a workaround. Thanks to [querqueq](https://github.com/querqueq) for the pull request.\n- [#770][#771] (DOC) Improve example code in `picocli-spring-boot-starter` README. Thanks to [Stéphane Nicoll](https://github.com/snicoll) for the pull requests.\n\n## <a name=\"4.0.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.0.1\"></a> Picocli 4.0.1\nThe picocli community is pleased to announce picocli 4.0.1.\n\nThis release contains a fix for a bug in the annotation processor that causes a compilation error when a subcommand contains a `@Mixin`-annotated field or method.\n\nThis is the fifty-eighth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.1\"></a> Table of Contents\n* [New and noteworthy](#4.0.1-new)\n* [Fixed issues](#4.0.1-fixes)\n* [Deprecations](#4.0.1-deprecated)\n* [Potential breaking changes](#4.0.1-breaking-changes)\n\n## <a name=\"4.0.1-new\"></a> New and Noteworthy\n\n\n## <a name=\"4.0.1-fixes\"></a> Fixed issues\n- [#769] Annotation processor fails on subcommands with mixins. Thanks to [MortronMeymo](https://github.com/MortronMeymo) for the bug report.\n\n## <a name=\"4.0.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"4.0.0\"></a> Picocli 4.0.0 GA\nThe picocli community is pleased to announce picocli 4.0. This is a big release.\n\nFirst, the `picocli-codegen` module now includes an [annotation processor](#4.0.0-annotation-processor) that instantly enables your JAR for GraalVM native images. It also gives compile-time errors for invalid annotations and attributes. We recommend that all projects using picocli enable this annotation processor.\n\nThe [`execute` API](#4.0.0-execute) is an easy way to execute your command with almost no code. It allows for more flexible configuration than previous APIs, and introduces much improved exit code support. This replaces the static methods `call` and `run`, as well as the `parseWithHandlers` methods, which are now deprecated.\n\nImproved Spring support: the new [`picocli-spring-boot-starter` module](#4.0.0-spring-boot) includes a `PicocliSpringFactory` and auto-configuration to use Spring dependency injection in your picocli command line application. This is especially useful if your application contains subcommands.\n\nThe parser has been enhanced to handle [argument groups](#4.0.0-argument-groups): mutually exclusive options, mutually dependent options, and option sections in the usage help. What makes the picocli design unique and extremely powerful is that argument groups can be nested, so applications can define repeating composite groups of mutually exclusive or co-dependent options.\n\nAnnotation attributes can now contain [variables](#4.0.0-variable-expansion) that can be resolved as system properties, environment variables and resource bundle keys.\n\nThe picocli JAR is now an [explicit JPMS module](#4.0.0-jpms-module), as well as an OSGi bundle. As part of this change, the Groovy support classes and annotations have been moved to a separate [`picocli-groovy`](#4.0.0-groovy-module) artifact.\n\nBoolean options can now easily be made [negatable](#4.0.0-negatable-options), which adds a \"no-\" version of the option. This is a common feature in command line parser libraries for Perl, PHP, Ruby, Lisp, Dart and Go, but we are not aware of any other Java libraries that support this.\n\nAll in all, this release contains 96 [bugfixes and improvements](#4.0.0-fixes) over picocli 3.9.6.\n\n\nMany thanks to the following community contributors to this release of picocli:\n\n[AkosCz](https://github.com/akoscz), [AlcaYezz](https://github.com/AlcaYezz), [Andreas Deininger](https://github.com/deining), [andrewbleonard](https://github.com/andrewbleonard), [Arturo Alonso](https://github.com/thefang12), [Bob Tiernay](https://github.com/bobtiernay-okta), [Devin Smith](https://github.com/devinrsmith), [feinstein](https://github.com/feinstein), [Garret Wilson](https://github.com/garretwilson), [Gerard Bosch](https://github.com/gerardbosch), [gitfineon](https://github.com/gitfineon), [jrevault](https://github.com/jrevault), [Judd Gaddie](https://github.com/juddgaddie), [Liam Esteban Prince](https://github.com/leliamesteban), [marinier](https://github.com/marinier), [Michael D. Adams](https://github.com/adamsmd), [Mikaël Barbero](https://github.com/mbarbero), [Mikusch](https://github.com/Mikusch), [Nicolas Mingo](https://github.com/nicolasmingo), [Paolo Di Tommaso](https://github.com/pditommaso), [Philipp Hanslovsky](https://github.com/hanslovsky), [Radu Cotescu](https://github.com/raducotescu), [Reinhard Pointner](https://github.com/rednoah), [Sebastian Thomschke](https://github.com/sebthom), [Shane Rowatt](https://github.com/srowatt), [shanetreacy](https://github.com/shanetreacy), [Steffen Rehberg](https://github.com/StefRe), [Sualeh Fatehi](https://github.com/sualeh), Takuya Ishibashi, [Thibaud Lepretre](https://github.com/kakawait) and [Warkdev](https://github.com/Warkdev).\n\n\n\nThis is the fifty-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-new)\n  * [Annotation processor](#4.0.0-annotation-processor)\n  * [Execution API](#4.0.0-execute)\n  * [Spring Boot support](#4.0.0-spring-boot)\n  * [Argument groups](#4.0.0-argument-groups)\n  * [Variable interpolation](#4.0.0-variable-expansion) in annotation attributes\n  * Explicit [JPMS module](#4.0.0-jpms-module) and OSGi bundle\n  * New [Groovy module](#4.0.0-groovy-module)\n  * [Negatable options](#4.0.0-negatable-options)\n  * [Fallback value](#4.0.0-fallback-values) for options\n  * [Custom parameter processing](#4.0.0-parameterConsumer)\n  * Improved parsing of [quoted parameters](#4.0.0-quoted-params)\n  * [Auto-detect terminal width](#4.0.0-auto-width) for usage help\n  * Improved support for [Chinese, Japanese and Korean](#4.0.0-cjk) usage help\n* [Fixed issues](#4.0.0-fixes)\n* [Deprecations](#4.0.0-deprecated)\n  * [`run`, `call`, `invoke`, and `parseWithHandlers` methods](#4.0.0-deprecated-run-call) replaced by `execute`\n  * [`CommandLine.setSplitQuotedStrings`](#4.0.0-deprecated-setSplitQuotedStrings) deprecated\n  * [`parse`](#4.0.0-deprecated-parse) deprecated in favor of `parseArgs`\n  * [Range public fields](#4.0.0-deprecated-range-public-fields)\n\n* [Potential breaking changes](#4.0.0-breaking-changes)\n  * `picocli.groovy` classes [moved to separate artifact](4.0.0-breaking-groovy)\n  * [Split regex on single-value options is now disallowed](#4.0.0-breaking-split)\n  * [ColorScheme is now immutable](#4.0.0-breaking-colorscheme)\n  * [Boolean options no longer toggle](#4.0.0-breaking-toggle) by default\n  * [ParseResult `matchedOptions`](#4.0.0-breaking-matchedOptions) now returns full list\n  * [Error message for unmatched arguments](#4.0.0-breaking-unmatched-error) changed\n  * [Option order](#4.0.0-breaking-option-order) changed\n  * [Factory](#4.0.0-breaking-factory)\n\n## <a name=\"4.0.0-new\"></a> New and Noteworthy\n\n### <a name=\"4.0.0-annotation-processor\"></a> Annotation processor\n\n<img src=\"https://www.graalvm.org/resources/img/logo-colored.svg\" alt=\"GraalVM\">\n\nThe `picocli-codegen` module now includes an annotation processor that instantly enables your JAR for GraalVM native images. The annotation processor can build a model from the picocli annotations at compile time rather than at runtime.\n\nUse this if you’re interested in:\n* **Compile time error checking**. The annotation processor shows errors for invalid annotations and attributes immediately when you compile, instead of during testing at runtime, resulting in shorter feedback cycles.\n* **Graal native images**. The annotation processor generates and updates [Graal configuration](https://github.com/oracle/graal/blob/master/substratevm/BuildConfiguration.md) files under\n`META-INF/native-image/picocli-generated/$project` during compilation, to be included in the application jar.\nThis includes configuration files for [reflection](https://github.com/oracle/graal/blob/master/substratevm/Reflection.md), [resources](https://github.com/oracle/graal/blob/master/substratevm/Resources.md) and [dynamic proxies](https://github.com/oracle/graal/blob/master/substratevm/DynamicProxy.md).\nBy embedding these configuration files, your jar is instantly Graal-enabled.\nThe `$project` location is configurable, see [processor options](#picocli-processor-options) below.\nIn most cases no further configuration is needed when generating a native image.\n\n\n#### Processor option: `project`\n\nThe picocli annotation processor supports a number of [options](https://github.com/remkop/picocli/tree/main/picocli-codegen#picocli-processor-options), most important of which is the `project` option to control the output subdirectory: the generated files are written to `META-INF/native-image/picocli-generated/${project}`. A good convention is to use the Maven `${groupId}/${artifactId}` as the value; a unique subdirectory ensures your jar can be shaded with other jars that may also contain generated configuration files.\n\nTo configure this option, pass the `-Aproject=<some value>` to the javac compiler. The examples below show how to do this for Maven and Gradle.\n\n#### Enabling the Annotation Processor\n\nSince Java 6, annotation processing is part of the standard `javac` compiler, but many IDEs and build tools require something extra to enable annotation processing.\n\n##### IDE\n[This page](https://immutables.github.io/apt.html) shows the steps to configure Eclipse and IntelliJ IDEA to enable annotation processing.\n\n##### Maven\nIn Maven, use `annotationProcessorPaths` in the `configuration` of the `maven-compiler-plugin`. This requires `maven-compiler-plugin` plugin version 3.5 or higher.\n\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <!-- annotationProcessorPaths requires maven-compiler-plugin version 3.5 or higher -->\n  <version>${maven-compiler-plugin-version}</version>\n  <configuration>\n    <annotationProcessorPaths>\n      <path>\n        <groupId>info.picocli</groupId>\n        <artifactId>picocli-codegen</artifactId>\n        <version>4.0.0</version>\n      </path>\n    </annotationProcessorPaths>\n    <compilerArgs>\n      <arg>-Aproject=${groupId}/${artifactId}</arg>\n    </compilerArgs>\n  </configuration>\n</plugin>\n```\n\nSee the [`picocli-codegen` README](https://github.com/remkop/picocli/tree/main/picocli-codegen) for more details.\n\n\n##### Gradle\nUse the `annotationProcessor` path in Gradle [4.6 and higher](https://docs.gradle.org/4.6/release-notes.html#convenient-declaration-of-annotation-processor-dependencies):\n```\ndependencies {\n    compile 'info.picocli:picocli:4.0.0'\n    annotationProcessor 'info.picocli:picocli-codegen:4.0.0'\n}\n```\n\nTo set an annotation processor option in Gradle, add these options to the `options.compilerArgs` list in the `compileJava` block.\n\n```\ncompileJava {\n    options.compilerArgs += [\"-Aproject=${project.group}/${project.name}\"]\n}\n```\n\nSee the [`picocli-codegen` README](https://github.com/remkop/picocli/tree/main/picocli-codegen) for more details.\n\n\n\n### <a name=\"4.0.0-execute\"></a> Execution API\n\n<img src=\"https://picocli.info/images/executable.png\" alt=\"executable commands\">\n\n\nPicocli 4.0 introduces new API to execute commands. Let’s take a quick look at what changed.\n\n#### Exit Code\nMany command line applications return an [exit code](https://en.wikipedia.org/wiki/Exit_status) to signify success or failure. Zero often means success, a non-zero exit code is often used for errors, but other than that, meanings differ per application.\n\nThe new `CommandLine.execute` method introduced in picocli 4.0 returns an `int`, and applications can use this return value to call `System.exit` if desired. For example:\n\n```java\npublic static void main(String... args) {\n  CommandLine cmd = new CommandLine(new App());\n  int exitCode = cmd.execute(args);\n  System.exit(exitCode);\n}\n```\n\nOlder versions of picocli had some limited exit code support where picocli would call `System.exit`, but this is now deprecated.\n\n#### Generating an Exit Code\n\n`@Command`-annotated classes that implement `Callable` and `@Command`-annotated methods can simply return an `int` or `Integer`, and this value will be returned from `CommandLine.execute`. For example:\n\n```java\n@Command(name = \"greet\")\nclass Greet implements Callable<Integer> {\n  public Integer call() {\n    System.out.println(\"hi\");\n    return 1;\n  }\n\n  @Command\n  int shout() {\n    System.out.println(\"HI!\");\n    return 2;\n  }\n}\n\nassert 1 == new CommandLine(new Greet()).execute();\nassert 2 == new CommandLine(new Greet()).execute(\"shout\");\n```\n\nCommands with a user object that implements `Runnable` can implement the `IExitCodeGenerator` interface to generate an exit code. For example:\n\n```java\n@Command(name = \"wave\")\nclass Gesture implements Runnable, IExitCodeGenerator {\n  public void run() {\n    System.out.println(\"wave\");\n  }\n  public int getExitCode() {\n    return 3;\n  }\n}\n\nassert 3 == new CommandLine(new Gesture()).execute();\n```\n\n#### Exception Exit Codes\n\nBy default, the `execute` method returns `CommandLine.ExitCode.USAGE` (`64`) for invalid input, and `CommandLine.ExitCode.SOFTWARE` (`70`) when an exception occurred in the Runnable, Callable or command method. (For reference, these values are `EX_USAGE` and `EX_SOFTWARE`, respectively, from Unix and Linux [sysexits.h](https://www.freebsd.org/cgi/man.cgi?query=sysexits&sektion=3)). This can be customized with the `@Command` annotation. For example:\n\n```java\n@Command(exitCodeOnInvalidInput = 123,\n   exitCodeOnExecutionException = 456)\n```\n\nAdditionally, applications can configure a `IExitCodeExceptionMapper` to map a specific exception to an exit code:\n\n```java\nclass MyMapper implements IExitCodeExceptionMapper {\n  public int getExitCode(Throwable t) {\n    if (t instanceof FileNotFoundException) {\n      return 74;\n    }\n    return 1;\n  }\n}\n```\n\nWhen the end user specified invalid input, the `execute` method prints an error message followed by the usage help message of the command, and returns an exit code. This can be customized by configuring a `IParameterExceptionHandler`.\n\nIf the business logic of the command throws an exception, the `execute` method prints the stack trace of the exception and returns an exit code. This can be customized by configuring a `IExecutionExceptionHandler`.\n\n\n#### Configuration\nThe new `CommandLine.execute` method is an instance method. The older `run`, `call` and `invoke` methods are static methods. Static methods don’t allow configuration. The new API lets applications configure the parser or other aspects before execution. For example:\n\n```java\npublic static void main(String... args) {\n  CommandLine cmd = new CommandLine(new App());\n  cmd.setCaseInsensitiveEnumValuesAllowed(true);\n  cmd.setUnmatchedArgumentsAllowed(true);\n  cmd.setStopAtPositional(true);\n  cmd.setExpandAtFiles(false);\n  cmd.execute(args);\n}\n```\n\n\n### <a name=\"4.0.0-spring-boot\"></a> Spring support\n\n<img src=\"https://picocli.info/images/spring-boot.png\" alt=\"spring and spring boot logos\" width=\"350\" height=\"167\">\n\n[Thibaud Lepretre](https://github.com/kakawait), the author of [kakawait/picocli-spring-boot-starter](https://github.com/kakawait/picocli-spring-boot-starter) has graciously contributed a pull request to the picocli project with a new `picocli-spring-boot-starter` module. This includes a `PicocliSpringFactory` and auto-configuration and makes it extremely easy to use Spring dependency injection in your picocli command line application.\n\n\n#### Spring Boot example\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.ExitCodeGenerator;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.context.annotation.Bean;\nimport picocli.CommandLine;\nimport picocli.CommandLine.IFactory;\n\n@SpringBootApplication\npublic class MySpringApp implements CommandLineRunner, ExitCodeGenerator {\n    private int exitCode;\n\n    @Autowired\n    IFactory factory; // auto-configured to inject PicocliSpringFactory\n\n    @Autowired\n    MyCommand myCommand; // your @picocli.CommandLine.Command-annotated class\n\n    @Override\n    public void run(String... args) {\n        // let picocli parse command line args and run the business logic\n        exitCode = new CommandLine(myCommand, factory).execute(args);\n    }\n\n    @Override\n    public int getExitCode() {\n        return exitCode;\n    }\n\n    public static void main(String[] args) {\n        // let Spring instantiate and inject dependencies\n        System.exit(SpringApplication.exit(SpringApplication.run(MySpringApp.class, args)));\n    }\n}\n```\n\nWhen your command is annotated with `@Component`, Spring can autodetect it for dependency injection.\nThe business logic of your command looks like any other picocli command with options and parameters.\n\n```java\nimport org.springframework.stereotype.Component;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport picocli.CommandLine.Command;\nimport picocli.CommandLine.Option;\nimport java.util.concurrent.Callable;\n\n@Component\n@Command(name = \"myCommand\")\npublic class MyCommand implements Callable<Integer> {\n\n    @Autowired\n    private SomeService someService;\n\n    // Prevent \"Unknown option\" error when users use\n    // the Spring Boot parameter 'spring.config.location' to specify\n    // an alternative location for the application.properties file.\n    @Option(names = \"--spring.config.location\", hidden = true)\n    private String springConfigLocation;\n\n    @Option(names = { \"-x\", \"--option\" }, description = \"example option\")\n    private boolean flag;\n\n    public Integer call() throws Exception {\n        // business logic here\n        return 0;\n    }\n}\n```\n\n### <a name=\"4.0.0-argument-groups\"></a> Argument groups\n<img src=\"https://picocli.info/images/groups.jpg\" alt=\"argument groups\">\n\nThis release introduces a new `@ArgGroup` annotation and its `ArgGroupSpec` programmatic equivalent.\n\nArgument Groups can be used to define:\n\n* mutually exclusive options\n* options that must co-occur (dependent options)\n* option sections in the usage help message\n* repeating composite arguments\n\nTo create a group using the annotations API, annotate a field or method with `@ArgGroup`.\nThe field's type refers to the class containing the options and positional parameters in the group.\n(For annotated interface methods this would be the return type, for annotated setter methods in a concrete class this would be the setter's parameter type.)\n\nPicocli will instantiate this class as necessary to capture command line argument values in the `@Option` and `@Parameters`-annotated fields and methods of this class.\n\n#### Mutually Exclusive Options\n\nAnnotate a field or method with `@ArgGroup(exclusive = true)` to create a group of mutually exclusive options and positional parameters. For example:\n\n```java\n@Command(name = \"exclusivedemo\")\npublic class MutuallyExclusiveOptionsDemo {\n\n    @ArgGroup(exclusive = true, multiplicity = \"1\")\n    Exclusive exclusive;\n\n    static class Exclusive {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n}\n```\n\nThe above example defines a command with mutually exclusive options `-a`, `-b` and `-c`.\n\nThe group itself has a `multiplicity` attribute that defines how many times the group may be specified within the command.\nThe default is `multiplicity = \"0..1\"`, meaning that by default a group may be omitted or specified once.\nIn this example the group has `multiplicity = \"1\"`, so the group must occur once: one of the exclusive options must occur on the command line.\n\nThe synopsis of this command is `exclusivedemo (-a=<a> | -b=<b> | -c=<c>)`.\n\nNote that the options are defined as `required = true`; this means required _within the group_, not required within the command.\n\nPicocli will validate the arguments and throw a `MutuallyExclusiveArgsException` if multiple mutually exclusive arguments were specified. For example:\n\n```java\nMutuallyExclusiveOptionsDemo example = new MutuallyExclusiveOptionsDemo();\nCommandLine cmd = new CommandLine(example);\n\ntry {\n    cmd.parseArgs(\"-a=1\", \"-b=2\");\n} catch (MutuallyExclusiveArgsException ex) {\n    assert \"Error: -a=<a>, -b=<b> are mutually exclusive (specify only one)\"\n            .equals(ex.getMessage());\n}\n```\n\nFor the above group, only one of the options can be specified. Any other combination of options, or the absence of options, is invalid.\n\n#### Mutually Dependent Options\n\nAnnotate a field or method with `@ArgGroup(exclusive = false)` to create a group of dependent options and positional parameters that must co-occur. For example:\n\n```java\n@Command(name = \"co-occur\")\npublic class DependentOptionsDemo {\n\n    @ArgGroup(exclusive = false)\n    Dependent dependent;\n\n    static class Dependent {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n}\n```\n\nThe above example defines a command with dependent options `-a`, `-b` and `-c` that must co-occur.\n\nThe group itself has a `multiplicity` attribute that defines how many times the group may be specified within the command.\nIn this example the group uses the default multiplicity, `multiplicity = \"0..1\"`, meaning that the group may be omitted or specified once.\n\nThe synopsis of this command is `co-occur [-a=<a> -b=<b> -c=<c>]`.\n\nNote that the options are defined as `required = true`; this means required _within the group_, not required within the command.\n\nPicocli will validate the arguments and throw a `MissingParameterException` if not all dependent arguments were specified. For example:\n\n```java\nDependentOptionsDemo example = new DependentOptionsDemo();\nCommandLine cmd = new CommandLine(example);\n\ntry {\n    cmd.parseArgs(\"-a=1\", \"-b=2\");\n} catch (MissingParameterException ex) {\n    assert \"Error: Missing required argument(s): -c=<c>\".equals(ex.getMessage());\n}\n```\n\n#### Option Sections in Usage Help\n\nThe example below uses groups to define options sections in the usage help.\nWhen a group has a non-null `heading` (or `headingKey`), the options in the group are given the specified heading in the usage help message.\nThe `headingKey` attribute can be used to get the heading text from the command's resource bundle.\n\nThis works for mutually exclusive or co-occurring groups, but it is also possible to define a group that does no validation but only creates an option section in the usage help.\n\nAnnotate a field or method with `@ArgGroup(validate = false)` to create a group for display purposes only. For example:\n\n```java\n@Command(name = \"sectiondemo\", description = \"Section demo\")\npublic class OptionSectionDemo {\n\n    @ArgGroup(validate = false, heading = \"This is the first section%n\")\n    Section1 section1;\n\n    static class Section1 {\n        @Option(names = \"-a\", description = \"Option A\") int a;\n        @Option(names = \"-b\", description = \"Option B\") int b;\n        @Option(names = \"-c\", description = \"Option C\") int c;\n    }\n\n    @ArgGroup(validate = false, heading = \"This is the second section%n\")\n    Section2 section2;\n\n    static class Section2 {\n        @Option(names = \"-x\", description = \"Option X\") int x;\n        @Option(names = \"-y\", description = \"Option Y\") int y;\n        @Option(names = \"-z\", description = \"Option X\") int z;\n    }\n\n    public static void main(String[] args) {\n        new CommandLine(new OptionSectionDemo()).usage(System.out);\n    }\n}\n```\n\nThis prints the following usage help message:\n```\nUsage: sectiondemo [-a=<a>] [-b=<b>] [-c=<c>] [-x=<x>] [-y=<y>] [-z=<z>]\nSection demo\nThis is the first section\n  -a=<a>    Option A\n  -b=<b>    Option B\n  -c=<c>    Option C\nThis is the second section\n  -x=<x>    Option X\n  -y=<y>    Option Y\n  -z=<z>    Option X\n```\n\nNote that the heading text must end with `%n` to insert a newline between the heading text and the first option.\nThis is for consistency with other headings in the usage help, like `@Command(headerHeading = \"Usage:%n\", optionListHeading = \"%nOptions:%n\")`.\n\n#### Repeating Composite Argument Groups\n\nThe below example shows how groups can be composed of other groups, and how arrays and collections can be used to capture repeating groups (with a `multiplicity` greater than one):\n\n```java\n@Command(name = \"repeating-composite-demo\")\npublic class CompositeGroupDemo {\n\n    @ArgGroup(exclusive = false, multiplicity = \"1..*\")\n    List<Composite> composites;\n\n    static class Composite {\n        @ArgGroup(exclusive = false, multiplicity = \"0..1\")\n        Dependent dependent;\n\n        @ArgGroup(exclusive = true, multiplicity = \"1\")\n        Exclusive exclusive;\n    }\n\n    static class Dependent {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n\n    static class Exclusive {\n        @Option(names = \"-x\", required = true) boolean x;\n        @Option(names = \"-y\", required = true) boolean y;\n        @Option(names = \"-z\", required = true) boolean z;\n    }\n}\n```\n\nIn the above example, the annotated `composites` field defines a composite group that must be specified at least once, and may be specified many times (`multiplicity = \"1..*\"`), on the command line.\n\nThe synopsis of this command is:\n\n```\nUsage: repeating-composite-demo ([-a=<a> -b=<b> -c=<c>] (-x | -y | -z))...\n```\n\nEach time the group is matched, picocli creates an instance of the `Composite` class and adds it to the `composites` list.\n\nThe `Composite` class itself contains two groups: an optional (`multiplicity = \"0..1\"`) group of dependent options that must co-occur, and another group of mutually exclusive options, which is mandatory (`multiplicity = \"1\"`).\n\nThe below example illustrates:\n\n```java\nCompositeGroupDemo example = new CompositeGroupDemo();\nCommandLine cmd = new CommandLine(example);\n\ncmd.parseArgs(\"-x\", \"-a=1\", \"-b=1\", \"-c=1\", \"-a=2\", \"-b=2\", \"-c=2\", \"-y\");\nassert example.composites.size() == 2;\n\nComposite c1 = example.composites.get(0);\nassert c1.exclusive.x;\nassert c1.dependent.a == 1;\nassert c1.dependent.b == 1;\nassert c1.dependent.c == 1;\n\nComposite c2 = example.composites.get(1);\nassert c2.exclusive.y;\nassert c2.dependent.a == 2;\nassert c2.dependent.b == 2;\nassert c2.dependent.c == 2;\n```\n\n#### Positional Parameters\n\nWhen a `@Parameters` positional parameter is part of a group, its `index` is the index _within the group_, not within the command.\n\n\n### <a name=\"4.0.0-variable-expansion\"></a> Variable expansion\nFrom this release, picocli supports variable interpolation (variable expansion) in annotation attributes as well as in text attributes of the programmatic API.\n\n#### Variable Interpolation Example\n\n```java\n@Command(name = \"status\", description = \"This command logs the status for ${PARENT-COMMAND-NAME}.\")\nclass Status {\n    @Option(names = {\"${dirOptionName1:--d}\", \"${dirOptionName2:---directories}\"}, // -d or --directories\n            description = {\"Specify one or more directories, separated by '${sys:path.separator}'.\",\n                           \"The default is the user home directory (${DEFAULT-VALUE}).\"},\n            arity = \"${sys:dirOptionArity:-1..*}\",\n            defaultValue = \"${sys:user.home}\",\n            split = \"${sys:path.separator}\")\n    String[] directories;\n}\n```\n\n#### Predefined Variables\n\nSee the [user manual](https://picocli.info/#_predefined_variables) for the list of predefined variables.\n\n#### Custom Variables\n\nIn addition, you can define your own variables. Currently the following syntaxes are supported:\n\n* `${sys:key}`: system property lookup, replaced by the value of `System.getProperty(\"key\")`\n* `${env:key}`: environment variable lookup, replaced by the value of `System.getEnv(\"key\")`\n* `${bundle:key}`: look up the value of `key` in the resource bundle of the command\n* `${key}`: search all of the above, first system properties, then environment variables, and finally the resource bundle of the command\n\n#### Default Values for Custom Variables\n\nYou can specify a default value to use when no value is found for a custom variable. The syntax for specifying a default is `${a:-b}`, where `a` is the variable name and `b` is the default value to use if `a` is not found.\n\n\n### <a name=\"4.0.0-jpms-module\"></a> Explicit JPMS module\n<img src=\"https://picocli.info/images/modules.jpg\" alt=\"modules\">\n\nThe main `picocli-4.0.0.jar` is a JPMS module named `info.picocli`.\n\nStarting from picocli 4.0, this jar will be an explicit module instead of an automatic module, so the [`jlink` tool](https://docs.oracle.com/en/java/javase/12/tools/jlink.html) can be used to provide a trimmed binary image that has only the required modules.\n\nTypically, a modular jar includes the `module-info.class` file in its root directory. This causes problems for some older tools, which incorrectly process the module descriptor as if it were a normal Java class. To provide the best backward compatibility, the main picocli artifact is a [modular multi-release jar](https://openjdk.java.net/jeps/238#Modular-multi-release-JAR-files) with the `module-info.class` file located in `META-INF/versions/9`.\n\n### <a name=\"4.0.0-groovy-module\"></a> Separate `picocli-groovy` module\n\n<img src=\"https://picocli.info/images/groovy-logo.png\" alt=\"Groovy logo\">\n\nAlso, from this release the main `picocli-4.x` artifact no longer contains the `picocli.groovy` classes: these have been split off into a separate `picocli-groovy-4.x` artifact. This was necessary to make the main `picocli-4.x.jar` an explicit JPMS module.\n\n\n### <a name=\"4.0.0-negatable-options\"></a> Negatable options\nFrom picocli 4.0, options can be `negatable`.\n\n```java\nclass App {\n    @Option(names = \"--verbose\",           negatable = true) boolean verbose;\n    @Option(names = \"-XX:+PrintGCDetails\", negatable = true) boolean printGCDetails;\n    @Option(names = \"-XX:-UseG1GC\",        negatable = true) boolean useG1GC = true;\n}\n```\n\nWhen an option is negatable, picocli will recognize negative aliases of the option on the command line.\n\nFor *nix-style long options, aliases have the prefix 'no-' to the given names.\nFor Java JVM-style options, the `:+` is turned into `:-` and vice versa. (This can be changed by customizing the `INegatableOptionTransformer`.)\n\nIf the negated form of the option is found, for example `--no-verbose`, the value is set to the provided default. Otherwise, with a regular call, for example `--verbose`, it is set to the opposite of the default.\n\n### <a name=\"4.0.0-fallback-values\"></a> Fallback value for options\nThis release introduces a new attribute on the `Option` annotation: `fallbackValue` for options with optional parameter: assign this value when the option was specified on the command line without parameter.\n\nThis is different from the `defaultValue`, which is assigned if the option is not specified at all on the command line.\n\nUsing a `fallbackValue` allows applications to distinguish between cases where\n* the option was not specified on the command line (default value assigned)\n* the option was specified without parameter on the command line (fallback value assigned)\n* the option was specified with parameter on the command line (command line argument value assigned)\n\nThis is useful to define options that can function as a boolean \"switch\" and optionally allow users to provide a (strongly typed) extra parameter value.\n\nThe option description may contain the `${FALLBACK-VALUE}` variable which will be replaced with the actual fallback value when the usage help is shown.\n\n\n### <a name=\"4.0.0-parameterConsumer\"></a> Custom parameter processing\nOptions or positional parameters can be assigned a `IParameterConsumer` that implements custom logic to process the parameters for this option or this position. When an option or positional parameter with a custom `IParameterConsumer` is matched on the command line, picocli's internal parser is temporarily suspended, and the custom parameter consumer becomes responsible for consuming and processing as many command line arguments as needed.\n\nThis can be useful when passing options through to another command.\n\nFor example, the unix [`find`](https://en.wikipedia.org/wiki/Find_(Unix)) command has a [`-exec`](https://en.wikipedia.org/wiki/Find_(Unix)#Execute_an_action) option to execute some action for each file found. Any arguments following the `-exec` option until a `;` or `+` argument are not options for the `find` command itself, but are interpreted as a separate command and its options.\n\nThe example below demonstrates how to implement `find -exec` using this API:\n\n```java\n@Command(name = \"find\")\nclass Find {\n    @Option(names = \"-exec\", parameterConsumer = ExecParameterConsumer.class)\n    List<String> list = new ArrayList<String>();\n}\n\nclass ExecParameterConsumer implements IParameterConsumer {\n    public void consumeParameters(Stack<String> args, ArgSpec argSpec, CommandSpec commandSpec) {\n        List<String> list = argSpec.getValue();\n        while (!args.isEmpty()) {\n            String arg = args.pop();\n            list.add(arg);\n\n            // `find -exec` semantics: stop processing after a ';' or '+' argument\n            if (\";\".equals(arg) || \"+\".equals(arg)) {\n                break;\n            }\n        }\n    }\n}\n```\n\n\n### <a name=\"4.0.0-quoted-params\"></a> Improved parsing of quoted parameters\nAlso, from this release, support for quoted parameter values has been improved. Quoted parameter values can now contain nested quoted substrings to give end users fine-grained control over how values are split. See the [user manual](https://picocli.info/#_quoted_values) for details.\n\n### <a name=\"4.0.0-auto-width\"></a> Auto-detect terminal width for usage help\nFrom this release, commands defined with `@Command(usageHelpAutoWidth = true)` will try to adjust the usage message help layout to the terminal width.\nThere is also programmatic API to control this via the `CommandLine::setUsageHelpAutoWidth` and `UsageMessageSpec::autoWidth` methods.\n\nEnd users may enable this by setting system property `picocli.usage.width` to `AUTO`, and may disable this by setting this system property to a numeric value.\n\nThis feature requires Java 7.\n\n\n### <a name=\"4.0.0-cjk\"></a> Improved support for Chinese, Japanese and Korean usage help\nPicocli will align the usage help message to fit within some user-defined width (80 columns by default).\nA number of characters in Chinese, Japanese and Korean (CJK) are wider than others.\nIf those characters are treated to have the same width as other characters, the usage help message may extend past the right margin.\n\nFrom this release, picocli will use 2 columns for these wide characters when calculating where to put line breaks, resulting in better usage help message text.\n\nThis can be switched off with `CommandLine.setAdjustLineBreaksForWideCJKCharacters(false)`.\n\n\n## <a name=\"4.0.0-fixes\"></a> Fixed issues\n### 4.0.0-GA\n- [#752][#658][#496] Add `picocli-spring-boot-starter` module including a `PicocliSpringFactory` and auto-configuration. Thanks to [Thibaud Lepretre](https://github.com/kakawait) for the pull request.\n- [#736] API: Allow removal of `ArgSpec` from `CommandSpec`. Thanks to [AkosCz](https://github.com/akoscz) for the feature request.\n- [#756] API: Make synopsis indent for multi-line synopsis configurable (related to #739).\n- [#761] API: Add `ParseResult.matchedArgs()` method to return all matched arguments in order; change `ParseResult.matchedOptions()` and `ParseResult.matchedPositionals()` to return the full list of matched options and positional parameters, including duplicates if the option or positional parameter was matched multiple times. Thanks to [Michael D. Adams](https://github.com/adamsmd) for the feature request.\n- [#760] API: Deprecate `CommandLine.setSplitQuotedStrings`: the vast majority of applications want to `split` while respecting quotes.\n- [#754] API/Enhancement: Allow boolean options to get value from fallback instead of defaultProvider. Thanks to [Michael D. Adams](https://github.com/adamsmd) for the feature request.\n- [#696][#741] Enhancement: Automatically split lines in TextTable. Thanks to [Sualeh Fatehi](https://github.com/sualeh) for the pull request.\n- [#744] Enhancement: Composite Argument Groups: more informative error messages.  Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#745] Enhancement: Picocli should disallow `split` regex for single-value type options. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#748] Enhancement: Provide API to use a custom Layout in usage help message: ensure `Help.createDefaultLayout()` is used internally so that subclasses overriding this method can control the Layout that is used.\n- [#595] Enhancement: Support for quoted arguments containing nested quoted substrings, allowing end-users to control how values are split in parts when a `split` regex is defined.\n- [#739] Bugfix: infinite loop or exception when command name plus synopsis heading length equals or exceeds usage help message width. Thanks to [Arturo Alonso](https://github.com/thefang12) for raising this.\n- [#746] Bugfix: Apply default values to options and positional parameters in argument groups. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#742] Bugfix: Default values prevent correct parsing in argument groups. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#759] Bugfix: Correct tracing when custom end-of-option delimiter is matched on the command line.\n- [#738] Bugfix: `setTrimQuotes` does not trim quotes from option names. Thanks to [Judd Gaddie](https://github.com/juddgaddie) for raising this.\n- [#758] Bugfix: Duplicate name exception in argument group: better / more concise error message. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#751] Build: Make build more portable.\n- [#753] Doc: Improve documentation for multi-value fields: mention the `split` attribute. Thanks to [feinstein](https://github.com/feinstein).\n- [#740] Doc: Update user manual to replace `parse` examples with `parseArgs`.\n- [#713] Doc: Update UML class diagrams for picocli 4.0.\n\n### 4.0.0-beta-2\n- [#280] API: `@Option(fallbackValue = \"...\")` for options with optional parameter: assign this value when the option was specified on the command line without parameter. Thanks to [Paolo Di Tommaso](https://github.com/pditommaso) and [marinier](https://github.com/marinier) for the suggestion and in-depth discussion.\n- [#625] API: `@Command(synopsisSubcommandLabel = \"...\")` to allow customization of the subcommands part of the synopsis: by default this is `[COMMAND]`. Thanks to [Sebastian Thomschke](https://github.com/sebthom) and [AlcaYezz](https://github.com/AlcaYezz) for the feature request and subsequent discussion.\n- [#718] API: Add `IParameterConsumer` and `@Option(parameterConsumer = Xxx.class)` for passing arguments through to another command, like `find -exec`. Thanks to [Reinhard Pointner](https://github.com/rednoah) for the suggestion.\n- [#721] API: Add public method Text.getCJKAdjustedLength().\n- [#634] API: Dynamically detect terminal size. Requires Java 7. Thanks to my colleague Takuya Ishibashi for the suggestion.\n- [#737] Deprecate the `parse` method in favor of `parseArgs`.\n- [#717] Negatable options change: avoid unmappable character `±` for synopsis: it renders as scrambled characters in encoding ASCII and in some terminals.\n- [#734][#735] Make the picocli jar OSGi friendly. Thanks to [Radu Cotescu](https://github.com/raducotescu) for the pull request.\n- [#733] Improve error message for unmatched arguments. Thanks to my colleague Takuya Ishibashi for raising this.\n- [#719] Bugfix: options with variable arity should stop consuming arguments on custom end-of-options delimiter.\n- [#720] Bugfix: `@Unmatched` list should be cleared prior to subsequent invocations.\n- [#723] Bugfix: variables in `defaultValue` were not expanded in usage help option description line for `showDefaultValues = true`. Thanks to [Mikaël Barbero](https://github.com/mbarbero) for raising this.\n- [#722] Bugfix: synopsis of deeply nested `@ArgGroup` shows `@Options` duplicate on outer level of command. Thanks to [Shane Rowatt](https://github.com/srowatt) for raising this.\n- [#724] Bugfix: Usage message exceeds width.\n- [#731] Doc: Add Zero Bugs Commitment to README.\n\n### 4.0.0-beta-1b\n- [#500] Add a generic and extensible picocli annotation processor\n- [#699] Add annotation processor that generates `reflect-config.json` during build\n- [#703] Add annotation processor that generates `resource-config.json` during build\n- [#704] Add annotation processor that generates `proxy-config.json` during build\n- [#707] Add example maven/gradle projects that demonstrate using the annotation processor\n- [#711] API: Create separate `picocli-groovy` module, make `picocli` an explicit module (a modular multiversion jar)\n- [#694] API: `negatable` boolean options. Thanks to [Michael D. Adams](https://github.com/adamsmd) for the feature request.\n- [#712] Boolean options should not toggle by default, to be consistent with negatable options\n- [#709] Fix scrambled characters for the `±` character when running on system with non-UTF8 encoding\n- [#717] Fix unmappable character for encoding ASCII by setting compiler encoding to UTF8 explicitly. Thanks to [Liam Esteban Prince](https://github.com/leliamesteban) for raising this.\n- [#697] Option sort in usage help should ignore option name prefix; long options without short name should be inserted alphabetically, instead of always appear at the top.\n- [#695] Fix runtime warnings about illegal reflective access to field `java.io.FilterOutputStream.out`. Thanks to [gitfineon](https://github.com/gitfineon) for reporting this issue.\n- [#698] Reduce `reflect-config.json` used by GraalVM native-image generation\n- [#700] Change default exit codes to `1` for Exceptions in client code, `2` for invalid usage. Add links to `ExitCode` javadoc.\n- [#715] processor tests should not fail when running in different locale\n- [#710] Let annotation processor validate negatable options, usageHelp options\n- [#716] Revert `@Inherited` annotation for `@Command`. Thanks to [Mikusch](https://github.com/Mikusch) for raising this.\n\n### 4.0.0-alpha-3\n - [#516] API: Add support for color schemes in the convenience methods and associated classes and interfaces. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n - [#561] API: Parser configuration for convenience methods.\n - [#650] API: Global parser configuration if using Runnable. Thanks to [gitfineon](https://github.com/gitfineon) for raising this.\n - [#424] API: Exit on help, version or invalid arguments. Thanks to [Gerard Bosch](https://github.com/gerardbosch) for raising this.\n - [#541] API: Improved exception handling for Runnable/Callable.\n - [#680] API: Add annotation API for exitCodeList and exitCodeListHeading.\n - [#611] API: Add `CommandLine.addSubcommand` overloaded method without name or alias. Thanks to [andrewbleonard](https://github.com/andrewbleonard) for the request.\n - [#684] API: Make `CommandLine.defaultFactory` method public.\n - [#675] API: Make `Help.ColorScheme` immutable. This is a breaking API change.\n - [#673] API: Deprecate `CommandLine.Range` public fields, add accessor methods to use instead.\n - [#663] How to remove stacktraces on error. Thanks to [Nicolas Mingo](https://github.com/nicolasmingo) and [jrevault](https://github.com/jrevault) for raising this and subsequent discussion.\n - [#672] Need way to send errors back from subcommand. Thanks to [Garret Wilson](https://github.com/garretwilson) for raising this.\n - [#678] Exit Status section in usage help message.\n - [#683] Ensure exitCodeList implementation is consistent with other usage message attributes.\n - [#575] Codegen: Use mixinStandardHelpOptions in `AutoComplete$App` (add support for the `--version` option)\n - [#645] Codegen: Exclude Jansi Console from generated GraalVM reflection configuration. Thanks to [shanetreacy](https://github.com/shanetreacy) for raising this.\n - [#686] Codegen: Add support for `@Command` interfaces (dynamic proxies) in GraalVM native image.\n - [#669] Codegen: Add support for resource bundles in GraalVM native image.\n - [#691] Codegen bugfix: `ReflectionConfigGenerator` should not generate config for `picocli.CommandLine$Model$ObjectScope`.\n - [#674] JPMS module: move module-info.class to root of jar.\n - [#676] Bugfix: non-defined variables in `defaultValue` now correctly resolve to `null`, and options and positional parameters are now correctly considered `required` only if their default value is `null` after variable interpolation. Thanks to [ifedorenko](https://github.com/ifedorenko) for raising this.\n - [#682] Bugfix: incorrect evaluation for multiple occurrences of a variable.\n - [#689] NPE in codegen OutputFileMixin.\n - [#679] Documentation: Update examples for new execute API. Add examples for exit code control and custom exception handlers.\n - [#681] Documentation: Add exit code section to Internationalization example in user manual.\n\n### 4.0.0-alpha-2\n - [#495] Publish picocli as a JPMS module in a new artifact `picocli-core-module`. Thanks to [Warkdev](https://github.com/Warkdev) for the pull request.\n - [#21] Count double-width Asian characters as two characters for line-breaking purposes.\n - [#526] Add support for variable interpolation in message strings. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n - [#660] Added `@java.lang.annotation.Inherited` to the `@picocli.CommandLine.Command` annotation. Thanks to [Devin Smith](https://github.com/devinrsmith) for the suggestion.\n - [#661] Bugfix for stack overflow when option in an argument group had a default value. Thanks to [Andreas Deininger](https://github.com/deining) for reporting this.\n - [#656] Bugfix for issue where synopsis for composite argument groups did not expand for n..* (n > 1). Thanks to Arno Tuomainen for finding this issue.\n - [#654] Bugfix: argument group heading text was not retrieved from ResourceBundle. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n - [#635] Bugfix in argument group validation: did not show an error if some but not all parts of a co-occurring group were specified. Thanks to [Philipp Hanslovsky](https://github.com/hanslovsky) for the pull request.\n - [#653] Bugfix: argument group validation should be skipped if help was requested. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n - [#655] Bugfix: argument group validation silently accepts missing subgroup with multiplicity=1.\n - [#652] Documentation: fixes in user manual. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n - [#651] Documentation: fixes in user manual. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n\n### 4.0.0-alpha-1\n - [#643] Change `%` to `%%` when using `${DEFAULT-VALUE}` in option description. Thanks to [Steffen Rehberg](https://github.com/StefRe) for the pull request.\n - [#638] Document fallback descriptionKey for options and parameters in user manual. Thanks to [Mikusch](https://github.com/Mikusch) for the suggestion.\n - [#199] mutually exclusive options\n - [#295] options that must co-occur (dependent options)\n - [#450] option grouping in the usage help message\n - [#358] (also [#635]) repeating composite arguments (this should also cover the use cases presented in #454 and #434 requests for repeatable subcommands)\n\n\n## <a name=\"4.0.0-deprecated\"></a> Deprecations\n\n### <a name=\"4.0.0-deprecated-run-call\"></a> `run`, `call`, `invoke`, and `parseWithHandlers` methods replaced by `execute`\nAll variants of the `run`, `call`, `invoke`, and `parseWithHandlers` methods are deprecated from this release, in favor of the new `execute` method.\n\nSimilarly, the following classes and interfaces are deprecated:\n\n* `IParseResultHandler2` is deprecated in favor of the new `IExecutionStrategy` interface.\n* `IExceptionHandler2` is deprecated in favor of the new `IParameterExceptionHandler` `IExecutionExceptionHandler` interfaces.\n* The `AbstractHandler` and `AbstractParseResultHandler` classes are deprecated with no replacement.\n\n### <a name=\"4.0.0-deprecated-setSplitQuotedStrings\"></a> `CommandLine.setSplitQuotedStrings` deprecated\nThe `CommandLine.setSplitQuotedStrings` (and `isSplitQuotedStrings`) methods have been deprecated:\nMost applications should not change the default. The rare application that _does_ need to split parameter values without respecting quotes should use [`ParserSpec.splitQuotedStrings(boolean)`](https://picocli.info/apidocs/picocli/CommandLine.Model.ParserSpec.html#splitQuotedStrings-boolean-).\n\n### <a name=\"4.0.0-deprecated-parse\"></a> `parse` deprecated in favor of `parseArgs`\nFrom this release, the `parse` method is deprecated in favor of `parseArgs`.\n\n### <a name=\"4.0.0-deprecated-range-public-fields\"></a> Range public fields\nThe public fields of the `Range` class have been deprecated and public methods `min()`, `max()`, `isVariable()` have been added that should be used instead.\n\n\n## <a name=\"4.0.0-breaking-changes\"></a> Potential breaking changes\n\n### <a name=\"4.0.0-breaking-groovy\"></a> `picocli.groovy` classes moved to separate artifact\nFrom this release the main `picocli-4.x` artifact no longer contains the `picocli.groovy` classes: these have been split off into a separate `picocli-groovy-4.x` artifact.\n\nScripts upgrading to picocli 4.0 must change more than just the version number!\nScripts should use `@Grab('info.picocli:picocli-groovy:4.x')` from version 4.0, `@Grab('info.picocli:picocli:4.x')` will not work.\n\n### <a name=\"4.0.0-breaking-split\"></a> Split regex on single-value options is now disallowed\nPicocli now throws an `InitializationException` when a single-value type option or positional parameter has a `split` regex.\nOnly multi-value options or positional parameters should have a `split` regex. The runtime check can be disabled by setting system property `picocli.ignore.invalid.split` to any value.\n(The annotation processor also checks this at compile time; this check cannot be disabled.)\n\n### <a name=\"4.0.0-breaking-colorscheme\"></a> ColorScheme is now immutable\nThe `Help.ColorScheme` class has been made immutable. Its public fields are no longer public.\nA new `Help.ColorScheme.Builder` class has been introduced to create `ColorScheme` instances.\n\nThis is a breaking API change: I could not think of a way to do this without breaking backwards compatibility.\n\n### <a name=\"4.0.0-breaking-toggle\"></a> Boolean options do not toggle by default\nFrom this release, when a flag option is specified on the command line picocli will set its value to the opposite of its _default_ value.\n\nPrior to 4.0, the default was to \"toggle\" boolean flags to the opposite of their _current_ value:\nif the previous value was `true` it is set to `false`, and when the value was `false` it is set to `true`.\n\nApplications can call `CommandLine.setToggleBooleanFlags(true)` to enable toggling.\nNote that when toggling is enabled, specifying a flag option twice on the command line will have no effect because they cancel each other out.\n\n### <a name=\"4.0.0-breaking-matchedOptions\"></a> ParseResult `matchedOptions` now returns full list\n`ParseResult.matchedOptions()` and `ParseResult.matchedPositionals()` now return the full list of matched options and positional parameters, including duplicates if the option or positional parameter was matched multiple times.\nPrior to this release, these methods would return a list that did not contain duplicates.\nApplications interested in the old behavior should use the new `matchedOptionSet()` and `matchedPositionalSet()` methods that return a `Set`.\n\n### <a name=\"4.0.0-breaking-unmatched-error\"></a> Error message for unmatched arguments changed\nThe error message for unmatched arguments now shows the index in the command line arguments where the unmatched argument was found,\nand shows the unmatched value in single quotes. This is useful when the unmatched value is whitespace or an empty String.\n\nFor example:\n\n```\nPreviously:  Unmatched arguments: B, C\nNew       :  Unmatched arguments from index 1: 'B', 'C'\n```\n\nThis may break tests that rely on the exact error message.\n\n### <a name=\"4.0.0-breaking-option-order\"></a> Option order changed\nPreviously, options that only have a long name (and do not have a short name) were always shown before options with a short name.\nFrom this release, they are inserted in the option list by their first non-prefix letter.\nThis may break tests that expect a specific help message.\n\n\n### <a name=\"4.0.0-breaking-factory\"></a> Factory\n\nFrom version 4.0, picocli delegates all object creation to the [factory](https://picocli.info/#_custom_factory), including creating `Collection` instances to capture [multi-value](https://picocli.info/#_arrays_and_collections) `@Option` values. Previously, `Collection` objects were instantiated separately without involving the factory.\n\nIt is recommended that custom factories should fall back to the default factory. Something like this:\n\n```java\n@Override\npublic <K> K create(Class<K> clazz) throws Exception {\n    try {\n        return doCreate(clazz); // custom factory lookup or instantiation\n    } catch (Exception e) {\n        return CommandLine.defaultFactory().create(clazz); // fallback if missing\n    }\n}\n```\n\n\n\n\n# <a name=\"4.0.0-beta-2\"></a> Picocli 4.0.0-beta-2\nThe picocli community is pleased to announce picocli 4.0.0-beta-2.\n\nBugfixes and improvements.\n\nThis release introduces two new attributes on the `Option` annotation:\n\n* `fallbackValue`\n* `parameterConsumer`\n\n`fallbackValue` is for options with optional parameter: assign this value when the option was specified on the command line without parameter. `parameterConsumer` and the associated `IParameterConsumer` interface allows for options to bypass picocli's parsing logic and replace it with custom logic. One use case is collecting arguments to pass them through to another command.\n\nThis release introduces a new `synopsisSubcommandLabel` attribute on the `@Command` annotation to allow customization of the subcommands part of the synopsis. This is useful for applications that have required subcommands.\n\nAlso, this release adds the ability to dynamically detect the terminal width.\n\nFrom this release, the picocli JAR is an OSGi bundle with `Bundle-Name: picocli` and other appropriate metadata in the manifest.\n\n_Please try this and provide feedback. We can still make changes._\n\n_What do you think of the `@ArgGroup` annotations API? What about the programmatic API? Does it work as expected? Are the input validation error messages correct and clear? Is the documentation clear and complete? Anything you want to change or improve? Any other feedback?_\n\n\nMany thanks to the picocli community for the contributions!\n\nThis is the fifty-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0-beta-2\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-beta-2-new)\n* [Fixed issues](#4.0.0-beta-2-fixes)\n* [Deprecations](#4.0.0-beta-2-deprecated)\n* [Potential breaking changes](#4.0.0-beta-2-breaking-changes)\n\n## <a name=\"4.0.0-beta-2-new\"></a> New and Noteworthy\n\n### Fallback Value API\nThis release introduces a new attribute on the `Option` annotation: `fallbackValue` for options with optional parameter: assign this value when the option was specified on the command line without parameter.\n\nThis is different from the `defaultValue`, which is assigned if the option is not specified at all on the command line.\n\nUsing a `fallbackValue` allows applications to distinguish between cases where\n* the option was not specified on the command line (default value assigned)\n* the option was specified without parameter on the command line (fallback value assigned)\n* the option was specified with parameter on the command line (command line argument value assigned)\n\nThis is useful to define options that can function as a boolean \"switch\" and optionally allow users to provide a (strongly typed) extra parameter value.\n\nThe option description may contain the `${FALLBACK-VALUE}` variable which will be replaced with the actual fallback value when the usage help is shown.\n\n\n### Synopsis Subcommand Label\nFor commands with subcommands, the string `[COMMAND]` is appended to the end of the synopsis (whether the synopsis is abbreviated or not). This looks something like this:\n\n```\n<cmd> [OPTIONS] FILES [COMMAND]\n```\n\nFrom picocli 4.0, this can be customized with the `synopsisSubcommandLabel` attribute.\n\nFor example, to clarify that a subcommand is mandatory, an application may specify `COMMAND`, without the `[` and `]` brackets:\n\n```java\n@Command(name = \"git\", synopsisSubcommandLabel = \"COMMAND\")\nclass Git implements Runnable {\n    @Spec CommandSpec spec;\n    public void run() {\n        throw new ParameterException(spec.commandLine(), \"Missing required subcommand\");\n    }\n}\n```\n\nAn application with a limited number of subcommands may want to show them all in the synopsis, for example:\n\n```java\n@Command(name = \"fs\", synopsisSubcommandLabel = \"(list | add | delete)\",\n         subcommands = {List.class, Add.class, Delete.class})\nclass Fs { ... }\n```\n\n### Dynamically Detect Terminal Size\n\nFrom this release, commands defined with `@Command(usageHelpAutoWidth = true)` will try to adjust the usage message help layout to the terminal width.\nThere is also programmatic API to control this via the `CommandLine::setUsageHelpAutoWidth` and `UsageMessageSpec::autoWidth` methods.\n\nEnd users may enable this by setting system property `picocli.usage.width` to `AUTO`, and may disable this by setting this system property to a numeric value.\n\nThis feature requires Java 7.\n\n### Custom Parameter Processing\n\nOptions or positional parameters can be assigned a `IParameterConsumer` that implements custom logic to process the parameters for this option or this position. When an option or positional parameter with a custom `IParameterConsumer` is matched on the command line, picocli's internal parser is temporarily suspended, and the custom parameter consumer becomes responsible for consuming and processing as many command line arguments as needed.\n\nThis can be useful when passing options through to another command.\n\nFor example, the unix [`find`](https://en.wikipedia.org/wiki/Find_(Unix)) command has a [`-exec`](https://en.wikipedia.org/wiki/Find_(Unix)#Execute_an_action) option to execute some action for each file found. Any arguments following the `-exec` option until a `;` or `+` argument are not options for the `find` command itself, but are interpreted as a separate command and its options.\n\nThe example below demonstrates how to implement `find -exec` using this API:\n\n```java\n@Command(name = \"find\")\nclass Find {\n    @Option(names = \"-exec\", parameterConsumer = ExecParameterConsumer.class)\n    List<String> list = new ArrayList<String>();\n}\n\nclass ExecParameterConsumer implements IParameterConsumer {\n    public void consumeParameters(Stack<String> args, ArgSpec argSpec, CommandSpec commandSpec) {\n        List<String> list = argSpec.getValue();\n        while (!args.isEmpty()) {\n            String arg = args.pop();\n            list.add(arg);\n\n            // `find -exec` semantics: stop processing after a ';' or '+' argument\n            if (\";\".equals(arg) || \"+\".equals(arg)) {\n                break;\n            }\n        }\n    }\n}\n```\n\n\n## <a name=\"4.0.0-beta-2-fixes\"></a> Fixed issues\n- [#280] API: `@Option(fallbackValue = \"...\")` for options with optional parameter: assign this value when the option was specified on the command line without parameter. Thanks to [Paolo Di Tommaso](https://github.com/pditommaso) and [marinier](https://github.com/marinier) for the suggestion and in-depth discussion.\n- [#625] API: `@Command(synopsisSubcommandLabel = \"...\")` to allow customization of the subcommands part of the synopsis: by default this is `[COMMAND]`. Thanks to [Sebastian Thomschke](https://github.com/sebthom) and [AlcaYezz](https://github.com/AlcaYezz) for the feature request and subsequent discussion.\n- [#718] API: Add `IParameterConsumer` and `@Option(parameterConsumer = Xxx.class)` for passing arguments through to another command, like `find -exec`. Thanks to [Reinhard Pointner](https://github.com/rednoah) for the suggestion.\n- [#721] API: Add public method Text.getCJKAdjustedLength().\n- [#634] API: Dynamically detect terminal size. Requires Java 7. Thanks to my colleague Takuya Ishibashi for the suggestion.\n- [#737] Deprecate the `parse` method in favor of `parseArgs`.\n- [#717] Negatable options change: avoid unmappable character `±` for synopsis: it renders as scrambled characters in encoding ASCII and in some terminals.\n- [#734][#735] Make the picocli jar OSGi friendly. Thanks to [Radu Cotescu](https://github.com/raducotescu) for the pull request.\n- [#733] Improve error message for unmatched arguments. Thanks to my colleague Takuya Ishibashi for raising this.\n- [#719] Bugfix: options with variable arity should stop consuming arguments on custom end-of-options delimiter.\n- [#720] Bugfix: `@Unmatched` list should be cleared prior to subsequent invocations.\n- [#723] Bugfix: variables in `defaultValue` were not expanded in usage help option description line for `showDefaultValues = true`. Thanks to [Mikaël Barbero](https://github.com/mbarbero) for raising this.\n- [#722] Bugfix: synopsis of deeply nested `@ArgGroup` shows `@Options` duplicate on outer level of command. Thanks to [Shane Rowatt](https://github.com/srowatt) for raising this.\n- [#724] Bugfix: Usage message exceeds width.\n- [#731] Doc: Add Zero Bugs Commitment to README.\n\n\n## <a name=\"4.0.0-beta-2-deprecated\"></a> Deprecations\nFrom this release, the `parse` method is deprecated in favor of `parseArgs`.\n\n## <a name=\"4.0.0-beta-2-breaking-changes\"></a> Potential breaking changes\n\nThe error message for unmatched arguments now shows the index in the command line arguments where the unmatched argument was found,\nand shows the unmatched value in single quotes. This is useful when the unmatched value is whitespace or an empty String.\n\nFor example:\n\n```\nPreviously:  Unmatched arguments: B, C\nNew       :  Unmatched arguments from index 1: 'B', 'C'\n```\n\nThis may break tests that rely on the exact error message.\n\n\n\n\n\n# <a name=\"4.0.0-beta-1b\"></a> Picocli 4.0.0-beta-1b\nThe picocli community is pleased to announce picocli 4.0.0-beta-1b.\n\nThis release includes the first cut of an annotation processor that can build a model from the picocli annotations at compile time rather than at runtime.\n\nUse this if you’re interested in:\n* **Compile time error checking**. The annotation processor shows errors for invalid annotations and attributes immediately when you compile, instead of during testing at runtime, resulting in shorter feedback cycles.\n* **Graal native images**. The annotation processor generates [Graal configuration](https://github.com/oracle/graal/blob/master/substratevm/BuildConfiguration.md)\nfiles under `META-INF/native-image/picocli-generated/$project` during compilation, to be included in the application jar.\nBy embedding these configuration files, your jar is instantly Graal-enabled.\nIn most cases no further configuration is needed when generating a native image.\n\nAlso, from this release the main `picocli-4.x` artifact no longer contains the `picocli.groovy` classes: these have been split off into a separate `picocli-groovy-4.x` artifact.\nThe main `picocli-4.x.jar` is now an explicit JPMS module, with a `module-info.class` located in `META-INF/versions/9`.\nThe `picocli-jpms-module` subproject has been removed.\n\nFrom picocli 4.0, options can be `negatable`.\nWhen an option is negatable, picocli will recognize negative aliases of the option on the command line. See the New and Noteworthy section below for more details.\n\n\n_Please try this and provide feedback. We can still make changes._\n\n_What do you think of the `@ArgGroup` annotations API? What about the programmatic API? Does it work as expected? Are the input validation error messages correct and clear? Is the documentation clear and complete? Anything you want to change or improve? Any other feedback?_\n\n\nMany thanks to the picocli community for the contributions!\n\nThis is the fifty-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0-beta-1b\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-beta-1b-new)\n* [Fixed issues](#4.0.0-beta-1b-fixes)\n* [Deprecations](#4.0.0-beta-1b-deprecated)\n* [Potential breaking changes](#4.0.0-beta-1b-breaking-changes)\n\n## <a name=\"4.0.0-beta-1b-new\"></a> New and Noteworthy\n\n### <a name=\"4.0.0-beta-1b-processor\"></a> Annotation Processor\n\nThis release includes the first cut of an annotation processor that can build a model from the picocli annotations at compile time rather than at runtime.\n\nUse this if you’re interested in:\n* **Compile time error checking**. The annotation processor shows errors for invalid annotations and attributes immediately when you compile, instead of during testing at runtime, resulting in shorter feedback cycles.\n* **Graal native images**. The annotation processor generates and updates [Graal configuration](https://github.com/oracle/graal/blob/master/substratevm/BuildConfiguration.md) files under\n`META-INF/native-image/picocli-generated/$project` during compilation, to be included in the application jar.\nThis includes configuration files for [reflection](https://github.com/oracle/graal/blob/master/substratevm/Reflection.md), [resources](https://github.com/oracle/graal/blob/master/substratevm/Resources.md) and [dynamic proxies](https://github.com/oracle/graal/blob/master/substratevm/DynamicProxy.md).\nBy embedding these configuration files, your jar is instantly Graal-enabled.\nThe `$project` location is configurable, see [processor options](#picocli-processor-options) below.\nIn most cases no further configuration is needed when generating a native image.\n\n#### Enabling the Annotation Processor\n\nSince Java 6, annotation processing is part of the standard `javac` compiler, but many IDEs and build tools require something extra to enable annotation processing.\n\n##### IDE\n[This page](https://immutables.github.io/apt.html) shows the steps to configure Eclipse and IntelliJ IDEA to enable annotation processing.\n\n##### Maven\nIn Maven, use `annotationProcessorPaths` in the `configuration` of the `maven-compiler-plugin`.\nThis requires `maven-compiler-plugin` plugin version 3.5 or higher.\n\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <!-- annotationProcessorPaths requires maven-compiler-plugin version 3.5 or higher -->\n  <version>${maven-compiler-plugin-version}</version>\n  <configuration>\n    <annotationProcessorPaths>\n      <path>\n        <groupId>info.picocli</groupId>\n        <artifactId>picocli-codegen</artifactId>\n        <version>4.0.0-beta-1b</version>\n      </path>\n    </annotationProcessorPaths>\n  </configuration>\n</plugin>\n```\n\nAn alternative that works with older versions of the `maven-compiler-plugin` is to specify the `picocli-codegen` module on the classpath as a `provided` dependency. This also prevents the `picocli-codegen` module from being included in the artifact the module produces as a transitive dependency.\n\n```\n<dependency>\n  <groupId>info.picocli</groupId>\n  <artifactId>picocli</artifactId>\n  <version>4.0.0-beta-1b</version>\n</dependency>\n\n<dependency>\n  <groupId>info.picocli</groupId>\n  <artifactId>picocli-codegen</artifactId>\n  <version>4.0.0-beta-1b</version>\n  <provided>true</provided>\n</dependency>\n```\n\n\nSee Processor Options below.\n\n\n##### Gradle\nUse the `annotationProcessor` path in Gradle [4.6 and higher](https://docs.gradle.org/4.6/release-notes.html#convenient-declaration-of-annotation-processor-dependencies):\n```\ndependencies {\n    compile 'info.picocli:picocli:4.0.0-beta-1b'\n    annotationProcessor 'info.picocli:picocli-codegen:4.0.0-beta-1b'\n}\n```\n\nFor Gradle versions prior to 4.6, use `compileOnly`, to prevent the `picocli-codegen` jar from being a transitive dependency included in the artifact the module produces.\n```\ndependencies {\n    compile 'info.picocli:picocli:4.0.0-beta-1b'\n    compileOnly 'info.picocli:picocli-codegen:4.0.0-beta-1b'\n}\n```\n\n#### Picocli Processor Options\n\nThe picocli annotation processor supports the options below.\n\n##### Recommended Options\n* `project` - output subdirectory\n\nThe generated files are written to `META-INF/native-image/picocli-generated/${project}`.\n\nThe `project` option can be omitted, but it is a good idea to specify the `project` option with a unique value for your project (e.g. `${groupId}/${artifactId}`) if your jar may be [shaded](https://stackoverflow.com/a/49811665) with other jars into an uberjar.\n\n\n##### Other Options\n* `other.resource.patterns` - comma-separated list of regular expressions matching additional resources to include in the image\n* `other.resource.bundles` - comma-separated list of the base names of additional resource bundles to include in the image\n* `other.proxy.interfaces` - comma-separated list of the fully qualified class names of additional interfaces for which to generate proxy classes when building the image\n* `disable.proxy.config` - don’t generate `proxy-config.json`\n* `disable.reflect.config` - don’t generate `reflect-config.json`\n* `disable.resource.config` - don’t generate `resources-config.json`\n\n\n##### Javac\nTo pass an annotation processor option with `javac`, specify the `-A` command line option:\n\n```\njavac -Aproject=org.myorg.myproject/myapp -cp ...\n```\nThe `-A` option lets you pass options to annotation processors. See the [javac documentation](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for details.\n\n##### Maven\n\nTo set an annotation processor option in Maven, you need to use the `maven-compiler-plugin` and configure the `compilerArgs` section.\n\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <!-- annotationProcessorPaths requires maven-compiler-plugin version 3.5 or higher -->\n      <version>${maven-compiler-plugin-version}</version>\n      <configuration>\n        <compilerArgs>\n          <arg>-Aproject=${groupId}/${artifactId}</arg>\n        </compilerArgs>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\nSee https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html for details.\n\n#### Gradle Example\nTo set an annotation processor option in Gradle, add these options to the `options.compilerArgs` list in the `compileJava` block.\n\n```\ncompileJava {\n    // minimum 1.6\n    sourceCompatibility = ${java-version}\n    targetCompatibility = ${java-version}\n    options.compilerArgs += [\"-Aproject=${project.group}/${project.name}\"]\n}\n```\n\nSee the [Gradle documentation](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html) for details.\n\n\n### <a name=\"4.0.0-beta-1b-negatable\"></a> Negatable Options\nFrom picocli 4.0, options can be `negatable`.\n\n```java\nclass App {\n    @Option(names = \"--verbose\",           negatable = true) boolean verbose;\n    @Option(names = \"-XX:+PrintGCDetails\", negatable = true) boolean printGCDetails;\n    @Option(names = \"-XX:-UseG1GC\",        negatable = true) boolean useG1GC = true;\n}\n```\n\nWhen an option is negatable, picocli will recognize negative aliases of the option on the command line.\n\nFor *nix-style long options, aliases have the prefix 'no-' to the given names.\nFor Java JVM-style options, the `:+` is turned into `:-` and vice versa. (This can be changed by customizing the `INegatableOptionTransformer`.)\n\nIf the negated form of the option is found, for example `--no-verbose`, the value is set to the provided default. Otherwise, with a regular call, for example `--verbose`, it is set to the opposite of the default.\n\n\n\n## <a name=\"4.0.0-beta-1b-fixes\"></a> Fixed issues\n- [#500] Add a generic and extensible picocli annotation processor\n- [#699] Add annotation processor that generates `reflect-config.json` during build\n- [#703] Add annotation processor that generates `resource-config.json` during build\n- [#704] Add annotation processor that generates `proxy-config.json` during build\n- [#707] Add example maven/gradle projects that demonstrate using the annotation processor\n- [#711] API: Create separate `picocli-groovy` module, make `picocli` an explicit module (a modular multiversion jar)\n- [#694] API: `negatable` boolean options. Thanks to [Michael D. Adams](https://github.com/adamsmd) for the feature request.\n- [#712] Boolean options should not toggle by default, to be consistent with negatable options\n- [#709] Fix scrambled characters for the `±` character when running on system with non-UTF8 encoding\n- [#717] Fix unmappable character for encoding ASCII by setting compiler encoding to UTF8 explicitly. Thanks to [Liam Esteban Prince](https://github.com/leliamesteban) for raising this.\n- [#697] Option sort in usage help should ignore option name prefix; long options without short name should be inserted alphabetically, instead of always appear at the top.\n- [#695] Fix runtime warnings about illegal reflective access to field `java.io.FilterOutputStream.out`. Thanks to [gitfineon](https://github.com/gitfineon) for reporting this issue.\n- [#698] Reduce `reflect-config.json` used by GraalVM native-image generation\n- [#700] Change default exit codes to `1` for Exceptions in client code, `2` for invalid usage. Add links to `ExitCode` javadoc.\n- [#715] processor tests should not fail when running in different locale\n- [#710] Let annotation processor validate negatable options, usageHelp options\n- [#716] Revert `@Inherited` annotation for `@Command`. Thanks to [Mikusch](https://github.com/Mikusch) for raising this.\n\n## <a name=\"4.0.0-beta-1b-deprecated\"></a> Deprecations\n\n\n## <a name=\"4.0.0-beta-1b-breaking-changes\"></a> Potential breaking changes\n\n### `picocli.groovy` Classes Moved to Separate Artifact\nFrom this release the main `picocli-4.x` artifact no longer contains the `picocli.groovy` classes: these have been split off into a separate `picocli-groovy-4.x` artifact.\n\nScripts upgrading to picocli 4.0 must change more than just the version number!\nScripts should use `@Grab('info.picocli:picocli-groovy:4.x')` from version 4.0, `@Grab('info.picocli:picocli:4.x')` will not work.\n\n### Option Order Changed\nPreviously, options that only have a long name (and do not have a short name) were always shown before options with a short name.\nFrom this release, they are inserted in the option list by their first non-prefix letter.\nThis may break tests that expect a specific help message.\n\n### Boolean Options Do Not Toggle By Default\nFrom this release, when a flag option is specified on the command line picocli will set its value to the opposite of its _default_ value.\n\nPrior to 4.0, the default was to \"toggle\" boolean flags to the opposite of their _current_ value:\nif the previous value was `true` it is set to `false`, and when the value was `false` it is set to `true`.\n\nApplications can call `CommandLine.setToggleBooleanFlags(true)` to enable toggling.\nNote that when toggling is enabled, specifying a flag option twice on the command line will have no effect because they cancel each other out.\n\n### Revert `@Inherited` annotation on `@Command`\nThe `@Inherited` annotated that was added to `@Command` in picocli 4.0.0-alpha-2 turned out to cause\nissues in scenarios with multiple levels of inheritance and is reverted in this release.\n\n\n# <a name=\"4.0.0-alpha-3\"></a> Picocli 4.0.0-alpha-3\nThe picocli community is pleased to announce picocli 4.0.0-alpha-3.\n\nThis release adds improved support for command execution via the new `execute` method.\nThis method returns an exit code that applications can use to call `System.exit`.\n\nThe older `run`, `call`, `invoke` and `parseWithHandlers` convenience methods that were similar to `execute` but had limited support for parser configuration and and limited support for exit codes are deprecated from this release.\n\nThis release also improves the picocli tools for configuring GraalVM native image builds: there is now support for commands with resource bundles and jewelcli-style `@Command`-annotated interfaces for which picocli generates a dynamic proxy.\n\n_Please try this and provide feedback. We can still make changes._\n\n_What do you think of the `@ArgGroup` annotations API? What about the programmatic API? Does it work as expected? Are the input validation error messages correct and clear? Is the documentation clear and complete? Anything you want to change or improve? Any other feedback?_\n\n\nMany thanks to the picocli community for the contributions!\n\nThis is the fifty-fourth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0-alpha-3\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-alpha-3-new)\n* [Fixed issues](#4.0.0-alpha-3-fixes)\n* [Deprecations](#4.0.0-alpha-3-deprecated)\n* [Potential breaking changes](#4.0.0-alpha-3-breaking-changes)\n\n## <a name=\"4.0.0-alpha-3-new\"></a> New and Noteworthy\n\n### <a name=\"4.0.0-alpha-3-execute\"></a> Executing Commands\n\nPicocli 4.0 introduces new API to execute commands. Let’s take a quick look at what changed.\n\n#### Exit Code\nMany command line applications return an [exit code](https://en.wikipedia.org/wiki/Exit_status) to signify success or failure. Zero often means success, a non-zero exit code is often used for errors, but other than that, meanings differ per application.\n\nThe new `CommandLine.execute` method introduced in picocli 4.0 returns an `int`, and applications can use this return value to call `System.exit` if desired. For example:\n\n```java\npublic static void main(String... args) {\n  CommandLine cmd = new CommandLine(new App());\n  int exitCode = cmd.execute(args);\n  System.exit(exitCode);\n}\n```\n\nOlder versions of picocli had some limited exit code support where picocli would call `System.exit`, but this is now deprecated.\n\n#### Generating an Exit Code\n\n`@Command`-annotated classes that implement `Callable` and `@Command`-annotated methods can simply return an `int` or `Integer`, and this value will be returned from `CommandLine.execute`. For example:\n\n```java\n@Command(name = \"greet\")\nclass Greet implements Callable<Integer> {\n  public Integer call() {\n    System.out.println(\"hi\");\n    return 1;\n  }\n\n  @Command\n  int shout() {\n    System.out.println(\"HI!\");\n    return 2;\n  }\n}\n\nassert 1 == new CommandLine(new Greet()).execute();\nassert 2 == new CommandLine(new Greet()).execute(\"shout\");\n```\n\nCommands with a user object that implements `Runnable` can implement the `IExitCodeGenerator` interface to generate an exit code. For example:\n\n```java\n@Command(name = \"wave\")\nclass Gesture implements Runnable, IExitCodeGenerator {\n  public void run() {\n    System.out.println(\"wave\");\n  }\n  public int getExitCode() {\n    return 3;\n  }\n}\n\nassert 3 == new CommandLine(new Gesture()).execute();\n```\n\n#### Exception Exit Codes\n\nBy default, the `execute` method returns `CommandLine.ExitCode.USAGE` (`64`) for invalid input, and `CommandLine.ExitCode.SOFTWARE` (`70`) when an exception occurred in the Runnable, Callable or command method. (For reference, these values are `EX_USAGE` and `EX_SOFTWARE`, respectively, from Unix and Linux [sysexits.h](https://www.freebsd.org/cgi/man.cgi?query=sysexits&sektion=3)). This can be customized with the `@Command` annotation. For example:\n\n```java\n@Command(exitCodeOnInvalidInput = 123,\n   exitCodeOnExecutionException = 456)\n```\n\nAdditionally, applications can configure a `IExitCodeExceptionMapper` to map a specific exception to an exit code:\n\n```java\nclass MyMapper implements IExitCodeExceptionMapper {\n  public int getExitCode(Throwable t) {\n    if (t instance of FileNotFoundException) {\n      return 74;\n    }\n    return 1;\n  }\n}\n```\n\nWhen the end user specified invalid input, the `execute` method prints an error message followed by the usage help message of the command, and returns an exit code. This can be customized by configuring a `IParameterExceptionHandler`.\n\nIf the business logic of the command throws an exception, the `execute` method prints the stack trace of the exception and returns an exit code. This can be customized by configuring a `IExecutionExceptionHandler`.\n\n\n#### Configuration\nThe new `CommandLine.execute` method is an instance method. The older `run`, `call` and `invoke` methods are static methods. Static methods don’t allow configuration. The new API lets applications configure the parser or other aspects before execution. For example:\n\n```java\npublic static void main(String... args) {\n  CommandLine cmd = new CommandLine(new App());\n  cmd.setCaseInsensitiveEnumValuesAllowed(true);\n  cmd.setUnmarchedArgumentsAllowed(true);\n  cmd.setStopAtPositional(true);\n  cmd.setExpandAtFiles(false);\n  cmd.execute(args);\n}\n```\n\n#### Execution Configuration\n\nThe following configuration methods are new and are only applicable with the `execute` method (and `executeHelpRequest`):\n\n* get/setOut\n* get/setErr\n* get/setColorScheme\n* get/setExecutionStrategy\n* get/setParameterExceptionHandler\n* get/setExecutionExceptionHandler\n* get/setExitCodeExceptionMapper\n\nThe above methods are not applicable (and ignored) with other entry points like `parse`, `parseArgs`, `populateCommand`, `run`, `call`, `invoke`, `parseWithHandler` and `parseWithHandlers`.\n\n#### API Evolution and Trade-offs\n\nPrevious versions of picocli offered the `run`, `call` and `invoke` methods to execute a `Runnable`, `Callable` or `Method` command. Here are some trade-offs versus the new `execute` method:\n\n* *Static* - These are static methods, with the drawback that they don't allow configuration, as mentioned above.\n* *Type Safety* - It is a compile-time error when an application tries to pass anything else than a `Runnable` to the `run` method, and a `Callable` to the `call` method. The `execute` method does not have this type safety, since the `CommandLine` constructor allows any `Object` as a parameter.\n* *Return Value* - The `call` and `invoke` static methods allow commands to return _any_ value, while the `execute` method only returns an `int` exit code. From 4.0 the result object will be available from the `CommandLine.getExecutionResult` method.\n\n#### Feedback Requested\n\nWith the new execute API the `ColorScheme` class will start to play a more central role. I decided to make the `ColorScheme` class immutable from this release. This is a breaking API change.\nShould it be deprecated first, or not changed at all, or is the 4.0 release a good time to make breaking changes? Your feedback is very welcome on https://github.com/remkop/picocli/issues/675.\n\n### <a name=\"4.0.0-alpha-3-codegen\"></a> Tools for Configuring GraalVM Native Image Builds\n\nThe `picocli-codegen` module now has two new tools, in addition to the existing `ReflectionConfigGenerator`:\n\n* ResourceConfigGenerator\n* DynamicProxyConfigGenerator\n\n#### ResourceConfigGenerator\nThe GraalVM native-image builder by default will not integrate any of the\n[classpath resources](https://github.com/oracle/graal/blob/master/substratevm/Resources.md) into the image it creates.\n\n`ResourceConfigGenerator` generates a JSON String with the resource bundles and other classpath resources\nthat should be included in the Substrate VM native image.\n\nThe output of `ResourceConfigGenerator` is intended to be passed to the `-H:ResourceConfigurationFiles=/path/to/reflect-config.json` option of the `native-image` GraalVM utility,\nor placed in a `META-INF/native-image/` subdirectory of the JAR.\n\nThis allows picocli-based native image applications to access these resources.\n\n#### DynamicProxyConfigGenerator\n\nSubstrate VM doesn't provide machinery for generating and interpreting bytecodes at run time. Therefore all dynamic proxy classes\n[need to be generated](https://github.com/oracle/graal/blob/master/substratevm/DynamicProxy.md) at native image build time.\n\n`DynamicProxyConfigGenerator` generates a JSON String with the fully qualified interface names for which\ndynamic proxy classes should be generated at native image build time.\n\nThe output of `DynamicProxyConfigGenerator` is intended to be passed to the `-H:DynamicProxyConfigurationFiles=/path/to/proxy-config.json` option of the `native-image` GraalVM utility,\nor placed in a `META-INF/native-image/` subdirectory of the JAR.\n\nThis allows picocli-based native image applications that use `@Command`-annotated interfaces with\n`@Option` and `@Parameters`-annotated methods.\n\n\n## <a name=\"4.0.0-alpha-3-fixes\"></a> Fixed issues\n- [#516] API: Add support for color schemes in the convenience methods and associated classes and interfaces. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n- [#561] API: Parser configuration for convenience methods.\n- [#650] API: Global parser configuration if using Runnable. Thanks to [gitfineon](https://github.com/gitfineon) for raising this.\n- [#424] API: Exit on help, version or invalid arguments. Thanks to [Gerard Bosch](https://github.com/gerardbosch) for raising this.\n- [#541] API: Improved exception handling for Runnable/Callable.\n- [#680] API: Add annotation API for exitCodeList and exitCodeListHeading.\n- [#611] API: Add `CommandLine.addSubcommand` overloaded method without name or alias. Thanks to [andrewbleonard](https://github.com/andrewbleonard) for the request.\n- [#684] API: Make `CommandLine.defaultFactory` method public.\n- [#675] API: Make `Help.ColorScheme` immutable. This is a breaking API change.\n- [#673] API: Deprecate `CommandLine.Range` public fields, add accessor methods to use instead.\n- [#663] How to remove stacktraces on error. Thanks to [Nicolas Mingo](https://github.com/nicolasmingo) and [jrevault](https://github.com/jrevault) for raising this and subsequent discussion.\n- [#672] Need way to send errors back from subcommand. Thanks to [Garret Wilson](https://github.com/garretwilson) for raising this.\n- [#678] Exit Status section in usage help message.\n- [#683] Ensure exitCodeList implementation is consistent with other usage message attributes.\n- [#575] Codegen: Use mixinStandardHelpOptions in `AutoComplete$App` (add support for the `--version` option)\n- [#645] Codegen: Exclude Jansi Console from generated GraalVM reflection configuration. Thanks to [shanetreacy](https://github.com/shanetreacy) for raising this.\n- [#686] Codegen: Add support for `@Command` interfaces (dynamic proxies) in GraalVM native image.\n- [#669] Codegen: Add support for resource bundles in GraalVM native image.\n- [#691] Codegen bugfix: `ReflectionConfigGenerator` should not generate config for `picocli.CommandLine$Model$ObjectScope`.\n- [#674] JPMS module: move module-info.class to root of jar.\n- [#676] Bugfix: non-defined variables in `defaultValue` now correctly resolve to `null`, and options and positional parameters are now correctly considered `required` only if their default value is `null` after variable interpolation. Thanks to [ifedorenko](https://github.com/ifedorenko) for raising this.\n- [#682] Bugfix: incorrect evaluation for multiple occurrences of a variable.\n- [#689] NPE in codegen OutputFileMixin.\n- [#679] Documentation: Update examples for new execute API. Add examples for exit code control and custom exception handlers.\n- [#681] Documentation: Add exit code section to Internationalization example in user manual.\n\n## <a name=\"4.0.0-alpha-3-deprecated\"></a> Deprecations\n\n### Convenience Methods Replaced by `execute`\nAll variants of the `run`, `call`, `invoke`, and `parseWithHandlers` methods are deprecated from this release, in favor of the new `execute` method.\n\nSimilarly, the following classes and interfaces are deprecated:\n\n* `IParseResultHandler2` is deprecated in favor of the new `IExecutionStrategy` interface.\n* `IExceptionHandler2` is deprecated in favor of the new `IParameterExceptionHandler` `IExecutionExceptionHandler` interfaces.\n* The `AbstractHandler` and `AbstractParseResultHandler` classes are deprecated with no replacement.\n\n### Range\nThe public fields of the `Range` class have been deprecated and public methods `min()`, `max()`, `isVariable()` have been added that should be used instead.\n\n## <a name=\"4.0.0-alpha-3-breaking-changes\"></a> Potential breaking changes\n\nThe `Help.ColorScheme` class has been made immutable. Its public fields are no longer public.\nA new `Help.ColorScheme.Builder` class has been introduced to create `ColorScheme` instances.\n\nThis is a breaking API change: I could not think of a way to do this without breaking backwards compatibility.\n\n\n# <a name=\"4.0.0-alpha-2\"></a> Picocli 4.0.0-alpha-2\nThe picocli community is pleased to announce picocli 4.0.0-alpha-2.\n\nThanks to great feedback from the picocli community on the 4.0.0-alpha-1 release, this release contains many argument group-related bugfixes.\nSee the [4.0.0-alpha-1 New and Noteworthy section](#4.0.0-alpha-1-new) below for more details on argument groups.\n\n_Please try this and provide feedback. We can still make changes._\n\n_What do you think of the annotations API? What about the programmatic API? Does it work as expected? Are the input validation error messages correct and clear? Is the documentation clear and complete? Anything you want to change or improve? Any other feedback?_\n\nThis release also has support for variable expansion and improved support for Chinese, Japanese and Korean.\n\nMany thanks to the picocli community for the contributions!\n\nThis is the fifty-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0-alpha-2\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-alpha-2-new)\n* [Fixed issues](#4.0.0-alpha-2-fixes)\n* [Deprecations](#4.0.0-alpha-2-deprecated)\n* [Potential breaking changes](#4.0.0-alpha-2-breaking-changes)\n\n## <a name=\"4.0.0-alpha-2-new\"></a> New and Noteworthy\n\n### Argument Groups\n\nMany bugfixes for argument groups.\n\n### Variable Interpolation\n\nFrom this release, picocli supports variable interpolation (variable expansion) in annotation attributes as well as in text attributes of the programmatic API.\n\n#### Variable Interpolation Example\n\n```java\n@Command(name = \"status\", description = \"This command logs the status for ${PARENT-COMMAND-NAME}.\")\nclass Status {\n    @Option(names = {\"${dirOptionName1:--d}\", \"${dirOptionName2:---directories}\"}, // -d or --directories\n            description = {\"Specify one or more directories, separated by '${sys:path.separator}'.\",\n                           \"The default is the user home directory (${DEFAULT-VALUE}).\"},\n            arity = \"${sys:dirOptionArity:-1..*}\",\n            defaultValue = \"${sys:user.home}\",\n            split = \"${sys:path.separator}\")\n    String[] directories;\n}\n```\n\n#### Predefined Variables\n\nThe following variables are predefined:\n\n* `${DEFAULT-VALUE}`: (since 3.2) - can be used in the description for an option or positional parameter, replaced with the default value for that option or positional parameter\n* `${COMPLETION-CANDIDATES}`: (since 3.2) - can be used in the description for an option or positional parameter, replaced with the completion candidates for that option or positional parameter\n* `${COMMAND-NAME}`: (since 4.0) - can be used in any section of the usage help message for a command, replaced with the name of the command\n* `${COMMAND-FULL-NAME}`: (since 4.0) - can be used in any section of the usage help message for a command, replaced with the fully qualified name of the command (that is, preceded by its parent fully qualified name)\n* `${PARENT-COMMAND-NAME}`: (since 4.0) - can be used in any section of the usage help message for a command, replaced with the name of its parent command\n* `${PARENT-COMMAND-FULL-NAME}`: (since 4.0) - can be used in any section of the usage help message for a command, replaced with the fully qualified name of its parent command (that is, preceded by the name(s) of the parent command's ancestor commands)\n\n#### Custom Variables\n\nIn addition, you can define your own variables. Currently the following syntaxes are supported:\n\n* `${sys:key}`: system property lookup, replaced by the value of `System.getProperty(\"key\")`\n* `${env:key}`: environment variable lookup, replaced by the value of `System.getEnv(\"key\")`\n* `${bundle:key}`: look up the value of `key` in the resource bundle of the command\n* `${key}`: search all of the above, first system properties, then environment variables, and finally the resource bundle of the command\n\n#### Default Values for Custom Variables\n\nYou can specify a default value to use when no value is found for a custom variable. The syntax for specifying a default is `${a:-b}`, where `a` is the variable name and `b` is the default value to use if `a` is not found.\n\nSo, for the individual lookups, this looks like this:\n\n```\n${key:-defaultValue}\n${sys:key:-defaultValue}\n${env:key:-defaultValue}\n${bundle:key:-defaultValue}\n```\n\nThe default value may contain other custom variables. For example:\n\n```\n${bundle:a:-${env:b:-${sys:c:-X}}}\n```\n\nThe above variable is expanded as follows. First, try to find key `a` in the command's resource bundle. If `a` is not found in the resource bundle, get the value of environment variable `b`. If no environment variable `b` exists, get the value of system property `c`. Finally, no system property `c` exists, the value of the expression becomes `X`.\n\n#### Escaping Variables\nSometimes you want to show a string like `\"${VAR}\"` in a description.\nA `$` character can be escaped with another `$` character. Therefore, `$${VAR}` will not be interpreted as a `VAR` variable, but will be replaced by `${VAR}` instead.\n\n#### Switching Off Variable Interpolation\n\nVariable interpolation can be switched off for the full command hierarchy by calling `CommandLine.setInterpolateVariables(false)`, or for a particular command by calling `CommandSpec.interpolateVariables(false)`.\n\n#### Limitations of Variable Interpolation\n\nSome attribute values need to be resolved early, when the model is constructed from the annotation values.\n\nSpecifically:\n\n* command names and aliases, option names, mixin names\n* `arity` (for options and positional parameters)\n* `index` (for positional parameters)\n* `separator` (for commands)\n\nIt is possible for these attributes to contain variables, but be aware of the limitations.\n\nIf these attributes have variables, and the variables get a different value after the model is constructed, the change will not be reflected in the model.\n\n\n\n### Improved Support for Chinese, Japanese and Korean\nPicocli will align the usage help message to fit within some user-defined width (80 columns by default).\nA number of characters in Chinese, Japanese and Korean (CJK) are wider than others.\nIf those characters are treated to have the same width as other characters, the usage help message may extend past the right margin.\n\nFrom this release, picocli will use 2 columns for these wide characters when calculating where to put line breaks, resulting in better usage help message text.\n\nThis can be switched off with `CommandLine.setAdjustLineBreaksForWideCJKCharacters(false)`.\n\n## <a name=\"4.0.0-alpha-2-fixes\"></a> Fixed issues\n- [#495] Publish picocli as a JPMS module in a new artifact `picocli-core-module`. Thanks to [Warkdev](https://github.com/Warkdev) for the pull request.\n- [#21] Count double-width Asian characters as two characters for line-breaking purposes.\n- [#526] Add support for variable interpolation in message strings. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n- [#660] Added `@java.lang.annotation.Inherited` to the `@picocli.CommandLine.Command` annotation. Thanks to [Devin Smith](https://github.com/devinrsmith) for the suggestion.\n- [#661] Bugfix for stack overflow when option in an argument group had a default value. Thanks to [Andreas Deininger](https://github.com/deining) for reporting this.\n- [#656] Bugfix for issue where synopsis for composite argument groups did not expand for n..* (n > 1). Thanks to Arno Tuomainen for finding this issue.\n- [#654] Bugfix: argument group heading text was not retrieved from ResourceBundle. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#635] Bugfix in argument group validation: did not show an error if some but not all parts of a co-occurring group were specified. Thanks to [Philipp Hanslovsky](https://github.com/hanslovsky) for the pull request.\n- [#653] Bugfix: argument group validation should be skipped if help was requested. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#655] Bugfix: argument group validation silently accepts missing subgroup with multiplicity=1.\n- [#652] Documentation: fixes in user manual. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n- [#651] Documentation: fixes in user manual. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n\n## <a name=\"4.0.0-alpha-2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.0-alpha-2-breaking-changes\"></a> Potential breaking changes\nThe following classes and methods introduced in 4.0.0-alpha-1 have been renamed:\n\nClasses:\n\n* `picocli.CommandLine.ParseResult.MatchedGroup` -> `picocli.CommandLine.ParseResult.GroupMatchContainer`\n* `picocli.CommandLine.ParseResult.MatchedGroupMultiple` -> `picocli.CommandLine.ParseResult.GroupMatch`\n\nMethods:\n\n* `ParseResult::getMatchedGroupMultiples` has been renamed to `ParseResult::getGroupMatches`\n* `ParseResult::findMatchedGroup(ArgGroupSpec)` has been renamed to `ParseResult::findMatches(ArgGroupSpec)`\n\nRemoved:\n\nThese may be implemented in a future version.\n\n* `picocli.CommandLine.Option.excludes()` and `picocli.CommandLine.Parameters.excludes()`\n* `picocli.CommandLine.Option.needs(()` and `picocli.CommandLine.Parameters.needs(()`\n\n# <a name=\"3.9.6\"></a> Picocli 3.9.6\nThe picocli community is pleased to announce picocli 3.9.6.\n\nThis release improves support for interactive (password) options:\n\n* interactive options can now use type `char[]` instead of String, to allow applications to null out the array after use so that sensitive information is no longer resident in memory\n* interactive options can be optionally interactive if configured with `arity = \"0..1\"`\n\nThis is the fifty-second public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.6\"></a> Table of Contents\n* [New and noteworthy](#3.9.6-new)\n* [Fixed issues](#3.9.6-fixes)\n* [Deprecations](#3.9.6-deprecated)\n* [Potential breaking changes](#3.9.6-breaking-changes)\n\n## <a name=\"3.9.6-new\"></a> New and Noteworthy\n\nThis release improves support for interactive (password) options:\n\n* interactive options can now use type `char[]` instead of String, to allow applications to null out the array after use so that sensitive information is no longer resident in memory\n* interactive options can be optionally interactive if configured with `arity = \"0..1\"`\n\n\nFor example, if an application has these options:\n\n```java\n@Option(names = \"--user\")\nString user;\n\n@Option(names = \"--password\", arity = \"0..1\", interactive = true)\nchar[] password;\n```\n\nWith the following input, the `password` field will be initialized to `\"123\"` without prompting the user for input:\n\n```\n--password 123 --user Joe\n```\n\nHowever, if the password is not specified, the user will be prompted to enter a value. In the following example, the password option has no parameter, so the user will be prompted to type in a value on the console:\n\n```\n--password --user Joe\n```\n\n## <a name=\"3.9.6-fixes\"></a> Fixed issues\n* [#657] Support type `char[]` for interactive options. Thanks to [Lukáš Petrovický](https://github.com/triceo) for raising this issue.\n* [#536] Support optionally interactive options. Thanks to [Lukas Heumos](https://github.com/Zethson) for raising this issue.\n\n## <a name=\"3.9.6-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.6-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"4.0.0-alpha-1\"></a> Picocli 4.0.0-alpha-1\nThe picocli community is pleased to announce picocli 4.0.0-alpha-1.\n\nThis release adds support for argument groups (incubating). Argument groups enable the following:\n\n* mutually exclusive options\n* options that must co-occur (dependent options)\n* option sections in the usage help message\n* repeating composite arguments\n\nSee the [New and Noteworthy section](#4.0.0-alpha-1-new) below for more details.\n\n_Please try this and provide feedback. We can still make changes._\n\n_What do you think of the annotations API? What about the programmatic API? Does it work as expected? Are the input validation error messages correct and clear? Is the documentation clear and complete? Anything you want to change or improve? Any other feedback?_\n\nMany thanks to the picocli community members who contributed!\n\nThis is the fifty-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"4.0.0-alpha-1\"></a> Table of Contents\n* [New and noteworthy](#4.0.0-alpha-1-new)\n* [Fixed issues](#4.0.0-alpha-1-fixes)\n* [Deprecations](#4.0.0-alpha-1-deprecated)\n* [Potential breaking changes](#4.0.0-alpha-1-breaking-changes)\n\n## <a name=\"4.0.0-alpha-1-new\"></a> New and Noteworthy\n### <a name=\"4.0.0-alpha-1-new-arggroups\"></a> Argument Groups (Incubating)\n\nThis release introduces a new `@ArgGroup` annotation and its `ArgGroupSpec` programmatic equivalent.\n\nArgument Groups can be used to define:\n\n* mutually exclusive options\n* options that must co-occur (dependent options)\n* option sections in the usage help message\n* repeating composite arguments\n\nTo create a group using the annotations API, annotate a field or method with `@ArgGroup`.\nThe field's type refers to the class containing the options and positional parameters in the group.\n(For annotated interface methods this would be the return type, for annotated setter methods in a concrete class this would be the setter's parameter type.)\n\nPicocli will instantiate this class as necessary to capture command line argument values in the `@Option` and `@Parameters`-annotated fields and methods of this class.\n\n#### Mutually Exclusive Options\n\nAnnotate a field or method with `@ArgGroup(exclusive = true)` to create a group of mutually exclusive options and positional parameters. For example:\n\n```java\n@Command(name = \"exclusivedemo\")\npublic class MutuallyExclusiveOptionsDemo {\n\n    @ArgGroup(exclusive = true, multiplicity = \"1\")\n    Exclusive exclusive;\n\n    static class Exclusive {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n}\n```\n\nThe above example defines a command with mutually exclusive options `-a`, `-b` and `-c`.\n\nThe group itself has a `multiplicity` attribute that defines how many times the group may be specified within the command.\nThe default is `multiplicity = \"0..1\"`, meaning that by default a group may be omitted or specified once.\nIn this example the group has `multiplicity = \"1\"`, so the group must occur once: one of the exclusive options must occur on the command line.\n\nThe synopsis of this command is `exclusivedemo (-a=<a> | -b=<b> | -c=<c>)`.\n\nNote that the options are defined as `required = true`; this means required _within the group_, not required within the command.\n\nPicocli will validate the arguments and throw a `MutuallyExclusiveArgsException` if multiple mutually exclusive arguments were specified. For example:\n\n```java\nMutuallyExclusiveOptionsDemo example = new MutuallyExclusiveOptionsDemo();\nCommandLine cmd = new CommandLine(example);\n\ntry {\n    cmd.parseArgs(\"-a=1\", \"-b=2\");\n} catch (MutuallyExclusiveArgsException ex) {\n    assert \"Error: -a=<a>, -b=<b> are mutually exclusive (specify only one)\"\n            .equals(ex.getMessage());\n}\n```\n\nFor the above group, only one of the options can be specified. Any other combination of options, or the absence of options, is invalid.\n\n#### Co-occurring (Dependent) Options\n\nAnnotate a field or method with `@ArgGroup(exclusive = false)` to create a group of dependent options and positional parameters that must co-occur. For example:\n\n```java\n@Command(name = \"co-occur\")\npublic class DependentOptionsDemo {\n\n    @ArgGroup(exclusive = false)\n    Dependent dependent;\n\n    static class Dependent {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n}\n```\n\nThe above example defines a command with dependent options `-a`, `-b` and `-c` that must co-occur.\n\nThe group itself has a `multiplicity` attribute that defines how many times the group may be specified within the command.\nIn this example the group uses the default multiplicity, `multiplicity = \"0..1\"`, meaning that the group may be omitted or specified once.\n\nThe synopsis of this command is `co-occur [-a=<a> -b=<b> -c=<c>]`.\n\nNote that the options are defined as `required = true`; this means required _within the group_, not required within the command.\n\nPicocli will validate the arguments and throw a `MissingParameterException` if not all dependent arguments were specified. For example:\n\n```java\nDependentOptionsDemo example = new DependentOptionsDemo();\nCommandLine cmd = new CommandLine(example);\n\ntry {\n    cmd.parseArgs(\"-a=1\", \"-b=2\");\n} catch (MissingParameterException ex) {\n    assert \"Error: Missing required argument(s): -c=<c>\".equals(ex.getMessage());\n}\n```\n\n#### Option Sections in Usage Help\n\nThe example below uses groups to define options sections in the usage help.\nWhen a group has a non-null `heading` (or `headingKey`), the options in the group are given the specified heading in the usage help message.\nThe `headingKey` attribute can be used to get the heading text from the command's resource bundle.\n\nThis works for mutually exclusive or co-occurring groups, but it is also possible to define a group that does no validation but only creates an option section in the usage help.\n\nAnnotate a field or method with `@ArgGroup(validate = false)` to create a group for display purposes only. For example:\n\n```java\n@Command(name = \"sectiondemo\", description = \"Section demo\")\npublic class OptionSectionDemo {\n\n    @ArgGroup(validate = false, heading = \"This is the first section%n\")\n    Section1 section1;\n\n    static class Section1 {\n        @Option(names = \"-a\", description = \"Option A\") int a;\n        @Option(names = \"-b\", description = \"Option B\") int b;\n        @Option(names = \"-c\", description = \"Option C\") int c;\n    }\n\n    @ArgGroup(validate = false, heading = \"This is the second section%n\")\n    Section2 section2;\n\n    static class Section2 {\n        @Option(names = \"-x\", description = \"Option X\") int x;\n        @Option(names = \"-y\", description = \"Option Y\") int y;\n        @Option(names = \"-z\", description = \"Option X\") int z;\n    }\n\n    public static void main(String[] args) {\n        new CommandLine(new OptionSectionDemo()).usage(System.out);\n    }\n}\n```\n\nThis prints the following usage help message:\n```\nUsage: sectiondemo [-a=<a>] [-b=<b>] [-c=<c>] [-x=<x>] [-y=<y>] [-z=<z>]\nSection demo\nThis is the first section\n  -a=<a>    Option A\n  -b=<b>    Option B\n  -c=<c>    Option C\nThis is the second section\n  -x=<x>    Option X\n  -y=<y>    Option Y\n  -z=<z>    Option X\n```\n\nNote that the heading text must end with `%n` to insert a newline between the heading text and the first option.\nThis is for consistency with other headings in the usage help, like `@Command(headerHeading = \"Usage:%n\", optionListHeading = \"%nOptions:%n\")`.\n\n#### Repeating Composite Argument Groups\n\nThe below example shows how groups can be composed of other groups, and how arrays and collections can be used to capture repeating groups (with a `multiplicity` greater than one):\n\n```java\npublic class CompositeGroupDemo {\n\n    @ArgGroup(exclusive = false, multiplicity = \"1..*\")\n    List<Composite> composites;\n\n    static class Composite {\n        @ArgGroup(exclusive = false, multiplicity = \"1\")\n        Dependent dependent;\n\n        @ArgGroup(exclusive = true, multiplicity = \"1\")\n        Exclusive exclusive;\n    }\n\n    static class Dependent {\n        @Option(names = \"-a\", required = true) int a;\n        @Option(names = \"-b\", required = true) int b;\n        @Option(names = \"-c\", required = true) int c;\n    }\n\n    static class Exclusive {\n        @Option(names = \"-x\", required = true) boolean x;\n        @Option(names = \"-y\", required = true) boolean y;\n        @Option(names = \"-z\", required = true) boolean z;\n    }\n}\n```\n\nIn the above example, the annotated `composites` field defines a composite group that must be specified at least once, and may be specified many times, on the command line.\nEach time the group is matched, picocli creates an instance of the `Composite` class and adds it to the `composites` list.\n\nThe `Composite` class itself contains two groups: a group of dependent options that must co-occur, and another group of mutually exclusive options.\nBoth of these subgroups have `multiplicity = \"1\"`, so they can occur exactly once for each multiple of the `Composite` group. The below example illustrates:\n\n```java\nCompositeGroupDemo example = new CompositeGroupDemo();\nCommandLine cmd = new CommandLine(example);\n\ncmd.parseArgs(\"-x\", \"-a=1\", \"-b=1\", \"-c=1\", \"-a=2\", \"-b=2\", \"-c=2\", \"-y\");\nassert example.composites.size() == 2;\n\nComposite c1 = example.composites.get(0);\nassert c1.exclusive.x;\nassert c1.dependent.a == 1;\nassert c1.dependent.b == 1;\nassert c1.dependent.c == 1;\n\nComposite c2 = example.composites.get(1);\nassert c2.exclusive.y;\nassert c2.dependent.a == 2;\nassert c2.dependent.b == 2;\nassert c2.dependent.c == 2;\n```\n\n#### Positional Parameters\n\nWhen a `@Parameters` positional parameter is part of a group, its `index` is the index _within the group_, not within the command.\n\n\n#### Limitations and Points of Caution\n\n* Options with the same name cannot be defined in multiple groups. Similarly, it is not possible to define an option outside of a group with the same name as a different option that is part of a group.\n* Positional parameters in a single group work fine, but take care (or avoid) defining positional parameters in multiple groups or positional parameters in a group as well as outside a group. Positional parameters are matched by index, and while the index of a group is reset when a new group multiple is encountered, the index of positional parameters outside a group only increases and is never reset.\n\n\n## <a name=\"4.0.0-alpha-1-fixes\"></a> Fixed issues\n- [#643] Change `%` to `%%` when using `${DEFAULT-VALUE}` in option description. Thanks to [Steffen Rehberg](https://github.com/StefRe) for the pull request.\n- [#638] Document fallback descriptionKey for options and parameters in user manual. Thanks to [Mikusch](https://github.com/Mikusch) for the suggestion.\n- [#199] mutually exclusive options\n- [#295] options that must co-occur (dependent options)\n- [#450] option grouping in the usage help message\n- [#358] (also [#635]) repeating composite arguments (this should also cover the use cases presented in #454 and #434 requests for repeatable subcommands)\n\n## <a name=\"4.0.0-alpha-1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"4.0.0-alpha-1-breaking-changes\"></a> Potential breaking changes\nNo breaking changes in this release.\n\n\n# <a name=\"3.9.5\"></a> Picocli 3.9.5\nThe picocli community is pleased to announce picocli 3.9.5.\n\nThis release contains a critical workaround to protect against JVM crashes when running on RedHat Linux 3.10.0-327.44.2.el7.x86_64.\n\nPicocli 3.9.0 introduced a change in the heuristics for emitting ANSI escape characters. As part of this change, picocli may load the `org.fusesource.jansi.AnsiConsole` class from the JAnsi library when not running on Windows. This may crash the JVM (see [fusesource/jansi-native#17](https://github.com/fusesource/jansi-native/issues/17)).\n\nThe workaround in this release is to only load the `AnsiConsole` class when running on Windows.\n\nUsers using 3.9.0 and higher are strongly recommended to upgrade to 3.9.5 or later.\n\n\nThis is the fiftieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.5\"></a> Table of Contents\n* [New and noteworthy](#3.9.5-new)\n* [Fixed issues](#3.9.5-fixes)\n* [Deprecations](#3.9.5-deprecated)\n* [Potential breaking changes](#3.9.5-breaking-changes)\n\n## <a name=\"3.9.5-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.9.5-fixes\"></a> Fixed issues\n- [#630] Avoid loading `org.fusesource.jansi.AnsiConsole` when not running on Windows to avoid JVM crashes on non-Windows platforms.\n- [#632] ReflectionConfigGenerator now specifies the `allowWrite = true` attribute for final fields.\n\n## <a name=\"3.9.5-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.5-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.9.4\"></a> Picocli 3.9.4\nThe picocli community is pleased to announce picocli 3.9.4.\n\nThis release contains bugfixes and enhancements.\n\nFrom this release, `enum`-typed options and positional parameters that are multi-value can be stored in `EnumSet` collections (in addition to other Collections, arrays and Maps).\n\nAlso, a better error message is now shown when unknown options are encountered while processing clustered short options. The new error message includes both the failing part and the original command line argument.\n\nBugfixes:\n* `ReflectionConfigGenerator` incorrectly listed superclass fields as fields of the concrete subclass, causing \"GraalVM error: Error parsing reflection configuration in json\" when creating a native image.\n* Method subcommands in commands that subclass another command caused `InitializationException`.\n\n\nThis is the forty-ninth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.4\"></a> Table of Contents\n* [New and noteworthy](#3.9.4-new)\n* [Fixed issues](#3.9.4-fixes)\n* [Deprecations](#3.9.4-deprecated)\n* [Potential breaking changes](#3.9.4-breaking-changes)\n\n## <a name=\"3.9.4-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.9.4-fixes\"></a> Fixed issues\n- [#628] Add support for collecting `enum` multi-value options and positional parameters in `EnumSet<>` collections. Thanks to [Lee Atkinson](https://github.com/leeatkinson) for raising this.\n- [#619] Bugfix: Method subcommands in commands that subclass another command caused `InitializationException`: \"Another subcommand named 'method' already exists...\". Thanks to [PorygonZRocks](https://github.com/PorygonZRocks) for the bug report.\n- [#622] Bugfix: `ReflectionConfigGenerator` incorrectly listed superclass fields as fields of the concrete subclass, causing \"GraalVM error: Error parsing reflection configuration in json\". Thanks to [Sebastian Thomschke](https://github.com/sebthom) for the bug report.\n- [#623] `ReflectionConfigGenerator` now generates json in alphabetic order.\n- [#627] Improve error message for unknown options when processing clustered short options.\n\n## <a name=\"3.9.4-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.4-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"3.9.3\"></a> Picocli 3.9.3\nThe picocli community is pleased to announce picocli 3.9.3.\n\nThis release contains bugfixes and enhancements.\n\n\nThis is the forty-eight public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.3\"></a> Table of Contents\n* [New and noteworthy](#3.9.3-new)\n* [Fixed issues](#3.9.3-fixes)\n* [Deprecations](#3.9.3-deprecated)\n* [Potential breaking changes](#3.9.3-breaking-changes)\n\n## <a name=\"3.9.3-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.9.3-fixes\"></a> Fixed issues\n- [#613] Enhancement: Improve picocli heuristics for unmatched options: single-character arguments that don't exactly match options (like `-`) should be considered positional parameters. Thanks to [Oliver Weiler](https://github.com/helpermethod) for the bug report.\n- [#615] Bugfix: Opaque stacktrace for \"%\" in Option description. Thanks to [petermr](https://github.com/petermr) for the bug report.\n- [#616] Bugfix: showDefaultValues=true with defaultValueProvider did not render defaultValues in usage help. Thanks to [Sebastian Thomschke](https://github.com/sebthom) for the bug report.\n\n## <a name=\"3.9.3-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.3-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.9.2\"></a> Picocli 3.9.2\nThe picocli community is pleased to announce picocli 3.9.2.\n\nThis release contains bugfixes and enhancements.\n\nPicocli now has a mailing list `picocli at googlegroups dot com`. Alternatively visit the [picocli Google group](https://groups.google.com/d/forum/picocli) web interface.\n\nThe user manual has improved documentation for internationalization and localization, and the section on Dependency Injection now has a Spring Boot example and link to the Micronaut user manual.\n\nBugfixes: `AutoComplete` now uses the specified `IFactory` correctly for `CommandLine`; defaulting `usageHelp` or `versionHelp` options no longer prevents validation of required options; and usage help for booleans options with `arity = \"1\"` now correctly show the option parameter in the synopsis.\n\nMany thanks to the many members of the picocli community who contributed pull requests, bug reports and participated in discussions!\n\nThis is the forty-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.2\"></a> Table of Contents\n* [New and noteworthy](#3.9.2-new)\n* [Fixed issues](#3.9.2-fixes)\n* [Deprecations](#3.9.2-deprecated)\n* [Potential breaking changes](#3.9.2-breaking-changes)\n\n## <a name=\"3.9.2-new\"></a> New and Noteworthy\n\nPicocli now has a mailing list `picocli at googlegroups dot com`. Alternatively visit the [picocli Google group](https://groups.google.com/d/forum/picocli) web interface.\n\nThe user manual has improved documentation for internationalization and localization. Dependency Injection is now a top-level section and now has a Spring Boot example and link to the Micronaut user manual.\n\n## <a name=\"3.9.2-fixes\"></a> Fixed issues\n- [#602] Make `CommandLine` in `AutoComplete` use correct `IFactory` implementation. Thanks to [Mikołaj Krzyżanowski](https://github.com/MikolajK) for the pull request.\n- [#608] Bugfix: defaulting `usageHelp` or `versionHelp` options incorrectly prevented validation of required options and positional parameters. Thanks to [Pietro Braione](https://github.com/pietrobraione) for the bug report.\n- [#612] Bugfix: Usage help for booleans options with `arity = \"1\"` now correctly show the option parameter in synopsis. Thanks to [prewersk](https://github.com/prewersk) for the bug report.\n- [#606] Doc: Added subcommand example. Thanks to [Andreas Deininger](https://github.com/deining) for the pull request.\n- [#605] Doc: Improved documentation for internationalization and localization. Thanks to [Andreas Deininger](https://github.com/deining) for raising this.\n- [#604] Doc: Improve user manual section on Dependency Injection: add Spring Boot example. Thanks to [Alistair Rutherford](https://github.com/alistairrutherford) for the example code.\n- [#610] Build: add JDKs to Travis CI build.\n- [#609] Created mailing list `picocli at googlegroups dot com`: [picocli Google group](https://groups.google.com/d/forum/picocli).\n\n## <a name=\"3.9.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.9.1\"></a> Picocli 3.9.1\nThe picocli community is pleased to announce picocli 3.9.1.\n\nThe `picocli.AutoComplete` application no longer calls `System.exit()` unless requested by setting system property `picocli.autocomplete.systemExitOnError` or `picocli.autocomplete.systemExitOnSuccess` to any value other than `false`. Applications that rely on the exit codes introduced in picocli 3.9.0 need to set these system properties.\n\nThis release adds support for quoted map keys with embedded '=' characters.\n\nThis release contains bugfixes and enhancements.\n\nThis is the forty-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.1\"></a> Table of Contents\n* [New and noteworthy](#3.9.1-new)\n* [Fixed issues](#3.9.1-fixes)\n* [Deprecations](#3.9.1-deprecated)\n* [Potential breaking changes](#3.9.1-breaking-changes)\n\n## <a name=\"3.9.1-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.9.1-fixes\"></a> Fixed issues\n- [#592] Error message now shows `enum` constant names, not `toString()` values, after value mismatch. Thanks to [startewho](https://github.com/startewho) for the bug report.\n- [#591] Replace some String concatenation in `picocli.AutoComplete` with StringBuilder. Thanks to [Sergio Escalante](https://github.com/sergioescala) for the pull request.\n- [#594] Add support for quoted map keys with embedded '=' characters. Thanks to [Pubudu Fernando](https://github.com/pubudu91) for the suggestion.\n- [#596] `picocli.AutoComplete` should not call `System.exit()` unless requested. Thanks to [Markus Heiden](https://github.com/markusheiden), [Bob Tiernay](https://github.com/bobtiernay-okta) and [RobertZenz](https://github.com/RobertZenz) for analysis and ideas contributing to the solution.\n- [#593] Use Gradle Bintray Plugin to publish artifacts to Bintray.\n\n## <a name=\"3.9.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.1-breaking-changes\"></a> Potential breaking changes\nThe `picocli.AutoComplete` application no longer calls `System.exit()` unless requested by setting system property `picocli.autocomplete.systemExitOnError` or `picocli.autocomplete.systemExitOnSuccess` to any value other than `false`.\nApplications that rely on the exit codes introduced in picocli 3.9.0 need to set these system properties.\n\nThe new support for quoted map keys with embedded '=' characters [#594] may impact some existing applications.\nIf `CommandLine::setTrimQuotes()` is set to `true`, quotes are now removed from map keys and map values. This did not use to be the case.\n\nFor example:\n\n```java\nclass App {\n    @Option(names = \"-p\") Map<String, String> map;\n}\n```\nWhen `CommandLine::setTrimQuotes()` was set to `true`, given input like the below:\n\n```\n-p AppOptions=\"-Da=b -Dx=y\"\n```\nThe above used to result in a map with key `AppOptions` and value `\"-Da=b -Dx=y\"` (including the quotes), but the same program and input now results in a map with key `AppOptions` and value `-Da=b -Dx=y` (without quotes).\n\nAlso, when `CommandLine::setTrimQuotes()` is `false` (the default), input like the below will now cause a `ParameterException` (\"value should be in KEY=VALUE format\"):\n\n```\n-p \"AppOptions=-Da=b -Dx=y\"\n```\nPrior to this release, the above was silently ignored (no errors but also no key-value pairs in the resulting map).\n\n\n# <a name=\"3.9.0\"></a> Picocli 3.9.0\nThe picocli community is pleased to announce picocli 3.9.0.\n\nThis release contains bugfixes and enhancements in the main picocli module, and adds a new module: `picocli-shell-jline3`.\n\nThe new module Picocli Shell JLine3 (`picocli-shell-jline3`) contains components and documentation for building\ninteractive shell command line applications with JLine 3 and picocli.\n\nThis release contains API enhancements to allow customization of the usage help message:\n\n* help section renderers can be added, replaced or removed\n* help section keys to reorder sections in the usage help message\n* help factory to create custom `Help` instances\n* option order attribute to reorder options in the usage help message option list\n\nThis release also has improved heuristics to decide whether ANSI escape codes should be emitted or not.\n\nThe simplified @-file (argument file) format is now fully compatible with JCommander: empty lines are ignored and comments may start with leading whitespace.\n\nThe `picocli.Autocompletion` application now accepts a parameter specifying a custom factory, and returns a non-zero exit code on error, to facilitate incorporating it into the build.\n\nBug fixes in this release:\n\n* `@Command` method options and positional parameter values are now cleared correctly when reusing a `CommandLine` instance\n* the default exception handler now correctly respects the exit code for all exceptions\n\nFinally, this release improves internal quality and robustness by increasing the test code coverage. About 300 tests were added to bring the total to 1300+ tests. This improved line coverage to 98% (was 88%) and complexity coverage to 98% (was 82%).\n\nThis is the forty-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.9.0\"></a> Table of Contents\n* [New and noteworthy](#3.9.0-new)\n* [Fixed issues](#3.9.0-fixes)\n* [Deprecations](#3.9.0-deprecated)\n* [Potential breaking changes](#3.9.0-breaking-changes)\n\n## <a name=\"3.9.0-new\"></a> New and Noteworthy\n\n### <a name=\"3.9.0-helpsectionrenderer\"></a> Help Section Renderer API\n\nThis release introduces new API to facilitate customizing the usage help message: `IHelpFactory` allows applications to plug in `Help` subclasses, and `IHelpSectionRenderer` allows applications to add custom sections to the usage help message, or redefine existing sections.\n\nThe usage help message is no longer hard-coded, but is now constructed from the section renderers defined in `CommandLine::getHelpSectionMap` (or `UsageMessageSpec::sectionMap` for a single `CommandSpec`).\n\nBy default this map contains the predefined section renderers:\n\n```java\n// The default section renderers delegate to methods in Help for their implementation\n// (using Java 8 lambda notation for brevity):\nMap<String, IHelpSectionRenderer> map = new HashMap<>();\nmap.put(SECTION_KEY_HEADER_HEADING,         help -> help.headerHeading());\nmap.put(SECTION_KEY_HEADER,                 help -> help.header());\n\n//e.g. Usage:\nmap.put(SECTION_KEY_SYNOPSIS_HEADING,       help -> help.synopsisHeading());\n\n//e.g. <cmd> [OPTIONS] <subcmd> [COMMAND-OPTIONS] [ARGUMENTS]\nmap.put(SECTION_KEY_SYNOPSIS,               help -> help.synopsis(help.synopsisHeadingLength()));\n\n//e.g. %nDescription:%n%n\nmap.put(SECTION_KEY_DESCRIPTION_HEADING,    help -> help.descriptionHeading());\n\n//e.g. {\"Converts foos to bars.\", \"Use options to control conversion mode.\"}\nmap.put(SECTION_KEY_DESCRIPTION,            help -> help.description());\n\n//e.g. %nPositional parameters:%n%n\nmap.put(SECTION_KEY_PARAMETER_LIST_HEADING, help -> help.parameterListHeading());\n\n//e.g. [FILE...] the files to convert\nmap.put(SECTION_KEY_PARAMETER_LIST,         help -> help.parameterList());\n\n//e.g. %nOptions:%n%n\nmap.put(SECTION_KEY_OPTION_LIST_HEADING,    help -> help.optionListHeading());\n\n//e.g. -h, --help   displays this help and exits\nmap.put(SECTION_KEY_OPTION_LIST,            help -> help.optionList());\n\n//e.g. %nCommands:%n%n\nmap.put(SECTION_KEY_COMMAND_LIST_HEADING,   help -> help.commandListHeading());\n\n//e.g.    add       adds the frup to the frooble\nmap.put(SECTION_KEY_COMMAND_LIST,           help -> help.commandList());\nmap.put(SECTION_KEY_FOOTER_HEADING,         help -> help.footerHeading());\nmap.put(SECTION_KEY_FOOTER,                 help -> help.footer());\n```\n\nApplications can add, remove or replace sections in this map. The `CommandLine::getHelpSectionKeys` method (or `UsageMessageSpec::sectionKeys` for a single `CommandSpec`) returns the section keys in the order that the usage help message should render the sections. The default keys are (in order):\n1. SECTION_KEY_HEADER_HEADING\n1. SECTION_KEY_HEADER\n1. SECTION_KEY_SYNOPSIS_HEADING\n1. SECTION_KEY_SYNOPSIS\n1. SECTION_KEY_DESCRIPTION_HEADING\n1. SECTION_KEY_DESCRIPTION\n1. SECTION_KEY_PARAMETER_LIST_HEADING\n1. SECTION_KEY_PARAMETER_LIST\n1. SECTION_KEY_OPTION_LIST_HEADING\n1. SECTION_KEY_OPTION_LIST\n1. SECTION_KEY_COMMAND_LIST_HEADING\n1. SECTION_KEY_COMMAND_LIST\n1. SECTION_KEY_FOOTER_HEADING\n1. SECTION_KEY_FOOTER\n\nThis ordering may be modified with the `CommandLine::setHelpSectionKeys` setter method (or `UsageMessageSpec::sectionKeys(List)` for a single `CommandSpec`).\n\n\n### <a name=\"3.9.0-order\"></a> Option `order` Attribute\n\nOptions are sorted alphabetically by default, but this can be switched off by specifying `@Command(sortOptions = false)` on the command declaration. This displays options in the order they are declared.\n\nHowever, when mixing `@Option` methods and `@Option` fields, options do not reliably appear in declaration order.\n\nThe `@Option(order = <int>)` attribute can be used to explicitly control the position in the usage help message at which the option should be shown. Options with a lower number are shown before options with a higher number.\n\n\n### <a name=\"3.9.0-picocli-shell-jline3\"></a> New Module `picocli-shell-jline3`\nPicocli Shell JLine3 contains components and documentation for building interactive shell command line applications with JLine 3 and picocli.\n\nThis release contains the `picocli.shell.jline3.PicocliJLineCompleter` class.\n`PicocliJLineCompleter` is a small component that generates completion candidates to allow users to get command line TAB auto-completion for a picocli-based application running in a JLine 3 shell.\nIt is similar to the class with the same name in the `picocli.shell.jline2` package in the `picocli-shell-jline2` module.\n\nSee the module's [README](https://github.com/remkop/picocli/blob/main/picocli-shell-jline3/README.md) for more details.\n\n### <a name=\"3.9.0-ANSI-heuristics\"></a> Improved ANSI Heuristics\nThis release has improved heuristics to decide whether ANSI escape codes should be emitted or not.\n\nSupport was added for the following environment variables to control enabling ANSI:\n\n* [`NO_COLOR`](https://no-color.org/)\n* [`CLICOLOR_FORCE`](https://bixense.com/clicolors/)\n* [`CLICOLOR`](https://bixense.com/clicolors/)\n* [`ConEmuANSI`](https://conemu.github.io/en/AnsiEscapeCodes.html#Environment_variable)\n* [`ANSICON`](https://github.com/adoxa/ansicon/blob/master/readme.txt)\n\n## <a name=\"3.9.0-fixes\"></a> Fixed issues\n- [#574] Add `picocli-shell-jline3` module. Thanks to [mattirn](https://github.com/mattirn) for the pull request.\n- [#587] Enhance `picocli-shell-jline3` example by using JLine's `DefaultParser` to split lines into arguments. Thanks to [mattirn](https://github.com/mattirn) for the pull request.\n- [#567] Usage message customization API initial implementation. Thanks to [Christian Helmer](https://github.com/SysLord) for the pull request.\n- [#530] Added API for easily customizing the usage help message. Thanks to [stechio](https://github.com/stechio) for raising the request and productive discussions.\n- [#569] Facilitate customization of the synopsis: split `Help.detailedSynopsis()` into protected methods.\n- [#508] Annotation API: added `@Option(order = <int>)` attribute to allow explicit control of option ordering in the usage help message; useful when mixing methods and fields with `@Option` annotation.\n- [#588] Added method `CommandSpec.names` returning both `name` and `aliases`.\n- [#578] Add API for simplified @files argument files.\n- [#573] Make simplified @files JCommander-compatible: ignore empty lines and comments starting with whitespace. Thanks to [Lukáš Petrovický](https://github.com/triceo) for the pull request with test to reproduce the issue.\n- [#572] `CommandSpec.addMethodSubcommands` now throws `picocli.CommandLine.InitializationException` instead of `java.lang.UnsupportedOperationException` when the user object of the parent command is a `java.lang.reflect.Method`.\n- [#581] Added support for ConEmu, ANSICON and other environment variables to improve the ANSI heuristics. Documented the heuristics in the user manual.\n- [#579] Improved `AutoComplete` error message when not overwriting existing files.\n- [#585] `picocli.AutoComplete` now accepts a parameter specifying a custom `IFactory` implementation. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n- [#582] `picocli.AutoComplete` now returns a non-zero return code on error. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the suggestion.\n- [#570] Bugfix: Command method options and positional parameter Object values are now cleared correctly when reusing CommandLine. Thanks to [Christian Helmer](https://github.com/SysLord) for the pull request.\n- [#576] Bugfix: fixed StringIndexOutOfBoundsException in shell-jline2 completion when cursor was before `=` when option parameter was attached to option name.\n- [#583] Bugfix: Default exception handler now exits on exception if exitCode was set, regardless of exception type.\n- [#584] Add documentation for generating autocompletion script during a Maven build. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta).\n- [#586] Replace Ansi.Text.clone() with copy constructor.\n- [#571] Improve test code coverage. Added ~300 tests to bring the total to 1300+ tests. Improved line coverage to 98% (was 88%) and complexity coverage to 98% (was 82%).\n- [#590] Fail the build if test coverage falls below minimum threshold.\n- [#589] Fix index.adoc to eliminate warnings; suppress javadoc warnings.\n- [#566] Add example showing how to customize the usage help message to show the full command tree including nested subcommands. Thanks to [lgawron](https://github.com/lgawron) for the request.\n\n## <a name=\"3.9.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.9.0-breaking-changes\"></a> Potential breaking changes\n`CommandSpec.addMethodSubcommands` now throws `InitializationException` instead of `java.lang.UnsupportedOperationException` when the user object of the parent command is a `java.lang.reflect.Method`.\n\nAutoComplete application now prints different error message when not overwriting existing script files. This may break tests that verify the console output.\n\n\n# <a name=\"3.8.2\"></a> Picocli 3.8.2\nThe picocli community is pleased to announce picocli 3.8.2.\n\nThis release contains bugfixes only.\n\nWhen running a native image with Graal, ANSI colors are now shown correctly.\n\nThis is the forty-forth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.8.2\"></a> Table of Contents\n* [New and noteworthy](#3.8.2-new)\n* [Fixed issues](#3.8.2-fixes)\n* [Deprecations](#3.8.2-deprecated)\n* [Potential breaking changes](#3.8.2-breaking-changes)\n\n## <a name=\"3.8.2-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.8.2-fixes\"></a> Fixed issues\n- [#557] Bugfix: No colors are shown when compiling to a native image with Graal on MacOS. Thanks to [Oliver Weiler](https://github.com/helpermethod) for the bug report.\n\n## <a name=\"3.8.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.8.2-breaking-changes\"></a> Potential breaking changes\nThis is a patch release and has no breaking changes.\n\n\n# <a name=\"3.8.1\"></a> Picocli 3.8.1\nThe picocli community is pleased to announce picocli 3.8.1.\n\nThis release contains bugfixes and minor enhancements.\n\nCommand methods explicitly throwing a `ParametersException` is now correctly handled by picocli, showing the error message and the usage help message.\n\nThis release adds support for JCommander-style argument files (one argument per line, no quoting) and better tracing.\n\nMany thanks to the many members of the picocli community who contributed!\n\nThis is the forty-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.8.1\"></a> Table of Contents\n* [New and noteworthy](#3.8.1-new)\n* [Fixed issues](#3.8.1-fixes)\n* [Deprecations](#3.8.1-deprecated)\n* [Potential breaking changes](#3.8.1-breaking-changes)\n\n## <a name=\"3.8.1-new\"></a> New and Noteworthy\n\n### <a name=\"3.8.0-simplified-argument-files\"></a> Simplified Argument Files\n\nIn this argument file format every line (except comment lines) is interpreted as a single argument. Arguments containing whitespace do not need to be quoted, but it is not possible to have arguments with embedded newlines.\n\nSet system property `picocli.useSimplifiedAtFiles` without a value or with value `\"true\"` (case-insensitive) to enable this simpler argument file format.\n\nThis format is similar to the way JCommander processes argument files, which makes it easier for command line applications to migrate from JCommander to picocli.\n\n### <a name=\"3.8.1-improved-tracing\"></a> Improved Tracing\n\nThe following information has been added to the tracing output in this release:\n\n* Version information (picocli version, java version, os version), logged at INFO level\n* ANSI enabled status, logged at DEBUG level\n* Log at DEBUG level when a Map or Collection binding for an option or positional parameter is initialized with a new instance\n* Log at DEBUG level when parameters are being split (into how many parts, show resulting parts)\n\n\n## <a name=\"3.8.1-fixes\"></a> Fixed issues\n- [#551] Enhancement: Add support for JCommander-style argument files (one argument per line, no quoting). Thanks to [Lukáš Petrovický](https://github.com/triceo) for the bug report and unit tests.\n- [#562] Enhancement: Allow for enabling quote trimming via system property `picocli.trimQuotes`. Thanks to [Lukáš Petrovický](https://github.com/triceo) for the pull request.\n- [#560] Enhancement: Better tracing.\n- [#554] Bugfix: Convenience method error handling was broken for command methods that explicitly throw an ParameterException: InvocationTargetException hides the ParameterException. Thanks to [SysLord](https://github.com/SysLord) for the bug report.\n- [#553] Doc: Fix broken link to CommandLine.java source code. Thanks to [Simon Legner](https://github.com/simon04) for the pull request.\n- [#563] Doc: Improve documentation for explicitly showing usage help from subcommands. Thanks to [Steve Johnson](https://github.com/Blatwurst) for raising this issue.\n\n## <a name=\"3.8.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.8.1-breaking-changes\"></a> Potential breaking changes\nThis is a patch release and has no breaking changes.\n\n\n# <a name=\"3.8.0\"></a> Picocli 3.8.0\nThe picocli community is pleased to announce picocli 3.8.0.\n\nThis release contains bugfixes and minor enhancements.\n\n`@Command` methods now support `@Mixin` parameters. `OverwrittenOptionException` now has an accessor for the `ArgSpec` that was overwritten.\n\nThe `ReflectionConfigGenerator` tool in the `picocli-codegen` module now correctly generates configuration for `@Mixin` fields.\n\nMany thanks to the many members of the picocli community who contributed!\n\nThis is the forty-second public release.\nPicocli follows [semantic versioning](http://semver.org/). (This release could have been called 3.7.1 except that it has a minor additional API change, which means it cannot be called a patch release by semver rules.)\n\n## <a name=\"3.8.0\"></a> Table of Contents\n* [New and noteworthy](#3.8.0-new)\n* [Fixed issues](#3.8.0-fixes)\n* [Deprecations](#3.8.0-deprecated)\n* [Potential breaking changes](#3.8.0-breaking-changes)\n\n## <a name=\"3.8.0-new\"></a> New and Noteworthy\n\n### <a name=\"3.8.0-command-method-mixins\"></a> Mixin Support in `@Command` Methods\n\n`@Command` methods now accept `@Mixin` parameters. All options and positional parameters defined in the mixin class are added to the command.\n\nExample:\n\n```java\nclass CommonParams {\n    @Option(names = \"-x\") int x;\n    @Option(names = \"-y\") int y;\n}\n\nclass App {\n    @Command\n    public void doit(@Mixin CommonParams params, @Option(names = \"-z\") int z) {}\n}\n```\n\nIn the above example, the `-x` and `-y` options are added to the other options of the `doit` command.\n\n## <a name=\"3.8.0-fixes\"></a> Fixed issues\n- [#525] Enhancement: Allow `@Mixin` parameters in `@Command` methods. Thanks to [Paul Horn](https://github.com/knutwalker) for the pull request.\n- [#532] Enhancement: `OverwrittenOptionException` now has an accessor for the `ArgSpec` that was overwritten. Thanks to [Steven Fontaine](https://github.com/acid1103) for the pull request.\n- [#524] Enhancement/Bugfix: `ReflectionConfigGenerator` in `picocli-codegen` should generate configuration for `@Mixin` fields. Thanks to [Paul Horn](https://github.com/knutwalker) for the pull request.\n- [#301] Enhancement/Bugfix: The subcommand listing now correctly renders `%n` as line breaks in the brief description for each subcommand. Thanks to [Vlad Topala](https://github.com/topalavlad) for the pull request.\n- [#523] Bugfix: Array should be initialized before calling setter method. Thanks to [Paul Horn](https://github.com/knutwalker) for the pull request.\n- [#527] Bugfix: Quoting logic did not work for some Unicode code points.\n- [#531] Bugfix: Usage help should not show space between short option name and parameter (for options that only have a short name).\n- [#538] Bugfix: Command methods and interface methods should pass `null` for unmatched primitive wrapper options.\n- [#547] Bugfix: Fix infinite loop when print help. Thanks to [Patrick Kuo](https://github.com/patrickkuo) for the pull request.\n- [#528] Doc: Javadoc for xxxHandler API referred to non-existant prototypeReturnValue.\n- [#545] Doc: Include mention of command methods for options using collections. Thanks to [Bob Tiernay](https://github.com/bobtiernay-okta) for the pull request.\n\n\n## <a name=\"3.8.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.8.0-breaking-changes\"></a> Potential breaking changes\n\n### Help Layout\n\nThe usage help no longer shows a space between short option names and the parameter (for options that only have a short name).\nThis may break tests that rely on the exact output format.\n\nBefore:\n```\nUsage: times [-l=<arg0>] [-r=<arg1>]\n  -l= <arg0>\n  -r= <arg1>\n```\n\nAfter:\n```\nUsage: times [-l=<arg0>] [-r=<arg1>]\n  -l=<arg0>\n  -r=<arg1>\n```\n\n### Unmatched Primitive Wrapper Type Options\n\nAnother behavioral change is that command methods now pass in `null` for primitive wrapper options that were not matched on the command line.\nThis impacts methods annotated with `@Command`, and interface methods annotated with `@Option`. Classes annotated with `@Command` already behaved like this and this has not changed.\n\nThis behaviour is now consistent for all annotation-based and programmatic ways of defining commands.\n\n\n# <a name=\"3.7.0\"></a> Picocli 3.7.0\nThe picocli community is pleased to announce picocli 3.7.0.\n\nThis release contains bugfixes and enhancements in the main picocli module, and adds two new modules:\n`picocli-codegen` and `picocli-shell-jline2`.\n\nPicocli Code Generation (`picocli-codegen`) contains tools for generating source code, documentation and configuration files\nfor picocli-based applications.\n\nPicocli Shell JLine2 (`picocli-shell-jline2`) contains components and documentation for building\ninteractive shell command line applications with JLine 2 and picocli.\n\nMany thanks to the many members of the picocli community who contributed!\n\nThis is the forty-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.7.0\"></a> Table of Contents\n* [New and noteworthy](#3.7.0-new)\n* [Fixed issues](#3.7.0-fixes)\n* [Deprecations](#3.7.0-deprecated)\n* [Potential breaking changes](#3.7.0-breaking-changes)\n\n## <a name=\"3.7.0-new\"></a> New and Noteworthy\n\n### <a name=\"3.7.0-quoting\"></a> Improved Parsing of Quoted Values\nThis release improves parser behaviour of quoted arguments:\n\n* Quotes around command line parameters are now preserved by default (previously they were removed). This can be configured with `CommandLine::setTrimQuotes`.\n* When [splitting](https://picocli.info/#_split_regex) parameters, quoted strings are no longer split. This can be configured with `CommandLine::setSplitQuotedStrings`.\n\nExample:\n```\n@Option(names = \"-x\", split = \",\")\nString[] parts;\n```\n\nGiven input like below:\n\n```\n<command> -x a,b,\"c,d,e\",f,\"xxx,yyy\"\n```\nThis results in the `parts` array having the following values:\n```\na\nb\n\"c,d,e\"\nf\n\"xxx,yyy\"\n```\n\n### <a name=\"3.7.0-picocli-codegen\"></a> New Module `picocli-codegen`\nPicocli Code Generation contains tools for generating source code, documentation and configuration files\nfor picocli-based applications.\n\nThis release contains the `ReflectionConfigGenerator` class.\n`ReflectionConfigGenerator` generates a JSON String with the program elements that will be accessed reflectively in a picocli-based application, in order to compile this application ahead-of-time into a native executable with GraalVM.\n\nThe output of `ReflectionConfigGenerator` is intended to be passed to the `-H:ReflectionConfigurationFiles=/path/to/reflectconfig` option of the `native-image` GraalVM utility. This allows picocli-based applications to be compiled to a native image.\n\nSee [Picocli on GraalVM: Blazingly Fast Command Line Apps](https://github.com/remkop/picocli/wiki/Picocli-on-GraalVM:-Blazingly-Fast-Command-Line-Apps) for details.\n\nThe module's [README](https://github.com/remkop/picocli/blob/main/picocli-codegen/README.md) explains how to configure your build to generate the configuration file automatically as part of your build.\n\n\n### <a name=\"3.7.0-picocli-shell-jline2\"></a> New Module `picocli-shell-jline2`\nPicocli Shell JLine2 contains components and documentation for building\ninteractive shell command line applications with JLine 2 and picocli.\n\nThis release contains the `PicocliJLineCompleter` class.\n`PicocliJLineCompleter` is a small component that generates completion candidates to allow users to\nget command line TAB auto-completion for a picocli-based application running in a JLine 2 shell.\n\nSee the module's [README](https://github.com/remkop/picocli/blob/main/picocli-shell-jline2/README.md) for more details.\n\n## <a name=\"3.7.0-fixes\"></a> Fixed issues\n- [#503] Build: Upgrade to gradle 4.10.2.\n- [#497] add module `picocli-shell-jline2` for components and documentation for building interactive shell command line applications with JLine 2 and picocli.\n- [#499] add module `picocli-codegen` for tools to generate documentation, configuration, source code and other files from a picocli model\n- [#410] add `ReflectionConfigGenerator` class for GraalVM `native-image`\n- [#513] Enhancement: Simplify AutoCompletion script generator code.\n- [#481] Enhancement: Add `@Command(usageHelpWidth = <int>)` annotation attribute.\n- [#379] Option with split property should not split quoted strings. Thanks to [Markus Kramer](https://github.com/MarkusKramer) for the feature request.\n- [#514] Bugfix/Enhancement: picocli no longer removes opening and closing quotes around arguments by default. This is configurable with `CommandLine::setTrimQuotes`. Thanks to [mshatalov](https://github.com/mshatalov) for the bug report.\n- [#509] Bugfix: Long boolean options with arity 0 should not allow parameters.  Thanks to [Adam Zegelin](https://github.com/zegelin) for the bug report.\n- [#510] Documentation: Fix broken link for moved example files. Thanks to [Anthony Keenan](https://github.com/anthonykeenan) for the pull request.\n-  [#24] Documentation: Added Chinese translations of \"Picocli 2.0 Do More With Less\" and \"Picocli 2.0 Groovy Scripts on Steroids\".\n\n## <a name=\"3.7.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.7.0-breaking-changes\"></a> Potential breaking changes\n\nFrom this release, picocli no longer removes opening and closing quotes around arguments by default.\nThis is configurable with `CommandLine::setTrimQuotes`.\n\n\n# <a name=\"3.6.1\"></a> Picocli 3.6.1\nThe picocli community is pleased to announce picocli 3.6.1.\n\nThis release contains bugfixes, minor enhancements and documentation improvements.\n\nANSI is automatically enabled on Windows if Jansi's `AnsiConsole` has been installed.\n\nIt is now possible to selectively avoid loading type converters with reflection.\n\nBugfix: Enum values were not rendered in `${COMPLETION-CANDIDATES}` for collection type options.\n\nMany thanks to the many members of the picocli community who contributed!\n\nThis is the fortieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.6.1\"></a> Table of Contents\n* [New and noteworthy](#3.6.1-new)\n* [Fixed issues](#3.6.1-fixes)\n* [Deprecations](#3.6.1-deprecated)\n* [Potential breaking changes](#3.6.1-breaking-changes)\n\n## <a name=\"3.6.1-new\"></a> New and Noteworthy\n\n## <a name=\"3.6.1-fixes\"></a> Fixed issues\n- [#487] Enhancement: Auto-completion script should return from `generateOptionsSwitch` immediately if there is nothing to generate. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n- [#483][#486] Enhancement: Improve `Help.Ansi.AUTO`: automatically enable ANSI on Windows if Jansi's `AnsiConsole` has been installed. Thanks to [Philippe Charles](https://github.com/charphi) for the pull request.\n- [#491] Enhancement: Improve `Help.Ansi.AUTO` cygwin/msys detection on Windows.\n- [#451] Enhancement: Selectively disable reflective type converter registration. Thanks to [Paolo Di Tommaso](https://github.com/pditommaso) for the suggestion.\n- [#488] Doc: Clarify in user manual that `CommandLine.setPosixClusteredShortOptionsAllowed(false)` means that option parameters cannot be attached to the option name. Thanks to [Maryam Ziyad](https://github.com/MaryamZi) for raising this.\n- [#492][#493] Doc: Add section on `@Command(aliases)` attribute to user manual. Thanks to [marinier](https://github.com/marinier) for the pull request.\n- [#494] Bugfix: Enum values were not rendered in `${COMPLETION-CANDIDATES}` for collection type options.\n\n## <a name=\"3.6.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.6.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.6.0\"></a> Picocli 3.6.0\nThe picocli community is pleased to announce picocli 3.6.0.\n\nThis release contains new features, bugfixes and enhancements.\n\nNew interface: `IDefaultProvider` allows you to get default values from a configuration file or some other central place.\n\n`@Command` Methods: From this release, methods can be annotated with `@Command`. The method parameters provide the command options and parameters.\n\nInternationalization: from this release, usage help message sections and the description for options and positional parameters can be specified in a resource bundle. A resource bundle can be set via annotations and programmatically.\n\nThe error message on invalid user input has been improved.\n\nThis release also contains various improvements the the bash/zsh completion script generation to be more consistent with standard completion on these shells.\n\nMany thanks to the many members of the picocli community who raised issues and contributed solutions!\n\nThis is the thirty-ninth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.6.0\"></a> Table of Contents\n* [New and noteworthy](#3.6.0-new)\n* [Fixed issues](#3.6.0-fixes)\n* [Deprecations](#3.6.0-deprecated)\n* [Potential breaking changes](#3.6.0-breaking-changes)\n\n## <a name=\"3.6.0-new\"></a> New and Noteworthy\n### Default Provider\n\nThis release allows you to specify a default provider in the `@Command` annotation:\n\n```java\n@Command(defaultValueProvider = MyDefaultProvider.class)\nclass MyCommand // ...\n```\n\nThe default provider allows you to get default values from a configuration file or some other central place.\nDefault providers need to implement the `picocli.CommandLine.IDefaultValueProvider` interface:\n\n```java\npublic interface IDefaultValueProvider {\n\n    /**\n     * Returns the default value for an option or positional parameter or {@code null}.\n     * The returned value is converted to the type of the option/positional parameter\n     * via the same type converter used when populating this option/positional\n     * parameter from a command line argument.\n     *\n     * @param argSpec the option or positional parameter, never {@code null}\n     * @return the default value for the option or positional parameter, or {@code null} if\n     *       this provider has no default value for the specified option or positional parameter\n     * @throws Exception when there was a problem obtaining the default value\n     */\n    String defaultValue(ArgSpec argSpec) throws Exception;\n}\n```\n\n### `@Command` Methods\nFrom picocli 3.6, methods can be annotated with `@Command`. The method parameters provide the command options and parameters. For example:\n\n```java\nclass Cat {\n    public static void main(String[] args) {\n        CommandLine.invoke(\"cat\", Cat.class, args);\n    }\n\n    @Command(description = \"Concatenate FILE(s) to standard output.\",\n             mixinStandardHelpOptions = true, version = \"3.6.0\")\n    void cat(@Option(names = {\"-E\", \"--show-ends\"}) boolean showEnds,\n             @Option(names = {\"-n\", \"--number\"}) boolean number,\n             @Option(names = {\"-T\", \"--show-tabs\"}) boolean showTabs,\n             @Option(names = {\"-v\", \"--show-nonprinting\"}) boolean showNonPrinting,\n             @Parameters(paramLabel = \"FILE\") File[] files) {\n        // process files\n    }\n}\n```\nThe usage help of the above command looks like this:\n\n```\nUsage: cat [-EhnTvV] [FILE...]\nConcatenate FILE(s) to standard output.\n      [FILE...]\n  -E, --show-ends\n  -h, --help               Show this help message and exit.\n  -n, --number\n  -T, --show-tabs\n  -v, --show-nonprinting\n  -V, --version            Print version information and exit.\n```\nSee below for an example that uses a resource bundle to define usage help descriptions outside the code.\n\nFor positional parameters, the `@Parameters` annotation may be omitted on method parameters.\n\nTIP: If compiled with the `-parameters` flag on Java 8 or higher, the `paramLabel` of positional parameters is obtained from the method parameter name using reflection instead of the generic arg0, arg1, etc.\n\n#### Subcommand Methods\n\nIf the enclosing class is annotated with `@Command`, method commands are added as subcommands to the class command, unless the class command has attribute `@Command(addMethodSubcommands = false)`.\nFor example:\n\n```java\n@Command(name = \"git\", mixinStandardHelpOptions = true, version = \"picocli-3.6.0\")\nclass Git {\n    @Option(names = \"--git-dir\", descriptionKey = \"GITDIR\")\n    Path path;\n\n    @Command\n    void commit(@Option(names = {\"-m\", \"--message\"}) String commitMessage,\n                @Option(names = \"--squash\", paramLabel = \"<commit>\") String squash,\n                @Parameters(paramLabel = \"<file>\") File[] files) {\n        // ... implement business logic\n    }\n}\n```\n\nUse `@Command(addMethodSubcommands = false)` on the class `@Command` annotation if the `@Command`-annotated methods in this class should not be added as subcommands.\n\nThe usage help of the `git commit` command looks like this:\n\n```\nUsage: git commit [--squash=<commit>] [-m=<arg0>] [<file>...]\n      [<file>...]\n      --squash=<commit>\n  -m, --message=<arg0>\n```\n\n\n### Internationalization\n\nFrom version 3.6, usage help message sections and the description for options and positional parameters can be specified in a resource bundle. A resource bundle can be set via annotations and programmatically.\n\nAnnotation example:\n\n```java\n@Command(name = \"i18n-demo\", resourceBundle = \"my.org.I18nDemo_Messages\")\nclass I18nDemo {}\n```\n\nProgrammatic example:\n\n```java\n@Command class I18nDemo2 {}\n\nCommandLine cmd = new CommandLine(new I18nDemo2());\ncmd.setResourceBundle(ResourceBundle.getBundle(\"my.org.I18nDemo2_Messages\"));\n```\n\n\nResources for multiple commands can be specified in a single ResourceBundle. Keys and their value can be shared by multiple commands (so you don't need to repeat them for every command), but keys can be prefixed with `fully qualified command name + \".\"` to specify different values for different commands. The most specific key wins.\n\nThis is especially convenient for `@Command` methods where long description annotations would make the code less easy to read.\n\nYou can use a resource bundle to move the descriptions out of the code:\n\n```\n# shared between all commands\nhelp = Show this help message and exit.\nversion = Print version information and exit.\n\n# command-specific strings\ngit.usage.description = Version control system\ngit.GITDIR = Set the path to the repository\n\ngit.commit.usage.description = Record changes to the repository\ngit.commit.message = Use the given <msg> as the commit message.\ngit.commit.squash = Construct a commit message for use with rebase --autosquash.\ngit.commit.<file>[0..*] = The files to commit.\n```\n\nWith this resource bundle, the usage help for the above `git commit` command looks like this:\n\n\n```\nUsage: git commit [--squash=<commit>] [-m=<arg0>] [<file>...]\nRecord changes to the repository\n      [<file>...]         The files to commit.\n      --squash=<commit>   Construct a commit message for use with rebase\n                            --autosquash.\n  -m, --message=<arg0>    Use the given <msg> as the commit message.\n```\n\n### Improved Error Messages\n\nThe error messages on invalid input have been improved. For example:\n\nPreviously, if an argument could not be converted to a primitive type, the error looked like this:\n\n`Could not convert 'abc' to int for option '-num': java.lang.NumberFormatException: For input string: \\\"abc\\\"`\n\nThe new error message for primitive types looks like this:\n\n`Invalid value for option '-num': 'abc' is not an int`\n\nPreviously, if an argument could not be converted to an enum, the error looked like this:\n\n`Could not convert 'xyz' to TimeUnit for option '-timeUnit': java.lang.IllegalArgumentException: No enum constant java.util.concurrent.TimeUnit.xyz`\n\nThe new error message for enums looks like this:\n\n`Invalid value for option '-timeUnit': expected one of [NANOSECONDS, MILLISECONDS, MICROSECONDS, SECONDS, MINUTES, HOURS, DAYS] but was 'xyz'`\n\n\n## <a name=\"3.6.0-fixes\"></a> Fixed issues\n- [#321] API: Add support for IDefaultValueProvider. Thanks to [Nicolas MASSART](https://github.com/NicolasMassart) for the pull request.\n- [#416] API: Added support for `@Command` annotation on methods (in addition to classes). Thanks to [illes](https://github.com/illes) for the pull request.\n- [#433] API: Added method `printHelpIfRequested` that accepts a `ColorScheme` parameter. Thanks to [Benny Bottema](https://github.com/bbottema) for the suggestion.\n- [#441] API: Added `hideParamSyntax` attribute to `@Option` and `@Parameters` to allow suppressing usage syntax decorations around the param label. Thanks to [Benny Bottema](https://github.com/bbottema) for the pull request.\n- [#22], [#415], [#436] API: Added internationalization and localization support via resource bundles.\n- [#473] Enhancement: Improved error messages for invalid input.\n- [#461] Bugfix: Script auto-completion only suggests options and never default bash completions. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n- [#466] Bugfix: Script auto-completion should not generate suggestions for options with arguments that have no known completions. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n- [#470] Bugfix: Script auto-completion should generate suggestions for short options with arguments. Thanks to [David Walluck](https://github.com/dwalluck) for the pull request.\n- [#444] Bugfix: Usage help shows duplicate aliases if registered with same alias multiple times.\n- [#452] Doc: Add UML class diagrams to picocli Javadoc.\n- [#475] Doc: Renamed module `examples` to `picocli-examples`.\n- [#478] Doc: Add convenience API example to `CommandLine` class Javadoc.\n\n## <a name=\"3.6.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.6.0-breaking-changes\"></a> Potential breaking changes\nThe error message displayed on invalid input is different from previous releases. This may break unit tests that expect an exact error message.\n\n\n# <a name=\"3.5.2\"></a> Picocli 3.5.2\nThe picocli community is pleased to announce picocli 3.5.2.\n\nThis is a bugfix release that fixes an issue where subcommand aliases were not recognized in some cases.\n\nThis is the thirty-eighth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.5.2\"></a> Table of Contents\n* [New and noteworthy](#3.5.2-new)\n* [Promoted features](#3.5.2-promoted)\n* [Fixed issues](#3.5.2-fixes)\n* [Deprecations](#3.5.2-deprecated)\n* [Potential breaking changes](#3.5.2-breaking-changes)\n\n## <a name=\"3.5.2-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.5.2-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.5.2-fixes\"></a> Fixed issues\n- [#443] Bugfix: Subcommand aliases were not recognized in some cases. Thanks to [K. Alex Mills](https://github.com/kalexmills) for the bug report.\n\n## <a name=\"3.5.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.5.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n\n# <a name=\"3.5.1\"></a> Picocli 3.5.1\nThe picocli community is pleased to announce picocli 3.5.1.\n\nThis is a bugfix release that fixes an issue where CommandSpec injected into Mixins had a `null` CommandLine.\n\nThis is the thirty-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.5.1\"></a> Table of Contents\n* [New and noteworthy](#3.5.1-new)\n* [Promoted features](#3.5.1-promoted)\n* [Fixed issues](#3.5.1-fixes)\n* [Deprecations](#3.5.1-deprecated)\n* [Potential breaking changes](#3.5.1-breaking-changes)\n\n## <a name=\"3.5.1-new\"></a> New and Noteworthy\n\n\n\n## <a name=\"3.5.1-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.5.1-fixes\"></a> Fixed issues\n- [#439] Bugfix: CommandSpec injected into Mixins had a `null` CommandLine. Thanks to [Adam Zegelin](https://github.com/zegelin) for the bug report.\n\n## <a name=\"3.5.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.5.1-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.5.0\"></a> Picocli 3.5.0\nThe picocli community is pleased to announce picocli 3.5.0.\n\nThis release contains new features, bugfixes and enhancements.\n\nPassword support: for options and positional parameters marked as `interactive`, the user is prompted to enter a value on the console.\nWhen running on Java 6 or higher, picocli will use the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword-java.lang.String-java.lang.Object...-\"><code>Console.readPassword</code></a> API so that user input is not echoed to the console.\n\nClient code can now perform simple validation in annotated setter methods by throwing a `ParameterException` on invalid input.\n\nAlso, from this release, the comment character in @-files (argument files) and the end-of-options delimiter (`--` by default) are configurable.\n\n\nThis is the thirty-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.5.0\"></a> Table of Contents\n* [New and noteworthy](#3.5.0-new)\n* [Promoted features](#3.5.0-promoted)\n* [Fixed issues](#3.5.0-fixes)\n* [Deprecations](#3.5.0-deprecated)\n* [Potential breaking changes](#3.5.0-breaking-changes)\n\n## <a name=\"3.5.0-new\"></a> New and Noteworthy\n\n### <a name=\"3.5.0-passwords\"></a><a name=\"3.5.0-interactive\"></a> `Interactive` Options for Passwords or Passphrases\nThis release introduces password support: for options and positional parameters marked as `interactive`, the user is prompted to enter a value on the console.\nWhen running on Java 6 or higher, picocli will use the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword-java.lang.String-java.lang.Object...-\"><code>Console.readPassword</code></a> API so that user input is not echoed to the console.\n\nExample usage:\n\n```java\nclass Login implements Callable<Object> {\n    @Option(names = {\"-u\", \"--user\"}, description = \"User name\")\n    String user;\n\n    @Option(names = {\"-p\", \"--password\"}, description = \"Passphrase\", interactive = true)\n    String password;\n\n    public Object call() throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(password.getBytes());\n        System.out.printf(\"Hi %s, your passphrase is hashed to %s.%n\", user, base64(md.digest()));\n        return null;\n    }\n\n    private String base64(byte[] arr) { /* ... */ }\n}\n```\n\nWhen this command is invoked like this:\n\n```java\nCommandLine.call(new Login(), \"-u\", \"user123\", \"-p\");\n```\n\nThen the user will be prompted to enter a value:\n\n```\nEnter value for --password (Passphrase):\n```\n\nWhen running on Java 6 or higher, the user input is not echoed to the console.\nAfter the user enters a value and presses enter, the `call()` method is invoked, which prints the following:\n\n```bash\nHi user123, your passphrase is hashed to 75K3eLr+dx6JJFuJ7LwIpEpOFmwGZZkRiB84PURz6U8=.\n```\n\n### <a name=\"3.5.0-validation\"></a> Simple Validation in Setter Methods\nMethods annotated with `@Option` and `@Parameters` can do simple input validation by throwing a `ParameterException` when invalid values are specified on the command line.\n\n```java\nclass ValidationExample {\n    private Map<String, String> properties = new LinkedHashMap<>();\n\n    @Spec private CommandSpec spec; // injected by picocli\n\n    @Option(names = {\"-D\", \"--property\"}, paramLabel = \"KEY=VALUE\")\n    public void setProperty(Map<String, String> map) {\n        for (String key : map.keySet()) {\n            String newValue = map.get(key);\n            validateUnique(key, newValue);\n            properties.put(key, newValue);\n        }\n    }\n\n    private void validateUnique(String key, String newValue) {\n        String existing = properties.get(key);\n        if (existing != null && !existing.equals(newValue)) {\n            throw new ParameterException(spec.commandLine(),\n                    String.format(\"Duplicate key '%s' for values '%s' and '%s'.\",\n                    key, existing, newValue));\n        }\n    }\n}\n```\n\nPrior to this release, the exception thrown from the method was wrapped in a `java.lang.reflect.InvocationTargetException`, which in turn was wrapped in a `PicocliException`, and finally in another `ParameterException`.\n\nBy following the recipe above and throwing a `ParameterException` on invalid input, all these intermediate exceptions are skipped.\n\n\n## <a name=\"3.5.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.5.0-fixes\"></a> Fixed issues\n- [#430] Bugfix: formatting was incorrect (did not break on embedded newlines) in the subcommands list descriptions. Thanks to [Benny Bottema](https://github.com/bbottema) for the bug report.\n- [#431] Better support for validation in setter methods: cleaner stack trace.\n- [#432] Make comment character in @-files (argument files) configurable.\n- [#359] Make end-of-options delimiter configurable.\n- [#82] Support reading passwords from the console with echoing disabled.\n\n## <a name=\"3.5.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.5.0-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n# <a name=\"3.4.0\"></a> Picocli 3.4.0\nThe picocli community is pleased to announce picocli 3.4.0.\n\nThis release contains new features, bugfixes and enhancements.\nThe parser can now ignore case when parsing arguments for an Enum option or positional parameter.\nNew methods `Help.Ansi.text(String)` and `Help.Ansi.string(String)` assist client code in easily creating ANSI messages outside usage help and version help.\n\nThis is the thirty-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.4.0\"></a> Table of Contents\n* [New and noteworthy](#3.4.0-new)\n* [Promoted features](#3.4.0-promoted)\n* [Fixed issues](#3.4.0-fixes)\n* [Deprecations](#3.4.0-deprecated)\n* [Potential breaking changes](#3.4.0-breaking-changes)\n\n## <a name=\"3.4.0-new\"></a> New and Noteworthy\n\n## <a name=\"3.4.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.4.0-fixes\"></a> Fixed issues\n- [#14] New API: Support enum values to be parsed in an case-insensitive way.\n- [#376] New API: `Help.Ansi.text(String)` and `Help.Ansi.string(String)` help client code easily create ANSI messages outside usage help and version help.\n- [#412] Enhancement: Enum constant names are now returned from `ArgSpec::completionCandidates()`. Thanks to [Radovan Panák](https://github.com/rpanak).\n- [#417] Enhancement: Ensure bash scripts have correct line separators. Thanks to [Holger Stenger](https://github.com/stengerh).\n- [#425] Enhancement: Fix autocomplete script errors in zsh. Thanks to [Anthony Keenan](https://github.com/anthonykeenan).\n- [#419] Bugfix: Default value for arrays was not rendered correctly with `@{DEFAULT-VALUE}`.\n- [#418] Doc: Improve installation instructions for autocompletion scripts.\n- [#420] Doc: Added a Quick Guide\n\n\n## <a name=\"3.4.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.4.0-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.3.0\"></a> Picocli 3.3.0\nThe picocli community is pleased to announce picocli 3.3.0.\n\nThis release contains a bugfix for the JLine TAB completion support and improves the error messages for missing required parameters and unmatched arguments.\n\nThis is the thirty-fourth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.3.0\"></a> Table of Contents\n* [New and noteworthy](#3.3.0-new)\n* [Promoted features](#3.3.0-promoted)\n* [Fixed issues](#3.3.0-fixes)\n* [Deprecations](#3.3.0-deprecated)\n* [Potential breaking changes](#3.3.0-breaking-changes)\n\n## <a name=\"3.3.0-new\"></a> New and Noteworthy\n### `UnmatchedArgumentException` Improvements\nThe `UnmatchedArgumentException` class now has several methods that allow an application to offer suggestions for fixes to the end user.\n\nFor example:\n```java\nclass App {\n    @Option(names = \"--file\") File[] files;\n    @Option(names = \"--find\") String pattern;\n\n    public static void main(String[] args) {\n        App app = new App();\n        try {\n            new CommandLine(app).parse(args);\n            // ...\n\n        } catch (ParameterException ex) {\n            System.err.println(ex.getMessage());\n            if (!UnmatchedArgumentException.printSuggestions(ex, System.err)) { // new API\n                ex.getCommandLine().usage(System.err, ansi);\n            }\n        }\n    }\n}\n```\n\nIf you run this class with an invalid option that is similar to an actual option, the `UnmatchedArgumentException.printSuggestions` method will show the actual options. For example:\n\n```\n<cmd> -fi\n```\n\nPrints this output:\n\n```\nUnknown option: -fi\nPossible solutions: --file, --find\n```\n\nThis is the behaviour for the `CommandLine` convenience methods `run`, `call` and `parseWithHandlers`.\nNote that if possible fixes are found, the usage help message is not displayed.\n\n## <a name=\"3.3.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.3.0-fixes\"></a> Fixed issues\n- [#411] Bugfix: Completion candidates were only generated for the first option, not for subsequent options.\n- [#409] Enhancement: Improve error message for missing required positional parameters. Thanks to [Mārtiņš Kalvāns](https://github.com/sisidra) and [Olle Lundberg](https://github.com/lndbrg).\n- [#298] Enhancement: Add help for mistyped commands and options. Added new API to `UnmatchedArgumentException`. Thanks to [Philippe Charles](https://github.com/charphi).\n\n## <a name=\"3.3.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.3.0-breaking-changes\"></a> Potential breaking changes\nThe error message format has changed. This may impact client tests that expect a specific error message.\n\n\n\n# <a name=\"3.2.0\"></a> Picocli 3.2.0\nThe picocli community is pleased to announce picocli 3.2.0.\n\nThis release contains new features and enhancements:\n\n* Improved support for Dependency Injection\n* Methods can now be annotated with `@Option` and `@Parameters`\n* Support for JLine-based interactive command line interfaces (`completionCandidates` attribute on `@Option` and `@Parameters`, and the `AutoComplete.complete` method)\n* New `@Spec` annotation for injecting a command with its `CommandSpec`\n\nThis is the thirty-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.2.0\"></a> Table of Contents\n* [New and noteworthy](#3.2.0-new)\n* [Promoted features](#3.2.0-promoted)\n* [Fixed issues](#3.2.0-fixes)\n* [Deprecations](#3.2.0-deprecated)\n* [Potential breaking changes](#3.2.0-breaking-changes)\n\n## <a name=\"3.2.0-new\"></a> New and Noteworthy\n### <a name=\"3.2.0-di\"></a> Dependency Injection\nThis release makes integration with Dependency Injection containers extremely easy:\n\n* `CommandLine` constructor now accepts a `Class` instance as the user object, and will delegate to the `IFactory` to get an instance.\n* New `CommandLine.run(Class<Runnable>, IFactory, ...)` and `CommandLine.call(Class<Callable>, IFactory, ...)` methods. These work the same as the existing `run` and `call` methods except that the `Runnable` or `Callable` instance is created by the factory.\n\nThe below example shows how to create an `IFactory` implementation with a Guice `Injector`:\n\n```java\nimport com.google.inject.*;\nimport picocli.CommandLine.IFactory;\n\npublic class GuiceFactory implements IFactory {\n    private final Injector injector = Guice.createInjector(new DemoModule());\n\n    @Override\n    public <K> K create(Class<K> aClass) throws Exception {\n        return injector.getInstance(aClass);\n    }\n\n    static class DemoModule extends AbstractModule {\n        @Override\n        protected void configure() {\n            bind(java.util.List.class).to(java.util.LinkedList.class);\n            bind(Runnable.class).to(InjectionDemo.class);\n        }\n    }\n}\n```\n\n\nUse the custom factory when creating a `CommandLine` instance, or when invoking the `run` or `call` convenience methods:\n\n```java\nimport javax.inject.Inject;\n\n@Command(name = \"di-demo\")\npublic class InjectionDemo implements Runnable {\n    @Inject java.util.List list;\n\n    @Option(names = \"-x\") int x;\n\n    public static void main(String[] args) {\n        CommandLine.run(Runnable.class, new GuiceFactory(), args);\n    }\n\n    @Override\n    public void run() {\n        assert list instanceof java.util.LinkedList;\n    }\n}\n```\n\n\n### <a name=\"3.2.0-method-annotations\"></a> Annotated Methods\nFrom this release, `@Option` and `@Parameter` annotations can be added to methods as well as fields of a class.\n\nFor concrete classes, annotate \"setter\" methods (methods that accept a parameter) and when the option is specified on the command line, picocli will invoke the method with the value specified on the command line, converted to the type of the method parameter.\n\nAlternatively, you may annotate \"getter-like\" methods (methods that return a value) on an interface, and picocli will create an instance of the interface that returns the values specified on the command line, converted to the method return type. This feature is inspired by [Jewel CLI](https://github.com/lexicalscope/jewelcli).\n\n#### Annotating Methods of an Interface\nThe `@Option` and `@Parameters` annotations can be used on methods of an interface that return a value. For example:\n\n```java\ninterface Counter {\n    @Option(names = \"--count\")\n    int getCount();\n}\n```\nYou use it by specifying the class of the interface:\n```java\nCommandLine cmd = new CommandLine(Counter.class); // specify a class\nString[] args = new String[] {\"--count\", \"3\"};\ncmd.parse(args);\nCounter counter = cmd.getCommand(); // picocli created an instance\nassert counter.getCount() == 3; // method returns command line value\n```\n\n#### Annotating Methods of a Concrete Class\nThe `@Option` and `@Parameters` annotations can be used on methods of a class that accept a parameter. For example:\n\n```java\nclass Counter {\n    int count;\n\n    @Option(names = \"--count\")\n    void setCount(int count) {\n        this.count = count;\n    }\n}\n```\nYou use it by passing an instance of the class:\n```java\nCounter counter = new Counter(); // the instance to populate\nCommandLine cmd = new CommandLine(counter);\nString[] args = new String[] {\"--count\", \"3\"};\ncmd.parse(args);\nassert counter.count == 3; // method was invoked with command line value\n```\n\n### <a name=\"3.2.0-jline\"></a> JLine Tab-Completion Support\n\nThis release adds support for JLine Tab-Completion.\n\n[Jline 2.x](https://github.com/jline/jline2) and [3.x](https://github.com/jline/jline3) is a Java library for handling console input, often used to create interactive shell applications.\n\nCommand line applications based on picocli can generate completion candidates for the command line in the JLine shell. The generated completion candidates are context sensitive, so once a subcommand is specified, only the options for that subcommand are shown, and once an option is specified, only parameters for that option are shown.\n\nBelow is an example picocli `Completer` implementation for JLine 2.x:\n\n```java\nimport jline.console.completer.ArgumentCompleter;\nimport jline.console.completer.Completer;\nimport picocli.AutoComplete;\nimport picocli.CommandLine;\nimport picocli.CommandLine.Model.CommandSpec;\n\nimport java.util.List;\n\npublic class PicocliJLineCompleter implements Completer {\n    private final CommandSpec spec;\n\n    public PicocliJLineCompleter(CommandSpec spec) {\n        this.spec = spec;\n    }\n\n    @Override\n    public int complete(String buffer, int cursor, List<CharSequence> candidates) {\n        // use the jline internal parser to split the line into tokens\n        ArgumentCompleter.ArgumentList list =\n                new ArgumentCompleter.WhitespaceArgumentDelimiter().delimit(buffer, cursor);\n\n        // let picocli generate completion candidates for the token where the cursor is at\n        return AutoComplete.complete(spec,\n                list.getArguments(),\n                list.getCursorArgumentIndex(),\n                list.getArgumentPosition(),\n                cursor,\n                candidates);\n    }\n}\n```\n\n### <a name=\"3.2.0-completion-candidates\"></a> Completion Candidates\nFrom this release, `@Options` and `@Parameters` have a new `completionCandidates` attribute that can be used to generate a list of completions for this option or positional parameter. For example:\n\n```java\nstatic class MyAbcCandidates extends ArrayList<String> {\n    MyAbcCandidates() { super(Arrays.asList(\"A\", \"B\", \"C\")); }\n}\n\nclass ValidValuesDemo {\n    @Option(names = \"-o\", completionCandidates = MyAbcCandidates.class)\n    String option;\n}\n```\n\nThis will generate completion option values `A`, `B` and `C` in the generated bash auto-completion script and in JLine.\n\n\n### <a name=\"3.2.0-default-variable\"></a> `${DEFAULT-VALUE}` Variable\nFrom picocli 3.2, it is possible to embed the default values in the description for an option or positional parameter by\nspecifying the variable `${DEFAULT-VALUE}` in the description text.\nPicocli uses reflection to get the default values from the annotated fields.\n\nThe variable is replaced with the default value regardless of the `@Command(showDefaultValues)` attribute\nand regardless of the `@Option(showDefaultValues)` or `@Parameters(showDefaultValues)` attribute.\n\n```java\nclass DefaultValues {\n    @Option(names = {\"-f\", \"--file\"},\n            description = \"the file to use (default: ${DEFAULT-VALUE})\")\n    File file = new File(\"config.xml\");\n}\n\nCommandLine.usage(new DefaultValues(), System.out);\n```\nThis produces the following usage help:\n```text\nUsage: <main class> -f=<file>\n  -f, --file=<file>   the file to use (default: config.xml)\n```\n\n### <a name=\"3.2.0-completion-variable\"></a>  `${COMPLETION-CANDIDATES}` Variable\nSimilarly, it is possible to embed the completion candidates in the description for an option or positional parameter by\nspecifying the variable `${COMPLETION-CANDIDATES}` in the description text.\n\nThis works for java `enum` classes and for options or positional parameters of non-enum types for which completion candidates are specified.\n\n```java\nenum Lang { java, groovy, kotlin, javascript, frege, clojure }\n\nstatic class MyAbcCandidates extends ArrayList<String> {\n    MyAbcCandidates() { super(Arrays.asList(\"A\", \"B\", \"C\")); }\n}\n\nclass ValidValuesDemo {\n    @Option(names = \"-l\", description = \"Enum. Values: ${COMPLETION-CANDIDATES}\")\n    Lang lang = null;\n\n    @Option(names = \"-o\", completionCandidates = MyAbcCandidates.class,\n            description = \"Candidates: ${COMPLETION-CANDIDATES}\")\n    String option;\n}\n\nCommandLine.usage(new ValidValuesDemo(), System.out);\n```\nThis produces the following usage help:\n```text\nUsage: <main class> -l=<lang> -o=<option>\n  -l=<lang>     Enum. Values: java, groovy, kotlin, javascript, frege, clojure\n  -o=<option>   Candidates: A, B, C\n```\n\n### <a name=\"3.2.0-Spec\"></a> `@Spec` Annotation\nA new `@Spec` annotation is now available that injects the `CommandSpec` model of the command into a command field.\n\nThis is useful when a command needs to use the picocli API, for example to walk the command hierarchy and iterate over its sibling commands.\nThis complements the `@ParentCommand` annotation;  the `@ParentCommand` annotation injects a user-defined command object, whereas this annotation injects a picocli class.\n\n```java\nclass InjectSpecExample implements Runnable {\n   @Spec CommandSpec commandSpec;\n   //...\n   public void run() {\n       // do something with the injected spec\n   }\n}\n\n```\n\n\n\n\n### <a name=\"3.2.0-lenient-parse\"></a> Lenient Parse Mode\n\nThis release adds the ability to continue parsing invalid input to the end.\nWhen `collectErrors` is set to `true`, and a problem occurs during parsing, an `Exception` is added to the `ParseResult.errors()` list and parsing continues. The default behaviour (when `collectErrors` is `false`) is to abort parsing by throwing the `Exception`.\n\nThis is useful when generating completion candidates on partial input, and is also useful when using picocli in\nlanguages like Clojure where idiomatic error handling does not involve throwing and catching exceptions.\n\nWhen using this feature, applications are responsible for actively verifying that no errors occurred before executing the business logic. Use with care!\n\n\n## <a name=\"3.2.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.2.0-fixes\"></a> Fixed issues\n- [#182] New Feature: Add support for annotating methods with `@Option` and `@Parameters`.\n- [#393] New feature: Add support for JLine completers.\n- [#389] New feature: Support 'lenient' parsing mode: don't throw `Exceptions` but add them to the `ParseResult.errors()` list and continue parsing.\n- [#392] New feature: Ability to map command line arguments to picocli spec elements. Internally used for generating completion candidates.\n- [#391] New feature: Add API to get completion candidates for option and positional parameter values of any type.\n- [#395] New feature: Allow embedding default values anywhere in description for `@Option` or `@Parameters`.\n- [#259] New Feature: Added `@Spec` annotation to inject `CommandSpec` into application field.\n- [#400] Enhancement: Add run/call static methods that accept an `IFactory`. This allows Dependency Injection containers to provide the Runnable/Callable implementation.\n- [#404] Enhancement: Ask IFactory for implementation before creating Proxy for interface. Needed for Dependency Injection.\n- [#398] Enhancement: Allow `@PicocliScript` annotation on Groovy script `@Field` variables instead of just on imports.\n- [#322] Enhancement: Add `defaultValue` attribute to @Option and @Parameters annotation.\n- [#375] Enhancement: Improve `ParameterIndexGapException` error message. Thanks to [gpettey](https://github.com/gpettey).\n- [#405] Enhancement: Add method `CommandLine.getUsageMessage()`.\n- [#406] Enhancement: Added fields to `ParameterException`. Thanks to [David Hait](https://github.com/dhait).\n- [#401] Doc: The user manual no longer includes the full `CommandLine.java` source code.\n\n## <a name=\"3.2.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.2.0-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.1.0\"></a> Picocli 3.1.0\nThe picocli community is pleased to announce picocli 3.1.0.\n\nThis release contains bugfixes and support for command aliases.\n\nPicocli has a new logo! Many thanks to [Reallinfo](https://github.com/reallinfo) for the design!\n\n<img src=\"https://picocli.info/images/logo/horizontal.png\" height=\"100\">\n\nThis is the thirty-second public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.1.0\"></a> Table of Contents\n* [New and noteworthy](#3.1.0-new)\n* [Promoted features](#3.1.0-promoted)\n* [Fixed issues](#3.1.0-fixes)\n* [Deprecations](#3.1.0-deprecated)\n* [Potential breaking changes](#3.1.0-breaking-changes)\n\n## <a name=\"3.1.0-new\"></a> New and Noteworthy\n### Command Aliases\nThis release adds support for command aliases.\n\n```java\n@Command(name = \"top\", subcommands = {SubCommand.class},\n        description = \"top level command\")\nstatic class TopLevelCommand { }\n\n@Command(name = \"sub\", aliases = {\"s\", \"sb\"},\n        description = \"I'm a subcommand\")\nstatic class SubCommand {}\n\nnew CommandLine(new TopLevelCommand()).usage(System.out);\n```\nThe above would print the following usage help message:\n\n```text\nUsage: top [COMMAND]\ntop level command\nCommands:\n  sub, s, sb   I'm a subcommand\n```\n\n## <a name=\"3.1.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.1.0-fixes\"></a> Fixed issues\n- [#288] New feature: add support for command aliases.\n- [#383] Enhancement: [Reallinfo](https://github.com/reallinfo) designed the new picocli logo. Amazing work, many thanks!\n- [#388] Bugfix: Prevent AnnotationFormatError \"Duplicate annotation for class\" with @PicocliScript when the script contains classes. Thanks to [Bradford Powell](https://github.com/bpow) for the bug report.\n\n## <a name=\"3.1.0-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.1.0-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.0.2\"></a> Picocli 3.0.2\nThe picocli community is pleased to announce picocli 3.0.2.\n\nThis release contains bugfixes and enhancements for programmatic configuration.\n\nThis is the thirty-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.2\"></a> Table of Contents\n* [New and noteworthy](#3.0.2-new)\n* [Promoted features](#3.0.2-promoted)\n* [Fixed issues](#3.0.2-fixes)\n* [Deprecations](#3.0.2-deprecated)\n* [Potential breaking changes](#3.0.2-breaking-changes)\n\n## <a name=\"3.0.2-new\"></a> New and Noteworthy\n\n## <a name=\"3.0.2-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.2-fixes\"></a> Fixed issues\n- [#381] Bugfix: Prevent NPE when adding programmatically created subcommands to CommandLine. Thanks to [Mikusch](https://github.com/Mikusch) for the bug report.\n- [#382] Enhancement: Subcommand name should be initialized when added to parent.\n\n## <a name=\"3.0.2-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.0.2-breaking-changes\"></a> Potential breaking changes\nThis release has no breaking changes.\n\n\n# <a name=\"3.0.1\"></a> Picocli 3.0.1\nThe picocli community is pleased to announce picocli 3.0.1.\n\nThis release fixes a bug for map options and has several improvements for the usage help message, especially for subcommands.\n\nThis is the thirtieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.1\"></a> Table of Contents\n* [New and noteworthy](#3.0.1-new)\n* [Promoted features](#3.0.1-promoted)\n* [Fixed issues](#3.0.1-fixes)\n* [Deprecations](#3.0.1-deprecated)\n* [Potential breaking changes](#3.0.1-breaking-changes)\n\n## <a name=\"3.0.1-new\"></a> New and Noteworthy\nFrom this release, the usage help synopsis of the subcommand shows not only the subcommand name but also the parent command name. For example, take the following hierarchy of subcommands.\n\n```java\n@Command(name = \"main\", subcommands = {Sub.class}) class App { }\n@Command(name = \"sub\", subcommands = {SubSub.class}) class Sub { }\n@Command(name = \"subsub\", mixinStandardHelpOptions = true) class SubSub { }\n\nCommandLine parser = new CommandLine(new App());\nParseResult result = parser.parseArgs(\"sub\", \"subsub\", \"--help\");\nCommandLine.printHelpIfRequested(result);\n```\nThe above code prints the usage help for the `subsub` nested subcommand. Notice that this shows not only the subcommand name but the full command hierarchy:\n\n```\nUsage: main sub subsub [-hV]\n  -h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\n```\n\n## <a name=\"3.0.1-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.1-fixes\"></a> Fixed issues\n- [#287] Enhancement: Subcommand help now also shows parent command name in synopsis.\n- [#378] Bugfix: Map option problem when value contains '=' separator. Thanks to [Markus Kramer](https://github.com/MarkusKramer) for the bug report.\n- [#377] Bugfix: Standard help options should be added last: when `mixinStandardHelpOptions` is set and `sortOptions` is false, the help options should appear after the command options in the usage help message.\n\n## <a name=\"3.0.1-deprecated\"></a> Deprecations\nNo features were deprecated in this release.\n\n## <a name=\"3.0.1-breaking-changes\"></a> Potential breaking changes\nThe usage help synopsis of the subcommand shows not only the subcommand name but also the parent command name (and parent's parent command name, up to the top-level command).\n\n\n\n# <a name=\"3.0.0\"></a> Picocli 3.0.0\nThe picocli community is pleased to announce picocli 3.0.0.\n\nThis release offers a [programmatic API](https://picocli.info/picocli-3.0-programmatic-api.html) for creating command line applications, in addition to the annotations API. The programmatic API allows applications to dynamically create command line options on the fly, and also makes it possible to create idiomatic domain-specific languages for processing command line arguments, using picocli, in other JVM languages. The picocli community is proud to announce that [Apache Groovy](http://groovy-lang.org/)'s [CliBuilder](https://docs.groovy-lang.org/docs/next/html/gapi/groovy/cli/picocli/CliBuilder.html) DSL for command line applications has been rewritten to use the picocli programmatic API, starting from Groovy 2.5.\n\nAnother new feature in this release are Mixins. Mixins allow reusing common options, parameters and command attributes in multiple applications without copy-and-paste duplication.\n\nThis release aims to reduce boilerplate code in user applications even further with the new `mixinStandardHelpOptions` command attribute. Picocli adds standard `usageHelp` and `versionHelp` options to commands with this attribute. Additionally picocli now offers a `HelpCommand` that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands.\n\nFrom this release, picocli is better at following unix conventions: by default it now prints to stdout when the user requested help, and prints to stderr when the input was invalid or an unexpected error occurred. This release also gives better control over the process exit code.\n\nA new `@Unmatched` annotation allows applications to easily capture unmatched arguments (arguments that could not be matched with any of the registered options or positional parameters).\n\nUsage help message improvements: the usage help message width is now configurable, and the message layout is improved to reduce horizontal padding. Furthermore, you can now specify for individual options or positional parameters whether their default value should be shown in the description or hidden.\n\nFinally, this release adds several options to configure parser behaviour. Picocli can now be configured to function like Apache Commons CLI, to facilitate migration from Apache Commons CLI to picocli.\n\n\nThis is the twenty-ninth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0\"></a> Table of Contents\n* [New and noteworthy](#3.0.0-new)\n* [Promoted features](#3.0.0-promoted)\n* [Fixed issues](#3.0.0-fixes)\n* [Deprecations](#3.0.0-deprecated)\n* [Potential breaking changes](#3.0.0-breaking-changes)\n\n## <a name=\"3.0.0-new\"></a> New and Noteworthy\n\n### <a name=\"3.0.0-Programmatic-API\"></a> Programmatic API\nThis release offers a programmatic API for creating command line applications, in addition to the annotations API. The programmatic API allows applications to dynamically create command line options on the fly, and also makes it possible to create idiomatic domain-specific languages for processing command line arguments, using picocli, in other JVM languages. (Example: Groovy [CliBuilder](http://docs.groovy-lang.org/docs/next/html/gapi/groovy/cli/picocli/CliBuilder.html).)\n\n_If you have suggestions for improving the programmatic API, please raise a ticket on GitHub!_\n\n#### Example\n```java\nCommandSpec spec = CommandSpec.create();\nspec.mixinStandardHelpOptions(true); // --help and --version options\nspec.addOption(OptionSpec.builder(\"-c\", \"--count\")\n        .paramLabel(\"COUNT\")\n        .type(int.class)\n        .description(\"number of times to execute\").build());\nspec.addPositional(PositionalParamSpec.builder()\n        .paramLabel(\"FILES\")\n        .type(List.class).auxiliaryTypes(File.class) // List<File>\n        .description(\"The files to process\").build());\n\nCommandLine commandLine = new CommandLine(spec);\ntry {\n    // see also the CommandLine.parseWithHandler(s) convenience methods\n    ParseResult pr = commandLine.parseArgs(args);\n\n    if (CommandLine.printHelpIfRequested(pr)) {\n        return;\n    }\n    int count = pr.matchedOptionValue('c', 1);\n    List<File> files = pr.matchedPositionalValue(0, Collections.<File>emptyList());\n    for (File f : files) {\n        for (int i = 0; i < count; i++) {\n            System.out.printf(\"%d: %s%n\", i, f);\n        }\n    }\n} catch (ParseException invalidInput) {\n    System.err.println(invalidInput.getMessage());\n    invalidInput.getCommandLine().usage(System.err);\n}\n```\n\n#### CommandSpec\n`CommandSpec` models a command. It is the programmatic variant of the `@Command` annotation. It has a name and a version, both of which may be empty.  It also has a `UsageMessageSpec` to configure aspects of the usage help message and a `ParserSpec` that can be used to control the behaviour of the parser.\n\n#### OptionSpec and PositionalParamSpec\n`OptionSpec` models a named option, and `PositionalParamSpec` models one or more positional parameters. They are the programmatic variant of the `@Option` and `@Parameters` annotations, respectively.\n\nAn `OptionSpec` must have at least one name, which is used during parsing to match command line arguments. Other attributes can be left empty and picocli will give them a reasonable default value. This defaulting is why `OptionSpec` objects are created with a builder: this allows you to specify only some attributes and let picocli initialise the other attributes. For example, if only the option’s name is specified, picocli assumes the option takes no parameters (arity = 0), and is of type `boolean`. Another example, if arity is larger than `1`, picocli sets the type to `List` and the `auxiliary type` to `String`.\n\n`PositionalParamSpec` objects don’t have names, but have an index range instead. A single `PositionalParamSpec` object can capture multiple positional parameters. The default index range is set to `0..*` (all indices). A command may have multiple `PositionalParamSpec` objects to capture positional parameters at different index ranges. This can be useful if positional parameters at different index ranges have different data types.\n\nSimilar to `OptionSpec` objects, Once a `PositionalParamSpec` is constructed, its configuration becomes immutable, but its `value` can still be modified. Usually the value is set during command line parsing when a non-option command line argument is encountered at a position in its index range.\n\n#### <a name=\"3.0.0-ParseResult\"></a> ParseResult\nA `ParseResult` class is now available that allows applications to inspect the result of parsing a sequence of command line arguments.\n\nThis class provides methods to query whether the command line arguments included certain options or position parameters, and what the value or values of these options and positional parameters was. Both the original command line argument String value as well as a strongly typed value can be obtained.\n\n\n### Mixins for Reuse\nMixins are a convenient alternative to subclassing: picocli annotations from _any_ class can be added to (\"mixed in\" with) another command. This includes options, positional parameters, subcommands and command attributes. Picocli [autoHelp](#3.0.0-alpha-1-autohelp) internally uses a mixin.\n\nA mixin is a separate class with options, positional parameters, subcommands and command attributes that can be reused in other commands. Mixins can be installed by calling the `CommandLine.addMixin` method with an object of this class, or annotating a field in your command with `@Mixin`. Here is an example mixin class:\n\n```java\npublic class ReusableOptions {\n\n    @Option(names = { \"-v\", \"--verbose\" }, description = {\n        \"Specify multiple -v options to increase verbosity.\", \"For example, `-v -v -v` or `-vvv`\" })\n    protected boolean[] verbosity = new boolean[0];\n}\n```\n\n#### Adding Mixins Programmatically\nThe below example shows how a mixin can be added programmatically with the `CommandLine.addMixin` method.\n\n```java\nCommandLine commandLine = new CommandLine(new MyCommand());\ncommandline.addMixin(\"myMixin\", new ReusableOptions());\n```\n#### `@Mixin` Annotation\nA command can also include mixins by annotating fields with `@Mixin`. All picocli annotations found in the mixin class are added to the command that has a field annotated with `@Mixin`. For example:\n\n```java\n@Command(name = \"zip\", description = \"Example reuse with @Mixin annotation.\")\npublic class MyCommand {\n\n    // adds the options defined in ReusableOptions to this command\n    @Mixin\n    private ReusableOptions myMixin;\n}\n```\n\n\n### <a name=\"3.0.0-mixinStandardHelpOptions\"></a> Standard Help Options\nThis release introduces the `mixinStandardHelpOptions` command attribute. When this attribute is set to `true`, picocli adds a mixin to the command that adds `usageHelp` and `versionHelp` options to the command. For example:\n\n```java\n@Command(mixinStandardHelpOptions = true, version = \"auto help demo - picocli 3.0\")\nclass AutoHelpDemo implements Runnable {\n\n    @Option(names = \"--option\", description = \"Some option.\")\n    String option;\n\n    @Override public void run() { }\n}\n```\n\nCommands with `mixinStandardHelpOptions` do not need to explicitly declare fields annotated with `@Option(usageHelp = true)` and `@Option(versionHelp = true)` any more. The usage help message for the above example looks like this:\n```text\nUsage: <main class> [-hV] [--option=<option>]\n      --option=<option>   Some option.\n  -h, --help              Show this help message and exit.\n  -V, --version           Print version information and exit.\n```\n\n### <a name=\"3.0.0-HelpCommand\"></a> Help Command\n\nFrom this release, picocli provides a `help` subcommand (`picocli.CommandLine.HelpCommand`) that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands. For example:\n\n```java\n@Command(subcommands = HelpCommand.class)\nclass AutoHelpDemo implements Runnable {\n\n    @Option(names = \"--option\", description = \"Some option.\")\n    String option;\n\n    @Override public void run() { }\n}\n```\n\n\n```text\n# print help for the `maincommand` command\nmaincommand help\n\n# print help for the `subcommand` command\nmaincommand help subcommand\n```\n\nFor applications that want to create a custom help command, this release also introduces a new interface `picocli.CommandLine.IHelpCommandInitializable` that provides custom help commands with the information they need: access to the parent command and sibling commands, whether to use Ansi colors or not, and the streams to print the usage help message to.\n\n### <a name=\"3.0.0-Unmatched\"></a> `@Unmatched` Annotation\nUnmatched arguments are the command line arguments that could not be assigned to any of the defined options or positional parameters. From this release, fields annotated with `@Unmatched` will be populated with the unmatched arguments. The field must be of type `String[]` or `List<String>`.\n\nIf picocli finds a field annotated with `@Unmatched`, it automatically sets `unmatchedArgumentsAllowed` to `true` so no `UnmatchedArgumentException` is thrown when a command line argument cannot be assigned to an option or positional parameter.\n\n### <a name=\"3.0.0-std\"></a> Stdout or Stderr\nFrom picocli v3.0, the `run` and `call` convenience methods follow unix conventions: print to stdout when the user requested help, and print to stderr when the input was invalid or an unexpected error occurred.\n\nCustom handlers can extend `AbstractHandler` to facilitate following this convention. `AbstractHandler` also provides `useOut` and `useErr` methods to allow customizing the target output streams, and `useAnsi` to customize the Ansi style to use:\n\n```java\n@Command class CustomizeTargetStreamsDemo implements Runnable {\n    public void run() { ... }\n\n    public static void main(String... args) {\n        CommandLine cmd = new CommandLine(new CustomizeTargetStreamsDemo());\n\n        PrintStream myOut = getOutputPrintStream(); // custom stream to send command output to\n        PrintStream myErr = getErrorPrintStream();  // custom stream for error messages\n\n        cmd.parseWithHandlers(\n                new RunLast().useOut(myOut).useAnsi(Help.Ansi.ON),\n                new DefaultExceptionHandler().useErr(myErr).useAnsi(Help.Ansi.OFF),\n                args);\n    }\n}\n```\n\n### <a name=\"3.0.0-exit-code\"></a> Exit Code Support\nFrom picocli v3.0, the built-in parse result handlers (`RunFirst`, `RunLast` and `RunAll`) and exception handler (`DefaultExceptionHandler`) can specify an exit code. If an exit code was specified, the handler terminates the JVM with the specified status code when finished.\n\n```java\n@Command class ExitCodeDemo implements Runnable {\n    public void run() { throw new ParameterException(new CommandLine(this), \"exit code demo\"); }\n\n    public static void main(String... args) {\n        CommandLine cmd = new CommandLine(new ExitCodeDemo());\n        cmd.parseWithHandlers(\n                new RunLast().andExit(123),\n                new DefaultExceptionHandler().andExit(456),\n                args);\n    }\n}\n```\nRunning this command prints the following to stderr and exits the JVM with status code `456`.\n\n```\nexit code demo\nUsage: <main class>\n```\n\nCustom handlers can extend `AbstractHandler` to inherit this behaviour.\n\n\n### <a name=\"3.0.0-ShowDefault\"></a> Fine-grained ShowDefault\n\nThis release adds a `showDefaultValue` attribute to the `@Option` and `@Parameters` annotation. This allows you to specify for each individual option and positional parameter whether its default value should be shown in the usage help.\n\nThis attribute accepts three values:\n\n* `ALWAYS` - always display the default value of this option or positional parameter, even `null` values, regardless what value of `showDefaultValues` was specified on the command\n* `NEVER` - don't show the default value for this option or positional parameter, regardless what value of `showDefaultValues` was specified on the command\n* `ON_DEMAND` - (this is the default) only show the default value for this option or positional parameter if `showDefaultValues` was specified on the command\n\nThe `NEVER` value is useful for security sensitive command line arguments like passwords. The `ALWAYS` value is useful when you only want to show the default value for a few arguments but not for all (in combination with `@Command(showDefaultValues = false)`).\n\n### <a name=\"3.0.0-UsageHelpLayout\"></a> Improved Usage Help Message Layout\nPreviously, the usage message layout had a fixed width long option name column: this column is always 24 characters, even if none of the options have a long option name.\n\nThis gave strange-looking usage help messages in some cases. For example:\n```java\n@Command(name=\"ls\")\nclass App {\n    @Option(names = \"-a\", description = \"display all files\") boolean a;\n    @Option(names = \"-l\", description = \"use a long listing format\") boolean l;\n    @Option(names = \"-t\", description = \"sort by modification time\") boolean t;\n}\n```\n\nThe usage message for this example was:\n```\nUsage: ls [-alt]\n  -a                          display all files\n  -l                          use a long listing format\n  -t                          sort by modification time\n```\nFrom this release, picocli adjusts the width of the long option name column to the longest name (up to max 24).\n\nThe new usage message for this example looks like this:\n```\nUsage: ls [-alt]\n  -a     display all files\n  -l     use a long listing format\n  -t     sort by modification time\n```\n\n### <a name=\"3.0.0-StricterArity\"></a> Stricter Arity Validation\n\nUntil this release, options with mandatory parameters would consume as many arguments as required, even if those arguments matched other option flags. For example:\n\nGiven a command like this:\n```java\nclass App {\n  @Option(names = \"-a\", arity = \"2\")\n  String[] a;\n\n  @Option(names = \"-v\")\n  boolean v;\n}\n```\nPrior to this change, the following input would be accepted:\n```\n<command> -a 1 -v\n```\nIn previous versions, picocli accepted this and assigned `\"1\"` and `\"-v\"` as the two values for the `-a` option.\nFrom this release, the parser notices that one of the arguments is an option and throws a `MissingParameterException` because not enough parameters were specified for the first option.\n\n\n## <a name=\"3.0.0-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-fixes\"></a> Fixed issues\n- [#371] Fixed bug where autocompletion did not work correctly for subcommands with embedded hyphens. Thanks to [Paulius Fadelis](https://github.com/Fadelis) for the bug report.\n- [#372] Simplify Kotlin example in user manual. Thanks to [Dustin Spicuzza](https://github.com/virtuald).\n\n### 3.0.0-alpha-1\n- [#245] New Feature: from 3.0, picocli offers an API for programmatic configuration.\n- [#257] New Feature: new `ParseResult` class allows programmatic inspection of the result of parsing a sequence of command line arguments.\n- [#144] New Feature: added support for mixins to allow reusing common options, positional parameters, subcommands and command attributes from any object.\n- [#253] New Feature: added `@Unmatched` annotation for unmatched arguments.\n- [#175] New Feature: `mixinStandardHelpOptions` attribute to install the standard `--help` and `--version` options, obviating the need for fields annotated with `@Option(usageHelp = true)` and `@Option(versionHelp = true)`.\n- [#175] New Feature: picocli now provides a `HelpCommand` that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands.\n- [#175] New Feature: new `IHelpCommandInitializable` interface facilitates construction of custom help commands.\n- [#250] Enhancement: the `run` and `call` convenience methods now follow convention: print to stdout when the user requested help, print to stderr when the input was invalid or an unexpected error occurred. Added `AbstractHandler` to facilitate following this convention for custom parse result handlers and exception handlers.\n- [#251] New Feature: exit code support. The built-in parse result handlers (`RunFirst`, `RunLast` and `RunAll`) and exception handler  (`DefaultExceptionHandler`) can now optionally specify an exit code. If specified, the handler terminates the JVM with the specified status code when finished. Custom handlers can extend `AbstractHandler` to inherit this behaviour.\n- [#262] New Feature: new `showDefaultValue` attribute on `@Option` and `@Parameters` gives fine-grained control over which default values to show or hide. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#268] New Feature: new `helpCommand` attribute on `@Command`: if the command line arguments contain a subcommand annotated with `helpCommand`, the parser will not validate the required options or positional parameters of the parent command. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#277] New Feature: new `hidden` attribute on `@Command` to omit the specified subcommand from the usage help message command list of the parent command. Thanks to [pditommaso](https://github.com/pditommaso).\n- [#159] Enhancement: make help usage message width configurable. Thanks to [pditommaso](https://github.com/pditommaso).\n\n### 3.0.0-alpha-2\n- [#312] Enhancement and API change (against earlier alpha version): Remove `AbstractSimpleParseResultHandler` class and `parseWithSimpleHandlers` method.\n- [#311] Enhancement and API change (against earlier alpha version): Simplify parseWithHandlers: removed prototypeReturnValue parameter.\n- [#307] Enhancement: Provide CommandLine.usage(PrintWriter) method for testing and to facilitate [GROOVY-8520](https://issues.apache.org/jira/browse/GROOVY-8520) migration from commons-cli to picocli.\n- [#306] Enhancement: Support generating autocompletion scripts for non-public @Command classes. Thanks to [cbeams](https://github.com/cbeams) for the request.\n- [#308] Enhancement: Provide API to disallow POSIX clustered short options.\n- [#310] Enhancement: PicocliBaseScript should follow conventions for stdout and stderr: requested help to stdout, invalid input usage help to stderr.\n- [#309] Bugfix: Tests were failing on environments that support ANSI colors.\n\n### 3.0.0-alpha-3\n- [#313] Enhancement and New API: add method (later removed in 3.0.0-beta-1) `CommandLine::setMaxArityIsMaxTotalParams` to configure the parser to use `arity` to limit the total number of values accumulated in an option or positional parameter.\n- [#314] Enhancement and New API: add method `CommandLine::setUsageHelpWidth` and `UsageMessageSpec::width` to set the max usage help message width.\n- [#316] Enhancement: Support lenient mode where annotations are optional when extracting annotations.\n- [#317] Enhancement: Change semantics of ParseResult.rawOptionValue to mean values after split (but before type conversion).\n\n### 3.0.0-alpha-4\n- [#318] API Change: Split model IBinding into IGetter and ISetter.\n- [#320] API Change: Rename parser config `maxArityIsMaxTotalParams` to `arityRestrictsCumulativeSize`. (Property was removed in 3.0.0-beta-1.)\n- [#216] Enhancement: Parsed values now replace the default value of multi-value (array, Collection or Map) options and positional parameters instead of being appended to them. Thanks to [wiwie](https://github.com/wiwie) for the request.\n- [#261] Enhancement: Options and positional parameters with a `defaultValue` are never required. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#315] Enhancement: Initialize ArgSpec value with `defaultValue` before parsing command line.\n- [#263] Bugfix: positional parameter defaults were not shown in usage help message. Thanks to [ymenager](https://github.com/ymenager) for the bug report.\n\n### 3.0.0-alpha-5\n- [#329] New API: Add parser configuration to control whether boolean flags should be toggled.\n- [#328] New API: Provide getter methods on `OptionSpec.Builder` and `PositionalParamSpec.Builder`.\n- [#326] New API: Add parser configuration to treat unmatched options as positional parameters.\n- [#283] New API: Provide `getMissing` method on MissingParameterException to get a reference to the problematic options and positional parameters. Thanks to [jcapsule](https://github.com/jcapsule) for the suggestion.\n- [#334] API Change: Rename `ArgSpec.rawStringValues()` to `ArgSpec.stringValues()`.\n- [#342] API Change: Prefix ParseResult methods with `matched` if they return only matched options/positionals.\n- [#340] API Change: Rename `ParseResult.optionValue(String, T)` to `matchedOptionValue(String, T)`.\n- [#338] API Change: Remove `ParseResult.rawOptionValue(s)` and `rawPositionalValue(s)` methods.\n- [#339] API Change: Remove `ParseResult.matchedOptionValue(OptionSpec)` and `matchedPositionalValue(PositionalParamSpec)` methods.\n- [#347] API Change: Make `ArgSpec.getValue`, `setValue` and `isMultiValue` public methods.\n- [#333] Enhancement: Added subcommand to synopsis in generated usage help. Thanks to [jcapsule](https://github.com/jcapsule) for the pull request.\n- [#323] Enhancement: Remove dependency on java.sql package: picocli should only require the java.base module when running in Java 9.\n- [#325] Enhancement: Allow custom type converter to map empty String to custom default value for empty options. Thanks to [jesselong](https://github.com/jesselong) for the suggestion.\n- [#303] Enhancement: Improve validation to prevent common mistakes.\n- [#70]  Enhancement: Positional parameters should only consume values where type conversion succeeds.\n- [#346] Enhancement: Validate that arity min is never greater than max.\n- [#348] Enhancement: Interpreter should call `ArgSpec.setValue` for every matched option or positional parameter.\n- [#327] Bugfix: Default values should not cause options and positional parameters to be added to ParseResult.\n- [#330] Bugfix: `Interpreter` should clear option's and positional parameter's `stringValues` list before parsing new input.\n- [#335] Bugfix: Abstract class `ArgSpec` should not implement `equals` and `hashCode`.\n- [#345] Bugfix: Stop processing varargs when cumulative size reached. (This functionality was removed in 3.0.0-beta-1.)\n\n### 3.0.0-alpha-6\n- [#349] New API: Add `longestName()` convenience method to OptionSpec.\n- [#352] New API: Add method to copy all attributes of a ParserSpec to a CommandSpec.\n- [#353] New API: Add method to copy all attributes of a UsageMessageSpec to a CommandSpec.\n- [#343] New API: Add method `Help.Ansi.Text::concat` and deprecate the `append` method. (\"Append\" suggests the Text object is modified, like StringBuilder, but Text is immutable.)\n- [#350] Enhancement: Improve error message for `usageHelp` and `versionHelp` validation.\n- [#344] Enhancement: Don't show WARN message for unmatched args or overwritten options.\n- [#351] Documentation: Improve javadoc for OptionSpec.usageHelp and versionHelp.\n- [#354] Bug fix: Interpreter should reset options and positional parameters to their initial value before parsing new input.\n\n### 3.0.0-beta-1\n- [#364] API Change: Remove parser option `arityRestrictsCumulativeSize`.\n- [#355] API Change: Add method `ArgSpec.hasInitialValue`.\n- [#361] API Change: Add parser option `aritySatisfiedByAttachedOptionParam` for commons-cli compatibility.\n- [#363] API Change: Add parser option to limit the number of parts when splitting to max arity, for compatibility with commons-cli.\n- [#360] Enhancement: Dynamically adjust width of long option name column (up to max 24).\n\n### 3.0.0-beta-2\n- [#366] API Change: Add `ArgSpec.getTypedValues()` method.\n- [#365] Enhancement: Stricter arity validation: options with mandatory parameters no longer consume other option flags.\n- [#357] Enhancement: Improve synopsis format. Be more succinct when `limitSplit` is true. Support repeating groups.\n\n\n## <a name=\"3.0.0-deprecated\"></a> Deprecations\n### 3.0.0-alpha-1\nThe `picocli.CommandLine.Help::Help(Object, CommandLine.Help.ColorScheme)` constructor has been deprecated. Use the `picocli.CommandLine.Help::Help(CommandLine.CommandSpec, CommandLine.Help.ColorScheme)` constructor instead.\n\nThe `picocli.CommandLine.IParseResultHandler` interface has been deprecated. Use the `picocli.CommandLine.IParseResultHandler2` interface instead.\n\nThe `picocli.CommandLine.IExceptionHandler` interface has been deprecated. Use the `picocli.CommandLine.IExceptionHandler2` interface instead.\n\n### 3.0.0-alpha-6\n- The `Help.Ansi.Text::append` method is now deprecated in favour of the new `concat` method.\n\n\n## <a name=\"3.0.0-breaking-changes\"></a> Potential breaking changes\n### 3.0.0-alpha-1\n#### Help API Changes\nThe following public fields were removed from the `picocli.CommandLine.Help` class. Instead, set these attributes on a `CommandLine.CommandSpec` object passed to any of the `Help` constructors.\n\n* abbreviateSynopsis\n* commandListHeading\n* commandName\n* customSynopsis\n* description\n* descriptionHeading\n* footer\n* footerHeading\n* header\n* headerHeading\n* optionFields\n* optionListHeading\n* parameterLabelRenderer - replaced with the `Help.parameterLabelRenderer()` method\n* parameterListHeading\n* requiredOptionMarker\n* separator\n* showDefaultValues\n* sortOptions\n* synopsisHeading\n\nMethod signature changes on inner classes and interfaces of the `Help` class:\n\n* Interface method `CommandLine.Help.IOptionRenderer::render` signature changed: `CommandLine.Option` and `Field` parameters are replaced with a single `CommandLine.OptionSpec` parameter.\n* Interface method `CommandLine.Help.IParameterRenderer::render` signature changed: `CommandLine.Parameters` and `Field` parameters are replaced with a single `CommandLine.PositionalParamSpec` parameter.\n* Interface method `CommandLine.Help.IParamLabelRenderer::renderParameterLabel` signature changed: `Field` parameter replaced with `CommandLine.ArgSpec` parameter.\n* Class `CommandLine.Help.Layout` all methods changed: `Field` parameters replaced by `CommandLine.ArgSpec`, `CommandLine.OptionSpec` and `CommandLine.PositionalParamSpec` parameters.\n\n### 3.0.0-alpha-2\n- [#311] API change from 3.0.0-alpha-1: the `parseWithHandlers` methods signature changed: removed the `prototypeReturnValue` parameter.\n- [#312] API change from 3.0.0-alpha-1: Remove `AbstractSimpleParseResultHandler` class and `parseWithSimpleHandlers` method.\n\n### 3.0.0-alpha-3\n- Utility method `CommandLine.Help.join` signature changed: now takes an additional `usageHelpWidth` parameter.\n- Constructor `CommandLine.Help.Layout(ColorScheme)` signature changed: now takes an additional `usageHelpWidth` parameter.\n- Public field `CommandLine.Help.TextTable.columns` is now private; added public method `CommandLine.Help.TextTable.columns()`.\n- Constructor `CommandLine.Help.TextTable(Ansi)` is replaced with factory method `CommandLine.Help.TextTable.forDefaultColumns(Ansi, int)`.\n- Constructor `CommandLine.Help.TextTable(Ansi, int...)` is replaced with factory method `CommandLine.Help.TextTable.forColumnWidths(Ansi, int...)`.\n- Constructor `CommandLine.Help.TextTable(Ansi, Column...)` modifier changed from public to protected.\n- Added factory method `CommandLine.Help.TextTable.forColumns(Ansi, Column...)`.\n- Renamed `CommandLine.MaxValuesforFieldExceededException` to `CommandLine.MaxValuesExceededException`.\n\n### 3.0.0-alpha-4\n- Parsed values now replace the default value of multi-value (array, Collection or Map) options and positional parameters instead of being appended to them.\n- The `IBinding` interface introduced in v3.0.0-alpha-1 has been replaced with two functional interfaces `IGetter` and `ISetter`.\n- The `UnmatchedArgsBinding` factory methods introduced in v3.0.0-alpha-1 have been replaced with `forStringArrayConsumer` and `forStringCollectionSupplier`.\n\n### 3.0.0-alpha-5\nChanges against earlier 3.0.0-alpha versions:\n\n* Renamed `ArgSpec.rawStringValues()` to `ArgSpec.stringValues()`.\n* Renamed `ParseResult` methods with `matched` if they return only matched options/positionals:\n    * `options` to `matchedOptions`\n    * `positionalParams` to `matchedPositionals`\n    * `option(char)`, `option(String)` to `matchedOption`\n    * `positional(int)` to `matchedPositional`\n    * `hasOption(char)`, `hasOption(String)`, `hasOption(OptionSpec)` to `hasMatchedOption`\n    * `hasPositional(int)`, `hasPositional(PositionalParamSpec)` to `hasMatchedPositional`\n* Renamed `ParseResult.optionValue(String, T)` to `matchedOptionValue(String, T)`, and `positionalValue` to `matchedPositionalValue`.\n* Removed `ParseResult::rawOptionValue(s)` and `rawPositionalValue(s)` methods.\n* Removed `ParseResult.matchedOptionValue(OptionSpec)` and `matchedPositionalValue(PositionalParamSpec)` methods.\n\n### 3.0.0-beta-1\n- The usage message format changed: it now dynamically adjusts the width of the long option name column. This may break tests.\n- API Change: Removed parser option `arityRestrictsCumulativeSize` introduced in 3.0.0-alpha-3.\n\n### 3.0.0-beta-2\n- Stricter arity validation may break existing applications that intentionally consume arguments regardless of whether arguments are other options.\n\n\n# <a name=\"3.0.0-beta-2\"></a> Picocli 3.0.0-beta-2\nThe picocli community is pleased to announce picocli 3.0.0-beta-2.\n\nThis release contains enhancements and bug fixes.\n\nThis is the twenty-eighth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-beta-2-toc\"></a> Table of Contents\n* [New and noteworthy](#3.0.0-beta-2-new)\n* [Promoted features](#3.0.0-beta-2-promoted)\n* [Fixed issues](#3.0.0-beta-2-fixes)\n* [Deprecations](#3.0.0-beta-2-deprecated)\n* [Potential breaking changes](#3.0.0-beta-2-breaking-changes)\n\n## <a name=\"3.0.0-beta-2-new\"></a> New and Noteworthy\n\n### Stricter Arity Validation\n\nUntil this release, options with mandatory parameters would consume as many arguments as required, even if those arguments matched other option flags. For example:\n\nGiven a command like this:\n```java\nclass App {\n  @Option(names = \"-a\", arity = \"2\")\n  String[] a;\n\n  @Option(names = \"-v\")\n  boolean v;\n}\n```\nPrior to this change, the following input would be accepted:\n```\n<command> -a 1 -v\n```\nIn previous versions, picocli accepted this and assigned `\"1\"` and `\"-v\"` as the two values for the `-a` option.\nFrom this release, the parser notices that one of the arguments is an option and throws a `MissingParameterException` because not enough parameters were specified for the first option.\n\n\n## <a name=\"3.0.0-beta-2-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-beta-2-fixes\"></a> Fixed issues\n- [#366] API Change: Add `ArgSpec.getTypedValues()` method.\n- [#365] Enhancement: Stricter arity validation: options with mandatory parameters no longer consume other option flags.\n- [#357] Enhancement: Improve synopsis format. Be more succinct when `limitSplit` is true. Support repeating groups.\n\n## <a name=\"3.0.0-beta-2-deprecated\"></a> Deprecations\n\n## <a name=\"3.0.0-beta-2-breaking-changes\"></a> Potential breaking changes\n- Stricter arity validation may break existing applications that intentionally consume arguments regardless of whether arguments are other options.\n\n\n# <a name=\"3.0.0-beta-1\"></a> Picocli 3.0.0-beta-1\nThe picocli community is pleased to announce picocli 3.0.0-beta-1.\n\nThis release contains enhancements and bug fixes.\n\nThis is the twenty-seventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-beta-1-toc\"></a> Table of Contents\n* [New and noteworthy](#3.0.0-beta-1-new)\n* [Promoted features](#3.0.0-beta-1-promoted)\n* [Fixed issues](#3.0.0-beta-1-fixes)\n* [Deprecations](#3.0.0-beta-1-deprecated)\n* [Potential breaking changes](#3.0.0-beta-1-breaking-changes)\n\n## <a name=\"3.0.0-beta-1-new\"></a> New and Noteworthy\nPreviously, the usage message layout had a fixed width long option name column: this column is always 24 characters, even if none of the options have a long option name.\n\nThis gives weird-looking usage help messages in some cases. For example:\n```java\n@Command(name=\"ls\")\nclass App {\n    @Option(names = \"-a\", description = \"display all files\") boolean a;\n    @Option(names = \"-l\", description = \"use a long listing format\") boolean l;\n    @Option(names = \"-t\", description = \"sort by modification time\") boolean t;\n}\n```\n\nThe usage message for this example was:\n```\nUsage: ls [-alt]\n  -a                          display all files\n  -l                          use a long listing format\n  -t                          sort by modification time\n```\nFrom this release, picocli adjusts the width of the long option name column to the longest name (max 24).\n\nThe new usage message for this example looks like this:\n```\nUsage: ls [-alt]\n  -a     display all files\n  -l     use a long listing format\n  -t     sort by modification time\n```\n\n## <a name=\"3.0.0-beta-1-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-beta-1-fixes\"></a> Fixed issues\n- [#364] API Change: Remove parser option `arityRestrictsCumulativeSize`.\n- [#355] API Change: Add method `ArgSpec.hasInitialValue`.\n- [#361] API Change: Add parser option `aritySatisfiedByAttachedOptionParam` for commons-cli compatibility.\n- [#363] API Change: Add parser option to limit the number of parts when splitting to max arity, for compatibility with commons-cli.\n- [#360] Enhancement: Dynamically adjust width of long option name column (up to max 24).\n\n\n## <a name=\"3.0.0-beta-1-deprecated\"></a> Deprecations\n\n## <a name=\"3.0.0-beta-1-breaking-changes\"></a> Potential breaking changes\n\n- The usage message format changed: it now dynamically adjusts the width of the long option name column. This may break tests.\n- API Change: Removed parser option `arityRestrictsCumulativeSize` introduced in 3.0.0-alpha-3.\n\n# <a name=\"3.0.0-alpha-6\"></a> Picocli 3.0.0-alpha-6\nThe picocli community is pleased to announce picocli 3.0.0-alpha-6.\n\nThis release contains enhancements and bug fixes.\n\nThis is the twenty-sixth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-6-toc\"></a> Table of Contents\n* [New and noteworthy](#3.0.0-alpha-6-new)\n* [Promoted features](#3.0.0-alpha-6-promoted)\n* [Fixed issues](#3.0.0-alpha-6-fixes)\n* [Deprecations](#3.0.0-alpha-6-deprecated)\n* [Potential breaking changes](#3.0.0-alpha-6-breaking-changes)\n\n## <a name=\"3.0.0-alpha-6-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.0.0-alpha-6-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-alpha-6-fixes\"></a> Fixed issues\n- [#349] New API: Add `longestName()` convenience method to OptionSpec.\n- [#352] New API: Add method to copy all attributes of a ParserSpec to a CommandSpec.\n- [#353] New API: Add method to copy all attributes of a UsageMessageSpec to a CommandSpec.\n- [#343] New API: Add method `Help.Ansi.Text::concat` and deprecate the `append` method. (\"Append\" suggests the Text object is modified, like StringBuilder, but Text is immutable.)\n- [#350] Enhancement: Improve error message for `usageHelp` and `versionHelp` validation.\n- [#344] Enhancement: Don't show WARN message for unmatched args or overwritten options.\n- [#351] Documentation: Improve javadoc for OptionSpec.usageHelp and versionHelp.\n- [#354] Bug fix: Interpreter should reset options and positional parameters to their initial value before parsing new input.\n\n## <a name=\"3.0.0-alpha-6-deprecated\"></a> Deprecations\n- The `Help.Ansi.Text::append` method is now deprecated in favour of the new `concat` method.\n\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-deprecated)\n\n## <a name=\"3.0.0-alpha-6-breaking-changes\"></a> Potential breaking changes\nSee also breaking changes for\n[3.0.0-alpha-5](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-5#3.0.0-alpha-5-breaking-changes),\n[3.0.0-alpha-4](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-4#3.0.0-alpha-4-breaking-changes),\n[3.0.0-alpha-3](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-3#3.0.0-alpha-3-breaking-changes),\n[3.0.0-alpha-2](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-2#3.0.0-alpha-2-breaking-changes),\nand [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-breaking-changes).\n\n\n\n\n# <a name=\"3.0.0-alpha-5\"></a> Picocli 3.0.0-alpha-5\nThe picocli community is pleased to announce picocli 3.0.0-alpha-5.\n\nThis release contains enhancements and bug fixes.\n\nThis is the twenty-fifth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-5-toc\"></a> Table of Contents\n\n* [New and noteworthy](#3.0.0-alpha-5-new)\n* [Promoted features](#3.0.0-alpha-5-promoted)\n* [Fixed issues](#3.0.0-alpha-5-fixes)\n* [Deprecations](#3.0.0-alpha-5-deprecated)\n* [Potential breaking changes](#3.0.0-alpha-5-breaking-changes)\n\n## <a name=\"3.0.0-alpha-5-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.0.0-alpha-5-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-alpha-5-fixes\"></a> Fixed issues\n\n- [#329] New API: Add parser configuration to control whether boolean flags should be toggled.\n- [#328] New API: Provide getter methods on `OptionSpec.Builder` and `PositionalParamSpec.Builder`.\n- [#326] New API: Add parser configuration to treat unmatched options as positional parameters.\n- [#283] New API: Provide `getMissing` method on MissingParameterException to get a reference to the problematic options and positional parameters. Thanks to [jcapsule](https://github.com/jcapsule) for the suggestion.\n- [#334] API Change: Rename `ArgSpec.rawStringValues()` to `ArgSpec.stringValues()`.\n- [#342] API Change: Prefix ParseResult methods with `matched` if they return only matched options/positionals.\n- [#340] API Change: Rename `ParseResult.optionValue(String, T)` to `matchedOptionValue(String, T)`.\n- [#338] API Change: Remove `ParseResult.rawOptionValue(s)` and `rawPositionalValue(s)` methods.\n- [#339] API Change: Remove `ParseResult.matchedOptionValue(OptionSpec)` and `matchedPositionalValue(PositionalParamSpec)` methods.\n- [#347] API Change: Make `ArgSpec.getValue`, `setValue` and `isMultiValue` public methods.\n- [#333] Enhancement: Added subcommand to synopsis in generated usage help. Thanks to [jcapsule](https://github.com/jcapsule) for the pull request.\n- [#323] Enhancement: Remove dependency on java.sql package: picocli should only require the java.base module when running in Java 9.\n- [#325] Enhancement: Allow custom type converter to map empty String to custom default value for empty options. Thanks to [jesselong](https://github.com/jesselong) for the suggestion.\n- [#303] Enhancement: Improve validation to prevent common mistakes.\n- [#70]  Enhancement: Positional parameters should only consume values where type conversion succeeds.\n- [#346] Enhancement: Validate that arity min is never greater than max.\n- [#348] Enhancement: Interpreter should call `ArgSpec.setValue` for every matched option or positional parameter.\n- [#327] Bugfix: Default values should not cause options and positional parameters to be added to ParseResult.\n- [#330] Bugfix: `Interpreter` should clear option's and positional parameter's `stringValues` list before parsing new input.\n- [#335] Bugfix: Abstract class `ArgSpec` should not implement `equals` and `hashCode`.\n- [#345] Bugfix: Stop processing varargs when cumulative size reached.\n\n## <a name=\"3.0.0-alpha-5-deprecated\"></a> Deprecations\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-deprecated)\n\n## <a name=\"3.0.0-alpha-5-breaking-changes\"></a> Potential breaking changes\n\n* Renamed `ArgSpec.rawStringValues()` to `ArgSpec.stringValues()`.\n* Renamed `ParseResult` methods with `matched` if they return only matched options/positionals:\n    * `options` to `matchedOptions`\n    * `positionalParams` to `matchedPositionals`\n    * `option(char)`, `option(String)` to `matchedOption`\n    * `positional(int)` to `matchedPositional`\n    * `hasOption(char)`, `hasOption(String)`, `hasOption(OptionSpec)` to `hasMatchedOption`\n    * `hasPositional(int)`, `hasPositional(PositionalParamSpec)` to `hasMatchedPositional`\n* Renamed `ParseResult.optionValue(String, T)` to `matchedOptionValue(String, T)`, and `positionalValue` to `matchedPositionalValue`.\n* Removed `ParseResult::rawOptionValue(s)` and `rawPositionalValue(s)` methods.\n* Removed `ParseResult.matchedOptionValue(OptionSpec)` and `matchedPositionalValue(PositionalParamSpec)` methods.\n\nSee also breaking changes for\n[3.0.0-alpha-4](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-4#3.0.0-alpha-4-breaking-changes),\n[3.0.0-alpha-3](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-3#3.0.0-alpha-3-breaking-changes),\n[3.0.0-alpha-2](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-2#3.0.0-alpha-2-breaking-changes),\nand [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-breaking-changes).\n\n\n\n\n# <a name=\"3.0.0-alpha-4\"></a> Picocli 3.0.0-alpha-4\nThe picocli community is pleased to announce picocli 3.0.0-alpha-4.\n\nThis release contains enhancements and bug fixes.\n\nThis is the twenty-fourth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-4-toc\"></a> Table of Contents\n\n* [New and noteworthy](#3.0.0-alpha-4-new)\n* [Promoted features](#3.0.0-alpha-4-promoted)\n* [Fixed issues](#3.0.0-alpha-4-fixes)\n* [Deprecations](#3.0.0-alpha-4-deprecated)\n* [Potential breaking changes](#3.0.0-alpha-4-breaking-changes)\n\n## <a name=\"3.0.0-alpha-4-new\"></a> New and Noteworthy\n\n\n## <a name=\"3.0.0-alpha-4-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-alpha-4-fixes\"></a> Fixed issues\n\n- [#318] API Change: Split model IBinding into IGetter and ISetter.\n- [#320] API Change: Rename parser config `maxArityIsMaxTotalParams` to `arityRestrictsCumulativeSize`.\n- [#216] Enhancement: Parsed values now replace the default value of multi-value (array, Collection or Map) options and positional parameters instead of being appended to them. Thanks to [wiwie](https://github.com/wiwie) for the request.\n- [#261] Enhancement: Options and positional parameters with a `defaultValue` are never required. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#315] Enhancement: Initialize ArgSpec value with `defaultValue` before parsing command line.\n- [#263] Bugfix: positional parameter defaults were not shown in usage help message. Thanks to [ymenager](https://github.com/ymenager) for the bug report.\n\n## <a name=\"3.0.0-alpha-4-deprecated\"></a> Deprecations\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-deprecated)\n\n## <a name=\"3.0.0-alpha-4-breaking-changes\"></a> Potential breaking changes\n- Parsed values now replace the default value of multi-value (array, Collection or Map) options and positional parameters instead of being appended to them.\n- The `IBinding` interface introduced in v3.0.0-alpha-1 has been replaced with two functional interfaces `IGetter` and `ISetter`.\n- The `UnmatchedArgsBinding` factory methods introduced in v3.0.0-alpha-1 have been replaced with `forStringArrayConsumer` and `forStringCollectionSupplier`.\n\n\nSee also breaking changes for [3.0.0-alpha-3](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-3#3.0.0-alpha-3-breaking-changes),\n[3.0.0-alpha-2](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-2#3.0.0-alpha-2-breaking-changes),\nand [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-breaking-changes).\n\n\n\n# <a name=\"3.0.0-alpha-3\"></a> Picocli 3.0.0-alpha-3\nThe picocli community is pleased to announce picocli 3.0.0-alpha-3.\n\nThis release includes changes to allow picocli to be configured to function like Apache Commons CLI, to support [GROOVY-8520](https://issues.apache.org/jira/browse/GROOVY-8520):\n* `maxArityIsMaxTotalParams` parser configuration option to use `arity` to limit the total number of values accumulated in an option or positional parameter.\n* Usage message width can now be configured programmatically.\n* \"Lenient\" mode when extracting annotations from a class where picocli annotations are optional (to allow mixing Groovy CLI annotations in Groovy CliBuilder).\n* Change semantics of ParseResult.rawOptionValue to mean values after split (but before type conversion).\n\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1) and [3.0.0-alpha-2](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-2#3.0.0-alpha-2) for recent functional changes.\n\nThis is the twenty-third public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-3-toc\"></a> Table of Contents\n\n* [New and noteworthy](#3.0.0-alpha-3-new)\n* [Promoted features](#3.0.0-alpha-3-promoted)\n* [Fixed issues](#3.0.0-alpha-3-fixes)\n* [Deprecations](#3.0.0-alpha-3-deprecated)\n* [Potential breaking changes](#3.0.0-alpha-3-breaking-changes)\n\n## <a name=\"3.0.0-alpha-3-new\"></a> New and Noteworthy\n### Max Arity Is Max Total Params\n\nThis release introduces a `maxArityIsMaxTotalParams` parser configuration option.\n\nBy default, the arity of an option is the number of arguments _for each occurrence_ of the option.\nFor example, if option `-a` has `arity = \"2\"`, then the following is a perfectly valid command:\nfor each occurrence of the option, two option parameters are specified.\n```bash\n<command> -a 1 2 -a 3 4 -a 5 6\n```\nHowever, if `CommandLine.setMaxArityIsMaxTotalParams(true)` is called first, the above example would result in a `MaxValuesExceededException` because the total number of values (6) exceeds the arity of 2.\n\nAdditionally, by default, when `maxArityIsMaxTotalParams` is `false`, arity is only applied _before_ the argument is split into parts,\nwhile when `maxArityIsMaxTotalParams` is set to `true`, validation is applied _after_ a command line argument has been split into parts.\n\nFor example, if we have an option like this:\n```java\n@Option(name = \"-a\", arity = \"1..2\", split = \",\") String[] values;\n```\nBy default, the following input would be a valid command:\n```bash\n<command> -a 1,2,3\n```\nBy default, the option arity tells the parser to consume 1 to 2 arguments, and the option was followed by a single parameter, `\"1,2,3\"`, which is fine.\n\nHowever, if `maxArityIsMaxTotalParams` is set to true, the above example would result in a `MaxValuesExceededException` because the argument is split into 3 parts, which exceeds the max arity of 2.\n\n## <a name=\"3.0.0-alpha-3-promoted\"></a> Promoted Features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-alpha-3-fixes\"></a> Fixed issues\n\n- [#313] Enhancement and New API: add method `CommandLine::setMaxArityIsMaxTotalParams` to configure the parser to use `arity` to limit the total number of values accumulated in an option or positional parameter.\n- [#314] Enhancement and New API: add method `CommandLine::setUsageHelpWidth` and `UsageMessageSpec::width` to set the max usage help message width.\n- [#316] Enhancement: Support lenient mode where annotations are optional when extracting annotations.\n- [#317] Enhancement: Change semantics of ParseResult.rawOptionValue to mean values after split (but before type conversion).\n\n## <a name=\"3.0.0-alpha-3-deprecated\"></a> Deprecations\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-deprecated)\n\n## <a name=\"3.0.0-alpha-3-breaking-changes\"></a> Potential breaking changes\n- Utility method `CommandLine.Help.join` signature changed: now takes an additional `usageHelpWidth` parameter.\n- Constructor `CommandLine.Help.Layout(ColorScheme)` signature changed: now takes an additional `usageHelpWidth` parameter.\n- Public field `CommandLine.Help.TextTable.columns` is now private; added public method `CommandLine.Help.TextTable.columns()`.\n- Constructor `CommandLine.Help.TextTable(Ansi)` is replaced with factory method `CommandLine.Help.TextTable.forDefaultColumns(Ansi, int)`.\n- Constructor `CommandLine.Help.TextTable(Ansi, int...)` is replaced with factory method `CommandLine.Help.TextTable.forColumnWidths(Ansi, int...)`.\n- Constructor `CommandLine.Help.TextTable(Ansi, Column...)` modifier changed from public to protected.\n- Added factory method `CommandLine.Help.TextTable.forColumns(Ansi, Column...)`.\n- Renamed `CommandLine.MaxValuesforFieldExceededException` to `CommandLine.MaxValuesExceededException`.\n\nSee [3.0.0-alpha-2](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-2#3.0.0-alpha-2-breaking-changes).\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-breaking-changes).\n\n\n\n# <a name=\"3.0.0-alpha-2\"></a> Picocli 3.0.0-alpha-2\nThe picocli community is pleased to announce picocli 3.0.0-alpha-2.\n\nThis release includes some bug fixes and small enhancements. See [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1) for recent functional changes.\n\nThis is the twenty-second public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-2-fixes\"></a> Fixed issues\n\n- [#312] Enhancement and API change: Remove `AbstractSimpleParseResultHandler` class and `parseWithSimpleHandlers` method.\n- [#311] Enhancement and API change: Simplify parseWithHandlers: removed prototypeReturnValue parameter.\n- [#307] Enhancement: Provide CommandLine.usage(PrintWriter) method for testing and to facilitate [GROOVY-8520](https://issues.apache.org/jira/browse/GROOVY-8520) migration from commons-cli to picocli.\n- [#306] Enhancement: Support generating autocompletion scripts for non-public @Command classes. Thanks to [cbeams](https://github.com/cbeams) for the request.\n- [#308] Enhancement: Provide API to disallow POSIX clustered short options.\n- [#310] Enhancement: PicocliBaseScript should follow conventions for stdout and stderr: requested help to stdout, invalid input usage help to stderr.\n- [#309] Bugfix: Tests were failing on environments that support ANSI colors.\n\n## <a name=\"3.0.0-alpha-2-deprecated\"></a> Deprecations\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-deprecated)\n\n## <a name=\"3.0.0-alpha-2-breaking-changes\"></a> Potential breaking changes\n- [#311] API change from 3.0.0-alpha-1: the `parseWithHandlers` methods signature changed: removed the `prototypeReturnValue` parameter.\n- [#312] API change from 3.0.0-alpha-1: Remove `AbstractSimpleParseResultHandler` class and `parseWithSimpleHandlers` method.\n\nSee [3.0.0-alpha-1](https://github.com/remkop/picocli/releases/tag/v3.0.0-alpha-1#3.0.0-alpha-1-breaking-changes)\n\n# <a name=\"3.0.0-alpha-1\"></a> Picocli 3.0.0-alpha-1\nThe picocli community is pleased to announce picocli 3.0.0-alpha-1.\n\nThis release offers a programmatic API for creating command line applications, in addition to annotations. The programmatic API allows applications to dynamically create command line options on the fly, and also makes it possible to create idiomatic domain-specific languages for processing command line arguments, using picocli, in other JVM languages.\n\nAnother new feature in this release are Mixins. Mixins allow reusing common options, parameters and command attributes in multiple applications without copy-and-paste duplication.\n\nThird, this release aims to reduce boilerplate code in user applications even further with the new `mixinStandardHelpOptions` command attribute. Picocli adds standard `usageHelp` and `versionHelp` options to commands with this attribute. Additionally picocli now offers a `HelpCommand` that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands.\n\nFrom this release, picocli is better at following unix conventions: print to stdout when the user requested help, and print to stderr when the input was invalid or an unexpected error occurred.\n\nAlso, this release gives better control over the process exit code.\n\nAdditionally, fields annotated with `@Unmatched` will be populated with the unmatched arguments.\n\nFurthermore, this release adds a `showDefaultValue` attribute to the `@Option` and `@Parameters` annotation.\n\nThis is the twenty-first public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"3.0.0-alpha-1-toc\"></a> Table of Contents\n\n* [New and noteworthy](#3.0.0-alpha-1-new)\n* [Promoted features](#3.0.0-alpha-1-promoted)\n* [Fixed issues](#3.0.0-alpha-1-fixes)\n* [Deprecations](#3.0.0-alpha-1-deprecated)\n* [Potential breaking changes](#3.0.0-alpha-1-breaking-changes)\n\n## <a name=\"3.0.0-alpha-1-new\"></a> New and Noteworthy\n\n### <a name=\"3.0.0-alpha-1-Programmatic-API\"></a> Programmatic API (INCUBATING)\nThis release offers a programmatic API for creating command line applications, in addition to annotations. The programmatic API allows applications to dynamically create command line options on the fly, and also makes it possible to create idiomatic domain-specific languages for processing command line arguments, using picocli, in other JVM languages.\n\nNote that the programmatic API is incubating and the API may change in subsequent releases. _If you have suggestions for improving the programmatic API, please raise a ticket on GitHub!_\n\n#### Example\n```java\nCommandSpec spec = CommandSpec.create();\nspec.mixinStandardHelpOptions(true); // usageHelp and versionHelp options\nspec.addOption(OptionSpec.builder(\"-c\", \"--count\")\n        .paramLabel(\"COUNT\")\n        .type(int.class)\n        .description(\"number of times to execute\").build());\nspec.addPositional(PositionalParamSpec.builder()\n        .paramLabel(\"FILES\")\n        .type(List.class)\n        .auxiliaryTypes(File.class) // List<File>\n        .description(\"The files to process\").build());\nCommandLine commandLine = new CommandLine(spec);\n\ncommandLine.parseWithSimpleHandlers(new AbstractSimpleParseResultHandler() {\n    public void handle(ParseResult pr) {\n        int count = pr.optionValue('c', 1);\n        List<File> files = pr.positionalValue(0, Collections.<File>emptyList());\n        for (int i = 0; i < count; i++) {\n            for (File f : files) {\n                System.out.printf(\"%d: %s%n\", i, f);\n            }\n        }\n    }\n}, args);\n```\n\n#### CommandSpec (INCUBATING)\n`CommandSpec` models a command. It is the programmatic variant of the `@Command` annotation. It has a name and a version, both of which may be empty.  It also has a `UsageMessageSpec` to configure aspects of the usage help message and a `ParserSpec` that can be used to control the behaviour of the parser.\n\n#### OptionSpec and PositionalParamSpec (INCUBATING)\n`OptionSpec` models a named option, and `PositionalParamSpec` models one or more positional parameters. They are the programmatic variant of the `@Option` and `@Parameters` annotations, respectively.\n\nAn `OptionSpec` must have at least one name, which is used during parsing to match command line arguments. Other attributes can be left empty and picocli will give them a reasonable default value. This defaulting is why `OptionSpec` objects are created with a builder: this allows you to specify only some attributes and let picocli initialise the other attributes. For example, if only the option’s name is specified, picocli assumes the option takes no parameters (arity = 0), and is of type `boolean`. Another example, if arity is larger than `1`, picocli sets the type to `List` and the `auxiliary type` to `String`.\n\n`PositionalParamSpec` objects don’t have names, but have an index range instead. A single `PositionalParamSpec` object can capture multiple positional parameters. The default index range is set to `0..*` (all indices). A command may have multiple `PositionalParamSpec` objects to capture positional parameters at different index ranges. This can be useful if positional parameters at different index ranges have different data types.\n\nSimilar to `OptionSpec` objects, Once a `PositionalParamSpec` is constructed, its configuration becomes immutable, but its `value` can still be modified. Usually the value is set during command line parsing when a non-option command line argument is encountered at a position in its index range.\n\n#### <a name=\"3.0.0-alpha-1-ParseResult\"></a> ParseResult (INCUBATING)\nA `ParseResult` class is now available that allows applications to inspect the result of parsing a sequence of command line arguments.\n\nThis class provides methods to query whether the command line arguments included certain options or position parameters, and what the value or values of these options and positional parameters was. Both the original command line argument String value as well as a strongly typed value can be obtained.\n\n\n### Mixins for Reuse\nMixins are a convenient alternative to subclassing: picocli annotations from _any_ class can be added to (\"mixed in\" with) another command. This includes options, positional parameters, subcommands and command attributes. Picocli [autoHelp](#3.0.0-alpha-1-autohelp) internally uses a mixin.\n\nA mixin is a separate class with options, positional parameters, subcommands and command attributes that can be reused in other commands. Mixins can be installed by calling the `CommandLine.addMixin` method with an object of this class, or annotating a field in your command with `@Mixin`. Here is an example mixin class:\n\n```java\npublic class ReusableOptions {\n\n    @Option(names = { \"-v\", \"--verbose\" }, description = {\n        \"Specify multiple -v options to increase verbosity.\", \"For example, `-v -v -v` or `-vvv`\" })\n    protected boolean[] verbosity = new boolean[0];\n}\n```\n\n#### Adding Mixins Programmatically\nThe below example shows how a mixin can be added programmatically with the `CommandLine.addMixin` method.\n\n```java\nCommandLine commandLine = new CommandLine(new MyCommand());\ncommandline.addMixin(\"myMixin\", new ReusableOptions());\n```\n#### `@Mixin` Annotation\nA command can also include mixins by annotating fields with `@Mixin`. All picocli annotations found in the mixin class\nare added to the command that has a field annotated with `@Mixin`. For example:\n\n```java\n@Command(name = \"zip\", description = \"Example reuse with @Mixin annotation.\")\npublic class MyCommand {\n\n    // adds the options defined in ReusableOptions to this command\n    @Mixin\n    private ReusableOptions myMixin;\n}\n```\n\n\n### <a name=\"3.0.0-alpha-1-mixinStandardHelpOptions\"></a> Standard Help Options\nThis release introduces the `mixinStandardHelpOptions` command attribute. When this attribute is set to `true`, picocli adds a mixin to the command that adds `usageHelp` and `versionHelp` options to the command. For example:\n\n```java\n@Command(mixinStandardHelpOptions = true, version = \"auto help demo - picocli 3.0\")\nclass AutoHelpDemo implements Runnable {\n\n    @Option(names = \"--option\", description = \"Some option.\")\n    String option;\n\n    @Override public void run() { }\n}\n```\n\nCommands with `mixinStandardHelpOptions` do not need to explicitly declare fields annotated with `@Option(usageHelp = true)` and `@Option(versionHelp = true)` any more. The usage help message for the above example looks like this:\n```text\nUsage: <main class> [-hV] [--option=<option>]\n      --option=<option>       Some option.\n  -h, --help                  Show this help message and exit.\n  -V, --version               Print version information and exit.\n```\n\n### <a name=\"3.0.0-alpha-1-HelpCommand\"></a> Help Command\n\nFrom this release, picocli provides a `help` subcommand (`picocli.CommandLine.HelpCommand`) that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands. For example:\n\n```java\n@Command(subcommands = HelpCommand.class)\nclass AutoHelpDemo implements Runnable {\n\n    @Option(names = \"--option\", description = \"Some option.\")\n    String option;\n\n    @Override public void run() { }\n}\n```\n\n\n```text\n# print help for the `maincommand` command\nmaincommand help\n\n# print help for the `subcommand` command\nmaincommand help subcommand\n```\n\nFor applications that want to create a custom help command, this release also introduces a new interface `picocli.CommandLine.IHelpCommandInitializable` that provides custom help commands with the information they need: access to the parent command and sibling commands, whether to use Ansi colors or not, and the streams to print the usage help message to.\n\n### <a name=\"3.0.0-alpha-1-Unmatched\"></a> `@Unmatched` Annotation\nFrom this release, fields annotated with `@Unmatched` will be populated with the unmatched arguments.\nThe field must be of type `String[]` or `List<String>`.\n\nIf picocli finds a field annotated with `@Unmatched`, it automatically sets `unmatchedArgumentsAllowed` to `true`\nso no `UnmatchedArgumentException` is thrown when a command line argument cannot be assigned to an option or positional parameter.\n\n### <a name=\"3.0.0-alpha-1-std\"></a> Stdout or Stderr\nFrom picocli v3.0, the `run` and `call` convenience methods follow unix conventions:\nprint to stdout when the user requested help, and print to stderr when the input was invalid or an unexpected error occurred.\n\nCustom handlers can extend `AbstractHandler` to facilitate following this convention.\n`AbstractHandler` also provides `useOut` and `useErr` methods to allow customizing the target output streams,\nand `useAnsi` to customize the Ansi style to use:\n\n```java\n@Command class CustomizeTargetStreamsDemo implements Runnable {\n    public void run() { ... }\n\n    public static void main(String... args) {\n        CommandLine cmd = new CommandLine(new CustomizeTargetStreamsDemo());\n\n        PrintStream myOut = getOutputPrintStream(); // custom stream to send command output to\n        PrintStream myErr = getErrorPrintStream();  // custom stream for error messages\n\n        cmd.parseWithHandlers(\n                new RunLast().useOut(myOut).useAnsi(Help.Ansi.ON),\n                new DefaultExceptionHandler().useErr(myErr).useAnsi(Help.Ansi.OFF),\n                args);\n    }\n}\n```\n\n### <a name=\"3.0.0-alpha-1-exit-code\"></a> Exit Code Support\nFrom picocli v3.0, the built-in parse result handlers (`RunFirst`, `RunLast` and `RunAll`) and exception handler\n(`DefaultExceptionHandler`) can specify an exit code.\nIf an exit code was specified, the handler terminates the JVM with the specified status code when finished.\n\n```java\n@Command class ExitCodeDemo implements Runnable {\n    public void run() { throw new ParameterException(new CommandLine(this), \"exit code demo\"); }\n\n    public static void main(String... args) {\n        CommandLine cmd = new CommandLine(new ExitCodeDemo());\n        cmd.parseWithHandlers(\n                new RunLast().andExit(123),\n                new DefaultExceptionHandler().andExit(456),\n                args);\n    }\n}\n```\nRunning this command prints the following to stderr and exits the JVM with status code `456`.\n\n```\nexit code demo\nUsage: <main class>\n```\n\nCustom handlers can extend `AbstractHandler` to inherit this behaviour.\n\n\n### Fine-grained ShowDefault\n\nThis release adds a `showDefaultValue` attribute to the `@Option` and `@Parameters` annotation. This allows you to specify for each individual option and positional parameter whether its default value should be shown in the usage help.\n\nThis attribute accepts three values:\n\n* `ALWAYS` - always display the default value of this option or positional parameter, even `null` values, regardless what value of `showDefaultValues` was specified on the command\n* `NEVER` - don't show the default value for this option or positional parameter, regardless what value of `showDefaultValues` was specified on the command\n* `ON_DEMAND` - (this is the default) only show the default value for this option or positional parameter if `showDefaultValues` was specified on the command\n\nThe `NEVER` value is useful for security sensitive command line arguments like passwords. The `ALWAYS` value is useful when you only want to show the default value for a few arguments but not for all (in combination with `@Command(showDefaultValues = false)`).\n\n\n## <a name=\"3.0.0-alpha-1-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"3.0.0-alpha-1-fixes\"></a> Fixed issues\n\n- [#245] New Feature: from 3.0, picocli offers an API for programmatic configuration.\n- [#257] New Feature: new `ParseResult` class allows programmatic inspection of the result of parsing a sequence of command line arguments.\n- [#144] New Feature: added support for mixins to allow reusing common options, positional parameters, subcommands and command attributes from any object.\n- [#253] New Feature: added `@Unmatched` annotation for unmatched arguments.\n- [#175] New Feature: `mixinStandardHelpOptions` attribute to install the standard `--help` and `--version` options, obviating the need for fields annotated with `@Option(usageHelp = true)` and `@Option(versionHelp = true)`.\n- [#175] New Feature: picocli now provides a `HelpCommand` that can be installed as a subcommand on any application command to provide usage help for the parent command or sibling subcommands.\n- [#175] New Feature: new `IHelpCommandInitializable` interface facilitates construction of custom help commands.\n- [#250] Enhancement: the `run` and `call` convenience methods now follow convention: print to stdout when the user requested help, print to stderr when the input was invalid or an unexpected error occurred. Added `AbstractHandler` to facilitate following this convention for custom parse result handlers and exception handlers.\n- [#251] New Feature: exit code support. The built-in parse result handlers (`RunFirst`, `RunLast` and `RunAll`) and exception handler  (`DefaultExceptionHandler`) can now optionally specify an exit code. If specified, the handler terminates the JVM with the specified status code when finished. Custom handlers can extend `AbstractHandler` to inherit this behaviour.\n- [#262] New Feature: new `showDefaultValue` attribute on `@Option` and `@Parameters` gives fine-grained control over which default values to show or hide. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#268] New Feature: new `helpCommand` attribute on `@Command`: if the command line arguments contain a subcommand annotated with `helpCommand`, the parser will not validate the required options or positional parameters of the parent command. Thanks to [ymenager](https://github.com/ymenager) for the request.\n- [#277] New Feature: new `hidden` attribute on `@Command` to omit the specified subcommand from the usage help message command list of the parent command. Thanks to [pditommaso](https://github.com/pditommaso).\n- [#159] Enhancement: make help usage message width configurable. Thanks to [pditommaso](https://github.com/pditommaso).\n\n## <a name=\"3.0.0-alpha-1-deprecated\"></a> Deprecations\n\nThe `picocli.CommandLine.Help::Help(Object, CommandLine.Help.ColorScheme)` constructor has been deprecated. Use the `picocli.CommandLine.Help::Help(CommandLine.CommandSpec, CommandLine.Help.ColorScheme)` constructor instead.\n\nThe `picocli.CommandLine.IParseResultHandler` interface has been deprecated. Use the `picocli.CommandLine.IParseResultHandler2` interface instead.\n\nThe `picocli.CommandLine.IExceptionHandler` interface has been deprecated. Use the `picocli.CommandLine.IExceptionHandler2` interface instead.\n\n## <a name=\"3.0.0-alpha-1-breaking-changes\"></a> Potential breaking changes\n\n### Help API Changes\nThe following public fields were removed from the `picocli.CommandLine.Help` class. Instead, set these attributes on a `CommandLine.CommandSpec` object passed to any of the `Help` constructors.\n\n* abbreviateSynopsis\n* commandListHeading\n* commandName\n* customSynopsis\n* description\n* descriptionHeading\n* footer\n* footerHeading\n* header\n* headerHeading\n* optionFields\n* optionListHeading\n* parameterLabelRenderer - replaced with the `Help.parameterLabelRenderer()` method\n* parameterListHeading\n* requiredOptionMarker\n* separator\n* showDefaultValues\n* sortOptions\n* synopsisHeading\n\nMethod signature changes on inner classes and interfaces of the `Help` class:\n\n* Interface method `CommandLine.Help.IOptionRenderer::render` signature changed: `CommandLine.Option` and `Field` parameters are replaced with a single `CommandLine.OptionSpec` parameter.\n* Interface method `CommandLine.Help.IParameterRenderer::render` signature changed: `CommandLine.Parameters` and `Field` parameters are replaced with a single `CommandLine.PositionalParamSpec` parameter.\n* Interface method `CommandLine.Help.IParamLabelRenderer::renderParameterLabel` signature changed: `Field` parameter replaced with `CommandLine.ArgSpec` parameter.\n* Class `CommandLine.Help.Layout` all methods changed: `Field` parameters replaced by `CommandLine.ArgSpec`, `CommandLine.OptionSpec` and `CommandLine.PositionalParamSpec` parameters.\n\n\n\n\n# <a name=\"2.3.0\"></a> Picocli 2.3.0\nThe picocli community is pleased to announce picocli 2.3.0.\n\nThis release contains bugfixes and new features.\n\nThis release introduces a new parser flag `stopAtPositional` to treat the first positional parameter as end-of-options, and a `stopAtUnmatched` parser flag to stop matching options and positional parameters as soon as an unmatched argument is encountered.\n\nThese flags are useful for applications that need to delegate part of the command line to third party commands.\n\nThis release offers better support for options with optional values, allowing applications to distinguish between cases where the option was not specified at all, and cases where the option was specified without a value.\n\n\nThis is the twentieth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.3.0-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.3.0-new)\n* [Promoted features](#2.3.0-promoted)\n* [Fixed issues](#2.3.0-fixes)\n* [Deprecations](#2.3.0-deprecated)\n* [Potential breaking changes](#2.3.0-breaking-changes)\n\n## <a name=\"2.3.0-new\"></a> New and noteworthy\n\n### Stop At Positional\nBy default, positional parameters can be mixed with options on the command line, but this is not always desirable. From this release, applications can call `CommandLine.setStopAtPositional(true)` to force the parser to treat all values following the first positional parameter as positional parameters.\n\nWhen this flag is set, the first positional parameter effectively serves as an \"end of options\" marker, without requiring a separate `--` argument.\n\n### Stop At Unmatched\nFrom this release, applications can call `CommandLine.setStopAtUnmatched(true)` to force the parser to stop interpreting options and positional parameters as soon as it encounters an unmatched argument.\n\nWhen this flag is set, the first unmatched argument and all subsequent command line arguments are added to the unmatched arguments list returned by `CommandLine.getUnmatchedArguments()`.\n\n\n### Optional Values\nIf an option is defined with `arity = \"0..1\"`, it may or not have a parameter value. If such an option is specified without a value on the command line, it is assigned an empty String. If the option is not specified, it keeps its default value. For example:\n\n```java\nclass OptionalValueDemo implements Runnable {\n    @Option(names = \"-x\", arity = \"0..1\", description = \"optional parameter\")\n    String x;\n\n    public void run() { System.out.printf(\"x = '%s'%n\", x); }\n\n    public static void main(String... args) {\n       CommandLine.run(new OptionalValueDemo(), System.out, args);\n    }\n}\n```\nGives the following results:\n```bash\njava OptionalValueDemo -x value\nx = 'value'\n\njava OptionalValueDemo -x\nx = ''\n\njava OptionalValueDemo\nx = 'null'\n```\n\n\n## <a name=\"2.3.0-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.3.0-fixes\"></a> Fixed issues\n\n- [#215] API: `stopAtUnmatched` flag to stop parsing on first unmatched argument. Thanks to [defnull](https://github.com/defnull) for the request.\n- [#284] API: `stopAtPositional` flag to treat first positional parameter as end-of-options. Thanks to [defnull](https://github.com/defnull) and [pditommaso](https://github.com/pditommaso) for the request.\n- [#279] Enhancement: assign empty String when String option was specified without value. Thanks to [pditommaso](https://github.com/pditommaso) for the request.\n- [#285] Bugfix: Vararg positional parameters should not consume options. Thanks to [pditommaso](https://github.com/pditommaso) for the bug report.\n- [#286] Documentation: clarify when picocli instantiates fields for options and positional parameters. Thanks to [JanMosigItemis](https://github.com/JanMosigItemis) for pointing this out.\n\n## <a name=\"2.3.0-deprecated\"></a> Deprecations\n\nThis release has no additional deprecations.\n\n## <a name=\"2.3.0-breaking-changes\"></a> Potential breaking changes\n\nThis release has no breaking changes.\n\n\n# <a name=\"2.2.2\"></a> Picocli 2.2.2\nThe picocli community is pleased to announce picocli 2.2.2.\n\nThis is a bugfix release.\n\n\nThis is the nineteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.2.2-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.2.2-new)\n* [Promoted features](#2.2.2-promoted)\n* [Fixed issues](#2.2.2-fixes)\n* [Deprecations](#2.2.2-deprecated)\n* [Potential breaking changes](#2.2.2-breaking-changes)\n\n## <a name=\"2.2.2-new\"></a> New and noteworthy\n\nThis is a bugfix release and does not include any new features.\n\n## <a name=\"2.2.2-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.2.2-fixes\"></a> Fixed issues\n\n- [#282] Bugfix: unmatched option heuristic did not work when there were no options to compare against. Thanks to [jcapsule](https://github.com/jcapsule).\n\n## <a name=\"2.2.2-deprecated\"></a> Deprecations\n\nThis release has no additional deprecations.\n\n## <a name=\"2.2.2-breaking-changes\"></a> Potential breaking changes\n\nThis release has no breaking changes.\n\n\n\n# <a name=\"2.2.1\"></a> Picocli 2.2.1\nThe picocli community is pleased to announce picocli 2.2.1.\n\nThis is a bugfix release.\n\n\nThis is the eighteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.2.1-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.2.1-new)\n* [Promoted features](#2.2.1-promoted)\n* [Fixed issues](#2.2.1-fixes)\n* [Deprecations](#2.2.1-deprecated)\n* [Potential breaking changes](#2.2.1-breaking-changes)\n\n## <a name=\"2.2.1-new\"></a> New and noteworthy\n\nThis is a bugfix release and does not include any new features.\n\n## <a name=\"2.2.1-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.2.1-fixes\"></a> Fixed issues\n\n- [#254] Bugfix: Starting from 2.0.3, usage help didn't render empty lines in multi-line descriptions.\n- [#255] Documentation: Update Kotlin example in user manual for the new Kotlin 1.2 array literal syntax in annotations.\n\n## <a name=\"2.2.1-deprecated\"></a> Deprecations\n\nThis release has no additional deprecations.\n\n## <a name=\"2.2.1-breaking-changes\"></a> Potential breaking changes\n\nThis release has no breaking changes.\n\n\n\n\n# <a name=\"2.2.0\"></a> Picocli 2.2.0\n\nThe picocli community is pleased to announce picocli 2.2.\n\nThis release is a \"Project Coin\"-like release for picocli: small changes with a nice pay-off.\n\n\nIn command line applications with subcommands, options of the parent command are often intended as \"global\" options that apply to all the subcommands. This release introduces a new `@ParentCommand` annotation that makes it easy for subcommands to access such parent command options: fields of the subcommand annotated with `@ParentCommand` are initialized with a reference to the parent command.\n\nThis release adds support for more built-in types, so applications don't need to register custom converters for common types. The new types include Java 7 classes like `java.nio.file.Path` and Java 8 classes like the value classes in the `java.time` package. These converters are loaded using reflection and are not available when running on Java 5 or Java 6.\n\nThis release also adds a `converter` attribute to the `@Option` and `@Parameter` annotations. This allows a specific option or positional parameter to use a different converter than would be used by default based on the type of the field.\n\nFurthermore, the `@Command` annotation now supports a `versionProvider` attribute. This is useful when the version of an application should be detected dynamically at runtime. For example, an implementation may return version information obtained from the JAR manifest, a properties file or some other source.\n\nFinally, applications may now specify a custom factory for instantiating classes that were configured as annotation attributes, like subcommands, type converters and version providers.\n\n\n\nThis is the seventeenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.2.0-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.2.0-new)\n* [Promoted features](#2.2.0-promoted)\n* [Fixed issues](#2.2.0-fixes)\n* [Deprecations](#2.2.0-deprecated)\n* [Potential breaking changes](#2.2.0-breaking-changes)\n\n## <a name=\"2.2.0-new\"></a> New and noteworthy\n\n### New `@ParentCommand` annotation\n\nIn command line applications with subcommands, options of the top level command are often intended as \"global\" options that apply to all the subcommands. Prior to this release, subcommands had no easy way to access their parent command options unless the parent command made these values available in a global variable.\n\nThe `@ParentCommand` annotation makes it easy for subcommands to access their parent command options: subcommand fields annotated with `@ParentCommand` are initialized with a reference to the parent command. For example:\n\n```java\n@Command(name = \"fileutils\", subcommands = List.class)\nclass FileUtils {\n\n    @Option(names = {\"-d\", \"--directory\"},\n            description = \"this option applies to all subcommands\")\n    File baseDirectory;\n}\n\n@Command(name = \"list\")\nclass List implements Runnable {\n\n    @ParentCommand\n    private FileUtils parent; // picocli injects reference to parent command\n\n    @Option(names = {\"-r\", \"--recursive\"},\n            description = \"Recursively list subdirectories\")\n    private boolean recursive;\n\n    @Override\n    public void run() {\n        list(new File(parent.baseDirectory, \".\"));\n    }\n\n    private void list(File dir) {\n        System.out.println(dir.getAbsolutePath());\n        if (dir.isDirectory()) {\n            for (File f : dir.listFiles()) {\n                System.out.println(f.getAbsolutePath());\n                if (f.isDirectory() && recursive) {\n                    list(f);\n                }\n            }\n        }\n    }\n}\n```\n\n### More built-in types\n\nThis release adds support for more built-in types, so applications don't need to register custom converters for common types. The new types include Java 7 classes like `java.nio.file.Path` and Java 8 classes like the value classes in the `java.time` package. These converters are loaded using reflection and are not available when running on Java 5 or Java 6.\n\nConverters for the following types were added in this release:\n\n* `java.nio.file.Path` (requires Java 7 or higher)\n* `java.time` value objects: `Duration`, `Instant`, `LocalDate`, `LocalDateTime`, `LocalTime`, `MonthDay`, `OffsetDateTime`, `OffsetTime`, `Period`, `Year`, `YearMonth`, `ZonedDateTime`, `ZoneId`, `ZoneOffset`  (requires Java 8 or higher, invokes the `parse` method of these classes)\n* `java.lang.Class` (for the fully qualified class name)\n* `java.nio.ByteOrder` (for the Strings `\"BIG_ENDIAN\"` or `\"LITTLE_ENDIAN\"`)\n* `java.util.Currency` (for the ISO 4217 code of the currency)\n* `java.net.NetworkInterface` (for the InetAddress or name of the network interface)\n* `java.util.TimeZoneConverter` (for the ID for a TimeZone)\n* `java.sql.Connection` (for a database url of the form `jdbc:subprotocol:subname`)\n* `java.sql.Driver` (for a database URL of the form `jdbc:subprotocol:subname`)\n* `java.sql.Timestamp` (for values in the `\"yyyy-MM-dd HH:mm:ss\"` or `\"yyyy-MM-dd HH:mm:ss.fffffffff\"` formats)\n\n### Option-specific Type Converters\nThis release adds a `converter` attribute to the `@Option` and `@Parameter` annotations. This allows a specific option or positional parameter to use a different converter than would be used by default based on the type of the field.\n\nFor example, you may want to convert the constant names defined in [`java.sql.Types`](https://docs.oracle.com/javase/9/docs/api/java/sql/Types.html) to their `int` value for a specific field, but this should not impact any other `int` fields: other `int` fields should continue to use the default int converter that parses numeric values.\n\nExample usage:\n\n```java\nclass App {\n    @Option(names = \"--sqlType\", converter = SqlTypeConverter.class)\n    int sqlType;\n}\n```\n\nExample implementation:\n\n```java\nclass SqlTypeConverter implements ITypeConverter<Integer> {\n    public Integer convert(String value) throws Exception {\n        switch (value) {\n            case \"ARRAY\"  : return Types.ARRAY;\n            case \"BIGINT\" : return Types.BIGINT;\n            case \"BINARY\" : return Types.BINARY;\n            case \"BIT\"    : return Types.BIT;\n            case \"BLOB\"   : return Types.BLOB;\n            //...\n        }\n    }\n}\n```\n\n### Dynamic Version Information\nFrom this release, the `@Command` annotation supports a `versionProvider` attribute. Applications may specify a `IVersionProvider` implementation in this attribute, and picocli will instantiate this class\nand invoke it to collect version information.\n\nThis is useful when the version of an application should be detected dynamically at runtime. For example, an implementation may return version information obtained from the JAR manifest, a properties file or some other source.\n\nCustom version providers need to implement the `picocli.CommandLine.IVersionProvider` interface:\n\n```java\npublic interface IVersionProvider {\n    /**\n     * Returns version information for a command.\n     * @return version information (each string in the array is displayed on a separate line)\n     * @throws Exception an exception detailing what went wrong when obtaining version information\n     */\n    String[] getVersion() throws Exception;\n}\n```\n\nThe GitHub project has a manifest file-based [example](https://github.com/remkop/picocli/blob/main/examples/src/main/java/picocli/examples/VersionProviderDemo2.java) and a build-generated version properties file-based [example](https://github.com/remkop/picocli/blob/main/examples/src/main/java/picocli/examples/VersionProviderDemo1.java) version provider implementation.\n\n### Custom factory\nDeclaratively registered subcommands, type converters and version providers must be instantiated somehow. From this release, a custom factory can be specified when constructing a `CommandLine` instance. This allows full control over object creation and opens possibilities for Inversion of Control and Dependency Injection. For example:\n\n```jshelllanguage\nIFactory myFactory = getCustomFactory();\nCommandLine cmdLine = new CommandLine(new Git(), myFactory);\n```\n\n## <a name=\"2.2.0-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.2.0-fixes\"></a> Fixed issues\n\n- [#247] New `@ParentCommand` annotation to inject a reference to the parent command into subcommand fields. Thanks to [michaelpj](https://github.com/michaelpj) for the request.\n- [#83]  Add more built-in converters. Thanks to [garydgregory](https://github.com/garydgregory/jcommander-addons) for the inspiration.\n- [#237] Option and Positional Parameter-specific type converters. Thanks to [godzsa](https://github.com/godzsa) for the request.\n- [#236] Allow obtaining version information dynamically at runtime. Thanks to [kcris](https://github.com/kcris) for the request.\n- [#169] Configurable factory to instantiate subcommands that are registered via annotation attributes. Thanks to [kakawait](https://github.com/kakawait) for the request.\n- [#252] Example version provider implementations.\n\n## <a name=\"2.2.0-deprecated\"></a> Deprecations\n\nThis release has no additional deprecations.\n\n## <a name=\"2.2.0-breaking-changes\"></a> Potential breaking changes\n\nThis release has no breaking changes.\n\n\n\n# <a name=\"2.1.0\"></a> Picocli 2.1.0\n\nThis release contains bugfixes and new features.\n\nUsers sometimes run into system limitations on the length of a command line when creating a command line with lots of options or with long arguments for options.\nStarting from this release, picocli supports \"argument files\" or \"@-files\". Argument files are files that themselves contain arguments to the command. When picocli encounters an argument beginning with the character `@', it expands the contents of that file into the argument list.\n\nSecondly, this release adds support for multi-value boolean flags. A common use case where this is useful is to let users control the level of output verbosity by specifying more `-v` flags on the command line. For example, `-v` could give high-level output, `-vv` could show more detailed output, and `-vvv` could show debug-level information.\n\nFinally, thanks to [aadrian](https://github.com/aadrian) and [RobertZenz](https://github.com/RobertZenz), an `examples` subproject containing running examples has been added. (Your contributions are welcome!)\n\nThis is the sixteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.1.0-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.1.0-new)\n* [Promoted features](#2.1.0-promoted)\n* [Fixed issues](#2.1.0-fixes)\n* [Deprecations](#2.1.0-deprecated)\n* [Potential breaking changes](#2.1.0-breaking-changes)\n\n## <a name=\"2.1.0-new\"></a> New and noteworthy\n\n### Argument Files (`@`-files)\nAn argument file can include options and positional parameters in any combination. The arguments within a file can be space-separated or newline-separated. If an argument contains embedded whitespace, put the whole argument in double or single quotes (`\"-f=My Files\\Stuff.java\"`).\n\nLines starting with `#` are comments and are ignored. The file may itself contain additional @-file arguments; any such arguments will be processed recursively.\n\nMultiple @-files may be specified on the command line.\n\nFor example, suppose a file with arguments exists at `/home/foo/args`, with these contents:\n\n```text\n# This line is a comment and is ignored.\nABC -option=123\n'X Y Z'\n```\n\nA command may be invoked with the @file argument, like this:\n```bash\njava MyCommand @/home/foo/args\n```\n\nThe above will be expanded to the contents of the file:\n```bash\njava MyCommand ABC -option=123 \"X Y Z\"\n```\n\nThis feature is similar to the 'Command Line Argument File' processing supported by gcc, javadoc and javac.\nThe documentation for these tools shows further examples.\n\n### Repeated Boolean Flags\n\nMulti-valued boolean options are now supported. For example:\n```jshelllanguage\n@Option(names = \"-v\", description = { \"Specify multiple -v options to increase verbosity.\",\n                                      \"For example, `-v -v -v` or `-vvv`\"})\nboolean[] verbosity;\n```\n\nUsers may specify multiple boolean flag options without parameters. For example:\n```bash\n<command> -v -v -v -vvv\n```\nThe above example results in six `true` values being added to the `verbosity` array.\n\n\n## <a name=\"2.1.0-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.1.0-fixes\"></a> Fixed issues\n\n- [#126] New feature: Support expanding argument files, also called `@-files`.\n- [#241] New feature (enhancing [#126]): Recursively process nested @-files; allow multiple arguments per line, allow quoted arguments with embedded whitespace.\n- [#217] New feature: Support repeated boolean flag options captured in multi-valued fields.\n- [#223] New feature: Added `examples` subproject containing running examples.  Thanks to [aadrian](https://github.com/aadrian) and [RobertZenz](https://github.com/RobertZenz).\n- [#68]  Enhancement: Reject private final primitive fields annotated with @Option or @Parameters: because compile-time constants are inlined, updates by picocli to such fields would not be visible to the application.\n- [#239] Enhancement: Improve error message when Exception thrown from Runnable/Callable.\n- [#240] Bugfix: RunAll handler should return empty list, not null, when help is requested.\n- [#244] Bugfix: the parser only considered `help` options instead of any of `help`, `usageHelp` and `versionHelp` to determine if missing required options can be ignored when encountering a subcommand. Thanks to [mkavanagh](https://github.com/mkavanagh).\n\n## <a name=\"2.1.0-deprecated\"></a> Deprecations\n\nThe `Range::defaultArity(Class)` method is now deprecated in favour of the `Range::defaultArity(Field)` method introduced in v2.0.\n\n## <a name=\"2.1.0-breaking-changes\"></a> Potential breaking changes\n\nPrivate final fields that are either `String` or primitive types can no longer be annotated with `@Option` or `@Parameters`.\nPicocli will throw an `InitializationException` when it detects such fields,\nbecause compile-time constants are inlined, and updates by picocli to such fields would not be visible to the application.\n\n\n\n# <a name=\"2.0.3\"></a> Picocli 2.0.3\n\nThe picocli community is pleased to announce picocli 2.0.3.\n\nThis is a bugfix release that fixes a parser bug where the first argument following a clustered options was treated as a positional parameter, and removes the erroneous runtime dependency on `groovy-lang` that slipped in with the 2.0 release.\n\nThis release also includes a minor enhancement to support embedded newlines in usage help sections like header or descriptions. This allows Groovy applications to use [triple-quoted](http://groovy-lang.org/syntax.html#_triple_double_quoted_string) and [dollar slashy](http://groovy-lang.org/syntax.html#_dollar_slashy_string) multi-line strings in usage help sections.\n\nThis is the fifteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.0.3-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.0.3-new)\n* [Promoted features](#2.0.3-promoted)\n* [Fixed issues](#2.0.3-fixes)\n* [Deprecations](#2.0.3-deprecated)\n* [Potential breaking changes](#2.0.3-breaking-changes)\n\n## <a name=\"2.0.3-new\"></a> New and noteworthy\n\nThis is a bugfix release and does not include any new features.\n\n## <a name=\"2.0.3-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.0.3-fixes\"></a> Fixed issues\n- [#230] Enhancement: Support embedded newlines in usage help sections like header or descriptions. Thanks to [ddimtirov](https://github.com/ddimtirov).\n- [#233] Bugfix: Parser bug: first argument following clustered options is treated as a positional parameter. Thanks to [mgrossmann](https://github.com/mgrossmann).\n- [#232] Bugfix: Remove required runtime dependency on `groovy-lang`. Thanks to [aadrian](https://github.com/aadrian).\n\n## <a name=\"2.0.3-deprecated\"></a> Deprecations\n\nThis release does not deprecate any features.\n\n## <a name=\"2.0.3-breaking-changes\"></a> Potential breaking changes\n\nThis release does not include any breaking features.\n\n\n# <a name=\"2.0.2\"></a> Picocli 2.0.2\n\nThe picocli community is pleased to announce picocli 2.0.2.\n\nThis is a bugfix release that prevents an EmptyStackException from being thrown when the command line\nends in a cluster of boolean options, and furthermore fixes two scripting-related minor issues.\n\nThis is the fourteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.0.2-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.0.2-new)\n* [Promoted features](#2.0.2-promoted)\n* [Fixed issues](#2.0.2-fixes)\n* [Deprecations](#2.0.2-deprecated)\n* [Potential breaking changes](#2.0.2-breaking-changes)\n\n## <a name=\"2.0.2-new\"></a> New and noteworthy\n\nThis is a bugfix release and does not include any new features.\n\n## <a name=\"2.0.2-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.0.2-fixes\"></a> Fixed issues\n\n- [#226] Bugfix: EmptyStackException when command line ends in a cluster of boolean options. Thanks to [RobertZenz](https://github.com/RobertZenz).\n- [#222] Bugfix: Register default converter for Object fields for better scripting support.\n- [#219] Bugfix: Command line system property -Dpicocli.trace (without value) throws exception when used with Groovy.\n- [#220] Enhancement: Improve tracing for positional parameters (provide detail on current position).\n- [#221] Enhancement: Add documentation for Grapes bug workaround on Groovy versions before 2.4.7.\n\n## <a name=\"2.0.2-deprecated\"></a> Deprecations\n\nThis release does not deprecate any features.\n\n## <a name=\"2.0.2-breaking-changes\"></a> Potential breaking changes\n\nThis release does not include any breaking features.\n\n\n# <a name=\"2.0.1\"></a> Picocli 2.0.1\n\nThe picocli community is pleased to announce picocli 2.0.1.\n\nThis is a bugfix release that removes a dependency on Java 1.7 which was accidentally included.\n\nThis is the thirteenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.0.1-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.0.1-new)\n* [Promoted features](#2.0.1-promoted)\n* [Fixed issues](#2.0.1-fixes)\n* [Deprecations](#2.0.1-deprecated)\n* [Potential breaking changes](#2.0.1-breaking-changes)\n\n## <a name=\"2.0.1-new\"></a> New and noteworthy\n\nThis is a bugfix release and does not include any new features.\n\n## <a name=\"2.0.1-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nNo features have been promoted in this picocli release.\n\n## <a name=\"2.0.1-fixes\"></a> Fixed issues\n\n- [#214] Removed a dependency on Java 1.7 that was accidentally included. Thanks to [sjsajj](https://github.com/sjsajj).\n\n## <a name=\"2.0.1-deprecated\"></a> Deprecations\n\nThis release does not deprecate any features.\n\n## <a name=\"2.0.1-breaking-changes\"></a> Potential breaking changes\n\nThis release does not include any breaking features.\n\n\n# <a name=\"2.0\"></a> Picocli 2.0\n\nThe picocli community is pleased to announce picocli 2.0.\n\nFirst, picocli now provides tight integration for Groovy scripts.\nThe new `@picocli.groovy.PicocliScript` annotation allows Groovy scripts to use the `@Command` annotation,\nand turns a Groovy script into a picocli-based command line application.\nWhen the script is run, `@Field` variables annotated with `@Option` or `@Parameters`\nare initialized from the command line arguments before the script body is executed.\n\nApplications with subcommands will also benefit from upgrading to picocli 2.0.\nThe `CommandLine.run` and `CommandLine.call` methods now work for subcommands,\nand if more flexibility is needed, take a look at the new `parseWithHandler` methods.\nError handling for subcommands has been improved in this release with the new `ParseException.getCommandLine` method.\n\nImproved ease of use: Usage help is now printed automatically from the `CommandLine.run` and `CommandLine.call` methods\nand from the built-in handlers used with the `parseWithHandler` method.\n\nThe parser has been improved and users can now mix positional arguments with options on the command line.\nPreviously, positional parameter had to follow the options.\n**Important notice:** To make this feature possible, the default parsing behaviour of multi-value options and parameters changed to be non-greedy by default.\n\nFinally, this release includes many [bug fixes](#2.0-fixes).\n\nThis is the twelfth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"2.0-toc\"></a> Table of Contents\n\n* [New and noteworthy](#2.0-new)\n    * [Groovy Script Support](#2.0-groovy-script)\n    * [Better Subcommand Support](#2.0-subcommands)\n    * [Easier To Use](#2.0-ease-of-use)\n    * [Parser Improvements](#2.0-parser-improvements)\n    * [Usage Help Format Improvements](#2.0-help-improvements)\n* [Promoted features](#2.0-promoted)\n* [Fixed issues](#2.0-fixes)\n* [Deprecations](#2.0-deprecated)\n* [Potential breaking changes](#2.0-breaking-changes)\n\n\n\n## <a name=\"2.0-new\"></a> New and noteworthy\n\n### <a name=\"2.0-groovy-script\"></a> Groovy Script Support\nPicocli 2.0 introduces special support for Groovy scripts.\n\nScripts annotated with `@picocli.groovy.PicocliScript` are automatically transformed to use\n`picocli.groovy.PicocliBaseScript` as their base class and can also use the `@Command` annotation to\ncustomize parts of the usage message like command name, description, headers, footers etc.\n\nBefore the script body is executed, the `PicocliBaseScript` base class parses the command line and initializes\n`@Field` variables annotated with `@Option` or `@Parameters`.\nThe script body is executed if the user input was valid and did not request usage help or version information.\n\n```groovy\n// exampleScript.groovy\n@Grab('info.picocli:picocli:2.0.0')\n@Command(name = \"myCommand\", description = \"does something special\")\n@PicocliScript\nimport picocli.groovy.PicocliScript\nimport picocli.CommandLine.Command\nimport picocli.CommandLine.Option\nimport groovy.transform.Field\n\n@Option(names = \"-x\", description = \"number of repetitions\")\n@Field int count;\n\n@Option(names = [\"-h\", \"--help\"], usageHelp = true, description = \"print this help message and exit\")\n@Field boolean helpRequested;\n\n//if (helpRequested) { // not necessary: PicocliBaseScript takes care of this\n//    CommandLine.usage(this, System.err); return 0;\n//}\ncount.times {\n   println \"hi\"\n}\n// the CommandLine that parsed the args is available as a property\nassert this.commandLine.commandName == \"myCommand\"\n```\n\n### <a name=\"2.0-subcommands\"></a> Better Subcommand Support\nNew methods `CommandLine::parseWithHandler` were added. These methods intend to offer the same ease of use as\nthe `run` and `call` methods, but with more flexibility and better support for nested subcommands.\n\nThe `CommandLine::call` and `CommandLine::run` now support subcommands and will execute the **last** subcommand\nspecified by the user. (Previously subcommands were ignored and only the top-level command was executed.)\n\nFrom this release, picocli exceptions provide a `getCommandLine` method\nthat returns the command or subcommand where parsing or execution failed.\nPreviously, if the user provided invalid input for applications with subcommands,\nit was difficult to pinpoint exactly which subcommand failed to parse the input.\n\n### <a name=\"2.0-ease-of-use\"></a> Easier To Use\nThe convenience methods will automatically print usage help and version information\nwhen the user specifies options annotated with the `versionHelp` or `usageHelp` attributes.\n\nMethods that automatically print help:\n\n* CommandLine::call\n* CommandLine::run\n* CommandLine::parseWithHandler (with the built-in Run…​ handlers)\n* CommandLine::parseWithHandlers (with the built-in Run…​ handlers)\n\nMethods that do not automatically print help:\n\n* CommandLine::parse\n* CommandLine::populateCommand\n\nAlso notable: Collection and Map fields no longer require the `type` annotation attribute:\npicocli now infers the conversion target type from the generic type parameters where possible.\n\n### <a name=\"2.0-parser-improvements\"></a> Parser Improvements\nPositional parameters can now be mixed with options on the command line. Previously, positional parameter had to follow the options.\n\nTo make this feature possible, the default parsing behaviour of multi-value options and parameters changed to be non-greedy by default.\n\n### <a name=\"2.0-help-improvements\"></a> Usage Help Format Improvements\nThis release contains various bugfixes related to improving the usage help format for multi-value options and collections.\nFor example, for Maps that don't have a `paramLabel`, picocli now shows key type and value type instead of the internal Java field name.\n\n## <a name=\"2.0-promoted\"></a> Promoted features\nPromoted features are features that were incubating in previous versions of picocli but are now supported and subject to backwards compatibility.\n\nThe following are the features that have been promoted in this picocli release.\n\n* Autocomplete - as of picocli 2.0, autocompletion is no longer beta.\n\n## <a name=\"2.0-fixes\"></a> Fixed issues\n\n- [#207] API Change: Provide ability to find which subcommand threw a ParameterException API enhancement. Thanks to [velit](https://github.com/velit) and [AshwinJay](https://github.com/AshwinJay).\n- [#179] API Change to remove full JRE dependency and require only Compact Profile. Replace use of `java.awt.Point` with `picocli.CommandLine.Help.TextTable.Cell`. Thanks to [webfolderio](https://github.com/webfolderio).\n- [#205] API Change: `CommandLine::getCommand` now returns a generic type instead of Object so client code can avoid type casting.\n- [#196] API Change: `Option::type()` and `Parameters::type()` now return empty array by default (was `{String.class}`).\n- [#210] API Change: Deprecated the option `help` attribute in favour of the `usageHelp` and `versionHelp` attributes.\n- [#115] New feature: Added new `CommandLine::parseWithHandler` convenience methods for commands with subcommands.\n- [#130] New feature: Options and positional parameters can now be mixed on the command line.\n- [#196] New feature: Infer type from collections and maps when `type` annotation not specified. Thanks to [ddimtirov](https://github.com/ddimtirov) for the suggestion.\n- [#197] New feature: Use `type` attribute to determine conversion target type instead of field type. This allows fields to be declared as interfaces or abstract types (or arrays/collections/maps of these) and via the `type` attribute picocli will be able to convert String arguments to concrete implementation objects.\n- [#187] New feature: Added methods to programmatically get and set the command name.\n- [#192] Bugfix: Default arity should be 1, not *, for array and collection options. Thanks to [RobertZenz](https://github.com/RobertZenz).\n- [#193] Bugfix: Splitting an argument should not cause max arity to be exceeded.\n- [#191] Bugfix: Arity should not limit the total number of values put in an array or collection. Thanks to [RobertZenz](https://github.com/RobertZenz).\n- [#186] Bugfix: Confusing usage message for collection options. Thanks to [AlexFalappa](https://github.com/AlexFalappa).\n- [#181] Bugfix: Incorrect help message was displayed for short options with paramLabel when arity > 1.\n- [#184] Bugfix/Enhancement: Programmatically setting the separator is now reflected in the usage help message. Thanks to [defnull](https://github.com/defnull).\n- [#200] Bugfix: Prevent NPE when command name is set to empty string or spaces. Thanks to [jansohn](https://github.com/jansohn).\n- [#203] Bugfix: Empty string parameter parsed incorrectly. Thanks to [AshwinJay](https://github.com/AshwinJay).\n- [#194] Enhancement: Usage help should show split regex for option/parameters.\n- [#198] Enhancement: Usage help parameter list details should indicate arity for positional parameters.\n- [#195] Enhancement: Usage help should show Map types if paramLabel not specified.\n- [#183] Enhancement: Add examples to user manual for using picocli in other JVM languages. Thanks to [binkley](https://github.com/binkley) for pointing out that Kotlin may support array literals in annotations from 1.2.\n- [#185] Enhancement: Exception message text for missing options should not use field names but be more descriptive and consistent with usage help. Thanks to [AlexFalappa](https://github.com/AlexFalappa).\n- [#201] Enhancement: Usage help should not show `null` default values. Thanks to [jansohn](https://github.com/jansohn).\n- [#202] Enhancement: Java 9: add `Automatic-Module-Name: info.picocli` to MANIFEST.MF to make picocli play nice in the Java 9 module system.\n- [#204] Enhancement: instantiate `LinkedHashSet` instead of `HashSet` for `Set` fields to preserve input ordering.\n- [#208] Enhancement: Remove pom.xml, which was not being maintained. Picocli can only be built with gradle going forward.\n- [#212] Enhancement: Improve javadoc for picocli.AutoComplete.\n\n## <a name=\"2.0-deprecated\"></a> Deprecations\nThe `help` attribute for options is now deprecated. Please change to use `usageHelp` and `versionHelp` attributes instead.\nFrom picocli v2.0, the convenience methods will automatically print usage help and version information\nwhen requested with the `versionHelp` and `usageHelp` option attributes (but not for the `help` attribute).\n\n\n## <a name=\"2.0-breaking-changes\"></a> Potential breaking changes\n\nThis release has a number of incompatible changes:\n* Multi-value options (array, list and map fields) are **not greedy by default** any more.\n* **Arity is not max values**: end users may specify multi-value options (array, list and map fields) an unlimited number of times.\n* A single argument that is split into parts with a regex now **counts as a single argument** (so `arity=\"1\"` won't prevent all parts from being added to the field)\n* API change: replaced `java.awt.Point` with custom `Cell` class as return value type for public method `Help.TextTable.putValue()`.\n* API change: `@Option.type()` and `@Parameters.type()` now return an empty array by default (was `{String.class}`).\n* API change: `ParameterException` and all subclasses now require a `CommandLine` object indicating the command or subcommand that the user provided invalid input for.\n* The `CommandLine::call` and `CommandLine::run` now support subcommands and will execute the **last** subcommand specified by the user. Previously subcommands were ignored and the top-level command was executed unconditionally.\n\nI am not happy about the disruption these changes may cause, but I felt they were needed for three reasons:\nthe old picocli v1.0 behaviour caused ambiguity in common use cases,\nwas inconsistent with most Unix tools,\nand prevented supporting mixing options with positional arguments on the command line.\n\nTo illustrate the new non-greedy behaviour, consider this example program:\n```java\nclass MixDemo {\n  @Option(names=\"-o\") List<String> options;\n  @Parameters         List<String> positionalParams;\n\n  public void run() {\n    System.out.println(\"positional: \" + positionalParams);\n    System.out.println(\"options   : \" + options);\n  }\n\n  public static void main(String[] args) {\n    CommandLine.run(new MixDemo(), System.err, args);\n  }\n}\n```\nWe run this program as below, where the option is followed by multiple values:\n\n```bash\n$ java MixDemo -o 1 2 3\n```\n\nPreviously, the arguments following `-o` would all end up in the `options` list. Running the above command with picocli 1.0 would print out the following:\n\n```bash\n# (Previously, in picocli-1.0.1)\n$ java MixDemo -o 1 2 3\n\npositional: null\noptions   : [1, 2, 3]\n```\n\nFrom picocli 2.0, only the first argument following `-o` is added to the `options` list, the remainder is parsed as positional parameters:\n\n```bash\n# (Currently, in picocli-2.0)\n$ java MixDemo -o 1 2 3\n\npositional: [2, 3]\noptions   : [1]\n```\n\nTo put multiple values in the options list in picocli 2.0, users can specify the `-o` option multiple times:\n```bash\n$ java MixDemo -o 1 -o 2 -o 3\n\npositional: null\noptions   : [1, 2, 3]\n```\n\nAlternatively, application authors can make a multi-value option greedy in picocli v2.0 by explicitly setting a variable arity:\n```java\nclass Args {\n    @Option(names = \"-o\", arity = \"1..*\") List<String> options;\n}\n```\n(... \"greedy\" means consume until the next option, so not necessarily all remaining command line arguments.)\n\n\n\n# <a name=\"1.0.1\"></a> 1.0.1 - Bugfix release.\n\n## <a name=\"1.0.1-summary\"></a> Summary: zsh autocompletion bugfix\n\nThis is the eleventh public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n- [#178] Fixed autocompletion bug for subcommands in zsh. Autocomplete on zsh would show only the global command options even when a subcommand was specified. Autocompletion now works for nested subcommands.\n\n# <a name=\"1.0.0\"></a> 1.0.0 - Bugfix and enhancements release.\n\n## <a name=\"1.0.0-summary\"></a> Summary\n\nNew features: command line autocompletion, `-Dkey=value`-like Map options and parser tracing.\n\nNon-breaking changes to support Callable commands, Map options and format specifiers in version help.\n\nThis is the tenth public release.\nPicocli follows [semantic versioning](http://semver.org/).\n\n## <a name=\"1.0.0-fixes\"></a> Fixed issues\n\n* [#121] New feature: command line autocompletion. Picocli can generate bash and zsh completion scripts that allow the shell to generate potential completion matches based on the `@Option` and `@Command` annotations in your application. After this script is installed, the shell will show the options and subcommands available in your java command line application, and in some cases show possible option values.\n* [#67] New feature: Map options like `-Dkey1=val1 -Dkey2=val2`. Both key and value can be strongly typed (not just Strings).\n* [#158] New feature: parser TRACING for easy troubleshooting. The trace level can be controlled with a system property.\n* [#170] New feature: added `call` convenience method similar to `run`. Applications whose main business logic may throw an exception or returns a result can now implement `Callable` and reduce some boilerplate code.\n* [#149] Parser now throws UnmatchedArgumentException for args that resemble options but are not, instead of treating like them positional parameters. Thanks to [giaco777](https://github.com/giaco777).\n* [#172] Parser now throws MaxValuesforFieldExceededException when multi-valued option or parameters max arity exceeded\n* [#173] Parser now throws UnmatchedArgumentException when not all positional parameters are assigned to a field\n* [#171] WARN when option overwritten with different value (when isOverwrittenOptionsAllowed=true); WARN for unmatched args (when isUnmatchedArgumentsAllowed=true). Thanks to [ddimtirov](https://"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report vulnerabilities you find in picocli to:\n\n```\nrpopma at apache.org\n```\n\nAnyone can send email to this address.\nThe resolution of any reported security issues will be handled in confidence.\nIn your report, please note how you would like to be credited for discovering the issue.\n\n## Supported Versions\n\n| Version       | Supported          |\n| ------------- | ------------------ |\n| latest 4.x.x  | :white_check_mark: |\n| older 4.x.x   | :x:                |\n| < 4.0         | :x:                |\n\n## Why follow this process\nDue to the sensitive nature of security bugs, the disclosure process is more constrained than a regular bug.\nWe appreciate you following these industry accepted guidelines, which gives time for a proper fix and limit the time window of attack.\n\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "theme: jekyll-theme-architect"
        },
        {
          "name": "bnd.bnd",
          "type": "blob",
          "size": 0.1865234375,
          "content": "Import-Package: !org.fusesource.jansi,!groovy.lang, *\nExport-Package: picocli\n-fixupmessages \"^Classes found in the wrong directory: \\\\{META-INF/versions/9/module-info\\\\.class=module-info}$\"\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 8.4677734375,
          "content": "import aQute.bnd.gradle.Bundle\n\ngroup 'info.picocli'\ndescription 'Java command line parser with both an annotations API and a programmatic API. Usage help with ANSI styles and colors. Autocomplete. Nested subcommands. Easily included as source to avoid adding a dependency.'\nversion \"$projectVersion\"\next.moduleName = 'info.picocli'\n\nbuildscript {\n    apply from: 'dependencies.gradle'\n\n    repositories {\n        gradlePluginPortal()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradlePluginVersion\"\n        classpath 'org.asciidoctor:asciidoctorj-pdf:2.3.15'\n        classpath \"org.beryx:badass-jar:2.0.0\"\n        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:6.4.0'\n        classpath \"io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0\"\n        classpath \"net.ltgt.gradle:gradle-errorprone-plugin:3.1.0\"\n    }\n}\n\napply plugin: 'org.beryx.jar' // for compiling module-info on Java 8\napply plugin: 'io.codearte.nexus-staging'\n\nif (System.getenv('MAVEN_OSS_USER')) { // on home system\n    apply plugin: 'biz.aQute.bnd.builder'\n} else {\n    try { // otherwise, only apply if available\n        Class.forName('aQute.bnd.gradle.BndPlugin')\n        Class.forName('aQute.bnd.build.Project')\n        apply plugin: 'biz.aQute.bnd.builder'\n    } catch (Throwable ignored) {}\n}\npluginManager.withPlugin('biz.aQute.bnd.builder') { // if plugin applied, execute this action\n    configurations {\n        bundleCompile\n        baseline\n    }\n    dependencies {\n        baseline('group': group, 'name': jar.archiveBaseName) {\n            version {\n                strictly \"(,${jar.archiveVersion}[\"\n            }\n            transitive = false\n        }\n    }\n    sourceSets {\n        bundle\n    }\n    task bundle(type: Bundle) {\n        from sourceSets.bundle.output\n        bndfile = 'bnd.bnd'\n        sourceSet = sourceSets.bundle\n    }\n}\n\n\nallprojects {\n    apply plugin: 'java'\n    apply plugin: 'java-library' // to avoid https://github.com/gradle/gradle/issues/1118\n\n    // https://errorprone.info/docs/installation requires Java 11+\n    if (JavaVersion.current().isJava11Compatible()) {\n        apply plugin: \"net.ltgt.errorprone\"\n\n        dependencies {\n            errorprone(\"com.google.errorprone:error_prone_core:2.27.1\")\n        }\n\n        tasks.withType(JavaCompile).configureEach {\n           options.errorprone.disableAllWarnings = true\n        }\n    }\n\n    if (!JavaVersion.current().isJava9Compatible()) {\n        sourceCompatibility = 1.5\n        targetCompatibility = 1.5\n    } else { // from Java 9 and up\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n//        tasks.withType(JavaCompile).configureEach {\n//            javaCompiler = javaToolchains.compilerFor {\n//                languageVersion = JavaLanguageVersion.of(JavaVersion.current().majorVersion)\n//            }\n//        }\n    }\n\n    compileJava.options.encoding = \"UTF-8\"\n    compileTestJava.options.encoding = \"UTF-8\"\n\n    repositories {\n        maven { url 'https://repo.spring.io/libs-snapshot' }\n        mavenCentral()\n    }\n\n    configurations.all {\n        resolutionStrategy {\n            // avoid \"Could not resolve junit:junit-dep:[4.9,)\" caused by stefanbirkner:system-rules when building offline\n            force \"junit:junit-dep:$junitDepVersion\"\n        }\n    }\n    dependencies {\n        testImplementation supportDependencies.jansi\n        testImplementation supportDependencies.groovy\n\n        testImplementation supportDependencies.junit\n        testImplementation supportDependencies.hamcrestCore\n        testImplementation supportDependencies.systemRules\n        testImplementation supportDependencies.junitParams\n    }\n    tasks.withType(JavaCompile) {\n        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'\n    }\n\n    javadoc.destinationDir = file(\"build/docs/apidocs\")\n    javadoc.options.addStringOption('Xdoclint:none', '-quiet')\n    // Workaround frpm https://bugs.openjdk.org/browse/JDK-4973681\n    javadoc.options.addStringOption('sourcepath', 'src/main/java')\n\n    normalization {\n        runtimeClasspath {\n            metaInf {\n                ignoreAttribute(\"Bnd-LastModified\")\n            }\n        }\n    }\n}\n\n//sourceSets.main.java.srcDirs = ['src/main/java', 'src/main/java9']\ncompileJava {\n    inputs.property(\"moduleName\", moduleName)\n//    doFirst {\n//        if (JavaVersion.current().isJava9Compatible()) {\n//            options.compilerArgs = [\n//                    '--module-path', classpath.asPath,\n//            ]\n//        }\n//        classpath = files()\n//    }\n}\nmoduleConfig {\n    // copy module-info.class to META-INF/versions/9\n    multiReleaseVersion = 9\n    moduleInfoPath = 'src/main/java9/module-info.java'\n    version = project.version\n    neverCompileModuleInfo = true\n}\njar {\n    manifest {\n        attributes 'Specification-Title'   : 'picocli',\n                   'Specification-Vendor'  : 'Remko Popma',\n                   'Specification-Version' : archiveVersion.get(),\n                   'Implementation-Title'  : 'picocli',\n                   'Implementation-Vendor' : 'Remko Popma',\n                   'Implementation-Version': archiveVersion.get(),\n                   'Main-Class'            : 'picocli.AutoComplete'\n    }\n}\nconfigurations {\n    apiElements {\n        canBeConsumed = true\n        canBeResolved = false\n        attributes {\n            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))\n            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))\n            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))\n            // not sure why the below is needed, but when building with Java 8, using VERSION_1_5 gives this error:\n            //\n            // Could not determine the dependencies of task ':picocli-codegen:compileTestJava'.\n            //> Could not resolve all task dependencies for configuration ':picocli-codegen:testCompileClasspath'.\n            //   > Could not resolve project :.\n            //     Required by:\n            //         project :picocli-codegen\n            //      > The consumer was configured to find an API of a library compatible with Java 6,\n            //        preferably in the form of class files, preferably optimized for standard JVMs, and its dependencies declared externally.\n            //        However we cannot choose between the following variants of project ::\n            //          - apiElements\n            //          - runtimeElements\n            //        All of them match the consumer attributes:\n            //          - Variant 'apiElements' capability info.picocli:picocli:4.7.0-SNAPSHOT declares a runtime of a library compatible with Java 5, packaged as a jar, and its dependencies declared externally:\n            //              - Unmatched attribute:\n            //                  - Doesn't say anything about its target Java environment (preferred optimized for standard JVMs)\n            //          - Variant 'runtimeElements' capability info.picocli:picocli:4.7.0-SNAPSHOT declares a runtime of a library compatible with Java 5, packaged as a jar, and its dependencies declared externally:\n            //              - Unmatched attribute:\n            //                  - Doesn't say anything about its target Java environment (preferred optimized for standard JVMs)\n            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, new Integer(JavaVersion.VERSION_1_6.majorVersion))\n\n        }\n    }\n}\n// jacoco 0.8.2 does not work with Java 13; gradle 4.x has no JavaVersion enum value for Java 12\nif (JavaVersion.current().isJava11Compatible()) {\n    project.logger.lifecycle(\"skipping jacoco test for Java version ${JavaVersion.current()}\")\n} else {\n    project.logger.lifecycle(\"applying jacoco build file for Java version ${JavaVersion.current()}\")\n    apply from: \"gradle/jacoco.gradle\"\n}\n\nif (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_18)) {\n    // https://github.com/remkop/picocli/issues/1503\n    test { // explicitly enable security manager on Java 18 for System.exit tests\n        systemProperty \"java.security.manager\", \"allow\"\n    }\n}\n\n// javadoc and asciidoc customization\napply from: \"${rootProject.projectDir}/gradle/docs.gradle\"\n\n// publishing-related\next {\n    PUBLISH_GROUP_ID = group\n    PUBLISH_ARTIFACT_ID = project.name\n    PUBLISH_VERSION = \"$projectVersion\"\n}\napply from: \"${rootProject.projectDir}/gradle/publish-mavencentral.gradle\"\n\n// release-related custom gradle tasks and release procedure steps\napply from: \"${rootProject.projectDir}/gradle/release-tasks.gradle\"\n"
        },
        {
          "name": "dependencies.gradle",
          "type": "blob",
          "size": 3.4248046875,
          "content": "// This file works around dependabot issue https://github.com/dependabot/dependabot-core/issues/1618\n// See https://www.sameerkulkarni.de/posts/dependabot-with-gradle/\n\next {\n    // PICOCLI VERSION\n\n    // projectPreviousPublishedVersion is non-SNAPSHOT, only published releases\n    projectPreviousPublishedVersion = \"4\\\\.7\\\\.6\"      // for task bumpReadmeVersion\n    // projectPreviousVersionRegex may be a SNAPSHOT\n    projectPreviousVersionRegex     = \"4\\\\.7\\\\.6\"      // for task bumpVersion\n    projectVersion                  = \"4.7.7-SNAPSHOT\" // for all build tasks\n    releaseDate                     = \"2024-05-07\"     // for task bumpVersion\n    releaseDatePreviousRegex        = \"2024\\\\-05\\\\-07\" // for task bumpVersion\n\n    // DEPENDENCIES\n    asciidoctorGradlePluginVersion = \"4.0.2\"\n    compileTestingVersion          = \"0.21.0\"\n    groovyVersion       = \"2.4.21\"\n    hamcrestCoreVersion = \"2.2\"\n    ivyVersion          = \"2.5.2\"\n    jacocoVersion       = \"0.8.2\"\n    jansiVersion        = \"2.4.1\"\n    jline2Version       = \"2.14.6\"\n    jline3Version       = \"3.26.1\"\n    junitDepVersion     = \"4.11\"\n    junitVersion        = \"4.13.2\"\n    log4j2Version       = \"2.23.1\"\n    springBootVersion   = \"3.1.2\" // Spring Boot 3.0 requires Java 17 as a minimum version\n    systemRulesVersion  = \"1.19.0\"\n    systemLambdaVersion = '1.2.1'\n    junit5Version       = '5.10.2'\n\n    supportDependencies = [\n        junit             : \"junit:junit:$junitVersion\",\n        junit5Api         : \"org.junit.jupiter:junit-jupiter-api:$junit5Version\",\n        junit5Engine      : \"org.junit.jupiter:junit-jupiter-engine:$junit5Version\",\n        systemLambda      : \"com.github.stefanbirkner:system-lambda:$systemLambdaVersion\",\n        hamcrestCore      : \"org.hamcrest:hamcrest-core:$hamcrestCoreVersion\",\n        jansi             : \"org.fusesource.jansi:jansi:$jansiVersion\",\n        groovy            : \"org.codehaus.groovy:groovy-all:$groovyVersion\",\n        systemRules       : \"com.github.stefanbirkner:system-rules:$systemRulesVersion\",\n        junitParams       : \"pl.pragmatists:JUnitParams:1.1.1\",\n        springbootstarter : \"org.springframework.boot:spring-boot-starter:$springBootVersion\",\n        springbootannproc : \"org.springframework.boot:spring-boot-configuration-processor:$springBootVersion\",\n        springboottest    : \"org.springframework.boot:spring-boot-starter-test:$springBootVersion\",\n        jline3            : \"org.jline:jline:$jline3Version\",\n        jline2            : \"jline:jline:$jline2Version\",\n        ivy               : \"org.apache.ivy:ivy:$ivyVersion\",\n        compileTesting    : \"com.google.testing.compile:compile-testing:$compileTestingVersion\",\n        log4j2api         : \"org.apache.logging.log4j:log4j-api:$log4j2Version\",\n        log4j2core        : \"org.apache.logging.log4j:log4j-core:$log4j2Version\",\n        kotlin_stdlib     : \"org.jetbrains.kotlin:kotlin-stdlib\",\n        scala_lang        : \"org.scala-lang:scala-library:2.13.14\",\n        validation_api    : \"jakarta.validation:jakarta.validation-api:3.0.2\",\n        //el_api            : \"jakarta.el:jakarta.el-api:3.0.3\",\n        el_impl           : \"org.glassfish:jakarta.el:4.0.2\",\n\n        hibernate_validator_annproc: \"org.hibernate.validator:hibernate-validator-annotation-processor:8.0.1.Final\",\n        hibernate_validator        : \"org.hibernate.validator:hibernate-validator:8.0.1.Final\",\n\n        kotlin_script_runtime      : \"org.jetbrains.kotlin:kotlin-script-runtime:1.9.23\",\n    ]\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "logging.properties",
          "type": "blob",
          "size": 2.3974609375,
          "content": "############################################################\n#  \tDefault Logging Configuration File\n#\n# You can use a different file by specifying a filename\n# with the java.util.logging.config.file system property.  \n# For example java -Djava.util.logging.config.file=myfile\n############################################################\n\n############################################################\n#  \tGlobal properties\n############################################################\n\n# \"handlers\" specifies a comma separated list of log Handler \n# classes.  These handlers will be installed during VM startup.\n# Note that these classes must be on the system classpath.\n# By default we only configure a ConsoleHandler, which will only\n# show messages at the INFO and above levels.\nhandlers= java.util.logging.ConsoleHandler\n\n# To also add the FileHandler, use the following line instead.\n#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n\n# Default global logging level.\n# This specifies which kinds of events are logged across\n# all loggers.  For any given facility this global level\n# can be overriden by a facility specific level\n# Note that the ConsoleHandler also has a separate level\n# setting to limit messages printed to the console.\n.level= FINE\n\n############################################################\n# Handler specific properties.\n# Describes specific configuration info for Handlers.\n############################################################\n\n# default file output is in user's home directory.\njava.util.logging.FileHandler.pattern = %h/java%u.log\njava.util.logging.FileHandler.limit = 50000\njava.util.logging.FileHandler.count = 1\njava.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n\n# Limit the message that are printed on the console to INFO and above.\njava.util.logging.ConsoleHandler.level = FINE\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# Example to customize the SimpleFormatter output format \n# to print one-line log message like this:\n#     <level>: <log message> [<date/time>]\n#\n# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n\n\n############################################################\n# Facility specific properties.\n# Provides extra control for each logger.\n############################################################\n\n# For example, set the com.xyz.foo logger to only log SEVERE\n# messages:\ncom.xyz.foo.level = SEVERE\n"
        },
        {
          "name": "picocli-codegen-tests-java9plus",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-shell-jline2",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-shell-jline3",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-spring-boot-starter",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-tests-java567",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-tests-java8",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-tests-java9plus",
          "type": "tree",
          "content": null
        },
        {
          "name": "picocli-tests-jpms-modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 1.380859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>info.picocli</groupId>\n  <artifactId>picocli</artifactId>\n  <version>4.0.0-alpha-3</version>\n  <packaging>jar</packaging>\n  <name>picocli - a mighty tiny Command Line Interface</name>\n  <description>Java command line parser with both an annotations API and a programmatic API. Usage help with ANSI styles and colors. Autocomplete. Nested subcommands. Easily included as source to avoid adding a dependency.</description>\n  <url>https://picocli.info</url>\n  <inceptionYear>2017</inceptionYear>\n  <licenses>\n    <license>\n      <name>The Apache Software License, version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <developers>\n    <developer>\n      <id>rpopma</id>\n      <name>Remko Popma</name>\n      <email>rpopma@apache.org</email>\n    </developer>\n  </developers>\n  <scm>\n    <url>https://github.com/remkop/picocli/tree/main</url>\n    <connection>scm:git:https://github.com/remkop/picocli.git</connection>\n    <developerConnection>scm:git:ssh://github.com:remkop/picocli.git</developerConnection>\n  </scm>\n</project>\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.0517578125,
          "content": "rootProject.name = 'picocli'\ninclude 'picocli-groovy'\ninclude 'picocli-examples'\ninclude 'picocli-shell-jline2'\ninclude 'picocli-codegen'\ninclude 'picocli-tests-java8'\n\nif (org.gradle.api.JavaVersion.current().isJava8Compatible()) {\n    include 'picocli-spring-boot-starter'\n    include 'picocli-shell-jline3'\n} else {\n    println(\"Excluding modules picocli-spring-boot-starter, picocli-shell-jline3: \" +\n        \"they require Java 8+ but we have Java version ${org.gradle.api.JavaVersion.current()}\")\n}\n\n// some subprojects have Java Modules-related requirements, for example:\n//   test {jvmArgs('--add-opens', 'java.base/java.util=ALL-UNNAMED')}\n// this syntax fails on Java 8, it requires Java 9+\nif (org.gradle.api.JavaVersion.current().isJava9Compatible()) {\n    include 'picocli-codegen-tests-java9plus'\n    include 'picocli-tests-java9plus'\n} else {\n    println(\"Excluding modules picocli-codegen-tests-java9plus, \" +\n        \"picocli-tests-java9plus from the build: \" +\n        \"they require Java 9+ but we have Java version ${org.gradle.api.JavaVersion.current()}\")\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}