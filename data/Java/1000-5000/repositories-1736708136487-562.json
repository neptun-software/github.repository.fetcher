{
  "metadata": {
    "timestamp": 1736708136487,
    "page": 562,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xerial/sqlite-jdbc",
      "stars": 2896,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.205078125,
          "content": "target\n*~\nsqlitejdbc/dl\nsqlitejdbc/build\nsqlitejdbc/nestedvm-*\nsrc/main/resources/org/ibex/nestedvm/*.o\n.idea\n*.iml\natlassian-ide-plugin.xml\n.classpath\n.project\n.settings/\n.DS_Store\n*.class\n.fleet/settings.json"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 0.154296875,
          "content": "target\nsqlitejdbc/build\nsqlitejdbc/dl\nsqlitejdbc/nestedvm-2009-08-09\n.classpath\n.project\n.idea\n\nsyntax: glob\nsrc/main/resources/org/ibex/nestedvm/*.o\n*~\n*.iml"
        },
        {
          "name": ".settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 6.412109375,
          "content": "Work in progress:\n\n* Issue #107 - DatabaseMetaData.getPrimaryKeys does not always return all primary keys for multi-line table definitions.\n* Issue #109 - SQLiteConfig ignores calls to setDateStringFormat/setDateClass/setDatePrecision.\n* Issue #116 - Move to Java 6\n    * Created new branch refactor/JDBC4\n    * Jar is packaged as sqlite-jdbc4*\n* Issue #65 - Calling Statement.setMaxRows(N) has the effect of returning N+1 rows\n* Issue #64 - ArrayIndexOutOfBoundsException when calling ResultSetMetaData.getScale() for VARCHAR column types\n* Issue #56 - Implement getBinaryStream() in RS.java\n* Issue #45 - Stmt.close() should not close metadata\n* Issue #49 - PreparedStatement.getUpdateCount should return -1 if the current result is a ResultSet or no more results exist\n* Issue #48 - PreparedStatement.getResultSet should return null if current result is an update\n* Issue #67 - Bad ResultSet returned from DatabaseMetaData.getColumns(), if a given table doesn't exist\n* Issue #73 - DatabaseMetaData.getTables() Memory Leak\n* Issue #68 - DatabaseMetaData.getTables() erroneously returns INDEX, TRIGGER, and other non-table objects\n* Issue #53 - getImportedKeys throws Null Exception for foreign key without explicit primary column name\n* Issue #18 - Add support for ConnectionPool\n    * Implemented javax.sql.ConnectionPoolDataSource - javax.SQLiteConnectionPoolDataSource\n* Issue #27 - Allow user to specify busy-timeout when opening a database connection\n    * Added support for sqlite3_busy_timeout\n        1. Added configuration property \"busy_timeout\" to SQLiteConfig.\n        2. Exposed setBusyTimeout and getBusyTimeout on SQLiteConnection.\n        3. Default busy_timeout of 3 seconds (3000ms) remains the same.\n* Issue #60 - ExtendedCommand (e.g backup) not supported on Stmt.execute(String)\n* Issue #23 - getDate() returns wrong values\n    * Added support for specifying a date storage class. For more info <https://bitbucket.org/xerial/sqlite-jdbc/issue/23/getdate-returns-wrong-values>\n* Issue #54 - Implement PreparedStatement.setBinaryStream()\n    * Added support for InputStreams on PreparedStatement\n        1. setBinaryStream()\n        2. setAsciiStream()\n        3. setUnicodeStream()\n* Issue #60 - ExtendedCommand (e.g backup) not supported on Stmt.execute(String)\n* Issue #23 - getDate() returns wrong values\n    * Added support for specifying a date storage class. For more info <https://bitbucket.org/xerial/sqlite-jdbc/issue/23/getdate-returns-wrong-values>\n* Issue #54 - Implement PreparedStatement.setBinaryStream()\n    * Added support for InputStreams on PreparedStatement\n        1. setBinaryStream()\n        2. setAsciiStream()\n        3. setUnicodeStream()\n\nRelease 3.7.15-SNAPSHOT-2\n* Fixed clean target to remove previous driver builds\n* Issue #42 - Using shared in-memory with URI filename\n    * Added support for URI filenames\n        1. <https://www.sqlite.org/uri.html> examples <https://www.sqlite.org/c3ref/open.html#urifilenameexamples>\n* Issue #47 - MetaData.getExportedKeys() returns empty string for a named foreign key\n* Issue #46 - org.sqlite.MetaData.getExportedKeys constructs incorrect SQL\n* Issue #44 - getExportedKeys throws Null Exception for foreign key without explicit primary column name\n    1. Now returns keys for foreign key definitions like \"create table referring (id, foreign key references referred)\"\n* Implemented getPrecision(int) and getScale(int) on ResultSetMetaData.\n* Issue #43 - ResultSetMetaData does not return the SQL Type if there are no results from the query.\n    1. ResultSetMetaData.getColumnTypeName() now gets type from either 'create table' statement or CAST(expr AS TYPE) otherwise sqlite3_value_type.\n    2. ResultSetMetaData.getColumnType() now parses the result from getColumnTypeName() to return a type.\n    3. Driver recognizes the types listed at <https://www.sqlite.org/datatype3.html#affname> under 'Affinity Name Examples'.\n* Issue #36 - Fixed case where a calling PreparedStatement.clearParameters() after a ResultSet is opened, caused subsequent calls to the ResultSet to return null.\n    1. PreparedStatement.clearParameters() now uses sqlite3_clear_bindings instead of sqlite3_reset.\n    2. PreparedStatement.clearParameters() does not reset current ResultSet.\n    3. PreparedStatement now checks if value(s) are bound to the statement parameters before executing; Throwing an exception if they are not.\n* Issue #40 - Fixed case where a call to Statement.getGeneratedKeys() could lead to \"database is locked\" error.\n    1. Calling Statement.Close() on a Statement on which getGeneratedKeys() was called, now releases all resources properly.\n* Issue #33 - Fixed Statement.cancel() to work when called from another thread\n\nRelease 3.7.15-SNAPSHOT\n* Issue #10 - Dropped pure java support\n* Issue #22 - Fixed DatabaseMetaData.supportsGetGeneratedKeys to return true since it's already supported\n* Issue #17 - Enabled Statement.setEscapeProcessing(boolean) method so driver can be used in Ant tasks\n* Issue #20 - Fixed MetaData.getExportedKeys() to return all foreign keys.\n* Issue #14 - Fixed DatabaseMetaData.getColumns() resultSet to populate COLUMN_DEF with column default values.\n* Fixed Statement.close() so that calling it is a no-op on a closed connection.\n* Issue #13- Added support for Java Standard Edition Service Provider mechanism <http://docs.oracle.com/javase/6/docs/api/java/sql/DriverManager.html>\n* Issue #12 - Fixed MetaData.getColumns() to return \"YES\" or \"NO\" for IS_NULLABLE column\n* Issue #16 - Fixed Statement.executeUpdate() to return 0 for DDL and more accurate changes for DML. (Added sqlite3_total_changes to native library)\n* Issue #15 - Modified Connection.setReadOnly(boolean) to throw an Exception if readOnly mode is modified after opening a connection\n* Changed driver to include architecture name in temporary filename in order to avoid conflicts when multiple JVMs with different architectures running at the same time\n* Issue #11 - Enhanced MetaData.getPrimaryKeys():\n    1. Return named primary keys and correct key sequence.\n    2. Also result set is ordered by column name as per JDBC spec.\n* Issue #1 - Added support for WAL JournalMode. <https://www.sqlite.org/wal.html>\n* Issue #4 - Enhanced SQLiteDataSource, SQLiteConfig and Conn to enable setting the transaction mode. <https://www.sqlite.org/lang_transaction.html>\n* Issue #5 - Fixed NativeDB.c errors when compiling with Visual Studio 2010.\n* Issue #2 - Fixed issue where SQLiteDataSource: setEncoding not working. And also enabled using UTF-8, UTF-16, UTF-16le, and UTF-16be.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6845703125,
          "content": "# Development\n## Prerequisites\n\n- JDK 11\n\n## Commits\n\nSince August 2022 the commit messages follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) standard. This allows for easier and better release notes generation.\n\n## How to submit a patch\n\n1. Fork this project on GitHub\n2. make some changes\n3. `git commit -m 'type: what changes are made to the source'`\n4. `git push`\n5. Create a pull request\n\n:warning: Do not force push to your PR branch. This makes the reviewer's job more difficult because it clears what changes have already been reviewed or not. The commits will be squashed while merging anyway.\n\n# How to compile the native libraries\n## Prerequisites\n\n1. JDK 11\n2. Perl\n3. Maven\n4. make\n5. gcc\n6. curl\n7. unzip\n8. Docker (for cross-compilation only)\n\n## Version update\n1. Edit the `VERSION` file and set the SQLite version to use.\n2. Edit the version number in `pom.xml` to `${VERSION}.0-SNAPSHOT`. So if `VERSION`=`3.39.2`, the version number in `pom.xml` should be `3.39.2.0-SNAPSHOT`. \n\n## Build for the current platform\n```shell\n# For the current platform\n$ make native\n```\n\n## Build for all platforms\nThe native library is cross-compiled for different OS and architecture by using Docker.\n```shell\n$ make native-all\n```\n\nOn Windows it is recommended to use WSL2.\n\nYou can check the `native-all` goal in `Makefile` for a list of available targets.\n\n## Build with an external amalgamation archive\n\nBy default, sqlite-jdbc will download the [SQLite amalgamation](https://www.sqlite.org/amalgamation.html) in order to build the native libraries.\n\nYou can use an existing installation of SQLite instead, by passing `SQLITE_OBJ=/path/to/libsqlite3.a` and `SQLITE_HEADER=/path/to/sqlite3.h`.\n\nExample:\n\n```shell\nmake native SQLITE_OBJ=/usr/local/lib/libsqlite3.so SQLITE_HEADER=/usr/local/include/sqlite3.h\n```\n\n## Build from CI\n\nThe native libraries can all be built with Github Actions:\n- by running the **Build Native** workflow [manually](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow)\n- by commenting \"/native\" on a PR\n\nOnce the build succeeds, a commit will be added to the branch or PR with the updated binaries.\n\n# Release process\nThe project version can change by 2 means:\n1. By changing the bundled version of SQLite, in which case the project version changes to align with the SQLite version. This is a manual process for now.\n2. When triggering a release. This is done automatically through GitHub Actions.\n\n## Trigger a release\nA release can be triggered from GitHub Actions by [manually running](https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow) the **CI** workflow and ticking the **Perform release** option.\n\n## What happens when performing a release?\n\nMultiple actions will happen in sequence, all orchestrated by the GitHub workflow:\n1. The version in `pom.xml` is changed to remove the `-SNAPSHOT`. This is done by using the [Maven Versions plugin](https://www.mojohaus.org/versions-maven-plugin/).\n2. Deploy to Maven Central. This is done by using the Maven `deploy` goal with the `release` profile. It relies on credentials stored in the repository's secrets.\n3. Perform a release commit with the changed `pom.xml`, as well as creating a git tag with the version number.\n4. Create a GitHub release. This is done via JReleaser, and will also include a changelog since the last release.\n5. The version in `pom.xml` is incremented for the next snapshot.\n6. Perform a commit with the version updated for the next snapshot.\n\n## Snapshot publishing\n\nThe CI workflow will also publish a new snapshot to [Sonatype's snapshots repository](https://oss.sonatype.org/content/repositories/snapshots/org/xerial/sqlite-jdbc/) whenever a change occurs.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2890625,
          "content": "\r\n                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n"
        },
        {
          "name": "LICENSE.zentus",
          "type": "blob",
          "size": 1.28125,
          "content": "Copyright (c) 2006, David Crawshaw.  All rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions\r\nare met:\r\n\r\n1. Redistributions of source code must retain the above copyright\r\n   notice, this list of conditions and the following disclaimer.\r\n2. Redistributions in binary form must reproduce the above copyright\r\n   notice, this list of conditions and the following disclaimer in the\r\n   documentation and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\nSUCH DAMAGE.\r\n\r\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 11.49609375,
          "content": "\ninclude Makefile.common\n\nRESOURCE_DIR = src/main/resources\n\n.phony: all package native native-all deploy\n\nall: jni-header package\n\ndeploy: \n\tmvn package deploy -DperformRelease=true\n\nDOCKER_RUN_OPTS=--rm\nMVN:=mvn\nCODESIGN:=docker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir gotson/rcodesign sign\nSRC:=src/main/java\nJAVA_CLASSPATH:=$(TARGET)/classpath/slf4j-api.jar\nSQLITE_OUT:=$(TARGET)/$(sqlite)-$(OS_NAME)-$(OS_ARCH)\nSQLITE_OBJ?=$(SQLITE_OUT)/sqlite3.o\nSQLITE_ARCHIVE:=$(TARGET)/$(sqlite)-amal.zip\nSQLITE_UNPACKED:=$(TARGET)/sqlite-unpack.log\nSQLITE_SOURCE?=$(TARGET)/$(SQLITE_AMAL_PREFIX)\nSQLITE_HEADER?=$(SQLITE_SOURCE)/sqlite3.h\nifneq ($(SQLITE_SOURCE),$(TARGET)/$(SQLITE_AMAL_PREFIX))\n\tcreated := $(shell touch $(SQLITE_UNPACKED))\nendif\n\nSQLITE_INCLUDE := $(shell dirname \"$(SQLITE_HEADER)\")\n\nCCFLAGS:= -I$(SQLITE_OUT) -I$(SQLITE_INCLUDE) $(CCFLAGS)\n\n$(SQLITE_ARCHIVE):\n\t@mkdir -p $(@D)\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/2024/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/2023/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/2022/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/2021/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/2020/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/$(SQLITE_AMAL_PREFIX).zip || \\\n\tcurl -L --max-redirs 0 -f -o$@ https://www.sqlite.org/$(SQLITE_OLD_AMAL_PREFIX).zip\n\n$(SQLITE_UNPACKED): $(SQLITE_ARCHIVE)\n\tunzip -qo $< -d $(TARGET)/tmp.$(version)\n\t(mv $(TARGET)/tmp.$(version)/$(SQLITE_AMAL_PREFIX) $(TARGET) && rmdir $(TARGET)/tmp.$(version)) || mv $(TARGET)/tmp.$(version)/ $(TARGET)/$(SQLITE_AMAL_PREFIX)\n\ttouch $@\n\n$(JAVA_CLASSPATH):\n\t@mkdir -p $(@D)\n\tcurl -L -f -o$@ https://search.maven.org/remotecontent?filepath=org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar\n\n$(TARGET)/common-lib/org/sqlite/%.class: src/main/java/org/sqlite/%.java\n\t@mkdir -p $(@D)\n\t$(JAVAC) -source 1.6 -target 1.6 -sourcepath $(SRC) -d $(TARGET)/common-lib $<\n\njni-header: $(TARGET)/common-lib/NativeDB.h\n\n$(TARGET)/common-lib/NativeDB.h: src/main/java/org/sqlite/core/NativeDB.java $(JAVA_CLASSPATH)\n\t@mkdir -p $(TARGET)/common-lib\n\t$(JAVAC) -cp $(JAVA_CLASSPATH) -d $(TARGET)/common-lib -sourcepath $(SRC) -h $(TARGET)/common-lib src/main/java/org/sqlite/core/NativeDB.java\n\tmv target/common-lib/org_sqlite_core_NativeDB.h target/common-lib/NativeDB.h\n\ntest:\n\tmvn test\n\nclean: clean-native clean-java clean-tests\n\n\n$(SQLITE_OUT)/sqlite3.o : $(SQLITE_UNPACKED)\n\t@mkdir -p $(@D)\n\tperl -p -e \"s/sqlite3_api;/sqlite3_api = 0;/g\" \\\n\t    $(SQLITE_SOURCE)/sqlite3ext.h > $(SQLITE_OUT)/sqlite3ext.h\n# insert a code for loading extension functions\n\tperl -p -e \"s/^opendb_out:/  if(!db->mallocFailed && rc==SQLITE_OK){ rc = RegisterExtensionFunctions(db); }\\nopendb_out:/;\" \\\n\t    $(SQLITE_SOURCE)/sqlite3.c > $(SQLITE_OUT)/sqlite3.c.tmp\n# register compile option 'JDBC_EXTENSIONS'\n# limits defined here: https://www.sqlite.org/limits.html\n\tperl -p -e \"s/^(static const char \\* const sqlite3azCompileOpt.+)$$/\\1\\n\\n\\/* This has been automatically added by sqlite-jdbc *\\/\\n  \\\"JDBC_EXTENSIONS\\\",/;\" \\\n\t    $(SQLITE_OUT)/sqlite3.c.tmp > $(SQLITE_OUT)/sqlite3.c\n\tcat src/main/ext/*.c >> $(SQLITE_OUT)/sqlite3.c\n\t$(CC) -o $@ -c $(CCFLAGS) \\\n\t    -DSQLITE_ENABLE_LOAD_EXTENSION=1 \\\n\t    -DSQLITE_HAVE_ISNAN \\\n\t    -DHAVE_USLEEP=1 \\\n\t    -DSQLITE_ENABLE_COLUMN_METADATA \\\n\t    -DSQLITE_CORE \\\n\t    -DSQLITE_ENABLE_FTS3 \\\n\t    -DSQLITE_ENABLE_FTS3_PARENTHESIS \\\n\t    -DSQLITE_ENABLE_FTS5 \\\n\t    -DSQLITE_ENABLE_RTREE \\\n\t    -DSQLITE_ENABLE_STAT4 \\\n\t    -DSQLITE_ENABLE_DBSTAT_VTAB \\\n\t    -DSQLITE_ENABLE_MATH_FUNCTIONS \\\n\t    -DSQLITE_THREADSAFE=1 \\\n\t    -DSQLITE_DEFAULT_MEMSTATUS=0 \\\n\t    -DSQLITE_DEFAULT_FILE_PERMISSIONS=0666 \\\n\t    -DSQLITE_MAX_VARIABLE_NUMBER=250000 \\\n\t    -DSQLITE_MAX_MMAP_SIZE=1099511627776 \\\n\t    -DSQLITE_MAX_LENGTH=2147483647 \\\n\t    -DSQLITE_MAX_COLUMN=32767 \\\n\t    -DSQLITE_MAX_SQL_LENGTH=1073741824 \\\n\t    -DSQLITE_MAX_FUNCTION_ARG=127 \\\n\t    -DSQLITE_MAX_ATTACHED=125 \\\n\t    -DSQLITE_MAX_PAGE_COUNT=4294967294 \\\n\t    -DSQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS \\\n\t    $(SQLITE_FLAGS) \\\n\t    $(SQLITE_OUT)/sqlite3.c\n\n$(SQLITE_SOURCE)/sqlite3.h: $(SQLITE_UNPACKED)\n\n$(SQLITE_OUT)/$(LIBNAME): $(SQLITE_HEADER) $(SQLITE_OBJ) $(SRC)/org/sqlite/core/NativeDB.c $(TARGET)/common-lib/NativeDB.h\n\t@mkdir -p $(@D)\n\t$(CC) $(CCFLAGS) -I $(TARGET)/common-lib -c -o $(SQLITE_OUT)/NativeDB.o $(SRC)/org/sqlite/core/NativeDB.c\n\t$(CC) $(CCFLAGS) -o $@ $(SQLITE_OUT)/NativeDB.o $(SQLITE_OBJ) $(LINKFLAGS)\n# Workaround for strip Protocol error when using VirtualBox on Mac\n\tcp $@ /tmp/$(@F)\n\t$(STRIP) /tmp/$(@F)\n\tcp /tmp/$(@F) $@\n\nNATIVE_DIR=src/main/resources/org/sqlite/native/$(OS_NAME)/$(OS_ARCH)\nNATIVE_TARGET_DIR:=$(TARGET)/classes/org/sqlite/native/$(OS_NAME)/$(OS_ARCH)\nNATIVE_DLL:=$(NATIVE_DIR)/$(LIBNAME)\n\n# For cross-compilation, install docker. See also https://github.com/dockcross/dockcross\nnative-all: native win32 win64 win-armv7 win-arm64 mac64-signed mac-arm64-signed linux32 linux64 freebsd32 freebsd64 freebsd-arm64 linux-arm linux-armv6 linux-armv7 linux-arm64 linux-android-arm linux-android-arm64 linux-android-x86 linux-android-x64 linux-ppc64 linux-musl32 linux-musl64 linux-musl-arm64 linux-riscv64\n\nnative: $(NATIVE_DLL)\n\n$(NATIVE_DLL): $(SQLITE_OUT)/$(LIBNAME)\n\t@mkdir -p $(@D)\n\tcp $< $@\n\t@mkdir -p $(NATIVE_TARGET_DIR)\n\tcp $< $(NATIVE_TARGET_DIR)/$(LIBNAME)\n\nwin32: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-windows-x86 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=i686-w64-mingw32.static- OS_NAME=Windows OS_ARCH=x86'\n\nwin64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-windows-x64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=x86_64-w64-mingw32.static- OS_NAME=Windows OS_ARCH=x86_64'\n\nwin-armv7: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-windows-armv7 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=armv7-w64-mingw32- OS_NAME=Windows OS_ARCH=armv7'\n\nwin-arm64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-windows-arm64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=aarch64-w64-mingw32- OS_NAME=Windows OS_ARCH=aarch64'\n\nlinux32: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/work xerial/centos5-linux-x86 bash -c 'make clean-native native OS_NAME=Linux OS_ARCH=x86'\n\nlinux64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/work xerial/centos5-linux-x86_64 bash -c 'make clean-native native OS_NAME=Linux OS_ARCH=x86_64'\n\nfreebsd32: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir empterdose/freebsd-cross-build:9.3 sh -c 'apk add bash; apk add openjdk8; apk add perl; make clean-native native OS_NAME=FreeBSD OS_ARCH=x86 CROSS_PREFIX=i386-freebsd9-'\n\nfreebsd64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir empterdose/freebsd-cross-build:9.3 sh -c 'apk add bash; apk add openjdk8; apk add perl; make clean-native native OS_NAME=FreeBSD OS_ARCH=x86_64 CROSS_PREFIX=x86_64-freebsd9-'\n\nfreebsd-arm64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir gotson/freebsd-cross-build:aarch64-11.4 sh -c 'make clean-native native OS_NAME=FreeBSD OS_ARCH=aarch64 CROSS_PREFIX=aarch64-unknown-freebsd11-'\n\nlinux-musl32: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/work gotson/alpine-linux-x86 bash -c 'make clean-native native OS_NAME=Linux-Musl OS_ARCH=x86'\n\nlinux-musl64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/work xerial/alpine-linux-x86_64 bash -c 'make clean-native native OS_NAME=Linux-Musl OS_ARCH=x86_64'\n\nlinux-musl-arm64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-musl-arm64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=aarch64-linux-musl- OS_NAME=Linux-Musl OS_ARCH=aarch64'\n\nlinux-arm: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-armv5 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=armv5-unknown-linux-gnueabi- OS_NAME=Linux OS_ARCH=arm'\n\nlinux-armv6: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-armv6-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=armv6-unknown-linux-gnueabihf- OS_NAME=Linux OS_ARCH=armv6'\n\nlinux-armv7: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-armv7a-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=arm-cortexa8_neon-linux-gnueabihf- OS_NAME=Linux OS_ARCH=armv7'\n\nlinux-arm64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-arm64-lts -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=aarch64-unknown-linux-gnu- OS_NAME=Linux OS_ARCH=aarch64'\n\nlinux-android-arm: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-android-arm -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/arm-linux-androideabi/bin/arm-linux-androideabi- OS_NAME=Linux-Android OS_ARCH=arm'\n\nlinux-android-arm64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-android-arm64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/aarch64-linux-android/bin/aarch64-linux-android- OS_NAME=Linux-Android OS_ARCH=aarch64'\n\nlinux-android-x86: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-android-x86 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/i686-linux-android/bin/i686-linux-android- OS_NAME=Linux-Android OS_ARCH=x86'\n\nlinux-android-x64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-android-x86_64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=/usr/x86_64-linux-android/bin/x86_64-linux-android- OS_NAME=Linux-Android OS_ARCH=x86_64'\n\nlinux-ppc64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-ppc64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=powerpc64le-unknown-linux-gnu- OS_NAME=Linux OS_ARCH=ppc64'\n\nlinux-riscv64: $(SQLITE_UNPACKED) jni-header\n\t./docker/dockcross-riscv64 -a $(DOCKER_RUN_OPTS) bash -c 'make clean-native native CROSS_PREFIX=riscv64-unknown-linux-gnu- OS_NAME=Linux OS_ARCH=riscv64'\n\nmac64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir -e CROSS_TRIPLE=x86_64-apple-darwin multiarch/crossbuild make clean-native native OS_NAME=Mac OS_ARCH=x86_64\n\nmac-arm64: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir -e CROSS_TRIPLE=aarch64-apple-darwin gotson/crossbuild make clean-native native OS_NAME=Mac OS_ARCH=aarch64 CROSS_PREFIX=\"/usr/osxcross/bin/aarch64-apple-darwin20.4-\"\n\n# deprecated\nmac32: $(SQLITE_UNPACKED) jni-header\n\tdocker run $(DOCKER_RUN_OPTS) -v $$PWD:/workdir -e CROSS_TRIPLE=i386-apple-darwin multiarch/crossbuild make clean-native native OS_NAME=Mac OS_ARCH=x86\n\nsparcv9:\n\t$(MAKE) native OS_NAME=SunOS OS_ARCH=sparcv9\n\nmac64-signed: mac64\n\t$(CODESIGN) src/main/resources/org/sqlite/native/Mac/x86_64/libsqlitejdbc.dylib\n\nmac-arm64-signed: mac-arm64\n\t$(CODESIGN) src/main/resources/org/sqlite/native/Mac/aarch64/libsqlitejdbc.dylib\n\npackage: native-all\n\trm -rf target/dependency-maven-plugin-markers\n\t$(MVN) package\n\nclean-native:\n\trm -rf $(SQLITE_OUT)\n\nclean-java:\n\trm -rf $(TARGET)/*classes\n\trm -rf $(TARGET)/common-lib/*\n\trm -rf $(TARGET)/sqlite-jdbc-*jar\n\nclean-tests:\n\trm -rf $(TARGET)/{surefire*,testdb.jar*}\n\ndocker-linux64:\n\tdocker build -f docker/Dockerfile.linux_x86_64 -t xerial/centos5-linux-x86_64 .\n\ndocker-linux32:\n\tdocker build -f docker/Dockerfile.linux_x86 -t xerial/centos5-linux-x86 .\n\ndocker-linux-musl32:\n\tdocker build -f docker/Dockerfile.alpine-linux_x86 -t gotson/alpine-linux-x86 .\n\ndocker-linux-musl64:\n\tdocker build -f docker/Dockerfile.alpine-linux_x86_64 -t xerial/alpine-linux-x86_64 .\n"
        },
        {
          "name": "Makefile.common",
          "type": "blob",
          "size": 11.587890625,
          "content": "include VERSION\n\nifndef JAVA_HOME\n$(warning Set JAVA_HOME environment variable)\nendif\n\nJAVA  := \"$$JAVA_HOME/bin/java\"\nJAVAC := \"$$JAVA_HOME/bin/javac\" \nJAVAH := \"$$JAVA_HOME/bin/javah\"\n\nTARGET := target\nSRC:=src/main/java\nOSINFO_CLASS := org.sqlite.util.OSInfo\nOSINFO_PROG := lib/org/sqlite/util/OSInfo.class\nJAVA_CLASSPATH:=$(TARGET)/classpath/slf4j-api.jar\n\n## building OSInfo.java\nifeq (\"$(wildcard $(OSINFO_PROG))\",\"\")\n$(info Building OSInfo tool)\n$(shell mkdir -p $(TARGET)/classpath)\n$(shell curl -L -f -o$(JAVA_CLASSPATH) https://search.maven.org/remotecontent?filepath=org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar)\n$(shell $(JAVAC) -cp $(JAVA_CLASSPATH) -sourcepath $(SRC) -d lib src/main/java/org/sqlite/util/OSInfo.java)\nendif\n\nifndef OS_NAME\nOS_NAME := $(shell $(JAVA) -cp lib:$(JAVA_CLASSPATH) $(OSINFO_CLASS) --os)\nendif\nifndef OS_ARCH\nOS_ARCH := $(shell $(JAVA) -cp lib:$(JAVA_CLASSPATH) $(OSINFO_CLASS) --arch)\nendif\n\n# Windows uses different path separators\nifeq ($(OS_NAME),Windows)\n\tsep := ;\nelse\n\tsep := :\nendif\n\nsqlite := sqlite-$(version)\n\nifdef JAVA_HOME\njni_h := $(shell find -L \"$(JAVA_HOME)\" -name jni.h)\nifneq ($(jni_h),)\njni_include := $(shell dirname \"$(jni_h)\")\nendif\n\njni_md := $(shell find -L \"$(JAVA_HOME)\" -name jni_md.h)\nifneq ($(jni_md),)\njni_md_include := $(shell dirname \"$(jni_md)\")\nendif\nendif\n\n# os=Default is meant to be generic unix/linux\n\nknown_targets := Linux-x86 Linux-x86_64 Linux-arm Linux-armv6 Linux-armv7 Linux-Android-arm Linux-Android-aarch64 Linux-Android-x86 Linux-Android-x86_64 Linux-ppc64 Linux-riscv64 Mac-x86 Mac-x86_64 Mac-aarch64 DragonFly-x86_64 FreeBSD-x86 FreeBSD-x86_64 FreeBSD-aarch64 OpenBSD-x86_64 Windows-x86 Windows-x86_64 Windows-armv7 Windows-aarch64 SunOS-sparcv9 HPUX-ia64_32\ntarget := $(OS_NAME)-$(OS_ARCH)\n\nifeq (,$(findstring $(strip $(target)),$(known_targets)))\n  target := Default\nendif\n\n$(info Will build using target: $(target) (detected os: $(OS_NAME), arch: $(OS_ARCH)))\n\n# cross-compilation toolchain prefix (e.g. \"arm-linux-gnueabi-\")\nCROSS_PREFIX :=\n\nDefault_CC        := $(CROSS_PREFIX)gcc\nDefault_STRIP     := $(CROSS_PREFIX)strip\nDefault_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nDefault_LINKFLAGS := -shared -static-libgcc -pthread -lm\nDefault_LIBNAME   := libsqlitejdbc.so\nDefault_SQLITE_FLAGS  := \n\nLinux-x86_CC        := $(CROSS_PREFIX)gcc\nLinux-x86_STRIP     := $(CROSS_PREFIX)strip\nLinux-x86_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -m32 -fvisibility=hidden\nLinux-x86_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-x86_LIBNAME   := libsqlitejdbc.so\nLinux-x86_SQLITE_FLAGS  := \n\nLinux-x86_64_CC        := $(CROSS_PREFIX)gcc\nLinux-x86_64_STRIP     := $(CROSS_PREFIX)strip\nLinux-x86_64_CCFLAGS   := -Ilib/inc_linux -I$(JAVA_HOME)/include -Os -fPIC -m64 -fvisibility=hidden\nLinux-x86_64_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-x86_64_LIBNAME   := libsqlitejdbc.so\nLinux-x86_64_SQLITE_FLAGS  := \n\nLinux-arm_CC          := $(CROSS_PREFIX)gcc\nLinux-arm_STRIP       := $(CROSS_PREFIX)strip\nLinux-arm_CCFLAGS     := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -mfloat-abi=soft -fvisibility=hidden\nLinux-arm_LINKFLAGS   := $(Default_LINKFLAGS)\nLinux-arm_LIBNAME     := libsqlitejdbc.so\nLinux-arm_SQLITE_FLAGS  :=\n\nLinux-armv6_CC        := $(CROSS_PREFIX)gcc\nLinux-armv6_STRIP     := $(CROSS_PREFIX)strip\nLinux-armv6_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -mfloat-abi=hard -mfpu=vfp -fPIC -fvisibility=hidden\nLinux-armv6_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-armv6_LIBNAME   := libsqlitejdbc.so\nLinux-armv6_SQLITE_FLAGS  :=\n\nLinux-armv7_CC        := $(CROSS_PREFIX)gcc\nLinux-armv7_STRIP     := $(CROSS_PREFIX)strip\nLinux-armv7_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -mfloat-abi=hard -mfpu=vfp -fPIC -fvisibility=hidden\nLinux-armv7_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-armv7_LIBNAME   := libsqlitejdbc.so\nLinux-armv7_SQLITE_FLAGS  :=\n\nLinux-Android-arm_CC        := $(CROSS_PREFIX)clang\nLinux-Android-arm_STRIP     := $(CROSS_ROOT)/bin/llvm-strip\nLinux-Android-arm_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog\nLinux-Android-arm_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so\nLinux-Android-arm_LIBNAME   := libsqlitejdbc.so\nLinux-Android-arm_SQLITE_FLAGS  :=\n\nLinux-Android-aarch64_CC        := $(CROSS_PREFIX)clang\nLinux-Android-aarch64_STRIP     := $(CROSS_ROOT)/bin/llvm-strip\nLinux-Android-aarch64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog\nLinux-Android-aarch64_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so\nLinux-Android-aarch64_LIBNAME   := libsqlitejdbc.so\nLinux-Android-aarch64_SQLITE_FLAGS  :=\n\nLinux-Android-x86_CC        := $(CROSS_PREFIX)clang\nLinux-Android-x86_STRIP     := $(CROSS_ROOT)/bin/llvm-strip\nLinux-Android-x86_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog\nLinux-Android-x86_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so\nLinux-Android-x86_LIBNAME   := libsqlitejdbc.so\nLinux-Android-x86_SQLITE_FLAGS  :=\n\nLinux-Android-x86_64_CC        := $(CROSS_PREFIX)clang\nLinux-Android-x86_64_STRIP     := $(CROSS_ROOT)/bin/llvm-strip\nLinux-Android-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -I$(CROSS_ROOT)/sysroot/usr/include -Os -fPIC -fvisibility=hidden -fPIE -pie -lm -lc -landroid -ldl -llog\nLinux-Android-x86_64_LINKFLAGS := $(Default_LINKFLAGS) -Wl,-soname,libsqlitejdbc.so\nLinux-Android-x86_64_LIBNAME   := libsqlitejdbc.so\nLinux-Android-x86_64_SQLITE_FLAGS  :=\n\nLinux-ppc64_CC        := $(CROSS_PREFIX)gcc\nLinux-ppc64_STRIP     := $(CROSS_PREFIX)strip\nLinux-ppc64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nLinux-ppc64_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-ppc64_LIBNAME   := libsqlitejdbc.so\nLinux-ppc64_SQLITE_FLAGS  :=\n\nLinux-riscv64_CC        := $(CROSS_PREFIX)gcc\nLinux-riscv64_STRIP     := $(CROSS_PREFIX)strip\nLinux-riscv64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nLinux-riscv64_LINKFLAGS := $(Default_LINKFLAGS)\nLinux-riscv64_LIBNAME   := libsqlitejdbc.so\nLinux-riscv64_SQLITE_FLAGS  :=\n\nDragonFly-x86_64_CC        := $(CROSS_PREFIX)cc\nDragonFly-x86_64_STRIP     := $(CROSS_PREFIX)strip\nDragonFly-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -O2 -fPIC -fvisibility=hidden\nDragonFly-x86_64_LINKFLAGS := -shared\nDragonFly-x86_64_LIBNAME   := libsqlitejdbc.so\nDragonFly-x86_64_SQLITE_FLAGS  :=\n\nFreeBSD-x86_CC        := $(CROSS_PREFIX)gcc\nFreeBSD-x86_STRIP     := $(CROSS_PREFIX)strip\nFreeBSD-x86_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nFreeBSD-x86_LINKFLAGS := -shared\nFreeBSD-x86_LIBNAME   := libsqlitejdbc.so\nFreeBSD-x86_SQLITE_FLAGS  :=\n\nFreeBSD-x86_64_CC        := $(CROSS_PREFIX)gcc\nFreeBSD-x86_64_STRIP     := $(CROSS_PREFIX)strip\nFreeBSD-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nFreeBSD-x86_64_LINKFLAGS := -shared\nFreeBSD-x86_64_LIBNAME   := libsqlitejdbc.so\nFreeBSD-x86_64_SQLITE_FLAGS  :=\n\nFreeBSD-aarch64_CC        := $(CROSS_PREFIX)clang\nFreeBSD-aarch64_STRIP     := $(CROSS_PREFIX)strip\nFreeBSD-aarch64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nFreeBSD-aarch64_LINKFLAGS := -shared\nFreeBSD-aarch64_LIBNAME   := libsqlitejdbc.so\nFreeBSD-aarch64_SQLITE_FLAGS  :=\n\nOpenBSD-x86_64_CC        := $(CROSS_PREFIX)gcc\nOpenBSD-x86_64_STRIP     := $(CROSS_PREFIX)strip\nOpenBSD-x86_64_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -Os -fPIC -fvisibility=hidden\nOpenBSD-x86_64_LINKFLAGS := -shared\nOpenBSD-x86_64_LIBNAME   := libsqlitejdbc.so\nOpenBSD-x86_64_SQLITE_FLAGS  := \n\nSunOS-sparcv9_CC        := $(CROSS_PREFIX)gcc\nSunOS-sparcv9_STRIP     := $(CROSS_PREFIX)strip\nSunOS-sparcv9_CCFLAGS   := -I$(JAVA_HOME)/include -Ilib/inc_linux -O2s-fPIC -m64 -fvisibility=hidden\nSunOS-sparcv9_LINKFLAGS := -shared -static-libgcc\nSunOS-sparcv9_LIBNAME   := libsqlitejdbc.so\nSunOS-sparcv9_SQLITE_FLAGS  := \n\nMac-x86_CC        := gcc\nMac-x86_STRIP     := strip -x\nMac-x86_CCFLAGS    := -I$(JAVA_HOME)/include -Ilib/inc_mac -Os -fPIC -mmacosx-version-min=10.4 -fvisibility=hidden\nMac-x86_LINKFLAGS := -dynamiclib\nMac-x86_LIBNAME   := libsqlitejdbc.dylib\nMac-x86_SQLITE_FLAGS  := -DSQLITE_ENABLE_LOCKING_STYLE=0\n\nHPUX-ia64_32_CC\t\t\t:= cc\nHPUX-ia64_32_STRIP\t\t:= strip\nHPUX-ia64_32_CCFLAGS\t:= -Ilib/inc_linux +Osize +z -Bhidden\nHPUX-ia64_32_LINKFLAGS\t:= -b\nHPUX-ia64_32_LIBNAME\t:= libsqlitejdbc.so\nHPUX-ia64_32_SQLITE_FLAGS :=\n\nMac-x86_64_CC        := gcc -arch $(OS_ARCH) \nMac-x86_64_STRIP     := strip -x\nMAC_SDK := /Developer/SDKs/MacOSX10.10.sdk\nifeq ($(wildcard MAC_SDK),)\n\tMAC_SDK := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk\nendif\nMac-x86_64_CCFLAGS    := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -Ilib/inc_mac -Os -fPIC -mmacosx-version-min=10.6 -fvisibility=hidden -Wno-implicit-function-declaration\nMac-x86_64_LINKFLAGS := -dynamiclib \nMac-x86_64_LIBNAME   := libsqlitejdbc.dylib\nMac-x86_64_SQLITE_FLAGS  := \n\n# Use a CROSS_PREFIX as the cross-triple clang is not available in crossbuild, see https://github.com/multiarch/crossbuild/blob/ad79cc84b6fb3fb1d09bc4a78719ef26f23bab85/Dockerfile#L134\n# When running on a M1 mac, CROSS_PREFIX will be empty, and 'make native' can still build\nMac-aarch64_CC        := $(CROSS_PREFIX)clang\nMac-aarch64_STRIP     := $(CROSS_PREFIX)strip -x\nMAC_SDK := /usr/osxcross/SDK/MacOSX11.3.sdk\nMac-aarch64_CCFLAGS    := -I$(MAC_SDK)/System/Library/Frameworks/JavaVM.framework/Headers -Ilib/inc_mac -Os -fPIC -mmacosx-version-min=10.9 -fvisibility=hidden -Wno-implicit-function-declaration\nMac-aarch64_LINKFLAGS  := -dynamiclib\nMac-aarch64_LIBNAME    := libsqlitejdbc.dylib\nMac-aarch64_SQLITE_FLAGS := \n\nWindows-x86_CC           := $(CROSS_PREFIX)gcc\nWindows-x86_STRIP        := $(CROSS_PREFIX)strip\nWindows-x86_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os\nWindows-x86_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc\nWindows-x86_LIBNAME      := sqlitejdbc.dll\nWindows-x86_SQLITE_FLAGS := \n\nWindows-x86_64_CC           := $(CROSS_PREFIX)gcc\nWindows-x86_64_STRIP        := $(CROSS_PREFIX)strip\nWindows-x86_64_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os\nWindows-x86_64_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc\nWindows-x86_64_LIBNAME      := sqlitejdbc.dll\nWindows-x86_64_SQLITE_FLAGS :=\n\nWindows-armv7_CC           := $(CROSS_PREFIX)clang\nWindows-armv7_STRIP        := $(CROSS_PREFIX)strip\nWindows-armv7_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os\nWindows-armv7_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc\nWindows-armv7_LIBNAME      := sqlitejdbc.dll\nWindows-armv7_SQLITE_FLAGS :=\n\nWindows-aarch64_CC           := $(CROSS_PREFIX)clang\nWindows-aarch64_STRIP        := $(CROSS_PREFIX)strip\nWindows-aarch64_CCFLAGS      := -D_JNI_IMPLEMENTATION_ -Ilib/inc_win -Os\nWindows-aarch64_LINKFLAGS    := -Wl,--kill-at -shared -static-libgcc\nWindows-aarch64_LIBNAME      := sqlitejdbc.dll\nWindows-aarch64_SQLITE_FLAGS :=\n\n\nCC        := $($(target)_CC)\nSTRIP     := $($(target)_STRIP)\nCCFLAGS   := $($(target)_CCFLAGS) \nLINKFLAGS := $($(target)_LINKFLAGS) \nLIBNAME   := $($(target)_LIBNAME)\nSQLITE_FLAGS := $($(target)_SQLITE_FLAGS)\nSQLITE_AMAL_PREFIX = sqlite-amalgamation-$(shell ./amalgamation_version.sh $(version))\nSQLITE_OLD_AMAL_PREFIX = sqlite-amalgamation-$(subst .,_,$(version))\nCCFLAGS := $(CCFLAGS) \nifneq ($(jni_include),)\nCCFLAGS := $(CCFLAGS) -I\"$(jni_include)\"\nendif\nifneq ($(jni_md_include),)\nCCFLAGS := $(CCFLAGS) -I\"$(jni_md_include)\"\nendif\n\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 12.2333984375,
          "content": "# News\n*   2021-08-30: sqlite-jdbc-3.36.0.3\n    * Fixes for GraalVM\n    * Internal update: Migrate to JUnit5. Add CI with GraalVM\n*   2021-08-25: sqlite-jdbc-3.36.0.2\n    * New Features:\n        * Support custom collation creation (#627)\n    * Newly Supported OS and Arch:\n        * Windows armv7 and arm64 (e.g., Surface Pro X) (#644)\n        * FreeBSD aarch64 (#642)\n        * Bring back Linux armv6 support (#628)\n        * FreeBSD x86 and x86_64 (#639)\n        * Dropped DragonFlyBSD support (#641)\n    * Other Internal Fixes\n        * Add reflect-config, jni-config and native-image.properties to graalvm native image compilation (#631)\n        * Fix multipleClassLoader test when directory is renamed (#647)\n        * CI tests for Windows and MacOS (#645)\n    * Special thanks to @gotson for adding collation support and build configurations for more OS and CPU types!\n*   2021-06-30: sqlite-jdbc-3.36.0.1\n    * Fixed a date parsing issue #88\n    * Added CI for testing JDK16 compatibility. sqlite-jdbc works for JDK8 to JDK16\n*   2021-06-27: sqlite-jdbc-3.36.0\n    * Upgrade to SQLite 3.36.0\n*   2021-06-27: sqlite-jdbc-3.35.0.1\n    * Upgraded to SQLite 3.35.0\n    * Avoid using slower ByteBuffer decode() method (#575)\n    * Allow increasing SQLite limits (#568)\n    * Add Automatic-Module-Name for OSGi (#558)\n    * Avoid using shared resource streams between class loaders when extracting the native library. (#578)\n    * Accept `READ_COMMITTED` and `REPEATABLE_READ` isolation levels (not natively supported) by treating as `SERIALIZABLE`\n    * Accept (but ignore) fetch direction hint\n    * **Note**: Don't use 3.35.0 if you are Apple Silicon (M1) user. 3.35.0 failed to include M1 binary\n*   2020-12-10: sqlite-jdbc-3.34.0\n    * Improved the performance of reading String columns\n    * Support URI file names (file://...) in backup/restore commands https://www.sqlite.org/uri.html\n    * Show SQL strings in PreparedStatements.toString()\n*   2020-12-08: sqlite-jdbc-3.32.3.3\n    * Apple Silicon (M1) support\n*   2020-07-28: sqlite-jdbc-3.32.3.2\n    * Enable SQLITE_MAX_MMAP_SIZE compile option again.\n    * Fixes issues when using Arm Cortex A8, A9 (32-bit architecture)\n*   2020-07-15: sqlite-jdbc-3.32.3.1\n    * Remove SQLITE_MAX_MMAP_SIZE compile option, which might be causing performance issues.\n*   2020-06-18: sqlite-jdbc-3.32.3\n    * Fix multiple CVE reported issues https://github.com/xerial/sqlite-jdbc/issues/501\n*   2020-05-04: sqlite-jdbc-3.31.1\n    * Upgrade to sqlite 3.31.1\n    * Support update/commit/rollback event notifications #350\n    * Remove sparse index checks #476\n    * Support alpine linux (Linux-alpine)\n    * Enabled SQLITE_ENABLE_STAT4 flag\n*   2019-12-23: sqlite-jdbc-3.30.1\n    * Upgrade to sqlite 3.30.1\n    * Various fixes\n*   2019-06-24: sqlite-jdbc-3.28.0\n    * Upgrade to sqlite 3.28.0\n*   2019-03-20: sqlite-jdbc-3.27.2.1\n    * Make smaller the jar size by using -Os compiler option\n    * Performance improvement for concurrent access.\n*   2019-03-18: sqlite-jdbc-3.27.2\n    * Upgrade to SQLite [3.27.2](https://www.sqlite.org/releaselog/3_27_2.html)\n*   2018-10-01: sqlite-jdbc-3.25.2\n    * Upgrade to SQLite [3.25.2](https://www.sqlite.org/releaselog/3_25_2.html)\n    * Fixes #74, #318, #349, #363, #365\n    * Upsert is supported since this version.\n*   2018-05-25: sqlite-jdbc-3.23.1\n    * Upgrade to SQLite [3.23.1](https://www.sqlite.org/releaselog/3_23_1.html)\n    * Fixes #312, #321, #323, #328\n    * Dropped linux armv6 support temporarily\n*   2017-12-07: sqlite-jdbc-3.21.0.1\n    * Metadata query fixes\n    * Fix for Android\n*   2017-11-14: sqlite-jdbc-3.21.0\n    * Upgrade to SQLite [3.21.0](https://www.sqlite.org/releaselog/3_21_0.html)\n    * Various fixes for metadata queries\n*   2017-10-08: sqlite-jdbc-3.20.1\n    * Upgrade to SQLite [3.20.1](https://www.sqlite.org/releaselog/3_20_1.html)\n    * Various bug fixes\n*   2017-08-04: sqlite-jdbc-3.20.0\n    * Upgrade to SQLite [3.20.0](https://www.sqlite.org/releaselog/3_20_0.html)\n    * Support Linux aarch64\n    * Fix #239\n*   2017-06-22: sqlite-jdbc-3.19.3\n    * Upgrade to SQLite [3.19.3](https://www.sqlite.org/releaselog/3_19_3.html)\n*   2017-05-18: sqlite-jdbc-3.18.0\n    * Upgrade to SQLite [3.18.0](https://www.sqlite.org/releaselog/3_18_0.html)\n*   2017-01-10: sqlite-jdbc-3.16.1\n    * Upgrade to SQLite [3.16.1](https://www.sqlite.org/releaselog/3_16_1.html)\n    * Add experimental support for ppc64, armv5, v6 (Raspberry PI), v7 and android-arm.\n    * Fix a bug in prepared statements #74\n    * Building all native libraries using cross compilers in docker images\n*   2016-11-04: sqlite-jdbc-3.15.1\n    * Upgrade to SQLite [3.15.1](https://www.sqlite.org/releaselog/3_15_1.html)\n*   2016-11-04: sqlite-jdbc-3.15.0\n    * Upgrade to SQLite [3.15.0](https://www.sqlite.org/releaselog/3_15_0.html)\n    * Cleanup extracted temp library files upon start\n    * Fix various metadata problems\n\n*   2016-09-30: sqlite-jdbc-3.14.2.1\n    * Improved the performance for single-threaded applications (#162)\n\n*   2016 09-26: sqlite-jdbc-3.14.2\n    * Updated binaries (Using docker for the ease of cross compiling)\n    * Fixes native libraries for Raspberry-Pi\n    * Dropped support for Mac x86 (The last Mac OS X supporting this architecture was Snow Leopard, 7-year ago!)\n    * Default support of JSON1 extension (#76, #127)\n    * Implement query progress callback (#137)\n    * Use extended error codes (#119)\n*   2015 Oct 3rd: sqlite-jdbc-3.8.11.2\n    * Fix for Raspberry-Pi 2\n    * Add multiple table support for DatabaseMetaData.getColumns\n*   2015 August 3rd: sqlite-jdbc-3.8.11.1\n    * Fix for Linux ARM native library\n*   2015 July 29th: sqlite-jdbc-3.8.11 release.\n    * General performance improvement\n    * warning: No update for FreeBSD binary (need a contribution of native library!)\n*   2015 July 27th: sqlite-jdbc-3.8.10.2 release (Thread-safe date time)\n*   2015 May 11th: sqlite-jdbc-3.8.10.1 release\n*   2015 May 7th: sqlite-jdbc-3.8.9.1 release\n*   2014 October 20th: sqlite-jdbc-3.8.7 released.\n    * Fixed the native code loading mechanism to allow loading sqlite-jdbc from multiple class loaders.\n*   2014 October 8th: sqlite-jdbc-3.8.6 released.\n*   2014 August 7th: sqlite-jdbc-3.8.5-pre1 released.\n*   2014 January 5th: sqlite-jdbc-3.8.2-SNAPSHOT Introduced JDBC4 version of driver. (Requires at least Java 6).\n    *   Source code is on branch feature/jdbc4\n*   2013 August 27th: sqlite-jdbc-3.8.0 snapshot version is [available](https://oss.sonatype.org/content/repositories/snapshots/org/xerial/sqlite-jdbc/3.8.0-SNAPSHOT/)\n*   2013 August 19th: sqlite-jdbc-3.7.15-M1\n*   2013 March 24th : sqlite-jdbc-3.7.15-SNAPSHOT-2\n*   2013 January 22nd: The repositories and documentations were moved to the bitbucket.\n*   2012 December 15th: sqlite-jdbc-3.7.15-SNAPSHOT\n    *   Removed pure-java.\n*   2010 August 27th: [sqlite-jdbc-3.7.2](http://www.xerial.org/maven/repository/snapshot/org/xerial/sqlite-jdbc/) released\n*   2010 April 3rd: [beta release of sqlite-jdbc-3.6.23.1-SNAPSHOT](http://www.xerial.org/maven/repository/snapshot/org/xerial/sqlite-jdbc/)\n    *   Added online backup/restore functions. Syntax: `backup to (file name)`, `restore from (file name)`.\n*   2009 December 10th: [sqlite-jdbc-3.6.20.1](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.20.1/) release.\n    *   Read-only connection, recursive trigger, foreign key validation support etc. using SQLiteConfig class.\n\n        ```java\n        SQLiteConfig config = new SQLiteConfig();\n        // config.setReadOnly(true);\n        config.setSharedCache(true);\n        config.recursiveTriggers(true);\n        // ... other configuration can be set via SQLiteConfig object\n        Connection conn = DriverManager.getConnection(\"jdbc:sqlite:sample.db\", config.toProperties());\n        ```\n\n*   2009 November 12th: [sqlite-jdbc-3.6.19](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.19/) released.\n    *   added 64-bit OS support: 64-bit native SQLite binaries for Windows (x86\\_64), Mac (x86\\_64) and Linux (adm64) are available.\n*   2009 August 19th: [sqlite-jdbc-3.6.17.1](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.17.1/) released.\n*   2009 July 2nd: [sqlite-jdbc-3.6.16](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.16/) release.\n*   2009 June 4th: [sqlite-jdbc-3.6.14.2](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.14.2/) released.\n*   2009 May 19th: [sqlite-jdbc-3.6.14.1](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.14.1/) released.\n    *   This version supports \"jdbc:sqlite::resource:\" syntax to access read-only\n        DB files contained in JAR archives, or external resources specified via URL, local files address etc. (see also the [details](http://groups.google.com/group/xerial/browse_thread/thread/39acb38f99eb2469/fc6afceabeaa0f76?lnk=gst&q=resource#fc6afceabeaa0f76))\n\n\n*   2009 February 18th: sqlite-jdbc-3.6.11 released.\n    *   Fixed a bug in `PrepStmt`, which does not clear the batch contents after `executeBatch()`.\n        [Discussion](http://groups.google.com/group/xerial/browse_thread/thread/1fa83eb36f6d5dab).\n\n\n*   2009 January 19th: sqlite-jdbc-3.6.10 released. This version is compatible with\n    sqlite version 3.6.10. <https://www.sqlite.org/releaselog/3_6_10.html>\n    * Added `READ_UNCOMMITTED` mode support for better query performance: (see also <https://www.sqlite.org/sharedcache.html> )\n\n        ```java\n        // READ_UNCOMMITTED mode works only in shared_cache mode.\n         Properties prop = new Properties();\n         prop.setProperty(\"shared_cache\", \"true\");\n         Connection conn = DriverManager.getConnection(\"jdbc:sqlite:\", prop);\n         conn.setTransactionIsolation(Conn.TRANSACTION_READ_UNCOMMITTED);\n        ```\n\n\n*   2008 December 17th: sqlite-jdbc-3.6.7 released.\n    *   Related information: <https://www.sqlite.org/releaselog/3_6_7.html>\n*   2008 December 1st: sqlite-jdbc-3.6.6.2 released,\n    *   Fixed a bug incorporated in the version 3.6.6 <https://www.sqlite.org/releaselog/3_6_6_2.html>\n*   2008 November 20th: sqlite-jdbc-3.6.6 release.\n    *   Related information sqlite-3.6.6 changes: <https://www.sqlite.org/releaselog/3_6_6.html>\n*   2008 November 11th: sqlite-jdbc-3.6.4.1. A bug fix release\n    *   Pure-java version didn't work correctly. Fixed in both 3.6.4.1 and 3.6.4.\n        If you have already downloaded 3.6.4, please obtain the latest one on the download page.\n*   2008 October 16th: sqlite-jdbc-3.6.4 released.\n    *   Changes from SQLite 3.6.3: <https://www.sqlite.org/releaselog/3_6_4.html>\n    *   `R*-Tree` index and `UPDATE/DELETE` syntax with `LIMIT` clause are available from this build.\n*   2008 October 14th: sqlite-jdbc-3.6.3 released. Compatible with SQLite 3.6.3.\n*   2008 September 18th: sqlite-jdbc-3.6.2 released. Compatible with SQLite 3.6.2\n    and contains pure-java and native versions.\n*   2008 July 17th: sqlite-jdbc-3.6.0 released. Compatible with SQLite 3.6.0, and\n    includes both pure-java and native versions.\n*   2008 July 3rd: [sqlite-jdbc-3.5.9-universal](http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.5.9-universal) released.\n    This version contains both native and pure-java SQLite libraries, so it probably works in any OS environment.\n\n\n*   2008 May 29th: Current development revision (sqlite-jdbc-3.5.9-1) can be compiled\n    with JDK 6. No need to use JDK 1.5 for compiling SQLiteJDBC.\n*   2008 May 20th: sqlite-jdbc-3.5.9 released.\n*   2008 May 20th: sqlite-jdbc-3.5.8 released (corresponding to SQLite 3.5.8 and\n    sqlite-jdbc-v047). From this release, Windows, Mac OS X, Linux (i386, amd64)\n    and Solaris (SunOS, sparcv9) libraries are bundled into one jar file.\n*   2008 May 1st: sqlite-jdbc is now in the maven central repository!\n    [How to use SQLiteJDBC with Maven2](#using-sqlite-jdbc-with-maven2)\n*   2008 Mar. 18th: sqlite-jdbc-3.5.7 released.\n    *   This version corresponds to [SQLite 3.5.7](https://www.sqlite.org/releaselog/3_5_7.html).\n\n\n*   2008 Mar. 10th: sqlite-jdbc-v042 released.\n    *   Corresponding to SQLite 3.5.6, which integrates FTS3 (full text search).\n*   2008 Jan. 31st: sqlite-jdbc-v038.4 released.\n    *   SQLiteJDBCLoader.initialize() is no longer required.\n*   2008 Jan. 11th: The Jar files for Windows, Mac OS X and Linux are packed into\n    a single Jar file! So, no longer need to use an OS-specific jar file.\n*   2007 Dec. 31th: Upgraded to sqlitejdbc-v038\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.169921875,
          "content": "This product includes the following softwares developed by David Crawshaw.\r\nSee LICENSE.zentus file.\r\n\r\nAnd also, NestedVM (Apache License Version 2.0) is used inside sqlite-"
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 10.2236328125,
          "content": "= SQLite JDBC Driver\n:project-version: 3.47.2.0\n\nimage:https://img.shields.io/github/actions/workflow/status/xerial/sqlite-jdbc/ci.yml?branch=master[GitHub Workflow Status (branch),link=https://github.com/xerial/sqlite-jdbc/actions/workflows/ci.yml?query=branch%3Amaster]\nimage:https://badges.gitter.im/xerial/sqlite-jdbc.svg[Join the chat,link=https://gitter.im/xerial/sqlite-jdbc?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge]\nimage:https://maven-badges.herokuapp.com/maven-central/org.xerial/sqlite-jdbc/badge.svg[Maven Central,link=https://maven-badges.herokuapp.com/maven-central/org.xerial/sqlite-jdbc/]\nimage:https://javadoc.io/badge2/org.xerial/sqlite-jdbc/javadoc.svg[javadoc,link=https://javadoc.io/doc/org.xerial/sqlite-jdbc]\nimage:https://img.shields.io/nexus/s/org.xerial/sqlite-jdbc?color=blue&label=maven%20snapshot&server=https%3A%2F%2Foss.sonatype.org%2F[Sonatype Nexus (Snapshots),link=https://oss.sonatype.org/content/repositories/snapshots/org/xerial/sqlite-jdbc/]\n\nSQLite JDBC is a library for accessing and creating https://www.sqlite.org[SQLite] database files in Java.\n\nOur SQLiteJDBC library requires no configuration since native libraries for major OSs, including Windows, macOS, Linux etc., are assembled into a single JAR (Java Archive) file.\n\n== Project Status\n\nThe project is maintained, but is not being actively developed:\n\n- We follow every new version of SQLite and will release a corresponding version of our driver.\n- Bugs will be investigated, and fixed if possible.\n- New features are driven by pull requests.\n\nThe current maintainer of the project is https://github.com/gotson[gotson].\n\n== Usage\n\n➡️ More usage examples and configuration are available in link:USAGE.md[USAGE.md]\n\nSQLite JDBC is a library for accessing SQLite databases through the JDBC API. For the general usage of JDBC, see https://docs.oracle.com/javase/tutorial/jdbc/index.html[JDBC Tutorial] or https://www.oracle.com/technetwork/java/javase/tech/index-jsp-136101.html[Oracle JDBC Documentation].\n\n. <<Download,Download>> `sqlite-jdbc-{project-version}.jar`\nthen append this jar file into your classpath.\n. Open a SQLite database connection from your code. (see the example below)\n\n=== Example usage\n\nAssuming `sqlite-jdbc-{project-version}.jar` is placed in the current directory.\n\n[source,shell,subs=\"attributes+\"]\n----\n> javac Sample.java\n> java -classpath \".;sqlite-jdbc-{project-version}.jar\" Sample   # in Windows\nor\n> java -classpath \".:sqlite-jdbc-{project-version}.jar\" Sample   # in macOS or Linux\nname = leo\nid = 1\nname = yui\nid = 2\n----\n\n=== Sample.java\n\n[source,java]\n----\n    import java.sql.Connection;\n    import java.sql.DriverManager;\n    import java.sql.ResultSet;\n    import java.sql.SQLException;\n    import java.sql.Statement;\n\n    public class Sample\n    {\n      public static void main(String[] args)\n      {\n        // NOTE: Connection and Statement are AutoCloseable.\n        //       Don't forget to close them both in order to avoid leaks.\n        try\n        (\n          // create a database connection\n          Connection connection = DriverManager.getConnection(\"jdbc:sqlite:sample.db\");\n          Statement statement = connection.createStatement();\n        )\n        {\n          statement.setQueryTimeout(30);  // set timeout to 30 sec.\n\n          statement.executeUpdate(\"drop table if exists person\");\n          statement.executeUpdate(\"create table person (id integer, name string)\");\n          statement.executeUpdate(\"insert into person values(1, 'leo')\");\n          statement.executeUpdate(\"insert into person values(2, 'yui')\");\n          ResultSet rs = statement.executeQuery(\"select * from person\");\n          while(rs.next())\n          {\n            // read the result set\n            System.out.println(\"name = \" + rs.getString(\"name\"));\n            System.out.println(\"id = \" + rs.getInt(\"id\"));\n          }\n        }\n        catch(SQLException e)\n        {\n          // if the error message is \"out of memory\",\n          // it probably means no database file is found\n          e.printStackTrace(System.err);\n        }\n      }\n    }\n\n----\n\n== How does SQLiteJDBC work?\n\nOur SQLite JDBC driver package (i.e., `sqlite-jdbc-{project-version}.jar`) contains three\ntypes of native SQLite libraries (`sqlitejdbc.dll`, `sqlitejdbc.dylib`, `sqlitejdbc.so`),\neach of them is compiled for Windows, macOS and Linux. An appropriate native library\nfile is automatically extracted into your OS's temporary folder, when your program\nloads `org.sqlite.JDBC` driver.\n\n=== Supported Operating Systems\n\nSince sqlite-jdbc-3.6.19, the natively compiled SQLite engines will be used for\nthe following operating systems:\n\n|===\n| |x86 |x86_64 |armv5 |armv6 |armv7 |arm64 |ppc64 | riscv64\n\n|Windows |✔ |✔ | | |✔ |✔ | |\n|macOS | |✔ | | | |✔ | |\n|Linux (libc) |✔ |✔ |✔ |✔ |✔ |✔ |✔ |✔ \n|Linux (musl) |✔ |✔ | | | |✔ | |\n|Android (API Level 24+) |✔ |✔ |✔ | | |✔ | |\n|FreeBSD |✔ |✔ | | | |✔ | |\n|===\n\nIn the other OSs not listed above, the pure-java SQLite is used. (Applies to versions before 3.7.15)\n\nIf you want to use the native library for your OS, link:./CONTRIBUTING.md[build the source from scratch].\n\n=== GraalVM native-image support\n\nSqlite JDBC supports https://www.graalvm.org/native-image/[GraalVM native-image] out of the box starting from version 3.40.1.0.\nThere has been rudimentary support for some versions before that, but this was not actively tested by the CI.\n\nBy default, the `sqlitejdbc` library for the compilation target will be included in the native image, accompanied by the required JNI configuration.\nAt runtime, this library will be extracted to the temp folder and loaded from there.\nFor faster startup however, it is recommended to set the `org.sqlite.lib.exportPath` property at build-time.\nThis will export the `sqlitejdbc` library at build-time to the specified directory, and the library will not be included as a resource.\nAs a result, the native image itself will be slightly smaller and the overhead of exporting the library at run-time is eliminated,\nbut you need to make sure the library can be found at run-time.\nThe best way to do this is to simply place the library next to the executable.\n\n==== CLI example\n\n[source,shell]\n----\nnative-image -Dorg.sqlite.lib.exportPath=~/outDir -H:Path=~/outDir -cp foo.jar org.example.Main\n----\n\nThis will place both the `sqlitejdbc` shared library and the native-image output in the `~/outDir` folder.\n\n=== Maven example\n\nThis example uses the https://graalvm.github.io/native-build-tools/latest/index.html[native-build-tools] maven plugin:\n\n[source,xml]\n----\n<plugin>\n    <groupId>org.graalvm.buildtools</groupId>\n    <artifactId>native-maven-plugin</artifactId>\n    <configuration>\n        <buildArgs>\n            <buildArg>-Dorg.sqlite.lib.exportPath=${project.build.directory}</buildArg>\n        </buildArgs>\n    </configuration>\n</plugin>\n----\n\nThis will automatically place the `sqlitejdbc` library in the `/target` folder of your project, creating a functional execution environment.\nWhen packaging the resulting app, simply include the library in the distribution bundle.\n\n== Download\n\nDownload from https://search.maven.org/artifact/org.xerial/sqlite-jdbc[Maven Central] or from the https://github.com/xerial/sqlite-jdbc/releases[releases] page.\n\n[source,xml,subs=\"attributes+\"]\n----\n<dependencies>\n    <dependency>\n      <groupId>org.xerial</groupId>\n      <artifactId>sqlite-jdbc</artifactId>\n      <version>{project-version}</version>\n    </dependency>\n</dependencies>\n----\n\nSnapshots of the development version are available in https://oss.sonatype.org/content/repositories/snapshots/org/xerial/sqlite-jdbc/[Sonatype's snapshots repository].\n\n=== Validating downloads\n\nMaven Central resources are signed using https://gnupg.org/[GPG] and the signature files, ending in .asc, are available in the same location as the other downloads. \n\nThe following key is currently used to sign releases:\n\n---- \n\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: C1CB A75E C9BD 0BAF 8061  9354 59E0 5CE6 1818 7ED4\nComment: Taro L. Saito (For GitHub Actions) <leo@xerial.org>\n\nxjMEYuRVGhYJKwYBBAHaRw8BAQdA2Dp4m1Yhtb1g94pQzzL24FuP6b9KXF8lP9Dh\nhZnynhfNM1Rhcm8gTC4gU2FpdG8gKEZvciBHaXRIdWIgQWN0aW9ucykgPGxlb0B4\nZXJpYWwub3JnPsKUBBMWCgA8FiEEwcunXsm9C6+AYZNUWeBc5hgYftQFAmLkVRoC\nGwMFCwkIBwIDIgIBBhUKCQgLAgQWAgMBAh4HAheAAAoJEFngXOYYGH7UfPwBAK7x\nTVRebZeWcAwmGaMUsbg7SgJou8xnkhByObPLUC/4AQDPsZeYmi4KXyXPzmqhCicd\nY+ZSJWIDQqitK2ujPDFXA844BGLkVRoSCisGAQQBl1UBBQEBB0Atu9kejBi+6wfO\nT0a9z/LYEEdNXM/VX6xt1onKToPPdQMBCAfCeAQYFgoAIBYhBMHLp17JvQuvgGGT\nVFngXOYYGH7UBQJi5FUaAhsMAAoJEFngXOYYGH7UlMABAKyRCazhVyUFg5FOpAnm\nckBY38CaMGPPLXVyY8Kr6dYFAP9wYLu7nsDZCOXkAgS+et4Pk1WZCggoYUkxsX1o\n0KZXBQ==\n=Wyas\n-----END PGP PUBLIC KEY BLOCK-----\n\n----\n\n=== Project versioning explained\n\nThe project's version follows the version of the SQLite library that is bundled in the jar, with an extra digit to denote the project's increment.\n\nFor example, if the SQLite version is `3.39.2`, the project version will be `3.39.2.x`, where `x` starts at 0, and increments with every release that is not changing the SQLite version.\n\nIf the SQLite version is updated to `3.40.0`, the project version will be updated to `3.40.0.0`.\n\n=== Hint for maven-shade-plugin\n\nYou may need to add shade plugin transformer to solve `No suitable driver found for jdbc:sqlite:` issue.\n\n[source,xml]\n----\n<transformer\n\timplementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n\t<resource>META-INF/services/java.sql.Driver</resource>\n</transformer>\n----\n\n[source,xml,subs=\"attributes+\"]\n----\n<dependency>\n    <groupId>org.xerial</groupId>\n    <artifactId>sqlite-jdbc</artifactId>\n    <version>{project-version}</version>\n</dependency>\n----\n\n== How can I help?\n\nWe are always looking for:\n\n- *Reviewers* for issues or PRs, you can check image:https://img.shields.io/github/labels/xerial/sqlite-jdbc/review%20wanted[GitHub labels,link=https://github.com/xerial/sqlite-jdbc/labels/review%20wanted]\n- *Contributors* to submit PRs, you can check image:https://img.shields.io/github/labels/xerial/sqlite-jdbc/help%20wanted[GitHub labels,link=https://github.com/xerial/sqlite-jdbc/labels/help%20wanted] and image:https://img.shields.io/github/labels/xerial/sqlite-jdbc/good%20first%20issue[GitHub labels,link=https://github.com/xerial/sqlite-jdbc/labels/good%20first%20issue]\n\nPlease read our link:./CONTRIBUTING.md[contribution] guide.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.423828125,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version           | Supported          |\n|-------------------|--------------------|\n| Latest version    | :white_check_mark: |\n| Any other version | :x:                |\n\n## Reporting a Vulnerability\n\nSee https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability#privately-reporting-a-security-vulnerability\n"
        },
        {
          "name": "SQLiteJDBC.wiki",
          "type": "blob",
          "size": 18.9189453125,
          "content": "[[PageOutline]]\r\n\r\n= SQLite JDBC Driver =\r\n\r\nSQLite JDBC driver developed by [wiki:leo Taro L. Saito] is an extension of [http://www.zentus.com/sqlitejdbc Zentus's SQLite JDBC driver] that enables Java to access [https://www.sqlite.org SQLite] database files.\r\n\r\nOur SQLiteJDBC library, developed as a part of [http://www.xerial.org Xerial project], requires no configuration since all native libraries for Windows, Mac OS X, Linux and pure-java SQLite, which works in any OS environment, are assembled into a single JAR (Java Archive) file. The usage is quite simple; [#Download Download] our sqlite-jdbc library, then append the library (JAR file) to your class path. See [#Usage the sample code]. \r\n\r\n== What is different from Zentus's SQLite JDBC? ==\r\n\r\nThe original Zentus's SQLite JDBC driver http://www.zentus.com/sqlitejdbc/ itself is an excellent utility for using [https://www.sqlite.org SQLite] databases from Java language, and our SQLiteJDBC library also relies on its implementation. However, its pure-java version, which totally translates c/c++ codes of SQLite into Java, is significantly slower compared to its native version, which uses SQLite binaries compiled for each OS (win, mac, linux). \r\n\r\nTo use the native version of sqlite-jdbc, user had to set a path to the native codes (dll, dylib, so files, which are JNDI C programs) by using command-line arguments, e.g., -Djava.library.path=(path to the dll, dylib, etc.), or -Dorg.sqlite.lib.path, etc. This process was error-prone and bothersome to tell every user to set these variables. Our SQLiteJDBC library completely does away these inconveniences.\r\n\r\nAnother difference is that we are keeping this SQLiteJDBC library up-to-date to the newest version of SQLite engine, because we are one of the hottest users of this library. For example, SQLite JDBC is a core component of [http://utgenome.org/ UTGB (University of Tokyo Genome Browser) Toolkit], which is our utility to create personalized genome browsers.\r\n\r\n== Public Discussion Forum == \r\n * Post bug reports or feature requests to [http://groups.google.com/group/xerial?hl=en Xerial Public Discussion Group] \r\n\r\n== News ==\r\n  * 2010 August 27th: sqlite-jdbc-3.7.2 release: http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.7.2/\r\n  * 2010 April 3rd: beta release of sqlite-jdbc-3.6.23.1-SNAPSHOT: http://www.xerial.org/maven/repository/snapshot/org/xerial/sqlite-jdbc/\r\n    * Added online backup/restore functions. Syntax: backup to (file name),  restore from (file name).\r\n  * 2009 December 10th: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.20.1/ sqlite-jdbc-3.6.20.1] release. \r\n    * Read-only connection, recursive trigger, foreign key validation support etc. using SQLiteConfig class.\r\n{{{\r\n#!java\r\nSQLiteConfig config = new SQLiteConfig();\r\n// config.setReadOnly(true);   \r\nconfig.setSharedCache(true);\r\nconfig.recursiveTriggers(true);\r\n// ... other configuration can be set via SQLiteConfig object\r\nConnection conn = DriverManager.getConnection(\"jdbc:sqlite:sample.db\", config.toProperties());\r\n}}}\r\n  * 2009 November 12th: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.19/ sqlite-jdbc-3.6.19] release. \r\n    * added 64-bit OS support: 64-bit native SQLite binaries for Windows (x86_64), Mac (x86_64) and Linux (adm64) are available.\r\n  * 2009 August 19th: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.17.1/ sqlite-jdbc-3.6.17.1] released. \r\n  * 2009 July 2nd: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.16/ sqlite-jdbc-3.6.16] release. \r\n  * 2009 June 4th: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.14.2/ sqlite-jdbc-3.6.14.2] released. \r\n  * 2009 May 19th: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.6.14.1/ sqlite-jdbc-3.6.14.1] released. This version supports \"jdbc:sqlite::resource:\" syntax to access read-only DB files contained in JAR archives, or external resources specified via URL, local files address etc. (see also the [http://groups.google.com/group/xerial/browse_thread/thread/39acb38f99eb2469/fc6afceabeaa0f76?lnk=gst&q=resource#fc6afceabeaa0f76 details]) \r\n\r\n  * 2009 February 18th: sqlite-jdbc-3.6.11 released. \r\n    * Fixed a bug in !PrepStmt, which does not clear the batch contents after executeBatch(). [http://groups.google.com/group/xerial/browse_thread/thread/1fa83eb36f6d5dab Discussion].\r\n\r\n  * 2009 January 19th: sqlite-jdbc-3.6.10 released. This version is compatible with sqlite version 3.6.10. https://www.sqlite.org/releaselog/3_6_10.html\r\n    * Added READ_UNCOMMITTED mode support for better query performance: (see also https://www.sqlite.org/sharedcache.html )\r\n{{{\r\n#!java\r\n // READ_UNCOMMITTED mode works only in shared_cache mode.\r\n Properties prop = new Properties();\r\n prop.setProperty(\"shared_cache\", \"true\");\r\n Connection conn = DriverManager.getConnection(\"jdbc:sqlite:\", prop);\r\n conn.setTransactionIsolation(Conn.TRANSACTION_READ_UNCOMMITTED);\r\n}}}\r\n  * 2008 December 17th: sqlite-jdbc-3.6.7 released. Related information: https://www.sqlite.org/releaselog/3_6_7.html\r\n  * 2008 December 1st: sqlite-jdbc-3.6.6.2 released, which fixed a bug incorporated in the version 3.6.6 https://www.sqlite.org/releaselog/3_6_6_2.html \r\n  * 2008 November 20th: sqlite-jdbc-3.6.6 release. sqlite-3.6.6 changes: https://www.sqlite.org/releaselog/3_6_6.html\r\n�@* 2008 November 11th: sqlite-jdbc-3.6.4.1. A bug fix release \r\n    * Pure-java version didn't work correctly. Fixed in both 3.6.4.1 and 3.6.4. If you have already downloaded 3.6.4, please obtain the latest one on the download page.\r\n * 2008 October 16th: sqlite-jdbc-3.6.4 released. Changes from SQLite 3.6.3: https://www.sqlite.org/releaselog/3_6_4.html \r\n   * R*-Tree index and UPDATE/DELTE syntax with LIMIT clause are available from this build.\r\n * 2008 October 14th: sqlite-jdbc-3.6.3 released. Compatible with SQLite 3.6.3.\r\n * 2008 September 18th: sqlite-jdbc-3.6.2 released. Compatible with SQLite 3.6.2 and contains pure-java and native versions.\r\n * 2008 July 17th: sqlite-jdbc-3.6.0 released. Compatible with SQLite 3.6.0, and includes both pure-java and native versions. \r\n * 2008 July 3rd: [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/3.5.9-universal sqlite-jdbc-3.5.9-universal] released. This version contains both native and pure-java SQLite libraries, so it probably works in any OS environment.  \r\n\r\n * 2008 May 29th: Current development revision (sqlite-jdbc-3.5.9-1) can be compiled with JDK 6. No need to use JDK 1.5 for compiling SQLiteJDBC. \r\n * 2008 May 20th: sqlite-jdbc-3.5.9 released.\r\n * 2008 May 20th: sqlite-jdbc-3.5.8 released (corresponding to SQLite 3.5.8 and sqlite-jdbc-v047). From this release, Windows, Mac OS X, Linux (i386, amd64) and Solaris (SunOS, sparcv9) libraries are bundled into one jar file.\r\n * 2008 May 1st: sqlite-jdbc is now in the maven central repository! [#UsingSQLiteJDBCwithMaven2 How to use SQLiteJDBC with Maven2]\r\n * 2008 Mar. 18th: sqlite-jdbc-3.5.7 released. This version corresponds to [https://www.sqlite.org/releaselog/3_5_7.html SQLite 3.5.7].\r\n\r\n * 2008 Mar. 10th: sqlite-jdbc-v042 released. Corresponding to SQLite 3.5.6, which integrates FTS3 (full text search). \r\n * 2008 Jan. 31st: sqlite-jdbc-v038.4 released.   SQLiteJDBCLoder.initialize() is no longer required. \r\n * 2008 Jan. 11th: The Jar files for Windows, Mac OS X and Linux are packed into a single Jar file! So, no longer need to use an OS-specific jar file.\r\n * 2007 Dec. 31th: Upgraded to sqlitejdbc-v038\r\n\r\n== Download ==\r\nDownload the latest version of SQLiteJDBC from [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc here]. \r\n * version 3.6.x is the latest one. \r\n  * Do not use sqlite-jdbc-v0xx.jar, which are obsolete libraries but left here for users still using these versions. \r\n\r\nIf your are an [http://maven.apache.org Maven] user, follow the instruction described [#UsingSQLiteJDBCwithMaven2 here].\r\n\r\n=== Beta Release ===\r\n\r\nThe early releases (beta) of sqlite-jdbc with some advanced features are available from here:\r\n * http://www.xerial.org/maven/repository/snapshot/org/xerial/sqlite-jdbc \r\n\r\n\r\n== Supported Operating Systems ==\r\nSince sqlite-jdbc-3.6.19, the natively compiled SQLite engines will be used for the following operating systems:\r\n\r\n * Windows XP, Vista  (Windows, x86 architecture, x86_64)\r\n * Mac OS X 10.4 (Tiger), 10.5(Leopard), 10.6 SnowLeopard (for i386, x86_64, Intel CPU machines)\r\n * Linux i386 (Intel), amd64 (64-bit X86 Intel processor) \r\n\r\nIn the other OSs not listed above, the pure-java SQLite is used.\r\n\r\nIf you want to use the native library for your OS, [#BuildfromSource build the source from scratch].\r\n\r\n\r\n== Usage ==\r\n\r\n 1. Download sqlite-jdbc-(VERSION).jar from [http://www.xerial.org/maven/repository/artifact/org/xerial/sqlite-jdbc/], then append this jar file into your classpath. \r\n 1. load the JDBC driver org.sqlite.JDBC from your code. (see the example below)\r\n\r\n * Usage Example (Assuming sqlite-jdbc-(VERSION).jar is placed in the current directory)\r\n{{{\r\n> javac Sample.java\r\n> java -classpath \".;sqlite-jdbc-(VERSION).jar\" Sample   # in Windows\r\nor \r\n> java -classpath \".:sqlite-jdbc-(VERSION).jar\" Sample   # in Mac or Linux\r\nname = leo\r\nid = 1\r\nname = yui\r\nid = 2\r\n}}}\r\n * Sample.java\r\n{{{\r\n#!java\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\n\r\npublic class Sample\r\n{\r\n  public static void main(String[] args) throws ClassNotFoundException\r\n  {\r\n    // load the sqlite-JDBC driver using the current class loader\r\n    Class.forName(\"org.sqlite.JDBC\");\r\n    \r\n    Connection connection = null;\r\n    try\r\n    {\r\n      // create a database connection\r\n      connection = DriverManager.getConnection(\"jdbc:sqlite:sample.db\");\r\n      Statement statement = connection.createStatement();\r\n      statement.setQueryTimeout(30);  // set timeout to 30 sec.\r\n      \r\n      statement.executeUpdate(\"drop table if exists person\");\r\n      statement.executeUpdate(\"create table person (id integer, name string)\");\r\n      statement.executeUpdate(\"insert into person values(1, 'leo')\");\r\n      statement.executeUpdate(\"insert into person values(2, 'yui')\");\r\n      ResultSet rs = statement.executeQuery(\"select * from person\");\r\n      while(rs.next())\r\n      {\r\n        // read the result set\r\n        System.out.println(\"name = \" + rs.getString(\"name\"));\r\n        System.out.println(\"id = \" + rs.getInt(\"id\"));\r\n      }\r\n    }\r\n    catch(SQLException e)\r\n    {\r\n      // if the error message is \"out of memory\", \r\n      // it probably means no database file is found\r\n      System.err.println(e.getMessage());\r\n    }\r\n    finally\r\n    {\r\n      try\r\n      {\r\n        if(connection != null)\r\n          connection.close();\r\n      }\r\n      catch(SQLException e)\r\n      {\r\n        // connection close failed.\r\n        System.err.println(e);\r\n      }\r\n    }\r\n  }\r\n}\r\n}}}\r\n\r\nThe usage of SQLite-JDBC driver is the same with the original version. See http://www.zentus.com/sqlitejdbc/ for the general usage. For usage of JDBC, see  [http://www.xerial.org/trac/Xerial/wiki/WebApplication/JDBC my article] about JDBC.\r\n\r\n== How to Specify Database Files ==\r\nHere is an example to select a file C:\\work\\mydatabase.db (in Windows)\r\n{{{\r\n#!java\r\nConnection connection = DriverManager.getConnection(\"jdbc:sqlite:C:/work/mydatabase.db\");\r\n}}}\r\n\r\nA UNIX (Linux, Mac OS X, etc) file /home/leo/work/mydatabase.db\r\n{{{\r\n#!java\r\nConnection connection = DriverManager.getConnection(\"jdbc:sqlite:/home/leo/work/mydatabase.db\");\r\n}}}\r\n\r\n== How to Use Memory Databases ==\r\nSQLite supports on-memory database management, which does not create any database files. To use a memory database in your Java code, get the database connection as follows:\r\n{{{\r\n#!java\r\nConnection connection = DriverManager.getConnection(\"jdbc:sqlite::memory:\");\r\n}}}\r\n\r\n== How to test the running mode: Native or Pure-Java Version? ==\r\n{{{\r\n#!java\r\nimport org.sqlite.SQLiteJDBCLoader;\r\n\r\n// in your function ...\r\nvoid test()\r\n{\r\n  System.out.println(String.format(\"running in %s mode\", SQLiteJDBCLoader.isNativeMode() ? \"native\" : \"pure-java\"));\r\n}\r\n\r\n\r\n}}}\r\n\r\n== Run in Pure-Java mode ==\r\n\r\nIn some OS (e.g., old Linux kernel), loading native library causes JVM crashes. In this case, set sqlite.purejava=true JVM variable:\r\n{{{\r\n > java -Dsqlite.purejava=true -cp .:sqlite-jdbc-3.6.10.jar Sample\r\n}}}\r\n\r\nOr, set this System property before loading the JDBC driver:\r\n{{{\r\n  System.setProperty(\"sqlite.purejava\", \"true\");\r\n  Class.forName(\"org.sqlite.JDBC\");\r\n}}}\r\n\r\nIn this mode, sqlite-jdbc never uses native SQLite libraries.\r\n\r\n== How to use Online Backup and Restore Feature ==\r\n\r\n  * Take a backup of the whole database to \"backup.db\" file:\r\n{{{\r\n// Create a memory database\r\nConnection conn = DriverManager.getConnection(\"jdbc:sqlite:\");\r\n// Do some updates\r\nstmt.executeUpdate(\"create table sample(id, name)\");\r\nstmt.executeUpdate(\"insert into sample values(1, \\\"leo\\\")\");\r\nstmt.executeUpdate(\"insert into sample values(2, \\\"yui\\\")\");\r\n// Dump the database contents to a file\r\nstmt.executeUpdate(\"backup to backup.db\");\r\n}}}\r\n\r\n  * Restore the database from a backup file:\r\n{{{\r\n// Create a memory database\r\nConnection conn = DriverManager.getConnection(\"jdbc:sqlite:\");\r\n// Restore the database from a backup file\r\nStatement stat = conn.createStatement();\r\nstat.executeUpdate(\"restore from backup.db\");\r\n}}}\r\n\r\nAnother sample code is [http://code.google.com/p/xerial/source/browse/src/test/java/org/sqlite/BackupTest.java?repo=sqlite here].\r\n\r\n== How does SQLiteJDBC work? ==\r\n\r\nOur SQLite JDBC driver package (i.e., sqlite-jdbc-(VERSION).jar) contains three types of native SQLite libraries (sqlite-jdbc.dll, sqlite-jdbc.dylib, sqlite-jdbc.so), each of them is compiled for Windows, Mac OS and Linux. An appropriate native library file is automatically extracted into your OS's temporary folder, when your program loads \"org.sqlite.JDBC\" driver.\r\n\r\n== Source Codes ==\r\n * Mercurial Repository: http://code.google.com/p/xerial/source/checkout?repo=sqlite \r\n{{{\r\n$ hg clone https://sqlite.xerial.googlecode.com/hg/ sqlite-jdbc\r\n}}}\r\n\r\n * (obsolete) Subversion Repository: http://www.xerial.org/svn/project/XerialJ/trunk/sqlite-jdbc/\r\n   * source code snapshots for each version: http://www.xerial.org/svn/project/XerialJ/tags/sqlite-jdbc/\r\n   * version 3.6.11 snapshot: http://www.xerial.org/svn/project/XerialJ/tags/sqlite-jdbc/sqlite-jdbc-3.6.11\r\n   * web viewer: http://www.xerial.org/trac/Xerial/browser/XerialJ/trunk/sqlite-jdbc\r\n\r\n== License ==\r\n\r\nThis program follows the Apache License version 2.0 (http://www.apache.org/licenses/ )\r\nThat means:\r\n\r\nIt allows you to:\r\n    * freely download and use this software, in whole or in part, for personal, company internal, or commercial purposes;\r\n    * use this software in packages or distributions that you create.\r\n\r\nIt forbids you to:\r\n    * redistribute any piece of our originated software without proper attribution;\r\n    * use any marks owned by us in any way that might state or imply that we xerial.org endorse your distribution;\r\n    * use any marks owned by us in any way that might state or imply that you created this software in question.\r\n\r\nIt requires you to:\r\n    * include a copy of the license in any redistribution you may make that includes this software;\r\n    * provide clear attribution to us, xerial.org for any distributions that include this software\r\n\r\nIt does not require you to:\r\n    * include the source of this software itself, or of any modifications you may have made to it, in any redistribution you may assemble that includes it;\r\n    * submit changes that you make to the software back to this software (though such feedback is encouraged).\r\n\r\nSee License FAQ http://www.apache.org/foundation/licence-FAQ.html for more details.\r\n\r\n== Using SQLiteJDBC with Maven2 ==\r\nIf you are familiar with [http://maven.apache.org Maven2], add the following XML fragments into your pom.xml file. With those settings, your Maven will automatically download our SQLiteJDBC library into your local Maven repository, since our sqlite-jdbc libraries are synchronized with the [http://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/ Maven's central repository]. \r\n\r\n{{{\r\n#!xml\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>org.xerial</groupId>\r\n      <artifactId>sqlite-jdbc</artifactId>\r\n      <version>3.6.16</version>\r\n    </dependency>\r\n  </dependencies>\r\n}}}\r\n\r\n== Using SQLiteJDBC with Tomcat6 Web Server ==\r\nDo not include sqlite-jdbc-(version).jar in WEB-INF/lib folder of your web application package, since multiple web applications hosted by the same Tomcat server cannot load the sqlite-jdbc native library more than once. That is the specification of JNI (Java Native Interface). You will observe UnsatisfiedLinkError exception with the message \"no SQLite library found\".\r\n\r\nWork-around of this problem is to put sqlite-jdbc-(version).jar file into (TOMCAT_HOME)/lib directory, in which multiple web applications can share the same native library file (.dll, .dylib, .so) extracted from this sqlite-jdbc jar file.\r\n\r\nIf you are using Maven for your web application, set the dependency scope as 'provided', and manually put the SQLite JDBC jar file into (TOMCAT_HOME)/lib folder.\r\n{{{\r\n    <dependency>\r\n      <groupId>org.xerial</groupId>\r\n      <artifactId>sqlite-jdbc</artifactId>\r\n      <version>3.6.16</version>\r\n      <scope>provided</scope>\r\n    </dependency>\r\n}}}\r\n\r\n== Build from Source ==\r\n\r\nIf your OS is not supported, consider to build the [#SourceCodes source] from scratch. \r\n\r\n  * Install Java SDK (1.5 or higher) http://java.sun.com\r\n  * Install [http://mercurial.selenic.com/ Mercurial] (hg)\r\n  * Install Maven2 (2.0.7 or higher) http://maven.apache.org\r\n     * You need to set PATH variable so as to run mvn command. Here is an example setting for maven:\r\n{{{\r\nexport MAVEN_HOME=$HOME/local/maven-2.0.7\r\nexport PATH=$MAVEN_HOME/bin:$PATH\r\n}}}\r\n  * Clone the Mercurial repository \r\n{{{ \r\n hg clone https://sqlite.xerial.googlecode.com/hg/ sqlite-jdbc\r\n}}}\r\n  * (If necessary) set the JAVA_HOME environment variable as your JDK folder (e.g. /usr/java/jdk1.5.0_13), and PATH so that you can run the javac command.\r\n{{{\r\n > export JAVA_HOME=/usr/java/jdk1.5.0_13/; export PATH=$JAVA_HOME/bin:$PATH\r\n > javac -version\r\n javac 1.5.0_13\r\n}}}\r\n  * Type make in the sqlite-jdbc folder:\r\n{{{\r\n > make \r\n}}}\r\n  * A new SQLite JDBC jar file that additionally supports your OS will be generated as target/sqlite-jdbc-(version).jar\r\n\r\n=== Dependency Tests ===\r\n * Windows XP (32-bit)\r\n   * dependency check\r\n{{{\r\n> DUMPBIN /DEPENDENTS sqlitejdbc.dll\r\n\r\n  KERNEL32.dll\r\n  msvcrt.dll\r\n}}}\r\n * Mac OS X (10.4.10 Tiger ~ 10.5 Leopard)\r\n   * dependency check\r\n{{{\r\n> otool -L libsqlitejdbc.dylib\r\nlibsqlitejdbc.dylib:\r\n        build/Darwin-i386/libsqlitejdbc.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.9)\r\n}}}\r\n * Linux (glibc-2.5.12)\r\n   * Dependency check\r\n{{{\r\n> ldd libsqlitejdbc.so    \r\n        linux-gate.so.1 =>  (0x00b45000)\r\n        libc.so.6 => /lib/i686/nosegneg/libc.so.6 (0x002dd000)\r\n        /lib/ld-linux.so.2 (0x47969000)\r\n}}}\r\n\r\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 8.142578125,
          "content": "## How to Specify Database Files\n\nHere is an example to establishing a connection to a database file `C:\\work\\mydatabase.db` (in Windows)\n\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:C:/work/mydatabase.db\")) { /*...*/ }\n```\n\nOpening a UNIX (Linux, maxOS, etc.) file `/home/leo/work/mydatabase.db`\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:/home/leo/work/mydatabase.db\")) { /*...*/ }\n```\n\n## How to Use Memory or Temporary Databases\nSQLite supports in-memory databases, which do not create any database files. To use a memory database in your Java code, get the database connection as follows:\n\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite::memory:\")) { /*...*/ }\n```\n\nYou can create temporary database as follows:\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:\")) { /*...*/ }\n```\n\n## How to use Online Backup and Restore Feature\nTake a backup of the whole database to `backup.db` file:\n\n```java\ntry (\n    // Create a memory database\n    Connection conn = DriverManager.getConnection(\"jdbc:sqlite:\");\n    Statement stmt = conn.createStatement();\n) {\n    // Do some updates\n    stmt.executeUpdate(\"create table sample(id, name)\");\n    stmt.executeUpdate(\"insert into sample values(1, \\\"leo\\\")\");\n    stmt.executeUpdate(\"insert into sample values(2, \\\"yui\\\")\");\n    // Dump the database contents to a file\n    stmt.executeUpdate(\"backup to backup.db\");\n}\n```\n\nRestore the database from a backup file:\n```java\ntry (\n    // Create a memory database\n    Connection conn = DriverManager.getConnection(\"jdbc:sqlite:\");\n    // Restore the database from a backup file\n    Statement stat = conn.createStatement();\n) {\n    stat.executeUpdate(\"restore from backup.db\");\n}\n```\n\n## Creating BLOB data\n1. Create a table with a column of blob type: `create table T (id integer, data blob)`\n1. Create a prepared statement with `?` symbol: `insert into T values(1, ?)`\n1. Prepare a blob data in byte array (e.g., `byte[] data = ...`)\n1. `preparedStatement.setBytes(1, data)`\n1. `preparedStatement.execute()...`\n\n## Reading Database Files in classpaths or network (read-only)\nTo load db files that can be found from the class loader (e.g., db \nfiles inside a jar file in the classpath), \nuse `jdbc:sqlite::resource:` prefix. \n\nFor example, here is an example to access an SQLite DB file, `sample.db` \nin a Java package `org.yourdomain`:\n```java\ntry (Connection conn = DriverManager.getConnection(\"jdbc:sqlite::resource:org/yourdomain/sample.db\")) { /*...*/ }\n```\n\nIn addition, external DB resources can be used as follows:\n```java\ntry (Connection conn = DriverManager.getConnection(\"jdbc:sqlite::resource:http://www.xerial.org/svn/project/XerialJ/trunk/sqlite-jdbc/src/test/java/org/sqlite/sample.db\")) { /*...*/ }\n```\n\nTo access db files inside some specific jar file (in local or remote), \nuse the [JAR URL](http://java.sun.com/j2se/1.5.0/docs/api/java/net/JarURLConnection.html):\n```java\ntry (Connection conn = DriverManager.getConnection(\"jdbc:sqlite::resource:jar:http://www.xerial.org/svn/project/XerialJ/trunk/sqlite-jdbc/src/test/resources/testdb.jar!/sample.db\")) { /*...*/ }\n```\n\nDB files will be extracted to a temporary folder specified in `System.getProperty(\"java.io.tmpdir\")`.\n\n## Configure directory to extract native library\nsqlite-jdbc extracts a native library for your OS to the directory specified by `java.io.tmpdir` JVM property. To use another directory, set `org.sqlite.tmpdir` JVM property to your favorite path.\n\n## How to use a specific native library\nYou can use a specific version of the native library by setting the following JVM properties:\n```\n-Dorg.sqlite.lib.path=/path/to/folder\n-Dorg.sqlite.lib.name=your-custom.dll\n```\n\n## Override detected architecture\n\nIf the detected architecture is incorrect for your system, thus loading the wrong native library, you can override the value setting the following JVM property:\n```\n-Dorg.sqlite.osinfo.architecture=arm\n```\n\n## Configure Connections\n```java\nSQLiteConfig config = new SQLiteConfig();\n// config.setReadOnly(true);   \nconfig.setSharedCache(true);\nconfig.recursiveTriggers(true);\n// ... other configuration can be set via SQLiteConfig object\ntry (Connection conn = DriverManager.getConnection(\"jdbc:sqlite:sample.db\", config.toProperties())) { /*...*/ }\n```\n\n## How to Use Encrypted Databases\n*__Important: xerial/sqlite-jdbc does not support encryption out of the box, you need a special .dll/.so__*\n\nSQLite support encryption of the database via special drivers and a key. To use an encrypted database you need a driver which supports encrypted database via `pragma key` or `pragma hexkey`, e.g. SQLite SSE or SQLCipher. You need to specify those drivers via directly referencing the .dll/.so through:\n```\n-Dorg.sqlite.lib.path=.\n-Dorg.sqlite.lib.name=sqlite_cryption_support.dll\n```\n\nNow the only need to specify the password is via:\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:db.sqlite\", \"\", \"password\")) { /*...*/ }\n```\n\n### Binary Passphrase\nIf you need to provide the password in binary form, you have to specify how the provided .dll/.so needs it. There are two different modes available:\n\n#### SSE\nThe binary password is provided via `pragma hexkey='AE...'`\n\n#### SQLCipher\nThe binary password is provided via `pragma key=\"x'AE...'\"`\n\nYou set the mode at the connection string level:\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:db.sqlite?hexkey_mode=sse\", \"\", \"AE...\")) { /*...*/ }\n```\n\n## Generated keys\n\nSQLite has limited support to retrieve generated keys, using [last_insert_rowid](https://www.sqlite.org/c3ref/last_insert_rowid.html), with the following limitations:\n- a single ID can be retrieved, even if multiple rows were added or updated\n- it needs to be called right after the statement\n\nBy default the driver will eagerly retrieve the generated keys after each statement, which may impact performances.\n\nYou can disable the retrieval of generated keys in 3 ways:\n- via `SQLiteDataSource#setGetGeneratedKeys(false)`\n- via `SQLiteConnectionConfig#setGetGeneratedKeys(false)`:\n- using the pragma `jdbc.get_generated_keys`:\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite::memory:?jdbc.get_generated_keys=false\")) { /*...*/ }\n```\n\n## Explicit read only transactions (use with Hibernate)\n\nIn order for the driver to be compliant with Hibernate, it needs to allow setting the read only flag after a connection has been created.\n\nSQLite has a notion of \"auto-upgrading\" read-only transactions to read-write transactions. This can cause `SQLITE_BUSY` exceptions which are difficult to deal with in a JPA/Hibernate/Spring scenario.\n\nFor example:\n\n- open connection\n- query data <--- this uses a read-only transaction in SQLite by default\n- write data <--- this is risky as it promotes the transaction to read-write\n- commit\n\nThe approach taken is:\n\n- open transactions on demand\n- allow setting `readOnly` only if no statement has been executed yet\n- if `readOnly(false)` is received, then we _quit_ out of our transaction, and open a new transaction with `BEGIN IMMEDIATE`. This forces a global lock on the database, preventing `SQLITE_BUSY`.\n\nYou can activate explicit read only support in 2 ways:\n- via `SQLiteConfig#setExplicitReadOnly(true)`: \n```java\nSQLiteConfig config = new SQLiteConfig();\nconfig.setExplicitReadOnly(true);\n```\n- using the pragma `jdbc.explicit_readonly`:\n```java\ntry (Connection connection = DriverManager.getConnection(\"jdbc:sqlite::memory:?jdbc.explicit_readonly=true\")) { /*...*/ }\n```\n\n## How to use with Android\n\nAndroid expects JNI native libraries to be bundled differently than a normal Java application.\n\nYou will need to extract the native libraries from our jar (from `org/sqlite/native/Linux-Android`), and place them in the `jniLibs` directory:\n\n![android-studio-screenshot](./.github/README_IMAGES/android_jnilibs.png)\n\nThe name of directories in our jar and in Android Studio differ, here is a mapping table:\n\n| Jar directory | Android Studio directory |\n|---------------|--------------------------|\n| aarch64       | arm64-v8a                |\n| arm           | armeabi                  |\n| x86           | x86                      |\n| x86_64        | x86_64                   |\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0146484375,
          "content": "version=3.47.2\n"
        },
        {
          "name": "amalgamation_version.sh",
          "type": "blob",
          "size": 0.5810546875,
          "content": "#!/usr/bin/env bash\n# Used to generate the version for the amalgamation download zip.\n# https://www.sqlite.org/download.html#encoding\n# The version is encoded so that filenames sort in order of increasing version number when viewed using \"ls\".\n# For version 3.X.Y the filename encoding is 3XXYY00. For branch version 3.X.Y.Z, the encoding is 3XXYYZZ.\nversion=\"\"\ni=0\nexport IFS=\".\"\nfor num in $1; do\n\tif [ $i -gt 0 ]; then\n\t\tif [ $num -le 9 ]; then\n\t\t\teval num=0$num\n\t\tfi\n\tfi\n\teval version=$version$num\n\tlet i+=1\ndone\nunset IFS\nif [ $i -gt 3 ]; then\n  echo \"$version\"\nelse\n  echo \"$version\"00\nfi\n"
        },
        {
          "name": "archive",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "jreleaser.yml",
          "type": "blob",
          "size": 1.7841796875,
          "content": "project:\n  versionPattern: CUSTOM\n  copyright: Taro L. Saito\nrelease:\n  github:\n    owner: xerial\n    discussionCategoryName: Announcements\n    tagName: '{{projectVersion}}'\n    changelog:\n      links: true\n      formatted: ALWAYS\n      format: '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}🚨 {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'\n      preset: 'conventional-commits'\n      skipMergeCommits: true\n      excludeLabels:\n        - 'chore'\n      labelers:\n        - label: 'chore'\n          title: '[maven-release-plugin] prepare'\n          order: 1\n        - label: 'perf'\n          title: 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'\n          order: 120\n      categories:\n        - title: '🏎 Perf'\n          key: 'perf'\n          labels:\n            - 'perf'\n          order: 25\n      hide:\n        uncategorized: true\n        contributors:\n          - '[bot]'\n          - 'github-actions'\n          - 'GitHub'\n      extraProperties:\n        categorizeScopes: true\n    issues:\n      enabled: true\n      comment: '🎉 This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'\n      applyMilestone: 'ALWAYS'\n      label:\n        name: 'released'\n        description: 'Issue has been released'\n        color: '#ededed'\nfiles:\n  artifacts:\n    - path: 'target/{{projectName}}-{{projectVersion}}.jar'"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven-eclipse.xml",
          "type": "blob",
          "size": 0.3046875,
          "content": "<project default=\"copy-resources\">\r\n  <target name=\"init\"/>\r\n  <target name=\"copy-resources\" depends=\"init\">\r\n    <copy todir=\"target/classes/META-INF/maven/org.xerial/sqlite-jdbc\" filtering=\"false\">\r\n      <fileset dir=\".\" includes=\"VERSION|LICENSE*\" excludes=\"**/*.java\"/>\r\n    </copy>\r\n  </target>\r\n</project>"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 18.5068359375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.xerial</groupId>\n    <artifactId>sqlite-jdbc</artifactId>\n    <version>3.47.2.1-SNAPSHOT</version>\n    <name>SQLite JDBC</name>\n    <description>SQLite JDBC library</description>\n    <url>https://github.com/xerial/sqlite-jdbc</url>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>5.11.4</junit.version>\n        <surefire.version>3.5.2</surefire.version>\n        <archunit.version>1.3.0</archunit.version>\n        <graalvm.version>24.1.1</graalvm.version>\n        <java9.sourceDirectory>${project.basedir}/src/main/java9</java9.sourceDirectory>\n    </properties>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <id>leo</id>\n            <name>Taro L. Saito</name>\n            <email>leo@xerial.org</email>\n            <organization>Xerial Project</organization>\n            <roles>\n                <role>Architect</role>\n                <role>Project Manager</role>\n                <role>Chief Developer</role>\n            </roles>\n            <timezone>+9</timezone>\n        </developer>\n    </developers>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>org/**</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>META-INF/native-image/**</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <targetPath>META-INF/services</targetPath>\n                <includes>\n                    <include>java.sql.Driver</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n                <includes>\n                    <include>sqlite-jdbc.properties</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>${basedir}</directory>\n                <targetPath>META-INF/maven/${project.groupId}/${project.artifactId}</targetPath>\n                <includes>\n                    <include>VERSION</include>\n                    <include>LICENSE*</include>\n                </includes>\n            </resource>\n        </resources>\n\n        <testResources>\n            <testResource>\n                <directory>src/test/java</directory>\n                <excludes>\n                    <exclude>**/*.java</exclude>\n                </excludes>\n            </testResource>\n            <testResource>\n                <directory>src/test/resources</directory>\n            </testResource>\n        </testResources>\n\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-help-plugin</artifactId>\n                <version>3.5.1</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n                <configuration>\n                    <release>8</release>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>java9-compile</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                        <configuration>\n                            <release>9</release>\n                            <compileSourceRoots>\n                                <compileSourceRoot>${java9.sourceDirectory}</compileSourceRoot>\n                            </compileSourceRoots>\n                            <multiReleaseOutput>true</multiReleaseOutput>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-report-plugin</artifactId>\n                <version>${surefire.version}</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${surefire.version}</version>\n            </plugin>\n\n            <plugin>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.4.2</version>\n                <configuration>\n                    <!-- Pick the MANIFEST generated by the bundle plugin -->\n                    <archive>\n                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n                        <manifestEntries>\n                            <Multi-Release>true</Multi-Release>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <configuration>\n                    <instructions>\n                        <Bundle-SymbolicName>org.xerial.sqlite-jdbc;singleton:=true</Bundle-SymbolicName>\n                        <Import-Package>\n                            *;resolution:=optional\n                        </Import-Package>\n                    </instructions>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.27.2</version>\n                <configuration>\n                    <java>\n                        <toggleOffOn/>\n                        <googleJavaFormat>\n                            <version>1.11.0</version>\n                            <style>AOSP</style>\n                        </googleJavaFormat>\n                    </java>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.7.0</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jreleaser</groupId>\n                <artifactId>jreleaser-maven-plugin</artifactId>\n                <version>1.16.0</version>\n                <configuration>\n                    <configFile>jreleaser.yml</configFile>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.18.0</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-enforcer-plugin</artifactId>\n                <version>3.5.0</version>\n                <executions>\n                    <execution>\n                        <id>enforce-maven</id>\n                        <goals>\n                            <goal>enforce</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <requireMavenVersion>\n                                    <version>3.2.5</version>\n                                </requireMavenVersion>\n                                <requireJavaVersion>\n                                    <version>11</version>\n                                </requireJavaVersion>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.felix</groupId>\n                    <artifactId>maven-bundle-plugin</artifactId>\n                    <version>5.1.9</version>\n                    <extensions>true</extensions>\n                    <executions>\n                        <execution>\n                            <!-- Need to have MANIFEST.MF in place before\n                                  packaging, so unit-tests will work -->\n                            <phase>process-classes</phase>\n                            <goals>\n                                <goal>manifest</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n    <scm>\n        <connection>scm:git:git://github.com/xerial/sqlite-jdbc.git</connection>\n        <developerConnection>scm:git:git@github.com:xerial/sqlite-jdbc.git</developerConnection>\n        <url>https://github.com/xerial/sqlite-jdbc</url>\n    </scm>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n    <profiles>\n        <profile>\n            <id>release</id>\n            <activation>\n                <property>\n                    <name>performRelease</name>\n                    <value>true</value>\n                </property>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>3.2.7</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>3.11.2</version>\n                        <configuration>\n                            <sourcepath>src/main/java</sourcepath>\n                            <additionalOptions>-Xdoclint:none</additionalOptions>\n                            <additionalJOption>-Xdoclint:none</additionalJOption>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>attach-javadocs</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>3.3.1</version>\n                        <executions>\n                            <execution>\n                                <id>attach-sources</id>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n\n        <profile>\n            <id>native</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.graalvm.buildtools</groupId>\n                        <artifactId>native-maven-plugin</artifactId>\n                        <version>0.10.4</version>\n                        <extensions>true</extensions>\n                        <executions>\n                            <execution>\n                                <id>test-native-default</id>\n                                <goals>\n                                    <goal>test</goal>\n                                </goals>\n                                <phase>integration-test</phase>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <fallback>false</fallback>\n                            <verbose>true</verbose>\n                            <buildArgs>\n                                <!-- required to allow junit-pioneer to compile with strict image heap enabled -->\n                                <arg>--initialize-at-build-time=org.junitpioneer.jupiter.issue.IssueExtensionExecutionListener</arg>\n                            </buildArgs>\n                        </configuration>\n                    </plugin>\n\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <version>${surefire.version}</version>\n                        <configuration>\n                            <excludes>\n                                <!--  Cannot run in native mode, classes under test cannot be found, class path is empty  -->\n                                <exclude>**/MultipleClassLoaderTest.java</exclude>\n                            </excludes>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n\n            <dependencies>\n                <dependency>\n                    <groupId>com.tngtech.archunit</groupId>\n                    <artifactId>archunit-junit5</artifactId>\n                    <version>${archunit.version}</version>\n                    <scope>test</scope>\n                    <exclusions>\n                        <!--\n                        ArchUnit tests don't run in native-image tests.\n                        Remove the ArchUnit JUnit Engine entirely from the dependency graph thus from the ServiceLoader.\n                        -->\n                        <exclusion>\n                            <groupId>com.tngtech.archunit</groupId>\n                            <artifactId>archunit-junit5-engine</artifactId>\n                        </exclusion>\n                    </exclusions>\n                </dependency>\n            </dependencies>\n        </profile>\n        <profile>\n            <id>native-exported</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.graalvm.buildtools</groupId>\n                        <artifactId>native-maven-plugin</artifactId>\n                        <configuration>\n                            <buildArgs combine.children=\"append\">\n                                <buildArg>-Dorg.sqlite.lib.exportPath=${project.build.directory}</buildArg>\n                            </buildArgs>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.36</version>\n            <optional>true</optional>\n        </dependency>\n        <!--\n        This dependency makes compilation on non-GraalVM versions possible.\n        The dependency should however never actually be required by end-users because if they require\n        GraalVM features, they will be provided by the JDK they are using.\n        -->\n        <dependency>\n            <groupId>org.graalvm.sdk</groupId>\n            <artifactId>nativeimage</artifactId>\n            <version>${graalvm.version}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>3.27.2</version>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <!--\n                    assertj bundles an outdated version of byte-buddy.\n                    This exclusion this makes sure the one junit brings in is used.\n                    -->\n                    <groupId>net.bytebuddy</groupId>\n                    <artifactId>byte-buddy</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.junit-pioneer</groupId>\n            <artifactId>junit-pioneer</artifactId>\n            <version>2.3.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>5.15.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.tngtech.archunit</groupId>\n            <artifactId>archunit-junit5</artifactId>\n            <version>${archunit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!--   Required by archunit     -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.13</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n"
        },
        {
          "name": "settings.xml",
          "type": "blob",
          "size": 0.3515625,
          "content": "<settings>\n <servers>\n  <server>\n   <id>sonatype-nexus-staging</id>\n   <username>${env.SONATYPE_USERNAME}</username>\n   <password>${env.SONATYPE_PASSWORD}</password>\n  </server>\n  <server>\n   <id>sonatype-nexus-snapshots</id>\n   <username>${env.SONATYPE_USERNAME}</username>\n   <password>${env.SONATYPE_PASSWORD}</password>\n  </server>\n </servers>\n</settings>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}