{
  "metadata": {
    "timestamp": 1736708492671,
    "page": 682,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simple-android-framework/android_design_patterns_analysis",
      "stars": 2688,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 12.00390625,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.458984375,
          "content": "# Android源码设计模式分析开源项目\n\n## 简述\n设计模式已经成为开发人员最重要的技能之一，它们能够让你优雅、简单、灵活地解决开发中遇到的设计难题，让你的软件系统具有更好的可扩展性、灵活性，在特定场景之下让你的软件系统实现拥抱变化。但设计模式运用在Android上的书籍并不多，Android本身又是开源，那么剖析Android源码中的设计模式必定是我们学习设计模式的一个非常好的渠道。我们在大型系统中学习设计模式的运用，领悟它的设计思考、灵活运用，既学到了设计模式本身，也深入Android源码了解了它的一些核心原理。      \n \n## 一期成果 ( 2015.03.21 )\n|     模式名    |    作者    |\n|    -----    |    ------   |\n|    [单例模式](singleton/mr.simple)   \t | [Mr.Simple](https://github.com/bboyfeiyu)|  \n|    [Builder模式](builder/mr.simple)  \t | [Mr.Simple](https://github.com/bboyfeiyu)|  \n|    [外观模式](facade/elsdnwn)   \t     | [elsdnwn](https://github.com/elsdnwn)、[Mr.Simple](https://github.com/bboyfeiyu)|   \n|    [模板方法](template-method/mr.simple)   | [Mr.Simple](https://github.com/bboyfeiyu) | \n|    [策略模式](strategy/gkerison)      | [GKerison](https://github.com/GKerison) | \n|    [代理模式](proxy/singwhatiwanna)   | [singwhatiwanna](https://github.com/singwhatiwanna) |  \n|    [迭代器模式](iterator/haoxiqiang) | [Haoxiqiang](https://github.com/Haoxiqiang)|  \n|    [责任链模式](chain-of-responsibility/AigeStudio) | [AigeStudio](https://github.com/AigeStudio)|  \n|    [命令模式](command/lijunhuayc) | [lijunhuayc](https://github.com/lijunhuayc)|  \n|    [桥接模式](bridge/shen0834) | [shen0834](https://github.com/shen0834)|  \n|    [原型模式](prototype/mr.simple) | [Mr.Simple](https://github.com/bboyfeiyu)| \n\n非常感谢做出分享的同学， 此处应该有掌声!!!      \n\n## 更多模式\n[Android源码设计模式分析开源项目-开发分支](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis)。\n\n## 参考资料\n* [GOF的设计模式：可复用面向对象软件的基础](http://item.jd.com/10057319.html)\n* [设计模式之禅](http://item.jd.com/11414555.html)\n* [Java与模式](http://item.jd.com/10094286.html)\n* [java-design-patterns](https://github.com/iluwatar/java-design-patterns)\n* [Java之美[从菜鸟到高手演变]之设计模式](http://blog.csdn.net/zhangerqing/article/details/8194653)\n"
        },
        {
          "name": "abstract-factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "android_design_pattern_analysis.md",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "chain-of-responsibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "command",
          "type": "tree",
          "content": null
        },
        {
          "name": "composite",
          "type": "tree",
          "content": null
        },
        {
          "name": "decorator",
          "type": "tree",
          "content": null
        },
        {
          "name": "facade",
          "type": "tree",
          "content": null
        },
        {
          "name": "factory-method",
          "type": "tree",
          "content": null
        },
        {
          "name": "flyweight",
          "type": "tree",
          "content": null
        },
        {
          "name": "interpreter",
          "type": "tree",
          "content": null
        },
        {
          "name": "iterator",
          "type": "tree",
          "content": null
        },
        {
          "name": "mediator",
          "type": "tree",
          "content": null
        },
        {
          "name": "memento",
          "type": "tree",
          "content": null
        },
        {
          "name": "observer",
          "type": "tree",
          "content": null
        },
        {
          "name": "oop-principles",
          "type": "tree",
          "content": null
        },
        {
          "name": "prototype",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "singleton",
          "type": "tree",
          "content": null
        },
        {
          "name": "state",
          "type": "tree",
          "content": null
        },
        {
          "name": "strategy",
          "type": "tree",
          "content": null
        },
        {
          "name": "template-method",
          "type": "tree",
          "content": null
        },
        {
          "name": "template.md",
          "type": "blob",
          "size": 1.67578125,
          "content": "Android设计模式源码解析之${模式名} \n====================================\n> 本文为 [Android 设计模式源码解析](https://github.com/simple-android-framework-exchange/android_design_patterns_analysis) 中 ${模式名} 分析  \n> Android系统版本： ${系统版本号，例如 4.2.1}         \n> 分析者：[${分析者}](${分析者 Github 地址})，分析状态：未完成，校对者：[Mr.Simple](https://github.com/bboyfeiyu)，校对状态：未开始   \n\n\n`复制一份到自己的项目文件夹下，然后根据自己项目替换掉 ${} 内容，删掉本行及上面两行。`   \n\n该任务不仅要用java写出该模式的一个简单示例，还有分析该模式在Android源码中的应用，可以参考[Mr.Simple的单例模式](singleton/mr.simple/readme.md)、[Mr.Simple的观察者模式](observer/mr.simple/readme.md)。\n \n\n## 1. 模式介绍  \n \n###  模式的定义\n`模式的一句话定义`\n\n\n### 模式的使用场景\n \n \n\n## 2. UML类图\n`这里是该设计模式的经典UML图` \n\n### 角色介绍\n`对UML图中的各个角色进行介绍`\n\n\n\n\n## 3. 模式的简单实现\n###  简单实现的介绍\n`自己实现一个小型模式案例，通过这个案例让读者了解这个模式的一般应用`\n\n### 实现源码\n`上述案例的源码实现`\n\n\n### 总结\n`对上述的简单示例进行总结说明`\n\n  \n\n\n## Android源码中的模式实现\n`分析源码中的模式实现，列出相关源码，以及使用该模式原因等`  \n\n\n \n\n## 4. 杂谈\n该模式的优缺点以及自己的一些感悟，非所有项目必须。  \n\n\n\n`写完相关内容之后到开发群告知管理员，管理员安排相关人员进行审核，审核通过之后即可。`  \n\n"
        },
        {
          "name": "visitor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}