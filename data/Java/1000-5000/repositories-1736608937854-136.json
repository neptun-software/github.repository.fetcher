{
  "metadata": {
    "timestamp": 1736608937854,
    "page": 136,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/DeepLinkDispatch",
      "stars": 4389,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1669921875,
          "content": "# ant\nbin\nbuild\ngen\nout\nlib\n\n# intellij\n.idea\n*.iml\n*.hprof\n\n# eclipse\n.classpath\n.project\n.settings\n.DS_Store\nlocal.properties\n.gradle\n\n# deepLinkDispatch\ndld_match_*.idx"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.3505859375,
          "content": "For newer releases, check the Github [releases tab](https://github.com/airbnb/DeepLinkDispatch/releases).\n\n# 2.0.1 (06/06/2016)\n\n* [PR 102](https://github.com/airbnb/DeepLinkDispatch/pull/102) Require a non-zero length param value\n\n# 2.0.0 (06/04/2016)\n\n* [PR 71](https://github.com/airbnb/DeepLinkDispatch/pull/71) Fix: Allow quotes in param value\n* [PR 77](https://github.com/airbnb/DeepLinkDispatch/pull/77) New: Add support for activities launched with `startActivityForResult()` by forwarding results back to the caller.\n* [PR 84](https://github.com/airbnb/DeepLinkDispatch/pull/84) Fix: Do not fail on packages with uppercase\n* [PR 87](https://github.com/airbnb/DeepLinkDispatch/pull/87) New: `DeepLinkDelegate` and `@DeepLinkActivity` No longer require an Activity dedicated to deep link handling\n\n# 1.5.0 (11/16/2015)\n\n* [PR 64](https://github.com/airbnb/DeepLinkDispatch/pull/64) Fixed deeplinkdispatch project group\nand version\n* [PR 60](https://github.com/airbnb/DeepLinkDispatch/pull/60) Internal cleanup\n* [PR 62](https://github.com/airbnb/DeepLinkDispatch/pull/62) Prevent parameters regex from matching\nstrings containing \"/\"\n* [PR 59](https://github.com/airbnb/DeepLinkDispatch/pull/59) Allow URI query parameters with square\nbrackets.\n* [PR 57](https://github.com/airbnb/DeepLinkDispatch/pull/57) Fixes scheme setter in DeepLinkUri\nBuilder\n* [PR 56](https://github.com/airbnb/DeepLinkDispatch/pull/56) Broadcast intents via\nLocalBroadcastManager instead of global.\n* [PR 54](https://github.com/airbnb/DeepLinkDispatch/pull/54) Support templating params as 'host' of\nUri\n* [PR 50](https://github.com/airbnb/DeepLinkDispatch/pull/50) Prevent `@DeepLink` annotation on\nnon static methods.\n\n# 1.4.0 (10/12/2015)\n\n* [PR 49](https://github.com/airbnb/DeepLinkDispatch/pull/49) URL schemes with a number in them are\nseen as malformed\n\n* [PR 46](https://github.com/airbnb/DeepLinkDispatch/pull/46) Removes `@DeepLinks` annotation. We\ncan achieve the same with just `@DeepLink`\n\n* [PR 45](https://github.com/airbnb/DeepLinkDispatch/pull/45) Fixes a `NullPointerException` in\n`DeepLinkEntry` when given an invalid Uri.\n\n* [PR 35](https://github.com/airbnb/DeepLinkDispatch/pull/35)\n* [PR 39](https://github.com/airbnb/DeepLinkDispatch/pull/39)\n\nMore relaxed path matching Regex. DeepLinkDispatch now accepts paths with `#!+%~$,.` characters.\n\n# 1.3.0 (07/23/2015)\n\n* [PR 26](https://github.com/airbnb/DeepLinkDispatch/pull/26) Failure/Success callbacks are now\nfired via a Broadcast that you can subscribe to using a Broadcast receiver instead of having the\napplication implement an interface.\n\n* [PR 29](https://github.com/airbnb/DeepLinkDispatch/pull/29) Fixes bug where `@DeepLinks` was not\nbeing added as a supported annotation type\n\n* [PR 30](https://github.com/airbnb/DeepLinkDispatch/pull/30) Apply a stricter regex when scanning\nDeepLinkRegistry to prevent early return from matching.\n\n# 1.2.0 (07/10/2015)\n\n* Breaking change: Uri scheme is now required when declaring deep links with `@DeepLink` and\n`@DeepLinks`. This allows for multiple schemes to be handled (eg.: myapp:// and http://\n\n* Compilation will now fail if DeepLinkDispatch finds an invalid Uri.\n\n# 1.1.0 (06/20/2015)\n\n* Specify paths with one URL parameters instead of a host and path parameter.\n* Add hooks in the Application class to handle successful and unsuccessful deep linking.\n* Use JavaPoet instead of JavaWriter.\n\n# 1.0.1\n\n* Initial version."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6494140625,
          "content": "# DeepLinkDispatch is an Open Source Project\n\n(borrowed from the excellent [node-levelup CONTRIBUTING.md](https://github.com/rvagg/node-levelup/blob/master/CONTRIBUTING.md)\n\n-----------------------------------------\n\n## What?\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\n## Rules\n\nThere are a few basic ground-rules for contributors:\n\n1. **No `--force` pushes** or modifying the Git history in any way.\n1. **Non-master branches** ought to be used for ongoing work.\n1. **External API changes and significant modifications** ought to be subject to an **internal pull-request** to solicit feedback from other contributors.\n1. Internal pull-requests to solicit feedback are *encouraged* for any other non-trivial contribution but left to the discretion of the contributor.\n1. Contributors should attempt to adhere to the prevailing code-style.\n1. Please follow the [Google Java Code Style Guide](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html). You can import the [XML scheme](https://code.google.com/p/google-styleguide/source/browse/trunk/intellij-java-google-style.xml) and import it into Android Studio by copying it into the ``~/Library/Preferences/AndroidStudio/codestyles`` directory.\n\n## Releases\n\nDeclaring formal releases remains the prerogative of the project maintainer.\n\n## Changes to this arrangement\n\nThis is an experiment and feedback is welcome! This document may also be subject to pull-requests or changes by contributors where you believe you have something valuable to add or change.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.41796875,
          "content": "# DeepLinkDispatch\n\n[![Build Status](https://travis-ci.org/airbnb/DeepLinkDispatch.svg)](https://travis-ci.org/airbnb/DeepLinkDispatch)\n\nDeepLinkDispatch provides a declarative, annotation-based API to define application deep links.\n\nYou can register an `Activity` to handle specific deep links by annotating it with `@DeepLink` and a URI.\nDeepLinkDispatch will parse the URI and dispatch the deep link to the appropriate `Activity`, along\nwith any parameters specified in the URI.\n\n### Example\n\nHere's an example where we register `SampleActivity` to pull out an ID from a deep link like\n`example://example.com/deepLink/123`. We annotated with `@DeepLink` and specify there will be a\nparameter that we'll identify with `id`.\n\n```java\n@DeepLink(\"example://example.com/deepLink/{id}\")\npublic class SampleActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Intent intent = getIntent();\n    if (intent.getBooleanExtra(DeepLink.IS_DEEP_LINK, false)) {\n      Bundle parameters = intent.getExtras();\n      String idString = parameters.getString(\"id\");\n      // Do something with idString\n    }\n  }\n}\n```\n\n### Multiple Deep Links\n\nSometimes you'll have an Activity that handles several kinds of deep links:\n\n```java\n@DeepLink({\"foo://example.com/deepLink/{id}\", \"foo://example.com/anotherDeepLink\"})\npublic class MainActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Intent intent = getIntent();\n    if (intent.getBooleanExtra(DeepLink.IS_DEEP_LINK, false)) {\n      Bundle parameters = intent.getExtras();\n      String idString = parameters.getString(\"id\");\n      // Do something with idString\n    }\n  }\n}\n```\n\n### DeepLinkHandler Annotations\n\nYou can annotate a Kotlin `object` that is extending `com.airbnb.deeplinkdispatch.handler.DeepLinkHandler`\nwith an `@DeepLink` annotation.\n\n```kotlin\n@DeepLink(\"foo://example.com/handlerDeepLink/{param1}?query1={queryParameter}\")\nobject ProjectDeepLinkHandler : DeepLinkHandler<ProjectDeepLinkHandlerArgs>() {\n    override fun handleDeepLink(parameters: ProjectDeepLinkHandlerArgs) {\n        /**\n         * From here any internal/3rd party navigation framework can be called the provided args.\n         */\n    }\n}\n\ndata class ProjectDeepLinkHandlerArgs(\n    @DeeplinkParam(\"param1\", DeepLinkParamType.Path) val number: Int,\n    @DeeplinkParam(\"query1\", DeepLinkParamType.Query) val flag: Boolean?,\n)\n```\n\nDeepLinkDispatch will then call the `handleDeepLink` function in your handler with the path placeholders\nand queryParameters converted into an instance of the specified type class.\n\nQuery parameter conversion is supported for nullable and non nullable versions of `Boolean`,`Int`,\n`Long`,`Short`,`Byte`,`Double`,`Float` and `String` as well as the same types in Java. For other\ntypes see: [Type conversion](#type-conversion)\n\nThis will give compile time safety, as all placeholders and query parameters specified in the template\ninside the `@DeepLink` annotation must be present in the arguments class for the processor to pass.\nThis is also true the other way around as all fields in the arguments class must be annotated and must\nbe present in the template inside the annotation.\n\nFrom this function you can now call into any internal or 3rd party navigation system\nwithout any Intent being fired at all and with type safety for your arguments.\n\n*Note:* Even though they must be listed in the template and annotation, argument values annotated\nwith `DeepLinkParamType.Query` can be null as they are allowed to not be present in the matched url.\n\n#### Type conversion\n\nIf you want to support the automatic conversions of types other than `Boolean`,`Int`,`Long`,`Short`,`Byte`,\n`Double`,`Float` and `String` in deep link argument classes you can add support by adding your own type\nconverters in the `DeepLinkDelegate` class that you are instantiating.\n\nType conversion is handled via a lambda that you can set in the `DeepLinkDelegate` constructor.\n\nAll type converters you want to add get added to an instance of `TypeConverters` which then in turn\ngets returned by the lambda. This way you can add type converters on the fly while the app is running\n(e.g. if you just downloaded a dynamic feature which supports additional types).\n\nThere is an example of this in the `sample` app for this. Here is a brief overview:\n\n```java\nTypeConverters typeConverters = new TypeConverters();\ntypeConverters.put(ColorDrawable.class, value -> {\n  switch (value.toLowerCase()) {\n    case \"red\":\n      return new ColorDrawable(0xff0000ff);\n  }\n});\n\nFunction0<TypeConverters> typeConvertersLambda = () -> typeConverters;\n\nDeepLinkDelegate deepLinkDelegate = new DeepLinkDelegate(\n  ...\n  typeConvertersLambda,\n  ...);\n```\n\n#### Type conversion errors\n\nIf a url parameter cannot be converted to the specified type, the system will -- by default -- set the\nvalue to `0` or `null`, depending on if the type is nullable. However this behavior can be overwritten\nby implementing a lambda `Function3<DeepLinkUri, Type, String, Integer>` and setting it to\n`typeConversionErrorNullable` and/or `typeConversionErrorNonNullable` via the `DeepLinkDelegate`\nconstructor. When called, the lambda will let you know about the matching `DeepLinkUri` template, the\ntype and the value that was tried to type convert so you can also log these events.\n\n### Method Annotations\n\nYou can also annotate any `public static` method with `@DeepLink`. DeepLinkDispatch will call that\nmethod to create the `Intent` and will use it when starting your `Activity` via that registered deep link:\n\n```java\n@DeepLink(\"foo://example.com/methodDeepLink/{param1}\")\npublic static Intent intentForDeepLinkMethod(Context context) {\n  return new Intent(context, MainActivity.class)\n      .setAction(ACTION_DEEP_LINK_METHOD);\n}\n```\n\nIf you need access to the `Intent` extras, just add a `Bundle` parameter to your method, for example:\n\n```java\n@DeepLink(\"foo://example.com/methodDeepLink/{param1}\")\npublic static Intent intentForDeepLinkMethod(Context context, Bundle extras) {\n  Uri.Builder uri = Uri.parse(extras.getString(DeepLink.URI)).buildUpon();\n  return new Intent(context, MainActivity.class)\n      .setData(uri.appendQueryParameter(\"bar\", \"baz\").build())\n      .setAction(ACTION_DEEP_LINK_METHOD);\n}\n```\n\nIf you're using Kotlin, make sure you also annotate your method with `@JvmStatic`. `companion objects` will *not work*, so you can use an `object declaration` instead:\n\n```kotlin\nobject DeeplinkIntents {\n  @JvmStatic \n  @DeepLink(\"https://example.com\")\n  fun defaultIntent(context: Context, extras: Bundle): Intent {\n    return Intent(context, MyActivity::class.java)\n  }\n}\n```\n\nIf you need to customize your `Activity` backstack, you can return a `TaskStackBuilder` instead of an `Intent`. DeepLinkDispatch will call that method to create the `Intent` from the `TaskStackBuilder` last `Intent` and use it when starting your `Activity` via that registered deep link:\n\n```java\n@DeepLink(\"http://example.com/deepLink/{id}/{name}\")\npublic static TaskStackBuilder intentForTaskStackBuilderMethods(Context context) {\n  Intent detailsIntent =  new Intent(context, SecondActivity.class).setAction(ACTION_DEEP_LINK_COMPLEX);\n  Intent parentIntent =  new Intent(context, MainActivity.class).setAction(ACTION_DEEP_LINK_COMPLEX);\n  TaskStackBuilder  taskStackBuilder = TaskStackBuilder.create(context);\n  taskStackBuilder.addNextIntent(parentIntent);\n  taskStackBuilder.addNextIntent(detailsIntent);\n  return taskStackBuilder;\n}\n```\n\nIf, depending on app state or parameter values you have to either just start an `Intent` or a\n`TaskStackBuilder`, you can return an instance of `DeepLinkMethodResult`, which can have any.\nThe system will pick whichever value is not null but will prefer the `TaskStackBuilder` if both\nare not null.\n\n```java\n@DeepLink(\"dld://host/methodResult/intent\")\npublic static DeepLinkMethodResult intentOrTaskStackBuilderViaDeeplinkMethodResult(Context context) {\n  TaskStackBuilder taskStackBuilder = null;\n  Intent intent = null;\n  if (someState) {\n    Intent detailsIntent = new Intent(context, SecondActivity.class);\n    Intent parentIntent = new Intent(context, MainActivity.class);\n    taskStackBuilder = TaskStackBuilder.create(context);\n    taskStackBuilder.addNextIntent(parentIntent);\n    taskStackBuilder.addNextIntent(detailsIntent);\n  } else {\n    intent = new Intent(context, MainActivity.class);\n  }\n  return new DeepLinkMethodResult(intent, taskStackBuilder);\n}\n```\n\n### Query Parameters\n\nQuery parameters are parsed and passed along automatically, and are retrievable like any other parameter. For example, we could retrieve the query parameter passed along in the URI `foo://example.com/deepLink?qp=123`:\n\n```java\n@DeepLink(\"foo://example.com/deepLink\")\npublic class MainActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Intent intent = getIntent();\n    if (intent.getBooleanExtra(DeepLink.IS_DEEP_LINK, false)) {\n      Bundle parameters = intent.getExtras();\n      if (parameters != null && parameters.getString(\"qp\") != null) {\n        String queryParameter = parameters.getString(\"qp\");\n        // Do something with the query parameter...\n      }\n    }\n  }\n}\n```\n\n### Configurable path segment placeholders\n\nConfigurable path segment placeholders allow your to change configured elements of the URL path at runtime without changing the source of the library where the deeplink is defined. That way a library can be used in multiple apps that are still uniquely addressable via deeplinks. They are defined by encapsulating an id like this `<some_id>` and are only allowed as a path segment (between two slashes. `/`:\n\n```java\n@DeepLink(\"foo://cereal.com/<type_of_cereal>/nutritional_info\")\npublic static Intent intentForNutritionalDeepLinkMethod(Context context) {\n  return new Intent(context, MainActivity.class)\n      .setAction(ACTION_DEEP_LINK_METHOD);\n}\n```\n\nIf you do this you do have to provide a mapping (at runtime) for which values are allowed for creating a match. This is done when you new the `DeeplinkDelegate` class like:\n\n```java\n@DeepLinkHandler({ AppDeepLinkModule.class, LibraryDeepLinkModule.class })\npublic class DeepLinkActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // Configure a map for configurable placeholders if you are using any. If you do a mapping\n    // has to be provided for that are used\n    Map configurablePlaceholdersMap = new HashMap();\n    configurablePlaceholdersMap.put(\"type_of_cereal\", \"obamaos\");\n    // DeepLinkDelegate, LibraryDeepLinkModuleRegistry and AppDeepLinkModuleRegistry\n    // are generated at compile-time.\n    DeepLinkDelegate deepLinkDelegate = \n        new DeepLinkDelegate(new AppDeepLinkModuleRegistry(), new LibraryDeepLinkModuleRegistry(), configurablePlaceholdersMap);\n    // Delegate the deep link handling to DeepLinkDispatch. \n    // It will start the correct Activity based on the incoming Intent URI\n    deepLinkDelegate.dispatchFrom(this);\n    // Finish this Activity since the correct one has been just started\n    finish();\n  }\n}\n```\n\nThis app will now match the Url `foo://cereal.com/obamaos/nutritional_info` to the `intentForNutritionalDeepLinkMethod` method for that app.\nIf you build another app and set `type_of_cereal` to `captnmaccains` that apps version of the `intentForNutritionalDeepLinkMethod` would be called when when opening `foo://cereal.com/captnmaccains/nutritional_info`\n\nIf you are using configurable path segment placeholders, a mapping has to be provided for every placeholder used. If you are missing one the app will crash at runtime.\n\n#### Empty configurable path segment placeholders mapping\n\nA mapping can be to an empty string, in that case the element is just ignored. In the above example if `configurablePlaceholdersMap.put(\"type_of_cereal\", \"\");` is defined `foo://cereal.com/nutritional_info` would map to calling the `intentForNutritionalDeepLinkMethod` method. An empty configurable path segment placeholder is not allowed as the last path element in an URL!\n\n### Callbacks\n\nYou can optionally register a `BroadcastReceiver` to be called on any incoming deep link into your\napp. DeepLinkDispatch will use `LocalBroadcastManager` to broadcast an `Intent` with any success\nor failure when deep linking. The intent will be populated with these extras:\n\n* `DeepLinkHandler.EXTRA_URI`: The URI of the deep link.\n* `DeepLinkHandler.EXTRA_SUCCESSFUL`: Whether the deep link was fired successfully.\n* `DeepLinkHandler.EXTRA_ERROR_MESSAGE`: If there was an error, the appropriate error message.\n\nYou can register a receiver to receive this intent. An example of such a use is below:\n\n```java\npublic class DeepLinkReceiver extends BroadcastReceiver {\n  private static final String TAG = \"DeepLinkReceiver\";\n\n  @Override public void onReceive(Context context, Intent intent) {\n    String deepLinkUri = intent.getStringExtra(DeepLinkHandler.EXTRA_URI);\n    if (intent.getBooleanExtra(DeepLinkHandler.EXTRA_SUCCESSFUL, false)) {\n      Log.i(TAG, \"Success deep linking: \" + deepLinkUri);\n    } else {\n      String errorMessage = intent.getStringExtra(DeepLinkHandler.EXTRA_ERROR_MESSAGE);\n      Log.e(TAG, \"Error deep linking: \" + deepLinkUri + \" with error message +\" + errorMessage);\n    }\n  }\n}\n\npublic class YourApplication extends Application {\n  @Override public void onCreate() {\n    super.onCreate();\n    IntentFilter intentFilter = new IntentFilter(DeepLinkHandler.ACTION);\n    LocalBroadcastManager.getInstance(this).registerReceiver(new DeepLinkReceiver(), intentFilter);\n  }\n}\n```\n\n### Custom Annotations\n\nYou can reduce the repetition in your deep links by creating custom annotations that provide\ncommon prefixes that are automatically applied to every class or method annotated with your custom\nannotation. A popular use case for this is with web versus app deep links:\n\n```java\n// Prefix all app deep link URIs with \"app://airbnb\"\n@DeepLinkSpec(prefix = { \"app://airbnb\" })\n// When using tools like Dexguard we require these annotations to still be inside the .dex files\n// produced by D8 but because of this bug https://issuetracker.google.com/issues/168524920 they\n// are not so we need to mark them as RetentionPolicy.RUNTIME.\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AppDeepLink {\n  String[] value();\n}\n```\n\nYou can use placeholders (like in paths) in the scheme and host section of prefixes listed in the\n`DeepLinkSpec`. e.g. if you want to match both http and https you can define it like this:\n\n```java\n// Match all deeplinks which a scheme staring with \"http\".\n@DeepLinkSpec(prefix = { \"http{url_scheme_suffix}://airbnb.com\")\n@Retention(RetentionPolicy.CLASS)\npublic @interface WebDeepLink {\n  String[] value();\n}\n```\n\nYou will get the value of `url_scheme_suffix` which -- in this case would be \"\" for http and \"s\"\nwhen https is used -- in the extras bundle of your annotated method. If you want to limit which\nvalues are accepted, you can do that directly within the placeholder by defining it with allowed\nvalues like this: `http{url_scheme_suffix(|s)}://airbnb.com`. In this case valid values would be\n`\"\"` and `\"s\"` (`http` and `https`). Values are pipe(`|`) separated, there can only be one `(...)`\nsection per placeholder and it has to be at the end of the placeholder.\n\n```java\n// Match all deeplinks which a scheme staring with \"http\".\n@DeepLinkSpec(prefix = { \"http{url_scheme_suffix(|s)}://{prefix(|www.)}airbnb.{domain(com|de)}\")\n@Retention(RetentionPolicy.CLASS)\npublic @interface WebDeepLink {\n  String[] value();\n}\n```\n\nThe above code would match URLs that start with `http` or `https`, are for `airbnb.com` or\n`airbnb.de` or `www.airbnb.com` and `www.airbnb.de`. They would e.g. not match `airbnb.ro`.\n\n```java\n// This activity is gonna handle the following deep links:\n// \"app://airbnb/view_users\"\n// \"http://airbnb.com/users\"\n// \"http://airbnb.com/user/{id}\"\n// \"https://airbnb.com/users\"\n// \"https://airbnb.com/user/{id}\"\n@AppDeepLink({ \"/view_users\" })\n@WebDeepLink({ \"/users\", \"/user/{id}\" })\npublic class CustomPrefixesActivity extends AppCompatActivity {\n    //...\n}\n```\n\nThis can be very useful if you want to use it with country prefxes in hostnames e.g.\n\n```java\n// Match all deeplinks that have a scheme starting with http and also match any deeplink that\n// starts with .airbnb.com as well as ones that are only airbnb.com\n@DeepLinkSpec(prefix = { \"http{url_scheme_suffix}://{country_prefix}.airbnb.com\",\n \"http{url_scheme_suffix}://airbnb.com\")\n@Retention(RetentionPolicy.CLASS)\npublic @interface WebDeepLink {\n  String[] value();\n}\n```\n\nwhich saves you from defining a lot prefixes.\n\n## Usage\n\nAdd to your project `build.gradle` file (Latest version is [![DeeplinkDispatch version](https://badge.fury.io/gh/airbnb%2FDeepLinkDispatch.svg)](https://badge.fury.io/gh/airbnb%2FDeepLinkDispatch)\n): \n```groovy\ndependencies {\n  implementation 'com.airbnb:deeplinkdispatch:x.x.x'\n}\n```\n\nDeeplinkDispatch supports three ways to run the annotation processor dependin on which one you choose\nthe setup is slightly different.\n\n### KSP\n\nWhen using Kotlin we strongly suggest to use KSP as it can bring major speed improvements.\n\nTo run the processor via KSP you first have to apply the KSP plugin. Add the dependency to the\n`build.gradle` file of your main project:\n\n```groovy\nbuildscript {\n\n    apply from: rootProject.file(\"dependencies.gradle\")\n\n    repositories {\n        google()\n        gradlePluginPortal()\n    }\n    dependencies {\n        classpath \"com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:<ksp-version>\"\n    }\n}\n```\n\nApply the plugin in the `build.gradle` file of the project you want to use it:\n\n```groovy\nplugins {\n  id(\"com.google.devtools.ksp\")\n}\n```\n\nand don't forget the dependency to the annotation procesor and DeepLinkDispatch itself:\n\n```groovy\ndependencies {\n  implementation 'com.airbnb:deeplinkdispatch:x.x.x'\n  ksp 'com.airbnb:deeplinkdispatch-processor:x.x.x'\n}\n```\n\n**Note:** When using KSP (you have `ksp 'com.airbnb:deeplinkdispatch-processor:x.x.x'` in your dependencies) at least one Kotlin source file *must* be present in the project or no output will be generated!\n\nAs an example the main `sample` app is set up using KSP.\n\n### Kapt\n\nIf your project is already setup for Kotlin the only thing you have to add is the plugin:\n\n```groovy\nplugins {\n  id(\"kotlin-kapt\")\n}\n```\n\nand don't forget the dependency to the annotation procesor and DeepLinkDispatch itself:\n\n```groovy\ndependencies {\n  implementation 'com.airbnb:deeplinkdispatch:x.x.x'\n  kapt 'com.airbnb:deeplinkdispatch-processor:x.x.x'\n}\n```\n\nAs an example the `sample-kapt-library` is set up using Kapt\n\n### Java annotation processor\n\nJust add the dependency to DeepLinkDispatch and to the annotation processor:\n\n```groovy\ndependencies {\n  implementation 'com.airbnb:deeplinkdispatch:x.x.x'\n  annotationProcessor 'com.airbnb:deeplinkdispatch-processor:x.x.x'\n}\n```\n\nAs an example the `sample-library` is set up using the Java annotation processor\n\nWhen this is done, create your deep link module(s) (**new on DeepLinkDispatch v3**). For every class you annotate with `@DeepLinkModule`, DeepLinkDispatch will generate a \"Registry\" class, which contains a registry of all your `@DeepLink` annotations.\n\n```java\n/** This will generate a AppDeepLinkModuleRegistry class */\n@DeepLinkModule\npublic class AppDeepLinkModule {\n}\n```\n\n**Optional**: If your Android application contains multiple modules (eg. separated Android library projects), you'll want to add one `@DeepLinkModule` class for every module in your application, so that DeepLinkDispatch can collect all your annotations in one \"Registry\" class per module:\n\n```java\n/** This will generate a LibraryDeepLinkModuleRegistry class */\n@DeepLinkModule\npublic class LibraryDeepLinkModule {\n}\n```\n\n\nCreate any `Activity` (eg. `DeepLinkActivity`) with the scheme you'd like to handle in your `AndroidManifest.xml` file (using `foo` as an example):\n\n```xml\n<activity\n    android:name=\"com.example.DeepLinkActivity\"\n    android:theme=\"@android:style/Theme.NoDisplay\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"foo\" />\n    </intent-filter>\n</activity>\n```\n\nAnnotate your `DeepLinkActivity` with `@DeepLinkHandler` and provide it a list of `@DeepLinkModule` annotated class(es):\n\n```java\n@DeepLinkHandler({ AppDeepLinkModule.class, LibraryDeepLinkModule.class })\npublic class DeepLinkActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // DeepLinkDelegate, LibraryDeepLinkModuleRegistry and AppDeepLinkModuleRegistry\n    // are generated at compile-time.\n    DeepLinkDelegate deepLinkDelegate = \n        new DeepLinkDelegate(new AppDeepLinkModuleRegistry(), new LibraryDeepLinkModuleRegistry());\n    // Delegate the deep link handling to DeepLinkDispatch. \n    // It will start the correct Activity based on the incoming Intent URI\n    deepLinkDelegate.dispatchFrom(this);\n    // Finish this Activity since the correct one has been just started\n    finish();\n  }\n}\n```\n\nof \n\n```java\n@DeepLinkHandler({ AppDeepLinkModule.class, LibraryDeepLinkModule.class })\npublic class DeepLinkActivity extends Activity {\n  @Override protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // Configure a map for configurable placeholders if you are using any. If you do a mapping\n    // has to be provided for that are used\n    Map configurablePlaceholdersMap = new HashMap();\n    configurablePlaceholdersMap.put(\"your_values\", \"what should match\");\n    // DeepLinkDelegate, LibraryDeepLinkModuleRegistry and AppDeepLinkModuleRegistry\n    // are generated at compile-time.\n    DeepLinkDelegate deepLinkDelegate = \n        new DeepLinkDelegate(new AppDeepLinkModuleRegistry(), new LibraryDeepLinkModuleRegistry(), configurablePlaceholdersMap);\n    // Delegate the deep link handling to DeepLinkDispatch. \n    // It will start the correct Activity based on the incoming Intent URI\n    deepLinkDelegate.dispatchFrom(this);\n    // Finish this Activity since the correct one has been just started\n    finish();\n  }\n}\n```\n\nif you use configurable path segments\n\n### Upgrading\n\nWhen upgrading to 5.x+ you may experience some breaking API changes. Read about them [here](UPGRADING.md).\n\n### Incremental annotation processing\n\nYou must update your build.gradle to opt into incremental annotation processing. When enabled, all custom deep link annotations must be registered in the build.gradle (pipe (`|`) separated), otherwise they will be silently ignored.\n\nExamples of this configuration are as follows: \n\n**Standard**\n```groovy\njavaCompileOptions {\n  annotationProcessorOptions {\n    arguments = [\n      'deepLink.incremental': 'true',\n      'deepLink.customAnnotations': 'com.airbnb.AppDeepLink|com.airbnb.WebDeepLink'\n    ]\n  }\n}\n```\n\n**Kotlin kapt**\n```groovy\nkapt {\n  arguments {\n    arg(\"deepLink.incremental\", \"true\")\n    arg(\"deepLink.customAnnotations\", \"com.airbnb.AppDeepLink|com.airbnb.WebDeepLink\")\n  }\n}\n```\n\n**KSP**\n\nKSP is always incremental and you always have to provide the list of `deepLink.customAnnotation` if\nyou have any or they will not be processed.\n\n```groovy\nksp {\n  arg(\"deepLink.incremental\", \"true\")\n  arg(\"deepLink.customAnnotations\", \"com.airbnb.AppDeepLink|com.airbnb.WebDeepLink\")\n}\n```\n\n### Performance\n\nStarting with v5 DeeplinkDispatch is designed to be very fast in resolving deep links even if there are a lot of them. To ensure we do not regress from this benchmark tests using [`androidx.benchmark`](https://developer.android.com/studio/profile/benchmark#top_of_page) were added.\n\nIt is testing the `ScaleTestActivity` in the `sample-benchmarkable-library` which has 2000 deep links. For those on a Pixel 2 running Android 11 we expect the following results:\n\n```text\nStarted running tests\n\nbenchmark:        11,716 ns DeeplinkBenchmarks.match1\nbenchmark:       139,375 ns DeeplinkBenchmarks.match500\nbenchmark:     2,163,907 ns DeeplinkBenchmarks.newRegistry\nbenchmark:        23,035 ns DeeplinkBenchmarks.match1000\nbenchmark:       152,969 ns DeeplinkBenchmarks.match1500\nbenchmark:       278,906 ns DeeplinkBenchmarks.match2000\nbenchmark:       162,604 ns DeeplinkBenchmarks.createResultDeeplink1\nbenchmark:        11,774 ns DeeplinkBenchmarks.parseDeeplinkUrl\nTests ran to completion.\n```\n\nAs you can see it takes us about 2ms to create the registry with 2000 entries. A lookup can be done in sub 1ms usually and `createResult`, which includes the lookup for the `match1` case plus actually calling the method that was annotated, can be done in under 0.2ms.\n\nThe performance tests can be run from Android Studio or via gradle by running `./gradlew sample-benchmark:connectedCheck` (with a device connected). The outoput can be found in `sample-benchmark/build/outputs/connected_android_test_additional_output/`.\n\n### Notes\n\n* Starting with DeepLinkDispatch v3, you have to **always** provide your own `Activity` class and annotate it with `@DeepLinkHandler`. It's no longer automatically generated by the annotation processor.\n* Intent filters may only contain a single data element for a URI pattern. Create separate intent filters to capture additional URI patterns.\n* Please refer to the [sample app](https://github.com/airbnb/DeepLinkDispatch/blob/master/sample/src/main/java/com/airbnb/deeplinkdispatch/sample/DeepLinkActivity.java) for an example of how to use the library.\n\nSnapshots of the development version are available in\n[Sonatype's `snapshots` repository](https://oss.sonatype.org/content/repositories/snapshots/).\n\nTo access the snapshots add this to your `build.gradle` file:\n```groovy\nrepositories {\n    maven {\n        url \"https://oss.sonatype.org/content/repositories/snapshots/\"\n    }\n}\n```\n\n\n### Generated deep links Documentation\n\nYou can tell DeepLinkDispatch to generate text a document with all your deep link annotations, which you can use for further processing and/or reference.\nNote: Passing a fully qualified file path string as an argument to any compilation task will cause the cache key to be non-relocateable from one machine to another.\nIn order to do that, add to your `build.gradle` file:\n```groovy\ntasks.withType(JavaCompile) {\n  options.compilerArgs << \"-AdeepLinkDoc.output=${buildDir}/doc/deeplinks.txt\"\n}\n```\n\nWhen using Kotlin Kapt\n```groovy\nkapt {\n  arguments {\n    arg(\"deepLinkDoc.output\", \"${buildDir}/doc/deeplinks.txt\")\n  }\n}\n```\n\nand if you are using KSP\n```groovy\nksp {\n  arg(\"deepLinkDoc.output\", \"${buildDir}/doc/deeplinks.txt\")\n}\n```\n\nThe documentation will be generated in the following format:\n```\n* {DeepLink1}\\n|#|\\n[Description part of javadoc]\\n|#|\\n{ClassName}#[MethodName]\\n|##|\\n\n* {DeepLink2}\\n|#|\\n[Description part of javadoc]\\n|#|\\n{ClassName}#[MethodName]\\n|##|\\n\n```\n\nYou can also generate the output in a much more readable Markdown format by naming the output file `*.md` (e.g. `deeplinks.md`). Make sure that your Markdown viewer understands tables.\n\n### Matching and edge cases\n\nDeeplink Dispatchs matching algo is designed to match non ambiguous structured URI style data very fast but because of the supported featureset it comes with some edge cases.\n\nWe organize the URI data (of all URIs that are in your app) in a tree structure that is created per module. The URI is dissolved into that tree structure and inserted into that graph at build time. We do not allow duplicates inside the tree at built time and having them will fail the build. However this is currently only guaranteed for each module not across modules.)\n\n![Example of a DeeplinkDispagch match graph](images/dld_graph.png)\n\nAt runtime we traverse the graph for each module to find the correct action to undertake. The algo just walks the input URI until the last element and *never* backtracks inside the graph. The children of each element are checked for matches in alphabetic order:  \n\n`elements without any variable element -> elements containing placeholders -> elements that are a configurable path segment`\n\n#### Edge cases\n\n* Duplicates can exist between modules. Only the first one found will be reported as a match. Modules are processed in the order the module registries are listed in your `DeepLinkDelegate` creation.\n* Placeholders can lead to duplications at runtime e.g. `dld://airbnb/dontdupeme` will match both `@Deeplink('dld://airbnb/{qualifier}dupeme')` and `@Deeplink('dld://airbnb/dontdupeme')`. They can both be defined in the same module as they are not identical. If they are defined in the same module the algo will match `@Deeplink('dld://airbnb/dontdupeme')` as it would check litereal matches before looking at elements containing placeholders. If they are not defined in the same module the one defined in the registry listed first in `DeeplinkDelegate` will be matched.\n* Configurable path segments can lead to duplicates. e.g. `dld://airbnb/obamaos/cereal` will match both  `@Deeplink('dld://airbnb/obamaos/cereal/')` and `@Deeplink('dld://airbnb/<brand>/cereal')` if `<brand>` is configured to be `obamaos`. The same match rules as mentioned before apply here.\n* Configurable path segments can have empty values e.g. `<brand>` can be set to `\"\"` in the previous example. Which would then match `dld://airbnb/cereal`. If a deeplink like that is defined already somewhere else the same match rules as mentioned before apply to which match actually gets found.\n* Because of limitations of the algo the last path element (the item behind the last slash) cannot  be a configurable path segment with it's value set to `\"\"`. Currently the system will allow you to do this but will not correctly match in that case.\n\n## Proguard/R8 Rules\n\nThe Proguard/R8 rules mandatory for teh lib are defined in the [proguard-rules.pro](deeplinkdispatch/proguard-rules.pro) in `deeplinkdispatch`. However\nthey are already included via `consumerProguardFiles` so there is nothing you have to do to include them.\n\nPlease note however that you must add your own Proguard/R8 rules to keep Custom annotations you have used. For example:\n\n```\n-keep @interface your.package.path.deeplink.<annotation class name>\n-keepclasseswithmembers class * {\n    @your.package.path.deeplink.<annotation class name> <methods>;\n}\n```\n\n## Testing the sample app\n\nUse adb to launch deep links (in the terminal type: `adb shell`).\n\nThis fires a standard deep link. Source annotation `@DeepLink(\"dld://example.com/deepLink\")`\n\n`am start -W -a android.intent.action.VIEW -d \"dld://example.com/deepLink\" com.airbnb.deeplinkdispatch.sample`\n\nThis fires a deep link associated with a method, and also passes along a path parameter. Source annotation `@DeepLink(\"dld://methodDeepLink/{param1}\")`\n\n`am start -W -a android.intent.action.VIEW -d \"dld://methodDeepLink/abc123\" com.airbnb.deeplinkdispatch.sample`\n\nYou can include multiple path parameters (also you don't have to include the sample app's package name). Source annotation `@DeepLink(\"http://example.com/deepLink/{id}/{name}\")`\n\n`am start -W -a android.intent.action.VIEW -d \"http://example.com/deepLink/123abc/myname\"`\n\n\nNote it is possible to call directly `adb shell am ...` however this seems to miss the URI sometimes so better to call from within shell.\n\n## License\n\n```\nCopyright 2015-2020 Airbnb, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.7802734375,
          "content": "Publishing a new Main release to Maven\n========\n\n1. Change the version in `gradle.properties` to a non-SNAPSHOT version based on Major.Minor.Patch naming scheme\n2. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n3. `git tag -a X.Y.X -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n4. Add your sonatype login information under gradle properties mavenCentralUsername and mavenCentralPassword in your local user gradle.properties file\n5. Make sure you have a gpg signing key configured (https://vanniktech.github.io/gradle-maven-publish-plugin/central/#secrets)\n6. Run `./gradlew publishAllPublicationsToMavenCentral` to build the artifacts and publish them to maven\n7. Update the `gradle.properties` to the next SNAPSHOT version.\n8. `git commit -am \"Prepare next development version.\"`\n9. `git push && git push --tags`\n10. Merge to master and create a new release through the Github web UI with release notes\n\nPublishing a release to an internal repository\n========\n\nTo publish an internal release to an Artifactory repository:\n\n1. Set credential values for ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD in your local gradle.properties\n2. Set values for ARTIFACTORY_RELEASE_URL (and optionally ARTIFACTORY_SNAPSHOT_URL if you are publishing a snapshot)\n3. /gradlew publishAllPublicationsToAirbnbArtifactoryRepository -PdoNotSignRelease=true\n4. \"-PdoNotSignRelease=true\" is optional, but we don't need to sign artifactory releases and this allows everyone to publish without setting up a gpg key\n\nIf you need to publish to a different repository, look at the configuration in 'publishing.gradle'\nto see how to configure additional repositories.\n\nMaven Local Installation\n=======================\n\nIf testing changes locally, you can install to mavenLocal via `./gradlew publishToMavenLocal`\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 0.6484375,
          "content": "# Upgrading\n\nWhen ugrading to a newer version of DeepLink Dispatch the following notes should be taken into account.\n\n## To v5.x\n\n* The concept of a `Loader` was renamed to `Registry`. e.g. all the generated `*ModuleLoader` classes will become `*ModuleRegistry` classes after the update. If you reference those you need to update all references.\n* Several (mostly internal) classes (e.g. `com.airbnb.deeplinkdispatch.Parser`) were removed, if you referenced them you need to change your code.\n* Several (mostly internal) classes (e.g. `com.airbnb.deeplinkdispatch.SchemeHostAndPath`) have a different interface, if you were using them you need to adopt your code.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.3603515625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n\n    apply from: rootProject.file(\"dependencies.gradle\")\n\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url \"https://oss.sonatype.org/service/local/repositories/snapshots/content/\" }\n    }\n    dependencies {\n        classpath deps.androidPlugin\n        classpath deps.kotlinGradlePlugin\n        classpath deps.gradleMavenPublishPlugin\n        classpath deps.benchmarkGradlePlugin\n        // Dokka is needed on classpath for vanniktech publish plugin\n        classpath deps.dokkaPlugin\n        classpath deps.kspGradlePlugin\n        classpath deps.ktlintGradlePlugin\n    }\n}\n\nallprojects {\n    apply from: rootProject.file(\"dependencies.gradle\")\n\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\n    kotlinOptions {\n        allWarningsAsErrors = true\n    }\n}\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\n"
        },
        {
          "name": "checkstyle.xml",
          "type": "blob",
          "size": 4.7080078125,
          "content": "<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\"\n    \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n\n<module name=\"Checker\">\n    <module name=\"NewlineAtEndOfFile\"/>\n    <module name=\"FileLength\"/>\n    <module name=\"FileTabCharacter\"/>\n\n    <!-- Trailing spaces -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"\\s+$\"/>\n        <property name=\"message\" value=\"Line has trailing spaces.\"/>\n    </module>\n\n    <!-- Checks for consecutive blank lines -->\n    <module name=\"RegexpMultiline\">\n        <property name=\"format\" value=\"^[ \\t\\r]*\\n[ \\t\\r]*$\"/>\n        <property name=\"message\" value=\"Consecutive blank lines.\"/>\n    </module>\n\n    <!-- Checks for Size Violations.                    -->\n    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n    <module name=\"LineLength\">\n        <property name=\"max\" value=\"100\"/>\n    </module>\n    <!--<module name=\"MethodLength\"/>-->\n    <!--module name=\"ParameterNumber\"/-->\n\n    <module name=\"TreeWalker\">\n        <!-- Checks for Javadoc comments.                     -->\n        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n        <!--module name=\"JavadocMethod\"/-->\n        <!--module name=\"JavadocType\"/-->\n        <!--module name=\"JavadocVariable\"/-->\n        <!--module name=\"JavadocStyle\"/-->\n\n\n        <!-- Checks for Naming Conventions.                  -->\n        <!-- See http://checkstyle.sf.net/config_naming.html -->\n        <module name=\"ConstantName\"/>\n        <module name=\"LocalFinalVariableName\"/>\n        <module name=\"LocalVariableName\"/>\n        <module name=\"MemberName\"/>\n        <module name=\"MethodName\"/>\n        <module name=\"PackageName\"/>\n        <module name=\"ParameterName\"/>\n        <module name=\"StaticVariableName\"/>\n        <module name=\"TypeName\"/>\n\n\n        <!-- Checks for imports                              -->\n        <!-- See http://checkstyle.sf.net/config_import.html -->\n        <module name=\"AvoidStarImport\"/>\n        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n        <module name=\"RedundantImport\"/>\n        <module name=\"UnusedImports\">\n            <property name=\"processJavadoc\" value=\"true\"/>\n        </module>\n\n\n        <!-- Checks for whitespace                               -->\n        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n        <module name=\"GenericWhitespace\"/>\n        <module name=\"EmptyForIteratorPad\"/>\n        <module name=\"MethodParamPad\"/>\n        <module name=\"NoWhitespaceAfter\">\n            <property name=\"tokens\" value=\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS\"/>\n        </module>\n        <module name=\"NoWhitespaceBefore\"/>\n        <module name=\"OperatorWrap\"/>\n        <module name=\"ParenPad\"/>\n        <module name=\"TypecastParenPad\"/>\n        <module name=\"WhitespaceAfter\"/>\n        <module name=\"WhitespaceAround\"/>\n\n\n        <!-- Modifier Checks                                    -->\n        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n        <module name=\"ModifierOrder\"/>\n        <module name=\"RedundantModifier\"/>\n\n\n        <!-- Checks for blocks. You know, those {}'s         -->\n        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n        <!--module name=\"AvoidNestedBlocks\"/-->\n        <!--module name=\"EmptyBlock\"/-->\n        <module name=\"LeftCurly\"/>\n        <!--module name=\"NeedBraces\"/-->\n        <module name=\"RightCurly\"/>\n\n\n        <!-- Checks for common coding problems               -->\n        <!-- See http://checkstyle.sf.net/config_coding.html -->\n        <!--module name=\"AvoidInlineConditionals\"/-->\n        <module name=\"CovariantEquals\"/>\n        <module name=\"EmptyStatement\"/>\n        <!--<module name=\"EqualsAvoidNull\"/>-->\n        <module name=\"EqualsHashCode\"/>\n        <!--module name=\"HiddenField\"/-->\n        <module name=\"IllegalInstantiation\"/>\n        <!--module name=\"InnerAssignment\"/-->\n        <!--module name=\"MagicNumber\"/-->\n        <module name=\"MissingSwitchDefault\"/>\n        <module name=\"SimplifyBooleanExpression\"/>\n        <module name=\"SimplifyBooleanReturn\"/>\n\n        <!-- Checks for class design                         -->\n        <!-- See http://checkstyle.sf.net/config_design.html -->\n        <!--module name=\"DesignForExtension\"/-->\n        <!--module name=\"FinalClass\"/-->\n        <!--module name=\"HideUtilityClassConstructor\"/-->\n        <module name=\"InterfaceIsType\"/>\n        <!--module name=\"VisibilityModifier\"/-->\n\n\n        <!-- Miscellaneous other checks.                   -->\n        <!-- See http://checkstyle.sf.net/config_misc.html -->\n        <module name=\"ArrayTypeStyle\"/>\n        <!--module name=\"FinalParameters\"/-->\n        <!--module name=\"TodoComment\"/-->\n        <module name=\"UpperEll\"/>\n    </module>\n</module>\n"
        },
        {
          "name": "deeplinkdispatch-base",
          "type": "tree",
          "content": null
        },
        {
          "name": "deeplinkdispatch-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "deeplinkdispatch",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.gradle",
          "type": "blob",
          "size": 3.07421875,
          "content": "def versions = [\n    kotlinVersion                : '1.8.10',\n    appCompatVersion             : '1.4.1',\n    localBroadcastManagerVersion : '1.1.0',\n    roboelectricVersion          : '4.9',\n    benchmarkVersion             : '1.0.0',\n    compileTestingVersion        : '1.5.0',\n    kspVersion                   : '1.8.10-1.0.9',\n    xProcessorVersion            : '2.6.0-alpha01',\n    mockkVersion                 : '1.12.3',\n    ktlintGradlePluginVersion    : '3.8.0',\n    androidXTestingVersion       : '1.4.0'\n]\n\next.versions = versions\next.androidConfig = [\n    agpVersion                          : '7.4.0',\n    compileSdkVersion                   : 32,\n    minSdkVersion                       : 16,\n    targetSdkVersion                    : 30\n]\n\next.deps = [\n    autoCommon               : \"com.google.auto:auto-common:1.0\",\n    androidPlugin            : \"com.android.tools.build:gradle:$androidConfig.agpVersion\",\n    appCompat                : \"androidx.appcompat:appcompat:$versions.appCompatVersion\",\n    localBroadcastManager    : \"androidx.localbroadcastmanager:localbroadcastmanager:$versions.localBroadcastManagerVersion\",\n    kotlinGradlePlugin       : \"org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion\",\n    javaPoet                 : 'com.squareup:javapoet:1.13.0',\n    jsr305                   : 'com.google.code.findbugs:jsr305:3.0.2',\n    okio                     : 'com.squareup.okio:okio:3.0.0',\n    androidXAnnotations      : 'androidx.annotation:annotation:1.3.0',\n    // https://vanniktech.github.io/gradle-maven-publish-plugin/\n    gradleMavenPublishPlugin : 'com.vanniktech:gradle-maven-publish-plugin:0.22.0',\n    dokkaPlugin              : 'org.jetbrains.dokka:dokka-gradle-plugin:1.6.10',\n    ksp                      : \"com.google.devtools.ksp:symbol-processing-api:$versions.kspVersion\",\n    kspGradlePlugin          : \"com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:$versions.kspVersion\",\n    xProcessor               : \"androidx.room:room-compiler-processing:$versions.xProcessorVersion\",\n    ktlintGradlePlugin       : \"org.jmailen.gradle:kotlinter-gradle:$versions.ktlintGradlePluginVersion\",\n\n    // Testing\n    androidxTestCore         : \"androidx.test:core:$versions.androidXTestingVersion\",\n    junit                    : 'junit:junit:4.13.2',\n    assertJ                  : \"org.assertj:assertj-core:3.22.0\",\n    roboelectric             : \"org.robolectric:robolectric:$versions.roboelectricVersion\",\n    mockk                    : \"io.mockk:mockk:$versions.mockkVersion\",\n    compileTesting           : \"com.github.tschuchortdev:kotlin-compile-testing:$versions.compileTestingVersion\",\n    compileTestingKsp        : \"com.github.tschuchortdev:kotlin-compile-testing-ksp:$versions.compileTestingVersion\",\n    android                  : 'com.google.android:android:4.1.1.4',\n    benchmark                : \"androidx.benchmark:benchmark-junit4:$versions.benchmarkVersion\",\n    benchmarkGradlePlugin    : \"androidx.benchmark:benchmark-gradle-plugin:$versions.benchmarkVersion\",\n    kotlinReflect            : \"org.jetbrains.kotlin:kotlin-reflect:$versions.kotlinVersion\",\n]\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.162109375,
          "content": "VERSION_NAME=6.3.0-SNAPSHOT\nGROUP=com.airbnb\nPOM_URL=https://github.com/airbnb/deeplinkdispatch\nPOM_SCM_URL=https://github.com/airbnb/deeplinkdispatch\nPOM_DESCRIPTION=Library designed to handle deep linking in an Android application.\nPOM_SCM_CONNECTION=scm:https://github.com/airbnb/DeepLinkDispatch.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:airbnb/DeepLinkDispatch.git\nPOM_LICENSE_NAME=The Apache Software License, Version 2.0\nPOM_LICENSE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENSE_DIST=repo\nPOM_DEVELOPER_ID=airbnb\nPOM_DEVELOPER_NAME=Airbnb\nPOM_DEVELOPER_EMAIL=android@airbnb.com\norg.gradle.daemon=false\nandroid.useAndroidX=true\n# With the default memory size Gradle gets out of memory issues when building, so we have to increase it\n# Dokka fails without a larger metaspace https://github.com/Kotlin/dokka/issues/1405\norg.gradle.jvmargs=-Xms128m -Xmx3g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:MaxMetaspaceSize=1g\n# See https://r8.googlesource.com/r8/+/refs/heads/main/compatibility-faq.md\nandroid.enableR8.fullMode=true\n\n# Publishing configuration for vanniktech/gradle-maven-publish-plugin\nSONATYPE_HOST=DEFAULT\nSONATYPE_AUTOMATIC_RELEASE=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.927734375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "publishing.gradle",
          "type": "blob",
          "size": 1.3681640625,
          "content": "// Sets up publishing of release artifacts.\n// Note: Keep this script in sync across all airbnb open source projects.\napply plugin: 'com.vanniktech.maven.publish'\n\n\n// https://vanniktech.github.io/gradle-maven-publish-plugin/other/\npublishing {\n    repositories {\n        maven {\n            // The \"name\" value creates a task like `publishAllPublicationsTo[Name]Repository\n            // In this case, publishAllPublicationsToAirbnbArtifactoryRepository\n            name = 'airbnbArtifactory'\n            url = version.toString().endsWith(\"SNAPSHOT\") ? findProperty(\"ARTIFACTORY_SNAPSHOT_URL\") : findProperty(\"ARTIFACTORY_RELEASE_URL\")\n            credentials {\n                username = findProperty(\"ARTIFACTORY_USERNAME\")\n                password = findProperty(\"ARTIFACTORY_PASSWORD\")\n            }\n        }\n    }\n}\n\nmavenPublishing {\n    if (findProperty(\"enforceSnapshotVersion\").toString().toBoolean() && !findProperty(\"VERSION_NAME\").toString().endsWith(\"-SNAPSHOT\")) {\n        throw new org.gradle.api.tasks.TaskInstantiationException(\n                \"Cannot publish non snapshot version(${findProperty(\"VERSION_NAME\")}) if 'enforceSnapshotVersion' property is set!\"\n        )\n    }\n    if (findProperty(\"doNotSignRelease\").toString().toBoolean()) {\n        println(\"Skipping release signing\")\n    } else {\n        println(\"Signing release with gpg\")\n        signAllPublications()\n    }\n}"
        },
        {
          "name": "sample-benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample-benchmarkable-library",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample-kapt-library",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample-library",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1875,
          "content": "include ':sample', ':deeplinkdispatch', ':deeplinkdispatch-base', ':deeplinkdispatch-processor', ':sample-library', ':sample-kapt-library',':sample-benchmarkable-library', ':sample-benchmark'\n"
        }
      ]
    }
  ]
}