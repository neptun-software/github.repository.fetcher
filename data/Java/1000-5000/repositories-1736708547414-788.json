{
  "metadata": {
    "timestamp": 1736708547414,
    "page": 788,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zjw-swun/AppMethodOrder",
      "stars": 2505,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.6064453125,
          "content": "> 背景：当项目代码量很大的时候，或者你作为一名新人要快速掌握代码的时候，给函数打上log，来了解代码执行逻辑，这种方式会显然成本太大，要改动项目编译运行，NO！太耗时；或者你想debug的方式来给你想关注的几个函数，来了解代码执行逻辑，NO！因为你肯定会漏掉函数；也许你可以固执的给你写的项目打满log说这样也行，但是你要知道你方法所调用的jdk的函数或者第三方aar或者jar再或者android sdk中的函数调用顺序你怎么办，还能打log吗？显然不行吧，来~这个项目给让可以让你以包名为过滤点过滤你想要知道所有函数调用顺序。\n\n项目地址：[https://github.com/zjw-swun/AppMethodOrder](https://github.com/zjw-swun/AppMethodOrder) 欢迎star\n\n\n作者列表（排名按代码贡献时间顺序）：二精-霁雪清虹，xingstarx，大精-wing，pighead4u ,lijunjie，三精-虹猫，Harlber\n\n\n# 1. 效果奉上\n\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/1.gif)\n\n动作简介：首先点击MainActivity的自定义MyTextView然后进入SecondActivity再点击textview之后finish跳转回MainActivity<br>\n下面是库处理过所得到的函数调用顺序``order.txt``文件（我这里屏蔽了jdk函数，第三方库函数，以及android sdk中函数，换句话说我就保留了我自己包名中的函数顺序）\n```\n832 ent     67593 .....com.zjw.appmethodorder.MainActivity.onClick (Landroid/view/View;)V\tMainActivity.java\n832 ent     99956 ..........com.zjw.appmethodorder.MainActivity.onPause ()V\tMainActivity.java\n832 ent     99970 ...........com.zjw.appmethodorder.BaseActivity.onPause ()V\tBaseActivity.java\n832 ent    100472 ............com.zjw.appmethodorder.BaseActivity.baseOnPause ()V\tBaseActivity.java\n832 ent    128540 ........com.zjw.appmethodorder.SecondActivity.<init> ()V\tSecondActivity.java\n832 ent    128562 .........com.zjw.appmethodorder.BaseActivity.<init> ()V\tBaseActivity.java\n832 ent    213911 ........com.zjw.appmethodorder.SecondActivity.onCreate (Landroid/os/Bundle;)V\tSecondActivity.java\n832 ent    213928 .........com.zjw.appmethodorder.BaseActivity.onCreate (Landroid/os/Bundle;)V\tBaseActivity.java\n832 ent    258414 ..........com.zjw.appmethodorder.BaseActivity.baseOnCreate ()V\tBaseActivity.java\n832 ent   1440503 .........com.zjw.appmethodorder.SecondActivity.onResume ()V\tSecondActivity.java\n832 ent   1440563 ..........com.zjw.appmethodorder.BaseActivity.onResume ()V\tBaseActivity.java\n832 ent   1445675 ...........com.zjw.appmethodorder.BaseActivity.baseOnResume ()V\tBaseActivity.java\n832 ent   2954291 .................com.zjw.appmethodorder.MyTextView.onWindowVisibilityChanged (I)V\tMyTextView.java\n832 ent   3065664 ........com.zjw.appmethodorder.MainActivity.onStop ()V\tMainActivity.java\n832 ent   3065701 .........com.zjw.appmethodorder.BaseActivity.onStop ()V\tBaseActivity.java\n832 ent   3069155 ..........com.zjw.appmethodorder.BaseActivity.baseOnStop ()V\tBaseActivity.java\n832 ent   3139519 .......com.zjw.appmethodorder.SecondActivity.click (Landroid/view/View;)V\tSecondActivity.java\n832 ent   3146300 ........com.zjw.appmethodorder.SecondActivity.finish ()V\tSecondActivity.java\n832 ent   3183478 ..........com.zjw.appmethodorder.SecondActivity.onPause ()V\tSecondActivity.java\n832 ent   3183498 ...........com.zjw.appmethodorder.BaseActivity.onPause ()V\tBaseActivity.java\n832 ent   3183843 ............com.zjw.appmethodorder.BaseActivity.baseOnPause ()V\tBaseActivity.java\n832 ent   3209420 ........com.zjw.appmethodorder.MainActivity.<init> ()V\tMainActivity.java\n832 ent   3209438 .........com.zjw.appmethodorder.BaseActivity.<init> ()V\tBaseActivity.java\n832 ent   3283359 ........com.zjw.appmethodorder.MainActivity.onCreate (Landroid/os/Bundle;)V\tMainActivity.java\n832 ent   3283378 .........com.zjw.appmethodorder.BaseActivity.onCreate (Landroid/os/Bundle;)V\tBaseActivity.java\n832 ent   3330938 ..........com.zjw.appmethodorder.BaseActivity.baseOnCreate ()V\tBaseActivity.java\n832 ent   4363295 .....................com.zjw.appmethodorder.MyTextView.<init> (Landroid/content/Context;Landroid/util/AttributeSet;)V\tMyTextView.java\n832 ent   4436094 ..................com.zjw.appmethodorder.MyTextView.onFinishInflate ()V\tMyTextView.java\n832 ent   4449689 .........com.zjw.appmethodorder.MainActivity.initView ()V\tMainActivity.java\n832 ent   4539427 .........com.zjw.appmethodorder.MainActivity.onResume ()V\tMainActivity.java\n832 ent   4539467 ..........com.zjw.appmethodorder.BaseActivity.onResume ()V\tBaseActivity.java\n832 ent   4543597 ...........com.zjw.appmethodorder.BaseActivity.baseOnResume ()V\tBaseActivity.java\n832 ent   4917854 .................com.zjw.appmethodorder.MyTextView.onAttachedToWindow ()V\tMyTextView.java\n832 ent   4918658 .................com.zjw.appmethodorder.MyTextView.onWindowVisibilityChanged (I)V\tMyTextView.java\n832 ent   5090653 ...................................com.zjw.appmethodorder.MyTextView.onMeasure (II)V\tMyTextView.java\n832 ent   5355203 ..................................com.zjw.appmethodorder.MyTextView.onMeasure (II)V\tMyTextView.java\n832 ent   5456681 .......................................com.zjw.appmethodorder.MyTextView.onSizeChanged (IIII)V\tMyTextView.java\n832 ent   5467577 ....................................com.zjw.appmethodorder.MyTextView.onLayout (ZIIII)V\tMyTextView.java\n832 ent   5876623 ...........................................com.zjw.appmethodorder.MyTextView.onDraw (Landroid/graphics/Canvas;)V\tMyTextView.java\n832 ent   6121967 ........com.zjw.appmethodorder.SecondActivity.onStop ()V\tSecondActivity.java\n832 ent   6121986 .........com.zjw.appmethodorder.BaseActivity.onStop ()V\tBaseActivity.java\n832 ent   6123689 ..........com.zjw.appmethodorder.BaseActivity.baseOnStop ()V\tBaseActivity.java\n832 ent   6127522 ........com.zjw.appmethodorder.SecondActivity.onDestroy ()V\tSecondActivity.java\n832 ent   6127679 .........com.zjw.appmethodorder.BaseActivity.onDestroy ()V\tBaseActivity.java\n832 ent   6133301 ..........com.zjw.appmethodorder.BaseActivity.baseOnDestroy ()V\tBaseActivity.java\n```\n\n# 2. 原理篇\n废弃dmtracedump解析，采用android studio官方源码解析方案(官方android studio解析trace的移植版版本)，核心代码详见``com.android.tools.perflib.vmtrace.VmTraceParser``类,相比之前的方案无需再配置dmtracedump环境变量，以及兼容android studio 3.1及其以后掐表生成的trace格式。\n\n# 3. 使用方法\n\n## 3.1 生成trace文件的方式\n生成trace文件的方式有2种操作，一种是在项目中使用代码操作 即``android.os.Debug.startMethodTracing();`` 和``android.os.Debug.stopMethodTracing();``，执行完``stopMethodTracing``将会在您手机app的sdcard下面生成``.trace``文件，该方式不区分版本，dumtracedump可解析<br>\n第二种方式是掐表生成trace文件<br>\n**android studio 3.0之前版本操作如下**<br>\n第一次点击下图时钟icon代表开始掐表，然后回到您的app，进行您要跟踪函数调用顺序的操作，再次点击下图时钟icon代表结束掐表\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/0.png)\n掐表结束后即会在captures目录生成``com.zjw.appmethodorder_2017.03.25_21.41.trace``文件，android studio会默认打开一个可视化窗口\n\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/00.png)\n\n**android studio 3.0版本操作如下**<br><br>\n点击CPU 进入CPU面板，然后选择Instrumented选项（Sampled和Instrumented区别在于，Sampled函数调用采样率低生成的trace文件小，采样率低会造成大部分函数调用顺序漏记，Instrumented相当于无损采样生成文件大），第一次点击下图红色圆形icon代表开始掐表，然后回到您的app，进行您要跟踪函数调用顺序的操作，再次点击下图红色圆形icon代表结束掐表，\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/1.png)\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/2.png)\n结束掐表就会在``C:\\Users\\hasee\\AppData\\Local\\Temp\\cpu_trace.trace``(本人是windows环境，使用windows系统可以参照，使用Mac的同学 cd /private/var/folders在folders 搜索cpu_trace.trace)，存在cpu_trace.trace时会新建cpu_trace1.tracecpu_trace2.trace 以此类推\n\n**android studio 3.1开始,掐表默认实现改成cpu profiler**<br><br>\n详见[https://developer.android.google.cn/studio/profile/cpu-profiler](https://developer.android.google.cn/studio/profile/cpu-profiler),如果掐表生成的trace文件可以用文本编辑器打开看是否开头带有\"slow\"字样，dmtracedump无法解析，但是现在的小工具是基于最新android studio源码实现，支持此种trace格式啦啦啦！。android studio 3.4掐表生成trace文件在cpu面板右键支持自定义路径的export导出。\n\n\n## 3.2 appMethodOrder小工具使用\n\nappMethodOrder小工具  下载地址[AppMethodOrderUtils.jar](tool/AppMethodOrderUtils.jar)  \nappMethodOrder小工具  源码地址[AppMethodOrderUtils.zip](tool/AppMethodOrderUtils.zip)\nappMethodOrder小工具改良自 [https://github.com/Harlber/Method_Trace_Tool](https://github.com/Harlber/Method_Trace_Tool )\n感谢Harlber[https://github.com/Harlber](https://github.com/Harlber)\n\n**好消息，现在小工具使用无需配置dmtracedump环境变量了！开箱即用！！！**\n\n将trace文件拖拽到小工具``File Path``左边区域\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/3.png)\n ``package name``处填入您需要过滤的目标包名，或者填入空串（空串将生成所有线程所有包名的函数调用顺序）\n\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/4.png)\n\n如上图所示，查询结构存在四个tab，第一个``threadID``代表线程id，第二个``threadName``代表线程名，第三个``usecs``代表函数耗时(单位微秒，有时候耗时为0不要惊讶，是因为该次掐表刚好没包括到其函数结束时机)，第四个``method``代表函数名，（查询结果是以时间排序的）\n\n**特别注意**\n这里注意android studio 3.1以后掐表生成的trace 解析的时候 时间耗时有点小问题(官方代码的问题)，在一段时间内函数ent 给出的threadTime都是一致的，这里需要小小的注意一下，所以3.1以后掐表要看耗时的朋友，建议还是在studio面板看相对耗时，或者使用代码方式生成trace文件。\n\n# 4. 海量信息的处理手段\n不难发现trace文件时间越长意味着记录的信息也会越来越多，这时候单纯以包名过滤其实满足不了需求，比如我们想通过3个条件（例如 主线程+含zjw包名的 or android.view）来过滤出结果，以下将给出解决办法。\n\nappMethodOrder小工具会在该jar所在目录生成``appMethodOrderTrace.txt``，以文本方式记录查询结果。\n我们可以借助数据库这个工具使用查询语句来帮助我们过滤出有用的信息，可以使用以下数据库命令，把``appMethodOrderTrace.txt``内容导入到数据库表中\n//从text 导入数据到 mysql （以下语句在mysql中实验是OK的）\n```\ntruncate table app;\nLOAD DATA LOCAL INFILE 'C:/Users/hasee/Desktop/appMethodOrderTrace.txt' INTO TABLE `app`;\n```\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/5.png)\n\napp表结创建语句如下\n```\nCREATE TABLE `app` (\n  `threadId` int(11) DEFAULT NULL,\n  `threadName` varchar(255) DEFAULT NULL,\n  `usecs` varchar(255) DEFAULT NULL,\n  `method` varchar(255) DEFAULT NULL,\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n查询语句示范\n//查询main线程中 自定义包下最耗时的操作(以毫秒为单位，降序)\nSELECT\n\tthreadName,\n\tusecs/1000, \n\tmethod\nFROM\n\tapp\nWHERE\n\tapp.threadName = \"main\" AND method like \"%自定义包名%\"\nORDER BY\n\tapp.usecs DESC\n![图片描述](https://github.com/zjw-swun/AppMethodOrder/blob/master/images/6.png)\n\n# 5. 计算得出的函数耗时不是准确的时间\n根据官方文档(https://developer.android.com/studio/profile/traceview.html) ``Interpreted code runs more slowly when profiling is enabled. Don't try to generate absolute timings from the profiler results (such as, \"function X takes 2.5 seconds to run\"). The times are only useful in relation to other profile output, so you can see if changes have made the code faster or slower relative to a previous profiling run.``所知(我也用了代码在函数开头结尾用System.nanoTime()时间相减，发现，生成trace的时候确实会拖慢所以函数的执行时间，比System.nanoTime()时间相减得出的时间差的比较多)。原因是trace过程会整体拖慢JVM执行，因此函数耗时只是一个参考值，比较哪个函数更耗时是可以的。\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.677734375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.4.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n/*\nsubprojects {\n    println \"this is an infomation from build.gradle on root\"\n    apply from: rootProject.getRootDir().getAbsolutePath() + \"/utils.gradle\"\n}\n*/\n\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8291015625,
          "content": "## Project-wide Gradle settings.\n#\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx1024m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n#\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#Mon Mar 27 10:46:25 CST 2017\nsystemProp.http.proxyHost=127.0.0.1\norg.gradle.jvmargs=-Xmx1536m\nsystemProp.http.proxyPort=8123\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0146484375,
          "content": "include ':app'\n"
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}