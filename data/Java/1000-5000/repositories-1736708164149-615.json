{
  "metadata": {
    "timestamp": 1736708164149,
    "page": 615,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zmxv/react-native-sound",
      "stars": 2804,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1845703125,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 4\nObjCSpaceAfterProperty: true\n\n# Looks like this option is coming, but isn't ready yet.\n# https://reviews.llvm.org/rL356613\n#IndentPPDirectives: BeforeHash\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4072265625,
          "content": "node_modules\n\n# OSX\n#\n.DS_Store\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\n# Jetbrains\n.idea\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# dotenv environment variables file\n.env"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.48828125,
          "content": "# Changelog\n\n## 0.11.0\n\nNew features:\n\n- Add support for `Sound.setCategory('Alarm')` on Android\n- Update Visual Studio path definition to support Windows UWP in CI.\n\nBug fixes:\n\n- Use incrementing keys instead of a filename hash to allow multiple Sound\n  instances for the same filename.\n- Update Podfile reference to fix build under React Native 0.60.\n- Fix getSystemVolume callback on Android for parity with iOS.\n- Prevent a crash under iOS 8.\n\nOther improvements:\n\n- Documentation improvements.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Zhen Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4677734375,
          "content": "# react-native-sound\n\n[![](https://img.shields.io/npm/v/react-native-sound.svg?style=flat-square)][npm]\n[![](https://img.shields.io/npm/l/react-native-sound.svg?style=flat-square)][npm]\n[![](https://img.shields.io/npm/dm/react-native-sound.svg?style=flat-square)][npm]\n\n[npm]: https://www.npmjs.com/package/react-native-sound\n\nReact Native module for playing sound clips on iOS, Android, and Windows.\n\nBe warned, this software is alpha quality and may have bugs. Test on your own\nand use at your own risk!\n\n## Feature matrix\n\nReact-native-sound does not support streaming. See [#353][] for more info.\nOf course, we would welcome a PR if someone wants to take this on.\n\nIn iOS, the library uses [AVAudioPlayer][], not [AVPlayer][].\n\n[#353]: https://github.com/zmxv/react-native-sound/issues/353\n[AVAudioPlayer]: https://developer.apple.com/documentation/avfoundation/avaudioplayer\n[AVPlayer]: https://developer.apple.com/documentation/avfoundation/avplayer\n\nFeature | iOS | Android | Windows\n---|---|---|---\nLoad sound from the app bundle | ✓ | ✓ | ✓\nLoad sound from other directories | ✓ | ✓ | ✓\nLoad sound from the network | ✓ | ✓ |\nPlay sound | ✓ | ✓ | ✓\nPlayback completion callback | ✓ | ✓ | ✓\nPause | ✓ | ✓ | ✓\nResume | ✓ | ✓ | ✓\nStop | ✓ | ✓ | ✓\nReset |  | ✓ |\nRelease resource | ✓ | ✓ | ✓\nGet duration | ✓ | ✓ | ✓\nGet number of channels | ✓ |   |\nGet/set volume | ✓ | ✓ | ✓\nGet system volume | ✓ | ✓ |\nSet system volume |   | ✓ |\nGet/set pan | ✓ |   |\nGet/set loops | ✓ | ✓ | ✓\nGet/set exact loop count | ✓ |   |\nGet/set current time | ✓ | ✓ | ✓\nSet speed | ✓ | ✓ |\n\n## Installation\n\nFirst install the npm package from your app directory:\n\n```javascript\nnpm install react-native-sound --save\n```\nNote: If your react-native version is >= 0.60 then linking is done automatically.\n\nIf your react-native version is < 0.60 then link it using:\n\n```javascript\nreact-native link react-native-sound\n```\n\n**If you encounter this error**\n\n```\nundefined is not an object (evaluating 'RNSound.IsAndroid')\n```\n\nyou may additionally need to fully clear your build caches for Android. You\ncan do this using\n\n```bash\ncd android\n./gradlew cleanBuildCache\n```\n\nAfter clearing your build cache, you should execute a new `react-native` build.\n\nIf you still experience issues, **know that this is the most common build issue.** See [#592][] and the several\nissues linked from it for possible resolution. A pull request with improved\ndocumentation on this would be welcome!\n\n[#592]: https://github.com/zmxv/react-native-sound/issues/592\n\n### Manual Installation Notes\n\nPlease see the Wiki for these details https://github.com/zmxv/react-native-sound/wiki/Installation\n\n\n## Help with React-Native-Sound\n\n* For react-native-sound developers  [![][gitter badge]](https://gitter.im/react-native-sound/developers)\n* For help using react-native-sound  [![][gitter badge]](https://gitter.im/react-native-sound/Help)\n\n[gitter badge]: https://img.shields.io/gitter/room/react-native-sound/developers.svg?format=flat-square\n\n## Demo project\n\nhttps://github.com/zmxv/react-native-sound-demo\n\n## Player\n\n<img src=\"https://github.com/benevbright/react-native-sound-playerview/blob/master/docs/demo.gif?raw=true\">\n\nhttps://github.com/benevbright/react-native-sound-playerview\n\n## Basic usage\n\nFirst you'll need to add audio files to your project.\n\n- Android: Save your sound clip files under the directory `android/app/src/main/res/raw`. Note that files in this directory must be lowercase and underscored (e.g. my_file_name.mp3) and that subdirectories are not supported by Android.\n- iOS: Open Xcode and add your sound files to the project (Right-click the project and select `Add Files to [PROJECTNAME]`)\n\n```js\n// Import the react-native-sound module\nvar Sound = require('react-native-sound');\n\n// Enable playback in silence mode\nSound.setCategory('Playback');\n\n// Load the sound file 'whoosh.mp3' from the app bundle\n// See notes below about preloading sounds within initialization code below.\nvar whoosh = new Sound('whoosh.mp3', Sound.MAIN_BUNDLE, (error) => {\n  if (error) {\n    console.log('failed to load the sound', error);\n    return;\n  }\n  // loaded successfully\n  console.log('duration in seconds: ' + whoosh.getDuration() + 'number of channels: ' + whoosh.getNumberOfChannels());\n\n  // Play the sound with an onEnd callback\n  whoosh.play((success) => {\n    if (success) {\n      console.log('successfully finished playing');\n    } else {\n      console.log('playback failed due to audio decoding errors');\n    }\n  });\n});\n\n// Reduce the volume by half\nwhoosh.setVolume(0.5);\n\n// Position the sound to the full right in a stereo field\nwhoosh.setPan(1);\n\n// Loop indefinitely until stop() is called\nwhoosh.setNumberOfLoops(-1);\n\n// Get properties of the player instance\nconsole.log('volume: ' + whoosh.getVolume());\nconsole.log('pan: ' + whoosh.getPan());\nconsole.log('loops: ' + whoosh.getNumberOfLoops());\n\n// Seek to a specific point in seconds\nwhoosh.setCurrentTime(2.5);\n\n// Get the current playback point in seconds\nwhoosh.getCurrentTime((seconds) => console.log('at ' + seconds));\n\n// Pause the sound\nwhoosh.pause();\n\n// Stop the sound and rewind to the beginning\nwhoosh.stop(() => {\n  // Note: If you want to play a sound after stopping and rewinding it,\n  // it is important to call play() in a callback.\n  whoosh.play();\n});\n\n// Release the audio player resource\nwhoosh.release();\n```\n\n## Notes\n\n- To minimize playback delay, you may want to preload a sound file without calling `play()` (e.g. `var s = new Sound(...);`) during app initialization. This also helps avoid a race condition where `play()` may be called before loading of the sound is complete, which results in no sound but no error because loading is still being processed.\n- You can play multiple sound files at the same time. Under the hood, this module uses `AVAudioSessionCategoryAmbient` to mix sounds on iOS.\n- You may reuse a `Sound` instance for multiple playbacks.\n- On iOS, the module wraps `AVAudioPlayer` that supports aac, aiff, mp3, wav etc. The full list of supported formats can be found at https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/SupportedAudioFormatsMacOSX/SupportedAudioFormatsMacOSX.html\n- On Android, the module wraps `android.media.MediaPlayer`. The full list of supported formats can be found at https://developer.android.com/guide/topics/media/media-formats.html\n- On Android, the absolute path can start with '/sdcard/'. So, if you want to access a sound called \"my_sound.mp3\" on Downloads folder, the absolute path will be: '/sdcard/Downloads/my_sound.mp3'.\n- You may chain non-getter calls, for example, `sound.setVolume(.5).setPan(.5).play()`.\n\n## Audio on React Native\n\n- [The State of Audio Libraries in React Native (Oct. 2018)][medium]\n- [react-native-audio-toolkit][]\n- [react-native-video][] (also plays audio)\n- [Expo Audio SDK][]\n- [#media on awesome-react-native][#media]\n\n[medium]: https://medium.com/@emmettharper/the-state-of-audio-libraries-in-react-native-7e542f57b3b4\n[react-native-audio-toolkit]: https://github.com/react-native-community/react-native-audio-toolkit\n[react-native-video]: https://github.com/react-native-community/react-native-video\n[expo audio sdk]: https://docs.expo.io/versions/latest/sdk/audio/\n[#media]: http://www.awesome-react-native.com/#media\n\n## Contributing\n\nPull requests welcome with bug fixes, documentation improvements, and\nenhancements.\n\nWhen making big changes, please open an issue first to discuss.\n\n## License\n\nThis project is licensed under the MIT License.\n"
        },
        {
          "name": "RNSound.podspec",
          "type": "blob",
          "size": 0.705078125,
          "content": "require 'json'\n\npackage = JSON.parse(File.read(File.join(__dir__, 'package.json')))\n\nPod::Spec.new do |s|\n  s.name                = \"RNSound\"\n  s.version             = package['version']\n  s.summary             = package['description']\n  s.homepage            = \"https://github.com/zmxv/react-native-sound\"\n  s.license             = package['license']\n  s.author              = package['author']\n  s.source              = { :git => 'https://github.com/zmxv/react-native-sound.git', :tag => \"v#{s.version}\" }\n  s.default_subspec     = 'Core'\n  s.requires_arc        = true\n  s.platform            = :ios, \"7.0\"\n\n  s.dependency 'React-Core'\n\n  s.subspec 'Core' do |ss|\n    ss.source_files     = \"RNSound/*.{h,m}\"\n  end\n\nend\n"
        },
        {
          "name": "RNSound.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "RNSound",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 6.4189453125,
          "content": "// Type definitions for react-native-sound\n// Project: https://github.com/zmxv/react-native-sound\n// Definitions by: Kyle Roach <https://github.com/iRoachie>\n// TypeScript Version: 2.3.2\n\ntype AVAudioSessionCategory = 'Ambient' | 'SoloAmbient' | 'Playback' | 'Record' | 'PlayAndRecord' | 'AudioProcessing' | 'MultiRoute' | 'Alarm'\n\ntype AVAudioSessionMode = 'Default' | 'VoiceChat' | 'VideoChat' | 'GameChat' | 'VideoRecording' | 'Measurement' | 'MoviePlayback' | 'SpokenAudio'\n\ntype FilenameType = string\n\ntype FileType = any\n\ntype BasePathType = string\n\ntype CallbackType = (error: any) => void\n\ndeclare class Sound {\n  static MAIN_BUNDLE: string\n  static DOCUMENT: string\n  static LIBRARY: string\n  static CACHES: string\n\n  /**\n   * Sets AVAudioSession as active, which is recommended on iOS to achieve seamless background playback.\n   * Use this method to deactivate the AVAudioSession when playback is finished in order for other apps\n   * to regain access to the audio stack.\n   *\n   * @param category AVAudioSession category\n   * @param mixWithOthers Can be set to true to force mixing with other audio sessions.\n   */\n  static setActive(active: boolean): void\n\n  /**\n   * Sets AVAudioSession category, which allows playing sound in background,\n   * stop sound playback when phone is locked, etc.\n   * Parameter options: \"Ambient\", \"SoloAmbient\", \"Playback\", \"Record\", \"PlayAndRecord\", \"AudioProcessing\", \"MultiRoute\".\n   *\n   * @param category AVAudioSession category\n   * @param mixWithOthers Can be set to true to force mixing with other audio sessions.\n   */\n  static setCategory(category: AVAudioSessionCategory, mixWithOthers?: boolean): void\n\n  /**\n   * Sets AVAudioSession mode, which works in conjunction with the category to determine audio mixing behavior.\n   * Parameter options: \"Default\", \"VoiceChat\", \"VideoChat\", \"GameChat\", \"VideoRecording\", \"Measurement\", \"MoviePlayback\", \"SpokenAudio\".\n   *\n   * @param mode AVAudioSession mode\n   * @param mixWithOthers Can be set to true to force mixing with other audio sessions.\n   */\n  static setMode(mode: AVAudioSessionMode): void\n\n  /**\n   * @param filenameOrFile Either absolute or relative path to the sound file or the `require` call.\n   * @param basePathOrCallback Optional base path of the file. Omit this or pass '' if filename is an absolute path; you may use one of the predefined directories: Sound.MAIN_BUNDLE, Sound.DOCUMENT, Sound.LIBRARY, Sound.CACHES. If you are using `require` to define filepath, then set the callback function as the second argument.\n   * @param callback Optional callback function called when load ends in either success or error. In the event of success, error is undefined.\n   */\n  constructor(filenameOrFile: FilenameType | FileType, basePathOrCallback?: BasePathType | CallbackType, callback?: CallbackType)\n\n  /**\n   * Return true if the sound has been loaded.\n   */\n  isLoaded(): boolean\n\n  /**\n   * Plays the loaded file\n   * @param onEnd - Optional callback function that gets called when the playback finishes successfully or an audio decoding error interrupts it\n   */\n  play(onEnd?: (success: boolean) => void): this\n\n  /**\n   * Pause the sound\n   * @param cb - Optional callback function that gets called when the sound has been paused.\n   */\n  pause(cb?: () => void): this\n\n  /**\n   * Stop playback and set the seek position to 0.\n   * @param cb - Optional callback function that gets called when the sound has been stopped.\n   */\n  stop(cb?: () => void): this\n\n  /**\n   * Reset the audio player to its uninitialized state (android only)\n   */\n  reset(): this\n\n  /**\n   * Release the audio player resource associated with the instance.\n   */\n  release(): this\n\n  /**\n   * Return the number of channels\n   * (1 for mono and 2 for stereo sound), or -1 before the sound gets loaded.\n   */\n  getNumberOfChannels(): number\n\n  /**\n   * Return the time of audio (second)\n   */\n  getDuration(): number\n\n  /**\n   * Return the volume of the audio player (not the system-wide volume),\n   * Ranges from 0.0 (silence) through 1.0 (full volume, the default)\n   */\n  getVolume(): number\n\n  /**\n   * Set the volume\n   * @param value - ranging from 0.0 (silence) through 1.0 (full volume)\n   */\n  setVolume(value: number): this\n\n  /**\n   * Return the stereo pan position of the audio player (not the system-wide pan)\n   * Ranges from -1.0 (full left) through 1.0 (full right). The default value is 0.0 (center)\n   */\n  getPan(): number\n\n  /**\n   * Set the pan value\n   * @param value - ranging from -1.0 (full left) through 1.0 (full right).\n   */\n  setPan(value: number): this\n\n  /**\n   * Return the loop count of the audio player.\n   * The default is 0 which means to play the sound once.\n   * On iOS a positive number specifies the number of times to return to the start and play again, a negative number indicates an indefinite loop.\n   * On Android any non-zero value indicates an indefinite loop.\n   */\n  getNumberOfLoops(): number\n\n  /**\n   * Set the loop count\n   * @param value - iOS: 0 means to play the sound once, a positive number specifies the number of times to return to the start and play again, a negative number indicates an indefinite loop. Android: 0 means to play the sound once, other numbers indicate an indefinite loop.\n   */\n  setNumberOfLoops(value: number): this\n\n  /**\n   * Callback will receive the current playback position in seconds and whether the sound is being played.\n   * @param cb\n   */\n  getCurrentTime(cb?: (seconds: number, isPlaying: boolean) => void): void\n\n  /**\n   * Seek to a particular playback point in seconds.\n   * @param value\n   */\n  setCurrentTime(value: number): this\n\n  /**\n   * Return the speed of the audio player\n   */\n  getSpeed(): number\n\n  /**\n   * Speed of the audio playback.\n   * @param value\n   */\n  setSpeed(value: number): this\n\n  /**\n   * Return the pitch of the audio player\n   */\n  getPitch(): number\n\n  /**\n   * Pitch of the audio playback (Android Only).\n   * @param value\n   */\n  setPitch(value: number): void\n\n  /**\n   * Whether to enable playback in silence mode (iOS only)\n   * @deprecated - Use the static method Sound.setCategory('Playback') instead which has the same effect.\n   * @param enabled\n   */\n  enableInSilenceMode(enabled: boolean): void\n\n  /**\n   * Sets AVAudioSession category\n   * @deprecated\n   * @param value\n   */\n  setCategory(value: AVAudioSessionCategory): void\n\n  /**\n   * Turn speaker phone on (android only)\n   * @param value\n   */\n  setSpeakerphoneOn(value: boolean): void\n\n  /**\n   * Whether the player is playing or not.\n   */\n  isPlaying(): boolean\n}\n\nexport = Sound;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.05859375,
          "content": "{\n  \"name\": \"react-native-sound\",\n  \"version\": \"0.11.2\",\n  \"description\": \"React Native module for playing sound clips on iOS, Android, and Windows\",\n  \"main\": \"sound.js\",\n  \"typings\": \"index.d.ts\",\n  \"repository\": \"zmxv/react-native-sound\",\n  \"keywords\": [\n    \"react-native\",\n    \"sound\",\n    \"audio\",\n    \"ios\",\n    \"android\",\n    \"windows\"\n  ],\n  \"author\": \"Zhen Wang <z@zmxv.com> (http://blog.zmxv.com)\",\n  \"license\": \"MIT\",\n  \"peerDependencies\": {\n    \"react-native\": \">=0.8.0\"\n  },\n  \"scripts\": {\n    \"clang-format\": \"node scripts/clang-format.js\",\n    \"clang-format:check\": \"node scripts/clang-format.js --check\"\n  },\n  \"devDependencies\": {\n    \"glob\": \"^7.1.4\",\n    \"promisify-child-process\": \"^3.1.1\"\n  },\n  \"files\": [\n    \"**/*.@(js|ts)\",\n    \"*.podspec\",\n    \"android/build.gradle\",\n    \"android/src/**/*.@(java|xml)\",\n    \"RNSound.xcodeproj/project.pbxproj\",\n    \"RNSound.xcodeproj/project.xcworkspace/contents.xcworkspacedata\",\n    \"RNSound/**/*.@(h|m)\",\n    \"windows/RNSoundModule/**/*.@(sln|json|xml|csproj)\",\n    \"windows/RNSoundModule/**/*.cs\",\n    \"!scripts\"\n  ]\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sound.js",
          "type": "blob",
          "size": 7.318359375,
          "content": "'use strict';\n\nvar ReactNative = require('react-native');\nvar RNSound = ReactNative.NativeModules.RNSound;\nvar IsAndroid = RNSound.IsAndroid;\nvar IsWindows = RNSound.IsWindows;\nvar resolveAssetSource = require(\"react-native/Libraries/Image/resolveAssetSource\");\nvar eventEmitter = new ReactNative.NativeEventEmitter(RNSound);\n\nvar nextKey = 0;\n\nfunction isRelativePath(path) {\n  return !/^(\\/|http(s?)|asset|file)/.test(path);\n}\n\nfunction calculateRelativeVolume(volume, pan) {\n  // calculates a lower volume relative to the pan value\n  const relativeVolume = (volume * (1 - Math.abs(pan)));\n  return Number(relativeVolume.toFixed(1));\n}\n\nfunction setAndroidVolumes(sound) {\n  // calculates the volumes for left and right channels\n  if (sound._pan) {\n    const relativeVolume = calculateRelativeVolume(sound._volume, sound._pan);\n    if (sound._pan < 0) {\n      // left is louder\n      RNSound.setVolume(sound._key, sound._volume, relativeVolume);\n    } else {\n      // right is louder\n      RNSound.setVolume(sound._key, relativeVolume, sound._volume);\n    }\n  } else {\n    // no panning, same volume on both channels\n    RNSound.setVolume(sound._key, sound._volume, sound._volume);\n  }\n}\n\nfunction Sound(filename, basePath, onError, options) {\n  var asset = resolveAssetSource(filename);\n  if (asset) {\n    this._filename = asset.uri;\n    onError = basePath;\n  } else {\n    this._filename = basePath ? basePath + '/' + filename : filename;\n\n    if (IsAndroid && !basePath && isRelativePath(filename)) {\n      this._filename = filename.toLowerCase().replace(/\\.[^.]+$/, '');\n    }\n  }\n\n  this.registerOnPlay = function() {\n    if (this.onPlaySubscription != null) {\n      console.warn('On Play change event listener is already registered');\n      return;\n    }\n\n    if (!IsWindows) {\n      this.onPlaySubscription = eventEmitter.addListener(\n        'onPlayChange',\n        (param) => {\n          const { isPlaying, playerKey } = param;\n          if (playerKey === this._key) {\n            if (isPlaying) {\n              this._playing = true;\n            }\n            else {\n              this._playing = false;\n            }\n          }\n        },\n      );\n    }\n  }\n\n  this._loaded = false;\n  this._key = nextKey++;\n  this._playing = false;\n  this._duration = -1;\n  this._numberOfChannels = -1;\n  this._volume = 1;\n  this._pan = 0;\n  this._numberOfLoops = 0;\n  this._speed = 1;\n  this._pitch = 1;\n  RNSound.prepare(this._filename, this._key, options || {}, (error, props) => {\n    if (props) {\n      if (typeof props.duration === 'number') {\n        this._duration = props.duration;\n      }\n      if (typeof props.numberOfChannels === 'number') {\n        this._numberOfChannels = props.numberOfChannels;\n      }\n    }\n    if (error === null) {\n      this._loaded = true;\n      this.registerOnPlay();\n    }\n    onError && onError(error, props);\n  });\n}\n\nSound.prototype.isLoaded = function() {\n  return this._loaded;\n};\n\nSound.prototype.play = function(onEnd) {\n  if (this._loaded) {\n    RNSound.play(this._key, (successfully) => onEnd && onEnd(successfully));\n  } else {\n    onEnd && onEnd(false);\n  }\n  return this;\n};\n\nSound.prototype.pause = function(callback) {\n  if (this._loaded) {\n    RNSound.pause(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n  return this;\n};\n\nSound.prototype.stop = function(callback) {\n  if (this._loaded) {\n    RNSound.stop(this._key, () => {\n      this._playing = false;\n      callback && callback();\n    });\n  }\n  return this;\n};\n\nSound.prototype.reset = function() {\n  if (this._loaded && IsAndroid) {\n    RNSound.reset(this._key);\n    this._playing = false;\n  }\n  return this;\n};\n\nSound.prototype.release = function() {\n  if (this._loaded) {\n    RNSound.release(this._key);\n    this._loaded = false;\n    if (!IsWindows) {\n      if (this.onPlaySubscription != null) {\n        this.onPlaySubscription.remove();\n        this.onPlaySubscription = null;\n      }\n    }\n  }\n  return this;\n};\n\nSound.prototype.getFilename = function() {\n  return this._filename;\n};\n\nSound.prototype.getDuration = function() {\n  return this._duration;\n};\n\nSound.prototype.getNumberOfChannels = function() {\n  return this._numberOfChannels;\n};\n\nSound.prototype.getVolume = function() {\n  return this._volume;\n};\n\nSound.prototype.getSpeed = function() {\n  return this._speed;\n};\n\nSound.prototype.getPitch = function() {\n  return this._pitch;\n};\n\nSound.prototype.setVolume = function(value) {\n  this._volume = value;\n  if (this._loaded) {\n    if (IsAndroid) {\n      setAndroidVolumes(this)\n    } else {\n      RNSound.setVolume(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setPan = function(value) {\n  this._pan = value;\n  if (this._loaded) {\n    if (IsWindows) {\n      throw new Error('#setPan not supported on windows');\n    } else if (IsAndroid) {\n      setAndroidVolumes(this)\n    } else {\n      RNSound.setPan(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.getSystemVolume = function(callback) {\n  if(!IsWindows) {\n    RNSound.getSystemVolume(callback);\n  }\n  return this;\n};\n\nSound.prototype.setSystemVolume = function(value) {\n  if (IsAndroid) {\n    RNSound.setSystemVolume(value);\n  }\n  return this;\n};\n\nSound.prototype.getPan = function() {\n  return this._pan;\n};\n\nSound.prototype.getNumberOfLoops = function() {\n  return this._numberOfLoops;\n};\n\nSound.prototype.setNumberOfLoops = function(value) {\n  this._numberOfLoops = value;\n  if (this._loaded) {\n    if (IsAndroid || IsWindows) {\n      RNSound.setLooping(this._key, !!value);\n    } else {\n      RNSound.setNumberOfLoops(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setSpeed = function(value) {\n  this._speed = value;\n  if (this._loaded) {\n    if (!IsWindows) {\n      RNSound.setSpeed(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.setPitch = function(value) {\n  this._pitch = value;\n  if (this._loaded) {\n    if (IsAndroid) {\n      RNSound.setPitch(this._key, value);\n    }\n  }\n  return this;\n};\n\nSound.prototype.getCurrentTime = function(callback) {\n  if (this._loaded) {\n    RNSound.getCurrentTime(this._key, callback);\n  }\n};\n\nSound.prototype.setCurrentTime = function(value) {\n  if (this._loaded) {\n    RNSound.setCurrentTime(this._key, value);\n  }\n  return this;\n};\n\n// android only\nSound.prototype.setSpeakerphoneOn = function(value) {\n  if (IsAndroid) {\n    RNSound.setSpeakerphoneOn(this._key, value);\n  }\n};\n\n// ios only\n\n// This is deprecated.  Call the static one instead.\n\nSound.prototype.setCategory = function(value) {\n  Sound.setCategory(value, false);\n}\n\nSound.prototype.isPlaying = function() {\n  return this._playing;\n}\n\nSound.enable = function(enabled) {\n  RNSound.enable(enabled);\n};\n\nSound.enableInSilenceMode = function(enabled) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.enableInSilenceMode(enabled);\n  }\n};\n\nSound.setActive = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setActive(value);\n  }\n};\n\nSound.setCategory = function(value, mixWithOthers = false) {\n  if (!IsWindows) {\n    RNSound.setCategory(value, mixWithOthers);\n  }\n};\n\nSound.setMode = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setMode(value);\n  }\n};\n\nSound.setSpeakerPhone = function(value) {\n  if (!IsAndroid && !IsWindows) {\n    RNSound.setSpeakerPhone(value)\n  }\n}\n\nSound.MAIN_BUNDLE = RNSound.MainBundlePath;\nSound.DOCUMENT = RNSound.NSDocumentDirectory;\nSound.LIBRARY = RNSound.NSLibraryDirectory;\nSound.CACHES = RNSound.NSCachesDirectory;\n\nmodule.exports = Sound;\n"
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "yarn.lock",
          "type": "blob",
          "size": 3.734375,
          "content": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\n\"@babel/runtime@^7.1.5\":\n  version \"7.5.4\"\n  resolved \"https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.5.4.tgz#cb7d1ad7c6d65676e66b47186577930465b5271b\"\n  integrity sha512-Na84uwyImZZc3FKf4aUF1tysApzwf3p2yuFBIyBfbzT5glzKTdvYI4KVW4kcgjrzoGUjC7w3YyCHcJKaRxsr2Q==\n  dependencies:\n    regenerator-runtime \"^0.13.2\"\n\nbalanced-match@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767\"\n  integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\n\nbrace-expansion@^1.1.7:\n  version \"1.1.11\"\n  resolved \"https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd\"\n  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\n  dependencies:\n    balanced-match \"^1.0.0\"\n    concat-map \"0.0.1\"\n\nconcat-map@0.0.1:\n  version \"0.0.1\"\n  resolved \"https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b\"\n  integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\n\nfs.realpath@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f\"\n  integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\n\nglob@^7.1.4:\n  version \"7.1.4\"\n  resolved \"https://registry.yarnpkg.com/glob/-/glob-7.1.4.tgz#aa608a2f6c577ad357e1ae5a5c26d9a8d1969255\"\n  integrity sha512-hkLPepehmnKk41pUGm3sYxoFs/umurYfYJCerbXEyFIWcAzvpipAgVkBqqT9RBKMGjnq6kMuyYwha6csxbiM1A==\n  dependencies:\n    fs.realpath \"^1.0.0\"\n    inflight \"^1.0.4\"\n    inherits \"2\"\n    minimatch \"^3.0.4\"\n    once \"^1.3.0\"\n    path-is-absolute \"^1.0.0\"\n\ninflight@^1.0.4:\n  version \"1.0.6\"\n  resolved \"https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9\"\n  integrity sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\n  dependencies:\n    once \"^1.3.0\"\n    wrappy \"1\"\n\ninherits@2:\n  version \"2.0.4\"\n  resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c\"\n  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\n\nminimatch@^3.0.4:\n  version \"3.0.4\"\n  resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083\"\n  integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\n  dependencies:\n    brace-expansion \"^1.1.7\"\n\nonce@^1.3.0:\n  version \"1.4.0\"\n  resolved \"https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1\"\n  integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\n  dependencies:\n    wrappy \"1\"\n\npath-is-absolute@^1.0.0:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f\"\n  integrity sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\n\npromisify-child-process@^3.1.1:\n  version \"3.1.1\"\n  resolved \"https://registry.yarnpkg.com/promisify-child-process/-/promisify-child-process-3.1.1.tgz#3a029c1d97bdb8bbcc8862c765b91f1cee0f2691\"\n  integrity sha512-683UHZEP4Bm75BvBujEe87AdE9lxnoWpcU5pEw4FG9HCSwwZC9pF7HUj3QmlDAvhyvulkWHLZs1lVRBNTvkbXQ==\n  dependencies:\n    \"@babel/runtime\" \"^7.1.5\"\n\nregenerator-runtime@^0.13.2:\n  version \"0.13.2\"\n  resolved \"https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.13.2.tgz#32e59c9a6fb9b1a4aff09b4930ca2d4477343447\"\n  integrity sha512-S/TQAZJO+D3m9xeN1WTI8dLKBBiRgXBlTJvbWjCThHWZj9EvHK70Ff50/tYj2J/fvBY6JtFVwRuazHN2E7M9BA==\n\nwrappy@1:\n  version \"1.0.2\"\n  resolved \"https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f\"\n  integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\n"
        }
      ]
    }
  ]
}