{
  "metadata": {
    "timestamp": 1736708143760,
    "page": 574,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EverythingMe/overscroll-decor",
      "stars": 2866,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": ".gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n/.idea\n*iml\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.267578125,
          "content": "Copyright (c) 2015, DoAT Media Ltd.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9248046875,
          "content": "> **Announcement**\n>\n> An update regarding Bintray's shutdown: The library has been successfuly republished onto maven central, but with a different Group ID; Please update your Gradle dependencies as follows:\n>\n> ```diff\n> -implementation 'me.everything:overscroll-decor-android:1.1.0'\n> +implementation 'io.github.everythingme:overscroll-decor-android:1.1.1'\n> ```\n\n# Over-Scroll Support For Android's RecyclerView, ListView, GridView, ScrollView ...\n\nThe library provides an iOS-like over-scrolling effect applicable over almost all Android native scrollable views. It is also built to allow for very easy adaptation to support custom views.\n\nThe core effect classes are loose-[decorators](https://en.wikipedia.org/wiki/Decorator_pattern) of Android views, and are thus decoupled from the actual view classes' implementations. That allows developers to apply the effect over views while keeping them as untampered 'black-boxes'. Namely, it allows for keeping important optimizations such as view-recycling intact.\n\n![RecyclerView demo](recyclerview_demo.gif)\n\n# Gradle Dependency\n\nAdd the following to your module's `build.gradle` file:\n\n```groovy\ndependencies {\n    // ...\n    \n    implementation 'io.github.everythingme:overscroll-decor-android:1.1.1'\n}\n```\n\n# Usage\n\n### RecyclerView\n\nSupports both linear and staggered-grid layout managers (i.e. all native Android layouts).\nCan be easily adapted to support custom layout managers.\n\n```java\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n    \n// Horizontal\nOverScrollDecoratorHelper.setUpOverScroll(recyclerView, OverScrollDecoratorHelper.ORIENTATION_HORIZONTAL);\n// Vertical\nOverScrollDecoratorHelper.setUpOverScroll(recyclerView, OverScrollDecoratorHelper.ORIENTATION_VERTICAL);\n```\n\n### RecyclerView with items swiping / dragging\nSee _Advanced Usage_.\n\n\n### ListView\n\n```java\nListView listView = (ListView) findViewById(R.id.list_view);\nOverScrollDecoratorHelper.setUpOverScroll(listView);\n```\n\n### GridView\n\n```java\nGridView gridView = (GridView) findViewById(R.id.grid_view);\nOverScrollDecoratorHelper.setUpOverScroll(gridView);\n```\n\n### ViewPager\n\n```java\nViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);\nOverScrollDecoratorHelper.setUpOverScroll(viewPager);\n```\n\n### ScrollView, HorizontalScrollView\n\n```java\nScrollView scrollView = (ScrollView) findViewById(R.id.scroll_view);\nOverScrollDecoratorHelper.setUpOverScroll(scrollView);\n    \nHorizontalScrollView horizontalScrollView = (HorizontalScrollView) findViewById(R.id.horizontal_scroll_view);\nOverScrollDecoratorHelper.setUpOverScroll(horizontalScrollView);\n```\n\n### Any View - Text, Image... (Always Over-Scroll Ready)\n\n```java\nView view = findViewById(R.id.demo_view);\n    \n// Horizontal\nOverScrollDecoratorHelper.setUpStaticOverScroll(view, OverScrollDecoratorHelper.ORIENTATION_HORIZONTAL);\n// Vertical\nOverScrollDecoratorHelper.setUpStaticOverScroll(view, OverScrollDecoratorHelper.ORIENTATION_VERTICAL);\n```\n\n# Advanced Usage\n\n```java\n// Horizontal RecyclerView\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\nnew HorizontalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView));\n\n// ListView (vertical)\nListView listView = (ListView) findViewById(R.id.list_view);\nnew VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(listView));\n\n// GridView (vertical)\nGridView gridView = (GridView) findViewById(R.id.grid_view);\nnew VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(gridView));\n\n// ViewPager\nViewPager viewPager = (ViewPager) findViewById(R.id.view_pager);\nnew HorizontalOverScrollBounceEffectDecorator(new ViewPagerOverScrollDecorAdapter(viewPager));\n\n// A simple TextView - horizontal\nView textView = findViewById(R.id.title);\nnew HorizontalOverScrollBounceEffectDecorator(new StaticOverScrollDecorAdapter(view));\n```\n\n### RecyclerView with [ItemTouchHelper](http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html) based swiping / dragging\nAs of version 1.0.1, the effect can work smoothly with the RecyclerView's built-in mechanism for items swiping and dragging (based on [ItemTouchHelper](http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html)). BUT, it requires some (very little) explicit configuration work:\n\n```java\n// Normally you would attach an ItemTouchHelper & a callback to a RecyclerView, this way:\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\nItemTouchHelper.Callback myCallback = new ItemTouchHelper.Callback() {\n\t...\n};\nItemTouchHelper myHelper = new ItemTouchHelper(myCallback);\nmyHelper.attachToRecyclerView(recyclerView);\n\n// INSTEAD of attaching the helper yourself, simply use the dedicated adapter c'tor, e.g.:\nnew VerticalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView, myCallback));\n\n```\n\nFor more info on the swiping / dragging mechanism, try [this useful tutorial](https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf).\n\n### Over-Scroll Listeners\nAs of version 1.0.2, the effect provides a means for registering listeners of over-scroll related events. There are two types of listeners, as follows.\n\n#### State-Change Listener\nThe over-scroll manager dispatches events onto a state-change listener denoting transitions in the effect's state:\n\n```java\n\n// Note: over-scroll is set-up using the helper method.\nIOverScrollDecor decor = OverScrollDecoratorHelper.setUpOverScroll(recyclerView, OverScrollDecoratorHelper.ORIENTATION_HORIZONTAL);\n\ndecor.setOverScrollStateListener(new IOverScrollStateListener() {\n    @Override\n\tpublic void onOverScrollStateChange(IOverScrollDecor decor, int oldState, int newState) {\n\t    switch (newState) {\n\t        case STATE_IDLE:\n\t            // No over-scroll is in effect.\n\t            break;\n\t        case STATE_DRAG_START_SIDE:\n\t            // Dragging started at the left-end.\n\t            break;\n\t        case STATE_DRAG_END_SIDE:\n\t            // Dragging started at the right-end.\n\t            break;\n\t        case STATE_BOUNCE_BACK:\n\t            if (oldState == STATE_DRAG_START_SIDE) {\n\t                // Dragging stopped -- view is starting to bounce back from the *left-end* onto natural position.\n\t            } else { // i.e. (oldState == STATE_DRAG_END_SIDE)\n\t                // View is starting to bounce back from the *right-end*.\n\t            }\n\t            break;\n\t    }\n\t}\n}\n```\n\n#### Real-time Updates Listener\nThe over-scroll manager can also dispatch *real-time*, as-it-happens over-scroll events denoting the current offset resulting due to an over-scroll being in-effect (the offset thus denotes the current 'intensity').\n\n```java\n// Note: over-scroll is set-up by explicity instantiating a decorator rather than using the helper; The two methods can be used interchangeably for registering listeners.\nVerticalOverScrollBounceEffectDecorator decor = new VerticalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView, itemTouchHelperCallback));\n\ndecor.setOverScrollUpdateListener(new IOverScrollUpdateListener() {\n    @Override\n    public void onOverScrollUpdate(IOverScrollDecor decor, int state, float offset) {\n    \tfinal View view = decor.getView();\n    \tif (offset > 0) {\n    \t\t// 'view' is currently being over-scrolled from the top.\n    \t} else if (offset < 0) {\n    \t\t// 'view' is currently being over-scrolled from the bottom.\n    \t} else {\n    \t\t// No over-scroll is in-effect.\n    \t\t// This is synonymous with having (state == STATE_IDLE).\n    \t}\n    }\n});\n\n```\n\n\nThe two type of listeners can be used either separately or in conjunction, depending on your needs. Refer to the demo project's RecyclerView-demo section for actual concrete usage.\n    \n### Custom Views\n\n```java\npublic class CustomView extends View {\n    // ...\n}\n    \nfinal CustomView view = (CustomView) findViewById(R.id.custom_view);\nnew VerticalOverScrollBounceEffectDecorator(new IOverScrollDecoratorAdapter() {\n\n    @Override\n    public View getView() {\n        return view;\n    }\n\n    @Override\n    public boolean isInAbsoluteStart() {\n\t    // canScrollUp() is an example of a method you must implement\n        return !view.canScrollUp();\n    }\n\n    @Override\n    public boolean isInAbsoluteEnd() {\n\t     // canScrollDown() is an example of a method you must implement\n        return !view.canScrollDown();\n    }\n});\n```\n\n### Effect Behavior Configuration\n\n```java\n/// Make over-scroll applied over a list-view feel more 'stiff'\nnew VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(view),\n        5f, // Default is 3\n        VerticalOverScrollBounceEffectDecorator.DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK,\n        VerticalOverScrollBounceEffectDecorator.DEFAULT_DECELERATE_FACTOR);\n                \n// Make over-scroll applied over a list-view bounce-back more softly\nnew VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(view),\n        VerticalOverScrollBounceEffectDecorator.DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD,\n        VerticalOverScrollBounceEffectDecorator.DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK,\n        -1f // Default is -2\n        );\n```\n\n### Dynamic Effect Disabling\n\nAs of version 1.0.4, the effect can be dynamically disabled (detached) and reenabled (attached) at runtime:\n\n```java\nIOverScrollDecor decor = OverScrollDecoratorHelper.setUpOverScroll(view);\n\n// Detach. You are strongly encouraged to only call this when overscroll isn't\n// in-effect: Either add getCurrentState()==STATE_IDLE as a precondition,\n// or use a state-change listener.\ndecor.detach();\n// Attach.\ndecor.attach();\n```\n\n`attach()` and `detach()` can be used repeatedly - as necessary, as can be seen in the demo project (refer to action-bar menu in recycler-view demo).\n\n## Credits\n\nApp icons by <a href=\"http://somerandomdude.com/work/iconic/\">P.J. Onori</a>,\n<a href=\"http://graphicriver.net/item/wirecons-vector-icons/4586710?ref=tmthymllr\">Timothy Miller</a>,\n<a href=\"http://icons4android.com\">Icons4Android</a>, \n<a href=\"http://icons8.com/android-icons\">Icons8.com</a>\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.4482421875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext {\n        _isOverscrollDecor = true\n    }\n\n    repositories {\n        mavenCentral()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.0.2'\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.88671875,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\nandroid.enableJetifier=true\nandroid.useAndroidX=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "liboverscroll",
          "type": "tree",
          "content": null
        },
        {
          "name": "recyclerview_demo.gif",
          "type": "blob",
          "size": 470.88671875,
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0322265625,
          "content": "include ':app', ':liboverscroll'\n"
        }
      ]
    }
  ]
}