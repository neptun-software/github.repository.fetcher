{
  "metadata": {
    "timestamp": 1736608949174,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mcxiaoke/android-volley",
      "stars": 4292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.185546875,
          "content": "*~\n.gradle\ngen\nbin\nlocal.properties\n*.apk\n.*.swp\n.idea\ngen-external-apklibs\ntarget\nclasses\nproject.properties\n*.iml\n.DS_Store\nout\n.gradle\nbuild\n.settings\ntarget\n*.iml\n.idea\nlocal.properties\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 1.0234375,
          "content": "#\n# Copyright (C) 2011 The Android Open Source Project\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := volley\nLOCAL_SDK_VERSION := 17\nLOCAL_SRC_FILES := $(call all-java-files-under, src/main/java)\n\ninclude $(BUILD_STATIC_JAVA_LIBRARY)\n\n# Include this library in the build server's output directory\n# TODO: Not yet.\n#$(call dist-for-goals, dist_files, $(LOCAL_BUILT_MODULE):volley.jar)\n\n# Include build files in subdirectories\ninclude $(call all-makefiles-under,$(LOCAL_PATH))\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.943359375,
          "content": "## DEPRECATED\n\n### Please note, this project is deprecated and no longer being maintained, please use official version [volley](https://github.com/google/volley).\n\n----------\n\n# Intro  \n\nThis is an unofficial mirror (with some minor bugfix) for [volley](https://android.googlesource.com/platform/frameworks/volley).\n\n* [![Maven Central](http://img.shields.io/badge/2015.09.08-com.mcxiaoke.volley:library:1.0.19-brightgreen.svg)](http://search.maven.org/#artifactdetails%7Ccom.mcxiaoke.volley%7Clibrary%7C1.0.19%7Cjar)\n\n## Gradle\n\n``` groovy\ncompile 'com.mcxiaoke.volley:library:1.0.19'\n```\n\n## Contacts\n\n* Blog: <http://blog.mcxiaoke.com>\n* Github: <https://github.com/mcxiaoke>\n* Email: [github@mcxiaoke.com](mailto:github@mcxiaoke.com)\n\n## Projects\n\n* Awesome-Kotlin:<https://github.com/mcxiaoke/awesome-kotlin>\n* Kotlin-Koi:<https://github.com/mcxiaoke/kotlin-koi>\n* Android-Next: <https://github.com/mcxiaoke/Android-Next>\n* Packer-Ng: <https://github.com/mcxiaoke/packer-ng-plugin>\n* Gradle-Packer: <https://github.com/mcxiaoke/gradle-packer-plugin>\n* xBus: <https://github.com/mcxiaoke/xBus>\n* RxJava Docs: <https://github.com/mcxiaoke/RxDocs>\n* MQTT-CN: <https://github.com/mcxiaoke/mqtt>\n* Minicat App: <https://github.com/mcxiaoke/minicat>\n* Fanfou App: <https://github.com/mcxiaoke/fanfouapp-opensource>\n\n## License\n\n\n    Copyright (C) 2014,2015,2016 Xiaoke Zhang\n    Copyright (C) 2011 The Android Open Source Project\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.8359375,
          "content": "// NOTE: The only changes that belong in this file are the definitions\n// of tool versions (gradle plugin, compile SDK, build tools), so that\n// Volley can be built via gradle as a standalone project.\n//\n// Any other changes to the build config belong in rules.gradle, which\n// is used by projects that depend on Volley but define their own\n// tools versions across all dependencies to ensure a consistent build.\n//\n// Most users should just add this line to settings.gradle:\n//     include(\":volley\")\n//\n// If you have a more complicated Gradle setup you can choose to use\n// this instead:\n//     include(\":volley\")\n//     project(':volley').buildFileName = 'rules.gradle'\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.1'\n    }\n}\n\napply plugin: 'com.android.library'\n\nallprojects {\n    group project.GROUP\n    version project.VERSION_NAME\n\n    repositories {\n        mavenCentral()\n    }\n\n    tasks.withType(JavaCompile) {\n        options.encoding = 'UTF-8'\n    }\n}\n\ndependencies {\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'\n    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'\n    testCompile 'junit:junit:4.12'\n    testCompile \"org.mockito:mockito-core:1.9.5\"\n    testCompile 'org.robolectric:robolectric:2.4'\n}\n\n\nandroid {\n    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)\n    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION\n\n    defaultConfig {\n        minSdkVersion 8\n        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)\n    }\n\n    lintOptions {\n        quiet true\n        abortOnError false\n    }\n}\n\napply from: 'https://raw.github.com/mcxiaoke/gradle-mvn-push/master/jar.gradle'\napply from: 'https://raw.github.com/mcxiaoke/gradle-mvn-push/master/gradle-mvn-push.gradle'\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 3.826171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"volley\" default=\"help\">\n\n    <!-- The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. -->\n    <property file=\"local.properties\" />\n\n    <!-- The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         -->\n    <property file=\"ant.properties\" />\n\n    <!-- if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir -->\n    <property environment=\"env\" />\n    <condition property=\"sdk.dir\" value=\"${env.ANDROID_HOME}\">\n        <isset property=\"env.ANDROID_HOME\" />\n    </condition>\n\n    <!-- The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. -->\n    <loadproperties srcFile=\"project.properties\" />\n\n    <!-- quick check on sdk.dir -->\n    <fail\n            message=\"sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable.\"\n            unless=\"sdk.dir\"\n    />\n\n    <!--\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    -->\n    <import file=\"custom_rules.xml\" optional=\"true\" />\n\n    <!-- Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    -->\n    <!-- version-tag: 1 -->\n    <import file=\"${sdk.dir}/tools/ant/build.xml\" />\n\n</project>\n"
        },
        {
          "name": "custom_rules.xml",
          "type": "blob",
          "size": 0.3310546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"volley-rules\" default=\"help\">\n\n  <!-- A rule to generate the JAR for inclusion in an Android\n       application. Output file will be bin/volley.jar -->\n  <target name=\"jar\" depends=\"-compile\">\n    <jar destfile=\"bin/volley.jar\"\n         basedir=\"bin/classes\" />\n  </target>\n</project>\n"
        },
        {
          "name": "deploy.sh",
          "type": "blob",
          "size": 0.0732421875,
          "content": "#!/usr/bin/env bash\n./gradlew -x test clean assembleRelease uploadArchives\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7822265625,
          "content": "VERSION_NAME=1.0.19\nVERSION_CODE=20\nGROUP=com.mcxiaoke.volley\n\nPOM_DESCRIPTION=Volley is a network library from Android source code.\nPOM_URL=https://github.com/mcxiaoke/android-volley\nPOM_SCM_URL=https://github.com/mcxiaoke/android-volley\nPOM_SCM_CONNECTION=scm:git:git@github.com:mcxiaoke/android-volley.git\nPOM_SCM_DEV_CONNECTION=scm:git:git@github.com:mcxiaoke/android-volley.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=mcxiaoke\nPOM_DEVELOPER_NAME=Xiaoke Zhang\nPOM_DEVELOPER_EMAIL=support@mcxiaoke.com\n\nANDROID_BUILD_TARGET_SDK_VERSION=22\nANDROID_BUILD_TOOLS_VERSION=22.0.1\nANDROID_BUILD_SDK_VERSION=22\n\nPOM_NAME=Android-Volley Library\nPOM_ARTIFACT_ID=library\nPOM_PACKAGING=aar\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 5.4912109375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.android.volley</groupId>\n  <artifactId>volley</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>volley</name>\n  <url>http://android.com</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n    <java.version>1.6</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.google.android</groupId>\n      <artifactId>android</artifactId>\n      <version>4.1.1.4</version>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.robolectric</groupId>\n      <artifactId>robolectric</artifactId>\n      <version>2.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n       <artifactId>mockito-core</artifactId>\n       <version>1.9.5</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>com.jayway.maven.plugins.android.generation2</groupId>\n          <artifactId>android-maven-plugin</artifactId>\n          <version>3.8.1</version>\n          <configuration>\n            <sdk>\n              <platform>19</platform>\n            </sdk>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.0</version>\n          <configuration>\n            <source>${java.version}</source>\n            <target>${java.version}</target>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>debug</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n        <property>\n          <name>performDebugBuild</name>\n          <value>true</value>\n        </property>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>2.18.1</version>\n            <executions>\n              <execution>\n                <id>default-test</id>\n                <configuration>\n                  <argLine>${surefireArgLine}</argLine>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.jacoco</groupId>\n            <artifactId>jacoco-maven-plugin</artifactId>\n            <!-- don't upgrade the version. newer versions generate different results\n             see https://github.com/jacoco/jacoco/issues/286 -->\n            <version>0.7.2.201409121644</version>\n            <executions>\n              <execution>\n                <id>pre-unit-test</id>\n                <goals>\n                  <goal>prepare-agent</goal>\n                </goals>\n                <configuration>\n                  <destFile>${project.build.directory}/surefire-reports/jacoco-ut.exec</destFile>\n                  <propertyName>surefireArgLine</propertyName>\n                </configuration>\n              </execution>\n              <execution>\n                <id>jacoco-report</id>\n                <phase>post-integration-test</phase>\n                <goals>\n                  <goal>report</goal>\n                  <goal>check</goal>\n                </goals>\n                <configuration>\n                  <dataFile>${project.build.directory}/surefire-reports/jacoco-ut.exec</dataFile>\n                  <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>\n                  <rules>\n                    <rule>\n                      <element>BUNDLE</element>\n                      <limits>\n                        <limit>\n                          <counter>INSTRUCTION</counter>\n                          <value>COVEREDRATIO</value>\n                          <minimum>0.40</minimum>\n                        </limit>\n                        <!-- enable this if you want that the build breaks if there is a class without a test -->\n                        <!--\n                        <limit>\n                          <counter>CLASS</counter>\n                          <value>MISSEDCOUNT</value>\n                          <maximum>0</maximum>\n                        </limit>\n                        -->\n                      </limits>\n                    </rule>\n                    <!-- enable this if you want a limit for each java class -->\n                    <!--\n                    <rule>\n                      <element>CLASS</element>\n                      <excludes>\n                        <exclude>*Test</exclude>\n                      </excludes>\n                      <limits>\n                        <limit>\n                          <counter>LINE</counter>\n                          <value>COVEREDRATIO</value>\n                          <minimum>0.10</minimum>\n                        </limit>\n                      </limits>\n                    </rule>\n                    -->\n                  </rules>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "proguard-project.txt",
          "type": "blob",
          "size": 0.7626953125,
          "content": "# To enable ProGuard in your project, edit project.properties\n# to define the proguard.config property as described in that file.\n#\n# Add project specific ProGuard rules here.\n# By default, the flags in this file are appended to flags specified\n# in ${sdk.dir}/tools/proguard/proguard-android.txt\n# You can edit the include path and order by changing the ProGuard\n# include property in project.properties.\n#\n# For more details, see\n#   http://developer.android.com/guide/developing/tools/proguard.html\n\n# Add any project specific keep options here:\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n"
        },
        {
          "name": "proguard.cfg",
          "type": "blob",
          "size": 1.21875,
          "content": "-optimizationpasses 5\n-dontusemixedcaseclassnames\n-dontskipnonpubliclibraryclasses\n-dontpreverify\n-verbose\n-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*\n\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n-keep public class * extends android.content.BroadcastReceiver\n-keep public class * extends android.content.ContentProvider\n-keep public class * extends android.app.backup.BackupAgentHelper\n-keep public class * extends android.preference.Preference\n-keep public class com.android.vending.licensing.ILicensingService\n\n-keepclasseswithmembernames class * {\n    native <methods>;\n}\n\n-keepclasseswithmembers class * {\n    public <init>(android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembers class * {\n    public <init>(android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers class * extends android.app.Activity {\n   public void *(android.view.View);\n}\n\n-keepclassmembers enum * {\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n\n-keep class * implements android.os.Parcelable {\n  public static final android.os.Parcelable$Creator *;\n}\n"
        },
        {
          "name": "rules.gradle",
          "type": "blob",
          "size": 0.095703125,
          "content": "// See build.gradle for an explanation of what this file is.\n\napply plugin: 'com.android.library'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}