{
  "metadata": {
    "timestamp": 1736608891313,
    "page": 73,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pardom-zz/ActiveAndroid",
      "stars": 4693,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3232421875,
          "content": "#Android generated\nbin\ngen\nlint.xml\n\n#Eclipse\n.project\n.classpath\n.settings\n.checkstyle\n\n#IntelliJ IDEA\n.idea\n*.iml\n*.ipr\n*.iws\nclasses\ngen-external-apklibs\n\n#Maven\ntarget\nrelease.properties\npom.xml.*\n\n#Ant\nant.properties\nlocal.properties\nproguard.cfg\nproguard-project.txt\n\n#Other\n.DS_Store\ndist/\ntmp\n\n# Gradle\n.gradle\n/build\n/out\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.4658203125,
          "content": "language: java\njdk: oraclejdk7\nenv: ANDROID_SDK=android-16 ANDROID_ABI=armeabi-v7a\n\nbefore_install:\n  # Install ia32-libs (necessary for Android SDK to run on 64-bit linux)\n  # - sudo apt-get clean && sudo apt-get update\n  - sudo apt-get update -qq\n  - sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch\n\n  # Install Android SDK\n  - wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz\n  - tar -zxf android-sdk_r22.6.2-linux.tgz\n  - ls\n  - export ANDROID_HOME=`pwd`/android-sdk-linux\n  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\n\n  # Install build-tools\n  - wget https://dl-ssl.google.com/android/repository/build-tools_r19.0.3-linux.zip\n  - unzip build-tools_r19.0.3-linux.zip -d $ANDROID_HOME\n  - mkdir -p $ANDROID_HOME/build-tools/\n  - mv $ANDROID_HOME/android-4.4.2 $ANDROID_HOME/build-tools/19.0.1\n\n  # Install required Android components\n  - android list sdk --extended\n  # Do you accept the license 'android-sdk-license-bcbbd656' [y/n]:\n  - echo -ne \"y\\n\" | android update sdk --filter system-image,platform-tools,extra-android-support,$ANDROID_SDK --no-ui --force\n\n  # Create and start emulator\n  - echo no | android create avd --force -n test -t $ANDROID_SDK --abi $ANDROID_ABI\n  - android list avds\n  - emulator -avd test -no-skin -no-audio -no-window &\n\nbefore_script:\n  # Make sure the emulator has started before running tests\n  - chmod +x ./wait_for_emulator\n  - ./wait_for_emulator\n\nscript:\n  - mvn clean install -e\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2294921875,
          "content": "[![Build Status](https://travis-ci.org/pardom/ActiveAndroid.png?branch=master)](https://travis-ci.org/pardom/ActiveAndroid) [![Stories in Ready](https://badge.waffle.io/pardom/ActiveAndroid.png)](http://waffle.io/pardom/ActiveAndroid)  \n# ActiveAndroid\n\nActiveAndroid is an active record style ORM ([object relational mapper](http://en.wikipedia.org/wiki/Object-relational_mapping)). What does that mean exactly? Well, ActiveAndroid allows you to save and retrieve SQLite database records without ever writing a single SQL statement. Each database record is wrapped neatly into a class with methods like _save()_ and _delete()_.\n\nActiveAndroid does so much more than this though. Accessing the database is a hassle, to say the least, in Android. ActiveAndroid takes care of all the setup and messy stuff, and all with just a few simple steps of configuration.\n\n## Download\n\nGrab via Maven:\n```xml\n<dependency>\n  <groupId>com.michaelpardo</groupId>\n  <artifactId>activeandroid</artifactId>\n  <version>3.1.0-SNAPSHOT</version>\n</dependency>\n```\nor Gradle:\n```groovy\nrepositories {\n    mavenCentral()\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n}\n\ncompile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'\n```\n\n## Documentation\n\n* [Getting started](http://github.com/pardom/ActiveAndroid/wiki/Getting-started)\n* [Creating your database model](http://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model)\n* [Saving to the database](http://github.com/pardom/ActiveAndroid/wiki/Saving-to-the-database)\n* [Querying the database](http://github.com/pardom/ActiveAndroid/wiki/Querying-the-database)\n* [Type serializers](http://github.com/pardom/ActiveAndroid/wiki/Type-serializers)\n* [Using the content provider](http://github.com/pardom/ActiveAndroid/wiki/Using-the-content-provider)\n* [Schema migrations](http://github.com/pardom/ActiveAndroid/wiki/Schema-migrations)\n* [Pre-populated-databases](http://github.com/pardom/ActiveAndroid/wiki/Pre-populated-databases)\n* [Running the Test Suite](https://github.com/pardom/ActiveAndroid/wiki/Running-the-Test-Suite)\n\n## License\n\n[Apache Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n\n    Copyright (C) 2010 Michael Pardo\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n## Contributing\n\nPlease fork this repository and contribute back using [pull requests](http://github.com/pardom/ActiveAndroid/pulls).\n\nAny contributions, large or small, major features, bug fixes, unit tests are welcomed and appreciated but will be thoroughly reviewed and discussed.\n\nYou can run the test suite by following the instructions on the [Running the Test Suite](https://github.com/pardom/ActiveAndroid/wiki/Running-the-Test-Suite) Wiki page.\n\n\n## Author\n\nMichael Pardo | www.michaelpardo.com | www.activeandroid.com\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.232421875,
          "content": "apply plugin: 'java'\napply from: 'gradle-mvn-push.gradle'\n\ntargetCompatibility = '1.6'\nsourceCompatibility = '1.6'\n\nsourceSets {\n\tmain {\n\t\tjava {\n\t\t\tsrcDir 'src'\n\t\t}\n\t}\n}\n\ndependencies {\n\tcompile fileTree(dir: 'libs', include: '*.jar')\n}\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 0.8798828125,
          "content": "<?xml version=\"1.0\"?>\n<project name=\"ActiveAndroid\" default=\"dist\" basedir=\".\">\n\n\t<property name=\"dist.dir\"  value=\"dist\" />\n    <property name=\"src.dir\"   value=\"src\" />\n\t<property name=\"build.dir\" value=\"bin\" />\n\t<property name=\"lib.dir\"   value=\"libs\"/>\n\t\n\t<target name=\"dist\" depends=\"clean, package\" />\n\n\t<target name=\"clean\">\n\t\t<delete dir=\"${build.dir}\" />\n\t\t<delete dir=\"${dist.dir}\" />\n\t</target>\n\n\t<target name=\"init\">\n\t\t<mkdir dir=\"${build.dir}\"/>\n\t\t<mkdir dir=\"${dist.dir}\" />\n\t</target>\n\n\t<path id=\"classpath\">\n        <fileset dir=\"${lib.dir}\" includes=\"**/*.jar\"/>\n    </path>\n    \n\t<target name=\"compile\">\n    \t<javac srcdir=\"${src.dir}\" destdir=\"${build.dir}\" source=\"1.5\" target=\"1.5\" classpathref=\"classpath\" debug=\"off\" />\n\t</target>\n\t\t\n\t<target name=\"package\" depends=\"init, compile\">\n\t\t<jar destfile=\"${dist.dir}/ActiveAndroid.jar\" basedir=\"${build.dir}\"/>\n\t</target>\n</project>\n"
        },
        {
          "name": "gradle-mvn-push.gradle",
          "type": "blob",
          "size": 2.7861328125,
          "content": "/*\n * Copyright 2013 Chris Banes\n * Copyright 2014 Michael Pardo\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\napply plugin: 'maven'\napply plugin: 'signing'\n\ndef isReleaseBuild() {\n\treturn VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef getReleaseRepositoryUrl() {\n\treturn hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n\t\t\t: \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n\treturn hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n\t\t\t: \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n\treturn hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : \"\"\n}\n\ndef getRepositoryPassword() {\n\treturn hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : \"\"\n}\n\nafterEvaluate { project ->\n\tuploadArchives {\n\t\trepositories {\n\t\t\tmavenDeployer {\n\t\t\t\tbeforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n\t\t\t\tpom.groupId = GROUP\n\t\t\t\tpom.artifactId = POM_ARTIFACT_ID\n\t\t\t\tpom.version = VERSION_NAME\n\n\t\t\t\trepository(url: getReleaseRepositoryUrl()) {\n\t\t\t\t\tauthentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n\t\t\t\t}\n\t\t\t\tsnapshotRepository(url: getSnapshotRepositoryUrl()) {\n\t\t\t\t\tauthentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n\t\t\t\t}\n\n\t\t\t\tpom.project {\n\t\t\t\t\tname POM_NAME\n\t\t\t\t\tpackaging POM_PACKAGING\n\t\t\t\t\tdescription POM_DESCRIPTION\n\t\t\t\t\turl POM_URL\n\n\t\t\t\t\tscm {\n\t\t\t\t\t\turl POM_SCM_URL\n\t\t\t\t\t\tconnection POM_SCM_CONNECTION\n\t\t\t\t\t\tdeveloperConnection POM_SCM_DEV_CONNECTION\n\t\t\t\t\t}\n\n\t\t\t\t\tlicenses {\n\t\t\t\t\t\tlicense {\n\t\t\t\t\t\t\tname POM_LICENCE_NAME\n\t\t\t\t\t\t\turl POM_LICENCE_URL\n\t\t\t\t\t\t\tdistribution POM_LICENCE_DIST\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdevelopers {\n\t\t\t\t\t\tdeveloper {\n\t\t\t\t\t\t\tid POM_DEVELOPER_ID\n\t\t\t\t\t\t\tname POM_DEVELOPER_NAME\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsigning {\n\t\trequired { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n\t\tsign configurations.archives\n\t}\n\n\ttask javadocs(type: Javadoc) {\n\t\tsource = sourceSets.main.allJava\n\t\tclasspath = configurations.compile\n\t}\n\n\ttask javadocsJar(type: Jar, dependsOn: javadocs) {\n\t\tclassifier = 'javadoc'\n\t\tfrom javadocs.destinationDir\n\t}\n\n\ttask sourcesJar(type: Jar) {\n\t\tclassifier = 'sources'\n\t\tfrom sourceSets.main.allJava\n\t}\n\n\tartifacts {\n\t\tarchives sourcesJar\n\t\tarchives javadocsJar\n\t}\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.6279296875,
          "content": "VERSION_NAME=3.1.0-SNAPSHOT\nVERSION_CODE=1\nGROUP=com.michaelpardo\n\nPOM_DESCRIPTION=Active record style SQLite persistence for Android.\nPOM_URL=https://github.com/pardom/ActiveAndroid\nPOM_SCM_URL=https://github.com/pardom/ActiveAndroid\nPOM_SCM_CONNECTION=scm:git@github.com:pardom/ActiveAndroid.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:pardom/ActiveAndroid.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=michaelpardo\nPOM_DEVELOPER_NAME=Michael Pardo\n\nPOM_NAME=ActiveAndroid\nPOM_ARTIFACT_ID=activeandroid\nPOM_PACKAGING=jar\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom-child.xml",
          "type": "blob",
          "size": 3.1875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project\n    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.activeandroid</groupId>\n    <artifactId>activeandroid</artifactId>\n    <version>3.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>ActiveAndroid</name>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n  <parent>\n    <groupId>com.activeandroid</groupId>\n    <artifactId>activeandroid-parent</artifactId>\n    <version>3.1-SNAPSHOT</version>\n    <relativePath>./pom.xml</relativePath>\n  </parent>\n\n    <scm>\n        <connection>scm:git:git@github.com:pardom/ActiveAndroid.git</connection>\n        <developerConnection>scm:git:git@github.com:pardom/ActiveAndroid.git</developerConnection>\n        <url>git@github.com:pardom/ActiveAndroid.git</url>\n    </scm>\n\n    <properties>\n        <java.version>1.6</java.version>\n        <platform.sdk>16</platform.sdk>\n        <platform.version>4.1.1.4</platform.version>\n        <platform.support-version>r7</platform.support-version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.google.android</groupId>\n            <artifactId>android</artifactId>\n            <version>${platform.version}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.google.android</groupId>\n            <artifactId>android-test</artifactId>\n            <version>${platform.version}</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.google.android</groupId>\n            <artifactId>support-v4</artifactId>\n            <version>${platform.support-version}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <sourceDirectory>src</sourceDirectory>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.14.1</version>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>com.jayway.maven.plugins.android.generation2</groupId>\n                <artifactId>android-maven-plugin</artifactId>\n                <version>3.8.2</version>\n                <configuration>\n                    <sdk>\n                        <path>${env.ANDROID_HOME}</path>\n                        <platform>${platform.sdk}</platform>\n                    </sdk>\n                </configuration>\n                <extensions>true</extensions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 1.2060546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.activeandroid</groupId>\n  <artifactId>activeandroid-parent</artifactId>\n  <version>3.1-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>ActiveAndroid - Parent</name>\n\n  <modules>\n    <module>pom-child.xml</module>\n    <module>tests</module>\n  </modules>\n\n    <properties>\n        <java.version>1.6</java.version>\n        <platform.sdk>16</platform.sdk>\n        <platform.version>4.1.1.4</platform.version>\n        <platform.support-version>r7</platform.support-version>\n    </properties>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>com.jayway.maven.plugins.android.generation2</groupId>\n          <artifactId>android-maven-plugin</artifactId>\n          <version>3.8.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.1</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wait_for_emulator",
          "type": "blob",
          "size": 0.34765625,
          "content": "#!/bin/bash\n\nbootanim=\"\"\nfailcounter=0\nuntil [[ \"$bootanim\" =~ \"stopped\" ]]; do\n  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`\n  echo \"$bootanim\"\n  if [[ \"$bootanim\" =~ \"not found\" ]]; then\n    let \"failcounter += 1\"\n    if [[ $failcounter -gt 3 ]]; then\n      echo \"Failed to start emulator\"\n      exit 1\n    fi\n  fi\n  sleep 1\ndone\n\necho \"Done\"\n"
        }
      ]
    }
  ]
}