{
  "metadata": {
    "timestamp": 1736708501647,
    "page": 697,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/docker-maven-plugin",
      "stars": 2665,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2763671875,
          "content": "# Build products and artifacts\n.*\n!/.gitignore\n*.html\n.m2-repository/\ntarget/\npom.xml.versionsBackup\n\n# Stuff from various IDE's and editors\n*.iml\n*~\n.idea/*\n*.ipr\n*.iws\n\n.settings\n.project\n.classpath\nbin\n\n# Mac OS X Finder\n.DS_Store\n\n### Eclipse ###\n.settings/\n.classpath\n.project\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.853515625,
          "content": "# Changelog\n\n## 1.2.0 (released 2018-10-09)\n\n* Support Java 9, 10, and 11.\n* Fix an ExceptionInInitializerError when plugin is used on Java 11 ([401][])\n\n  [401]: https://github.com/spotify/docker-maven-plugin/issues/401\n\n## 1.0.0\n\n### Revamped authentication support\n\nIntegrates [revamped support for authentication from\ndocker-client][RegistryAuthSupplier] into the plugin, making it possible for\nthe plugin to be more flexible in regards to authentication credentials used\nwhen pushing/pulling/building images.\n\nPrevious versions of the plugin had the limitation of using the same\nRegistryAuth header for all images, regardless of what registries they came\nfrom.\n\nIn this version, the docker-maven-plugin will automatically use any\nauthentication present in the docker-cli configuration file at `~/.dockercfg`\nor `~/.docker/config.json`.\n\nAdditionally the plugin will enable support for Google Container Registry if it\nis able to successfully load [Google's \"Application Default Credentials\"][ADC].\nThe plugin will also load Google credentials from the file pointed to by the\nenvironment variable `DOCKER_GOOGLE_CREDENTIALS` if it is defined. Since GCR\nauthentication requires retrieving short-lived access codes for the given\ncredentials, support for this registry is baked into the underlying\ndocker-client rather than having to first populate the docker config file\nbefore running the plugin.\n\nLastly, authentication credentials can be explicitly configured in your pom.xml\nand in your Maven installation's `settings.xml` file as part of the\n`<servers></servers>` block.\n\n[339](https://github.com/spotify/docker-maven-plugin/pull/339)\n\n[RegistryAuthSupplier]: https://github.com/spotify/docker-client/blob/dba55b17d09d4a15aa9d26884b22b230d49fce64/docs/user_manual.md#authentication-to-private-registries\n[ADC]: https://developers.google.com/identity/protocols/application-default-credentials\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.560546875,
          "content": "# Contributing\n\n\n## Response Times\n\nThis project is developed and maintained by an infrastructure team at Spotify. Lots of teams at\nSpotify use relatively recent versions of this project in production for mission-critical systems.\n\nThat being said, this is our day job where our primary users are our colleagues.\nSo we might be slow in getting back to you because we're busy working on Spotify-specific things\nor because your issues are being prioritized behind those of our colleagues.\n\nPlease poke us if you feel you're being neglected, and we'll do our best to get back to you.\n\n## Related Tools You May Find Useful\n\nIf you like this project, you might also like [Helios][2], [docker-client][3], [docker-gc][4],\n[helios-skydns][5], and [helios-consul][6].\n\n## Reporting Bugs\n\nPlease make sure you're using the latest version. This project is\nreleased continuously as it's developed so new releases come out almost as frequently as we\ncommit to master.\n\n## Contributing\n\nBefore creating a new issue, see if there's already an existing issue.\n\nIf you create a minor bugfix, feel free to submit a PR.\nIf your PR is for a significant change or a new feature, feel free to ask for our feedback\nbefore writing code to check we're on the same page.\n\nYou can build and test by following [instructions here][1].\n\n  [1]: https://github.com/spotify/docker-maven-plugin#testing\n  [2]: https://github.com/spotify/helios\n  [3]: https://github.com/spotify/docker-client\n  [4]: https://github.com/spotify/docker-gc\n  [5]: https://github.com/spotify/helios-skydns\n  [6]: https://github.com/spotify/helios-consul\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.5751953125,
          "content": "# docker-maven-plugin\n[![Build Status](https://travis-ci.com/spotify/docker-maven-plugin.svg?branch=master)](https://travis-ci.com/spotify/docker-maven-plugin)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.spotify/docker-maven-plugin/badge.svg?style=flat-square)](https://maven-badges.herokuapp.com/maven-central/com.spotify/docker-maven-plugin/)\n[![License](https://img.shields.io/github/license/spotify/dockerfile-maven.svg)](LICENSE)\n\n\nA Maven plugin for building and pushing Docker images.\n\n## Status: inactive\n\n**We recommend you use [dockerfile-maven][] instead.**\n\n### The future of docker-maven-plugin\n\nThis plugin was the initial Maven plugin used at Spotify for building Docker\nimages out of Java services. It was initially created in 2014 when we first\nbegan experimenting with Docker. This plugin is capable of generating a\n`Dockerfile` for you based on configuration in the pom.xml file for things like\nthe `FROM` image, resources to add with `ADD`/`COPY`, etc.\n\nOver time at Spotify we have realized that the simplest way to build a Docker\nimage from a Java project is to have the developer write the `Dockerfile`.  The\nbehavior of this plugin around generating Dockerfiles, copying your project\ndirectory to a \"staging\" directory to use as the Docker build context, etc.,\nultimately led to a lot of unnecessary confusion with our users that stemmed\nfrom introducing extra abstractions and a need for configuration on top of what\nDocker is providing.\n\nThis led to the creation of a second Maven plugin for building docker images,\n[dockerfile-maven][], which we think offers a simpler mental model of working\nwith Docker from Maven, for all of the reasons outlined in dockerfile-maven's\nREADME.\n\n\n[dockerfile-maven]: https://github.com/spotify/dockerfile-maven\n* [The future of docker-maven-plugin](#the-future-of-docker-maven-plugin)\n* [Purpose](#purpose)\n* [Setup](#setup)\n  * [Specify build info in the POM](#specify-build-info-in-the-pom)\n  * [Use a Dockerfile](#use-a-dockerfile)\n* [Usage](#usage)\n  * [Bind Docker commands to Maven phases](#bind-docker-commands-to-maven-phases)\n  * [Using with Private Registries](#using-with-private-registries)\n  * [Authentication](#authentication)\n    * [Using encrypted passwords for authentication](#using-encrypted-passwords-for-authentication)\n* [Testing](#testing)\n* [Releasing](#releasing)\n* [Known Issues](#known-issues)\n\n\n## Purpose\n\nYou can use this plugin to create a Docker image with artifacts built from your Maven project. For\nexample, the build process for a Java service can output a Docker image that runs the service.\n\n## Setup\n\nYou can specify the base image, entry point, cmd, maintainer and files you want to add to your\nimage directly in the pom, without needing a separate `Dockerfile`.\nIf you need `VOLUME` command(or any other not supported dockerfile command), then you will need\nto create a `Dockerfile` and use the `dockerDirectory` element.\n\nBy default the plugin will try to connect to docker on localhost:2375. Set the DOCKER_HOST \nenvironment variable to connect elsewhere.\n\n    DOCKER_HOST=tcp://<host>:2375\n\nOther docker-standard environment variables are honored too such as TLS and certificates.\n\n### Specify build info in the POM\n\nThis example creates a new image named `example`, copies the project's jar file into the image,\nand sets an entrypoint which runs the jar. Change `VERSION GOES HERE` to the latest tagged version.\n\n    <build>\n      <plugins>\n        ...\n        <plugin>\n          <groupId>com.spotify</groupId>\n          <artifactId>docker-maven-plugin</artifactId>\n          <version>VERSION GOES HERE</version>\n          <configuration>\n            <imageName>example</imageName>\n            <baseImage>java</baseImage>\n            <entryPoint>[\"java\", \"-jar\", \"/${project.build.finalName}.jar\"]</entryPoint>\n            <!-- copy the service's jar file from target into the root directory of the image --> \n            <resources>\n               <resource>\n                 <targetPath>/</targetPath>\n                 <directory>${project.build.directory}</directory>\n                 <include>${project.build.finalName}.jar</include>\n               </resource>\n            </resources>\n          </configuration>\n        </plugin>\n        ...\n      </plugins>\n    </build>\n\n### Use a Dockerfile\n\nTo use a `Dockerfile`, you must specify the `dockerDirectory` element. If specified, the \n`baseImage`, `maintainer`, `cmd` and `entryPoint` elements will be ignored. The contents of the\n`dockerDirectory` will be copied into `${project.build.directory}/docker`. Use the `resources`\nelement to copy additional files, such as the service's jar file.\n\n    <build>\n      <plugins>\n        ...\n        <plugin>\n          <groupId>com.spotify</groupId>\n          <artifactId>docker-maven-plugin</artifactId>\n          <version>VERSION GOES HERE</version>\n          <configuration>\n            <imageName>example</imageName>\n            <dockerDirectory>docker</dockerDirectory>\n            <resources>\n               <resource>\n                 <targetPath>/</targetPath>\n                 <directory>${project.build.directory}</directory>\n                 <include>${project.build.finalName}.jar</include>\n               </resource>\n            </resources>\n          </configuration>\n        </plugin>\n        ...\n      </plugins>\n    </build>\n\n## Usage\n\nYou can build an image with the above configurations by running this command.\n\n    mvn clean package docker:build\n\nTo push the image you just built to the registry, specify the `pushImage` flag.\n\n    mvn clean package docker:build -DpushImage\n\nTo push only specific tags of the image to the registry, specify the `pushImageTag` flag.\n\n    mvn clean package docker:build -DpushImageTag\n\nIn order for this to succeed, at least one imageTag must be present in the config, multiple tags can be used.\n\n    <build>\n      <plugins>\n        ...\n        <plugin>\n          <configuration>\n            ...\n            <imageTags>\n               <imageTag>${project.version}</imageTag>\n               <imageTag>latest</imageTag>\n            </imageTags>\n          </configuration>\n        </plugin>\n        ...\n      </plugins>\n    </build>\n\nOptionally, you can force docker to overwrite your image tags on each new build:\n\n    <build>\n      <plugins>\n        ...\n        <plugin>\n          <configuration>\n            ...\n            <!-- optionally overwrite tags every time image is built with docker:build -->\n            <forceTags>true</forceTags>\n            <imageTags>\n               ...\n            </imageTags>\n          </configuration>\n        </plugin>\n        ...\n      </plugins>\n    </build>\n\nTags-to-be-pushed can also be specified directly on the command line with\n\n    mvn ... docker:build -DpushImageTag -DdockerImageTags=latest,another-tag\n\n### Bind Docker commands to Maven phases\n\nYou can also bind the build, tag & push goals to the Maven phases, so the container will be built, tagged and pushed \nwhen you run just `mvn deploy`. If you have a multi-module project where a sub-module builds an image, you\nwill need to do this binding so the image gets built when maven is run from the parent project. \n\n    <plugin>\n      <groupId>com.spotify</groupId>\n      <artifactId>docker-maven-plugin</artifactId>\n      <version>VERSION GOES HERE</version>\n      <executions>\n        <execution>\n          <id>build-image</id>\n          <phase>package</phase>\n          <goals>\n            <goal>build</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>tag-image</id>\n          <phase>package</phase>\n          <goals>\n            <goal>tag</goal>\n          </goals>\n          <configuration>\n            <image>my-image:${project.version}</image>\n            <newName>registry.example.com/my-image:${project.version}</newName>\n          </configuration>\n        </execution>\n        <execution>\n          <id>push-image</id>\n          <phase>deploy</phase>\n          <goals>\n            <goal>push</goal>\n          </goals>\n          <configuration>\n            <imageName>registry.example.com/my-image:${project.version}</imageName>\n          </configuration>\n        </execution>        \n      </executions>\n    </plugin>\n\nYou can skip Docker goals bound to Maven phases with:\n\n* `-DskipDockerBuild` to skip image build\n* `-DskipDockerTag` to skip image tag\n* `-DskipDockerPush` to skip image push\n* `-DskipDocker` to skip any Docker goals\n\nTo remove the image named `foobar` run the following command:\n\n    mvn docker:removeImage -DimageName=foobar\n\nFor a complete list of configuration options run:\n`mvn com.spotify:docker-maven-plugin:<version>:help -Ddetail=true`\n\n### Using with Private Registries\n\nTo push an image to a private registry, Docker requires that the image tag\nbeing pushed is prefixed with the hostname and port of the registry. For\nexample to push `my-image` to `registry.example.com`, the image needs to be\ntagged as `registry.example.com/my-image`.\n\nThe simplest way to do this with docker-maven-plugin is to put the registry\nname in the `<imageName>` field, for example\n\n```xml\n<plugin>\n  <groupId>com.spotify</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <configuration>\n    <imageName>registry.example.com/my-image</imageName>\n    ...\n```\n\nThen when pushing the image with either `docker:build -DpushImage` or\n`docker:push`, the docker daemon will push to `registry.example.com`.\n\nAlternatively, if you wish to use a short name in `docker:build` you can use\n`docker:tag -DpushImage` to tag the just-built image with the full registry\nhostname and push it. It's important to use the `pushImage` flag as using\n`docker:push` independently will attempt to push the original image.\n\nFor example:\n\n```xml\n<plugin>\n  <groupId>com.spotify</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <configuration>\n    <imageName>my-image</imageName>\n    ...\n  </configuration>\n  <executions>\n    <execution>\n      <id>build-image</id>\n      <phase>package</phase>\n      <goals>\n        <goal>build</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>tag-image</id>\n      <phase>package</phase>\n      <goals>\n        <goal>tag</goal>\n      </goals>\n      <configuration>\n        <image>my-image</image>\n        <newName>registry.example.com/my-image</newName>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n### Authentication\n\nSince version 1.0.0, the docker-maven-plugin will automatically use any\nauthentication present in the docker-cli configuration file at `~/.dockercfg`\nor `~/.docker/config.json`, without the need to configure anything (in earlier\nversions of the plugin this behavior had to be enabled with\n`<useConfigFile>true</useConfigFile>`, but now it is always active).\n\nAdditionally the plugin will enable support for Google Container Registry if it\nis able to successfully load [Google's \"Application Default Credentials\"][ADC].\nThe plugin will also load Google credentials from the file pointed to by the\nenvironment variable `DOCKER_GOOGLE_CREDENTIALS` if it is defined. Since GCR\nauthentication requires retrieving short-lived access codes for the given\ncredentials, support for this registry is baked into the underlying\ndocker-client rather than having to first populate the docker config file\nbefore running the plugin.\n\n[ADC]: https://developers.google.com/identity/protocols/application-default-credentials\n\nLastly, authentication credentials can be explicitly configured in your pom.xml\nand in your Maven installation's `settings.xml` file as part of the\n`<servers></servers>` block.\n\n    <servers>\n      <server>\n        <id>docker-hub</id>\n        <username>foo</username>\n        <password>secret-password</password>\n        <configuration>\n          <email>foo@foo.bar</email>\n        </configuration>\n      </server>\n    </servers>\n\nNow use the server id in your project `pom.xml`.\n\n    <plugin>\n      <plugin>\n        <groupId>com.spotify</groupId>\n        <artifactId>docker-maven-plugin</artifactId>\n        <version>VERSION GOES HERE</version>\n        <configuration>\n          [...]\n          <serverId>docker-hub</serverId>\n          <registryUrl>https://index.docker.io/v1/</registryUrl>\n        </configuration>\n      </plugin>\n    </plugins>\n\nThe plugin gives priority to any credentials in the docker-cli config file\nbefore explicitly configured credentials.\n\n#### Using encrypted passwords for authentication\n\nCredentials can be encrypted using [Maven's built in encryption function.](https://maven.apache.org/guides/mini/guide-encryption.html)\nOnly passwords enclosed in curly braces will be considered as encrypted.\n\n    <servers>\n      <server>\n        <id>docker-hub</id>\n        <username>foo</username>\n        <password>{gc4QPLrlgPwHZjAhPw8JPuGzaPitzuyjeBojwCz88j4=}</password>\n      </server>\n    </servers>\n\n## Testing\n\nMake sure Docker daemon is running and that you can do `docker ps`. Then run `mvn clean test`.\n\n## Releasing\n\nCommits to the master branch will trigger our continuous integration agent to build the jar and\nrelease by uploading to Sonatype. If you are a project maintainer with the necessary credentials,\nyou can also build and release locally by running the below.\n\n```sh\nmvn release:clean\nmvn release:prepare\nmvn release:perform\n```\n\n## Known Issues\n\n### Exception caught: system properties: docker has type STRING rather than OBJECT\n\nBecause the plugin uses Maven properties named like\n`docker.build.defaultProfile`, if you declare any other Maven property with the\nname `docker` you will get a rather strange-looking error from Maven:\n\n```\n[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:0.0.21:build (default) on project <....>: \nException caught: system properties: docker has type STRING rather than OBJECT\n```\n\nTo fix this, rename the `docker` property in your pom.xml.\n\n### InternalServerErrorException: HTTP 500 Internal Server Error\n\nProblem: when building the Docker image, Maven outputs an exception with a\nstacktrace like:\n\n> Caused by: com.spotify.docker.client.shaded.javax.ws.rs.InternalServerErrorException: HTTP 500 Internal Server Error\n\ndocker-maven-plugin communicates with your local Docker daemon using the HTTP\nRemote API and any unexpected errors that the daemon encounters will be\nreported as `500 Internal Server Error`.\n\nCheck the Docker daemon log (typically at `/var/log/docker.log` or\n`/var/log/upstart/docker.log`) for more details.\n\n#### Invalid repository name ... only [a-z0-9-\\_.] are allowed\n\nOne common cause of `500 Internal Server Error` is attempting to build an image\nwith a repository name containing uppercase characters, such as if the\n`<imageName>` in the plugin's configuration refers to `${project.version}` when\nthe Maven project version is ending in `SNAPSHOT`.\n\nConsider putting the project version in an image tag (instead of repository\nname) with the `<dockerImageTags>` configuration option instead.\n"
        },
        {
          "name": "checkstyle-suppressions.xml",
          "type": "blob",
          "size": 0.265625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE suppressions PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://www.puppycrawl.com/dtds/suppressions_1_0.dtd\">\n\n<suppressions>\n  <suppress files=\"HelpMojo.java\" checks=\"[a-zA-Z0-9]*\"/>\n</suppressions>\n"
        },
        {
          "name": "checkstyle.xml",
          "type": "blob",
          "size": 10.146484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n<!-- This is a checkstyle configuration file. For descriptions of\nwhat the following rules do, please see the checkstyle configuration\npage at http://checkstyle.sourceforge.net/config.html -->\n\n<module name=\"Checker\">\n\n  <module name=\"SuppressionFilter\">\n    <property name=\"file\" value=\"checkstyle-suppressions.xml\"/>\n  </module>\n\n  <module name=\"Header\">\n    <property name=\"headerFile\" value=\"java.header\"/>\n    <property name=\"ignoreLines\" value=\"2, 3\"/>\n    <property name=\"fileExtensions\" value=\"java\"/>\n  </module>\n\n  <module name=\"FileTabCharacter\">\n    <!-- Checks that there are no tab characters in the file.\n    -->\n  </module>\n\n  <module name=\"NewlineAtEndOfFile\">\n    <property name=\"lineSeparator\" value=\"lf\"/>\n  </module>\n\n  <module name=\"RegexpSingleline\">\n    <!-- Checks that FIXME is not used in comments.  TODO is preferred.\n    -->\n    <property name=\"format\" value=\"((//.*)|(\\*.*))FIXME\" />\n    <property name=\"message\" value='TODO is preferred to FIXME.  e.g. \"TODO(johndoe): Refactor when v2 is released.\"' />\n  </module>\n\n  <module name=\"RegexpSingleline\">\n    <!-- Checks that TODOs are named.  (Actually, just that they are followed\n         by an open paren.)\n    -->\n    <property name=\"format\" value=\"((//.*)|(\\*.*))TODO [^(]\" />\n    <property name=\"message\" value='All TODOs should be named.  e.g. \"TODO (johndoe): Refactor when v2 is released.\"' />\n  </module>\n\n  <!-- All Java AST specific tests live under TreeWalker module. -->\n  <module name=\"TreeWalker\">\n\n    <!--\n\n    IMPORT CHECKS\n\n    -->\n\n    <module name=\"RedundantImport\">\n      <!-- Checks for redundant import statements. -->\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n    <!--\n\n    NAMING CHECKS\n\n    -->\n\n    <!-- Item 38 - Adhere to generally accepted naming conventions -->\n\n    <module name=\"PackageName\">\n      <!-- Validates identifiers for package names against the\n        supplied expression. -->\n      <!-- Here the default checkstyle rule restricts package name parts to\n        seven characters, this is not in line with common practice at Google.\n      -->\n      <property name=\"format\" value=\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"TypeNameCheck\">\n      <!-- Validates static, final fields against the\n      expression \"^[A-Z][a-zA-Z0-9]*$\". -->\n      <metadata name=\"altname\" value=\"TypeName\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"ConstantNameCheck\">\n      <!-- Validates non-private, static, final fields against the supplied\n      public/package final fields \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". -->\n      <metadata name=\"altname\" value=\"ConstantName\"/>\n      <property name=\"applyToPublic\" value=\"true\"/>\n      <property name=\"applyToProtected\" value=\"true\"/>\n      <property name=\"applyToPackage\" value=\"true\"/>\n      <property name=\"applyToPrivate\" value=\"false\"/>\n      <property name=\"format\" value=\"^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$\"/>\n      <message key=\"name.invalidPattern\"\n               value=\"Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"StaticVariableNameCheck\">\n      <!-- Validates static, non-final fields against the supplied\n      expression \"^[a-z][a-zA-Z0-9]*_?$\". -->\n      <metadata name=\"altname\" value=\"StaticVariableName\"/>\n      <property name=\"applyToPublic\" value=\"true\"/>\n      <property name=\"applyToProtected\" value=\"true\"/>\n      <property name=\"applyToPackage\" value=\"true\"/>\n      <property name=\"applyToPrivate\" value=\"true\"/>\n      <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*_?$\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"MemberNameCheck\">\n      <!-- Validates non-static members against the supplied expression. -->\n      <metadata name=\"altname\" value=\"MemberName\"/>\n      <property name=\"applyToPublic\" value=\"true\"/>\n      <property name=\"applyToProtected\" value=\"true\"/>\n      <property name=\"applyToPackage\" value=\"true\"/>\n      <property name=\"applyToPrivate\" value=\"true\"/>\n      <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"MethodNameCheck\">\n      <!-- Validates identifiers for method names. -->\n      <metadata name=\"altname\" value=\"MethodName\"/>\n      <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"ParameterName\">\n      <!-- Validates identifiers for method parameters against the\n        expression \"^[a-z][a-zA-Z0-9]*$\". -->\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"LocalFinalVariableName\">\n      <!-- Validates identifiers for local final variables against the\n        expression \"^[a-z][a-zA-Z0-9]*$\". -->\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"LocalVariableName\">\n      <!-- Validates identifiers for local variables against the\n        expression \"^[a-z][a-zA-Z0-9]*$\". -->\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"FinalLocalVariable\">\n      <!-- Checks that local variables that never have their values changed are declared final. -->\n      <property name=\"tokens\" value=\"VARIABLE_DEF\"/>\n      <property name=\"validateEnhancedForLoopVariable\" value=\"true\"/>\n    </module>\n\n    <!--\n\n    LENGTH and CODING CHECKS\n\n    -->\n\n    <module name=\"LineLength\">\n      <!-- Checks if a line is too long. -->\n      <property name=\"max\" value=\"${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}\" default=\"100\"/>\n      <property name=\"severity\" value=\"error\"/>\n\n      <!--\n        The default ignore pattern exempts the following elements:\n          - import statements\n          - long URLs inside comments\n      -->\n\n      <property name=\"ignorePattern\"\n                value=\"${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}\"\n                default=\"^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$\"/>\n    </module>\n\n    <module name=\"LeftCurly\">\n      <!-- Checks for placement of the left curly brace ('{'). -->\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <module name=\"RightCurly\">\n      <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on\n      the same line. e.g., the following example is fine:\n      <pre>\n        if {\n          ...\n        } else\n      </pre>\n      -->\n      <!-- This next example is not fine:\n      <pre>\n        if {\n          ...\n        }\n        else\n      </pre>\n      -->\n      <property name=\"option\" value=\"same\"/>\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n    <!-- Checks for braces around if and else blocks -->\n    <module name=\"NeedBraces\">\n      <property name=\"severity\" value=\"warning\"/>\n      <property name=\"tokens\" value=\"LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO\"/>\n    </module>\n\n    <module name=\"UpperEll\">\n      <!-- Checks that long constants are defined with an upper ell.-->\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n    <module name=\"FallThrough\">\n      <!-- Warn about falling through to the next case statement.  Similar to\n      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment\n      on the last non-blank line preceding the fallen-into case contains 'fall through' (or\n      some other variants which we don't publicized to promote consistency).\n      -->\n      <property name=\"reliefPattern\"\n                value=\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/>\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n\n    <!--\n\n    MODIFIERS CHECKS\n\n    -->\n\n    <module name=\"ModifierOrder\">\n      <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and\n           8.4.3.  The prescribed order is:\n           public, protected, private, abstract, static, final, transient, volatile,\n           synchronized, native, strictfp\n        -->\n    </module>\n\n\n    <!--\n\n    WHITESPACE CHECKS\n\n    -->\n\n    <module name=\"WhitespaceAround\">\n      <!-- Checks that various tokens are surrounded by whitespace.\n           This includes most binary operators and keywords followed\n           by regular or curly braces.\n      -->\n      <property name=\"tokens\" value=\"ASSIGN, BAND, BAND_ASSIGN, BOR,\n        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,\n        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,\n        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,\n        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,\n        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,\n        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/>\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n    <module name=\"WhitespaceAfter\">\n      <!-- Checks that commas, semicolons and typecasts are followed by\n           whitespace.\n      -->\n      <property name=\"tokens\" value=\"COMMA, SEMI, TYPECAST\"/>\n    </module>\n\n    <module name=\"NoWhitespaceAfter\">\n      <!-- Checks that there is no whitespace after various unary operators.\n           Linebreaks are allowed.\n      -->\n      <property name=\"tokens\" value=\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,\n        UNARY_PLUS\"/>\n      <property name=\"allowLineBreaks\" value=\"true\"/>\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n    <module name=\"NoWhitespaceBefore\">\n      <!-- Checks that there is no whitespace before various unary operators.\n           Linebreaks are allowed.\n      -->\n      <property name=\"tokens\" value=\"SEMI, DOT, POST_DEC, POST_INC\"/>\n      <property name=\"allowLineBreaks\" value=\"true\"/>\n      <property name=\"severity\" value=\"error\"/>\n    </module>\n\n    <module name=\"ParenPad\">\n      <!-- Checks that there is no whitespace before close parens or after\n           open parens.\n      -->\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n\n  </module>\n</module>\n\n"
        },
        {
          "name": "findbugs-exclude.xml",
          "type": "blob",
          "size": 0.23828125,
          "content": "<FindBugsFilter>\n\n  <!--We're not using Java serialization-->\n  <Match>\n    <Bug pattern=\"SE_BAD_FIELD\"/>\n  </Match>\n\n  <!-- HelpMojo is generated code -->\n  <Match>\n    <Class name=\"com.spotify.docker.HelpMojo\" />\n  </Match>\n\n</FindBugsFilter>"
        },
        {
          "name": "java.header",
          "type": "blob",
          "size": 0.826171875,
          "content": "/*\n * Copyright (c) 2014 Spotify AB.\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 13.12890625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.spotify</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <version>1.2.3-SNAPSHOT</version>\n  <packaging>maven-plugin</packaging>\n  <name>docker-maven-plugin</name>\n  <description>A maven plugin for docker</description>\n  <url>https://github.com/spotify/docker-maven-plugin</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n  </properties>\n\n  <parent>\n    <groupId>org.sonatype.oss</groupId>\n    <artifactId>oss-parent</artifactId>\n    <version>7</version>\n  </parent>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <scm>\n    <connection>scm:git:https://github.com/spotify/docker-maven-plugin</connection>\n    <developerConnection>scm:git:git@github.com:spotify/docker-maven-plugin</developerConnection>\n    <url>https://github.com/spotify/docker-maven-plugin</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <developers>\n    <developer>\n      <id>dano</id>\n      <name>Daniel Norberg</name>\n      <email>dano@spotify.com</email>\n    </developer>\n    <developer>\n      <id>ryan</id>\n      <name>Ryan Culbertson</name>\n      <email>ryan@spotify.com</email>\n    </developer>\n    <developer>\n      <id>drewc</id>\n      <name>Drew Csillag</name>\n      <email>drewc@spotify.com</email>\n    </developer>\n    <developer>\n      <id>philipcristiano</id>\n      <name>Philip Cristiano</name>\n      <email>philipcristiano@spotify.com</email>\n    </developer>\n    <developer>\n      <id>rohan</id>\n      <name>Rohan Singh</name>\n      <email>rohan@spotify.com</email>\n    </developer>\n    <developer>\n      <id>davidxia</id>\n      <name>David Xia</name>\n      <email>dxia@spotify.com</email>\n    </developer>\n  </developers>\n\n  <contributors>\n    <contributor>\n      <name>Marvin Froeder</name>\n      <email>velo.br@gmail.com</email>\n      <url>about.me/velo</url>\n    </contributor>\n  </contributors>\n\n  <profiles>\n    <profile>\n      <id>default</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <revision>0-SNAPSHOT</revision>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>doclint-java8-disable</id>\n      <activation>\n        <jdk>[1.8,)</jdk>\n      </activation>\n      <properties>\n        <javadoc.opts>-Xdoclint:none</javadoc.opts>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>sign-artifacts</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.5</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.spotify</groupId>\n      <artifactId>docker-client</artifactId>\n      <version>8.16.0</version>\n      <classifier>shaded</classifier>\n    </dependency>\n    <dependency>\n      <groupId>com.google.auth</groupId>\n      <artifactId>google-auth-library-oauth2-http</artifactId>\n      <version>0.6.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.typesafe</groupId>\n      <artifactId>config</artifactId>\n      <version>1.2.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven.plugin-tools</groupId>\n      <artifactId>maven-plugin-annotations</artifactId>\n      <version>3.2</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven</groupId>\n      <artifactId>maven-core</artifactId>\n      <version>3.3.3</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven</groupId>\n      <artifactId>maven-artifact</artifactId>\n      <version>3.3.3</version>\n    </dependency>\n    <dependency>\n      <groupId>org.eclipse.jgit</groupId>\n      <artifactId>org.eclipse.jgit</artifactId>\n      <version>3.2.0.201312181205-r</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven.plugin-testing</groupId>\n      <artifactId>maven-plugin-testing-harness</artifactId>\n      <version>3.3.0</version>\n      <scope>test</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>junit</groupId>\n          <artifactId>junit</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.9.7</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven</groupId>\n      <artifactId>maven-compat</artifactId>\n      <version>3.3.3</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-all</artifactId>\n      <version>1.10.19</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>eu.codearte.catch-exception</groupId>\n      <artifactId>catch-exception</artifactId>\n      <version>1.4.4</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <version>2.3.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>4.1.6.RELEASE</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-simple</artifactId>\n      <version>1.7.19</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.code.findbugs</groupId>\n      <artifactId>annotations</artifactId>\n      <version>3.0.1</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.code.findbugs</groupId>\n      <artifactId>jsr305</artifactId>\n      <version>3.0.1</version>\n      <scope>provided</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <testResources>\n      <testResource>\n        <directory>src/test/resources</directory>\n        <filtering>false</filtering>\n        <excludes>\n          <exclude>META-INF/plexus/components.xml</exclude>\n        </excludes>\n      </testResource>\n      <testResource>\n        <directory>src/test/resources</directory>\n        <filtering>true</filtering>\n        <includes>\n          <include>META-INF/plexus/components.xml</include>\n        </includes>\n      </testResource>\n    </testResources>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-plugin-plugin</artifactId>\n        <version>3.4</version>\n        <configuration>\n          <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>\n        </configuration>\n        <executions>\n          <execution>\n            <id>mojo-descriptor</id>\n            <goals>\n              <goal>descriptor</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>help-goal</id>\n            <goals>\n              <goal>helpmojo</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.3</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <executions>\n          <execution>\n            <id>validate</id>\n            <phase>none</phase>\n            <configuration>\n              <configLocation>checkstyle.xml</configLocation>\n              <encoding>UTF-8</encoding>\n              <consoleOutput>true</consoleOutput>\n              <failsOnError>true</failsOnError>\n              <includeTestSourceDirectory>true</includeTestSourceDirectory>\n            </configuration>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <linkXRef>false</linkXRef>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>findbugs-maven-plugin</artifactId>\n        <version>3.0.5</version>\n        <configuration>\n          <effort>Max</effort>\n          <threshold>Low</threshold>\n          <xmlOutput>true</xmlOutput>\n          <findbugsXmlOutputDirectory>${project.build.directory}/findbugs\n          </findbugsXmlOutputDirectory>\n          <excludeFilterFile>${project.basedir}/findbugs-exclude.xml</excludeFilterFile>\n        </configuration>\n        <dependencies>\n\t  <dependency>\n\t    <groupId>org.apache.ant</groupId>\n            <artifactId>ant</artifactId>\n            <version>1.9.4</version>\n          </dependency>\n        </dependencies>\n        <executions>\n          <execution>\n            <phase>verify</phase>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-invoker-plugin</artifactId>\n        <version>1.7</version>\n        <configuration>\n          <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>\n          <streamLogs>true</streamLogs>\n          <pomIncludes>\n            <pomInclude>*/pom.xml</pomInclude>\n          </pomIncludes>\n          <postBuildHookScript>verify</postBuildHookScript>\n          <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>\n          <settingsFile>src/it/settings.xml</settingsFile>\n          <goals>\n            <goal>clean</goal>\n            <goal>verify</goal>\n          </goals>\n        </configuration>\n        <executions>\n          <execution>\n            <id>integration-test</id>\n            <goals>\n              <goal>install</goal>\n              <goal>integration-test</goal>\n              <goal>verify</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-source-plugin</artifactId>\n        <version>2.2.1</version>\n        <executions>\n          <execution>\n            <id>attach-sources</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <version>3.0.1</version>\n        <configuration>\n          <show>private</show>\n          <failOnError>false</failOnError>\n        </configuration>\n        <executions>\n          <execution>\n            <id>attach-javadocs</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n            <configuration>\n              <additionalparam>${javadoc.opts}</additionalparam>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>2.5</version>\n        <configuration>\n          <tagNameFormat>v@{project.version}</tagNameFormat>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>org.apache.maven.scm</groupId>\n            <artifactId>maven-scm-provider-gitexe</artifactId>\n            <version>1.9</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n      <plugin>\n        <groupId>org.sonatype.plugins</groupId>\n        <artifactId>nexus-staging-maven-plugin</artifactId>\n        <version>1.6.4</version>\n        <extensions>true</extensions>\n        <configuration>\n          <serverId>ossrh</serverId>\n          <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n          <autoReleaseAfterClose>${autoReleaseAfterClose}</autoReleaseAfterClose>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <reporting>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-plugin-plugin</artifactId>\n        <version>3.2</version>\n      </plugin>\n    </plugins>\n  </reporting>\n\n</project>\n"
        },
        {
          "name": "sonatype-settings.xml",
          "type": "blob",
          "size": 0.60546875,
          "content": "<!-- \nUsed by Travis to deploy snapshots to Maven central / OSSRH after a successful\nbuild on the master branch. See .travis.yml for more. \n-->\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n  <servers>\n    <server>\n      <!-- Maven Central Deployment -->\n      <id>ossrh</id>\n      <username>${env.SONATYPE_USERNAME}</username>\n      <password>${env.SONATYPE_PASSWORD}</password>\n    </server>\n  </servers>\n\n</settings>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}