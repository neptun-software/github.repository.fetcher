{
  "metadata": {
    "timestamp": 1736609105109,
    "page": 374,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LinShunKang/MyPerf4J",
      "stars": 3424,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.0224609375,
          "content": "service_name: travis-ci"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": ".classpath\n.project\n.settings\ntarget\n*.class\n*.iml\n.idea\n.idea/*.xml\n*.versionsBackup\n.DS_Store\n*/.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6298828125,
          "content": "language: java\njdk:\n#  - oraclejdk7\n#  - openjdk7\n  - openjdk8\n  - openjdk9\n  - openjdk10\n  - openjdk11\nbefore_install:\n#  - mvn install -Dmaven.javadoc.skip=true\n- \"echo skipped\"\ninstall:\n#- \"echo skipped\"\n  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true\nscript:\n- \"echo skipped\"\n# - mvn clean install -Dmaven.javadoc.skip=true\n# - mvn deploy\nafter_success:\n  - mvn clean cobertura:cobertura coveralls:report\n  - bash <(curl -s https://codecov.io/bash)\nnotifications:\n  email:\n    recipients:\n    - asdfg2385856@gmail.com\n    #on_success: [always|never|change]  default: change\n    #on_failure: [always|never|change]  default: always\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4755859375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2018, LinShunkang\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MyPerf4J-ASM",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyPerf4J-Base",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyPerf4J-Benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyPerf4J-Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.CN.md",
          "type": "blob",
          "size": 8.5849609375,
          "content": "简体中文 | [English](./README.EN.md)\n\n<h1 align=\"center\">MyPerf4J</h1>\n\n<div align=\"center\">\n\n一个针对高并发、低延迟应用设计的高性能 Java 性能监控和统计工具。\n\n[![GitHub (pre-)release](https://img.shields.io/github/release/LinShunKang/MyPerf4J/all.svg)](https://github.com/LinShunKang/MyPerf4J) [![Build Status](https://app.travis-ci.com/LinShunKang/MyPerf4J.svg?token=ptySgyLwQwqyUv5eCp5Q&branch=develop)](https://app.travis-ci.com/LinShunKang/MyPerf4J) [![Coverage Status](https://coveralls.io/repos/github/LinShunKang/MyPerf4J/badge.svg?branch=develop)](https://coveralls.io/github/LinShunKang/MyPerf4J?branch=develop) [![GitHub issues](https://img.shields.io/github/issues/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues) [![GitHub closed issues](https://img.shields.io/github/issues-closed/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues?q=is%3Aissue+is%3Aclosed) [![GitHub](https://img.shields.io/github/license/LinShunKang/MyPerf4J.svg)](./LICENSE)\n\n</div>\n\n## 价值\n* 快速定位性能瓶颈\n* 快速定位故障原因\n\n## 优势\n* [高性能](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80): 单线程支持每秒 **1600 万次** 响应时间的记录，每次记录只花费 **63 纳秒**\n* [无侵入](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86): 采用 **JavaAgent** 方式，对应用程序完全无侵入，无需修改应用代码\n* [低内存](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8): 采用**内存复用**的方式，整个生命周期只产生极少的临时对象，不影响应用程序的 GC\n* 高实时: 支持**秒级统计**，最低统计粒度为 **1 秒**，并且是**全量统计**，不丢失任何一次记录\n\n## 文档\n* [English Doc](https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc)\n* [中文文档](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)\n\n## 监控指标\nMyPerf4J 为每个应用收集数十个监控指标，所有的监控指标都是实时采集和展现的。\n\n下面是 MyPerf4J 目前支持的监控指标列表:\n- **[Method Metrics](https://grafana.com/dashboards/7766)**<br/>\n  [RPS，Count，Avg，Min，Max，StdDev，TP50, TP90, TP95, TP99, TP999, TP9999, TP100](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#method-metrics)\n  ![Markdown](https://raw.githubusercontent.com/LinShunKang/Objects/master/MyPerf4J-InfluxDB-Method_Show_Operation.gif)\n\n- **[JVM Metrics](https://grafana.com/dashboards/8787)**<br/>\n  [Thread](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-thread-metrics)，[Memory](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-memory-metrics)，[ByteBuff](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-bytebuff-metrics)，[GC](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-gc-metrics)，[Class](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-class-metrics)，[Compilation](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-compilation-metrics)，[FileDescriptor](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-filedescriptor-metrics)\n  ![Markdown](https://github.com/LinShunKang/Objects/blob/master/images/JVM_Metrics_Dashboard_V2.png?raw=true)\n\n  > 想知道如何实现上述效果？请先按照[快速启动](https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8)的描述启动应用，再按照[这里](https://github.com/LinShunKang/MyPerf4J/wiki/InfluxDB_)的描述进行安装配置即可。\n\n## 快速启动\nMyPerf4J 采用 JavaAgent 配置方式，**透明化**接入应用，对应用代码完全**没有侵入**。\n\n### 下载\n* 下载并解压 [MyPerf4J-ASM.zip](https://github.com/LinShunKang/Objects/blob/master/zips/CN/MyPerf4J-ASM-3.5.0-SNAPSHOT.zip?raw=true)\n* 阅读解压出的 `README` 文件\n* 修改解压出的 `MyPerf4J.properties` 配置文件中 `app_name`、`metrics.log.xxx` 和 `filter.packages.include` 的配置值\n\n> 查看[配置文件模板](https://github.com/LinShunKang/Objects/blob/master/jars/MyPerf4J-3.x.properties)。想了解更多的配置？请看[这里](https://github.com/LinShunKang/MyPerf4J/wiki/3.x-%E9%85%8D%E7%BD%AE)\n\n### 配置\n在 JVM 启动参数里加上以下两个参数\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n> 形如：java -javaagent:/path/to/MyPerf4J-ASM.jar -DMyPerf4JPropFile=/path/to/MyPerf4J.properties `-jar yourApp.jar`\n>\n> 注意：如果您使用 JDK9 及其之上的版本，请额外添加 `--add-opens java.base/java.lang=ALL-UNNAMED`\n\n### 运行\n启动应用，监控日志输出到 /path/to/log/method_metrics.log:\n```\nMyPerf4J Method Metrics [2020-01-01 12:49:57, 2020-01-01 12:49:58]\nMethod[6]                            Type        Level  TimePercent      RPS  Avg(ms)  Min(ms)  Max(ms)    StdDev    Count     TP50     TP90     TP95     TP99    TP999   TP9999\nDemoServiceImpl.getId2(long)      General      Service      322.50%     6524     0.49        0        1     0.50      6524        0        1        1        1        1        1\nDemoServiceImpl.getId3(long)      General      Service      296.10%     4350     0.68        0        1     0.47      4350        1        1        1        1        1        1\nDemoServiceImpl.getId4(long)      General      Service      164.60%     2176     0.76        0        1     0.43      2176        1        1        1        1        1        1\nDemoServiceImpl.getId1(long)      General      Service        0.00%     8704     0.00        0        0     0.00      8704        0        0        0        0        0        0\nDemoDAO.getId1(long)         DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\nDemoDAO.getId2()             DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\n```\n\n### 卸载\n在 JVM 启动参数中去掉以下两个参数，重启即可卸载此工具。\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n## 构建\n您可以自行构建 MyPerf4J-ASM.jar\n* git clone git@github.com:LinShunKang/MyPerf4J.git\n* mvn clean package\n\n> MyPerf4J-ASM-${MyPerf4J-version}.jar 在 MyPerf4J-ASM/target/ 目录下\n\n## 问题\n如果您有任何问题、疑问或者建议，您可以 [提交Issue](https://github.com/LinShunKang/MyPerf4J/issues/new/choose) 或者 [发送邮件](mailto:linshunkang.chn@gmail.com) ：）\n\n注意，为了保障大家的时间，请保证您已经**完整阅读过**以下内容：\n* [提问模板](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8F%90%E9%97%AE%E6%A8%A1%E6%9D%BF)\n* [快速启动](https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8)\n* [中文文档](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)\n* [常见问题](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n\n## 已知用户\n如果您在使用 MyPerf4J，请告诉我，您的使用对我来说非常重要：[https://github.com/LinShunKang/MyPerf4J/issues/30](https://github.com/LinShunKang/MyPerf4J/issues/30)（按登记顺序排列）\n\n<div align=\"center\">\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Boss_300x300.png?raw=true\" width=\"80\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Lever.jpeg?raw=true\" width=\"240\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/dianzhang_303x303.jpeg?raw=true\" width=\"80\" height=\"80\"/>\n</div>\n\n## 鸣谢\n感谢 JetBrains [OpenSourceSupport](https://www.jetbrains.com/community/opensource/#support) 所提供的支持 : )\n<div align=\"center\">\n<img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg\" width=\"200\" height=\"200\"/>\n</div>\n\n## 项目捐赠\n如果 MyPerf4J 对您有帮助，可以使用微信扫描下面的赞赏码，请我喝杯咖啡 : )\n<div align=\"center\">\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/WechatIMG16.jpeg?raw=true\" width=\"200\" height=\"200\"/>\n</div>\n\n## 参考项目\nMyPerf4J 是受以下项目启发而来：\n* [Perf4J](https://github.com/perf4j/perf4j)\n* [TProfiler](https://github.com/alibaba/TProfiler)\n\n## 更多信息\n想更深入的了解 MyPerf4J？请看 [https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)。\n"
        },
        {
          "name": "README.EN.md",
          "type": "blob",
          "size": 7.5498046875,
          "content": "[简体中文](./README.md) | English\n\n<h1 align=\"center\">MyPerf4J</h1>\n\n<div align=\"center\">\n\nA high performance, non-intrusive Java performance monitoring and statistical tool designed for high-concurrency, low-latency applications. \n\n[![GitHub (pre-)release](https://img.shields.io/github/release/LinShunKang/MyPerf4J/all.svg)](https://github.com/LinShunKang/MyPerf4J) [![Build Status](https://app.travis-ci.com/LinShunKang/MyPerf4J.svg?token=ptySgyLwQwqyUv5eCp5Q&branch=develop)](https://app.travis-ci.com/LinShunKang/MyPerf4J) [![Coverage Status](https://coveralls.io/repos/github/LinShunKang/MyPerf4J/badge.svg?branch=develop)](https://coveralls.io/github/LinShunKang/MyPerf4J?branch=develop) [![GitHub issues](https://img.shields.io/github/issues/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues) [![GitHub closed issues](https://img.shields.io/github/issues-closed/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues?q=is%3Aissue+is%3Aclosed) [![GitHub](https://img.shields.io/github/license/LinShunKang/MyPerf4J.svg)](./LICENSE)\n\n</div>\n\n## Features\n*  [High performance](https://github.com/LinShunKang/MyPerf4J/wiki/Overhead): Very low performance consumption, only **63 nano seconds** per record, can be used in production environment for a long time.\n*  No intrusion: Using **JavaAgent** mode, no intrusion to the application, no need to modify the application code.\n*  Low memory: With memory multiplexing, only a small number of temporary objects are generated throughout the life cycle, and the GC of the application is not affected.\n*  Real-time: Supports second level monitoring, minimum **1 second**\n\n## Usage scenarios\n* Quickly locate performance bottlenecks for Java applications in a development environment\n* Long-term monitoring of performance metrics for Java applications in a production environment\n\n## Multilingual document\n* [English Doc](https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc)\n* [中文文档](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc) \n\n## What does it monitor?\nMyPerf4J collects dozens of metrics per application. All these metrics are collected and visualized in real-time.\n\nThis is a list of what it currently monitors:\n* **[Method Metrics](https://grafana.com/dashboards/7766)**<br/>\n[RPS, Count, Avg, Min, Max, StdDev, TP50, TP90, TP95, TP99, TP999, TP9999, TP100](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#method-metrics)\n![Markdown](https://raw.githubusercontent.com/LinShunKang/Objects/master/MyPerf4J-InfluxDB-Method_Show_Operation.gif)\n\n- **[JVM Metrics](https://grafana.com/dashboards/8787)**<br/>\n[Thread](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-thread-metrics)，[Memory](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-memory-metrics)，[ByteBuff](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-bytebuff-metrics)，[GC](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-gc-metrics)，[Class](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-class-metrics)，[Compilation](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-compilation-metrics)，[FileDescriptor](https://github.com/LinShunKang/MyPerf4J/wiki/Metrics#jvm-filedescriptor-metrics)\n![Markdown](https://github.com/LinShunKang/Objects/blob/master/images/JVM_Metrics_Dashboard_V2.png?raw=true)\n  \n> Want to know how to achieve the above effect? Please start the application according to the description of [Quick Start](https://github.com/LinShunKang/MyPerf4J/blob/develop/README.EN.md#quick-start), and then follow the instructions in [here](https://github.com/LinShunKang/MyPerf4J/wiki/InfluxDB) to install and configure.\n \n## Quick start\nMyPerf4J adopts JavaAgent configuration mode, **transparent** access application, and the application code is completely **no-intrusive**.\n\n### Download\n* Download and unzip [MyPerf4J-ASM.zip](https://github.com/LinShunKang/Objects/blob/master/zips/EN/MyPerf4J-ASM-3.5.0-SNAPSHOT.zip?raw=true)\n* Read the `README` file\n* Modify `app_name`, `metrics.log.xxx` and `filter.packages.include` in `MyPerf4J.properties` \n\n### Configure\nAdd the following two parameters to the JVM startup parameters\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n> Like: java -javaagent:/path/to/MyPerf4J-ASM.jar -DMyPerf4JPropFile=/path/to/MyPerf4J.properties `-jar yourApp.jar`\n>\n> Note: If you are using JDK 9 and above, please add `--add-opens java.base/java.lang=ALL-UNNAMED` as an additional flag.\n\n### Run\nStart your application, the output is to /path/to/log/method_metrics.log:\n```\nMyPerf4J Method Metrics [2020-01-01 12:49:57, 2020-01-01 12:49:58]\nMethod[6]                            Type        Level  TimePercent      RPS  Avg(ms)  Min(ms)  Max(ms)    StdDev    Count     TP50     TP90     TP95     TP99    TP999   TP9999\nDemoServiceImpl.getId2(long)      General      Service      322.50%     6524     0.49        0        1     0.50      6524        0        1        1        1        1        1\nDemoServiceImpl.getId3(long)      General      Service      296.10%     4350     0.68        0        1     0.47      4350        1        1        1        1        1        1\nDemoServiceImpl.getId4(long)      General      Service      164.60%     2176     0.76        0        1     0.43      2176        1        1        1        1        1        1\nDemoServiceImpl.getId1(long)      General      Service        0.00%     8704     0.00        0        0     0.00      8704        0        0        0        0        0        0\nDemoDAO.getId1(long)         DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\nDemoDAO.getId2()             DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\n```\n\n### Uninstall\nRemove the following two parameters from the JVM startup parameters and restart to uninstall the tool.\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n## Build\nYou can build MyPerf4J-ASM.jar by yourself.\n* git clone git@github.com:LinShunKang/MyPerf4J.git\n* mvn clean package\n\n> MyPerf4J-ASM-${MyPerf4J-version}.jar at MyPerf4J-ASM/target/ \n\n## Issues\nIf you encounter any issues or if you have a question, don't hesitate to [create an issue](https://github.com/LinShunKang/MyPerf4J/issues/new/choose) or [send email](mailto:linshunkang.chn@gmail.com) : )\n\n## Known Users\nWelcome to register the company name in this issue: [https://github.com/LinShunKang/MyPerf4J/issues/30](https://github.com/LinShunKang/MyPerf4J/issues/30) (In order of registration)\n\n<div align=\"center\">\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Boss_300x300.png?raw=true\" width=\"80\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Lever.jpeg?raw=true\" width=\"240\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/dianzhang_303x303.jpeg?raw=true\" width=\"80\" height=\"80\"/>\n</div>\n\n## Thanks\nThanks JetBrains support provided by [OpenSourceSupport](https://www.jetbrains.com/community/opensource/#support) : )\n<div align=\"center\">\n<img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg\" width=\"200\" height=\"200\"/>\n</div>\n\n## Inspired by\n* [Perf4J](https://github.com/perf4j/perf4j)\n* [TProfiler](https://github.com/alibaba/TProfiler)\n\n## More Information\nFor more information about the project, please read [https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc](https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.5859375,
          "content": "简体中文 | [English](./README.EN.md)\n\n<h1 align=\"center\">MyPerf4J</h1>\n\n<div align=\"center\">\n\n一个针对高并发、低延迟应用设计的高性能 Java 性能监控和统计工具。\n\n[![GitHub (pre-)release](https://img.shields.io/github/release/LinShunKang/MyPerf4J/all.svg)](https://github.com/LinShunKang/MyPerf4J) [![Build Status](https://app.travis-ci.com/LinShunKang/MyPerf4J.svg?token=ptySgyLwQwqyUv5eCp5Q&branch=develop)](https://app.travis-ci.com/LinShunKang/MyPerf4J) [![Coverage Status](https://coveralls.io/repos/github/LinShunKang/MyPerf4J/badge.svg?branch=develop)](https://coveralls.io/github/LinShunKang/MyPerf4J?branch=develop) [![GitHub issues](https://img.shields.io/github/issues/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues) [![GitHub closed issues](https://img.shields.io/github/issues-closed/LinShunKang/MyPerf4J.svg)](https://github.com/LinShunKang/MyPerf4J/issues?q=is%3Aissue+is%3Aclosed) [![GitHub](https://img.shields.io/github/license/LinShunKang/MyPerf4J.svg)](./LICENSE)\n\n</div>\n\n## 价值\n* 快速定位性能瓶颈\n* 快速定位故障原因\n\n## 优势\n* [高性能](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80): 单线程支持每秒 **1600 万次** 响应时间的记录，每次记录只花费 **63 纳秒**\n* [无侵入](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86): 采用 **JavaAgent** 方式，对应用程序完全无侵入，无需修改应用代码\n* [低内存](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86#%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8): 采用**内存复用**的方式，整个生命周期只产生极少的临时对象，不影响应用程序的 GC\n* 高实时: 支持**秒级统计**，最低统计粒度为 **1 秒**，并且是**全量统计**，不丢失任何一次记录\n\n## 文档\n* [English Doc](https://github.com/LinShunKang/MyPerf4J/wiki/English-Doc)\n* [中文文档](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)\n\n## 监控指标\nMyPerf4J 为每个应用收集数十个监控指标，所有的监控指标都是实时采集和展现的。\n\n下面是 MyPerf4J 目前支持的监控指标列表:\n- **[Method Metrics](https://grafana.com/dashboards/7766)**<br/>\n  [RPS，Count，Avg，Min，Max，StdDev，TP50, TP90, TP95, TP99, TP999, TP9999, TP100](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#method-metrics)\n  ![Markdown](https://raw.githubusercontent.com/LinShunKang/Objects/master/MyPerf4J-InfluxDB-Method_Show_Operation.gif)\n\n- **[JVM Metrics](https://grafana.com/dashboards/8787)**<br/>\n  [Thread](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-thread-metrics)，[Memory](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-memory-metrics)，[ByteBuff](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-bytebuff-metrics)，[GC](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-gc-metrics)，[Class](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-class-metrics)，[Compilation](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-compilation-metrics)，[FileDescriptor](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8C%87%E6%A0%87#jvm-filedescriptor-metrics)\n  ![Markdown](https://github.com/LinShunKang/Objects/blob/master/images/JVM_Metrics_Dashboard_V2.png?raw=true)\n\n  > 想知道如何实现上述效果？请先按照[快速启动](https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8)的描述启动应用，再按照[这里](https://github.com/LinShunKang/MyPerf4J/wiki/InfluxDB_)的描述进行安装配置即可。\n\n## 快速启动\nMyPerf4J 采用 JavaAgent 配置方式，**透明化**接入应用，对应用代码完全**没有侵入**。\n\n### 下载\n* 下载并解压 [MyPerf4J-ASM.zip](https://github.com/LinShunKang/Objects/blob/master/zips/CN/MyPerf4J-ASM-3.5.0-SNAPSHOT.zip?raw=true)\n* 阅读解压出的 `README` 文件\n* 修改解压出的 `MyPerf4J.properties` 配置文件中 `app_name`、`metrics.log.xxx` 和 `filter.packages.include` 的配置值\n\n> 查看[配置文件模板](https://github.com/LinShunKang/Objects/blob/master/jars/MyPerf4J-3.x.properties)。想了解更多的配置？请看[这里](https://github.com/LinShunKang/MyPerf4J/wiki/3.x-%E9%85%8D%E7%BD%AE)\n\n### 配置\n在 JVM 启动参数里加上以下两个参数\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n> 形如：java -javaagent:/path/to/MyPerf4J-ASM.jar -DMyPerf4JPropFile=/path/to/MyPerf4J.properties `-jar yourApp.jar`\n> \n> 注意：如果您使用 JDK9 及其之上的版本，请额外添加 `--add-opens java.base/java.lang=ALL-UNNAMED`\n\n### 运行\n启动应用，监控日志输出到 /path/to/log/method_metrics.log:\n```\nMyPerf4J Method Metrics [2020-01-01 12:49:57, 2020-01-01 12:49:58]\nMethod[6]                            Type        Level  TimePercent      RPS  Avg(ms)  Min(ms)  Max(ms)    StdDev    Count     TP50     TP90     TP95     TP99    TP999   TP9999\nDemoServiceImpl.getId2(long)      General      Service      322.50%     6524     0.49        0        1     0.50      6524        0        1        1        1        1        1\nDemoServiceImpl.getId3(long)      General      Service      296.10%     4350     0.68        0        1     0.47      4350        1        1        1        1        1        1\nDemoServiceImpl.getId4(long)      General      Service      164.60%     2176     0.76        0        1     0.43      2176        1        1        1        1        1        1\nDemoServiceImpl.getId1(long)      General      Service        0.00%     8704     0.00        0        0     0.00      8704        0        0        0        0        0        0\nDemoDAO.getId1(long)         DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\nDemoDAO.getId2()             DynamicProxy          DAO        0.00%     2176     0.00        0        0     0.00      2176        0        0        0        0        0        0\n```\n\n### 卸载\n在 JVM 启动参数中去掉以下两个参数，重启即可卸载此工具。\n* -javaagent:/path/to/MyPerf4J-ASM.jar\n* -DMyPerf4JPropFile=/path/to/MyPerf4J.properties\n\n## 构建\n您可以自行构建 MyPerf4J-ASM.jar\n* git clone git@github.com:LinShunKang/MyPerf4J.git\n* mvn clean package\n\n> MyPerf4J-ASM-${MyPerf4J-version}.jar 在 MyPerf4J-ASM/target/ 目录下\n\n## 问题\n如果您有任何问题、疑问或者建议，您可以 [提交Issue](https://github.com/LinShunKang/MyPerf4J/issues/new/choose) 或者 [发送邮件](mailto:linshunkang.chn@gmail.com) ：）\n\n注意，为了保障大家的时间，请保证您已经**完整阅读过**以下内容：\n* [提问模板](https://github.com/LinShunKang/MyPerf4J/wiki/%E6%8F%90%E9%97%AE%E6%A8%A1%E6%9D%BF)\n* [快速启动](https://github.com/LinShunKang/MyPerf4J#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8)\n* [中文文档](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)\n* [常见问题](https://github.com/LinShunKang/MyPerf4J/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n\n## 已知用户\n如果您在使用 MyPerf4J，请告诉我，您的使用对我来说非常重要：[https://github.com/LinShunKang/MyPerf4J/issues/30](https://github.com/LinShunKang/MyPerf4J/issues/30)（按登记顺序排列）\n\n<div align=\"center\">\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Boss_300x300.png?raw=true\" width=\"80\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/Lever.jpeg?raw=true\" width=\"240\" height=\"80\"/>\n&nbsp;&nbsp;&nbsp;\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/dianzhang_303x303.jpeg?raw=true\" width=\"80\" height=\"80\"/>\n</div>\n\n## 鸣谢\n感谢 JetBrains [OpenSourceSupport](https://www.jetbrains.com/community/opensource/#support) 所提供的支持 : )\n<div align=\"center\">\n<img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg\" width=\"200\" height=\"200\"/>\n</div>\n\n## 项目捐赠\n如果 MyPerf4J 对您有帮助，可以使用微信扫描下面的赞赏码，请我喝杯咖啡 : )\n<div align=\"center\">\n<img src=\"https://github.com/LinShunKang/Objects/blob/master/logos/WechatIMG16.jpeg?raw=true\" width=\"200\" height=\"200\"/>\n</div>\n\n## 参考项目\nMyPerf4J 是受以下项目启发而来：\n* [Perf4J](https://github.com/perf4j/perf4j)\n* [TProfiler](https://github.com/alibaba/TProfiler)\n\n## 更多信息\n想更深入的了解 MyPerf4J？请看 [https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc](https://github.com/LinShunKang/MyPerf4J/wiki/Chinese-Doc)。\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 6.826171875,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>MyPerf4J</groupId>\n    <artifactId>MyPerf4J</artifactId>\n    <packaging>pom</packaging>\n    <version>3.5.0-SNAPSHOT</version>\n    <modules>\n        <module>MyPerf4J-Core</module>\n        <module>MyPerf4J-ASM</module>\n        <module>MyPerf4J-Base</module>\n        <module>MyPerf4J-Benchmark</module>\n    </modules>\n    <name>MyPerf4J</name>\n\n    <properties>\n        <asm-version>9.7</asm-version>\n        <jmh-version>1.37</jmh-version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>4.13.2</version>\n                <scope>test</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>org.ow2.asm</groupId>\n                <artifactId>asm-commons</artifactId>\n                <version>${asm-version}</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.ow2.asm</groupId>\n                        <artifactId>asm-analysis</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.ow2.asm</groupId>\n                        <artifactId>asm-tree</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n\n            <dependency>\n                <groupId>org.openjdk.jmh</groupId>\n                <artifactId>jmh-core</artifactId>\n                <version>${jmh-version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.openjdk.jmh</groupId>\n                <artifactId>jmh-generator-annprocess</artifactId>\n                <version>${jmh-version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-clean-plugin</artifactId>\n                <version>3.3.1</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>${maven.compiler.source}</source>\n                    <target>${maven.compiler.target}</target>\n                    <verbose>true</verbose>\n                    <encoding>UTF-8</encoding>\n                    <compilerArguments>\n                        <sourcepath>${project.basedir}/src/main/java</sourcepath>\n                    </compilerArguments>\n                </configuration>\n            </plugin>\n\n<!--            <plugin>-->\n<!--                <groupId>org.apache.maven.plugins</groupId>-->\n<!--                <artifactId>maven-resources-plugin</artifactId>-->\n<!--                <version>3.3.1</version>-->\n<!--                <executions>-->\n<!--                    <execution>-->\n<!--                        <id>copy-resources</id>-->\n<!--                        <phase>validate</phase>-->\n<!--                        <goals>-->\n<!--                            <goal>copy-resources</goal>-->\n<!--                        </goals>-->\n<!--                        <configuration>-->\n<!--                            <outputDirectory>${project.build.directory}/classes/</outputDirectory>-->\n<!--                            <resources>-->\n<!--                                <resource>-->\n<!--                                    <directory>src/main/java</directory>-->\n<!--                                    <filtering>true</filtering>-->\n<!--                                    <includes>-->\n<!--                                        <include>**/*.*</include>-->\n<!--                                    </includes>-->\n<!--                                    <excludes>-->\n<!--                                        <exclude>.svn</exclude>-->\n<!--                                    </excludes>-->\n<!--                                </resource>-->\n<!--                            </resources>-->\n<!--                        </configuration>-->\n<!--                    </execution>-->\n<!--                </executions>-->\n<!--            </plugin>-->\n            <plugin>\n                <groupId>org.eluder.coveralls</groupId>\n                <artifactId>coveralls-maven-plugin</artifactId>\n                <version>4.3.0</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>cobertura-maven-plugin</artifactId>\n                <version>2.7</version>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>3.3.1</version>\n                <executions>\n                    <execution>\n                        <id>check-style</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <phase>validate</phase>\n                        <configuration>\n                            <consoleOutput>true</consoleOutput>\n                            <logViolationsToConsole>true</logViolationsToConsole>\n                            <failsOnError>true</failsOnError>\n                            <failOnViolation>true</failOnViolation>\n                            <configLocation>config/checkstyle/checkstyle.xml</configLocation>\n                            <sourceDirectories>\n                                <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>\n                                <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>\n                            </sourceDirectories>\n                        </configuration>\n                    </execution>\n                </executions>\n\n                <dependencies>\n                    <dependency>\n                        <groupId>com.puppycrawl.tools</groupId>\n                        <artifactId>checkstyle</artifactId>\n                        <version>9.3</version>\n                    </dependency>\n\n                    <dependency>\n                        <groupId>io.netty</groupId>\n                        <artifactId>netty-build-common</artifactId>\n                        <version>31</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
        }
      ]
    }
  ]
}