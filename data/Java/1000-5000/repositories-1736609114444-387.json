{
  "metadata": {
    "timestamp": 1736609114444,
    "page": 387,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "uber/AutoDispose",
      "stars": 3371,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.17578125,
          "content": "###OSX###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must ends with two \\r.\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n\n###Linux###\n\n*~\n\n# KDE directory preferences\n.directory\n\n\n###Android###\n\n# Built application files\n*.apk\n*.ap_\n\n# Files for ART and Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\n.gradletasknamecache\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Lint\nlint-report.html\nlint-report_files/\nlint_result.txt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.war\n*.ear\n\n# virtual machine crash logs, see https://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n\n###IntelliJ###\n\n*.iml\n*.ipr\n*.iws\n.idea/\n\n\n###Eclipse###\n\n*.pydevproject\n.metadata\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# TeXlipse plugin\n.texlipse\n\n# kotlin\nannotations/\n\n# Mkdocs\ndocs/1.x/*\ndocs/api/2.x/*\ndocs/changelog.md\ndocs/contributing.md\ndocs/code-of-conduct.md\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.1181640625,
          "content": "Changelog\n=========\n\nVersion 2.2.1\n-------------\n\n_2023-07-25_\n\n- **Fix**: Don't hold a reference to the view if detach happens before `DetachEventCompletable` is disposed.\n\nVersion 2.2.0\n-------------\n\n_2023-07-23_\n\n- **Fix**: Dispose the handle returned by `Job.invokeOnCompletion` when Rx subscription is disposed.\n- **Fix**: The `withScope()` lint now correctly handles different named arguments order.\n- **Fix**: Support kotlin if/when/lambda expressions in lint lenient mode.\n- Update AndroidX Lifecycle to `2.6.1`.\n- Update Kotlin to `1.9.0`.\n- Update RxJava to `3.1.6`.\n- Update RxAndroid to `3.0.2`.\n- Update lint to `8.0.2`/`31.0.2`.\n- Update error-prone to `2.20.0`.\n- Update dokka + fresh coat of paint on API docs on the project site: https://uber.github.io/AutoDispose/api/2.x/\n\nSpecial thanks to [@alexfu](https://github.com/alexfu), [@sanggggg](https://github.com/sanggggg), and [@psteiger](https://github.com/@psteiger) for contributing to this release!\n\nVersion 2.1.1\n-------------\n\n_2021-09-07_\n\n* **Fix:** `SingleSubscribeProxy#subscribe(BiConsumer)` now propagates the correct nullability. Previously, both parameters were implicitly `@NonNull`. Now they are correctly annotated as `@Nullable`.\n* Update Kotlin to `1.5.30`.\n* Update Error Prone Annotations to `2.9.0`.\n* Switch to Error Prone's `@DoNotMock` annotation.\n\nVersion 2.1.0\n-------------\n\n_2021-08-09_\n\n* Add `@NonNull` or `: Any` to type arguments where appropriate for better nullability contracts in generics.\n* Fix lint using \"mainProject\" instead of \"project\", meaning this now supports AGP 7.0.0.\n* Add lint support for RxKotlin extensions or your own extensions\n  * See the [docs](https://uber.github.io/AutoDispose/lint-check/) for configuration details!\n* Lint is now published as a dedicated artifact for use in pure JVM projects.\n  ```groovy\n  plugins {\n    id \"org.jetbrains.kotlin.jvm\"\n    id \"com.android.lint\"\n  }\n\n  dependencies {\n    lintChecks \"com.uber.autodispose2:autodispose-lint:<version>\"\n  }\n  ```\n* Deprecate `TestLifecycleOwner` artifact + its extensions in favor of the first party `androidx.lifecycle.testing.TestLifecycleOwner` option.\n  * See an example migration in [this PR](https://github.com/uber/AutoDispose/pull/433).\n* Update to RxJava `3.1.0`\n* Update to Kotlin `1.5.21`\n* Update to androidx.lifecycle `2.3.1`\n* Update to Error-Prone `2.8.1`\n* Update to kotlinx.coroutines `1.5.1`\n* Update to lint `30.0.0`\n\nNote that we are no longer releasing AutoDispose 1.x versions as RxJava 2 reached End of Life in February 2021.\n\nThanks to [@Rajin9601](https://github.com/Rajin9601), [@ianhanniballake](https://github.com/ianhanniballake), [@rafaeltoledo](https://github.com/rafaeltoledo), and [@msridhar](https://github.com/msridhar) for contributing to this release!\n\nVersion 2.0.0\n-------------\n\n_2020-02-23_\n\nAutoDispose 2 is built against RxJava 3 and is binary-compatible with AutoDispose 1.x and RxJava 2.x. As such - it has a different package name and maven group ID.\n\n### Packaging\n\n|  | Maven Group ID | Package Name |\n| --- | --- | --- |\n| 1.x | `com.uber.autodispose` | `com.uber.autodispose` |\n| 2.x | `com.uber.autodispose2` | `autodispose2` |\n\nFor any sub-packages, the above mapping should be used for those package prefix replacements as well.\n\n### Changes\n\n-   All deprecated APIs in 1.x have been removed. This consisted exclusively of deprecated Kotlin `autoDisposable` extension functions that were deprecated in 1.4.0.\n-   The `autodispose-android-archcomponents*` artifacts have been renamed to to `autodispose-androidx-lifecycle*` to match the `androidx-lifecycle` library they correspond to.\n-   The lint and error prone checks have also been updated.\n-   At the time of writing, there is no RxLifecycle with RxJava 3 support yet, and as such there is no AutoDispose 2.x interop artifact for RxLifecycle. We can add this back if there's a new RxLifecycle release with RxJava 3.x support.\n\nYou can find migration steps on the project site at https://uber.github.io/AutoDispose/migrating-1x-2x/.\n\nVersion 2.0.0-RC2\n-----------------\n\n_2019-12-02_\n\nRC2 has no additional changes from RC1 but does not upload RCs for Android artifacts since RxAndroid does not have a RC yet.\n\nVersion 2.0.0-RC1\n-----------------\n\n_2019-12-01_\n\nThis is the first release candidate for AutoDispose 2.0\n\nAutoDispose 2 is built against RxJava 3 and is binary-compatible with AutoDispose 1.x and RxJava 2.x. As such - it has a different package name and maven group ID.\n\n### Android not supported yet\n\nDue to there being no RxAndroid 3.x release candidate, we cannot release RCs of the Android artifacts yet. They are available as snapshots though.\n\n### Packaging\n\n|  | Maven Group ID | Package Name |\n| --- | --- | --- |\n| 1.x | `com.uber.autodispose` | `com.uber.autodispose` |\n| 2.x | `com.uber.autodispose2` | `autodispose2` |\n\nFor any sub-packages, the above mapping should be used for those package prefix replacements as well.\n\n### Changes\n\n-   All deprecated APIs in 1.x have been removed. This consisted exclusively of deprecated Kotlin `autoDisposable` extension functions that were deprecated in 1.4.0.\n-   The `autodispose-android-archcomponents*` artifacts have been renamed to to `autodispose-androidx-lifecycle*` to match the `androidx-lifecycle` library they correspond to.\n-   The lint and error prone checks have also been updated. We may look at consolidating these before 2.0 final is released if the community wants.\n-   At the time of writing, there is no RxLifecycle with RxJava 3 support yet, and as such there is no AutoDispose 2.x interop artifact for RxLifecycle. We can add this back if there's a new RxLifecycle release with RxJava 3.x support.\n\nWe'll be maintaining a running document of migration steps on the project site at https://uber.github.io/AutoDispose/migrating-1x-2x/.\n\nVersion 1.4.0\n-------------\n\n_2019-09-18_\n\n### Kotlin `CoroutineScope` interop [#374](https://github.com/uber/AutoDispose/pull/374)\n\nInterop functions for `CoroutineScope` to `ScopeProvider`/`Completable` (and vice versa) are now available\nin a new `autodispose-coroutines-interop` artifact. This is not intended to allow AutoDispose's\nscoping machinery be a competitor for it, but rather just a tool for interop-ing codebases that use\nboth or aid in migrations.\n\n### Kotlin API naming improvements [#372](https://github.com/uber/AutoDispose/pull/372) [#377](https://github.com/uber/AutoDispose/pull/377)\n\nTo better differentiate between the `AutoDispose` classes's `autoDisposable()` methods (which return\nRx converter types), the Kotlin `autoDisposable()` extensions have been deprecated in favor of a more\nidiomatic `autoDispose()` verb form name. The old extensions have been annotated with `@Deprecated`\nand replacements, so this should be an easy one time migration.\n\n```kotlin\nmyObservable\n    .autoDispose(scope)\n    .subscribe()\n```\n\n### Fused proxy types [#376](https://github.com/uber/AutoDispose/pull/376)\n\nAutoDispose's analogous Rx types (`AutoDisposeObservable`, etc) have been updated to implement\ntheir `*SubscribeProxy` interfaces directly. The current behavior of subscribe proxies is best\nthought of as similar to `hide()`. Subscribe proxies have always wrapped the AutoDispose's\nanalogous Rx types to prevent upcasting. If your team are good citizens though, you can now disable\nproxy hiding via `AutoDisposePlugins` to save that extra allocation.\n\n### New `withScope()` API [#375](https://github.com/uber/AutoDispose/pull/375) [#378](https://github.com/uber/AutoDispose/pull/378)\n\nThere is a new Kotlin `withScope()` API that accepts a scope and a body to execute in. This body\nis a function-with-receiver tied to a new `AutoDisposeContext` interface, which has no-arg `autoDispose()`\nfunctions in it. This allows for calling `autoDispose()` within the context of the body and allow the\nenclosing context manage wiring the applied scope to it.\n\n```kotlin\n@Test\nfun example() = withScope(scope) {\n  Observable.just(\"Hello withScope()!\")\n      .autoDispose()\n      .subscribe()\n}\n```\n\n### Dependency updates\n\n```\nKotlin: 1.3.50\nLint tools: 26.5.0\n```\n\nVersion 1.3.0\n-------------\n\n_2019-05-15_\n\n### Unified Kotlin extensions\n\nStarting with 1.3.0, all the `-ktx` artifacts and their kotlin extensions have been merged into the main artifacts they extended. This means that extensions in an artifact like `autodispose-android-ktx` are now available directly in the corresponding `autodispose-android`.\n\nThis is a binary-compatible change because the extensions file name has changed while the extensions themselves have remained in the same package. So in essence, `import com.uber.autodispose.autoDisposable` still works as-is. Just remove the ktx artifact dependencies and everything will still link as-is!\n\nThe Kotlin standard library has been added as an `compileOnly` dependency of artifacts containing Kotlin bindings. This is to avoid imposing the dependency for non-Kotlin users, but the expectation is for Kotlin users to bring their own standard library dependency to fulfill this if used. Considering the standard library is an ubiquitous dependency for Kotlin projects, we don't expect this to be an issue and drew inspiration for this design from [Retrofit](https://github.com/square/retrofit).\n\nProguard/R8 `.pro` files in the unified artifacts have been updated to not warn on these `KotlinExtensions` files as they can be safely stripped in builds if unused.\n\n**NOTE:** One important thing this revealed was that the ktx artifacts were built with jdk target 1.6, while depending on Java artifacts that were built against JDK 8. Now that they are unified, this means that the Kotlin extensions require targeting JDK 1.8 as well (configurable via compiler arg `-jvm-target=1.8`).\n\nPRs: [#339](https://github.com/uber/AutoDispose/pull/339) [#341](https://github.com/uber/AutoDispose/pull/341) [#346](https://github.com/uber/AutoDispose/pull/346)\n\n### More Kotlin extensions!\n\nInitially, we only provided minimal Kotlin extensions to support scopes on extra types like Android's `LifecycleOwner`, `View`, etc. This resulted in a bit of ceremony for these APIs to be used though, such as:\n\n```kotlin\nObservable.just(1)\n    .autoDisposable(AndroidLifecycleScopeProvider.from(this))\n    .subscribe()\n```\n\nTo simplify this, we've added the following top-level extension functions for the following:\n* `autodispose-android` - `View`\n* `autodispose-archcomponents` - `LifecycleOwner`\n* `autodispose-rxlifecycle` - `LifecycleProvider`\n* `autodispose-rxlifecycle3` - `LifecycleProvider`\n\nSo now, the above snippet could just be:\n\n```kotlin\nObservable.just(1)\n    .autoDisposable(this)\n    .subscribe()\n```\n\nPRs: [#348](https://github.com/uber/AutoDispose/pull/348) [#353](https://github.com/uber/AutoDispose/pull/353)\n\n### Removed deprecated lifecycle artifacts\n\nFollowing their deprecating in 1.1.0, the `autodispose-lifecycle-jdk8` and `autodispose-lifecycle-ktx` artifacts are no longer published. Please move to just using `LifecycleScopeProvider` directly.\n\n### Misc\n\nDependency updates\n\n    Kotlin: 1.3.31\n    AndroidX Annotations: 1.0.2\n    RxJava: 2.2.8\n    RxAndroid: 2.1.1\n\nArtifact changes\n\n| Original | Merged into (if applicable) |\n|-|-|\n| autodispose-ktx | autodispose |\n| autodispose-android-ktx | autodispose-android |\n| autodispose-android-archcomponents-ktx | autodispose-android-archcomponents |\n| autodispose-android-archcomponents-test-ktx | autodispose-android-archcomponents-test |\n| autodispose-lifecycle-ktx | N/A |\n| autodispose-lifecycle-jdk8 | N/A |\n\n_Note:_ This does not mean the existing versions were deleted or removed in any way, just that we will not publish 1.3.0 or later versions of them.\n\nVersion 1.2.0\n-------------\n\n_2019-04-03_\n\n* Fixes a bug which allows Lint to refer to the app level `gradle.properties` file for configuration support. [#335](https://github.com/uber/AutoDispose/pull/335)\n* New `autodispose-rxlifeycle3` artifact for interop with RxLifecycle3. [#319](https://github.com/uber/AutoDispose/pull/319)\n* Various dependency updates\n```\nLint: 26.3.2\nKotlin 1.3.21\n```\n\nAll PRs: [#319](https://github.com/uber/AutoDispose/pull/319), [#320](https://github.com/uber/AutoDispose/pull/320), [#322](https://github.com/uber/AutoDispose/pull/322), [#326](https://github.com/uber/AutoDispose/pull/326), [#327](https://github.com/uber/AutoDispose/pull/327) [#328](https://github.com/uber/AutoDispose/pull/328), [#329](https://github.com/uber/AutoDispose/pull/329), [#330](https://github.com/uber/AutoDispose/pull/330), [#334](https://github.com/uber/AutoDispose/pull/334), [#335](https://github.com/uber/AutoDispose/pull/335), [#336](https://github.com/uber/AutoDispose/pull/336)\n\nVersion 1.1.0\n-------------\n\n_2018-12-13_\n\n### Static Analysis\n\nThis is a big static analysis release. AutoDispose now ships with two static\nanalysis artifacts: `autodispose-lint` for Android Lint and `autodispose-error-prone` for Error-Prone.\n\nBoth of these checks operate by detecting uses of standard RxJava `subscribe`/`subscribeWith`\ncalls in the context of something that has scope (such as a `ScopeProvider`). If they’re\ndetected, the lint/checker will mark them as missing `Disposable` handling and\nsuggest either using AutoDispose or (if `lenient` mode enabled) manually handle\nthe returned `Disposable`.\n\nBoth checks have configuration support:\n\n* `TypesWithScope` - a comma-separated list of custom types with scope. By default, this is additive to default scopes.\n* `OverrideScopes` - a boolean flag indicating if `TypesWithScope` should override the built-in scopes. `false` by default.\n* `Lenient` - a boolean flag to enable a lenient mode that tells the linter to ignore cases where the returned `Disposable` is captured (aka “I know what I’m doing” mode). `false` by default.\n\nBoth checkers should have feature parity. They have different advantages: the Error-Prone check runs at compile-time, and lint will show up in the\nIDE and run on Kotlin code. You should use whichever one fits your stack best.\n\nFull integration instructions can be found on their respective wikis:\n\n* https://github.com/uber/AutoDispose/wiki/Lint-Check\n* https://github.com/uber/AutoDispose/wiki/Error-Prone\n\nPrior to this release, the Error Prone checker was missing a required service file\nto run, so the new artifact is different than the previous one (but not conflicting since the old one never worked!).\n\nThis was a major project and contribution from a new maintainer to the project! [@shaishavgandhi05](https://github.com/shaishavgandhi05)\n\nAll PRs: [#316](https://github.com/uber/AutoDispose/pull/316), [#315](https://github.com/uber/AutoDispose/pull/315), [#313](https://github.com/uber/AutoDispose/pull/313), [#312](https://github.com/uber/AutoDispose/pull/312), [#310](https://github.com/uber/AutoDispose/pull/310), [#307](https://github.com/uber/AutoDispose/pull/307), [#308](https://github.com/uber/AutoDispose/pull/308), [#306](https://github.com/uber/AutoDispose/pull/306), [#299](https://github.com/uber/AutoDispose/pull/299), [#303](https://github.com/uber/AutoDispose/pull/303), [#301](https://github.com/uber/AutoDispose/pull/301), [#300](https://github.com/uber/AutoDispose/pull/300), [#282](https://github.com/uber/AutoDispose/pull/282), [#291](https://github.com/uber/AutoDispose/pull/291), [#292](https://github.com/uber/AutoDispose/pull/292)\n\n### DefaultLifecycleScopeProvider and KotlinLifecycleScopeProvider Deprecation ([#275](https://github.com/uber/AutoDispose/pull/275))\n\n`DefaultLifecycleScopeProvider` and `KotlinLifecycleScopeProvider` are now deprecated, and their default `requestScope()` behavior now elevated into the based\n`LifecycleScopeProvider` class. This is implemented as a Java 8 `default` interface method.\n\n### Misc\n\n* Non-android `-ktx` artifacts now use `implementation`/`api` dependencies ([#277](https://github.com/uber/AutoDispose/pull/277))\n* `automatic-module-name` is added to relevant JDK modules ([#281](https://github.com/uber/AutoDispose/pull/281))\n* Updated doc on `RxLifecycleInterop` ([#280](https://github.com/uber/AutoDispose/pull/280))\n* Kotlin is updated to 1.3.11 [#274](https://github.com/uber/AutoDispose/pull/274), [#309](https://github.com/uber/AutoDispose/pull/309)\n\nThanks to the following external contributors for this release: [@MarkyC](https://github.com/MarkyC)\n\nVersion 1.0.0\n----------------------------\n\n_2018-10-10_\n\n* Stable release!\n* This is identical in functionality to 1.0.0-RC3 but completely migrated to the new AndroidX artifacts. From this point forward for Android projects, you must be on AndroidX artifacts. You can use 1.0.0-RC3 to ease migration if need be.\n\nVersion 1.0.0-RC3\n----------------------------\n\n_2018-10-10_\n\n* The project now targets Java 8 bytecode, with the expectation that projects are either on Java 8 or (if on Android) use D8 via Android Gradle Plugin 3.2.0. ([#257](https://github.com/uber/AutoDispose/pull/257))\n* More sample recipes for Android ViewModels and Fragments ([#254](https://github.com/uber/AutoDispose/pull/254)) ([#260](https://github.com/uber/AutoDispose/pull/260))\n* Various dependency updates\n\n```\nSupport library 28.0.0\nArchitecture Components (runtime) 1.1.1\nKotlin 1.2.71\nRxJava 2.2.2\nRxAndroid 2.1.0\n```\n\nThanks to the following contributors for this release: [@shaishavgandhi05](https://github.com/shaishavgandhi05)\n\nVersion 1.0.0-RC2\n----------------------------\n\n_2018-8-14_\n\nSmall followup update to RC1\n\n* `subscribe(Observer)` methods in `SubscribeProxy` interfaces now accept wildcards for the observer type, matching their RxJava counterparts ([#244](https://github.com/uber/AutoDispose/issues/244))\n  * Example: `subscribe(Observer<T> observer)` -> `subscribe(Observer<? super T> observer)`\n* Kotlin artifacts now include `Module.md` files in dokka documentation ([#238](https://github.com/uber/AutoDispose/issues/238))\n* Android lifecycle Kotlin `scope()` extensions now return `ScopeProvider` instead of `LifecycleScopeProvider` ([#239](https://github.com/uber/AutoDispose/issues/239))\n\nThanks to the following contributors for this release: [@shaishavgandhi05](https://github.com/shaishavgandhi05)\n\nVersion 1.0.0-RC1\n----------------------------\n\n_2018-8-2_\n\nThis is the first release candidate of AutoDispose 1.0!\n\n### `Completable` replaces `Maybe` as the source of truth for scoping ([#234](https://github.com/uber/AutoDispose/issues/234))\n\n_Note: we say `Completable` for semantic convenience, but in code it's almost always referred to via `CompletableSource` for flexibility_\n\nThis is a significant API change, but a good one we want to clean up before releasing 1.0. Since its inception, AutoDispose has always coerced\nscopes into a `Maybe` representation. Now, scopes are coerced to a `CompletableSource`.\n\n`Maybe` seemed like the right idea for something that \"may or may not emit\", but in our case we actually don't\ncare about the difference between onSuccess or onComplete. We did have a notion of \"UNBOUND\", but that doesn't offer anything other\nthan a severed lifecycle scope disposal in an atomic reference (no other cleanups would happen for gc, etc). This brings us to a `Single`.\nThe thing is though, we don't care about the object/element type. A `Single` where the type doesn't matter is semantically a `Completable`,\nand thus this change.\n\nNote that semantics are slightly different for anyone that sourced scope via emissions from an `Observable`, `Maybe`, `Completable`,\nor `Flowable`, where before a completion event would not trigger disposal. Now it would. In the lifecycle artifact, completion\nof the lifecycle or emission of the target event (via `takeUntil()`) will signal disposal.\n\nIf there's a strong desire for it, we could look at adding top-level `autoDisposable` overrides that accept other RxJava types (and coerce them to `Completable`).\n\n### Lifecycle components are now a separate artifact ([#228](https://github.com/uber/AutoDispose/issues/228))\n\n`LifecycleScopeProvider` is now in a separate artifact under `autodispose-lifecycle`, and now just extends `ScopeProvider`. This is sort of something\nwe always wanted to do, as the recommended solution for AutoDispose is namely to use `ScopeProvider` and standard RxJava types. `LifecycleScopeProvider`\nsupports corresponding-events-type lifecycles for use with lifecycle components like Android, but we mostly see this as a mechanism for boundary checks.\nDan Lew excellently discusses this subject in his \"[Why Not RxLifecycle?](https://blog.danlew.net/2017/08/02/why-not-rxlifecycle/)\" blog post.\n\nThis does come with the caveat that one must implement `requestScope()` in implementations now. To smoothen this usage, a `autodispose-lifecycle-jdk8`\nartifact exists with a `DefaultLifecycleScopeProvider` that has a `default` implementation of this on Java 8+ that matches the existing behavior. A\nsimilar default behavior was added for the `autodispose-lifecycle-ktx` artifact. These behaviors can be further tuned via factory helpers in `LifecycleScopes`.\n\nOther notable changes in this:\n* `OutsideLifecycleException` has been renamed to `OutsideScopeException` and kept in the core artifact. Boundary checks can be done and respected in `ScopeProvider`\nimplementations, and corresponding `AutoDisposePlugins` for this have been renamed accordingly.\n* `correspondingEvents()` now returns a `CorrespondingEventsFunction`, which is a narrower subtype of `Function` that only needs one generic and only allows for\nthrowing `OutsideScopeException.\n\n### Misc\n\n* All deprecated APIs have been removed.\n* Kotlin Artifacts have been renamed to be `{name}-ktx` instead of `{name}-kotlin` to match other library conventions.\n* Kotlin artifacts with `.ktx` or `.kotlin` package name entries have had them removed to match convention with other ktx-style artifacts.\n  * i.e. Instead of `com.uber.autodispose.kotlin`, it would just be `com.uber.autodispose`.\n* `ViewScopeProvider` now uses a custom `MainThreadDisposable` that respects any main thread checks set via `AutoDisposeAndroidPlugins`. ([#232](https://github.com/uber/AutoDispose/pull/232))\n* Jetbrains annotations have been removed in favor of just using RxJava's `@Nullable` annotation directly. Saves some proguard rules and dependencies, and also makes annotation usage consistent.\n* The following dependencies have been updated:\n  * RxJava 2.2.0 (`as()` and `ParallelFlowable` are now stable APIs)\n  * Kotlin 1.2.60\n  * Build against Android SDK 28\n  * Support library 27.1.1\n  * RxLifecycle 2.2.2\n  * RxAndroid 2.0.2\n* The sample app has had some wonderful community contributions\n  * [LeakCanary integration](https://github.com/uber/AutoDispose/pull/225)\n  * [Architecture components sample](https://github.com/uber/AutoDispose/pull/223), including `ViewModel` and using a repository pattern\n  * [General structure cleanup](https://github.com/uber/AutoDispose/pull/226)\n\nThis is an RC1. We won't release 1.0 final until the AndroidX artifacts are stable to save ourselves from having to release a 2.0 immediately after this.\nThese are a lot of breaking changes, so please let us know if you see any issues.\n\nThanks to the following contributors for this release: [@shaishavgandhi05](https://github.com/shaishavgandhi05) and [@remcomokveld](https://github.com/remcomokveld)\n\nVersion 0.8.0\n----------------------------\n\n_2018-5-7_\n\n### Deprecated Scoper APIs now use the converter API under the hood ([#188](https://github.com/uber/AutoDispose/issues/188))\n\nUp to this point, the new `as()`-based converter APIs just delegated to the existing deprecated\n`to()` APIs. In this release, they have been flipped, such that the `to()` APIs now just point to\nthe `as()`-based APIs. This should be no visible user change, but please let us know if you see any\nissues.\n\n### ViewScopeProvider now implements ScopeProvider instead of LifecycleScopeProvider ([#196](https://github.com/uber/AutoDispose/issues/196))\n\nWe believe this makes more sense, as there's no beginning boundary check for Views that we can\ncheck and the general attach state is quite simple. This also avoids leaking an unnecessary\ninternal API.\n\n### Defer to `Comparable` checks if `LifecycleScopeProvider` types implement it ([#196](https://github.com/uber/AutoDispose/issues/196))\n\nFor better flexibility, if a type for `LifecycleScopeProvider` implements `Comparable`, we will\ndefer to it rather than `equals()`. This allows for consumers to better convey event *ordering* to\nthe scope provider, and allow AutoDispose to catch events *after* a target event as a fallback.\nThis covers cases where the targeted \"end\" event is missed but a later event comes through,\nallowing AutoDispose to dispose anyway. Note that this may result in a behavior change if your\nlifecycle types implemented `Comparable` before.\n\n### Removed Error-Prone annotations ([#208](https://github.com/uber/AutoDispose/issues/208))\n\nAs of Error-Prone 2.3.1, `@DoNotMock` was removed. We've switched to an internal copy of this\nannotation for documentation purposes and for any external checkers to still check this usage on\ntheir own (by name).\n\n### Switch from JSR305 to Jetbrains annotations for nullability ([#208](https://github.com/uber/AutoDispose/issues/208))\n\nTo be compatible with the Java 9 module system, we've switched away from the JSR 305\nannotations/javax-extras on packages and now use the Jetbrains annotations for nullability instead.\nWe still abide by a nonnull-by-default implementation, and only annotate nullable elements with\n`@Nullable`. This dependency, like JSR305/javax-extras, is `compileOnly`.\n\n### Misc changes\n\n* A few miscellaneous IDE warnings ([#208](https://github.com/uber/AutoDispose/issues/208))\n* We are now building against Android Gradle Plugin 3.1.x (latest stable) ([#190](https://github.com/uber/AutoDispose/issues/190))\n  * Due to ongoing Dokka issues and update latency, we've had to disable it on Kotlin artifacts for\n  now. We plan to re-enable on the next release, which should add compatibility for AGP 3.x+.\n\n### Call for input on next steps\n\nWe have two major design proposals that we want community feedback on that would take shape in the\nnext couple of releases. Please let us know if you have any thoughts!\n\n* **Kotlin rewrite:** [#198](https://github.com/uber/AutoDispose/issues/198)\n* **Extract LifecycleScopeProvider to separate artifact, make it extend ScopeProvider:** [#197](https://github.com/uber/AutoDispose/issues/197)\n\nThanks to the following contributors for this release: [@tbsandee](https://github.com/tbsandee),\n[@atexannamedbob](https://github.com/atexannamedbob)\n\nVersion 0.7.0\n----------------------------\n\n_2018-3-26_\n\n### AutoDisposeAndroidPlugins ([#183](https://github.com/uber/AutoDispose/pull/183))\n\nNew API! `AutoDisposeAndroidPlugins` API for plugin hooks to AutoDispose's android behavior at runtime.\nThe first plugin supported here is `MainThreadChecker`.\n\nThis plugin allows for supplying a custom `BooleanSupplier` that can customize how main thread checks\nwork. The conventional use case of this is Android JUnit tests, where the `Looper` class is not\nstubbed in the mock android.jar and fails explosively when touched.\n\nAnother potential use of this at runtime to customize checks for more fine-grained main thread\nchecks behavior.\n\nExample\n\n```java\nAutoDisposeAndroidPlugins.setOnCheckMainThread(() -> {\n    return true; // Use whatever heuristics you prefer.\n})\n```\n\nThis is available in the `autodispose-android` artifact, and all mainthread-checking APIs in android\nartifacts will delegate to this plugin hook.\n\n### Misc\n\n* Fixed a few nullability and other minor warnings ([#187](https://github.com/uber/autodispose/pull/187))\n  * Contributed by [@tbsandee](https://github.com/tbsandee)!\n\nVersion 0.6.1\n----------------------------\n\n_2018-2-23_\n\nThis is patch release with a couple of QoL improvements:\n* Android artifacts' consumer proguard rules have been updated to not warn on the compiled error-prone annotations, like `@DoNotMock` ([#178](https://github.com/uber/autodispose/issues/178))\n  * Contributed by [@danh32](https://github.com/danh32)!\n* Android artifacts no longer bundle a useless `BuildConfig.java` file ([#177](https://github.com/uber/autodispose/issues/177))\n\nVersion 0.6.0\n----------------------------\n\n_2018-2-5_\n\n### Error-Prone Checker artifact ([#156](https://github.com/uber/autodispose/issues/156))\n\nThere is a new Error-Prone checker artifact that you can optionally apply to have error-prone enforced checks that rx chains are autodisposed when executing in a class that has scope. This is experimental in the public, but has been used extensively internally at Uber for nearly a year. Please let us know if you run into any issues!\n\nWiki page with setup and configuration instructions: https://github.com/uber/AutoDispose/wiki/Error-Prone-Checker\n\nWe plan to add a UAST lint artifact in the future as well.\n\n### ParallelFlowable support ([#155](https://github.com/uber/autodispose/issues/155))\n\nAutoDispose now supports RxJava's `ParallelFlowable` type. Note that this only works through the new `as()` API, and there is no `ParallelScoper` API (since those are being removed in 1.0).\n\n### ScopeProvider and LifecycleScopeProvider are now annotated with `@DoNotMock` ([#153](https://github.com/uber/autodispose/issues/153))\n\nThese types have specific test helpers that will be more robust for long term test usage, and thus should not be mocked.\n\n### Convenience `test()` methods added to all SubscribeProxy interfaces ([#160](https://github.com/uber/autodispose/issues/160))\n\nThese are to match the convenience `test()` methods in regular RxJava types.\n\n### Misc\n\n- Archcomponents updated to 1.1.0 for compatibility with new artifacts ([#128](https://github.com/uber/autodispose/issues/128))\n- `autodispose-android-archcomponents-test` and `autodispose-android-archcomponents-test-kotlin` now only depend on the `common` arch components artifact rather than `extensions`, which removes the unused `livedata` and `viewmodel` transitive dependencies.\n- RxViewHolder examples now implement `LifecycleScopeProvider` instead of `ScopeProvider` ([#157](https://github.com/uber/autodispose/issues/157))\n- Deprecated Kotlin APIs are now `ERROR` level instead of `WARNING` ([#151](https://github.com/uber/autodispose/issues/151))\n- Various doc fixes ([#158](https://github.com/uber/autodispose/issues/158))\n- RxLifecycle updated to 2.2.1 ([#161](https://github.com/uber/autodispose/issues/161))\n- ErrorProne annotations updated to 2.2.0 ([#161](https://github.com/uber/autodispose/issues/161))\n- Android artifacts now compiled against SDK 27\n- Android support annotations updated to 27.0.2\n\nThanks to the following contributors! [@VisheshVadhera](https://github.com/VisheshVadhera) [@bangarharshit](https://github.com/bangarharshit) [@mmallozzi](https://github.com/mmallozzi) [@0legg](https://github.com/0legg) [@shaunkawano](https://github.com/shaunkawano)\n\nVersion 0.5.1\n----------------------------\n\n_2017-12-6_\n\n**Fix:** A bug where unbound scopes would mark the observer as disposed, subsequently preventing future events from emitting. ([#149](https://github.com/uber/autodispose/issues/149))\n\n**Fix:** Kotlin docs accidentally pointing to `to()` operators instead of `as()`. ([#145](https://github.com/uber/autodispose/issues/145))\n\nSnapshots should be fully working now as well.\n\nVersion 0.5.0\n----------------------------\n\n_2017-12-3_\n\n### New converter-based API for use with as() ([#141](https://github.com/uber/autodispose/issues/141))\n\nAutoDispose's primary API is now via static `autoDisposable()` methods on the `AutoDispose` class. The previous `to()` based APIs are now completely deprecated, and will be removed in AutoDispose 1.0.\n\nThis has been sort of the long-standing ideal API for AutoDispose for awhile, but wasn't possible until the introduction of the new `as()` operator in RxJava. As this operator is still not marked as stable (and won't until RxJava 2.2.0), AutoDispose will not be updated to 1.0 until then.\n\nThe main difference is that you no longer have to specify the type indirection, and the returned converter is applicable for all 5 RxJava types. In use, it looks like this:\n\n```java\nFlowable.just(1)\n    .as(autoDisposable(scope))\n    .subscribe()\n\nObservable.just(1)\n    .as(autoDisposable(scope))\n    .subscribe()\n\nMaybe.just(1)\n    .as(autoDisposable(scope))\n    .subscribe()\n\nSingle.just(1)\n    .as(autoDisposable(scope))\n    .subscribe()\n\nCompletable.complete()\n    .as(autoDisposable(scope))\n    .subscribe()\n```\n\nThere are three overloads for `autoDisposable()`, for each of the three scope types (`Maybe`, `ScopeProvider`, and `LifecycleScopeProvider`).\n\nThe Kotlin bindings have also been updated to match semantics, with the `autoDisposeWith` extension functions being deprecated in favor of analogous `autoDisposable`. These are `WARNING` level in this release, and will become `ERROR` in AutoDispose 0.6.0, before finally being removed in 1.0. They also provide `replaceWith` options (compatible with Kotlin's deprecation quickfixes).\n\n`autoDisposable` reads best when statically imported (so you can do `.as(autoDisposable(...))`, which you can safely do if you're using Java 8.\n\nFor structural replace templates, see [here](https://github.com/uber/AutoDispose/wiki/Migrating-from-0.4.0-to-0.5.0)).\n\n### Fixed a lot of concurrency edge cases and performance improvements after review from David Karnok ([#138](https://github.com/uber/autodispose/issues/138) and [#130](https://github.com/uber/autodispose/issues/130))\n\nDavid Karnok (@akarnokd, RxJava project lead) did an audit of the current codebase and gave extensive feedback in #130. #138 implements that feedback. This handled a lot of concurrency gotchas and edge cases we were missing before. See the issue and PR for full details.\n\n### Plugin for controlling whether or not to fill in stacktraces ([#124](https://github.com/uber/autodispose/issues/124))\n\n`AutoDisposePlugins` has a new API to control whether or not lifecycle exception stacktraces are filled in. What this means is that if you opt out, the exceptions thrown in `LifecycleScopeProvider` boundary issues will no longer have a stacktrace (`getStacktrace()` will return an empty array) and only carry the type name and message. This can be useful to gain some performance if you track stacktracing via other means.\n\n### UNBOUND shorthand ([#125](https://github.com/uber/autodispose/issues/125))\n\n`ScopeProvider` has a static instance of an \"unbound\" provider directly in the interface now for reuse. This obviates the need for `TestScopeProvider#unbound()`, which has been **removed**. Usage is simple:\n\n```java\nObservable.just(1)\n    .as(autoDisposable(ScopeProvider.UNBOUND))\n    .subscribe()\n```\n\n## Misc\n\n- Archcomponents updated to 1.0.0 final ([#128](https://github.com/uber/autodispose/issues/128))\n- RxJava dependency is now 2.1.7 (to leverage `as()`) ([#141](https://github.com/uber/autodispose/issues/141))\n- Kotlin is now updated to 1.2.0 ([#141](https://github.com/uber/autodispose/issues/141))\n- Dokka is wired up, meaning that kotlin artifacts now also have exported javadocs. ([#126](https://github.com/uber/autodispose/issues/126))\n- `subscribeBy` example extension in the sample app displaying how you can add extension functions to the `*SubscribeProxy` classes. ([#127](https://github.com/uber/autodispose/issues/127))\n- `delegateObserver()` APIs on `AutoDisposing` observers have been promoted to stable. Considering they are useful for `subscribeWith()`, we can just keep it observer-based and keep the library more flexible long-term ([#144](https://github.com/uber/autodispose/issues/144))\n\nThanks to the following contributors! [@charlesdurham](https://github.com/@charlesdurham) [@ajalt](https://github.com/@ajalt) [@tbsandee](https://github.com/@tbsandee) [@akarnokd](https://github.com/@akarnokd)\n\nVersion 0.4.0\n----------------------------\n\n_2017-10-22_\n\n#### Structured Android Components [#111](https://github.com/uber/AutoDispose/pull/111)\n\nAndroid components have been split up into several artifacts under `:android`:\n-  `autodispose-android`: Core android utilities, previously `:autodispose-android`\n- `autodispose-android-archcomponents`: Utilities for lifecycles in android archcomponents, previously `:autodispose-android-archcomponents` but does not have the test helper\n- **New:** `autodispose-android-archcomponents-test`: Test utilities for working with arch components, namely `TestLifecycleOwner`, formerly `TestAndroidLifecycleScopeProvider`.\n  - This allows us to remove the `extensions` dependency from the main arch components artifact and keep this optional. This API can also be used for general use testing for arch components, as it's not actually specific to AutoDispose.\n- **New:** `autodispose-android-kotlin`: kotlin bindings for `autodispose-android`\n- **New:** `autodispose-android-archcomponents-kotlin`: kotlin bindings for `autodispose-android-archcomponents`\n- **New:** `autodispose-android-archcomponents-test-kotlin`: kotlin bindings for `autodispose-android-test-archcomponents`\n- **New:** Android artifacts include consumer proguard rules (relates to ([#112](https://github.com/uber/AutoDispose/issues/112)))\n\nRelated changes:\n- **Fix:** Arch components updated to `1.0.0-rc1`, which should fix compatibility issues noted in ([#113](https://github.com/uber/AutoDispose/issues/113))\n- **Enhancement:** `untilEvent` overload for AndroidLifecycleScopeProvider ([#107](https://github.com/uber/AutoDispose/issues/107))\n  - Now you can bind until a specific target event, or provide your own boundary provider function\n- Behavior change: previously, anything occurring after `ON_STOP` would resolve to `ON_DESTROY`. Now, they resolve to stop on the next destruction event. This brings it inline with the modern behavior of arch components version `-rc1`.\n- **Enhancement:** `AndroidLifecycleScopeProvider`s are now reusable. This is somewhat experimental, as it works by dynamically resolving the last event based on the state. Please report any issues! [#121](https://github.com/uber/AutoDispose/pull/121)\n\n#### RxLifecycle Interop\n\nA new `autodispose-rxlifecycle` interop module was added, adding support for scoping to [RxLifecycle](https://github.com/trello/RxLifecycle)'s `LifecycleProvider` API. ([#118](https://github.com/uber/AutoDispose/pull/118))\n\n#### Misc\n\n- Reduced object allocations ([#108](https://github.com/uber/AutoDispose/issues/108))\n- Convenience `unbound()` factory on `TestScopeProvider` ([#108](https://github.com/uber/AutoDispose/issues/108))\n- Removed synthetic accessors ([#103](https://github.com/uber/AutoDispose/issues/103))\n- Updated to Kotlin 1.1.51 ([#116](https://github.com/uber/AutoDispose/issues/116))\n\nThanks to the following contributors! [@rubengees](https://github.com/rubengees) [@bangarharshit](https://github.com/bangarharshit)\n\n#### Updated dependencies:\n```\nAndroid Arch Components: 1.0.0-rc1\nAndroid Arch Components (common): 1.0.3\nKotlin: 1.1.51\n```\n\n#### New artifacts coordinates:\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-android-archcomponents-test.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-android-archcomponents-test)\n```gradle\ncompile 'com.uber.autodispose:autodispose-android-archcomponents-test:x.y.z'\n```\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-rxlifecycle.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-rxlifecycle)\n```gradle\ncompile 'com.uber.autodispose:autodispose-rxlifecycle:x.y.z'\n```\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-android-kotlin.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-android-kotlin)\n```gradle\ncompile 'com.uber.autodispose:autodispose-android-kotlin:x.y.z'\n```\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-android-archcomponents-kotlin.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-android-archcomponents-kotlin)\n```gradle\ncompile 'com.uber.autodispose:autodispose-android-archcomponents-kotlin:x.y.z'\n```\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-android-archcomponents-test-kotlin.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-android-archcomponents-test-kotlin)\n```gradle\ncompile 'com.uber.autodispose:autodispose-android-archcomponents-test-kotlin:x.y.z'\n```\n\nVersion 0.3.0\n----------------------------\n\n_2017-10-01_\n\n* **New: Static factory API ([#88](https://github.com/uber/AutoDispose/pull/88))**\n\nAfter a long time trying to figure out how to finagle this in a way that played nice with IDE autocomplete,\nthe main API for AutoDispose is now via the `AutoDispose` class and its static factories.\n\n```java\nObservable(1)\n  .to(AutoDispose.with(yourScope).forObservable())\n  .subscribe();\n\n// Note: on Java 7, you must specify the generic. The IDE should autocomplete this for you.\nObservable(1)\n  .to(AutoDispose.with(yourScope).<Integer>forObservable())\n  .subscribe();\n```\n\n`with()` has three overloads for `Maybe`, `ScopeProvider`, and `LifecycleScopeProvider`. They return\nan intermediary `ScopeHandler`, which in turn has 5 generic `for___()` methods that correspond to the\n5 RxJava types (`Observable`, `Flowable`, `Single`, `Maybe`, and `Completable`).\n\nThe old `Scoper` class are now **deprecated**, and will be removed in AutoDispose 1.0. Fortunately,\nthis is easy to migrate via IntelliJ's structural replace. Information can be found [here](https://github.com/uber/AutoDispose/wiki/Migrating-from-0.2.0-to-0.3.0).\n\n* **New: Support for Android Architecture Components! ([#71](https://github.com/uber/AutoDispose/pull/71))**\n\nWith the beta release of architecture components, they are now supported in the `autodispose-android-archcomponents`\nartifact.\n\n```java\nObservable(1)\n  .to(AutoDispose.with(AndroidLifecycleScopeProvider.from(this)).forObservable())\n  .subscribe();\n```\n\nWhere `this` could be anything that implements `LifecycleOwner` or extends `Lifecycle`.\n\n[![Maven Central](https://img.shields.io/maven-central/v/com.uber.autodispose/autodispose-android-archcomponents.svg)](https://mvnrepository.com/artifact/com.uber.autodispose/autodispose-android-archcomponents)\n```gradle\ncompile 'com.uber.autodispose:autodispose-android-archcomponents:x.y.z'\n```\n\nThanks to [@yigit](https://github.com/yigit), [@jaychang0917](https://github.com/jaychang0917), and [@lsvijay](https://github.com/lsvijay) for their help and contributions on this!\n\n* **New: Delegate Observer retrieval ([#89](https://github.com/uber/AutoDispose/pull/89))**\n\nEvery automatically disposing observer implements one of the corresponding `AutoDisposing____Observer`\ninterfaces in the `com.uber.autodispose.observers` package. They are considered read-only public API,\nwith the intention that you can look for them in the RxJava plugin system (such as an onSubscribe hook).\nThis extends their functionality to expose a new experimental API called `delegateObserver()`. This allows\nyou to access the underlying observer that this is automatically disposing.\n\nThe reason for this is that there may be conditions where you want to handle functionality depending\non information from that Observer. As of RxJava 2.1.4, one such case could be to read information from\na `LambdaConsumerIntrospection` ([relevant PR](https://github.com/ReactiveX/RxJava/pull/5590)).\n\nIn the future, this will likely be narrowed to return a `@Nullable lambdaConsumerIntrospection()`, but\nwe're open to feedback if others think this should remain the high level `Observer` type.\n\nThanks to [@mswysocki](https://github.com/mswysocki) for his contribution on this!\n\n* **New: JSR 305 Nullability Annotations ([#79](https://github.com/uber/AutoDispose/pull/79))**\n\nAutoDispose packages now leverage JSR 305 annotations to indicate nullability. By default, all methods\nand parameters are non-null by default. This uses the spin-off [javax-extras](https://github.com/uber-common/javax-extras)\nartifact for method nullability support, and is only a `compileOnly` dependency (so it should show up)\nfor tooling but is not packaged as a compile dependency.\n\nFurther reading: https://medium.com/square-corner-blog/non-null-is-the-default-58ffc0bb9111\n\n* **New: Sample android app! ([#97](https://github.com/uber/AutoDispose/pull/97))**\n\nFor a long time, AutoDispose relied on tests and the README to be demonstrations of API use. It's become\nclear that this is not enough information though, so we've added a full sample app (borrowing heavily\nfrom RxLifecycle/Conductor's) to better illustrate API usage and runtime behavior. We'll continue to\niterate on this over time.\n\n* **Improved: EndConsumerHelper ([#77](https://github.com/uber/AutoDispose/pull/77))**\n\nAutoDispose uses the same disposal-helper utilities as RxJava. This updates to RxJava's new\n`EndConsumerHelper`, which should hopefully help produce more helpful error messages in disposal error\nconditions.\n\n* **Other**\n\nUpdated various dependencies:\n\n    Android Arch Components: 1.0.0-beta1\n    Android Support Library: 26.1.0 (to match arch components)\n    Kotlin: 1.1.50\n\nAs always, we welcome any and all discussions/feedback/PRs! We're marching toward a 1.0 release Real\nSoon Now, so now is the time. There are a few outstanding discussion issues in the issue tracker about\n1.0 final design decisions.\n\nVersion 0.2.0\n----------------------------\n\n_2017-05-08_\n\n* **New: Kotlin artifact! (#47)**\n\nThis adds `autoDisposeWith()` extensions to RxJava types.\n\n```kotlin\nmyObservable\n   .doWhatever()\n   .autoDisposeWith(this)\n   .subscribe()\n```\n\n* **New: Plugin system! (#57)**\n\nModeled after RxJava's plugins, this allows you to customize the behavior of AutoDispose with lifecycle boundary checks.\n\n```java\nAutoDisposePlugins.setOutsideLifecycleHandler(t -> {\n    // Swallow the exception, or rethrow it, or throw your own!\n})\n```\n\nA good use case of this is, say, just silently disposing/logging observers outside of lifecycle exceptions in production but crashing on debug.\n\n* **New: Test helpers! (#48 #49)**\n\nTwo helpers were added to simulate conditions in testing.\n- `TestLifecycleScopeProvider`\n  - This has two corresponding lifecycle methods: `start()` and `stop()`\n- `TestScopeProvider`\n  - Has just one method - `emit()`.\n\nFor testing with just the `Maybe<?>` scope, we recommend using RxJava's built-in `MaybeSubject`.\n\n* **Fix**: Fixed a race condition where upstream wouldn't be disposed if the lifecycle emitted or error'd synchronously (i.e. was already terminated). (#57)\n* **Fix**: Add missing `@CheckReturnValue` annotations to `subscribeWith` methods. (#53)\n\n**Other tidbits:**\n- Removed `@NonNull` annotations. Everything is `@NonNull` by default, and only elements\nannotated with `@Nullable` are not.\n- Use of the new `java-library` plugin for gradle (#64). The RxJava dependencies are marked as `api`.\n- Error prone has been integrated. Currently the annotations are just marked as `compileOnly`, but if a need arises/community wants them - we can compile them in a future version.\n\nVersion 0.1.0\n----------------------------\n\n_2017-03-13_\n\n* Initial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1513671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mobile-open-source@uber.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [https://contributor-covenant.org/version/1/4][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.83203125,
          "content": "Contributing to AutoDispose\n=======================\n\nThe Uber team welcomes contributions of all kinds, from simple bug reports through documentation, test cases,\nbugfixes, and features.\n\nWorkflow\n--------\n\nWe love GitHub issues!\n\nFor small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice.\n\nFor big features, please open an issue so that we can agree on the direction, and hopefully avoid\ninvesting a lot of time on a feature that might need reworking.\n\nSmall pull requests for things like typos, bugfixes, etc are always welcome.\n\n### Code style\n\nThis project uses [ktlint](https://github.com/pinterest/ktlint) and [GJF](https://github.com/google/google-java-format),\nprovided via the [spotless](https://github.com/diffplug/spotless) gradle plugin.\n\nIf you find that one of your pull reviews does not pass the CI server check due to a code style\nconflict, you can easily fix it by running: ./gradlew spotlessApply.\n\nGenerally speaking - we use vanilla ktlint + 2space indents, and vanilla GJF. You can integrate both of\nthese in IntelliJ code style via either [GJF's official plugin](https://plugins.jetbrains.com/plugin/8527-google-java-format)\nor applying code style from Jetbrains' official style.\n\nNo star imports please!\n\nDOs and DON'Ts\n--------------\n\n* DO follow our coding style\n* DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.\n* DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion.\n* DO run all Gradle verification tasks (`./gradlew check`) before submitting a pull request\n\n* DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.291015625,
          "content": "\r\n                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        https://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n"
        },
        {
          "name": "MAINTAINING_WEBSITE.md",
          "type": "blob",
          "size": 1.9873046875,
          "content": "# Maintaining Documentation Website\n\nThe [documentation website](https://uber.github.io/AutoDispose/) is built using [MkDocs](https://squidfunk.github.io/mkdocs-material/). This requires you to install python to deploy the website. MkDocs supports Python versions 2.7, 3.4, 3.5, 3.6, 3.7.\n\n## Overview\n\nThe main configuration of the website happens through the [mkdocs.yml](https://github.com/uber/AutoDispose/blob/main/mkdocs.yml) file. This defines various things like extra css, favicons, icons as well as the main navigation of the website.\n\n## Adding a Page\n\nAll of the main pages exist in [docs](https://github.com/uber/AutoDispose/tree/main/docs) directory. To add a new page, simply add a new markdown file to the docs directory. Once that's done, simply add the title of the page and the name of the file in the `nav` section of mkdocs.yml like so:\n```yml\nnav:\n  - 'New Page': new_page.md\n    - 'Nested Page': nested_page.md\n  -- 'Top Level Page': top_level_page.md\n ```\n\n ## Editing a Page\n\n You can find the markdown file corresponding to the page that you want to edit by checking the `mkdocs.yml` file and finding the `nav` section. This should have the markdown file name.\nYou can then find that file in the `docs` directory. After you've made changes to that file, get them merged in and [deploy the website](#deploying-the-website)\n\n ## Adding Custom CSS\n\n You can add your own CSS in the [app.css](https://github.com/uber/AutoDispose/blob/main/docs/css/app.css) file.\n\n ## Deploying the website\n\n The website can be deployed by executing the `deploy_website.sh` script like so:\n```bash\n./deploy_website.sh\n```\nThe script does the following:\n * Creates a temporary folder.\n * Clones the repository.\n * Runs Dokka.\n * Copies over the files like `README.md`, `CHANGELOG.md`, `CONTRIBUTING.md` etc into the `docs` folder. This is done because these markdown files are required to be in the GitHub repo and we copy it over so that we don't create duplicates.\n * Deploys mkdocs on gh-pages.\n * Deletes the temporary folder.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.7333984375,
          "content": "# AutoDispose\n\nAutomatic binding+disposal of RxJava streams.\n\n### [uber.github.io/AutoDispose](https://uber.github.io/AutoDispose)\n\nLicense\n-------\n\n    Copyright (C) 2017 Uber Technologies\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.5859375,
          "content": "Releasing\n=========\n\n 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.\n 2. Update the `CHANGELOG.md` for the impending release.\n 3. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n 4. `git tag -a X.Y.Z -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n 5. `./gradlew publish`\n 6. Update the `gradle.properties` to the next SNAPSHOT version.\n 7. `git commit -am \"Prepare next development version.\"`\n 8. `git push && git push --tags`\n 9. Deploy the updated website with the new docs. This can be done by running the script `./deploy_website.sh`\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "autodispose-interop",
          "type": "tree",
          "content": null
        },
        {
          "name": "autodispose-lifecycle",
          "type": "tree",
          "content": null
        },
        {
          "name": "autodispose",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 9.4658203125,
          "content": "/*\n * Copyright (C) 2017. Uber Technologies\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport com.android.build.api.dsl.ApplicationExtension\nimport com.android.build.api.dsl.CommonExtension\nimport com.android.build.api.variant.ApplicationAndroidComponentsExtension\nimport com.android.build.api.variant.LibraryAndroidComponentsExtension\nimport com.android.build.gradle.LibraryExtension\nimport com.diffplug.gradle.spotless.SpotlessExtension\nimport com.diffplug.gradle.spotless.SpotlessExtensionPredeclare\nimport com.diffplug.spotless.LineEnding\nimport com.vanniktech.maven.publish.MavenPublishBaseExtension\nimport java.net.URI\nimport net.ltgt.gradle.errorprone.CheckSeverity\nimport net.ltgt.gradle.errorprone.errorprone\nimport net.ltgt.gradle.nullaway.nullaway\nimport org.jetbrains.dokka.gradle.DokkaTaskPartial\nimport org.jetbrains.kotlin.gradle.dsl.JvmTarget\nimport org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension\nimport org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompilerOptions\nimport org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension\nimport org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension\n\nplugins {\n  alias(libs.plugins.kotlin.jvm) apply false\n  alias(libs.plugins.kotlin.android) apply false\n  alias(libs.plugins.android.application) apply false\n  alias(libs.plugins.android.library) apply false\n  alias(libs.plugins.android.lint) apply false\n  alias(libs.plugins.errorProne) apply false\n  alias(libs.plugins.nullAway) apply false\n  alias(libs.plugins.dokka)\n  alias(libs.plugins.animalSniffer) apply false\n  alias(libs.plugins.mavenPublish) apply false\n  alias(libs.plugins.ksp) apply false\n  alias(libs.plugins.spotless)\n  alias(libs.plugins.binaryCompatibilityValidator)\n}\n\napiValidation { ignoredProjects += listOf(\"sample\", \"test-utils\") }\n\nval mixedSourcesArtifacts =\n  setOf(\n    \"autodispose\",\n    \"autodispose-android\",\n    \"autodispose-androidx-lifecycle\",\n    \"autodispose-androidx-lifecycle-test\",\n    \"autodispose-lifecycle\"\n  )\n// These are files with different copyright headers that should not be modified automatically.\nval copiedFiles =\n  listOf(\n      \"AtomicThrowable\",\n      \"AutoDisposableHelper\",\n      \"AutoDisposeBackpressureHelper\",\n      \"AutoDisposeEndConsumerHelper\",\n      \"AutoSubscriptionHelper\",\n      \"ExceptionHelper\",\n      \"HalfSerializer\",\n    )\n    .map { \"**/*${it}.java\" }\n    .toTypedArray()\n\ntasks.dokkaHtmlMultiModule {\n  outputDirectory.set(rootDir.resolve(\"docs/api/2.x\"))\n  includes.from(project.layout.projectDirectory.file(\"README.md\"))\n}\n\nval ktfmtVersion = libs.versions.ktfmt.get()\n\nallprojects {\n  apply(plugin = \"com.diffplug.spotless\")\n  val spotlessFormatters: SpotlessExtension.() -> Unit = {\n    lineEndings = LineEnding.PLATFORM_NATIVE\n\n    format(\"misc\") {\n      target(\"**/*.md\", \"**/.gitignore\")\n      indentWithSpaces(2)\n      trimTrailingWhitespace()\n      endWithNewline()\n    }\n    kotlin {\n      target(\"**/src/**/*.kt\")\n      targetExclude(\"spotless/copyright.kt\")\n      ktfmt(ktfmtVersion).googleStyle()\n      licenseHeaderFile(rootProject.file(\"spotless/copyright.kt\"))\n      trimTrailingWhitespace()\n      endWithNewline()\n    }\n    kotlinGradle {\n      target(\"*.kts\")\n      targetExclude(\"spotless/copyright.kt\")\n      ktfmt(ktfmtVersion).googleStyle()\n      trimTrailingWhitespace()\n      endWithNewline()\n      licenseHeaderFile(\n        rootProject.file(\"spotless/copyright.kt\"),\n        \"(import|plugins|buildscript|dependencies|pluginManagement|dependencyResolutionManagement)\"\n      )\n    }\n\n    java {\n      target(\"**/*.java\")\n      targetExclude(*copiedFiles, \"spotless/copyright.java\")\n      googleJavaFormat(libs.versions.gjf.get())\n      licenseHeaderFile(rootProject.file(\"spotless/copyright.java\"))\n      removeUnusedImports()\n      trimTrailingWhitespace()\n      endWithNewline()\n    }\n  }\n  configure<SpotlessExtension> {\n    spotlessFormatters()\n    if (project.rootProject == project) {\n      predeclareDeps()\n    }\n  }\n  if (project.rootProject == project) {\n    configure<SpotlessExtensionPredeclare> { spotlessFormatters() }\n  }\n}\n\nval compileSdkVersionInt: Int = libs.versions.compileSdkVersion.get().toInt()\nval targetSdkVersion: Int = libs.versions.targetSdkVersion.get().toInt()\nval minSdkVersion: Int = libs.versions.minSdkVersion.get().toInt()\nval defaultJvmTargetVersion = libs.versions.jvmTarget\nval lintJvmTargetVersion = libs.versions.lintJvmTarget\nval nullAwayDep = libs.build.nullAway\nval errorProneDep = libs.build.errorProne\n\nsubprojects {\n  val isSample = project.name == \"sample\"\n  val isLint = project.path.contains(\"static-analysis\")\n  val isAndroid = project.path.startsWith(\":android:\") || isSample\n  val jvmTargetVersion =\n    if (isLint) {\n      lintJvmTargetVersion\n    } else {\n      defaultJvmTargetVersion\n    }\n\n  pluginManager.withPlugin(\"java\") {\n    configure<JavaPluginExtension> {\n      toolchain {\n        languageVersion.set(\n          JavaLanguageVersion.of(libs.versions.jdk.get().removeSuffix(\"-ea\").toInt())\n        )\n      }\n    }\n\n    if (!isAndroid && !isLint) {\n      tasks.withType<JavaCompile>().configureEach {\n        options.release.set(jvmTargetVersion.map { it.removePrefix(\"1.\") }.map(String::toInt))\n      }\n    }\n  }\n\n  val configureKotlin =\n    Action<AppliedPlugin> {\n      configure<KotlinProjectExtension> {\n        if (!isSample) {\n          explicitApi()\n        }\n        val jvmCompilerOptions: KotlinJvmCompilerOptions.() -> Unit = {\n          jvmTarget.set(jvmTargetVersion.map(JvmTarget::fromTarget))\n          freeCompilerArgs.addAll(\"-Xjsr305=strict\")\n          if (!isLint) {\n            progressiveMode.set(true)\n          }\n        }\n        when (this) {\n          is KotlinJvmProjectExtension -> compilerOptions(jvmCompilerOptions)\n          is KotlinAndroidProjectExtension -> compilerOptions(jvmCompilerOptions)\n        }\n      }\n    }\n  pluginManager.withPlugin(\"org.jetbrains.kotlin.jvm\", configureKotlin)\n  pluginManager.withPlugin(\"org.jetbrains.kotlin.android\", configureKotlin)\n\n  pluginManager.withPlugin(\"com.vanniktech.maven.publish\") {\n    project.apply(plugin = \"org.jetbrains.dokka\")\n\n    tasks.withType<DokkaTaskPartial>().configureEach {\n      outputDirectory.set(buildDir.resolve(\"docs/partial\"))\n      moduleName.set(project.property(\"POM_ARTIFACT_ID\").toString())\n      moduleVersion.set(project.property(\"VERSION_NAME\").toString())\n      dokkaSourceSets.configureEach {\n        skipDeprecated.set(true)\n        includes.from(\"Module.md\")\n        suppressGeneratedFiles.set(true)\n        suppressInheritedMembers.set(true)\n        externalDocumentationLink {\n          url.set(URI(\"https://reactivex.io/RxJava/3.x/javadoc/\").toURL())\n        }\n        externalDocumentationLink {\n          url.set(URI(\"https://kotlin.github.io/kotlinx.coroutines/index.html\").toURL())\n        }\n        perPackageOption {\n          // language=RegExp\n          matchingRegex.set(\".*\\\\.internal\\\\..*\")\n          suppress.set(true)\n        }\n        val moduleMd = project.layout.projectDirectory.file(\"Module.md\")\n        if (moduleMd.asFile.exists()) {\n          includes.from(moduleMd)\n        }\n      }\n    }\n\n    configure<MavenPublishBaseExtension> {\n      publishToMavenCentral(automaticRelease = true)\n      signAllPublications()\n    }\n  }\n\n  // Common android config\n  val commonAndroidConfig: CommonExtension<*, *, *, *>.() -> Unit = {\n    compileSdk = compileSdkVersionInt\n\n    defaultConfig {\n      minSdk = minSdkVersion\n      testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n      testApplicationId = \"autodispose2.androidTest\"\n    }\n    compileOptions {\n      sourceCompatibility = JavaVersion.toVersion(jvmTargetVersion.get())\n      targetCompatibility = JavaVersion.toVersion(jvmTargetVersion.get())\n    }\n    lint {\n      checkTestSources = true\n      val lintXml = file(\"lint.xml\")\n      if (lintXml.exists()) {\n        lintConfig = lintXml\n      }\n    }\n    testOptions { execution = \"ANDROIDX_TEST_ORCHESTRATOR\" }\n  }\n\n  pluginManager.withPlugin(\"com.android.library\") {\n    project.configure<LibraryExtension> {\n      commonAndroidConfig()\n      defaultConfig { consumerProguardFiles(\"consumer-proguard-rules.txt\") }\n      testBuildType = \"release\"\n      configure<LibraryAndroidComponentsExtension> {\n        beforeVariants(selector().withBuildType(\"debug\")) { builder -> builder.enable = false }\n      }\n    }\n  }\n\n  pluginManager.withPlugin(\"com.android.application\") {\n    project.configure<ApplicationExtension> {\n      commonAndroidConfig()\n      configure<ApplicationAndroidComponentsExtension> {\n        // Only debug enabled for this one\n        beforeVariants { builder ->\n          builder.enable = builder.buildType != \"release\"\n          builder.enableAndroidTest = false\n          builder.enableUnitTest = false\n        }\n      }\n    }\n  }\n\n  project.apply(plugin = \"net.ltgt.errorprone\")\n  project.apply(plugin = \"net.ltgt.nullaway\")\n  project.dependencies {\n    add(\"errorprone\", nullAwayDep)\n    add(\"errorprone\", errorProneDep)\n  }\n  project.tasks.withType<JavaCompile>().configureEach {\n    options.errorprone.nullaway {\n      severity = CheckSeverity.ERROR\n      annotatedPackages.add(\"autodispose2\")\n    }\n  }\n}\n"
        },
        {
          "name": "deploy_website.sh",
          "type": "blob",
          "size": 1.0478515625,
          "content": "#!/bin/bash\n\n# The website is built using MkDocs with the Material theme.\n# https://squidfunk.github.io/mkdocs-material/\n# It requires Python to run.\n# Install the packages with the following command:\n# pip install mkdocs mkdocs-material mdx_truly_sane_lists\n\nif [[ \"$1\" = \"--local\" ]]; then local=true; fi\n\nif ! [[ ${local} ]]; then\n  set -ex\n\n  REPO=\"git@github.com:uber/AutoDispose.git\"\n  DIR=temp-clone\n\n  # Delete any existing temporary website clone\n  rm -rf ${DIR}\n\n  # Clone the current repo into temp folder\n  git clone ${REPO} ${DIR}\n\n  # Move working directory into temp folder\n  cd ${DIR}\n\n  # Generate the API docs\n  ./gradlew dokkaHtmlMultiModule --no-configuration-cache\nfi\n\n# Copy in special files that GitHub wants in the project root.\ncp CHANGELOG.md docs/changelog.md\ncp CONTRIBUTING.md docs/contributing.md\ncp CODE_OF_CONDUCT.md docs/code-of-conduct.md\n\n# Build the site and push the new files up to GitHub\nif ! [[ ${local} ]]; then\n  mkdocs gh-deploy\nelse\n  mkdocs serve\nfi\n\n# Delete our temp folder\nif ! [[ ${local} ]]; then\n  cd ..\n  rm -rf ${DIR}\nfi"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 2.5498046875,
          "content": "#\n# Copyright (C) 2017. Uber Technologies\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nGROUP=com.uber.autodispose2\nVERSION_NAME=2.3.0-SNAPSHOT\nPOM_DESCRIPTION=Automatic binding+disposal of RxJava 2+ streams.\nPOM_URL=https://github.com/uber/AutoDispose/\nPOM_SCM_URL=https://github.com/uber/AutoDispose/\nPOM_SCM_CONNECTION=scm:git:git://github.com/uber/AutoDispose.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/uber/AutoDispose.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=https://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=uber\nPOM_DEVELOPER_NAME=Uber Technologies\nSONATYPE_STAGING_PROFILE=com.uber\n\nandroid.useAndroidX=true\nandroid.enableJetifier=true\nandroid.defaults.buildfeatures.aidl=false\nandroid.defaults.buildfeatures.buildconfig=false\nandroid.defaults.buildfeatures.renderscript=false\nandroid.defaults.buildfeatures.resvalues=false\nandroid.defaults.buildfeatures.shaders=false\nandroid.library.defaults.buildfeatures.androidresources=false\n\n# For GJF and error prone and kapt and AGP\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \\\n  --add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED \\\n  --add-opens=java.base/java.io=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED \\\n  --add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.3271484375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.80078125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.611328125,
          "content": "site_name: AutoDispose\nrepo_name: AutoDispose\nrepo_url: https://github.com/uber/AutoDispose\nsite_description: \"Automatic binding+disposal of RxJava 2 streams.\"\nsite_author: Uber Technologies\nremote_branch: gh-pages\n\ncopyright: 'Copyright &copy; 2019 Uber Technologies'\n\ntheme:\n  name: 'material'\n  favicon: images/uber_oss_logo.png\n  logo: images/uber_oss_logo.png\n  palette:\n    primary: 'white'\n    accent: 'white'\n\nextra_css:\n  - 'css/app.css'\n\nmarkdown_extensions:\n  - smarty\n  - codehilite:\n      guess_lang: false\n  - footnotes\n  - meta\n  - toc:\n      permalink: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - tables\n\nnav:\n  - 'Overview': index.md\n  - '2.X API':\n    - 'Overview': api/2.x/index.html\n    - 'autodispose': api/2.x/autodispose/index.html\n    - 'autodispose-android': api/2.x/android/autodispose-android/index.html\n    - 'autodispose-androidx-lifecycle': api/2.x/android/autodispose-androidx-lifecycle/index.html\n    - 'autodispose-interop-coroutines': api/2.x/autodispose-interop/coroutines/index.html\n    - 'autodispose-lifecycle': api/2.x/autodispose-lifecycle/index.html\n    - 'autodispose-observers': api/2.x/autodispose/autodispose2.observers/index.html\n  - 'Error Prone': error-prone.md\n  - 'Lint Check': lint-check.md\n  - 'Changelog' : changelog.md\n  - 'Migrating from 0.2.0 to 0.3.0': migrating-020-030.md\n  - 'Migrating from 0.4.0 to 0.5.0': migrating-040-050.md\n  - 'Migrating from 1.x to 2.x': migrating-1x-2x.md\n  - 'Contributing': contributing.md\n  - 'Code of Conduct': code-of-conduct.md\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 1.2392578125,
          "content": "/*\n * Copyright (C) 2017. Uber Technologies\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npluginManagement {\n  repositories {\n    mavenCentral()\n    google()\n    gradlePluginPortal()\n  }\n}\n\ndependencyResolutionManagement {\n  repositories {\n    google()\n    mavenCentral()\n    gradlePluginPortal()\n  }\n}\n\nrootProject.name = \"autodispose-root\"\n\nif (System.getenv(\"ANDROID_HOME\") != null) {\n  include(\n    \":android:autodispose-android\",\n    \":android:autodispose-androidx-lifecycle\",\n    \":android:autodispose-androidx-lifecycle-test\",\n    \":sample\",\n  )\n}\n\ninclude(\n  \":autodispose\",\n  \":autodispose-interop:coroutines\",\n  \":autodispose-lifecycle\",\n  \":test-utils\",\n  \":static-analysis:autodispose-error-prone\",\n  \":static-analysis:autodispose-lint\",\n)\n"
        },
        {
          "name": "spotless",
          "type": "tree",
          "content": null
        },
        {
          "name": "static-analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}