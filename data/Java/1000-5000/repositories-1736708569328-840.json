{
  "metadata": {
    "timestamp": 1736708569328,
    "page": 840,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FabricMC/fabric",
      "stars": 2430,
      "defaultBranch": "1.21.4",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.466796875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntab_width = 4\n\n[*.gradle]\nindent_style = tab\n\n[*.java]\nindent_style = tab\nij_continuation_indent_size = 8\nij_java_imports_layout = $*,|,java.**,|,javax.**,|,*,|,net.minecraft.**,|,net.fabricmc.**\nij_java_class_count_to_use_import_on_demand = 999\n\n[*.json]\nindent_style = space\nindent_size = 2\n\n[*.properties]\nindent_style = space\nindent_size = 2\n\n[.editorconfig]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.037109375,
          "content": "* text=auto eol=lf\n*.bat text eol=crlf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.484375,
          "content": "# Gradle\n.gradle\n\n# VSCode\n.settings/\n.vscode/\n\n# Eclipse\n.checkstyle\n.classpath\n.metadata\n.settings\n.project\n*.launch\n\n# Intellij/Idea\n.factorypath\n.idea\n*.iml\n*.ipr\n*.iws\n\n# Build artifacts\nbin/\nbuild/\njars/\nout/\nclasses/\n\n# Generated sources\n# The trailing * is important, otherwise Git wouldn't evaluate the directories at all and we wouldn't be able to un-ignore some of them.\n**/src/generated/*\n\n# Debug artifacts\nrun\n*.log\n*.log.gz\nfocus.txt\n\n# Windows\n*.db\n$RECYCLE.BIN/\n\n# Mac\n.DS_Store\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 29.923828125,
          "content": "# Fabric API development guidelines\n\nThis document describes the development guidelines for Fabric API. It may be amended at any time. Therefore you should refer to the development guidelines when working on any contributions.\n\nFollowing these guidelines should ensure your contributions to Fabric API are quick to review, consistent with other code in Fabric API and well thought out. This document should not be seen completely as a strict ruleset but instead the thought process that a Fabric team member would consider during the design, implementation and review of contributions to Fabric API.\n\nOld code or parts thereof might not yet be up to the standards defined by these guidelines. When working with old code, try to adhere to these guidelines, but don't bulk update legacy code to match them. The team will handle updating older code to match the newer standards when appropriate.\n\n## Scope\n\nIn order to retain maintainability, portability and discoverability, Fabric API only targets features that are important to a broader set of mods. Whether an addition is desirable is a balance between its\n- usefulness,\n- complexity,\n- inherent necessity for compatibility,\n- performance impact,\n- continued support by the authors or other interested parties.\n\nFabric API generally is not meant for bugfixes, performance improvements or gameplay changes, and exceptions need careful evaluation.\n\nIt is highly recommended that an issue be opened or a message be posted in the official Discord server, to discuss whether a feature is in scope, before it is designed or implemented. Design choices may also warrant prior discussion to avoid wasting time.\n\n## Structure of the guidelines\n\nThe rest of this document is split in the following categories:\n\n- [**General design considerations**](#general-design-considerations): Broad guidelines to keep in mind when writing APIs for Fabric.\n- [**API conventions**](#api-conventions): Guidelines for common API patterns.\n- [**Implementation guidelines**](#implementation-guidelines): Guidelines to keep in mind when writing implementation code.\n- [**Documentation**](#documentation): Guidelines for writing documentation. Extensive documentation of the offered features is essential for usability.\n- [**Structure of Fabric API**](#structure-of-fabric-api): Organization of code within Fabric API.\n- [**Code formatting**](#code-formatting): Specific Java code formatting standards.\n- [**Testing**](#testing): Guidelines for writing testmod code. Tests showing that the submitted feature is working should be included in the PR.\n- [**Pull Request checklist**](#checklist-before-submitting-a-pull-request): Smaller things to keep in mind when submitting a Pull Request.\n\n## General design considerations\n\nWhen designing an API addition, the following goals should be kept in mind:\n- Simplicity: Additions should be\n    - easy to use,\n    - inherently hard to misuse or protected against misuse,\n    - reasonably self contained,\n    - sufficiently capable, yet not excessively loaded with niche features,\n    - suitable for simple implementations,\n    - not overly abstract.\n- Familiarity: Additions should reuse or extend existing designs/patterns in other parts of Fabric API or vanilla.\n- Extensibility: Additions should be open for future expansion without needing to deprecate anything.\n- Portability: Additions should not be too closely coupled with specific vanilla code. They should\n    - avoid exposure of unimportant aspects,\n    - project into the future and consider potential future vanilla development,\n    - avoid auxiliary libraries,\n    - be portable for the sake of simplicity and extensibility.\n- Performance: Additions should\n    - be fast to initialize and execute,\n    - have low or zero allocation rate,\n    - have low resident memory use,\n    - keep extreme uses in mind (nuke, bulk command execution, spamming etc).\n\nOne important consideration when designing an API is spending some time thinking about the API in isolation without any influence from underlying implementation and vanilla code. Considering the API as a single entity rather than a part of a larger implementation, akin a regular user of the API may help find missing coverage, bad return values or parts of the API that could be improved.\n\nAdditionally, any feature provided by Fabric API should be fully usable by mods without mixins or reflection. Helper methods may be used to bridge these gaps.\n\nIt can be assumed that nothing other than Fabric API itself accesses non-api packages directly, regardless of their visibility. Reflection doesn't have to be accounted for anywhere.\n\n## API conventions\nThis section covers Fabric API guidelines for common patterns.\n\n### Backwards compatibility\nFabric API makes strong backwards compatibility guarantees, by which contributors must abide. **Modders should not need to update their source code when they update Fabric API**, with the following exceptions:\n\n- APIs might be broken due to **related** changes in Minecraft updates.\n    - Preserving backwards compatibility in these cases will be considered if possible.\n        - Deprecated code will usually be removed if it requires non-trivial updates.\n    - This is limited to code directly affected by the Minecraft version update. Minecraft making breaking changes in some areas of its API is not a reason to break unrelated parts of Fabric API.\n- Experimental modules might be broken if necessary.\n    - Changes that affect compilation but not the resulting bytecode are allowed in experimental modules, for example some generic changes.\n    - Even if an API is marked as experimental, avoid breaking the ecosystem of mods using it.\n        - Changes that will cause hard crashes in many mods when they are released should be delayed until the next majorly breaking Minecraft version update.\n- There might not be a way around a breaking change.\n    - If a major oversight is noticed in an API, it might be broken to address the oversight. Such cases require careful consideration, and should always be discussed with the team beforehand.\n    - Remember that deprecating code is always an option.\n\n### Targeted Minecraft versions\n- Fabric API does not have strict Minecraft version support policies, but rather supports what is feasible and what the community is interested in.\n    - In particular, the latest stable Minecraft version and the latest subsequent snapshot or pre-release version are always supported.\n    - Which features go in older stable versions is a tradeoff between how easy it is, how many mods are still using that version, and what the community is willing to contribute.\n- New features can be targeted at any supported version.\n    - Maintainers will take care of cherry-picking the feature to the other branches when applicable.\n    - In doubt, prefer PR'ing to newer stable versions.\n- Backporting PRs for older versions will generally be accepted, depending on how many changes were required.\n\n### Discouraged API design patterns\n\n- Avoid the old `Api.INSTANCE` pattern in favor of static methods.\n    - This pattern may be used if the backing implementation may be changed by another mod (such as the renderer api). Even then there should be static methods to access the standard api facilities.\n- Avoid unnecessary use of generics.\n    - Unless Vanilla Minecraft mandates the use of generics, or a good reason exists to use generics.\n- Avoid optionals in return values, fields and parameters.\n    - Where possible, you should prefer a `@Nullable T`.\n    - If vanilla exposes optionals in return types, then returning an optional is fine.\n- Avoid requiring the user to cast to a subtype if possible.\n    - Adding methods to vanilla types can be done via interface injection.\n- Avoid exposing java `record`s as public API.\n    - Records expose more than is necessary for most APIs, which makes them difficult to evolve.\n    - Prefer to expose an interface that is implemented by an impl record.\n\n### API design patterns to consider\n\n- Transitive Access Wideners (TAWs) should be used to expose access to private or protected members in vanilla classes.\n    - Most TAWs should go in the dedicated `fabric-transitive-access-wideners-v1` module.\n        - Remember to add the `transitive-` prefix, otherwise dependent mods will not see the access modifications.\n        - Some TAWs such as Block subclass constructors are automatically generated. Make sure that you don't edit the `.accesswidener` file in `src` directly. Rather edit the template file (`template.accesswidener`) and run the `gradlew generateAccessWidener` task to update the generated file.\n        - Large amounts of TAWs for a specific purpose can be included in another module, as is the case for the data generation API, for example.\n    - Do **not** expose TAWs for functions that take a `String` identifier.\n        - This makes it too easy to forget the mod ID namespace, so the identifier would often end up in the vanilla `minecraft` namespace.\n    - In general, keep the API guidelines in mind when deciding whether something should be a TAW.\n- Interface injection (i.e. making a minecraft class or interface extend a Fabric interface) should be considered over separate static helpers.\n    - Interface injection requires both a `fabric.mod.json` custom value to make it visible in Minecraft source code, and a mixin to actually implement the interface at runtime.\n    - Injected interfaces should have **no abstract methods**.\n        - Methods that are guaranteed to be implemented via a mixin to a vanilla class should contain a default body that throws an error.\n          Otherwise, the compiler will complain when it can't find the implementation of an interface method on a class.\n          For example:\n        ```java\n        default void injectedMethod() {\n            throw new UnsupportedOperationException(\"Implemented via mixin\");\n        }\n        ```\n        - Never use interface injection to add methods that modders must implement. Rather define a subclass or subinterface in Fabric API.\n- Builders can be used instead of constructors or factory methods with large amounts of parameters.\n\n### API class modifiers and member visibility\n\n- Classes in Fabric API should be `final` classes unless the class exposed in the API is explicitly meant for extension.\n- `private` constructors should be used in API classes unless the class is explicitly meant to be instantiated.\n    - This only applies to modder-facing classes, i.e. classes in the `net.fabricmc.fabric.api` subpackage. See below for package structure.\n    - They should be placed at the very bottom or top of the class to not hurt readability.\n- Access modifiers for fields and methods should be as strict as possible.\n    - If a method is intended to only be for use by mods implementing an api, a `protected` method should suffice.\n\n### Annotations\n- Nullable members, parameters or return values must be annotated with the `@Nullable` annotation.\n    - Any member, parameter or return value that is not marked as nullable can be assumed to be nonnull. The `@NotNull` annotation should never be used, it is implicit.\n    - Introducing custom types might be appropriate (no need to specify `List<@Nullable String>` everywhere).\n- Deprecated API members should have the `@Deprecated` annotation.\n    - Avoid specifying `forRemoval = true`, the functionality will be supported as long as possible.\n        - Exceptions are made for experimental APIs, where deprecated for removal functionality might be removed after sufficient time has passed.\n    - A javadoc `@deprecated` comment should be added to deprecated members with migration instructions.\n- Experimental API classes should all have the `@ApiStatus.Experimental` annotation.\n    - The annotation is not required on individual members, unless the class itself is not experimental.\n- `@ApiStatus.NonExtendable` should be used for API interfaces or classes that modders must not implement or override, but can't be `final` for some reason.\n    - Adding methods to such interfaces or classes is not a breaking change.\n- `@ApiStatus.Internal` is automatically applied to all implementation packages to avoid IDE autocompletion suggesting them. There should be no need for internal methods or classes in the public API package.\n\n### Naming\n- All names should follow the [Yarn naming standards](https://github.com/FabricMC/yarn/blob/HEAD/CONVENTIONS.md).\n- If a class only contains getter methods, the `get` prefix may be omitted for methods. The `get` prefix may also be omitted where it is not appropriate.\n- Accessor mixins should be named **Target**Accessor, other mixins should be named **Target**Mixin, where `Target` is the target class name. More details in the mixin section below.\n\n### Events\n\n- Events should not be used if there is only one subscriber, like a handler in a registered unique namespace.\n- Events should be produced and fully usable with minimal object allocation.\n  - In particular, avoid data holder objects for inputs, but rather pass them as separate parameters.\n- Events should use dedicated callback interfaces.\n    - Callback interfaces should be `@FunctionalInterface`s.\n    - Callback methods should be uniquely named such that a handler can implement multiple at once.\n        - Avoid words that are already clear from the parameters. For example, prefer `onStartTick(MinecraftServer)` over `onStartServerTick(MinecraftServer)`. The interface should still be named `StartServerTick` if \"server\" is not already implied by the containing class.\n    - Callback signatures should use the most specific type, if appropriate. E.g. `WorldChunk` over `Chunk`.\n    - Callback signatures should pass context that the listener might be expected to use, without excess. For example:\n        - Events involving a `MinecraftServer` directly should consider passing a `MinecraftServer` parameter.\n            - If the server is easily available via the other context parameters (for example a `ServerWorld`), passing it explicitly is unnecessary.\n        - Consider passing the `MinecraftClient` instance as a parameter if it makes sense.\n- `Event<>` objects should be in the class declaring the event field or getter.\n    - Usually, an event will be a stored in a `public static final` field.\n    - Sometimes an event might be specific to a class instance. In that case, there should be static methods that return event instances. One example of this is an event specific to a registry.\n    - Related callbacks and events should be grouped in classes.\n\nExample:\n```java\npublic final class FooEvents {\n    public static final Event<Allow> ALLOW = ...;\n    public static final Event<Before> BEFORE = ...;\n    public static final Event<After> AFTER = ...;\n\n    @FunctionalInterface\n    public interface Allow {\n        boolean allowFoo(/* relevant parameters */);\n    }\n\n    @FunctionalInterface\n    public interface Before {\n        void beforeFoo(/* relevant parameters */);\n    }\n\n    @FunctionalInterface\n    public interface Two {\n        void afterFoo(/* relevant parameters */);\n    }\n\n    // Holder class is not meant for instantiation.\n    private ExampleEvents() {\n    }\n}\n```\n\n#### Event naming\n\n- Callback interfaces:\n    - Callback interfaces should be named using present tense. For example, `ChunkUnload` and not `ChunkUnloaded`.\n    - The methods should be named in line with the action of the event, such as `entryAdded(...)`.\n    - Method names for notification events should be prefixed with `on`.\n      For example, a `DataLoad` event would have an `onDataLoad` method.\n    - Events that may allow or block some action should start with `Allow`. For example, an event to cancel player death might be called `AllowPlayerDeath`, with method name `allowDeath`.\n- `Event<>` fields and methods:\n    - The field or method exposing the `Event<>` object should be named similarly to the callback interface.\n- The `fabric-lifecycle-events-v1` module is a good example of event naming standards.\n\n\n#### Event ordering\n\n- Processes happening in multiple steps should use multiple events.\n    - While Fabric provides an event phase system, purpose-driven events should always be preferred.\n    - For example, an event that both cancels and notifies of an action will produce false notifications (notified but later canceled). It would be preferable to have an `AllowXxx` event for cancellation, and then a `BeforeXxx` event for notification.\n\n## Implementation guidelines\n\n### Simplicity\n\n- Simple code that is easy to debug and reason about is generally preferable to the shortest possible implementation.\n- Limited duplication can be better than indirection, unless the code is complex or used several times.\n- Indirections might make the code harder to read, and should be weighed against their benefits. Examples include:\n    - Lambda methods (`forEach`, streams).\n    - Method splitting.\n    - Recursion.\n    - Complex class hierarchies.\n- Functional operators (i.e. interfaces) should be designed for maximal readability, and only used when necessary.\n    - Ask for concrete objects if applicable.\n    - Don't include superfluous methods. For example, replace `shouldApply`+`apply` with a single `apply` that returns success.\n    - Consider having the user implement a larger interface as a class.\n    - Consider using a custom interface if it is beneficial for comprehension or documentation.\n- The overall complexity of a module shouldn't be ignored in favor of the simplicity of each individual piece. Similarly, the overall complexity of one small piece shouldn't be ignored in favor of the simplicity of the module as a whole.\n\n### Code quality\n- Strongly validate inputs to detect misuse.\n    - Exceptions should be thrown in the first method that can reasonably detect misuse.\n    - Precondition assertions such as `Objects.requireNonNull` for non-null parameters are strongly encouraged.\n    - This might apply to other cases, such as strong JSON validation.\n- Use the weakest suitable interface or class when exposing anything without harming expected uses.\n    - However, prefer `Collection` over `Iterable`.\n- Non-trivial reused (directly or derived) inline constants should be moved to static final fields.\n- Javac shouldn't produce any warnings in its default configuration.\n\n### Thread safety\n\nSince Minecraft has two primary threads, the render and server threads, APIs dealing with shared state need to consider thread safety. This will usually require consideration on a case-by-case basis.\n\n- A registry shared between the render and the server threads may for example wish to use locking for infrequent accesses, or otherwise a copy-on-write strategy to ensure lock-free reads and thread-safe writes.\n- Lazily initialized caches accessed from multiple threads require `volatile`. Use an intermediate variable to only have one volatile read:\n```java\nprivate volatile Stuff cachedStuff = null;\n\nprivate Stuff stuff() {\n    Stuff stuff = this.cachedStuff;\n\n    if (stuff == null) {\n        this.cachedStuff = stuff = compute();\n    }\n\n    return stuff;\n}\n```\n- Read-only access from multiple threads does not need synchronization.\n\n## Documentation\n\n- Every API class should carry a Javadoc comment explaining its purpose and reference related classes. Example code in the primary class of any major feature should outline the use, including related vanilla invocations/registrations/etc as applicable to provide an idea of how to start.\n    - Parameters, implementation bodies, etc... may be omitted as appropriate, since the examples are not meant as to be fully working implementations.\n    - The examples should be more akin to pseudocode with a checklist for the process and pointers to everything needed.\n    - These examples should be written for developers that have a knowledge of Java and basic knowledge of the Minecraft codebase.\n- A brief description belongs in the 1st paragraph, with further paragraphs separated by blank lines and starting with `<p>`. Javadoc for methods may follow with another blank line before describing parameters, return values and exceptions with the appropriate tags. All accessible members should be described appropriately.\n- Good documentation doesn't only explain what something is, but (as appropriate) why it exists, what are the intended use cases, what use cases something is not suitable for and any semantics that need to be kept in mind.\n    - In particular, tricky implementation details should be explained by a few comments when appropriate.\n- Direct references to classes or members should use the `@link` and `@linkplain` tags, unspecific further reading elsewhere may use `@see`.\n- Deprecated elements should describe and reference the replacement or alternative in Javadoc `@deprecated`. The `@deprecated` tag has to be last, everything else may be removed while adding it.\n- The Fabric Wiki is the proper place for additional in-depth documentation and how-tos. Examples are not necessary for simple events.\n\n## Structure of Fabric API\nFabric API is organized in different modules. Each module is located in a specific folder matching the module id. For example under `fabric-item-api-v1/` for the Item API (v1).\n\n### Module naming conventions\n- Module names should be named after the exposed functionality.\n    - Consider future developments when naming a module: they might later be expanded.\n- Module names should usually be suffixed by `-api`.\n    - Modules whose primary purpose is not interaction with their API do not need this suffix. For example, `fabric-transitive-access-wideners-v1` or `fabric-convention-tags-v2`.\n    - Event modules should have the `-events` suffix instead.\n- Module names should always be suffixed by a major version (`-v1`, `-v2`, etc).\n    - The major version starts at `v1` for new functionality, unless they replace a module with equivalent functionality, in which case the version is incremented.\n    - `vn` and `vn+1` module names need not match exactly. For example, `fabric-loot-tables-v1` was replaced by `fabric-loot-api-v2`.\n\n### Deprecated modules\nModules that are entirely deprecated are in the `deprecated/` folder. All of their API classes should be deprecated, and their `fabric.mod.json` should have the deprecated lifecycle marker. (See PR checklist below).\n\nA module may only be deprecated if all of its functionality is also provided by a non-deprecated module or vanilla Minecraft itself.\n\n### Experimental modules\nModules whose design is hard to evaluate might go through an experimental phase, allowing for relaxed backwards compatibility requirements, as described in the Backwards compatibility section.\n\nWriters of experimental modules need to consider the following additional requirements:\n- All API classes should be marked as `@ApiStatus.Experimental`. Do not use `@Deprecated` to generate compiler and IDE warnings for experimental modules.\n- All API classes should carry a javadoc comment, worded similarly to the following example:\n  ```java\n  /**\n   * (normal javadoc here)\n   * \n   * <p><b>Experimental feature</b>, may be removed or changed without further notice.\n   */\n  ```\n- The module's `fabric.mod.json` should have the experimental lifecycle marker. (See PR checklist below).\n- Note that experimental modules should be in the root folder of the Fabric API repository, as they are expected to be stabilized eventually.\n\n### Versioning, dependencies\n\nThe initial version of a module should **always** be `1.0.0`, never 0.x for non-legacy modules.\nDo not increment versions when writing a pull request. Version increments will be applied by maintainers after the pull request is merged.\n\nEvery module should in its `fabric.mod.json` declare dependencies for:\n- `\"fabricloader\": \">=x.y.z\"`, where `x.y.z` is the version used at the time the module is added.\n- Other used modules, for example `\"fabric-api-base\": \"*\"` if events are used. No explicit version needs to be specified.\n- Minecraft and Java version dependencies do not need to be specified.\n- In general, version ranges in module dependencies should be optimistic, omitting an upper bound until it is known.\n\n\n### Packages\n\nEach module contains various sourcesets in the `src` folder:\n- `src/client`: Code for client-only additions such as rendering hooks.\n- `src/main`: Code for additions that are available on both the client and the server.\n- `src/testmod`: Testing code.\n\nInside the relevant sourceset, all Fabric API code should be in a subpackage of `net.fabricmc.fabric`.\n- Add `.api`, `.impl` and `.mixin` for public-facing API, implementation details, and mixins respectively.\n- Add `.client` or `.server` for client-only or dedicated server-only code respectively. Common code requires no additional folder.\n- Add module name subpackage. It might contain multiple parts separated by `.`.\n- For API only: add the module major version with a v prefix, for example `.v1`\n- Further subpackages can be added as needed, all singular.\n\nA good example is the Lifecycle Events (v1) module.\n\n\n### Mixins\n\nThese guidelines should be followed with regards to a mixin's visibility and naming:\n\n|            | Accessors          | Mixin                                                                      |\n|------------|--------------------|----------------------------------------------------------------------------|\n| Naming     | **Target**Accessor | **Target**Mixin (May include `Client/Server` or `Legacy` prefix if needed) |\n| Visibility | public             | package-private*                                                           |\n\n\\* A mixin may be public if a subclass extends a super mixin in a different package. Example: `abstract class ServerWorldMixin extends WorldMixin`\n\nThe organization of mixins with a package is dependent on the type of module.\n- Generally if there are a small amount of mixins, then having all mixins in the same package is fine.\n- Client only and dedicated server only mixins should be moved into `client/server` subpackages.\n- If a module is generally complex or has multiple distinct parts, multiple mixins for each class target may exist assuming said mixins are separated into subpackages by feature.\n\n\n## Code formatting\n\nFormatting should be consistent with the remainder of Fabric API.\n\nThe general code formatting is as follows:\n- Single tabs per indentation level, 2 extra tabs for continued lines.\n- Blank line between block statements within the same indentation level (unless adjacent to if, else, do etc).\n- No blank lines at the start or end of a block, i.e. no blank line after `{` or before `}`.\n- Blank line after input (parameter) validation, if present.\n- New line after `{` unless empty  (`{}` or `{ }`), never before.\n- Line length usually below 120 columns, sometimes up to 160 if beneficial for readability.\n- Single space after `if`, `for`, `do`, `break` unless followed by `;`.\n- No space after `(` or before `)`.\n- Statements should use the block form except for single-line if statements that use a short condition and nothing else.\n- Ternary operator use only within a single line total.\n\nFabric API uses the Gradle checkstyle plugin. If you run `gradle check` any style errors will be logged in the output. The style errors can also be viewed in a generated webpage by the Gradle task.\n\n### Style guidelines\n\nThese are less strict guidelines for the code style, but you should generally obey these:\n\n- No redundant static access qualifiers.\n  - For example if you call `ClassHere.staticThing()` inside of another method in `ClassHere`, you should avoid fully qualifying the static access to `staticThing()`.\n- The use of the `this` qualifier is optional. You may need to use it in order to avoid shadowing variables but its general use elsewhere is fine.\n  - Generally keep consistent with the current standard inside of the class you are editing.\n\n## Testing\nIncluding testing code when submitting new features is essential, both to demonstrate the feature, and to ensure that it works correctly.\nTesting code should not be in the regular source sets, it belongs to so-called \"test mods\".\n\n- Test mods are located in the `testmod` source set. Example: `fabric-lifecycle-events-v1/src/testmod/`\n- Test mods should provide the necessary content to debug an issue with the api manually.\n  - Test mods can also be helpful in order to illustrate how to use a module as a fallback for wiki pages that have yet to be written.\n- If a test mod can be partially automated then it is encouraged to implement an automatically failing test if something goes wrong.\n  - This allows issues with the implementation or porting issues to be detected immediately.  \n  - For example, if a test mod checks if commands are registered on the server and the commands are not on the `CommandDispatcher` then the test should fail. \n  - Good places to run the automated checks include:\n    - The mod initializer if applicable.\n    - In a listener for `ServerLifecycleEvents.SERVER_STARTED` if a server instance is required.\n    - A game test.\n  - Test failures should always throw an `AssertionError` explaining what condition was not met during the test.\n\nFabric API pull requests should be tested in the dev environment and in production (on both a client and dedicated server).\nThe `gradlew build` command can be used to produce the Fabric API fatjar, located in `builds/libs/`.\n\n#### Common mistakes\nOne highly likely cause of a production failure is the use of `remap=false` in a mixin. If `remap=false` is used, you need to verify the mixin works in dev and production. Most likely the mixin will not work in production.\n\n## Checklist before submitting a pull request\n\n### Apply license headers\nThere is a Gradle task that can automate this for you. Simply run `gradlew spotlessApply`.\n\n### Run checks\n- The `gradlew check` task runs all the style checks and game tests.\n- Code style can be checked with the faster `gradlew checkstyleMain checkstyleTestmod`.\n\n\n### Any new modules/newly deprecated modules need to specify the correct module lifecycle.\nIf you have created a new module you need to specify the module lifecycle. The `gradlew check` task will pick up any missing module lifecycles for you and tell you the subproject it is missing in. The module lifecycle is specified in the `fabric.mod.json`.\n\n**Example:**\n\n```json=\n\"custom\": {\n    \"fabric-api:module-lifecycle\": \"<ModuleLifecycle>\"\n}\n```\n\nThe supported values for the `ModuleLifecycle` are:\n- `\"stable\"`\n- `\"experimental\"`\n- `\"deprecated\"`\n\n### Testing\nSee the Testing section above. Make sure to describe in the pull request body how you tested your code, and include relevant test mod code with your pull request.\n"
        },
        {
          "name": "HEADER",
          "type": "blob",
          "size": 0.6005859375,
          "content": "/*\n * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.716796875,
          "content": "# Fabric API\n\nEssential hooks for modding with Fabric.\n\nFabric API is the library for essential hooks and interoperability mechanisms for Fabric mods. Examples include:\n\n- Exposing functionality that is useful but difficult to access for many mods such as particles, biomes and dimensions\n- Adding events, hooks and APIs to improve interoperability between mods.\n- Essential features such as registry synchronization and adding information to crash reports.\n- An advanced rendering API designed for compatibility with optimization mods and graphics overhaul mods.\n\nAlso check out [Fabric Loader](https://github.com/FabricMC/fabric-loader), the (mostly) version-independent mod loader that powers Fabric. Fabric API is a mod like any other Fabric mod which requires Fabric Loader to be installed.\n\nFor support and discussion for both developers and users, visit [the Fabric Discord server](https://discord.gg/v6v4pMv).\n\n## Using Fabric API to play with mods\n\nMake sure you have installed fabric loader first. More information about installing Fabric Loader can be found [here](https://fabricmc.net/use/).\n\nTo use Fabric API, download it from [CurseForge](https://www.curseforge.com/minecraft/mc-mods/fabric-api), [GitHub Releases](https://github.com/FabricMC/fabric/releases) or [Modrinth](https://modrinth.com/mod/fabric-api).\n\nThe downloaded jar file should be placed in your `mods` folder.\n\n## Using Fabric API to develop mods\n\nTo set up a Fabric development environment, check out the [Fabric example mod](https://github.com/FabricMC/fabric-example-mod) and follow the instructions there. The example mod already depends on Fabric API.\n\nTo include the full Fabric API with all modules in the development environment, add the following to your `dependencies` block in the gradle buildscript:\n\n### Groovy DSL\n\n```groovy\nmodImplementation \"net.fabricmc.fabric-api:fabric-api:FABRIC_API_VERSION\"\n```\n\n### Kotlin DSL\n\n```kotlin\nmodImplementation(\"net.fabricmc.fabric-api:fabric-api:FABRIC_API_VERSION\")\n```\n\nAlternatively, modules from Fabric API can be specified individually as shown below (including module jar to your mod jar):\n\n### Groovy DSL\n\n```groovy\n// Make a collection of all api modules we wish to use\nSet<String> apiModules = [\n    \"fabric-api-base\",\n    \"fabric-command-api-v1\",\n    \"fabric-lifecycle-events-v1\",\n    \"fabric-networking-api-v1\"\n]\n\n// Add each module as a dependency\napiModules.forEach {\n    include(modImplementation(fabricApi.module(it, FABRIC_API_VERSION)))\n}\n```\n\n### Kotlin DSL\n\n```kotlin\n// Make a set of all api modules we wish to use\nsetOf(\n    \"fabric-api-base\",\n    \"fabric-command-api-v1\",\n    \"fabric-lifecycle-events-v1\",\n    \"fabric-networking-api-v1\"\n).forEach {\n    // Add each module as a dependency\n    modImplementation(fabricApi.module(it, FABRIC_API_VERSION))\n}\n```\n\n<!--Linked to gradle documentation on properties-->\nInstead of hardcoding version constants all over the build script, Gradle properties may be used to replace these constants. Properties are defined in the `gradle.properties` file at the root of a project. More information is available [here](https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#declare_properties_in_gradle_properties_file).\n\n## Contributing\n\nSee something Fabric API doesn't support, a bug or something that may be useful? We welcome contributions to improve Fabric API.\nMake sure to read [the development guidelines](./CONTRIBUTING.md).\n\n## Modules\n\nFabric API is designed to be modular for ease of updating. This also has the advantage of splitting up the codebase into smaller chunks.\n\nEach module contains its own `README.md`* explaining the module's purpose and additional info on using the module.\n\n\\* The README for each module is being worked on; not every module has a README at the moment\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 20.9521484375,
          "content": "plugins {\n\tid \"java-library\"\n\tid \"eclipse\"\n\tid \"idea\"\n\tid \"maven-publish\"\n\tid 'jacoco'\n\tid \"fabric-loom\" version \"1.9.2\" apply false\n\tid \"com.diffplug.spotless\" version \"6.20.0\"\n\tid \"org.ajoberstar.grgit\" version \"5.2.2\"\n\tid \"me.modmuss50.remotesign\" version \"0.5.0\" apply false\n\tid \"me.modmuss50.mod-publish-plugin\" version \"0.4.5\"\n}\n\ndef ENV = System.getenv()\n\nversion = project.version + \"+\" + (ENV.GITHUB_RUN_NUMBER ? \"\" : \"local-\") + getBranch()\nlogger.lifecycle(\"Building Fabric: \" + version)\n\ndef metaProjects = [\n\t'deprecated',\n\t'fabric-api-bom',\n\t'fabric-api-catalog'\n]\n\ndef debugArgs = [\n\t\"-enableassertions\",\n\t\"-Dmixin.debug.verify=true\",\n\t//\"-Dmixin.debug.strict=true\",\n\t\"-Dmixin.debug.countInjections=true\",\n]\n\nimport net.fabricmc.loom.util.gradle.SourceSetHelper\nimport groovy.json.JsonSlurper\nimport org.apache.commons.codec.digest.DigestUtils\n\ndef getSubprojectVersion(project) {\n\t// Get the version from the gradle.properties file\n\tdef version = project.properties[\"${project.name}-version\"]\n\n\tif (!version) {\n\t\tthrow new NullPointerException(\"Could not find version for \" + project.name)\n\t}\n\n\tif (grgit == null) {\n\t\treturn version + \"+nogit\"\n\t}\n\n\tdef latestCommits = grgit.log(paths: [project.name], maxCommits: 1)\n\n\tif (latestCommits.isEmpty()) {\n\t\treturn version + \"+uncommited\"\n\t}\n\n\treturn version + \"+\" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(project.rootProject.minecraft_version).substring(0, 2)\n}\n\ndef getBranch() {\n\tdef ENV = System.getenv()\n\tif (ENV.GITHUB_REF) {\n\t\tdef branch = ENV.GITHUB_REF\n\t\treturn branch.substring(branch.lastIndexOf(\"/\") + 1)\n\t}\n\n\tif (grgit == null) {\n\t\treturn \"unknown\"\n\t}\n\n\tdef branch = grgit.branch.current().name\n\treturn branch.substring(branch.lastIndexOf(\"/\") + 1)\n}\n\ndef moduleDependencies(project, List<String> depNames) {\n\tdef deps = depNames.iterator().collect { project.dependencies.project(path: \":$it\", configuration: 'namedElements') }\n\tdef clientOutputs = depNames.iterator().collect { findProject(\":$it\").sourceSets.client.output }\n\n\tproject.dependencies {\n\t\tdeps.each {\n\t\t\tapi it\n\t\t}\n\n\t\tclientOutputs.each {\n\t\t\tclientImplementation it\n\t\t}\n\t}\n\n\t// As we manually handle the maven artifacts, we need to also manually specify the deps.\n\tproject.publishing {\n\t\tpublications {\n\t\t\tmavenJava(MavenPublication) {\n\t\t\t\tpom.withXml {\n\t\t\t\t\tdef depsNode = asNode().appendNode(\"dependencies\")\n\t\t\t\t\tdeps.each {\n\t\t\t\t\t\tdef depNode = depsNode.appendNode(\"dependency\")\n\t\t\t\t\t\tdepNode.appendNode(\"groupId\", it.group)\n\t\t\t\t\t\tdepNode.appendNode(\"artifactId\", it.name)\n\t\t\t\t\t\tdepNode.appendNode(\"version\", it.version)\n\t\t\t\t\t\tdepNode.appendNode(\"scope\", \"compile\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ndef testDependencies(project, List<String> depNames) {\n\tdef deps = depNames.iterator().collect { project.dependencies.project(path: \":$it\", configuration: 'namedElements') }\n\tdef clientOutputs = depNames.iterator().collect { findProject(\":$it\").sourceSets.client.output }\n\n\tproject.dependencies {\n\t\tdeps.each {\n\t\t\ttestmodImplementation it\n\t\t}\n\n\t\tclientOutputs.each {\n\t\t\ttestmodClientImplementation it\n\t\t}\n\t}\n}\n\nallprojects {\n\tgroup = \"net.fabricmc.fabric-api\"\n\n\tapply plugin: \"maven-publish\"\n\tapply plugin: \"me.modmuss50.remotesign\"\n\n\ttasks.withType(GenerateModuleMetadata) {\n\t\tenabled = false\n\t}\n\n\tremoteSign {\n\t\trequestUrl = ENV.SIGNING_SERVER\n\t\tpgpAuthKey = ENV.SIGNING_PGP_KEY\n\t\tjarAuthKey = ENV.SIGNING_JAR_KEY\n\n\t\tuseDummyForTesting = ENV.SIGNING_SERVER == null\n\n\t\tafterEvaluate {\n\t\t\t// PGP sign all maven publications.\n\t\t\tsign publishing.publications.mavenJava\n\t\t}\n\t}\n\n\tpublishing {\n\t\tsetupRepositories(repositories)\n\t}\n\n\tif (metaProjects.contains(it.name)) {\n\t\treturn\n\t}\n\n\tapply plugin: \"java-library\"\n\tapply plugin: \"checkstyle\"\n\tapply plugin: \"fabric-loom\"\n\tapply plugin: \"com.diffplug.spotless\"\n\n\ttasks.withType(JavaCompile).configureEach {\n\t\tit.options.release = 21\n\t}\n\n\tjava {\n\t\t// Must be added before the split source sets are setup.\n\t\twithSourcesJar()\n\t}\n\n\tloom {\n\t\tsplitEnvironmentSourceSets()\n\t\tmixin {\n\t\t\tuseLegacyMixinAp = true\n\t\t}\n\t}\n\n\tsourceSets {\n\t\ttestmod {\n\t\t\tcompileClasspath += main.compileClasspath\n\t\t\truntimeClasspath += main.runtimeClasspath\n\t\t}\n\n\t\ttestmodClient {\n\t\t\tcompileClasspath += main.compileClasspath\n\t\t\truntimeClasspath += main.runtimeClasspath\n\t\t\tcompileClasspath += client.compileClasspath\n\t\t\truntimeClasspath += client.runtimeClasspath\n\n\t\t\tcompileClasspath += testmod.compileClasspath\n\t\t\truntimeClasspath += testmod.runtimeClasspath\n\t\t}\n\n\t\ttest {\n\t\t\tcompileClasspath += testmodClient.compileClasspath\n\t\t\truntimeClasspath += testmodClient.runtimeClasspath\n\t\t}\n\t}\n\n\tloom {\n\t\truntimeOnlyLog4j = true\n\n\t\truns {\n\t\t\ttestmodClient {\n\t\t\t\tclient()\n\t\t\t\tideConfigGenerated project.rootProject == project\n\t\t\t\tname = \"Testmod Client\"\n\t\t\t\tsource sourceSets.testmodClient\n\t\t\t}\n\t\t\ttestmodServer {\n\t\t\t\tserver()\n\t\t\t\tideConfigGenerated project.rootProject == project\n\t\t\t\tname = \"Testmod Server\"\n\t\t\t\tsource sourceSets.testmod\n\t\t\t}\n\t\t}\n\t}\n\n\tloom.runs.configureEach {\n\t\tvmArgs(debugArgs)\n\t}\n\n\tallprojects.each { p ->\n\t\tif (metaProjects.contains(p.name)) {\n\t\t\treturn\n\t\t}\n\n\t\tloom.mods.register(p.name) {\n\t\t\tsourceSet p.sourceSets.main\n\t\t\tsourceSet p.sourceSets.client\n\t\t}\n\n\t\tloom.mods.register(p.name + \"-testmod\") {\n\t\t\tsourceSet p.sourceSets.testmod\n\t\t\tsourceSet p.sourceSets.testmodClient\n\t\t}\n\t}\n\n\tdependencies {\n\t\tminecraft \"com.mojang:minecraft:$rootProject.minecraft_version\"\n\t\tmappings \"net.fabricmc:yarn:${rootProject.minecraft_version}${project.yarn_version}:v2\"\n\t\tmodApi \"net.fabricmc:fabric-loader:${project.loader_version}\"\n\n\t\ttestmodImplementation sourceSets.main.output\n\t\ttestmodClientImplementation sourceSets.main.output\n\t\ttestmodClientImplementation sourceSets.client.output\n\t\ttestmodClientImplementation sourceSets.testmod.output\n\n\t\ttestImplementation \"net.fabricmc:fabric-loader-junit:${project.loader_version}\"\n\t\ttestImplementation sourceSets.testmodClient.output\n\t\ttestImplementation 'org.mockito:mockito-core:5.13.0'\n\t}\n\n\ttest {\n\t\tuseJUnitPlatform()\n\t}\n\n\ttasks.withType(ProcessResources).configureEach {\n\t\tinputs.property \"version\", project.version\n\n\t\tfilesMatching(\"fabric.mod.json\") {\n\t\t\texpand \"version\": project.version\n\t\t}\n\t}\n\n\tspotless {\n\t\tlineEndings = com.diffplug.spotless.LineEnding.UNIX\n\n\t\tjava {\n\t\t\tlicenseHeaderFile(rootProject.file(\"HEADER\"))\n\t\t\tremoveUnusedImports()\n\t\t\timportOrder('java', 'javax', '', 'net.minecraft', 'net.fabricmc')\n\t\t\tindentWithTabs()\n\t\t\ttrimTrailingWhitespace()\n\t\t}\n\t}\n\n\tcheckstyle {\n\t\tconfigFile = rootProject.file(\"checkstyle.xml\")\n\t\ttoolVersion = \"10.20.2\"\n\t}\n\n\ttasks.withType(AbstractArchiveTask).configureEach {\n\t\tpreserveFileTimestamps = false\n\t\treproducibleFileOrder = true\n\t}\n\n\tremoteSign {\n\t\tsign remapJar\n\t}\n\n\t// Run this task after updating minecraft to regenerate any required resources\n\ttasks.register('generateResources') {\n\t\tgroup = \"fabric\"\n\t}\n\n\ttasks.register('testmodJar', Jar) {\n\t\tfrom sourceSets.testmod.output\n\t\tfrom sourceSets.testmodClient.output\n\t\tdestinationDirectory = new File(project.buildDir, \"devlibs\")\n\t\tarchiveClassifier = \"testmod\"\n\t}\n\n\t[jar, sourcesJar].each {\n\t\tit.from(rootProject.file(\"LICENSE\")) {\n\t\t\trename { \"${it}-${project.base.archivesName.get()}\"}\n\t\t}\n\t}\n\n\tif (file(\"src/client\").exists() && !file(\"src/main\").exists()) {\n\t\tremapJar {\n\t\t\tadditionalClientOnlyEntries.add(\"LICENSE-${project.base.archivesName.get()}\")\n\t\t}\n\n\t\tremapSourcesJar {\n\t\t\tadditionalClientOnlyEntries.add(\"LICENSE-${project.base.archivesName.get()}\")\n\t\t}\n\t}\n\n\ttasks.register('remapTestmodJar', net.fabricmc.loom.task.RemapJarTask) {\n\t\tdependsOn testmodJar\n\t\tinput = testmodJar.archiveFile\n\t\tarchiveClassifier = \"testmod\"\n\t\taddNestedDependencies = false\n\t\tincludesClientOnlyClasses = true\n\t\tclientOnlySourceSetName = sourceSets.testmodClient.name\n\t\tclasspath.from(sourceSets.testmodClient.compileClasspath)\n\t}\n\tbuild.dependsOn remapTestmodJar\n\n\ttasks.register('validateMixinNames', net.fabricmc.loom.task.ValidateMixinNameTask) {\n\t\tsource(sourceSets.main.output)\n\t\tsource(sourceSets.client.output)\n\t\tsource(sourceSets.testmod.output)\n\t}\n\n\t// Apply to each valid subproject.\n\tapply from: rootProject.file('gradle/package-info.gradle')\n\tapply from: rootProject.file('gradle/validate-annotations.gradle')\n}\n\nremapTestmodJar {\n\tdef testModJarTasks = []\n\n\tsubprojects {\n\t\tif (metaProjects.contains(it.name) || !(it.file(\"src/testmod\").exists() || it.file(\"src/testmodClient\").exists())) {\n\t\t\treturn\n\t\t}\n\n\t\ttestModJarTasks += it.tasks.remapTestmodJar\n\t}\n\n\tnestedJars.setFrom(testModJarTasks)\n\taddNestedDependencies = true\n\tclientOnlySourceSetName = sourceSets.testmodClient.name\n}\n\n// Apply auxiliary buildscripts to submodules\n// This must be done after all plugins are applied to subprojects\napply from: \"gradle/module-validation.gradle\"\napply from: \"gradle/module-versioning.gradle\"\n\nloom {\n\taccessWidenerPath = file(\"gradle/javadoc.accesswidener\")\n}\n\njavadoc {\n\toptions {\n\t\tsource = \"21\"\n\t\tencoding = \"UTF-8\"\n\t\tcharSet = \"UTF-8\"\n\t\tmemberLevel = JavadocMemberLevel.PACKAGE\n\t\tlinks(\n\t\t\t\t\"https://maven.fabricmc.net/docs/yarn-${rootProject.minecraft_version}${project.yarn_version}/\"\n\t\t\t\t)\n\t\t// Disable the crazy super-strict doclint tool in Java 8\n\t\taddStringOption(\"Xdoclint:none\", \"-quiet\")\n\n\t\ttags(\n\t\t\t\t'apiNote:a:API Note:',\n\t\t\t\t'implSpec:a:Implementation Requirements:',\n\t\t\t\t'implNote:a:Implementation Note:'\n\t\t\t\t)\n\t}\n\n\tallprojects.each {\n\t\tif (metaProjects.contains(it.name)) {\n\t\t\treturn\n\t\t}\n\n\t\tsource(it.sourceSets.main.allJava)\n\t\tsource(it.sourceSets.client.allJava)\n\t}\n\n\tclasspath = files(sourceSets.main.compileClasspath, sourceSets.client.compileClasspath)\n\tinclude(\"**/api/**\")\n\tfailOnError = true\n}\n\ntasks.register('javadocJar', Jar) {\n\tdependsOn javadoc\n\tfrom javadoc.destinationDir\n\t//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc\n\tarchiveClassifier = \"fatjavadoc\"\n}\n\nbuild.dependsOn javadocJar\n\nloom {\n\truns {\n\t\tgametest {\n\t\t\tinherit testmodServer\n\n\t\t\tname \"Game Test\"\n\n\t\t\t// Enable the gametest runner\n\t\t\tvmArg \"-Dfabric-api.gametest\"\n\t\t\tvmArg \"-Dfabric-api.gametest.report-file=${project.layout.buildDirectory.file(\"junit.xml\").get().getAsFile()}\"\n\t\t\trunDir \"build/gametest\"\n\t\t}\n\t\tautoTestServer {\n\t\t\tinherit testmodServer\n\t\t\tname  \"Auto Test Server\"\n\t\t\tvmArg \"-Dfabric.autoTest\"\n\t\t}\n\t\tclientGametest {\n\t\t\tinherit testmodClient\n\t\t\tname \"Client Game Test\"\n\t\t\tvmArg \"-Dfabric.client.gametest\"\n\t\t\tvmArg \"-Dfabric-tag-conventions-v2.missingTagTranslationWarning=fail\"\n\t\t\tvmArg \"-Dfabric-tag-conventions-v1.legacyTagWarning=fail\"\n\t\t}\n\n\t\t// Create duplicate tasks for this, as jacoco slows things down a bit\n\t\tgametestCoverage {\n\t\t\tinherit gametest\n\t\t\tname \"Game Test Coverage\"\n\t\t\tideConfigGenerated = false\n\t\t}\n\n\t\tclientGametestCoverage {\n\t\t\tinherit clientGametest\n\t\t\tname \"Client Game Test Coverage\"\n\t\t\tideConfigGenerated = false\n\t\t}\n\t}\n}\n\nrunGametest {\n\toutputs.file project.layout.buildDirectory.file(\"junit.xml\")\n}\n\ntest.dependsOn runGametest\n\ndef coverageTasks = [\n\trunGametestCoverage,\n\trunClientGametestCoverage\n]\n\njacoco {\n\tcoverageTasks.forEach {\n\t\tapplyTo it\n\t}\n}\n\ntasks.register('coverage', JacocoReport) {\n\tdependsOn coverageTasks\n\tcoverageTasks.forEach {\n\t\texecutionData it\n\t}\n\n\t// Add all source as input\n\tallprojects { p ->\n\t\tif (p.path.startsWith(\":deprecated\") || metaProjects.contains(p.name)) {\n\t\t\treturn\n\t\t}\n\t\tsourceSets p.sourceSets.main, p.sourceSets.client, p.sourceSets.testmod, p.sourceSets.testmodClient\n\t}\n\n\t// Exclude mixins\n\tclassDirectories.setFrom(files(classDirectories.files.collect {\n\t\tfileTree(dir: it, exclude: '**/mixin/**')\n\t}))\n}\n\nconfigurations {\n\tproductionRuntime {\n\t\textendsFrom configurations.minecraftLibraries\n\t\textendsFrom configurations.loaderLibraries\n\t\textendsFrom configurations.minecraftRuntimeLibraries\n\t}\n\tproductionRuntimeServer\n\tproductionMods {\n\t\ttransitive = false\n\t}\n}\n\ndependencies {\n\tproductionRuntime \"net.fabricmc:fabric-loader:${project.loader_version}\"\n\tproductionRuntime \"net.fabricmc:intermediary:${project.minecraft_version}\"\n\n\tproductionRuntimeServer \"net.fabricmc:fabric-installer:${project.installer_version}:server\"\n\tproductionMods project(':fabric-client-gametest-api-v1')\n}\n\nimport net.fabricmc.loom.util.Platform\n\ndef productionMods = project.files(configurations.productionMods, remapJar.archiveFile, remapTestmodJar.archiveFile)\n\n// This is very far beyond loom's API if you copy this, you're on your own.\ntasks.register('runProductionClientGametest', JavaExec) {\n\tdependsOn productionMods, downloadAssets\n\tclasspath.from configurations.productionRuntime\n\tmainClass = \"net.fabricmc.loader.impl.launch.knot.KnotClient\"\n\tworkingDir = file(\"run\")\n\n\tdoFirst {\n\t\tclasspath.from loom.minecraftProvider.minecraftClientJar\n\t\tworkingDir.mkdirs()\n\n\t\targs(\n\t\t\t\t\"--assetIndex\", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),\n\t\t\t\t\"--assetsDir\", new File(loom.files.userCache, \"assets\").absolutePath,\n\t\t\t\t\"--gameDir\", workingDir.absolutePath\n\t\t\t\t)\n\n\t\tif (Platform.CURRENT.operatingSystem.isMacOS()) {\n\t\t\tjvmArgs(\n\t\t\t\t\t\"-XstartOnFirstThread\"\n\t\t\t\t\t)\n\t\t}\n\n\t\tjvmArgs(\n\t\t\t\t\"-Dfabric.addMods=${productionMods.collect { it.absolutePath }.join(File.pathSeparator)}\",\n\t\t\t\t\"-Dfabric.client.gametest\",\n\t\t\t\t\"-Dfabric-tag-conventions-v2.missingTagTranslationWarning=fail\",\n\t\t\t\t\"-Dfabric-tag-conventions-v1.legacyTagWarning=fail\"\n\t\t\t\t)\n\t\tjvmArgs(debugArgs)\n\t}\n}\n\ntasks.register('serverPropertiesJar', Jar) {\n\tdef propsFile = file(\"build/tmp/install.properties\")\n\n\tdoFirst {\n\t\tpropsFile.text = \"\"\"\\\n\t\t\t\t\t\tfabric-loader-version=${project.loader_version}\n\t\t\t\t\t\tgame-version=${project.minecraft_version}\n\t\t\t\t\t\t\"\"\".stripMargin().stripIndent()\n\t}\n\n\tarchiveFileName = \"test-server-properties.jar\"\n\tdestinationDirectory = file(\"build/tmp\")\n\tfrom(propsFile)\n}\n\ntasks.register('runProductionAutoTestServer', JavaExec) {\n\tdependsOn productionMods, serverPropertiesJar\n\tclasspath.from configurations.productionRuntimeServer, serverPropertiesJar\n\tmainClass = \"net.fabricmc.installer.ServerLauncher\"\n\tworkingDir = file(\"run\")\n\n\tdoFirst {\n\t\tworkingDir.mkdirs()\n\n\t\tjvmArgs(\n\t\t\t\t\"-Dfabric.addMods=${productionMods.collect { it.absolutePath }.join(File.pathSeparator)}\",\n\t\t\t\t\"-Dfabric.autoTest\",\n\t\t\t\t)\n\t\tjvmArgs(debugArgs)\n\n\t\targs(\"nogui\")\n\t}\n}\n\n// Format all the gradle files\nspotless {\n\tgroovyGradle {\n\t\ttarget 'src/**/*.gradle', '*.gradle', 'gradle/*.gradle'\n\t\tgreclipse()\n\t}\n}\n\ndef addPomMetadataInformation(Project project, MavenPom pom) {\n\tdef modJsonFile = project.file(\"src/main/resources/fabric.mod.json\")\n\n\tif (!modJsonFile.exists()) {\n\t\tmodJsonFile = project.file(\"src/client/resources/fabric.mod.json\")\n\t}\n\n\tdef modJson = new JsonSlurper().parse(modJsonFile)\n\tpom.name = modJson.name\n\tpom.url = \"https://github.com/FabricMC/fabric/tree/HEAD/${project.rootDir.relativePath(project.projectDir)}\"\n\tpom.description = modJson.description\n\tpom.licenses {\n\t\tlicense {\n\t\t\tname = \"Apache-2.0\"\n\t\t\turl = \"https://github.com/FabricMC/fabric/blob/HEAD/LICENSE\"\n\t\t}\n\t}\n\tpom.developers {\n\t\tdeveloper {\n\t\t\tname = \"FabricMC\"\n\t\t\turl = \"https://fabricmc.net/\"\n\t\t}\n\t}\n\tpom.scm {\n\t\tconnection = \"scm:git:https://github.com/FabricMC/fabric.git\"\n\t\turl = \"https://github.com/FabricMC/fabric\"\n\t\tdeveloperConnection = \"scm:git:git@github.com:FabricMC/fabric.git\"\n\t}\n\tpom.issueManagement {\n\t\tsystem = \"GitHub\"\n\t\turl = \"https://github.com/FabricMC/fabric/issues\"\n\t}\n}\n\nsubprojects {\n\tif (metaProjects.contains(it.name)) {\n\t\treturn\n\t}\n\n\tbase {\n\t\tarchivesName = project.name\n\t}\n\n\tdependencies {\n\t\ttestmodImplementation sourceSets.main.output\n\n\t\t// Make all modules depend on the gametest api (and thus res loader) to try and promote its usage.\n\t\tif (project.name != \"fabric-gametest-api-v1\") {\n\t\t\ttestmodImplementation project(path: ':fabric-gametest-api-v1', configuration: 'namedElements')\n\t\t\ttestmodClientImplementation project(\":fabric-gametest-api-v1\").sourceSets.client.output\n\t\t\ttestmodImplementation project(path: ':fabric-resource-loader-v0', configuration: 'namedElements')\n\t\t\ttestmodClientImplementation project(\":fabric-resource-loader-v0\").sourceSets.client.output\n\t\t}\n\n\t\t// Make all testmods run with registry-sync-v0 as it is required to register new objects.\n\t\tif (project.name != \"fabric-registry-sync-v0\") {\n\t\t\ttestmodRuntimeOnly project(path: ':fabric-registry-sync-v0', configuration: 'namedElements')\n\t\t\ttestmodClientImplementation project(\":fabric-registry-sync-v0\").sourceSets.client.output\n\t\t}\n\t}\n\n\tpublishing {\n\t\tpublications {\n\t\t\tmavenJava(MavenPublication) {\n\t\t\t\tpom {\n\t\t\t\t\taddPomMetadataInformation(project, pom)\n\t\t\t\t}\n\t\t\t\tartifact(signRemapJar.output) {\n\t\t\t\t\tbuiltBy(signRemapJar)\n\t\t\t\t}\n\n\t\t\t\tartifact(remapSourcesJar) {\n\t\t\t\t\tbuiltBy remapSourcesJar\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// We manually handle the pom generation\n\tloom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)\n\n\tjavadoc.enabled = false\n}\n\npublishing {\n\tpublications {\n\t\tmavenJava(MavenPublication) {\n\t\t\tartifact(signRemapJar.output) {\n\t\t\t\tbuiltBy(signRemapJar)\n\t\t\t}\n\n\t\t\tartifact(sourcesJar) {\n\t\t\t\tbuiltBy remapSourcesJar\n\t\t\t}\n\n\t\t\tartifact javadocJar\n\t\t\tartifact remapTestmodJar\n\n\t\t\tpom {\n\t\t\t\taddPomMetadataInformation(rootProject, pom)\n\t\t\t}\n\n\t\t\tpom.withXml {\n\t\t\t\tdef depsNode = asNode().appendNode(\"dependencies\")\n\t\t\t\tsubprojects.each {\n\t\t\t\t\t// The maven BOM containing all of the deprecated modules is added manually below.\n\t\t\t\t\tif (it.path.startsWith(\":deprecated\") || metaProjects.contains(it.name)) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tdef depNode = depsNode.appendNode(\"dependency\")\n\t\t\t\t\tdepNode.appendNode(\"groupId\", it.group)\n\t\t\t\t\tdepNode.appendNode(\"artifactId\", it.name)\n\t\t\t\t\tdepNode.appendNode(\"version\", it.version)\n\t\t\t\t\tdepNode.appendNode(\"scope\", \"compile\")\n\t\t\t\t}\n\n\t\t\t\t// Depend on the deprecated BOM to allow opting out of deprecated modules.\n\t\t\t\tdef depNode = depsNode.appendNode(\"dependency\")\n\t\t\t\tdepNode.appendNode(\"groupId\", group)\n\t\t\t\tdepNode.appendNode(\"artifactId\", \"fabric-api-deprecated\")\n\t\t\t\tdepNode.appendNode(\"version\", version)\n\t\t\t\tdepNode.appendNode(\"scope\", \"compile\")\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Required until the deprecation is removed. Fabric API's main jar that is published to maven does not contain sub modules.\nloom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)\n\nvoid setupRepositories(RepositoryHandler repositories) {\n\t//repositories.mavenLocal() // uncomment for testing\n\tdef ENV = System.getenv()\n\tif (ENV.MAVEN_URL) {\n\t\trepositories.maven {\n\t\t\turl ENV.MAVEN_URL\n\t\t\tif (ENV.MAVEN_USERNAME) {\n\t\t\t\tcredentials {\n\t\t\t\t\tusername ENV.MAVEN_USERNAME\n\t\t\t\t\tpassword ENV.MAVEN_PASSWORD\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nsubprojects.each {\n\tif (metaProjects.contains(it.name)) {\n\t\treturn\n\t}\n\n\tremapJar.dependsOn(\"${it.path}:remapJar\")\n}\n\n// These modules are not included in the fat jar, maven will resolve them via the pom.\ndef devOnlyModules = [\n\t\"fabric-client-gametest-api-v1\",\n\t\"fabric-gametest-api-v1\",\n]\n\ndependencies {\n\tafterEvaluate {\n\t\tsubprojects.each {\n\t\t\tif (metaProjects.contains(it.name)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tapi project(path: \"${it.path}\", configuration: \"namedElements\")\n\t\t\tclientImplementation project(\"${it.path}:\").sourceSets.client.output\n\n\t\t\ttestmodImplementation project(\"${it.path}:\").sourceSets.testmod.output\n\t\t\ttestmodClientImplementation project(\"${it.path}:\").sourceSets.testmodClient.output\n\t\t}\n\t}\n}\n\nconfigurations {\n\tnestedJars {\n\t\ttransitive = false\n\t}\n}\n\ndependencies {\n\tsubprojects.each {\n\t\tif (it.name in devOnlyModules || metaProjects.contains(it.name)) {\n\t\t\treturn\n\t\t}\n\n\t\tnestedJars project(\"${it.path}\")\n\t}\n}\n\nremapJar {\n\tnestedJars.from configurations.nestedJars\n}\n\n// Attempt to create a single jar with all files from all nested jars, this will fail if there are duplicate files.\ntasks.register(\"checkNoDuplicateFiles\", Zip) {\n\tinputs.files configurations.nestedJars\n\tdestinationDirectory = layout.buildDirectory.dir(\"test\")\n\n\tfrom {\n\t\tconfigurations.nestedJars.files.collect { zipTree(it) }\n\t}\n\n\t// We expect these files to be duplicated, so exclude them.\n\texclude 'META-INF/**'\n\texclude 'fabric.mod.json'\n}\n\ncheck.dependsOn \"checkNoDuplicateFiles\"\n\npublishMods {\n\tfile = signRemapJar.output\n\tchangelog = providers.environmentVariable(\"CHANGELOG\").getOrElse(\"No changelog provided\")\n\ttype = project.prerelease == \"true\" ? BETA : STABLE\n\tdisplayName = \"[${project.minecraft_version}] Fabric API $project.version\"\n\tmodLoaders.add(\"fabric\")\n\tdryRun = providers.environmentVariable(\"CURSEFORGE_API_KEY\").getOrNull() == null\n\n\tcurseforge {\n\t\taccessToken = providers.environmentVariable(\"CURSEFORGE_API_KEY\")\n\t\tprojectId = \"306612\"\n\t\tminecraftVersions.add(project.curseforge_minecraft_version)\n\t}\n\tmodrinth {\n\t\taccessToken = providers.environmentVariable(\"MODRINTH_TOKEN\")\n\t\tprojectId = \"P7dR8mSH\"\n\t\tminecraftVersions.add(project.minecraft_version)\n\t}\n\tgithub {\n\t\taccessToken = providers.environmentVariable(\"GITHUB_TOKEN\")\n\t\trepository = providers.environmentVariable(\"GITHUB_REPOSITORY\").getOrElse(\"FabricMC/dryrun\")\n\t\tcommitish = providers.environmentVariable(\"GITHUB_REF_NAME\").getOrElse(\"dryrun\")\n\t}\n}\n\nassemble.dependsOn signRemapJar\n\nimport java.util.stream.Collectors\n\n// A task to ensure that the version being released has not already been released.\ntasks.register('checkVersion') {\n\tdoFirst {\n\t\tdef xml = new URL(\"https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml\").text\n\t\tdef metadata = new XmlSlurper().parseText(xml)\n\t\tdef versions = metadata.versioning.versions.version*.text();\n\t\tif (versions.contains(version)) {\n\t\t\tthrow new RuntimeException(\"${version} has already been released!\")\n\t\t}\n\t}\n}\n\ntasks.publishMods.dependsOn checkVersion\npublish.mustRunAfter checkVersion\n"
        },
        {
          "name": "checkstyle.xml",
          "type": "blob",
          "size": 10.2109375,
          "content": "<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n<module name=\"Checker\">\n\t<property name=\"charset\" value=\"UTF-8\"/>\n\t<property name=\"fileExtensions\" value=\"java\"/>\n\t<property name=\"localeLanguage\" value=\"en\"/>\n\t<property name=\"localeCountry\" value=\"US\"/>\n\t<property name=\"tabWidth\" value=\"4\"/>\n\n\t<module name=\"NewlineAtEndOfFile\"/>\n\n\t<!-- disallow trailing whitespace -->\n\t<module name=\"RegexpSingleline\">\n\t\t<property name=\"format\" value=\"\\s+$\"/>\n\t\t<property name=\"message\" value=\"trailing whitespace\"/>\n\t</module>\n\n\t<!-- note: RegexpMultiline shows nicer messages than Regexp, but has to be outside TreeWalker -->\n\t<!-- disallow multiple consecutive blank lines -->\n\t<module name=\"RegexpMultiline\">\n\t\t<property name=\"format\" value=\"\\n[\\t ]*\\r?\\n[\\t ]*\\r?\\n\"/>\n\t\t<property name=\"message\" value=\"adjacent blank lines\"/>\n\t</module>\n\n\t<!-- disallow blank after { -->\n\t<module name=\"RegexpMultiline\">\n\t\t<property name=\"format\" value=\"\\{[\\t ]*\\r?\\n[\\t ]*\\r?\\n\"/>\n\t\t<property name=\"message\" value=\"blank line after '{'\"/>\n\t</module>\n\n\t<!-- disallow blank before } -->\n\t<module name=\"RegexpMultiline\">\n\t\t<property name=\"format\" value=\"\\n[\\t ]*\\r?\\n[\\t ]*\\}\"/>\n\t\t<property name=\"message\" value=\"blank line before '}'\"/>\n\t</module>\n\n\t<!-- require blank before { in the same indentation level -->\n\t<module name=\"RegexpMultiline\">\n\t\t<!-- the regex works as follows:\n\t\tIt matches (=fails) for \\n<indentation><something>\\n<same indentation><control statement>[...]{\\n\n\t\twhile <something> is a single line comment, it'll look for a blank line one line earlier\n\t\tif <something> is a space, indicating a formatting error or ' */', it'll ignore the instance\n\t\tif <something> is a tab, indicating a continued line, it'll ignore the instance\n\t\t<control statement> is 'if', 'do', 'while', 'for', 'try' or nothing (instance initializer block)\n\n\t\t- first \\n: with positive lookbehind (?<=\\n) to move the error marker to a more reasonable place\n\t\t- capture tabs for <indentation>, later referenced via \\1\n\t\t- remaining preceding line as a non-comment (doesn't start with '/', '//', ' ' or '\\t') or multiple lines where all but the first are a single line comment with the same indentation\n\t\t- new line\n\t\t- <indentation> as captured earlier\n\t\t- <control statement> as specified above\n\t\t- { before the next new line -->\n\t\t<property name=\"format\" value=\"(?&lt;=\\n)([\\t]+)(?:[^/\\r\\n \\t][^\\r\\n]*|/[^/\\r\\n][^\\r\\n]*|[^/\\r\\n][^\\r\\n]*(\\r?\\n\\1//[^\\r\\n]*)+)\\r?\\n\\1(|(if|do|while|for|try)[^\\r\\n]+)\\{[\\t ]*\\r?\\n\"/>\n\t\t<property name=\"message\" value=\"missing blank line before block at same indentation level\"/>\n\t</module>\n\n\t<!-- require blank after } in the same indentation level -->\n\t<module name=\"RegexpMultiline\">\n\t\t<!-- \\n<indentation>}\\n<same indentation><whatever unless newline, '}' or starting with cas(e) or def(ault)> -->\n\t\t<property name=\"format\" value=\"(?&lt;=\\n)([\\t]+)\\}\\r?\\n\\1(?:[^\\r\\n\\}cd]|c[^\\r\\na]|ca[^\\r\\ns]|d[^\\r\\ne]|de[^\\r\\nf])\"/>\n\t\t<property name=\"message\" value=\"missing blank line after block at same indentation level\"/>\n\t</module>\n\n\t<module name=\"TreeWalker\">\n        <!-- Allow \"//CHECKSTYLE.OFF: <InspectionName>\" and \"//CHECKSTYLE.ON: <InspectionName>\" pairs to toggle some inspections -->\n        <module name=\"SuppressionCommentFilter\">\n            <property name=\"offCommentFormat\" value=\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/>\n            <property name=\"onCommentFormat\" value=\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/>\n            <property name=\"checkFormat\" value=\"$1\"/>\n        </module>\n\n\t\t<!-- Ensure all imports are ship shape -->\n\t\t<module name=\"AvoidStarImport\"/>\n\t\t<module name=\"IllegalImport\"/>\n\t\t<module name=\"RedundantImport\"/>\n\t\t<module name=\"UnusedImports\"/>\n\n\t\t<module name=\"ImportOrder\">\n\t\t\t<property name=\"groups\" value=\"java,javax,*,net.minecraft,net.fabricmc\"/>\n\t\t\t<property name=\"ordered\" value=\"true\"/>\n\t\t\t<property name=\"separated\" value=\"true\"/>\n\t\t\t<property name=\"option\" value=\"top\"/>\n\t\t\t<property name=\"sortStaticImportsAlphabetically\" value=\"true\"/>\n\t\t</module>\n\n\t\t<!-- Ensures braces are at the end of a line -->\n\t\t<module name=\"LeftCurly\"/>\n\t\t<module name=\"RightCurly\"/>\n\n\t\t<!-- single line statements on one line, -->\n\t\t<module name=\"NeedBraces\">\n\t\t\t<property name=\"tokens\" value=\"LITERAL_IF,LITERAL_FOR,LITERAL_WHILE\"/>\n\t\t\t<property name=\"allowSingleLineStatement\" value=\"true\"/>\n\t\t</module>\n\t\t<module name=\"NeedBraces\">\n\t\t\t<property name=\"tokens\" value=\"LITERAL_ELSE,LITERAL_DO\"/>\n\t\t\t<property name=\"allowSingleLineStatement\" value=\"false\"/>\n\t\t</module>\n\n\t\t<module name=\"EmptyLineSeparator\">\n\t\t\t<property name=\"allowNoEmptyLineBetweenFields\" value=\"true\"/>\n\t\t\t<property name=\"allowMultipleEmptyLines\" value=\"false\"/>\n\t\t\t<!-- exclude  METHOD_DEF and VARIABLE_DEF -->\n\t\t\t<property name=\"tokens\" value=\"PACKAGE_DEF,IMPORT,STATIC_IMPORT,CLASS_DEF,INTERFACE_DEF,ENUM_DEF,STATIC_INIT,INSTANCE_INIT,CTOR_DEF\"/>\n\t\t</module>\n\n\t\t<module name=\"OperatorWrap\"/>\n\t\t<module name=\"SeparatorWrap\">\n\t\t\t<property name=\"tokens\" value=\"DOT,ELLIPSIS,AT\"/>\n\t\t\t<property name=\"option\" value=\"nl\"/>\n\t\t</module>\n\t\t<module name=\"SeparatorWrap\">\n\t\t\t<property name=\"tokens\" value=\"COMMA,SEMI\"/>\n\t\t\t<property name=\"option\" value=\"eol\"/>\n\t\t</module>\n\n\t\t<module name=\"Indentation\">\n\t\t\t<property name=\"basicOffset\" value=\"4\"/>\n\t\t\t<property name=\"caseIndent\" value=\"0\"/>\n\t\t\t<property name=\"throwsIndent\" value=\"4\"/>\n\t\t\t<property name=\"arrayInitIndent\" value=\"4\"/>\n\t\t\t<property name=\"lineWrappingIndentation\" value=\"8\"/>\n\t\t</module>\n\n\t\t<module name=\"ParenPad\"/>\n\t\t<module name=\"NoWhitespaceBefore\"/>\n\t\t<module name=\"NoWhitespaceAfter\">\n\t\t\t<!-- allow ARRAY_INIT -->\n\t\t\t<property name=\"tokens\" value=\"AT,INC,DEC,UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP\"/>\n\t\t</module>\n\t\t<module name=\"WhitespaceAfter\"/>\n\t\t<module name=\"WhitespaceAround\">\n\t\t\t<!-- Allow PLUS, MINUS, MUL, DIV as they may be more readable without spaces in some cases -->\n\t\t\t<property name=\"tokens\" value=\"ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV_ASSIGN,DO_WHILE,EQUAL,GE,GT,LAMBDA,LAND,LCURLY,LE,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,LITERAL_ASSERT,TYPE_EXTENSION_AND\"/>\n\t\t</module>\n\t\t<module name=\"SingleSpaceSeparator\"/>\n\t\t<module name=\"GenericWhitespace\"/>\n\t\t<module name=\"CommentsIndentation\"/>\n\n\t\t<module name=\"ArrayTypeStyle\"/>\n\t\t<module name=\"DefaultComesLast\">\n\t\t\t<property name=\"skipIfLastAndSharedWithCase\" value=\"true\"/>\n\t\t</module>\n\t\t<module name=\"SimplifyBooleanExpression\"/>\n\t\t<module name=\"SimplifyBooleanReturn\"/>\n\t\t<module name=\"StringLiteralEquality\"/>\n\n\t\t<module name=\"ModifierOrder\"/>\n\t\t<module name=\"RedundantModifier\"/>\n\n\t\t<module name=\"AnnotationLocation\"/>\n\t\t<module name=\"MissingOverride\"/>\n\n\t\t<!-- By default this allows catch blocks with only comments -->\n\t\t<module name=\"EmptyCatchBlock\"/>\n\n\t\t<!-- Enforce tabs -->\n\t\t<module name=\"RegexpSinglelineJava\">\n\t\t\t<property name=\"format\" value=\"^\\t* ([^*]|\\*[^ /])\"/>\n\t\t\t<property name=\"message\" value=\"non-tab indentation\"/>\n\t\t</module>\n\n\t\t<module name=\"OuterTypeFilename\"/>\n\t\t<module name=\"PackageDeclaration\"/>\n\t\t<module name=\"PackageName\">\n\t\t\t<!-- require a package following the following structure:\n\t\t\tbase package name: net.fabricmc.fabric\n\t\t\t+ api/implementation/mixin subpackage: api/impl/mixin\n\t\t\t+ client/dedicated server/common env subpackage: client/server/<nothing>\n\t\t\t+ module name subpackage, singular, may contain multiple .-separated parts\n\t\t\t+ api mandatory: module major version with v prefix (e.g. v1)\n\t\t\t+ other subpackages as needed, all singular\n\n\t\t\tThe regex works as follows:\n\t\t\tIt matches (=succeeds) for one of these cases:\n\t\t\t- net.fabricmc.fabric.api.client.<module-name>.v<version>[.<extra packages...>]\n\t\t\t- net.fabricmc.fabric.api.server.<module-name>.v<version>[.<extra packages...>]\n\t\t\t- net.fabricmc.fabric.api.<module-name>.v<version>[.<extra packages...>]\n\t\t\t- net.fabricmc.fabric.(impl|mixin).client.<module-name>[.v<version>][.<extra packages...>]\n\t\t\t- net.fabricmc.fabric.(impl|mixin).server.<module-name>[.v<version>][.<extra packages...>]\n\t\t\t- net.fabricmc.fabric.(impl|mixin).<module-name>[.v<version>][.<extra packages...>]\n\t\t\t- <any legacy package>\n\t\t\twhere <module-name> is a set of '.'-separated words, all in singular (not ending with s except for ss) and not starting with client. or server.\n\t\t\tand <version> is a non-negative integer (0, 1, 2, 3, ...)\n\t\t\tand <extra packages...> is a set of '.'-separated words with all the first potentially containing digits.\n\t\t\tNegative lookahead ensures that client/server can't be replaced with common disguised as the module name.\n\n\t\t\tThe regex is implemented in 3 parts:\n\t\t\t- the net.fabricmc.fabric. prefix\n\t\t\t- patterns for\n\t\t\t\t- api packages: api + <not common> + client/server/nothing + <module-name> + 'v' + <version>\n\t\t\t\t- impl+mixin packages : impl/mixin + <not common> + client/server/nothing + <module-name>\n\t\t\t\t- literal legacy packages (exceptions)\n\t\t\t- largely unconstained trailing subpackages\n\t\t\t-->\n\t\t\t<property name=\"format\"\n\t\t\tvalue=\"^net\\.fabricmc\\.fabric\\.(api(?!\\.common\\.)(\\.client|\\.server|)(\\.(?!client\\.|server\\.)[a-z]+([a-rt-z]|ss))+\\.v[0-9]+|(impl|mixin|test)(?!\\.common\\.)(\\.client|\\.server|)(\\.(?!client\\.|server\\.)[a-z]+([a-rt-z]|ss))+(\\.v[0-9]+)?|api\\.(event|util|biomes\\.v1|registry|client\\.screen|container|block|entity|client\\.itemgroup|client\\.keybinding|tag|tools|client\\.model|network|server|client\\.render|resource|client\\.texture))(|\\.[a-z]+(\\.[a-z0-9]+)*)$\"/>\n\t\t</module>\n\n\t\t<!--<module name=\"InvalidJavadocPosition\"/>-->\n\t\t<module name=\"JavadocParagraph\"/>\n\t\t<module name=\"JavadocStyle\"/>\n\t\t<module name=\"AtclauseOrder\">\n\t\t\t<property name=\"tagOrder\" value=\"@param,@return,@throws,@deprecated\"/>\n\t\t</module>\n\n        <!-- Prevent var for all cases other than new instance creation -->\n        <module name=\"MatchXpath\">\n            <property name=\"query\" value=\"//VARIABLE_DEF[./TYPE/IDENT[@text='var'] and not(./ASSIGN/EXPR/LITERAL_NEW)]\"/>\n        </module>\n\n        <!-- Prevent public records in API packages -->\n        <module name=\"MatchXpath\">\n            <property name=\"query\" value=\"//RECORD_DEF[./MODIFIERS/LITERAL_PUBLIC][//PACKAGE_DEF//DOT/IDENT[@text='api']]\"/>\n        </module>\n\t</module>\n</module>\n"
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.890625,
          "content": "files:\n  - source: fabric-resource-loader-v0/src/main/resources/assets/fabric-resource-loader-v0/lang/en_us.json\n    translation: /fabric-resource-loader-v0/src/main/resources/assets/fabric-resource-loader-v0/lang/%locale_with_underscore%.json\n  - source: fabric-item-group-api-v1/src/main/resources/assets/fabric/lang/en_us.json\n    translation: /fabric-item-group-api-v1/src/main/resources/assets/fabric/lang/%locale_with_underscore%.json\n  - source: fabric-registry-sync-v0/src/main/resources/assets/fabric-registry-sync-v0/lang/en_us.json\n    translation: /fabric-registry-sync-v0/src/main/resources/assets/fabric-registry-sync-v0/lang/%locale_with_underscore%.json\n  - source: fabric-convention-tags-v2/src/generated/resources/assets/fabric-convention-tags-v2/lang/en_us.json\n    translation: /fabric-convention-tags-v2/src/main/resources/assets/fabric-convention-tags-v2/lang/%locale_with_underscore%.json\n"
        },
        {
          "name": "deprecated",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-api-base",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-api-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-api-catalog",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-api-lookup-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-biome-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-block-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-block-view-api-v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-blockrenderlayer-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-client-gametest-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-client-tags-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-command-api-v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-content-registries-v0",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-convention-tags-v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-crash-report-info-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-data-attachment-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-data-generation-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-dimensions-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-entity-events-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-events-interaction-v0",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-game-rule-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-gametest-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-item-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-item-group-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-key-binding-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-lifecycle-events-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-loot-api-v3",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-message-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-model-loading-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-networking-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-object-builder-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-particles-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-recipe-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-registry-sync-v0",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-renderer-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-renderer-indigo",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-rendering-fluids-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-rendering-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-resource-conditions-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-resource-loader-v0",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-screen-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-screen-handler-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-sound-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-tag-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-transfer-api-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "fabric-transitive-access-wideners-v1",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 2.1474609375,
          "content": "org.gradle.jvmargs=-Xmx2560M\norg.gradle.parallel=true\n\nversion=0.114.2\nminecraft_version=1.21.4\nyarn_version=+build.1\nloader_version=0.16.9\ninstaller_version=1.0.1\n\nprerelease=false\ncurseforge_minecraft_version=1.21.4\n\n# Do not manually update, use the bumpversions task:\nfabric-api-base-version=0.4.54\nfabric-api-lookup-api-v1-version=1.6.86\nfabric-biome-api-v1-version=15.0.6\nfabric-block-api-v1-version=1.0.31\nfabric-block-view-api-v2-version=1.0.19\nfabric-blockrenderlayer-v1-version=2.0.8\nfabric-client-gametest-api-v1-version=3.0.1\nfabric-command-api-v1-version=1.2.62\nfabric-command-api-v2-version=2.2.41\nfabric-commands-v0-version=0.2.79\nfabric-content-registries-v0-version=9.1.14\nfabric-crash-report-info-v1-version=0.3.6\nfabric-data-attachment-api-v1-version=1.4.6\nfabric-data-generation-api-v1-version=22.2.6\nfabric-dimensions-v1-version=4.0.10\nfabric-entity-events-v1-version=2.0.12\nfabric-events-interaction-v0-version=4.0.2\nfabric-game-rule-api-v1-version=1.0.62\nfabric-gametest-api-v1-version=2.0.21\nfabric-item-api-v1-version=11.1.14\nfabric-item-group-api-v1-version=4.1.23\nfabric-key-binding-api-v1-version=1.0.56\nfabric-keybindings-v0-version=0.2.54\nfabric-lifecycle-events-v1-version=2.5.4\nfabric-loot-api-v2-version=3.0.33\nfabric-loot-api-v3-version=1.0.21\nfabric-message-api-v1-version=6.0.25\nfabric-model-loading-api-v1-version=4.2.1\nfabric-networking-api-v1-version=4.3.9\nfabric-object-builder-api-v1-version=18.0.8\nfabric-particles-v1-version=4.0.14\nfabric-recipe-api-v1-version=8.0.8\nfabric-registry-sync-v0-version=6.1.4\nfabric-renderer-api-v1-version=5.0.3\nfabric-renderer-indigo-version=2.0.3\nfabric-rendering-data-attachment-v1-version=0.3.57\nfabric-rendering-fluids-v1-version=3.1.19\nfabric-rendering-v1-version=10.1.2\nfabric-resource-conditions-api-v1-version=5.0.13\nfabric-resource-loader-v0-version=3.0.11\nfabric-screen-api-v1-version=2.0.38\nfabric-screen-handler-api-v1-version=1.3.111\nfabric-sound-api-v1-version=1.0.32\nfabric-tag-api-v1-version=1.0.2\nfabric-transfer-api-v1-version=5.4.9\nfabric-transitive-access-wideners-v1-version=6.3.2\nfabric-convention-tags-v1-version=2.1.12\nfabric-convention-tags-v2-version=2.10.2\nfabric-client-tags-api-v1-version=1.1.29\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 2.09375,
          "content": "pluginManagement {\n\trepositories {\n\t\tmaven {\n\t\t\tname = 'Fabric'\n\t\t\turl = 'https://maven.fabricmc.net/'\n\t\t}\n\t\tgradlePluginPortal()\n\t}\n}\n\nrootProject.name = \"fabric-api\"\n\ninclude 'fabric-api-bom'\ninclude 'fabric-api-catalog'\n\ndef focus = new File('focus.txt')\n\nif (focus.exists()) {\n\tfocus.eachLine {\n\t\tinclude it\n\t}\n\n\treturn // Skip the rest of the includes\n}\n\ninclude 'fabric-api-base'\n\ninclude 'fabric-api-lookup-api-v1'\ninclude 'fabric-biome-api-v1'\ninclude 'fabric-block-api-v1'\ninclude 'fabric-block-view-api-v2'\ninclude 'fabric-blockrenderlayer-v1'\ninclude 'fabric-client-gametest-api-v1'\ninclude 'fabric-client-tags-api-v1'\ninclude 'fabric-command-api-v2'\ninclude 'fabric-content-registries-v0'\ninclude 'fabric-convention-tags-v2'\ninclude 'fabric-crash-report-info-v1'\ninclude 'fabric-data-attachment-api-v1'\ninclude 'fabric-data-generation-api-v1'\ninclude 'fabric-dimensions-v1'\ninclude 'fabric-entity-events-v1'\ninclude 'fabric-events-interaction-v0'\ninclude 'fabric-game-rule-api-v1'\ninclude 'fabric-gametest-api-v1'\ninclude 'fabric-item-api-v1'\ninclude 'fabric-item-group-api-v1'\ninclude 'fabric-key-binding-api-v1'\ninclude 'fabric-lifecycle-events-v1'\ninclude 'fabric-loot-api-v3'\ninclude 'fabric-message-api-v1'\ninclude 'fabric-model-loading-api-v1'\ninclude 'fabric-networking-api-v1'\ninclude 'fabric-object-builder-api-v1'\ninclude 'fabric-particles-v1'\ninclude 'fabric-recipe-api-v1'\ninclude 'fabric-registry-sync-v0'\ninclude 'fabric-renderer-api-v1'\ninclude 'fabric-renderer-indigo'\ninclude 'fabric-rendering-fluids-v1'\ninclude 'fabric-rendering-v1'\ninclude 'fabric-resource-conditions-api-v1'\ninclude 'fabric-resource-loader-v0'\ninclude 'fabric-screen-api-v1'\ninclude 'fabric-screen-handler-api-v1'\ninclude 'fabric-sound-api-v1'\ninclude 'fabric-tag-api-v1'\ninclude 'fabric-transfer-api-v1'\ninclude 'fabric-transitive-access-wideners-v1'\n\ninclude 'deprecated'\ninclude 'deprecated:fabric-command-api-v1'\ninclude 'deprecated:fabric-commands-v0'\ninclude 'deprecated:fabric-convention-tags-v1'\ninclude 'deprecated:fabric-keybindings-v0'\ninclude 'deprecated:fabric-loot-api-v2'\ninclude 'deprecated:fabric-rendering-data-attachment-v1'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}