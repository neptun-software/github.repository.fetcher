{
  "metadata": {
    "timestamp": 1736608922298,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "micrometer-metrics/micrometer",
      "stars": 4520,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.26171875,
          "content": "root = true\n\n[*]\ninsert_final_newline = true\n\n[*.java]\nindent_style = space\nindent_size = 4\ncontinuation_indent_size = 4\nij_java_imports_layout = *,|,javax.**,java.**,|,$*\nij_java_class_count_to_use_import_on_demand = 5\nij_java_names_count_to_use_import_on_demand = 3\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.201171875,
          "content": "build/\n.gradle/\nout/\n\ncode/\n\n*.iml\n*.ipr\n*.iws\n.idea\n\n.classpath\n.project\n.settings/\n.sts4-cache/\nbin/\n.factorypath\n.vscode\n.DS_Store\n.java-version\n\n# jcstress\ngenerated/\nresults/\njcstress-results-*.bin.gz\n"
        },
        {
          "name": ".springjavaformatconfig",
          "type": "blob",
          "size": 0.0400390625,
          "content": "java-baseline=8\nindentation-style=spaces\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.8564453125,
          "content": "# Contributing Guide\n\nThis Contributing Guide is intended for those that would like to contribute to Micrometer.\n\nIf you would like to use any of the published Micrometer modules as a library in your project, you can instead include the Micrometer artifacts from the Maven Central repository using your build tool of choice.\n\n## Code of Conduct\n\nSee [our Contributor Code of Conduct](https://github.com/micrometer-metrics/.github/blob/main/CODE_OF_CONDUCT.md).\n\n## Contributions\n\nContributions come in various forms and are not limited to code changes.\nThe Micrometer community benefits from contributions in all forms.\n\nFor example, those with Micrometer knowledge and experience can contribute by: \n* [Contributing documentation](https://github.com/micrometer-metrics/micrometer/tree/main/docs/)\n* Answering [Stackoverflow questions](https://stackoverflow.com/tags/micrometer)\n* Answering questions on the [Micrometer slack](https://slack.micrometer.io)\n* Share Micrometer knowledge in other ways (e.g. presentations, blogs)\n\nThe remainder of this document will focus on guidance for contributing code changes. It will help contributors to build, modify, or test the Micrometer source code.\n\n## Contributor License Agreement\n\nContributions in the form of source changes require that you fill out and submit the [Contributor License Agreement](https://cla.pivotal.io/sign/pivotal) if you have not done so previously.\n\n## Getting the source\n\nThe Micrometer source code is hosted on GitHub at https://github.com/micrometer-metrics/micrometer.\nYou can use a Git client to clone the source code to your local machine.\n\n## Building\n\nMicrometer targets Java 8 but requires JDK 11 or later to build.\nIf you are not running Gradle with JDK 11 or later and Gradle cannot detect an existing JDK 17 installation, it will download one.\nIf you want to build the reference docs, you need to use JDK 17 or later.\n\nThe Gradle wrapper is provided and should be used for building with a consistent version of Gradle.\n\nThe wrapper can be used with a command, for example, `./gradlew` to build the project and check conventions.\n\n## Importing into an IDE\n\nThis repository should be imported as a Gradle project into your IDE of choice.\n\n## Code formatting\n\nThe [spring-javaformat plugin](https://github.com/spring-io/spring-javaformat) is configured to check and apply consistent formatting in the codebase through the build.\nThe `checkFormat` task checks the formatting as part of the `check` task.\nApply formatting with the `format` task.\nYou should rely on the formatting the `format` task applies instead of your IDE's configured formatting.\n\n## Testing changes locally\n\nSpecific modules or a test class can be run from your IDE for convenience.\n\nThe Gradle `check` task depends on the `test` task, and so tests will be run as part of a build as described previously.\n\n### Publishing local snapshots\n\nRun `./gradlew pTML` to publish a Maven-style snapshot to your Maven local repo.\nThe build automatically calculates the \"next\" version for you when publishing snapshots.\n\nThese local snapshots can be used in another project to test the changes. For example:\n\n```groovy\nrepositories {\n    mavenLocal()\n}\n\ndependencies {\n    implementation 'io.micrometer:micrometer-core:latest.integration'\n}\n```\n\n## Running Docker integration tests\n\nMicrometer has a number of integration tests that are implemented with [Testcontainers](https://www.testcontainers.org/) and use Docker. These tests do not run by default.\n\nThe integration tests for Elasticsearch use the elasticsearch docker image that has the [Elastic License 2.0](https://github.com/elastic/elasticsearch/blob/master/licenses/ELASTIC-LICENSE-2.0.txt).\nDo not run the Micrometer integration tests if you do not agree to the terms of the license.\n\nYou need a Docker daemon running for these tests to work. You can run them with the `dockerTest` task. For example, with the Gradle wrapper: `./gradlew dockerTest`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0927734375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTES.md",
          "type": "blob",
          "size": 2.7265625,
          "content": "## Netflix 6/21/17\n\n### Alerting\n\n* Support triggering on one query, sending alert notifications on another.\nOne is to discover a problem exists, the other to provide actionable insight\nquickly.\n* Alert queries are often instance bound, e.g. `:group-by` instance to generate\na signal per instance. Healthy instances will tend to cluster together in a\nmass of color, and the bad instance(s) will be visibly divergent.\n* Look at `:rolling-count`.\n\n### ACA\n\n* Most canaries run 1-4 hours. Extreme cases run 96 hours. Shorter windows\nare recommended, as bad canaries are receiving production traffic -- should\nbe failed as soon as possible.\n* ACA at Netflix is approaching limits on how many queries it is allowed to\nperform against Atlas in a given window. To improve, could combine queries\nto baseline and canary in one and split the results in ACA. Also, may be\nable to use LWC streaming?\n* Good canary metrics include box level metrics, error counting metrics with\nsufficient volume to present a statistically viable comparison.\n* Because a normal distribution cannot be assumed, uses Mann-Whitney U Test.\n* Use canary analysis to inform alerts -- if a canary is critically failing, \neven if it only lasts 4 hours, shouldn't somebody have been alerted on \nfailures before?\n* Good ACA criteria = U.S.E. = Utilization, Saturation, Error (Brendan Gregg)\n* Some teams basing ACAs off of high-dimension data stored in Druid.\n\n### Atlas\n\n* Look at `:dist-max` when concerned about the absolute max in a given window.\nThe `max` statistic shown on a graph is the maximum value that the plot yields,\nbut this may be the max average value if the plot is `:avg`, for example.\n`:dist-max` plots the maximum sample at each step. So, `max` of `:dist-max` is\nthe maximum sample seen along the plot's x-axis.\n* Constant-time lookup function on buckets is important.\n* Bucket functions lead to a mergeable quantile approximation.\n* There may be a static 276 bucket histogram that leads to good error bounds\non quantile approximation for majority of use cases.\n* Standard deviation calculation often exhibits high error bounds because of cliffs:\n  * Left-side cliff on payload size that represents minimum header size\n  * Right-side cliff on latency that represents HTTP timeout\n  * For a latency timer across all endpoints in an app, distribution can be\n  wildly non-normal because of different levels of computation and I/O across\n  those endpoints.\n* Say no to t-digests.\n* Counters not decrementable\n* Look at `:cq`, `:list`, `:each` for an easy way to tack on additional\ncriteria from a dashboard-building app without understanding the existing\nstructure of the query.\n* `:dist-avg` does the `totalTime/count` division math for you.\n* r3.2xlg with 60GB RAM capable of managing 2M time series over 6 hours."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.693359375,
          "content": "Micrometer\n\nCopyright (c) 2017-Present VMware, Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n-------------------------------------------------------------------------------\n\nThis product contains a modified portion of 'io.netty.util.internal.logging',\nin the Netty/Common library distributed by The Netty Project:\n\n  * Copyright 2013 The Netty Project\n  * License: Apache License v2.0\n  * Homepage: https://netty.io\n\nThis product contains a modified portion of 'StringUtils.isBlank()',\nin the Commons Lang library distributed by The Apache Software Foundation:\n\n  * Copyright 2001-2019 The Apache Software Foundation\n  * License: Apache License v2.0\n  * Homepage: https://commons.apache.org/proper/commons-lang/\n\nThis product contains a modified portion of 'JsonUtf8Writer',\nin the Moshi library distributed by Square, Inc:\n\n  * Copyright 2010 Google Inc.\n  * License: Apache License v2.0\n  * Homepage: https://github.com/square/moshi\n\nThis product contains a modified portion of the 'org.springframework.lang'\npackage in the Spring Framework library, distributed by VMware, Inc:\n\n  * Copyright 2002-2019 the original author or authors.\n  * License: Apache License v2.0\n  * Homepage: https://spring.io/projects/spring-framework\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3076171875,
          "content": "# Micrometer Application Metrics\n\n[![Build Status](https://circleci.com/gh/micrometer-metrics/micrometer.svg?style=shield)](https://circleci.com/gh/micrometer-metrics/micrometer)\n[![Apache 2.0](https://img.shields.io/github/license/micrometer-metrics/micrometer.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n[![Maven Central](https://img.shields.io/maven-central/v/io.micrometer/micrometer-core.svg)](https://search.maven.org/artifact/io.micrometer/micrometer-core)\n[![Javadocs](https://img.shields.io/badge/Javadocs-orange)](https://javadocs.dev/io.micrometer)\n[![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.micrometer.io/)\n\nAn application metrics facade for the most popular monitoring tools. Instrument your code with dimensional metrics with a\nvendor neutral interface and decide on the monitoring backend at the last minute.\n\nMore info on [micrometer.io](https://micrometer.io).\n\nMicrometer artifacts work with Java 8 or later with a few exceptions such as the micrometer-java11 module and micrometer-jetty11.\n\n## Supported versions\n\nSee [Micrometer's support policy](https://micrometer.io/support/).\n\n## Join the discussion\n\nJoin the [Micrometer Slack](https://slack.micrometer.io) to share your questions, concerns, and feature requests.\n\n## Snapshot builds\n\nSnapshots are published to `repo.spring.io` for every successful build on the `main` branch and maintenance branches.\n\nTo use:\n\n```groovy\nrepositories {\n    maven { url 'https://repo.spring.io/snapshot' }\n}\n\ndependencies {\n    implementation 'io.micrometer:micrometer-core:latest.integration'\n}\n```\n\n## Milestone releases\n\nMilestone releases are published to https://repo.spring.io/milestone.\nInclude that as a maven repository in your build configuration to use milestone releases.\nNote that milestone releases are for testing purposes and are not intended for production use.\n\n## Documentation\n\nThe reference documentation is managed in the [docs directory](/docs) and published to https://micrometer.io/.\n\n## Contributing\n\nSee our [Contributing Guide](CONTRIBUTING.md) for information about contributing to Micrometer.\n\n-------------------------------------\n_Licensed under [Apache Software License 2.0](https://www.apache.org/licenses/LICENSE-2.0)_\n\n_Sponsored by [VMware](https://tanzu.vmware.com)_\n"
        },
        {
          "name": "SUPPORT.adoc",
          "type": "blob",
          "size": 0.982421875,
          "content": "= Getting support for Micrometer\n\n== GitHub issues\nWe choose not to use GitHub issues for general usage questions and support, preferring to\nuse issues solely for the tracking of bugs and enhancements. If you have a general\nusage question please do not open a GitHub issue, but use one of the other channels\ndescribed below.\n\nIf you are reporting a bug, please help to speed up problem diagnosis by providing as\nmuch information as possible. Ideally, that would include a small sample project that\nreproduces the problem.\n\n== Stack Overflow\nThe Micrometer community monitors the\nhttps://stackoverflow.com/tags/micrometer[`micrometer`] tag on Stack Overflow. Before\nasking a question, please familiarize yourself with Stack Overflow's\nhttps://stackoverflow.com/help/how-to-ask[advice on how to ask a good question].\n\n== Slack\nIf you want to discuss something or have a question that isn't suited to Stack Overflow,\nthe Micrometer community chat in the https://slack.micrometer.io[micrometer-metrics Slack].\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 16.7734375,
          "content": "buildscript {\n    ext.javaLanguageVersion = JavaLanguageVersion.of(JavaVersion.current().isJava11Compatible() ? JavaVersion.current().getMajorVersion() : 17)\n    ext.javaTargetVersion = JavaVersion.VERSION_1_8\n\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n    }\n\n    dependencies {\n        classpath libs.plugin.license\n        classpath libs.plugin.nebulaRelease\n        classpath libs.plugin.nebulaPublishing\n        classpath libs.plugin.nebulaProject\n        classpath libs.plugin.nebulaInfo\n        classpath libs.plugin.noHttp\n        classpath libs.plugin.nexusPublish\n        classpath libs.plugin.javaformat\n        classpath libs.plugin.japicmp\n        classpath libs.plugin.downloadTask\n        classpath libs.plugin.spotless\n        classpath libs.plugin.bnd\n\n        constraints {\n            classpath(libs.asmForPlugins) {\n                because 'Supports modern JDKs'\n            }\n        }\n    }\n\n    configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'\n}\n\n// Hacks because of Antora's clone/checkout/worktrees behavior\n// Antora uses shallow-clone and worktrees to check out branches/tags.\nif (project.hasProperty('antora')) {\n    'git fetch --unshallow --all --tags'.execute().text // Antora shallow-clones so there is no history (we need commit history to find the last tag in the tree)\n    String ref = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()\n    if (ref == 'HEAD') { // if Antora checks out a tag instead of a branch\n        String tag = 'git tag --points-at HEAD'.execute().text.trim() // jgit is not able to figure out tags in Antora's worktree\n        if (tag) {\n            println \"Found release tag: $tag, using it as release.version\"\n            ext['release.version'] = tag.substring(1)\n        }\n    }\n}\n\n// TODO: remove this hack, see: https://github.com/nebula-plugins/nebula-release-plugin/issues/213\ndef releaseStage = findProperty('release.stage')\napply plugin: 'com.netflix.nebula.release'\nrelease.defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT\n\napply plugin: 'io.github.gradle-nexus.publish-plugin'\napply from: 'dependencies.gradle'\n\nallprojects {\n    group = 'io.micrometer'\n    ext.'release.stage' = releaseStage ?: 'SNAPSHOT'\n\n    afterEvaluate { project -> println \"I'm configuring $project.name with version $project.version\" }\n}\n\nsubprojects {\n    apply plugin: 'signing'\n    apply plugin: 'io.spring.javaformat'\n    apply plugin: 'com.diffplug.spotless'\n\n    if (project.name != 'micrometer-bom') {\n        if ((project.name.contains('samples') && !project.name.contains('kotlin')) || project.name.contains('benchmarks')) {\n            apply plugin: 'java'\n        } else {\n            apply plugin: 'java-library'\n        }\n        apply plugin: 'com.github.hierynomus.license'\n        apply plugin: 'checkstyle'\n        apply plugin: 'io.spring.nohttp'\n\n        java {\n            // It is more idiomatic to define different features for different sets of optional\n            // dependencies, e.g., 'dropwizard' and 'reactor'. If this library published Gradle\n            // metadata, Gradle users would be able to use these feature names in their dependency\n            // declarations instead of understanding the actual required optional dependencies.\n            // But we don't publish Gradle metadata yet and this may be overkill so just have a\n            // single feature for now to correspond to any optional dependency.\n            registerFeature('optional') {\n                usingSourceSet(sourceSets.main)\n            }\n\n            toolchain {\n                languageVersion = javaLanguageVersion\n                sourceCompatibility = javaTargetVersion\n                targetCompatibility = javaTargetVersion\n            }\n        }\n\n        // All projects use optional annotations, but since we don't expose them downstream we would\n        // have to add the dependency in every project, which is tedious so just do it here.\n        dependencies {\n            // JSR-305 only used for non-required meta-annotations\n            optionalApi libs.jsr305\n            checkstyle libs.spring.javaformatCheckstyle\n        }\n\n        tasks {\n            compileJava {\n                options.encoding = 'UTF-8'\n                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'\n\n                sourceCompatibility = javaTargetVersion\n                targetCompatibility = javaTargetVersion\n\n                // ensure Java 8 baseline is enforced for main source\n                options.release = 8\n\n                doLast {\n                    task -> logger.info(\"Compiling with \" + task.javaCompiler.get().executablePath)\n                }\n            }\n            compileTestJava {\n                options.encoding = 'UTF-8'\n                options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'\n\n                sourceCompatibility = JavaVersion.VERSION_11\n                targetCompatibility = JavaVersion.VERSION_11\n            }\n\n\n            javadoc {\n                if (project.name.contains('samples') || project.name.contains(\"-test-aspectj\")) {\n                    enabled = false\n                } else {\n                    configure(options) {\n                        tags(\n                                'apiNote:a:API Note:',\n                                'implSpec:a:Implementation Requirements:',\n                                'implNote:a:Implementation Note:'\n                        )\n                        options.addBooleanOption('Xdoclint:all,-missing', true)\n                    }\n                }\n            }\n        }\n\n        normalization {\n            runtimeClasspath {\n                metaInf {\n                    [\n                            'Bnd-LastModified',\n                            'Build-Date',\n                            'Build-Date-UTC',\n                            'Built-By',\n                            'Built-OS',\n                            'Build-Host',\n                            'Build-Job',\n                            'Build-Number',\n                            'Build-Id',\n                            'Change',\n                            'Full-Change',\n                            'Branch',\n                            'Module-Origin',\n                            'Created-By',\n                            'Build-Java-Version'\n                    ].each {\n                        ignoreAttribute it\n                        ignoreProperty it\n                    }\n                }\n            }\n        }\n\n        //noinspection GroovyAssignabilityCheck\n        test {\n            // set heap size for the test JVM(s)\n            maxHeapSize = \"1500m\"\n\n            useJUnitPlatform {\n                excludeTags 'docker'\n            }\n        }\n\n        task dockerTest(type: Test) {\n            // set heap size for the test JVM(s)\n            maxHeapSize = \"1500m\"\n\n            useJUnitPlatform {\n                includeTags 'docker'\n            }\n        }\n\n        tasks.withType(Test).configureEach {\n            testLogging.exceptionFormat = 'full'\n            develocity.testRetry {\n                maxFailures = 5\n                maxRetries = 3\n            }\n        }\n\n        license {\n            header rootProject.file('gradle/licenseHeader.txt')\n            strictCheck true\n            mapping {\n                java = 'SLASHSTAR_STYLE'\n            }\n            sourceSets = project.sourceSets\n\n            ext.year = Calendar.getInstance().get(Calendar.YEAR)\n            skipExistingHeaders = true\n            exclude '**/*.json' // comments not supported\n        }\n\n        spotless {\n            kotlin {\n                ktlint().editorConfigOverride(['ktlint_standard_no-wildcard-imports': 'disabled'])\n            }\n        }\n\n        // Publish resolved versions.\n        plugins.withId('maven-publish') {\n            publishing {\n                publications {\n                    nebula(MavenPublication) {\n                        versionMapping {\n                            allVariants {\n                                fromResolutionResult()\n                            }\n                        }\n\n                        // We publish resolved versions so don't need to publish our dependencyManagement\n                        // too. This is different from many Maven projects, where published artifacts often\n                        // don't include resolved versions and have a parent POM including dependencyManagement.\n                        pom.withXml {\n                            def dependencyManagement = asNode().get('dependencyManagement')\n                            if (dependencyManagement != null) {\n                                asNode().remove(dependencyManagement)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    plugins.withId('maven-publish') {\n        publishing {\n            publications {\n                nebula(MavenPublication) {\n                    // Nebula converts dynamic versions to static ones so it's ok.\n                    suppressAllPomMetadataWarnings()\n                }\n            }\n            repositories {\n                maven {\n                    name = 'Snapshot'\n                    url = 'https://repo.spring.io/snapshot'\n                    credentials {\n                        username findProperty('SNAPSHOT_REPO_USER')\n                        password findProperty('SNAPSHOT_REPO_PASSWORD')\n                    }\n                }\n                maven {\n                    name = 'Milestone'\n                    url = 'https://repo.spring.io/milestone'\n                    credentials {\n                        username findProperty('MILESTONE_REPO_USER')\n                        password findProperty('MILESTONE_REPO_PASSWORD')\n                    }\n                }\n            }\n        }\n\n        signing {\n            required = System.env.CIRCLE_STAGE == 'deploy'\n            useInMemoryPgpKeys(findProperty('SIGNING_KEY'), findProperty('SIGNING_PASSWORD'))\n            sign publishing.publications.nebula\n        }\n\n        // Nebula doesn't interface with Gradle's module format so just disable it for now.\n        tasks.withType(GenerateModuleMetadata) {\n            enabled = false\n        }\n    }\n\n    plugins.withId('org.jetbrains.kotlin.jvm') {\n        // We disable the kotlinSourcesJar task since it conflicts with the sourcesJar task of the Java plugin\n        // See: https://github.com/micrometer-metrics/micrometer/issues/5151\n        // See: https://youtrack.jetbrains.com/issue/KT-54207/Kotlin-has-two-sources-tasks-kotlinSourcesJar-and-sourcesJar-that-archives-sources-to-the-same-artifact\n        kotlinSourcesJar.enabled = false\n    }\n\n    tasks.register('downloadDependencies') {\n        outputs.upToDateWhen { false }\n        doLast {\n            project.configurations.findAll { it.canBeResolved }*.files\n        }\n    }\n\n    // Do not publish some modules\n    if (!['samples', 'benchmarks', 'micrometer-osgi-test', 'concurrency-tests', 'micrometer-test-aspectj-ctw', 'micrometer-test-aspectj-ltw'].find { project.name.contains(it) }) {\n        apply plugin: 'com.netflix.nebula.maven-publish'\n        apply plugin: 'com.netflix.nebula.maven-manifest'\n        apply plugin: 'com.netflix.nebula.maven-developer'\n        apply plugin: 'com.netflix.nebula.javadoc-jar'\n        apply plugin: 'com.netflix.nebula.source-jar'\n        apply plugin: 'com.netflix.nebula.maven-apache-license'\n        apply plugin: 'com.netflix.nebula.publish-verification'\n        apply plugin: 'com.netflix.nebula.contacts'\n        apply plugin: 'com.netflix.nebula.info'\n        apply plugin: 'com.netflix.nebula.project'\n\n        if (project.name != 'micrometer-bom') {\n            apply plugin: 'biz.aQute.bnd.builder'\n\n            jar {\n                manifest.attributes.put('Automatic-Module-Name', project.name.replace('-', '.'))\n                metaInf {\n                    from \"$rootDir/LICENSE\"\n                    from \"$rootDir/NOTICE\"\n                }\n\n                bundle {\n                    // workaround for multi-version JARs\n                    //  see https://github.com/bndtools/bnd/issues/2227\n                    bnd '''\\\n                        -fixupmessages: '^Classes found in the wrong directory: .*'\n                        -exportcontents: io.micrometer.*\n                        '''.stripIndent()\n                }\n            }\n\n            task testModules(type: Exec) {\n                dependsOn jar\n                String executablePath = javaToolchains.launcherFor { languageVersion = javaLanguageVersion }.get().executablePath\n                commandLine \"$executablePath\", '-p', \"$jar.archivePath\", '--list-modules'\n                standardOutput = new ByteArrayOutputStream()\n                ignoreExitValue = true\n\n                doLast {\n                    if (executionResult.get().getExitValue() != 0) {\n                        throw new GradleException(\"Command finished with non-zero exit value ${executionResult.get().getExitValue()}:\\n$standardOutput\")\n                    }\n                }\n            }\n\n            check.dependsOn(\"testModules\")\n\n            if (!(project.name in [])) { // add projects here that do not exist in the previous minor so should be excluded from japicmp\n                apply plugin: 'me.champeau.gradle.japicmp'\n                apply plugin: 'de.undercouch.download'\n\n                task downloadBaseline(type: Download) {\n                    onlyIf {\n                        if (project.gradle.startParameter.isOffline()) {\n                            println 'Offline: skipping downloading of baseline and JAPICMP'\n                            return false\n                        } else if (compatibleVersion == 'SKIP') {\n                            println 'SKIP: Instructed to skip the baseline comparison'\n                            return false\n                        } else {\n                            println \"Will download and perform baseline comparison with ${compatibleVersion}\"\n                            return true\n                        }\n                    }\n\n                    onlyIfNewer true\n                    compress true\n                    String rootUrl\n                    if (compatibleVersion.contains('-M') || compatibleVersion.contains('-RC')) {\n                        rootUrl = 'https://repo.spring.io/milestone/'\n                    } else if (compatibleVersion.contains('-SNAPSHOT') ) {\n                        rootUrl = 'https://repo.spring.io/snapshot/'\n                    } else {\n                        rootUrl = repositories.mavenCentral().url\n                    }\n\n                    src \"${rootUrl}io/micrometer/${project.name}/${compatibleVersion}/${project.name}-${compatibleVersion}.jar\"\n                    dest layout.buildDirectory.file(\"baselineLibs/${project.name}-${compatibleVersion}.jar\")\n                }\n\n                task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {\n                    oldClasspath.from(layout.buildDirectory.file(\"baselineLibs/${project.name}-${compatibleVersion}.jar\"))\n                    newClasspath.from(files(jar.archiveFile, project(\":${project.name}\").jar))\n                    onlyBinaryIncompatibleModified = true\n                    failOnModification = true\n                    failOnSourceIncompatibility = true\n                    txtOutputFile = project.layout.buildDirectory.file(\"reports/japi.txt\")\n                    ignoreMissingClasses = true\n                    includeSynthetic = true\n\n                    classExcludes = []\n                    compatibilityChangeExcludes = [ \"METHOD_NEW_DEFAULT\" ]\n\n                    packageExcludes = ['io.micrometer.shaded.*', 'io.micrometer.statsd.internal']\n\n                    fieldExcludes = []\n                    methodExcludes = ['io.micrometer.registry.otlp.AggregationTemporality#toOtlpAggregationTemporality(io.micrometer.registry.otlp.AggregationTemporality)']\n\n                    onlyIf { compatibleVersion != 'SKIP' }\n                }\n\n                tasks.japicmp.dependsOn(downloadBaseline)\n                tasks.japicmp.dependsOn(jar)\n                tasks.check.dependsOn(japicmp)\n            }\n        }\n\n        contacts {\n            'tludwig@vmware.com' {\n                moniker 'Tommy Ludwig'\n                github 'shakuzen'\n            }\n        }\n    }\n\n    description = 'Application monitoring instrumentation facade'\n\n    repositories {\n        mavenCentral()\n    }\n\n    def check = tasks.findByName('check')\n    if (check) project.rootProject.tasks.releaseCheck.dependsOn check\n}\n\nnexusPublishing {\n    repositories {\n        mavenCentral {\n            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))\n            snapshotRepositoryUrl.set(uri('https://repo.spring.io/snapshot/')) // not used but necessary for the plugin\n            username = findProperty('MAVEN_CENTRAL_USER')\n            password = findProperty('MAVEN_CENTRAL_PASSWORD')\n        }\n    }\n}\n\nwrapper {\n    gradleVersion = '8.12'\n}\n\ndefaultTasks 'build'\n"
        },
        {
          "name": "concurrency-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.gradle",
          "type": "blob",
          "size": 2.962890625,
          "content": "def VERSIONS = [\n        libs.logback12,\n        libs.colt,\n        libs.dynatraceUtils,\n        libs.jacksonDatabind,\n        libs.caffeine,\n        libs.kafkaJunit,\n        libs.wiremock,\n        libs.dagger,\n        libs.daggerCompiler,\n        libs.guava,\n        libs.guice,\n        libs.hazelcast,\n        libs.h2,\n        libs.applicationInsights,\n        libs.hystrix,\n        libs.spectatorAtlas,\n        libs.newrelicApi,\n        libs.signalfx,\n        libs.okhttp,\n        libs.wavefront,\n        libs.dropwizardMetricsCore,\n        libs.dropwizardMetricsGraphite,\n        libs.dropwizardMetricsJmx,\n        libs.grpcApi,\n        libs.grpcCore,\n        libs.grpcInprocess,\n        libs.grpcServices,\n        libs.grpcStubs,\n        libs.grpcAlts,\n        libs.grpcTestingProto,\n        libs.grpcKotlinStub,\n        libs.gmetric4j,\n        libs.restAssured,\n        libs.retrofit2,\n        libs.jakarta.jmsApi,\n        libs.jakarta.servletApi,\n        libs.javax.cacheApi,\n        libs.javax.inject,\n        libs.javax.servletApi,\n        libs.jaxbApi,\n        libs.contextPropagation,\n        libs.kotlinxCoroutines,\n        libs.ehcache2,\n        libs.ehcache3,\n        libs.activemqArtemisJakartaClient,\n        libs.activemqArtemisJunit5,\n        libs.httpcomponents.async,\n        libs.httpcomponents.client,\n        libs.httpcomponents.client5,\n        libs.kafkaClients,\n        libs.kafkaStreams,\n        libs.log4j,\n        libs.tomcatEmbed,\n        libs.aspectjweaver,\n        libs.assertj,\n        libs.awaitility,\n        libs.jersey2Server,\n        libs.jersey2Hk2,\n        libs.jersey2TestFrameworkInmemory,\n        libs.hdrhistogram,\n        libs.hibernateEntitymanager,\n        libs.hsqldb,\n        libs.jsr107,\n        libs.latencyUtils,\n        libs.mongoSync,\n        libs.postgre,\n        libs.slf4jApi,\n        libs.testcontainers.junitJupiter,\n        libs.testcontainers.kafka,\n        libs.testcontainers.postgresql,\n        libs.testcontainers.mongodb,\n        libs.testcontainers,\n        libs.wiremockJunit5,\n        libs.cloudwatch2\n]\n\ndef PLATFORM_BOMS = [\n        libs.reactorBom,\n        libs.nettyBom,\n        libs.junitBom\n]\n\nsubprojects {\n  plugins.withId('java-library') {\n    dependencies {\n      constraints {\n        // Direct dependencies\n        VERSIONS.each {version->\n          // java-library plugin has three root configurations, so we apply constraints too all of\n          // them so they all can use the managed versions.\n          api version\n          compileOnly version\n          runtimeOnly version\n        }\n      }\n      PLATFORM_BOMS.each { bom ->\n        api platform(bom)\n        compileOnly platform(bom)\n        runtimeOnly platform(bom)\n      }\n    }\n  }\n  configurations.configureEach {\n    // see https://github.com/google/guava/releases/tag/v32.1.0\n    // \"Reporting dependencies that overlap with Guava\"\n    resolutionStrategy.capabilitiesResolution.withCapability('com.google.guava:listenablefuture') {\n        select('com.google.guava:guava:0')\n    }\n  }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.2041015625,
          "content": "org.gradle.caching=true\norg.gradle.jvmargs=-Xmx1g\norg.gradle.parallel=true\norg.gradle.vfs.watch=true\n\ncompatibleVersion=1.14.0\n\nkotlin.stdlib.default.dependency=false\n\nnebula.dependencyLockPluginEnabled=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "implementations",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-commons",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-jakarta9",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-java11",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-java21",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-jetty11",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-jetty12",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-observation-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-observation",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-osgi-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-test-aspectj-ctw",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-test-aspectj-ltw",
          "type": "tree",
          "content": null
        },
        {
          "name": "micrometer-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.9169921875,
          "content": "pluginManagement {\n    repositories {\n        gradlePluginPortal()\n    }\n}\n\nplugins {\n    id 'com.gradle.develocity' version '3.19'\n    id 'io.spring.develocity.conventions' version '0.0.22'\n    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.9.0'\n}\n\nrootProject.name = 'micrometer'\n\nenableFeaturePreview(\"STABLE_CONFIGURATION_CACHE\")\n\ndevelocity {\n    server = 'https://ge.micrometer.io'\n}\n\nbuildCache {\n    remote(develocity.buildCache) {\n        server = 'https://ge.micrometer.io'\n    }\n}\n\ninclude 'micrometer-commons', 'micrometer-core', 'micrometer-observation'\n\n['core', 'boot2', 'boot2-reactive', 'spring-integration', 'hazelcast', 'hazelcast3', 'javalin', 'jersey3', 'jooq', 'kotlin', 'spring-framework6'].each { sample ->\n    include \"micrometer-samples-$sample\"\n    project(\":micrometer-samples-$sample\").projectDir = new File(rootProject.projectDir, \"samples/micrometer-samples-$sample\")\n}\n\ninclude 'micrometer-test', 'micrometer-observation-test', 'micrometer-test-aspectj-ltw', 'micrometer-test-aspectj-ctw'\n\n['atlas', 'prometheus', 'prometheus-simpleclient', 'datadog', 'elastic', 'ganglia', 'graphite', 'health', 'jmx', 'influx', 'otlp', 'statsd', 'new-relic', 'cloudwatch2', 'signalfx', 'wavefront', 'dynatrace', 'azure-monitor', 'humio', 'appoptics', 'kairos', 'stackdriver', 'opentsdb'].each { sys ->\n    include \"micrometer-registry-$sys\"\n    project(\":micrometer-registry-$sys\").projectDir = new File(rootProject.projectDir, \"implementations/micrometer-registry-$sys\")\n}\n\n['core'].each { benchmark ->\n    include \"micrometer-benchmarks-$benchmark\"\n    project(\":micrometer-benchmarks-$benchmark\").projectDir = new File(rootProject.projectDir, \"benchmarks/benchmarks-$benchmark\")\n}\n\ninclude 'concurrency-tests'\ninclude 'micrometer-bom'\ninclude 'micrometer-jakarta9'\ninclude 'micrometer-java11'\ninclude 'micrometer-java21'\ninclude 'micrometer-jetty11'\ninclude 'micrometer-jetty12'\ninclude 'micrometer-osgi-test'\ninclude 'docs'\n"
        }
      ]
    }
  ]
}