{
  "metadata": {
    "timestamp": 1736608937187,
    "page": 135,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "discord-jda/JDA",
      "stars": 4397,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 14.2490234375,
          "content": "root = true\n\n\n\n[*]\ncharset = utf-8\nend_of_line = crlf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\nij_formatter_off_tag = @formatter:off\nij_formatter_on_tag = @formatter:on\nij_formatter_tags_enabled = true\ntab_width = 4\nij_continuation_indent_size = 8\nij_smart_tabs = false\nij_wrap_on_typing = false\n\n[gradlew]\nend_of_line = lf\n\n[*.java]\nij_java_align_consecutive_assignments = false\nij_java_align_consecutive_variable_declarations = false\nij_java_align_group_field_declarations = false\nij_java_align_multiline_annotation_parameters = false\nij_java_align_multiline_array_initializer_expression = false\nij_java_align_multiline_assignment = false\nij_java_align_multiline_binary_operation = false\nij_java_align_multiline_chained_methods = false\nij_java_align_multiline_extends_list = false\nij_java_align_multiline_for = true\nij_java_align_multiline_method_parentheses = false\nij_java_align_multiline_parameters = true\nij_java_align_multiline_parameters_in_calls = false\nij_java_align_multiline_parenthesized_expression = false\nij_java_align_multiline_resources = true\nij_java_align_multiline_ternary_operation = false\nij_java_align_multiline_throws_list = false\nij_java_align_subsequent_simple_methods = false\nij_java_align_throws_keyword = false\nij_java_annotation_parameter_wrap = off\nij_java_array_initializer_new_line_after_left_brace = false\nij_java_array_initializer_right_brace_on_new_line = false\nij_java_array_initializer_wrap = off\nij_java_assert_statement_colon_on_next_line = false\nij_java_assert_statement_wrap = off\nij_java_assignment_wrap = off\nij_java_binary_operation_sign_on_next_line = false\nij_java_binary_operation_wrap = off\nij_java_blank_lines_after_anonymous_class_header = 0\nij_java_blank_lines_after_class_header = 0\nij_java_blank_lines_after_imports = 1\nij_java_blank_lines_after_package = 1\nij_java_blank_lines_around_class = 1\nij_java_blank_lines_around_field = 0\nij_java_blank_lines_around_field_in_interface = 0\nij_java_blank_lines_around_initializer = 1\nij_java_blank_lines_around_method = 1\nij_java_blank_lines_around_method_in_interface = 1\nij_java_blank_lines_before_class_end = 0\nij_java_blank_lines_before_imports = 1\nij_java_blank_lines_before_method_body = 0\nij_java_blank_lines_before_package = 0\nij_java_block_brace_style = next_line\nij_java_block_comment_at_first_column = true\nij_java_call_parameters_new_line_after_left_paren = false\nij_java_call_parameters_right_paren_on_new_line = false\nij_java_call_parameters_wrap = off\nij_java_case_statement_on_separate_line = true\nij_java_catch_on_new_line = true\nij_java_class_annotation_wrap = split_into_lines\nij_java_class_brace_style = next_line\nij_java_class_count_to_use_import_on_demand = 5\nij_java_class_names_in_javadoc = 1\nij_java_do_not_indent_top_level_class_members = false\nij_java_do_not_wrap_after_single_annotation = false\nij_java_do_while_brace_force = never\nij_java_doc_add_blank_line_after_description = true\nij_java_doc_add_blank_line_after_param_comments = false\nij_java_doc_add_blank_line_after_return = false\nij_java_doc_add_p_tag_on_empty_lines = true\nij_java_doc_align_exception_comments = true\nij_java_doc_align_param_comments = true\nij_java_doc_do_not_wrap_if_one_line = false\nij_java_doc_enable_formatting = false\nij_java_doc_enable_leading_asterisks = true\nij_java_doc_indent_on_continuation = false\nij_java_doc_keep_empty_lines = true\nij_java_doc_keep_empty_parameter_tag = true\nij_java_doc_keep_empty_return_tag = true\nij_java_doc_keep_empty_throws_tag = true\nij_java_doc_keep_invalid_tags = true\nij_java_doc_param_description_on_new_line = false\nij_java_doc_preserve_line_breaks = false\nij_java_doc_use_throws_not_exception_tag = true\nij_java_else_on_new_line = true\nij_java_entity_dd_suffix = EJB\nij_java_entity_eb_suffix = Bean\nij_java_entity_hi_suffix = Home\nij_java_entity_lhi_prefix = Local\nij_java_entity_lhi_suffix = Home\nij_java_entity_li_prefix = Local\nij_java_entity_pk_class = java.lang.String\nij_java_entity_vo_suffix = VO\nij_java_enum_constants_wrap = off\nij_java_extends_keyword_wrap = off\nij_java_extends_list_wrap = off\nij_java_field_annotation_wrap = split_into_lines\nij_java_finally_on_new_line = true\nij_java_for_brace_force = never\nij_java_for_statement_new_line_after_left_paren = false\nij_java_for_statement_right_paren_on_new_line = false\nij_java_for_statement_wrap = off\nij_java_generate_final_locals = false\nij_java_generate_final_parameters = false\nij_java_if_brace_force = never\nij_java_imports_layout = *,|,javax.**,java.**,|,$*\nij_java_indent_case_from_switch = false\nij_java_insert_inner_class_imports = false\nij_java_insert_override_annotation = true\nij_java_keep_blank_lines_before_right_brace = 2\nij_java_keep_blank_lines_between_package_declaration_and_header = 2\nij_java_keep_blank_lines_in_code = 2\nij_java_keep_blank_lines_in_declarations = 2\nij_java_keep_control_statement_in_one_line = true\nij_java_keep_first_column_comment = true\nij_java_keep_indents_on_empty_lines = false\nij_java_keep_line_breaks = true\nij_java_keep_multiple_expressions_in_one_line = false\nij_java_keep_simple_blocks_in_one_line = false\nij_java_keep_simple_classes_in_one_line = false\nij_java_keep_simple_lambdas_in_one_line = false\nij_java_keep_simple_methods_in_one_line = false\nij_java_lambda_brace_style = next_line\nij_java_layout_static_imports_separately = true\nij_java_line_comment_add_space = false\nij_java_line_comment_at_first_column = true\nij_java_message_dd_suffix = EJB\nij_java_message_eb_suffix = Bean\nij_java_method_annotation_wrap = split_into_lines\nij_java_method_brace_style = next_line\nij_java_method_call_chain_wrap = off\nij_java_method_parameters_new_line_after_left_paren = false\nij_java_method_parameters_right_paren_on_new_line = false\nij_java_method_parameters_wrap = off\nij_java_modifier_list_wrap = false\nij_java_names_count_to_use_import_on_demand = 3\nij_java_packages_to_use_import_on_demand = java.awt.*,javax.swing.*\nij_java_parameter_annotation_wrap = off\nij_java_parentheses_expression_new_line_after_left_paren = false\nij_java_parentheses_expression_right_paren_on_new_line = false\nij_java_place_assignment_sign_on_next_line = false\nij_java_prefer_longer_names = true\nij_java_prefer_parameters_wrap = false\nij_java_repeat_synchronized = true\nij_java_replace_instanceof_and_cast = false\nij_java_replace_null_check = true\nij_java_replace_sum_lambda_with_method_ref = true\nij_java_resource_list_new_line_after_left_paren = false\nij_java_resource_list_right_paren_on_new_line = false\nij_java_resource_list_wrap = off\nij_java_session_dd_suffix = EJB\nij_java_session_eb_suffix = Bean\nij_java_session_hi_suffix = Home\nij_java_session_lhi_prefix = Local\nij_java_session_lhi_suffix = Home\nij_java_session_li_prefix = Local\nij_java_session_si_suffix = Service\nij_java_space_after_closing_angle_bracket_in_type_argument = false\nij_java_space_after_colon = true\nij_java_space_after_comma = true\nij_java_space_after_comma_in_type_arguments = true\nij_java_space_after_for_semicolon = true\nij_java_space_after_quest = true\nij_java_space_after_type_cast = true\nij_java_space_before_annotation_array_initializer_left_brace = false\nij_java_space_before_annotation_parameter_list = false\nij_java_space_before_array_initializer_left_brace = false\nij_java_space_before_catch_keyword = true\nij_java_space_before_catch_left_brace = true\nij_java_space_before_catch_parentheses = true\nij_java_space_before_class_left_brace = true\nij_java_space_before_colon = true\nij_java_space_before_colon_in_foreach = true\nij_java_space_before_comma = false\nij_java_space_before_do_left_brace = true\nij_java_space_before_else_keyword = true\nij_java_space_before_else_left_brace = true\nij_java_space_before_finally_keyword = true\nij_java_space_before_finally_left_brace = true\nij_java_space_before_for_left_brace = true\nij_java_space_before_for_parentheses = true\nij_java_space_before_for_semicolon = false\nij_java_space_before_if_left_brace = true\nij_java_space_before_if_parentheses = true\nij_java_space_before_method_call_parentheses = false\nij_java_space_before_method_left_brace = true\nij_java_space_before_method_parentheses = false\nij_java_space_before_opening_angle_bracket_in_type_parameter = false\nij_java_space_before_quest = true\nij_java_space_before_switch_left_brace = true\nij_java_space_before_switch_parentheses = true\nij_java_space_before_synchronized_left_brace = true\nij_java_space_before_synchronized_parentheses = true\nij_java_space_before_try_left_brace = true\nij_java_space_before_try_parentheses = true\nij_java_space_before_type_parameter_list = false\nij_java_space_before_while_keyword = true\nij_java_space_before_while_left_brace = true\nij_java_space_before_while_parentheses = true\nij_java_space_inside_one_line_enum_braces = false\nij_java_space_within_empty_array_initializer_braces = false\nij_java_space_within_empty_method_call_parentheses = false\nij_java_space_within_empty_method_parentheses = false\nij_java_spaces_around_additive_operators = true\nij_java_spaces_around_assignment_operators = true\nij_java_spaces_around_bitwise_operators = true\nij_java_spaces_around_equality_operators = true\nij_java_spaces_around_lambda_arrow = true\nij_java_spaces_around_logical_operators = true\nij_java_spaces_around_method_ref_dbl_colon = false\nij_java_spaces_around_multiplicative_operators = true\nij_java_spaces_around_relational_operators = true\nij_java_spaces_around_shift_operators = true\nij_java_spaces_around_type_bounds_in_type_parameters = true\nij_java_spaces_around_unary_operator = false\nij_java_spaces_within_angle_brackets = false\nij_java_spaces_within_annotation_parentheses = false\nij_java_spaces_within_array_initializer_braces = false\nij_java_spaces_within_braces = false\nij_java_spaces_within_brackets = false\nij_java_spaces_within_cast_parentheses = false\nij_java_spaces_within_catch_parentheses = false\nij_java_spaces_within_for_parentheses = false\nij_java_spaces_within_if_parentheses = false\nij_java_spaces_within_method_call_parentheses = false\nij_java_spaces_within_method_parentheses = false\nij_java_spaces_within_parentheses = false\nij_java_spaces_within_switch_parentheses = false\nij_java_spaces_within_synchronized_parentheses = false\nij_java_spaces_within_try_parentheses = false\nij_java_spaces_within_while_parentheses = false\nij_java_special_else_if_treatment = true\nij_java_subclass_name_suffix = Impl\nij_java_ternary_operation_signs_on_next_line = false\nij_java_ternary_operation_wrap = off\nij_java_test_name_suffix = Test\nij_java_throws_keyword_wrap = off\nij_java_throws_list_wrap = off\nij_java_use_external_annotations = false\nij_java_use_fq_class_names = false\nij_java_use_single_class_imports = true\nij_java_variable_annotation_wrap = off\nij_java_visibility = public\nij_java_while_brace_force = never\nij_java_while_on_new_line = true\nij_java_wrap_comments = false\nij_java_wrap_first_method_in_call_chain = false\nij_java_wrap_long_lines = false\n\n[.editorconfig]\nij_editorconfig_align_group_field_declarations = false\nij_editorconfig_space_after_colon = false\nij_editorconfig_space_after_comma = true\nij_editorconfig_space_before_colon = false\nij_editorconfig_space_before_comma = false\nij_editorconfig_spaces_around_assignment_operators = true\n\n[{*.gradle.kts,*.kts,*.kt}]\nij_kotlin_align_in_columns_case_branch = false\nij_kotlin_align_multiline_binary_operation = false\nij_kotlin_align_multiline_extends_list = false\nij_kotlin_align_multiline_method_parentheses = false\nij_kotlin_align_multiline_parameters = true\nij_kotlin_align_multiline_parameters_in_calls = false\nij_kotlin_assignment_wrap = off\nij_kotlin_blank_lines_after_class_header = 0\nij_kotlin_blank_lines_around_block_when_branches = 0\nij_kotlin_block_comment_at_first_column = true\nij_kotlin_call_parameters_new_line_after_left_paren = false\nij_kotlin_call_parameters_right_paren_on_new_line = false\nij_kotlin_call_parameters_wrap = off\nij_kotlin_catch_on_new_line = false\nij_kotlin_class_annotation_wrap = split_into_lines\nij_kotlin_continuation_indent_for_chained_calls = true\nij_kotlin_continuation_indent_for_expression_bodies = true\nij_kotlin_continuation_indent_in_argument_lists = true\nij_kotlin_continuation_indent_in_elvis = true\nij_kotlin_continuation_indent_in_if_conditions = true\nij_kotlin_continuation_indent_in_parameter_lists = true\nij_kotlin_continuation_indent_in_supertype_lists = true\nij_kotlin_else_on_new_line = false\nij_kotlin_enum_constants_wrap = off\nij_kotlin_extends_list_wrap = off\nij_kotlin_field_annotation_wrap = split_into_lines\nij_kotlin_finally_on_new_line = false\nij_kotlin_if_rparen_on_new_line = false\nij_kotlin_import_nested_classes = false\nij_kotlin_insert_whitespaces_in_simple_one_line_method = true\nij_kotlin_keep_blank_lines_before_right_brace = 2\nij_kotlin_keep_blank_lines_in_code = 2\nij_kotlin_keep_blank_lines_in_declarations = 2\nij_kotlin_keep_first_column_comment = true\nij_kotlin_keep_indents_on_empty_lines = false\nij_kotlin_keep_line_breaks = true\nij_kotlin_lbrace_on_next_line = false\nij_kotlin_line_comment_add_space = false\nij_kotlin_line_comment_at_first_column = true\nij_kotlin_method_annotation_wrap = split_into_lines\nij_kotlin_method_call_chain_wrap = off\nij_kotlin_method_parameters_new_line_after_left_paren = false\nij_kotlin_method_parameters_right_paren_on_new_line = false\nij_kotlin_method_parameters_wrap = off\nij_kotlin_name_count_to_use_star_import = 5\nij_kotlin_name_count_to_use_star_import_for_members = 3\nij_kotlin_parameter_annotation_wrap = off\nij_kotlin_space_after_comma = true\nij_kotlin_space_after_extend_colon = true\nij_kotlin_space_after_type_colon = true\nij_kotlin_space_before_catch_parentheses = true\nij_kotlin_space_before_comma = false\nij_kotlin_space_before_extend_colon = true\nij_kotlin_space_before_for_parentheses = true\nij_kotlin_space_before_if_parentheses = true\nij_kotlin_space_before_lambda_arrow = true\nij_kotlin_space_before_type_colon = false\nij_kotlin_space_before_when_parentheses = true\nij_kotlin_space_before_while_parentheses = true\nij_kotlin_spaces_around_additive_operators = true\nij_kotlin_spaces_around_assignment_operators = true\nij_kotlin_spaces_around_equality_operators = true\nij_kotlin_spaces_around_function_type_arrow = true\nij_kotlin_spaces_around_logical_operators = true\nij_kotlin_spaces_around_multiplicative_operators = true\nij_kotlin_spaces_around_range = false\nij_kotlin_spaces_around_relational_operators = true\nij_kotlin_spaces_around_unary_operator = false\nij_kotlin_spaces_around_when_arrow = true\nij_kotlin_variable_annotation_wrap = off\nij_kotlin_while_on_new_line = false\nij_kotlin_wrap_elvis_expressions = 1\nij_kotlin_wrap_expression_body_functions = 0\nij_kotlin_wrap_first_method_in_call_chain = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.142578125,
          "content": "# Preserve gradlew's line ending\ngradlew binary\n\n.git* text eol=crlf\n*.java text eol=crlf\n*.gradle text eol=crlf\n*.bat text eol=crlf\n\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8125,
          "content": "# project files\nconfig.json\ntokens.json\n.version\npublishing-keyring.gpg\n\n# music files\n*.mp3\n*.aac\n*.m4a\n*.wav\n*.flac\n*.ogg\n\n# gradle\n/build/\n/.gradle/\n/out/\ngradle.properties\n\n# eclipse files\n.classpath\n.project\n.settings/\n/bin/\n\n# intellij files\n/.idea/\n*.iml\n*.ipr\n*.iws\n\n# fleet files\n.fleet/\n\n# vscode files\n.vscode/\n\n# netbeans files\n/.nb-gradle/\n*.nb-gradle-properties\n\n# DV8 Project Files #\nsrc-old/examples/java/AudioBridge.java\nsrc-old/examples/java/AudioExample2.java\nsrc-old/examples/java/BridgeBotExample.java\nsrc-old/examples/java/LewdieTest.java\nsrc-old/examples/java/StreamProvider.java\nsrc-old/examples/java/TestReceive.java\nsrc-old/main/java/net/dv8tion/jda/events/audio/AudioMovedEvent.java\nsrc-old/main/java/net/dv8tion/jda/ratelimit/Bucket.java\nsrc-old/main/java/net/dv8tion/jda/ratelimit/RateLimitControl.java\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.134765625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.33984375,
          "content": "[maven-central]: https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue\n[jitpack]: https://img.shields.io/badge/Snapshots-JitPack-blue\n[installation]: #-installation\n[discord-invite]: https://discord.gg/0hMr4ce0tIl3SLv5\n[migration]: https://jda.wiki/introduction/migration-v4-v5/\n[jenkins]: https://ci.dv8tion.net/job/JDA5\n[license]: https://github.com/discord-jda/JDA/tree/master/LICENSE\n[faq]: https://jda.wiki/introduction/faq/\n[docs]: https://docs.jda.wiki/index.html\n[wiki]: https://jda.wiki/introduction/jda/\n[troubleshooting]: https://jda.wiki/using-jda/troubleshooting/\n[discord-shield]: https://discord.com/api/guilds/125227483518861312/widget.png\n[faq-shield]: https://img.shields.io/badge/Wiki-FAQ-blue.svg\n[docs-shield]: https://img.shields.io/badge/Wiki-Docs-blue.svg\n[troubleshooting-shield]: https://img.shields.io/badge/Wiki-Troubleshooting-darkgreen.svg\n[jenkins-shield]: https://img.shields.io/badge/Download-Jenkins-purple.svg\n[license-shield]: https://img.shields.io/badge/License-Apache%202.0-white.svg\n[migration-shield]: https://img.shields.io/badge/Wiki-Migrating%20from%20V4-darkgreen.svg\n[GatewayIntent]: https://docs.jda.wiki/net/dv8tion/jda/api/requests/GatewayIntent.html\n[JDABuilder]: https://docs.jda.wiki/net/dv8tion/jda/api/JDABuilder.html\n[DefaultShardManagerBuilder]: https://docs.jda.wiki/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html\n\n<img align=\"right\" src=\"https://github.com/discord-jda/JDA/blob/assets/assets/readme/logo.png?raw=true\" height=\"150\" width=\"150\">\n\n[![maven-central][]][installation]\n[![jitpack][]](https://jitpack.io/#discord-jda/JDA)\n[![jenkins-shield][]][jenkins]\n[![license-shield][]][license]\n\n[![discord-shield][]][discord-invite]\n[![faq-shield]][faq]\n[![docs-shield]][docs]\n[![troubleshooting-shield]][troubleshooting]\n[![migration-shield][]][migration]\n\n# JDA (Java Discord API)\n\nThis open source library is intended for implementing bots on Discord using the real-time gateway and REST API. It provides event based functionality to implement bots of any kind, allowing for effective and scalable applications.\n\n## 📖 Overview\n\nThe core concepts of JDA have been developed to make building scalable apps easy:\n\n1. Event System  \n    Providing simplified events from the gateway API, to respond to any platform events in real-time without much hassle.\n1. Rest Actions  \n    Easy to use and scalable implementation of REST API functionality, letting you choose between callbacks with combinators, futures, and blocking.\n    The library also handles rate-limits imposed by Discord automatically, while still offering ways to replace the default implementation.\n1. Customizable Cache  \n    Trading memory usage for better performance where necessary, with sane default presets to choose from and customize.\n\nYou can learn more by visiting our [wiki][wiki] or referencing our [Javadocs][docs].\n\n## 🔬 Installation\n\n[![maven-central][]](https://mvnrepository.com/artifact/net.dv8tion/JDA/latest)\n[![jitpack][]](https://jitpack.io/#discord-jda/JDA)\n\nThis library is available on maven central. The latest version is always shown in the [GitHub Release](https://github.com/discord-jda/JDA/releases/latest).\n\nThe minimum java version supported by JDA is **Java SE 8**. JDA also uses JSR 305 to support solid interoperability with Kotlin out of the box.\n\n### Gradle\n\n```gradle\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"net.dv8tion:JDA:$version\") { // replace $version with the latest version\n      // Optionally disable audio natives to reduce jar size by excluding `opus-java`\n      // Gradle DSL:\n      // exclude module: 'opus-java'\n      // Kotlin DSL:\n      // exclude(module=\"opus-java\")\n    }\n}\n```\n\n### Maven\n\n```xml\n<dependency>\n    <groupId>net.dv8tion</groupId>\n    <artifactId>JDA</artifactId>\n    <version>$version</version> <!-- replace $version with the latest version -->\n    <!-- Optionally disable audio natives to reduce jar size by excluding `opus-java`\n    <exclusions>\n        <exclusion>\n            <groupId>club.minnced</groupId>\n            <artifactId>opus-java</artifactId>\n        </exclusion>\n    </exclusions>\n    -->\n</dependency>\n```\n\n## 🤖 Creating a Bot\n\nTo use this library, you have to create an Application in the [Discord Application Dashboard](https://discord.com/developers/applications) and grab your bot token. You can find a step-by-step guide for this in our wiki page [Creating a Discord Bot](https://jda.wiki/using-jda/getting-started/#creating-a-discord-bot).\n\n## 🏃‍♂️ Getting Started\n\nWe provide a number of [examples](https://github.com/discord-jda/JDA/tree/master/src/examples/java) to introduce you to JDA. You can also take a look at our official [Wiki][wiki], [Documentation][docs], and [FAQ][faq].\n\nEvery bot implemented by JDA starts out using the [JDABuilder][JDABuilder] or [DefaultShardManagerBuilder][DefaultShardManagerBuilder]. Both builders provide a set of default presets for cache usage and events it wants to receive:\n\n- `createDefault` - Enables cache for users who are active in voice channels and all cache flags\n- `createLight` - Disables all user cache and cache flags\n- `create` - Enables member chunking, caches all users, and enables all cache flags\n\nWe recommend reading the guide on [caching and intents](https://jda.wiki/using-jda/gateway-intents-and-member-cache-policy/) to get a feel for configuring your bot properly. Here are some possible use-cases:\n\n### Example: Message Logging\n\n> [!NOTE]\n> The following example makes use of the **privileged intent** `GatewayIntent.MESSAGE_CONTENT`, which must be explicitly enabled in your application dashboard. You can find out more about intents in our [wiki guide](https://jda.wiki/using-jda/gateway-intents-and-member-cache-policy/).\n\nSimply logging messages to the console. Making use of [JDABuilder][JDABuilder], the intended entry point for smaller bots that don't intend to grow to thousands of guilds.\n\nStarting your bot and attaching an event listener, using the right [intents][GatewayIntent]:\n\n```java\npublic static void main(String[] args) {\n  JDABuilder.createLight(token, EnumSet.of(GatewayIntent.GUILD_MESSAGES, GatewayIntent.MESSAGE_CONTENT))\n      .addEventListeners(new MessageReceiveListener())\n      .build();\n}\n```\n\nYour event listener could look like this:\n\n```java\npublic class MessageReceiveListener extends ListenerAdapter {\n  @Override\n  public void onMessageReceived(MessageReceivedEvent event) {\n    System.out.printf(\"[%s] %#s: %s\\n\",\n      event.getChannel(),\n      event.getAuthor(),\n      event.getMessage().getContentDisplay());\n  }\n}\n```\n\nYou can find a more thorough example with the [MessageLoggerExample](https://github.com/discord-jda/JDA/blob/master/src/examples/java/MessageLoggerExample.java) class.\n\n### Example: Slash Command Bot\n\nThis is a bot that makes use of [interactions](https://jda.wiki/using-jda/interactions/) to respond to user commands. Unlike the message logging bot, this bot can work without any enabled intents, since interactions are always available.\n\n```java\npublic static void main(String[] args) {\n  JDA jda = JDABuilder.createLight(token, Collections.emptyList())\n      .addEventListeners(new SlashCommandListener())\n      .build();\n\n  // Register your commands to make them visible globally on Discord:\n\n  CommandListUpdateAction commands = jda.updateCommands();\n\n  // Add all your commands on this action instance\n  commands.addCommands(\n    Commands.slash(\"say\", \"Makes the bot say what you tell it to\")\n      .addOption(STRING, \"content\", \"What the bot should say\", true), // Accepting a user input\n    Commands.slash(\"leave\", \"Makes the bot leave the server\")\n      .setGuildOnly(true) // this doesn't make sense in DMs\n      .setDefaultPermissions(DefaultMemberPermissions.DISABLED) // only admins should be able to use this command.\n  );\n\n  // Then finally send your commands to discord using the API\n  commands.queue();\n}\n```\n\nAn event listener that responds to commands could look like this:\n\n```java\npublic class SlashCommandListener extends ListenerAdapter {\n  @Override\n  public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {\n    switch (event.getName()) {\n      case \"say\" -> {\n        String content = event.getOption(\"content\", OptionMapping::getAsString);\n        event.reply(content).queue();\n      };\n      case \"leave\" -> {\n        event.reply(\"I'm leaving the server now!\")\n          .setEphemeral(true) // this message is only visible to the command user\n          .flatMap(m -> event.getGuild().leave()) // append a follow-up action using flatMap\n          .queue(); // enqueue both actions to run in sequence (send message -> leave guild)\n      };\n      default -> return;\n    }\n  }\n}\n```\n\nYou can find a more thorough example with the [SlashBotExample](https://github.com/discord-jda/JDA/blob/master/src/examples/java/SlashBotExample.java) class.\n\n## 🚀 RestAction\n\nIn this library, the [RestAction](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html) interface is used as a request builder for all API endpoints.\nThis interface represents a lazy request builder, as shown in this simple example:\n\n```java\nchannel.sendMessage(\"Hello Friend!\")\n  .addFiles(FileUpload.fromData(greetImage)) // Chain builder methods to configure the request\n  .queue() // Send the request asynchronously\n```\n\n> [!IMPORTANT]\n> The final call to [`queue()`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#queue%28%29) sends the request.\n> You can also send the request synchronously or using futures, check out our extended guide in the [RestAction Wiki](https://jda.wiki/using-jda/using-restaction/).\n\nThe RestAction interface also supports a number of operators to avoid callback hell:\n\n- [`map`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#map%28java.util.function.Function%29)  \n    Convert the result of the `RestAction` to a different value\n- [`flatMap`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#flatMap%28java.util.function.Function%29)  \n    Chain another `RestAction` on the result\n- [`delay`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#delay%28java.time.Duration%29)  \n    Delay the element of the previous step\n\nAs well as combinators like:\n\n- [`and`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#and(net.dv8tion.jda.api.requests.RestAction,java.util.function.BiFunction))  \n   Require another RestAction to complete successfully, running in parallel\n- [`allOf`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#allOf(java.util.Collection))  \n   Accumulate a list of many actions into one (see also [`mapToResult`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#mapToResult()))\n- [`zip`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#zip(net.dv8tion.jda.api.requests.RestAction,net.dv8tion.jda.api.requests.RestAction...))  \n   Similar to `and`, but combines the results into a list\n  \n\nAnd configurators like:\n\n- [`timeout`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#timeout(long,java.util.concurrent.TimeUnit)) and [`deadline`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#deadline(long))  \n   Configure how long the action is allowed to be in queue, cancelling if it takes too long\n- [`setCheck`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/RestAction.html#setCheck(java.util.function.BooleanSupplier))  \n   Running some checks right before the request is sent, this can be helpful when it is in queue for a while\n- [`reason`](https://docs.jda.wiki/net/dv8tion/jda/api/requests/restaction/AuditableRestAction.html#reason(java.lang.String))  \n   The [audit log reason](https://discord.com/developers/docs/resources/audit-log) for an action\n\n**Example**:\n\n```java\npublic RestAction<Void> selfDestruct(MessageChannel channel, String content) {\n    return channel.sendMessage(\"The following message will destroy itself in 1 minute!\")\n        .addActionRow(Button.danger(\"delete\", \"Delete now\")) // further amend message before sending\n        .delay(10, SECONDS, scheduler) // after sending, wait 10 seconds\n        .flatMap((it) -> it.editMessage(content)) // then edit the message\n        .delay(1, MINUTES, scheduler) // wait another minute\n        .flatMap(Message::delete); // then delete\n}\n```\n\nThis could then be used in code:\n\n```java\nselfDestruct(channel, \"Hello friend, this is my secret message\").queue();\n```\n\n## 🧩 Extensions\n\n### [jda-ktx](https://github.com/MinnDevelopment/jda-ktx)\n\nCreated and maintained by [MinnDevelopment](https://github.com/MinnDevelopment).  \nProvides [Kotlin](https://kotlinlang.org/) extensions for **RestAction** and events that provide a more idiomatic Kotlin experience.\n\n```kotlin\nfun main() {\n    val jda = light(BOT_TOKEN)\n    \n    jda.onCommand(\"ping\") { event ->\n        val time = measureTime {\n            event.reply(\"Pong!\").await() // suspending\n        }.inWholeMilliseconds\n\n        event.hook.editOriginal(\"Pong: $time ms\").queue()\n    }\n}\n```\n\nThere are a number of examples available in the [README](https://github.com/MinnDevelopment/jda-ktx/#jda-ktx).\n\n### [Lavaplayer](https://github.com/lavalink-devs/lavaplayer)\n\nCreated by [sedmelluq](https://github.com/sedmelluq) and now maintained by the [lavalink community](https://github.com/lavalink-devs)  \nLavaplayer is the most popular library used by Music Bots created in Java.\nIt is highly compatible with JDA and Discord4J and allows playing audio from\nYouTube, Soundcloud, Twitch, Bandcamp and [more providers](https://github.com/lavalink-devs/lavaplayer#supported-formats).  \nThe library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.\nWe recommend to also use [udpqueue](#udpqueue-an-extension-of-jda-nas) in addition to lavaplayer, to avoid stuttering issues caused by GC pauses.\n\nIt is recommended to read the [Usage](https://github.com/lavalink-devs/lavaplayer#usage) section of Lavaplayer\nto understand a proper implementation.  \nSedmelluq provided a demo in his repository which presents an example implementation for JDA:\nhttps://github.com/lavalink-devs/lavaplayer/tree/master/demo-jda\n\n### [udpqueue](https://github.com/MinnDevelopment/udpqueue.rs) (an extension of [jda-nas](https://github.com/sedmelluq/jda-nas))\n\nCreated and maintained by [sedmelluq](https://github.com/sedmelluq) and extended by [MinnDevelopment](https://github.com/MinnDevelopment)  \nProvides a native implementation for the JDA Audio Send-System **to avoid GC pauses potentially causing problems** with continuous audio playback.\n\nNote that this send-system creates an extra UDP-Client which causes audio receive to no longer function properly,\nsince Discord identifies the sending UDP-Client as the receiver.\n\n```java\nJDABuilder builder = JDABuilder.createDefault(BOT_TOKEN)\n    .setAudioSendFactory(new NativeAudioSendFactory());\n```\n\n### [Lavalink](https://github.com/lavalink-devs/Lavalink)\n\nCreated by [Freya Arbjerg](https://github.com/freyacodes) and now maintained by the [lavalink community](https://github.com/lavalink-devs).\n\nLavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind,\nand allows streaming music via many servers. It supports most of Lavaplayer's features.\n\nLavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer.\nIf you plan on serving music on a smaller scale with JDA, it is often preferable to just use Lavaplayer directly\nas it is easier.\n\n[Lavalink-Client](https://github.com/FredBoat/Lavalink-Client) is the official Lavalink client for JDA.\n\n## 🛠️ Contributing to JDA\n\nIf you want to contribute to JDA, make sure to base your branch off of our **master** branch (or a feature-branch)\nand create your PR into that **same** branch.\n\nPlease follow our [Contributing Guidelines](https://github.com/discord-jda/JDA/blob/master/.github/CONTRIBUTING.md).\n\nDo not expect your pull request to get immediate attention, sometimes it will take a long time to get a response.\nYou can join our [discord server][discord-invite] and ask in [#lib-dev](https://discord.com/channels/125227483518861312/869965829024915466) before starting to work on a new PR, to get more immediate feedback from our community members.\n\n## 🚨 Breaking Changes\n\nDue to the nature of the Discord API, the library will regularly introduce breaking changes to allow for a quick adoption of newer features. We try to keep these breaking changes minimal, but cannot avoid them entirely.\n\nMost breaking changes will result in a **minor** version bump (`5.1.2` → `5.2.0`).\n"
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 14.3271484375,
          "content": "/*\n * Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//to build everything:             \"gradlew build\"\n//to build and upload everything:  \"gradlew release\"\n\nimport com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar\nimport io.github.gradlenexus.publishplugin.AbstractNexusStagingRepositoryTask\nimport org.apache.tools.ant.filters.ReplaceTokens\nimport java.time.Duration\n\nplugins {\n    signing\n    `java-library`\n    `maven-publish`\n\n    id(\"io.github.gradle-nexus.publish-plugin\") version \"2.0.0\"\n    id(\"com.github.johnrengelman.shadow\") version \"8.1.1\"\n}\n\n\n////////////////////////////////////\n//                                //\n//     Project Configuration      //\n//                                //\n////////////////////////////////////\n\n\nval javaVersion = JavaVersion.current()\nval versionObj = Version(major = \"5\", minor = \"2\", revision = \"2\", classifier = null)\nval isGithubAction = System.getProperty(\"GITHUB_ACTION\") != null || System.getenv(\"GITHUB_ACTION\") != null\nval isCI = System.getProperty(\"BUILD_NUMBER\") != null // jenkins\n        || System.getenv(\"BUILD_NUMBER\") != null\n        || System.getProperty(\"GIT_COMMIT\") != null // jitpack\n        || System.getenv(\"GIT_COMMIT\") != null\n        || isGithubAction // Github Actions\n\n// Check the commit hash and version information\nval commitHash: String by lazy {\n    val commit = System.getenv(\"GIT_COMMIT\") ?: System.getProperty(\"GIT_COMMIT\") ?: System.getenv(\"GITHUB_SHA\")\n    // We only set the commit hash on CI builds since we don't want dirty local repos to set a wrong commit\n    if (isCI && commit != null)\n        commit.take(7)\n    else\n        \"DEV\"\n}\n\nval previousVersion: Version by lazy {\n    val file = layout.projectDirectory.file(\".version\").asFile\n    if (file.canRead())\n        Version.parse(file.readText().trim())\n    else\n        versionObj\n}\n\nval signingKey: String? by project\nval signingKeyId: String? by project\nval ossrhUser: String? by project\nval ossrhPassword: String? by project\nval stagingProfile: String? by project\n\nval ossrhConfigured = ossrhUser != null && ossrhPassword != null\nval canSign = signingKey != null && signingKeyId != null\nval shouldPublish = canSign && ossrhConfigured && isGithubAction\n\n// Use normal version string for new releases and commitHash for other builds\nif (shouldPublish) {\n    project.version = \"$versionObj\"\n} else {\n    project.version = \"${versionObj}_$commitHash\"\n}\n\nproject.group = \"net.dv8tion\"\n\n\nbase {\n    archivesName.set(\"JDA\")\n}\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n}\n\nconfigure<SourceSetContainer> {\n    register(\"examples\") {\n        java.srcDir(\"src/examples/java\")\n        compileClasspath += sourceSets[\"main\"].output\n        runtimeClasspath += sourceSets[\"main\"].output\n    }\n}\n\n\n////////////////////////////////////\n//                                //\n//    Dependency Configuration    //\n//                                //\n////////////////////////////////////\n\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n}\n\ndependencies {\n    /* ABI dependencies */\n\n    //Code safety\n    compileOnly(libs.findbugs)\n    compileOnly(libs.jetbrains.annotations)\n\n    //Logger\n    api(libs.slf4j)\n\n    //Web Connection Support\n    api(libs.websocket.client)\n    api(libs.okhttp)\n\n    //Opus library support\n    api(libs.opus)\n\n    //Collections Utility\n    api(libs.commons.collections)\n\n    //we use this only together with opus-java\n    // if that dependency is excluded it also doesn't need jna anymore\n    // since jna is a transitive runtime dependency of opus-java we don't include it explicitly as dependency\n    compileOnly(libs.jna)\n\n    /* Internal dependencies */\n\n    //General Utility\n    implementation(libs.trove4j)\n    implementation(libs.bundles.jackson)\n\n    //Audio crypto libraries\n    implementation(libs.tink)\n\n    //Sets the dependencies for the examples\n    configurations[\"examplesImplementation\"].withDependencies {\n        addAll(configurations[\"api\"].allDependencies)\n        addAll(configurations[\"implementation\"].allDependencies)\n        addAll(configurations[\"compileOnly\"].allDependencies)\n    }\n\n    testImplementation(libs.junit)\n    testImplementation(libs.reflections)\n    testImplementation(libs.mockito)\n    testImplementation(libs.assertj)\n    testImplementation(libs.commons.lang3)\n    testImplementation(libs.logback.classic)\n    testImplementation(libs.archunit)\n}\n\n\n////////////////////////////////////\n//                                //\n//    Build Task Configuration    //\n//                                //\n////////////////////////////////////\n\n\nval jar by tasks.getting(Jar::class) {\n    archiveBaseName.set(project.name)\n    manifest.attributes(\n            \"Implementation-Version\" to project.version,\n            \"Automatic-Module-Name\" to \"net.dv8tion.jda\")\n}\n\nval shadowJar by tasks.getting(ShadowJar::class) {\n    archiveClassifier.set(\"withDependencies\")\n    exclude(\"*.pom\")\n}\n\nval sourcesForRelease by tasks.creating(Copy::class) {\n    from(\"src/main/java\") {\n        include(\"**/JDAInfo.java\")\n        val tokens = mapOf(\n            \"versionMajor\" to versionObj.major,\n            \"versionMinor\" to versionObj.minor,\n            \"versionRevision\" to versionObj.revision,\n            \"versionClassifier\" to nullableReplacement(versionObj.classifier),\n            \"commitHash\" to commitHash\n        )\n        // Allow for setting null on some strings without breaking the source\n        // for this, we have special tokens marked with \"!@...@!\" which are replaced to @...@\n        filter { it.replace(Regex(\"\\\"!@|@!\\\"\"), \"@\") }\n        // Then we can replace the @...@ with the respective values here\n        filter<ReplaceTokens>(\"tokens\" to tokens)\n    }\n    into(\"build/filteredSrc\")\n\n    includeEmptyDirs = false\n}\n\nval generateJavaSources by tasks.creating(SourceTask::class) {\n    val javaSources = sourceSets[\"main\"].allJava.filter {\n        it.name != \"JDAInfo.java\"\n    }.asFileTree\n\n    source = javaSources + fileTree(sourcesForRelease.destinationDir)\n    dependsOn(sourcesForRelease)\n}\n\nval noOpusJar by tasks.creating(ShadowJar::class) {\n    dependsOn(shadowJar)\n    archiveClassifier.set(shadowJar.archiveClassifier.get() + \"-no-opus\")\n\n    configurations = shadowJar.configurations\n    from(sourceSets[\"main\"].output)\n    exclude(\"natives/**\")     // ~2 MB\n    exclude(\"com/sun/jna/**\") // ~1 MB\n    exclude(\"club/minnced/opus/util/*\")\n    exclude(\"tomp2p/opuswrapper/*\")\n\n    manifest.inheritFrom(jar.manifest)\n}\n\nval minimalJar by tasks.creating(ShadowJar::class) {\n    dependsOn(shadowJar)\n    minimize()\n    archiveClassifier.set(shadowJar.archiveClassifier.get() + \"-min\")\n\n    configurations = shadowJar.configurations\n    from(sourceSets[\"main\"].output)\n    exclude(\"natives/**\")     // ~2 MB\n    exclude(\"com/sun/jna/**\") // ~1 MB\n    exclude(\"com/google/crypto/tink/**\") // ~2 MB\n    exclude(\"com/google/gson/**\") // ~300 KB\n    exclude(\"com/google/protobuf/**\") // ~2 MB\n    exclude(\"google/protobuf/**\")\n    exclude(\"club/minnced/opus/util/*\")\n    exclude(\"tomp2p/opuswrapper/*\")\n    manifest.inheritFrom(jar.manifest)\n}\n\nval sourcesJar by tasks.creating(Jar::class) {\n    archiveClassifier.set(\"sources\")\n    from(\"src/main/java\") {\n        exclude(\"**/JDAInfo.java\")\n    }\n    from(sourcesForRelease.destinationDir)\n\n    dependsOn(sourcesForRelease)\n}\n\nval javadoc by tasks.getting(Javadoc::class) {\n    isFailOnError = isCI\n    options.memberLevel = JavadocMemberLevel.PUBLIC\n    options.encoding = \"UTF-8\"\n\n    (options as? StandardJavadocDocletOptions)?.let { opt ->\n        opt.author()\n        opt.tags(\"incubating:a:Incubating:\")\n        opt.links(\n                \"https://docs.oracle.com/javase/8/docs/api/\",\n                \"https://takahikokawasaki.github.io/nv-websocket-client/\")\n        if (JavaVersion.VERSION_1_8 < javaVersion) {\n            opt.addBooleanOption(\"html5\", true) // Adds search bar\n            opt.addStringOption(\"-release\", \"8\")\n        }\n        // Fix for https://stackoverflow.com/questions/52326318/maven-javadoc-search-redirects-to-undefined-url\n        if (javaVersion in JavaVersion.VERSION_11..JavaVersion.VERSION_12) {\n            opt.addBooleanOption(\"-no-module-directories\", true)\n        }\n        // Java 13 changed accessibility rules.\n        // On versions less than Java 13, we simply ignore the errors.\n        // Both of these remove \"no comment\" warnings.\n        if (javaVersion >= JavaVersion.VERSION_13) {\n            opt.addBooleanOption(\"Xdoclint:all,-missing\", true)\n        } else {\n            opt.addBooleanOption(\"Xdoclint:all,-missing,-accessibility\", true)\n        }\n\n        opt.overview = \"$projectDir/overview.html\"\n    }\n\n    dependsOn(sourcesJar)\n    source = sourcesJar.source.asFileTree\n    exclude(\"MANIFEST.MF\")\n\n    //### excludes ###\n\n    //jda internals\n    exclude(\"net/dv8tion/jda/internal\")\n\n    //voice crypto\n    exclude(\"com/iwebpp/crypto\")\n}\n\nval javadocJar by tasks.creating(Jar::class) {\n    dependsOn(javadoc)\n    archiveClassifier.set(\"javadoc\")\n    from(javadoc.destinationDir)\n}\n\ntasks.withType<JavaCompile> {\n    options.encoding = \"UTF-8\"\n    options.isIncremental = true\n\n    val args = mutableListOf(\"-Xlint:deprecation\", \"-Xlint:unchecked\")\n\n    if (javaVersion.isJava9Compatible) {\n        args.add(\"--release\")\n        args.add(\"8\")\n    }\n\n    doFirst {\n        options.compilerArgs = args\n    }\n}\n\nval compileJava by tasks.getting(JavaCompile::class) {\n    dependsOn(generateJavaSources)\n    source = generateJavaSources.source\n}\n\nval build by tasks.getting(Task::class) {\n    dependsOn(jar)\n    dependsOn(javadocJar)\n    dependsOn(sourcesJar)\n    dependsOn(shadowJar)\n    dependsOn(noOpusJar)\n    dependsOn(minimalJar)\n\n    jar.mustRunAfter(tasks.clean)\n    shadowJar.mustRunAfter(sourcesJar)\n}\n\nval test by tasks.getting(Test::class) {\n    useJUnitPlatform()\n    failFast = true\n}\n\n\n////////////////////////////////////\n//                                //\n//    Publishing And Signing      //\n//                                //\n////////////////////////////////////\n\n\n// Generate pom file for maven central\n\nfun MavenPom.populate() {\n    packaging = \"jar\"\n    name.set(project.name)\n    description.set(\"Java wrapper for the popular chat & VOIP service: Discord https://discord.com\")\n    url.set(\"https://github.com/discord-jda/JDA\")\n    scm {\n        url.set(\"https://github.com/discord-jda/JDA\")\n        connection.set(\"scm:git:git://github.com/discord-jda/JDA\")\n        developerConnection.set(\"scm:git:ssh:git@github.com:discord-jda/JDA\")\n    }\n    licenses {\n        license {\n            name.set(\"The Apache Software License, Version 2.0\")\n            url.set(\"http://www.apache.org/licenses/LICENSE-2.0.txt\")\n            distribution.set(\"repo\")\n        }\n    }\n    developers {\n        developer {\n            id.set(\"Minn\")\n            name.set(\"Florian Spieß\")\n            email.set(\"business@minn.dev\")\n        }\n        developer {\n            id.set(\"DV8FromTheWorld\")\n            name.set(\"Austin Keener\")\n            email.set(\"keeneraustin@yahoo.com\")\n        }\n    }\n}\n\n// Skip fat jar publication (See https://github.com/johnrengelman/shadow/issues/586)\ncomponents.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements.get()) { skip() }\nval SoftwareComponentContainer.java\n    get() = components.getByName<AdhocComponentWithVariants>(\"java\")\n\npublishing {\n    publications {\n        register<MavenPublication>(\"Release\") {\n            from(components[\"java\"])\n\n            artifactId = project.name\n            groupId = project.group as String\n            version = project.version as String\n\n            artifact(sourcesJar)\n            artifact(javadocJar)\n\n            pom.populate()\n        }\n    }\n}\n\nsigning {\n    useInMemoryPgpKeys(signingKeyId, signingKey, \"\")\n    sign(publishing.publications.getByName(\"Release\"))\n    isRequired = shouldPublish\n}\n\nnexusPublishing {\n    repositories.sonatype {\n        username.set(ossrhUser)\n        password.set(ossrhPassword)\n        stagingProfileId.set(stagingProfile)\n    }\n\n    connectTimeout.set(Duration.ofMinutes(1))\n    clientTimeout.set(Duration.ofMinutes(10))\n\n    transitionCheckOptions {\n        maxRetries.set(100)\n        delayBetween.set(Duration.ofSeconds(5))\n    }\n}\n\n\n////////////////////////////////////\n//                                //\n//   Release Task Configuration   //\n//                                //\n////////////////////////////////////\n\n\nval rebuild by tasks.creating(Task::class) {\n    group = \"build\"\n\n    dependsOn(build)\n    dependsOn(tasks.clean)\n    build.mustRunAfter(tasks.clean)\n}\n\nval publishingTasks = tasks.withType<PublishToMavenRepository> {\n    enabled = shouldPublish\n    mustRunAfter(rebuild)\n    dependsOn(rebuild)\n}\n\ntasks.withType<AbstractNexusStagingRepositoryTask> {\n    enabled = shouldPublish\n}\n\nval release by tasks.creating(Task::class) {\n    group = \"publishing\"\n    enabled = shouldPublish\n\n    dependsOn(publishingTasks)\n}\n\nafterEvaluate {\n    val closeAndReleaseStagingRepositories by tasks.getting\n    closeAndReleaseStagingRepositories.apply {\n        release.dependsOn(this)\n        mustRunAfter(publishingTasks)\n    }\n}\n\n\n////////////////////////////////////\n//                                //\n//            Helpers             //\n//                                //\n////////////////////////////////////\n\nfun nullableReplacement(string: String?): String {\n    return if (string == null) \"null\"\n    else \"\\\"$string\\\"\"\n}\n\ndata class Version(\n    val major: String,\n    val minor: String,\n    val revision: String,\n    val classifier: String? = null\n) {\n    companion object {\n        fun parse(string: String): Version {\n            val (major, minor, revision) = string.substringBefore(\"-\").split(\".\")\n            val classifier = string.substringAfter(\"-\").takeIf { \"-\" in string }\n            return Version(major, minor, revision, classifier)\n        }\n    }\n\n    override fun toString(): String {\n        return \"$major.$minor.$revision\" + if (classifier != null) \"-$classifier\" else \"\"\n    }\n}\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "overview.html",
          "type": "blob",
          "size": 2.3681640625,
          "content": "<!--\n  ~ Copyright 2015 Austin Keener, Michael Ritter, Florian Spieß, and the JDA contributors\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~    http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<body>\n    <p>Welcome to the documentation of the Java Discord API (JDA) library!</p>\n    <p>If you are new to JDA, you can check some of our official guides to get started:\n\n    <ul>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/setup/intellij/\">Setup</a></li>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/using-jda/getting-started/\">Getting Started</a></li>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/introduction/faq/\">Frequently Asked Questions</a></li>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/using-jda/troubleshooting/\">Troubleshooting</a></li>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/using-jda/using-restaction/\">Using RestActions</a></li>\n        <li><a target=\"_blank\" href=\"https://jda.wiki/using-jda/interactions/\">Interactions</a></li>\n    </ul>\n\n    <p>There are also a few examples available to get inspired:\n    <ul>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/blob/master/src/examples/java/MessageLoggerExample.java\">Message Logging</a></li>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/blob/master/src/examples/java/SlashBotExample.java\">Slash Commands</a></li>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/blob/master/src/examples/java/AudioEchoExample.java\">Receiving and Sending Audio</a></li>\n    </ul>\n\n    <p>Other useful resources:\n    <ul>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/blob/master/README.md\">README</a></li>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/releases\">Releases and Changelogs</a></li>\n        <li><a target=\"_blank\" href=\"https://github.com/discord-jda/JDA/issues\">Reporting Issues</a></li>\n    </ul>\n</body>\n"
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 2.3486328125,
          "content": "rootProject.name = \"JDA\"\n\ndependencyResolutionManagement {\n    versionCatalogs {\n        create(\"libs\") {\n            version(\"jackson\", \"2.17.2\")\n            library(\"jackson-core\",     \"com.fasterxml.jackson.core\", \"jackson-core\").versionRef(\"jackson\")\n            library(\"jackson-databind\", \"com.fasterxml.jackson.core\", \"jackson-databind\").versionRef(\"jackson\")\n            bundle(\"jackson\", listOf(\"jackson-core\", \"jackson-databind\"))\n\n            library(\"logback-classic\",       \"ch.qos.logback\",           \"logback-classic\"     ).version(\"1.5.6\")\n            library(\"opus\",                  \"club.minnced\",             \"opus-java\"           ).version(\"1.1.1\")\n            library(\"findbugs\",              \"com.google.code.findbugs\", \"jsr305\"              ).version(\"3.0.2\")\n            library(\"websocket-client\",      \"com.neovisionaries\",       \"nv-websocket-client\" ).version(\"2.14\")\n            library(\"okhttp\",                \"com.squareup.okhttp3\",     \"okhttp\"              ).version(\"4.12.0\")\n            library(\"jna\",                   \"net.java.dev.jna\",         \"jna\"                 ).version(\"5.14.0\")\n            library(\"trove4j\",               \"net.sf.trove4j\",           \"core\"                ).version(\"3.1.0\")\n            library(\"commons-collections\",   \"org.apache.commons\",       \"commons-collections4\").version(\"4.4\")\n            library(\"commons-lang3\",         \"org.apache.commons\",       \"commons-lang3\"       ).version(\"3.14.0\")\n            library(\"assertj\",               \"org.assertj\",              \"assertj-core\"        ).version(\"3.25.3\")\n            library(\"jetbrains-annotations\", \"org.jetbrains\",            \"annotations\"         ).version(\"24.1.0\")\n            library(\"junit\",                 \"org.junit.jupiter\",        \"junit-jupiter\"       ).version(\"5.10.2\")\n            library(\"mockito\",               \"org.mockito\",              \"mockito-core\"        ).version(\"5.11.0\")\n            library(\"reflections\",           \"org.reflections\",          \"reflections\"         ).version(\"0.10.2\")\n            library(\"slf4j\",                 \"org.slf4j\",                \"slf4j-api\"           ).version(\"2.0.13\")\n            library(\"tink\",                  \"com.google.crypto.tink\",   \"tink\"                ).version(\"1.14.1\")\n            library(\"archunit\",              \"com.tngtech.archunit\",     \"archunit\"            ).version(\"1.3.0\")\n        }\n    }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}