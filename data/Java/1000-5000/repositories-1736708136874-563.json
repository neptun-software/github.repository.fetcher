{
  "metadata": {
    "timestamp": 1736708136874,
    "page": 563,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SalomonBrys/ANR-WatchDog",
      "stars": 2894,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1796875,
          "content": "\n# ECLIPSE\n.classpath\n.project\n.settings/\n\n# INTELLIJ\n.idea/\n*.ipr\n*.iml\n\n# SYSTEM FILES\n*~\n.DS_STORE\n\n# GRADLE\n.gradle\n/build/\ngradle.properties\nlocal.properties\n.gradletasknamecache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Salomon BRYS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.375,
          "content": "[![Maven Central](https://img.shields.io/maven-central/v/com.github.anrwatchdog/anrwatchdog.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.github.anrwatchdog%22)\n[![MIT License](https://img.shields.io/github/license/salomonbrys/ANR-WatchDog.svg)](https://github.com/SalomonBrys/ANR-WatchDog/blob/master/LICENSE)\n[![GitHub issues](https://img.shields.io/github/issues/SalomonBrys/ANR-WatchDog.svg)](https://github.com/SalomonBrys/ANR-WatchDog/issues)\n[![Donate](https://img.shields.io/badge/Backing-Donate-orange.svg)](https://donorbox.org/donation-salomonbrys/)\n\n\nANR-WatchDog\n============\n\nA simple watchdog that detects Android ANRs (Application Not Responding).\n\n\nTable of contents\n-----------------\n\n  * [ANR-WatchDog](#anr-watchdog)\n    * [Table of contents](#table-of-contents)\n    * [Why it exists](#why-it-exists)\n    * [What it does](#what-it-does)\n    * [Can it work with crash reporters?](#can-it-work-with-crash-reporters)\n    * [How it works](#how-it-works)\n  * [Usage](#usage)\n    * [Install](#install)\n      * [With Gradle / Android Studio](#with-gradle--android-studio)\n      * [With Eclipse](#with-eclipse)\n    * [Reading the ANRError exception report](#reading-the-anrerror-exception-report)\n    * [Configuration](#configuration)\n      * [Timeout (minimum hanging time for an ANR)](#timeout-minimum-hanging-time-for-an-anr)\n      * [Debugger](#debugger)\n      * [On ANR callback](#on-anr-callback)\n      * [Filtering reports](#filtering-reports)\n      * [Watchdog thread](#watchdog-thread)\n  * [Donate](#donate)\n\n\nWhy it exists\n-------------\n\nThere is currently no way for an android application to catch and report ANR errors.  \nIf your application is not in the play store (either because you are still developing it or because you are distributing it differently), the only way to investigate an ANR is to pull the file /data/anr/traces.txt.  \nAdditionally, we found that using the Play Store was not as effective as being able to choose our own bug tracking service.\n\nThere is an [issue entry](https://code.google.com/p/android/issues/detail?id=35380) in the android bug tracker describing this lack, feel free to star it ;)\n\n\nWhat it does\n------------\n\nIt sets up a \"watchdog\" timer that will detect when the UI thread stops responding. When it does, it raises an error with all threads stack traces (main first).\n\n\nCan it work with crash reporters?\n---------------------------------\n\nYes! I'm glad you asked: That's the reason why it was developed in the first place!  \nAs this throws an error, a crash handler can intercept it and handle it the way it needs.\n\nKnown working crash reporters include:\n\n * [ACRA](https://github.com/ACRA/acra)\n * [Crashlytics](https://get.fabric.io/crashlytics) ([Only with `setReportMainThreadOnly()`](https://github.com/SalomonBrys/ANR-WatchDog/issues/29))\n * [HockeyApp](https://hockeyapp.net/)\n * [Bugsnag](https://www.bugsnag.com/)\n\nAnd there is no reason why it should not work with *[insert your favourite crash reporting system here]*.\n\n\nHow it works\n------------\n\nThe watchdog is a simple thread that does the following in a loop:\n\n1.  Schedules a runnable to be run on the UI thread as soon as possible.\n2.  Wait for 5 seconds. (5 seconds is the default, but it can be configured).\n3.  See if the runnable has been run. If it has, go back to 1.\n4.  If the runnable has not been run, which means that the UI thread has been blocked for at least 5 seconds, it raises an error with all running threads stack traces.\n\n\nUsage\n=====\n\nInstall\n-------\n\n### With Gradle / Android Studio\n\n1.  In the `app/build.gradle` file, add:\n\n    ```\n    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'\n    ```\n\n2.  In your application class, in `onCreate`, add:\n\n    ```java\n    new ANRWatchDog().start();\n    ```\n\n\n### With Eclipse\n\n1. [Download the latest jar](https://search.maven.org/remote_content?g=com.github.anrwatchdog&a=anrwatchdog&v=LATEST)\n\n2. Put the jar in the `libs/` directory of your project\n\n\nReading the ANRError exception report\n-------------------------------------\n\nThe `ANRError` stack trace is a bit particular, it has the stack traces of all the threads running in your application. So, in the report, **each `caused by` section is not the cause of the precedent exception**, but the stack trace of a different thread.\n\nHere is a dead lock example:\n\n```\nFATAL EXCEPTION: |ANR-WatchDog|\n    Process: anrwatchdog.github.com.testapp, PID: 26737\n    com.github.anrwatchdog.ANRError: Application Not Responding\n    Caused by: com.github.anrwatchdog.ANRError$_$_Thread: main (state = WAITING)\n        at testapp.MainActivity$1.run(MainActivity.java:46)\n        at android.os.Handler.handleCallback(Handler.java:739)\n        at android.os.Handler.dispatchMessage(Handler.java:95)\n        at android.os.Looper.loop(Looper.java:135)\n        at android.app.ActivityThread.main(ActivityThread.java:5221)\n    Caused by: com.github.anrwatchdog.ANRError$_$_Thread: APP: Locker (state = TIMED_WAITING)\n        at java.lang.Thread.sleep(Native Method)\n        at java.lang.Thread.sleep(Thread.java:1031)\n        at java.lang.Thread.sleep(Thread.java:985)\n        at testapp.MainActivity.SleepAMinute(MainActivity.java:18)\n        at testapp.MainActivity.access$100(MainActivity.java:12)\n        at testapp.MainActivity$LockerThread.run(MainActivity.java:36)\n```\n\nFrom this report, we can see that the stack traces of two threads. The first (the \"main\" thread) is stuck at `MainActivity.java:46` while the second thread (named \"App: Locker\") is locked in a Sleep at `MainActivity.java:18`.  \nFrom there, if we looked at those two lines, we would surely understand the cause of the dead lock!\n\nNote that some crash reporting library (such as Crashlytics) report all thread stack traces at the time of an uncaught exception. In that case, having all threads in the same exception can be cumbersome. In such cases, simply use `setReportMainThreadOnly()`.\n\n\nConfiguration\n-------------\n\n### Timeout (minimum hanging time for an ANR)\n\nTo set a different timeout (5000 millis is the default):\n\n```java\nif (BuildConfig.DEBUG == false) {\n  new ANRWatchDog(10000 /*timeout*/).start();\n}\n```\n\n\n### Debugger\n\nBy default, the watchdog will ignore ANRs if the debugger is attached or if the app is waiting for the debugger to attach. This is because it detects execution pauses and breakpoints as ANRs.\nTo disable this and throw an `ANRError` even if the debugger is connected, you can add `setIgnoreDebugger(true)`:\n\n```java\nnew ANRWatchDog().setIgnoreDebugger(true).start();\n```\n\n\n### On ANR callback\n\nIf you would prefer not to crash the application when an ANR is detected, you can enable a callback instead:\n\n```java\nnew ANRWatchDog().setANRListener(new ANRWatchDog.ANRListener() {\n    @Override\n    public void onAppNotResponding(ANRError error) {\n        // Handle the error. For example, log it to HockeyApp:\n        ExceptionHandler.saveException(error, new CrashManager());\n    }\n}).start();\n```\n\n**This is very important when delivering your app in production.**\nWhen in the hand of the final user, it's *probably better* not to crash after 5 seconds, but simply report the ANR to whatever reporting system you use.\nMaybe, after some more seconds, the app will \"de-freeze\".\n\n\n### Filtering reports\n\nIf you would like to have only your own threads to be reported in the ANRError, and not all threads (including system threads such as the `FinalizerDaemon` thread), you can set a prefix: only the threads whose name starts with this prefix will be reported.\n\n```java\nnew ANRWatchDog().setReportThreadNamePrefix(\"APP:\").start();\n```\n\nThen, when you start a thread, don't forget to set its name to something that starts with this prefix (if you want it to be reported):\n\n```java\npublic class MyAmazingThread extends Thread {\n    @Override\n    public void run() {\n        setName(\"APP: Amazing!\");\n        /* ... do amazing things ... */\n    }\n}\n```\n\nIf you want to have only the main thread stack trace and not all the other threads, you can:\n\n```java\nnew ANRWatchDog().setReportMainThreadOnly().start();\n```\n\n\n### ANR Interceptor\n\nSometimes, you want to know that the application has froze for a certain duration, but not report the ANR error just yet.\nYou can define an interceptor that will be called before reporting an error.\nThe role of the interceptor is to define whether or not, given the given freeze duration, an ANR error should be raised or postponed.\n\n```java\nnew ANRWatchDog(2000).setANRInterceptor(new ANRWatchDog.ANRInterceptor() {\n    @Override\n    public long intercept(long duration) {\n        long ret = 5000 - duration;\n        if (ret > 0) {\n            Log.w(TAG, \"Intercepted ANR that is too short (\" + duration + \" ms), postponing for \" + ret + \" ms.\");\n        }\n        return ret;\n    }\n})\n```\n\nIn this example, the ANRWatchDog starts with a timeout of 2000 ms, but the interceptor will postpone the error until at least 5000 ms of freeze has been reached.\n\n\n### Watchdog thread\n\nANRWatchDog is a thread, so you can interrupt it at any time.\n\nIf you are programming with Android's multi process capability (like starting an activity in a new process), remember that you will need an ANRWatchDog thread per process.\n\n\nDonate\n======\n\nANR-Watchdog is free to use for both non-profit and commercial use and always will be.\n\nIf you wish to show some support or appreciation to my work, you are free to **[donate](https://donorbox.org/donation-salomonbrys)**!\n\nThis would be (of course) greatly appreciated but is by no means necessary to receive help or support, which I'll be happy to provide for free :)\n"
        },
        {
          "name": "anr-watchdog",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.4814453125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        mavenCentral()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.3.2'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.03515625,
          "content": "include ':anr-watchdog', ':testapp'\n"
        },
        {
          "name": "testapp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}