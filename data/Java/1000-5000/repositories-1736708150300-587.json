{
  "metadata": {
    "timestamp": 1736708150300,
    "page": 587,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SpecialCyCi/AndroidResideMenu",
      "stars": 2845,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3779296875,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Eclipse project files\n.classpath\n.project\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Intellij project files\n*.iml\n*.ipr\n*.iws\n.idea/\n\n.gradle/\ngradle/\ngradlew\ngradlew.bat\nbuild/\n.DS_Store\n"
        },
        {
          "name": "1.png",
          "type": "blob",
          "size": 40.21875,
          "content": null
        },
        {
          "name": "2.gif",
          "type": "blob",
          "size": 1467.1611328125,
          "content": null
        },
        {
          "name": "3Dsupport.png",
          "type": "blob",
          "size": 988.1552734375,
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 SpecialCyCi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6533203125,
          "content": "#AndroidResideMenu\n------\n### 中文说明请点击 [这里][1]\n\nThe idea of ResideMenu is from Dribble [1][2] and [2][3]. It has come true and run in iOS devices. [iOS ResideMenu][4]\nThis project is the RefsideMenu Android version. The visual effect is partly referred to iOS version of ResideMenu.\nAnd thanks to the authors for the above idea and contribution.\n<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/1.png\" width=\"320\" height=\"568\" />\n<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif\" width=\"320\" height=\"568\" />\n\nNow with 3D support !\n<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/3Dsupport.png\" width=\"320\" height=\"568\" />\n## DEMO\nThis copy is the demo.\n\n## Version Migration\n\n#### Upgrading to `v1.4` from `v1.3`, `v1.2`, `v1.1`, `v1.0` \n\nDuplicate the followed code in dispatchTouchEvent() of Activity, replace the old `dispatchTouchEvent()` code.\n\n```java\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        return resideMenu.dispatchTouchEvent(ev);\n    }\n```\n\n## Requirements\n\nRun in Android 2.3 +\n\n## Installation\n\n### Gradle\n\n```gradle\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile 'com.specyci:residemenu:1.6+'\n}\n```\n\n### Other\n\n 1. import ResideMenu project to your workspace.\n 2. make it as a dependency library project to your main project.\n<br>**( see [example][5] )**\n\n**or**\n\nIf you want to merge ResideMenu with your project, you should follow these steps.\n\n 1. Copy all files from src/com/special/ResideMenu to your project.\n 2. Copy libs/nineoldandroids-library-2.4.0.jar to your project’s corresponding path: libs/\n 3. Copy res/drawable-hdpi/shadow.9.png to your project’s corresponding path: res/drawable-hdpi/\n 4. Copy res/layout/residemenu.xml and residemenu_item.xml to your project’s corresponding path: res/layout\n\n## Usage\ninit ResideMenu: write these code in Activity onCreate()\n```java\n        // attach to current activity;\n        resideMenu = new ResideMenu(this);\n        resideMenu.setBackground(R.drawable.menu_background);\n        resideMenu.attachToActivity(this);\n\n        // create menu items;\n        String titles[] = { \"Home\", \"Profile\", \"Calendar\", \"Settings\" };\n        int icon[] = { R.drawable.icon_home, R.drawable.icon_profile, R.drawable.icon_calendar, R.drawable.icon_settings };\n\n        for (int i = 0; i < titles.length; i++){\n            ResideMenuItem item = new ResideMenuItem(this, icon[i], titles[i]);\n            item.setOnClickListener(this);\n            resideMenu.addMenuItem(item,  ResideMenu.DIRECTION_LEFT); // or  ResideMenu.DIRECTION_RIGHT\n        }\n```\nIf you want to use slipping gesture to operate(lock/unlock) the menu, override this code in Acitivity dispatchTouchEvent() (please duplicate the followed code in dispatchTouchEvent() of Activity.\n```java\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        return resideMenu.dispatchTouchEvent(ev);\n    }\n```\n**On some occasions, the slipping gesture function for locking/unlocking menu, may have conflicts with your widgets, such as viewpager. By then you can add the viewpager to ignored view, please refer to next chapter – Ignored Views.**\n\nopen/close menu\n```java\nresideMenu.openMenu(ResideMenu.DIRECTION_LEFT); // or ResideMenu.DIRECTION_RIGHT\nresideMenu.closeMenu();\n```\n\nlisten in the menu state\n```java\n    resideMenu.setMenuListener(menuListener);\n    private ResideMenu.OnMenuListener menuListener = new ResideMenu.OnMenuListener() {\n        @Override\n        public void openMenu() {\n            Toast.makeText(mContext, \"Menu is opened!\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void closeMenu() {\n            Toast.makeText(mContext, \"Menu is closed!\", Toast.LENGTH_SHORT).show();\n        }\n    };\n```\n\ndisable a swipe direction\n```java\n  resideMenu.setSwipeDirectionDisable(ResideMenu.DIRECTION_RIGHT);\n```\n\n## Custom Usage\n\nDo your reside menu configurations, by creating an instance of ResideMenu with your custom layout's resource Ids. If you want to use default layout, just pass that variable as -1.\n\n```java\n        resideMenu = new ResideMenu(activity, R.layout.menu_left, R.layout.menu_right);\n        resideMenu.setBackground(R.drawable.menu_background);\n        resideMenu.attachToActivity(activity);\n        resideMenu.setScaleValue(0.5f);\n\n        resideMenu.setSwipeDirectionDisable(ResideMenu.DIRECTION_RIGHT);\n        resideMenu.setSwipeDirectionDisable(ResideMenu.DIRECTION_LEFT);\n```\n\nAs your configuration's completed, now you can customize side menus by getting instances of them as following:\n\n```java\n        View leftMenu = resideMenu.getLeftMenuView();\n        // TODO: Do whatever you need to with leftMenu\n        View rightMenu = resideMenu.getRightMenuView();\n        // TODO: Do whatever you need to with rightMenu\n```\n\n##Ignored Views\nOn some occasions, the slipping gesture function for locking/unlocking menu, may have conflicts with your widgets such as viewpager.By then you can add the viewpager to ignored view.\n```java\n        // add gesture operation's ignored views\n        FrameLayout ignored_view = (FrameLayout) findViewById(R.id.ignored_view);\n        resideMenu.addIgnoredView(ignored_view);\n```\nSo that in ignored view’s workplace, the slipping gesture will not be allowed to operate menu.\n\n##About me\nA student from SCAU China.<br>\nEmail: specialcyci#gmail.com\n\n\n  [1]: https://github.com/SpecialCyCi/AndroidResideMenu/blob/master/README_CN.md\n  [2]: http://dribbble.com/shots/1116265-Instasave-iPhone-App\n  [3]: http://dribbble.com/shots/1114754-Social-Feed-iOS7\n  [4]: https://github.com/romaonthego/RESideMenu\n  [5]: https://github.com/SpecialCyCi/AndroidResideMenu/blob/master/ResideMenuDemo/project.properties\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 4.22265625,
          "content": "#AndroidResideMenu\n\n------\n\nReisdeMenu 创意灵感来自于Dribbble[1][1]还有[2][2]，而这个是Android版的ResideMenu，在视觉效果上部分参考了[iOS版的RESideMenu][3]，并在此感谢以上作者的贡献。\n<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/1.png\" width=\"320\" height=\"568\" />\n<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif\" width=\"320\" height=\"568\" />\n\n## DEMO\n\n本代码即是DEMO，您可以下载后选择您喜欢的IDE运行。SDK版本建议使用4.0以上\n\n## Version Migration\n\n#### 从 `v1.0`, `v1.1`, `v1.2`, `v1.3` 升级到 `v1.4`\n\n如果你开启了手势滑动，你需要替换被依附的 Activity 里 `dispatchTouchEvent()` 代码\n\n```java\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        return resideMenu.dispatchTouchEvent(ev);\n    }\n```\n\n## Requirements\n\n运行在 Android 2.3 +\n\n## Installation\n\n### Gradle\n\n```gradle\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile 'com.specyci:residemenu:1.6+'\n}\n```\n\n### Other\n\n 直接导入ResideMenu项目并作为依赖项目<br>\n **[例子][6]**\n\n**or**\n 直接合并到您的项目之中\n\n 1. 复制src/com/special/ResideMenu下的所有代码到您的项目相应位置\n 2. 复制libs/nineoldandroids-library-2.4.0.jar到您项目libs/下\n 3. 复制res/drawable-hdpi/shadow.9.png到您的项目相应位置\n 4. 复制res/layout/residemenu.xml 和 residemenu_item.xml到您的项目相应位置\n\n## Usage\n写在Activity onCreate()中\n```java\n        // attach to current activity;\n        resideMenu = new ResideMenu(this);\n        resideMenu.setBackground(R.drawable.menu_background);\n        resideMenu.attachToActivity(this);\n\n        // create menu items;\n        String titles[] = { \"Home\", \"Profile\", \"Calendar\", \"Settings\" };\n        int icon[] = { R.drawable.icon_home, R.drawable.icon_profile, R.drawable.icon_calendar, R.drawable.icon_settings };\n\n        for (int i = 0; i < titles.length; i++){\n            ResideMenuItem item = new ResideMenuItem(this, icon[i], titles[i]);\n            item.setOnClickListener(this);\n            resideMenu.addMenuItem(item,  ResideMenu.DIRECTION_LEFT); // or  ResideMenu.DIRECTION_RIGHT\n        }\n```\n如果您需要使用手势滑动开启/关闭菜单，请复写activity的dispatchTouchEvent()，代码如下\n```java\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        return resideMenu.dispatchTouchEvent(ev);\n    }\n```\n**在某些场景下，手势滑动开启/关闭菜单可能与您的某些控件产生冲突，例如viewpager，这时您可以把viewpager添加到ignored view.请参见下节Ignored Views**\n\n开启/关闭菜单\nopen or close menu\n```java\nresideMenu.openMenu(ResideMenu.DIRECTION_LEFT); // or ResideMenu.DIRECTION_RIGHT\nresideMenu.closeMenu();\n```\n监听菜单状态\n```java\n    resideMenu.setMenuListener(menuListener);\n    private ResideMenu.OnMenuListener menuListener = new ResideMenu.OnMenuListener() {\n        @Override\n        public void openMenu() {\n            Toast.makeText(mContext, \"Menu is opened!\", Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        public void closeMenu() {\n            Toast.makeText(mContext, \"Menu is closed!\", Toast.LENGTH_SHORT).show();\n        }\n    };\n```\n\n禁止手势操作某个菜单方向\n```java\n  resideMenu.setSwipeDirectionDisable(ResideMenu.DIRECTION_RIGHT);\n```\n\n\n##Ignored Views\n在某些场景下，手势滑动开启/关闭菜单可能与您的某些控件产生冲突，例如viewpager，这时您可以把viewpager添加到ignored view.\n```java\n        // add gesture operation's ignored views\n        FrameLayout ignored_view = (FrameLayout) findViewById(R.id.ignored_view);\n        resideMenu.addIgnoredView(ignored_view);\n```\n这样子在ignored_view操作的区域就不允许用手势滑动操作菜单.\n\n##About me\nA student from SCAU China.<br>\nEmail: specialcyci#gmail.com\n\n[1]: http://dribbble.com/shots/1116265-Instasave-iPhone-App\n[2]: http://dribbble.com/shots/1114754-Social-Feed-iOS7\n[3]: https://github.com/romaonthego/RESideMenu\n[4]: http://dribbble.com/shots/1116265-Instasave-iPhone-App\n[5]: http://dribbble.com/shots/1114754-Social-Feed-iOS7\n[6]: https://github.com/SpecialCyCi/AndroidResideMenu/blob/master/ResideMenuDemo/project.properties\n"
        },
        {
          "name": "ResideMenu",
          "type": "tree",
          "content": null
        },
        {
          "name": "ResideMenuDemo",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.884765625,
          "content": "println \"-------------------------------------------------\"\nprintln \"Build ResideMenu with:\\n\\tbuildToolsVersion = \" + System.properties['buildToolsVersion']\nprintln \"\\tandroidGradlePluginVersion = \" + System.properties['androidGradlePluginVersion']\nprintln \"\\tfile.encoding = \" + System.properties['file.encoding']\nprintln \"\\tCharset.defaultCharset() = \" + java.nio.charset.Charset.defaultCharset().toString()\nprintln \"-------------------------------------------------\\n\"\n\n\next {\n    compileSdkVersion = 19\n    buildToolsVersion = System.properties['buildToolsVersion']\n    minSdkVersion = 9\n    targetSdkVersion = 14\n}\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:' + System.properties['androidGradlePluginVersion']\n    }\n}\n\nallprojects {\n\n    tasks.withType(JavaCompile) {\n        options.encoding = \"UTF-8\"\n    }\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8447265625,
          "content": "VERSION_NAME=1.6\nVERSION_CODE=8\nPOM_GROUP_ID=com.specyci\nPOM_DESCRIPTION=The idea of ResideMenu is from Dribbble 1 and 2. It has come true and run in iOS devices. iOS ResideMenu This project is the RefsideMenu Android version. The visual effect is partly referred to iOS version of ResideMenu. And thanks to the authors for the above idea and contribution.\nPOM_URL=https://github.com/SpecialCyCi/AndroidResideMenu\nPOM_SCM_URL=https://github.com/SpecialCyCi/AndroidResideMenu\nPOM_SCM_CONNECTION=scm:git@github.com:SpecialCyCi/AndroidResideMenu.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:SpecialCyCi/AndroidResideMenu.git\nPOM_LICENCE_NAME=The MIT License (MIT)\nPOM_LICENCE_URL=https://raw.githubusercontent.com/SpecialCyCi/AndroidResideMenu/master/LICENSE\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=specialcyci\nPOM_DEVELOPER_NAME=Special Leung\nPOM_INCEPTION_YEAR=2013\n"
        },
        {
          "name": "maven_push.gradle",
          "type": "blob",
          "size": 3.271484375,
          "content": "apply plugin: 'maven'\napply plugin: 'signing'\n\ndef isReleaseBuild() {\n    return VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef sonatypeRepositoryUrl\nif (isReleaseBuild()) {\n    println 'RELEASE BUILD'\n    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n} else {\n    println 'SNAPSHOT BUILD'\n    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('nexusUsername') ? nexusUsername : \"\"\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('nexusPassword') ? nexusPassword : \"\"\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.artifactId = POM_ARTIFACT_ID\n\n                repository(url: sonatypeRepositoryUrl) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    groupId POM_GROUP_ID\n                    version VERSION_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n                    inceptionYear POM_INCEPTION_YEAR\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    task androidJavadocs(type: Javadoc) {\n        failOnError false\n        source = android.sourceSets.main.java.source\n        options {\n            links \"http://docs.oracle.com/javase/7/docs/api/\"\n            linksOffline \"http://d.android.com/reference\", \"${android.sdkDirectory}/docs/reference\"\n        }\n        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath\n        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    }\n\n    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {\n        classifier = 'javadoc'\n        //basename = artifact_id\n        from androidJavadocs.destinationDir\n    }\n\n    task androidSourcesJar(type: Jar) {\n        classifier = 'sources'\n        from android.sourceSets.main.java.srcDirs\n    }\n\n    artifacts {\n        //archives packageReleaseJar\n        archives androidSourcesJar\n        archives androidJavadocsJar\n    }\n}\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.310546875,
          "content": "include ':ResideMenu', ':ResideMenuDemo'\n\n//override your build tools version in gradle.properties\n\nif (!System.properties['buildToolsVersion']) {\n\tSystem.properties['buildToolsVersion'] =  \"19.1.0\"\n}\n\nif (!System.properties['androidGradlePluginVersion']) {\n\tSystem.properties['androidGradlePluginVersion'] = \"1.0.+\"\n}"
        }
      ]
    }
  ]
}