{
  "metadata": {
    "timestamp": 1736708628984,
    "page": 960,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jenkinsci/kubernetes-plugin",
      "stars": 2274,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0390625,
          "content": ".git\nwork\ntarget\n!target/kubernetes.hpi\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.09765625,
          "content": "# https://github.com/jenkinsci/kubernetes-plugin/pull/1478\n9c1d58d9badd988622b4772632037126176e1ef0\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.138671875,
          "content": "/target/\n/.classpath\n/.project\n/.factorypath\n/.settings/\n/work/\n/.idea/\n*.iml\nnbactions.xml\nnb-configuration.xml\n*.bak\n/.vscode/\n**/.DS_Store\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG-archive.md",
          "type": "blob",
          "size": 38.46875,
          "content": "CHANGELOG\n=========\n\nKnown issues\n------------\n* Nested pod templates and inheritance issues [JENKINS-49700](https://issues.jenkins-ci.org/browse/JENKINS-49700)\n\nSee the full list of issues at [JIRA](https://issues.jenkins-ci.org/issues/?filter=15575)\n\n1.16.5 and newer\n------\n\nNo longer tracked in this file. See [GitHub releases](https://github.com/jenkinsci/kubernetes-plugin/releases) instead.\n\n1.16.4\n------\n* Add http connections count [#528](https://github.com/jenkinsci/kubernetes-plugin/pull/528)\n* Hide deprecated credential type [#529](https://github.com/jenkinsci/kubernetes-plugin/pull/529) [JENKINS-49717](https://issues.jenkins-ci.org/browse/JENKINS-49717)\n* Allow option `showRawYaml` in Jenkinsfiles [#519](https://github.com/jenkinsci/kubernetes-plugin/pull/519)\n\n1.16.3\n------\n* **testing** Fixed test flakes [#496](https://github.com/jenkinsci/kubernetes-plugin/pull/496) [JENKINS-46076](https://issues.jenkins-ci.org/browse/JENKINS-46076)\n* **testing** Add a test for the `showRawYaml` option [#525](https://github.com/jenkinsci/kubernetes-plugin/pull/525)\n* Simplify logic to return pod status [#526](https://github.com/jenkinsci/kubernetes-plugin/pull/526)\n* **testing** Simplify testing logic by providing a generic method to load and schedule a pipeline definition [#527](https://github.com/jenkinsci/kubernetes-plugin/pull/527)\n* Prevent save of Kubernetes agent through UI [#514](https://github.com/jenkinsci/kubernetes-plugin/pull/514) [JENKINS-57965](https://issues.jenkins-ci.org/browse/JENKINS-57965)\n* Support \"Docker Host Certificates\" credentials to authenticate against Kubernetes [#520](https://github.com/jenkinsci/kubernetes-plugin/pull/520)\n\n1.16.2\n------\n* Fixed an issue where only the last PodTemplateFilter would be applied [#521](https://github.com/jenkinsci/kubernetes-plugin/pull/521)\n\n1.16.1\n------\n* Update parent POM to 3.44 [#505](https://github.com/jenkinsci/kubernetes-plugin/pull/505)\n* Update plugin dependencies\n  * structs 1.19 [#494](https://github.com/jenkinsci/kubernetes-plugin/pull/494)\n  * variant 1.2 [#464](https://github.com/jenkinsci/kubernetes-plugin/pull/464)\n  * cloudbees-folder 6.8 [#471](https://github.com/jenkinsci/kubernetes-plugin/pull/471)\n  * credentials 2.2.0 / ssh-credentials 1.17 [#499](https://github.com/jenkinsci/kubernetes-plugin/pull/499)\n* Making ContainerExecProc periodically send a newline to keep a socket alive [#513](https://github.com/jenkinsci/kubernetes-plugin/pull/513)[JENKINS-58065](https://issues.jenkins-ci.org/browse/JENKINS-58065)\n\n1.16.0\n----------\n* Update kubernetes-client to 4.3.0 [#454](https://github.com/jenkinsci/kubernetes-plugin/pull/454)\n* Do not display secrets in build logs [JENKINS-57893](https://issues.jenkins-ci.org/browse/JENKINS-57893)\n\n1.15.7\n------\n* Fix a thread safety issue when handling dynamic podtemplates [#489](https://github.com/jenkinsci/kubernetes-plugin/pull/489)\n* Explicit inheritance should override implicit inheritance. Declarative k8s template do not inherit from parent pod template by default. [#480](https://github.com/jenkinsci/kubernetes-plugin/pull/480) [JENKINS-57548](https://issues.jenkins-ci.org/browse/JENKINS-57548)\n\n1.15.6\n------\n* Fix databinding of ContainerTemplate DescribableModel.uninstantiate2 works. [#486](https://github.com/jenkinsci/kubernetes-plugin/pull/486) [JENKINS-57116](https://issues.jenkins-ci.org/browse/JENKINS-57827)\n* Update jackson dependency to 2.9.9 to address CVE-2019-12086 [#483](https://github.com/jenkinsci/kubernetes-plugin/pull/483)\n\n1.15.5\n------\n* Fix empty yamls introduced on upgrade to 1.15.1 [#462](https://github.com/jenkinsci/kubernetes-plugin/pull/462) [JENKINS-57116](https://issues.jenkins-ci.org/browse/JENKINS-57116)\n\n1.15.4\n------\n* Wait for some time before closing the Kubernetes expired clients [#418](https://github.com/jenkinsci/kubernetes-plugin/pull/418) [JENKINS-55392](https://issues.jenkins-ci.org/browse/JENKINS-55392)\n* Add `showRawYaml` option to (not) show raw yaml in console [#459](https://github.com/jenkinsci/kubernetes-plugin/pull/459) [JENKINS-56121](https://issues.jenkins-ci.org/browse/JENKINS-56121)\n\n1.15.3\n------\n* Wait for agent to connect on provisioning to avoid multiple Pod launches [#455](https://github.com/jenkinsci/kubernetes-plugin/pull/455) [JENKINS-56347](https://issues.jenkins-ci.org/browse/JENKINS-56347)\n* Always initialize `yamls` field [#460](https://github.com/jenkinsci/kubernetes-plugin/pull/460) [JENKINS-57214](https://issues.jenkins-ci.org/browse/JENKINS-57214)\n\n1.15.2\n------\n* Merge pod templates definitions from yaml, fix issue with missing yaml in UI [#456](https://github.com/jenkinsci/kubernetes-plugin/pull/456) [JENKINS-57112](https://issues.jenkins-ci.org/browse/JENKINS-57112)\n\n1.15.1\n------\n* Merge pod templates definitions from yaml [#449](https://github.com/jenkinsci/kubernetes-plugin/pull/449) [JENKINS-56082](https://issues.jenkins-ci.org/browse/JENKINS-56082)\n\n1.15.0\n------\n* Allow Setting Default Mode In Secret Volumes [#452](https://github.com/jenkinsci/kubernetes-plugin/pull/452)\n* Prevent a wait forever if websocket is not connected [#436](https://github.com/jenkinsci/kubernetes-plugin/pull/436)\n* Don't set build result in Declarative agent blocks [#445](https://github.com/jenkinsci/kubernetes-plugin/pull/445) [JENKINS-56544](https://issues.jenkins-ci.org/browse/JENKINS-56544)\n\n1.14.9\n------\n* Fix `connectTimeout` and `readTimeout` not being persisted [#439](https://github.com/jenkinsci/kubernetes-plugin/pull/439) [#442](https://github.com/jenkinsci/kubernetes-plugin/pull/442) [JENKINS-53532](https://issues.jenkins-ci.org/browse/JENKINS-53532)\n\n1.14.8\n------\n* Do not close Kubernetes client after `containerLog` step [#435](https://github.com/jenkinsci/kubernetes-plugin/pull/435) [JENKINS-55392](https://issues.jenkins-ci.org/browse/JENKINS-55392)\n* Upgrade kubernetes-client to 4.1.3. Pass `exec` buffer size using new method [#431](https://github.com/jenkinsci/kubernetes-plugin/pull/431) [JENKINS-50429](https://issues.jenkins-ci.org/browse/JENKINS-50429)\n\n1.14.7\n------\n* Use a bigger buffer for stdin on kubernetes exec [#427](https://github.com/jenkinsci/kubernetes-plugin/pull/427) [JENKINS-50429](https://issues.jenkins-ci.org/browse/JENKINS-50429)\n* Improve labels and help text for cloud and pod templates cap [#422](https://github.com/jenkinsci/kubernetes-plugin/pull/422)\n\n1.14.6\n------\n* Add a system property to override default Slave Connect Timeout in seconds [#432](https://github.com/jenkinsci/kubernetes-plugin/pull/432)\n* Add build url as default annotation [#433](https://github.com/jenkinsci/kubernetes-plugin/pull/433) [JENKINS-56133](https://issues.jenkins-ci.org/browse/JENKINS-56133)\n* Update kubernetes client to 4.1.2 [#434](https://github.com/jenkinsci/kubernetes-plugin/pull/434) [JENKINS-52593](https://issues.jenkins-ci.org/browse/JENKINS-52593)\n* Use a watcher to monitor pod status while launching the agent [#423](https://github.com/jenkinsci/kubernetes-plugin/pull/423)\n\n1.14.5\n------\n* Expire Kubernetes clients after one day and make it configurable [#429](https://github.com/jenkinsci/kubernetes-plugin/pull/429) [JENKINS-56140](https://issues.jenkins-ci.org/browse/JENKINS-56140)\n* Allow non admin to call `getContainers` and `getPodEvents` returning an empty list [#430](https://github.com/jenkinsci/kubernetes-plugin/pull/430) [JENKINS-56155](https://issues.jenkins-ci.org/browse/JENKINS-56155)\n\n1.14.4\n------\n* Set `nodeUsageMode` to `EXCLUSIVE` as default [#386](https://github.com/jenkinsci/kubernetes-plugin/pull/386)\n* Add `slaveConnectTimeout` and `namespace` to declarative pipeline [#421](https://github.com/jenkinsci/kubernetes-plugin/pull/421) [JENKINS-55960](https://issues.jenkins-ci.org/browse/JENKINS-55960)\n\n1.14.3\n------\n* Use label as pod name when not set [#375](https://github.com/jenkinsci/kubernetes-plugin/pull/375)\n* Upgrade dependencies to latest versions [#417](https://github.com/jenkinsci/kubernetes-plugin/pull/417) [#307](https://github.com/jenkinsci/kubernetes-plugin/pull/307)\n\n1.14.2\n------\n* Require Jenkins 2.138.4 instead of 2.150.1 [#413](https://github.com/jenkinsci/kubernetes-plugin/pull/413)\n* Combine env vars into a single set before writing once in container shell execution [#393](https://github.com/jenkinsci/kubernetes-plugin/pull/393) [JENKINS-50429](https://issues.jenkins-ci.org/browse/JENKINS-50429)\n* Fail faster if a pod enters in error state during provisioning [#414](https://github.com/jenkinsci/kubernetes-plugin/pull/414) \n\n1.14.1\n------\n* Allow setting namespace from Pod yaml [#405](https://github.com/jenkinsci/kubernetes-plugin/pull/405) [JENKINS-51610](https://issues.jenkins-ci.org/browse/JENKINS-51610)\n\n1.14.0\n------\n* Add page to Kubernetes nodes to show pod events [#408](https://github.com/jenkinsci/kubernetes-plugin/pull/408)\n\n1.13.9\n------\n* Require Jenkins 2.150.1 [#411](https://github.com/jenkinsci/kubernetes-plugin/pull/411)\n* Do not wait for pod if it has been deleted or if it has failed [#410](https://github.com/jenkinsci/kubernetes-plugin/pull/410) [#412](https://github.com/jenkinsci/kubernetes-plugin/pull/412)\n\n1.13.8\n------\n* Don't close kubernetes client upon cache removal [#407](https://github.com/jenkinsci/kubernetes-plugin/pull/407) [JENKINS-55138](https://issues.jenkins-ci.org/browse/JENKINS-55138)\n\n1.13.7\n------\n* Add missing field maxRequestsPerHost to copy constructor [#403](https://github.com/jenkinsci/kubernetes-plugin/pull/403)\n* Fix maxRequestsPerHost form validation [#400](https://github.com/jenkinsci/kubernetes-plugin/pull/400)\n\n1.13.6\n------\n* Prevent multiple instances of KubernetesClient that can cause memory leaks with multiple API http connections [#397](https://github.com/jenkinsci/kubernetes-plugin/pull/397) [JENKINS-54770](https://issues.jenkins-ci.org/browse/JENKINS-54770)\n  * Note that this will enforce the limit of connections to the Kubernetes API and you may need to increase the value of *Max connections to Kubernetes API* if you see errors like [`JENKINS-40825`](https://issues.jenkins-ci.org/browse/JENKINS-40825)`: interrupted while waiting for websocket connection`\n\n\n1.13.5\n------\n* Populate jnlp tunnel in the jnlp endpoint to launch agent whether Jenkins is behind load balancer or not [#389](https://github.com/jenkinsci/kubernetes-plugin/pull/389)\n* Combine parent pod template ports with children [#340](https://github.com/jenkinsci/kubernetes-plugin/pull/340) [JENKINS-50932](https://issues.jenkins-ci.org/browse/JENKINS-50932)\n\n1.13.4\n------\n* Allow custom workspace in declarative pipeline [#380](https://github.com/jenkinsci/kubernetes-plugin/pull/380) [JENKINS-53817](https://issues.jenkins-ci.org/browse/JENKINS-53817)\n\n1.13.3\n------\n* Upgrade kubernetes-client to 4.1.0 [#391](https://github.com/jenkinsci/kubernetes-plugin/pull/391) [JENKINS-52593](https://issues.jenkins-ci.org/browse/JENKINS-52593)\n\n1.13.2\n------\n* Pod name is detected as `localhost` in Bluemix IKS [#388](https://github.com/jenkinsci/kubernetes-plugin/pull/388) [JENKINS-53297](https://issues.jenkins-ci.org/browse/JENKINS-53297)\n\n1.13.1\n------\n* Allow adding jenkins job metadata to the pods using the KubernetesComputer extenion point [#383](https://github.com/jenkinsci/kubernetes-plugin/pull/383)\n\n1.13.0\n------\n* Display Pod log for Kubernetes agents in the node view [#367](https://github.com/jenkinsci/kubernetes-plugin/pull/367)\n\n1.12.9\n------\n* Declarative pipeline: stdin/stdout/stderr of a remote process are not redirected. Do not wrap the default `jnlp` container calls in `container` steps [#377](https://github.com/jenkinsci/kubernetes-plugin/pull/377) [JENKINS-53422](https://issues.jenkins-ci.org/browse/JENKINS-53422)\n\n1.12.8\n------\n* Handle null retention policy resulting from direct xml pod template injection (seen during agent termination) [#381](https://github.com/jenkinsci/kubernetes-plugin/pull/381)\n\n1.12.7\n------\n* Fix nested Pod Templates support [#382](https://github.com/jenkinsci/kubernetes-plugin/pull/382) [JENKINS-50196](https://issues.jenkins-ci.org/browse/JENKINS-50196)\n* Fix pod spec display in build logs [#384](https://github.com/jenkinsci/kubernetes-plugin/pull/384)\n\n1.12.6\n------\n\n* Container and instance cap are not honored when requesting lots of slaves [#374](https://github.com/jenkinsci/kubernetes-plugin/pull/374) [JENKINS-53313](https://issues.jenkins-ci.org/browse/JENKINS-53313)\n\n1.12.5\n------\n\n* Check for nulls in older kubernetes versions, fixes some NPEs in Kubernetes 1.5 [#378](https://github.com/jenkinsci/kubernetes-plugin/pull/378) [JENKINS-53370](https://issues.jenkins-ci.org/browse/JENKINS-53370)\n\n1.12.4\n------\n\n* Add volumes from pod template to JNLP container [#371](https://github.com/jenkinsci/kubernetes-plugin/pull/371) [JENKINS-50879](https://issues.jenkins-ci.org/browse/JENKINS-50879)\n* Chinese localization [#368](https://github.com/jenkinsci/kubernetes-plugin/pull/368)[#370](https://github.com/jenkinsci/kubernetes-plugin/pull/370)\n\n1.12.3\n------\n\n* Upgrade Jenkins to 2.121.2 [#365](https://github.com/jenkinsci/kubernetes-plugin/pull/365)\n\n1.12.2\n------\n\n* Using declarative, environment variables like COMMIT_ID, GIT_BRANCH are not populated. Use CheckoutScript to populate environment [#364](https://github.com/jenkinsci/kubernetes-plugin/pull/364) [JENKINS-52623](https://issues.jenkins-ci.org/browse/JENKINS-52623)\n\n1.12.1\n------\n\n* Upgrade kubernetes-client to 4.0.0. Drops support for OpenShift <1.6 [#358](https://github.com/jenkinsci/kubernetes-plugin/pull/358) [JENKINS-53363](https://issues.jenkins-ci.org/browse/JENKINS-53363)\n* Fix defaults for Pod Retention on Pod templates [#363](https://github.com/jenkinsci/kubernetes-plugin/pull/363) [JENKINS-48149](https://issues.jenkins-ci.org/browse/JENKINS-48149)\n\n1.12.0\n------\n\n* Add optional usage restriction for a Kubernetes cloud using folder properties [#282](https://github.com/jenkinsci/kubernetes-plugin/pull/282)\n\n1.11.0\n------\n\n* Add Pod Retention policies to keep pods around on failure [#354](https://github.com/jenkinsci/kubernetes-plugin/pull/354) [JENKINS-48149](https://issues.jenkins-ci.org/browse/JENKINS-48149)\n\n1.10.2\n------\n\n* Global configuration `testConnection` using GET allows stealing credentials + CSRF [SECURITY-1016](https://issues.jenkins-ci.org/browse/SECURITY-1016)\n\n1.10.1\n-------\n\n* Tool Location overwrites are not preserved [#318](https://github.com/jenkinsci/kubernetes-plugin/pull/318) [JENKINS-44285](https://issues.jenkins-ci.org/browse/JENKINS-44285)\n\n1.10.0\n-------\n\n* Add `yamlFile` option for Declarative agent to read yaml definition from a different file [#355](https://github.com/jenkinsci/kubernetes-plugin/pull/355) [JENKINS-52259](https://issues.jenkins-ci.org/browse/JENKINS-52259)\n\n1.9.3\n-----\n\n* Avoid streaming to 2 similar OutputStreams [#356](https://github.com/jenkinsci/kubernetes-plugin/pull/356)\n\n1.9.2\n-----\n\n* Combine all resources declared in requests and limits not just CPU and memory [#350](https://github.com/jenkinsci/kubernetes-plugin/pull/350)\n\n1.9.1\n-----\n\n* Jenkins master in windows changes the file separator of `mountPath` incorrectly [#308](https://github.com/jenkinsci/kubernetes-plugin/pull/308) [JENKINS-47178](https://issues.jenkins-ci.org/browse/JENKINS-47178)\n\n1.9.0\n-----\n\n* Update parent and Jenkins versions [#349](https://github.com/jenkinsci/kubernetes-plugin/pull/349)\n\n1.8.4\n-----\n\n* Fix mountPath error provisioning `mountPath: Required value` [#346](https://github.com/jenkinsci/kubernetes-plugin/pull/346) [JENKINS-50525](https://issues.jenkins-ci.org/browse/JENKINS-50525)\n\n1.8.3\n-----\n\n* Preserve unsupported directives in `PodTemplate` yaml, add explicit support for envFrom\n [#348](https://github.com/jenkinsci/kubernetes-plugin/pull/348)\n\n1.8.2\n-----\n\n* Do not emit empty strings for resource requests/limits\n [#342](https://github.com/jenkinsci/kubernetes-plugin/pull/342)\n\n1.8.1\n-----\n* Get the exit code the correct way. Solves problems with many pipeline steps that rely on tool outputs [#300](https://github.com/jenkinsci/kubernetes-plugin/pull/300) [JENKINS-50392](https://issues.jenkins-ci.org/browse/JENKINS-50392)\n\n1.8.0\n-----\n* Validate label and container names with regex [#332](https://github.com/jenkinsci/kubernetes-plugin/pull/332) [#343](https://github.com/jenkinsci/kubernetes-plugin/pull/343) [JENKINS-51248](https://issues.jenkins-ci.org/browse/JENKINS-51248)\n\n1.7.1\n-----\n* Do not print credentials in build output or logs. Only affects certain pipeline steps like `withDockerRegistry`. `sh` step is not affected [SECURITY-883](https://issues.jenkins-ci.org/browse/SECURITY-883)\n\n1.7.0\n-----\n* Add option to apply caps only on alive pods [#252](https://github.com/jenkinsci/kubernetes-plugin/pull/252)\n* Add idleMinutes to pod template in declarative pipeline [#336](https://github.com/jenkinsci/kubernetes-plugin/pull/336) [JENKINS-51569](https://issues.jenkins-ci.org/browse/JENKINS-51569)\n\n1.6.4\n-----\n* Use Jackson and Apache HttpComponents Client libraries from API plugins [#333](https://github.com/jenkinsci/kubernetes-plugin/pull/333) [JENKINS-51582](https://issues.jenkins-ci.org/browse/JENKINS-51582)\n\n1.6.3\n-----\n* Merge labels from yaml [#326](https://github.com/jenkinsci/kubernetes-plugin/pull/326) [JENKINS-51137](https://issues.jenkins-ci.org/browse/JENKINS-51137)\n* Instance cap reached with preexisting pods due to lack of labels [#325](https://github.com/jenkinsci/kubernetes-plugin/pull/325) [JENKINS-50268](https://issues.jenkins-ci.org/browse/JENKINS-50268)\n\n1.6.2\n-----\n* Transfer any master proxy related envs that the remoting jar uses to the pod templates with `addMasterProxyEnvVars` option [#321](https://github.com/jenkinsci/kubernetes-plugin/pull/321)\n\n1.6.1\n-----\n* Some fields are not inherited from parent template (InheritFrom, InstanceCap, SlaveConnectTimeout, IdleMinutes, ActiveDeadlineSeconds, ServiceAccount, CustomWorkspaceVolumeEnabled) [#319](https://github.com/jenkinsci/kubernetes-plugin/pull/319)\n\n1.6.0\n-----\n* Support multiple containers in declarative pipeline [#306](https://github.com/jenkinsci/kubernetes-plugin/pull/306) [JENKINS-48135](https://issues.jenkins-ci.org/browse/JENKINS-48135)\n* Expose pod configuration via yaml to UI and merge tolerations when inheriting [#311](https://github.com/jenkinsci/kubernetes-plugin/pull/311)\n* Resolve NPE merging yaml when resource requests/limits are not set [#310](https://github.com/jenkinsci/kubernetes-plugin/pull/310)\n* Do not pass arguments to jnlp container [#315](https://github.com/jenkinsci/kubernetes-plugin/pull/315) [JENKINS-50913](https://issues.jenkins-ci.org/browse/JENKINS-50913)\n\n1.5.2\n-----\n* Merge default `jnlp` container options [JENKINS-50533](https://issues.jenkins-ci.org/browse/JENKINS-50533) [#305](https://github.com/jenkinsci/kubernetes-plugin/pull/305)\n\n1.5.1\n-----\n* Fix duplicated volume mounts [JENKINS-50525](https://issues.jenkins-ci.org/browse/JENKINS-50525) [#303](https://github.com/jenkinsci/kubernetes-plugin/pull/303)\n* Use the correct agent namespace in logs [#304](https://github.com/jenkinsci/kubernetes-plugin/pull/304)\n\n1.5\n-----\n* Allow creating Pod templates from yaml. This allows setting all possible fields in Kubernetes API using yaml [JENKINS-50282](https://issues.jenkins-ci.org/browse/JENKINS-50282) [#275](https://github.com/jenkinsci/kubernetes-plugin/pull/275)\n* Print agent specification upon node allocation [#302](https://github.com/jenkinsci/kubernetes-plugin/pull/302)\n\n1.4.1\n-----\n* Env vars using `PATH+SOMETHING` syntax clear the previous env var [JENKINS-50437](https://issues.jenkins-ci.org/browse/JENKINS-50437) [#301](https://github.com/jenkinsci/kubernetes-plugin/pull/301)\n\n1.4\n-----\n* Support passing `kubeconfig` file as credentials using secretFile credentials [JENKINS-49817](https://issues.jenkins-ci.org/browse/JENKINS-49817) [#294](https://github.com/jenkinsci/kubernetes-plugin/pull/294)\n* Allow customization of NodeProvisioner.PlannedNode using extension point [#298](https://github.com/jenkinsci/kubernetes-plugin/pull/298)\n\n1.3.3\n-----\n* Upgrade kubernetes-client to 3.1.10 [#271](https://github.com/jenkinsci/kubernetes-plugin/pull/271)\n* Copy `jenkinsTunnel` in copy constructor [#295](https://github.com/jenkinsci/kubernetes-plugin/pull/295)\n\n1.3.2\n-----\n* Fix ssh-agent execution inside container. envVars on procstarter were discarded [JENKINS-42582](https://issues.jenkins-ci.org/browse/JENKINS-42582) [#291](https://github.com/jenkinsci/kubernetes-plugin/pull/291)\n* Allow specifying a different shell command other than `/bin/sh` [#287](https://github.com/jenkinsci/kubernetes-plugin/pull/287)\n\n1.3.1\n-----\n* Track agents being in provisioning to avoid overprovisioning [JENKINS-47501](https://issues.jenkins-ci.org/browse/JENKINS-47501) [#289](https://github.com/jenkinsci/kubernetes-plugin/pull/289)\n\n1.3\n-----\n* Implement extension points to contribute pod templates and filter them [JENKINS-49594](https://issues.jenkins-ci.org/browse/JENKINS-49594) [#288](https://github.com/jenkinsci/kubernetes-plugin/pull/288)\n\n1.2.1\n-----\n* Don't persist PodTemplateMap and implement onResume in PodTemplateStep. Will prevent potential leaking of dynamic pod templates definitions across restarts [JENKINS-47759](https://issues.jenkins-ci.org/browse/JENKINS-47759) [#285](https://github.com/jenkinsci/kubernetes-plugin/pull/285)\n* Provide injection of run context (build level) environment variables for container steps in declarative pipeline usage [JENKINS-49465](https://issues.jenkins-ci.org/browse/JENKINS-49465) [#285](https://github.com/jenkinsci/kubernetes-plugin/pull/285)\n* Fix global environment variables [JENKINS-47376](https://issues.jenkins-ci.org/browse/JENKINS-47376) [#245](https://github.com/jenkinsci/kubernetes-plugin/pull/245)\n\n1.2\n-----\n* Move PodTemplate -> Pod conversion to PodTemplateBuilder [#276](https://github.com/jenkinsci/kubernetes-plugin/pull/276)\n* Split credentials classes into new plugin [kubernetes-credentials](https://github.com/jenkinsci/kubernetes-credentials-plugin)  [#268](https://github.com/jenkinsci/kubernetes-plugin/pull/268)\n\n1.1.4\n-----\n* Store definition of dynamic templates to a separate configuration than Kubernetes cloud [JENKINS-49166](https://issues.jenkins-ci.org/browse/JENKINS-49166) [#279](https://github.com/jenkinsci/kubernetes-plugin/pull/279)\n  * This can cause some side effects on the order the templates are picked, see\n    * [JENKINS-49366](https://issues.jenkins-ci.org/browse/JENKINS-49366) Nested podTemplate stopped working in 1.1.4\n    * [JENKINS-49313](https://issues.jenkins-ci.org/browse/JENKINS-49313) Incorrect podTemplate deployed starting in 1.1.4\n* Prevent unneeded exec operations [#239](https://github.com/jenkinsci/kubernetes-plugin/pull/239)\n\n1.1.3\n-----\n* Fix UI support of environment variables [JENKINS-47112](https://issues.jenkins-ci.org/browse/JENKINS-47112) [#273](https://github.com/jenkinsci/kubernetes-plugin/pull/273)\n* Missing call to `slave.terminate()` [#256](https://github.com/jenkinsci/kubernetes-plugin/pull/256)\n* Rename slave -> agent [#258](https://github.com/jenkinsci/kubernetes-plugin/pull/258)\n* Add new line when logging the agent in Jenkins [#267](https://github.com/jenkinsci/kubernetes-plugin/pull/267)\n\n1.1.2\n-----\n* Namespace is erroneously autodetected as 'default' [#261](https://github.com/jenkinsci/kubernetes-plugin/pull/261)\n* Do not require 2.89 for installation, revert to 2.32.1 [#263](https://github.com/jenkinsci/kubernetes-plugin/pull/263)\n* IllegalStateException at hudson.XmlFile.replaceIfNotAtTopLevel [JENKINS-45892](https://issues.jenkins-ci.org/browse/JENKINS-45892) [#257](https://github.com/jenkinsci/kubernetes-plugin/pull/257)\n\n1.1.1\n-----\n* Fix agent reconnection after master restart [JENKINS-47476](https://issues.jenkins-ci.org/browse/JENKINS-47476) [#244](https://github.com/jenkinsci/kubernetes-plugin/pull/244)\n* Wait 5s for complete disconnection of agents to avoid stack trace [#248](https://github.com/jenkinsci/kubernetes-plugin/pull/248)\n* If namespace is not provided nor autoconfigured should use `default` [#234](https://github.com/jenkinsci/kubernetes-plugin/pull/234)\n* Kubernetes plugin not using cmd proc variables, affecting `sshagent` step [JENKINS-47225](https://issues.jenkins-ci.org/browse/JENKINS-47225)[#236](https://github.com/jenkinsci/kubernetes-plugin/pull/236)\n* Escape quotes in environment variables [JENKINS-46670](https://issues.jenkins-ci.org/browse/JENKINS-46670)[#218](https://github.com/jenkinsci/kubernetes-plugin/pull/218)\n\n1.1\n-----\n* Only allow tasks after all containers in pod are ready [#230](https://github.com/jenkinsci/kubernetes-plugin/pull/230)\n* Add activeDeadlineSeconds to Pod template [#221](https://github.com/jenkinsci/kubernetes-plugin/pull/221)\n* Default podTemplate slaveConnectTimeout to 100 [#235](https://github.com/jenkinsci/kubernetes-plugin/pull/235)\n* Allow overriding HOME env var and remove duplicated env vars [#224](https://github.com/jenkinsci/kubernetes-plugin/pull/224)\n* Rename jenkinsci/jnlp-slave -> jenkins/jnlp-slave and upgrade to 3.10-1 [#231](https://github.com/jenkinsci/kubernetes-plugin/pull/231)\n* Do not use a tty to prevent nohup.out from being created [JENKINS-46087](https://issues.jenkins-ci.org/browse/JENKINS-46085) [#212](https://github.com/jenkinsci/kubernetes-plugin/pull/222)\n* Pod annotations cannot contain duplicate keys when combining pod templates [#220](https://github.com/jenkinsci/kubernetes-plugin/pull/220)\n* Kubernetes agents not getting deleted in Jenkins after pods are deleted [JENKINS-35246](https://issues.jenkins-ci.org/browse/JENKINS-35246) [#217](https://github.com/jenkinsci/kubernetes-plugin/pull/217)\n* Remove unused JENKINS_JNLP_URL env var [#219](https://github.com/jenkinsci/kubernetes-plugin/pull/219)\n\n1.0\n-----\n\n* `containerLog` step to get the logs of a container running in the agent pod [JENKINS-46085](https://issues.jenkins-ci.org/browse/JENKINS-46085) [#195](https://github.com/jenkinsci/kubernetes-plugin/pull/195)\n* Autoconfigure cloud if kubernetes url is not set [#208](https://github.com/jenkinsci/kubernetes-plugin/pull/208)\n* Change containerCap and instanceCap 0 to mean do not use [JENKINS-45845](https://issues.jenkins-ci.org/browse/JENKINS-45845) [#199](https://github.com/jenkinsci/kubernetes-plugin/pull/199)\n* Add environment variables to container from a secret [JENKINS-39867](https://issues.jenkins-ci.org/browse/JENKINS-39867) [#162](https://github.com/jenkinsci/kubernetes-plugin/pull/162)\n * Deprecate `containerEnvVar` for `envVar` and added `secretEnvVar`\n* Enable setting slaveConnectTimeout in podTemplate defined in pipeline [#213](https://github.com/jenkinsci/kubernetes-plugin/pull/213)\n* Read Jenkins URL from cloud configuration or `KUBERNETES_JENKINS_URL` env var [#216](https://github.com/jenkinsci/kubernetes-plugin/pull/216)\n* Make `withEnv` work inside a container [JENKINS-46278](https://issues.jenkins-ci.org/browse/JENKINS-46278) [#204](https://github.com/jenkinsci/kubernetes-plugin/pull/204)\n* Close resource leak, fix broken pipe error. Make number of concurrent requests to Kubernetes configurable [JENKINS-40825](https://issues.jenkins-ci.org/browse/JENKINS-40825) [#182](https://github.com/jenkinsci/kubernetes-plugin/pull/182)\n* Delete pods in the cloud namespace when pod namespace is not defined [JENKINS-45910](https://issues.jenkins-ci.org/browse/JENKINS-45910) [#192](https://github.com/jenkinsci/kubernetes-plugin/pull/192)\n* Use `Util.replaceMacro` instead of our custom replacement logic. Behavior change: when a var is not defined it is not replaced, ie. `${key1} or ${key2} or ${key3}` -> `value1 or value2 or ${key3}` [#198](https://github.com/jenkinsci/kubernetes-plugin/pull/198)\n* Allow to create non-configurable instances programmatically [#191](https://github.com/jenkinsci/kubernetes-plugin/pull/191)\n* Do not cache kubernetes connection to reflect config changes and credential expiration [JENKINS-39867](https://issues.jenkins-ci.org/browse/JENKINS-39867) [#189](https://github.com/jenkinsci/kubernetes-plugin/pull/189)\n* Inherit podAnnotations when inheriting pod templates [#209](https://github.com/jenkinsci/kubernetes-plugin/pull/209)\n* Remove unneeded plugin dependencies, make pipeline-model-extensions optional [#214](https://github.com/jenkinsci/kubernetes-plugin/pull/214)\n\n0.12\n-----\n\n* Add an experimental Declarative Agent extension for Kubernetes [JENKINS-41758](https://issues.jenkins-ci.org/browse/JENKINS-41758) [#127](https://github.com/jenkinsci/kubernetes-plugin/pull/127)\n* Implement Port mapping [#165](https://github.com/jenkinsci/kubernetes-plugin/pull/165)\n* Support idleMinutes field in pipeline [#154](https://github.com/jenkinsci/kubernetes-plugin/pull/154)\n* Add command liveness probe support [#158](https://github.com/jenkinsci/kubernetes-plugin/pull/158)\n* Add toggle for node usage mode [#158](https://github.com/jenkinsci/kubernetes-plugin/pull/158)\n* Add namespace support on PodTemplate.\n* Make PodTemplate optional within pipeline [JENKINS-42315](https://issues.jenkins-ci.org/browse/JENKINS-42315)\n* Make Slave Jenkins connection timeout configurable [#141](https://github.com/jenkinsci/kubernetes-plugin/pull/141)\n* Fix durable pipeline PID NumberFormatException [JENKINS-42048](https://issues.jenkins-ci.org/browse/JENKINS-42048) [#157](https://github.com/jenkinsci/kubernetes-plugin/pull/157)\n* Don't provision nodes if there are no PodTemplates set to usage mode Normal [#171](https://github.com/jenkinsci/kubernetes-plugin/pull/171)\n* Refactoring add/set methods in PodTemplate [#173](https://github.com/jenkinsci/kubernetes-plugin/pull/173)\n* Delete the build pod after we have finished with the template block [#172](https://github.com/jenkinsci/kubernetes-plugin/pull/172)\n* Default to use the kubernetes.default.svc.cluster.local endpoint\n* Do not print stack trace on ConnectException\n* Upgrade kubernetes client to 2.3.1 [JENKINS-44189](https://issues.jenkins-ci.org/browse/JENKINS-42048)\n* Step namespace should have priority over anything else [#161](https://github.com/jenkinsci/kubernetes-plugin/pull/161)\n* Wait for pod to exist up to 60 seconds before erroring [#155](https://github.com/jenkinsci/kubernetes-plugin/pull/155)\n* Catch IOException on ContainerExecProc#kill\n* Do not print stack trace on connection exception\n* Restore random naming for pipeline managed pod templates.\n* Dir context is not honored by shell step [JENKINS-40925](https://issues.jenkins-ci.org/browse/JENKINS-40925) [#146](https://github.com/jenkinsci/kubernetes-plugin/pull/146)\n* Limit pod name to 63 characters, and change the randomly generated string [#143](https://github.com/jenkinsci/kubernetes-plugin/pull/143)\n* Fix workingDir inheritance error [#136](https://github.com/jenkinsci/kubernetes-plugin/pull/136)\n* Use name instead of label for the nesting stack [#137](https://github.com/jenkinsci/kubernetes-plugin/pull/137)\n* Exception in configure page when 'Kubernetes URL' isn't filled [JENKINS-45282](https://issues.jenkins-ci.org/browse/JENKINS-45282) [#174](https://github.com/jenkinsci/kubernetes-plugin/pull/174)\n* kubectl temporary config file should work where Jenkins project contains spaces [#178](https://github.com/jenkinsci/kubernetes-plugin/pull/178)\n* Thread/connection leak [#177](https://github.com/jenkinsci/kubernetes-plugin/pull/177)\n\n\n0.11\n-----\n\n* Pod Template \"Annotations\" Field [#105](https://github.com/jenkinsci/kubernetes-plugin/pull/105)\n* The workspace volume is now configurable [#114](https://github.com/jenkinsci/kubernetes-plugin/pull/114)\n* Allow the user to configure a pod template that will be used for providing the default values. [#133](https://github.com/jenkinsci/kubernetes-plugin/pull/133)\n* Cleanup environment variable mapping, allow overriding HOME env variable [#128](https://github.com/jenkinsci/kubernetes-plugin/pull/128)\n* When upgrading from <0.9 set the container name to jnlp. To avoid creating an extra container, the one that exists and the new jnlp auto generated [#132](https://github.com/jenkinsci/kubernetes-plugin/pull/132)\n* Make the name field in the pod template the pod name [#134](https://github.com/jenkinsci/kubernetes-plugin/pull/134)\n* [JENKINS-41847] NPE in addProvisionedSlave when label is null [#129](https://github.com/jenkinsci/kubernetes-plugin/pull/129)\n* [JENKINS-41725] NPE in PodTemplateUtils.combine [#130](https://github.com/jenkinsci/kubernetes-plugin/pull/130)\n* [JENKINS-41287] Fix error when job contains spaces [#131](https://github.com/jenkinsci/kubernetes-plugin/pull/131)\n* Remove node if pod startup fails [#122](https://github.com/jenkinsci/kubernetes-plugin/pull/122)\n* Avoid NPE if cloud is deleted or renamed [#118](https://github.com/jenkinsci/kubernetes-plugin/pull/118)\n* Fixing deletion of containers in pod templates, containers property is databound [#113](https://github.com/jenkinsci/kubernetes-plugin/pull/113)\n* Prevent NPE in PodTemplateAction [#112](https://github.com/jenkinsci/kubernetes-plugin/pull/112)\n* [JENKINS-40457] java.lang.ArrayStoreException when a image pull secret is defined [#111](https://github.com/jenkinsci/kubernetes-plugin/pull/111)\n\n0.10\n-----\n\n* **NOTE if you have defined a JNLP container in your Pod definition**, you need to remove it or rename it to `jnlp`, otherwise a new container called `jnlp` will be created. Set \"Arguments to pass to the command\" to `${computer.jnlpmac} ${computer.name}`\n* Fixing checkbox serialization by jelly views [#110](https://github.com/jenkinsci/kubernetes-plugin/pull/110)\n* Do not throw exceptions in the test configuration page [#107](https://github.com/jenkinsci/kubernetes-plugin/pull/107)\n* Upgrade to the latest kubernetes-client version. [#106](https://github.com/jenkinsci/kubernetes-plugin/pull/106)\n* feat: make pipeline support instanceCap field [#102](https://github.com/jenkinsci/kubernetes-plugin/pull/102)\n* Instantiating Kubernetes Client with proper config in Container Steps [#104](https://github.com/jenkinsci/kubernetes-plugin/pull/104)\n* Fix NPE when slaves are read from disk [#103](https://github.com/jenkinsci/kubernetes-plugin/pull/103)\n* [JENKINS-39867] Upgrade fabric8 to 1.4.26 [#101](https://github.com/jenkinsci/kubernetes-plugin/pull/101)\n* The pod watcher now checks readiness of the right pod. [#97](https://github.com/jenkinsci/kubernetes-plugin/pull/97)\n* Fix logic for waitUntilContainerIsReady [#95](https://github.com/jenkinsci/kubernetes-plugin/pull/95)\n* instanceCap is not used in pipeline [#92](https://github.com/jenkinsci/kubernetes-plugin/pull/92)\n* Allow nesting of templates for inheritance. [#94](https://github.com/jenkinsci/kubernetes-plugin/pull/94)\n* Wait until all containers are in ready state before starting the slave [#93](https://github.com/jenkinsci/kubernetes-plugin/pull/93)\n* Adding basic retention for idle slaves, using the idleTimeout setting properly [#91](https://github.com/jenkinsci/kubernetes-plugin/pull/91)\n* Improve the inheritFrom functionality to better cover containers and volumes. [#84](https://github.com/jenkinsci/kubernetes-plugin/pull/84)\n* Fix null pointer exceptions. [#89](https://github.com/jenkinsci/kubernetes-plugin/pull/89)\n* fix PvcVolume jelly templates path [#90](https://github.com/jenkinsci/kubernetes-plugin/pull/90)\n* Added tool installations to the pod template. [#85](https://github.com/jenkinsci/kubernetes-plugin/pull/85)\n* fix configmap volume name [#87](https://github.com/jenkinsci/kubernetes-plugin/pull/87)\n* set the serviceAccount when creating new pods [#86](https://github.com/jenkinsci/kubernetes-plugin/pull/86)\n* Read and connect timeout are now correctly used to configure the client. [#82](https://github.com/jenkinsci/kubernetes-plugin/pull/82)\n* Fix nodeSelector in podTemplate [#83](https://github.com/jenkinsci/kubernetes-plugin/pull/83)\n* Use the client's namespace when deleting a pod (fixes a regression preventing pods to delete). [#81](https://github.com/jenkinsci/kubernetes-plugin/pull/81)\n\n\n0.9\n-----\n\n* Make it possible to define more than one container inside a pod.\n* Add new pod template step which allows defining / overriding a pod template from a pipeline script.\n* Introduce pipeline step that allows choosing one of the containers of the pod and have all 'sh' steps executed there.\n* allow setting dynamic pod volumes in pipelines\n* Add support for persistent volume claims\n* Add support for containerEnvVar's in pipelines\n* [JENKINS-37087] Handle multiple labels per pod correctly\n* [JENKINS-37087] Iterate over all matching templates\n* Fix slave description and labels\n* [JENKINS-38829] Add help text for Kubernetes server certificate\n* #59: Allow blank namespace and reuse whatever is discovered by the client.\n* Ensure instanceCap defaults to unlimited\n* Add Jenkins computer name to the container env vars\n* Split arguments having quotes into account\n* Allow the user to enable pseudo-TTY on container level.\n* Use provided arguments without forcing jnlpmac and name into them. Provide placeholders for jnlpmac and name for the user to use. Fallback container uses as default arguments jnlpmac and name.\n* Split volume classes into their own package (#77)\n\n0.8\n-----\n\n* Add ability to define list of image pull secrets for pod template\n* Fix name printing\n* [JENKINS-36253] Add Annotations to Pod Template\n* Add support for NFS volumes (#63)\n* Change health check url for one that works (Jenkins 2 enables CSRF protection and security by default)\n* Issue #59 Allow autodiscovery of namespace\n* Update kubernetes-client\n* Add support for service account\n\n0.7\n-----\n\n* Set HOME and working dir for build to execute into slave agent remoteFS (#57)\n* JENKINS-34840 Fix NPE when node selector is null\n* Add resouce request and limit to container\n* Generate Cloud Slave node base on pod template name\n* check for null prior to ranging over template.getEnvVars() (#61)\n* Fix StringIndexOutOfBoundsException in slave name\n\n0.6\n-----\n\n* Add support for secrets and empty dir volumes\n* Add support for nodeSelector in pod templates\n* Add support for storing OpenShift OAuth access token as credential\n* Allow client certificate as kubernetes api credentials (JENKINS-30894)\n* Fix ArrayIndexOutOfBoundsException building node selector map when field is empty on the configuration (JENKINS-33649)\n* Add support for env variables\n* Add checkbox for image pull policy\n\n0.5\n-----\n\n* Update fabric8 client for Kubernetes to 2.2.16\n* Use a replication controller to run Jenkins master\n* Generate OpenShift OAuth Bearer token on demand based on user credentials\n* Add support for Container Cleanup Timeout\n* Fix JENKINS-31076 — Proper message if credentials are not defined or not found\n* Add support for hostPath volumes\n\n0.4.1\n-----\n\n* Avoid looooooong slave name\n* Support token based authentication for CLI\n\n0.4\n-----\n\n* Use a Bearer token to connect to API master (typically to connect to OpenShift Origin)\n* Enable a dedicated credential type when jenkins do run inside kubernetes with service account enabled, so cloud can be setup with a fixed configuration, but actual credentials get injected at runtime\n\n0.2\n-----\n\n* Replace obsolete Kubernetes client library with Fabric8\n* Let user configure the kubernetes cluster CA root certificate for self-signed deployment (typically, Google Container Engine)\n* Upgrade Docker-plugin dependency to 0.9.4 - warning: 0.10 is incompatible\n\n0.1\n-----\n\n* Initial implementation\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9052734375,
          "content": "FROM jenkins/jenkins:lts-alpine\n\nARG VERSION=1.15.5\n#RUN /usr/local/bin/install-plugins.sh kubernetes:${VERSION}\n\nRUN jenkins-plugin-cli --plugins kubernetes-client-api \\\n    kubernetes-credentials \\\n    docker-commons \\\n    cloudbees-folder \\\n    workflow-api \\\n    variant \\\n    durable-task \\\n    workflow-durable-task-step \\\n    metrics \\\n    caffeine-api\nCOPY target/kubernetes.hpi /usr/share/jenkins/ref/plugins/kubernetes.hpi\n\n# RUN curl -o /usr/share/jenkins/ref/plugins/kubernetes.hpi \\\n#  http://repo.jenkins-ci.org/snapshots/org/csanchez/jenkins/plugins/kubernetes/0.12/kubernetes-$VERSION.hpi\n\n# remove executors in controller\nCOPY src/main/docker/master-executors.groovy /usr/share/jenkins/ref/init.groovy.d/\n\n# ENV JAVA_OPTS=\"-Djava.util.logging.config.file=/var/jenkins_home/log.properties\"\nENV JAVA_OPTS=\"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -XshowSettings:vm\"\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 3.1181640625,
          "content": "properties([\n    disableConcurrentBuilds(abortPrevious: true),\n    durabilityHint('PERFORMANCE_OPTIMIZED'),\n    buildDiscarder(logRotator(numToKeepStr: '5')),\n])\n\ndef splits\nstage('Determine splits') {\n    node('maven-11') {\n        checkout scm\n        splits = splitTests parallelism: count(2), generateInclusions: true, estimateTestsFromFiles: true\n    }\n}\nstage('Tests') {\n    def branches = [:]\n    branches['failFast'] = true\n\n    for (int i = 0; i < splits.size(); i++) {\n        def num = i\n        def split = splits[num]\n        def index = num + 1\n        branches[\"kind-${index}\"] = {\n            node('docker') {\n                timeout(90) {\n                    checkout scm\n                    try {\n                        writeFile file: (split.includes ? \"$WORKSPACE_TMP/includes.txt\" : \"$WORKSPACE_TMP/excludes.txt\"), text: split.list.join(\"\\n\")\n                        writeFile file: (split.includes ? \"$WORKSPACE_TMP/excludes.txt\" : \"$WORKSPACE_TMP/includes.txt\"), text: ''\n                        sh './kind.sh -Penable-jacoco -Dsurefire.includesFile=\"$WORKSPACE_TMP/includes.txt\" -Dsurefire.excludesFile=\"$WORKSPACE_TMP/excludes.txt\"'\n                        junit 'target/surefire-reports/*.xml'\n                        withEnv(['NUM=' + num]) {\n                            sh '''\n                                for f in $(find . -name jacoco.exec)\n                                do\n                                    mv \"$f\" \"$(echo \"$f\" | sed s/jacoco./jacoco-$NUM./)\"\n                                done\n                            '''\n                        }\n                        if (num == 0) {\n                            stash name: 'classes', includes: '**/target/classes/**'\n                        }\n                        stash name: 'coverage-exec-' + num, allowEmpty: true, includes: '**/target/jacoco*.exec'\n                    } finally {\n                        dir(env.WORKSPACE_TMP) {\n                            if (fileExists('kindlogs/docker-info.txt')) {\n                                archiveArtifacts 'kindlogs/'\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    branches['jdk11'] = {\n        retry(count: 3, conditions: [kubernetesAgent(handleNonKubernetes: true), nonresumable()]) {\n            node('maven-11') {\n                timeout(60) {\n                    checkout scm\n                    sh 'mvn -B -ntp -Dset.changelist -Dmaven.test.failure.ignore clean install'\n                    infra.prepareToPublishIncrementals()\n                    junit 'target/surefire-reports/*.xml'\n                }\n            }\n        }\n    }\n    parallel branches\n    stage('aggregate coverage') {\n        node('maven-17') {\n            checkout scm\n            unstash 'classes'\n            for (int i = 0; i < splits.size(); i++) {\n                unstash 'coverage-exec-' + i\n            }\n            sh 'mvn -B -ntp -P merge-jacoco-reports validate'\n            recordCoverage(tools: [[parser: 'JACOCO', pattern: '**/jacoco/jacoco.xml']], sourceCodeRetention: 'MODIFIED')\n        }\n    }\n}\n// Stage part of the library\ninfra.maybePublishIncrementals()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.7890625,
          "content": "Kubernetes plugin for Jenkins\n=========================\n\n[![kubernetes version](https://img.shields.io/jenkins/plugin/v/kubernetes.svg?label=kubernetes)](https://plugins.jenkins.io/kubernetes)\n[![kubernetes installs](https://img.shields.io/jenkins/plugin/i/kubernetes.svg)](https://plugins.jenkins.io/kubernetes)\n[![kubernetes license](https://img.shields.io/github/license/jenkinsci/kubernetes-plugin)](https://github.com/jenkinsci/kubernetes-plugin/blob/master/LICENSE)\n[![Language grade: Java](https://img.shields.io/lgtm/grade/java/g/jenkinsci/kubernetes-plugin.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/jenkinsci/kubernetes-plugin/context:java)\n\nJenkins plugin to run dynamic agents in a Kubernetes cluster.\n\nBased on the [Scaling Docker with Kubernetes](http://www.infoq.com/articles/scaling-docker-with-kubernetes) article,\nautomates the scaling of Jenkins agents running in Kubernetes.\n\nThe plugin creates a Kubernetes Pod for each agent started, and stops it after each build.\n\nAgents are launched as inbound agents, so it is expected that the container connects automatically to the Jenkins controller.\nFor that some environment variables are automatically injected:\n\n* `JENKINS_URL` : Jenkins web interface url\n* `JENKINS_SECRET` : the secret key for authentication\n* `JENKINS_AGENT_NAME` : the name of the Jenkins agent\n* `JENKINS_NAME` : the name of the Jenkins agent (Deprecated. Only here for backwards compatibility)\n\nTested with [`jenkins/inbound-agent`](https://hub.docker.com/r/jenkins/inbound-agent),\nsee the [Docker image source code](https://github.com/jenkinsci/docker-agent).\n\nIt is not required to run the Jenkins controller inside Kubernetes.\n\n# 📜 Table of Contents\n\n- [Generic setup](#generic-setup)\n- [Usage](#usage)\n- [Configuration reference](#configuration-reference)\n- [Inheritance](#inheritance)\n- [Declarative Pipeline](#declarative-pipeline)\n- [Misc.](#misc.)\n- [Running on OpenShift](#running-on-openshift)\n- [Features controlled using system properties](#features-controlled-using-system-properties)\n- [Windows support](#windows-support)\n- [Constraints](#constraints)\n- [Configuration on minikube](#configuration-on-minikube)\n- [Configuration on Google Container Engine](#configuration-on-google-container-engine)\n- [Troubleshooting 🔨](#troubleshooting)\n- [Building and Testing](#building-and-testing)\n- [Docker image](#docker-image)\n- [Running in Kubernetes](#running-in-kubernetes)\n- [Related Projects](#related-projects)\n\n# Generic Setup\n## Prerequisites\n* A running Kubernetes cluster 1.14 or later. For OpenShift users, this means OpenShift Container Platform 4.x.\n* A Jenkins instance installed\n* The Jenkins Kubernetes plugin installed\n* A ServiceAccount with sufficient privileges ([example](src/main/kubernetes/service-account.yml))\n\n## Configuration\n\nFill in the Kubernetes plugin configuration.\nIn order to do that, you will open the Jenkins UI and navigate to **Manage Jenkins -> Manage Nodes and Clouds -> Configure Clouds -> Add a new cloud -> Kubernetes** and enter the *Kubernetes URL* and *Jenkins URL* appropriately, unless Jenkins is running in Kubernetes in which case the defaults work.\n\nSupported credentials include:\n\n* Username/password\n* Secret File (kubeconfig file)\n* Secret text (Token-based authentication) (OpenShift)\n* Google Service Account from private key (GKE authentication)\n* X.509 Client Certificate\n\nIf you check **WebSocket** then agents will connect over HTTP(S) rather than the Jenkins service TCP port.\nThis is unnecessary when the Jenkins controller runs in the same Kubernetes cluster,\nbut can greatly simplify setup when agents are in an external cluster\nand the Jenkins controller is not directly accessible (for example, it is behind a reverse proxy or a ingress resource).\nSee [JEP-222](https://jenkins.io/jep/222) for more.\n\nTo test this connection is successful you can use the **Test Connection** button to ensure there is\nadequate communication from Jenkins to the Kubernetes cluster, as seen below\n\n![image](images/cloud-configuration.png)\n\n\n### Garbage collection (beta)\n\nIn some exceptional cases, agent pods can be left behind, with no declared Jenkins agent in the controller. They will try to reconnect over and over, until something deletes them.\n\nThe plugin provides a garbage collection mechanism to clean up these pods. As it has been introduced recently,\nand generates extra load on the Kubernetes API server, it is disabled by default.\n\nFeel free to enable it and provide feedback about this functionality.\n\n![image](images/garbage-collection.png)\n\n## Static pod templates\n\nIn addition to that, in the **Kubernetes Pod Template** section, we need to configure the image that will be used to \nspin up the agent pod. The Jenkins agent runs by default in a container named `jnlp` (historical name, kept for backward compatibility).\n\nYou may use it, use a different agent container name and/or provide your own container image.\n\nTo avoid drift between the Jenkins controller and your agent, we recommend *not* to include the agent JAR in your image, but instead use the *Inject Jenkins agent in agent container* checkbox.\n\nThe provided container image must have a JRE installed that is compatible with the Java version required by the Jenkins controller.\n\nIn the ‘Kubernetes Pod Template’ section you need to specify the following (the rest of the configuration is up to you):\nKubernetes Pod Template Name - can be any and will be shown as a prefix for unique generated agent’ names, which will \nbe run automatically during builds\nDocker image - the docker image name that will be used as a reference to spin up a new Jenkins agent, as seen below\n\n![image](images/pod-template-configuration.png)\n\n> **Note:** If your Jenkins controller is outside the cluster and uses a self-signed HTTPS certificate,\n>   you will need some [additional configuration](#using-websockets-with-a-jenkins-master-with-self-signed-https-certificate).\n\n### Restricting what jobs can use your configured cloud\n\nClouds can be configured to only allow certain jobs to use them.\n\nTo enable this, in your cloud's advanced configuration check the\n`Restrict pipeline support to authorized folders` box. For a job to then\nuse this cloud configuration you will need to add it in the jobs folder's configuration.\n\n# Usage\n## Overview\n\nThe Kubernetes plugin allocates Jenkins agents in Kubernetes pods.\n\nWithin these pods, there is always one special container that is running the Jenkins agent.\n\nIts name defaults to `jnlp`, but you can override the name with one of your choosing in pod template configuration.\n\nOther containers can run arbitrary processes of your choosing, and it is possible to run commands dynamically in any container in the agent pod using the `container` step (pipeline only). \n\n## Using a label\n\nPod templates defined using the user interface declare a label. When a freestyle job or a pipeline job using\n`node('some-label')` uses a label declared by a pod template, the Kubernetes Cloud allocates a new pod to run the\nJenkins agent.\n\nIt should be noted that the main reason to use the global pod template definition is to migrate a huge corpus of\nexisting projects (including freestyle) to run on Kubernetes without changing job definitions.\nNew users setting up new Kubernetes builds should use the `podTemplate` step as shown in the example snippets\n[here](examples).\n\n## Using the pipeline step\n\nThe `podTemplate` step defines an ephemeral pod template. It is created while the pipeline execution is within the\n`podTemplate` block. It is immediately deleted afterwards. Such pod templates are not intended to be shared with other\nbuilds or projects in the Jenkins instance.\n\nThe following idiom creates a pod template with a generated unique label (available as `POD_LABEL`) and runs commands inside it.\n\n```groovy\npodTemplate {\n    node(POD_LABEL) {\n        // pipeline steps...\n    }\n}\n```\n\nCommands will be executed by default in the designated agent container, where the Jenkins agent is running.\n\nThis will run in the agent container:\n```groovy\npodTemplate {\n    node(POD_LABEL) {\n        stage('Run shell') {\n            sh 'echo hello world'\n        }\n    }\n}\n```\n\nFind more examples in the [examples dir](examples).\n\nThe default agent image used can be customized by adding it to the template\n\n```groovy\ncontainerTemplate(name: 'jnlp', image: 'jenkins/inbound-agent', args: '${computer.jnlpmac} ${computer.name}'),\n```\n\nor with the yaml syntax. Pretty much any field from the [pod model](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) can be specified through the yaml syntax.\n\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: jnlp\n    image: 'jenkins/inbound-agent'\n    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n```\n\n### Multiple containers support\n\nMultiple containers can be defined for the agent pod, with shared resources, like mounts. Ports in each container can\nbe accessed as in any Kubernetes pod, by using `localhost`.\n\nOne container must run the Jenkins agent. If unspecified, a container named `jnlp` will be created with the inbound-agent image.\nThe Jenkins agent requires a JRE to run, so you can avoid the extra container by providing a name using the `agentContainer`.\nTo get the Jenkins agent injected, you will also need to set `agentInjection` to `true`, and leave the command and argument fields empty for this container.\nThe container specified by `agentContainer` will be the one where shell steps (or any other step running remote commands on the agent) will run on.\n\nTo execute commands in another container part of the pod (different from the one running the Jenkins agent), you can use the `container` step.\n\n**Note**\n---\nDue to implementation constraints, there can be issues when executing commands in different containers if they run using different uids.\nIt is recommended to use the same uid across the different containers part of the same pod to avoid any issue.\n---\n\n```groovy\npodTemplate(\n  agentContainer: 'maven',\n  agentInjection: true,\n  containers: [\n    containerTemplate(name: 'maven', image: 'maven:3.9.9-eclipse-temurin-17'),\n    containerTemplate(name: 'golang', image: 'golang:1.16.5', command: 'sleep', args: '99d')\n  ]) {\n\n    node(POD_LABEL) {\n        stage('Get a Maven project') {\n            git 'https://github.com/jenkinsci/kubernetes-plugin.git'\n            container('maven') {\n                stage('Build a Maven project') {\n                    sh 'mvn -B -ntp clean install'\n                }\n            }\n        }\n\n        stage('Get a Golang project') {\n            git url: 'https://github.com/hashicorp/terraform.git', branch: 'main'\n            container('golang') {\n                stage('Build a Go project') {\n                    sh '''\n                    mkdir -p /go/src/github.com/hashicorp\n                    ln -s `pwd` /go/src/github.com/hashicorp/terraform\n                    cd /go/src/github.com/hashicorp/terraform && make\n                    '''\n                }\n            }\n        }\n\n    }\n}\n```\n\nor\n\n```groovy\npodTemplate(\n  agentContainer: 'maven',\n  agentInjection: true,\n  yaml: '''\n    apiVersion: v1\n    kind: Pod\n    spec:\n      containers:\n      - name: maven\n        image: maven:3.9.9-eclipse-temurin-17\n      - name: golang\n        image: golang:1.16.5\n        command:\n        - sleep\n        args:\n        - 99d\n''') {\n  node(POD_LABEL) {\n    stage('Get a Maven project') {\n      git 'https://github.com/jenkinsci/kubernetes-plugin.git'\n      container('maven') {\n        stage('Build a Maven project') {\n          sh 'mvn -B -ntp clean install'\n        }\n      }\n    }\n\n    stage('Get a Golang project') {\n      git url: 'https://github.com/hashicorp/terraform-provider-google.git', branch: 'main'\n      container('golang') {\n        stage('Build a Go project') {\n          sh '''\n            mkdir -p /go/src/github.com/hashicorp\n            ln -s `pwd` /go/src/github.com/hashicorp/terraform\n            cd /go/src/github.com/hashicorp/terraform && make\n          '''\n        }\n      }\n    }\n  }\n}\n```\n\n#### `POD_CONTAINER` variable\n\nThe variable `POD_CONTAINER` contains the name of the container in the current context.\nIt is defined only within a `container` block.\n\n```groovy\npodTemplate(containers: […]) {\n  node(POD_LABEL) {\n    stage('Run shell') {\n      container('mycontainer') {\n        sh \"echo hello from $POD_CONTAINER\" // displays 'hello from mycontainer'\n      }\n    }\n  }\n}\n```\n\n### Retrying after infrastructure outages\n\nYou can use the `retry` step to automatically try the whole build stage again with a fresh pod in case of fatal infrastructure problems.\n(For example: cluster backup & restore; node pool used for agents drained and upgraded.)\n\n```groovy\npodTemplate(…) {\n  retry(count: 2, conditions: [kubernetesAgent(), nonresumable()]) {\n    node(POD_LABEL) {\n      sh 'your-build-process'\n    }\n  }\n}\n```\n\nwill rerun the whole `node` block (using the same pod definition) in case the first attempt fails for a qualifying reason traceable to loss of the pod\n(_not_ routine problems such as compilation errors or `OutOfMemoryError`).\n\nFor Declarative Pipeline, just add the `retries` option, as shown below.\n\n# Configuration reference\n## Pod template\n\nPod templates are used to create agents. They can be either configured via the user interface, or in a pipeline, using\nthe `podTemplate` step.\nEither way it provides access to the following fields:\n\n* **cloud** The name of the cloud as defined in Jenkins settings. Defaults to `kubernetes`\n* **name** The name of the pod. This is only used for inheritance.\n* **namespace** The namespace of the pod.\n* **label** The node label. This is how the pod template can be referred to when asking for an agent through the `node` step. In a pipeline, it is recommended to omit this field and rely on the generated label that can be referred to using the `POD_LABEL` variable defined within the `podTemplate` block.\n* **yaml** [yaml representation of the Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/), to allow setting any values not supported as fields\n* **yamlMergeStrategy** `merge()` or `override()`. Controls whether the yaml definition overrides or is merged with the yaml definition inherited from pod templates declared with `inheritFrom`. Defaults to `override()` (for backward compatibility reasons).\n* **containers** The container templates part of the pod *(see below for details)*.\n* **serviceAccount** The service account of the pod.\n* **nodeSelector** The node selector of the pod.\n* **nodeUsageMode** Either `NORMAL` or `EXCLUSIVE`, this controls whether Jenkins only schedules jobs with label expressions matching or use the node as much as possible.\n* **volumes** Volumes that are defined for the pod and are mounted by **ALL** containers.\n  * `configMapVolume` : a read only volume that is mounted from a ConfigMap.\n  * `dynamicPVC()` : a persistent volume claim managed dynamically. It is deleted at the same time as the pod.\n  * `emptyDirVolume` (default): an empty dir allocated on the host machine\n  * `hostPathVolume()` : a host path volume\n  * `nfsVolume()` : a nfs volume\n  * `persistentVolumeClaim()` : an existing persistent volume claim by name.\n  * `secretVolume` : a read only volume that is mounted from a Kubernetes secret.\n* **envVars** Environment variables that are applied to **ALL** containers.\n    * **envVar** An environment variable whose value is defined inline.\n    * **secretEnvVar** An environment variable whose value is derived from a Kubernetes secret.\n* **imagePullSecrets** List of pull secret names, to [pull images from a private Docker registry](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).\n* **annotations** Annotations to apply to the pod.\n* **inheritFrom** List of one or more pod templates to inherit from *(more details below)*.\n* **slaveConnectTimeout** Timeout in seconds for an agent to be online *(more details below)*.\n* **podRetention** Controls the behavior of keeping agent pods. Can be 'never()', 'onFailure()', 'always()', or 'default()' - if empty will default to deleting the pod after `activeDeadlineSeconds` has passed.\n* **activeDeadlineSeconds** If `podRetention` is set to `never()` or `onFailure()`, the pod is deleted after this deadline is passed.\n* **idleMinutes** Allows the pod to remain active for reuse until the configured number of minutes has passed since the last step was executed on it.\n* **showRawYaml** Enable or disable the output of the raw pod manifest. Defaults to `true`\n* **runAsUser** The user ID to run all containers in the pod as.\n* **runAsGroup** The group ID to run all containers in the pod as. \n* **hostNetwork** Use the hosts network.\n* **workspaceVolume** The type of volume to use for the workspace.\n  * `dynamicPVC()` : a persistent volume claim managed dynamically. It is deleted at the same time as the pod.\n  * `emptyDirWorkspaceVolume` (default): an empty dir allocated on the host machine\n  * `hostPathWorkspaceVolume()` : a host path volume\n  * `nfsWorkspaceVolume()` : a nfs volume\n  * `persistentVolumeClaimWorkspaceVolume()` : an existing persistent volume claim by name.\n\n## Container template\n\nContainer templates are part of pod. They can be configured via the user interface or in a pipeline and allow you to set the following fields:\n\n* **name** The name of the container.\n* **image** The image of the container.\n* **envVars** Environment variables that are applied to the container **(supplementing and overriding env vars that are set on pod level)**.\n    * **envVar** An environment variable whose value is defined inline.\n    * **secretEnvVar** An environment variable whose value is derived from a Kubernetes secret.\n* **command** The command the container will execute. Will overwrite the Docker entrypoint. A typical value is `sleep`.\n* **args** The arguments passed to the command. A typical value is `99999999`.\n* **ttyEnabled** Flag to mark that tty should be enabled.\n* **livenessProbe** Parameters to be added to a exec liveness probe in the container (does not support httpGet liveness probes)\n* **ports** Expose ports on the container.\n* **alwaysPullImage** The container will pull the image upon starting.\n* **runAsUser** The user ID to run the container as.\n* **runAsGroup** The group ID to run the container as.\n\n#### Specifying a different default agent connection timeout\n\nBy default, the agent connection timeout is set to 1000 seconds. It can be customized using a system property. Please refer to the section below.\n\n#### Using yaml to define Pod Templates\n\nIn order to support any possible value in Kubernetes `Pod` object, we can pass a yaml snippet that will be used as a base\nfor the template. If any other properties are set outside the YAML, they will take precedence.\n\n```groovy\npodTemplate(yaml: '''\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      labels: \n        some-label: some-label-value\n    spec:\n      containers:\n      - name: busybox\n        image: busybox\n        command:\n        - sleep\n        args:\n        - 99d\n    ''') {\n    node(POD_LABEL) {\n      container('busybox') {\n        echo POD_CONTAINER // displays 'busybox'\n        sh 'hostname'\n      }\n    }\n}\n```\n\nYou can use [`readFile`](https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#readfile-read-file-from-workspace) or [`readTrusted`](https://jenkins.io/doc/pipeline/steps/coding-webhook/#readtrusted-read-trusted-file-from-scm) steps to load the yaml from a file.\nAlso note that in declarative pipelines the `yamlFile` can be used (see this [example](examples/declarative_from_yaml_file)).\n\n##### Example\n\n`pod.yaml`\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: maven\n    image: maven:3.9.9-eclipse-temurin-17\n    command:\n    - sleep\n    args:\n    - 99d\n  - name: golang\n    image: golang:1.16.5\n    command:\n    - sleep\n    args:\n    - 99d\n```\n\n`Jenkinsfile`\n```groovy\npodTemplate(yaml: readTrusted('pod.yaml')) {\n  node(POD_LABEL) {\n    // ...\n  }\n}\n```\n\n### Liveness Probe Usage\n```groovy\ncontainerTemplate(name: 'busybox', image: 'busybox', command: 'sleep', args: '99d',\n                  livenessProbe: containerLivenessProbe(execArgs: 'some --command', initialDelaySeconds: 30, timeoutSeconds: 1, failureThreshold: 3, periodSeconds: 10, successThreshold: 1)\n)\n```\nSee [Defining a liveness command](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#defining-a-liveness-command) for more details.\n\n# Inheritance\n\n## Overview\n\nA pod template may or may not inherit from an existing template.\n\nDepending on fields, the inheritance behaviour can vary. For simple values (strings), the child template will override the parent template. However for complex values (lists, maps), the child template will merge with the parent template.\n\n* **yaml** is merged according to the value of `yamlMergeStrategy` specified in the child pod template.\n* **Service account** and **Node selector** when are overridden completely substitute any possible value found on the 'parent'.\n* **Container templates** that are added to the podTemplate, that has a matching containerTemplate (a container template\nwith the same name) in the 'parent' template, will inherit the configuration of the parent containerTemplate.\nIf no matching container template is found, the template is added as is.\n* **Volume** inheritance works exactly as **Container templates**.\n* **Image Pull Secrets** are combined (all secrets defined both on 'parent' and 'current' template are used).\n\nIn the example below, we will inherit from a pod template we created previously, and will just override the version of\n`maven` so that it uses Java 21 instead:\n\n![image](images/mypod-1-general.png)\n![image](images/mypod-2-golang.png)\n![image](images/mypod-3-maven.png)\n\n```groovy\npodTemplate(inheritFrom: 'mypod', containers: [\n    containerTemplate(name: 'maven', image: 'maven:3.9.9-eclipse-temurin-21')\n  ]) {\n  node(POD_LABEL) {\n    …\n  }\n}\n```\n\nOr in declarative pipeline\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      inheritFrom 'mypod'\n      yaml '''\n      spec:\n        containers:\n        - name: maven\n          image: maven:3.9.9-eclipse-temurin-21\n'''\n      …\n    }\n  }\n  stages {\n    …\n  }\n}\n```\n\nNote that we only need to specify the things that are different. So, `command` and `arguments` are not specified, as\nthey are inherited.\nAlso, the `golang` container will be added as defined in the 'parent' template.\n\n## Multiple Pod template inheritance\n\nField `inheritFrom` may refer a single pod template or multiple separated by space. In the later case each template will\nbe processed in the order they appear in the list *(later items overriding earlier ones)*.\nIn any case if the referenced template is not found it will be ignored.\n\n\n## Nesting Pod templates\n\nField `inheritFrom` provides an easy way to compose pod templates that have been pre-configured. In many cases it would\nbe useful to define and compose pod templates directly in the pipeline using groovy.\nThis is made possible via nesting. You can nest multiple pod templates together in order to compose a single one.\n\nThe example below composes two different pod templates in order to create one with maven and docker capabilities.\n\n```groovy\npodTemplate(containers: [containerTemplate(image: 'docker', name: 'docker', command: 'sleep', args: '99d')]) {\n    podTemplate(containers: [containerTemplate(image: 'maven', name: 'maven', command: 'sleep', args: '99d')]) {\n      node(POD_LABEL) { // gets a pod with both docker and maven\n        …\n      }\n    }\n}\n```\n\nThis feature is extra useful, pipeline library developers as it allows you to wrap pod templates into functions and let\nusers nest those functions according to their needs.\n\nFor example one could create functions for their podTemplates and import them for use.\nSay here's our file `src/com/foo/utils/PodTemplates.groovy`:\n```groovy\npackage com.foo.utils\n\npublic void dockerTemplate(body) {\n  podTemplate(\n        containers: [containerTemplate(name: 'docker', image: 'docker', command: 'sleep', args: '99d')],\n        volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]) {\n    body.call()\n}\n}\n\npublic void mavenTemplate(body) {\n  podTemplate(\n        containers: [containerTemplate(name: 'maven', image: 'maven', command: 'sleep', args: '99d')],\n        volumes: [secretVolume(secretName: 'maven-settings', mountPath: '/root/.m2'),\n                  persistentVolumeClaim(claimName: 'maven-local-repo', mountPath: '/root/.m2repo')]) {\n    body.call()\n}\n}\n\nreturn this\n```\n\nThen consumers of the library could just express the need for a maven pod with docker capabilities by combining the two,\nhowever once again, you will need to express the specific container you wish to execute commands in.\nYou can **NOT** omit the `node` statement.\n\nNote that `POD_LABEL` will be the innermost generated label to get a node which has all the outer pods available on the\nnode, as shown in this example:\n\n```groovy\nimport com.foo.utils.PodTemplates\n\npodTemplates = new PodTemplates()\n\npodTemplates.dockerTemplate {\n  podTemplates.mavenTemplate {\n    node(POD_LABEL) {\n      container('docker') {\n        sh \"echo hello from $POD_CONTAINER\" // displays 'hello from docker'\n      }\n      container('maven') {\n        sh \"echo hello from $POD_CONTAINER\" // displays 'hello from maven'\n      }\n     }\n  }\n}\n```\n\nIn scripted pipelines, there are cases where this implicit inheritance via nested declaration is not wanted or another\nexplicit inheritance is preferred.\nIn this case, use `inheritFrom ''` to remove any inheritance, or `inheritFrom 'otherParent'` to override it.\n\n# Declarative Pipeline\n\nDeclarative agents can be defined from yaml\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      yaml '''\n        apiVersion: v1\n        kind: Pod\n        metadata:\n          labels:\n            some-label: some-label-value\n        spec:\n          containers:\n          - name: maven\n            image: maven:3.9.9-eclipse-temurin-17\n            command:\n            - cat\n            tty: true\n          - name: busybox\n            image: busybox\n            command:\n            - cat\n            tty: true\n        '''\n      retries 2\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n        container('busybox') {\n          sh '/bin/busybox'\n        }\n      }\n    }\n  }\n}\n```\n\nor using `yamlFile` to keep the pod template in a separate `KubernetesPod.yaml` file\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      yamlFile 'KubernetesPod.yaml'\n      retries 2\n    }\n  }\n  stages {\n    …\n  }\n}\n```\n\nNote that it was previously possible to define `containerTemplate` but that has been deprecated in favor of the yaml format.\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      //cloud 'kubernetes'\n      containerTemplate {\n        name 'maven'\n        image 'maven:3.9.9-eclipse-temurin-17'\n        command 'sleep'\n        args '99d'\n      }\n    }\n  }\n  stages {\n    …\n  }\n}\n```\n\nRun steps within a container by default. Steps will be nested within an implicit `container(name) {...}` block instead\nof being executed in the agent container.\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      defaultContainer 'maven'\n      yamlFile 'KubernetesPod.yaml'\n    }\n  }\n\n  stages {\n    stage('Run maven') {\n      steps {\n        sh 'mvn -version'\n      }\n    }\n  }\n}\n```\n\nRun the Pipeline or individual stage within a custom workspace - not required unless explicitly stated.\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      customWorkspace 'some/other/path'\n      defaultContainer 'maven'\n      yamlFile 'KubernetesPod.yaml'\n    }\n  }\n\n  stages {\n    stage('Run maven') {\n      steps {\n        sh 'mvn -version'\n        sh \"echo Workspace dir is ${pwd()}\"\n      }\n    }\n  }\n}\n```\n\n## Default inheritance\nUnlike scripted k8s template, declarative templates do not inherit from parent template.\nSince the agents declared at stage level can override a global agent, implicit inheritance was leading to confusion.\n\nYou need to explicitly declare the inheritance if necessary using the field `inheritFrom`.\n\nIn the following example, `nested-pod` will only contain the `maven` container.\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      yaml '''\n        spec:\n        containers:\n        - name: golang\n            image: golang:1.16.5\n            command:\n            - sleep\n            args:\n            - 99d\n        '''\n    }\n  }\n  stages {\n    stage('Run maven') {\n        agent {\n            kubernetes {\n                yaml '''\n                    spec:\n                    containers:\n                    - name: maven\n                      image: maven:3.9.9-eclipse-temurin-17\n                      command:\n                      - sleep\n                      args:\n                      - 99d\n                    '''\n            }\n        }\n      steps {\n        …\n      }\n    }\n  }\n}\n\n```\n\n# Misc.\n\n## Accessing container logs from the pipeline\n\nIf you use the `containerTemplate` to run some service in the background\n(e.g. a database for your integration tests), you might want to access its log from the pipeline.\nThis can be done with the `containerLog` step, which prints the log of the\nrequested container to the build log.\n\n#### Required Parameters\n* **name** the name of the container to get logs from, as defined in `podTemplate`. Parameter name\ncan be omitted in simple usage:\n\n```groovy\ncontainerLog 'mongodb'\n```\n\n#### Optional Parameters\n* **returnLog** return the log instead of printing it to the build log (default: `false`)\n* **tailingLines** only return the last n lines of the log (optional)\n* **sinceSeconds** only return the last n seconds of the log (optional)\n* **limitBytes** limit output to n bytes (from the beginning of the log, not exact).\n\nAlso see the online help and [examples/containerLog.groovy](examples/containerLog.groovy).\n\n# Features controlled using system properties\n\nPlease read [Features controlled by system properties](https://www.jenkins.io/doc/book/managing/system-properties/) page to know how to set up system properties within Jenkins.\n\n* `KUBERNETES_JENKINS_URL` : Jenkins URL to be used by agents. This is meant to be used for OEM integration.\n* `io.jenkins.plugins.kubernetes.disableNoDelayProvisioning` (since 1.19.1) Whether to disable the no-delay provisioning strategy the plugin uses (defaults to `false`).\n* `io.jenkins.plugins.kubernetes.NoDelayProvisionerStrategy.disableCloudShuffle` Whether to disable the shuffling of clouds. When true clouds will be searched in order they are defined (defaults to `false`).\n* `jenkins.host.address` : (for unit tests) controls the host agents should use to contact Jenkins\n* `org.csanchez.jenkins.plugins.kubernetes.PodTemplate.connectionTimeout` : The time in seconds to wait before considering the pod scheduling has failed (defaults to `1000`)\n* `org.csanchez.jenkins.plugins.kubernetes.pipeline.ContainerExecDecorator.stdinBufferSize` : stdin buffer size in bytes for commands sent to Kubernetes exec api. A low value will cause slowness in commands executed. A higher value will consume more memory (defaults to `16*1024`)\n* `org.csanchez.jenkins.plugins.kubernetes.pipeline.ContainerExecDecorator.websocketConnectionTimeout` : Time to wait for the websocket used by `container` step to connect (defaults to `30`)\n\n# Running on OpenShift\n\n## Random UID problem\n\nOpenShift runs containers using a _random_ UID that is overriding what is specified in Docker images.\nFor this reason, you may end up with the following warning in your build\n\n```\n[WARNING] HOME is set to / in the agent container. You may encounter troubles when using tools or ssh client. This usually happens if the uid doesnt have any entry in /etc/passwd. Please add a user to your Dockerfile or set the HOME environment variable to a valid directory in the pod template definition.\n```\n\nAt the moment the jenkinsci agent image is not built for OpenShift and will issue this warning.\n\nThis issue can be circumvented in various ways:\n* build a docker image for OpenShift in order to behave when running using an arbitrary uid.\n* override HOME environment variable in the pod spec to use `/home/jenkins` and mount a volume to `/home/jenkins` to ensure the user running the container can write to it\n\nSee this [example](examples/openshift-home-yaml.groovy) configuration.\n\n## Running with OpenShift 3\n\nOpenShift 3 is based on an older version of Kubernetes, which is not anymore directly supported since Kubernetes plugin version 1.26.0.\n\nTo get agents working for Openshift 3, add this `Node Selector` to your Pod Templates:\n```\nbeta.kubernetes.io/os=linux\n```\n\n# Windows support\n\nYou can run pods on Windows if your cluster has Windows nodes.\nSee the [example](src/main/resources/org/csanchez/jenkins/plugins/kubernetes/pipeline/samples/windows.groovy).\n\n# Configuration on minikube\n\nCreate and start [minikube](https://github.com/kubernetes/minikube)\n\nThe client certificate needs to be converted to PKCS, will need a password\n\n    openssl pkcs12 -export -out ~/.minikube/minikube.pfx -inkey ~/.minikube/apiserver.key -in ~/.minikube/apiserver.crt -certfile ~/.minikube/ca.crt -passout pass:secret\n\nValidate that the certificates work\n\n    curl --cacert ~/.minikube/ca.crt --cert ~/.minikube/minikube.pfx:secret --cert-type P12 https://$(minikube ip):8443\n\nAdd a Jenkins credential of type certificate, upload it from `~/.minikube/minikube.pfx`, password `secret`\n\nFill *Kubernetes server certificate key* with the contents of `~/.minikube/ca.crt`\n\n\n# Configuration on Google Container Engine\n\nCreate a cluster\n\n    gcloud container clusters create jenkins --num-nodes 1 --machine-type g1-small\n\nand note the admin password and server certificate.\n\nOr use Google Developer Console to create a Container Engine cluster, then run\n\n    gcloud container clusters get-credentials jenkins\n    kubectl config view --raw\n\nthe last command will output kubernetes cluster configuration including API server URL, admin password and root certificate\n\n\n# Troubleshooting\n\nFirst watch if the Jenkins agent pods are started.\nMake sure you are in the correct cluster and namespace.\n\n    kubectl get -a pods --watch\n\nIf they are in a different state than `Running`, use `describe` to get the events\n\n    kubectl describe pods/my-jenkins-agent\n\nIf they are `Running`, use `logs` to get the log output\n\n    kubectl logs -f pods/my-jenkins-agent jnlp\n\nIf pods are not started or for any other error, check the logs on the controller side.\n\nFor more detail, configure a new [Jenkins log recorder](https://wiki.jenkins-ci.org/display/JENKINS/Logging) for\n`org.csanchez.jenkins.plugins.kubernetes` at `ALL` level.\n\nTo inspect the json messages sent back and forth to the Kubernetes API server you can configure\na new [Jenkins log recorder](https://wiki.jenkins-ci.org/display/JENKINS/Logging) for `okhttp3`\nat `DEBUG` level.\n\n## Deleting pods in bad state\n\n    kubectl get pods -o name --selector=jenkins=slave --all-namespaces  | xargs -I {} kubectl delete {}\n\n## Pipeline `sh` step hangs when multiple containers are used\nTo debug this you need to set `-Dorg.jenkinsci.plugins.durabletask.BourneShellScript.LAUNCH_DIAGNOSTICS=true` system property\nand then restart the pipeline. Most likely in the console log you will see the following:\n```console\nsh: can't create /home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-log.txt: Permission denied\nsh: can't create /home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-result.txt.tmp: Permission denied\nmv: can't rename '/home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-result.txt.tmp': No such file or directory\ntouch: /home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-log.txt: Permission denied\ntouch: /home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-log.txt: Permission denied\ntouch: /home/jenkins/agent/workspace/thejob@tmp/durable-e0b7cd27/jenkins-log.txt: Permission denied\n```\nUsually this happens when UID of the user in agent container differs from the one in another container(s). \nAll containers you use should have the same UID of the user, also this can be achieved by setting `securityContext`:\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  securityContext:\n    runAsUser: 1000 # default UID of jenkins user in agent image\n  containers:\n  - name: maven\n    image: maven:3.9.9-eclipse-temurin-17\n    command:\n    - cat\n    tty: true\n```\n\n## Using WebSockets with a Jenkins controller with self-signed HTTPS certificate\n\nUsing WebSockets is the easiest and recommended way to establish the connection between agents and a Jenkins controller running outside the cluster.\nHowever, if your Jenkins controller has HTTPS configured with self-signed certificate, you'll need to make sure the agent container trusts the CA.\nTo do that, you can extend the `jenkins/inbound-agent` image and add your certificate as follows:\n\n```Dockerfile\nFROM jenkins/inbound-agent\n\nUSER root\n\nADD cert.pem /tmp/cert.pem\n\nRUN keytool -noprompt -storepass changeit -cacerts \\\n  -import -file /tmp/cert.pem -alias jenkinsMaster && \\\n  rm -f /tmp/cert.pem\n\nUSER jenkins\n```\n\nThen, use it as the agent container for the pod template as usual. No command or args need to be specified.\n\n> **Notes:**\n>\n> * Support for using WebSockets with JDK 11 was added in the Remoting v4.11, so make sure your base image is new enough. See [here](https://issues.jenkins.io/browse/JENKINS-61212) for more information.\n>\n> * When using the WebSocket mode, the `-disableHttpsCertValidation` on the `jenkins/inbound-agent` becomes unavailable, as well as `-cert`, and that's why you have to extend the docker image.\n\n## [WARNING] label option is deprecated\n\n```\n[WARNING] label option is deprecated. To use a static pod template, use the 'inheritFrom' option.\n```\n\nYou need to change from something like:\n\n```\nagent {\n\tkubernetes {\n\t\tlabel 'somelabel'\n\t}\n}\n```\n\nTo something like:\n\n```\nagent {\n\tkubernetes {\n\t\tinheritFrom 'somelabel'\n\t}\n}\n```\n\n\n# Building and Testing\n\nIntegration tests will use the currently configured context auto-detected from kube config file or service account.\n\n## Manual Testing\n\nRun `mvn clean install` and copy `target/kubernetes.hpi` to Jenkins plugins folder.\n\n## Running Kubernetes Integration Tests\n\nSet up your `$KUBECONFIG` however you like, for example\n\n```bash\nkind create cluster\n```\n\nthen\n\n```bash\nkubectl krew install tunnel # as needed; install Krew first\nkubectl tunnel expose jenkins 8000:8000 8001:8001 &\nmvn test -Djenkins.host.address=jenkins.default -Dport=8000 -DslaveAgentPort=8001 -Dtest=KubernetesPipelineTest#runInPod\n```\n\nAlternately, you can run everything like in CI:\n\n```bash\nexport KIND_PRELOAD=true # optionally\n./kind.sh -Dtest=KubernetesPipelineTest#runInPod\n```\n\nYou can also run interactively after setting up the tunnel:\n\n```bash\nmvn hpi:run -Djenkins.host.address=jenkins.default -Dport=8000 -Djenkins.model.Jenkins.slaveAgentPort=8001\n```\n\n# Docker image\n\nDocker image for Jenkins, with plugin installed.\nBased on the [official image](https://hub.docker.com/r/jenkins/jenkins/).\n\n## Running the Docker image\n\n```bash\ndocker run --rm --name jenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home csanchez/jenkins-kubernetes\n```\n\n\n# Running in Kubernetes\n\nThe example configuration will create a stateful set running Jenkins with persistent volume\nand using a service account to authenticate to Kubernetes API.\n\n## Running locally with minikube\n\nA local testing cluster with one node can be created with [minikube](https://github.com/kubernetes/minikube)\n\n```bash\nminikube start\n```\n\nYou may need to set the correct permissions for host mounted volumes\n\n```bash\nminikube ssh\nsudo chown 1000:1000 /tmp/hostpath-provisioner/pvc-*\n```\n\nThen create the Jenkins namespace, controller and Service with\n\n```bash\nkubectl create namespace kubernetes-plugin\nkubectl config set-context $(kubectl config current-context) --namespace=kubernetes-plugin\nkubectl create -f src/main/kubernetes/service-account.yml\nkubectl create -f src/main/kubernetes/jenkins.yml\n```\n\nGet the url to connect to with\n\n```bash\nminikube service jenkins --namespace kubernetes-plugin --url\n```\n\n## Running in Google Container Engine GKE\n\nAssuming you created a Kubernetes cluster named `jenkins` this is how to run both Jenkins and agents there.\n\nCreating all the elements and setting the default namespace\n\n```bash\nkubectl create namespace kubernetes-plugin\nkubectl config set-context $(kubectl config current-context) --namespace=kubernetes-plugin\nkubectl create -f src/main/kubernetes/service-account.yml\nkubectl create -f src/main/kubernetes/jenkins.yml\n```\n\nConnect to the ip of the network load balancer created by Kubernetes, port 80.\nGet the ip (in this case `104.197.19.100`) with `kubectl describe services/jenkins`\n(it may take a bit to populate)\n\n    $ kubectl describe services/jenkins\n    Name:           jenkins\n    Namespace:      default\n    Labels:         <none>\n    Selector:       name=jenkins\n    Type:           LoadBalancer\n    IP:         10.175.244.232\n    LoadBalancer Ingress:   104.197.19.100\n    Port:           http    80/TCP\n    NodePort:       http    30080/TCP\n    Endpoints:      10.172.1.5:8080\n    Port:           agent   50000/TCP\n    NodePort:       agent   32081/TCP\n    Endpoints:      10.172.1.5:50000\n    Session Affinity:   None\n    No events.\n\nUntil Kubernetes 1.4 removes the SNATing of source ips, seems that CSRF (enabled by default in Jenkins 2)\nneeds to be configured to avoid `WARNING: No valid crumb was included in request` errors.\nThis can be done checking _Enable proxy compatibility_ under Manage Jenkins -> Configure Global Security\n\nConfigure Jenkins, adding the `Kubernetes` cloud under configuration, setting\nKubernetes URL to the container engine cluster endpoint or simply `https://kubernetes.default.svc.cluster.local`.\nUnder credentials, click `Add` and select `Kubernetes Service Account`,\nor alternatively use the Kubernetes API username and password. Select 'Certificate' as credentials type if the\nkubernetes cluster is configured to use client certificates for authentication.\n\nUsing `Kubernetes Service Account` will cause the plugin to use the default token mounted inside the Jenkins pod. See [Configure Service Accounts for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) for more information.\n\n![image](credentials.png)\n\nYou may want to set `Jenkins URL` to the internal service IP, `http://10.175.244.232` in this case,\nto connect through the internal network.\n\nSet `Container Cap` to a reasonable number for tests, i.e. 3.\n\nAdd an image with\n\n* Docker image: `jenkins/inbound-agent`\n* Jenkins agent root directory: `/home/jenkins/agent`\n\n![image](configuration.png)\n\nNow it is ready to be used.\n\nTearing it down\n\n```bash\nkubectl delete namespace/kubernetes-plugin\n```\n\n\n## Customizing the deployment\n\n### Modify CPUs and memory request/limits (Kubernetes Resource API)\n\nModify file `./src/main/kubernetes/jenkins.yml` with desired limits\n\n```yaml\nresources:\n  limits:\n    cpu: 1\n    memory: 1Gi\n  requests:\n    cpu: 0.5\n    memory: 500Mi\n```\n\nNote: the JVM will use the memory `requests` as the heap limit (-Xmx)\n\n## Building\n\n```bash\ndocker build -t csanchez/jenkins-kubernetes .\n```\n \n# Related Projects\n\n* [Kubernetes Pipeline plugin](https://github.com/jenkinsci/kubernetes-pipeline-plugin): pipeline extension to provide native support for using Kubernetes pods, secrets and volumes to perform builds\n* [kubernetes-credentials](https://github.com/jenkinsci/kubernetes-credentials-plugin): Credentials provider that reads Kubernetes secrets\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 28.3916015625,
          "content": "jenkins-kubernetes-plugin\n=========================\n\n这是一个支持在 Kubernetes 集群上运行动态节点的 Jenkins 插件。\n\nBased on the [Scaling Docker with Kubernetes](http://www.infoq.com/articles/scaling-docker-with-kubernetes) article,\nautomates the scaling of Jenkins agents running in Kubernetes.\n\n该插件在节点启动时创建一个包含 Docker 镜像的 Kubernetes Pod，并在构建结束时停止。\n\nFor that some environment variables are automatically injected:\n节点使用 JNLP 来启动，并自动连接到 Jenkins controller 上。期间，会自动注入一些环境变量：\n\n* `JENKINS_URL`: Jenkins 界面地址\n* `JENKINS_SECRET`: 认证用的密钥\n* `JENKINS_AGENT_NAME`: Jenkins 节点的名称\n* `JENKINS_NAME`: Jenkins 节点的名称（已废弃，保持向后兼容）\n\n使用镜像 [`jenkins/inbound-agent`](https://hub.docker.com/r/jenkins/inbound-agent) 做的测试。\n查看[Docker 镜像源码](https://github.com/jenkinsci/docker-agent)。\n\nJenkins controller 可以不在 Kubernetes 上运行。\n\n# Kubernetes 云配置\n\n在 Jenkins 设置中，点击\"添加云\"，选择 `Kubernetes` 后填写如下信息：\n_名称_、_Kubernetes 地址_、 _Kubernetes server 服务证书 key_ 等等。\n\n如果没有设置 _Kubernetes 地址_，连接选项会自动从 `Service Account` 或 `kube config` 文件中读取。\n\n在 Kubernetes 外运行的 Jenkins controller 话，则需要设置凭据。凭据的值就是你为 Jenkins 在集群中创建\n的 `Service Account` 的 `Token`，节点运行时也会使用。\n\n### 限制哪些任务可以使用你配置的云\n\n\"云\"可以配置为只运行特定的任务来使用。\n\n要使用该特性的话，在你的云的高级配置中勾选 `Restrict pipeline support to authorized folders` 。\n对要使用该云配置的任务，需要在对应的文件夹配置中添加。\n\n# 流水线支持\n\n在可以流水线中定义节点并使用，然而，默认的执行环境总会是 `jnlp` 容器。你需要根据情况指定容器。\n\n这会运行在 `jnlp` 容器中\n\n```groovy\n// this guarantees the node will use this template\ndef label = \"mypod-${UUID.randomUUID().toString()}\"\npodTemplate(label: label) {\n    node(label) {\n        stage('Run shell') {\n            sh 'echo hello world'\n        }\n    }\n}\n```\n\n这会运行在指定的容器中\n\n```groovy\ndef label = \"mypod-${UUID.randomUUID().toString()}\"\npodTemplate(label: label) {\n  node(label) {\n    stage('Run shell') {\n      container('mycontainer') {\n        sh 'echo hello world'\n      }\n    }\n  }\n}\n```\n\n在[examples 目录](examples)中可以找到更多的例子。\n\n可以在模板中自定义 `jnlp` 节点镜像\n\n```groovy\ncontainerTemplate(name: 'jnlp', image: 'jenkins/inbound-agent', args: '${computer.jnlpmac} ${computer.name}'),\n```\n\n或者使用 `yaml` 语法\n\n```yaml\napiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: jnlp\n    image: 'jenkins/inbound-agent'\n    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n```\n\n### 容器组支持\n\n可以在 `agent pod` 中定义多个容器，并共享类似挂载点的资源。每个容器中的端口都可以通过 `localhost` 访问。\n\n通过 `container` 指令可以直接在每个容器中执行命令。该特性仍然还有一些并发执行和流水线恢复的问题，因此还处于 **ALPHA** 状态。\n\n```groovy\ndef label = \"mypod-${UUID.randomUUID().toString()}\"\npodTemplate(label: label, containers: [\n    containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),\n    containerTemplate(name: 'golang', image: 'golang:1.8.0', ttyEnabled: true, command: 'cat')\n  ]) {\n\n    node(label) {\n        stage('Get a Maven project') {\n            git 'https://github.com/jenkinsci/kubernetes-plugin.git'\n            container('maven') {\n                stage('Build a Maven project') {\n                    sh 'mvn -B clean install'\n                }\n            }\n        }\n\n        stage('Get a Golang project') {\n            git url: 'https://github.com/hashicorp/terraform.git'\n            container('golang') {\n                stage('Build a Go project') {\n                    sh \"\"\"\n                    mkdir -p /go/src/github.com/hashicorp\n                    ln -s `pwd` /go/src/github.com/hashicorp/terraform\n                    cd /go/src/github.com/hashicorp/terraform && make core-dev\n                    \"\"\"\n                }\n            }\n        }\n\n    }\n}\n```\n\n### Pod 和容器模板配置\n\n`podTemplate` 是 `pod` 的一个模板，用于创建节点。它可以通过用户界面或者流水线来配置。\n不管哪种方式，都提供了如下的字段：\n\n* **cloud** 在 Jenkins 设置中配置的云的名称。默认为 `kubernetes`\n* **name** pod 的名称\n* **namespace** pod 的命名空间\n* **label** pod 的标签。为了避免在多个构建中冲突，最好设置一个唯一值\n* **yaml** [Pod 的 yaml 形式](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#pod-v1-core)允许设置任何值（即使当前字段列表中不存在的）\n* **containers** 容器模板，用于创建 pod 中的容器 *(如下所示)*.\n* **serviceAccount** pod 的 service account\n* **nodeSelector** node 的节点选择器\n* **nodeUsageMode** \"正常\"或者\"独占\"，这会决定 Jenkins 是否只调度与标签表达式匹配的任务或尽可能地使用节点\n* **volumes** 定义在 pod 中的卷，并会挂载到 **所有** 容器\n* **envVars** 环境变量，会应用到 **所有** 容器\n    * **envVar** 直接定义的环境变量\n    * **secretEnvVar** 值来自于 Kubernetes 中的 secret\n* **imagePullSecrets** [从私有 Docker registry 上拉取镜像](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)时使用的凭据名称列表\n* **annotations** 应用到 pod 上的注解\n* **inheritFrom** 要继承的一个或多个 pod 模板 *(详情参见下文)*.\n* **slaveConnectTimeout** 节点上线时的请求超时时间（秒）*(详情参见下文)*.\n* **podRetention** 用于决定是否保留节点 pod。可以是 'never()'、 'onFailure()'、 'always()' 或 'default()'，如果为空的话，超过 `activeDeadlineSeconds` 设定的时间时间后会删除 pod\n* **activeDeadlineSeconds** 如果 `podRetention` 设置为 'never()' 或 'onFailure()' 的话，在时间超过后 pod 会被删除\n* **idleMinutes** 允许 pod 保持活跃以便再次使用，直到最后一次执行后的时间超过配置的分钟数\n\n`containerTemplate` 是容器的模板，会被加到 pod 中。同样地，它的配置可以通过用户界面或流水线来配置，字段包括：\n\n* **name** 容器的名称\n* **image** 容器的镜像\n* **envVars** 应用于容器的环境变量 **(是 pod 级别环境变量的补充，并会覆盖)**.\n    * **envVar** 直接定义的环境变量\n    * **secretEnvVar** 值来自于 Kubernetes 中的 secret\n* **command** 容器启动时会执行的命令\n* **args** 传递给启动命令的参数\n* **ttyEnabled** 是否启用 `tty` 的标记\n* **livenessProbe** 添加给容器中的可执行 liveness 探测的参数（不支持 httpGet liveness 探测）\n* **ports** 容器中暴露的端口\n\n#### 指定不同的节点连接超时时间\n\n节点的连接超时时间默认为100秒。在某些情况下，你可能想要修改这个值，这时你可以设置系统属性 \n`org.csanchez.jenkins.plugins.kubernetes.PodTemplate.connectionTimeout` 为不同的值。\n请阅读[由系统属性控制的特性](https://wiki.jenkins.io/display/JENKINS/Features+controlled+by+system+properties)，以便\n了解如何在 Jenkins 中设置系统属性。\n\n#### 使用 yaml 定义 Pod 模板\n\n为了支持 Kubernetes 中 `Pod` 对象的任何可能的值，我们可以传递一个 yaml 片段，作为模板的基础。任何在 yaml 外部设置的属性的优先级更高。\n\n```groovy\ndef label = \"mypod-${UUID.randomUUID().toString()}\"\npodTemplate(label: label, yaml: \"\"\"\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    some-label: some-label-value\nspec:\n  containers:\n  - name: busybox\n    image: busybox\n    command:\n    - cat\n    tty: true\n\"\"\"\n) {\n    node (label) {\n      container('busybox') {\n        sh \"hostname\"\n      }\n    }\n}\n```\n\n你可以使用步骤 [`readFile`](https://jenkins.io/zh/doc/pipeline/steps/workflow-basic-steps/#code-readfile-code-read-file-from-workspace) \n或 [`readTrusted`](https://jenkins.io/doc/pipeline/steps/coding-webhook/#readtrusted-read-trusted-file-from-scm) 从文件中加载 yaml.\n它从 Jenkins 控制台的插件配置界面上也能访问到。\n\n#### 存活性探测的使用\n\n```groovy\ncontainerTemplate(name: 'busybox', image: 'busybox', ttyEnabled: true, command: 'cat',\n    livenessProbe: containerLivenessProbe( execArgs: 'some --command',\n    initialDelaySeconds: 30, timeoutSeconds: 1, failureThreshold: 3, periodSeconds: 10, successThreshold: 1))\n```\n\n查看页面[定义一个存活性命令](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#defining-a-liveness-command) 了解更多详情。\n\n### Pod 模板继承\n\n`podTemplate` 可以继承一个已有的模板，或者不继承。这意味着，`podTemplate` 将会继承节点选择器、service account、镜像拉取凭据，容器模板和卷。\n\n**yaml** 是 **永远** 不会合并的，如果在子 pod 模板中定义了的话，就不会用父模板的。\n\n**Service account** 和 **节点选择器** 会覆盖父模板中的值。\n\n**容器模板** 如果匹配到了父模板中名称相同到容器模板的话，则会继承父的配置；如果没有匹配到，就用当前的。\n\n**卷** 继承机制与 **容器模板** 一致。\n\n**镜像拉取凭据** 所有定义在\"父\"和\"当前\"模板中的凭据都会用到。\n\n在下面例子中，会继承之前创建的 pod 模板，并只是覆盖 `maven` 的版本，使用 jdk-7 :\n\n```groovy\npodTemplate(label: 'anotherpod', inheritFrom: 'mypod',  containers: [\n    containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-7-alpine')\n  ]) {\n\n      //Let's not repeat ourselves and ommit this part\n}\n```\n\n注意，我们只需要指定不同的部分。因此，不需要 `ttyEnabled` 和 `command`，它们都会被继承。同样地，由于父模板中有 `golang` 容器，所以也会被添加。\n\n#### Pod 模板多重继承\n\n字段 `inheritFrom` 可以引用单个或由空格分割的多个模板。在包含多个的情况下，会按照模板出现的顺序依此处理 *(后面的覆盖先出现的)*。\n如果被引用的模板没有被找到的话，就会被忽略。\n\n#### Pod 模板嵌套\n\n字段 `inheritFrom` 提供了一个方便的方法来组合已有的 podTemplate。很多情况下，直接在流水线中使用 groovy 来定义和组合 podTemplate 会很有用。\n嵌套的方式使之变的可能。你可以把多个 podTemplate 嵌套起来，组合成一个。\n\n下面的例子中，把两个不同的 podTemplate 组合起来，变成一个具有 maven 和 docker 能力的模板。\n\n```groovy\npodTemplate(label: 'docker', containers: [containerTemplate(image: 'docker', name: 'docker', command: 'cat', ttyEnabled: true)]) {\n    podTemplate(label: 'maven', containers: [containerTemplate(image: 'maven', name: 'maven', command: 'cat', ttyEnabled: true)]) {\n        // do stuff\n    }\n}\n```\n\n这个特性非常有用，流水线库的开发人员可以把 podTemplate 包装成函数，然后让用户根据实际需要来调用这些函数。\n\n例如，为 podTemplate 创建一个函数，并导入后使用。我们的文件位于 `src/com/foo/utils/PodTemplates.groovy`:\n\n```groovy\npackage com.foo.utils\n\npublic void dockerTemplate(body) {\n  def label = \"worker-${UUID.randomUUID().toString()}\"\n  podTemplate(label: label,\n        containers: [containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true)],\n        volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]) {\n    body.call(label)\n  }\n}\n\npublic void mavenTemplate(body) {\n  def label = \"worker-${UUID.randomUUID().toString()}\"\n  podTemplate(label: label,\n        containers: [containerTemplate(name: 'maven', image: 'maven', command: 'cat', ttyEnabled: true)],\n        volumes: [secretVolume(secretName: 'maven-settings', mountPath: '/root/.m2'),\n                  persistentVolumeClaim(claimName: 'maven-local-repo', mountPath: '/root/.m2nrepo')]) {\n    body.call(label)\n  }\n}\n\nreturn this\n```\n\n该库的使用者只需要把两个函数组合起来就可以同时满足对 maven 和 docker 的需求。然而，你需要指定命令执行时所用的容器。另外，你 **不** 可以忽略 `node` 语句。\n\n注意，你 **必须** 使用最里层生成的标签来获取节点，在该节点上包含所有的外部 pod，如下所示：\n\n```groovy\nimport com.foo.utils.PodTemplates\n\nslaveTemplates = new PodTemplates()\n\nslaveTemplates.dockerTemplate {\n  slaveTemplates.mavenTemplate { label ->\n    node(label) {\n      container('docker') {\n        sh 'echo hello from docker'\n      }\n      container('maven') {\n        sh 'echo hello from maven'\n      }\n     }\n  }\n}\n```\n\n#### 使用不同的命名空间\n\n有些情况，你需要让节点运行在一个不同的命名空间中，而不是定义在\"云\"配置中的那个。例如：为了测试你可能需要让节点运行在命名空间 `ephemeral` 中。\n这些情况下，你可以通过界面或者流水线来指定一个命名空间。\n\n#### 设置不同 `shell` 命令替换 `/bin/sh`\n\n默认情况下， `shell` 命令是 `/bin/sh`。在一些情况下，你可能想使用例如 `/bin/bash` 这样其他的命令。\n\n```groovy\npodTemplate(label: my-label) {\n  node(my-label) {\n    stage('Run specific shell') {\n      container(name:'mycontainer', shell:'/bin/bash') {\n        sh 'echo hello world'\n      }\n    }\n  }\n}\n```\n\n## 容器配置\n\n在流水线中的 podTemplate 里配置一个容器时，有如下的可选项：\n\n```groovy\npodTemplate(label: 'mypod', cloud: 'kubernetes', containers: [\n    containerTemplate(\n        name: 'mariadb',\n        image: 'mariadb:10.1',\n        ttyEnabled: true,\n        privileged: false,\n        alwaysPullImage: false,\n        workingDir: '/home/jenkins',\n        resourceRequestCpu: '50m',\n        resourceLimitCpu: '100m',\n        resourceRequestMemory: '100Mi',\n        resourceLimitMemory: '200Mi',\n        envVars: [\n            envVar(key: 'MYSQL_ALLOW_EMPTY_PASSWORD', value: 'true'),\n            secretEnvVar(key: 'MYSQL_PASSWORD', secretName: 'mysql-secret', secretKey: 'password'),\n            ...\n        ],\n        ports: [portMapping(name: 'mysql', containerPort: 3306, hostPort: 3306)]\n    ),\n    ...\n],\nvolumes: [\n    emptyDirVolume(mountPath: '/etc/mount1', memory: false),\n    secretVolume(mountPath: '/etc/mount2', secretName: 'my-secret'),\n    configMapVolume(mountPath: '/etc/mount3', configMapName: 'my-config'),\n    hostPathVolume(mountPath: '/etc/mount4', hostPath: '/mnt/my-mount'),\n    nfsVolume(mountPath: '/etc/mount5', serverAddress: '127.0.0.1', serverPath: '/', readOnly: true),\n    persistentVolumeClaim(mountPath: '/etc/mount6', claimName: 'myClaim', readOnly: true)\n],\nimagePullSecrets: [ 'pull-secret' ],\nannotations: [\n    podAnnotation(key: \"my-key\", value: \"my-value\")\n    ...\n]) {\n   ...\n}\n```\n\n## 申明式流水线\n\nJenkins 2.66+ 开始支持申明式流水线。申明式的节点可以用 yaml 的方式来定义：\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      label 'mypod'\n      yaml \"\"\"\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    some-label: some-label-value\nspec:\n  containers:\n  - name: maven\n    image: maven:alpine\n    command:\n    - cat\n    tty: true\n  - name: busybox\n    image: busybox\n    command:\n    - cat\n    tty: true\n\"\"\"\n    }\n  }\n  stages {\n    stage('Run maven') {\n      steps {\n        container('maven') {\n          sh 'mvn -version'\n        }\n        container('busybox') {\n          sh '/bin/busybox'\n        }\n      }\n    }\n  }\n}\n```\n\n或者，使用 `yamlFile` 让 pod 模板写在一个单独的文件 `KubernetesPod.yaml` 里。\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      label 'mypod'\n      yamlFile 'KubernetesPod.yaml'\n    }\n  }\n  stages {\n      //...\n  }\n}\n```\n\n注意，之前是可以定义 `containerTemplate` ，但目前已经在 yaml 格式中被弃用。\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      //cloud 'kubernetes'\n      label 'mypod'\n      containerTemplate {\n        name 'maven'\n        image 'maven:3.3.9-jdk-8-alpine'\n        ttyEnabled true\n        command 'cat'\n      }\n    }\n  }\n  stages { ... }\n}\n```\n\n在自定义的工作空间里运行流水线或者单个阶段（stage）——除非明确说明，否则是不需要的。\n\n```groovy\npipeline {\n  agent {\n    kubernetes {\n      label 'mypod'\n      customWorkspace 'some/other/path'\n      defaultContainer 'maven'\n      yamlFile 'KubernetesPod.yaml'\n    }\n  }\n\n  stages {\n    stage('Run maven') {\n      steps {\n        sh 'mvn -version'\n        sh \"echo Workspace dir is ${pwd()}\"\n      }\n    }\n  }\n}\n```\n\n## 从流水线中访问容器日志\n\n如果你使用 `containerTemplate` 在后台运行一些服务（例如：集成测试用的数据库），你可能想在流水线中访问它的日志。\n这可以通过 `containerLog` 这个步骤（step）来完成，它会打印你所请求的容器的日志到构建日志中。\n\n#### 必要参数\n\n* **名称** 要获取日志的容器的名称，定义在 `podTemplate` 中。简单使用的话，可以忽略参数名：\n\n```groovy\ncontainerLog 'mongodb'\n```\n\n#### 可选参数\n\n* **returnLog** 返回而不是打印到构建日志中（默认值：`false`）\n* **tailingLines** 只返回最后几行的日志（可选）\n* **sinceSeconds** 只返回最后几秒的日志（可选）\n* **limitBytes** 限制输出的字节数（从日志的开头算起，不准确）\n\n参照在线帮助和 [examples/containerLog.groovy](examples/containerLog.groovy).\n\n# 约束\n\n在 pod 中可以定义多个容器。其中的名称为 `jnlp` 的容器是自动创建的，会作为 Jenkins JNLP 节点服务，并带有参数 `${computer.jnlpmac} ${computer.name}`。\n\n其他容器必须有一直运行的进程，这样容器才不会退出。如果默认的 entrypoint 或命令运行后就退出的话，它应该使用 `cat` 以及 `ttyEnabled: true` 来覆盖。\n\n**警告**\n\n如果你要为 JNLP 节点提供自己的 Docker 镜像，你 **必须** 把容器命名为 `jnlp`，才会覆盖默认的。如果不这么做的话，就会导致有两个节点同时去连接 maser.\n\n# 覆盖预定义参数\n\n默认情况下，Jenkins 在调用节点时会比较保守。也就是说，如果队列中有两个构建任务，它不会立刻调度两个执行节点。\nBy default, Jenkins spawns agents conservatively. Say, if there are 2 builds in queue, it won't spawn 2 executors immediately.\nIt will spawn one executor and wait for sometime for the first executor to be freed before deciding to spawn the second executor.\nJenkins makes sure every executor it spawns is utilized to the maximum.\nIf you want to override this behaviour and spawn an executor for each build in queue immediately without waiting,\nyou can use these flags during Jenkins startup:\n\n```\n-Dhudson.slaves.NodeProvisioner.initialDelay=0\n-Dhudson.slaves.NodeProvisioner.MARGIN=50\n-Dhudson.slaves.NodeProvisioner.MARGIN0=0.85\n```\n\n# 在 minikube 上配置\n\n创建并启动 [minikube](https://github.com/kubernetes/minikube)\n\n客户端证书需要转换为 PKCS，并需要密码\n\n    openssl pkcs12 -export -out ~/.minikube/minikube.pfx -inkey ~/.minikube/apiserver.key -in ~/.minikube/apiserver.crt -certfile ~/.minikube/ca.crt -passout pass:secret\n\n然后，验证证书可用\n\n    curl --cacert ~/.minikube/ca.crt --cert ~/.minikube/minikube.pfx:secret --cert-type P12 https://$(minikube ip):8443\n\n增加一个证书类型的 Jenkins 凭据，从 `~/.minikube/minikube.pfx` 上传，密码为 `secret`\n\n用文件 `~/.minikube/ca.crt` 的内容来填写 *Kubernetes 服务证书 key*\n\n# 在 Google Container Engine 上配置\n\n创建一个集群\n\n    `gcloud container clusters create jenkins --num-nodes 1 --machine-type g1-small`\n\n并记下管理员密码和服务证书。\n\n或只是用 Google 开发者控制台来创建一个容器引擎集群，然后运行如下命令\n\n    gcloud container clusters get-credentials jenkins\n    kubectl config view --raw\n\n最后的命令会输出 kubernetes 集群配置，包括：API 服务地址、管理员密码和根证书。\n\n# 调试\n\n首先，确保你在正确的集群和命名空间中，观察 Jenkins 节点是否启动。\n\n    kubectl get -a pods --watch\n\n如果他们的状态不是 `Running`，使用 `describe` 获取事件信息\n\n    kubectl describe pods/my-jenkins-agent\n\n如果他们处于 `Running`，使用 `logs` 获取输出的日志\n\n    kubectl logs -f pods/my-jenkins-agent jnlp\n\n如果 pod 还没有启动，或没有其他任何错误，请检查 master 上的日志。\n\n想要更多的细节的话，配置一个新的 [Jenkins 日志记录器](https://wiki.jenkins-ci.org/display/JENKINS/Logging)，\n设置 `org.csanchez.jenkins.plugins.kubernetes` 的级别为 `ALL`.\n\n为了检查发送到 Kubernetes API 服务的 json 数据，你可以配置一个新的 [Jenkins 日志记录器](https://wiki.jenkins-ci.org/display/JENKINS/Logging)，\n设置 `okhttp3` 的级别为 `ALL`.\n\n## 删除错误状态的 pod\n\n    kubectl get pods -o name --selector=jenkins=slave --all-namespaces  | xargs -I {} kubectl delete {}\n\n# 构建与测试\n\n集成测试会使用从 kube config 文件或 service account 中自动检测到的配置。\n\n## 手工测试\n\n运行 `mvn clean install` 并拷贝 `target/kubernetes.hpi` 到 Jenkins 的插件目录中。\n\n## 在 Kubernetes 中运行集成测试\n\n请注意，你运行 `mvn` 的系统需要能够从集群访问到。如果你看到节点连接了错误的主机，那么，你可以使用上面提到的 `jenkins.host.address` 来替代。\n\n### 在 Minikube 中运行集成测试\n\n为了集成测试，需要安装和启动 [minikube](https://github.com/kubernetes/minikube).测试程序会检测并在一个新的命名空间中运行。\n\n有些集成测试运行一个本地 Jenkins，因此，你运行的主机需要能从 Kubernetes 集群访问到。默认情况下，处于安全的考虑，Jenkins 只会监听 `192.168.64.1`。\n如果你的 minikube 没有运行在那个网络上，可以给 maven 传递参数 `connectorHost`.\n\n    mvn clean install -DconnectorHost=$(minikube ip | sed -e 's/\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*/\\1.1/')\n\n如果你不在意你的网络中其他人也可以使用你测试的 Jenkins，那么，你可以这么使用：\n\n    mvn clean install -DconnectorHost=0.0.0.0\n\n然后，你测试用的 Jenkins 将会监听所有的 ip 地址。因此，你构建用的 pod 可以容你的 minikube 虚拟机中访问到你的主机。\n\n如果你的 minikube 是运行在一个虚拟机中（例如：virtualbox），而且运行 `mvn` 的主机没有一个公共的主机名可以让虚拟机访问到，你可以设置\n系统属性 `jenkins.host.address` 为你的主机（主机模式或 NAT）的 IP：\n\n    mvn clean install -Djenkins.host.address=192.168.99.1\n\n### 在不同的集群中运行集成测试\n\n确保你使用下面的命令创建命名空间和角色，然后，在命名空间 `kubernetes-plugin` 以及 service account `jenkins`\n(要使用不同的命名空间的话，请编辑 `src/test/kubernetes/service-account.yml` 文件)下运行\n\n```\nkubectl create namespace kubernetes-plugin-test\nkubectl create namespace kubernetes-plugin-test-overridden-namespace\nkubectl create namespace kubernetes-plugin-test-overridden-namespace2\nkubectl apply -n kubernetes-plugin-test -f src/main/kubernetes/service-account.yml\nkubectl apply -n kubernetes-plugin-test-overridden-namespace -f src/main/kubernetes/service-account.yml\nkubectl apply -n kubernetes-plugin-test-overridden-namespace2 -f src/main/kubernetes/service-account.yml\nkubectl apply -n kubernetes-plugin-test -f src/test/kubernetes/service-account.yml\nkubectl apply -n kubernetes-plugin-test-overridden-namespace -f src/test/kubernetes/service-account.yml\nkubectl apply -n kubernetes-plugin-test-overridden-namespace2 -f src/test/kubernetes/service-account.yml\n```\n\n# Docker 镜像\n\nJenkins 的 Docker 镜像，并安装好插件。基于[官方镜像](https://hub.docker.com/r/jenkins/jenkins/)。\n\n## 运行 Docker 镜像\n\n    docker run --rm --name jenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home csanchez/jenkins-kubernetes\n\n# 在 Kubernetes 中运行\n\n示例的配置会创建一个带有持久卷的 stateful set 运行 Jenkins，并使用一个 service account 来通过 Kubernetes API 的认证。\n\n## 在本地的 minikube 中运行\n\n使用 [minikube](https://github.com/kubernetes/minikube) 可以创建只有一个节点的本地测试集群\n\n    minikube start\n\n你可能需要为主机挂载卷设置正确的权限\n\n    minikube ssh\n    sudo chown 1000:1000 /tmp/hostpath-provisioner/pvc-*\n\n然后，使用如下命令创建 Jenkins 的命名空间，controller 以及 service\n\n    kubectl create namespace kubernetes-plugin\n    kubectl config set-context $(kubectl config current-context) --namespace=kubernetes-plugin\n    kubectl create -f src/main/kubernetes/service-account.yml\n    kubectl create -f src/main/kubernetes/jenkins.yml\n\n通过下面的命令获取连接用的地址\n\n    minikube service jenkins --namespace kubernetes-plugin --url\n\n## 在 Google Container Engine GKE 中运行\n\n假设，你已经创建来一个名为 `jenkins` 的 Kubernetes 集群，用来运行 Jenkins 以及节点。\n\n创建所有的元素，并设置默认的命名空间\n\n    kubectl create namespace kubernetes-plugin\n    kubectl config set-context $(kubectl config current-context) --namespace=kubernetes-plugin\n    kubectl create -f src/main/kubernetes/service-account.yml\n    kubectl create -f src/main/kubernetes/jenkins.yml\n\n连接由 Kubernetes 创建的网络负载均衡的 ip，端口为 80。使用命令 `kubectl describe services/jenkins` （这可能需要点时间）获取 ip（在这里是 `104.197.19.100`）\n\n    $ kubectl describe services/jenkins\n    Name:           jenkins\n    Namespace:      default\n    Labels:         <none>\n    Selector:       name=jenkins\n    Type:           LoadBalancer\n    IP:         10.175.244.232\n    LoadBalancer Ingress:   104.197.19.100\n    Port:           http    80/TCP\n    NodePort:       http    30080/TCP\n    Endpoints:      10.172.1.5:8080\n    Port:           agent   50000/TCP\n    NodePort:       agent   32081/TCP\n    Endpoints:      10.172.1.5:50000\n    Session Affinity:   None\n    No events.\n\nThis can be done checking _Enable proxy compatibility_ under Manage Jenkins -> Configure Global Security\n直到 Kubernetes 1.4 移除了源 ip 的 SNAT，似乎需要配置 CSRF(在 Jenkins 2 中默认启用) 以避免 `WARNING: No valid crumb was included in request` 错误。\n可以在\"管理 Jenkins\" -> \"全局安全配置\"下的 _启用代理兼容性_。\n\n配置 Jenkins，在配置中添加 `Kubernetes` 云，设置容器引擎集群的 Kubernetes 地址，或只是简单的为 `https://kubernetes.default.svc.cluster.local`.\n在凭据位置，点击`添加`并选择 `Kubernetes Service Account`,或使用 Kubernetes API 的用户名和密码。\n或者集群配置为使用客户端证书来认证的话，选择`证书`作为凭据的类型。\n\n使用 `Kubernetes Service Account` 会导致插件使用挂载到 Jenkins pod 中的默认 token。 \n想要了解更多详情的话，请查看 [为 pod 配置 Service Accounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)。\n\n![image](credentials.png)\n\n你可能想把 `Jenkins URL` 设置为内部的服务 IP，通过内部网络来连接。当前示例中是 `http://10.175.244.232`。\n\n为测试设置合理的值到 `Container Cap`，例如：3。\n\n使用下面的方式添加一个镜像：\n\n* Docker 镜像：`jenkins/inbound-agent`\n* Jenkins 节点根目录：`/home/jenkins`\n\n![image](configuration.png)\n\n现在，已经可以开始使用了。\n\n要停止的话，请使用命令：\n\n    kubectl delete namespace/kubernetes-plugin\n\n## 自定义 deployment\n\n### 修改 CPU 和内存请求或限制 (Kubernetes 资源 API)\n\n修改文件 `./src/main/kubernetes/jenkins.yml` 为所需要的限制\n\n```yaml\nresources:\n      limits:\n        cpu: 1\n        memory: 1Gi\n      requests:\n        cpu: 0.5\n        memory: 500Mi\n```\n\n注意：虚拟机会使用 `requests` 的内存作为堆的限制(-Xmx)\n\n## 构建\n\n    docker build -t csanchez/jenkins-kubernetes .\n\n# 相关项目\n\n* [Kubernetes Pipeline plugin](https://github.com/jenkinsci/kubernetes-pipeline-plugin): 流水线扩展，为构建提供了对 Kubernetes pods, secrets 和卷的直接支持\n* [kubernetes-credentials](https://github.com/jenkinsci/kubernetes-credentials-plugin): 凭据提供者，用于读取 Kubernetes secrets\n"
        },
        {
          "name": "configuration.png",
          "type": "blob",
          "size": 100.7275390625,
          "content": null
        },
        {
          "name": "credentials.png",
          "type": "blob",
          "size": 36.4482421875,
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "kind-preload.sh",
          "type": "blob",
          "size": 0.6298828125,
          "content": "#!/usr/bin/env bash\nset -euxo pipefail\ncd $(dirname $0)\n\nPRE_LOAD_IMAGES=()\nPRE_LOAD_IMAGES+=(omrieival/ktunnel:v1.6.1)\nPRE_LOAD_IMAGES+=($(grep -h --include=\"*.groovy\" -e \"^\\s*image: .*$\" -R src/test/resources | sed -e \"s/^[[:space:]]*image: //\" | sort | uniq | grep -v \"windows\" | grep -v \"nonexistent\" | grep -v \"invalid\" | xargs))\nPRE_LOAD_IMAGES+=($(grep -e FROM src/main/resources/org/csanchez/jenkins/plugins/kubernetes/Dockerfile | cut -d ' ' -f 2-))\nif [[ -v cluster ]]\nthen\n  name_arg=\"--name $cluster\"\nelse\n  name_arg=\nfi\nfor image in \"${PRE_LOAD_IMAGES[@]}\"\ndo\n  docker pull \"$image\"\n  kind load docker-image \"$image\" $name_arg\ndone\n"
        },
        {
          "name": "kind.sh",
          "type": "blob",
          "size": 1.4365234375,
          "content": "#!/usr/bin/env bash\nset -euxo pipefail\ncd $(dirname $0)\n\n: ${WORKSPACE_TMP:=/tmp}\n\nexport PATH=$WORKSPACE_TMP:$PATH\nif [ \\! -x \"$WORKSPACE_TMP/kind\" ]\nthen\n    curl -sLo \"$WORKSPACE_TMP/kind\" https://github.com/kubernetes-sigs/kind/releases/download/v0.23.0/kind-$(uname | tr '[:upper:]' '[:lower:]')-amd64\n    chmod +x \"$WORKSPACE_TMP/kind\"\nfi\nif [ \\! -x \"$WORKSPACE_TMP/kubectl\" ]\nthen\n    curl -sLo \"$WORKSPACE_TMP/kubectl\" https://storage.googleapis.com/kubernetes-release/release/v1.30.1/bin/$(uname | tr '[:upper:]' '[:lower:]')/amd64/kubectl\n    chmod +x \"$WORKSPACE_TMP/kubectl\"\nfi\nif [ \\! -x \"$WORKSPACE_TMP/ktunnel\" ]\nthen\n    (cd \"$WORKSPACE_TMP\"; curl -sL https://github.com/omrikiei/ktunnel/releases/download/v1.6.1/ktunnel_1.6.1_Linux_x86_64.tar.gz | tar xvfz - ktunnel)\nfi\n\nexport cluster=ci$RANDOM\nexport KUBECONFIG=\"$WORKSPACE_TMP/kubeconfig-$cluster\"\nkind create cluster --name $cluster --wait 5m\nfunction cleanup() {\n    set +e\n    if [ -v ktunnel_pid ]\n    then\n        kill $ktunnel_pid\n    fi\n    kind export logs --name $cluster \"$WORKSPACE_TMP/kindlogs\"\n    kind delete cluster --name $cluster\n    rm \"$KUBECONFIG\"\n}\ntrap cleanup EXIT\nkubectl cluster-info\n\nif ${KIND_PRELOAD:-false}\nthen\n   ./kind-preload.sh\nfi\n\nktunnel expose jenkins 8000:8000 8001:8001 &\nktunnel_pid=$!\n\nmvn \\\n    -B \\\n    -ntp \\\n    -Djenkins.host.address=jenkins.default \\\n    -Dport=8000 \\\n    -DslaveAgentPort=8001 \\\n    -Dmaven.test.failure.ignore \\\n    verify \\\n    \"$@\"\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 12.9208984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.jenkins-ci.plugins</groupId>\n    <artifactId>plugin</artifactId>\n    <version>4.88</version>\n    <relativePath />\n  </parent>\n\n  <groupId>org.csanchez.jenkins.plugins</groupId>\n  <artifactId>kubernetes</artifactId>\n  <version>${changelist}</version>\n  <packaging>hpi</packaging>\n  <name>Kubernetes plugin</name>\n  <description>Jenkins plugin to run dynamic agents in a Kubernetes cluster</description>\n  <url>https://github.com/jenkinsci/${project.artifactId}-plugin</url>\n\n  <licenses>\n    <license>\n      <name>Apache License 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <developers>\n    <developer>\n      <id>carlos</id>\n      <name>Carlos Sanchez</name>\n      <email>carlos@apache.org</email>\n    </developer>\n  </developers>\n\n  <scm>\n    <connection>scm:git:https://github.com/${gitHubRepo}.git</connection>\n    <developerConnection>scm:git:https://github.com/${gitHubRepo}.git</developerConnection>\n    <tag>${scmTag}</tag>\n    <url>https://github.com/${gitHubRepo}</url>\n  </scm>\n\n  <properties>\n    <changelist>999999-SNAPSHOT</changelist>\n    <jenkins.host.address />\n    <slaveAgentPort />\n    <jenkins.baseline>2.426</jenkins.baseline>\n    <jenkins.version>${jenkins.baseline}.3</jenkins.version>\n    <no-test-jar>false</no-test-jar>\n    <useBeta>true</useBeta>\n    <gitHubRepo>jenkinsci/${project.artifactId}-plugin</gitHubRepo>\n    <spotbugs.effort>Max</spotbugs.effort>\n    <spotbugs.threshold>Low</spotbugs.threshold>\n    <spotless.check.skip>false</spotless.check.skip>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>io.jenkins.tools.bom</groupId>\n        <artifactId>bom-${jenkins.baseline}.x</artifactId>\n        <version>2857.v01a_0144eb_20b_</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.squareup.okhttp3</groupId>\n        <artifactId>mockwebserver</artifactId>\n        <!-- transitive dep of io.fabric8:kubernetes-server-mock, needs alignment with okhttp-api -->\n        <version>4.11.0</version>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>io.jenkins.plugins</groupId>\n      <artifactId>caffeine-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>authentication-tokens</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>bouncycastle-api</artifactId>\n    </dependency>\n\n    <dependency>\n      <!-- Requires Permission -->\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>cloudbees-folder</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>credentials</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>credentials-binding</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>durable-task</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>jackson2-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>kubernetes-client-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>metrics</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>plain-credentials</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>structs</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>variant</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-cps</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-durable-task-step</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-step-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkinsci.plugins</groupId>\n      <artifactId>kubernetes-credentials</artifactId>\n    </dependency>\n    <dependency>\n      <!-- DeclarativeAgent -->\n      <groupId>org.jenkinsci.plugins</groupId>\n      <artifactId>pipeline-model-extensions</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>io.fabric8</groupId>\n      <artifactId>kubernetes-server-mock</artifactId>\n      <version>6.10.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.jenkins</groupId>\n      <artifactId>configuration-as-code</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.jenkins.configuration-as-code</groupId>\n      <artifactId>test-harness</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.awaitility</groupId>\n      <artifactId>awaitility</artifactId>\n      <version>4.2.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>docker-workflow</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>git</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>git</artifactId>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <!-- Required to test run src/main/resources/org/csanchez/jenkins/plugins/kubernetes/pipeline/samples/maven.groovy -->\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>junit</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>scm-api</artifactId>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <!-- for ContainerExecDecoratorPipelineTest -->\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>ssh-agent</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins</groupId>\n      <artifactId>ssh-credentials</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-basic-steps</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <!-- SnippetizerTest -->\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-cps</artifactId>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n\n    <!-- for testing -->\n    <dependency>\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-job</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <!-- SemaphoreStep -->\n      <groupId>org.jenkins-ci.plugins.workflow</groupId>\n      <artifactId>workflow-support</artifactId>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <!-- DeclarativeGeneratorTester -->\n      <groupId>org.jenkinsci.plugins</groupId>\n      <artifactId>pipeline-model-definition</artifactId>\n      <classifier>tests</classifier>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.jenkinsci.plugins</groupId>\n      <artifactId>pipeline-model-definition</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>pl.pragmatists</groupId>\n      <artifactId>JUnitParams</artifactId>\n      <version>1.1.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <!-- get every artifact through repo.jenkins-ci.org, which proxies all the artifacts that we need -->\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <systemPropertyVariables>\n            <hudson.slaves.NodeProvisioner.initialDelay>0</hudson.slaves.NodeProvisioner.initialDelay>\n            <hudson.slaves.NodeProvisioner.recurrencePeriod>3000</hudson.slaves.NodeProvisioner.recurrencePeriod>\n            <org.jenkinsci.plugins.workflow.support.pickles.ExecutorPickle.timeoutForNodeMillis>60000</org.jenkinsci.plugins.workflow.support.pickles.ExecutorPickle.timeoutForNodeMillis>\n            <!-- have pods connect to this address for Jenkins -->\n            <jenkins.host.address>${jenkins.host.address}</jenkins.host.address>\n            <slaveAgentPort>${slaveAgentPort}</slaveAgentPort>\n          </systemPropertyVariables>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.jenkins-ci.tools</groupId>\n        <artifactId>maven-hpi-plugin</artifactId>\n        <configuration>\n          <systemProperties>\n            <hudson.slaves.NodeProvisioner.initialDelay>0</hudson.slaves.NodeProvisioner.initialDelay>\n            <hudson.slaves.NodeProvisioner.MARGIN>50</hudson.slaves.NodeProvisioner.MARGIN>\n            <hudson.slaves.NodeProvisioner.MARGIN0>0.85</hudson.slaves.NodeProvisioner.MARGIN0>\n            <jenkins.host.address>${jenkins.host.address}</jenkins.host.address>\n            <port>${port}</port>\n            <org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateStepExecution.verbose>true</org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateStepExecution.verbose>\n          </systemProperties>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>enforce-okhttp-consistency</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireSameVersions>\n                  <dependencies>\n                    <dependency>com.squareup.okhttp3:mockwebserver</dependency>\n                    <dependency>com.squareup.okhttp3:okhttp:jar</dependency>\n                    <dependency>com.squareup.okhttp3:logging-interceptor</dependency>\n                  </dependencies>\n                </requireSameVersions>\n                <requireSameVersions>\n                  <dependencies>\n                    <dependency>io.fabric8:kubernetes-server-mock</dependency>\n                    <dependency>io.fabric8:kubernetes-client</dependency>\n                  </dependencies>\n                </requireSameVersions>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>merge-jacoco-reports</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.jacoco</groupId>\n            <artifactId>jacoco-maven-plugin</artifactId>\n            <executions>\n              <execution>\n                <goals>\n                  <goal>merge</goal>\n                </goals>\n                <phase>validate</phase>\n                <configuration>\n                  <fileSets>\n                    <fileSet>\n                      <directory>${project.build.directory}</directory>\n                      <includes>\n                        <include>jacoco-*.exec</include>\n                      </includes>\n                    </fileSet>\n                  </fileSets>\n                </configuration>\n              </execution>\n              <execution>\n                <id>build-report</id>\n                <goals>\n                  <goal>report</goal>\n                </goals>\n                <phase>validate</phase>\n                <configuration>\n                  <formats>XML</formats>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}