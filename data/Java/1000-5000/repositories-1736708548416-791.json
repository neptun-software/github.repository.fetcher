{
  "metadata": {
    "timestamp": 1736708548416,
    "page": 791,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yanzhenjie/Album",
      "stars": 2501,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0859375,
          "content": "*.iml\n/.idea/\n/build/\n.gradle\n/local.properties\n.DS_Store\n/captures\n.externalNativeBuild"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.716796875,
          "content": "# Contributing to Album\nFirst off, thanks for taking the time to contribute.  \n\nThe following is a set of guidelines for contributing to Album. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.\n\n1. All your actions in Album should be in English, not in other languages.\n2. Please keep Album the existing code style, not according to your habits.\n3. Just modify the code you are sure need to be optimized, not all the different code from your ideas.\n4. Before launching a pull request, you should test your commit code adequately.\n5. Please commit new code to the [dev](https://github.com/yanzhenjie/Album/tree/dev) branch instead of the master branch."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.076171875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Zhenjie Yan\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.8017578125,
          "content": "# Album\n<image src=\"./image/logo.png\"/>  \n\nAlbum is a Material Design style album, it provides three functions: album, camera and gallery.\n\n1. Select images, selecte videos, or select pictures and videos.\n2. Take a picture, record a video, or use camera in album list.\n3. Preview pictures and videos in the gallery or select pictures and videos in the gallery.\n\n## Screenshot\n<image src=\"./image/1.gif\" width=\"210px\"/> <image src=\"./image/2.gif\" width=\"210px\"/> <image src=\"./image/3.gif\" width=\"210px\"/> <image src=\"./image/4.gif\" width=\"210px\"/>  \n\nWhite StatusBar, the left is the effect of 5.0-(Containing 5.0), the right is the effect of 6.0+(Containing 6.0):  \n  \n<image src=\"./image/5.gif\" width=\"210px\"/> <image src=\"./image/6.gif\" width=\"210px\"/>  \n\nEffect on landscape screen:  \n\n<image src=\"./image/7.gif\"/>\n\n## Download\n```groovy\nimplementation 'com.yanzhenjie:album:2.1.3'\n```\n\n## Usage\nDevelopers must configure `AlbumLoader` to make Album work normally, and AlbumLoader is used to load thumbnails of images and videos.\n\nThis is an example:\n```java\npublic class MediaLoader implements AlbumLoader {\n\n    @Override\n    public void load(ImageView imageView, AlbumFile albumFile) {\n        load(imageView, albumFile.getPath());\n    }\n\n    @Override\n    public void load(ImageView imageView, String url) {\n        Glide.with(imageView.getContext())\n                .load(url)\n                .error(R.drawable.placeholder)\n                .placeholder(R.drawable.placeholder)\n                .crossFade()\n                .into(imageView);\n    }\n}\n```\nThe example uses [Glide](https://github.com/bumptech/glide) to load thumbnails of pictures and videos. Please remember to configure the `AlbumLoader` you just implemented.\n```java\nAlbum.initialize(AlbumConfig.newBuilder(this)\n    .setAlbumLoader(new MediaLoader())\n    ...\n    .build());\n```\n\n### Image and video mix options\n```java\nAlbum.album(this) // Image and video mix options.\n    .multipleChoice() // Multi-Mode, Single-Mode: singleChoice().\n    .columnCount() // The number of columns in the page list.\n    .selectCount()  // Choose up to a few images.\n    .camera() // Whether the camera appears in the Item.\n    .cameraVideoQuality(1) // Video quality, [0, 1].\n    .cameraVideoLimitDuration(Long.MAX_VALUE) // The longest duration of the video is in milliseconds.\n    .cameraVideoLimitBytes()(Long.MAX_VALUE) // Maximum size of the video, in bytes.\n    .checkedList() // To reverse the list.\n    .filterSize() // Filter the file size.\n    .filterMimeType() // Filter file format.\n    .filterDuration() // Filter video duration.\n    .afterFilterVisibility() // Show the filtered files, but they are not available.\n    .onResult(new Action<ArrayList<AlbumFile>>() {\n        @Override\n        public void onAction(@NonNull ArrayList<AlbumFile> result) {\n            // TODO accept the result.\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n            // The user canceled the operation.\n        }\n    })\n    .start();\n```\n\n### Image Selection\n```java\nAlbum.image(this) // Image selection.\n    .multipleChoice()\n    .camera()\n    .columnCount()\n    .selectCount()\n    .checkedList(mAlbumFiles)\n    .filterSize() // Filter the file size.\n    .filterMimeType() // Filter file format.\n    .afterFilterVisibility() // Show the filtered files, but they are not available.\n    .onResult(new Action<ArrayList<AlbumFile>>() {\n        @Override\n        public void onAction(@NonNull ArrayList<AlbumFile> result) {\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .start();\n```\n\nIf developer want to crop the image, please use [Durban](https://github.com/yanzhenjie/Durban).\n\n### Video Selection\n```java\nAlbum.video(this) // Video selection.\n    .multipleChoice()\n    .camera(true)\n    .columnCount(2)\n    .selectCount(6)\n    .checkedList(mAlbumFiles)\n    .filterSize()\n    .filterMimeType()\n    .filterDuration()\n    .afterFilterVisibility() // Show the filtered files, but they are not available.\n    .onResult(new Action<ArrayList<AlbumFile>>() {\n        @Override\n        public void onAction(@NonNull ArrayList<AlbumFile> result) {\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .start();\n```\n\n### Take Picture\n```java\nAlbum.camera(this) // Camera function.\n    .image() // Take Picture.\n    .filePath() // File save path, not required.\n    .onResult(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .start();\n```\n\nIf developer want to crop the image, please use [Durban](https://github.com/yanzhenjie/Durban).\n\n### Record Video\n```java\nAlbum.camera(this)\n    .video() // Record Video.\n    .filePath()\n    .quality(1) // Video quality, [0, 1].\n    .limitDuration(Long.MAX_VALUE) // The longest duration of the video is in milliseconds.\n    .limitBytes(Long.MAX_VALUE) // Maximum size of the video, in bytes.\n    .onResult(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .start();\n```\n\n### Gallery\n```java\n// Preview AlbumFile:\nAlbum.galleryAlbum(this)\n...\n\n// Preview path:\nAlbum.gallery(this)\n    .checkedList(imageList) // List of image to view: ArrayList<String>.\n    .checkable(true) // Whether there is a selection function.\n    .onResult(new Action<ArrayList<String>>() { // If checkable(false), action not required.\n        @Override\n        public void onAction(@NonNull ArrayList<String> result) {\n        }\n    })\n    .onCancel(new Action<String>() {\n        @Override\n        public void onAction(@NonNull String result) {\n        }\n    })\n    .start();\n```\n\n> If `checkable(false)`, listener not required, the `CheckBox` and the `FinishButton` will be not appear.\n\nThe user may click or long press on the preview image and the developer can listen to both events:\n```java\nAlbum.gallery(this)\n    ...\n    .itemClick(new ItemAction<String>() {\n        @Override\n        public void onAction(Context context, String item) {\n        }\n    })\n    .itemLongClick(new ItemAction<String>() {\n        @Override\n        public void onAction(Context context, String item) {\n        }\n    })\n    .start();\n```\n\n### Capabilities of AlbumFile\n`AlbumFile` is the result of the selection of images and videos, The properties of the image and video are different, and their different attributes are listed below.\n\n#### Image\n```java\npublic int getMediaType(); // File type, the image is AlbumFile.TYPE_IMAGE.\npublic String getPath(); // File path, must not be empty.\npublic String getBucketName(); // The name of the folder where the file is located.\npublic String getMimeType(); // File MimeType, for example: image/jpeg.\npublic long getAddDate(); // File to add date, must have.\npublic float getLatitude(); // The latitude of the file, may be zero.\npublic float getLongitude(); // The longitude of the file, may be zero.\npublic long getSize(); // File size in bytes.\npublic String getThumbPath(); // This is a small thumbnail.\n```\n\n#### Video\n```java\npublic int getMediaType(); // File type, the video is AlbumFile.TYPE_VIDEO.\npublic String getPath(); // File path, must not be empty.\npublic String getBucketName(); // The name of the folder where the file is located.\npublic String getMimeType(); // File MimeType, for example: image/jpeg.\npublic long getAddDate(); // File to add date, must have.\npublic float getLatitude(); // The latitude of the file, may be zero.\npublic float getLongitude(); // The longitude of the file, may be zero.\npublic long getSize(); // File size in bytes.\npublic long getDuration(); // Video duration, must have.\npublic String getThumbPath(); // This is a small thumbnail.\n```\n\n### Customize UI\nThrough `Widget`, developer can configure the title, color of StatusBar, color of NavigationBar and so on.\n\n```java\n// Such as image video mix:\n Album.album(this)\n    .multipleChoice()\n    .widget(...)\n    ...\n\n// Image selection:\nAlbum.image(this)\n    .multipleChoice()\n    .widget(...)\n    ...\n\n// Video selection:\nAlbum.video(this)\n    .multipleChoice()\n    .widget(...)\n    ...\n\n// Gallery, preview AlbumFile:\nAlbum.galleryAlbum(this)\n    .widget(...)\n    ...\n\n// Gallery, preview path:\nAlbum.gallery(this)\n    .widget(...)\n    ...\n```\n\nSo we only need to pass in a `Widget` parameter just fine:\n```java\n// StatusBar is a dark background when building:\nWidget.newDarkBuilder(this)\n...\n\n// StatusBar is a light background when building:\nWidget.newLightBuilder(this)\n...\n\n// Such as:\nWidget.xxxBuilder(this)\n    .title(...) // Title.\n    .statusBarColor(Color.WHITE) // StatusBar color.\n    .toolBarColor(Color.WHITE) // Toolbar color.\n    .navigationBarColor(Color.WHITE) // Virtual NavigationBar color of Android5.0+.\n    .mediaItemCheckSelector(Color.BLUE, Color.GREEN) // Image or video selection box.\n    .bucketItemCheckSelector(Color.RED, Color.YELLOW) // Select the folder selection box.\n    .buttonStyle( // Used to configure the style of button when the image/video is not found.\n        Widget.ButtonStyle.newLightBuilder(this) // With Widget's Builder model.\n            .setButtonSelector(Color.WHITE, Color.WHITE) // Button selector.\n            .build()\n    )\n    .build()\n```\n\n### Configuration language\nAlbum defaults to English and changes with the system language. Unfortunately, Album only supports English, Simplified Chinese, Traditional Chinese and Portuguese. However, developers can copy the items in Album's `string.xml` into your project for translation, the best thing is that you can [contribute](CONTRIBUTING.md) and submit pull requests to perfect Album.\n\nDevelopers can specify Album's language:\n```java\nAlbum.initialize(AlbumConfig.newBuilder(this)\n    ...\n    .setLocale(Locale.ENGLISH)\n    .build());\n```\n\n## Contributing\nBefore submitting pull requests, contributors must abide by the [agreement](CONTRIBUTING.md) .\n\n## Proguard-rules\nIf you are using ProGuard you might need to add the following options:\n```txt\n-dontwarn com.yanzhenjie.album.**\n-dontwarn com.yanzhenjie.mediascanner.**\n```\n\n## License\n```text\nCopyright 2017 Yan Zhenjie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
        },
        {
          "name": "album",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.4599609375,
          "content": "apply from: \"config.gradle\"\n\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}"
        },
        {
          "name": "config.gradle",
          "type": "blob",
          "size": 1.796875,
          "content": "ext {\n    plugins = [\n            library    : 'com.android.library',\n            application: 'com.android.application',\n            maven      : 'com.github.dcendents.android-maven',\n            bintray    : 'com.jfrog.bintray'\n    ]\n\n    android = [\n            applicationId    : \"com.yanzhenjie.album.sample\",\n            compileSdkVersion: 28,\n            buildToolsVersion: \"28.0.3\",\n\n            minSdkVersion    : 14,\n            targetSdkVersion : 28,\n\n            versionCode      : 27,\n            versionName      : \"2.1.3\",\n    ]\n\n    bintray = [\n            version       : \"2.1.3\",\n\n            siteUrl       : 'https://github.com/yanzhenjie/Album',\n            gitUrl        : 'git@github.com:yanzhenjie/Album.git',\n\n            group         : \"com.yanzhenjie\",\n\n            packaging     : 'aar',\n            name          : 'Album',\n            description   : 'Album for android',\n\n            licenseName   : 'The Apache Software License, Version 2.0',\n            licenseUrl    : 'http://www.apache.org/licenses/LICENSE-2.0.txt',\n\n            developerId   : 'yanzhenjie',\n            developerName : 'yanzhenjie',\n            developerEmail: 'smallajax@foxmail.com',\n\n            binrayLibrary : \"Album\",\n            bintrayRepo   : \"maven\",\n            bintrayUser   : 'yolanda',\n            bintrayLicense: \"Apache-2.0\"\n    ]\n\n    dependencies = [\n            mediaScanner: 'com.yanzhenjie:mediascanner:1.0.3',\n\n            design      : 'com.android.support:design:28.0.0',\n            appCompat   : 'com.android.support:appcompat-v7:28.0.0',\n            recyclerView: 'com.android.support:recyclerview-v7:28.0.0',\n            cardView    : 'com.android.support:cardview-v7:28.0.0',\n\n            album       : 'com.yanzhenjie:album:2.1.3',\n            glide       : 'com.github.bumptech.glide:glide:3.8.0'\n    ]\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.166015625,
          "content": "org.gradle.jvmargs=-Xmx1536m\n#systemProp.http.proxyHost=127.0.0.1\n#systemProp.http.proxyPort=12333\n#systemProp.https.proxyHost=127.0.0.1\n#systemProp.https.proxyPort=12333"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include ':sample', ':album'"
        }
      ]
    }
  ]
}