{
  "metadata": {
    "timestamp": 1736608893688,
    "page": 76,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apache/calcite",
      "stars": 4680,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".asf.yaml",
          "type": "blob",
          "size": 1.3916015625,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ngithub:\n  description: \"Apache Calcite\"\n  homepage: https://calcite.apache.org/\n  features:\n    wiki: false\n    issues: false\n    projects: false\n  enabled_merge_buttons:\n    # \"squash and merge\" replaces committer with noreply@github, and we don't want that\n    # See https://lists.apache.org/thread/vxxpt1x316kjryb4dptsbs95p66d9xrv\n    squash:  false\n    # We prefer linear history, so creating merge commits is disabled in UI\n    merge:   false\n    rebase:  true\nnotifications:\n    commits:      commits@calcite.apache.org\n    issues:       issues@calcite.apache.org\n    pullrequests: commits@calcite.apache.org\n    jira_options: link label\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.6171875,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\n\n[{*.sh,gradlew}]\nend_of_line = lf\n\n[{*.bat,*.cmd}]\nend_of_line = crlf\n\n[{*.kts,*.kt}]\nij_kotlin_code_style_defaults = KOTLIN_OFFICIAL\nij_kotlin_name_count_to_use_star_import = 99\nij_kotlin_name_count_to_use_star_import_for_members = 99\nij_java_use_single_class_imports = true\nmax_line_length = 100\nij_any_wrap_long_lines = true\n\n[*.astub]\nindent_size = 2\n\n[*.java]\n# Doc: https://youtrack.jetbrains.com/issue/IDEA-170643#focus=streamItem-27-3708697.0-0\n# $ means \"static\"\nij_java_imports_layout = org.apache.calcite.**,|,org.apache.**,|,au.com.**,|,com.**,|,io.**,|,mondrian.**,|,net.**,|,org.**,|,scala.**,|,java.**,javax.**,|,*,|,$com.**,|,$org.apache.calcite.**,|,$org.apache.**,|,$org.**,|,$java,|,$*\nindent_size = 2\ntab_width = 2\nmax_line_length = 100\nij_any_spaces_around_additive_operators = true\nij_any_spaces_around_assignment_operators = true\nij_any_spaces_around_bitwise_operators = true\nij_any_spaces_around_equality_operators = true\nij_any_spaces_around_lambda_arrow = true\nij_any_spaces_around_logical_operators = true\nij_any_spaces_around_multiplicative_operators = true\nij_any_spaces_around_relational_operators = true\nij_any_spaces_around_shift_operators = true\nij_continuation_indent_size = 4\nij_java_if_brace_force = always\nij_java_indent_case_from_switch = false\nij_java_space_after_colon = true\nij_java_space_before_colon = true\nij_java_ternary_operation_signs_on_next_line = true\nij_java_use_single_class_imports = true\nij_java_wrap_long_lines = true\nij_java_align_multiline_parameters = false\n\n[*.xml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.1044921875,
          "content": "# Auto detect text files and perform LF normalization\n*        text=auto\n\n*.cs     text diff=csharp\n*.java   text diff=java\n*.html   text diff=html\n*.kt     text diff=kotlin\n*.kts    text diff=kotlin\n*.md     text diff=markdown\n*.py     text diff=python executable\n*.pl     text diff=perl executable\n*.pm     text diff=perl\n*.css    text diff=css\n*.js     text\n*.sql    text\n*.q      text\n\n*.sh     text eol=lf executable\ngradlew  text eol=lf executable\nsqlsh    text eol=lf executable\nsqlline  text eol=lf executable\n\n#test files, use lf so that size is same on windows as well\ndata/files/*.dat    text eol=lf\n\n*.bat    text eol=crlf\n*.cmd    text eol=crlf\n*.csproj text merge=union eol=crlf\n*.sln    text merge=union eol=crlf\n\n# Take the union of the lines during merge\n# It avoids false merge conflicts when different lines are added close to each other\n# However, it might result in duplicate lines if two commits edit the same line differently.\n# If different commits add exactly the same line, then merge produces only one line.\n/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties text merge=union\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4609375,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to you under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n*~\n.DS_Store\n.gradle\n/target\n/*/target\n/example/*/target\n/build\n/*/build\n/example/*/build\n/buildSrc/build\n/buildSrc/subprojects/*/build\n/site/.jekyll-cache\n\n# VSCode Java plugin\n/example/*/bin\n/*/bin\n/bin\n/.vscode/*\n\n# IDEA\n/out\n/*/out/\n/example/*/out\n# The star is required for further !/.idea/ to work, see https://git-scm.com/docs/gitignore\n/.idea/*\n# Icon for JetBrains Toolbox\n!/.idea/icon.png\n!/.idea/vcs.xml\n*.iml\n\nsettings.xml\n.classpath.txt\n.fullclasspath.txt\n\n# eclipse\n.project\n.buildpath\n.classpath\n.factorypath\n.settings\n.checkstyle\n\n# netbeans\nnb-configuration.xml\n*/nb-configuration.xml\n\n.mvn/wrapper/maven-wrapper.jar\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# jenv\n.java-version\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 6.630859375,
          "content": "# Git mail map; see 'git help mailmap' for details.\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to you under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nAbhishek Dasgupta <abhishekdasgupta005@gmail.com>\nAdam Kennedy <adamkennedybackup@gmail.com>\nAlan Jin <jinlantao@gmail.com>\nAli Mansour <Ali.MANSOUR@murex.com>\nAmir Gajst <amir.gajst@sisense.com>\nBotong Huang <botong.huang@alibaba-inc.com>\nBowen Yang <bowen.yang@kyligence.io>\nCancai Cai <2356672992@qq.com>\nCancai Cai <77189278+caicancai@users.noreply.github.com>\nCancai Cai <cc.cai@aftership.com>\nCharbel Yazbeck <cyazbeck@murex.com>\nChen Kai <chk19940609@gmail.com>\nChunhui Shi <cshi@maprtech.com>\nChunwei Lei <chunwei.lcw@alibaba-inc.com>\nChunwei Lei <chunwei.leii@gmail.com>\nChunwei Lei <chunweilcw@163.com>\nDaniel Henneberger <git@danielhenneberger.com>\nDaniel Henneberger <me@danielhenneberger.com>\nDanny Chan <yuzhao.cyz@alibaba-inc.com>\nDanny Chan <yuzhao.cyz@gmail.com>\nDarion Yaphet <darion.yaphet@gmail.com>\nDavid Handermann <exceptionfactory@apache.org>\nDhirenda Gautam <dhirenda.gautam@datametica.com>\nDivyanshu Srivastava <divyanshu.s@datametica.com>\nDmitry Sysolyatin <dm.sysolyatin@gmail.com>\nDmitry Sysolyatin <dmsysolyatin@gmail.com>\nDrew Schmitt <dasch@google.com>\nDylan Adams <dylan.adams@gmail.com>\nEvgeniy Stanilovskiy <eugen.stan@netdava.com> # aka Eugen Stan, Evgeny Stanilovsky\nEvgeniy Stanilovskiy <stanilovsky@gmail.com>\nEvgeniy Stanilovsky <zstan@apache.com>\nEvgeniy Stanilovsky <zstan@apache.org>\nFan Luo <fan.luo@ly.com>\nFeng Guo <guofeng.my@bytedance.com>\nFeng Zhu <fengzhu@apache.org> # DonnyZone at github\nFeng Zhu <fenzhu@ebay.com>\nFeng Zhu <wellfengzhu@gmail.com>\nFeng Zhu <wellfengzhu@tencent.com>\nForward Xu <forwardxu315@gmail.com>\nForward Xu <forwardxu@apache.com>\nForward Xu <forwardxu@apache.org> # aka XuQianJin-Stars, Qianjin Xu\nForward Xu <x1q1j1@163.com>\nGodfrey He <godfreyhe@163.com>\nHequn Cheng <chenghequn@gmail.com>\nHong Shen (沈洪) <yuling.sh@alipay.com>\nHongyu Guo <macroguo@tencent.com>\nHongze Zhang <hongzezhang@tencent.com>\nHsuan-Yi Chu <hsuanyichu@apache.org>\nIan Bertolacci <ian.bertolacci@workday.com>\nJacky Lau <jackylau@apache.org> # aka Yong Liu\nJacky Lau <yongen.ly@alibaba-inc.com>\nJacky Woo <wuchienchao@qq.com>\nJacky Yin <jacky.yin@eoitek.com>\nJames Kim <james.kim@dremio.com>\nJanhui Dong <dongjianhui03@meituan.com>\nJark Wu (云邪) <wuchong.wc@alibaba-inc.com>\nJasmin Trada <jasmin.trada@dremio.com>\nJay Narale <jay.narale@dremio.com>\nJeffery Zhang (张俭) <zj48271@ly.com>\nJerin John <jerinjohn@google.com>\nJiajun Xie <jiajunbernoulli@foxmail.com> # aka Jiajun Bernoulli\nJiasen Sheng <angelzouxin@gmail.com>\nJie Cheng <18033291053@163.com>\nJin Xing <jinxing.corey@gmail.com>\nJin Xing <jx158167@antfin.com> # aka jx158167\nJoey Moore <jhugomoore@google.com>\nJohannes Schulte <johannes.schulte@gmail.com>\nJulian Feinauer <j.feinauer@pragmaticminds.de>\nJulian Hyde <jhyde@apache.org>\nJulian Hyde <jhyde@hydromatic.net>\nJulian Hyde <julian.hyde@looker.com>\nJulian Hyde <julianhyde@gmail.com>\nKevin Liew <kliew@apache.org>\nKevin Liew <kliewkliew@users.noreply.github.com>\nKhawla Mouhoubi <mouhoubi.khawla@gmail.com>\nKonstantin Orlov <korlov@apache.com>\nKonstantin Orlov <korlov@apache.org>\nKonstantin Orlov <korlov@gridgain.com>\nKrisztian Kasa <kasakrisz2@gmail.com>\nKrisztian Kasa <kasakrisz2@gmail.com>\nKrisztian Kasa <kkasa@cloudera.com>\nLei Shen <shenlang@zbyte-inc.com>\nLeoWangLZ <wanglongzhong2006@163.com> # aka Rheet Wong?\nLiao Xintao <chiyou@taobao.com>\nLincoln Lee <lincoln.lil@alibaba-inc.com>\nLiya Fan <fan_li_ya@foxmail.com>\nLouis Kang <louiskuang@google.com> # aka LM Kang\nMaryann Xue <maryann.xue@gmail.com>\nMaryann Xue <wei.xue@intel.com>\nMin Dai <daimin@outlook.com>\nMingcan Wang <jiefei30@126.com>\nMou Wu <wumou.4wei@outlook.com>\nMou Wu <wumou.wm@alibaba-inc.com>\nNick Riasanovsky <nick@bodo.ai> # aka Nicholas J Riasanovsky\nNishant Bangarwa <nishant.monu51@gmail.com>\nPavel Gubin <pavel@contiamo.com>\nPawel Ruchaj <pawel+gitlab@profimedia.co.uk>\nPeng Wang <foxpengwang@tencent.com>\npengzhiwei <pengzhiwei2015@icloud.com>\nPranava B <pranava018@gmail.com>\nPraveen Kumar <praveen@dremio.com>\nQi Yu (余启) <yuqi5@xiaomi.com>\nRafay Qureshi <qureshi.rafay@gmail.com>\nRodrigo Rueda <rorueda@gmail.com>\nRuben Quesada Lopez <rubenql@gmail.com>\nRui Wang <amaliujia@163.com>\nRunkang He (何润康) <herunkang.runking@bytedance.com>\nRunkang He (何润康) <hrunker@gmail.com>\nSandeep Chada <44845836+chadasa@users.noreply.github.com>\nSergei Tsvetkov <9326077@gmail.com>\nSergey Nuyanzin <snuyanzin@gmail.com>\nShikha Somani <shikha.somani@servicesource.com>\nShradha Ambekar <Shradha_Ambekar@intuit.com>\nShuming Li <ming.moriarty@gmail.com>\nShuo Cheng <shuo.cs@alibaba-inc.com>\nSlim Bouguerra <slim.bouguerra@gmail.com>\nStamatis Zampetakis <15013153+zabetak@users.noreply.github.com>\nStamatis Zampetakis <zabetak@gmail.com>\nsuibianwanwan <1597226206@qq.com>\nsuibianwanwan <suibianwanwan33@foxmail.com>\nTaras Ledkov <tledkov@gridgain.com>\nTed Xu (少杰) <shaojie@alibaba-inc.com>\nVenki Korukanti <venki.korukanti@gmail.com>\nVenki Korukanti <venki@dremio.com>\nVladimir Ozerov <ppozerov@gmail.com>\nVova Vysotskyi <vvovyk@gmail.com>\nWang Yanlin <1989yanlinwang@163.com>\nWang Yanlin <yanzhi.wyl@antfin.com>\nWang Zhao <zoovwang@tencent.com>\nWeijie Wu <wuweijie@apache.org>\nWenhui Tang <wenhui_tang@yeah.net>\nWenrui Meng <wenrui@singleorigin.tech>\nXiaogang Zhou <zhouxiaogang@shizhuang-inc.com>\nXiong Duan <nobigogle@gmail.com>\nXu ZhaoHui <953396112@qq.com> # aka dz, xzh\nXurenhe <xurenhe19910131@gmail.com> # aka wojustme\nYanjing Wang <hannerwang@tencent.com>\nYeong Wei <laiyw@persistent.my>\nYingyu Wang <yingyu.w@gmail.com>\nYingyu Wang <yingyuwang@users.noreply.github.com>\nYiqun Zhang <guiyanakuang@gmail.com>\nYiwenWu <yiwenwu1006@gmail.com>\nYiwenWu <yiwenwu@tencent.com>\nZhe Hu <iluffzhe@163.com>\nZhen Wang <awang@marinsoftware.com>\nZhen Wang <zinking3@gmail.com>\nZhengqiang Duan <duanzhengqiang@apache.org>\nZhiqiang He <absolute005@qq.com>\nZhiqiang He <zhiqianghe@apache.org>\nZhong Yu <yuzhong.yz@alibaba-inc.com>\nZou Dan <zoudan@bytedance.com>\nZuozhi Wang <zuozhi.wzz@alibaba-inc.com>\n"
        },
        {
          "name": ".ratignore",
          "type": "blob",
          "size": 1.1845703125,
          "content": "**/local.properties\n**/.editorconfig\n**/.gitignore\n**/.gitattributes\n.github/workflows\n.ratignore\n**/META-INF/services/java.sql.Driver\n**/src/test/resources/**/*.csv\n**/src/test/resources/**/*.txt\n**/src/test/resources/bug/archers.json\n**/src/test/resources/foodmart-schema.spec\n**/src/test/resources/*.json\n**/data.txt\n**/data2.txt\n.idea/vcs.xml\nexample/csv/src/test/resources/smoke_test.sql\n\n# TODO: remove when pom.xml files are removed\nsrc/main/config/licenses\n\n# Files generated by Jekyll\nsite/_includes/anchor_links.html\nsite/_includes/docs_contents.html\nsite/_includes/docs_contents_mobile.html\nsite/_includes/docs_option.html\nsite/_includes/docs_ul.html\nsite/_includes/footer.html\nsite/_includes/header.html\nsite/_includes/news_contents.html\nsite/_includes/news_contents_mobile.html\nsite/_includes/news_item.html\nsite/_includes/primary-nav-items.html\nsite/_includes/section_nav.html\nsite/_includes/top.html\nsite/_layouts/default.html\nsite/_layouts/docs.html\nsite/_layouts/external.html\nsite/_layouts/news.html\nsite/_layouts/news_item.html\nsite/_layouts/page.html\nsite/_sass/**\nsite/Gemfile.lock\nsite/css/screen.scss\nsite/fonts/**\nsite/js/**\n\n# Images\nsite/img/*.png\nsite/favicon.ico\n\n# jenv\n.jenv-version\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 2.7275390625,
          "content": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nnode('ubuntu') {\n  def JAVA_JDK_17=tool name: 'jdk_17_latest', type: 'hudson.model.JDK'\n  stage('Checkout') {\n    if(env.CHANGE_ID) {\n      // By default checkout on PRs will fetch only that branch and nothing else. However, in order for the Sonar plugin\n      // to function properly we need to fetch also the target branch ${CHANGE_TARGET} so we need to customize the\n      // refspec. If the target branch of the PR is not present warnings like the following may appear:\n      // Could not find ref 'main' in refs/heads, refs/remotes/upstream or refs/remotes/origin\n      checkout([\n        $class: 'GitSCM',\n        branches: scm.branches,\n        doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,\n        extensions: scm.extensions,\n        userRemoteConfigs: scm.userRemoteConfigs + [[\n          name: 'origin',\n          refspec: scm.userRemoteConfigs[0].refspec+ \" +refs/heads/${CHANGE_TARGET}:refs/remotes/origin/${CHANGE_TARGET}\",\n          url: scm.userRemoteConfigs[0].url,\n          credentialsId: scm.userRemoteConfigs[0].credentialsId\n        ]],\n      ])\n    } else {\n      checkout scm\n    }\n  }\n  stage('Code Quality') {\n    timeout(time: 1, unit: 'HOURS') {\n      withEnv([\"Path+JDK=$JAVA_JDK_17/bin\",\"JAVA_HOME=$JAVA_JDK_17\"]) {\n        withCredentials([string(credentialsId: 'SONARCLOUD_TOKEN', variable: 'SONAR_TOKEN')]) {\n          if ( env.BRANCH_NAME.startsWith(\"PR-\") ) {\n            sh './gradlew build --no-parallel --no-daemon jacocoAggregateTestReport sonar -PenableJacoco -Porg.sonarqube.version=4.4.1.3373 -Dsonar.pullrequest.branch=${CHANGE_BRANCH} -Dsonar.pullrequest.base=${CHANGE_TARGET} -Dsonar.pullrequest.key=${CHANGE_ID} -Dsonar.token=${SONAR_TOKEN}'\n          } else {\n            sh './gradlew build --no-parallel --no-daemon jacocoAggregateTestReport sonar -PenableJacoco -Porg.sonarqube.version=4.4.1.3373 -Dsonar.branch.name=${BRANCH_NAME} -Dsonar.token=${SONAR_TOKEN}'\n          }\n        }\n      }\n    }\n  }\n  cleanWs()\n}\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.4814453125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\nAdditional License files can be found in the 'licenses' folder located in the same directory as the LICENSE file (i.e. this file)\n\n- Software produced outside the ASF which is available under other licenses (not Apache-2.0)\n\nMIT\n* font-awesome:font-awesome-code:4.2.0\nsite/_sass/_font-awesome.scss\n* cobyism:gridism:\nsite/_sass/_gridism.scss\n* jekyll:jekyll:\nsite/css/screen.scss\nsite/_includes/*.html\nsite/_layouts/*.html\nsite/news/releases/index.html\nsite/_sass/_mixins.scss\nsite/_sass/_pygments.scss\n* normalize:normalize:3.0.2\nsite/_sass/_normalize.scss\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.3681640625,
          "content": "Apache Calcite\nCopyright 2012-2024 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\nThis product is based on source code originally developed\nby DynamoBI Corporation, LucidEra Inc., SQLstream Inc. and others\nunder the auspices of the Eigenbase Foundation\nand released as the LucidDB project.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.4345703125,
          "content": "Apache Calcite release 1.38.0\n\nThis is a source distribution of Apache Calcite.\n\nChanges since the previous release are described in the\nsite/_docs/history.md file.\n\nThe LICENSE and NOTICE files contain license information.\n\nCheck \"Building from a source distribution\" section\nin site/_docs/howto.md for instructions on how to build the project.\n\nFurther information about Apache Calcite is available at its web site,\nhttp://calcite.apache.org.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9296875,
          "content": "<!--\n{% comment %}\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to you under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n{% endcomment %}\n-->\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.apache.calcite/calcite-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.apache.calcite/calcite-core)\n[![CI Status](https://github.com/apache/calcite/workflows/CI/badge.svg?branch=main)](https://github.com/apache/calcite/actions?query=branch%3Amain)\n\n# Apache Calcite\n\nApache Calcite is a dynamic data management framework.\n\nIt contains many of the pieces that comprise a typical\ndatabase management system but omits the storage primitives.\nIt provides an industry standard SQL parser and validator,\na customisable optimizer with pluggable rules and cost functions,\nlogical and physical algebraic operators, various transformation\nalgorithms from SQL to algebra (and the opposite), and many\nadapters for executing SQL queries over Cassandra, Druid,\nElasticsearch, MongoDB, Kafka, and others, with minimal\nconfiguration.\n\nFor more details, see the [home page](http://calcite.apache.org).\n\nThe project uses [JIRA](https://issues.apache.org/jira/browse/CALCITE)\nfor issue tracking. For further information, please see the [JIRA accounts guide](https://calcite.apache.org/develop/#jira-accounts).\n"
        },
        {
          "name": "arrow",
          "type": "tree",
          "content": null
        },
        {
          "name": "babel",
          "type": "tree",
          "content": null
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 48.9658203125,
          "content": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport com.github.spotbugs.SpotBugsTask\nimport com.github.vlsi.gradle.crlf.CrLfSpec\nimport com.github.vlsi.gradle.crlf.LineEndings\nimport com.github.vlsi.gradle.dsl.configureEach\nimport com.github.vlsi.gradle.git.FindGitAttributes\nimport com.github.vlsi.gradle.git.dsl.gitignore\nimport com.github.vlsi.gradle.properties.dsl.lastEditYear\nimport com.github.vlsi.gradle.properties.dsl.props\nimport com.github.vlsi.gradle.release.RepositoryType\nimport de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis\nimport de.thetaphi.forbiddenapis.gradle.CheckForbiddenApisExtension\nimport net.ltgt.gradle.errorprone.errorprone\nimport org.apache.calcite.buildtools.buildext.dsl.ParenthesisBalancer\nimport org.gradle.api.tasks.testing.logging.TestExceptionFormat\n\nplugins {\n    base\n    // java-base is needed for platform(...) resolution,\n    // see https://github.com/gradle/gradle/issues/14822\n    `java-base`\n    publishing\n    // Verification\n    checkstyle\n    calcite.buildext\n    jacoco\n    id(\"jacoco-report-aggregation\")\n    id(\"org.checkerframework\") apply false\n    id(\"com.github.autostyle\")\n    id(\"org.nosphere.apache.rat\")\n    id(\"com.github.spotbugs\")\n    id(\"de.thetaphi.forbiddenapis\") apply false\n    id(\"net.ltgt.errorprone\") apply false\n    id(\"com.github.vlsi.jandex\") apply false\n    id(\"org.owasp.dependencycheck\")\n    id(\"com.github.johnrengelman.shadow\") apply false\n    id(\"org.sonarqube\")\n    // IDE configuration\n    id(\"org.jetbrains.gradle.plugin.idea-ext\")\n    id(\"com.github.vlsi.ide\")\n    // Release\n    id(\"com.github.vlsi.crlf\")\n    id(\"com.github.vlsi.gradle-extensions\")\n    id(\"com.github.vlsi.license-gather\") apply false\n    id(\"com.github.vlsi.stage-vote-release\")\n    id(\"com.autonomousapps.dependency-analysis\") apply false\n}\n\nrepositories {\n    // At least for RAT\n    mavenCentral()\n}\n\ntasks.wrapper {\n    distributionType = Wrapper.DistributionType.BIN\n}\n\nfun reportsForHumans() = !(System.getenv()[\"CI\"]?.toBoolean() ?: false)\n\nval lastEditYear by extra(lastEditYear())\n\n// Do not enable spotbugs by default. Execute it only when -Pspotbugs is present\nval enableSpotBugs = props.bool(\"spotbugs\")\nval enableCheckerframework by props()\nval enableErrorprone by props()\nval enableDependencyAnalysis by props()\nval enableJacoco by props()\nval skipJandex by props()\nval skipCheckstyle by props()\nval skipAutostyle by props()\nval skipJavadoc by props()\nval enableMavenLocal by props()\nval enableGradleMetadata by props()\nval werror by props(true) // treat javac warnings as errors\n// Inherited from stage-vote-release-plugin: skipSign, useGpgCmd\n// Inherited from gradle-extensions-plugin: slowSuiteLogThreshold=0L, slowTestLogThreshold=2000L\n\n// Java versions prior to 1.8.0u202 have known issues that cause invalid bytecode in certain patterns\n// of annotation usage.\n// So we require at least 1.8.0u202\nSystem.getProperty(\"java.version\").let { version ->\n    version.takeIf { it.startsWith(\"1.8.0_\") }\n        ?.removePrefix(\"1.8.0_\")\n        ?.toIntOrNull()\n        ?.let {\n            require(it >= 202) {\n                \"Apache Calcite requires Java 1.8.0u202 or later. The current Java version is $version\"\n            }\n        }\n}\n\nide {\n    copyrightToAsf()\n    ideaInstructionsUri =\n        uri(\"https://calcite.apache.org/docs/howto.html#setting-up-intellij-idea\")\n    doNotDetectFrameworks(\"android\", \"jruby\")\n}\n\n// This task scans the project for gitignore / gitattributes, and that is reused for building\n// source/binary artifacts with the appropriate eol/executable file flags\n// It enables to automatically exclude patterns from .gitignore\nval gitProps by tasks.registering(FindGitAttributes::class) {\n    // Scanning for .gitignore and .gitattributes files in a task avoids doing that\n    // when distribution build is not required (e.g. code is just compiled)\n    root.set(rootDir)\n}\n\nval rat by tasks.getting(org.nosphere.apache.rat.RatTask::class) {\n    gitignore(gitProps)\n    verbose.set(true)\n    // Note: patterns are in non-standard syntax for RAT, so we use exclude(..) instead of excludeFile\n    exclude(rootDir.resolve(\".ratignore\").readLines())\n}\n\ntasks.validateBeforeBuildingReleaseArtifacts {\n    dependsOn(rat)\n}\n\nval String.v: String get() = rootProject.extra[\"$this.version\"] as String\n\nval buildVersion = \"calcite\".v + releaseParams.snapshotSuffix\n\nprintln(\"Building Apache Calcite $buildVersion\")\n\nreleaseArtifacts {\n    fromProject(\":release\")\n}\n\n// Configures URLs to SVN and Nexus\nreleaseParams {\n    tlp.set(\"Calcite\")\n    componentName.set(\"Apache Calcite\")\n    releaseTag.set(\"calcite-$buildVersion\")\n    rcTag.set(rc.map { \"calcite-$buildVersion-rc$it\" })\n    sitePreviewEnabled.set(false)\n    nexus {\n        // https://github.com/marcphilipp/nexus-publish-plugin/issues/35\n        packageGroup.set(\"org.apache.calcite\")\n        if (repositoryType.get() == RepositoryType.PROD) {\n            // org.apache.calcite at repository.apache.org\n            stagingProfileId.set(\"778fd0d4358bb\")\n        }\n    }\n    svnDist {\n        staleRemovalFilters {\n            includes.add(Regex(\".*apache-calcite-\\\\d.*\"))\n            validates.empty()\n            validates.add(provider {\n                Regex(\"release/calcite/apache-calcite-${version.toString().removeSuffix(\"-SNAPSHOT\")}\")\n            })\n        }\n    }\n}\n\nreporting {\n    reports {\n        if (enableJacoco) {\n            val jacocoAggregateTestReport by creating(JacocoCoverageReport::class) {\n                testType.set(TestSuiteType.UNIT_TEST)\n            }\n        }\n    }\n}\n\nval javadocAggregate by tasks.registering(Javadoc::class) {\n    group = JavaBasePlugin.DOCUMENTATION_GROUP\n    description = \"Generates aggregate javadoc for all the artifacts\"\n\n    val sourceSets = subprojects\n        .mapNotNull { it.extensions.findByType<SourceSetContainer>() }\n        .filter { it.names.contains(\"main\") }\n        .map { it.named(\"main\") }\n\n    classpath = files(sourceSets.map { set -> set.map { it.output + it.compileClasspath } })\n    setSource(sourceSets.map { set -> set.map { it.allJava } })\n    setDestinationDir(file(layout.buildDirectory.get().file(\"docs/javadocAggregate\")))\n}\n\n/** Similar to {@link #javadocAggregate} but includes tests.\n * CI uses this target to validate javadoc (e.g. checking for broken links). */\nval javadocAggregateIncludingTests by tasks.registering(Javadoc::class) {\n    description = \"Generates aggregate javadoc for all the artifacts\"\n\n    val sourceSets = subprojects\n        .filter { it.name != \"bom\" }\n        .mapNotNull { it.extensions.findByType<SourceSetContainer>() }\n        .flatMap { listOf(it.named(\"main\"), it.named(\"test\")) }\n\n    classpath = files(sourceSets.map { set -> set.map { it.output + it.compileClasspath } })\n    setSource(sourceSets.map { set -> set.map { it.allJava } })\n    setDestinationDir(file(layout.buildDirectory.get().file(\"docs/javadocAggregateIncludingTests\")))\n}\n\nval adaptersForSqlline = listOf(\n    \":arrow\", \":babel\", \":cassandra\", \":druid\", \":elasticsearch\",\n    \":file\", \":geode\", \":innodb\", \":kafka\", \":mongodb\",\n    \":pig\", \":piglet\", \":plus\", \":redis\", \":spark\", \":splunk\")\n\nval dataSetsForSqlline = listOf(\n    \"net.hydromatic:foodmart-data-hsqldb\",\n    \"net.hydromatic:scott-data-hsqldb\",\n    \"net.hydromatic:steelwheels-data-hsqldb\",\n    \"net.hydromatic:chinook-data-hsqldb\"\n)\n\nval sqllineClasspath by configurations.creating {\n    isCanBeConsumed = false\n    attributes {\n        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.JAVA_RUNTIME))\n        attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements.CLASSES_AND_RESOURCES))\n        attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, JavaVersion.current().majorVersion.toInt())\n        attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.EXTERNAL))\n    }\n}\n\n@CacheableRule\nabstract class AddDependenciesRule @Inject constructor(val dependencies: List<String>) : ComponentMetadataRule {\n    override fun execute(context: ComponentMetadataContext) {\n        listOf(\"compile\", \"runtime\").forEach { base ->\n            context.details.withVariant(base) {\n                withDependencies {\n                    dependencies.forEach {\n                        add(it)\n                    }\n                }\n            }\n        }\n    }\n}\n\ndependencies {\n    sqllineClasspath(platform(project(\":bom\")))\n    sqllineClasspath(project(\":testkit\"))\n    sqllineClasspath(\"sqlline:sqlline\")\n    for (p in adaptersForSqlline) {\n        sqllineClasspath(project(p))\n    }\n\n    components {\n        for (m in dataSetsForSqlline) {\n            withModule<AddDependenciesRule>(m)\n        }\n    }\n\n    for (m in dataSetsForSqlline) {\n        sqllineClasspath(m)\n    }\n    if (enableJacoco) {\n        for (p in subprojects) {\n            if (p.name != \"bom\") {\n                jacocoAggregation(p)\n            }\n        }\n    }\n}\n\nval buildSqllineClasspath by tasks.registering(Jar::class) {\n    description = \"Creates classpath-only jar for running SqlLine\"\n    // One can debug classpath with ./gradlew dependencies --configuration sqllineClasspath\n    inputs.files(sqllineClasspath).withNormalizer(ClasspathNormalizer::class.java)\n    archiveFileName.set(\"sqllineClasspath.jar\")\n    manifest {\n        attributes(\n            \"Main-Class\" to \"sqlline.SqlLine\",\n            \"Class-Path\" to provider {\n                // Class-Path is a list of URLs\n                sqllineClasspath.joinToString(\" \") {\n                    it.toURI().toURL().toString()\n                }\n            }\n        )\n    }\n}\n\nif (enableDependencyAnalysis) {\n    apply(plugin = \"com.autonomousapps.dependency-analysis\")\n    configure<com.autonomousapps.DependencyAnalysisExtension> {\n        // See https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin\n        // Most of the time the recommendations are good, however, there are cases the suggestsions\n        // are off, so we don't include the dependency analysis to CI workflow yet\n        // ./gradlew -PenableDependencyAnalysis buildHealth --no-parallel --no-daemon\n        issues {\n            all { // all projects\n                onAny {\n                    severity(\"fail\")\n                }\n                onRedundantPlugins {\n                    severity(\"ignore\")\n                }\n            }\n        }\n    }\n}\n\nval javaccGeneratedPatterns = arrayOf(\n    \"org/apache/calcite/jdbc/CalciteDriverVersion.java\",\n    \"**/parser/**/*ParserImpl.*\",\n    \"**/parser/**/*ParserImplConstants.*\",\n    \"**/parser/**/*ParserImplTokenManager.*\",\n    \"**/parser/**/PigletParser.*\",\n    \"**/parser/**/PigletParserConstants.*\",\n    \"**/parser/**/ParseException.*\",\n    \"**/parser/**/SimpleCharStream.*\",\n    \"**/parser/**/Token.*\",\n    \"**/parser/**/TokenMgrError.*\",\n    \"**/org/apache/calcite/runtime/Resources.java\",\n    \"**/parser/**/*ParserTokenManager.*\"\n)\n\nfun PatternFilterable.excludeJavaCcGenerated() {\n    exclude(*javaccGeneratedPatterns)\n}\n\nfun com.github.autostyle.gradle.BaseFormatExtension.license() {\n    licenseHeader(rootProject.ide.licenseHeader) {\n        copyrightStyle(\"bat\", com.github.autostyle.generic.DefaultCopyrightStyle.PAAMAYIM_NEKUDOTAYIM)\n        copyrightStyle(\"cmd\", com.github.autostyle.generic.DefaultCopyrightStyle.PAAMAYIM_NEKUDOTAYIM)\n    }\n    trimTrailingWhitespace()\n    endWithNewline()\n}\n\nsonarqube {\n    properties {\n        property(\"sonar.test.inclusions\", \"**/*Test*/**\")\n        property(\"sonar.coverage.jacoco.xmlReportPaths\", layout.buildDirectory.get().file(\"reports/jacoco/jacocoAggregateTestReport/jacocoAggregateTestReport.xml\"))\n    }\n}\n\nallprojects {\n    group = \"org.apache.calcite\"\n    version = buildVersion\n\n    apply(plugin = \"com.github.vlsi.gradle-extensions\")\n\n    repositories {\n        // RAT and Autostyle dependencies\n        mavenCentral()\n    }\n\n    val javaUsed = file(\"src/main/java\").isDirectory\n    if (javaUsed) {\n        apply(plugin = \"java-library\")\n        configurations {\n            \"implementation\" {\n                exclude(group = \"org.jetbrains\", module = \"annotations\")\n                exclude(group = \"org.bouncycastle\", module = \"bcprov-jdk15on\")\n            }\n        }\n    }\n\n    plugins.withId(\"java-library\") {\n        dependencies {\n            \"annotationProcessor\"(platform(project(\":bom\")))\n            \"implementation\"(platform(project(\":bom\")))\n            \"testAnnotationProcessor\"(platform(project(\":bom\")))\n        }\n    }\n\n    val hasTests = file(\"src/test/java\").isDirectory || file(\"src/test/kotlin\").isDirectory\n    if (hasTests) {\n        // Add default tests dependencies\n        dependencies {\n            val testImplementation by configurations\n            val testRuntimeOnly by configurations\n            testImplementation(platform(\"org.junit:junit-bom\"))\n            testImplementation(\"org.junit.jupiter:junit-jupiter\")\n            testImplementation(\"org.hamcrest:hamcrest\")\n            if (project.props.bool(\"junit4\", default = false)) {\n                // Allow projects to opt-out of junit dependency, so they can be JUnit5-only\n                testImplementation(\"junit:junit\")\n                testRuntimeOnly(\"org.junit.vintage:junit-vintage-engine\")\n            }\n        }\n        if (enableJacoco) {\n            apply(plugin = \"jacoco\")\n        }\n    }\n\n    if (!skipAutostyle) {\n        apply(plugin = \"com.github.autostyle\")\n        autostyle {\n            kotlinGradle {\n                license()\n                ktlint()\n            }\n            format(\"configs\") {\n                filter {\n                    include(\"**/*.sh\", \"**/*.bsh\", \"**/*.cmd\", \"**/*.bat\")\n                    include(\"**/*.properties\", \"**/*.yml\")\n                    include(\"**/*.xsd\", \"**/*.xsl\", \"**/*.xml\")\n                    include(\"**/*.fmpp\", \"**/*.ftl\", \"**/*.jj\")\n                    // Autostyle does not support gitignore yet https://github.com/autostyle/autostyle/issues/13\n                    exclude(\"bin/**\", \"out/**\", \"target/**\", \"gradlew*\")\n                    exclude(rootDir.resolve(\".ratignore\").readLines())\n                }\n                license()\n                endWithNewline()\n            }\n            format(\"web\") {\n                filter {\n                    include(\"**/*.md\", \"**/*.html\")\n                    exclude(\"**/test/**/*.html\")\n                }\n                trimTrailingWhitespace()\n                endWithNewline()\n            }\n            if (project == rootProject) {\n                // Spotless does not exclude subprojects when using target(...)\n                // So **/*.md is enough to scan all the md files in the codebase\n                // See https://github.com/diffplug/spotless/issues/468\n                format(\"markdown\") {\n                    filter.include(\"**/*.md\")\n                    // Flot is known to have trailing whitespace, so the files\n                    // are kept in their original format (e.g. to simplify diff on library upgrade)\n                    endWithNewline()\n                }\n            }\n        }\n        plugins.withId(\"org.jetbrains.kotlin.jvm\") {\n            autostyle {\n                kotlin {\n                    licenseHeader(rootProject.ide.licenseHeader)\n                    ktlint {\n                        userData(mapOf(\"disabled_rules\" to \"import-ordering\"))\n                    }\n                    trimTrailingWhitespace()\n                    endWithNewline()\n                }\n            }\n        }\n    }\n    if (!skipCheckstyle) {\n        apply<CheckstylePlugin>()\n        // This will be config_loc in Checkstyle (checker.xml)\n        val configLoc = File(rootDir, \"src/main/config/checkstyle\")\n        checkstyle {\n            toolVersion = \"checkstyle\".v\n            isShowViolations = true\n            configDirectory.set(configLoc)\n            configFile = configDirectory.get().file(\"checker.xml\").asFile\n        }\n        tasks.register(\"checkstyleAll\") {\n            dependsOn(tasks.withType<Checkstyle>())\n        }\n        tasks.configureEach<Checkstyle> {\n            // Excludes here are faster than in suppressions.xml\n            // Since here we can completely remove file from the analysis.\n            // On the other hand, supporessions.xml still analyzes the file, and\n            // then it recognizes it should suppress all the output.\n            excludeJavaCcGenerated()\n            // Workaround for https://github.com/gradle/gradle/issues/13927\n            // Absolute paths must not be used as they defeat Gradle build cache\n            // Unfortunately, Gradle passes only config_loc variable by default, so we make\n            // all the paths relative to config_loc\n            configProperties!![\"cache_file\"] =\n                layout.buildDirectory.asFile.get().resolve(\"checkstyle/cacheFile\").relativeTo(configLoc)\n        }\n        // afterEvaluate is to support late sourceSet addition (e.g. jmh sourceset)\n        afterEvaluate {\n            tasks.configureEach<Checkstyle> {\n                // Checkstyle 8.26 does not need classpath, see https://github.com/gradle/gradle/issues/14227\n                classpath = files()\n            }\n        }\n    }\n    if (!skipAutostyle || !skipCheckstyle) {\n        tasks.register(\"style\") {\n            group = LifecycleBasePlugin.VERIFICATION_GROUP\n            description = \"Formats code (license header, import order, whitespace at end of line, ...) and executes Checkstyle verifications\"\n            if (!skipAutostyle) {\n                dependsOn(\"autostyleApply\")\n            }\n            if (!skipCheckstyle) {\n                dependsOn(\"checkstyleAll\")\n            }\n        }\n    }\n\n    tasks.configureEach<AbstractArchiveTask> {\n        // Ensure builds are reproducible\n        isPreserveFileTimestamps = false\n        isReproducibleFileOrder = true\n        dirMode = \"775\".toInt(8)\n        fileMode = \"664\".toInt(8)\n    }\n\n    tasks {\n        configureEach<Javadoc> {\n            excludeJavaCcGenerated()\n            (options as StandardJavadocDocletOptions).apply {\n                // Please refrain from using non-ASCII chars below since the options are passed as\n                // javadoc.options file which is parsed with \"default encoding\"\n                // locale should be placed at the head of any options: https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html#getLocale\n                locale = \"en_US\"\n                noTimestamp.value = true\n                showFromProtected()\n                // javadoc: error - The code being documented uses modules but the packages\n                // defined in https://docs.oracle.com/en/java/javase/17/docs/api/ are in the unnamed module\n                source = \"1.8\"\n                docEncoding = \"UTF-8\"\n                charSet = \"UTF-8\"\n                encoding = \"UTF-8\"\n                docTitle = \"Apache Calcite API\"\n                windowTitle = \"Apache Calcite API\"\n                header = \"<b>Apache Calcite</b>\"\n                bottom =\n                    \"Copyright &copy; 2012-$lastEditYear Apache Software Foundation. All Rights Reserved.\"\n                if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {\n                    addBooleanOption(\"html5\", true)\n                    links(\"https://docs.oracle.com/en/java/javase/17/docs/api/\")\n                } else {\n                    links(\"https://docs.oracle.com/javase/8/docs/api/\")\n                }\n            }\n        }\n    }\n\n    plugins.withType<JavaPlugin> {\n        configure<JavaPluginExtension> {\n            sourceCompatibility = JavaVersion.VERSION_1_8\n            targetCompatibility = JavaVersion.VERSION_1_8\n        }\n        configure<JavaPluginExtension> {\n            consistentResolution {\n                useCompileClasspathVersions()\n            }\n        }\n\n        repositories {\n            if (enableMavenLocal) {\n                mavenLocal()\n            }\n            mavenCentral()\n        }\n        val sourceSets: SourceSetContainer by project\n\n        apply(plugin = \"de.thetaphi.forbiddenapis\")\n        apply(plugin = \"maven-publish\")\n\n        if (!skipJandex) {\n            apply(plugin = \"com.github.vlsi.jandex\")\n\n            project.configure<com.github.vlsi.jandex.JandexExtension> {\n                toolVersion.set(\"jandex\".v)\n                skipIndexFileGeneration()\n            }\n        }\n\n        if (!enableGradleMetadata) {\n            tasks.withType<GenerateModuleMetadata> {\n                enabled = false\n            }\n        }\n\n        if (!skipAutostyle) {\n            autostyle {\n                java {\n                    filter.exclude(*javaccGeneratedPatterns +\n                            \"**/test/java/*.java\" +\n                            \"**/RelRule.java\" /** remove as part of CALCITE-4831 **/)\n                    license()\n                    if (!project.props.bool(\"junit4\", default = false)) {\n                        replace(\"junit5: Test\", \"org.junit.Test\", \"org.junit.jupiter.api.Test\")\n                        replaceRegex(\"junit5: Before\", \"org.junit.Before\\\\b\", \"org.junit.jupiter.api.BeforeEach\")\n                        replace(\"junit5: BeforeClass\", \"org.junit.BeforeClass\", \"org.junit.jupiter.api.BeforeAll\")\n                        replaceRegex(\"junit5: After\", \"org.junit.After\\\\b\", \"org.junit.jupiter.api.AfterEach\")\n                        replace(\"junit5: AfterClass\", \"org.junit.AfterClass\", \"org.junit.jupiter.api.AfterAll\")\n                        replace(\"junit5: Ignore\", \"org.junit.Ignore\", \"org.junit.jupiter.api.Disabled\")\n                        replaceRegex(\"junit5: @Before\", \"@Before\\\\b\", \"@BeforeEach\")\n                        replace(\"junit5: @BeforeClass\", \"@BeforeClass\", \"@BeforeAll\")\n                        replaceRegex(\"junit5: @After\", \"@After\\\\b\", \"@AfterEach\")\n                        replace(\"junit5: @AfterClass\", \"@AfterClass\", \"@AfterAll\")\n                        replace(\"junit5: @Ignore\", \"@Ignore\", \"@Disabled\")\n                        replace(\"junit5: Assert.assertThat\", \"org.junit.Assert.assertThat\", \"org.hamcrest.MatcherAssert.assertThat\")\n                        replace(\"junit5: Assert.fail\", \"org.junit.Assert.fail\", \"org.junit.jupiter.api.Assertions.fail\")\n                    }\n                    replaceRegex(\"side by side comments\", \"(\\n\\\\s*+[*]*+/\\n)(/[/*])\", \"\\$1\\n\\$2\")\n                    replaceRegex(\"jsr305 nullable -> checkerframework\", \"javax\\\\.annotation\\\\.Nullable\", \"org.checkerframework.checker.nullness.qual.Nullable\")\n                    replaceRegex(\"jsr305 nonnull -> checkerframework\", \"javax\\\\.annotation\\\\.Nonnull\", \"org.checkerframework.checker.nullness.qual.NonNull\")\n                    importOrder(\n                        \"org.apache.calcite.\",\n                        \"org.apache.\",\n                        \"au.com.\",\n                        \"com.\",\n                        \"io.\",\n                        \"mondrian.\",\n                        \"net.\",\n                        \"org.\",\n                        \"scala.\",\n                        \"java\",\n                        \"\",\n                        \"static com.\",\n                        \"static org.apache.calcite.\",\n                        \"static org.apache.\",\n                        \"static org.\",\n                        \"static java\",\n                        \"static \"\n                    )\n                    removeUnusedImports()\n                    replaceRegex(\"Avoid 2+ blank lines after package\", \"^package\\\\s+([^;]+)\\\\s*;\\\\n{3,}\", \"package \\$1;\\n\\n\")\n                    replaceRegex(\"Avoid 2+ blank lines after import\", \"^import\\\\s+([^;]+)\\\\s*;\\\\n{3,}\", \"import \\$1;\\n\\n\")\n                    indentWithSpaces(2)\n                    replaceRegex(\"@Override should not be on its own line\", \"(@Override)\\\\s{2,}\", \"\\$1 \")\n                    replaceRegex(\"@Test should not be on its own line\", \"(@Test)\\\\s{2,}\", \"\\$1 \")\n                    replaceRegex(\"Newline in string should be at end of line\", \"\"\"\\\\n\" *\\+\"\"\", \"\\\\\\\\n\\\"\\n  +\")\n                    replaceRegex(\"require message for requireNonNull\", \"\"\"(?<!#)requireNonNull\\(\\s*(\\w+)\\s*(?:,\\s*\"(?!\\1\")\\w+\"\\s*)?\\)\"\"\", \"requireNonNull($1, \\\"$1\\\")\")\n                    // (?-m) disables multiline, so $ matches the very end of the file rather than end of line\n                    replaceRegex(\"Remove '// End file.java' trailer\", \"(?-m)\\n// End [^\\n]+\\\\.\\\\w+\\\\s*$\", \"\")\n                    replaceRegex(\"<p> should not be placed at the end of the line\", \"(?-m)\\\\s*+<p> *+\\n \\\\* \", \"\\n *\\n * <p>\")\n                    replaceRegex(\"Method parameter list should not end in whitespace or newline\", \"(?<!;)\\\\s+\\\\) \\\\{\", \") {\")\n                    replaceRegex(\"Method argument list should not end in whitespace or newline\", \"(?<!;)\\\\s+(\\\\)[);,])\", \"$1\")\n                    replaceRegex(\"Method argument list should not end in whitespace or newline\", \"(?<!;)(\\\\s+)(\\\\)+)[.]\", \"$2$1.\")\n                    replaceRegex(\"Long assignment should be broken after '=' (#1)\", \"^([^/*\\\"\\\\n]*) = ([^@\\\\n]*)\\\\(\\n( *)\", \"$1 =\\n$3$2(\")\n                    replaceRegex(\"Long assignment should be broken after '=' (#2)\", \"^([^/*\\\"\\\\n]*) = ([^@\\\\n]*)\\\\((.*,)\\n( *)\", \"$1 =\\n$4$2($3 \")\n                    replaceRegex(\"Long assignment should be broken after '=' (#3)\", \"^([^/*\\\"\\\\n]*) = ([^@\\\\n\\\"?]*[ ][?][ ][^@\\\\n:]*)\\n( *)\", \"$1 =\\n$3$2\\n$3    \")\n                    replaceRegex(\"trailing keyword: implements\", \"^([^*]*) (implements)\\\\n( *)\", \"$1\\n$3$2 \")\n                    // Assume developer copy-pasted the link, and updated text only, so the url is old, and we replace it with the proper one\n                    replaceRegex(\">[CALCITE-...] link styles: 1\", \"<a(?:(?!CALCITE-)[^>])++CALCITE-\\\\d+[^>]++>\\\\s*+\\\\[?(CALCITE-\\\\d+)\\\\]?\", \"<a href=\\\"https://issues.apache.org/jira/browse/\\$1\\\">[\\$1]\")\n                    // If the link was crafted manually, ensure it has [CALCITE-...] in the link text\n                    replaceRegex(\">[CALCITE-...] link styles: 2\", \"<a(?:(?!CALCITE-)[^>])++(CALCITE-\\\\d+)[^>]++>\\\\s*+\\\\[?CALCITE-\\\\d+\\\\]?\", \"<a href=\\\"https://issues.apache.org/jira/browse/\\$1\\\">[\\$1]\")\n                    replace(\"hamcrest: allOf\", \"org.hamcrest.core.AllOf.allOf\", \"org.hamcrest.CoreMatchers.allOf\")\n                    replace(\"hamcrest: aMapWithSize\", \"org.hamcrest.collection.IsMapWithSize.aMapWithSize\", \"org.hamcrest.Matchers.aMapWithSize\")\n                    replace(\"hamcrest: anyOf\", \"org.hamcrest.core.AnyOf.anyOf\", \"org.hamcrest.CoreMatchers.anyOf\")\n                    replace(\"hamcrest: containsString\", \"org.hamcrest.core.StringContains.containsString\", \"org.hamcrest.CoreMatchers.containsString\")\n                    replace(\"hamcrest: CoreMatchers\", \"import org.hamcrest.CoreMatchers;\", \"import static org.hamcrest.CoreMatchers.anything;\")\n                    replace(\"hamcrest: empty\", \"org.hamcrest.collection.IsEmptyCollection.empty\", \"org.hamcrest.Matchers.empty\")\n                    replace(\"hamcrest: emptyArray\", \"org.hamcrest.collection.IsArrayWithSize.emptyArray\", \"org.hamcrest.Matchers.emptyArray\")\n                    replace(\"hamcrest: endsWidth\", \"org.hamcrest.core.StringEndsWith.endsWith\", \"org.hamcrest.CoreMatchers.endsWith\")\n                    replace(\"hamcrest: equalTo\", \"org.hamcrest.core.IsEqual.equalTo\", \"org.hamcrest.CoreMatchers.equalTo\")\n                    replace(\"hamcrest: greaterThanOrEqualTo\", \"org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo\", \"org.hamcrest.Matchers.greaterThanOrEqualTo\")\n                    replace(\"hamcrest: greaterThan\", \"org.hamcrest.number.OrderingComparison.greaterThan\", \"org.hamcrest.Matchers.greaterThan\")\n                    replace(\"hamcrest: hasItem\", \"org.hamcrest.core.IsIterableContaining.hasItem\", \"org.hamcrest.CoreMatchers.hasItem\")\n                    replace(\"hamcrest: hasItems\", \"org.hamcrest.core.IsIterableContaining.hasItems\", \"org.hamcrest.CoreMatchers.hasItems\")\n                    replace(\"hamcrest: hasSize\", \"org.hamcrest.collection.IsCollectionWithSize.hasSize\", \"org.hamcrest.Matchers.hasSize\")\n                    replace(\"hamcrest: hasToString\", \"org.hamcrest.object.HasToString.hasToString\", \"org.hamcrest.Matchers.hasToString\")\n                    replace(\"hamcrest: instanceOf\", \"org.hamcrest.core.IsInstanceOf.instanceOf\", \"org.hamcrest.CoreMatchers.instanceOf\")\n                    replace(\"hamcrest: instanceOf\", \"org.hamcrest.Matchers.instanceOf\", \"org.hamcrest.CoreMatchers.instanceOf\")\n                    replace(\"hamcrest: is\", \"org.hamcrest.core.Is.is\", \"org.hamcrest.CoreMatchers.is\")\n                    replace(\"hamcrest: is\", \"org.hamcrest.Matchers.is\", \"org.hamcrest.CoreMatchers.is\")\n                    replace(\"hamcrest: isA\", \"org.hamcrest.core.Is.isA\", \"org.hamcrest.CoreMatchers.isA\")\n                    replace(\"hamcrest: lessThanOrEqualTo\", \"org.hamcrest.number.OrderingComparison.lessThanOrEqualTo\", \"org.hamcrest.Matchers.lessThanOrEqualTo\")\n                    replace(\"hamcrest: lessThan\", \"org.hamcrest.number.OrderingComparison.lessThan\", \"org.hamcrest.Matchers.lessThan\")\n                    replace(\"hamcrest: Matchers\", \"import org.hamcrest.Matchers;\", \"import static org.hamcrest.Matchers.allOf;\")\n                    replace(\"hamcrest: notNullValue\", \"org.hamcrest.core.IsNull.notNullValue\", \"org.hamcrest.CoreMatchers.notNullValue\")\n                    replace(\"hamcrest: notNullValue\", \"org.hamcrest.Matchers.notNullValue\", \"org.hamcrest.CoreMatchers.notNullValue\")\n                    replace(\"hamcrest: not\", \"org.hamcrest.core.IsNot.not\", \"org.hamcrest.CoreMatchers.not\")\n                    replace(\"hamcrest: not\", \"org.hamcrest.Matchers.not\", \"org.hamcrest.CoreMatchers.not\")\n                    replace(\"hamcrest: nullValue\", \"org.hamcrest.core.IsNull.nullValue\", \"org.hamcrest.CoreMatchers.nullValue\")\n                    replace(\"hamcrest: nullValue\", \"org.hamcrest.Matchers.nullValue\", \"org.hamcrest.CoreMatchers.nullValue\")\n                    replace(\"hamcrest: sameInstance\", \"org.hamcrest.core.IsSame.sameInstance\", \"org.hamcrest.CoreMatchers.sameInstance\")\n                    replace(\"hamcrest: startsWith\", \"org.hamcrest.core.StringStartsWith.startsWith\", \"org.hamcrest.CoreMatchers.startsWith\")\n                    replaceRegex(\"hamcrest: hasToString\", \"\\\\.toString\\\\(\\\\), (is|equalTo)\\\\(\", \", hasToString\\\\(\")\n                    replaceRegex(\"hamcrest: length\", \"\\\\.length, (is|equalTo)\\\\(\", \", arrayWithSize\\\\(\")\n                    replaceRegex(\"hamcrest: size\", \"\\\\.size\\\\(\\\\), (is|equalTo)\\\\(\", \", hasSize\\\\(\")\n                    replaceRegex(\"use static import: parseBoolean\", \"Boolean\\\\.(parseBoolean\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseByte\", \"Byte\\\\.(parseByte\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseDouble\", \"Double\\\\.(parseDouble\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseFloat\", \"Float\\\\.(parseFloat\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseInt\", \"Integer\\\\.(parseInt\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseLong\", \"Long\\\\.(parseLong\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: parseLong\", \"Short\\\\.(parseShort\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: requireNonNull\", \"Objects\\\\.(requireNonNull\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: toImmutableList\", \"ImmutableList\\\\.(toImmutableList\\\\(\\\\))\", \"$1\")\n                    replaceRegex(\"use static import: checkArgument\", \"Preconditions\\\\.(checkArgument\\\\()\", \"$1\")\n                    replaceRegex(\"use static import: checkArgument\", \"Preconditions\\\\.(checkState\\\\()\", \"$1\")\n                    custom(\"((() preventer\", 1) { contents: String ->\n                        ParenthesisBalancer.apply(contents)\n                    }\n                }\n            }\n        }\n        if (enableSpotBugs) {\n            apply(plugin = \"com.github.spotbugs\")\n            spotbugs {\n                toolVersion = \"spotbugs\".v\n                reportLevel = \"high\"\n                //  excludeFilter = file(\"$rootDir/src/main/config/spotbugs/spotbugs-filter.xml\")\n                // By default spotbugs verifies TEST classes as well, and we do not want that\n                this.sourceSets = listOf(sourceSets[\"main\"])\n            }\n            dependencies {\n                // Parenthesis are needed here: https://github.com/gradle/gradle/issues/9248\n                (constraints) {\n                    \"spotbugs\"(\"org.ow2.asm:asm:${\"asm\".v}\")\n                    \"spotbugs\"(\"org.ow2.asm:asm-all:${\"asm\".v}\")\n                    \"spotbugs\"(\"org.ow2.asm:asm-analysis:${\"asm\".v}\")\n                    \"spotbugs\"(\"org.ow2.asm:asm-commons:${\"asm\".v}\")\n                    \"spotbugs\"(\"org.ow2.asm:asm-tree:${\"asm\".v}\")\n                    \"spotbugs\"(\"org.ow2.asm:asm-util:${\"asm\".v}\")\n                }\n            }\n        }\n\n        configure<CheckForbiddenApisExtension> {\n            failOnUnsupportedJava = false\n            ignoreSignaturesOfMissingClasses = true\n            suppressAnnotations.add(\"org.immutables.value.Generated\")\n            bundledSignatures.addAll(\n                listOf(\n                    \"jdk-unsafe\",\n                    \"jdk-deprecated\",\n                    \"jdk-non-portable\"\n                )\n            )\n            signaturesFiles = files(\"$rootDir/src/main/config/forbidden-apis/signatures.txt\")\n        }\n\n        if (enableErrorprone) {\n            apply(plugin = \"net.ltgt.errorprone\")\n            dependencies {\n                \"errorprone\"(\"com.google.errorprone:error_prone_core:${\"errorprone\".v}\")\n                \"annotationProcessor\"(\"com.google.guava:guava-beta-checker:1.0\")\n            }\n            tasks.withType<JavaCompile>().configureEach {\n                options.errorprone {\n                    disableWarningsInGeneratedCode.set(true)\n                    errorproneArgs.add(\"-XepExcludedPaths:.*/javacc/.*\")\n                    enable(\n                        \"MethodCanBeStatic\"\n                    )\n                    disable(\n                        \"ComplexBooleanConstant\",\n                        \"EqualsGetClass\",\n                        \"EqualsHashCode\", // verified in Checkstyle\n                        \"OperatorPrecedence\",\n                        \"MutableConstantField\",\n                        \"ReferenceEquality\",\n                        \"SameNameButDifferent\",\n                        \"TypeParameterUnusedInFormals\"\n                    )\n                    // Analyze issues, and enable the check\n                    disable(\n                        \"BigDecimalEquals\",\n                        \"DoNotCallSuggester\",\n                        \"StringSplitter\"\n                    )\n                }\n            }\n        }\n        if (enableCheckerframework) {\n            apply(plugin = \"org.checkerframework\")\n            dependencies {\n                \"checkerFramework\"(\"org.checkerframework:checker:${\"checkerframework\".v}\")\n                // CheckerFramework annotations might be used in the code as follows:\n                // dependencies {\n                //     \"compileOnly\"(\"org.checkerframework:checker-qual\")\n                //     \"testCompileOnly\"(\"org.checkerframework:checker-qual\")\n                // }\n                if (JavaVersion.current() == JavaVersion.VERSION_1_8) {\n                    // only needed for JDK 8\n                    \"checkerFrameworkAnnotatedJDK\"(\"org.checkerframework:jdk8\")\n                }\n            }\n            configure<org.checkerframework.gradle.plugin.CheckerFrameworkExtension> {\n                skipVersionCheck = true\n                // See https://checkerframework.org/manual/#introduction\n                checkers.add(\"org.checkerframework.checker.nullness.NullnessChecker\")\n                // Below checkers take significant time and they do not provide much value :-/\n                // checkers.add(\"org.checkerframework.checker.optional.OptionalChecker\")\n                // checkers.add(\"org.checkerframework.checker.regex.RegexChecker\")\n                // https://checkerframework.org/manual/#creating-debugging-options-progress\n                // extraJavacArgs.add(\"-Afilenames\")\n                extraJavacArgs.addAll(listOf(\"-Xmaxerrs\", \"10000\"))\n                // Consider Java assert statements for nullness and other checks\n                extraJavacArgs.add(\"-AassumeAssertionsAreEnabled\")\n                // https://checkerframework.org/manual/#stub-using\n                extraJavacArgs.add(\"-Astubs=\" +\n                        fileTree(\"$rootDir/src/main/config/checkerframework\") {\n                            include(\"**/*.astub\")\n                        }.asPath\n                )\n                if (project.path == \":core\") {\n                    extraJavacArgs.add(\"-AskipDefs=^org\\\\.apache\\\\.calcite\\\\.sql\\\\.parser\\\\.impl\\\\.\")\n                }\n                if (project.path == \":server\") {\n                    extraJavacArgs.add(\"-AskipDefs=^org\\\\.apache\\\\.calcite\\\\.sql\\\\.parser\\\\.ddl\\\\.\")\n                }\n            }\n        }\n\n        tasks {\n            configureEach<Jar> {\n                manifest {\n                    attributes[\"Bundle-License\"] = \"Apache-2.0\"\n                    attributes[\"Implementation-Title\"] = \"Apache Calcite\"\n                    attributes[\"Implementation-Version\"] = project.version\n                    attributes[\"Specification-Vendor\"] = \"The Apache Software Foundation\"\n                    attributes[\"Specification-Version\"] = project.version\n                    attributes[\"Specification-Title\"] = \"Apache Calcite\"\n                    attributes[\"Implementation-Vendor\"] = \"Apache Software Foundation\"\n                    attributes[\"Implementation-Vendor-Id\"] = \"org.apache.calcite\"\n                }\n            }\n\n            configureEach<CheckForbiddenApis> {\n                excludeJavaCcGenerated()\n                exclude(\n                    \"**/org/apache/calcite/adapter/os/Processes${'$'}ProcessFactory.class\",\n                    \"**/org/apache/calcite/adapter/os/OsAdapterTest.class\",\n                    \"**/org/apache/calcite/runtime/Resources${'$'}Inst.class\",\n                    \"**/org/apache/calcite/util/TestUnsafe.class\",\n                    \"**/org/apache/calcite/util/Unsafe.class\",\n                    \"**/org/apache/calcite/test/Unsafe.class\"\n                )\n            }\n\n            configureEach<JavaCompile> {\n                inputs.property(\"java.version\", System.getProperty(\"java.version\"))\n                inputs.property(\"java.vm.version\", System.getProperty(\"java.vm.version\"))\n                options.encoding = \"UTF-8\"\n                options.compilerArgs.add(\"-Xlint:deprecation\")\n                // JDK 1.8 is deprecated https://bugs.openjdk.org/browse/JDK-8173605\n                // and now it requires -Xlint:-options to mute warnings about its deprecation\n                options.compilerArgs.add(\"-Xlint:-options\")\n                if (werror) {\n                    options.compilerArgs.add(\"-Werror\")\n                }\n                if (enableCheckerframework) {\n                    options.forkOptions.memoryMaximumSize = \"2g\"\n                }\n            }\n            configureEach<Test> {\n                outputs.cacheIf(\"test results depend on the database configuration, so we shouldn't cache it\") {\n                    false\n                }\n                useJUnitPlatform {\n                    excludeTags(\"slow\")\n                }\n                testLogging {\n                    exceptionFormat = TestExceptionFormat.FULL\n                    showStandardStreams = true\n                }\n                exclude(\"**/*Suite*\")\n                if (JavaVersion.current() >= JavaVersion.VERSION_23) {\n                    // Subject.doAs is deprecated and does not work in JDK 23\n                    // and higher unless the (also deprecated) SecurityManager\n                    // is enabled. However, we depend on libraries Avatica and\n                    // Hadoop for our remote driver and Pig and Spark\n                    // adapters. So as a workaround we require enabling the\n                    // security manager on JDK 23 and higher. See\n                    // [CALCITE-6587], [CALCITE-6590] (Avatica), [HADOOP-19212],\n                    // https://openjdk.org/jeps/411.\n                    jvmArgs(\"-Djava.security.manager=allow\")\n                }\n                jvmArgs(\"-Xmx1536m\")\n                jvmArgs(\"-Djdk.net.URLClassPath.disableClassPathURLCheck=true\")\n                // Pass the property to tests\n                fun passProperty(name: String, default: String? = null) {\n                    val value = System.getProperty(name) ?: default\n                    value?.let { systemProperty(name, it) }\n                }\n                passProperty(\"java.awt.headless\")\n                passProperty(\"junit.jupiter.execution.parallel.enabled\", \"true\")\n                passProperty(\"junit.jupiter.execution.parallel.mode.default\", \"concurrent\")\n                passProperty(\"junit.jupiter.execution.timeout.default\", \"5 m\")\n                passProperty(\"user.language\", \"TR\")\n                passProperty(\"user.country\", \"tr\")\n                passProperty(\"user.timezone\", \"UTC\")\n                passProperty(\"calcite.avatica.version\", props.string(\"calcite.avatica.version\"))\n                passProperty(\"gradle.rootDir\", rootDir.toString())\n                val props = System.getProperties()\n                for (e in props.propertyNames() as `java.util`.Enumeration<String>) {\n                    if (e.startsWith(\"calcite.\") || e.startsWith(\"avatica.\")) {\n                        passProperty(e)\n                    }\n                }\n            }\n            // Cannot be moved above otherwise configure each will override\n            // also the specific configurations below.\n            register<Test>(\"testSlow\") {\n                group = LifecycleBasePlugin.VERIFICATION_GROUP\n                description = \"Runs the slow unit tests.\"\n                useJUnitPlatform() {\n                    includeTags(\"slow\")\n                }\n                jvmArgs(\"-Xmx6g\")\n            }\n            configureEach<SpotBugsTask> {\n                group = LifecycleBasePlugin.VERIFICATION_GROUP\n                if (enableSpotBugs) {\n                    description = \"$description (skipped by default, to enable it add -Dspotbugs)\"\n                }\n                reports {\n                    html.required.set(reportsForHumans())\n                    xml.required.set(!reportsForHumans())\n                }\n                enabled = enableSpotBugs\n            }\n            configureEach<JacocoReport> {\n                reports {\n                    // The reports are mainly consumed by Sonar, which only uses the XML format\n                    xml.required.set(true)\n                    html.required.set(false)\n                    csv.required.set(false)\n                }\n            }\n\n            afterEvaluate {\n                // Add default license/notice when missing\n                configureEach<Jar> {\n                    CrLfSpec(LineEndings.LF).run {\n                        into(\"META-INF\") {\n                            filteringCharset = \"UTF-8\"\n                            duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n                            // Note: we need \"generic Apache-2.0\" text without third-party items\n                            // So we use the text from $rootDir/config/ since source distribution\n                            // contains altered text at $rootDir/LICENSE\n                            textFrom(\"$rootDir/src/main/config/licenses/LICENSE\")\n                            textFrom(\"$rootDir/NOTICE\")\n                        }\n                    }\n                }\n            }\n        }\n\n        // Note: jars below do not normalize line endings.\n        // Those jars, however are not included to source/binary distributions\n        // so the normailzation is not that important\n\n        val testJar by tasks.registering(Jar::class) {\n            from(sourceSets[\"test\"].output)\n            archiveClassifier.set(\"tests\")\n        }\n\n        val sourcesJar by tasks.registering(Jar::class) {\n            from(sourceSets[\"main\"].allJava)\n            archiveClassifier.set(\"sources\")\n        }\n\n        val javadocJar by tasks.registering(Jar::class) {\n            from(tasks.named(JavaPlugin.JAVADOC_TASK_NAME))\n            archiveClassifier.set(\"javadoc\")\n        }\n\n        val archives by configurations.getting\n\n        // Parenthesis needed to use Project#getArtifacts\n        (artifacts) {\n            archives(sourcesJar)\n        }\n\n        base {\n            archivesName.set(\"calcite-$name\")\n        }\n\n        configure<PublishingExtension> {\n            if (project.path == \":\") {\n                // Do not publish \"root\" project. Java plugin is applied here for DSL purposes only\n                return@configure\n            }\n            if (!project.props.bool(\"nexus.publish\", default = true)) {\n                // Some of the artifacts do not need to be published\n                return@configure\n            }\n            publications {\n                create<MavenPublication>(project.name) {\n                    artifactId = base.archivesName.get()\n                    version = rootProject.version.toString()\n                    description = project.description\n                    from(components[\"java\"])\n\n                    if (!skipJavadoc) {\n                        // Eager task creation is required due to\n                        // https://github.com/gradle/gradle/issues/6246\n                        artifact(sourcesJar.get())\n                        artifact(javadocJar.get())\n                    }\n\n                    // Use the resolved versions in pom.xml\n                    // Gradle might have different resolution rules, so we set the versions\n                    // that were used in Gradle build/test.\n                    versionMapping {\n                        usage(Usage.JAVA_RUNTIME) {\n                            fromResolutionResult()\n                        }\n                        usage(Usage.JAVA_API) {\n                            fromResolutionOf(\"runtimeClasspath\")\n                        }\n                    }\n                    pom {\n                        withXml {\n                            val sb = asString()\n                            var s = sb.toString()\n                            // <scope>compile</scope> is Maven default, so delete it\n                            s = s.replace(\"<scope>compile</scope>\", \"\")\n                            // Cut <dependencyManagement> because all dependencies have the resolved versions\n                            s = s.replace(\n                                Regex(\n                                    \"<dependencyManagement>.*?</dependencyManagement>\",\n                                    RegexOption.DOT_MATCHES_ALL\n                                ),\n                                \"\"\n                            )\n                            sb.setLength(0)\n                            sb.append(s)\n                            // Re-format the XML\n                            asNode()\n                        }\n\n                        fun capitalize(input: String): String {\n                            return input.replaceFirstChar { it.uppercaseChar() }\n                        }\n                        name.set(\n                            (project.findProperty(\"artifact.name\") as? String) ?: \"Calcite ${capitalize(project.name)}\"\n                        )\n                        description.set(project.description ?: \"Calcite ${capitalize(project.name)}\")\n                        inceptionYear.set(\"2012\")\n                        url.set(\"https://calcite.apache.org\")\n                        licenses {\n                            license {\n                                name.set(\"The Apache License, Version 2.0\")\n                                url.set(\"https://www.apache.org/licenses/LICENSE-2.0.txt\")\n                                comments.set(\"A business-friendly OSS license\")\n                                distribution.set(\"repo\")\n                            }\n                        }\n                        issueManagement {\n                            system.set(\"Jira\")\n                            url.set(\"https://issues.apache.org/jira/browse/CALCITE\")\n                        }\n                        mailingLists {\n                            mailingList {\n                                name.set(\"Apache Calcite developers list\")\n                                subscribe.set(\"dev-subscribe@calcite.apache.org\")\n                                unsubscribe.set(\"dev-unsubscribe@calcite.apache.org\")\n                                post.set(\"dev@calcite.apache.org\")\n                                archive.set(\"https://lists.apache.org/list.html?dev@calcite.apache.org\")\n                            }\n                        }\n                        scm {\n                            connection.set(\"scm:git:https://gitbox.apache.org/repos/asf/calcite.git\")\n                            developerConnection.set(\"scm:git:https://gitbox.apache.org/repos/asf/calcite.git\")\n                            url.set(\"https://github.com/apache/calcite\")\n                            tag.set(\"HEAD\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "cassandra",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "druid",
          "type": "tree",
          "content": null
        },
        {
          "name": "elasticsearch",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "file",
          "type": "tree",
          "content": null
        },
        {
          "name": "geode",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 5.8740234375,
          "content": "#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to you under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\norg.gradle.jvmargs=-XX:+UseG1GC -Xmx1536m -XX:MaxMetaspaceSize=512m\norg.gradle.parallel=true\n# Build cache can be disabled with --no-build-cache option\norg.gradle.caching=true\n#org.gradle.caching.debug=true\n# See https://github.com/gradle/gradle/pull/11358 , https://issues.apache.org/jira/browse/INFRA-14923\n# repository.apache.org does not yet support .sha256 and .sha512 checksums\nsystemProp.org.gradle.internal.publish.checksums.insecure=true\n\n# This is version for Calcite itself\n# Note: it should not include \"-SNAPSHOT\" as it is automatically added by build.gradle.kts\n# Release version can be generated by using -Prelease or -Prc=<int> arguments\ncalcite.version=1.39.0\n# This is a version to be used from Maven repository. It can be overridden by localAvatica below\ncalcite.avatica.version=1.25.0\n\n# The options below configures the use of local clone (e.g. testing development versions)\n# You can pass un-comment it, or pass option -PlocalReleasePlugins, or -PlocalReleasePlugins=<path>\n# localReleasePlugins=../vlsi-release-plugins\n# localAvatica=../calcite-avatica\n\n# By default, Maven Local repository is not used\n# enableMavenLocal=true\n# Gradle metadata is not well supported in the build script, so it is disabled for now\n# publishGradleMetadata=true\n\n# Plugins\ncom.autonomousapps.dependency-analysis.version=0.71.0\norg.checkerframework.version=0.5.16\ncom.github.autostyle.version=3.0\ncom.github.johnrengelman.shadow.version=5.1.0\ncom.github.spotbugs.version=2.0.0\ncom.github.vlsi.vlsi-release-plugins.version=1.90\ncom.google.protobuf.version=0.8.10\nde.thetaphi.forbiddenapis.version=3.7\njacoco.version=0.8.12\nkotlin.version=1.9.22\nnet.ltgt.errorprone.version=1.3.0\nme.champeau.jmh.version=0.7.2\norg.jetbrains.gradle.plugin.idea-ext.version=0.5\norg.nosphere.apache.rat.version=0.8.1\norg.owasp.dependencycheck.version=6.1.6\norg.sonarqube.version=3.5.0.2730\ncom.gradle.develocity.version=3.17.6\ncom.gradle.common-custom-user-data-gradle-plugin.version=2.0.2\n\n\n# For now, we use Kotlin for tests only, so we don't want to include kotlin-stdlib dependency to the runtimeClasspath\n# See https://kotlinlang.org/docs/gradle.html#dependency-on-the-standard-library\nkotlin.stdlib.default.dependency=false\n\n# TODO\n# error_prone_core.version=2.3.3\n# docker-maven-plugin.version=1.2.0\n\n# Tools\ncheckerframework.version=3.10.0\ncheckstyle.version=8.28\nspotbugs.version=3.1.11\nerrorprone.version=2.5.1\n# The property is used in https://github.com/wildfly/jandex regression testing, so avoid renaming\njandex.version=2.2.3.Final\n\n# We support Guava versions as old as 21.0 but prefer more recent versions.\n# elasticsearch does not like asm:6.2.1+\naggdesigner-algorithm.version=6.0\napiguardian-api.version=1.1.2\narrow-gandiva.version=15.0.0\narrow.version=15.0.0\nasm.version=9.6\nbyte-buddy.version=1.14.15\ncassandra-all.version=4.1.3\ncassandra-java-driver-core.version=4.17.0\ncassandra-unit.version=4.3.1.0\nchinook-data-hsqldb.version=0.2\ncommons-codec.version=1.16.0\ncommons-dbcp2.version=2.11.0\ncommons-io.version=2.15.0\ncommons-lang3.version=3.13.0\ncommons-math3.version=3.6.1\ncommons-pool2.version=2.12.0\ncommons-collections4.version=4.4\ncommons-text.version=1.11.0\ndropwizard-metrics.version=4.0.5\n\n# do not upgrade this, new versions are Category X license.\nelasticsearch.version=7.10.2\nembedded-redis.version=0.6\njts-core.version=1.19.0\njts-io-common.version=1.19.0\nproj4j.version=1.2.2\nfoodmart-data-hsqldb.version=0.5\nfoodmart-data-json.version=0.4\nfoodmart-queries.version=0.4.1\ngeode-core.version=1.15.1\nguava.version=33.3.0-jre\nh2.version=2.1.210\nhadoop.version=2.10.2\nhamcrest-date.version=2.0.4\nhamcrest.version=2.1\nhsqldb.version=2.7.2\nhttpclient.version=4.5.9\nhttpcore.version=4.4.11\nhutool-all.version=5.8.23\nhydromatic.tpcds.version=0.4\nimmutables.version=2.8.8\ninnodb-java-reader.version=1.0.10\njackson-databind.version=2.15.0\njackson.version=2.15.0\njanino.version=3.1.11\njava-diff.version=1.1.2\njcip-annotations.version=1.0-1\njcommander.version=1.72\njedis.version=3.3.0\njetty.version=9.4.46.v20220331\njmh.version=1.12\njna.version=5.14.0\njna-platform.version=5.14.0\njoda-time.version=2.8.1\njson-path.version=2.9.0\njsr305.version=3.0.2\njsoup.version=1.11.3\njunit4.version=4.13.2\njunit5.version=5.9.1\nkafka-clients.version=2.1.1\nkerby.version=1.1.1\nlog4j2.version=2.17.1\nmockito.version=3.12.4\nmongodb-driver-sync.version=4.10.2\n# 1.43.0 is the last version with Java 8 support\nmongo-java-server.version=1.43.0\nmysql-connector-java.version=5.1.20\nnatty.version=0.13\nojdbc8.version=19.3.0.0\nopencsv.version=2.3\noshi-core.version=6.4.9\npig.version=0.16.0\npigunit.version=0.16.0\npostgresql.version=9.3-1102-jdbc41\nprotobuf.version=3.21.5\nquidem.version=0.11\nscala-library.version=2.10.3\nscott-data-hsqldb.version=0.2\nservlet.version=4.0.1\nsketches-core.version=0.9.0\nslf4j.version=1.7.25\nspark.version=2.2.2\nsqlline.version=1.12.0\nsql-logic-test.version=0.3\nsteelwheels-data-hsqldb.version=0.2\nteradata.tpcds.version=1.2\ntestcontainers.version=1.19.3\ntpch.version=1.0\nuzaygezen.version=0.2\nxalan.version=2.7.1\nxercesImpl.version=2.9.1\n\n# sonar properties\nsystemProp.sonar.gradle.skipCompile=true\nsystemProp.sonar.host.url=https://sonarcloud.io\nsystemProp.sonar.organization=apache\nsystemProp.sonar.projectKey=apache_calcite\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "innodb",
          "type": "tree",
          "content": null
        },
        {
          "name": "kafka",
          "type": "tree",
          "content": null
        },
        {
          "name": "linq4j",
          "type": "tree",
          "content": null
        },
        {
          "name": "mongodb",
          "type": "tree",
          "content": null
        },
        {
          "name": "pig",
          "type": "tree",
          "content": null
        },
        {
          "name": "piglet",
          "type": "tree",
          "content": null
        },
        {
          "name": "plus",
          "type": "tree",
          "content": null
        },
        {
          "name": "redis",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 4.5419921875,
          "content": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npluginManagement {\n    plugins {\n        fun String.v() = extra[\"$this.version\"].toString()\n        fun PluginDependenciesSpec.idv(id: String, key: String = id) = id(id) version key.v()\n\n        idv(\"com.gradle.develocity\")\n        idv(\"com.gradle.common-custom-user-data-gradle-plugin\")\n        idv(\"com.autonomousapps.dependency-analysis\")\n        idv(\"org.checkerframework\")\n        idv(\"com.github.autostyle\")\n        idv(\"com.github.johnrengelman.shadow\")\n        idv(\"com.github.spotbugs\")\n        idv(\"com.github.vlsi.crlf\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.github.vlsi.gradle-extensions\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.github.vlsi.ide\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.github.vlsi.jandex\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.github.vlsi.license-gather\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.github.vlsi.stage-vote-release\", \"com.github.vlsi.vlsi-release-plugins\")\n        idv(\"com.google.protobuf\")\n        idv(\"de.thetaphi.forbiddenapis\")\n        idv(\"jacoco\")\n        idv(\"me.champeau.jmh\")\n        idv(\"net.ltgt.errorprone\")\n        idv(\"org.jetbrains.gradle.plugin.idea-ext\")\n        idv(\"org.nosphere.apache.rat\")\n        idv(\"org.owasp.dependencycheck\")\n        idv(\"org.sonarqube\")\n        kotlin(\"jvm\") version \"kotlin\".v()\n    }\n    if (extra.has(\"enableMavenLocal\") && extra[\"enableMavenLocal\"].toString().ifBlank { \"true\" }.toBoolean()) {\n        repositories {\n            mavenLocal()\n            gradlePluginPortal()\n        }\n    }\n}\n\nplugins {\n    id(\"com.gradle.develocity\")\n    id(\"com.gradle.common-custom-user-data-gradle-plugin\")\n}\n\n// This is the name of a current project\n// Note: it cannot be inferred from the directory name as developer might clone Calcite to calcite_tmp folder\nrootProject.name = \"calcite\"\n\ninclude(\n    \"bom\",\n    \"release\",\n    \"arrow\",\n    \"babel\",\n    \"cassandra\",\n    \"core\",\n    \"druid\",\n    \"elasticsearch\",\n    \"example:csv\",\n    \"example:function\",\n    \"file\",\n    \"geode\",\n    \"innodb\",\n    \"kafka\",\n    \"linq4j\",\n    \"mongodb\",\n    \"pig\",\n    \"piglet\",\n    \"plus\",\n    \"redis\",\n    \"server\",\n    \"spark\",\n    \"splunk\",\n    \"testkit\",\n    \"ubenchmark\"\n)\n\n// See https://github.com/gradle/gradle/issues/1348#issuecomment-284758705 and\n// https://github.com/gradle/gradle/issues/5321#issuecomment-387561204\n// Gradle inherits Ant \"default excludes\", however we do want to archive those files\norg.apache.tools.ant.DirectoryScanner.removeDefaultExclude(\"**/.gitattributes\")\norg.apache.tools.ant.DirectoryScanner.removeDefaultExclude(\"**/.gitignore\")\n\nfun property(name: String) =\n    when (extra.has(name)) {\n        true -> extra.get(name) as? String\n        else -> null\n    }\n\nval isCiServer = System.getenv().containsKey(\"CI\")\n\ndevelocity {\n    server = \"https://ge.apache.org\"\n    projectId = \"calcite\"\n\n    buildScan {\n        uploadInBackground = !isCiServer\n        publishing.onlyIf { it.isAuthenticated() }\n        obfuscation {\n            ipAddresses { addresses -> addresses.map { \"0.0.0.0\" } }\n        }\n    }\n}\n\n// Cache build artifacts, so expensive operations do not need to be re-computed\nbuildCache {\n    local {\n        isEnabled = !isCiServer\n    }\n}\n\n// This enables to use local clone of vlsi-release-plugins for debugging purposes\nproperty(\"localReleasePlugins\")?.ifBlank { \"../vlsi-release-plugins\" }?.let {\n    println(\"Importing project '$it'\")\n    includeBuild(it)\n}\n\n// This enables to open both Calcite and Calcite Avatica as a single project\nproperty(\"localAvatica\")?.ifBlank { \"../calcite-avatica\" }?.let {\n    println(\"Importing project '$it'\")\n    includeBuild(it)\n}\n\n// This enables to try local Autostyle\nproperty(\"localAutostyle\")?.ifBlank { \"../autostyle\" }?.let {\n    println(\"Importing project '$it'\")\n    includeBuild(\"../autostyle\")\n}\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "spark",
          "type": "tree",
          "content": null
        },
        {
          "name": "splunk",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlline",
          "type": "blob",
          "size": 1.888671875,
          "content": "#!/bin/bash\n# sqlline - Script to launch SQL shell\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to you under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Example:\n# $ ./sqlline\n# sqlline> !connect jdbc:calcite: admin admin\n\n# The script updates the classpath on each execution,\n# You might use CACHE_SQLLINE_CLASSPATH=Y environment variable to cache it\n# To build classpath jar manually use ./gradlew buildSqllineClasspath\n\n# Deduce whether we are running cygwin\ncase $(uname -s) in\n(CYGWIN*) cygwin=true;;\n(*) cygwin=;;\nesac\n\n# readlink in macOS resolves only links, and it returns empty results if the path points to a file\nroot=$0\nif [[ -L \"$root\" ]]; then\n  root=$(readlink \"$root\")\nfi\nroot=$(cd \"$(dirname \"$root\")\"; pwd)\n\nCP=$root/build/libs/sqllineClasspath.jar\n\nif [ \"x$CACHE_SQLLINE_CLASSPATH\" != \"xY\" ] || [ ! -f \"$CP\" ]; then\n  $root/gradlew --console plain -q :buildSqllineClasspath\nfi\n\nVM_OPTS=\nif [ \"$cygwin\" ]; then\n  # Work around https://github.com/jline/jline2/issues/62\n  VM_OPTS=-Djline.terminal=jline.UnixTerminal\nfi\n\nexport JAVA_OPTS=-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n\nexec java -Xmx1g $VM_OPTS $JAVA_OPTS -jar \"$root/build/libs/sqllineClasspath.jar\" \"$@\"\n"
        },
        {
          "name": "sqlline.bat",
          "type": "blob",
          "size": 1.3935546875,
          "content": "@echo off\n::\n:: Licensed to the Apache Software Foundation (ASF) under one or more\n:: contributor license agreements.  See the NOTICE file distributed with\n:: this work for additional information regarding copyright ownership.\n:: The ASF licenses this file to you under the Apache License, Version 2.0\n:: (the \"License\"); you may not use this file except in compliance with\n:: the License.  You may obtain a copy of the License at\n::\n:: http://www.apache.org/licenses/LICENSE-2.0\n::\n:: Unless required by applicable law or agreed to in writing, software\n:: distributed under the License is distributed on an \"AS IS\" BASIS,\n:: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n:: See the License for the specific language governing permissions and\n:: limitations under the License.\n::\n\n:: sqlline.bat - Windows script to launch SQL shell\n:: Example:\n:: > sqlline.bat\n:: sqlline> !connect jdbc:calcite: admin admin\n\n:: The script updates the classpath on each execution,\n:: You might add CACHE_SQLLINE_CLASSPATH environment variable to cache it\n:: To build classpath jar manually use gradlew buildSqllineClasspath\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset CP=%DIRNAME%\\build\\libs\\sqllineClasspath.jar\n\nif not defined CACHE_SQLLINE_CLASSPATH (\n  if exist \"%CP%\" del \"%CP%\"\n)\nif not exist \"%CP%\" (call \"%DIRNAME%\\gradlew\" --console plain -q :buildSqllineClasspath)\n\njava -Xmx1g -jar \"%CP%\" %*\n"
        },
        {
          "name": "sqlsh",
          "type": "blob",
          "size": 1.7470703125,
          "content": "#!/bin/bash\n# sqlsh - Script to launch SQL shell\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to you under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Example:\n# $ ./sqlsh select \\* from du order by 1 limit 3\n\n# The script updates the classpath on each execution,\n# You might use CACHE_SQLLINE_CLASSPATH=Y environment variable to cache it\n# To build classpath jar manually use ./gradlew buildSqllineClasspath\n\n# Deduce whether we are running cygwin\ncase $(uname -s) in\n(CYGWIN*) cygwin=true;;\n(*) cygwin=;;\nesac\n\n# readlink in macOS resolves only links, and it returns empty results if the path points to a file\nroot=$0\nif [[ -L \"$root\" ]]; then\n  root=$(readlink \"$root\")\nfi\nroot=$(cd \"$(dirname \"$root\")\"; pwd)\n\nCP=$root/build/libs/sqllineClasspath.jar\n\nif [ \"x$CACHE_SQLLINE_CLASSPATH\" != \"xY\" ] || [ ! -f \"$CP\" ]; then\n  $root/gradlew --console plain -q :buildSqllineClasspath\nfi\n\nVM_OPTS=\nexport JAVA_OPTS=-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n\nexec java $VM_OPTS -cp \"${CP}\" $JAVA_OPTS org.apache.calcite.adapter.os.SqlShell \"$@\"\n"
        },
        {
          "name": "sqlsh.bat",
          "type": "blob",
          "size": 1.4306640625,
          "content": "@echo off\n::\n:: Licensed to the Apache Software Foundation (ASF) under one or more\n:: contributor license agreements.  See the NOTICE file distributed with\n:: this work for additional information regarding copyright ownership.\n:: The ASF licenses this file to you under the Apache License, Version 2.0\n:: (the \"License\"); you may not use this file except in compliance with\n:: the License.  You may obtain a copy of the License at\n::\n:: http://www.apache.org/licenses/LICENSE-2.0\n::\n:: Unless required by applicable law or agreed to in writing, software\n:: distributed under the License is distributed on an \"AS IS\" BASIS,\n:: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n:: See the License for the specific language governing permissions and\n:: limitations under the License.\n::\n\n:: sqlline.bat - Windows script to launch SQL shell\n:: Example:\n:: > sqlline.bat\n:: sqlline> !connect jdbc:calcite: admin admin\n\n:: The script updates the classpath on each execution,\n:: You might add CACHE_SQLLINE_CLASSPATH environment variable to cache it\n:: To build classpath jar manually use gradlew buildSqllineClasspath\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset CP=%DIRNAME%\\build\\libs\\sqllineClasspath.jar\n\nif not defined CACHE_SQLLINE_CLASSPATH (\n  if exist \"%CP%\" del \"%CP%\"\n)\nif not exist \"%CP%\" (call \"%DIRNAME%\\gradlew\" --console plain -q :buildSqllineClasspath)\n\njava -Xmx1g -cp \"%CP%\" org.apache.calcite.adapter.os.SqlShell %*\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "ubenchmark",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}