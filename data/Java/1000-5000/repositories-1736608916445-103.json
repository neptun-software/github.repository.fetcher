{
  "metadata": {
    "timestamp": 1736608916445,
    "page": 103,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-lang-plugin-org/go-lang-idea-plugin",
      "stars": 4560,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0146484375,
          "content": "*.bat eol=crlf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3193359375,
          "content": "/build/\n/google-app-engine/build/\n/google-app-engine/google-app-engine-yaml/build/\n/utils/build/\n/plan9/build/\n\n.gradle\n\n.idea/workspace.xml\n.idea/modules.xml\n.idea/misc.xml\n.idea/gradle.xml\n.idea/compiler.xml\n.idea/shelf/\n.idea/libraries/\n.idea/.name\n.idea/*.png\n*.iml\n\n/testData/performance/docker/\n/testData/performance/go/\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.6494140625,
          "content": "# How to contribute\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/go-lang-plugin-org/go-lang-idea-plugin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Contents\n+ [Reporting errors](#reporting-errors)\n+ [Contributing to the code](#contributing-to-the-code)\n+ [Submitting test cases](#submitting-test-cases)\n+ [Building and running the unit tests](#building-and-running-the-unit-tests)\n+ [Configuring and debugging in IntelliJ](#configuring-and-debugging-in-IntelliJ)\n+ [Code Style](#code-style)\n+ [Delve integration](#delve-integration)\n+ [Useful links](#useful-links)\n\n## Reporting errors\n\nBefore reporting an error, please read the [FAQ](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/FAQ)\nand search for the issue in the issue tracker. Also, please don't bump, +1\nor \"me too\" issues. Thank you.\n\nThe simplest way to contribute to the plugin is to report issues you encounter\nin your day to day use.\n\nAs a rule of thumb, always keep in mind that we are developers just like you. So,\nwhenever you are going to report an issue, think of how you'd like to receive issues\nfor your projects. Also, we are doing this in our spare time, so the more information\nwe have in the report, the faster we can replicate the problem and get on solving it\nrather that just doing a bunch of ping-pong in comments trying to extract the needed\ndetails from you.\n\nThis information applies also when you don't have an error that is caught by the\nbuilt-in facility but it's something that happens and shouldn't happen (say for\nexample, a formatting issue).\n\nWhen filing an issue, please answer these questions:\n\n- What version of Go plugin are you using?\n- What version of IDEA are you using?\n- What version of Java are you using?\n- What did you do?\n- What did you expect to see?\n- What did you see instead?\n\nAlso, every time you can, submit the piece of code that's generating the issue.\nAs it might be some proprietary code, take some time and write the smallest code\nsample that can reproduce it and paste it in the issue (or send it as a link to\n[Go Playground](http://play.golang.org/). Screenshots are useful, but, just like\nyou, we can't copy paste code from screenshots either.\n\nPlease ensure that the bug is not reported already, this helps us focusing on\nworking on bug fixes not triage work.\n\n## Contributing to the code\n\nIf you want to contribute to the code, go to GitHub and check out the latest version\nand follow the instructions on how to build the plugin from source. After that, you\ncan start picking some [pending tasks](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/issues) on the issue tracker.\n\nMake sure you look for issues tags with [up for grabs](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/labels/up%20for%20grabs)\nas these are some of the easier ones to get started with.\n\n### CLA requirement\n\nContributing to the plugin requires a signed CLA with JetBrains.\nYou can view the steps necessary for this at [this page](http://www.jetbrains.org/display/IJOS/Contribute#Contribute-ContributeCode).\n\n### Submitting test cases\n\nSubmitting test cases is the next best thing you can do to developing on this\nproject. In fact, you'll actually develop on it since the test code you are\ngoing to contribute is still code.\n\nWhenever your time or knowledge allows, submitting good test cases for either\nfor existing issues or for issues that you come across will make a huge difference\nin the way we spend time to understand the problems and thus solve them.\n\n### Building and running the unit tests\n\nAll code can be checked out from our Github repository in the usual way. That is, clone the repository with HTTPS or SSH:\n\n```\n$ git clone https://github.com/go-lang-plugin-org/go-lang-idea-plugin.git\nCloning into 'go-lang-idea-plugin'...\n```\n\nOn Linux/Mac OS X we use gradle as our build system. Gradle is self-installing. This one command\n\n```\n$ ./gradlew buildPlugin\n```\n\ncompiles everything, runs the tests, and builds the plugins. The output appears in `build/distributions`.\n\n\n### Configuring and debugging in IntelliJ\n\n1. [Download](http://www.jetbrains.com/idea/) IDEA Community or Ultimate\n1. Setup the right version of [Grammar-Kit](https://github.com/JetBrains/Grammar-Kit/releases/download/1.4.1/GrammarKit.zip)\n1. Make sure that **UI Designer** and **Gradle** plugins are turned on\n1. Checkout plugin repo and open the project\n1. Open the copy of go-lang-idea-plugin repository (`File | New | Project from Existing Sources...`) with it. Then import Gradle project. The default project module config should work with a recent IDEA 15 version\n1. Git revert changes to the .idea folder because IDEA Gradle import blows it away (https://youtrack.jetbrains.com/issue/IDEA-146295)\n1. Open `File -> Project Settings`, go to the SDKs entry, click the `+` and select JDK 1.6\n1. Go to the Project entry and make sure that the Project SDK is set to selected SDK\n1. Wait until the source files of the SDK are indexed\n1. Run or debug the **Go** run configuration\n\nIf you use Mac, you may check follow path while looking for SDK:\n```\n/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/\n/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/\n```\n\nNow you can use the run configurations provided by the plugin source code to\nrun and play.\n\nThere are multiple branches of the plugin which correspond to different versions\nof the IntelliJ Platform:\n\n- 141 -> can be used for IDEA 14.1\n- 144 -> can be used for IDEA 16\n\nThe master branch will follow the current stable release of IDEA (currently IDEA 15).\n\nGoing to ``` Run -> Run... ``` will provide you with the following run configurations:\n\n+ `Go` will spawn a new IDEA with the latest version of the plugin enabled.\n+ `All tests` will run all the test cases available in the project. Please make\nsure that all the test cases pass before committing anything (or making a pull request).\n+ `Performance tests` will run all performance test cases available in the project.\n+ `Build plugin` will build plugin distribution archive. All artifacts are stored in `gradle/distributions` directory.\n\nYou can also have a look at some [useful links](#useful-links) for getting started with\nplugin development on IntelliJ IDEA platform.\n\n##### IMPORTANT: MacOS X users note\n\nYou might get the following error ```Unsupported major.minor version 52``` in the\nlogs or the plugin might not work at all.\n\nCheck the version of Java your IDE is running on. Since in 99.9% of the cases it will\nbe Java 6, this means that you compiled the plugin with a different version of Java,\nfor example Java 8.\n\nTo fix the error, please use Java JDK 6 to compile the plugin and everything should work.\n\nTo get the log files, you can go to ```Help | Show Log in File Manager``` and then the\nlog will be displayed to you.\n\n### Code Style\n\n* Please don't use class comments with information about author or date and time creation.\n* Please don't commit anything from `.idea/` directory if you're not very sure what you doing.\n\n### Delve integration\n\nWe're syncing the plugin source with the [Delve](https://github.com/derekparker/delve) debugger.\n\nIf you want to customize delve distribution that's used in the plugin you can use `-Dorg.gradle.project.customDlvPath` for setting up the path to your local version of dlv.\n\n### Useful links\n\nFor further information please see [the official plugin development page](http://confluence.jetbrains.net/display/IDEADEV/PluginDevelopment).\n\nAlso, you can read some [tips and tricks](http://tomaszdziurko.pl/2011/09/developing-plugin-intellij-idea-some-tips-and-links/).\n\nFor all development questions and proposals, you can mail to our [Open API and Plugin Development forum](https://devnet.jetbrains.com/community/idea/open_api_and_plugin_development).\n\nHappy hacking!\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.6064453125,
          "content": "If you are using [GoLand](https://jetbrains.com/go) or [IntelliJ IDEA Ultimate](https://jetbrains.com/idea) 2017.3 or later, please report your issue at the official tracker: https://youtrack.jetbrains.com/issues/Go\n\nThis repository is not maintained anymore.\n\n- Plugin version (or commit hash):\n- IDE name and version:\n- Java version:\n- OS name and version: \n\n- What are you trying to do?\n\n- What would you expect to happen?\n\n- What happens?\n\n\nYour issue description goes here.\nPlease be as detailed as possible\n\n```go\nPlease include a go sample to reproduce the issue\n```\n\nOr include a screenshot / video of the issue.\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 0.57421875,
          "content": "Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.970703125,
          "content": "# Go plugin for IntelliJ\n\n# Deprecation notice\n\nThis project is officially not maintained anymore. If you are using [GoLand](https://jetbrains.com/go) or [IntelliJ IDEA Ultimate](https://jetbrains.com/idea) 2017.3 or later, please report your issue at the official tracker: https://youtrack.jetbrains.com/issues/Go\n\n\n[![Build Status](https://teamcity.jetbrains.com/app/rest/builds/buildType:(id:IntellijIdeaPlugins_Go_Test)/statusIcon.svg?guest=1)](https://teamcity.jetbrains.com/viewType.html?buildTypeId=IntellijIdeaPlugins_Go_Test&guest=1) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/go-lang-plugin-org/go-lang-idea-plugin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n## Pre-release builds\n\nPlease note, that the following features are available in [GoLand, JetBrains's official IDE](https://www.jetbrains.com/go/), or [JetBrains maintained plugin](https://plugins.jetbrains.com/plugin/9568-go), but **not in this plugin**:\n\n- Navigation\n  - Go to inheritor structures\n  - Go to super interfaces\n- Type-aware completion (aka Smart completion)\n- Extract function refactoring\n- Implement type\n- Inspections and quick-fixes\n    - Introduce method\n    - Introduce field\n    - Delete unused parameter\n    - Show symbol duplicates\n    - Add/delete missing/redundant expressions in case of assignment count mismatch\n    - Properly implemented Duplicated symbols inspection\n    - Recursive type detection\n    - Invalid const initialization\n- Tests and coverage\n    - Sub-tests support (runner, navigation, gutter actions)\n    - Debugging tests\n- Debugger\n    - Step out\n    - 100x faster performance\n- General\n    - Highlighting of go:generate comments\n    - Quick documentation for struct fields\n    - Semantic highlighting\n    - Parameter name hints\n    - SQL auto-injection\n    - Support for Go 1.9+\n    - Support for AppEngine 1.9.54+\n\n\n**Supported IDEs**\n\nThe plugin can be installed on following IntelliJ-based:\n\n- IntelliJ 2016.1+ (Ultimate or Community)\n- WebStorm 2016.1+\n- PhpStorm 2016.1+\n- PyCharm 2016.1+\n- RubyMine 2016.1+\n- CLion 2016.1+\n- Android Studio 1.2.1+\n\nPre-release builds are available in two forms: nightly and alphas. Alpha builds are usually released at the beginning of every week while nightly builds are released every night.\n\nTo use them do the following:\n\n1. Use [the instructions](https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html)\n1. Paste the URL for the version you need:\n - alpha: https://plugins.jetbrains.com/plugins/alpha/5047\n - nightly: https://plugins.jetbrains.com/plugins/nightly/5047\n\n**NOTE**\nThe above links are not meant to be used in browsers, so don't report issues\nabout them not working or being inaccessible unless there's an error in the IDE itself.\n\nSince these are not stable releases, some things might not work as expected.\n\n### Release versions schema\n\nBellow you can see the versions of the plugin which correspond to the versions of the \nIntelliJ Platfom (IntelliJ IDEA, WebStorm, PyCharm etc.):\n\n| Plugin version number | Platform number |\n| ---- | --- |\n| 0.12.x | IntelliJ 2016.2 (IntelliJ IDEA 2016.2) | \n| 0.11.x | IntelliJ 2016.1 (IntelliJ IDEA 2016.1) | \n| 0.10.x | IntelliJ 143.1180 - 143.9999 (IntelliJ IDEA 15.0.2+) | \n| 0.9.x | IntelliJ 141.1532 - 141.9999 (IntelliJ IDEA 14.1) |\n \n If you are not using IntelliJ IDEA, then please check the build number of your IDE\n as that will correspond to the IntelliJ Platform version.\n\nReporting issues is very important for us as such, please see the section below\non how to submit a proper bug report.\n\n## FAQ\n\nHere's a list of the most frequently asked questions: [FAQ](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/FAQ)\n \n## Bugs\n\nIf you've found a bug, which is not a duplicate, [report it](http://github.com/go-lang-plugin-org/go-lang-idea-plugin/issues).\n\nWhen reporting a bug, please include the following:\n- IDEA version\n- OS version\n- JDK version\n- Plugin version (or commit hash, if you built the plugin yourself)\n- Detailed steps to reproduce (please include sample code)\n\n## Bumping or +1 comments\n\nPlease don't comment with \"bump\", \"+1\", \"same for me\" or other irrelevant comments as they're useless for identifying the issue and finding the solution.\n\nContributions are always welcome and we'll do our best to make the most of them.\n\n## Contributing\n\nWe encourage you to contribute to the plugin if you find any issues or missing\nfunctionality that you'd like to see. In order to get started, see the\n[contribution](CONTRIBUTING.md) guide.\n\n## [People who helped](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/graphs/contributors)\n\n## License\n\nThe Gopher icons are based on the Go mascot designed by [Renée French](http://reneefrench.blogspot.com/) and copyrighted under the [Creative Commons Attribution 3.0 license](http://creativecommons.org/licenses/by/3.0/us/).\n\nThe plugin is distributed under Apache License, version 2.0. For full license terms, see [LICENCE](https://github.com/go-lang-plugin-org/go-lang-idea-plugin/blob/master/LICENCE).\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 3.873046875,
          "content": "/*\n * Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nbuildscript {\n  repositories {\n    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n  }\n  dependencies {\n    classpath \"org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.2.0-SNAPSHOT\"\n  }\n}\n\nplugins {\n  id \"de.undercouch.download\" version \"3.1.0\"\n}\n\napply plugin: 'de.undercouch.download'\n\nversion = \"${version}.$buildNumber\"\nallprojects {\n  apply plugin: 'java'\n  sourceCompatibility = javaVersion\n  targetCompatibility = javaTargetVersion\n  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }\n\n  sourceSets {\n    main {\n      java.srcDirs 'src', 'gen'\n      resources.srcDirs 'resources', 'pluginResources'\n    }\n    test {\n      java.srcDir 'tests'\n    }\n  }\n\n  apply plugin: 'org.jetbrains.intellij'\n  intellij {\n    version ideaVersion\n    pluginName 'Go'\n    plugins 'coverage'\n    downloadSources Boolean.valueOf(sources)\n    sameSinceUntilBuild Boolean.valueOf(isEAP)\n    alternativeIdePath localIdePath\n    systemProperty 'dlv.path', customDlvPath\n  }\n}\n\npublishPlugin {\n  username publishUsername\n  password publishPassword\n  channels publishChannel\n}\n\npatchPluginXml {\n    if (customSinceBuild) {\n        sinceBuild customSinceBuild\n    }\n}\n\napply plugin: 'idea'\nidea {\n  project {\n    jdkName = javaVersion\n    languageLevel = javaVersion\n    vcs = 'Git'\n  }\n  module {\n    generatedSourceDirs += file('gen')\n  }\n}\n\nrepositories { maven { url \"http://dl.bintray.com/jetbrains/golang\" } }\ndependencies {\n  compile project(':utils'), project(':google-app-engine'), project(':google-app-engine:google-app-engine-yaml'), project(':plan9')\n  runtime \"com.jetbrains:delve:$delveVersion@zip\"\n}\n\n// delve packing\nproject.afterEvaluate {\n  prepareSandbox.doLast {\n    def libraries = \"$it.destinationDir/$intellij.pluginName/lib/\"\n    def delveFile = fileTree(dir: libraries, include: 'delve*').singleFile\n    copy {\n      from zipTree(delveFile)\n      into libraries\n    }\n    delveFile.delete()\n  }\n}\n\ntest {\n  useJUnit {\n    excludeCategories 'com.goide.categories.Performance'\n  }\n  testLogging {\n    exceptionFormat = 'full'\n  }\n}\n\ntask preparePerformanceTestData << {\n  downloadAndUnzip('https://storage.googleapis.com/golang/go1.5.1.src.tar.gz', 'go', 'go')\n  downloadAndUnzip('https://github.com/docker/docker/archive/v1.9.1.tar.gz', 'docker-1.9.1', 'docker')\n}\n\ntask performanceTest(type: Test, group: 'Verification', dependsOn: [classes, testClasses, preparePerformanceTestData]) {\n  maxHeapSize = '512m'\n  minHeapSize = '256m'\n\n  useJUnit {\n    includeCategories 'com.goide.categories.Performance'\n    reports.html.destination = \"$buildDir/reports/performanceTests\"\n  }\n  testLogging {\n    exceptionFormat = 'full'\n  }\n}\ncheck.dependsOn performanceTest\n\nprivate void downloadAndUnzip(url, sourceDir, targetDir) {\n  def testDataPath = \"$projectDir/testData/performance/\"\n  def markerFile = file(\"$testDataPath/$targetDir/markerFile\")\n  def tmpPath = \"$testDataPath/tmp/\"\n  def tar = file(\"$tmpPath/${targetDir}.tar.gz\")\n  if (!markerFile.exists()) {\n    download {\n      src url\n      dest tar\n    }\n    copy {\n      from tarTree(tar)\n      into tmpPath\n    }\n    copy {\n      from \"$tmpPath/$sourceDir\"\n      into \"$testDataPath/$targetDir\"\n    }\n    markerFile.createNewFile()\n  }\n  delete file(tmpPath)\n}"
        },
        {
          "name": "cloneToWt.sh",
          "type": "blob",
          "size": 1.41796875,
          "content": "#!/bin/bash\n# Creates new worktrees for all IntelliJ IDEA repositories pointing to a new release branch.\n# Usage: ./cloneToWt.sh <target directory> <branch>\n# Restrictions:\n#   None of the given Git repositories should have the branch with name <branch>.\n#   There should be a remote branch origin/<branch> from which a new local branch will be created by this script.\n#   You must use Git 2.5.0 or later.\n\nset -e # Any command which returns non-zero exit code will cause this shell script to exit immediately\n\nif [[ -z \"$1\" || -z \"$2\" ]] ; then\n  echo \"\n  Usage:   ./cloneToWt.sh <target directory> <branch>\n  Example: ./cloneToWt.sh ~/intellij-go-143 143\"\n  exit 1\nfi\n\nNEW_REPO=\"$1\"\nBRANCH=\"$2\"\n\nif [[ \"$BRANCH\" == origin/* ]]; then\n  BRANCH=\"${BRANCH/origin\\//}\"\nfi\n\n# Absolute path to directory containing existing IntelliJ IDEA repo (and this script as well)\nOLD_REPO=\"$(cd \"`dirname \"$0\"`\"; pwd)\"\nROOTS=(\"/\")\n\nif [ -d \"$NEW_REPO\" ]; then\n  echo \"Directory '$NEW_REPO' already exists\"\n  exit 2\nfi\n\nfor ROOT in ${ROOTS[@]}; do\n  if [[ ! -z `git --git-dir=\"${OLD_REPO}${ROOT}/.git\" --work-tree=\"${OLD_REPO}${ROOT}\" branch --list $BRANCH` ]]; then\n    echo \"Branch '$BRANCH' already exists in $ROOT\"\n    exit 3\n  fi\ndone\n\nfor ROOT in ${ROOTS[@]}; do\n  git --git-dir=\"${OLD_REPO}${ROOT}/.git\" --work-tree=\"${OLD_REPO}${ROOT}\" worktree add -b $BRANCH \"${NEW_REPO}${ROOT}\" origin/${BRANCH}\ndone\n\ncp -a \"$OLD_REPO/.idea/workspace.xml\" \"$NEW_REPO/.idea/\"\n"
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "google-app-engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.892578125,
          "content": "#\n# Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nversion = 0.13\nideaVersion = 2016.3\njavaVersion = 1.8\njavaTargetVersion = 1.8\ndelveVersion = 0.11.318\ncustomDlvPath =\nbuildNumber=SNAPSHOT\nisEAP=false\nsources=true\ncustomSinceBuild=\nlocalIdePath=\n\npublishUsername=user\npublishPassword=password\npublishChannel=\norg.gradle.jvmargs=-Xms256m -Xmx1024m\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.119140625,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [[ \"$(uname)\" == \"Darwin\" ]] && [[ \"$HOME\" == \"$PWD\" ]]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "grammars",
          "type": "tree",
          "content": null
        },
        {
          "name": "plan9",
          "type": "tree",
          "content": null
        },
        {
          "name": "pluginResources",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.119140625,
          "content": "rootProject.name = 'intellij-go'\ninclude 'utils', 'google-app-engine', 'google-app-engine:google-app-engine-yaml', 'plan9'"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testData",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}