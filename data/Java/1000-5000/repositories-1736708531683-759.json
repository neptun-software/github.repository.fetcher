{
  "metadata": {
    "timestamp": 1736708531683,
    "page": 759,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eclipsesource/J2V8",
      "stars": 2564,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".classpath",
          "type": "blob",
          "size": 1.2822265625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classpath>\n\t<classpathentry kind=\"src\" output=\"target/classes\" path=\"src/main/java\">\n\t\t<attributes>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" output=\"target/test-classes\" path=\"src/test/java\">\n\t\t<attributes>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t\t<attribute name=\"test\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER/4\"/>\n\t<classpathentry excluding=\"**\" kind=\"src\" output=\"target/classes\" path=\"src/main/resources\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"output\" path=\"target/classes\"/>\n</classpath>\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.34375,
          "content": "/bin/\n/target/\n/obj/\n/build/\n/node.out/\n/.vscode/\n/.metadata/\n\n.gradle\n.DS_Store\n*.patch\n*.so\n*.dll\n*.dylib\nhs_err*.log\n*.tar.gz\n\n# Intellij project files\n*.iml\n*.ipr\n*.iws\n.idea\n\n# Python binaries\n*.pyc\n\n# build input/output\nnode\nbuild.out\ncmake.out\nnode.out\nv8.out\n\n# test input/output\ntest-mockup-os-release\n\n# generated dependency packages\n*.tar.*\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 4.0185546875,
          "content": "# The build image for all regulator projects is available at\n# https://regulator.innoopract.com/build-tools/regulator-build-image\n# Whenever changes are submitted to the master branch, the image is\n# automatically built and uploaded to the projects container registry.\nimage: docker:18.06.1-ce-dind\n\nvariables:\n  DOCKER_HOST: tcp://localhost:2375/\n  ANDROID_COMPILE_SDK: \"28\"\n  ANDROID_BUILD_TOOLS: \"28.0.2\"\n  ANDROID_SDK_TOOLS:   \"4333796\"\n\nbefore_script:\n  - apk add --no-cache nss\n  - apk add --update python git gzip tar openjdk8 bash wget unzip libstdc++ \n  - apk add gnupg\n  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip\n  - unzip -d android-sdk-linux android-sdk.zip\n  - echo y | android-sdk-linux/tools/bin/sdkmanager \"platforms;android-${ANDROID_COMPILE_SDK}\" >/dev/null\n  - echo y | android-sdk-linux/tools/bin/sdkmanager \"platform-tools\" >/dev/null\n  - echo y | android-sdk-linux/tools/bin/sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS}\" >/dev/null\n  - export ANDROID_HOME=$PWD/android-sdk-linux\n  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/\n  - chmod +x ./gradlew\n  # temporarily disable checking for EPIPE error and use yes to accept all licenses\n  - set +o pipefail\n  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses\n  - set -o pipefail\n\nstages:\n  - build\n\nservices:\n  - name: docker:dind\n    entrypoint:\n      - dockerd-entrypoint.sh\n\nmaven_verify:\n  stage: build\n  script:\n    - docker info\n    - COMMIT_HASH=`git rev-parse HEAD` && sed -i \"s/Unknown\\ revision\\ ID/$COMMIT_HASH/g\" src/main/java/com/eclipsesource/v8/V8.java\n    - python nodejs.py git clone\n    - python nodejs.py diff apply\n    - python build.py -t android -a arm --docker all > arm.txt 2>&1 && cat arm.txt && ! grep -q BUILD\\ FAILED arm.txt && echo passed || exit 1\n    - python build.py -t android -a x86 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > x86.txt 2>&1 && cat x86.txt && ! grep -q BUILD\\ FAILED x86.txt && echo passed || exit 1\n    - python build.py -t android -a x86_64 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > x86_64.txt 2>&1 && cat x86_64.txt && ! grep -q BUILD\\ FAILED x86_64.txt && echo passed || exit 1\n    - python build.py -t android -a arm64 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > arm64.txt 2>&1 && cat arm64.txt && ! grep -q BUILD\\ FAILED arm64.txt && echo passed || exit 1\n  artifacts:\n    when: always\n    paths:\n      - build/outputs/aar/**\n      - arm.txt\n      - x86.txt\n      - x86_64.txt\n      - arm64.txt\n      - src/main/jniLibs/**/*\n      - node/node.build.output\n  except:\n    - master\n\nmaven_verify_deploy:\n  stage: build\n  script:\n    - docker info\n    - COMMIT_HASH=`git rev-parse HEAD` && sed -i \"s/Unknown\\ revision\\ ID/$COMMIT_HASH/g\" src/main/java/com/eclipsesource/v8/V8.java\n    - python nodejs.py git clone\n    - python nodejs.py diff apply\n    - python build.py -t android -a arm --docker all > arm.txt 2>&1 && cat arm.txt && ! grep -q BUILD\\ FAILED arm.txt && echo passed || exit 1\n    - python build.py -t android -a x86 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > x86.txt 2>&1 && cat x86.txt && ! grep -q BUILD\\ FAILED x86.txt && echo passed || exit 1\n    - python build.py -t android -a x86_64 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > x86_64.txt 2>&1 && cat x86_64.txt && ! grep -q BUILD\\ FAILED x86_64.txt && echo passed || exit 1\n    - python build.py -t android -a arm64 --keep-native-libs  --docker nodejs j2v8cmake j2v8jni j2v8cpp j2v8optimize j2v8java > arm64.txt 2>&1 && cat arm64.txt && ! grep -q BUILD\\ FAILED arm64.txt && echo passed || exit 1\n    - python build.py -t android -a arm j2v8release --keep-native-libs --docker\n  artifacts:\n    when: always\n    paths:\n      - build/outputs/aar/**\n      - arm.txt\n      - x86.txt\n      - x86_64.txt\n      - arm64.txt\n      - src/main/jniLibs/**/*\n      - node/node.build.output\n  only:\n    - master\n"
        },
        {
          "name": ".m2",
          "type": "tree",
          "content": null
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 0.5185546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>V8</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.m2e.core.maven2Builder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.m2e.core.maven2Nature</nature>\n\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n\t</natures>\n</projectDescription>\n"
        },
        {
          "name": ".settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 8.841796875,
          "content": "# Getting started / building from source\n\n#### Requirements\n\n1. Python 2\n2. Docker (*only required for building using Docker)\n\n#### Build\n\n1. clone the source code from the [J2V8 GitHub repository](https://github.com/eclipsesource/J2V8)\n2. run `j2v8-cli.cmd` (on Win32) or `source j2v8-cli.sh` on MacOS / Linux\n3. `nodejs git clone` to clone the Node.js/V8 source code\n4. `nodejs diff apply` to apply the required modifications to the Node.js source code\n5. start the desired J2V8 build either via `build -i` or `build ...args` (see below for details)\n\n# Build-System CLI\n\n## Interactive\n```shell\nbuild -i, --interactive\n# or\n\n###### Win32\npython build.py -i, --interactive\n\n###### MacOS / Linux\npython2 build.py -i, --interactive\n\nentering interactive mode...\n\n[0] android-x86 @ Docker\n[1] android-arm @ Docker\n[2] alpine-linux-x64 @ Docker\n[3] linux-x64\n[4] linux-x64 @ Docker\n[5] linux-x86 @ Docker\n[6] macosx-x64\n[7] macosx-x64 @ Vagrant\n[8] macosx-x86 @ Vagrant\n[9] windows-x64\n[10] windows-x64 @ Docker\n[11] windows-x64 @ Vagrant\n\nSelect a predefined build-configuration to run: 3\nBuilding: linux-x64\n\nOverride build-steps ? (leave empty to run pre-configured steps): nodejs j2v8 test\n```\n\n## Non-interactive\n```shell\nbuild -h, --help\n# or\npython build.py -h, --help\n\nusage: build [-h] --target {android,linux,macos,win32} --arch {x86,x64,arm}\n             [--vendor VENDOR] [--keep-native-libs] [--node-enabled]\n             [--docker] [--vagrant] [--sys-image SYS_IMAGE] [--no-shutdown]\n             [--redirect-stdout] [--interactive]\n             [build-steps [build-steps ...]]\n```\n\n### Basic Examples\n\nBuild for Debian/Ubuntu Linux x64 on the host-system:<br/>\n`build -t linux -a x64`\n\nBuild for Debian/Ubuntu Linux x64 using Docker:<br/>\n`build -t linux -a x64 -dkr`\n\nBuild for Alpine-Linux x64 using Docker and Node.js features included:<br/>\n`build -v alpine -t linux -a x64 -dkr -ne`\n\nBuild for MacOSX x64 using Vagrant excluding Node.js features:<br/>\n`build -t macos -a x64 -vgr`\n\nBuild for Windows x64 directly on the host-system, Node.js features included:<br/>\n`build -t win32 -a x64 -ne`\n\n### Build-Step syntax\n\nIf no build-steps are specified, then the CLI will run `all` available build-steps by default.\nTo see a list of available build-steps run `build --help` or see the ***Build-Steps*** section below.\n\nFor ease of use, there are also some advanced build-step aliases that when specified will run a collection of some of the base-steps:\n\n- `all` ... is the default, and will run all known build-steps\n- `native` ... will run only the build-steps that are relevant for building **native** artifacts\n    - `node_js`, `j2v8_cmake`, `j2v8_jni`, `j2v8_cpp`, `j2v8_optimize`\n- `j2v8` ... runs all build-steps, except for `nodejs` and `j2v8test`\n- `java` ... alias for the single `j2v8java` step\n- `test` ... alias for the single `j2v8test` step\n\n#### Anti-Steps\nAnti-steps provide a way to exclude a particular step, or a step-alias from the set of build-steps that should be run. To use such an anti-step, just prefix any of the available build-steps with the \"~\" symbol.\n\nBuild everything but do not optimize and do not run J2V8 unit tests:<br/>\n`build <...other-args> all ~j2v8optimize ~test`\n\nBuild only the Java parts and also run tests:<br/>\n`build <...other-args> all ~native`\n\n#### Step-Arguments\n\nFor some of the build-steps, you can pass additional command-line parameters that will be added as arguments when the CLI build-tool of this particular build-step is run.\n\nRun the `j2v8test` step with additional args that will be passed to maven:<br/>\n(e.g. run only the `LibraryLoaderTest`)<br/>\n`build -t linux -a x64 --j2v8test=\"-Dtest=LibraryLoaderTest\"`\n\n\n\n# Build-Steps\n\nThe J2V8 build-system performs several build steps in a fixed order to produce the final J2V8 packages for usage on the designated target platforms. What follows is a short summary for what each of the executed build-steps does and what output artifacts are produced by each step.\n\n```\nNode.js --> CMake --> JNI --> C++ --> Optimize --> Java/Android Build --> Java/Android Test\n```\n---\n## Node.js\nCLI name: `nodejs`\n\nBuilds the [Node.js](https://nodejs.org/en/) & [V8](https://developers.google.com/v8/) dependency artifacts that are later linked into the J2V8 native bridge code.\n(only works if the Node.js source was checked out into the J2V8 `./node` directory)\n\n__Inputs:__\n- Node.js source code\n    - see [Github](https://github.com/nodejs/node)\n- Node.js GIT patches with customizations for integrating Node.js into J2V8\n    - `./node.patches/*.diff`\n\n__Artifacts:__\n- Node.js & V8 static link libraries\n    - `./node/out/`\n    - *win32 specific*\n        - `./node/build/`\n        - `./node/Debug/`\n        - `./node/Release/`\n---\n## CMake\nCLI name: `j2v8cmake`\n\nUses [CMake](https://cmake.org/) to generate the native Makefiles / IDE project files to later build the J2V8 C++ native bridge shared libraries.\n\n__Inputs__:\n- Node.js / V8 static link libraries\n    - `./cmake/NodeJsUtils.cmake`\n- CMakeLists & CMake utilities\n    - `CMakeLists.txt`\n    - `./cmake/*.cmake`\n\n__Artifacts:__\n- CMake generated Makefiles / IDE Project-files\n    - `./cmake.out/{platform}.{architecture}/`\n---\n## JNI Header Generation\nCLI name: `j2v8jni`\n\nGenerate the JNI glue header file from the native method definitions of the Java `V8` class.\n\n__Inputs__:\n- Java V8.class file\n    - `./target/classes/com/eclipsesource/v8/V8.class`\n\n__Artifacts:__\n- J2V8 C++ JNI header file\n    - `./jni/com_eclipsesource_v8_V8Impl.h`\n---\n## C++\nCLI name: `j2v8cpp`\n\nCompile and link the J2V8 native shared libraries (.so/.dylib/.dll), which contain the C++ JNI bridge code to interop with the embedded Node.js / V8 parts.\n\n__Inputs__:\n- CMake generated Makefiles / IDE Project-files\n- Node.js / V8 static link libraries & C++ header files\n- J2V8 C++ JNI source code\n    - `./jni/com_eclipsesource_v8_V8Impl.h`\n    - `./jni/com_eclipsesource_v8_V8Impl.cpp`\n\n__Artifacts:__\n- J2V8 native shared libraries\n    - `./cmake.out/{platform}.{architecture}/libj2v8-[vendor-]{platform}-{abi}.{ext}`\n    - e.g. `./cmake.out/linux.x64/libj2v8-alpine-linux-x86_64.so`\n---\n## Optimize\nCLI name: `j2v8optimize`\n\nThe native J2V8 libraries are optimized for performance and/or filesize by using the available tools of the target-platform / compiler-toolchain.\n\n__Inputs__:\n- <u>unoptimized</u> J2V8 native shared libraries\n    - `./cmake.out/{platform}.{architecture}/libj2v8-[vendor-]{platform}-{abi}.{ext}`\n    - e.g. `./cmake.out/linux.x64/libj2v8-alpine-linux-x86_64.so`\n- platform-specific optimization tools:\n    - Android: -\n    - Linux: `execstack`, `strip`\n    - MacOSX: -\n    - Windows: -\n\n__Artifacts:__\n- <u>optimized</u> J2V8 native shared libraries\n    - `./cmake.out/{platform}.{architecture}/libj2v8-[vendor-]{platform}-{abi}.{ext}`\n    - e.g. `./cmake.out/linux.x64/libj2v8-alpine-linux-x86_64.so`\n---\n## Java / Android\nCLI name: `j2v8java` / `java`\n\nCompiles the Java source code and packages it, including the previously built native libraries, into the final package artifacts. For the execution of this build-step [Maven](https://maven.apache.org/) (Java) or [Gradle](https://gradle.org/) (Android) are used for the respective target platforms.\n\n__Inputs__:\n- J2V8 native shared libraries (will be automatically copied to the required Java / Android project directories to be included in the .jar/.aar packages)\n    - `./src/main/resources/` (Java)\n    - `./src/main/jniLibs/{abi}/libj2v8.so` (Android)\n- J2V8 Java source code\n    - `./src/main/`\n- J2V8 Java test source code\n    - `./src/test/`\n- J2V8 build settings\n    - `./build_settings.py`\n\n__Artifacts:__\n- Maven platform-specific packages\n    - `./build.out/j2v8_{platform}_{abi}-{j2v8_version}.jar`\n    - e.g. `./build.out/j2v8_linux_x86_64-4.8.0-SNAPSHOT.jar`\n- Gradle Android packages\n    - `./build/outputs/aar/j2v8-release.aar`\n---\n## Java Tests\nCLI name: `j2v8test` / `test`\n\nRuns the Java ([JUnit](http://junit.org/)) unit tests.\n\n__Inputs__:\n- J2V8 platform-specific packages\n- J2V8 Java test source code\n    - `./src/test/`\n\n__Artifacts:__\n- Maven Surefire test reports (Desktop platforms)\n    - `./target/surefire-reports/`\n- Gradle Spoon test reports (Android only)\n    - `./build/spoon/debug/`\n---\n\n# Cross-Compiling\n\nFor cross-compiling J2V8 uses [Docker](https://www.docker.com/) (android, linux, windows) and [Vagrant](https://www.vagrantup.com/) (macos, windows).\nThe full source-code (of both J2V8 and Node.js) on the build-host are just shared via mounted volumes with the Docker / Vagrant machines, so you can quickly make changes and perform builds fast.\n\nTo invoke a cross-compile build, simply invoke the `build.py` script as usual but add the `--docker`, `-dkr` or `--vagrant`, `-vgr` flags.\nThis will automatically provision and run the necessary virtualization to run the requested build fully independent of your local environment.\n\n<b>Note:</b> using Docker / Vagrant for cross-compilation requires many gigabytes of hard-drive space as well as downloading the required images & tools.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.3828125,
          "content": "# NOTE: this works around the windows docker / msbuild bug, that causes the\n# VC++ linker to fail creating PDB debug files in a shared volume\n# (see: https://social.msdn.microsoft.com/Forums/en-US/bd281c61-8e04-4f56-aec2-5ad565271d7f/windowsservercorelatest-vc-2015-build-tools-throws-linker-error-lnk1318-unexpected-pdb?forum=windowscontainers)\nif(J2V8_CROSS_COMPILE AND J2V8_WIN32_PDB_DOCKER_FIX)\n#{\n    # TODO: remove this if the Win32 Docker PDB bug is fixed\n    # see: https://stackoverflow.com/a/39109288\n    message(\"CMAKE-WARNING: applied workaround for windows docker PDB bug\")\n    message(\"see: https://social.msdn.microsoft.com/Forums/en-US/bd281c61-8e04-4f56-aec2-5ad565271d7f/windowsservercorelatest-vc-2015-build-tools-throws-linker-error-lnk1318-unexpected-pdb?forum=windowscontainers\")\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\n#}\nendif()\n\ncmake_minimum_required(VERSION 3.6)\nproject(j2v8)\nset(CMAKE_VERBOSE_MAKEFILE ON)\n\n# set up the module path\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\ninclude(BuildUtils)\ninclude(Policies)\n\n#-----------------------------------------------------------------------\n# DEPENDENCY SETTINGS / CMAKE OPTIONS\n#-----------------------------------------------------------------------\n\n# look for dependencies\nfind_package(Java)\n\n# j2v8 dependency options\nset(J2V8_JDK_DIR ${Java_ROOT} CACHE STRING \"Path to the Java JDK dependency\")\nset(J2V8_V8_DIR \"${CMAKE_SOURCE_DIR}/v8.out\" CACHE STRING \"Path to the V8 JS engine dependency\")\n\n# j2v8 build options\nset(J2V8_TARGET_ARCH \"\" CACHE STRING \"The target architecture for the build.\")\noption(J2V8_BUILD_ONLY_DEBUG_RELEASE \"Generate only Debug and Release configurations (exclude RelWithDebInfo and MinSizeRel)\" ON)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\" AND MSVC)\n    option(J2V8_LINK_WITH_STATIC_MSVCRT \"Link against the static version of the Microsoft Visual C++ Common Runtime (will link against the dynamic DLL version if this option is disabled)\" ON)\nendif()\n\n#-----------------------------------------------------------------------\n# BUILD PLATFORM SETUP & VARIABLES\n#-----------------------------------------------------------------------\n\n# HINT: CMake Multiarchitecture Compilation\n# see: https://stackoverflow.com/a/5359572/425532\n\nif(\"${J2V8_TARGET_ARCH}\" STREQUAL \"\")\n    message (FATAL_ERROR \"J2V8_TARGET_ARCH not specified\")\nendif()\n\nif(J2V8_TARGET_ARCH STREQUAL \"x86_64\")\n    set(J2V8_BUILD_X64 TRUE)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n#{\n    set(JAVA_PLATFORM_NAME \"android\")\n\n    # output library filename parts\n    set(J2V8_LIB_PREFIX \"\")\n    set(J2V8_LIB_ARCH_NAME ${CMAKE_ANDROID_ARCH_ABI})\n    set(J2V8_LIB_VENDOR_NAME \"\")\n    set(J2V8_LIB_PLATFORM_NAME \"android\")\n#}\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n#{\n    set(JAVA_PLATFORM_NAME \"linux\")\n\n    # output library filename parts\n    set(J2V8_LIB_PREFIX \"\")\n    set(J2V8_LIB_ARCH_NAME ${J2V8_TARGET_ARCH})\n    set(J2V8_LIB_VENDOR_NAME \"\")\n    set(J2V8_LIB_PLATFORM_NAME \"linux\")\n\n    if(J2V8_VENDOR)\n        set(J2V8_LIB_VENDOR_NAME \"-${J2V8_VENDOR}\")\n    endif()\n\n    # configure library architecture\n    if(J2V8_BUILD_X64)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m64 \")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m64 \")\n    else()\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m32 \")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32 \")\n    endif()\n\n    # -lrt ... see: https://github.com/eclipsesource/J2V8/issues/292\n    set (j2v8_Debug_libs \"-lrt\")\n    set (j2v8_Release_libs\"-lrt\")\n#}\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n#{\n    set(JAVA_PLATFORM_NAME \"darwin\")\n\n    # output library filename parts\n    set(J2V8_LIB_PREFIX \"\")\n    set(J2V8_LIB_ARCH_NAME ${J2V8_TARGET_ARCH})\n    set(J2V8_LIB_VENDOR_NAME \"\")\n    set(J2V8_LIB_PLATFORM_NAME \"macosx\")\n\n    # configure library architecture\n    if(J2V8_BUILD_X64)\n        set(CMAKE_OSX_ARCHITECTURES \"x86_64\")\n    else()\n        set(CMAKE_OSX_ARCHITECTURES \"i386\")\n\n        # fix for 32-bit linking error \"ld: illegal text reloc\"\n        # see: https://stackoverflow.com/a/9322458/425532\n        set(CMAKE_SHARED_LINKER_FLAGS \"-read_only_relocs suppress\")\n    endif()\n#}\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n#{\n    set(JAVA_PLATFORM_NAME \"win32\")\n\n    # output library filename parts\n    set(J2V8_LIB_PREFIX \"lib\")\n    set(J2V8_LIB_ARCH_NAME ${J2V8_TARGET_ARCH})\n    set(J2V8_LIB_VENDOR_NAME \"\")\n    set(J2V8_LIB_PLATFORM_NAME \"windows\")\n#}\nendif()\n\nmessage(\"--------------------------------------------------\")\nmessage(\"J2V8_LIB_ARCH_NAME     = ${J2V8_LIB_ARCH_NAME}\")\nmessage(\"J2V8_LIB_VENDOR_NAME   = ${J2V8_LIB_VENDOR_NAME}\")\nmessage(\"J2V8_LIB_PLATFORM_NAME = ${J2V8_LIB_PLATFORM_NAME}\")\nmessage(\"J2V8_TARGET_ARCH       = ${J2V8_TARGET_ARCH}\")\nmessage(\"J2V8_BUILD_X64         = ${J2V8_BUILD_X64}\")\nmessage(\"--------------------------------------------------\")\n\n#-----------------------------------------------------------------------\n# INCLUDE DIRECTORIES & SOURCE FILES\n#-----------------------------------------------------------------------\n\n# project include directories\nset(include_dirs\n    ${J2V8_V8_DIR}/include\n)\n\n# do not use JAVA_HOME for Java include files for Android\n# (instead the Android NDK toolchain will introduce them automatically)\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n#{\n    set(include_dirs\n        ${include_dirs}\n        ${J2V8_JDK_DIR}/include\n        ${J2V8_JDK_DIR}/include/${JAVA_PLATFORM_NAME}\n    )\n#}\nendif()\n\n# project source files\nset(src_files\n    jni/com_eclipsesource_v8_V8Impl.cpp\n    jni/com_eclipsesource_v8_V8Impl.h\n)\n\nsource_group(\"\" FILES ${src_files})\n\n#-----------------------------------------------------------------------\n# BUILD SETTINGS & COMPILATION\n#-----------------------------------------------------------------------\n\n# tell gcc/clang to use the c++14 standard\nset(CMAKE_CXX_STANDARD 14)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wno-unused-function -Wno-unused-variable -O3 -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC \")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wno-unused-function -Wno-unused-variable -O3 -funroll-loops -ftree-vectorize -ffast-math -fpermissive -fPIC \")\nendif()\n\n# remove the MinSizeRel and RelWithDebInfo configurations\nif(J2V8_BUILD_ONLY_DEBUG_RELEASE)\n    set(CMAKE_CONFIGURATION_TYPES \"Debug;Release\" CACHE STRING \"limited configs\" FORCE)\nendif()\n\n# link against the static MS C++ runtime libraries\nif(J2V8_LINK_WITH_STATIC_MSVCRT)\n    link_static_crt()\nendif()\n\n# create the j2v8 library\nadd_library(v8_monolith STATIC IMPORTED)\nset_target_properties(v8_monolith PROPERTIES IMPORTED_LOCATION ${J2V8_V8_DIR}/${J2V8_MONOLITH_LIB_DIR}/libv8_monolith.a)\n\nadd_library(j2v8 SHARED ${src_files})\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\" AND MSVC)\n    set_property(TARGET j2v8 APPEND_STRING PROPERTY LINK_FLAGS_RELEASE \"/LTCG\")\nendif()\n\n# build output directory\nset(LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)\n\n# set the include directories\ninclude_directories(${include_dirs})\n\n# link the necessary libraries\ntarget_link_libraries(j2v8\n    v8_monolith\n    debug \"${j2v8_Debug_libs}\"\n    optimized \"${j2v8_Release_libs}\"\n    \"${libgcc}\"\n)\n\n#-----------------------------------------------------------------------\n# OUTPUT SETTINGS & POST-BUILD\n#-----------------------------------------------------------------------\n\n# set library output filename\nset_target_properties(j2v8 PROPERTIES OUTPUT_NAME \"${J2V8_LIB_PREFIX}${PROJECT_NAME}${J2V8_LIB_VENDOR_NAME}-${J2V8_LIB_PLATFORM_NAME}-${J2V8_LIB_ARCH_NAME}\")\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.515625,
          "content": "# How to contribute\n\nPatches and third-party contributions are essential for keeping J2V8 great and\nhelping to evolve this library. There are a few guidelines that we need\ncontributors to follow so we have a chance to keep on top of things.\n\n## Code contributions\n\nCode contributions are greatly appreciated. We currently target V8 3.26, so\nall contributions must link against that version of V8. Code contributions\nshould be accompanied by a set of unit tests. All tests are written in Java\nand executed using JUnit. See `src/test/java` for examples.\n\n## JNI layer\n\nThe C++ layer should be kept as thin as possible. This results in a more\nverbose JNI layer, but it also moves the more complicated logic to Java.\n\n## J2V8 core\n\nJ2V8 core contains the basic V8 bindings, represented as a hierarchy of\nJava Classes. The core contains all the classes found in `com.eclipsesource.v8`.\nJ2V8 core should have no external dependencies other than JRE 1.6 and the JNI\nlayer.\n\n## J2V8 Utils\n\nJ2V8 utils contains a higher level of abstraction and provides a number of\nutilities for using J2V8 in a Java System. The J2V8 utils contains all\nthe classes found in `com.eclipsesource.v8.utils`. The J2V8 utils should\nhave no external dependencies other than JRE 1.6, and J2V8 core.\n\n## Submitting changes\n\n * Sign the [Contributor License Agreement](https://www.clahub.com/agreements/eclipsesource/J2V8).\n * Create a GitHub issue describing to capture the issue.\n * Push your changes to a topic branch in your fork of the repository.\n * Submit a pull request to J2V8.\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 0.44140625,
          "content": "node {\n  stage('Checkout') {\n    checkout scm\n  }\n\n  stage('Fetching target platform') {\n    sh 'curl -O http://download.eclipsesource.com/j2v8/v8/node.out-7_4_0.tar.gz'\n  }\n\n  stage('Building') {\n    sh './buildAll.sh -r /data/instances/j2v8-jenkins/workspace/J2V8-nightly'\n  } \n\n  stage('Package AAR') {\n    sh './gradlew clean build'\n  }\n\n  stage('Results') {\n      junit 'build/test-results/**/*.xml'\n      archive 'build/outputs/aar/*.aar'\n   }\n}\n"
        },
        {
          "name": "META-INF",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.4140625,
          "content": "J2V8\n====\n\n![Build Status](https://github.com/eclipsesource/J2V8/workflows/Build%20J2V8/badge.svg)\n[![Maven Central](https://img.shields.io/maven-central/v/com.eclipsesource.j2v8/j2v8.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.eclipsesource.j2v8%22)\n\nJ2V8 is a set of Java bindings for V8. J2V8 focuses on performance and tight integration with V8. It also takes a 'primitive first' approach, meaning that if a value can be accessed as a primitive, then it should be. This forces a more static type system between the JS and Java code, but it also improves the performance since intermediate Objects are not created.\n\nWe developed J2V8 as a high performance engine for our multi-platform mobile toolkit [tabris.js](https://tabrisjs.com) and it is a great choice for executing JavaScript on Android devices.\n\nBuilding J2V8\n=============\nBuilding J2V8 requires building both the native parts and the Java library (.jar/.aar file). To build the native parts we first build V8 as a monolithic library and then statically link J2V8 to that. The Java parts are built with maven/gradle.\n\nJ2V8 uses a cross-platform, cross-compiling build-system written in Python.\n\nFor any further build instructions & details please read [BUILDING.md](BUILDING.md)\n\nTutorials\n==========\n * [Getting Started With J2V8](https://eclipsesource.com/blogs/tutorials/getting-started-with-j2v8/)\n * [Registering Java Callbacks with J2V8](http://eclipsesource.com/blogs/2015/06/06/registering-java-callbacks-with-j2v8/)\n * [Implementing WebWorkers with J2V8](http://eclipsesource.com/blogs/2015/05/28/implementing-webworkers-with-j2v8/)\n * [Multithreaded JavaScript with J2V8](http://eclipsesource.com/blogs/2015/05/12/multithreaded-javascript-with-j2v8/)\n * [Using J2V8 with Heroku](http://eclipsesource.com/blogs/2015/06/04/using-j2v8-with-heroku/)\n\nArticles\n========\n * [Announcing J2V8 4](http://eclipsesource.com/blogs/2016/07/20/announcing-j2v8-4/)\n * [Running Node.js on the JVM](http://eclipsesource.com/blogs/2016/07/20/running-node-js-on-the-jvm/)\n * [Shipping J2V8 as an AAR](http://eclipsesource.com/blogs/2015/11/04/shipping-j2v8-as-an-aar/)\n * [Announcing J2V8 3.0](http://eclipsesource.com/blogs/2015/07/08/j2v8-3-0-released/)\n * [J2V8 2.2 New and Noteworthy](http://eclipsesource.com/blogs/2015/04/23/j2v8-2-2-new-and-noteworthy/)\n * [Announcing J2V8 2.0](http://eclipsesource.com/blogs/2015/02/25/announcing-j2v8-2-0/)\n * [Highly Efficient Java & JavaScript Integration](http://eclipsesource.com/blogs/2014/11/17/highly-efficient-java-javascript-integration/)\n * [React.js SSR with J2V8](https://ebaytech.berlin/react-js-server-side-rendering-with-j2v8-b9ced07888fb)\n\nPresentations\n=============\n * [J2V8 A Highly Efficient JS Runtime For Java](https://www.eclipsecon.org/na2015/session/j2v8-highly-efficient-js-runtime-java)\n * [Running JavaScript Efficiently in a Java World](http://www.slideshare.net/irbull/enter-js)\n\nOther Resources\n===============\nHere is a list of articles I've written on J2V8 [http://eclipsesource.com/blogs/tag/j2v8/](http://eclipsesource.com/blogs/tag/j2v8/).\n\nWho is using J2V8?\n========\n\nHere are some projects that use J2V8:\n* [tabris.js](https://tabrisjs.com)\n* [tern.java](https://github.com/angelozerr/tern.java)\n* [PlantUML](http://plantuml.com/)\n* [jooby](http://jooby.org/doc/assets)\n* [Alicorn](http://alicorn.io)\n\nLicense\n=====\nThe code is published under the terms of the [Eclipse Public License, version 1.0](http://www.eclipse.org/legal/epl-v10.html).\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 3.2822265625,
          "content": "apply plugin: 'maven'\napply plugin: 'signing'\n\ngroup = 'com.eclipsesource.j2v8'\narchivesBaseName = 'j2v8'\nversion = System.getenv('J2V8_FULL_VERSION')\n\next.\"signing.secretKeyRingFile\" = '/.gnupg/secring.gpg'\next.\"signing.password\" = System.getenv(\"KEYSTORE_PASSWORD\")\next.\"signing.keyId\" = System.getenv(\"KEY_ID\")\n\nconfigurations {\n    archives {\n        extendsFrom configurations.default\n    }\n}\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.2.2'\n        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.2.2'\n    }\n}\n\napply plugin: 'com.android.library'\napply plugin: 'spoon'\n\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.12'\n    //testCompile 'org.mockito:mockito-all:2.6.3'\n    testCompile 'org.mockito:mockito-core:2.6.3'\n\n    androidTestCompile 'junit:junit:4.12'\n    androidTestCompile 'org.mockito:mockito-android:2.6.3' // https://jeroenmols.com/blog/2017/01/17/mockitoandroid/\n    androidTestCompile 'com.android.support:support-annotations:24.0.0'\n    androidTestCompile 'com.android.support.test:runner:0.5'\n    androidTestCompile 'com.android.support.test:rules:0.5'\n}\n\nandroid {\n    compileSdkVersion 10\n    buildToolsVersion '24.0.3'\n\n    defaultConfig {\n        minSdkVersion 10\n        targetSdkVersion 10\n\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n\n    lintOptions {\n        abortOnError false\n    }\n\n    sourceSets {\n        androidTest {\n            java.srcDirs = ['src/test']\n        }\n\n        // androidTest.setRoot('src/test')\n    }\n\n}\n\n// see: https://github.com/square/spoon\nspoon {\n    // for debug output\n    debug = true\n\n    // To run only specified test classes\n    if (project.hasProperty('testClass')) {\n        className = project.testClass\n    }\n\n    // To run a single method in TestCase\n    if (project.hasProperty('testMethod')) {\n        methodName = project.testMethod\n    }\n}\n\nsigning {\n    // required { has(\"release\") && gradle.taskGraph.hasTask(\"uploadArchives\") }\n    sign configurations.archives\n}\n\nuploadArchives {\n  repositories {\n    mavenDeployer {\n      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n      repository(url: \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\") {\n        authentication(userName: System.getenv(\"MAVEN_REPO_USER\"), password: System.getenv(\"MAVEN_REPO_PASS\") )\n      }\n\n      snapshotRepository(url: \"https://oss.sonatype.org/content/repositories/snapshots/\") {\n        authentication(userName: System.getenv(\"MAVEN_REPO_USER\"), password: System.getenv(\"MAVEN_REPO_PASS\") )\n      }\n\n      pom.project {\n\t    name 'j2v8'\n\t    packaging 'aar'\n\t    description 'J2V8 is a set of Java bindings for V8'\n\t    url 'https://github.com/eclipsesource/j2v8'\n\n\t    scm {\n\t\turl 'scm:git:git@github.com:eclipsesource/J2V8.git'\n\t\tconnection 'scm:git:git@github.com:eclipsesource/J2V8.git'\n\t\tdeveloperConnection 'scm:git:git@github.com:eclipsesource/J2V8.git'\n\t    }\n\n\t    licenses {\n\t\tlicense {\n\t\t    name 'Eclipse Public License - v 1.0'\n\t\t    url 'https://www.eclipse.org/legal/epl-v10.html'\n\t\t    distribution 'repo'\n\t\t}\n\t    }\n\n\t    developers {\n\t\tdeveloper {\n\t\t    id 'irbull'\n\t\t    name 'R. Ian Bull'\n\t\t    email 'irbull@eclipsesource.com'\n\t\t}\n\t    }\n\n        }\n      }\n    }\n  }\n"
        },
        {
          "name": "build.properties",
          "type": "blob",
          "size": 0.14453125,
          "content": "output.. = bin/\nbin.includes = META-INF/,\\\n               .\nsource.. = src/main/java/,\\\n           src/test/resources/,\\\n           src/test/java/\n\n"
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 0.5185546875,
          "content": "\"\"\"\nThis script should be invoked directly via the CLI to start a J2V8 build\n\"\"\"\nimport sys\n\nimport build_system.cli as cli\nimport build_system.build_interactive as interactive\nimport build_system.build_executor as bex\n\n# interactive shell entrypoint\nif (len(sys.argv) >= 2 and sys.argv[1] in [\"--interactive\", \"-i\"]):\n    print \"\\nentering interactive mode...\\n\"\n    interactive.run_interactive_cli()\n# passive command-line entrypoint\nelse:\n    parser = cli.get_parser()\n    args = parser.parse_args()\n    bex.execute_build(args)\n"
        },
        {
          "name": "build_system",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "epl-v10.html",
          "type": "blob",
          "size": 12.3408203125,
          "content": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" />\n<title>Eclipse Public License - Version 1.0</title>\n<style type=\"text/css\">\n  body {\n    size: 8.5in 11.0in;\n    margin: 0.25in 0.5in 0.25in 0.5in;\n    tab-interval: 0.5in;\n    }\n  p {  \t\n    margin-left: auto;\n    margin-top:  0.5em;\n    margin-bottom: 0.5em;\n    }\n  p.list {\n  \tmargin-left: 0.5in;\n    margin-top:  0.05em;\n    margin-bottom: 0.05em;\n    }\n  </style>\n\n</head>\n\n<body lang=\"EN-US\">\n\n<h2>Eclipse Public License - v 1.0</h2>\n\n<p>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE\nPUBLIC LICENSE (&quot;AGREEMENT&quot;). ANY USE, REPRODUCTION OR\nDISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS\nAGREEMENT.</p>\n\n<p><b>1. DEFINITIONS</b></p>\n\n<p>&quot;Contribution&quot; means:</p>\n\n<p class=\"list\">a) in the case of the initial Contributor, the initial\ncode and documentation distributed under this Agreement, and</p>\n<p class=\"list\">b) in the case of each subsequent Contributor:</p>\n<p class=\"list\">i) changes to the Program, and</p>\n<p class=\"list\">ii) additions to the Program;</p>\n<p class=\"list\">where such changes and/or additions to the Program\noriginate from and are distributed by that particular Contributor. A\nContribution 'originates' from a Contributor if it was added to the\nProgram by such Contributor itself or anyone acting on such\nContributor's behalf. Contributions do not include additions to the\nProgram which: (i) are separate modules of software distributed in\nconjunction with the Program under their own license agreement, and (ii)\nare not derivative works of the Program.</p>\n\n<p>&quot;Contributor&quot; means any person or entity that distributes\nthe Program.</p>\n\n<p>&quot;Licensed Patents&quot; mean patent claims licensable by a\nContributor which are necessarily infringed by the use or sale of its\nContribution alone or when combined with the Program.</p>\n\n<p>&quot;Program&quot; means the Contributions distributed in accordance\nwith this Agreement.</p>\n\n<p>&quot;Recipient&quot; means anyone who receives the Program under\nthis Agreement, including all Contributors.</p>\n\n<p><b>2. GRANT OF RIGHTS</b></p>\n\n<p class=\"list\">a) Subject to the terms of this Agreement, each\nContributor hereby grants Recipient a non-exclusive, worldwide,\nroyalty-free copyright license to reproduce, prepare derivative works\nof, publicly display, publicly perform, distribute and sublicense the\nContribution of such Contributor, if any, and such derivative works, in\nsource code and object code form.</p>\n\n<p class=\"list\">b) Subject to the terms of this Agreement, each\nContributor hereby grants Recipient a non-exclusive, worldwide,\nroyalty-free patent license under Licensed Patents to make, use, sell,\noffer to sell, import and otherwise transfer the Contribution of such\nContributor, if any, in source code and object code form. This patent\nlicense shall apply to the combination of the Contribution and the\nProgram if, at the time the Contribution is added by the Contributor,\nsuch addition of the Contribution causes such combination to be covered\nby the Licensed Patents. The patent license shall not apply to any other\ncombinations which include the Contribution. No hardware per se is\nlicensed hereunder.</p>\n\n<p class=\"list\">c) Recipient understands that although each Contributor\ngrants the licenses to its Contributions set forth herein, no assurances\nare provided by any Contributor that the Program does not infringe the\npatent or other intellectual property rights of any other entity. Each\nContributor disclaims any liability to Recipient for claims brought by\nany other entity based on infringement of intellectual property rights\nor otherwise. As a condition to exercising the rights and licenses\ngranted hereunder, each Recipient hereby assumes sole responsibility to\nsecure any other intellectual property rights needed, if any. For\nexample, if a third party patent license is required to allow Recipient\nto distribute the Program, it is Recipient's responsibility to acquire\nthat license before distributing the Program.</p>\n\n<p class=\"list\">d) Each Contributor represents that to its knowledge it\nhas sufficient copyright rights in its Contribution, if any, to grant\nthe copyright license set forth in this Agreement.</p>\n\n<p><b>3. REQUIREMENTS</b></p>\n\n<p>A Contributor may choose to distribute the Program in object code\nform under its own license agreement, provided that:</p>\n\n<p class=\"list\">a) it complies with the terms and conditions of this\nAgreement; and</p>\n\n<p class=\"list\">b) its license agreement:</p>\n\n<p class=\"list\">i) effectively disclaims on behalf of all Contributors\nall warranties and conditions, express and implied, including warranties\nor conditions of title and non-infringement, and implied warranties or\nconditions of merchantability and fitness for a particular purpose;</p>\n\n<p class=\"list\">ii) effectively excludes on behalf of all Contributors\nall liability for damages, including direct, indirect, special,\nincidental and consequential damages, such as lost profits;</p>\n\n<p class=\"list\">iii) states that any provisions which differ from this\nAgreement are offered by that Contributor alone and not by any other\nparty; and</p>\n\n<p class=\"list\">iv) states that source code for the Program is available\nfrom such Contributor, and informs licensees how to obtain it in a\nreasonable manner on or through a medium customarily used for software\nexchange.</p>\n\n<p>When the Program is made available in source code form:</p>\n\n<p class=\"list\">a) it must be made available under this Agreement; and</p>\n\n<p class=\"list\">b) a copy of this Agreement must be included with each\ncopy of the Program.</p>\n\n<p>Contributors may not remove or alter any copyright notices contained\nwithin the Program.</p>\n\n<p>Each Contributor must identify itself as the originator of its\nContribution, if any, in a manner that reasonably allows subsequent\nRecipients to identify the originator of the Contribution.</p>\n\n<p><b>4. COMMERCIAL DISTRIBUTION</b></p>\n\n<p>Commercial distributors of software may accept certain\nresponsibilities with respect to end users, business partners and the\nlike. While this license is intended to facilitate the commercial use of\nthe Program, the Contributor who includes the Program in a commercial\nproduct offering should do so in a manner which does not create\npotential liability for other Contributors. Therefore, if a Contributor\nincludes the Program in a commercial product offering, such Contributor\n(&quot;Commercial Contributor&quot;) hereby agrees to defend and\nindemnify every other Contributor (&quot;Indemnified Contributor&quot;)\nagainst any losses, damages and costs (collectively &quot;Losses&quot;)\narising from claims, lawsuits and other legal actions brought by a third\nparty against the Indemnified Contributor to the extent caused by the\nacts or omissions of such Commercial Contributor in connection with its\ndistribution of the Program in a commercial product offering. The\nobligations in this section do not apply to any claims or Losses\nrelating to any actual or alleged intellectual property infringement. In\norder to qualify, an Indemnified Contributor must: a) promptly notify\nthe Commercial Contributor in writing of such claim, and b) allow the\nCommercial Contributor to control, and cooperate with the Commercial\nContributor in, the defense and any related settlement negotiations. The\nIndemnified Contributor may participate in any such claim at its own\nexpense.</p>\n\n<p>For example, a Contributor might include the Program in a commercial\nproduct offering, Product X. That Contributor is then a Commercial\nContributor. If that Commercial Contributor then makes performance\nclaims, or offers warranties related to Product X, those performance\nclaims and warranties are such Commercial Contributor's responsibility\nalone. Under this section, the Commercial Contributor would have to\ndefend claims against the other Contributors related to those\nperformance claims and warranties, and if a court requires any other\nContributor to pay any damages as a result, the Commercial Contributor\nmust pay those damages.</p>\n\n<p><b>5. NO WARRANTY</b></p>\n\n<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS\nPROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS\nOF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION,\nANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY\nOR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely\nresponsible for determining the appropriateness of using and\ndistributing the Program and assumes all risks associated with its\nexercise of rights under this Agreement , including but not limited to\nthe risks and costs of program errors, compliance with applicable laws,\ndamage to or loss of data, programs or equipment, and unavailability or\ninterruption of operations.</p>\n\n<p><b>6. DISCLAIMER OF LIABILITY</b></p>\n\n<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT\nNOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING\nWITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR\nDISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED\nHEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>\n\n<p><b>7. GENERAL</b></p>\n\n<p>If any provision of this Agreement is invalid or unenforceable under\napplicable law, it shall not affect the validity or enforceability of\nthe remainder of the terms of this Agreement, and without further action\nby the parties hereto, such provision shall be reformed to the minimum\nextent necessary to make such provision valid and enforceable.</p>\n\n<p>If Recipient institutes patent litigation against any entity\n(including a cross-claim or counterclaim in a lawsuit) alleging that the\nProgram itself (excluding combinations of the Program with other\nsoftware or hardware) infringes such Recipient's patent(s), then such\nRecipient's rights granted under Section 2(b) shall terminate as of the\ndate such litigation is filed.</p>\n\n<p>All Recipient's rights under this Agreement shall terminate if it\nfails to comply with any of the material terms or conditions of this\nAgreement and does not cure such failure in a reasonable period of time\nafter becoming aware of such noncompliance. If all Recipient's rights\nunder this Agreement terminate, Recipient agrees to cease use and\ndistribution of the Program as soon as reasonably practicable. However,\nRecipient's obligations under this Agreement and any licenses granted by\nRecipient relating to the Program shall continue and survive.</p>\n\n<p>Everyone is permitted to copy and distribute copies of this\nAgreement, but in order to avoid inconsistency the Agreement is\ncopyrighted and may only be modified in the following manner. The\nAgreement Steward reserves the right to publish new versions (including\nrevisions) of this Agreement from time to time. No one other than the\nAgreement Steward has the right to modify this Agreement. The Eclipse\nFoundation is the initial Agreement Steward. The Eclipse Foundation may\nassign the responsibility to serve as the Agreement Steward to a\nsuitable separate entity. Each new version of the Agreement will be\ngiven a distinguishing version number. The Program (including\nContributions) may always be distributed subject to the version of the\nAgreement under which it was received. In addition, after a new version\nof the Agreement is published, Contributor may elect to distribute the\nProgram (including its Contributions) under the new version. Except as\nexpressly stated in Sections 2(a) and 2(b) above, Recipient receives no\nrights or licenses to the intellectual property of any Contributor under\nthis Agreement, whether expressly, by implication, estoppel or\notherwise. All rights in the Program not expressly granted under this\nAgreement are reserved.</p>\n\n<p>This Agreement is governed by the laws of the State of New York and\nthe intellectual property laws of the United States of America. No party\nto this Agreement will bring a legal action under this Agreement more\nthan one year after the cause of action arose. Each party waives its\nrights to a jury trial in any resulting litigation.</p>\n\n</body>\n\n</html>"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.123046875,
          "content": "#increase jvm heap space available for gradle\n#(allows to run dex in the same process as gradle)\norg.gradle.jvmargs=-Xmx4608M\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.6826171875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n\tPRG=\"$link\"\n    else\n\tPRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n\t# IBM's JDK on AIX uses strange locations for the executables\n\tJAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n\tJAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n\tdie \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n\tif [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n\t    MAX_FD=\"$MAX_FD_LIMIT\"\n\tfi\n\tulimit -n $MAX_FD\n\tif [ $? -ne 0 ] ; then\n\t    warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n\tfi\n    else\n\twarn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n\tROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n\tSEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n\tOURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n\tCHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n\tCHECK2=`echo \"$arg\"|egrep -c \"^-\"`\t\t\t\t   ### Determine if an option\n\n\tif [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then \t\t   ### Added a condition\n\t    eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n\telse\n\t    eval `echo args$i`=\"\\\"$arg\\\"\"\n\tfi\n\ti=$((i+1))\n    done\n    case $i in\n\t(0) set -- ;;\n\t(1) set -- \"$args0\" ;;\n\t(2) set -- \"$args0\" \"$args1\" ;;\n\t(3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n\t(4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n\t(5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n\t(6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n\t(7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n\t(8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n\t(9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "j2v8-cli.cmd",
          "type": "blob",
          "size": 0.2822265625,
          "content": ":: This script adds aliases for some of the most often used commands for building J2V8\n:: to your current command-shell instance. (can be invoked as \"j2v8-cli\")\n@echo off\n\ndoskey build=python build.py $*\ndoskey nodejs=python nodejs.py $*\ndoskey citests=python build_system\\run_tests.py $*\n"
        },
        {
          "name": "j2v8-cli.sh",
          "type": "blob",
          "size": 0.37109375,
          "content": "#!/bin/bash\n# This script adds aliases for some of the most often used commands for building J2V8\n# to your current command-shell instance. (can be invoked as \"source j2v8-cli.sh\")\n\nif command -v python2 &>/dev/null; then\n\talias build=\"python2 build.py\"\n\talias nodejs=\"python2 nodejs.py\"\n\talias citests=\"python2 build_system/run_tests.py\"\nelse\n\t echo Python 2 is not installed\nfi\n"
        },
        {
          "name": "jni",
          "type": "tree",
          "content": null
        },
        {
          "name": "node.patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "nodejs.py",
          "type": "blob",
          "size": 12.4326171875,
          "content": "\"\"\"\nUtility-belt script to manage the Node.js/V8 dependency\n\"\"\"\nimport argparse\nimport collections\nimport fnmatch\nimport glob\nimport io\nfrom itertools import ifilter\nimport os\nimport sys\nimport tarfile\nimport zipfile\n\nimport build_system.constants as c\nimport build_system.build_constants as bc\nimport build_system.build_utils as utils\nimport build_system.build_settings as settings\n\nCMD_LINEBREAK = \"\\n\\n\"\n\n# helper classes to show zipping progress\n# original idea: https://stackoverflow.com/a/3668977/425532\nclass ReadProgressFileObject(io.FileIO):\n    current_read = 0\n    def __init__(self, path, *args, **kwargs):\n        io.FileIO.__init__(self, path, *args, **kwargs)\n\n    def read(self, size):\n        b = io.FileIO.read(self, size)\n        ReadProgressFileObject.current_read += len(b)\n        return b\n\nclass WriteProgressFileObject(io.FileIO):\n    def __init__(self, path, size, *args, **kwargs):\n        self._total_size = size\n        io.FileIO.__init__(self, path, *args, **kwargs)\n\n    def write(self, b):\n        progress = min(100.0, ReadProgressFileObject.current_read / (self._total_size * 0.01))\n        sys.stdout.write(\"\\r[%3.2f%%] \" %(progress))\n        sys.stdout.flush()\n        return io.FileIO.write(self, b)\n\nCommand = collections.namedtuple(\"Command\", \"name function help\")\nDepsDirectory = collections.namedtuple(\"DepsDirectory\", \"path include\")\n\n#-----------------------------------------------------------------------\ndef flush_cache(args = None, silent = False):\n    if not silent:\n        print \"[flush-cache]\"\n\n    utils.store_nodejs_output(None, \".\")\n\n    if not silent:\n        print \"Done\" \n\ncmd_flush_cache = Command(\n    name=\"flush-cache\",\n    function=flush_cache,\n    help=\"Move any Node.js/V8 native build-artifacts (.o/.a/.lib) from the './node' directory into the 'node.out' cache subdirectory\\n\" + \\\n    \"         of the respective vendor/platform/architecture.\"\n)\n#-----------------------------------------------------------------------\ndef git_clone(args):\n    print \"[git-clone]\"\n\n    # TODO: add CLI overide options\n    # - Node version\n    # - J2V8 version\n\n    flush_cache(silent=True)\n\n    if (not os.path.exists(\"node\")):\n        print \"Cloning Node.js version: \" + settings.NODE_VERSION\n        # NOTE: autocrlf=false is very important for linux based cross-compiles of Node.js to work on a windows docker host\n        utils.execute(\"git clone https://github.com/nodejs/node --config core.autocrlf=false --depth 1 --branch v\" + settings.NODE_VERSION)\n    else:\n        print \"Skipped git-clone: Node.js source-code is already cloned & checked out at the './node' directory.\"\n\n    print \"Done\"\n\ncmd_git_clone = Command(\n    name=\"git-clone\",\n    function=git_clone,\n    help=\"   Clone the C++ source-code from the official Node.js GitHub repository.\" + \\\n    \"\\n            (the Node.js version branch from build_settings.py will be checked out automatically)\"\n)\n#-----------------------------------------------------------------------\ndef git_checkout(args):\n    print \"[git-checkout]\"\n\n    flush_cache(silent=True)\n\n    if (os.path.exists(\"node\")):\n        print \"Checkout Node.js version: \" + settings.NODE_VERSION\n\n        # TODO: is there a way to fetch/checkout only a single remote tag\n        utils.execute(\"git fetch -v --progress --tags --depth 1 origin\", \"node\")\n        utils.execute(\"git checkout --progress tags/v\" + settings.NODE_VERSION + \" -b v\" + settings.NODE_VERSION, \"node\")\n    else:\n        print \"ERROR: Node.js source-code was not yet cloned into the './node' directory, run 'python nodejs.py git-clone' first.\"\n\n    print \"Done\"\n\ncmd_git_checkout = Command(\n    name=\"git-checkout\",\n    function=git_checkout,\n    help=\"Checkout the correct git branch for the Node.js version specified in build_settings.py\"\n)\n#-----------------------------------------------------------------------\ndef package(platforms = None):\n    print \"[package]\"\n\n    full = platforms == None or len(platforms) == 0\n\n    # make sure all node.js binaries are stored in the cache before packaging\n    flush_cache(silent=True)\n\n    # C++ header files\n    # NOTE: see https://stackoverflow.com/a/4851555/425532 why this weird syntax is necessary here\n    dependencies = {\n        \"list\": [\n            DepsDirectory(path=\"./node/deps/\", include=[\".h\"]),\n            DepsDirectory(path=\"./node/src/\", include=[\".h\"]),\n        ],\n        \"size\": 0,\n    }\n\n    def __add_platform_deps(platform, include, vendor = None):\n        target = bc.platform_configs.get(platform)\n        vendor_str = (vendor + \"-\" if vendor else \"\")\n        selected = (vendor_str + platform) in platforms\n\n        if (full or selected):\n            dependencies[\"list\"] += [\n                DepsDirectory(\n                    path=\"./node.out/\" + vendor_str + platform + \".\" + arch + \"/\",\n                    include=[\"j2v8.node.out\"] + include\n                ) for arch in target.architectures\n            ]\n\n    # specify the platforms & file patterns that should be included\n    __add_platform_deps(c.target_android, [\".o\", \".a\"])\n    __add_platform_deps(c.target_linux, [\".o\", \".a\"])\n    __add_platform_deps(c.target_linux, [\".o\", \".a\"], vendor = c.vendor_alpine)\n    __add_platform_deps(c.target_macos, [\".a\"])\n    __add_platform_deps(c.target_win32, [\".lib\"])\n\n    # could be a package for an individual platform, or a complete package\n    package_platform = platforms[0] + \"-\" if len(platforms) == 1 else \"\"\n    package_filename = \"j2v8-nodejs-deps-\" + package_platform + settings.J2V8_VERSION + \".tar.bz2\"\n\n    # determine the uncompressed total size of all included files\n    for dep in dependencies[\"list\"]:\n        print \"scan \" + dep.path\n        for root, dirs, filenames in os.walk(dep.path):\n            for pattern in dep.include:\n                for file_name in fnmatch.filter(filenames, '*' + pattern):\n                    file_path = os.path.join(root, file_name)\n                    dependencies[\"size\"] += os.path.getsize(file_path)\n\n    # start zipping the package\n    with tarfile.open(fileobj=WriteProgressFileObject(package_filename, dependencies[\"size\"], \"w\"), mode=\"w:bz2\") as zipf:\n    # with tarfile.open(package_filename, \"w:bz2\") as zipf:\n    # with zipfile.ZipFile(\"j2v8-nodejs-deps-\" + settings.J2V8_VERSION + \".zip\", \"w\", zipfile.ZIP_DEFLATED) as zipf:\n        for dep in dependencies[\"list\"]:\n            print \"compress \" + dep.path\n            dir_path = os.path.normpath(dep.path)\n\n            for root, dirs, files in os.walk(dir_path):\n                for f in files:\n                    file_path = os.path.join(root, f)\n\n                    copy_file = False\n\n                    for pattern in dep.include:\n                        if (file_path.endswith(pattern)):\n                            copy_file = True\n                            break\n\n                    if (copy_file):\n                        # only show files > 1 MB\n                        if (os.path.getsize(file_path) > 1024 * 1024):\n                            print file_path\n\n                        # zipf.write(file_path)\n                        # zipf.add(file_path)\n                        info = zipf.gettarinfo(file_path)\n                        zipf.addfile(info, ReadProgressFileObject(file_path))\n\n    print \"Done\"\n    print \"generated: \" + package_filename\n\ncmd_package = Command(\n    name=\"package\",\n    function=package,\n    help=\"Create a .tar.bz2 dependency package with all the currently built Node.js/V8 binaries from the './node.out' cache directories.\"\n)\n#-----------------------------------------------------------------------\ndef touch(platforms = None):\n    full = platforms == None or len(platforms) == 0\n\n    # make sure all node.js binaries are stored in the cache before resetting file-times\n    flush_cache(silent=True)\n\n    dependencies = {\n        \"list\": [],\n    }\n\n    # TODO: extract shared code between this and \"package\" command\n    def __add_platform_deps(platform, include, vendor = None):\n        target = bc.platform_configs.get(platform)\n        vendor_str = (vendor + \"-\" if vendor else \"\")\n        selected = (vendor_str + platform) in platforms\n\n        if (full or selected):\n            dependencies[\"list\"] += [\n                DepsDirectory(\n                    path=\"./node.out/\" + vendor_str + platform + \".\" + arch + \"/\",\n                    include=[\"j2v8.node.out\"] + include\n                ) for arch in target.architectures\n            ]\n\n    # specify the platforms & file patterns that should be included\n    __add_platform_deps(c.target_android, [\".o\", \".a\"])\n    __add_platform_deps(c.target_linux, [\".o\", \".a\"])\n    __add_platform_deps(c.target_linux, [\".o\", \".a\"], vendor = c.vendor_alpine)\n    __add_platform_deps(c.target_macos, [\".a\"])\n    __add_platform_deps(c.target_win32, [\".lib\"])\n\n    # set modification-time of all found binary files\n    for dep in dependencies[\"list\"]:\n        print \"set current file-time \" + dep.path\n        for root, dirs, filenames in os.walk(dep.path):\n            for pattern in dep.include:\n                for file_name in fnmatch.filter(filenames, '*' + pattern):\n                    file_path = os.path.join(root, file_name)\n                    utils.touch(file_path)\n\ncmd_touch = Command(\n    name=\"touch\",\n    function=touch,\n    help=\"Set modification-time of all currently built Node.js/V8 binaries in the './node.out' cache directories.\"\n)\n#-----------------------------------------------------------------------\ndef store_diff(args):\n    print \"[store-diff]\"\n\n    patch_file = os.path.join(\"..\", \"node.patches\", settings.NODE_VERSION + \".diff\")\n    print \"Storing local changes to patch-file: \" + patch_file\n\n    utils.execute(\"git diff > \" + patch_file, \"node\")\n    print \"Done\"\n\ncmd_store_diff = Command(\n    name=\"store-diff\",\n    function=store_diff,\n    help=\"Create a patch-file in the './node.patches' directory with the current local modifications\\n\" +\n    \"          to the Node.js/V8 source-code.\\n\" +\n    \"          (the Node.js version from build_settings.py will be included in the patch filename).\"\n)\n#-----------------------------------------------------------------------\ndef apply_diff(args, silent = False):\n    if not silent:\n        print \"[apply-diff]\"\n\n    patch_file = os.path.join(\"node.patches\", settings.NODE_VERSION + \".diff\")\n\n    if (os.path.exists(patch_file)):\n        print \"Applying Node.js patch: \" + patch_file\n        utils.execute(\"git apply \" + os.path.join(\"..\", patch_file), \"node\")\n    else:\n        print \"No special Node.js patch present for this version\"\n\n    if not silent:\n        print \"Done\"\n\ncmd_apply_diff = Command(\n    name=\"apply-diff\",\n    function=apply_diff,\n    help=\" Apply a previously created patch-file to the currently checked out Node.js/V8 source-code.\"\n)\n#-----------------------------------------------------------------------\n\n#-----------------------------------------------------------------------\n# Command-Line setup\n#-----------------------------------------------------------------------\ncommands = {\n    \"git\": {\n        \"__help\": \" Download and manage the Node.js/V8 source code for building J2V8 from source.\",\n        \"clone\": cmd_git_clone,\n        \"checkout\": cmd_git_checkout,\n    },\n    \"bin\": {\n        \"__help\": \" Manage the binary build-artifacts that are produced by Node.js/V8 builds.\",\n        \"flush\": cmd_flush_cache,\n        \"package\": cmd_package,\n        \"touch\": cmd_touch,\n    },\n    \"diff\": {\n        \"__help\": \"Create and apply Git patch-files for Node.js that are required for interoperability with J2V8.\",\n        \"create\": cmd_store_diff,\n        \"apply\": cmd_apply_diff,\n    },\n}\n#-----------------------------------------------------------------------\ndef parse_sub_command(args, choices, help_formatter, extra_args = None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)\n    help_str = [c + \"    \" + help_formatter(c) for c in choices]\n    parser.add_argument(\"command\", help=\"\\n\\n\".join(help_str) + \"\\n\\n\", choices=choices)\n\n    if (extra_args):\n        extra_args(parser)\n\n    args = parser.parse_args(args)\n    return args\n#-----------------------------------------------------------------------\n\n# parse first level command\nargs = parse_sub_command(sys.argv[1:2], commands, lambda c: commands[c].get(\"__help\"))\nlvl1_cmd = commands.get(args.command)\n\n# parse second level command\nsub_choices = filter(lambda x: x != \"__help\", lvl1_cmd)\nargs = parse_sub_command(sys.argv[2:], sub_choices, lambda c: lvl1_cmd[c].help, \\\n    lambda parser: parser.add_argument(\"args\", nargs=\"*\"))\nlvl2_cmd = args.command\n\n# get the final command handler and delegate all further parameters to it\ncmd_handler = lvl1_cmd.get(lvl2_cmd)\ncmd_handler.function(sys.argv[3:])\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 5.583984375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <!--\n  The following XML values will be replaced by the build-system before the\n  JAR package is compiled and bundled in the \"j2v8java\" build-step.\n  (any changes that you made to these XML values will then be overwritten!)\n  - <os>\n  - <arch>\n  - <artifactId>\n  - <version>\n  - <name>\n\n  If you want to specify a different version string for the JAR bundle,\n  please change the values in build_settings.py instead.\n  -->\n  <os>macos</os>\n  <ws>gtk</ws>\n  <arch>x86_64</arch>\n  </properties>\n\n  <groupId>com.eclipsesource.j2v8</groupId>\n  <artifactId>j2v8_macos_x86_64</artifactId>\n  <version>5.1.0-SNAPSHOT</version>\n  <packaging>bundle</packaging>\n\n  <name>j2v8_macos_x86_64</name>\n  <description>J2V8 is a set of Java bindings for V8</description>\n  <url>https://github.com/eclipsesource/j2v8</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License - v 1.0</name>\n      <url>https://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <developers>\n    <developer>\n      <name>R. Ian Bull</name>\n      <email>irbull@eclipsesource.com</email>\n      <organization>EclipseSource</organization>\n      <organizationUrl>http://www.eclipsesource.com</organizationUrl>\n    </developer>\n  </developers>\n  <scm>\n    <connection>scm:git:git@github.com:eclipsesource/J2V8.git</connection>\n    <developerConnection>scm:git:git@github.com:eclipsesource/J2V8.git</developerConnection>\n    <url>git@github.com:eclipsesource/J2V8.git</url>\n  </scm>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <version>2.6.3</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.1</version>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.22.0</version>\n        <configuration>\n          <forkMode>once</forkMode>\n          <forkCount>1</forkCount>\n          <reuseForks>true</reuseForks>\n          <workingDirectory>target</workingDirectory>\n          <argLine>-Djava.library.path=${basedir}/jni</argLine>\n          <runOrder>alphabetical</runOrder>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <extensions>true</extensions>\n        <version>3.5.1</version>\n        <configuration>\n          <instructions>\n            <Export-Package>com.eclipsesource.v8.*</Export-Package>\n            <Eclipse-PlatformFilter>(&amp; (osgi.ws=${ws})(osgi.os=${os})(osgi.arch=${arch}))</Eclipse-PlatformFilter>\n          </instructions>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <version>1.6.3</version>\n            <extensions>true</extensions>\n            <configuration>\n              <serverId>ossrh</serverId>\n              <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n            <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.2.1</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar-no-fork</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.9.1</version>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.5</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "project.properties",
          "type": "blob",
          "size": 0.36328125,
          "content": "# This file is automatically generated by Android Tools.\r\n# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\r\n#\r\n# This file must be checked in Version Control Systems.\r\n#\r\n# To customize properties used by the Ant build system use,\r\n# \"ant.properties\", and override values to adapt the script to your\r\n# project structure.\r\n\r\n# Project target.\r\ntarget=android-19\r\n"
        },
        {
          "name": "releng",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "v8",
          "type": "tree",
          "content": null
        },
        {
          "name": "vagrant",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}