{
  "metadata": {
    "timestamp": 1736608873372,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mcxiaoke/packer-ng-plugin",
      "stars": 4827,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": ".idea/\n.gradle/\nbuild/\napks/\nrepo/\ndist/\ntmp/\n*.iml\n*.apk\n*.pyc\n*.d\n*.o\n*.class\n.DS_Store\na.out\n.classpath\n.project\n.settings/\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.3291015625,
          "content": "ext {\n    compileSdkVersion = 27\n    buildToolsVersion = \"27.0.3\"\n    minSdkVersion = 14\n    targetSdkVersion = 26\n}\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:3.0.1\"\n    }\n}\n\ngroup = GROUP\nversion = VERSION_NAME\n"
        },
        {
          "name": "channels",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility.md",
          "type": "blob",
          "size": 1.3955078125,
          "content": "# 兼容性问题\n\n------\n\n \t更新时间：2016.08.05\n \n## APK signature scheme v2\n\n- **使用最新版SDK(Android Gradle Plugin 2.2.0+)时，请务必在 `signingConfigs` 里加入 `v2SigningEnabled false` ，否则打包时会报错**\n\n```groovy\napply plugin: 'packer' \n\ndependencies {\n\tcompile 'com.mcxiaoke.gradle:packer-helper:1.0.8'\n} \n\n android {\n    //...\n    signingConfigs {\n      release {\n      \t// 如果要支持最新版的系统 Android 7.0\n      \t// 这一行必须加，否则安装时会提示没有签名\n      \t// 作用是只使用旧版签名，禁用V2版签名模式\n        v2SigningEnabled false \n      }\n    }\n  }\n```\n\n为了提高Android系统的安全性，Google从Android 7.0开始增加一种新的增强签名模式，从`Android Gradle Plugin 2.2.0`开始，构建系统在打包应用后签名时默认使用`APK signature scheme v2`，该模式在原有的签名模式上，增加校验APK的SHA256哈希值，如果签名后对APK作了任何修改，安装时会校验失败，提示没有签名无法安装，使用本工具修改的APK会无法安装，**解决办法是在 `signingConfigs` 里增加 `v2SigningEnabled false`** ，禁用新版签名模式，技术细节请看官方文档：[APK signature scheme v2](https://developer.android.com/preview/api-overview.html#apk_signature_v2)，还有这里 [Issue 31](https://github.com/mcxiaoke/packer-ng-plugin/issues/31) 的讨论 。\n"
        },
        {
          "name": "deploy-local.sh",
          "type": "blob",
          "size": 0.212890625,
          "content": "#!/usr/bin/env bash\necho \"deploy plugin artifacts to local repo\"\n# rm -rf /tmp/repo/\n./gradlew -PRELEASE_REPOSITORY_URL=file:///tmp/repo -PSNAPSHOT_REPOSITORY_URL=file:///tmp/repo/ clean uploadArchives --stacktrace $1\n"
        },
        {
          "name": "deploy-remote.sh",
          "type": "blob",
          "size": 0.123046875,
          "content": "#!/usr/bin/env bash\necho \"build and deploy plugin artifacts to remote repo...\"\n./gradlew clean uploadArchives --stacktrace $1\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle-mvn-push.gradle",
          "type": "blob",
          "size": 6.65234375,
          "content": "/*\n * Copyright 2013 Chris Banes\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\napply plugin: 'maven'\napply plugin: 'signing'\n\nversion = VERSION_NAME\ngroup = GROUP\n\ndef isReleaseBuild() {\n    return VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME')?NEXUS_USERNAME:\"\")\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD')?NEXUS_PASSWORD:\"\")\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                repository(url: getReleaseRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n                snapshotRepository(url: getSnapshotRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')) {\n        task install(type: Upload, dependsOn: assemble) {\n            repositories.mavenInstaller {\n                configuration = configurations.archives\n\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n\n        task androidJavadocs(type: Javadoc) {\n            failOnError false\n            source = android.sourceSets.main.java.source\n            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n        }\n\n        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {\n            classifier = 'javadoc'\n            from androidJavadocs.destinationDir\n        }\n\n        task androidSourcesJar(type: Jar) {\n            classifier = 'sources'\n            from android.sourceSets.main.java.source\n        }\n    } else {\n        install {\n            repositories.mavenInstaller {\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    \n        task sourcesJar(type: Jar, dependsOn:classes) {\n            classifier = 'sources'\n            from sourceSets.main.allSource\n        }\n\n        task javadocJar(type: Jar, dependsOn:javadoc) {\n            classifier = 'javadoc'\n            from javadoc.destinationDir\n        }\n    }\n\n    artifacts {\n        if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')) {\n            archives androidSourcesJar\n            archives androidJavadocsJar\n        } else {\n            archives sourcesJar\n            archives javadocJar\n        }\n    }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.6162109375,
          "content": "VERSION_NAME=2.0.1\nVERSION_CODE=200\n\nGROUP=com.mcxiaoke.packer-ng\n\nPOM_DESCRIPTION=Next Generation Android Multi Packer Gradle Plugin\nPOM_URL=https://github.com/mcxiaoke/packer-ng-plugin\nPOM_SCM_URL=https://github.com/mcxiaoke/packer-ng-plugin.git\nPOM_SCM_CONNECTION=scm:git:https://github.com/mcxiaoke/packer-ng-plugin.git\nPOM_SCM_DEV_CONNECTION=scm:git:https://github.com/mcxiaoke/packer-ng-plugin.git\nPOM_LICENCE_NAME=Apache License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=mcxiaoke\nPOM_DEVELOPER_NAME=Xiaoke Zhang\nPOM_DEVELOPER_EMAIL=packer-ng@mcxiaoke.com\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9599609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now handle the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "huge_markets_test.py",
          "type": "blob",
          "size": 0.470703125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: mcxiaoke\n# @Date:   2015-11-25 14:30:02\nimport subprocess\nimport os\nimport sys\n\nwith open('huge_markets.txt', 'w') as f:\n    for i in range(int(sys.argv[1])):\n        f.write(\"Test Market %s#test market %s\\n\" % (i, i))\n        f.write(\"中文:MARKET%s#test market %s\\n\" % (i, i))\n\nsubprocess.check_output([\"./gradlew\", \"-Pchannels=@huge_markets.txt\", \"-Poutput=tmp\", \"clean\", \"apkPaidRelease\"])\nos.remove('huge_markets.txt')\n"
        },
        {
          "name": "markets.txt",
          "type": "blob",
          "size": 0.2021484375,
          "content": "Google_Market#Google电子市场\n安卓市场#安卓市场\n 91_market#91商城\n\nsony_market     #sony商城\nUC浏览器  #UC浏览器\n  360SearchApp#360SearchApp\nHelloMarket\nOkMarket#\n#ErrorMarket\n#####\n#\n\n\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 9.6845703125,
          "content": "# Packer-NG Gradle Plugin V2\n\n### 提示：本项目已停止新功能开发，有需要的请自行Fork修改\n\n```\n对Gradle 7.x的支持，欢迎提PR，或者Fork自己修改（2022.06.27）\n```\n\n极速渠道打包工具\n\n- **v2.0.1 - 2018.03.23** - 支持Android Plugin 3.x和Gradle 4.x\n- **v2.0.0 - 2017.06.23** - 全新发布，支持V2签名模式，包含多项优化\n\n<!-- TOC -->\n\n- [特别提示](#特别提示)\n- [项目介绍](#项目介绍)\n- [使用指南](#使用指南)\n    - [修改项目配置](#修改项目配置)\n    - [修改模块配置](#修改模块配置)\n    - [插件配置示例](#插件配置示例)\n    - [渠道列表格式](#渠道列表格式)\n    - [集成打包](#集成打包)\n    - [脚本打包](#脚本打包)\n    - [代码中读取渠道](#代码中读取渠道)\n    - [文件名格式模版](#文件名格式模版)\n- [其它说明](#其它说明)\n- [关于作者](#关于作者)\n    - [联系方式](#联系方式)\n    - [开源项目](#开源项目)\n- [License](#license)\n\n<!-- /TOC -->\n\n## 特别提示\n\nV2版只支持`APK Signature Scheme v2`，要求在 `signingConfigs` 里 `v2SigningEnabled true` 启用新版签名模式，如果你需要使用旧版本，看这里 [v1.0.9](https://github.com/mcxiaoke/packer-ng-plugin/tree/v1.0.9)。\n\n## 项目介绍\n\n[**packer-ng-plugin**](https://github.com/mcxiaoke/packer-ng-plugin) 是下一代Android渠道打包工具Gradle插件，支持极速打包，**100**个渠道包只需要**10**秒钟，速度是 [**gradle-packer-plugin**](https://github.com/mcxiaoke/gradle-packer-plugin) 的**300**倍以上，可方便的用于CI系统集成，同时提供命令行打包脚本，渠道读取提供Python和C语言的实现。\n\n## 使用指南\n\n[`Maven Central`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22packer-ng%22)\n\n### 修改项目配置\n\n```groovy\n// build.gradle\nbuildscript {\n    dependencies{\n        classpath 'com.mcxiaoke.packer-ng:plugin:2.0.1'\n    }\n}\n```\n\n### 修改模块配置\n\n```groovy\napply plugin: 'packer'\n// build.gradle\ndependencies {\n    compile 'com.mcxiaoke.packer-ng:helper:2.0.1'\n}\n```\n\n**注意：`plugin` 和 `helper` 的版本号需要保持一致**\n\n### 插件配置示例\n\n```groovy\npacker {\n    archiveNameFormat = '${buildType}-v${versionName}-${channel}'\n    archiveOutput = new File(project.rootProject.buildDir, \"apks\")\n//    channelList = ['*Douban*', 'Google/', '中文/@#市场', 'Hello@World',\n//                   'GradleTest', '20070601!@#$%^&*(){}:\"<>?-=[];\\',./']\n//    channelFile = new File(project.rootDir, \"markets.txt\")\n    channelMap = [\n            \"Cat\" : project.rootProject.file(\"channels/cat.txt\"),\n            \"Dog\" : project.rootProject.file(\"channels/dog.txt\"),\n            \"Fish\": project.rootProject.file(\"channels/channels.txt\")\n    ]\n}\n```\n\n* **archiveNameFormat** - 指定最终输出的渠道包文件名的格式模版，详细说明见后面，默认值是 `${appPkg}-${channel}-${buildType}-v${versionName}-${versionCode}` (可选)\n* **archiveOutput** - 指定最终输出的渠道包的存储位置，默认值是 `${project.buildDir}/archives` (可选)\n* **channelList** - 指定渠道列表，List类型，见示例\n* **channelMap** - 根据productFlavor指定不同的渠道列表文件，见示例\n* **channelFile** - 指定渠道列表文件，File类型，见示例\n\n注意：`channelList` / `channelMap` / `channelFile` 不能同时使用，根据实际情况选择一种即可，三个属性同时存在时优先级为： `channelList` > `channelMap` > `channelFile `，另外，这三个属性会被命令行参数 `-Pchannels` 覆盖。\n\n### 渠道列表格式\n\n渠道名列表文件是纯文本文件，按行读取，每行一个渠道，行首和行尾的空白会被忽略，如果有注释，渠道名和注释之间用 `#` 分割。\n\n渠道名建议尽量使用规范的**中英文和数字**，不要使用特殊字符和不可见字符。示例：[channels.txt](blob/v2dev/channels/channels.txt)\n\n### 集成打包\n\n* 项目中没有使用 `productFlavors`\n\n    ```shell\n    ./gradlew clean apkRelease\n    ```\n\n* 项目中使用了 `productFlavors`\n\n    如果项目中指定了多个 `flavor` ，需要指定需要打渠道包的 `flavor` 名字，假设你有 `Paid` `Free` 两个 `flavor` ，打包的时候命令如下：\n\n    ```shell\n    ./gradlew clean apkPaidRelease\n    ./gradlew clean apkFreeRelease\n    ```\n\n    直接使用 `./gradlew clean apkRelease` 会输出所有 `flavor` 的渠道包。\n\n* 通过参数直接指定渠道列表(会覆盖`build.gradle`中的属性)：\n\n    ```shell\n    ./gradlew clean apkRelease -Pchannels=ch1,ch2,douban,google\n    ```\n\n    渠道数目很少时可以使用此种方式。\n\n* 通过参数指定渠道列表文件的位置(会覆盖`build.gradle`中的属性)：\n\n    ```shell\n    ./gradlew clean apkRelease -Pchannels=@channels.txt\n    ```\n\n    使用@符号指定渠道列表文件的位置，使用相对于项目根目录的相对路径。\n\n* 还可以指定输出目录和文件名格式模版：\n\n    ```shell\n    ./gradlew clean apkRelease -Poutput=build/apks\n    ./gradlew clean apkRelease -Pformat=${versionName}-${channel}\n    ```\n\n    这些参数 `channels` `output` `format` 可以组合使用，命令行参数会覆盖 `build.gradle` 对应的属性。\n\n* Gradle打包命令说明\n\n    渠道打包的Task名字是 `apk${flavor}${buildType}` buildType一般是release，也可以是你自己指定的beta或者someOtherType，如果没有 `flavor` 可以忽略，使用时首字母需要大写，假设 `flavor` 是 `Paid`，`release`类型对应的任务名是 `apkPaidRelease`，`beta`类型对应的任务名是 `apkPaidBetaBeta`，其它的以此类推。\n\n* 特别提示\n\n    如果你同时使用其它的资源压缩工具或应用加固功能，请使用命令行脚本打包增加渠道信息，增加渠道信息需要放在APK处理过程的最后一步。\n\n### 脚本打包\n\n除了使用Gradle集成以外，还可以使用项目提供的Java脚本打包，Jar位于本项目的 `tools` 目录，请使用最新版，以下用 `packer-ng` 指代 `java -jar tools/packer-ng-2.0.1.jar`，下面是几个示例。\n\n* 参数说明：\n\n```\npacker-ng - 表示 java -jar packer-ng-2.0.1.jar\nchannels.txt - 替换成你的渠道列表文件的实际路径\nbuild/archives - 替换成你指定的渠道包的输出路径\napp.apk - 替换成你要打渠道包的APK文件的实际路径\n```\n\n* 直接指定渠道列表打包：\n\n```shell\npacker-ng generate --channels=ch1,ch2,ch3 --output=build/archives app.apk\n```\n\n* 指定渠道列表文件打包：\n\n```shell\npacker-ng generate --channels=@channels.txt --output=build/archives app.apk\n```\n\n* 验证渠道信息：\n\n```shell\npacker-ng verify app.apk\n```\n\n* 运行命令查看帮助\n\n```shell\njava -jar tools/packer-ng-2.0.1.jar --help\n```\n\n* Python脚本读取渠道：\n\n```shell\npython tools/packer-ng-v2.py app.apk\n```\n\n* C程序读取渠道：\n\n```shell\ncd tools\nmake\nmake install\npacker app.apk\n```\n\n### 代码中读取渠道\n\n```java\n// 如果没有找到渠道信息或遇到错误，默认返回的是\"\"\n// com.mcxiaoke.packer.helper.PackerNg\nString channel = PackerNg.getChannel(Context)\n```\n\n### 文件名格式模版\n\n格式模版使用Groovy字符串模版引擎，默认文件名格式是： `${appPkg}-${channel}-${buildType}-v${versionName}-${versionCode}` 。\n\n假如你的App包名是  `com.your.company` ，渠道名是 `Google_Play` ，`buildType` 是 `release` ，`versionName` 是 `2.1.15` ，`versionCode` 是 `200115` ，那么生成的默认APK的文件名是 `com.your.company-Google_Player-release-2.1.15-20015.apk` 。\n\n可使用以下变量:\n\n  * *projectName* - 项目名字\n  * *appName* - App模块名字\n  * *appPkg* - `applicationId` (App包名packageName)\n  * *channel* - 打包时指定的渠道名\n  * *buildType* - `buildType` (release/debug/beta等)\n  * *flavor* - `flavor` (flavor名字，如paid/free等)\n  * *versionName* - `versionName` (显示用的版本号)\n  * *versionCode* - `versionCode` (内部版本号)\n  * *buildTime* - `buildTime` (编译构建日期时间)\n  * *fileSHA1* - `fileSHA1 ` (最终APK文件的SHA1哈希值)\n\n------\n\n## 其它说明\n\n渠道读取C语言实现使用 [GenericMakefile](https://github.com/mbcrawfo/GenericMakefile) 构建，[APK Signing Block](https://source.android.com/security/apksigning/v2) 读取和写入Java实现修改自 [apksig](https://android.googlesource.com/platform/tools/apksig/+/master) 和 [walle](https://github.com/Meituan-Dianping/walle/tree/master/payload_writer) ，特此致谢。\n\n\n------\n\n## 关于作者\n\n### 联系方式\n* Blog: <http://blog.mcxiaoke.com>\n* Github: <https://github.com/mcxiaoke>\n* Email: [packer-ng-plugin@mcxiaoke.com](mailto:packer-ng-plugin@mcxiaoke.com)\n\n### 开源项目\n\n* Rx文档中文翻译: <https://github.com/mcxiaoke/RxDocs>\n* MQTT协议中文版: <https://github.com/mcxiaoke/mqtt>\n* Awesome-Kotlin: <https://github.com/mcxiaoke/awesome-kotlin>\n* Kotlin-Koi: <https://github.com/mcxiaoke/kotlin-koi>\n* Next公共组件库: <https://github.com/mcxiaoke/Android-Next>\n* Gradle渠道打包: <https://github.com/mcxiaoke/gradle-packer-plugin>\n* EventBus实现xBus: <https://github.com/mcxiaoke/xBus>\n* 蘑菇饭App: <https://github.com/mcxiaoke/minicat>\n\n------\n\n## License\n\n    Copyright 2014 - 2021 Xiaoke Zhang\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.08203125,
          "content": "include ':common'\ninclude ':plugin'\ninclude ':cli'\ninclude ':helper'\ninclude ':app'\n"
        },
        {
          "name": "test-build.sh",
          "type": "blob",
          "size": 0.1142578125,
          "content": "#!/usr/bin/env bash\n./deploy-local.sh\necho \"test clean build\"\n./gradlew clean assemblePaidRelease --stacktrace $1 $2\n"
        },
        {
          "name": "test-market.sh",
          "type": "blob",
          "size": 0.185546875,
          "content": "#!/usr/bin/env bash\n./deploy-local.sh\necho \"------ build for markets running...\"\n./gradlew -Pchannels=@channels/channels.txt clean apkRelease $1 $2\necho \"------ build for markets finished!\"\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}