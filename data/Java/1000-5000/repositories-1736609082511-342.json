{
  "metadata": {
    "timestamp": 1736609082511,
    "page": 342,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nytimes/Store",
      "stars": 3525,
      "defaultBranch": "feature/rx2",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.509765625,
          "content": "# editor tempfiles\n*~\n# MacOS temp files\n.DS_Store\n\n# Built application files\n*.apk\n*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\nout/\n\n# Gradle files\n.gradle/\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\ngradle.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\n.navigation/\n\n# Android Studio captures folder\ncaptures/\n\n# Intellij\n*.iml\n.idea/\n\n# Keystore files\n*.jks\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.833984375,
          "content": "language: android\njdk:\n- oraclejdk8\nandroid:\n  components:\n  - tools\n  - platform-tools\n  - build-tools-28.0.3\n  - android-28\n  - extra-android-m2repository\n  licenses:\n  - 'android-sdk-license-.+'\nscript:\n- ./gradlew check --stacktrace\nafter_success:\n  - gradle/deploy_snapshot.sh\nbefore_install:\n- yes | sdkmanager \"platforms;android-28\"\nbranches:\n  except:\n  - gh-pages\nnotifications:\n  email: false\nsudo: false\ncache:\n  directories:\n  - $HOME/.m2\n  - $HOME/.gradle\nenv:\n  global:\n  - secure: dKC1kpEFHhnCqt9+txDKxGcrHdFGUUM46KkKGvQXGDkvXFa2RcDiLCQ0qXfJvmdHTRAxvp7xpQeN1Vr2t+792YvWj90z9gPBDcPc3V+5D7MBXKB1PPPO4Kvq15Z8mRmNy64R7YIm35/MPz6TySi/VUmJ8QuoKlkVd3CsQM6GI77YztKyyA4Vrp078SSOCJLbZfQQ+KE/s3C9mIuTqHca8hBuNs8u9kZy8+znc+86NAnpt3aMEwICPHAUZD1AmPSL2WoOgtkVnHn6ShgmL0+vCZI0xesHHH256QCFY6nWA760hWMcD3VtG6WUGv8rjOIrDBAbl50Gp/6MU61OiSqstJKCVGS1ZjKP2pFLcKQTXvRCN5L2v8Q+kwRD9bT4Q06BxOj5JwG8kWBjy3uwlgSmlmh1iGXmlppt8jscpot5ErkevyBaq1w4zjnazR2NGXF04CeT6f8tfrfIEwPvlPNRLYWrA2ybyQMzlLAxQSNqc08FNef2q+djm+FKqN470nKp1bjI737fdrlAnVzSTEYGgn+2VCu1h/2aFldI6R9we3X3XgJo50+W6bQSU7Xj4LX1FjH4r8iZ1C9sfLQeenpwViFbLFb6uhNLd3OF6siTr6SaYYXRgVzStFtIuGT2LJl8a99cx7gXE3kMwo6Tu3Q1aOw1jVMiO5rxyBCwXzNLrBs=\n  - secure: 0MV6JaE+32cPY5qr+nC1UmshP7iwuwL9rbfhY2atJkyl+a31T0O+/u+76b8aNJTU95UZ4+3ZR6tXz/c0W+tEBT2A6JbH1vxHLuAVQPcYEjruTF4QgcMd/6Jm4bjIbaM5M3H6oUNcqNVyTBvpJm1Azc1KjwLWTtrhnnwa6bXTQvB/MHQ5NPMCp+4kolk7iACGP55WfS6thcFjZf+KaHWyN0WPOeSL5eneGIn+sS3ag72KXSxqgZgORJqbVpcOEPTu9Y71MNjcWLKLwZ0USYFNVVVgdY/nfDz61xLKydcQB9f7jvt+QgyncebarVlOQsisV3I/vnzmI2DDTAWz0eOT+4zFJCitQFfFoA+iUh0O8n++H47frEAkJTb01Nrbx0ZPc95iQ+JrKEkw5GgAAuBWJ8zgITFGHi1foBYTPjP8YhEMl3loepSXJmAZ2sdBnBXnwky5Tet8gHOaTATWaSAR15i1KKAjHmQ+pHscN6IQN2uZFDDAbZXjneKCCuUvCIwbO2tebTKRxP5idTgYkmUMN21aPtU3SZyewpBA69+NDwkp5y+1KQbYRVq+DpdR0mKtz4SMp+jLSRxSSl94wFADAaYsoPxr97pVmQQaIK8s5Q9LQBK24JgpE6Ed8fTQIZyf1SszLN98SxCkVFE4q8CS9vskHJ5lQH9/EkexV9L9e9g=\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.427734375,
          "content": "Change Log\n==========\n\nThe change log for Store version 1.x can be found [here](https://github.com/NYTimes/Store/blob/develop/CHANGELOG.md).\n\n\nVersion 3.1.1 *(2019-03-25)*\n----------------------------\n\n**Bug Fixes and Stability Improvements**\n\n* (#382) Fix fetchWithResult return value in case of fetch error\n* (#375) Fix Talks links\n* (#371) Update SDK, build tools, gradle, AGP, Kotlin, and library dependencies.\n* (#370) Typos on #316 & #334\n* (#368) Remove Deprecated annotation for stream(V key)\n* (#363) Update README.md\n* (#360) Fix typos\n* (#362) Use implementation instead of compile\n* (#361) Add links to mentioned libraries\n* (#346) issue #345 sample crashes on launch, create SampleRoomStore during onCreate\n* (#343) Update version in README\n* (#341) Updating images urls for Store/docs/ru/README.md\n\nVersion 3.1.0 *(2018-06-07)*\n----------------------------\n\n**New Features**\n\n* (#319) Store can now be used in Java (non-Android) projects\n* (#338) Room integration for Store\n\n**Bug Fixes and Stability Improvements**\n\n* (#315) Add missing reading of expire-after-policy when creating a NoopPersister\n* (#311) Update Kotlin & AGP versions\n* (#328) Fix memory policy default size\n* (#329) Adding docs to README for setting 1.8 compatibility\n* (#273) Adds comments to the sample app\n* (#336) Fixes errors in README\n\nVersion 3.0.1 *(2018-03-20)*\n----------------------------\n\n**Bug Fixes and Stability Improvements**\n\n* (#311) Update Kotlin & AGP versions\n* (#314) Fix issues occured from RxJava1 dependency\n\nVersion 3.0.0 *(2018-02-01)*\n----------------------------\n\n**New Features**\n\n* (#275) Add ParsingFetcher that wraps Raw type Parser and Fetcher\n\n**Bug Fixes and Stability Improvements**\n\n* (#267) Kotlin 1.1.4 for store-kotlin \n* (#290) Remove @Experimental from store-kotlin API\n* (#283) Update build tools to 26.0.2\n* (#259, #261, #272, #289, #303) README + documentation updates\n* (#310) Sample app fixes\n\nVersion 3.0.0-beta *(2017-07-26)*\n----------------------------\n\n**New Features**\n\n* (#229) Add store-kotlin module\n* (#254) Add readAll / clearAll operations for a particular BarCode type\n* (#250) Return object with meta data\n* Create Code of Conduct\n\n**Bug Fixes and Stability Improvements**\n\n* (#239) Fix NoClassDefFoundError for StandardCharsets GsonBufferedSourceAdapter\n* (#243) Update README for Rx2\n* (#247) Remove intermediate streams\n* (#246) Update to Moshi 1.5.0\n* (#252) Fix stream for a single barcode\n\nVersion 3.0.0-alpha *(2017-05-23)*\n----------------------------\n\nThis is a first alpha release of Store ported to RxJava 2.\n\n**New Features**\n\n* (#155) Port to RxJava 2\n* (#220) Packages have been renamed to store3 to allow use of this artifact alongside the original Store\n* (#185) Return Single/Maybe where appropriate\n* (#189) Add lambdas to Store and Filesystem modules\n* (#214) expireAfterAccess added to MemoryPolicy\n* (#214) Deprecate setExpireAfter and getExpireAfter -- use new expireAfterWrite or expireAfterAccess, see #199 for \nMemoryPolicy changes\n* (#214) Add Raw to BufferedSource transformer\n\n\n**Bug Fixes and Stability Improvements**\n\n* (#214) Fix networkBeforeStale on cold start with no connectivity\n* (#214) Add a missing source.close() call\n* (#164) FileSystemPersister.persisterIsStale() should return false if record is missing or policy is unspecified\n* (#166) Remove apt dependency and use annotationProcessor instead\n* (#214) Standardize store.stream() to emit only new items\n* (#214) Fix typos\n* (#214) Close source after write to filesystem"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3076171875,
          "content": "# Code of Conduct\n\n## 1. Purpose\n\nA primary goal of Store is to be inclusive to the largest number of contributors, with the most varied and diverse backgrounds possible. As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).\n\nThis code of conduct outlines our expectations for all those who participate in our community, as well as the consequences for unacceptable behavior.\n\nWe invite all those who participate in Store to help us create safe and positive experiences for everyone.\n\n## 2. Open Source Citizenship\n\nA supplemental goal of this Code of Conduct is to increase open source citizenship by encouraging participants to recognize and strengthen the relationships between our actions and their effects on our community.\n\nCommunities mirror the societies in which they exist and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.\n\nIf you see someone who is making an extra effort to ensure our community is welcoming, friendly, and encourages all participants to contribute to the fullest extent, we want to know.\n\n## 3. Expected Behavior\n\nThe following behaviors are expected and requested of all community members:\n\n*   Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this community.\n*   Exercise consideration and respect in your speech and actions.\n*   Attempt collaboration before conflict.\n*   Refrain from demeaning, discriminatory, or harassing behavior and speech.\n*   Be mindful of your surroundings and of your fellow participants. Alert community leaders if you notice a dangerous situation, someone in distress, or violations of this Code of Conduct, even if they seem inconsequential.\n*   Remember that community event venues may be shared with members of the public; please be respectful to all patrons of these locations.\n\n## 4. Unacceptable Behavior\n\nThe following behaviors are considered harassment and are unacceptable within our community:\n\n*   Violence, threats of violence or violent language directed against another person.\n*   Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language.\n*   Posting or displaying sexually explicit or violent material.\n*   Posting or threatening to post other people’s personally identifying information (\"doxing\").\n*   Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability.\n*   Inappropriate photography or recording.\n*   Inappropriate physical contact. You should have someone’s consent before touching them.\n*   Unwelcome sexual attention. This includes, sexualized comments or jokes; inappropriate touching, groping, and unwelcomed sexual advances.\n*   Deliberate intimidation, stalking or following (online or in person).\n*   Advocating for, or encouraging, any of the above behavior.\n*   Sustained disruption of community events, including talks and presentations.\n\n## 5. Consequences of Unacceptable Behavior\n\nUnacceptable behavior from any community member, including sponsors and those with decision-making authority, will not be tolerated.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately.\n\nIf a community member engages in unacceptable behavior, the community organizers may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event).\n\n## 6. Reporting Guidelines\n\nIf you are subject to or witness unacceptable behavior, or have any other concerns, please notify a community organizer as soon as possible. .\n\n\n\nAdditionally, community organizers are available to help community members engage with local law enforcement or to otherwise help those experiencing unacceptable behavior feel safe. In the context of in-person events, organizers will also provide escorts as desired by the person experiencing distress.\n\n## 7. Addressing Grievances\n\nIf you feel you have been falsely or unfairly accused of violating this Code of Conduct, you should notify The  New York Times with a concise description of your grievance. Your grievance will be handled in accordance with our existing governing policies.\n\n\n\n## 8. Scope\n\nWe expect all community participants (contributors, paid or otherwise; sponsors; and other guests) to abide by this Code of Conduct in all community venues–online and in-person–as well as in all one-on-one communications pertaining to community business.\n\nThis code of conduct and its related procedures also applies to unacceptable behavior occurring outside the scope of community activities when such behavior has the potential to adversely affect the safety and well-being of community members.\n\n## 9. Contact info\n\n\n\n## 10. License and attribution\n\nThis Code of Conduct is distributed under a [Creative Commons Attribution-ShareAlike license](http://creativecommons.org/licenses/by-sa/3.0/).\n\nPortions of text derived from the [Django Code of Conduct](https://www.djangoproject.com/conduct/) and the [Geek Feminism Anti-Harassment Policy](http://geekfeminism.wikia.com/wiki/Conference_anti-harassment/Policy).\n\nRetrieved on November 22, 2016 from [http://citizencodeofconduct.org/](http://citizencodeofconduct.org/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.806640625,
          "content": "Contributing to Store\n=======================\n\nThe New York Times team welcomes contributions of all kinds, from simple bug reports through documentation, test cases,\nbugfixes, and features.\n\nDOs and DON'Ts\n--------------\n\n* DO follow our coding style (as described below)\n* DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines.\n* DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.\n* DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion.\n* DO run all Gradle verification tasks (`./gradlew check`) before submitting a pull request\n\n* DO NOT send PRs for style changes.\n* DON'T surprise us with big pull requests. Instead, file an issue and start a discussion so we can agree on a direction before you invest a large amount of time.\n* DON'T commit code that you didn't write. If you find code that you think is a good fit, file an issue and start a discussion before proceeding.\n* DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it.\n\n\nCoding Style\n------------\n\nThe coding style employed here is fairly conventional Java - indentations are four spaces, class\nnames are PascalCased, identifiers and methods are camelCased.    \n\nWorkflow\n--------\n\nWe love Github issues!  Before working on any new features, please open an issue so that we can agree on the\ndirection, and hopefully avoid investing a lot of time on a feature that might need reworking.\n\nSmall pull requests for things like typos, bugfixes, etc are always welcome.\n\nPlease note that we will not accept pull requests for style changes.\n\n\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0947265625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016-2017 The New York Times Company\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.060546875,
          "content": "<table>\n  <tr>\n    <td>\n        <h3>DEPRECATED</h3>\n        Store(3) is deprecated. No more development will be taking place. For an up-to-date version,\n        please use <a href=\"https://github.com/dropbox/store\">Store(4)</a>. Thanks for all your support!\n    </td>\n  </tr>\n</table>\n<br/><br/>\n\n[![Build Status](https://travis-ci.org/NYTimes/Store.svg?branch=feature/rx2)](https://travis-ci.org/NYTimes/Store)\n\n![Store Logo](https://raw.githubusercontent.com/NYTimes/Store/feature/rx2/Images/store-logo.png)\n\nStore is a Java library for effortless, reactive data loading.  \n\n### The Problems:\n\n+ Modern software needs data representations to be fluid and always available.\n+ Users expect their UI experience to never be compromised (blocked) by new data loads. Whether an application is social, news, or business-to-business, users expect a seamless experience both online and offline.\n+ International users expect minimal data downloads as many megabytes of downloaded data can quickly result in astronomical phone bills.\n\nA Store is a class that simplifies fetching, parsing, storage, and retrieval of data in your application. A Store is similar to the Repository pattern [[https://msdn.microsoft.com/en-us/library/ff649690.aspx](https://msdn.microsoft.com/en-us/library/ff649690.aspx)] while exposing a Reactive API built with [RxJava](https://github.com/ReactiveX/RxJava) that adheres to a unidirectional data flow.\n\nStore provides a level of abstraction between UI elements and data operations.\n\n### Overview\n\nA Store is responsible for managing a particular data request. When you create an implementation of a Store, you provide it with a `Fetcher`, a function that defines how data will be fetched over network. You can also define how your Store will cache data in-memory and on-disk, as well as how to parse it. Since Store returns your data as an `Observable`, threading is a breeze! Once a Store is built, it handles the logic around data flow, allowing your views to use the best data source and ensuring that the newest data is always available for later offline use. Stores can be customized to work with your own implementations or use our included middleware.\n\nStore leverages RxJava and multiple request throttling to prevent excessive calls to the network and disk cache. By utilizing Store, you eliminate the possibility of flooding your network with the same request while adding two layers of caching (memory and disk).\n\n### How to include in your project\n\n###### Include gradle dependency\n\n```\nimplementation 'com.nytimes.android:store3:3.1.1'\n```\n\n###### Set the source & target compatibilities to `1.8`\nStarting with Store 3.0, `retrolambda` is no longer used. Therefore to allow support for lambdas the Java `sourceCompatibility` and `targetCompatibility` need to be set to `1.8`\n\n```\nandroid {\n    compileOptions {\n        sourceCompatibility 1.8\n        targetCompatibility 1.8\n    }\n    ...\n}\n```\n\n### Fully Configured Store\nLet's start by looking at what a fully configured Store looks like. We will then walk through simpler examples showing each piece:\n\n```java\nStore<ArticleAsset, Integer> articleStore = StoreBuilder.<Integer, BufferedSource, ArticleAsset>parsedWithKey()\n        .fetcher(articleId -> api.getArticleAsBufferedSource(articleId))  // OkHttp responseBody.source()\n        .persister(FileSystemPersister.create(FileSystemFactory.create(context.getFilesDir()), pathResolver))\n        .parser(GsonParserFactory.createSourceParser(gson, ArticleAsset.Article.class))\n        .open();\n        \n```\n\nWith the above setup you have:\n+ In-memory caching for rotation\n+ Disk caching for when users are offline\n+ Parsing through streaming API to limit memory consumption \n+ Rich API to ask for data whether you want cached, new or a stream of future data updates.\n\nAnd now for the details:\n\n### Creating a Store\n\nYou create a Store using a builder. The only requirement is to include a `Fetcher<ReturnType, KeyType>` that returns a `Single<ReturnType>` and has a single method `fetch(key)`\n\n\n```java\nStore<ArticleAsset, Integer> store = StoreBuilder.<>key()\n        .fetcher(articleId -> api.getArticle(articleId))  // OkHttp responseBody.source()\n        .open();\n```\n\nStores use generic keys as identifiers for data. A key can be any value object that properly implements `toString()`, `equals()` and `hashCode()`. When your `Fetcher` function is called, it will be passed a particular Key value. Similarly, the key will be used as a primary identifier within caches (Make sure to have a proper `hashCode()`!!).\n\n### Our Key implementation - Barcodes\nFor convenience, we included our own key implementation called a `BarCode`. `Barcode` has two fields `String key` and `String type`\n\n```java\nBarCode barcode = new BarCode(\"Article\", \"42\");\n```\n\nWhen using a `Barcode` as your key, you can use a `StoreBuilder` convenience method\n\n```java\nStore<ArticleAsset, BarCode> store = StoreBuilder.<ArticleAsset>barcode()\n        .fetcher(articleBarcode -> api.getAsset(articleBarcode.getKey(), articleBarcode.getType()))\n        .open();\n```\n\n\n### Public Interface - Get, Fetch, Stream, GetRefreshing\n\n```java\nSingle<Article> article = store.get(barCode);\n```\n\nThe first time you subscribe to `store.get(barCode)`, the response will be stored in an in-memory cache. All subsequent calls to `store.get(barCode)` with the same Key will retrieve the cached version of the data, minimizing unnecessary data calls. This prevents your app from fetching fresh data over the network (or from another external data source) in situations when doing so would unnecessarily waste bandwidth and battery. A great use case is any time your views are recreated after a rotation, they will be able to request the cached data from your Store. Having this data available can help you avoid the need to retain this in the view layer.\n\n\nSo far our Store’s data flow looks like this:\n![Simple Store Flow](https://github.com/nytm/Store/blob/feature/rx2/Images/store-1.jpg)\n\n\nBy default, 100 items will be cached in memory for 24 hours. You may pass in your own instance of a Guava Cache to override the default policy.\n\n\n### Busting through the cache\n\nAlternatively you can call `store.fetch(barCode)` to get an `Observable` that skips the memory (and optional disk cache).\n\n\nFresh data call will look like: `store.fetch()`\n![Simple Store Flow](https://github.com/nytm/Store/blob/feature/rx2/Images/store-2.jpg)\n\n\nIn the New York Times app, overnight background updates use `fetch()` to make sure that calls to `store.get()` will not have to hit the network during normal usage. Another good use case for `fetch()` is when a user wants to pull to refresh.\n\n\nCalls to both `fetch()` and `get()` emit one value and then call `onCompleted()` or throw an error.\n\n\n### Stream\nFor real-time updates, you may also call `store.stream()` which returns an `Observable` that emits each time a new item is added to the Store. You can think of stream as an Event Bus-like feature that allows you to know when any new network hits happen for a particular Store. You can leverage the Rx operator `filter()` to only subscribe to a subset of emissions.\n\n\n### Get Refreshing\nThere is another special way to subscribe to a Store: `getRefreshing(key)`. This method will subscribe to `get()` which returns a single response, but unlike `get()`, `getRefreshing(key)` will stay subscribed. Anytime you call `store.clear(key)` anyone subscribed to `getRefreshing(key)` will resubscribe and force a new network response.\n\n\n### Inflight Debouncer\n\nTo prevent duplicate requests for the same data, Store offers an inflight debouncer. If the same request is made within a minute of a previous identical request, the same response will be returned. This is useful for situations when your app needs to make many async calls for the same data at startup or when users are obsessively pulling to refresh. As an example, The New York Times news app asynchronously calls `ConfigStore.get()` from 12 different places on startup. The first call blocks while all others wait for the data to arrive. We have seen a dramatic decrease in the app's data usage after implementing this inflight logic.\n\n\n### Adding a Parser\n\nSince it is rare for data to arrive from the network in the format that your views need, Stores can delegate to a parser by using a `StoreBuilder.<BarCode, BufferedSource, Article>parsedWithKey()`\n\n```java\nStore<Article, Integer> store = StoreBuilder.<Integer, BufferedSource, Article>parsedWithKey()\n        .fetcher(articleId -> api.getArticle(articleId)) \n        .parser(source -> {\n            try (InputStreamReader reader = new InputStreamReader(source.inputStream())) {\n                return gson.fromJson(reader, Article.class);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        })\n        .open();\n```\n\nOur updated data flow now looks like this:\n\n`store.get()` -> ![Simple Store Flow](https://github.com/nytm/Store/blob/feature/rx2/Images/store-3.jpg)\n\n\n### Middleware - GsonSourceParser\n\nThere are also separate middleware libraries with parsers to help in cases where your fetcher is a `Reader`, `BufferedSource` or `String` and your parser is Gson:\n- GsonReaderParser\n- GsonSourceParser\n- GsonStringParser\n\nThese can be accessed via a Factory class (`GsonParserFactory`).\n\nOur example can now be rewritten as:\n\n```java\nStore<Article, Integer> store = StoreBuilder.<Integer, BufferedSource, Article>parsedWithKey()\n        .fetcher(articleId -> api.getArticle(articleId)) \n        .parser(GsonParserFactory.createSourceParser(gson, Article.class))\n        .open();\n```\n\nIn some cases you may need to parse a top level JSONArray, in which case you can provide a `TypeToken`.\n\n```java\nStore<List<Article>, Integer> store = StoreBuilder.<Integer, BufferedSource, List<Article>>parsedWithKey()\n        .fetcher(articleId -> api.getArticles()) \n        .parser(GsonParserFactory.createSourceParser(gson, new TypeToken<List<Article>>() {}))\n        .open();  \n```\n\nSimilarly we have a middleware artifact for Moshi & Jackson too!\n\n\n### Disk Caching\n\nStores can enable disk caching by passing a `Persister` into the builder. Whenever a new network request is made, the Store will first write to the disk cache and then read from the disk cache.\n\n\nNow our data flow looks like:\n`store.get()` -> ![Simple Store Flow](https://github.com/nytm/Store/blob/feature/rx2/Images/store-5.jpg)\n\n\nIdeally, data will be streamed from network to disk using either a `BufferedSource` or `Reader` as your network raw type (rather than `String`).\n\n```java\nStore<Article, Integer> store = StoreBuilder.<Integer, BufferedSource, Article>parsedWithKey()\n        .fetcher(articleId -> api.getArticles())\n        .persister(new Persister<BufferedSource>() {\n            @Override\n            public Maybe<BufferedSource> read(Integer key) {\n                if (dataIsCached) {\n                    return Observable.fromCallable(() -> userImplementedCache.get(key));\n                } else {\n                    return Observable.empty();\n                }    \n            }\n    \n            @Override\n            public Single<Boolean> write(BarCode barCode, BufferedSource source) {\n                userImplementedCache.save(key, source);\n                return Single.just(true);\n            }\n        })\n        .parser(GsonParserFactory.createSourceParser(gson, Article.class))\n        .open();\n```\n\nStores don’t care how you’re storing or retrieving your data from disk. As a result, you can use Stores with object storage or any database (Realm, SQLite, CouchDB, Firebase etc). The only requirement is that data must be the same type when stored and retrieved as it was when received from your `Fetcher`. Technically, there is nothing stopping you from implementing an in memory cache for the “persister” implementation and instead have two levels of in memory caching--one with inflated and one with deflated models, allowing for sharing of the “persister” cache data between stores.\n\n\n**Note**: When using a Parser and a disk cache, the Parser will be called AFTER fetching from disk and not between the network and disk. This allows your persister to work on the network stream directly.\n\n\nIf using SQLite we recommend working with [SqlBrite](https://github.com/square/sqlbrite). If you are not using SqlBrite, an `Observable` can be created rather simply with `Observable.fromCallable(() -> getDBValue())`\n\n### Middleware - SourcePersister & FileSystem\n\nWe've found the fastest form of persistence is streaming network responses directly to disk. As a result, we have included a separate library with a reactive FileSystem which depends on Okio `BufferedSource`s. We have also included a `FileSystemPersister` which will give you disk caching and works beautifully with `GsonSourceParser`. When using the `FileSystemPersister` you must pass in a `PathResolver` which will tell the file system how to name the paths to cache entries. \n\nNow back to our first example:\n\n```java\nStore<Article, Integer> store = StoreBuilder.<Integer, BufferedSource, Article>parsedWithKey()\n        .fetcher(articleId -> api.getArticles(articleId)) \n        .persister(FileSystemPersister.create(FileSystemFactory.create(context.getFilesDir()), pathResolver))\n        .parser(GsonParserFactory.createSourceParser(gson, String.class))\n        .open();\n```\n\nAs mentioned, the above builder is how we work with network operations at the New York Times. With the above setup you have:\n+ Memory caching with Guava Cache\n+ Disk caching with FileSystem (you can reuse the same file system implementation for all stores)\n+ Parsing from a BufferedSource (to an Article in our case) with Gson\n+ In-flight request management\n+ Ability to get cached data or bust through your caches (`get()` vs. `fetch()`)\n+ Ability to listen for any new emissions from network (stream)\n+ Ability to be notified and resubscribed when caches are cleared (helpful for times when you need to do a POST request and update another screen, such as with `getRefreshing()`)\n\nWe recommend using the above builder setup for most Stores. The SourcePersister implementation has a tiny memory footprint because it will stream bytes from network to disk and then from disk to parser. The streaming nature of Stores allows us to download dozens of 1mb+ json responses without worrying about OOM on low-memory devices. As mentioned above, Stores allow us to do things like calling `configStore.get()` a dozen times asynchronously before our Main Activity finishes loading without blocking the main thread or flooding our network.\n\n### RecordProvider\nIf you'd like your Store to know about disk data staleness, you can have your `Persister` implement `RecordProvider`.  After doing so you can configure your Store to work in one of two ways:\n\n```java\nstore = StoreBuilder.<BufferedSource>barcode()\n                .fetcher(fetcher)\n                .persister(persister)\n                .refreshOnStale()\n                .open();\n``` \n\n`refreshOnStale()` will backfill the disk cache anytime a record is stale. The user will still get the stale record returned to them.\n\nOr alternatively:\n\n```java\nstore = StoreBuilder.<BufferedSource>barcode()\n                .fetcher(fetcher)\n                .persister(persister)\n                .networkBeforeStale()\n                .open();\n```   \n\n`networkBeforeStale()` - Store will try to get network source when disk data is stale. If the network source throws an error or is empty, stale disk data will be returned.\n\n\n### Subclassing a Store\n\nWe can also subclass a Store implementation (`RealStore<T>`):\n\n```java\npublic class SampleStore extends RealStore<String, BarCode> {\n    public SampleStore(Fetcher<String, BarCode> fetcher, Persister<String, BarCode> persister) {\n        super(fetcher, persister);\n    }\n}\n```\n\nSubclassing is useful when you’d like to inject Store dependencies or add a few helper methods to a store:\n\n```java\npublic class SampleStore extends RealStore<String, BarCode> {\n   @Inject\n   public SampleStore(Fetcher<String, BarCode> fetcher, Persister<String, BarCode> persister) {\n        super(fetcher, persister);\n    }\n}\n```\n\n\n### Artifacts\n\n**CurrentVersion = 3.1.1**\n\n+ **Cache** Cache extracted from Guava (keeps method count to a minimum)\n\n  ```groovy\n  implementation 'com.nytimes.android:cache3:CurrentVersion'\n  ```\n  \n+ **Store** This contains only Store classes and has a dependency on RxJava + the above cache.  \n\n  ```groovy\n  implementation 'com.nytimes.android:store3:CurrentVersion'\n  ```\n  \n+ **Store-Kotlin** Store plus a couple of added Kotlin classes for more idiomatic usage.\n\n    ```groovy\n    implementation 'com.nytimes.android:store-kotlin3:CurrentVersion'\n    ```\n    \n+ **Middleware** Sample Gson parsers, (feel free to create more and open PRs) \n\n    ```groovy\n    implementation 'com.nytimes.android:middleware3:CurrentVersion'\n    ```\n    \n+ **Middleware-Jackson** Sample Jackson parsers, (feel free to create more and open PRs)\n\n    ```groovy\n    implementation 'com.nytimes.android:middleware-jackson3:CurrentVersion'\n    ```\n    \n+ **Middleware-Moshi** Sample Moshi parsers, (feel free to create more and open PRs)\n\n    ```groovy\n    implementation 'com.nytimes.android:middleware-moshi3:CurrentVersion'\n    ```\n    \n+ **File System** Persistence Library built using [Okio](https://github.com/square/okio) Source/Sink + Middleware for streaming from Network to FileSystem \n\n  ```groovy\n  implementation 'com.nytimes.android:filesystem3:CurrentVersion'\n  ```\n\n### Sample Project\n\nSee the app for example usage of Store. Alternatively, the [Wiki](https://github.com/NYTimes/Store/wiki) contains a set of recipes for common use cases\n+ Simple Example: Retrofit + Store\n+ Complex Example: BufferedSource from Retrofit (Can be [OkHttp](https://github.com/square/okhttp) too) + our FileSystem + our GsonSourceParser\n\n### Talks\n+ [DroidCon Italy](https://youtu.be/TvsOsgd0--c)\n+ [Android Makers](https://www.youtube.com/watch?time_continue=170&v=G1MebI2k9aA)\n\n### Community projects\n\n+ https://github.com/stoyicker/master-slave-clean-store: An offline-first Master-Slave project with scroll-driven pagination using Store for the data layer.\n+ https://github.com/benoberkfell/cat-rates: [Ben Oberkfell's 360AnDev talk, \"Android Architecture for the Subway\"](https://academy.realm.io/posts/360-andev-2017-ben-oberkfell-android-architecture-offline-first/) illustrates using Store for caching server responses\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.8095703125,
          "content": "Releasing\n========\n\n 1. Change the version in top level `build.gradle` to a non-SNAPSHOT verson.\n 2. Update the `CHANGELOG.md` for the impending release.\n 3. Update the `README.md` with the new version.\n 4. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n 5. `./gradlew clean uploadArchives`.\n 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.\n 7. `git tag -a X.Y.X -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n 8. Update the top level `build.gradle` to the next SNAPSHOT version.\n 9. `git commit -am \"Prepare next development version.\"`\n 10. `git push && git push --tags`\n 11. Update the sample module to point to the newly released version. (May take 2 hours)\n\nIf step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.7734375,
          "content": "apply from: 'buildsystem/dependencies.gradle'\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven {\n            url 'https://plugins.gradle.org/m2/'\n        }\n\n        maven {\n            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'\n        }\n\n        jcenter()\n\n        google()\n    }\n\n    rootProject.ext.versions = [\n        kotlin: '1.3.0'\n    ]\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.3.2'\n        classpath 'com.google.gms:google-services:4.2.0'\n        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.4'\n        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.11'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$rootProject.ext.versions.kotlin\"\n        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.17'\n    }\n}\n\nallprojects {\n    buildscript {\n\n    }\n\n    repositories {\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots/'\n        }\n\n        mavenCentral()\n    }\n\n    // Workaround to prevent Gradle from stealing focus from other apps during tests run/etc.\n    // https://gist.github.com/artem-zinnatullin/4c250e04636e25797165\n    tasks.withType(JavaForkOptions) {\n        jvmArgs '-Djava.awt.headless=true'\n    }\n}\n\next {\n    // POM file\n    GROUP = \"com.nytimes.android\"\n    VERSION_NAME = \"3.1.2-SNAPSHOT\"\n    POM_PACKAGING = \"pom\"\n    POM_DESCRIPTION = \"Store3 is built with RxJava2\"\n\n    POM_URL = \"https://github.com/nytimes/Store/\"\n    POM_SCM_URL = \"https://github.com/nytimes/Store/\"\n    POM_SCM_CONNECTION = \"scm:git:https://github.com/nytm/Store.git\"\n    POM_SCM_DEV_CONNECTION = \"scm:git:git@github.com:nytm/Store.git\"\n\n    POM_LICENCE_NAME = \"Apache License\"\n    POM_LICENCE_URL = \"http://www.apache.org/licenses/\"\n    POM_LICENCE_DIST = \"repo\"\n\n    POM_DEVELOPER_ID = \"nytimesandroid\"\n    POM_DEVELOPER_NAME = \"New York Times\"\n}\n\n\n// From command line use: -PdisablePreDex to disable it: primarily for jenkins\nproject.ext.preDexLibs = !project.hasProperty('disablePreDex')\n\nsubprojects {\n    project.plugins.whenPluginAdded { plugin ->\n        if (\"com.android.build.gradle.AppPlugin\".equals(plugin.class.name)) {\n            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs\n        } else if (\"com.android.build.gradle.LibraryPlugin\".equals(plugin.class.name)) {\n            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs\n        }\n    }\n    project.plugins.apply('net.ltgt.errorprone')\n\n    configurations.errorprone {\n        resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.15'\n    }\n}\n\ntask gitHooksInit (type:Exec) {\n    workingDir \"$projectDir\"\n    commandLine './init-git-hooks'\n}\n"
        },
        {
          "name": "buildsystem",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "checkstyle-ruleset.xml",
          "type": "blob",
          "size": 9.833984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n<!-- This is a checkstyle configuration file. For descriptions of\nwhat the following rules do, please see the checkstyle configuration\npage at http://checkstyle.sourceforge.net/config.html -->\n\n<module name=\"Checker\">\n    <module name=\"FileTabCharacter\"/>\n    <module name=\"NewlineAtEndOfFile\"/>\n    <module name=\"SuppressionCommentFilter\"/>\n    <module name=\"RegexpSingleline\">\n        <!-- Checks that FIXME is not used in comments.  TODO is preferred.\n        -->\n        <property name=\"format\" value=\"((//.*)|(\\*.*))FIXME\"/>\n        <property name=\"message\"\n            value='TODO is preferred to FIXME.  e.g. \"TODO(johndoe): Refactor when v2 is released.\"'/>\n    </module>\n\n    <!-- All Java AST specific tests live under TreeWalker module. -->\n    <module name=\"TreeWalker\">\n        <module name=\"FileContentsHolder\"/>\n        <module name=\"TodoComment\"/>\n        <module name=\"RedundantImport\"/>\n        <module name=\"ImportOrder\">\n            <!-- Checks for out of order import statements. -->\n            <property name=\"severity\" value=\"warning\"/>\n            <property name=\"groups\" value=\"android,com,junit,net,org,java,javax\"/>\n            <!-- This ensures that static imports go on bottom. -->\n            <property name=\"option\" value=\"bottom\"/>\n            <property name=\"sortStaticImportsAlphabetically\" value=\"true\"/>\n            <property name=\"tokens\" value=\"STATIC_IMPORT, IMPORT\"/>\n        </module>\n\n        <module name=\"PackageName\">\n            <!-- Validates identifiers for package names against the\n              supplied expression. -->\n            <!-- Here the default checkstyle rule restricts package name parts to\n              seven characters\n            -->\n            <property name=\"format\" value=\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"TypeNameCheck\">\n            <!-- Validates static, final fields against the\n            expression \"^[A-Z][a-zA-Z0-9]*$\". -->\n            <metadata name=\"altname\" value=\"TypeName\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"ConstantNameCheck\">\n            <!-- Validates non-private, static, final fields against the supplied\n            public/package final fields \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". -->\n            <metadata name=\"altname\" value=\"ConstantName\"/>\n            <property name=\"applyToPublic\" value=\"true\"/>\n            <property name=\"applyToProtected\" value=\"true\"/>\n            <property name=\"applyToPackage\" value=\"true\"/>\n            <property name=\"applyToPrivate\" value=\"false\"/>\n            <property name=\"format\" value=\"^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$\"/>\n            <message key=\"name.invalidPattern\"\n                value=\"Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"StaticVariableNameCheck\">\n            <!-- Validates static, non-final fields against the supplied\n            expression \"^[a-z][a-zA-Z0-9]*_?$\". -->\n            <metadata name=\"altname\" value=\"StaticVariableName\"/>\n            <property name=\"applyToPublic\" value=\"true\"/>\n            <property name=\"applyToProtected\" value=\"true\"/>\n            <property name=\"applyToPackage\" value=\"true\"/>\n            <property name=\"applyToPrivate\" value=\"true\"/>\n            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*_?$\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"MemberNameCheck\">\n            <!-- Validates non-static members against the supplied expression. -->\n            <metadata name=\"altname\" value=\"MemberName\"/>\n            <property name=\"applyToPublic\" value=\"true\"/>\n            <property name=\"applyToProtected\" value=\"true\"/>\n            <property name=\"applyToPackage\" value=\"true\"/>\n            <property name=\"applyToPrivate\" value=\"true\"/>\n            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"MethodNameCheck\">\n            <!-- Validates identifiers for method names. -->\n            <metadata name=\"altname\" value=\"MethodName\"/>\n            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"ParameterName\">\n            <!-- Validates identifiers for method parameters against the\n              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"LocalFinalVariableName\">\n            <!-- Validates identifiers for local final variables against the\n              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"LocalVariableName\">\n            <!-- Validates identifiers for local variables against the\n              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n\n        <module name=\"LineLength\">\n            <property name=\"max\" default=\"100\" value=\"120\"/>\n            <property name=\"severity\" value=\"error\"/>\n            <!--\n              The default ignore pattern exempts the following elements:\n                - import statements\n                - long URLs inside comments\n            -->\n            <property name=\"ignorePattern\"\n                default=\"^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$\"\n                value=\"^(package .*;\\s*)|(import .*;\\s*)|( *\\* *https?://.*)$\"/>\n        </module>\n\n        <module name=\"LeftCurly\">\n            <!-- Checks for placement of the left curly brace ('{'). -->\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <module name=\"RightCurly\">\n            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on\n            the same line. e.g., the following example is fine:\n            <pre>\n              if {\n                ...\n              } else\n            </pre>\n            -->\n            <!-- This next example is not fine:\n            <pre>\n              if {\n                ...\n              }\n              else\n            </pre>\n            -->\n            <property name=\"option\" value=\"same\"/>\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n        <!-- Checks for braces around if and else blocks -->\n        <module name=\"NeedBraces\">\n            <property name=\"severity\" value=\"warning\"/>\n            <property name=\"tokens\" value=\"LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO\"/>\n        </module>\n\n        <module name=\"UpperEll\">\n            <!-- Checks that long constants are defined with an upper ell.-->\n            <property name=\"severity\" value=\"error\"/>\n        </module>\n\n        <module name=\"FallThrough\">\n            <!-- Warn about falling through to the next case statement.  Similar to\n            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment\n            on the last non-blank line preceding the fallen-into case contains 'fall through' (or\n            some other variants which we don't publicized to promote consistency).\n            -->\n            <property name=\"reliefPattern\"\n                value=\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/>\n            <property name=\"severity\" value=\"error\"/>\n        </module>\n\n        <module name=\"ModifierOrder\"/>\n\n        <module name=\"WhitespaceAround\">\n            <!-- Checks that various tokens are surrounded by whitespace.\n                 This includes most binary operators and keywords followed\n                 by regular or curly braces.\n            -->\n            <property name=\"tokens\" value=\"ASSIGN, BAND, BAND_ASSIGN, BOR,\n        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,\n        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,\n        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,\n        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,\n        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,\n        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/>\n            <property name=\"severity\" value=\"error\"/>\n        </module>\n\n        <module name=\"WhitespaceAfter\">\n            <!-- Checks that commas, semicolons and typecasts are followed by\n                 whitespace.\n            -->\n            <property name=\"tokens\" value=\"COMMA, SEMI, TYPECAST\"/>\n        </module>\n\n        <module name=\"NoWhitespaceAfter\">\n            <!-- Checks that there is no whitespace after various unary operators.\n                 Linebreaks are allowed.\n            -->\n            <property name=\"tokens\" value=\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,\n        UNARY_PLUS\"/>\n            <property name=\"allowLineBreaks\" value=\"true\"/>\n            <property name=\"severity\" value=\"error\"/>\n        </module>\n\n        <module name=\"NoWhitespaceBefore\">\n            <!-- Checks that there is no whitespace before various unary operators.\n                 Linebreaks are allowed.\n            -->\n            <property name=\"tokens\" value=\"SEMI, DOT, POST_DEC, POST_INC\"/>\n            <property name=\"allowLineBreaks\" value=\"true\"/>\n            <property name=\"severity\" value=\"error\"/>\n        </module>\n\n        <module name=\"ParenPad\">\n            <!-- Checks that there is no whitespace before close parens or after\n                 open parens.\n            -->\n            <property name=\"severity\" value=\"warning\"/>\n        </module>\n\n\n        <module name=\"DeclarationOrder\"/>\n\n    </module>\n</module>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "filesystem",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.1748046875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave ( ) {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "middleware-jackson",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware-moshi",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "pmd-ruleset.xml",
          "type": "blob",
          "size": 6.6982421875,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"Custom ruleset\"\n    xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n\n\n    <!--Complete rulesets-->\n    <rule ref=\"rulesets/java/braces.xml\"/>\n    <rule ref=\"rulesets/java/clone.xml\"/>\n    <rule ref=\"rulesets/java/design.xml\">\n        <exclude name=\"UncommentedEmptyConstructor\"/>\n    </rule>\n\n    <rule ref=\"rulesets/java/sunsecure.xml\"/>\n\n    <!--Android-->\n    <!--<rule ref=\"rulesets/java/android.xml/CallSuperFirst\" />-->\n    <!--<rule ref=\"rulesets/java/android.xml/CallSuperLast\" />-->\n    <rule ref=\"rulesets/java/android.xml/DoNotHardCodeSDCard\" />\n\n    <!--Basic-->\n    <rule ref=\"rulesets/java/basic.xml/BooleanInstantiation\"><priority>5</priority></rule>\n    <rule ref=\"rulesets/java/basic.xml/CollapsibleIfStatements\"><priority>5</priority></rule>\n    <rule ref=\"rulesets/java/basic.xml/DoubleCheckedLocking\"><priority>5</priority></rule>\n    <rule ref=\"rulesets/java/basic.xml/ForLoopShouldBeWhileLoop\" />\n    <rule ref=\"rulesets/java/basic.xml/JumbledIncrementer\" />\n    <rule ref=\"rulesets/java/basic.xml/OverrideBothEqualsAndHashcode\"><priority>1</priority></rule>\n    <rule ref=\"rulesets/java/basic.xml/ReturnFromFinallyBlock\" />\n    <rule ref=\"rulesets/java/basic.xml/UnconditionalIfStatement\" />\n\n    <!--Import Statements-->\n    <rule ref=\"rulesets/java/imports.xml/DuplicateImports\" />\n    <rule ref=\"rulesets/java/imports.xml/DontImportJavaLang\" />\n    <rule ref=\"rulesets/java/imports.xml/UnusedImports\" />\n    <rule ref=\"rulesets/java/imports.xml/ImportFromSamePackage\" />\n    <rule ref=\"rulesets/java/imports.xml/UnnecessaryFullyQualifiedName\" />\n\n    <!--Codesize-->\n    <rule ref=\"rulesets/java/codesize.xml/NPathComplexity\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/codesize.xml/CyclomaticComplexity\"><priority>5</priority></rule>\n    <rule ref=\"rulesets/java/codesize.xml/ExcessiveMethodLength\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/codesize.xml/ExcessiveParameterList\" />\n    <rule ref=\"rulesets/java/codesize.xml/ExcessiveClassLength\" />\n\n    <!--Controversial-->\n    <rule ref=\"rulesets/java/controversial.xml/AssignmentInOperand\" />\n    <rule ref=\"rulesets/java/controversial.xml/DontImportSun\" />\n    <rule ref=\"rulesets/java/controversial.xml/SuspiciousOctalEscape\" />\n    <rule ref=\"rulesets/java/controversial.xml/UnnecessaryParentheses\" />\n    <rule ref=\"rulesets/java/controversial.xml/AvoidFinalLocalVariable\" />\n\n    <!--Coupling-->\n    <rule ref=\"rulesets/java/coupling.xml/LooseCoupling\"><priority>2</priority></rule>\n\n    <!--Empty-->\n    <rule ref=\"rulesets/java/empty.xml/EmptyCatchBlock\"><priority>1</priority></rule>\n    <rule ref=\"rulesets/java/empty.xml/EmptyFinallyBlock\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptyIfStmt\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptyStatementNotInLoop\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptyStaticInitializer\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptySwitchStatements\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptySynchronizedBlock\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptyTryBlock\" />\n    <rule ref=\"rulesets/java/empty.xml/EmptyWhileStmt\" />\n\n    <!--JUnit-->\n    <rule ref=\"rulesets/java/junit.xml/JUnitSpelling\"><priority>4</priority></rule>\n    <rule ref=\"rulesets/java/junit.xml/TestClassWithoutTestCases\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/junit.xml/UnnecessaryBooleanAssertion\" />\n    <rule ref=\"rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue\" />\n    <rule ref=\"rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue\" />\n    <rule ref=\"rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue\" />\n    <rule ref=\"rulesets/java/junit.xml/SimplifyBooleanAssertion\" />\n\n    <!--Logging-->\n    <rule ref=\"rulesets/java/logging-java.xml/MoreThanOneLogger\" />\n    <rule ref=\"rulesets/java/logging-java.xml/LoggerIsNotStaticFinal\" />\n    <rule ref=\"rulesets/java/logging-java.xml/SystemPrintln\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/logging-java.xml/AvoidPrintStackTrace\" />\n\n\n    <!--Naming-->\n    <!-- <rule ref=\"rulesets/java/naming.xml/ShortVariable\" /> -->\n    <rule ref=\"rulesets/java/naming.xml/LongVariable\">\n        <properties>\n            <property name=\"minimum\" value=\"40\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/java/naming.xml/ShortMethodName\" />\n    <rule ref=\"rulesets/java/naming.xml/MethodNamingConventions\" />\n    <rule ref=\"rulesets/java/naming.xml/ClassNamingConventions\" />\n    <rule ref=\"rulesets/java/naming.xml/AvoidDollarSigns\" />\n    <rule ref=\"rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass\" />\n    <rule ref=\"rulesets/java/naming.xml/SuspiciousHashcodeMethodName\" />\n    <rule ref=\"rulesets/java/naming.xml/SuspiciousConstantFieldName\" />\n    <rule ref=\"rulesets/java/naming.xml/SuspiciousEqualsMethodName\" />\n    <rule ref=\"rulesets/java/naming.xml/NoPackage\" />\n    <rule ref=\"rulesets/java/naming.xml/PackageCase\" />\n    <!--<rule ref=\"rulesets/java/naming.xml/GenericsNaming\" />-->\n\n    <!--Optimizations-->\n    <rule ref=\"rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops\" ><priority>3</priority></rule>\n    <rule ref=\"rulesets/java/optimizations.xml/UseArraysAsList\" />\n    <rule ref=\"rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation\" />\n    <rule ref=\"rulesets/java/optimizations.xml/AddEmptyString\" />\n\n    <!--Exceptions-->\n    <rule ref=\"rulesets/java/strictexception.xml/SignatureDeclareThrowsException\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/strictexception.xml/AvoidCatchingNPE\"><priority>1</priority></rule>\n    <!-- <rule ref=\"rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes\"><priority>1</priority></rule> -->\n    <rule ref=\"rulesets/java/strictexception.xml/AvoidThrowingNullPointerException\"/>\n    <rule ref=\"rulesets/java/strictexception.xml/DoNotExtendJavaLangError\"/>\n    <rule ref=\"rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally\"><priority>2</priority></rule>\n    <rule ref=\"rulesets/java/strictexception.xml/AvoidLosingExceptionInformation\"/>\n\n    <!--Unused -->\n    <rule ref=\"rulesets/java/unusedcode.xml/UnusedPrivateField\" />\n    <rule ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\" />\n    <rule ref=\"rulesets/java/unusedcode.xml/UnusedPrivateMethod\" />\n    <rule ref=\"rulesets/java/unusedcode.xml/UnusedFormalParameter\" />\n\n    <!--Unnecessary -->\n    <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary\" />\n    <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryFinalModifier\" />\n    <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryReturn\" />\n    <rule ref=\"rulesets/java/unnecessary.xml/UselessOverridingMethod\" />\n\n\n</ruleset>\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.123046875,
          "content": "include ':app', ':store', ':store-kotlin', ':middleware', ':cache', ':filesystem', ':middleware-moshi', ':middleware-jackson'\n"
        },
        {
          "name": "store-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "store",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}