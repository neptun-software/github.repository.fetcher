{
  "metadata": {
    "timestamp": 1736608907155,
    "page": 90,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Heeexy/SpringBoot-Shiro-Vue",
      "stars": 4596,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.34765625,
          "content": "# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n.idea\nnode_modules/\ntarget/\n*.iml\npackage-lock.json\n\n.settings/\n.classpath\n.project"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2018 Heeexy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2392578125,
          "content": "# Spring Boot-Shiro-Vue\n提供一套基于SpringBoot-shiro-vue的权限管理思路.\n\n前后端都加以控制,做到按钮/接口级别的权限\n\n# DEMO\n[测试地址](https://g.heeexy.com)\n\nadmin/123456 管理员身份登录,可以新增用户,角色.\n\n角色可以分配权限\n\n控制菜单是否显示,新增/删除按钮是否显示\n\n# 更新记录\nv2.0.0  2021.05.09\n1. 支持一个用户多个角色\n2. 使用token作为登录凭证,不使用session,避免跨域问题\n3. 使用自定义注解+aop 替代shiro的功能,简化了配置，增强了可拓展性\n\n# 设计思路\n\n### 核心\n\n \t每个登录用户拥有各自的N条权限,比如 文章:查看/编辑/发布/删除\n\n### 后端\n\n基于 [RBAC新解](http://globeeip.iteye.com/blog/1236167) . \n\n通常我们的权限设计都是 用户--角色--权限 ,其中**角色**是我们写代码的人没法控制的,它可以有多条权限,每个用户又可以设计为拥有多个角色.因此如果从角色着手进行权限验证,系统都必须根据用户的配置动起来,非常复杂.\n\n所以我们后台设计的关键点就在于: **后台接口只验证权限,不看角色.**\n\n角色的作用其实只是用来管理分配权限的,真正的验证只验证**权限** ,而不去管你是否是那种角色.体现在代码上就是接口上注解为\n\n```java\n@RequiresPermissions(\"article:add\")\n```\n\n而不是\n\n```java\n@RequiresRoles(value = {\"admin\",\"manager\",\"writer\"}, logical = Logical.OR) \n```\n\n![api权限](https://img.heeexy.com/api-permission.png)\n\n### 前端\n\n采用了[vueAdmin-template](https://github.com/PanJiaChen/vueAdmin-template) , [ElementUI](https://github.com/ElemeFE/element) , 权限设计思路也是参考了 vueAdmin 的动态路由的设计.\n\n后端负责了接口的安全性,而前端之所以要做权限处理,最主要的目的就是**隐藏掉不具有权限的菜单(路由)和按钮**.\n\n登录系统后,后端返回此用户的权限信息,比如 \n```json\n \"userPermission\":{  \n         \"menuList\":[  \n            \"role\",\n            \"user\",\n            \"article\"\n         ],\n         \"roleId\":1,\n         \"nickname\":\"超级用户\",\n         \"roleName\":\"管理员\",\n         \"permissionList\":[  \n            \"article:list\",\n            \"article:add\",\n            \"user:list\",\n         ],\n         \"userId\":10003\n      }\n```\n根据**menuList**判断给此用户生成哪些路由, 根据**permissionList**判断给用户显示哪些按钮,能请求哪些接口.\n\n### 数据库\n最主要的是要有一张本系统内的全部权限明细表,比如下面这样\n![权限表](https://img.heeexy.com/permissionDatabase.png)\n![权限数据](https://img.heeexy.com/permissionData.png)\n\n如果某用户拥有表格中前五条权限,就可以查出他就拥有article和user两个菜单,至于页面内是否显示(新增)(修改)按钮,就根据他的permissionList来判断.\n\n## 具体实现\n有了思路,就可以根据各自的业务进行实现,本项目在此进行了简单的实现,后端代码在back文件夹,前端代码在vue文件夹.前端启动只需\n```\nnpm install\nnpm run dev\n```\n\n后端就是常规的shiro配置,前端代码如果看不明白,可以参考[前端权限代码说明](./explain-frontend.md) \n\n## 分配权限页面效果\n![分配权限页面](https://img.heeexy.com/role_permission.png)\n"
        },
        {
          "name": "back",
          "type": "tree",
          "content": null
        },
        {
          "name": "db.sql",
          "type": "blob",
          "size": 9.716796875,
          "content": "/*\n Navicat Premium Data Transfer\n\n Source Server         : 本机\n Source Server Type    : MySQL\n Source Server Version : 50734\n Source Host           : localhost:3306\n Source Schema         : example\n\n Target Server Type    : MySQL\n Target Server Version : 50734\n File Encoding         : 65001\n\n Date: 08/05/2021 23:30:58\n*/\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for article\n-- ----------------------------\nDROP TABLE IF EXISTS `article`;\nCREATE TABLE `article` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` varchar(255) DEFAULT '' COMMENT '文章内容',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',\n  `delete_status` varchar(1) DEFAULT '1' COMMENT '是否有效  1.有效  2无效',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COMMENT='文章表';\n\n-- ----------------------------\n-- Records of article\n-- ----------------------------\nBEGIN;\nINSERT INTO `article` VALUES (5, '莎士比亚', '2017-10-25 09:08:45', '2017-10-30 17:59:41', '1');\nINSERT INTO `article` VALUES (6, '亚里士多德', '2017-10-26 10:49:28', '2017-11-18 09:54:15', '1');\nINSERT INTO `article` VALUES (10, '亚历山大', '2017-10-26 14:57:45', '2017-11-08 13:28:52', '1');\nINSERT INTO `article` VALUES (11, '李白', '2017-10-26 15:23:42', '2017-10-26 15:23:42', '1');\nINSERT INTO `article` VALUES (19, '文章test2🤣', '2017-11-18 13:37:07', '2021-05-08 16:10:55', '1');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for sys_permission\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_permission`;\nCREATE TABLE `sys_permission` (\n  `id` int(11) NOT NULL DEFAULT '0' COMMENT '自定id,主要供前端展示权限列表分类排序使用.',\n  `menu_code` varchar(255) DEFAULT '' COMMENT '归属菜单,前端判断并展示菜单使用,',\n  `menu_name` varchar(255) DEFAULT '' COMMENT '菜单的中文释义',\n  `permission_code` varchar(255) DEFAULT '' COMMENT '权限的代码/通配符,对应代码中@RequiresPermissions 的value',\n  `permission_name` varchar(255) DEFAULT '' COMMENT '本权限的中文释义',\n  `required_permission` tinyint(1) DEFAULT '2' COMMENT '是否本菜单必选权限, 1.必选 2非必选 通常是\"列表\"权限是必选',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT='后台权限表';\n\n-- ----------------------------\n-- Records of sys_permission\n-- ----------------------------\nBEGIN;\nINSERT INTO `sys_permission` VALUES (101, 'article', '文章管理', 'article:list', '列表', 1);\nINSERT INTO `sys_permission` VALUES (102, 'article', '文章管理', 'article:add', '新增', 2);\nINSERT INTO `sys_permission` VALUES (103, 'article', '文章管理', 'article:update', '修改', 2);\nINSERT INTO `sys_permission` VALUES (601, 'user', '用户', 'user:list', '列表', 1);\nINSERT INTO `sys_permission` VALUES (602, 'user', '用户', 'user:add', '新增', 2);\nINSERT INTO `sys_permission` VALUES (603, 'user', '用户', 'user:update', '修改', 2);\nINSERT INTO `sys_permission` VALUES (701, 'role', '角色权限', 'role:list', '列表', 1);\nINSERT INTO `sys_permission` VALUES (702, 'role', '角色权限', 'role:add', '新增', 2);\nINSERT INTO `sys_permission` VALUES (703, 'role', '角色权限', 'role:update', '修改', 2);\nINSERT INTO `sys_permission` VALUES (704, 'role', '角色权限', 'role:delete', '删除', 2);\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for sys_role\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_role`;\nCREATE TABLE `sys_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `role_name` varchar(20) DEFAULT NULL COMMENT '角色名',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `delete_status` varchar(1) DEFAULT '1' COMMENT '是否有效  1有效  2无效',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT COMMENT='后台角色表';\n\n-- ----------------------------\n-- Records of sys_role\n-- ----------------------------\nBEGIN;\nINSERT INTO `sys_role` VALUES (1, '管理员', '2017-11-22 16:24:34', '2017-11-22 16:24:52', '1');\nINSERT INTO `sys_role` VALUES (2, '作家🌝', '2017-11-22 16:24:34', '2021-05-08 16:11:27', '1');\nINSERT INTO `sys_role` VALUES (3, '程序员', '2017-11-22 16:28:47', '2017-11-22 16:28:47', '1');\nINSERT INTO `sys_role` VALUES (4, '只有文章', '2021-05-08 23:21:42', '2021-05-08 23:26:03', '1');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for sys_role_permission\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_role_permission`;\nCREATE TABLE `sys_role_permission` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `role_id` int(11) DEFAULT NULL COMMENT '角色id',\n  `permission_id` int(11) DEFAULT NULL COMMENT '权限id',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `delete_status` varchar(1) DEFAULT '1' COMMENT '是否有效 1有效     2无效',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COMMENT='角色-权限关联表';\n\n-- ----------------------------\n-- Records of sys_role_permission\n-- ----------------------------\nBEGIN;\nINSERT INTO `sys_role_permission` VALUES (1, 2, 101, '2017-11-22 16:26:21', '2017-11-22 16:26:32', '1');\nINSERT INTO `sys_role_permission` VALUES (2, 2, 102, '2017-11-22 16:26:21', '2017-11-22 16:26:32', '1');\nINSERT INTO `sys_role_permission` VALUES (5, 2, 602, '2017-11-22 16:28:28', '2017-11-22 16:28:28', '1');\nINSERT INTO `sys_role_permission` VALUES (6, 2, 601, '2017-11-22 16:28:28', '2017-11-22 16:28:28', '1');\nINSERT INTO `sys_role_permission` VALUES (7, 2, 603, '2017-11-22 16:28:28', '2021-05-08 16:11:27', '2');\nINSERT INTO `sys_role_permission` VALUES (8, 2, 703, '2017-11-22 16:28:28', '2017-11-22 16:28:28', '1');\nINSERT INTO `sys_role_permission` VALUES (9, 2, 701, '2017-11-22 16:28:28', '2017-11-22 16:28:28', '1');\nINSERT INTO `sys_role_permission` VALUES (10, 2, 702, '2017-11-22 16:28:28', '2017-11-22 16:28:28', '1');\nINSERT INTO `sys_role_permission` VALUES (11, 2, 704, '2017-11-22 16:28:31', '2017-11-22 16:28:31', '1');\nINSERT INTO `sys_role_permission` VALUES (12, 2, 103, '2017-11-22 16:28:31', '2017-11-22 16:28:31', '1');\nINSERT INTO `sys_role_permission` VALUES (13, 3, 601, '2017-11-22 16:28:47', '2017-11-22 16:28:47', '1');\nINSERT INTO `sys_role_permission` VALUES (14, 3, 701, '2017-11-22 16:28:47', '2017-11-22 16:28:47', '1');\nINSERT INTO `sys_role_permission` VALUES (15, 3, 702, '2017-11-22 16:35:01', '2017-11-22 16:35:01', '1');\nINSERT INTO `sys_role_permission` VALUES (16, 3, 704, '2017-11-22 16:35:01', '2017-11-22 16:35:01', '1');\nINSERT INTO `sys_role_permission` VALUES (17, 3, 102, '2017-11-22 16:35:01', '2017-11-22 16:35:01', '1');\nINSERT INTO `sys_role_permission` VALUES (18, 3, 101, '2017-11-22 16:35:01', '2017-11-22 16:35:01', '1');\nINSERT INTO `sys_role_permission` VALUES (19, 3, 603, '2017-11-22 16:35:01', '2017-11-22 16:35:01', '1');\nINSERT INTO `sys_role_permission` VALUES (20, 4, 101, '2021-05-08 23:21:42', '2021-05-08 23:21:42', '1');\nINSERT INTO `sys_role_permission` VALUES (21, 4, 102, '2021-05-08 23:21:42', '2021-05-08 23:21:42', '1');\nINSERT INTO `sys_role_permission` VALUES (22, 4, 103, '2021-05-08 23:21:42', '2021-05-08 23:21:42', '1');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for sys_user\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_user`;\nCREATE TABLE `sys_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) DEFAULT NULL COMMENT '用户名',\n  `password` varchar(255) DEFAULT NULL COMMENT '密码',\n  `nickname` varchar(255) DEFAULT NULL COMMENT '昵称',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',\n  `delete_status` varchar(1) DEFAULT '1' COMMENT '是否有效  1有效  2无效',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=10009 DEFAULT CHARSET=utf8mb4 COMMENT='用户表';\n\n-- ----------------------------\n-- Records of sys_user\n-- ----------------------------\nBEGIN;\nINSERT INTO `sys_user` VALUES (10003, 'admin', '123456', '超级用户', '2017-10-30 11:52:38', '2021-05-08 23:26:56', '1');\nINSERT INTO `sys_user` VALUES (10004, 'user', '123456', '莎士比亚😘', '2017-10-30 16:13:02', '2021-05-08 16:11:13', '1');\nINSERT INTO `sys_user` VALUES (10005, 'aaa', '123456', '🌹', '2017-11-15 14:02:56', '2021-05-08 23:26:23', '1');\nINSERT INTO `sys_user` VALUES (10007, 'test', '123456', '就看看列表', '2017-11-22 16:29:41', '2021-05-08 23:28:44', '2');\nINSERT INTO `sys_user` VALUES (10008, 'sa', '1', '😯', '2021-05-08 23:21:54', '2021-05-08 23:26:32', '1');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for sys_user_role\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_user_role`;\nCREATE TABLE `sys_user_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` int(11) NOT NULL COMMENT '用户id',\n  `role_id` int(11) DEFAULT NULL COMMENT '角色id',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COMMENT='用户-角色关联表';\n\n-- ----------------------------\n-- Records of sys_user_role\n-- ----------------------------\nBEGIN;\nINSERT INTO `sys_user_role` VALUES (3, 10004, 2);\nINSERT INTO `sys_user_role` VALUES (4, 10004, 3);\nINSERT INTO `sys_user_role` VALUES (9, 10005, 1);\nINSERT INTO `sys_user_role` VALUES (10, 10005, 2);\nINSERT INTO `sys_user_role` VALUES (11, 10008, 4);\nINSERT INTO `sys_user_role` VALUES (12, 10003, 1);\nINSERT INTO `sys_user_role` VALUES (13, 10007, 1);\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n"
        },
        {
          "name": "explain-frontend.md",
          "type": "blob",
          "size": 2.166015625,
          "content": "# 前端权限代码说明\n\n## 路由\n\n​\t路由分为两部分,一部分是固定的几个 ,比如/login,/404,另一部分是根据权限动态生成的.\n\n​\t`router/index.js`  里,动态路由都在 **asyncRouterMap**内,里面元素的关键属性为**menu** , 生成动态路由时,会根据用户权限json内的menuList里是否含有这个menu,来决定是否为此用户添加这个路由.\n\n## 生成动态路由过程\n\n\n\n1.  `permission.js`   vue-router的全局拦截器, 如果已登录状态而没有拿到用户的权限属性的话,说明还没查询用户权限信息,初始化动态路由\n\n   ```javascript\n   if (!store.getters.role) {\n         store.dispatch('GetInfo').then(() => {\n           next({...to})\n         })\n       }\n   ```\n\n2. `user.js` ,查询到用户权限信息,并且存入vuex\n\n```json\n \"userPermission\":{  \n         \"menuList\":[  \n            \"role\",\n            \"user\",\n            \"article\"\n         ],\n         \"roleId\":1,\n         \"nickname\":\"超级用户\",\n         \"roleName\":\"管理员\",\n         \"permissionList\":[  \n            \"article:list\",\n            \"article:add\",\n            \"user:list\",\n         ],\n         \"userId\":10003\n      }\n```\n\n为什么不在登录的时候一并返回呢? 因为页面F5刷新的时候,vuex信息会丢失,所以需要重新查询一遍这些权限信息. 当然,把权限信息存入cookie也可以解决.\n\n拿到userPermission后,调用生成动态路由的方法\n\n```javascript\nstore.dispatch('GenerateRoutes', userPermission).then(() => {\n    router.addRoutes(store.getters.addRouters)\n})\n```\n\n3. `store/modules/permission.js` 现在,我们已经拿到了用户的权限信息,再从`@/router/index` 内拿到**asyncRouterMap**,逐一比较便可知道为用户生成哪些路由了\n\n## 页面元素\n\n​\t只需在按钮上添加 ` v-if=\"hasPerm('article:add')\"` 就可以根据用户的权限来控制本页面元素(比如按钮)是否显示了.\n\n​\thasPerm方法也非常简单 \n\n```javascript\nexport function hasPermission(permission) {\n  let myPermissions = store.getters.permissions;\n  return myPermissions.indexOf(permission) > -1;\n}\n```\n> v2.0.0 增加了v-permission指令，相当于` v-if=\"hasPerm('article:add')\"`\n\n\n"
        },
        {
          "name": "vue",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}