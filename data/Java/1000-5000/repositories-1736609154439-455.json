{
  "metadata": {
    "timestamp": 1736609154439,
    "page": 455,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apache/fury",
      "stars": 3169,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".asf.yaml",
          "type": "blob",
          "size": 1.986328125,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# For more information, see https://cwiki.apache.org/confluence/display/INFRA/Git+-+.asf.yaml+features.\n\ngithub:\n  description: >-\n    A blazingly fast multi-language serialization framework powered by JIT and zero-copy.\n  homepage: https://fury.apache.org/\n  labels:\n    - javascript\n    - python\n    - java\n    - rust\n    - fast\n    - golang\n    - encoding\n    - serialization\n    - compression\n    - lightning\n    - cpp\n    - transfer\n    - zero-copy\n    - persistence\n    - marshalling\n    - jit\n    - rpc\n    - hacktoberfest\n    - cross-language\n    - multiple-language\n  enabled_merge_buttons:\n    squash: true\n    merge: false\n    rebase: false\n  protected_branches:\n    main:\n      required_status_checks:\n        strict: false\n      required_pull_request_reviews:\n        dismiss_stale_reviews: false\n        required_approving_review_count: 1\n        required_linear_history: true\n    releases-0.4.1: {}\n    releases-0.4.0: {}\n    releases-0.3.1: {}\n    releases-0.3.0: {}\n    releases-0.2.1: {}\n    releases-0.2.0: {}\n    releases-0.1.2: {}\n\nnotifications:\n  commits: commits@fury.apache.org\n  issues: commits@fury.apache.org\n  pullrequests: commits@fury.apache.org\n  jobs: commits@fury.apache.org\n  discussions: commits@fury.apache.org\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 1.9609375,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# Must be first. Enables build:windows, build:linux, build:macos, build:freebsd, build:openbsd\nbuild --enable_platform_specific_config\n###############################################################################\n# On       Windows, provide: BAZEL_SH, and BAZEL_LLVM (if using clang-cl)\n# On all platforms, provide: PYTHON3_BIN_PATH=python\n###############################################################################\nbuild --action_env=PATH\n# For --compilation_mode=dbg, consider enabling checks in the standard library as well (below).\nbuild --compilation_mode=opt\n# This workaround is needed to prevent Bazel from compiling the same file twice (once PIC and once not).\nbuild:linux --force_pic\nbuild:macos --force_pic\nbuild:clang-cl --compiler=clang-cl\nbuild:msvc --compiler=msvc-cl\nbuild:windows --compiler=msvc-cl\n\n# test config\ntest --build_tests_only\ntest --cache_test_results=no\ntest --test_output=all\n\nbuild:linux --cxxopt=\"-std=c++17\" --linkopt=\"-pthread\"\nbuild:macos --cxxopt=\"-std=c++17\" --linkopt=\"-pthread\"\nbuild:clang-cl --cxxopt=\"-std=c++17\"\nbuild:windows --cxxopt=\"/std:c++17\" --cxxopt=\"/Zc:preprocessor\" --cxxopt=\"/utf-8\"\nbuild:msvc --cxxopt=\"/std:c++17\" --cxxopt=\"/Zc:preprocessor\" --cxxopt=\"/utf-8\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.8798828125,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nroot = true\n\n[*]\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 1.1015625,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n[flake8]\nexclude =\n  python/build/\n  python/.eggs/\nmax-line-length = 150\ninline-quotes = \"\nignore =\n  C408\n  E121\n  E123\n  E126\n  E203\n  E225\n  E226\n  E227\n  E402\n  E999\n  E24\n  E704\n  W503\n  W504\n  W605\n  I\n  N\n  B001\n  B002\n  B003\n  B004\n  B005\n  B007\n  B008\n  B009\n  B010\n  B011\n  B012\n  B013\n  B014\n  B015\n  B016\n  B017\navoid-escape = no\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0283203125,
          "content": "java/benchmark export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5654296875,
          "content": "**/*.cpp\n**/*.so\n**/*.dylib\nbazel-*\n.whl\npython/.cache\npython/pyfury/__pycache__/\npython/dist\npython/build\npython/pyfury.egg-info\ncython_debug\n**/*.prof\n**/*.pyc\ntestresult\njava/target\nbenchmark/target\n**/target/**/**\njava/**/.code/\njava/**/dependency-reduced-pom.xml\n**/pom.xml.versionsBackup\n**/.code/\n**/*.iml\n**/*.html\n**/target\n.idea/\njava/dependency-reduced-pom.xml\njava/foo\nscala/.bsp\nscala/.idea\nbazel-*/\nbazel-fury/\nbazel-fury/**\njava/**/generated\njavascript/**/dist/\njavascript/**/node_modules/\njavascript/**/build\nMODULE.bazel\nMODULE.bazel.lock\n.DS_Store\n**/.DS_Store\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".markdownlint.yml",
          "type": "blob",
          "size": 1.337890625,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# MD013 Line length\nMD013: false\n\n# MD014 Dollar signs used before commands without showing output\nMD014: false\n\n# MD024 Multiple headings with the same content\nMD024: false\n\n# MD026/no-trailing-punctuation Trailing punctuation in heading\nMD026: false\n\n# MD029/ol-prefix Ordered list item prefix\nMD029: false\n\n# MD033/no-inline-html\nMD033: false\n\n# MD034/no-bare-urls\nMD034: false\n\n# MD040/fenced-code-language\nMD040: false\n\n# MD041/first-line-heading/first-line-h1 First line in file should be a top level heading\nMD041: false\n\n# MD036/emphasis used instead of a header\nMD036: false\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.083984375,
          "content": "extends: default\n\nrules:\n  document-start: false\n  line-length: false\n  truthy: false\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 3.1962890625,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nload(\"@com_github_grpc_grpc//bazel:cython_library.bzl\", \"pyx_library\")\n\n\npyx_library(\n    name = \"_util\",\n    srcs = glob([\n        \"python/pyfury/includes/*.pxd\",\n        \"python/pyfury/_util.pxd\",\n        \"python/pyfury/_util.pyx\",\n        \"python/pyfury/__init__.py\",\n    ]),\n    cc_kwargs = dict(\n        linkstatic = 1,\n    ),\n    deps = [\n        \"//cpp/fury/util:fury_util\",\n    ],\n)\n\npyx_library(\n    name = \"mmh3\",\n    srcs = glob([\n        \"python/pyfury/lib/mmh3/*.pxd\",\n        \"python/pyfury/lib/mmh3/*.pyx\",\n        \"python/pyfury/lib/mmh3/__init__.py\",\n    ]),\n    cc_kwargs = dict(\n        linkstatic = 1,\n    ),\n    deps = [\n        \"//cpp/fury/thirdparty:libmmh3\",\n    ],\n)\n\npyx_library(\n    name = \"_serialization\",\n    srcs = glob([\n        \"python/pyfury/includes/*.pxd\",\n        \"python/pyfury/_util.pxd\",\n        \"python/pyfury/_serialization.pyx\",\n        \"python/pyfury/__init__.py\",\n    ]),\n    cc_kwargs = dict(\n        linkstatic = 1,\n    ),\n    deps = [\n        \"//cpp/fury/util:fury_util\",\n        \"//cpp/fury/type:fury_type\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n    ],\n)\n\npyx_library(\n    name = \"_format\",\n    srcs = glob([\n        \"python/pyfury/__init__.py\",\n        \"python/pyfury/includes/*.pxd\",\n        \"python/pyfury/_util.pxd\",\n        \"python/pyfury/*.pxi\",\n        \"python/pyfury/format/_format.pyx\",\n        \"python/pyfury/format/__init__.py\",\n        \"python/pyfury/format/*.pxi\",\n    ]),\n    cc_kwargs = dict(\n        linkstatic = 1,\n    ),\n    deps = [\n        \"//cpp/fury:fury\",\n        \"@local_config_pyarrow//:python_numpy_headers\",\n        \"@local_config_pyarrow//:arrow_python_shared_library\"\n    ],\n)\n\ngenrule(\n    name = \"cp_fury_so\",\n    srcs = [\n        \":python/pyfury/_util.so\",\n        \":python/pyfury/lib/mmh3/mmh3.so\",\n        \":python/pyfury/format/_format.so\",\n        \":python/pyfury/_serialization.so\",\n    ],\n    outs = [\n        \"cp_fury_py_generated.out\",\n    ],\n    cmd = \"\"\"\n        set -e\n        set -x\n        WORK_DIR=$$(pwd)\n        cp -f $(location python/pyfury/_util.so) \"$$WORK_DIR/python/pyfury\"\n        cp -f $(location python/pyfury/lib/mmh3/mmh3.so) \"$$WORK_DIR/python/pyfury/lib/mmh3\"\n        cp -f $(location python/pyfury/format/_format.so) \"$$WORK_DIR/python/pyfury/format\"\n        cp -f $(location python/pyfury/_serialization.so) \"$$WORK_DIR/python/pyfury\"\n        echo $$(date) > $@\n    \"\"\",\n    local = 1,\n    tags = [\"no-cache\"],\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.08984375,
          "content": "# How to contribute to Fury\n\n## Finding good first issues\n\nSee [Good First Issues](https://github.com/apache/fury/contribute).\n\n## How to create an issue\n\nCreate an issue with [this form](https://github.com/apache/fury/issues/new/choose).\n\n## How to title your PR\n\nGenerally we follows the [Conventional Commits](https://www.conventionalcommits.org/) for pull request titles,\nsince we will squash and merge the PR and use the PR title as the first line of commit message.\n\nFor example, here are good PR titles:\n\n- feat(java): support xxx feature\n- fix(c++): blablabla\n- chore(python): remove useless yyy file\n\nIf the submitted PR affects the performance of Fury, we strongly recommend using the perf type,\nand need to provide benchmark data in the PR description. For how to run the benchmark,\nplease check [Fury Java Benchmark](https://github.com/apache/fury/blob/main/java/benchmark/README.md).\n\nFor more details, please check [pr-lint.yml](./.github/workflows/pr-lint.yml).\n\n## Testing\n\nFor environmental requirements, please check [DEVELOPMENT.md](./docs/guide/DEVELOPMENT.md).\n\n### Python\n\n```bash\ncd python\npytest -v -s .\n```\n\n### Java\n\n```bash\ncd java\nmvn -T10 clean test\n```\n\n### C++\n\n```bash\nbazel test $(bazel query //...)\n```\n\n### GoLang\n\n```bash\ncd go/fury\ngo test -v\ngo test -v fury_xlang_test.go\n```\n\n### Rust\n\n```bash\ncd rust\ncargo test\n```\n\n### JavaScript\n\n```bash\ncd javascript\nnpm run test\n```\n\n## Code Style\n\nRun all checks: `bash ci/format.sh --all`.\n\n### License headers\n\n```bash\ndocker run --rm -v $(pwd):/github/workspace ghcr.io/korandoru/hawkeye-native:v3 format\n```\n\n### Java\n\n```bash\ncd java\n# code format\nmvn spotless:apply\n# code format check\nmvn spotless:check\nmvn checkstyle:check\n```\n\n### Python\n\n```bash\ncd python\n# install dependencies fro styling\npip install black==22.1.0 flake8==3.9.1 flake8-quotes flake8-bugbear click==8.0.2\n# format python code\nblack pyfury\n```\n\n### C++\n\n```bash\ngit ls-files -- '*.cc' '*.h' | xargs -P 5 clang-format -i\n```\n\n### GoLang\n\n```bash\ncd go/fury\ngofmt -s -w .\n```\n\n### Rust\n\n```bash\ncd rust\ncargo fmt\n```\n\n### JavaScript\n\n```bash\ncd javascript\nnpm run lint\n```\n\n## Debug\n\n### Java\n\nFury supports dump jit generated code into local file for better debug by configuring environment variables:\n\n- `FURY_CODE_DIR`：The directory for fury to dump generated code. Set to empty by default to skip dump code.\n- `ENABLE_FURY_GENERATED_CLASS_UNIQUE_ID`: Append an unique id for dynamically generated files by default to avoid serializer collision for different classes with same name. Set this to `false` to keep serializer name same for multiple execution or `AOT` codegen.\n\nBy using those environment variables, we can generate code to source directory and debug the generated code in next run.\n\n### Python\n\n```bash\ncd python\npython setup.py develop\n```\n\n- Use `cython --cplus -a  pyfury/_serialization.pyx` to produce an annotated HTML file of the source code. Then you can analyze interaction between Python objects and Python's C API.\n- Read more: https://cython.readthedocs.io/en/latest/src/userguide/debugging.html\n\n```bash\nFURY_DEBUG=true python setup.py build_ext --inplace\n# For linux\ncygdb build\n```\n\n### C++\n\nSee the [Debugging C++](docs/cpp_debug.md) doc.\n\n### Debug Crash\n\nEnable core dump on Macos Monterey 12.1:\n\n```bash\n/usr/libexec/PlistBuddy -c \"Add :com.apple.security.get-task-allow bool true\" tmp.entitlements\ncodesign -s - -f --entitlements tmp.entitlements /Users/chaokunyang/anaconda3/envs/py3.8/bin/python\nulimit -c unlimited\n```\n\nthen run the code:\n\n```bash\npython fury_serializer.py\nls -al /cores\n```\n\n## Profiling\n\n### C++\n\n```bash\n# Dtrace\nsudo dtrace -x ustackframes=100 -n 'profile-99 /pid == 73485 && arg1/ { @[ustack()] = count(); } tick-60s { exit(0); }' -o out.stack\nsudo stackcollapse.pl out.stack > out.folded\nsudo flamegraph.pl out.folded > out.svg\n```\n\n## Website\n\nFury's website consists of static pages hosted at https://github.com/apache/fury-site.\n\nAll updates about docs under [guide](docs/guide) and [benchmarks](docs/benchmarks) will be synced to the site repo automatically.\n\nIf you want write a blog, or update other contents about the website, please submit PR to the site repo.\n"
        },
        {
          "name": "DISCLAIMER",
          "type": "blob",
          "size": 0.537109375,
          "content": "Apache Fury (Incubating) is an effort undergoing incubation at the Apache\nSoftware Foundation (ASF), sponsored by the Apache Incubator PMC.\n\nIncubation is required of all newly accepted projects until a further review\nindicates that the infrastructure, communications, and decision making process\nhave stabilized in a manner consistent with other successful ASF projects.\n\nWhile incubation status is not necessarily a reflection of the completeness\nor stability of the code, it does indicate that the project has yet to be\nfully endorsed by the ASF.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 15.7041015625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n================================================================\n\nThis product includes a number of Dependencies with separate copyright notices\nand license terms. Your use of these submodules is subject to the terms and\nconditions of the following licenses.\n\n================================================================\n\n================================================================\nApache-2.0 licenses\n================================================================\nThe following components are provided under the Apache-2.0 License. See project link for details.\nThe text of each license is the standard Apache 2.0 license.\n\n* guava (https://github.com/google/guava)\n    Files:\n      java/fury-core/src/main/java/org/apache/fury/util/Preconditions.java\n      java/fury-core/src/main/java/org/apache/fury/reflect/TypeParameter.java\n      java/fury-core/src/main/java/org/apache/fury/reflect/TypeRef.java\n      java/fury-core/src/main/java/org/apache/fury/util/concurrency/DirectExecutorService.java\n\n* spark (https://github.com/apache/spark)\n    Files:\n      java/fury-core/src/main/java/org/apache/fury/codegen/Code.java\n      java/fury-core/src/main/java/org/apache/fury/memory/Platform.java\n      java/fury-format/src/main/java/org/apache/fury/format/vectorized/ArrowWriter.java\n\n* commons-io (https://github.com/apache/commons-io)\n    Files:\n      java/fury-core/src/main/java/org/apache/fury/io/ClassLoaderObjectInputStream.java\n\n\n* fast-serialization (https://github.com/RuedigerMoeller/fast-serialization)\n    Files:\n      java/benchmark/src/main/java/org/apache/fury/benchmark/Identity2IdMap.java\n\n* ray (https://github.com/ray-project/ray)\n    Files:\n      ci/format.sh\n      bazel/fury_deps_setup.bzl\n      bazel/grpc-cython-copts.patch\n      bazel/grpc-python.patch\n\n* tensorflow (https://github.com/tensorflow/tensorflow)\n    Files:\n      bazel/arrow/pyarrow_configure.bzl\n\n\n================================================================\nBSD-3-Clause licenses\n================================================================\nThe following components are provided under the BSD-3-Clause License. See project link for details.\nThe text of each license is also included in licenses/LICENSE-[project].txt.\n\n* kryo (https://github.com/EsotericSoftware/kryo)\n    Files:\n      java/benchmark/src/main/java/org/apache/fury/benchmark/data/Data.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/data/Image.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/data/Media.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/data/MediaContent.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/data/Sample.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/state/BufferType.java\n      java/benchmark/src/main/java/org/apache/fury/benchmark/state/KryoState.java\n      java/fury-core/src/main/java/org/apache/fury/collection/FuryObjectMap.java\n      java/fury-core/src/main/java/org/apache/fury/collection/IdentityMap.java\n      java/fury-core/src/main/java/org/apache/fury/collection/IdentityObjectIntMap.java\n      java/fury-core/src/main/java/org/apache/fury/collection/LongMap.java\n      java/fury-core/src/main/java/org/apache/fury/collection/LongLongMap.java\n      java/fury-core/src/main/java/org/apache/fury/collection/ObjectIntMap.java\n      java/fury-core/src/main/java/org/apache/fury/type/Generics.java\n      java/fury-core/src/test/java/org/apache/fury/type/GenericsTest.java\n\n* v8 (https://chromium.googlesource.com/v8/v8.git)\n    Files:\n      javascript/packages/hps/src/v8-fast-api-calls.h\n\n\n================================================================\nMIT licenses\n================================================================\nThe following components are provided under the MIT License. See project link for details.\nThe text of each license is also included in licenses/LICENSE-[project].txt\n\n* murmurHash3.js (https://github.com/karanlyons/murmurHash3.js)\n    Files:\n      javascript/packages/fury/lib/murmurHash3.ts\n\n* cython-abseil-sample (https://github.com/messense/cython-abseil-sample)\n    Files:\n      python/pyfury/includes/libabsl.pxd\n\n\n================================================================\nPublic Domain\n================================================================\nThe following components are placed in the public domain.\nThe author hereby disclaims copyright to this source code.\nSee project link for details.\n\n* smhasher (https://github.com/aappleby/smhasher)\n    Files:\n      src/fury/thirdparty/MurmurHash3.cc\n      src/fury/thirdparty/MurmurHash3.h\n\n* java_util (https://github.com/yonik/java_util)\n    Files:\n      java/fury-core/src/main/java/org/apache/fury/util/MurmurHash3.java\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.037109375,
          "content": "Apache Fury (Incubating)\nCopyright 2023-2024 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\n================================================================\n\nThis product includes a number of Dependencies/Code with separate copyright notices\nand license terms. Your use of these submodules is subject to the terms and\nconditions of the following licenses.\n\n================================================================\n\nApache Spark (https://github.com/apache/spark)\nCopyright 2014 and onwards The Apache Software Foundation.\n\nThis product includes software developed at\nThe Apache Software Foundation (http://www.apache.org/).\n\n================================================================\n\nApache Commons IO (https://github.com/apache/commons-io)\nCopyright 2002-2024 The Apache Software Foundation\n\nThis product includes software developed at\nThe Apache Software Foundation (https://www.apache.org/).\n\n================================================================\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.818359375,
          "content": "<div align=\"center\">\n  <img width=\"65%\" alt=\"\" src=\"docs/images/logo/fury_github_banner.png\"><br>\n</div>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/apache/fury/ci.yml?branch=main&style=for-the-badge&label=GITHUB%20ACTIONS&logo=github)](https://github.com/apache/fury/actions/workflows/ci.yml)\n[![Slack Channel](https://img.shields.io/badge/slack-join-3f0e40?logo=slack&style=for-the-badge)](https://join.slack.com/t/fury-project/shared_invite/zt-1u8soj4qc-ieYEu7ciHOqA2mo47llS8A)\n[![X](https://img.shields.io/badge/@ApacheFury-follow-blue?logo=x&style=for-the-badge)](https://x.com/ApacheFury)\n[![Maven Version](https://img.shields.io/maven-central/v/org.apache.fury/fury-core?style=for-the-badge)](https://search.maven.org/#search|gav|1|g:\"org.apache.fury\"%20AND%20a:\"fury-core\")\n\n**Apache Fury (incubating)** is a blazingly-fast multi-language serialization framework powered by **JIT** (just-in-time compilation) and **zero-copy**, providing up to 170x performance and ultimate ease of use.\n\n<https://fury.apache.org>\n\n> [!IMPORTANT]\n> Apache Fury (incubating) is an effort undergoing incubation at the Apache\n> Software Foundation (ASF), sponsored by the Apache Incubator PMC.\n>\n> Please read the [DISCLAIMER](DISCLAIMER) and a full explanation of [\"incubating\"](https://incubator.apache.org/policy/incubation.html).\n\n## Features\n\n- **Multiple languages**: Java/Python/C++/Golang/JavaScript/Rust/Scala/Kotlin/TypeScript.\n- **Zero-copy**: Cross-language out-of-band serialization inspired\n  by [pickle5](https://peps.python.org/pep-0574/) and off-heap read/write.\n- **High performance**: A highly-extensible JIT framework to generate serializer code at runtime in an async multi-thread way to speed serialization, providing 20-170x speed up by:\n  - reduce memory access by inlining variables in generated code.\n  - reduce virtual method invocation by inline call in generated code.\n  - reduce conditional branching.\n  - reduce hash lookup.\n- **Multiple binary protocols**: Object graph, row format, and so on.\n\nIn addition to cross-language serialization, Fury also features at:\n\n- Drop-in replace Java serialization frameworks such as JDK/Kryo/Hessian, but 100x faster at most, which can greatly improve\n the efficiency of high-performance RPC calls, data transfer, and object persistence.\n- **100% compatible** with JDK serialization API with much faster implementation: supporting JDK `writeObject`/`readObject`/`writeReplace`/`readResolve`/`readObjectNoData`/`Externalizable` API.\n- Supports **Java 8~21**, Java 17+ `record` is supported too.\n- Supports [AOT compilation serialization](docs/guide/graalvm_guide.md) for **GraalVM native image**, and no reflection/serialization json config are needed.\n- Supports shared and circular reference object serialization for golang.\n- Supports [scala serialization](docs/guide/scala_guide.md)\n- Supports [Kotlin serialization](kotlin/README.md)\n- Supports automatic object serialization for golang.\n\n## Protocols\n\nFury designed and implemented multiple binary protocols for different scenarios:\n\n- **[xlang serialization format](docs/specification/xlang_serialization_spec.md)**:\n  - Cross-language serialize any object automatically, no need for IDL definition, schema compilation and object to/from\n    protocol conversion.\n  - Support optional shared reference and circular reference, no duplicate data or recursion error.\n  - Support object polymorphism.\n- **[Java serialization format](docs/specification/java_serialization_spec.md)**: Highly-optimized and drop-in replacement for Java serialization.\n- **[Row format format](docs/specification/row_format_spec.md)**: A cache-friendly binary random access format, supports skipping serialization and\n  partial serialization, and can convert to column-format automatically.\n\nNew protocols can be easily added based on Fury existing buffer, encoding, meta, codegen and other capabilities. All of those share the same codebase, and the optimization for one protocol can be reused by another protocol.\n\n## Benchmarks\n\nDifferent serialization frameworks are suitable for different scenarios, and benchmark results here are for reference only.\n\nIf you need to benchmark for your specific scenario, make sure all serialization frameworks are appropriately configured for that scenario.\n\nDynamic serialization frameworks support polymorphism and references, but they often come with a higher cost compared to static serialization frameworks, unless they utilize JIT techniques like Fury does.\nTo ensure accurate benchmark statistics, it is advisable to **warm up** the system before collecting data due to Fury's runtime code generation.\n\n### Java Serialization\n\nIn these charts below, titles containing \"compatible\" represent schema compatible mode: type forward/backward compatibility is enabled; while titles without \"compatible\" represent schema consistent mode: class schema must be the same between serialization and deserialization.\n\nWhere `Struct` is a class with [100 primitive fields](https://github.com/apache/fury/tree/main/docs/benchmarks#Struct), `MediaContent` is a class from [jvm-serializers](https://github.com/eishay/jvm-serializers/blob/master/tpc/src/data/media/MediaContent.java), and `Sample` is a class from [kryo benchmark](https://github.com/EsotericSoftware/kryo/blob/master/benchmarks/src/main/java/com/esotericsoftware/kryo/benchmarks/data/Sample.java).\n\n<p align=\"center\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/compatible/bench_serialize_compatible_STRUCT_to_directBuffer_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/compatible/bench_serialize_compatible_MEDIA_CONTENT_to_array_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/serialization/bench_serialize_MEDIA_CONTENT_to_array_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/serialization/bench_serialize_SAMPLE_to_array_tps.png\">\n</p>\n\n<p align=\"center\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/compatible/bench_deserialize_compatible_STRUCT_from_directBuffer_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/compatible/bench_deserialize_compatible_MEDIA_CONTENT_from_array_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/deserialization/bench_deserialize_MEDIA_CONTENT_from_array_tps.png\">\n<img width=\"24%\" alt=\"\" src=\"docs/benchmarks/deserialization/bench_deserialize_SAMPLE_from_array_tps.png\">\n</p>\n\nSee [benchmarks](https://github.com/apache/fury/tree/main/docs/benchmarks) for more benchmarks about type forward/backward compatibility, off-heap support, zero-copy serialization.\n\n## Installation\n\n### Java\n\nNightly snapshot:\n\n```xml\n<repositories>\n  <repository>\n    <id>apache</id>\n    <url>https://repository.apache.org/snapshots/</url>\n    <releases>\n      <enabled>false</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n<dependency>\n  <groupId>org.apache.fury</groupId>\n  <artifactId>fury-core</artifactId>\n  <version>0.10.0-SNAPSHOT</version>\n</dependency>\n<!-- row/arrow format support -->\n<!-- <dependency>\n  <groupId>org.apache.fury</groupId>\n  <artifactId>fury-format</artifactId>\n  <version>0.10.0-SNAPSHOT</version>\n</dependency> -->\n```\n\nRelease version:\n\n```xml\n<dependency>\n  <groupId>org.apache.fury</groupId>\n  <artifactId>fury-core</artifactId>\n  <version>0.9.0</version>\n</dependency>\n<!-- row/arrow format support -->\n<!-- <dependency>\n  <groupId>org.apache.fury</groupId>\n  <artifactId>fury-format</artifactId>\n  <version>0.9.0</version>\n</dependency> -->\n```\n\n### Scala\n\nScala2:\n\n```sbt\nlibraryDependencies += \"org.apache.fury\" % \"fury-scala_2.13\" % \"0.9.0\"\n```\n\nScala3:\n\n```sbt\nlibraryDependencies += \"org.apache.fury\" % \"fury-scala_3\" % \"0.9.0\"\n```\n\n### Kotlin\n\n```xml\n<dependency>\n  <groupId>org.apache.fury</groupId>\n  <artifactId>fury-kotlin</artifactId>\n  <version>0.9.0</version>\n</dependency>\n```\n\n### Python\n\n```bash\npip install pyfury\n```\n\n### JavaScript\n\n```bash\nnpm install @furyjs/fury\n```\n\n### Golang\n\n```bash\ngo get github.com/apache/fury/go/fury\n```\n\n## Quickstart\n\nHere we give a quick start about how to use Fury, see [user guide](docs/README.md) for more details about [java](docs/guide/java_serialization_guide.md), [cross language](docs/guide/xlang_serialization_guide.md), and [row format](docs/guide/row_format_guide.md).\n\n### Fury java object graph serialization\n\nIf you don't have cross-language requirements, using this mode will\nresult in better performance.\n\n```java\nimport org.apache.fury.*;\nimport org.apache.fury.config.*;\nimport java.util.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    // Note that Fury instances should be reused between\n    // multiple serializations of different objects.\n    {\n      Fury fury = Fury.builder().withLanguage(Language.JAVA)\n        .requireClassRegistration(true)\n        .build();\n      // Registering types can reduce class name serialization overhead, but not mandatory.\n      // If class registration enabled, all custom types must be registered.\n      fury.register(SomeClass.class);\n      byte[] bytes = fury.serialize(object);\n      System.out.println(fury.deserialize(bytes));\n    }\n    {\n      ThreadSafeFury fury = Fury.builder().withLanguage(Language.JAVA)\n        .requireClassRegistration(true)\n        .buildThreadSafeFury();\n      // Registering types can reduce class name serialization overhead, but not mandatory.\n      // If class registration enabled, all custom types must be registered.\n      fury.register(SomeClass.class);\n      byte[] bytes = fury.serialize(object);\n      System.out.println(fury.deserialize(bytes));\n    }\n    {\n      ThreadSafeFury fury = new ThreadLocalFury(classLoader -> {\n        Fury f = Fury.builder().withLanguage(Language.JAVA)\n          .withClassLoader(classLoader).build();\n        f.register(SomeClass.class);\n        return f;\n      });\n      byte[] bytes = fury.serialize(object);\n      System.out.println(fury.deserialize(bytes));\n    }\n  }\n}\n```\n\n### Cross-language object graph serialization\n\n**Java**\n\n```java\nimport org.apache.fury.*;\nimport org.apache.fury.config.*;\nimport java.util.*;\n\npublic class ReferenceExample {\n  public static class SomeClass {\n    SomeClass f1;\n    Map<String, String> f2;\n    Map<String, String> f3;\n  }\n\n  public static Object createObject() {\n    SomeClass obj = new SomeClass();\n    obj.f1 = obj;\n    obj.f2 = ofHashMap(\"k1\", \"v1\", \"k2\", \"v2\");\n    obj.f3 = obj.f2;\n    return obj;\n  }\n\n  // mvn exec:java -Dexec.mainClass=\"org.apache.fury.examples.ReferenceExample\"\n  public static void main(String[] args) {\n    Fury fury = Fury.builder().withLanguage(Language.XLANG)\n      .withRefTracking(true).build();\n    fury.register(SomeClass.class, \"example.SomeClass\");\n    byte[] bytes = fury.serialize(createObject());\n    // bytes can be data serialized by other languages.\n    System.out.println(fury.deserialize(bytes));\n  }\n}\n```\n\n**Python**\n\n```python\nfrom typing import Dict\nimport pyfury\n\nclass SomeClass:\n    f1: \"SomeClass\"\n    f2: Dict[str, str]\n    f3: Dict[str, str]\n\nfury = pyfury.Fury(ref_tracking=True)\nfury.register_type(SomeClass, typename=\"example.SomeClass\")\nobj = SomeClass()\nobj.f2 = {\"k1\": \"v1\", \"k2\": \"v2\"}\nobj.f1, obj.f3 = obj, obj.f2\ndata = fury.serialize(obj)\n# bytes can be data serialized by other languages.\nprint(fury.deserialize(data))\n```\n\n**Golang**\n\n```go\npackage main\n\nimport furygo \"github.com/apache/fury/go/fury\"\nimport \"fmt\"\n\nfunc main() {\n type SomeClass struct {\n  F1 *SomeClass\n  F2 map[string]string\n  F3 map[string]string\n }\n fury := furygo.NewFury(true)\n if err := fury.RegisterTagType(\"example.SomeClass\", SomeClass{}); err != nil {\n  panic(err)\n }\n value := &SomeClass{F2: map[string]string{\"k1\": \"v1\", \"k2\": \"v2\"}}\n value.F3 = value.F2\n value.F1 = value\n bytes, err := fury.Marshal(value)\n if err != nil {\n }\n var newValue interface{}\n // bytes can be data serialized by other languages.\n if err := fury.Unmarshal(bytes, &newValue); err != nil {\n  panic(err)\n }\n fmt.Println(newValue)\n}\n```\n\n### Row format\n\n#### Java\n\n```java\npublic class Bar {\n  String f1;\n  List<Long> f2;\n}\n\npublic class Foo {\n  int f1;\n  List<Integer> f2;\n  Map<String, Integer> f3;\n  List<Bar> f4;\n}\n\nRowEncoder<Foo> encoder = Encoders.bean(Foo.class);\nFoo foo = new Foo();\nfoo.f1 = 10;\nfoo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());\nfoo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -> \"k\"+i, i->i));\nList<Bar> bars = new ArrayList<>(1000000);\nfor (int i = 0; i < 1000000; i++) {\n  Bar bar = new Bar();\n  bar.f1 = \"s\"+i;\n  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());\n  bars.add(bar);\n}\nfoo.f4 = bars;\n// Can be zero-copy read by python\nBinaryRow binaryRow = encoder.toRow(foo);\n// can be data from python\nFoo newFoo = encoder.fromRow(binaryRow);\n// zero-copy read List<Integer> f2\nBinaryArray binaryArray2 = binaryRow.getArray(1);\n// zero-copy read List<Bar> f4\nBinaryArray binaryArray4 = binaryRow.getArray(3);\n// zero-copy read 11th element of `readList<Bar> f4`\nBinaryRow barStruct = binaryArray4.getStruct(10);\n\n// zero-copy read 6th of f2 of 11th element of `readList<Bar> f4`\nbarStruct.getArray(1).getInt64(5);\nRowEncoder<Bar> barEncoder = Encoders.bean(Bar.class);\n// deserialize part of data.\nBar newBar = barEncoder.fromRow(barStruct);\nBar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));\n```\n\n#### Python\n\n```python\n@dataclass\nclass Bar:\n    f1: str\n    f2: List[pa.int64]\n@dataclass\nclass Foo:\n    f1: pa.int32\n    f2: List[pa.int32]\n    f3: Dict[str, pa.int32]\n    f4: List[Bar]\n\nencoder = pyfury.encoder(Foo)\nfoo = Foo(f1=10, f2=list(range(1000_000)),\n         f3={f\"k{i}\": i for i in range(1000_000)},\n         f4=[Bar(f1=f\"s{i}\", f2=list(range(10))) for i in range(1000_000)])\nbinary: bytes = encoder.to_row(foo).to_bytes()\nfoo_row = pyfury.RowData(encoder.schema, binary)\nprint(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5])\n```\n\n## Compatibility\n\n### Schema Compatibility\n\nFury java object graph serialization supports class schema forward/backward compatibility. The serialization peer and deserialization peer can add/delete fields independently.\n\nWe plan to add the schema compatibility support of cross-language serialization after [meta compression](https://github.com/apache/fury/issues/203) is finished.\n\n### Binary Compatibility\n\nWe are still improving our protocols, thus binary compatibility is not guaranteed between Fury major releases for now.\nHowever, it is guaranteed between minor versions. Please\n`versioning` your data by Fury major version if you will upgrade Fury in the future, see [how to upgrade fury](https://github.com/apache/fury/blob/main/docs/guide/java_serialization_guide.md#upgrade-fury) for further details.\n\nBinary compatibility will be guaranteed when Fury 1.0 is released.\n\n## Security\n\nStatic serialization is relatively secure. But dynamic serialization such as Fury java/python native serialization supports deserializing unregistered types, which provides more dynamics and flexibility, but also introduce security risks.\n\nFor example, the deserialization may invoke `init` constructor or `equals`/`hashCode` method, if the method body contains malicious code, the system will be at risk.\n\nFury provides a class registration option that is enabled by default for such protocols, allowing only deserialization of trusted registered types or built-in types.\n **Do not disable class registration unless you can ensure your environment is secure**.\n\nIf this option is disabled, you are responsible for serialization security. You can configure `org.apache.fury.resolver.ClassChecker` by\n`ClassResolver#setClassChecker` to control which classes are allowed for serialization.\n\nTo report security vulnerabilities found in Fury, please follow the [ASF vulnerability reporting process](https://apache.org/security/#reporting-a-vulnerability).\n\n## How to Build\n\nPlease read the [BUILD](docs/guide/DEVELOPMENT.md) guide for instructions on how to build.\n\n## How to Contribute\n\nPlease read the [CONTRIBUTING](CONTRIBUTING.md) guide for instructions on how to contribute.\n\n## License\n\nLicensed under the [Apache License, Version 2.0](LICENSE)\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.2548828125,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nworkspace(name = \"fury\")\n\nload(\"//bazel:fury_deps_setup.bzl\", \"setup_deps\")\nsetup_deps()\n\nload(\"@bazel_skylib//:workspace.bzl\", \"bazel_skylib_workspace\")\nload(\"@com_github_grpc_grpc//bazel:grpc_deps.bzl\", \"grpc_deps\")\nload(\"@com_github_grpc_grpc//third_party/py:python_configure.bzl\", \"python_configure\")\nload(\"//bazel/arrow:pyarrow_configure.bzl\", \"pyarrow_configure\")\nbazel_skylib_workspace()\npython_configure(name=\"local_config_python\")\npyarrow_configure(name=\"local_config_pyarrow\")\ngrpc_deps()\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenserc.toml",
          "type": "blob",
          "size": 3.296875,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nheaderPath = \"Apache-2.0-ASF.txt\"\n\nexcludes = [\n    # Skipped\n    \"*.txt\",\n    \"go.sum\",\n\n    # Generated\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/state/generated/**\",\n\n    # Derived\n    \"ci/format.sh\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/Identity2IdMap.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/data/Data.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/data/Image.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/data/Media.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/data/MediaContent.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/data/Sample.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/state/BufferType.java\",\n    \"java/benchmark/src/main/java/org/apache/fury/benchmark/state/KryoState.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/codegen/Code.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/FuryObjectMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/IdentityMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/IdentityObjectIntMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/LongMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/LongLongMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/collection/ObjectIntMap.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/io/ClassLoaderObjectInputStream.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/memory/MemoryBuffer.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/reflect/TypeParameter.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/reflect/TypeRef.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/reflect/Types.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/type/Generics.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/util/MurmurHash3.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/util/concurrency/DirectExecutorService.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/memory/Platform.java\",\n    \"java/fury-core/src/main/java/org/apache/fury/util/Preconditions.java\",\n    \"java/fury-core/src/test/java/org/apache/fury/type/GenericsTest.java\",\n    \"java/fury-format/src/main/java/org/apache/fury/format/vectorized/ArrowWriter.java\",\n    \"javascript/packages/hps/src/v8-fast-api-calls.h\",\n    \"javascript/packages/fury/lib/murmurHash3.ts\",\n    \"cpp/fury/thirdparty/MurmurHash3.*\",\n]\n\n[mapping.DOUBLESLASH_STYLE]\nextensions = ['go']\nfilenames = ['go.mod']\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "platform-buffer.jpg",
          "type": "blob",
          "size": 36.24609375,
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "scala",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}