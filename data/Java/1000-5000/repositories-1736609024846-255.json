{
  "metadata": {
    "timestamp": 1736609024846,
    "page": 255,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VaughnVernon/IDDD_Samples",
      "stars": 3817,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.044921875,
          "content": ".gradle\nbuild\n.classpath\n.project\n*.iml\n.idea\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.6015625,
          "content": "//   Copyright 2012,2013 Vaughn Vernon\n//\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\n//   you may not use this file except in compliance with the License.\n//   You may obtain a copy of the License at\n//\n//       http://www.apache.org/licenses/LICENSE-2.0\n//\n//   Unless required by applicable law or agreed to in writing, software\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//   See the License for the specific language governing permissions and\n//   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3125,
          "content": "These are the sample Bounded Contexts from the book\n\"Implementing Domain-Driven Design\" by Vaughn Vernon:\n\nhttp://vaughnvernon.co/?page_id=168\n\nThe models and surrounding architectural mechanisms\nmay be in various states of flux as the are refined\nover time. Some tests may be incomplete. The code is\nnot meant to be a reflection of a production quality\nwork, but rather as a set of reference projects for\nthe book.\n\nPoints of Interest\n==================\n\nThe iddd_agilepm project uses a key-value store as\nits underlying persistence mechanism, and in particular\nis LevelDB. Actually the LevelDB in use is a pure Java\nimplementation: https://github.com/dain/leveldb\n\nCurrently iddd_agilepm doesn't employ a container of\nany kind (such as Spring).\n\nThe iddd_collaboration project uses Event Sourcing and\nCQRS. It purposely avoids the use of an object-relational\nmapper, showing that a simple JDBC-based query engine\nand DTO matter can be used instead. This technique does\nhave its limitations, but it is meant to be small and fast\nand require no configuration or annotations. It is not\nmeant to be perfect.\n\nIt may be helpful to make one additional mental note on\nthe iddd_collaboration CQRS implementation. To keep the\nexample simple it persists the Event Sourced write model\nand the CQRS read model in one thread. Since two different\nstores are used--LevelDB for the Event Journal and MySQL\nfor the read model--there may be very slight opportunities\nfor inconsistency, but not much. The idea was to keep the\ntwo models as close to consistent as possible without\nusing the same data storage (and transaction) for both.\nTwo different storage mechanisms were used purposely to\ndemonstrate that they can be separate.\n\nThe iddd_identityaccess project uses object-relational\nmapping (Hibernate), but so as not to leave it \"boring\" it\nprovides a RESTful client interface and even publishes\nDomain-Event notifications via REST (logs) and RabbitMQ.\n\nFinally the iddd_common project provides a number of reusable\ncomponents. This is not an attempt to be a framework, but\njust leverages reuse to the degree that code copying doesn't\nliter each project. This is not a recommendation, but it\ndid work well and save a considerable amount of work while\nproducing the samples.\n\nUsage\n=====\n\nRequires\n--------\n\n- Java 7 (8+ does not work)\n- MySQL Client + Server\n- RabbitMQ\n\nSetup (with Docker)\n-------------------\n\nTo make it easy to run the tests and it requirements,\nthe `startContainers.sh` script is provided. Which\nwill start a:\n- MySQL Server container\n- RabbitMQ Server container\n- RabbitMQ Management container\n\nIf the `mysql` command is available, which is the mysql client,\nalso the required SQL scripts will be imported into the MySQL\nServer.\n\nIf you use the `startContainers.sh` script, you don't need\nMySQL Server and RabbitMQ installed locally. Instead,\nDocker needs to be installed as the script will start\nMySQL and RabbitMQ in Docker containers.\n\nBuild\n------\n\nYou can build the project by running:\n\n```\n./gradlew build\n```\n\nThis automatically downloads Gradle and builds the project, including running the tests.\n\nThe Gradle build using Maven repositories was provided by\nMichael Andrews (Github michaelajr and Twitter @MichaelAJr).\nThanks much!\n\n\nI hope you benefit from the samples.\n\nVaughn Vernon\nAuthor: Implementing Domain-Driven Design\nTwitter: @VaughnVernon\nhttp://vaughnvernon.co/\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.908203125,
          "content": "\nallprojects {\n\tapply plugin: 'java'\n}\n\nsubprojects {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n\n        // JBoss Repo\n        maven { url 'https://repository.jboss.org/nexus/content/groups/public-jboss/' }\n    }\n\n    dependencies { \n        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.5.8'\n        testCompile group: 'junit', name: 'junit', version: '4.8.2'\n    }\n}\n\nproject(':iddd_common') {\n\n    dependencies {\n\t\tcompile group: 'commons-logging', name: 'commons-logging', version: '1.1.2', transitive: true\n        compile group: 'com.google.code.gson', name: 'gson', version: '2.1'\n        compile group: 'com.rabbitmq', name: 'amqp-client', version: '3.0.4'\n        compile group: 'org.hibernate', name: 'hibernate', version: '3.2.7.ga'\n        compile group: 'org.springframework', name: 'spring', version: '2.5.6'\n        compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.5'\n        compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.7.2'\n        compile group: 'javassist', name: 'javassist', version: '3.8.0.GA'\n        compile group: 'javax.transaction', name: 'jta', version: '1.1'\n\n        testCompile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2' \n        testCompile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6' \n        testCompile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4' \n    }\n}\n\nproject(':iddd_identityaccess') {\n    dependencies {\n        compile project(':iddd_common')\n        compile group: 'org.springframework', name: 'spring', version: '2.5.6'\n        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0-rc1'\n        compile group: 'org.jboss.resteasy', name: 'resteasy-cache-core', version: '2.0.1.GA'\n\n        testCompile files(this.project(':iddd_common').sourceSets.test.output)\n        testCompile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'\n        testCompile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6' \n        testCompile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4' \n        testCompile group: 'javax.servlet', name: 'servlet-api', version: '2.5' \n        testCompile group: 'org.jboss.resteasy', name: 'tjws', version: '2.0.1.GA' \n    }\n}\n\nproject(':iddd_collaboration') {\n    dependencies {\n        compile project(':iddd_common')\n        compile group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '2.0.1.GA'\n\n        testCompile files(this.project(':iddd_common').sourceSets.test.output)\n        testCompile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'\n        testCompile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6' \n        testCompile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4' \n    }\n}\n\nproject(':iddd_agilepm') {\n    dependencies {\n        compile project(':iddd_common')\n\n        testCompile files(this.project(':iddd_common').sourceSets.test.output)\n    }\n}"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "iddd_agilepm",
          "type": "tree",
          "content": null
        },
        {
          "name": "iddd_collaboration",
          "type": "tree",
          "content": null
        },
        {
          "name": "iddd_common",
          "type": "tree",
          "content": null
        },
        {
          "name": "iddd_identityaccess",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.080078125,
          "content": "include 'iddd_common', 'iddd_identityaccess', 'iddd_collaboration', 'iddd_agilepm'"
        },
        {
          "name": "startContainers.sh",
          "type": "blob",
          "size": 3.423828125,
          "content": "#!/bin/bash\n\nhost=\"0.0.0.0\"\n\nmysqlUser=\"root\"\nmysqlPassword=\"root\"\nmysqlContainerName=\"iddd-mysql\"\nmysqlPort=\"3306\"\n\nrabbitmqNodeName=\"$(hostname)\"\nrabbitmqContainerName=\"iddd-rabbitmq\"\nrabbitmqManagementHttpPort=\"8080\"\n\ncontainers[0]=\"${mysqlContainerName}\"\ncontainers[1]=\"${rabbitmqContainerName}\"\n\nfunction start() {\n    echo \"Starting MySQL Server container...\"\n    docker rm -f \"${mysqlContainerName}\"\n    docker run --name \"${mysqlContainerName}\" -p \"${mysqlPort}\":3306 -e MYSQL_ROOT_PASSWORD=\"${mysqlPassword}\" -d mysql\n\n    echo \"Waiting for MySQL Server to be up and running...\"\n    waitForContainer \"${mysqlContainerName}\" \"mysqld: ready for connections.\"\n\n    local testSqlFiles=\"$(find $(pwd) -name *.sql | grep -i \"test\")\"\n    local sqlFiles=\"$(find $(pwd) -name *.sql | grep -vi \"test\")\"\n    if which mysql > /dev/null; then\n        for sql in ${testSqlFiles}; do\n            echo \"Importing [${sql}]\"\n            $(mysql --host=\"${host}\"  --port=3306 --protocol=TCP --user=\"${mysqlUser}\" --password=\"${mysqlPassword}\" < ${sql})\n        done\n        for sql in ${sqlFiles}; do\n            echo \"Importing [${sql}]\"\n            $(mysql --host=\"${host}\" --port=3306 --protocol=TCP --user=\"${mysqlUser}\" --password=\"${mysqlPassword}\" < ${sql})\n        done\n    else\n        echo -e\n        echo \"!! mysql command not found\"\n        echo \"!! You need to import the following SQL files into MySQL Server, yourself:\"\n        for sql in ${testSqlFiles}; do\n            echo ${sql}\n        done\n        for sql in ${sqlFiles}; do\n            echo ${sql}\n        done\n        echo -e\n        echo \"You can find MySQL Server on [localhost] port [${mysqlPort}]\"\n        echo -e\n        read -rsp \"Press any key to continue...\"\n        echo -e\n    fi\n\n    echo \"Starting RabbitMQ container...\"\n    docker rm -f \"${rabbitmqContainerName}\"\n    docker run --name \"${rabbitmqContainerName}\" -p 5672:5672 -p \"${rabbitmqManagementHttpPort}\":15672 -e RABBITMQ_NODENAME=\"${rabbitmqNodeName}\" -d rabbitmq:3-management\n    echo \"Waiting for RabbitMQ to be up and running...\"\n    waitForContainer \"${rabbitmqContainerName}\" \"Server startup complete;\"\n\n    echo -e\n    echo \"RabbitMQ Management available at [http://localhost:${rabbitmqManagementHttpPort}]\"\n    echo \"(Login with user/pass of [guest/guest])\"\n}\n\nfunction status() {\n    docker ps -a | head -1\n    for name in ${containers[@]}; do\n        docker ps -a | grep \"${name}\"\n    done\n}\n\nfunction stop() {\n    for name in ${containers[@]}; do\n        echo \"Stopping container [${name}]...\"\n        docker stop \"${name}\" > /dev/null 2>&1\n    done\n}\n\nfunction usage() {\n    echo \"Usage: $(basename $0) <command> [<args>]\"\n    echo -e\n    echo \"Available commands:\"\n    echo \"  start          Start external dependencies for this project in Docker containers\"\n    echo \"                 (incl. MySQL Server and RabbitMQ)\"\n    echo \"  stop           Stop the Docker containers\"\n    echo -e\n}\n\nfunction requires() {\n    local command=$1\n    which ${command} > /dev/null 2>&1 || { echo \"!! This script requires [${command}] to be installed\" && exit 1; }\n}\n\nfunction waitForContainer() {\n    local containerName=\"$1\"\n    local logMsg=\"$2\"\n    until docker logs ${containerName} 2>&1 | grep \"${logMsg}\" > /dev/null; do\n        sleep 1s\n    done\n}\n\n\nrequires 'docker'\n\ncommand=$1; shift\ncase \"${command}\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    status)\n        status\n        ;;\n    *)\n        usage\n        exit 1\n       ;;\nesac\n"
        }
      ]
    }
  ]
}