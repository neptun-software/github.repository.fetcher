{
  "metadata": {
    "timestamp": 1736708630225,
    "page": 963,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nelenkov/android-backup-extractor",
      "stars": 2263,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".classpath",
          "type": "blob",
          "size": 0.3505859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classpath>\n\t<classpathentry kind=\"src\" path=\"src\"/>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7\"/>\n\t<classpathentry kind=\"lib\" path=\"lib/bcprov-jdk15on-148.jar\"/>\n\t<classpathentry kind=\"output\" path=\"bin\"/>\n</classpath>\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\nbuild/\n.gradle/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# IntelliJ folder\n.idea/\n\n# Maven\ntarget/\n\n# Ant\nabe.jar\n"
        },
        {
          "name": ".jitpack.yml",
          "type": "blob",
          "size": 0.0185546875,
          "content": "jdk:\n  - openjdk11\n"
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 0.390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<projectDescription>\r\n\t<name>android-backup-extractor</name>\r\n\t<comment></comment>\r\n\t<projects>\r\n\t</projects>\r\n\t<buildSpec>\r\n\t\t<buildCommand>\r\n\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\r\n\t\t\t<arguments>\r\n\t\t\t</arguments>\r\n\t\t</buildCommand>\r\n\t</buildSpec>\r\n\t<natures>\r\n\t\t<nature>org.eclipse.jdt.core.javanature</nature>\r\n\t</natures>\r\n</projectDescription>\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5693359375,
          "content": "Copyright 2012 Nikolay Elenkov\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.755859375,
          "content": "Android backup extractor\n========================\n\nUtility to extract and repack Android backups created with ```adb backup``` (ICS+). \nLargely based on ```BackupManagerService.java``` from AOSP. \n\n# Building\n\nRequires Java 11. Handling encrypted backups requires the JCE unlimited strength \njurisdiction policy (not needed if using current Java 9 release).\n\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html\n\nUse one of the tools listed below to build or see [Releases](#releases) for pre-built binaries (runnable jar files).\n\n## With Eclipse: \n\nDownload the latest version of Bouncy Castle Provider jar \n(```bcprov-jdk15on-*.jar```) from [here](http://www.bouncycastle.org/latest_releases.html):\n\nDrop the latest Bouncy Castle jar in ```lib/```, import in Eclipse and adjust \nbuild path if necessary. Use the ```abe``` script to start the utility. \n\n## With Maven (requires at least JDK11):\n\nTo create a self-executable all-in-one jar:\n```mvn clean package``` and then:\n\n```java -jar target/abe.jar pack|unpack|pack-kk ...```\n\n## With Ant:\n\nUse the bundled Ant script to create an all-in-one jar and run with: \n(you still need to put the Bouncy Castle jar in lib/; modify the \n```bcprov.jar``` property accordingly)\n\n```java -jar abe.jar pack|unpack|pack-kk ...```\n\n(Thanks to Jan Peter Stotz for contributing the build.xml file)\n\n## With Gradle:\n\nUse gradle to create an all-in-one jar:\n```./gradlew``` and then:\n\n```java -jar build/libs/abe-all.jar pack|unpack|pack-kk ...```\n\n# Usage\n\n## Syntax: \n* unpack:       ```abe unpack  <backup.ab> <backup.tar> [password]```\n* pack:         ```abe pack    <backup.tar> <backup.ab> [password]```\n* pack for 4.4: ```abe pack-kk <backup.tar> <backup.ab> [password]```\n  (creates version 2 backups, compatible with Android 4.4.3)\n\nIf the filename is `-`, then data is read from standard input or written to\nstandard output.\n\nIf the password is not given on the command line, then the environment variable\n`ABE_PASSWD` is tried. If you don't specify a password the backup archive won't\nbe encrypted but only compressed. \n\n## Packing tar archives\n\n- Android is **very** particular about the order of files in the tar archive. The format is [described here](https://android.googlesource.com/platform/frameworks/base/+/4a627c71ff53a4fca1f961f4b1dcc0461df18a06).\n- Incompatible tar archives lead to errors or even system crashes.\n- Apps with the `allowBackup` flag set to `false` are [not backed up nor restored](https://android.googlesource.com/platform/frameworks/base/+/a858cb075d0c87e2965d401656ff2d5bc16406da).\n  - *(you can try restoring manually via `adb push` and `adb shell`)*\n- Errors are only printed to logcat, look out for `BackupManagerService`.\n\nThe safest way to pack a tar archive is to get the list of files from the original backup.tar file:\n```shell\ntar tf backup.tar | grep -F \"com.package.name\" > package.list\n```\nAnd then use that list to build the tar file. In the extracted backup directory:\n```shell\ntar cf restore.tar -T package.list\n```\nYou can now pack `restore.tar` and try `adb restore restore.ab`\n\n# Releases\n\n[Releases](https://github.com/nelenkov/android-backup-extractor/releases/latest) are built with Travis CI from the master branch and include a runnable fat jar.\n\nUse the binaries at your own risk. No warranty or support provided.\n\nPlease report only bugs in backup extractor itself, I can't answer questions regrading unpacking/repacking backups or tar files.\n(See [Usage](#usage) for a mini usage guide.)\n\n[![Build Status](https://travis-ci.com/nelenkov/android-backup-extractor.svg?branch=master)](https://travis-ci.com/nelenkov/android-backup-extractor)\n\n# Notes\n\nMore details about the backup format and the tool implementation in the [associated blog post](https://nelenkov.blogspot.de/2012/06/unpacking-android-backups.html).\n\n"
        },
        {
          "name": "abe",
          "type": "blob",
          "size": 2.25390625,
          "content": "#!/bin/sh\n\ncommand -v cygpath >/dev/null 2>&1\non_cygwin=$(( $? == 0 ? 1 : 0 ))\n\n# below, we use non-environment variables to avoid implicitly updating the\n# environment with UNIX versions of paths.\n\nif [ \"$on_cygwin\" = 1 ] && [ \"$JAVA\" ]; then\n\tjava=$(cygpath --unix \"$JAVA\")\nelse\n\tjava=$JAVA\nfi\n\nif [ \"$on_cygwin\" = 1 ] && [ \"$JAVA_HOME\" ]; then\n\tjava_home=$(cygpath --unix \"$JAVA_HOME\")\nelse\n\tjava_home=$JAVA_HOME\nfi\n\n# honor JAVA environment variable if set; if not, use JAVA_HOME (if it's set);\n# if not, fall back to the old hardcoded default.\n: \"${java:=${java_home:-/usr}/bin/java}\"\n\n# Follow symlinks, if we have readlink available; this will allow a symlink to\n# the real wrapper script's location to be installed somewhere on the PATH (ie.\n# /usr/local/bin/abe, or $HOME/bin/abe).\n#\n# This technique has flaws. See http://mywiki.wooledge.org/BashFAQ/028 to\n# understand its limitations before reusing it in your own scripts.\nexecutable=$0\nif command -v readlink >/dev/null 2>&1; then\n\twhile target=$(readlink \"$executable\"); do\n\t\t[ \"$executable\" = \"$target\" ] && break # avoid endless loops\n\t\texecutable=$target\n\tdone\nfi\nbasedir=$(dirname \"$executable\")\n\ncp=$basedir:$basedir/bin:$basedir/abe.jar\nfor f in $basedir/lib/*.jar; do\n\t# note that this technique only works as long as nullglob is disabled\n\t# (which it is, by default, on all POSIX shells); we're relying on the\n\t# *.jar glob expression returning literally '*.jar' as a result when no\n\t# matches exist on-disk.\n\t[ -e \"$f\" ] || {\n\t\techo \"WARNING: No jars found in lib directory. Please download a BouncyCastle implementation per the README (looking for: $f)\" >&2\n\t\tcontinue\n\t}\n\tcp=$cp:$f\ndone\n\n[ -e \"$basedir/abe.jar\" ] || {\n\techo \"ERROR: Could not find abe.jar in $basedir; did you run ant to compile?\" >&2\n\texit 1\n}\n\n[ -e \"$java\" ] || {\n\techo \"ERROR: Could not find java executable at $java\" >&2\n\texit 1\n}\n\nif [ \"$on_cygwin\" = 1 ]; then\n\t# convert classpath from UNIX to Windows paths\n\tunix_cp=$cp\n\tIFS=:\n\tset -f\n\tcp=\n\tfor element in $unix_cp; do\n\t\t[ \"$element\" ] || continue\n\t\tcp=\"$cp;$(cygpath --windows \"$element\")\"\n\tdone\nfi\n\n# Using \"exec\" here replaces the script's process table entry with that of the\n# JVM, avoiding the need to keep the script in memory while the executable\n# runs.\nexec \"$java\" -cp \"$cp\" org.nick.abe.Main \"$@\"\n"
        },
        {
          "name": "assembly.xml",
          "type": "blob",
          "size": 0.693359375,
          "content": "<assembly xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd\">\n    <id>exec</id>\n    <formats>\n        <format>jar</format>\n    </formats>\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <dependencySets>\n        <dependencySet>\n            <outputDirectory>/</outputDirectory>\n            <useProjectArtifact>true</useProjectArtifact>\n            <unpack>true</unpack>\n            <scope>runtime</scope>\n        </dependencySet>\n    </dependencySets>\n</assembly>\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.7919921875,
          "content": "plugins {\n    id \"com.github.johnrengelman.shadow\" version \"8.1.1\"\n    id 'java'\n    id 'application'\n    id 'maven-publish'\n}\n\napplication.mainClass.set 'org.nick.abe.Main'\n\ngroup = 'org.nick.abe'\n\nvar targetJavaVersion = JavaVersion.VERSION_1_8\njava {\n    sourceCompatibility = targetCompatibility = targetJavaVersion\n}\n\ncompileJava {\n    options.release.set targetJavaVersion.majorVersion.toInteger()\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.bouncycastle:bcprov-jdk18on:1.79'\n}\n\nsourceSets {\n    main {\n        java {\n            srcDir 'src'\n        }\n    }\n}\n\nshadowJar {\n    minimize()\n    archiveBaseName.set 'abe'\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            from(components.java)\n        }\n    }\n}\n\ndefaultTasks 'shadowJar'\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 1.1904296875,
          "content": "<project default=\"all\">\r\n    <!-- author: Jan Peter Stotz -->\r\n\r\n    <property name=\"jar.filename\" value=\"abe.jar\"/>\r\n    <property name=\"main.class\" value=\"org.nick.abe.Main\"/>\r\n    <property name=\"bcprov.jar\" value=\"lib/bcprov-jdk18on-1.77.jar\"/>\r\n\r\n    <target name=\"all\" depends=\"build,jar\"/>\r\n\r\n    <target name=\"build\">\r\n        <delete includeEmptyDirs=\"true\" failonerror=\"false\">\r\n            <fileset dir=\"build\" includes=\"**/*\"/>\r\n        </delete>\r\n        <mkdir dir=\"build\"/>\r\n        <javac srcdir=\"src\" destdir=\"build\" classpath=\"${bcprov.jar}\" debug=\"true\" includeantruntime=\"false\"\r\n               encoding=\"UTF-8\" source=\"8\" target=\"8\" release=\"8\"/>\r\n    </target>\r\n\r\n    <target name=\"jar\" depends=\"build\" description=\"Create a standalone-jar (no external dependency)\">\r\n        <delete file=\"${jar.filename}\"/>\r\n        <jar destfile=\"${jar.filename}\" filesetmanifest=\"mergewithoutmain\">\r\n            <manifest>\r\n                <attribute name=\"Main-Class\" value=\"${main.class}\"/>\r\n            </manifest>\r\n            <fileset dir=\"build\"/>\r\n            <!-- Include BouncyCastle JAR -->\r\n            <zipfileset src=\"${bcprov.jar}\" includes=\"org/**\"/>\r\n        </jar>\r\n    </target>\r\n</project>\r\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.0244140625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.nick.abe</groupId>\n  <artifactId>android-backup-extractor</artifactId>\n  <version>1.0.0-SNAPSHOT</version>\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <javac.source>8</javac.source>\n    <javac.target>8</javac.target>\n    <javac.release>8</javac.release>\n  </properties>\n  <scm>\n    <developerConnection>scm:git:ssh:git@github.com:nelenkov/android-backup-extractor.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n  <dependencies>\n    <dependency>\n      <groupId>org.bouncycastle</groupId>\n      <artifactId>bcprov-jdk18on</artifactId>\n      <version>1.79</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>${javac.source}</source>\n          <target>${javac.target}</target>\n          <release>${javac.release}</release>\n          <encoding>UTF-8</encoding>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <configuration>\n          <appendAssemblyId>false</appendAssemblyId>\n          <finalName>abe</finalName>\n          <archive>\n            <manifest>\n              <mainClass>org.nick.abe.Main</mainClass>\n            </manifest>\n          </archive>\n          <descriptors>\n            <descriptor>assembly.xml</descriptor>\n          </descriptors>\n        </configuration>\n        <executions>\n          <execution>\n            <id>make-my-jar-with-dependencies</id>\n            <phase>package</phase>\n            <goals>\n              <goal>single</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}