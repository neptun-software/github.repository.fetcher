{
  "metadata": {
    "timestamp": 1736609156739,
    "page": 458,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "real-logic/simple-binary-encoding",
      "stars": 3160,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05078125,
          "content": "* text=auto\n*.bat text eol=crlf\n*.cmd text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9169921875,
          "content": "# editors\n*~\n*.swp\n.project\n.classpath\n.factorypath\n.apt_generated\n.settings\n*.sublime-project\n*.sublime-workspace\n\n# intellij\n.idea\n*.iml\n*.ipr\n*.iws\n\n# Build tools\nbuild-local.properties\ndeps\n*/bin\nbuild\n.gradle\ntarget\nGTAGS\nGRTAGS\nGPATH\nprop\nout\n.vs/\n.vscode\n\n# cmake\ncmake-build-debug\ncodecs\n.cmake\nCMakeFiles\nthirdparty\n\n# cpp build linux\ncppbuild/CMakeCache.txt\ncppbuild/CMakeFiles/\ncppbuild/CTestTestfile.cmake\ncppbuild/Makefile\ncppbuild/Testing/\ncppbuild/aeron-common/\ncppbuild/aeron-samples/\ncppbuild/binaries/\ncppbuild/cmake_install.cmake\n\n# cpp build windows\ncppbuild/*.opensdf\ncppbuild/*.sdf\ncppbuild/*.sln\ncppbuild/*.suo\ncppbuild/*.vcxproj\ncppbuild/*.filters\ncppbuild/*.lastbuildstate\ncppbuild/*.tlog\ncppbuild/*.log\ncppbuild/*.cache\ncppbuild/Debug\ncppbuild/Release\ncppbuild/Win32\n\n# golang\ngocode/pkg\ngocode/*/pkg\ngocode/struct/src/*/*.go\n!gocode/struct/src/*/*_test.go\ngocode/struct/src/*/*/*.go\n!gocode/struct/src/*/*/*_test.go\ngocode/struct/src/example-schema/example-schema*\ngocode/struct/src/example-socket-clientserver/example-socket-clientserver\ngocode/flyweight/src/*/*.go\n!gocode/flyweight/src/*/*_test.go\ngocode/flyweight/src/*/*/*.go\n!gocode/flyweight/src/*/*/*_test.go\ngocode/flyweight/src/otf/code-generation-schema.sbeir\n\n# csharp\ncsharp/*/bin\ncsharp/*/obj\ncsharp/.vs\ncsharp/TestResults\ncsharp/sbe-generated/baseline\ncsharp/sbe-generated/baseline-bigendian\ncsharp/sbe-generated/extension\ncsharp/sbe-generated/issue435\ncsharp/sbe-generated/issue483\ncsharp/sbe-generated/issue560\ncsharp/sbe-generated/issue661\ncsharp/sbe-generated/since-deprecated\ncsharp/sbe-generated/order_check\ncsharp/sbe-generated/mktdata/*.cs\ncsharp/sbe-generated/uk_co_real_logic_sbe_benchmarks_fix\ncsharp/sbe-generated/test_message_schema\ncsharp/sbe-tests/*.sbe\ncsharp/nuget/\ncsharp/csharp.sln.DotSettings.user\n\n# rust\nrust/target\nrust/Cargo.lock\n\n# Mac\n.DS_Store\n/sbe-tool/src/main/golang/uk_co_real_logic_sbe_ir_generated/\n\n# JQwik\n*.jqwik-database\n\n/generated/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.3701171875,
          "content": "#\n# Copyright 2013-2025 Real Logic Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\ncmake_minimum_required(VERSION 3.6.1 FATAL_ERROR)\ncmake_policy(VERSION 3.6.1)\n\nfile(STRINGS version.txt SBE_VERSION_TXT LIMIT_COUNT 1 REGEX \"^[0-9]+(\\\\.[0-9]+)+\")\nstring(REGEX REPLACE \"^([0-9]+(\\\\.[0-9]+)+).*$\" \"\\\\1\" SBE_VERSION_NUMERIC \"${SBE_VERSION_TXT}\")\n\nproject(\"sbe\" VERSION \"${SBE_VERSION_NUMERIC}\")\n\ninclude(ExternalProject)\ninclude(CheckLibraryExists)\n\nif (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n    set(STANDALONE_BUILD TRUE)\nendif ()\n\noption(SBE_TESTS \"Enable tests\" ${STANDALONE_BUILD})\noption(SBE_BUILD_SAMPLES \"Enable building the sample projects\" ${STANDALONE_BUILD})\noption(SBE_BUILD_BENCHMARKS \"Enable building the benchmarks\" ${STANDALONE_BUILD})\noption(C_WARNINGS_AS_ERRORS \"Enable warnings as errors for C\" OFF)\noption(CXX_WARNINGS_AS_ERRORS \"Enable warnings as errors for C++\" OFF)\n\nunset(STANDALONE_BUILD)\n\nif (SBE_TESTS)\n    enable_testing()\nendif ()\n\n# default built type is Release\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nendif (NOT CMAKE_BUILD_TYPE)\n\nif (NOT DEFINED CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 11)\nendif ()\n\nif (NOT DEFINED CMAKE_CXX_EXTENSIONS)\n    set(CMAKE_CXX_EXTENSIONS OFF)\nendif ()\n\nif (NOT DEFINED CMAKE_C_STANDARD)\n    set(CMAKE_C_STANDARD 11)\nendif ()\n\nif (NOT DEFINED CMAKE_C_EXTENSIONS)\n    set(CMAKE_C_EXTENSIONS OFF)\nendif ()\n\nif (SBE_TESTS)\n    set(SBE_THIRDPARTY_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/thirdparty\")\n\n    ExternalProject_Add(\n        gtest\n        URL ${CMAKE_CURRENT_SOURCE_DIR}/cppbuild/googletest-release-1.12.1.zip\n        URL_MD5 2648d4138129812611cf6b6b4b497a3b\n        PREFIX \"${SBE_THIRDPARTY_BINARY_DIR}/gtest\"\n        CMAKE_ARGS -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n        BUILD_BYPRODUCTS \"${SBE_THIRDPARTY_BINARY_DIR}/gtest/src/gtest-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX};${SBE_THIRDPARTY_BINARY_DIR}/gtest/src/gtest-build/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock_main${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n        INSTALL_COMMAND \"\"\n        LOG_CONFIGURE ON\n        LOG_BUILD ON\n    )\n\n    ExternalProject_Get_Property(gtest source_dir)\n    set(GTEST_SOURCE_DIR ${source_dir})\n    ExternalProject_Get_Property(gtest binary_dir)\n    set(GTEST_BINARY_DIR ${binary_dir})\n\n    if (MSVC AND CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        set(GTEST_POSTFIX \"d\")\n    else ()\n        set(GTEST_POSTFIX \"\")\n    endif ()\n\n    set(GTEST_LIBS\n        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}\n        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}\n        ${GTEST_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest_main${CMAKE_STATIC_LIBRARY_SUFFIX}\n    )\nendif ()\n\nfind_package(Threads)\n\nif (UNIX)\n    add_compile_options(-Wall -Wpedantic -Wextra -Wno-unused-parameter)\n\n    if (C_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:C>:-Werror>)\n    endif (C_WARNINGS_AS_ERRORS)\n\n    if (CXX_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Werror>)\n    endif (CXX_WARNINGS_AS_ERRORS)\nendif ()\n\nif (APPLE)\n    # -Wall doesn't enable everything we want to see\n    add_compile_options(-Wsign-compare)\n    add_definitions(-DDarwin)\n    add_compile_options(-Wno-deprecated-register)\nelseif (MSVC)\n    add_definitions(-DWIN32)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions(-DNOMINMAX)\n\n    if (${MSVC_VERSION} GREATER_EQUAL 1915)\n        # Acknowledge that we understand MSVC resolved a byte alignment issue in this compiler\n        add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)\n    endif ()\n\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MTd /Od /Zi /MP\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /MP\")\n\n    if (C_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:C>:/WX>)\n    endif (C_WARNINGS_AS_ERRORS)\n\n    if (CXX_WARNINGS_AS_ERRORS)\n        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/WX>)\n    endif (CXX_WARNINGS_AS_ERRORS)\nelse ()\n    add_definitions(-D_GNU_SOURCE)\nendif ()\n\nset(LIBPREFIX \"${CMAKE_STATIC_LIBRARY_PREFIX}\")\nset(LIBSUFFIX \"${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/binaries\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\n\nset(SBE_JAR \"${CMAKE_CURRENT_SOURCE_DIR}/sbe-all/build/libs/sbe-all-${SBE_VERSION_TXT}.jar\")\n\nfile(GLOB_RECURSE SBE_SOURCES\n    \"${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/main/java/*.java\"\n)\n\nadd_custom_command(OUTPUT ${SBE_JAR}\n    COMMAND ./gradlew assemble -x javadoc --console=plain\n    DEPENDS ${SBE_SOURCES}\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMENT \"Generating SBE jar\"\n)\n\nadd_custom_target(sbe-jar\n    DEPENDS ${SBE_JAR}\n)\n\nset(CODEC_TARGET_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\nset(C_CODEC_TARGET_DIR \"${CODEC_TARGET_DIR}/c\")\nset(CXX_CODEC_TARGET_DIR \"${CODEC_TARGET_DIR}/cpp\")\nset(CODEC_SCHEMA_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/resources\")\nset(CODEC_PERF_SCHEMA_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/sbe-benchmarks/src/main/resources\")\nset(CODEC_EXAMPLES_SCHEMA_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/sbe-samples/src/main/resources\")\n\nadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/main/cpp)\n\nif (SBE_TESTS)\n    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/c)\n    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-tool/src/test/cpp)\nendif ()\n\nif (SBE_BUILD_SAMPLES)\n    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-samples/src/main/cpp)\nendif ()\n\nif (SBE_BUILD_BENCHMARKS)\n    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sbe-benchmarks/src/main/cpp)\nendif ()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.19921875,
          "content": "# Contributing to SBE\n\nIf you would like to contribute code you can do so through GitHub by sending a pull request or raising an issue with an attached patch.\n\nWhen submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.\n\n## License\n\nBy contributing your code, you agree to license your contribution under the terms of the APLv2:\n \nhttps://github.com/real-logic/simple-binary-encoding/blob/master/LICENSE\n\nAll files are made available under the Apache 2.0 license.\n\nIf you are adding a new file it should have the following header:\n\n```\n/*\n * Copyright 2013-2025 Real Logic Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n ```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.033203125,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3046875,
          "content": "Simple Binary Encoding (SBE)\n============================\n\n[![Javadocs](https://www.javadoc.io/badge/uk.co.real-logic/sbe-tool.svg)](https://www.javadoc.io/doc/uk.co.real-logic/sbe-tool)\n[![GitHub](https://img.shields.io/github/license/real-logic/simple-binary-encoding.svg)](https://github.com/real-logic/simple-binary-encoding/blob/master/LICENSE)\n\n[![Actions Status](https://github.com/real-logic/simple-binary-encoding/workflows/Continuous%20Integration/badge.svg)](https://github.com/real-logic/simple-binary-encoding/actions)\n[![CodeQL Status](https://github.com/real-logic/simple-binary-encoding/workflows/CodeQL/badge.svg)](https://github.com/real-logic/simple-binary-encoding/actions)\n\n[SBE](https://github.com/FIXTradingCommunity/fix-simple-binary-encoding) is an OSI layer 6 presentation for \nencoding and decoding binary application messages for low-latency financial applications. This repository contains \nthe reference implementations in Java, C++, Golang, C#, and Rust.\n\nMore details on the design and usage of SBE can be found on the [Wiki](https://github.com/real-logic/simple-binary-encoding/wiki).\n\nAn XSD for SBE specs can be found\n[here](https://github.com/real-logic/simple-binary-encoding/blob/master/sbe-tool/src/main/resources/fpl/sbe.xsd). Please address questions about the specification to the [SBE FIX community](https://github.com/FIXTradingCommunity/fix-simple-binary-encoding).\n\nFor the latest version information and changes see the [Change Log](https://github.com/real-logic/simple-binary-encoding/wiki/Change-Log) with **downloads** at [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Csbe). \n\nThe Java and C++ SBE implementations work very efficiently with the [Aeron](https://github.com/real-logic/aeron)\nmessaging system for low-latency and high-throughput communications. The Java SBE implementation has a dependency on\n[Agrona](https://github.com/real-logic/agrona) for its buffer implementations. Commercial support is available from\n[sales@real-logic.co.uk](mailto:sales@real-logic.co.uk?subject=SBE).\n\nBinaries\n--------\nBinaries and dependency information for Maven, Ivy, Gradle, and others can be found at \n[http://search.maven.org](http://search.maven.org/#search%7Cga%7C1%7Csbe).\n\nExample for Maven:\n\n```xml\n<dependency>\n    <groupId>uk.co.real-logic</groupId>\n    <artifactId>sbe-tool</artifactId>\n    <version>${sbe.tool.version}</version>\n</dependency>\n```\n\nBuild\n-----\n\nBuild the project with [Gradle](http://gradle.org/) using this [build.gradle](https://github.com/real-logic/simple-binary-encoding/blob/master/build.gradle) file.\n\nFull clean build:\n\n    $ ./gradlew\n\nRun the Java examples\n\n    $ ./gradlew runJavaExamples\n\nDistribution\n------------\nJars for the executable, source, and javadoc for the various modules can be found in the following directories:\n\n    sbe-benchmarks/build/libs\n    sbe-samples/build/libs\n    sbe-tool/build/libs\n    sbe-all/build/libs\n\nAn example to execute a Jar from command line using the 'all' jar which includes the Agrona dependency:\n\n    java --add-opens java.base/jdk.internal.misc=ALL-UNNAMED -Dsbe.generate.ir=true -Dsbe.target.language=Cpp -Dsbe.target.namespace=sbe -Dsbe.output.dir=include/gen -Dsbe.errorLog=yes -jar sbe-all/build/libs/sbe-all-${SBE_TOOL_VERSION}.jar my-sbe-messages.xml\n\nC++ Build using CMake\n---------------------\nNOTE: Linux, Mac OS, and Windows only for the moment. See\n[FAQ](https://github.com/real-logic/simple-binary-encoding/wiki/Frequently-Asked-Questions).\nWindows builds have been tested with Visual Studio Express 12.\n\nFor convenience, the `cppbuild` script does a full clean, build, and test of all targets as a Release build.\n\n    $ ./cppbuild/cppbuild\n\nIf you are comfortable using CMake, then a full clean, build, and test looks like:\n\n    $ mkdir -p cppbuild/Debug\n    $ cd cppbuild/Debug\n    $ cmake ../..\n    $ cmake --build . --clean-first\n    $ ctest\n\n__Note__: The C++ build includes the C generator. Currently, the C generator is a work in progress.\n\nGolang Build\n------------\n\nFirst build using Gradle to generate the SBE jar and then use it to generate the golang code for testing.\n\n    $ ./gradlew\n    $ ./gradlew generateGolangCodecs\n\nFor convenience on Linux, a gnu Makefile is provided that runs some tests and contains some examples.\n\n    $ cd gocode\n    # make # test, examples, bench\n\nGo supports both generating Go structs with encode / decode methods, and flyweights like the other languages. Structs are generated by default for compatibility. Set `sbe.go.generate.generate.flyweights=true` to generate flyweights.\n\nUsers of golang generated code should see the [user\ndocumentation](https://github.com/real-logic/simple-binary-encoding/wiki/Golang-User-Guide).\n\nDevelopers wishing to enhance the golang generator should see the [developer\ndocumentation](https://github.com/real-logic/simple-binary-encoding/blob/master/gocode/README.md)\n\nC# Build\n--------\nUsers of CSharp generated code should see the [user documentation](https://github.com/real-logic/simple-binary-encoding/wiki/Csharp-User-Guide).\n\nDevelopers wishing to enhance the CSharp generator should see the [developer documentation](https://github.com/real-logic/simple-binary-encoding/blob/master/csharp/README.md)\n\nRust Build\n------------\nThe SBE Rust generator will produce 100% safe rust crates (no `unsafe` code will be generated).  Generated crates do\nnot have any dependencies on any libraries (including no SBE libraries). If you don't yet have Rust installed \nsee [Rust: Getting Started](https://www.rust-lang.org/learn/get-started)\n\nGenerate the Rust codecs\n\n    $ ./gradlew generateRustCodecs\n\nRun the Rust test from Gradle\n\n    $ ./gradlew runRustTests\n\nOr run test directly with `Cargo`\n\n    $ cd rust\n    $ cargo test\n\nLicense (See LICENSE file for full license)\n-------------------------------------------\nCopyright 2013-2025 Real Logic Limited.  \nCopyright 2017 MarketFactory Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 41.8037109375,
          "content": "/*\n * Copyright 2013-2025 Real Logic Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport java.nio.file.Files\nimport java.nio.file.StandardOpenOption\nimport java.security.MessageDigest\n\nplugins {\n    id 'java-library'\n    id 'jvm-test-suite'\n    alias(libs.plugins.shadow).apply(false)\n    alias(libs.plugins.versions)\n}\n\ndefaultTasks 'clean', 'build'\n\nstatic def getBuildJavaVersion() {\n    def buildJavaVersion = System.getenv('BUILD_JAVA_VERSION') ?: JavaVersion.current().getMajorVersion()\n    if (buildJavaVersion.indexOf('.') > 0) {\n        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('.'))\n    }\n    if (buildJavaVersion.indexOf('-') > 0) {\n        buildJavaVersion = buildJavaVersion.substring(0, buildJavaVersion.indexOf('-'))\n    }\n    Integer.parseInt(buildJavaVersion)\n}\nint buildJavaVersion = getBuildJavaVersion()\n\ndef toolchainLauncher = javaToolchains.launcherFor {\n    languageVersion = JavaLanguageVersion.of(buildJavaVersion)\n}\n\ndef sbeGroup = 'uk.co.real-logic'\ndef sbeVersion = file('version.txt').text.trim()\n\next {\n    isReleaseVersion = !sbeVersion.endsWith('-SNAPSHOT')\n    releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'\n    snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'\n\n    if (!project.hasProperty('ossrhUsername')) {\n        ossrhUsername = ''\n    }\n\n    if (!project.hasProperty('ossrhPassword')) {\n        ossrhPassword = ''\n    }\n\n    if (!project.hasProperty('signingKey')) {\n        signingKey = null\n    }\n\n    if (!project.hasProperty('signingPassword')) {\n        signingPassword = null\n    }\n}\n\ndef projectPom = {\n    name = 'sbe'\n    description = 'FIX/SBE - OSI layer 6 presentation for encoding and decoding application messages' +\n        ' in binary format for low-latency applications.'\n    url = 'https://github.com/real-logic/simple-binary-encoding'\n\n    scm {\n        connection = 'scm:git:github.com/real-logic/simple-binary-encoding.git'\n        developerConnection = 'scm:git:github.com/real-logic/simple-binary-encoding.git'\n        url = 'github.com/real-logic/simple-binary-encoding.git'\n    }\n\n    licenses {\n        license {\n            name = 'The Apache License, Version 2.0'\n            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'\n        }\n    }\n\n    developers {\n        developer {\n            id = 'tmontgomery'\n            name = 'Todd L. Montgomery'\n            email = 'tmont@nard.net'\n            url = 'https://github.com/tmontgomery'\n        }\n        developer {\n            id = 'mjpt777'\n            name = 'Martin Thompson'\n            email = 'mjpt777@gmail.com'\n            url = 'https://github.com/mjpt777'\n        }\n        developer {\n            id = 'odeheurles'\n            name = 'Olivier Deheurles'\n            email = 'olivier@weareadaptive.com'\n            url = 'https://github.com/odeheurles'\n        }\n        developer {\n            id = 'RichardWarburton'\n            name = 'Richard Warburton'\n            email = 'richard.warburton@gmail.com'\n            url = 'https://github.com/RichardWarburton'\n        }\n        developer {\n            id = 'BillSegall'\n            name = 'Bill Segall'\n            email = 'bill.segall@gmail.com'\n            url = 'https://github.com/BillSegall'\n        }\n        developer {\n            id = 'mikeb01'\n            name = 'Mike Barker'\n            email = 'mikeb01@gmail.com'\n            url = 'https://github.com/mikeb01'\n        }\n        developer {\n            id = 'vyazelenko'\n            name = 'Dmytro Vyazelenko'\n            email = 'vyazelenko@protonmail.com'\n            url = 'https://github.com/vyazelenko'\n        }\n    }\n}\n\nallprojects {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n    }\n\n    configurations.configureEach {\n        resolutionStrategy {\n            failOnVersionConflict()\n            // patching conflicting Checkstyle dependencies\n            force \"org.codehaus.plexus:plexus-utils:3.3.0\",\n                  \"org.apache.commons:commons-lang3:3.8.1\",\n                  \"org.apache.httpcomponents:httpcore:4.4.14\",\n                  \"commons-codec:commons-codec:1.15\"\n        }\n    }\n\n    tasks.withType(JavaExec).configureEach {\n        javaLauncher.set(toolchainLauncher)\n    }\n}\n\njar.enabled = false\n\nsubprojects {\n    apply plugin: 'java-library'\n    apply plugin: 'jvm-test-suite'\n    apply plugin: 'checkstyle'\n\n    group = sbeGroup\n    version = sbeVersion\n\n    java {\n        toolchain {\n            languageVersion = JavaLanguageVersion.of(buildJavaVersion)\n        }\n        sourceCompatibility = JavaVersion.VERSION_17\n    }\n\n    checkstyle.toolVersion = libs.versions.checkstyle.get()\n\n    tasks.withType(Sign).configureEach {\n        onlyIf {\n            isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)\n        }\n    }\n\n    tasks.withType(Jar).configureEach {\n        enabled = true\n        includeEmptyDirs = false\n    }\n\n    tasks.withType(JavaCompile).configureEach {\n        options.encoding = 'UTF-8'\n        options.deprecation = true\n        options.compilerArgs.addAll(['-Xlint:all', '-Werror']) // Enable all warnings and treat them as errors\n    }\n\n    javadoc {\n        failOnError false\n        title = '<h1>Simple Binary Encoding (SBE)</h1>'\n        options.bottom = '<i>Copyright &#169; 2013-2025 Real Logic Limited. All Rights Reserved.</i>'\n        options.encoding = 'UTF-8'\n        options.docEncoding = 'UTF-8'\n        options.charSet = 'UTF-8'\n        options.links(\"https://www.javadoc.io/doc/org.agrona/agrona/${libs.versions.agrona.get()}/\")\n        if (buildJavaVersion >= 23) { // early access JavaDoc location is different\n            options.links(\"https://download.java.net/java/early_access/jdk${buildJavaVersion}/docs/api/\")\n        }\n        else {\n            options.links(\"https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/\")\n        }\n        options.addBooleanOption('html5', true)\n    }\n\n    testing {\n        suites {\n            test {\n                useJUnitJupiter libs.versions.junit.get()\n\n                targets {\n                    all {\n                        testTask.configure {\n                            useJUnitPlatform()\n                            jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n\n                            testLogging {\n                                for (def level : LogLevel.values())\n                                {\n                                    def testLogging = get(level)\n                                    testLogging.exceptionFormat = 'full'\n                                    testLogging.events = [\"FAILED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"]\n                                }\n                            }\n\n                            javaLauncher.set(toolchainLauncher)\n\n                            systemProperty 'sbe.enable.ir.precedence.checks', 'true'\n                            systemProperty 'sbe.enable.test.precedence.checks', 'true'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\ndef validationXsdPath = project(':sbe-tool').projectDir.toString() + '/src/main/resources/fpl/sbe.xsd'\n\nproject(':sbe-tool') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n\n    dependencies {\n        api libs.agrona\n    }\n\n    def generatedDir = \"${layout.buildDirectory.get()}/generated-src\"\n    sourceSets {\n        generated {\n            java.srcDir generatedDir\n            compileClasspath += sourceSets.main.runtimeClasspath\n        }\n        test {\n            java.srcDir generatedDir\n            compileClasspath += sourceSets.main.runtimeClasspath\n        }\n    }\n\n    compileGeneratedJava {\n        dependsOn 'generateTestCodecs'\n        dependsOn 'generateTestDtos'\n        classpath += sourceSets.main.runtimeClasspath\n    }\n\n    compileTestJava.dependsOn compileGeneratedJava\n\n    testing {\n        suites {\n            test {\n                dependencies {\n                    implementation files(\"${layout.buildDirectory.get()}/classes/java/generated\")\n                    implementation libs.hamcrest\n                    implementation libs.mockito\n                    implementation platform(\"org.junit:junit-bom:${libs.versions.junit.get()}\")\n                    implementation \"org.junit.jupiter:junit-jupiter-params\"\n                }\n            }\n\n            propertyTest(JvmTestSuite) {\n                // We should be able to use _only_ the JQwik engine, but this issue is outstanding:\n                // https://github.com/gradle/gradle/issues/21299\n                useJUnitJupiter libs.versions.junit.get()\n\n                dependencies {\n                    implementation project()\n                    implementation(libs.jqwik) {\n                        // Exclude JUnit 5 dependencies that are already provided due to useJUnitJupiter\n                        exclude group: 'org.junit.platform', module: 'junit-platform-commons'\n                        exclude group: 'org.junit.platform', module: 'junit-platform-engine'\n                    }\n                    implementation libs.json\n                }\n\n\n                targets {\n                    all {\n                        testTask.configure {\n                            minHeapSize = '2g'\n                            maxHeapSize = '2g'\n\n                            jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n                            javaLauncher.set(toolchainLauncher)\n\n                            systemProperty 'sbe.dll', \"${rootProject.projectDir}/csharp/sbe-dll/bin/Release/netstandard2.0/SBE.dll\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    tasks.register('generateTestCodecs', JavaExec) {\n        dependsOn 'compileJava'\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties(\n                'sbe.output.dir': generatedDir,\n                'sbe.target.language': 'Java',\n                'sbe.validation.stop.on.error': 'true',\n                'sbe.validation.xsd': validationXsdPath,\n                'sbe.generate.precedence.checks': 'true',\n                'sbe.java.precedence.checks.property.name': 'sbe.enable.test.precedence.checks')\n        args = ['src/test/resources/json-printer-test-schema.xml',\n                'src/test/resources/composite-elements-schema.xml',\n                'src/test/resources/field-order-check-schema.xml']\n    }\n\n    tasks.register('generateTestDtos', JavaExec) {\n        dependsOn 'compileJava'\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties(\n                'sbe.output.dir': generatedDir,\n                'sbe.target.language': 'java',\n                'sbe.validation.stop.on.error': 'true',\n                'sbe.validation.xsd': validationXsdPath,\n                'sbe.generate.precedence.checks': 'true',\n                'sbe.java.precedence.checks.property.name': 'sbe.enable.test.precedence.checks',\n                'sbe.java.generate.dtos': 'true')\n        args = ['src/test/resources/example-extension-schema.xml']\n    }\n\n    jar {\n        manifest.attributes(\n            'Specification-Title': 'Simple Binary Encoding',\n            'Specification-Version': '1.0',\n            'Implementation-Title': 'SBE',\n            'Implementation-Version': sbeVersion,\n            'Implementation-Vendor': 'Real Logic Limited',\n            'Automatic-Module-Name': 'uk.co.real_logic.sbe.tool'\n        )\n    }\n\n    tasks.register('sourcesJar', Jar) {\n        archiveClassifier.set('sources')\n        from sourceSets.main.allSource\n        from('src/main/cpp/otf') {\n            into 'cpp'\n        }\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            sbe(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.sbe\n    }\n}\n\nproject(':sbe-all') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n    apply plugin: 'com.gradleup.shadow'\n\n    dependencies {\n        implementation project(':sbe-tool')\n    }\n\n    shadowJar {\n        archiveClassifier.set('')\n        manifest.attributes(\n            'Main-Class': 'uk.co.real_logic.sbe.SbeTool',\n            'Specification-Title': 'Simple Binary Encoding',\n            'Specification-Version': '1.0',\n            'Implementation-Title': 'SBE',\n            'Implementation-Version': sbeVersion,\n            'Implementation-Vendor': 'Real Logic Limited',\n            'Automatic-Module-Name': 'uk.co.real_logic.sbe.all'\n        )\n    }\n\n    jar.finalizedBy shadowJar\n\n    tasks.register('sourcesJar', Jar) {\n        archiveClassifier.set('sources')\n        from project(':sbe-tool').sourceSets.main.allSource\n        from(project(':sbe-tool').file('src/main/cpp/otf')) {\n            into 'cpp'\n        }\n    }\n\n    javadoc {\n        source += project(':sbe-tool').sourceSets.main.allJava\n    }\n\n    tasks.register('javadocJar', Jar) {\n        dependsOn javadoc\n        archiveClassifier.set('javadoc')\n        from javadoc.destinationDir\n    }\n\n    publishing {\n        publications {\n            sbeAll(MavenPublication) {\n                artifact shadowJar\n                artifact sourcesJar\n                artifact javadocJar\n                pom(projectPom)\n            }\n        }\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.sbeAll\n    }\n}\n\nproject(':sbe-samples') {\n    apply plugin: 'maven-publish'\n    apply plugin: 'signing'\n\n    dependencies {\n        api project(':sbe-tool')\n        implementation files(\"${layout.buildDirectory.get()}/classes/java/generated\")\n    }\n\n    def generatedDir = 'build/generated-src'\n    sourceSets {\n        generated {\n            java.srcDir generatedDir\n            compileClasspath += project(':sbe-tool').sourceSets.main.runtimeClasspath\n        }\n    }\n\n    compileJava.dependsOn 'compileGeneratedJava'\n    compileGeneratedJava.dependsOn 'generateCodecs'\n\n    tasks.register('generateCodecs', JavaExec) {\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties(\n                'sbe.output.dir': generatedDir,\n                'sbe.target.language': 'Java',\n                'sbe.java.generate.interfaces': 'true',\n                'sbe.validation.stop.on.error': 'true',\n                'sbe.decode.unknown.enum.values': 'true',\n                'sbe.xinclude.aware': 'true',\n                'sbe.validation.xsd': validationXsdPath)\n        args = ['src/main/resources/example-schema.xml', 'src/main/resources/example-extension-schema.xml']\n    }\n\n    tasks.register('runExampleUsingGeneratedStub', JavaExec) {\n        dependsOn 'compileJava'\n        mainClass.set('uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub')\n        classpath = sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties System.getProperties()\n    }\n\n    tasks.register('runExampleUsingGeneratedStubExtension', JavaExec) {\n        dependsOn 'compileJava'\n        mainClass.set('uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStubExtension')\n        classpath = sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties System.getProperties()\n    }\n\n    tasks.register('runOtfExample', JavaExec) {\n        dependsOn 'compileJava'\n        mainClass.set('uk.co.real_logic.sbe.examples.OtfExample')\n        classpath = sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        workingDir = 'src/main/resources'\n    }\n\n    tasks.register('runJavaExamples') {\n        dependsOn 'runExampleUsingGeneratedStub', 'runExampleUsingGeneratedStubExtension', 'runOtfExample'\n    }\n\n    jar {\n        from sourceSets.generated.output\n\n        manifest.attributes(\n            'Main-Class': 'uk.co.real_logic.sbe.SbeTool',\n            'Specification-Title': 'Simple Binary Encoding',\n            'Specification-Version': '1.0',\n            'Implementation-Title': 'SBE',\n            'Implementation-Version': sbeVersion,\n            'Implementation-Vendor': 'Real Logic Limited',\n            'Automatic-Module-Name': 'uk.co.real_logic.sbe.samples'\n        )\n    }\n\n    tasks.register('sourcesJar', Jar) {\n        archiveClassifier.set('sources')\n        from sourceSets.main.allSource\n        from sourceSets.generated.allSource\n    }\n\n    javadoc {\n        source += sourceSets.generated.allJava\n        source += project(':sbe-tool').sourceSets.main.allJava\n    }\n\n    java {\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    publishing {\n        publications {\n            sbeSamples(MavenPublication) {\n                from components.java\n                pom(projectPom)\n            }\n        }\n\n        repositories {\n            maven {\n                url(!isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl)\n                credentials {\n                    username = ossrhUsername\n                    password = ossrhPassword\n                }\n            }\n        }\n    }\n\n    signing {\n        if (signingKey != null) {\n            useInMemoryPgpKeys(signingKey, signingPassword)\n        }\n        sign publishing.publications.sbeSamples\n    }\n}\n\nproject(':sbe-benchmarks') {\n    apply plugin: 'com.gradleup.shadow'\n\n    dependencies {\n        implementation libs.jmh.core\n        annotationProcessor libs.jmh.generator.annprocess\n        implementation project(':sbe-tool')\n        implementation files(\"${layout.buildDirectory.get()}/classes/java/generated\")\n    }\n\n    sourceSets {\n        generated {\n            java.srcDir 'build/generated-src'\n            compileClasspath += project(':sbe-tool').sourceSets.main.runtimeClasspath\n        }\n    }\n\n    compileGeneratedJava.dependsOn 'generateCodecs'\n    compileJava.dependsOn 'compileGeneratedJava'\n\n    tasks.register('generateCodecs', JavaExec) {\n        mainClass.set('uk.co.real_logic.sbe.SbeTool')\n        classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n        jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n        systemProperties(\n                'sbe.output.dir': 'build/generated-src',\n                'sbe.target.language': 'Java',\n                'sbe.validation.stop.on.error': 'true',\n                'sbe.validation.xsd': validationXsdPath,\n                'sbe.java.encoding.buffer.type': 'org.agrona.concurrent.UnsafeBuffer',\n                'sbe.java.decoding.buffer.type': 'org.agrona.concurrent.UnsafeBuffer',\n                'sbe.generate.precedence.checks': 'false')\n        args = ['src/main/resources/car.xml', 'src/main/resources/fix-message-samples.xml']\n    }\n\n    shadowJar {\n        archiveFileName = 'sbe-benchmarks.jar'\n        archiveClassifier.set('benchmarks')\n        manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')\n    }\n\n    jar.finalizedBy shadowJar\n    javadoc.enabled = false\n}\n\ntasks.register('generateRustExamples', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'generated/rust',\n            'sbe.xinclude.aware': 'true',\n            'sbe.target.language': 'Rust',\n            'sbe.target.namespace': 'examples')\n    args = ['sbe-samples/src/main/resources/example-schema.xml',\n            'sbe-samples/src/main/resources/example-extension-schema.xml',\n            'sbe-benchmarks/src/main/resources/car.xml',\n            'sbe-benchmarks/src/main/resources/fix-message-samples.xml'\n    ]\n}\n\ntasks.register('generateRustTestCodecs', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'generated/rust',\n            'sbe.xinclude.aware': 'true',\n            'sbe.target.language': 'Rust',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-tool/src/test/resources/issue435.xml',\n            'sbe-tool/src/test/resources/issue895.xml',\n            'sbe-tool/src/test/resources/issue972.xml',\n            'sbe-tool/src/test/resources/issue984.xml',\n            'sbe-tool/src/test/resources/issue987.xml',\n            'sbe-tool/src/test/resources/issue1028.xml',\n            'sbe-tool/src/test/resources/fixed-sized-primitive-array-types.xml',\n            'sbe-tool/src/test/resources/example-bigendian-test-schema.xml',\n            'sbe-tool/src/test/resources/nested-composite-name.xml',\n    ]\n}\n\ntasks.register('generateCarExampleDataFile', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub')\n    classpath = project(':sbe-samples').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties('sbe.encoding.filename': 'rust/car_example_baseline_data.sbe')\n    args = []\n    standardOutput = new ByteArrayOutputStream()\n}\n\ntasks.register('generateCarExampleExtensionDataFile', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStubExtension')\n    classpath = project(':sbe-samples').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties('sbe.encoding.filename': 'rust/car_example_extension_data.sbe')\n    args = []\n    standardOutput = new ByteArrayOutputStream()\n}\n\ntasks.register('generateRustCodecs') {\n    description = 'Generate rust test codecs'\n    dependsOn 'generateRustExamples', 'generateRustTestCodecs',\n            'generateCarExampleDataFile', 'generateCarExampleExtensionDataFile'\n}\n\ntasks.register('runRustTests', Exec) {\n    workingDir = './rust'\n    executable = 'cargo'\n    args = ['test']\n    dependsOn 'generateRustCodecs'\n}\n\n/*\n * Golang codec targets used for testing, benchmarking etc. We have\n * multiple targets as:\n *  *) some of the test files generate warnings from the xsd so we don't\n *     validate those.\n *  *) Some of the test files need an additional output directory setting\n *     as they generate into the same directory and golang won't allow that.\n *  *) Some examples need to fiddle with WorkingDir to deal with XInclude\n */\ntasks.register('generateGolangCodecTestComposite', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/composite-elements-schema-rc4.xml']\n}\n\ntasks.register('generateGolangCodecTestBasic', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src/basic',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-types-schema.xml']\n}\n\ntasks.register('generateGolangCodecTestGroup', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src/group',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-group-schema.xml']\n}\n\ntasks.register('generateGolangCodecTestVarData', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src/vardata',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-variable-length-schema.xml']\n}\n\ntasks.register('generateGolangCodecsWithXIncludes', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src',\n            'sbe.target.language': 'golang',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-samples/src/main/resources/example-schema.xml',\n            'sbe-samples/src/main/resources/example-extension-schema.xml']\n}\n\ntasks.register('generateGolangCodecsWithXSD', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/struct/src',\n            'sbe.target.language': 'golang',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-tool/src/test/resources/group-with-data-schema.xml',\n            'sbe-tool/src/test/resources/FixBinary.xml',\n            'sbe-tool/src/test/resources/issue435.xml',\n            'sbe-tool/src/test/resources/issue472.xml',\n            'sbe-tool/src/test/resources/issue483.xml',\n            'sbe-tool/src/test/resources/issue488.xml',\n            'sbe-tool/src/test/resources/issue560.xml',\n            'sbe-tool/src/test/resources/issue661.xml',\n            'sbe-tool/src/test/resources/issue847.xml',\n            'sbe-tool/src/test/resources/issue848.xml',\n            'sbe-tool/src/test/resources/issue849.xml',\n            'sbe-tool/src/test/resources/since-deprecated-test-schema.xml',\n            'sbe-tool/src/test/resources/example-bigendian-test-schema.xml',\n            'gocode/resources/example-composite.xml',\n            'gocode/resources/group-with-data-extension-schema.xml',\n            'gocode/resources/simple.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecTestComposite', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/composite-elements-schema-rc4.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecTestBasic', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src/basic',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-types-schema.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecTestGroup', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src/group',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-group-schema.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecTestVarData', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src/vardata',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang')\n    args = ['sbe-tool/src/test/resources/basic-variable-length-schema.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecsWithXIncludes', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-samples/src/main/resources/example-schema.xml',\n            'sbe-samples/src/main/resources/example-extension-schema.xml']\n}\n\ntasks.register('generateGolangFlyweightCodecsWithXSD', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'gocode/flyweight/src',\n            'sbe.go.generate.generate.flyweights': 'true',\n            'sbe.target.language': 'golang',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-tool/src/test/resources/group-with-data-schema.xml',\n            'sbe-tool/src/test/resources/FixBinary.xml',\n            'sbe-tool/src/test/resources/issue435.xml',\n            'sbe-tool/src/test/resources/issue472.xml',\n            'sbe-tool/src/test/resources/issue483.xml',\n            'sbe-tool/src/test/resources/issue488.xml',\n            'sbe-tool/src/test/resources/issue560.xml',\n            'sbe-tool/src/test/resources/issue661.xml',\n            'sbe-tool/src/test/resources/issue847.xml',\n            'sbe-tool/src/test/resources/issue848.xml',\n            'sbe-tool/src/test/resources/issue849.xml',\n            'sbe-tool/src/test/resources/since-deprecated-test-schema.xml',\n            'sbe-tool/src/test/resources/example-bigendian-test-schema.xml',\n            'sbe-tool/src/test/resources/value-ref-with-lower-case-enum.xml',\n            'sbe-tool/src/test/resources/message-with-lower-case-bitset.xml',\n            'gocode/resources/example-composite.xml',\n            'gocode/resources/group-with-data-extension-schema.xml',\n            'gocode/resources/simple.xml']\n}\n\ntasks.register('generateGolangCodecs') {\n    description = 'Generate golang test codecs'\n    dependsOn 'generateGolangCodecTestVarData',\n            'generateGolangCodecTestGroup',\n            'generateGolangCodecTestBasic',\n            'generateGolangCodecTestComposite',\n            'generateGolangCodecsWithXIncludes',\n            'generateGolangCodecsWithXSD',\n            'generateGolangFlyweightCodecTestVarData',\n            'generateGolangFlyweightCodecTestGroup',\n            'generateGolangFlyweightCodecTestBasic',\n            'generateGolangFlyweightCodecTestComposite',\n            'generateGolangFlyweightCodecsWithXIncludes',\n            'generateGolangFlyweightCodecsWithXSD',\n\t        'generateIrCodecs',\n            ':sbe-all:jar'\n}\n\n/*\n * CSharp codec targets used for testing, benchmarking etc. We have\n * multiple targets as XInclude forces us to change working dir\n */\ntasks.register('generateCSharpCodecsWithXIncludes', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'csharp/sbe-generated',\n            'sbe.target.language': 'uk.co.real_logic.sbe.generation.csharp.CSharp',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-samples/src/main/resources/example-schema.xml',\n            'sbe-samples/src/main/resources/example-extension-schema.xml']\n}\n\ntasks.register('generateCSharpTestCodecs', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'csharp/sbe-generated',\n            'sbe.target.language': 'uk.co.real_logic.sbe.generation.csharp.CSharp',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath,\n            'sbe.generate.precedence.checks': 'true',\n            'sbe.types.package.override': 'true')\n    args = ['sbe-tool/src/test/resources/FixBinary.xml',\n            'sbe-tool/src/test/resources/issue435.xml',\n            'sbe-tool/src/test/resources/issue483.xml',\n            'sbe-tool/src/test/resources/issue560.xml',\n            'sbe-tool/src/test/resources/since-deprecated-test-schema.xml',\n            'sbe-tool/src/test/resources/example-bigendian-test-schema.xml',\n            'sbe-tool/src/test/resources/field-order-check-schema.xml',\n            'sbe-benchmarks/src/main/resources/fix-message-samples.xml']\n}\n\ntasks.register('generateCSharpTestDtos', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'csharp/sbe-generated',\n            'sbe.target.language': 'uk.co.real_logic.sbe.generation.csharp.CSharpDtos',\n            'sbe.xinclude.aware': 'true',\n            'sbe.validation.xsd': validationXsdPath,\n            'sbe.types.package.override': 'true')\n    args = ['sbe-samples/src/main/resources/example-extension-schema.xml']\n}\n\ntasks.register('generateCSharpExplicitPackageOverrideCodecs', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'csharp/sbe-generated',\n            'sbe.target.language': 'uk.co.real_logic.sbe.generation.csharp.CSharp',\n            'sbe.xinclude.aware': 'true',\n            'sbe.generate.precedence.checks': 'true',\n            'sbe.types.package.override': 'true')\n    args = ['sbe-tool/src/test/resources/explicit-package-test-schema.xml']\n}\n\ntasks.register('generateCSharpExplicitPackageOverrideDtos', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'csharp/sbe-generated',\n            'sbe.target.language': 'uk.co.real_logic.sbe.generation.csharp.CSharpDtos',\n            'sbe.xinclude.aware': 'true',\n            'sbe.types.package.override': 'true')\n    args = ['sbe-tool/src/test/resources/explicit-package-test-schema.xml']\n}\n\ntasks.register('generateCSharpCodecs') {\n    description = 'Generate csharp codecs'\n    dependsOn 'generateCSharpTestCodecs',\n            'generateCSharpTestDtos',\n            'generateCSharpCodecsWithXIncludes',\n            'generateCSharpExplicitPackageOverrideCodecs',\n            'generateCSharpExplicitPackageOverrideDtos'\n}\n\ntasks.register('generateJavaIrCodecs', JavaExec) {\n    dependsOn 'computeOriginalIrHash'\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'sbe-tool/src/main/java',\n            'sbe.target.language': 'Java',\n            'sbe.validation.xsd': validationXsdPath,\n            'sbe.generate.precedence.checks': 'true',\n            'sbe.precedence.checks.flag.name': 'SBE_ENABLE_IR_PRECEDENCE_CHECKS',\n            'sbe.java.precedence.checks.property.name': 'sbe.enable.ir.precedence.checks')\n    args = ['sbe-tool/src/main/resources/sbe-ir.xml']\n}\n\ntasks.register('generateCppIrCodecs', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'sbe-tool/src/main/cpp',\n            'sbe.target.language': 'cpp',\n            'sbe.validation.xsd': validationXsdPath,\n            'sbe.generate.precedence.checks': 'true',\n            'sbe.precedence.checks.flag.name': 'SBE_ENABLE_IR_PRECEDENCE_CHECKS')\n    args = ['sbe-tool/src/main/resources/sbe-ir.xml']\n}\n\ntasks.register('generateGolangIrCodecs', JavaExec) {\n    mainClass.set('uk.co.real_logic.sbe.SbeTool')\n    classpath = project(':sbe-tool').sourceSets.main.runtimeClasspath\n    jvmArgs('--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED')\n    systemProperties(\n            'sbe.output.dir': 'sbe-tool/src/main/golang',\n            'sbe.target.language': 'golang',\n\t    'sbe.go.generate.generate.flyweights': true,\n            'sbe.validation.xsd': validationXsdPath)\n    args = ['sbe-tool/src/main/resources/sbe-ir.xml']\n}\n\ntasks.register('generateIrCodecs') {\n    description = 'Generate Java, C++, and golang IR Codecs'\n    dependsOn 'generateJavaIrCodecs', 'generateCppIrCodecs', 'generateGolangIrCodecs'\n}\n\ntasks.register('runJavaBenchmarks', Exec) {\n    dependsOn 'sbe-benchmarks:jar'\n    commandLine toolchainLauncher.get().executablePath,\n            '-jar', 'sbe-benchmarks/build/libs/sbe-benchmarks.jar',\n            '-jvmArgs', '-Dagrona.disable.bounds.checks=true -XX:+UseParallelGC --add-opens java.base/jdk.internal.misc=ALL-UNNAMED',\n            '-w', '1s', '-r', '1s', '-wi', '3', '-i', '5', '-tu', 'ns', '-f', '5'\n}\n\ntasks.register('testReport', TestReport) {\n    destinationDirectory = file(\"${layout.buildDirectory.get()}/reports/allTests\")\n    // Include the results from the `test` task in all sub-projects\n    testResults.setFrom(subprojects*.test)\n}\n\nfinal codecsDir = project.file('sbe-tool/src/main/java/uk/co/real_logic/sbe/ir/generated')\nfinal outputDir = project.file('sbe-tool/build')\nfinal oldHashFile = new File(outputDir, 'old.sha256')\nfinal newHashFile = new File(outputDir, 'new.sha256')\n\ntasks.register('computeOriginalIrHash', ChecksumTask) {\n    inputDirectory = codecsDir\n    outputFile = oldHashFile\n}\n\ntasks.register('computeUpdatedIrHash', ChecksumTask) {\n    dependsOn 'generateJavaIrCodecs'\n    inputDirectory = codecsDir\n    outputFile = newHashFile\n}\n\ntasks.register('verifyJavaIrCodecsInSync') {\n    dependsOn 'computeUpdatedIrHash'\n    doLast {\n        final byte[] oldHash = Files.readAllBytes(oldHashFile.toPath())\n        final byte[] newHash = Files.readAllBytes(newHashFile.toPath())\n        if (!Arrays.equals(oldHash, newHash)) {\n            throw new GradleException(\"Java Ir codecs are out of sync! Please execute the `generateJavaIrCodecs` task and commit the changes.\")\n        }\n    }\n}\n\ntasks.named('build').configure {\n    dependsOn 'verifyJavaIrCodecsInSync'\n}\n\ndef isNonStable = { String version ->\n    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }\n    def regex = /^[0-9,.v-]+(-r)?$/\n    return !stableKeyword && !(version ==~ regex)\n}\n\ntasks.named('dependencyUpdates').configure {\n    // Reject all non stable versions\n    rejectVersionIf {\n        isNonStable(it.candidate.version)\n    }\n}\n\nwrapper {\n    gradleVersion = libs.versions.gradle.get()\n    distributionType = 'ALL'\n}\n\nclass ChecksumTask extends DefaultTask\n{\n    private static final MessageDigest SHA_256 = MessageDigest.getInstance(\"SHA-256\")\n    private static final byte CR = (byte)('\\r' as char)\n    private static final byte LF = (byte)('\\n' as char)\n\n    @InputDirectory\n    File inputDirectory\n\n    @OutputFile\n    File outputFile\n\n    @TaskAction\n    def checksum()\n    {\n        SHA_256.reset()\n\n        for (final File f : inputDirectory.listFiles())\n        {\n            final byte[] raw = Files.readAllBytes(f.toPath())\n            final byte[] normalized = normaliseEol(raw)\n            SHA_256.update(normalized)\n        }\n\n        final byte[] hash = SHA_256.digest()\n\n        Files.write(\n            outputFile.toPath(),\n            hash,\n            StandardOpenOption.CREATE,\n            StandardOpenOption.WRITE,\n            StandardOpenOption.TRUNCATE_EXISTING)\n    }\n\n    private static byte[] normaliseEol(final byte[] raw)\n    {\n        final byte[] result = new byte[raw.length]\n        int i = 0\n\n        for (int j = 0, size = raw.length; j < size; j++)\n        {\n            if (CR == raw[j] && (j == size - 1 || LF == raw[j + 1]))\n            {\n                continue\n            }\n\n            result[i++] = raw[j]\n        }\n\n        return raw.length == i ? result : Arrays.copyOf(result, i)\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cppbuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "gocode",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.46875,
          "content": "org.gradle.java.installations.auto-detect=false\norg.gradle.java.installations.auto-download=false\norg.gradle.java.installations.fromEnv=BUILD_JAVA_HOME\n\norg.gradle.logging.level=lifecycle\norg.gradle.warning.mode=all\n\n# HTTP timeouts for Gradle\nsystemProp.org.gradle.internal.http.connectionTimeout=300000\nsystemProp.org.gradle.internal.http.socketTimeout=300000\nsystemProp.org.gradle.internal.repository.max.retries=1\nsystemProp.org.gradle.internal.publish.checksums.insecure=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbe-benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbe-samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbe-tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.1259765625,
          "content": "include 'sbe-tool', 'sbe-samples', 'sbe-benchmarks', 'sbe-all'\nrootProject.name = 'sbe'\n\nproject(':sbe-all').projectDir.mkdirs()\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.015625,
          "content": "1.35.0-SNAPSHOT\n"
        }
      ]
    }
  ]
}