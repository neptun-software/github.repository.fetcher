{
  "metadata": {
    "timestamp": 1736708181641,
    "page": 650,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Nightonke/WoWoViewPager",
      "stars": 2748,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/\n.DS_Store\n/build\n/captures\n"
        },
        {
          "name": "Apk",
          "type": "tree",
          "content": null
        },
        {
          "name": "DEPRECATED-README-EN.md",
          "type": "blob",
          "size": 31.8525390625,
          "content": "# Deprecated! Check [Wiki](https://github.com/Nightonke/WoWoViewPager/wiki) for the New Document. \n\n[![WoWoViewPager](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/WoWoViewPager)\n[![BoomMenu](https://github.com/Nightonke/BoomMenu/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/BoomMenu)\n[![CoCoin](https://github.com/Nightonke/CoCoin/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/CoCoin)\n[![BlurLockView](https://github.com/Nightonke/BlurLockView/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/BlurLockView)\n[![LeeCo](https://github.com/Nightonke/LeeCo/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/LeeCo)\n[![GithubWidget](https://github.com/Nightonke/GithubWidget/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/GithubWidget)\n[![JellyToggleButton](https://github.com/Nightonke/JellyToggleButton/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/JellyToggleButton)\n[![FaceOffToggleButton](https://github.com/Nightonke/FaceOffToggleButton/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/FaceOffToggleButton)\n\n![WoWoViewPager App Intros Example](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/AppIntroExample.gif) \n![WoWoViewPager CV Example](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/CVExample.gif)\n\nOptimized for scrolling app intros or making your CV app. Free and open source.  \nWoWoViewPager combines animations and viewpager. \nWhen you are swiping viewpager, you are also controlling the frames of the animation. \nJust like rewinding time. \n\n# Guide\n\n[中文文档](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md)  \n[Gradle](https://github.com/Nightonke/WoWoViewPager#gradle)  \n[Note](https://github.com/Nightonke/WoWoViewPager#note)  \n[Demo](https://github.com/Nightonke/WoWoViewPager#demo)  \n[Versions](https://github.com/Nightonke/WoWoViewPager#versions)  \n[Todo](https://github.com/Nightonke/WoWoViewPager#todo)  \n[License](https://github.com/Nightonke/WoWoViewPager#license)  \n\n### Animations Usage\n#### Basic Animations  \n1. [Translation Animation](https://github.com/Nightonke/WoWoViewPager#translation-animation)\n2. [Scale Animation](https://github.com/Nightonke/WoWoViewPager#scale-animation)\n3. [Alpha Animation](https://github.com/Nightonke/WoWoViewPager#alpha-animation)\n4. [Rotation Animation](https://github.com/Nightonke/WoWoViewPager#rotation-animation)\n\n#### Font Size Animations\n1. [TextView Size Animation](https://github.com/Nightonke/WoWoViewPager#textview-size-animation)\n\n#### Color Animations\n1. [Background Color Animation](https://github.com/Nightonke/WoWoViewPager#background-color-animation)\n2. [TextView Color Animation](https://github.com/Nightonke/WoWoViewPager#textview-color-animation)\n3. [Shape Color Animation](https://github.com/Nightonke/WoWoViewPager#shape-color-animation)\n4. [State-List Color Animation](https://github.com/Nightonke/WoWoViewPager#state-list-color-animation)\n5. [Layer-List Color Animation](https://github.com/Nightonke/WoWoViewPager#layer-list-color-animation)\n\n#### Path Animations\n1. [Path Animation](https://github.com/Nightonke/WoWoViewPager#path-animation)\n\n#### Animation Types\n1. [Ease](https://github.com/Nightonke/WoWoViewPager#ease)\n2. [RGB or HSV](https://github.com/Nightonke/WoWoViewPager#rgb-or-hsv)\n\n# Gradle\nJust add the \"compile 'com.nightonke:wowoviewpager:1.0.2'\" in your build.gradle of your module.  \n```\ndependencies {\n    ...\n    compile 'com.nightonke:wowoviewpager:1.0.2'\n    ...\n}\n```\n\n# Note\n1. Thanks [SCViewPager](https://github.com/sacot41/SCViewPager) for giving me inspiration for codes.\n2. Thanks [JazzHands](https://github.com/IFTTT/JazzHands) for giving me inspiration for animations.\n3. Thanks [konmik](https://github.com/konmik) for providing a better HSV-animation for version 1.0.2.\n4. I'll add more animations for WoWoViewPager.\n\n# Demo\nThere is a demo for the current animations that WoWoViewPager supports. \nAnd there are App intros example and CV example(the above gifs) in the demo.  \n![WoWo V1.0.2](https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20V1.0.2.png)  \nOr by link:  \n[WoWo V1.0.2 in Github](https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20V1.0.2.apk?raw=true)  \n[WoWo V1.0.2 in Fir](http://fir.im/wowoviewpager)  \n![Demo Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/demo_animation.png) \n![Demo Ease Type](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/demo_ease_type.png)  \nYou can try every animation and ease type that WoWoViewPager supports.   \n\n# Animations Usage  \n\n### Basic Animations  \n\n#### Translation Animation  \nTranslation animation helps to move a view.  \n![Translation animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/TranslationAnimation.gif)  \n```java\n/**\n *\n * @param page                The translation animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The translation animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The translation animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromX               The starting horizontal position of this view \n                              relative to its left position, in pixels\n                              \n * @param fromY               The starting vertical position of this view \n                              relative to its top position, in pixels\n                              \n * @param targetX             The ending horizontal position of this view \n                              relative to its left position, in pixels\n                              \n * @param targetY             The ending vertical position of this view \n                              relative to its top position, in pixels\n                              \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTranslationAnimation(\n        0, \n        0f, \n        1f,\n        findViewById(R.id.test).getTranslationX(),\n        findViewById(R.id.test).getTranslationY(),\n        -screenW / 2 + WoWoUtil.dp2px(40, this),\n        -screenH / 2 + WoWoUtil.dp2px(40, this),\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoTranslationAnimation(\n        1, \n        0f, \n        1f,\n        -screenW / 2 + WoWoUtil.dp2px(40, this),\n        -screenH / 2 + WoWoUtil.dp2px(40, this),\n        screenW - WoWoUtil.dp2px(80, this),\n        screenH - WoWoUtil.dp2px(80, this),\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nAs you can see, the code above helps to make part of effect in the above gif(from page 1 to page 3, 2 translation animations totally). \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTranslationAnimationActivity.java).  \n\n#### Scale Animation  \nScale animation helps to scale a view.  \n![Scale animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/ScaleAnimation.gif)  \n```java\n/**\n *\n * @param page                The scale animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The scale animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The scale animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param targetScaleX        Target scale x = target x / original y\n \n * @param targetScaleY        Target scale y = target y / original y\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoScaleAnimation(\n        3, 0f, 0.5f,\n        2f,\n        1f,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoScaleAnimation(\n        3, 0.5f, 1f,\n        1f,\n        2f,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nYou can combine several animations to create a complex animation. For example, you can create 2 translation animations to make a polyline. Let's see the code above. From offset 0 to offset 0.5 starting from page 3, the width of the view doubles. And then, the height of the view doubles from offset 0.5 to offset 1. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoScaleAnimationActivity.java).  \n\n#### Alpha Animation  \nAlpha animation helps to change the opacity of the view, making fading or appearing effects.  \n![Alpha animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/AlphaAnimation.gif)  \n```java\n/**\n *\n * @param page                The alpha animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The alpha animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The alpha animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromAlpha           Original alpha\n     \n * @param targetAlpha         Target alpha\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoAlphaAnimation(\n        3, 0f, 0.5f,\n        1,\n        0.3f,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoAlphaAnimation(\n        3, 0.5f, 1f,\n        0.3f,\n        1f,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nThat's quite easy to understand. For more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoAlphaAnimationActivity.java).  \n\n#### Rotation Animation  \nRotation animation helps to rotate a view.  \n![Rotation animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/RotationAnimation.gif)  \n```java\n/**\n *\n * @param page                The alpha animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The alpha animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The alpha animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n *        _ _ _ _ _ _ _\n *      /|    x\n *     / |\n *    /  |y\n *   /   |\n *  /z   |\n * /     |\n *\n * @param pivotX              The x value of the pivot of this rotation animation\n \n * @param pivotY              The y value of the pivot of this rotation animation\n \n * @param targetX             The target degree on x axis\n \n * @param targetY             The target degree on y axis\n \n * @param targetZ             The target degree on z axis\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoRotationAnimation(\n        0, 0f, 1f,\n        pivotX, pivotY,\n        0,\n        0,\n        180,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nThe code above will cause the view upside down. \nNotice that in the above gif, the pivot of the 2 textview are different. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoRotationAnimationActivity.java).  \n\n### Font Size Animation  \n#### TextView Size Animation  \nTextView size animation helps to change the font size of textview.  \n```java\n/**\n *\n * @param page                The textview size animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The textview size animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The textview size animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromSize            Original text size in sp\n \n * @param targetSize          Target text size in sp\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTextViewSizeAnimation(\n        0, 0f, 1f,\n        50,\n        20,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoTextViewSizeAnimation(\n        1, 0f, 1f,\n        20,\n        60,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTextViewTextSizeAnimationActivity.java).  \n\n### Color Animations\n\n#### Background Color Animation\nBackground color animation helps to change the color of background.  \n![Background Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/BackgroundColorAnimation.gif)  \n```java\n/**\n *\n * @param page                The background color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The background color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The background color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoBackgroundColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nNotice that background color animation can only do its job when the view has the setBackgroundColor() method. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoBackgroundColorAnimationActivity.java).  \n[What is colorChangeType?](https://github.com/Nightonke/WoWoViewPager#rgb-&-hsv)  \n\n#### TextView Color Animation\nTextView color animation helps to change the font color of textview only.  \n```java\n/**\n *\n * @param page                The textview color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The textview color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The textview color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTextViewColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nNotice that textview color animation can only do its job when the view is textview. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTextViewColorAnimationActivity.java).  \n[What is colorChangeType?](https://github.com/Nightonke/WoWoViewPager#rgb-or-hsv)  \n\n#### Shape Color Animation\nShape color animation helps to change the shape-drawable background color of view.\n```java\n/**\n *\n * @param page                The shape-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The shape-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The shape-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoShapeColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nNotice that shape-drawable color animation can only do its job when the background of view is shape-drawable.  \nLike this:  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"oval\"  >\n    <solid android:color=\"@color/red\"/>\n</shape>\n```\nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoStateListColorAnimationActivity.java).  \n[What is colorChangeType?](https://github.com/Nightonke/WoWoViewPager#rgb-or-hsv)  \n\n#### State-List Color Animation\nState-List color animation helps to change the state-list-drawable background color of view.\n```java\n/**\n *\n * @param page                The state-list-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The state-list-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The state-list-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original colors, corresponding to the items in xml\n \n * @param targetColor         Target colors, corresponding to the items in xml\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoStateListColorAnimation(\n        0, 0f, 1f,\n        new int[]{Color.parseColor(\"#ff0000\"), Color.parseColor(\"#ff0000\"), Color.parseColor(\"#ff0000\")},\n        new int[]{Color.parseColor(\"#00ff00\"), Color.parseColor(\"#00ff00\"), Color.parseColor(\"#00ff00\")},\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nAnd the corresponding drawable is:  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <item android:state_pressed=\"true\" >\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"10dp\" />\n            <solid android:color=\"@color/red\" />\n        </shape>\n    </item>\n    <item android:state_focused=\"true\">\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"2dp\" />\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n    <item >\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"2dp\" />\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n</selector>\n```\nNotice that state-list-drawable color animation can only do its job when the background of view is state-list-drawable. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoStateListColorAnimationActivity.java).  \n[What is colorChangeType?](https://github.com/Nightonke/WoWoViewPager#rgb-or-hsv)  \n\n#### Layer-List Color Animation\nLayer-List color animation helps to change the layer-list-drawable background color of view.\n```java\n/**\n *\n * @param page                The layer-list-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The layer-list-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The layer-list-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original colors, corresponding to the items in xml\n \n * @param targetColor         Target colors, corresponding to the items in xml\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoLayerListColorAnimation(\n        0, 0f, 1f,\n        new int[]{\n          Color.parseColor(\"#000000\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#ff0000\")},\n        new int[]{\n          Color.parseColor(\"#0000ff\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#00ff00\")},\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\nAnd the corresponding drawable is:  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n        android:id=\"@+id/item1\"\n        android:top=\"0dp\" android:left=\"0dp\" android:bottom=\"0dp\" android:right=\"0dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"200dp\"\n                android:height=\"200dp\"/>\n            <solid android:color=\"@color/black\"/>\n        </shape>\n    </item>\n\n    <item\n        android:id=\"@+id/item2\"\n        android:top=\"20dp\" android:left=\"20dp\" android:bottom=\"100dp\" android:right=\"100dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n    \n    <item\n        android:id=\"@+id/item3\"\n        android:top=\"20dp\" android:left=\"100dp\" android:bottom=\"100dp\" android:right=\"20dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/green\"/>\n        </shape>\n    </item>\n\n    <item\n        android:id=\"@+id/item4\"\n        android:top=\"100dp\" android:left=\"20dp\" android:bottom=\"20dp\" android:right=\"100dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/green\"/>\n        </shape>\n    </item>\n    \n    <item\n        android:id=\"@+id/item5\"\n        android:top=\"100dp\" android:left=\"100dp\" android:bottom=\"20dp\" android:right=\"20dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n</layer-list>\n```\nNotice that layer-list-drawable color animation can only do its job when the background of view is layer-list-drawable. \nFor more codes about the animation, please check the [code](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoLayerListColorAnimationActivity.java).  \n[What is colorChangeType?](https://github.com/Nightonke/WoWoViewPager#rgb-or-hsv)  \n\n### Path Animation\n#### Path Animation\nPath animation helps to draw a path. \nAnd you can add an image to the head of the path like this:  \n![Ease](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/PathAnimation.gif)  \nAll you need to do is:  \n##### Add this in xml:  \n```xml\n<com.nightonke.wowoviewpager.WoWoPathView\n    android:id=\"@+id/pathview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/transparent\"\n    app:pathColor=\"@color/white\"\n    app:pathWidth=\"5\"\n    app:headImageId=\"@drawable/airplane\"\n    app:headImageWidth=\"240\"\n    />\n```\nYou can set the attributes in xml:  \n\nAttribute                   | Describe                  | Type             \n:------------------------ | :------------------------ | :------------------------ |\napp\\:pathColor | color of the path | resource of color\napp\\:pathWidth | width of the path | float\napp\\:headImageId | image of the head | resource of image\napp\\:headImageWidth| width of the head | float\napp\\:headImageHeight| height of the head | float \n\n##### Create a path:  \nTo create a path, you must know something about [Path](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html).  \nI suggest you use the [cubicTo](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html#cubicTo(float, float, float, float, float, float)) function to draw a curve and [lineTo](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html#lineTo(float, float)) function to draw a line.  \nYou can use these websites to get the 6 parameters of the cubicTo function:  \n[Canvature](https://canvature.appspot.com/)  \n[BezierTool](http://www.victoriakirst.com/beziertool/)  \nAs the above gif shows, there are only 3 curves to combine this path:\n```java\nWoWoPathView pathView = (WoWoPathView)findViewById(R.id.pathview);\nViewGroup.LayoutParams layoutParams = pathView.getLayoutParams();\nlayoutParams.height = screenH;\n// set the pathView a little wider,\n// then the airplane can hide\nlayoutParams.width = screenW + 200;\npathView.setLayoutParams(layoutParams);\n\n// use this to adjust the path\nint xoff = -300;\nint yoff = screenH - 616 - 300;\nfloat xScale = 1.5f;\nfloat yScale = 1;\n\nPath path = new Path();\npath.moveTo(xScale * (565 + xoff), screenH + yoff);\npath.cubicTo(\n        xScale * (509 + xoff), yScale * (385 + yoff),\n        xScale * (144 + xoff), yScale * (272 + yoff),\n        xScale * (394 + xoff), yScale * (144 + yoff));\npath.cubicTo(\n        xScale * (477 + xoff), yScale * (99 + yoff),\n        xScale * (596 + xoff), yScale * (91 + yoff),\n        xScale * (697 + xoff), yScale * (128 + yoff));\npath.cubicTo(\n        xScale * (850 + xoff), yScale * (189 + yoff),\n        xScale * (803 + xoff), yScale * (324 + yoff),\n        xScale * (66 + xoff), yScale * (307 + yoff));\n\n// set the path to pathView\npathView.setPath(path);\nViewAnimation animation = new ViewAnimation(pathView);\nanimation.addPageAnimaition(new WoWoPathAnimation(\n        0, 0f, 1f,\n        easeType,\n        useSameEaseTypeBack));\nwowo.addAnimation(animation);\n```\n\n# Ease\nTo make the animations more lifesome, you can choose different ease type to play the animations.  \n![Ease](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/ease.png)  \nOf course you can use linear function. \nYou can find all the ease enums [here](https://github.com/Nightonke/WoWoViewPager/blob/master/wowoviewpager/src/main/java/com/nightonke/wowoviewpager/Eases/EaseType.java).\n\n# RGB or HSV\nAll the color changing animation has 2 types, RGB and HSV(Hue [0 .. 360), Saturation [0...1] and Value [0...1] If hsv values are out of range, they are pinned). \nThe HSV changing type may looks more comfortable in nature. \nFor instance, to change red to green, in HSV, it will be red->yellow->green. \nIn RGB, it will be red->some color between red and green->green. \nBut usually the RGB changing type is the good one. \nBecause HSV sometimes looks strange(my opinion). \nYou can see the performance of these 2 types in the gif of [Background Color Animation](https://github.com/Nightonke/WoWoViewPager#background-color-animation).  \n\n# Versions\n### 1.0.1  \nFirst version for 11 animations.\n### 1.0.2  \nA better HSV-animation.\n\n# Todo\n1. Try to add more animations.\n2. Auto-Create path.  \n\n# License\n\n    Copyright 2016 Nightonke\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "DEPRECATED-README-ZH.md",
          "type": "blob",
          "size": 31.8359375,
          "content": "# 文档过时! 最新的请查看[Wiki](https://github.com/Nightonke/WoWoViewPager/wiki)\n\n[![WoWoViewPager](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/WoWoViewPager)\n[![BoomMenu](https://github.com/Nightonke/BoomMenu/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/BoomMenu)\n[![CoCoin](https://github.com/Nightonke/CoCoin/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/CoCoin)\n[![BlurLockView](https://github.com/Nightonke/BlurLockView/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/BlurLockView)\n[![LeeCo](https://github.com/Nightonke/LeeCo/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/LeeCo)\n[![GithubWidget](https://github.com/Nightonke/GithubWidget/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/GithubWidget)\n[![JellyToggleButton](https://github.com/Nightonke/JellyToggleButton/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/JellyToggleButton)\n[![FaceOffToggleButton](https://github.com/Nightonke/FaceOffToggleButton/blob/master/app/src/main/res/mipmap-hdpi/ic_launcher.png?raw=true)](https://github.com/Nightonke/FaceOffToggleButton)\n\n![WoWoViewPager App Intros Example](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/AppIntroExample.gif) \n![WoWoViewPager CV Example](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/CVExample.gif)\n\nWoWo可以优化你的App介绍/引导页面，制作你的App简历。  \nWoWo将动画和viewpager结合起来。  \n当你滑动viewpager的时候，你也在控制动画的当前帧。  \n就好像控制动画时间一般。  \n比如上面的两个Gif，是先向前滑动然后向后滑动。\n\n# 目录\n\n[English README](https://github.com/Nightonke/WoWoViewPager)  \n[Gradle](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#gradle)  \n[备注](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#备注)  \n[Demo](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#demo)  \n[版本](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#版本)  \n[Todo](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#todo)  \n[License](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#license)  \n\n### 动画用法\n#### 基本动画  \n1. [位移动画](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#位移动画)\n2. [缩放动画](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#缩放动画)\n3. [渐现、渐逝动画](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#渐现、渐逝动画)\n4. [旋转动画](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#旋转动画)\n\n#### 文字大小动画\n1. [TextView Size Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#textview-size-animation)\n\n#### 变色动画\n1. [Background Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#background-color-animation)\n2. [TextView Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#textView-color-animation)\n3. [Shape Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#shape-color-animation)\n4. [State-List Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#state-list-color-animation)\n5. [Layer-List Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#layer-list-color-animation)\n\n#### 路径动画\n1. [路径动画](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#路径动画)\n\n#### 动画效果\n1. [缓动函数](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#缓动函数)\n2. [RGB or HSV](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)\n\n# Gradle\n直接在你的module的build.gradle的dependencies中加入“compile 'com.nightonke:wowoviewpager:1.0.2'”这行即可。  \n```\ndependencies {\n    ...\n    compile 'com.nightonke:wowoviewpager:1.0.2'\n    ...\n}\n```\n\n# 备注\n1. 感谢 [SCViewPager](https://github.com/sacot41/SCViewPager) 带给我代码上的灵感。\n2. 感谢 [JazzHands](https://github.com/IFTTT/JazzHands) 带给我动画上的灵感。  \n3. 感谢 [konmik](https://github.com/konmik) 提供了一个更好的HSV动画变换。\n4. 更多的动画将会陆续加入。  \n\n# Demo\n你可以通过这个demo来查看所有WoWo支持的动画，并以不同的缓动效果和变色效果来查看动画效果。  \n你也可以在demo中找到App引导页例子和App简历例子。  \n![WoWo V1.0.2](https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20V1.0.2.png)  \n或者下载链接：  \n[WoWo V1.0.2 in Github](https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20V1.0.2.apk?raw=true)  \n[WoWo V1.0.2 in Fir](http://fir.im/wowoviewpager)  \n![Demo Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/demo_animation.png) \n![Demo Ease Type](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/demo_ease_type.png)  \n\n# 动画用法  \n\n### 基本动画  \n\n#### 位移动画 \n位移动画可以让view动起来。  \n![Translation animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/TranslationAnimation.gif)  \n```java\n/**\n *\n * @param page                The translation animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The translation animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The translation animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromX               The starting horizontal position of this view \n                              relative to its left position, in pixels\n                              \n * @param fromY               The starting vertical position of this view \n                              relative to its top position, in pixels\n                              \n * @param targetX             The ending horizontal position of this view \n                              relative to its left position, in pixels\n                              \n * @param targetY             The ending vertical position of this view \n                              relative to its top position, in pixels\n                              \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTranslationAnimation(\n        0, \n        0f, \n        1f,\n        findViewById(R.id.test).getTranslationX(),\n        findViewById(R.id.test).getTranslationY(),\n        -screenW / 2 + WoWoUtil.dp2px(40, this),\n        -screenH / 2 + WoWoUtil.dp2px(40, this),\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoTranslationAnimation(\n        1, \n        0f, \n        1f,\n        -screenW / 2 + WoWoUtil.dp2px(40, this),\n        -screenH / 2 + WoWoUtil.dp2px(40, this),\n        screenW - WoWoUtil.dp2px(80, this),\n        screenH - WoWoUtil.dp2px(80, this),\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n如你所见，上述代码实现了gif中一部分的效果，也就是从viewpager的第一页滑动到第三页的效果，共涉及两个位移动画。   \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTranslationAnimationActivity.java)。    \n\n#### 缩放动画\n缩放动画实现view的缩小或放大。  \n![Scale animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/ScaleAnimation.gif)  \n```java\n/**\n *\n * @param page                The scale animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The scale animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The scale animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param targetScaleX        Target scale x = target x / original y\n \n * @param targetScaleY        Target scale y = target y / original y\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoScaleAnimation(\n        3, 0f, 0.5f,\n        2f,\n        1f,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoScaleAnimation(\n        3, 0.5f, 1f,\n        1f,\n        2f,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n你可以将多种动画结合起来来实现复制的动画。比如，你可以用两个位移动画来创造一个折线动画。\n正如上述代码，从viewpager第3页（注意这里从0数起）的0偏移量到0.5偏移量（也就是滑动的前一半路程），view的宽度翻倍。\n然后，在0.5偏移量到1偏移量，也就是滑动的后一半路程，view的高度翻倍。  \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoScaleAnimationActivity.java)。  \n\n#### 渐现、渐逝动画\n渐现、渐逝动画改变view的可见度，用来产生渐现、渐逝效果。  \n![Alpha animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/AlphaAnimation.gif)  \n```java\n/**\n *\n * @param page                The alpha animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The alpha animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The alpha animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromAlpha           Original alpha\n     \n * @param targetAlpha         Target alpha\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoAlphaAnimation(\n        3, 0f, 0.5f,\n        1,\n        0.3f,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoAlphaAnimation(\n        3, 0.5f, 1f,\n        0.3f,\n        1f,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n相信不用做太多解释。  \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoAlphaAnimationActivity.java)。  \n\n#### 旋转动画\n旋转动画，顾名思义。\n![Rotation animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/RotationAnimation.gif)  \n```java\n/**\n *\n * @param page                The alpha animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The alpha animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The alpha animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n *        _ _ _ _ _ _ _\n *      /|    x\n *     / |\n *    /  |y\n *   /   |\n *  /z   |\n * /     |\n *\n * @param pivotX              The x value of the pivot of this rotation animation\n \n * @param pivotY              The y value of the pivot of this rotation animation\n \n * @param targetX             The target degree on x axis\n \n * @param targetY             The target degree on y axis\n \n * @param targetZ             The target degree on z axis\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoRotationAnimation(\n        0, 0f, 1f,\n        pivotX, pivotY,\n        0,\n        0,\n        180,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n上述的代码将导致view上下颠倒，注意在gif中，两个textview的轴心是不一样的。  \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoRotationAnimationActivity.java)。  \n\n### 文字大小动画\n#### TextView Size Animation  \nTextView文字大小动画帮助改变TextView内的文字大小。   \n```java\n/**\n *\n * @param page                The textview size animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The textview size animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The textview size animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromSize            Original text size in sp\n \n * @param targetSize          Target text size in sp\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTextViewSizeAnimation(\n        0, 0f, 1f,\n        50,\n        20,\n        easeType,\n        useSameEaseTypeBack));\nanimation.addPageAnimaition(new WoWoTextViewSizeAnimation(\n        1, 0f, 1f,\n        20,\n        60,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTextViewTextSizeAnimationActivity.java)。  \n\n### 变色动画\n\n#### Background Color Animation\n背景变色动画令view的背景色改变。  \n![Background Color Animation](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/BackgroundColorAnimation.gif)  \n```java\n/**\n *\n * @param page                The background color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The background color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The background color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoBackgroundColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n注意背景变色动画只能改变有setBackgroundColor()函数的view。   \n更多示例，请查看[代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoBackgroundColorAnimationActivity.java)。  \n[什么是colorChangeType？](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)  \n\n#### TextView Color Animation\nTextView变色动画帮助改变字体颜色。  \n```java\n/**\n *\n * @param page                The textview color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The textview color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The textview color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoTextViewColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n注意该动画只能用于textview。  \n更多示例，请查看[代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoTextViewColorAnimationActivity.java)。  \n[什么是colorChangeType？](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)  \n\n#### Shape Color Animation\nShape变色动画帮助改变以shape-drawable为背景的view的颜色。  \n```java\n/**\n *\n * @param page                The shape-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The shape-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The shape-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original color\n \n * @param targetColor         Target color\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoShapeColorAnimation(\n        0, 0f, 1f,\n        Color.parseColor(\"#ff0000\"),\n        Color.parseColor(\"#00ff00\"),\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n注意这个动画只能改变背景是shape-drawable的view的颜色。  \n也就是这样：  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"oval\"  >\n    <solid android:color=\"@color/red\"/>\n</shape>\n```\n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoStateListColorAnimationActivity.java)。  \n[什么是colorChangeType？](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)  \n\n#### State-List Color Animation\nState-List变色动画帮助改变以state-list-drawable为背景的view的颜色。  \n```java\n/**\n *\n * @param page                The state-list-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The state-list-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The state-list-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original colors, corresponding to the items in xml\n \n * @param targetColor         Target colors, corresponding to the items in xml\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoStateListColorAnimation(\n        0, 0f, 1f,\n        new int[]{Color.parseColor(\"#ff0000\"), Color.parseColor(\"#ff0000\"), Color.parseColor(\"#ff0000\")},\n        new int[]{Color.parseColor(\"#00ff00\"), Color.parseColor(\"#00ff00\"), Color.parseColor(\"#00ff00\")},\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n对应的drawable是：  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n    <item android:state_pressed=\"true\" >\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"10dp\" />\n            <solid android:color=\"@color/red\" />\n        </shape>\n    </item>\n    <item android:state_focused=\"true\">\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"2dp\" />\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n    <item >\n        <shape android:shape=\"rectangle\"  >\n            <corners android:radius=\"2dp\" />\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n</selector>\n```\n注意这个动画只能改变以state-list-drawable为背景的view的颜色。  \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoStateListColorAnimationActivity.java)。  \n[什么是colorChangeType？](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)  \n\n#### Layer-List Color Animation\nLayer-List变色动画帮助改变以state-list-drawable为背景的view的颜色。  \n```java\n/**\n *\n * @param page                The layer-list-drawable color animation will start from \n                              page(0, 1, ..., adapter.getCount() - 1)\n                              \n * @param startOffset         The layer-list-drawable color animation will start from this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param endOffset           The layer-list-drawable color animation will end with this offset([0, 1]) \n                              when swiping from page to page + 1\n                              \n * @param fromColor           Original colors, corresponding to the items in xml\n \n * @param targetColor         Target colors, corresponding to the items in xml\n \n * @param colorChangeType     How to change the color. For more information, \n                              please check the ColorChangeType.class\n \n * @param easeType            Ease type, please check the ease type section\n \n * @param useSameEaseTypeBack Whether use the same ease type to back\n */\nViewAnimation animation = new ViewAnimation(findViewById(R.id.test));\nanimation.addPageAnimaition(new WoWoLayerListColorAnimation(\n        0, 0f, 1f,\n        new int[]{\n          Color.parseColor(\"#000000\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#ff0000\")},\n        new int[]{\n          Color.parseColor(\"#0000ff\"), \n          Color.parseColor(\"#00ff00\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#ff0000\"), \n          Color.parseColor(\"#00ff00\")},\n        colorChangeType,\n        easeType,\n        useSameEaseTypeBack));\nwowoViewPager.addAnimation(animation);\n```\n对应的drawable是：  \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n        android:id=\"@+id/item1\"\n        android:top=\"0dp\" android:left=\"0dp\" android:bottom=\"0dp\" android:right=\"0dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"200dp\"\n                android:height=\"200dp\"/>\n            <solid android:color=\"@color/black\"/>\n        </shape>\n    </item>\n\n    <item\n        android:id=\"@+id/item2\"\n        android:top=\"20dp\" android:left=\"20dp\" android:bottom=\"100dp\" android:right=\"100dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n    \n    <item\n        android:id=\"@+id/item3\"\n        android:top=\"20dp\" android:left=\"100dp\" android:bottom=\"100dp\" android:right=\"20dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/green\"/>\n        </shape>\n    </item>\n\n    <item\n        android:id=\"@+id/item4\"\n        android:top=\"100dp\" android:left=\"20dp\" android:bottom=\"20dp\" android:right=\"100dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/green\"/>\n        </shape>\n    </item>\n    \n    <item\n        android:id=\"@+id/item5\"\n        android:top=\"100dp\" android:left=\"100dp\" android:bottom=\"20dp\" android:right=\"20dp\">\n        <shape android:shape=\"rectangle\">\n            <size android:width=\"80dp\"\n                android:height=\"80dp\"/>\n            <solid android:color=\"@color/red\"/>\n        </shape>\n    </item>\n</layer-list>\n```\n注意该动画只能改变以state-list-drawable为背景的view的颜色。  \n更多示例，请查看 [代码](https://github.com/Nightonke/WoWoViewPager/blob/master/app/src/main/java/com/nightonke/wowoviewpagerexample/WoWoLayerListColorAnimationActivity.java)。  \n[什么是colorChangeType？](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#rgb-or-hsv)  \n\n### 路径动画\n#### 路径动画\n路径动画可以帮助画一条路。  \n而且你还可以为这条路加一个头：   \n![Ease](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/PathAnimation.gif)  \n你需要做的是：  \n##### 在xml中加入这个：    \n```xml\n<com.nightonke.wowoviewpager.WoWoPathView\n    android:id=\"@+id/pathview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/transparent\"\n    app:pathColor=\"@color/white\"\n    app:pathWidth=\"5\"\n    app:headImageId=\"@drawable/airplane\"\n    app:headImageWidth=\"240\"\n    />\n```\n改变对应的属性：   \n\n属性                      | 描述                      | 类型             \n:------------------------ | :------------------------ | :------------------------ |\napp\\:pathColor | 路径颜色 | resource of color\napp\\:pathWidth | 路径宽度 | float\napp\\:headImageId | 路径头图像 | resource of image\napp\\:headImageWidth| 路径头宽度 | float\napp\\:headImageHeight| 路径头高度 | float \n\n##### 创造一条路径：  \n你必须先简单了解 [Path](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html)。  \n我建议你使用 [cubicTo](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html#cubicTo(float, float, float, float, float, float)) 函数来画曲线，用 [lineTo](http://developer.android.com/intl/zh-cn/reference/android/graphics/Path.html#lineTo(float, float)) 函数来画直线。    \n你可以通过以下网站来获得cubicTo函数的6个参数：  \n[Canvature](https://canvature.appspot.com/)  \n[BezierTool](http://www.victoriakirst.com/beziertool/)  \n正如上面的gif，这条路径其实由3条曲线组成：  \n```java\nWoWoPathView pathView = (WoWoPathView)findViewById(R.id.pathview);\nViewGroup.LayoutParams layoutParams = pathView.getLayoutParams();\nlayoutParams.height = screenH;\n// set the pathView a little wider,\n// then the airplane can hide\nlayoutParams.width = screenW + 200;\npathView.setLayoutParams(layoutParams);\n\n// use this to adjust the path\nint xoff = -300;\nint yoff = screenH - 616 - 300;\nfloat xScale = 1.5f;\nfloat yScale = 1;\n\nPath path = new Path();\npath.moveTo(xScale * (565 + xoff), screenH + yoff);\npath.cubicTo(\n        xScale * (509 + xoff), yScale * (385 + yoff),\n        xScale * (144 + xoff), yScale * (272 + yoff),\n        xScale * (394 + xoff), yScale * (144 + yoff));\npath.cubicTo(\n        xScale * (477 + xoff), yScale * (99 + yoff),\n        xScale * (596 + xoff), yScale * (91 + yoff),\n        xScale * (697 + xoff), yScale * (128 + yoff));\npath.cubicTo(\n        xScale * (850 + xoff), yScale * (189 + yoff),\n        xScale * (803 + xoff), yScale * (324 + yoff),\n        xScale * (66 + xoff), yScale * (307 + yoff));\n\n// set the path to pathView\npathView.setPath(path);\nViewAnimation animation = new ViewAnimation(pathView);\nanimation.addPageAnimaition(new WoWoPathAnimation(\n        0, 0f, 1f,\n        easeType,\n        useSameEaseTypeBack));\nwowo.addAnimation(animation);\n```\n\n# 缓动函数\n缓动函数可以让以上动画效果看起来更加真实，你可以在构建动画的时候指定缓动函数类型。  \n![Ease](https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/ease.png)  \n当然你也可以不使用缓动函数，你可以在[这里](https://github.com/Nightonke/WoWoViewPager/blob/master/wowoviewpager/src/main/java/com/nightonke/wowoviewpager/Eases/EaseType.java).找到所有的缓动函数类型。  \n\n# RGB or HSV\n所有的变色动画都有两种变色效果，RGB和HSV。\nHSV是改变亮度等来实现变色，在自然界中看起来更加正常。\n比如，从红色变为绿色，在HSV中是红->黄->绿。\n在RGB中，是红->一种介于红和绿的颜色->绿。 \n但是通常情况下，用RGB要好点。\n因为HSV看起来有点奇怪。\n你可以再背景变色动画的[gif](https://github.com/Nightonke/WoWoViewPager/blob/master/README-ZH.md#background-color-animation)中看到这两种变色的差异。  \n\n# 版本\n### 1.0.1  \n第一个版本，11种动画。  \n### 1.0.2\n一个更好的HSV动画变换。\n\n# Todo\n1. 增加更多动画。  \n2. 智能生成路径。  \n\n# License\n\n    Copyright 2016 Nightonke\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "Pictures",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7490234375,
          "content": "# WoWoViewPager\n\n[![Developer](https://img.shields.io/badge/Developer-Nightonke-red.svg)](https://github.com/Nightonke)\n[![Demo](https://img.shields.io/badge/Demo-Download-orange.svg)](https://github.com/Nightonke/WoWoViewPager#demo)\n[![Download](https://api.bintray.com/packages/nightonke/maven/wowo-viewpager/images/download.svg)](https://bintray.com/nightonke/maven/wowo-viewpager)\n[![Lisense](https://img.shields.io/badge/License-Apache%202-lightgrey.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\n<img src=\"https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/GuidePage1.gif\"> <img src=\"https://github.com/Nightonke/WoWoViewPager/blob/master/Pictures/GuidePage2.gif\">\n\nWoWoViewPager combines ViewPager and Animations to provide a simple way to create applications' guide pages. When users are dragging WoWoViewPager, they become the director of the applications. The above gifs show how WoWoViewPager looks like, it supports some simple animations like translation, scale, alpha, background color animations, and moreover, some complicate animations like gif-playing, svg-drawing and path-drawing animations with corresponding custom views.\n\n## Note\n1. Here comes the 2.0.0 version! The old versions(1.0.2 or below) are deprecated. The new version provides plenty features for convenient usage and efficiency improvement.\n1. Thanks [SCViewPager](https://github.com/sacot41/SCViewPager) for giving me inspiration for codes.\n1. Thanks [JazzHands](https://github.com/IFTTT/JazzHands) for giving me inspiration for animations.\n1. Thanks [konmik](https://github.com/konmik) for providing a better HSV-animation.\n\n## Gradle & Maven\n```\ncompile 'com.nightonke:wowoviewpager:2.0.0'\n```\n```\n<dependency>\n  <groupId>com.nightonke</groupId>\n  <artifactId>wowoviewpager</artifactId>\n  <version>2.0.0</version>\n  <type>pom</type>\n</dependency>\n```\n\n## Demo\n<img src=\"https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20in%20Fir.png\" width=\"200\">  \nOr by link:  \n\n[WoWoViewPager V2.0.0 in Github](https://github.com/Nightonke/WoWoViewPager/blob/master/Apk/WoWo%20V2.0.0.apk?raw=true)  \n\n[WoWoViewPager V2.0.0 in Fir](http://fir.im/wowoviewpager)  \n\n## Wiki\nCheck the [wiki](https://github.com/Nightonke/WoWoViewPager/wiki) to use WoWoViewPager.\n\n### Documentation Chapters\n#### [Basic Usage](https://github.com/Nightonke/WoWoViewPager/wiki/Basic-Usage)\n#### [Ease](https://github.com/Nightonke/WoWoViewPager/wiki/Ease)\n#### [Chameleon](https://github.com/Nightonke/WoWoViewPager/wiki/Chameleon)\n#### [Typewriter](https://github.com/Nightonke/WoWoViewPager/wiki/Typewriter)\n#### Basic Animations\n1. [Position Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Position-Animation)\n1. [Position 3D Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Position-3D-Animation)\n1. [Translation Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Translation-Animation)\n1. [Translation 3D Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Translation-3D-Animation)\n1. [Scale Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Scale-Animation)\n1. [Alpha Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Alpha-Animation)\n1. [Rotation Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Rotation-Animation)\n1. [Elevation Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Elevation-Animation)\n\n#### TextView Animations\n1. [TextView TextSize Animation](https://github.com/Nightonke/WoWoViewPager/wiki/TextView-TextSize-Animation)\n1. [TextView TextColor Animation](https://github.com/Nightonke/WoWoViewPager/wiki/TextView-TextColor-Animation)\n1. [TextView Text Animation](https://github.com/Nightonke/WoWoViewPager/wiki/TextView-Text-Animation)\n\n#### Color Animations\n1. [Background Color Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Background-Color-Animation)\n1. [Shape Color Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Shape-Color-Animation)\n1. [State-List Color Animation](https://github.com/Nightonke/WoWoViewPager/wiki/State-List-Color-Animation)\n1. [Layer-List Color Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Layer-List-Color-Animation)\n\n#### [Path Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Path-Animation)\n\n#### [WoWoViewPager Attributes](https://github.com/Nightonke/WoWoViewPager/wiki/WoWoViewPager-Attributes)\n\n#### Interface Expansibility\n1. [Custom Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Custom-Animation)\n1. [Interface Animation](https://github.com/Nightonke/WoWoViewPager/wiki/Interface-Animation)\n1. [SVG Animation](https://github.com/Nightonke/WoWoViewPager/wiki/SVG-Animation)\n1. [GIF Animation](https://github.com/Nightonke/WoWoViewPager/wiki/GIF-Animation)\n\n#### [Version History](https://github.com/Nightonke/WoWoViewPager/wiki/Version-History)\n#### [How WoWoViewPager Works](https://github.com/Nightonke/WoWoViewPager/wiki/How-WoWoViewPager-Works)\n\n## Issues & Feedbacks\nTry to tell me the bugs or enhancements about WoWoViewPager, or contact me with Nightonke@outlook.com / 2584541288@qq.com. Before doing that, having a careful read on [read-me](https://github.com/Nightonke/WoWoViewPager), [wiki](https://github.com/Nightonke/WoWoViewPager/wiki) and [issues](https://github.com/Nightonke/WoWoViewPager/issues) is really helpful.\n\n## About Versions\nVersion 1.0.2 or below use the old api of WoWoViewPager. From version 2.0.0, builder-pattern was used in WoWoViewPager and gif-playing, svg-drawing animations and more features are supported. I strongly suggest to use version 2.0.0 or above. If you still want to use version 1.0.2 or below, try to check the old documents([English](https://github.com/Nightonke/WoWoViewPager/blob/master/DEPRECATED-README-EN.md)|[中文文档](https://github.com/Nightonke/WoWoViewPager/blob/master/DEPRECATED-README-ZH.md)). \n\n## About Me\n[Nightonke](http://huangweiping.me/)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.6298828125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.0'\n\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8349609375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0322265625,
          "content": "include ':app', ':wowoviewpager'\n"
        },
        {
          "name": "wowoviewpager",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}