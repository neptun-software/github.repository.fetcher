{
  "metadata": {
    "timestamp": 1736608955194,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pytorch/serve",
      "stars": 4260,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.666015625,
          "content": "build/\ndist/\n*pyc\n*.lock\n*__pycache__*\n*.egg-info/\n.idea\n*htmlcov*\n.cache\n.coverage\n.github/actions/\n.github/.DS_Store\n.DS_Store\nfrontend/server/src/main/java/org/pytorch/serve/grpc/\nserving-sdk/target\nplugins/.gradle\nplugins/*/bin\n*.pem\n*.backup\ndocs/sphinx/src/\nts_scripts/spellcheck_conf/wordlist.dic\nvenv/\n\n# Postman files\ntest/artifacts/\ntest/logs/\ntest/pytest/logs/\ntest/model_store/\n*model_store/\ntest/ts_console.log\ntest/config.properties\n\nmodel-store-local/\n\n.vscode\n.scratch/\n\n# Custom benchmark artifacts\ninstances.yaml\ninstances.yaml.backup\n\n## Models\n*.pt\n*.onnx\n\n# cpp\ncpp/_build\ncpp/third-party\n\n# projects\n.tool-versions\n**/*/.classpath\n**/*/.settings\n**/*/.project\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1171875,
          "content": "[submodule \"third_party/google/rpc\"]\n\tpath = third_party/google/rpc\n\turl = https://github.com/googleapis/googleapis.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.181640625,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-ast\n      - id: check-builtin-literals\n      - id: check-case-conflict\n      - id: check-docstring-first\n      - id: check-merge-conflict\n      - id: check-json\n      - id: check-toml\n      - id: check-yaml\n        args: [--allow-multiple-documents, --unsafe]\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n      - id: trailing-whitespace\n      - id: check-vcs-permalinks\n      - id: check-shebang-scripts-are-executable\n  - repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n      - id: python-check-mock-methods\n      - id: python-no-log-warn\n      - id: python-use-type-annotations\n  - repo: https://github.com/hadialqattan/pycln\n    rev: v2.1.5\n    hooks:\n      - id: pycln\n        args: [--all]\n  - repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n      - id: black\n        additional_dependencies: ['click==8.0.4']\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        args: [\"--profile\", \"black\"]\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2666015625,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\naddress, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\nprofessional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at \\<conduct@pytorch.org\\>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.123046875,
          "content": "## Contributing to TorchServe\n### Merging your code\n\nIf you are interested in contributing to TorchServe you'll often need to install it from source and follow some of our guidelines to merge your PRs easily.\n\nYour contributions will fall into two categories:\n\n1. You want to propose a new feature and implement it.\n    - Post about your intended feature as an issue, and we will discuss the design and implementation. Once we agree that the plan looks good, go ahead and implement it.\n2. You want to implement a feature or bug-fix for an outstanding issue.\n    - Search for your issue here: https://github.com/pytorch/serve/issues (look for the \"good first issue\" tag if you're a first time contributor)\n    - Pick an issue and comment on the task that you want to work on this feature.\n    - To ensure your changes doesn't break any of the existing features run the sanity suite as follows from serve directory:\n        - [Install dependencies](#Install-TorchServe-for-development) (if not already installed)\n        - Install `pre-commit` to your Git flow:\n            ```bash\n            pre-commit install\n            ```\n        - Run sanity suite\n          ```bash\n          python torchserve_sanity.py\n          ```\n    - Run Regression test `python test/regression_tests.py`\n    - For running individual test suites refer [code_coverage](docs/code_coverage.md) documentation\n    - If you are updating an existing model make sure that performance hasn't degraded by typing running [benchmarks](https://github.com/pytorch/serve/tree/master/benchmarks) on the master branch and your branch and verify there is no performance regression\n    - Run `ts_scripts/spellcheck.sh` to fix any typos in your documentation\n    - For large changes make sure to run the [automated benchmark suite](https://github.com/pytorch/serve/tree/master/benchmarks) which will run the apache bench tests on several configurations of CUDA and EC2 instances\n    - If you need more context on a particular issue, please create raise a ticket on [`TorchServe` GH repo](https://github.com/pytorch/serve/issues/new/choose) or connect to [PyTorch's slack channel](https://pytorch.slack.com/)\n\nOnce you finish implementing a feature or bug-fix, please send a Pull Request to https://github.com/pytorch/serve.\n\nNew features should always be covered by at least one integration test.\nFor guidance please have a look at our [current suite of pytest tests](https://github.com/pytorch/serve/tree/master/test/pytest) and orient yourself on a test that covers a similar use case as your new feature.\nA simplified version of an example test can be found in the [mnist template test](https://github.com/pytorch/serve/blob/master/test/pytest/test_mnist_template.py) which shows how to create a mar file on the fly and register it with TorchServe from within a test.\nYou can run most tests by simply executing:\n```bash\npytest test/pytest/test_mnist_template.py\n```\nTo have a look at the TorchServe and/or test output add `-s` like this:\n```bash\npytest -s test/pytest/test_mnist_template.py\n```\nTo run only a subset or a single test from a file use `-k` like this:\n```bash\npytest -k  test/pytest/test_mnist_template.py\n```\n\n### Install TorchServe for development\n\nIf you plan to develop with TorchServe and change some source code, you must install it from source code.\n\n1. Clone the repository, including third-party modules, with `git clone --recurse-submodules --remote-submodules git@github.com:pytorch/serve.git`\n2. Ensure that you have `python3` installed, and the user has access to the site-packages or `~/.local/bin` is added to the `PATH` environment variable.\n3. Run the following script from the top of the source directory. NOTE: This script force re-installs `torchserve`, `torch-model-archiver` and `torch-workflow-archiver` if existing installations are found\n\n    #### For Debian Based Systems/MacOS\n\n    ```\n    python ./ts_scripts/install_dependencies.py --environment=dev\n    python ./ts_scripts/install_from_src.py --environment=dev\n    ```\n    ##### Installing Dependencies for Accelerator Support\n    Use the optional `--rocm` or `--cuda` flag with `install_dependencies.py` for installing accelerator specific dependencies.\n\n    Possible values are\n    - rocm: `rocm61`, `rocm60`\n    - cuda: `cu111`, `cu102`, `cu101`, `cu92`\n\n    For example `python ./ts_scripts/install_dependencies.py --environment=dev --rocm=rocm61`\n\n    #### For Windows\n\n    Refer to the documentation [here](docs/torchserve_on_win_native.md).\n\n    For information about the model archiver, see [detailed documentation](model-archiver/README.md).\n\n### What to Contribute?\n\n### A good first issue\nIf you've never contributed to TorchServe or OSS before then a great place to start is issues labeled as [`good first issue`](https://github.com/pytorch/serve/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22). Bonus points if you personally care about this issue or if it's an issue you filed.\n\n### A good project\nIf you've used TorchServe in an interesting way, we'd love to feature it in https://github.com/pytorch/serve#-news\n\n#### A new example\nThe easiest area to contribute a new change to TorchServe is https://github.com/pytorch/serve/tree/master/examples by creating a new handler. Handlers are a simple but powerful paradigm that let you execute arbitrary Python code while serving a model.\n\nFor example\n\nThe core team developed a single handler to deal with question answering, token classification and sequence classification for HuggingFace models https://github.com/pytorch/serve/blob/master/examples/Huggingface_Transformers/Transformer_handler_generalized.py\n\nIf you have another use case we'd love to merge it!\n\nAs simple as they seem handlers let you do complex stuff like exporting to various runtimes and various people in open source have managed to support [ORT](https://discuss.pytorch.org/t/deploying-onnx-model-with-torchserve/97725/2), [TensorRT](https://github.com/pytorch/serve/issues/1243) and [IPEX](https://github.com/pytorch/serve/tree/master/examples/intel_extension_for_pytorch) without much of the core team's involvement.\n\n```python\nclass CustomHandler(BaseHandler):\n  def initialize(self, ctx):\n\n  def preprocess(self, requests) -> List[Any]:\n\n  def inference(self, input_batch : List[torch.Tensor]) -> List[torch.Tensor]:\n\n  def postprocess(self, inference_output : List[torch.Tensor]) -> List[Any]:\n\n```\n\nThe key thing to observe here is that `CustomHandler` is a class so it can hold state that you can save from any of the relevant handler functions. For example you can setup a runtime configuration in `initialize()` and then use it in an `inference()` function. `postprocess()` can return a list of outputs alongside some debug information stored in arbitrary data-structure. `requests` can be anything, video, text or sound data and we've it to this effect in our [multi modal MMF example](https://github.com/pytorch/serve/tree/master/examples/MMF-activity-recognition)\n\nHandlers are incredibly powerful and will let you build meaningful contributions to TorchServe without having to dive deep into the Java internals.\n\nIf you are interested in contributing to the internals, we suggest you start here [Internals Guide](docs/internals.md)\n\n\n### New configurations\nTo have your custom configurations available in `config.properties` this is a [good educational PR](https://github.com/pytorch/serve/pull/1319) to follow as an example.\n\nAll available configurations are set in [ConfigManager.java](https://github.com/pytorch/serve/blob/master/frontend/server/src/main/java/org/pytorch/serve/util/ConfigManager.java) and then can be accessed from handler using [`properties = context.system_properties`](https://github.com/pytorch/serve/blob/master/ts/torch_handler/base_handler.py). You can also access environment variables directly using `os.environ.get()` and gate behavior based on what that environment variable is.\n\nAll of our model optimization work ranging from IPEX to TensorRT work in a similar manner.\n\n\n### Something more complicated\nFor something more complicated please open an issue and discuss it with the core team, you can see what our general priorities are here https://github.com/pytorch/serve/projects but if you need a feature urgently we are happy to guide you so you can get it done.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1845703125,
          "content": "include ts/frontend/model-server.jar\ninclude ts/cpp/bin/*\ninclude ts/cpp/lib/*\ninclude ts/cpp/resources/logging.yaml\ninclude PyPiDescription.rst\ninclude ts/configs/*\ninclude ts/version.txt\n"
        },
        {
          "name": "PyPiDescription.rst",
          "type": "blob",
          "size": 0.6826171875,
          "content": "Project Description\n===================\n\nTorchServe is a flexible and easy to use tool for\nserving `PyTorch <http://pytorch.org/>`__ models in production.\n\nUse the TorchServe CLI, or the pre-configured Docker images, to start a\nservice that sets up HTTP endpoints to handle model inference requests.\n\nInstallation\n------------\n\nFull installation instructions are in the project repo: https://github.com/pytorch/serve/blob/master/README.md\n\n\nSource code\n-----------\n\nYou can check the latest source code as follows:\n\n::\n\n    git clone https://github.com/pytorch/serve.git\n\nCitation\n--------\n\nIf you use torchserve in a publication or project, please cite torchserve:\nhttps://github.com/pytorch/serve\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.6669921875,
          "content": "# ❗ANNOUNCEMENT: Security Changes❗\nTorchServe now enforces token authorization enabled and model API control disabled by default. These security features are intended to address the concern of unauthorized API calls and to prevent potential malicious code from being introduced to the model server. Refer the following documentation for more information: [Token Authorization](https://github.com/pytorch/serve/blob/master/docs/token_authorization_api.md), [Model API control](https://github.com/pytorch/serve/blob/master/docs/model_api_control.md)\n\n# TorchServe\n\n\n![Nightly build](https://github.com/pytorch/serve/actions/workflows/torchserve-nightly-build.yml/badge.svg)\n![Docker Nightly build](https://github.com/pytorch/serve/actions/workflows/docker-nightly-build.yml/badge.svg)\n![Benchmark Nightly](https://github.com/pytorch/serve/actions/workflows/benchmark_nightly.yml/badge.svg)\n![Docker Regression Nightly](https://github.com/pytorch/serve/actions/workflows/regression_tests_docker.yml/badge.svg)\n![KServe Regression Nightly](https://github.com/pytorch/serve/actions/workflows/kserve_cpu_tests.yml/badge.svg)\n![Kubernetes Regression Nightly](https://github.com/pytorch/serve/actions/workflows/kubernetes_tests.yml/badge.svg)\n\nTorchServe is a flexible and easy-to-use tool for serving and scaling PyTorch models in production.\n\nRequires python >= 3.8\n\n```bash\ncurl http://127.0.0.1:8080/predictions/bert -T input.txt\n```\n### 🚀 Quick start with TorchServe\n\n```bash\n# Install dependencies\npython ./ts_scripts/install_dependencies.py\n\n# Include dependencies for accelerator support with the relevant optional flags\npython ./ts_scripts/install_dependencies.py --rocm=rocm61\npython ./ts_scripts/install_dependencies.py --cuda=cu121\n\n# Latest release\npip install torchserve torch-model-archiver torch-workflow-archiver\n\n# Nightly build\npip install torchserve-nightly torch-model-archiver-nightly torch-workflow-archiver-nightly\n```\n\n### 🚀 Quick start with TorchServe (conda)\n\n```bash\n# Install dependencies\npython ./ts_scripts/install_dependencies.py\n\n# Include depeendencies for accelerator support with the relevant optional flags\npython ./ts_scripts/install_dependencies.py --rocm=rocm61\npython ./ts_scripts/install_dependencies.py --cuda=cu121\n\n# Latest release\nconda install -c pytorch torchserve torch-model-archiver torch-workflow-archiver\n\n# Nightly build\nconda install -c pytorch-nightly torchserve torch-model-archiver torch-workflow-archiver\n```\n\n[Getting started guide](docs/getting_started.md)\n\n### 🐳 Quick Start with Docker\n\n```bash\n# Latest release\ndocker pull pytorch/torchserve\n\n# Nightly build\ndocker pull pytorch/torchserve-nightly\n```\n\nRefer to [torchserve docker](docker/README.md) for details.\n\n### 🤖 Quick Start LLM Deployment\n\n#### VLLM Engine\n```bash\n# Make sure to install torchserve with pip or conda as described above and login with `huggingface-cli login`\npython -m ts.llm_launcher --model_id meta-llama/Llama-3.2-3B-Instruct --disable_token_auth\n\n# Try it out\ncurl -X POST -d '{\"model\":\"meta-llama/Llama-3.2-3B-Instruct\", \"prompt\":\"Hello, my name is\", \"max_tokens\": 200}' --header \"Content-Type: application/json\" \"http://localhost:8080/predictions/model/1.0/v1/completions\"\n```\n\n#### TRT-LLM Engine\n```bash\n# Make sure to install torchserve with python venv as described above and login with `huggingface-cli login`\n# pip install -U --use-deprecated=legacy-resolver -r requirements/trt_llm.txt\npython -m ts.llm_launcher --model_id meta-llama/Meta-Llama-3.1-8B-Instruct --engine trt_llm --disable_token_auth\n\n# Try it out\ncurl -X POST -d '{\"prompt\":\"count from 1 to 9 in french \", \"max_tokens\": 100}' --header \"Content-Type: application/json\" \"http://localhost:8080/predictions/model\"\n```\n\n### 🚢 Quick Start LLM Deployment with Docker\n\n```bash\n#export token=<HUGGINGFACE_HUB_TOKEN>\ndocker build --pull . -f docker/Dockerfile.vllm -t ts/vllm\n\ndocker run --rm -ti --shm-size 10g --gpus all -e HUGGING_FACE_HUB_TOKEN=$token -p 8080:8080 -v data:/data ts/vllm --model_id meta-llama/Meta-Llama-3-8B-Instruct --disable_token_auth\n\n# Try it out\ncurl -X POST -d '{\"model\":\"meta-llama/Meta-Llama-3-8B-Instruct\", \"prompt\":\"Hello, my name is\", \"max_tokens\": 200}' --header \"Content-Type: application/json\" \"http://localhost:8080/predictions/model/1.0/v1/completions\"\n```\n\nRefer to [LLM deployment](docs/llm_deployment.md) for details and other methods.\n\n## ⚡ Why TorchServe\n* Write once, run anywhere, on-prem, on-cloud, supports inference on CPUs, GPUs, AWS Inf1/Inf2/Trn1, Google Cloud TPUs, [Nvidia MPS](docs/nvidia_mps.md)\n* [Model Management API](docs/management_api.md): multi model management with optimized worker to model allocation\n* [Inference API](docs/inference_api.md): REST and gRPC support for batched inference\n* [TorchServe Workflows](examples/Workflows/README.md): deploy complex DAGs with multiple interdependent models\n* Default way to serve PyTorch models in\n  * [Sagemaker](https://aws.amazon.com/blogs/machine-learning/serving-pytorch-models-in-production-with-the-amazon-sagemaker-native-torchserve-integration/)\n  * [Vertex AI](https://cloud.google.com/blog/topics/developers-practitioners/pytorch-google-cloud-how-deploy-pytorch-models-vertex-ai)\n  * [Kubernetes](kubernetes) with support for [autoscaling](kubernetes#session-affinity-with-multiple-torchserve-pods), session-affinity, monitoring using Grafana works on-prem, AWS EKS, Google GKE, Azure AKS\n  * [Kserve](https://kserve.github.io/website/0.8/modelserving/v1beta1/torchserve/): Supports both v1 and v2 API, [autoscaling and canary deployments](kubernetes/kserve/README.md#autoscaling) for A/B testing\n  * [Kubeflow](https://v0-5.kubeflow.org/docs/components/pytorchserving/)\n  * [MLflow](https://github.com/mlflow/mlflow-torchserve)\n* Export your model for optimized inference. Torchscript out of the box, [PyTorch Compiler](examples/pt2/README.md) preview, [ORT and ONNX](https://github.com/pytorch/serve/blob/master/docs/performance_guide.md), [IPEX](https://github.com/pytorch/serve/tree/master/examples/intel_extension_for_pytorch), [TensorRT](https://github.com/pytorch/serve/blob/master/docs/performance_guide.md), [FasterTransformer](https://github.com/pytorch/serve/tree/master/examples/FasterTransformer_HuggingFace_Bert), FlashAttention (Better Transformers)\n* [Performance Guide](docs/performance_guide.md): builtin support to optimize, benchmark, and profile PyTorch and TorchServe performance\n* [Expressive handlers](CONTRIBUTING.md): An expressive handler architecture that makes it trivial to support inferencing for your use case with [many supported out of the box](https://github.com/pytorch/serve/tree/master/ts/torch_handler)\n* [Metrics API](docs/metrics.md): out-of-the-box support for system-level metrics with [Prometheus exports](https://github.com/pytorch/serve/tree/master/examples/custom_metrics), custom metrics,\n* [Large Model Inference Guide](docs/large_model_inference.md): With support for GenAI, LLMs including\n  * [SOTA GenAI performance](https://github.com/pytorch/serve/tree/master/examples/pt2#torchcompile-genai-examples) using `torch.compile`\n  * Fast Kernels with FlashAttention v2, continuous batching and streaming response\n  * PyTorch [Tensor Parallel](examples/large_models/tp_llama) preview, [Pipeline Parallel](examples/large_models/Huggingface_pippy)\n  * Microsoft [DeepSpeed](examples/large_models/deepspeed), [DeepSpeed-Mii](examples/large_models/deepspeed_mii)\n  * Hugging Face [Accelerate](examples/large_models/Huggingface_accelerate), [Diffusers](examples/diffusers)\n  * Running large models on AWS [Sagemaker](https://docs.aws.amazon.com/sagemaker/latest/dg/large-model-inference-tutorials-torchserve.html) and [Inferentia2](https://pytorch.org/blog/high-performance-llama/)\n  * Running [Meta Llama Chatbot locally on Mac](examples/LLM/llama)\n* Monitoring using Grafana and [Datadog](https://www.datadoghq.com/blog/ai-integrations/#model-serving-and-deployment-vertex-ai-amazon-sagemaker-torchserve)\n\n\n## 🤔 How does TorchServe work\n* [Model Server for PyTorch Documentation](docs/README.md): Full documentation\n* [TorchServe internals](docs/internals.md): How TorchServe was built\n* [Contributing guide](CONTRIBUTING.md): How to contribute to TorchServe\n\n\n## 🏆 Highlighted Examples\n* [Serving Meta Llama with TorchServe](examples/LLM/llama/README.md)\n* [Chatbot with Meta Llama on Mac 🦙💬](examples/LLM/llama/chat_app)\n* [🤗 HuggingFace Transformers](examples/Huggingface_Transformers) with a [Better Transformer Integration/ Flash Attention & Xformer Memory Efficient ](examples/Huggingface_Transformers#Speed-up-inference-with-Better-Transformer)\n* [Stable Diffusion](examples/diffusers)\n* [Model parallel inference](examples/Huggingface_Transformers#model-parallelism)\n* [MultiModal models with MMF](https://github.com/pytorch/serve/tree/master/examples/MMF-activity-recognition) combining text, audio and video\n* [Dual Neural Machine Translation](examples/Workflows/nmt_transformers_pipeline) for a complex workflow DAG\n* [TorchServe Integrations](examples/README.md#torchserve-integrations)\n* [TorchServe Internals](examples/README.md#torchserve-internals)\n* [TorchServe UseCases](examples/README.md#usecases)\n\nFor [more examples](examples/README.md)\n\n## 🛡️ TorchServe Security Policy\n[SECURITY.md](SECURITY.md)\n\n## 🤓 Learn More\nhttps://pytorch.org/serve\n\n\n## 🫂 Contributing\n\nWe welcome all contributions!\n\nTo learn more about how to contribute, see the contributor guide [here](https://github.com/pytorch/serve/blob/master/CONTRIBUTING.md).\n\n## 📰 News\n* [High performance Llama 2 deployments with AWS Inferentia2 using TorchServe](https://pytorch.org/blog/high-performance-llama/)\n* [Naver Case Study: Transition From High-Cost GPUs to Intel CPUs and oneAPI powered Software with performance](https://pytorch.org/blog/ml-model-server-resource-saving/)\n* [Run multiple generative AI models on GPU using Amazon SageMaker multi-model endpoints with TorchServe and save up to 75% in inference costs](https://pytorch.org/blog/amazon-sagemaker-w-torchserve/)\n* [Deploying your Generative AI model in only four steps with Vertex AI and PyTorch](https://cloud.google.com/blog/products/ai-machine-learning/get-your-genai-model-going-in-four-easy-steps)\n* [PyTorch Model Serving on Google Cloud TPU v5](https://cloud.google.com/tpu/docs/v5e-inference#pytorch-model-inference-and-serving)\n* [Monitoring using Datadog](https://www.datadoghq.com/blog/ai-integrations/#model-serving-and-deployment-vertex-ai-amazon-sagemaker-torchserve)\n* [Torchserve Performance Tuning, Animated Drawings Case-Study](https://pytorch.org/blog/torchserve-performance-tuning/)\n* [Walmart Search: Serving Models at a Scale on TorchServe](https://medium.com/walmartglobaltech/search-model-serving-using-pytorch-and-torchserve-6caf9d1c5f4d)\n* [🎥 Scaling inference on CPU with TorchServe](https://www.youtube.com/watch?v=066_Jd6cwZg)\n* [🎥 TorchServe C++ backend](https://www.youtube.com/watch?v=OSmGGDpaesc)\n* [Grokking Intel CPU PyTorch performance from first principles: a TorchServe case study](https://pytorch.org/tutorials/intermediate/torchserve_with_ipex.html)\n* [Grokking Intel CPU PyTorch performance from first principles( Part 2): a TorchServe case study](https://pytorch.org/tutorials/intermediate/torchserve_with_ipex_2.html)\n* [Case Study: Amazon Ads Uses PyTorch and AWS Inferentia to Scale Models for Ads Processing](https://pytorch.org/blog/amazon-ads-case-study/)\n* [Optimize your inference jobs using dynamic batch inference with TorchServe on Amazon SageMaker](https://aws.amazon.com/blogs/machine-learning/optimize-your-inference-jobs-using-dynamic-batch-inference-with-torchserve-on-amazon-sagemaker/)\n* [Using AI to bring children's drawings to life](https://ai.meta.com/blog/using-ai-to-bring-childrens-drawings-to-life/)\n* [🎥 Model Serving in PyTorch](https://www.youtube.com/watch?v=2A17ZtycsPw)\n* [Evolution of Cresta's machine learning architecture: Migration to AWS and PyTorch](https://aws.amazon.com/blogs/machine-learning/evolution-of-crestas-machine-learning-architecture-migration-to-aws-and-pytorch/)\n* [🎥 Explain Like I’m 5: TorchServe](https://www.youtube.com/watch?v=NEdZbkfHQCk)\n* [🎥 How to Serve PyTorch Models with TorchServe](https://www.youtube.com/watch?v=XlO7iQMV3Ik)\n* [How to deploy PyTorch models on Vertex AI](https://cloud.google.com/blog/topics/developers-practitioners/pytorch-google-cloud-how-deploy-pytorch-models-vertex-ai)\n* [Quantitative Comparison of Serving Platforms](https://biano-ai.github.io/research/2021/08/16/quantitative-comparison-of-serving-platforms-for-neural-networks.html)\n* [Efficient Serverless deployment of PyTorch models on Azure](https://medium.com/pytorch/efficient-serverless-deployment-of-pytorch-models-on-azure-dc9c2b6bfee7)\n* [Deploy PyTorch models with TorchServe in Azure Machine Learning online endpoints](https://techcommunity.microsoft.com/t5/ai-machine-learning-blog/deploy-pytorch-models-with-torchserve-in-azure-machine-learning/ba-p/2466459)\n* [Dynaboard moving beyond accuracy to holistic model evaluation in NLP](https://ai.facebook.com/blog/dynaboard-moving-beyond-accuracy-to-holistic-model-evaluation-in-nlp/)\n* [A MLOps Tale about operationalising MLFlow and PyTorch](https://medium.com/mlops-community/engineering-lab-1-team-1-a-mlops-tale-about-operationalising-mlflow-and-pytorch-62193b55dc19)\n* [Operationalize, Scale and Infuse Trust in AI Models using KFServing](https://blog.kubeflow.org/release/official/2021/03/08/kfserving-0.5.html)\n* [How Wadhwani AI Uses PyTorch To Empower Cotton Farmers](https://medium.com/pytorch/how-wadhwani-ai-uses-pytorch-to-empower-cotton-farmers-14397f4c9f2b)\n* [TorchServe Streamlit Integration](https://cceyda.github.io/blog/huggingface/torchserve/streamlit/ner/2020/10/09/huggingface_streamlit_serve.html)\n* [Dynabench aims to make AI models more robust through distributed human workers](https://venturebeat.com/2020/09/24/facebooks-dynabench-aims-to-make-ai-models-more-robust-through-distributed-human-workers/)\n* [Announcing TorchServe](https://aws.amazon.com/blogs/aws/announcing-torchserve-an-open-source-model-server-for-pytorch/)\n\n## 💖 All Contributors\n\n<a href=\"https://github.com/pytorch/serve/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=pytorch/serve\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n## ⚖️ Disclaimer\nThis repository is jointly operated and maintained by Amazon, Meta and a number of individual contributors listed in the [CONTRIBUTORS](https://github.com/pytorch/serve/graphs/contributors) file. For questions directed at Meta, please send an email to opensource@fb.com. For questions directed at Amazon, please send an email to torchserve@amazon.com. For all other questions, please open up an issue in this repository [here](https://github.com/pytorch/serve/issues).\n\n*TorchServe acknowledges the [Multi Model Server (MMS)](https://github.com/awslabs/multi-model-server) project from which it was derived*\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 4.9580078125,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n|---------| ------------------ |\n| 0.11.1   | :white_check_mark: |\n\n\n## How we do security\n\n\nAs much as possible, TorchServe relies on automated tools to do security scanning. In particular, we support:\n\n1. Dependency Analysis: Using Dependabot\n2. Docker Scanning: Using Snyk\n3. Code Analysis: Using CodeQL\n\n## Important Security Guidelines\n\n1. TorchServe listens on the following ports\n    1. HTTP - `8080`, `8081`, `8082`\n    2. gRPC - `7070`, `7071`\n\n    These ports are accessible to `localhost` by default.  The addresses can be configured by following the guides for\n    [HTTP](https://github.com/pytorch/serve/blob/master/docs/configuration.md#configure-torchserve-listening-address-and-port) and\n    [gRPC](https://github.com/pytorch/serve/blob/master/docs/configuration.md#configure-torchserve-grpc-listening-addresses-and-ports).\n    TorchServe does not prevent users from configuring the address to be of any value, including the wildcard address `0.0.0.0`.\n    Please be aware of the security risks of configuring the address to be `0.0.0.0`, this will give all addresses(including publicly accessible addresses, if any)\n    on the host, access to the TorchServe endpoints listening on the ports shown above.\n2. By [default](https://github.com/pytorch/serve/blob/master/docker/Dockerfile), TorchServe's Docker image is configured to expose the ports `8080`, `8081`, `8082`, `7070`, `7071` to the host. When starting the container,\n   map the ports exposed by the container to `localhost` ports or a specific IP address, as shown in this [security guideline](https://github.com/pytorch/serve/blob/master/docker/README.md#security-guideline).\n\n3. Be sure to validate the authenticity of the `.mar` file being used with TorchServe.\n    1. A `.mar` file being downloaded from the internet from an untrustworthy source may have malicious code, compromising the integrity of your application.\n    2. TorchServe executes the arbitrary python code packaged in the `mar` file. Make sure that you've either audited that the code you're using is safe and/or is from a source that you trust.\n    3. TorchServe supports custom [plugins](https://github.com/pytorch/serve/tree/master/plugins) and [handlers](https://github.com/pytorch/serve/blob/master/docs/custom_service.md).\n       These can be utilized to extend TorchServe functionality to perform runtime security scanning using tools such as:\n        - Clamd: https://pypi.org/project/clamd/\n        - VirusTotal: https://virustotal.github.io/vt-py/\n        - Fickling: https://github.com/trailofbits/fickling\n    4. Running TorchServe inside a container environment and loading an untrusted `.mar` file does not guarantee isolation from a security perspective.\n4. By default, TorchServe allows you to register models from all URLs. Make sure to set `allowed_urls` parameter in config.properties to restrict this. You can find more details in the [configuration guide](https://pytorch.org/serve/configuration.html#other-properties).\n    - `use_env_allowed_urls=true` is required in config.properties to read `allowed_urls` from environment variable.\n5. Enable SSL:\n\n    TorchServe supports two ways to configure SSL:\n    1. Using a keystore\n    2. Using private-key/certificate files\n\n    You can find more details in the [configuration guide](https://pytorch.org/serve/configuration.html#enable-ssl).\n6. Prepare your model against bad inputs and prompt injections. Some recommendations:\n    1. Pre-analysis: check how the model performs by default when exposed to prompt injection (e.g. using [fuzzing for prompt injection](https://github.com/FonduAI/awesome-prompt-injection?tab=readme-ov-file#tools)).\n    2. Input Sanitation: Before feeding data to the model, sanitize inputs rigorously. This involves techniques such as:\n        - Validation: Enforce strict rules on allowed characters and data types.\n        - Filtering: Remove potentially malicious scripts or code fragments.\n        - Encoding: Convert special characters into safe representations.\n        - Verification: Run tooling that identifies potential script injections (e.g. [models that detect prompt injection attempts](https://python.langchain.com/docs/guides/safety/hugging_face_prompt_injection)).\n7. If you intend to run multiple models in parallel with shared memory, it is your responsibility to ensure the models do not interact or access each other's data. The primary areas of concern are tenant isolation, resource allocation, model sharing and hardware attacks.\n8. TorchServe enforces token authorization by default: check [documentation](https://github.com/pytorch/serve/blob/master/docs/token_authorization_api.md) for more information.\n9. By default, TorchServe prevents you from registering and deleting models after startup. Check out Model API control [documentation](./docs/model_api_control.md) for more information.\n\n## Reporting a Vulnerability\n\nIf you find a vulnerability please report it to https://www.facebook.com/whitehat and aws-security@amazon.com\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "binaries",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0537109375,
          "content": "coverage:\n  range: 42..100\n  round: down\n  precision: 2"
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "kubernetes",
          "type": "tree",
          "content": null
        },
        {
          "name": "link_check_config.json",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\n\t\"ignorePatterns\": [\n\t\t{\n\t\t\t\"pattern\": \"^http(s)?://127.0.0.1.*\"\n\t\t},\n\t\t{\n\t\t\t\"pattern\": \"^http(s)?://localhost.*\"\n\t\t}\n\t]\n}\n"
        },
        {
          "name": "model-archiver",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.5830078125,
          "content": "[mypy]\n; A good-first-issue is to add types to a file\n; As you do start adding them in files and slowly make the excluded files empty\nfiles = ts/context.py, ts/model_server.py, ts/model_loader.py, ts/model_service_worker.py\n\nexclude = examples, binaries, ts_scripts, test, kubernetes, benchmarks, model-archiver, workflow-archiver, ts/tests, ts/utils\n\nfollow_imports = silent\ncache_dir = .mypy_cache\nwarn_unused_configs = True\nwarn_redundant_casts = True\nshow_error_codes = True\nshow_column_numbers = True\ncheck_untyped_defs = True\npretty = True\npython_version = 3.8\nignore_missing_imports = True\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "serving-sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.5390625,
          "content": "# To build and upload a new version, follow the steps below.\n# Notes:\n# - this is a \"Universal Wheels\" package that is pure Python and supports Python3\n# - Twine is a secure PyPi upload package\n# - Make sure you have bumped the version! at ts/version.py\n# $ pip install twine\n# $ pip install wheel\n# $ python setup.py bdist_wheel --universal\n\n# *** TEST YOUR PACKAGE WITH TEST PI ******\n# twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n\n# If this is successful then push it to actual pypi\n\n# $ twine upload dist/*\n\"\"\"\nSetup.py for the model server package\n\"\"\"\n\nimport errno\nimport os\nimport platform\nimport subprocess\nimport sys\nfrom datetime import date\nfrom shutil import copy2, rmtree\n\nimport setuptools.command.build_py\nfrom setuptools import Command, find_packages, setup\n\nimport ts\n\npkgs = find_packages(exclude=[\"ts_scripts\", \"test\"])\n\nbuild_frontend_command = {\n    \"Windows\": \".\\\\frontend\\\\gradlew.bat -p frontend clean assemble\",\n    \"Darwin\": \"frontend/gradlew -p frontend clean assemble\",\n    \"Linux\": \"frontend/gradlew -p frontend clean assemble\",\n}\nbuild_plugins_command = {\n    \"Windows\": \".\\\\plugins\\\\gradlew.bat -p plugins clean bS\",\n    \"Darwin\": \"plugins/gradlew -p plugins clean bS\",\n    \"Linux\": \"plugins/gradlew -p plugins clean bS\",\n}\n\n\ndef pypi_description():\n    \"\"\"\n    Imports the long description for the project page\n    \"\"\"\n    with open(\"PyPiDescription.rst\") as df:\n        return df.read()\n\n\ndef get_nightly_version():\n    today = date.today()\n    return today.strftime(\"%Y.%m.%d\")\n\n\ndef detect_model_server_version():\n    sys.path.append(os.path.abspath(\"ts\"))\n    if \"--release\" in sys.argv:\n        sys.argv.remove(\"--release\")\n        return ts.__version__.strip()\n\n    return ts.__version__.strip() + \"b\" + str(date.today()).replace(\"-\", \"\")\n\n\nclass BuildFrontEnd(setuptools.command.build_py.build_py):\n    \"\"\"\n    Class defined to run custom commands.\n    \"\"\"\n\n    description = \"Build Model Server Frontend\"\n    source_server_file = os.path.abspath(\"frontend/server/build/libs/server-1.0.jar\")\n    dest_file_name = os.path.abspath(\"ts/frontend/model-server.jar\")\n\n    # noinspection PyMethodMayBeStatic\n    def run(self):\n        \"\"\"\n        Actual method called to run the build command\n        :return:\n        \"\"\"\n        front_end_bin_dir = os.path.abspath(\".\") + \"/ts/frontend\"\n        try:\n            os.mkdir(front_end_bin_dir)\n        except OSError as exc:\n            if exc.errno == errno.EEXIST and os.path.isdir(front_end_bin_dir):\n                pass\n            else:\n                raise\n\n        if os.path.exists(self.source_server_file):\n            os.remove(self.source_server_file)\n\n        try:\n            subprocess.check_call(build_frontend_command[platform.system()], shell=True)\n        except OSError:\n            assert 0, \"build failed\"\n        copy2(self.source_server_file, self.dest_file_name)\n\n\nclass BuildPy(setuptools.command.build_py.build_py):\n    \"\"\"\n    Class to invoke the custom command defined above.\n    \"\"\"\n\n    def run(self):\n        sys.stderr.flush()\n        self.run_command(\"build_frontend\")\n        setuptools.command.build_py.build_py.run(self)\n\n\nclass BuildPlugins(Command):\n    description = \"Build Model Server Plugins\"\n    user_options = [(\"plugins=\", \"p\", \"Plugins installed\")]\n    source_plugin_dir = os.path.abspath(\"plugins/build/plugins\")\n\n    def initialize_options(self):\n        self.plugins = None\n\n    def finalize_options(self):\n        if self.plugins is None:\n            print(\"No plugin option provided. Defaulting to 'default'\")\n            self.plugins = \"default\"\n\n    # noinspection PyMethodMayBeStatic\n    def run(self):\n        if os.path.isdir(self.source_plugin_dir):\n            rmtree(self.source_plugin_dir)\n\n        try:\n            if self.plugins == \"endpoints\":\n                subprocess.check_call(\n                    build_plugins_command[platform.system()], shell=True\n                )\n            else:\n                raise OSError(\"No such rule exists\")\n        except OSError:\n            assert 0, \"build failed\"\n\n        self.run_command(\"build_py\")\n\n\nif __name__ == \"__main__\":\n    # Get nightly version if nightly in name\n    name = \"torchserve\"\n\n    # Clever code to figure out if setup.py was trigger by ts_scripts/push_nightly.sh\n    NAME_ARG = \"--override-name\"\n    if NAME_ARG in sys.argv:\n        idx = sys.argv.index(NAME_ARG)\n        name = sys.argv.pop(idx + 1)\n        sys.argv.pop(idx)\n    is_nightly = \"nightly\" in name\n\n    version = get_nightly_version() if is_nightly else detect_model_server_version()\n\n    print(f\"-- {name} building version: {version}\")\n\n    requirements = [\"Pillow\", \"psutil\", \"packaging\", \"wheel\"]\n\n    setup(\n        name=name,\n        version=version,\n        description=\"TorchServe is a tool for serving neural net models for inference\",\n        author=\"PyTorch Serving team\",\n        author_email=\"noreply@noreply.com\",\n        long_description=pypi_description(),\n        long_description_content_type=\"text/x-rst\",\n        url=\"https://github.com/pytorch/serve.git\",\n        keywords=\"TorchServe PyTorch Serving Deep Learning Inference AI\",\n        packages=pkgs,\n        cmdclass={\n            \"build_frontend\": BuildFrontEnd,\n            \"build_plugins\": BuildPlugins,\n            \"build_py\": BuildPy,\n        },\n        install_requires=requirements,\n        extras_require={\n            \"onnx\": [\"numpy\", \"onnx\", \"onnx-runtime\"],\n            \"ipex\": [\"intel_extension_for_pytorch\"],\n        },\n        entry_points={\"console_scripts\": [\"torchserve=ts.model_server:start\"]},\n        include_package_data=True,\n        license=\"Apache License Version 2.0\",\n    )\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "torchserve_sanity.py",
          "type": "blob",
          "size": 1.5380859375,
          "content": "import ts_scripts.tsutils as ts\nfrom ts_scripts import marsgen as mg\nfrom ts_scripts.backend_utils import test_torchserve\nfrom ts_scripts.frontend_utils import test_frontend\nfrom ts_scripts.install_from_src import install_from_src\nfrom ts_scripts.modelarchiver_utils import test_modelarchiver\nfrom ts_scripts.sanity_utils import (\n    test_markdown_files,\n    test_sanity,\n    test_workflow_sanity,\n)\nfrom ts_scripts.shell_utils import rm_dir, rm_file\nfrom ts_scripts.workflow_archiver_utils import test_workflow_archiver\n\n\ndef torchserve_sanity():\n    try:\n        # Test frontend gradle\n        test_frontend()\n\n        # Install from src\n        install_from_src()\n\n        # Generate mar files\n        mg.generate_mars()\n\n        # Test Torchserve pylint, pytest\n        test_torchserve()\n\n        # Test Model archiver pylint, pytest, IT\n        test_modelarchiver()\n\n        # Test Workflow archiver pylint, pytest, IT\n        test_workflow_archiver()\n\n        # Run Sanity Tests\n        test_sanity()\n\n        # Run workflow sanity\n        test_workflow_sanity()\n\n        # Check for broken links\n        test_markdown_files()\n\n    finally:\n        cleanup()\n\n\ndef cleanup():\n    ts.stop_torchserve()\n    rm_dir(\"model_store\")\n    rm_dir(\"logs\")\n\n    # clean up residual from model-archiver IT suite.\n    rm_dir(\n        \"model-archiver/model_archiver/htmlcov_ut model_archiver/model-archiver/htmlcov_it\"\n    )\n    rm_file(\"ts_scripts/*_pb2*.py\", True)\n\n    # delete mar_gen_dir\n    mg.delete_model_store_gen_dir()\n\n\nif __name__ == \"__main__\":\n    torchserve_sanity()\n"
        },
        {
          "name": "ts",
          "type": "tree",
          "content": null
        },
        {
          "name": "ts_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "workflow-archiver",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}