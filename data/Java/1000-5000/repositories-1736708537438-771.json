{
  "metadata": {
    "timestamp": 1736708537438,
    "page": 771,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pushtorefresh/storio",
      "stars": 2542,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.341796875,
          "content": "# built application files\n*.apk\n*.ap_\n.gradle/\nbuild/\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\nout/\ntarget/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n.mainframer/\nmainframer.sh\n\n# Eclipse project files\n.classpath\n.project\n\n# Idea IDE files\n*.idea/\n*.iml\n\n*.DS_STORE\n\ncustom_env.gradle\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.4951171875,
          "content": "# We need sudo to install additional packages.\nsudo: required\n\nlanguage: java\njdk: oraclejdk8\n\nbefore_install:\n  - sudo apt-get update -q\n  - sudo apt-get install -y curl unzip\n  - pip install --user codecov\n  - export ANDROID_HOME=\"$HOME\"/android-sdk\n  - mkdir -p \"$ANDROID_HOME\"\n  - export ANDROID_SDK_FILE_NAME=sdk-tools-linux-3859397.zip\n  - curl --fail https://dl.google.com/android/repository/$ANDROID_SDK_FILE_NAME --silent --location --output $ANDROID_SDK_FILE_NAME\n  - unzip -qq $ANDROID_SDK_FILE_NAME -d \"$ANDROID_HOME\"\n  - rm $ANDROID_SDK_FILE_NAME\n  - export ANDROID_SDK_INSTALL_COMPONENT=\"echo \\\"y\\\" | \\\"$ANDROID_HOME\\\"/tools/bin/sdkmanager > /dev/null\"\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"tools\"'\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"platform-tools\"'\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"build-tools;25.0.2\"'\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"platforms;android-25\"'\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"extras;android;m2repository\"'\n  - eval $ANDROID_SDK_INSTALL_COMPONENT '\"extras;google;m2repository\"'\n\ninstall:\n  - echo \"Override default Travis install step to avoid unnecessary './gradlew assemble'.\"\n\nscript:\n  - ./ci.sh\n  \nafter_success:\n  - codecov\n\ndeploy:\n  - provider: script\n    script: PUBLISH_RELEASE=true ./ci.sh\n    skip_cleanup: true\n    on:\n      tags: true\n\nnotifications:\n  email:\n    recipients:\n      - artem.zinnatullin@gmail.com\n      - nikitin.da.90@gmail.com\n    on_success: never\n    on_failure: always\n\ncache:\n  directories:\n    - $HOME/.m2\n    - $HOME/.gradle\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 27.7900390625,
          "content": "StorIO Change Log\n==========\n\n## Version 3.0.1\n\n_2018_05_09_\n\n* AndroidX support\n* Gradle wrapper 4.10.2\n* Build gradle tools 3.2.1\n* Kotlin 1.2.71\n* Compile sdk 28\n* Support library 28.0.0\n* Dagger 2.18\n* Make GetMandatoryResult operations return nonnull result.\n* Jacoco 0.7.9.\n* Assertj 3.9.0 and Assetj-android 1.2.0.\n* Timber 4.6.0.\n* AutoValue 1.0-rc4 and AutoParcel 0.3.1.\n* Private constructor checker 1.2.0.\n* EqualsVerifier 1.7.8.\n* Gradle Nexus plugin 0.12.0.\n* Nexus publish plugin.\n* `executeSQL()` now for sure can be executed via `asRxCompletable()`.\n\n**Changes:**\n\n* [PR 905](https://github.com/pushtorefresh/storio/pull/905): executeSQL() can be executed via asRxCompletable().\n* [PR 903](https://github.com/pushtorefresh/storio/pull/903): Nexus publish plugin.\n* [PR 901](https://github.com/pushtorefresh/storio/pull/901): Gradle Nexus plugin 0.12.0.\n* [PR 899](https://github.com/pushtorefresh/storio/pull/899): AndroidX support.\n* [PR 898](https://github.com/pushtorefresh/storio/pull/898): Dagger 2.18 and temporary disable SQLDelight.\n* [PR 897](https://github.com/pushtorefresh/storio/pull/897): Compile sdk 28 and support library 28.0.0.\n* [PR 894](https://github.com/pushtorefresh/storio/pull/894): Gradle wrapper 4.10.2, build gradle tools 3.2.1 and Kotlin 1.2.71.\n* [PR 868](https://github.com/pushtorefresh/storio/pull/868): Jacoco 0.7.9.\n* [PR 883](https://github.com/pushtorefresh/storio/pull/883): Make GetMandatoryResult operations return nonnull result.\n* [PR 884](https://github.com/pushtorefresh/storio/pull/884): Assertj 3.9.0 and Assetj-android 1.2.0.\n* [PR 885](https://github.com/pushtorefresh/storio/pull/885): Timber 4.6.0.\n* [PR 886](https://github.com/pushtorefresh/storio/pull/886): AutoValue 1.0-rc4 and AutoParcel 0.3.1.\n* [PR 887](https://github.com/pushtorefresh/storio/pull/887): Private constructor checker 1.2.0 and EqualsVerifier 1.7.8.\n\n## Version 3.0.0\n\n_2017_12_20_\n\n* RxJava2 support :tada::tada::tada:\n* Add `asRxMaybe`.\n* `executeSQL()` now can be executed via `asRxCompletable()`.\n* Add interceptors for ContentResolver.\n* Add ContentResolver sample.\n* Android gradle plugin 3.0.1 and support libraries 27.0.2.\n* Mockito 2.13.0 and Mockito-Kotlin 1.5.0.\n* Add gradle versions plugin.\n* Table generation with few primary keys.\n* Do not publish jar for android modules.\n\n**Migration notes:**\n* `asRxObservable` -> `asRxFlowable` (see [backpressure 2.0](https://github.com/ReactiveX/RxJava/wiki/Backpressure-(2.0))).\n* Get object `asRxFlowable()` and `asRxSingle` return `Optional` of object because RxJava2 [no longer accepts nulls](https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#nulls).\n* You can use `asRxMaybe` to retrieve value without wrapping.\n* `PreparedOperation` takes 3 parameters: `Result` - type of operation result; `WrappedResult` - `Optional` in cases when result may be null, result itself otherwise; `Data` - some operation description that can be used inside interceptor.\n* You can call `DefaultStorIOContentResolver.Builder#addInterceptor(Interceptor)` to log/debug/modify result of any operation (like it was implemented before in `DefaultStorIOSQLite`).\n \n**Changes:**\n\n* [PR 844](https://github.com/pushtorefresh/storio/pull/844): Override Travis install step to avoid unnecessary `./gradlew assemble`.\n* [PR 845](https://github.com/pushtorefresh/storio/pull/845): RxJava2 base support.\n* [PR 848](https://github.com/pushtorefresh/storio/pull/848): Optional for SQLite.\n* [PR 849](https://github.com/pushtorefresh/storio/pull/849): Optional for ContentResolver.\n* [PR 850](https://github.com/pushtorefresh/storio/pull/850): Add ContentResolver sample.\n* [PR 854](https://github.com/pushtorefresh/storio/pull/854): Table generation with few primary keys.\n* [PR 856](https://github.com/pushtorefresh/storio/pull/856): Rewrite optional usage to allow Maybe implementation.\n* [PR 857](https://github.com/pushtorefresh/storio/pull/857): Support io.reactivex.Maybe.\n* [PR 858](https://github.com/pushtorefresh/storio/pull/858): Rename package to storio3.\n* [PR 861](https://github.com/pushtorefresh/storio/pull/861): Fix maven url, update version.\n* [PR 862](https://github.com/pushtorefresh/storio/pull/862): Android gradle plugin 3.0.1.\n* [PR 864](https://github.com/pushtorefresh/storio/pull/864): Add interceptors for ContentResolver.\n* [PR 865](https://github.com/pushtorefresh/storio/pull/865): Add gradle versions plugin.\n* [PR 866](https://github.com/pushtorefresh/storio/pull/866): Mockito 2.13.0 and Mockito-Kotlin 1.5.0.\n* [PR 867](https://github.com/pushtorefresh/storio/pull/867): Kotlin 1.2.0.\n* [PR 870](https://github.com/pushtorefresh/storio/pull/870): Do not publish jar for android modules.\n\n## Version 2.1.0\n\n_2017_10_29_\n\n* Table generation by annotation processor, thanks to @pbochenski and @geralt-encore!\n* Remove exhaustive else from GetResolverGenerator utils.\n* Some improvements in sample-projects, thanks to @ValeriusGC (it took us almost a year to mergeâ€¦)\n* Automated release and CI tweaks.\n\n**Changes:**\n\n* [PR 840](https://github.com/pushtorefresh/storio/pull/840): Table generation by annotation processor, thanks to @pbochenski and @geralt-encore!\n* [PR 835](https://github.com/pushtorefresh/storio/pull/835): Remove exhaustive else from GetResolverGenerator utils.\n* [PR 711](https://github.com/pushtorefresh/storio/pull/711): Improvements in sample-projects thanks @ValeriusGC.\n* [PR 839](https://github.com/pushtorefresh/storio/pull/839): Fix readme links.\n* [PR 841](https://github.com/pushtorefresh/storio/pull/841): Configure all signing params for automated release.\n* [PR 842](https://github.com/pushtorefresh/storio/pull/842): Download Linux Android SDK on Travis instead of macOS.\n* [PR 843](https://github.com/pushtorefresh/storio/pull/843): Minimize deploy logs, close nexus repo after upload.\n\n## Version 2.0.3\n\n_2017_10_16_\n\n* No API/implementation changes, fine-tuning automatic release process.\n\n**Changes:**\n\n* [PR 836](https://github.com/pushtorefresh/storio/pull/836): Do clean release build to exclude Jacoco from jar.\n* [PR 834](https://github.com/pushtorefresh/storio/pull/834): Use environment variable to detect publishing state.\n* [PR 833](https://github.com/pushtorefresh/storio/pull/833): Disable debug builds for library modules.\n\n## Version 2.0.2\n\n_2017_10_16_\n\n* No API/implementation changes, we're fine-tuning automated release process.\n\n## Version 2.0.1\n\n_2017_10_16_\n\n* Add automatic deploy hooks to Travis config.\n* Gradle 4.2.1.\n\n**Changes:**\n\n* [PR 830](https://github.com/pushtorefresh/storio/pull/830): Add automatic deploy hooks to Travis config.\n* [PR 825](https://github.com/pushtorefresh/storio/pull/825): Gradle 4.2.1.\n* [PR 823](https://github.com/pushtorefresh/storio/pull/823): Update readme according to Kotlin integration changes.\n* [PR 829](https://github.com/pushtorefresh/storio/pull/829): Fix test parallelWritesWithoutTransaction.\n* [PR 824](https://github.com/pushtorefresh/storio/pull/824): Fix Travis log overflow.\n\n## Version 2.0.0\n\n_2017_09_12_\n\n* **Interceptors API!** :tada::tada: Many thanks to [@rsinukov](https://github.com/rsinukov)\n* Logging via interceptors (just add `LoggingInterceptor`).\n* Remove deprecated `createObservable` and `internal`. You should use `asRxObservable` and `lowLevel` instead.\n* `mapFromCursor` receives `StorIOSqlite`/`StorIOContentResolver` as parameter.\n* Remove `Query.CompleteBuilder.whereArgs(list)`. Please use vararg overload instead.\n* Add ability to use vals instead of vars in classes for resolver generation.\n* Fix message in case creator parameters do not match columns.\n* Fix case with different classes having fields with the same names.\n* Add SQLDelight interaction example.\n* Gradle 3.5.\n* Checkstyle 7.7.\n* Kotlin 1.1.2.\n* Gradle plugin 2.3.3.\n* Support library 25.3.1.\n* Compile testing tool 0.11.\n\n**Changes:**\n\n* [PR 542](https://github.com/pushtorefresh/storio/pull/542): Interceptors API and `LoggingInterceptor`.\n* [PR 812](https://github.com/pushtorefresh/storio/pull/812): Remove deprecated `createObservable` and `internal`.\n* [PR 817](https://github.com/pushtorefresh/storio/pull/817): Add `storIOSqlite` parameter to get resolver.\n* [PR 818](https://github.com/pushtorefresh/storio/pull/818): Add `storIOContentResolver` parameter to get resolver.\n* [PR 819](https://github.com/pushtorefresh/storio/pull/819): Remove `Query.CompleteBuilder.whereArgs(list)`.\n* [PR 802](https://github.com/pushtorefresh/storio/pull/802): Add ability to use vals instead of vars in classes for resolver generation.\n* [PR 797](https://github.com/pushtorefresh/storio/pull/797): Fix message in case creator parameters do not match columns.\n* [PR 803](https://github.com/pushtorefresh/storio/pull/803): Gradle plugin 2.3.3. Fix case with different classes having fields with the same names.\n* [PR 814](https://github.com/pushtorefresh/storio/pull/814): Add SQLDelight interaction example.\n* [PR 790](https://github.com/pushtorefresh/storio/pull/790): Gradle 3.5, Checkstyle 7.7.\n* [PR 792](https://github.com/pushtorefresh/storio/pull/792): Kotlin 1.1.2.\n* [PR 794](https://github.com/pushtorefresh/storio/pull/794): Support library 25.3.1.\n* [PR 816](https://github.com/pushtorefresh/storio/pull/816): Compile testing tool 0.11.\n\n## Version 1.13.0\n\n_2017_05_15_\n\n* Support for Kotlin properties!\n* Notification tags.\n* Annotation processors in Kotlin.\n* Robolectric 3.3.2.\n* AssertJ 3.6.2.\n* Fix markdown headers.\n\n**Changes:**\n\n* [PR 776](https://github.com/pushtorefresh/storio/pull/776): Support for Kotlin properties.\n* [PR 768](https://github.com/pushtorefresh/storio/pull/768): Notification tags.\n* [PR 775](https://github.com/pushtorefresh/storio/pull/775): Annotation processors in Kotlin.\n* [PR 774](https://github.com/pushtorefresh/storio/pull/774): Robolectric 3.3.2 and AssertJ 3.6.2.\n* [PR 772](https://github.com/pushtorefresh/storio/pull/772): Fix markdown headers.\n\n## Version 1.12.3\n\n_2017_02_19_\n\n* Tests for StorIOSQLiteAnnotationsProcessor with [google compile testing](https://github.com/google/compile-testing). :tada::tada: Great work from [@geralt-encore](https://github.com/geralt-encore)!\n* Tests for StorIOContentResolverAnnotationsProcessor with [google compile testing](https://github.com/google/compile-testing).\n* JavaPoet 1.8. Fixes for [#763](https://github.com/pushtorefresh/storio/issues/763), thanks [@joelpet](https://github.com/joelpet) for reporting.\n* Add to StorIO.LowLevel getter for underlying SQLiteOpenHelper.\n* Fix for [#757](https://github.com/pushtorefresh/storio/issues/757) compilation error after applying column annotation on a private method.\n* Mockito 2.7.7.\n\n**Changes:**\n\n* [PR 760](https://github.com/pushtorefresh/storio/pull/760): Compile testing for StorIOSQLiteAnnotationsProcessor.\n* [PR 761](https://github.com/pushtorefresh/storio/pull/761): Compile testing for StorIOContentResolverAnnotationsProcessor.\n* [PR 763](https://github.com/pushtorefresh/storio/pull/763): JavaPoet 1.8.\n* [PR 706](https://github.com/pushtorefresh/storio/pull/706): Add to StorIO.LowLevel getter for underlying SQLiteOpenHelper.\n* [PR 754](https://github.com/pushtorefresh/storio/pull/754): Fix compilation error after applying column annotation on a private method.\n* [PR 762](https://github.com/pushtorefresh/storio/pull/762): Mockito 2.7.7.\n\n## Version 1.12.2\n\n_2017_01_22_\n\n* Fixes for [#749](https://github.com/pushtorefresh/storio/issues/749), thanks to [@bluebery](https://github.com/bluebery) and [@michaelcarrano](https://github.com/michaelcarrano) for reporting.\n* Fix typo in README. Thanks to [@mikeyxkcd](https://github.com/mikeyxkcd).\n* Gradle 2.2.3.\n* Build tools 25.0.2.\n* Robolectric 3.1.4.\n\n**Changes:**\n\n* [PR 747](https://github.com/pushtorefresh/storio/pull/747): Updated gradle/plugin/tools versions.\n* [PR 748](https://github.com/pushtorefresh/storio/pull/748): Update README.md dependency typo.\n* [PR 750](https://github.com/pushtorefresh/storio/pull/750): Use annotationProcessor instead of apt.\n* [PR 755](https://github.com/pushtorefresh/storio/pull/755): Update readme with annotationProcessor instead of apt.\n* [PR 754](https://github.com/pushtorefresh/storio/pull/754): Fixes for resolver generators.\n\n## Version 1.12.1\n\n_2016_12_29_\n\n* Fixes for AutoValue and Kotlin support in `StorIOSQLiteProcessor` and `StorIOContentResolverProcessor`, thanks to reporters and [@geralt-encore](https://github.com/geralt-encore) and [@hotchemi](https://github.com/hotchemi) for fixes!\n\n**Changes:**\n\n* [PR 743](https://github.com/pushtorefresh/storio/pull/743): Update readme with kapt2 for Kotlin support.\n* [PR 742](https://github.com/pushtorefresh/storio/pull/742): Add missing annotation to Kotlin's example in README.\n* [PR 740](https://github.com/pushtorefresh/storio/pull/740): Mapping parameters by name for Kotlin and AutoValue support.\n* [PR 739](https://github.com/pushtorefresh/storio/pull/739): Fix AutoValue integration.\n\n## Version 1.12.0\n\n_2016_12_7_\n\n* Support for **AutoValue** and **Kotlin** in StorIOSQLiteProcessor and StorIOContentResolverProcessor! :balloon::tada::fireworks: 100500 thanks to [@geralt-encore](https://github.com/geralt-encore)!\n* DefaultStorIOSQLite now combines affected tables from pending changes. **After the end of transaction DefaultStorIOSQLite will send only one notification instead of multiple for every change**.\n* Queries take generic args instead of objects.\n* Add `RawQuery#affectsTables` and `RawQuery#observesTables` that take collection.\n\n**Changes:**\n\n* [PR 720](https://github.com/pushtorefresh/storio/pull/720) Support for AutoValue and Kotlin data classes in StorIOSQLiteProcessor.\n* [PR 725](https://github.com/pushtorefresh/storio/pull/725) Support for AutoValue and Kotlin data classes in StorIOContentResolverProcessor.\n* [PR 726](https://github.com/pushtorefresh/storio/pull/726) Update README with AutoValue and Kotlin examples.\n* [PR 717](https://github.com/pushtorefresh/storio/pull/717) DefaultStorIOSQLite combines affected tables from pending changes.\n* [PR 699](https://github.com/pushtorefresh/storio/pull/699) Queries take generic args instead of objects.\n* [PR 698](https://github.com/pushtorefresh/storio/pull/698) Add RawQuery affectsTables and observesTables that take collection.\n\n## Version 1.11.0\n\n_2016_10_10_\n\n* Basic sample app which depends only on storio-sqlite and storio-annotations. Many thanks to [@skrzyneckik](https://github.com/skrzyneckik)\n* RxJava 1.2.1. Thanks to [@yshrsmz](https://github.com/yshrsmz)\n* Make generated map methods public\n* Placeholders generator allow zero count\n* Remove toast exceptions swallowing in Sample\n\n**Changes:**\n\n* [PR 686](https://github.com/pushtorefresh/storio/pull/686) Basic sample app which depends only on storio-sqlite and storio-annotations\n* [PR 692](https://github.com/pushtorefresh/storio/pull/692) RxJava 1.2.1\n* [PR 674](https://github.com/pushtorefresh/storio/pull/674) Make generated map methods public\n* [PR 676](https://github.com/pushtorefresh/storio/pull/676) Placeholders generator allow zero count\n* [PR 687](https://github.com/pushtorefresh/storio/pull/687) Remove toast exceptions swallowing in Sample\n\n## Version 1.10.0\n\n_2016_07_26_\n\n* Find type mapping among interfaces recursively. Pluggable typemapping!\n* Default scheduler for StorIOSQLite\n* Default scheduler for StorIOContentResolver\n* `ignoreNull` property for annotation processing\n* Generated get resolver supports nulls for boxed types\n\n**Changes:**\n\n* [PR 601](https://github.com/pushtorefresh/storio/pull/601) Find type mapping among interfaces recursively\n* [PR 660](https://github.com/pushtorefresh/storio/pull/660) Default scheduler for StorIOSQLite\n* [PR 661](https://github.com/pushtorefresh/storio/pull/661) Default scheduler for StorIOContentResolver\n* [PR 642](https://github.com/pushtorefresh/storio/pull/642) `ignoreNull` property for annotation processing\n* [PR 643](https://github.com/pushtorefresh/storio/pull/643) Generated get resolver supports nulls for boxed types\n\n## Version 1.9.1\n\n_2016_07_7_\n\n* Gradle 2.1.2\n* RxJava 1.1.6\n* Apt plugin 1.8\n* Add link to [CodeGenUnderStorIO](https://github.com/shivan42/CodeGenUnderStorIO)\n* Backpressure fix in OnSubscribeExecuteAsBlocking\n* Dagger 2.4 in sample app\n\n**Changes:**\n\n* [PR 668](https://github.com/pushtorefresh/storio/pull/668) RxJava 1.1.6\n* [PR 667](https://github.com/pushtorefresh/storio/pull/667) Backpressure fix in OnSubscribeExecuteAsBlocking\n* [PR 665](https://github.com/pushtorefresh/storio/pull/665) Gradle 2.1.2\n* [PR 659](https://github.com/pushtorefresh/storio/pull/659) Apt plugin 1.8\n* [PR 657](https://github.com/pushtorefresh/storio/pull/657) Dagger 2.4 in sample app\n* [PR 655](https://github.com/pushtorefresh/storio/pull/655) Add link to [CodeGenUnderStorIO](https://github.com/shivan42/CodeGenUnderStorIO)\n\n## Version 1.9.0\n\n_2016_05_19_\n\n* `asRxCompletable()`! Thanks to [@geralt-encore](https://github.com/geralt-encore)\n* Gradle Wrapper 2.12\n* RxJava 1.1.3\n* Integration with Codecov.io\n* `StorIOSQLite.LowLevel` instead of `StorIOSQLite.Internal`(deprecated). Feel free to use it!\n\n**Changes:**\n\n* [PR 651](https://github.com/pushtorefresh/storio/pull/651) `RawQuery` arguments are objects instead of strings\n* [PR 650](https://github.com/pushtorefresh/storio/pull/650) RxJava 1.1.3\n* [PR 632](https://github.com/pushtorefresh/storio/pull/632) Gradle Wrapper 2.12\n* [PR 629](https://github.com/pushtorefresh/storio/pull/629) **`asRxCompletable` for `StorIOSQLite`**\n* [PR 633](https://github.com/pushtorefresh/storio/pull/633) **`asRxCompletable` for `StorIOContentResolver`**\n* [PR 630](https://github.com/pushtorefresh/storio/pull/630) Integration CI with Codecov.io\n* [PR 599](https://github.com/pushtorefresh/storio/pull/599) `StorIOSQLite.LowLevel` instead of `StorIOSQLite.Internal` for `StorIOSQLite`\n* [PR 608](https://github.com/pushtorefresh/storio/pull/608) `StorIOSQLite.LowLevel` instead of `StorIOSQLite.Internal` for `StorIOContentResolver`\n\n## Version 1.8.0\n\n_2016_01_19_\n\n* `asRxSingle()`, yep, `rx.Single` support! Many thanks to [@geralt-encore](https://github.com/geralt-encore)\n* `asRxObservable()` instead of `createObservable()` (deprecated)\n\n**Changes:**\n\n* [PR 596](https://github.com/pushtorefresh/storio/pull/596) Test asRxObservable() instead of createObservable() which is now deprecated\n* [PR 594](https://github.com/pushtorefresh/storio/pull/594) Gradle Wrapper 2.10\n* [PR 593](https://github.com/pushtorefresh/storio/pull/593) Enable emails from Travis to react on problems with master branch\n* [PR 592](https://github.com/pushtorefresh/storio/pull/592) Add query to exceptions (significantly helps inspect crashes)\n* [PR 588](https://github.com/pushtorefresh/storio/pull/588) Try to find interface of class when apply mapper\n* [PR 586](https://github.com/pushtorefresh/storio/pull/586) Remove \"final\" from most of the classes (will help with mocking)\n* [PR 585](https://github.com/pushtorefresh/storio/pull/585) Base `executeAsBlocking()` result is nullable\n* [PR 584](https://github.com/pushtorefresh/storio/pull/584) **Add `asRxObservable()`, deprecate createObservable()**\n* [PR 573](https://github.com/pushtorefresh/storio/pull/573) Support for rx.Single\n\n## Version 1.7.0\n\n_2015_12_30_\n\n* Option to get one object for `StorIOSQLite` and `StorIOContentResolver`\n* Handle backpressure for `Get` operation via RxJava (**requires RxJava 1.1.0**)\n* `SQLiteTypeMapping` and `ContentResolverTypeMapping` generation\n* Annotation processor for `StorIOContentResolver`\n* Option to set different uri's for `insert`, `update` and `delete` (`StorIOContentResolver`)\n* `PutResult` and `DeleteResult` now allow `0` updated tables\n* Jacoco is alive!\n* Android Gradle Plugin 1.5.0\n* Gradle wrapper 2.9\n* RxJava 1.1.0\n* SupportLibs 23.1.0\n* **Thanks to [@geralt-encore](https://github.com/geralt-encore) and [@zayass](https://github.com/zayass)!**\n\n**Changes:**\n\n* [PR 574](https://github.com/pushtorefresh/storio/pull/574) `SQLiteTypeMapping` and `ContentResolverTypeMapping` generation\n* [PR 575](https://github.com/pushtorefresh/storio/pull/575) Use force to reanimate Jacoco!\n* [PR 569](https://github.com/pushtorefresh/storio/pull/569) Option to set different uri's for insert, update and delete\n* [PR 572](https://github.com/pushtorefresh/storio/pull/572) Handle backpressure for `Get` operation via RxJava, RxJava 1.1.0\n* [PR 561](https://github.com/pushtorefresh/storio/pull/561) Switch to Android Gradle Plugin 1.5.0\n* [PR 563](https://github.com/pushtorefresh/storio/pull/563) `PreparedGetObject` blocking for `StorIOSQLite`\n* [PR 568](https://github.com/pushtorefresh/storio/pull/568) `PreparedGetObject` as observable for `StorIOSQLite`\n* [PR 565](https://github.com/pushtorefresh/storio/pull/565) `PreparedGetObject` blocking for `StorIOContentResolver`\n* [PR 570](https://github.com/pushtorefresh/storio/pull/570) `PreparedGetObject` as observable for `StorIOContentResolver`\n* [PR 560](https://github.com/pushtorefresh/storio/pull/560) `PutResult` and `DeleteResult` allow `0` updated tables\n* [PR 562](https://github.com/pushtorefresh/storio/pull/562) Switch to Gradle wrapper 2.9\n* [PR 558](https://github.com/pushtorefresh/storio/pull/558) Add module with common annotations processing logic\n* [PR 548](https://github.com/pushtorefresh/storio/pull/548) Add annotation processor for `StorIOContentResolver`\n* [PR 553](https://github.com/pushtorefresh/storio/pull/553) Switch to supportLibs 23.1.0\n\n## Version 1.6.1\n\n_2015_11_7_\n\n* `StorIOContentReslver` fix for observing changes of Uris on Android API < 16\n\n**Changes:**\n\n* [PR 550](https://github.com/pushtorefresh/storio/pull/550) StorIOContentReslver fix for observing changes of Uris on Android API < 16\n\n## Version 1.6.0\n\n_2015_10_19_\n\n* Convert any `Query` back to its `Builder` via `toBuilder()`!\n* Observe all changes in `StorIOSQLite` via `observeChanges()`!\n* Retrieve `ContentResolver` from `StorIOContentResolver` via `StorIOContentResolver.internal().contentResolver()`\n\n**Changes:**\n\n* [PR 544](https://github.com/pushtorefresh/storio/pull/544) Add getter for underlying ContentResolver to the StorIOContentResolver\n* [PR 543](https://github.com/pushtorefresh/storio/pull/543) Add API for observing all changes in StorIOSQLite\n* [PR 539](https://github.com/pushtorefresh/storio/pull/539) Add toBuilder() for queries\n* [PR 538](https://github.com/pushtorefresh/storio/pull/538) Switch back to Android Gradle Plugin 1.3.1\n\n## Version 1.5.0\n\n_2015_10_01_\n\n* `get().numberOfResults()` for both SQLite and ContentResolver!\n* `@CheckResult` annotation for better IDE experience!\n* `insertWithOnConflict()` for StorIOSQLite.\n* We've added example of composite entity!\n\n**Changes:**\n\n* [PR 534](https://github.com/pushtorefresh/storio/pull/534) Add StorIOContentResolver get().numberOfResults()!\n* [PR 533](https://github.com/pushtorefresh/storio/pull/533) Add StorIOSQLite get().numberOfResults()!\n* [PR 531](https://github.com/pushtorefresh/storio/pull/531) Add @CheckResult annotation, makes life in the Android Studio Better!\n* [PR 530](https://github.com/pushtorefresh/storio/pull/530) Add insertWithOnConflict() for StorIOSQLite!\n* [PR 520](https://github.com/pushtorefresh/storio/pull/520) Example of UserWithTweets entity with custom Put/Get/Delete resolvers\n\n## Version 1.4.0\n\n_2015_09_15_\n\n*  `Query.limit()` now accepts integers! Better API for everybody! Thanks @vokilam for the suggestion!\n*  Little fix for the sample app. Thanks @cpeppas!\n\n**Changes:**\n\n* [PR 517](https://github.com/pushtorefresh/storio/pull/517) Limit method accept integer args\n* [PR 514](https://github.com/pushtorefresh/storio/pull/514) adding somebytes column that was missing from CREATE TABLE TweetsTable\n\n## Version 1.3.1\n\n_2015_09_10_\n\n*  Add info about all types of fields supported by StorIO Annotation Processor!\n*  Updated build tools and dependencies! (Gradle Plugin 1.4.0-beta1, sdk 23, RxJava 1.0.14, RxAndroid 1.0.1, Support Libs 23.0.1, Private Constructor Checker 1.1.0, Dagger 2.0.1, ButterKnife 7.0.1)\n*  **Fix SQLiteDatabase.execSQL() without args!**\n\n**Changes:**\n\n* [PR 503](https://github.com/pushtorefresh/storio/pull/503) Annotation processor supported types\n* [PR 504](https://github.com/pushtorefresh/storio/pull/504) New build tools and dependencies\n* [PR 510](https://github.com/pushtorefresh/storio/pull/510) Raw query without arguments fix\n\n## Version 1.3.0\n\n_2015_08_29_\n\n*  **StorIOSQLite Annotation Processor now supports blobs `byte[]`!**\n*  We've added example of relations implementation (R from ORM) to the Sample App!\n\n**Changes:**\n\n* [PR 498](https://github.com/pushtorefresh/storio/pull/498) Add support for `byte[]` into StorIOSQLite annotation processor\n* [PR 494](https://github.com/pushtorefresh/storio/pull/494) Relations example!\n\n\n## Version 1.2.1\n\n_2015_08_17_\n\n*  **`StorIOSQLite`: Remove unnecessary synchronization, prevent possible deadlocks, faster & better!**\n*  **Use AssertJ for test!**\n\n**Changes:**\n\n* [PR 491](https://github.com/pushtorefresh/storio/pull/491) Remove unnecessary synchronization, prevent possible deadlocks, faster & better\n* [PR 490](https://github.com/pushtorefresh/storio/pull/490) Use AssertJ for test\n\n\n## Version 1.2.0\n\n_2015_08_7_\n\n*  **Add `Queries` class with common utils for queries**, now you can generate placeholders!\n\n**Changes:**\n\n* [PR 485](https://github.com/pushtorefresh/storio/pull/485) Add public Queries utils with function for generating placeholders\n\n\n## Version 1.1.2\n\n_2015_08_5_\n\n*  **Fix for possible deadlock because of internal SQLiteDatabase synchronization.** See issue #[481](https://github.com/pushtorefresh/storio/issues/481).\n*  **Thanks to [@tadas-subonis](https://github.com/tadas-subonis)!**\n\n**Changes:**\n\n* [PR 482](https://github.com/pushtorefresh/storio/pull/482) Fix possible deadlock caused by internal synchronization in SQLiteDatabase\n\n\n## Version 1.1.1\n\n_2015_08_4_\n\n*  **Fix for nested transactions in StorIOSQLite.**\n* Switch to PrivateConstructorChecker!\n* Ignore debug buildType for library projects â€” faster CI.\n*  **Thanks to [@tadas-subonis](https://github.com/tadas-subonis)!**\n\n\n**Changes:**\n\n* [PR 479](https://github.com/pushtorefresh/storio/pull/479) Fix ConcurrentModificationException in DefaultStorIOSQLite in case of nested transactions\n* [PR 477](https://github.com/pushtorefresh/storio/pull/477) Switch to PrivateConstructorChecker!\n* [PR 473](https://github.com/pushtorefresh/storio/pull/473) Ignore debug buildType for library projects\n\n## Version 1.1.0\n\n_2015_07_27_\n\n*  **Common StorIOException for all operations** See [448](https://github.com/pushtorefresh/storio/issues/448).\n*  **StorIOContentResolver will throw StorIOException if ContentResolver.query() returns null**\n*  **80% code coverage!**\n* RxJava 1.0.13\n* Robolectric 3.0.0\n\n\n**Changes:**\n\n* [PR 451](https://github.com/pushtorefresh/storio/pull/451) Throw exception if contentResolver.query() returns null\n* [PR 458](https://github.com/pushtorefresh/storio/pull/458) Remove Query.CompleteBuilder.whereArgs(list), it was error in API, sorry guys\n* [PR 460](https://github.com/pushtorefresh/storio/pull/460) 80% code coverage for StorIO-Test-Common\n* [PR 461](https://github.com/pushtorefresh/storio/pull/461) 80% code coverage for StorIO-Common\n* [PR 462](https://github.com/pushtorefresh/storio/pull/462) 80% code coverage for StorIO-Content-Resolver\n* [PR 465](https://github.com/pushtorefresh/storio/pull/465) 80% code coverage for StorIO-SQLite\n* [PR 466](https://github.com/pushtorefresh/storio/pull/466) Switch to Robolectric 3.0\n* [PR 467](https://github.com/pushtorefresh/storio/pull/467) Switch to RxJava v1.0.13\n* [PR 468](https://github.com/pushtorefresh/storio/pull/468) Revert \"Remove Query.CompleteBuilder.whereArgs(list), it was error inâ€¦\n\n\n## Version 1.0.1\n\n_2015-07-21_\n\n*  **PutResult.newUpdateResult() now can be created with 0 updated rows.** See [453](https://github.com/pushtorefresh/storio/issues/453).\n*  **JavaPoet 1.2.**\n*  **Better tests!**\n*  **Better Sample App!**\n\n**Changes:**\n\n* [PR 440](https://github.com/pushtorefresh/storio/pull/440) Fix content resolver tests flakiness.\n* [PR 442](https://github.com/pushtorefresh/storio/pull/442) Pack of improvements for the Sample App.\n* [PR 444](https://github.com/pushtorefresh/storio/pull/444) Switch to JavaPoet v1.2.\n* [PR 454](https://github.com/pushtorefresh/storio/pull/454) Allow PutResult.newUpdateResult() with 0 rows updated.\n\n\n## Version 1.0.0\n\n_2015-06-01_\n\n**Initial release.**\n"
        },
        {
          "name": "CODE_COVERAGE.md",
          "type": "blob",
          "size": 1.7724609375,
          "content": "# Code Coverage Report generation\r\n\r\n# For Android Modules\r\n\r\nHere are some of the andriod modules:\r\n* storio-common\r\n* storio-content-resolver\r\n* storio-sample-app\r\n* storio-sqlite\r\n* storio-test-common\r\n* storio-test-without-rxjava\r\n\r\nTo generate the code coverage report for android modules, execute the following command:\r\n\r\n> Windows: ci.sh\r\n> Linux/Unix/ OSX: ./ci.sh\r\n\r\nThis will generate code coverage report in each of the modules. In order to view the same, open the following file in your browser.\r\n> ROOT/MODULE_NAME/build/reports/jacoco\r\n\r\nPlease note that the above folder is created under each of the modules. For example:\r\n* pushtorefresh-storio/storio-common/build/reports/jacoco/testReleaseUnitTestCoverage/html/index.html\r\n* pushtorefresh-storio/storio-content-resolver/build/reports/jacoco/testReleaseUnitTestCoverage/html/index.html\r\n\r\n# For Non-Android Modules\r\n\r\nHere are some of the non-andriod modules:\r\n* storio-common-annotations-processor\r\n* storio-content-resolver-annotations\r\n* storio-content-resolver-annotations-processor\r\n* storio-sqlite-annotations\r\n* storio-sqlite-annotations-processor\r\n\r\nTo generate the coverage report for non-android modules, execute the following commands at the module's root directory:\r\n\r\n> Windows: gradle jacocoTestReport\r\n> Linux/Unix/ OSX: ./gradle jacocoTestReport\r\n\r\nThis will generate code coverage report in each of the modules. In order to view the same, open the following file in your browser.\r\n> ROOT/MODULE_NAME/build/reports/jacoco\r\n\r\nPlease note that the above folder is created under each of the modules. For example:\r\n* pushtorefresh-storio/storio-common-annotations-processor/build/reports/jacoco/test/index.html\r\n* pushtorefresh-storio/storio-content-resolver-annotations/build/reports/jacoco/testReleaseUnitTestCoverage/html/index.html"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.53125,
          "content": "`Hello, dear developer`\nWe will be happy to see your Pull Request!\n\nActually, we don't want to limit you, so just write clean & good code with tests and everything will be okay :smile:\n\nBut, please first file an issue with feature request or bug report or contact us in existent one before contributing.\n\nAlso: GitHub issues are for feature requests and bug reports only, please ask usages question on StackOverflow.\n\n#### Building project:\n\nTo build and test the project you need to execute:\n```bash\n# from root project directory\nsh ci.sh\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0810546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Pushtorefresh Inc\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5068359375,
          "content": "#### StorIO â€” modern API for SQLiteDatabase and ContentResolver\n\n##### Overview:\n* Powerful & Simple set of Operations: `Put`, `Get`, `Delete`\n* API for Humans: Type Safety, Immutability & Thread-Safety\n* Convenient builders with compile-time guarantees for required params. Forget about 6-7 `null` in queries\n* Optional Type-Safe Object Mapping, if you don't want to work with `Cursor` and `ContentValues` you don't have to\n* No reflection in Operations and no annotations in the core, also `StorIO` is not ORM\n* **Full control** over queries, transaction and object mapping\n* Every Operation over `StorIO` can be executed as blocking call or as `io.reactivex.Flowable`/`io.reactivex.Single`/`io.reactivex.Completable`/`io.reactivex.Maybe`\n* `RxJava` as first class citizen, but it's not required dependency!\n* **Reactive**: `io.reactivex.Flowable` from `Get` Operation **will observe changes** in `StorIO` (`SQLite` or `ContentProvider`) and receive updates automatically\n* `StorIO` is replacements for `SQLiteDatabase` and `ContentResolver` APIs\n* `StorIO` + `RxJava` is replacement for `Loaders` API\n* We are working on `MockStorIO` (similar to [MockWebServer](https://github.com/square/okhttp/tree/master/mockwebserver)) for easy unit testing\n\n----\n\n##### Why StorIO?\n* Simple concept of just three main Operations: `Put`, `Get`, `Delete` -> less bugs\n* Almost everything is immutable and thread-safe -> less bugs\n* Builders for everything make code much, much more readable and obvious -> less bugs\n* Our builders give compile time guarantees for required parameters -> less bugs\n* `StorIO` annotated with `@NonNull` and `@Nullable` annotations -> less bugs\n* Open Source -> less bugs\n* Documentation, Sample app and Design tests -> less bugs\n* `StorIO` has unit and integration tests [![codecov.io](https://codecov.io/github/pushtorefresh/storio/coverage.svg?branch=master)](https://codecov.io/github/pushtorefresh/storio?branch=master) -> less bugs\n* Less bugs -> less bugs\n\n#### Documentation:\n\n* [`Why we made StorIO`](docs/StorIO.md)\n* [`StorIO SQLite`](docs/StorIOSQLite.md)\n* [`StorIO ContentResolver`](docs/StorIOContentResolver.md)\n\nEasy ways to learn how to use `StorIO` -> check out `Documentation`, `Design Tests` and `Sample App`:\n\n* [Design tests for StorIO SQLite](storio-sqlite/src/test/java/com/pushtorefresh/storio3/sqlite/design)\n* [Design tests for StorIO ContentResolver](storio-content-resolver/src/test/java/com/pushtorefresh/storio3/contentresolver/design)\n* [Sample App](storio-sample-app)\n\n#### Download:\n```groovy\n// If you need StorIO for SQLite\nimplementation 'com.pushtorefresh.storio3:sqlite:3.0.1'\n\n// If you need StorIO for ContentResolver\nimplementation 'com.pushtorefresh.storio3:content-resolver:3.0.1'\n\n// Notice that RxJava is optional dependency for StorIO,\n// So if you need it -> please add it manually.\n```\n\nYou can find all releases on [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Ccom.pushtorefresh.storio3).\n\n\n#### Some examples\n\n##### Get list of objects from SQLiteDatabase\n```java\nList<Tweet> tweets = storIOSQLite\n  .get()\n  .listOfObjects(Tweet.class) // Type safety\n  .withQuery(Query.builder() // Query builder\n    .table(\"tweets\")\n    .where(\"author = ?\")\n    .whereArgs(\"artem_zin\") // Varargs Object..., no more new String[] {\"I\", \"am\", \"tired\", \"of\", \"this\", \"shit\"}\n    .build()) // Query is immutable â€” you can save it and share without worries\n  .prepare() // Operation builder\n  .executeAsBlocking(); // Control flow is readable from top to bottom, just like with RxJava\n\n```\n\n##### Put something to SQLiteDatabase\n```java\nstorIOSQLite\n  .put() // Insert or Update\n  .objects(someTweets) // Type mapping!\n  .prepare()\n  .executeAsBlocking();\n```\n\n##### Delete something from SQLiteDatabase\n```java\nstorIOSQLite\n  .delete()\n  .byQuery(DeleteQuery.builder()\n    .table(\"tweets\")\n    .where(\"timestamp <= ?\")\n    .whereArgs(System.currentTimeMillis() - 86400) // No need to write String.valueOf()\n    .build())\n  .prepare()\n  .executeAsBlocking();\n```\n\n#### Reactive? Single.just(true)!\n\n##### Get something as io.reactivex.Flowable and receive updates!\n```java\nstorIOSQLite\n  .get()\n  .listOfObjects(Tweet.class)\n  .withQuery(Query.builder()\n    .table(\"tweets\")\n    .build())\n  .prepare()\n  .asRxFlowable(BackpressureStrategy.LATEST) // Get Result as io.reactivex.Flowable and subscribe to further updates of tables from Query!\n  .observeOn(mainThread()) // All Rx operations work on Schedulers.io()\n  .subscribe(tweets -> { // Please don't forget to dispose\n  \t  // Will be called with first result and then after each change of tables from Query\n  \t  // Several changes in transaction -> one notification\n  \t  adapter.setData(tweets);\n  \t}\n  );\n```\n\n##### Want to work with plain Cursor, no problems\n```java\nCursor cursor = storIOSQLite\n  .get()\n  .cursor()\n  .withQuery(Query.builder() // Or RawQuery\n    .table(\"tweets\")\n    .where(\"who_cares = ?\")\n    .whereArgs(\"nobody\")\n    .build())\n  .prepare()\n  .executeAsBlocking();\n```\n\n#### How object mapping works?\n##### You can set default type mappings when you build instance of `StorIOSQLite` or `StorIOContentResolver`\n\n```java\nStorIOSQLite storIOSQLite = DefaultStorIOSQLite.builder()\n  .sqliteOpenHelper(someSQLiteOpenHelper)\n  .addTypeMapping(Tweet.class, SQLiteTypeMapping.<Tweet>builder()\n    .putResolver(new TweetPutResolver()) // object that knows how to perform Put Operation (insert or update)\n    .getResolver(new TweetGetResolver()) // object that knows how to perform Get Operation\n    .deleteResolver(new TweetDeleteResolver())  // object that knows how to perform Delete Operation\n    .build())\n  .addTypeMapping(...)\n  // other options\n  .build(); // This instance of StorIOSQLite will know how to work with Tweet objects\n```\n\nYou can override Operation Resolver per each individual Operation, it can be useful for working with `SQL JOIN`.\n\n---\n\nTo **save you from coding boilerplate classes** we created **Annotation Processor** which will generate `PutResolver`, `GetResolver` and `DeleteResolver` at compile time, you just need to use generated classes\n\n*Notice that annotation processors are not part of the library core, you can work with StorIO without them, we just made them to save you from boilerplate*.\n\n`StorIOSQLite`:\n```groovy\ndependencies {\n  implementation 'com.pushtorefresh.storio3:sqlite-annotations:insert-latest-version-here'\n\n  annotationProcessor 'com.pushtorefresh.storio3:sqlite-annotations-processor:insert-latest-version-here'\n}\n```\n\n`StorIOContentResolver`:\n```groovy\ndependencies {\n  implementation 'com.pushtorefresh.storio3:content-resolver-annotations:insert-latest-version-here'\n\n  annotationProcessor 'com.pushtorefresh.storio3:content-resolver-annotations-processor:insert-latest-version-here'\n}\n```\n\n```java\n@StorIOSQLiteType(table = \"tweets\")\npublic class Tweet {\n\n  // Annotated fields should have package-level visibility.\n  @StorIOSQLiteColumn(name = \"author\")\n  String author;\n\n  @StorIOSQLiteColumn(name = \"content\")\n  String content;\n\n  // Please leave default constructor with package-level visibility.\n  Tweet() {}\n}\n```\n\n`Kotlin`:\n\nIn order to make annotation processors work with Kotlin you need to add the following to your `build.gradle`:\n```groovy\napply plugin: 'kotlin-kapt'\n```\nThen use `kapt` configuration instead of `annotationProcessor`.\n ```kotlin\n @StorIOSQLiteType(table = \"tweets\")\n data class Tweet @StorIOSQLiteCreator constructor(\n        StorIOSQLiteColumn(name = \"author\") val author: String,\n        StorIOSQLiteColumn(name = \"content\") val content: String)\n ```\n\n[`AutoValue`](https://github.com/google/auto/blob/master/value/userguide/index.md):\n```java\n@AutoValue\n@StorIOSQLiteType(table = \"tweets\")\npublic abstract class Tweet {\n\n  // Annotated methods should have package-level or public visibility.\n  @StorIOSQLiteColumn(name = \"author\")\n  abstract String author();\n\n  @StorIOSQLiteColumn(name = \"content\")\n  abstract String content();\n\n  // Parameters order depends on declaration order.\n  @StorIOSQLiteCreator\n  static Tweet create(String author, String content) {\n    return new AutoValue_Tweet(author, content);\n  }\n}\n```\n\nAnnotation Processor will generate three classes in same package as annotated class during compilation:\n\n* `TweetStorIOSQLitePutResolver`\n* `TweetStorIOSQLiteGetResolver`\n* `TweetStorIOSQLiteDeleteResolver`\n\nYou just need to apply them:\n\n```java\nStorIOSQLite storIOSQLite = DefaultStorIOSQLite.builder()\n  .sqliteOpenHelper(someSQLiteOpenHelper)\n  .addTypeMapping(Tweet.class, SQLiteTypeMapping.<Tweet>builder()\n    .putResolver(new TweetStorIOSQLitePutResolver()) // object that knows how to perform Put Operation (insert or update)\n    .getResolver(new TweetStorIOSQLiteGetResolver()) // object that knows how to perform Get Operation\n    .deleteResolver(new TweetStorIOSQLiteDeleteResolver())  // object that knows how to perform Delete Operation\n    .build())\n  .addTypeMapping(...)\n  // other options\n  .build(); // This instance of StorIOSQLite will know how to work with Tweet objects\n```\n\nBTW: [Here is a class](storio-sample-app/src/main/java/com/pushtorefresh/storio3/sample/db/entities/AllSupportedTypes.java) with all types of fields, supported by StorIO SQLite Annotation Processor.\n\nFew tips about Operation Resolvers:\n\n* If your entities are immutable or they have builders or they use AutoValue/AutoParcel -> write your own Operation Resolvers\n* If you want to write your own Operation Resolver -> take a look at Default Operation resolvers, they can fit your needs\n* Via custom Operation Resolvers you can implement any Operation as you want -> store one object in multiple tables, use custom sql things and so on\n\nAPI of `StorIOContentResolver` is same.\n\n----\n\n#### Versioning:\nBecause StorIO works with important things like User data and so on, we use Semantic Versioning 2.0.0 scheme for releases (http://semver.org).\n\nShort example:\n`1.2.3` -> `MAJOR.MINOR.PATCH`\n\n* `MAJOR` version changes when we make incompatible API changes.\n* `MINOR` version changes when we add functionality in a backwards-compatible manner.\n* `PATCH` version changes when we make backwards-compatible bug fixes.\n\nPlease read [`CHANGELOG`](CHANGELOG.md) and check what part of the version has changed, before switching to new version.\n\n#### Architecture:\n`StorIOSQLite` and `StorIOContentResolver` â€” are abstractions with default implementations: `DefaultStorIOSQLite` and `DefaultStorIOContentResolver`.\n\nIt means, that you can have your own implementation of `StorIOSQLite` and `StorIOContentResolver` with custom behavior, such as memory caching, verbose logging and so on or mock implementation for unit testing (we are working on `MockStorIO`).\n\nOne of the main goals of `StorIO` â€” clean API for Humans which will be easy to use and understand, that's why `StorIOSQLite` and `StorIOContentResolver` have just several methods, but we understand that sometimes you need to go under the hood and `StorIO` allows you to do it: `StorIOSQLite.LowLevel` and `StorIOContentResolver.LowLevel` encapsulates low-level methods, you can use them if you need, but please try to avoid it.\n\n#### Queries\n\nAll `Query` objects are immutable, you can share them safely.\n\n#### Concept of Prepared Operations\nYou may notice that each Operation (Get, Put, Delete) should be prepared with `prepare()`. `StorIO` has an entity called `PreparedOperation`, and you can use them to perform group execution of several Prepared Operations or provide `PreparedOperation` as a return type of your API (for example in Model layer) and client will decide how to execute it: `executeAsBlocking()` or `asRxFlowable()`. Also, Prepared Operations might be useful for ORMs based on `StorIO`.\n\nYou can customize behavior of every Operation via `Resolvers`: `GetResolver`, `PutResolver`, `DeleteResolver`.\n\n#### Rx Support Design\nEvery Operation can be executed as `io.reactivex.Flowable`, `io.reactivex.Single`, `io.reactivex.Completable` or `io.reactivex.Maybe`. Get Operations will be automatically subscribed to the updates of the data.\nEvery rx operation runs on `Schedulers.io()`. You can change it by `defaultRxScheduler()` or set it to `null` to execute on current thread.\n\n#### 3rd party additions/integrations for StorIO\n\n* [CodeGenUnderStorIO](https://github.com/shivan42/CodeGenUnderStorIO) allows you generate Java classes for db entities from the db schema built in some visual editor.\n\n----\nMaster branch build status: [![Master branch build status](https://travis-ci.org/pushtorefresh/storio.svg?branch=master)](https://travis-ci.org/pushtorefresh/storio)\n\n\n**Made with love** in [Pushtorefresh.com](https://pushtorefresh.com) by [@artem_zin](https://twitter.com/artem_zin), [@nikitin-da](https://github.com/nikitin-da) and [@geralt-encore](https://github.com/geralt-encore)\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 10.81640625,
          "content": "import org.gradle.internal.jvm.Jvm\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.2.71'   // https://github.com/JetBrains/kotlin/releases\n    repositories {\n        jcenter()\n        google()\n        maven { url \"https://plugins.gradle.org/m2/\" }\n    }\n\n    dependencies {\n        // Android Gradle plugin\n        classpath 'com.android.tools.build:gradle:3.2.1'\n\n        // Jacoco Test Coverage Plugin\n        // (addition to standard Jacoco plugin, allows us fail the build if coverage is not enough)\n        // https://github.com/palantir/gradle-jacoco-coverage\n        classpath 'com.palantir:jacoco-coverage:0.2.0'\n\n        // Kotlin\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n        // Automatic releases to Sonatype.\n        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0'     // https://github.com/Codearte/gradle-nexus-staging-plugin/releases\n        classpath \"de.marcphilipp.gradle:nexus-publish-plugin:0.1.1\"                // https://github.com/marcphilipp/nexus-publish-plugin/releases\n\n//        classpath 'com.squareup.sqldelight:gradle-plugin:1.0.0-rc2'\n\n        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n\n    // Workaround for preventing Gradle from stealing focus from other apps\n    // https://gist.github.com/artem-zinnatullin/4c250e04636e25797165\n    tasks.withType(JavaForkOptions) {\n        jvmArgs '-Djava.awt.headless=true'\n    }\n}\n\next {\n    compileSdkVersion = 28\n    minSdkVersion = 14\n}\n\ndef supportLibsVersion = '28.0.0'\ndef daggerVersion = '2.18'\n\next.libraries = [\n        // Core libraries\n        supportAnnotations                       : 'com.android.support:support-annotations:' + supportLibsVersion,\n\n        rxJava2                                  : 'io.reactivex.rxjava2:rxjava:2.1.6',\n        rxAndroid2                               : 'io.reactivex.rxjava2:rxandroid:2.0.1',\n        kotlinStdLib                             : \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\",\n\n        // Parts of StorIO\n        storIOCommon                             : project(':storio-common'),\n        storIOSQLite                             : project(':storio-sqlite'),\n        storIOContentResolver                    : project(':storio-content-resolver'),\n        storIOSQLiteAnnotations                  : project(':storio-sqlite-annotations'),\n        storIOContentResolverAnnotations         : project(':storio-content-resolver-annotations'),\n        storIOCommonAnnotationsProcessor         : project(':storio-common-annotations-processor'),\n        storIOSQLiteAnnotationsProcessor         : project(':storio-sqlite-annotations-processor'),\n        storIOContentResolverAnnotationsProcessor: project(':storio-content-resolver-annotations-processor'),\n        storIOTestCommon                         : project(':storio-test-common'),\n\n        // Libraries for tests and sample app\n        junit                                    : 'junit:junit:4.12',\n        assertJ                                  : 'org.assertj:assertj-core:3.9.0',                                    // http://joel-costigliola.github.io/assertj/assertj-core-news.html\n        assertJAndroid                           : 'com.squareup.assertj:assertj-android:1.2.0',                        // https://github.com/square/assertj-android/blob/master/CHANGELOG.md\n        mockitoCore                              : 'org.mockito:mockito-core:2.13.0',                                   // https://github.com/mockito/mockito/blob/release/2.x/doc/release-notes/official.md\n        mockitoKotlin                            : 'com.nhaarman:mockito-kotlin:1.5.0',                                 // https://github.com/nhaarman/mockito-kotlin/releases\n\n        equalsVerifier                           : 'nl.jqno.equalsverifier:equalsverifier:1.7.8',                       // http://jqno.nl/equalsverifier/changelog/#1.x\n        privateConstructorChecker                : 'com.pushtorefresh.java-private-constructor-checker:checker:1.2.0',  // https://github.com/pushtorefresh/java-private-constructor-checker/blob/master/CHANGELOG.md\n        guava                                    : 'com.google.guava:guava:18.0',\n        robolectric                              : 'org.robolectric:robolectric:3.5.1',\n        googleTestingCompile                     : 'com.google.testing.compile:compile-testing:0.15',\n\n        dagger                                   : 'com.google.dagger:dagger:' + daggerVersion,\n        daggerCompiler                           : 'com.google.dagger:dagger-compiler:' + daggerVersion,\n\n        javaxInject                              : 'javax.inject:javax.inject:1',\n        javaxAnnotationApi                       : 'javax.annotation:javax.annotation-api:1.2',\n\n        butterKnife                              : \"com.jakewharton:butterknife:7.0.1\",\n        appCompat                                : \"com.android.support:appcompat-v7:$supportLibsVersion\",\n        recyclerView                             : \"com.android.support:recyclerview-v7:$supportLibsVersion\",\n        appCompatX                               : \"androidx.appcompat:appcompat:1.0.0\",\n        recyclerViewX                            : \"androidx.recyclerview:recyclerview:1.0.0\",\n\n        timber                                   : \"com.jakewharton.timber:timber:4.6.0\",                               // https://github.com/JakeWharton/timber/blob/master/CHANGELOG.md\n        leakCanary                               : \"com.squareup.leakcanary:leakcanary-android:1.5.4\",                  // https://github.com/square/leakcanary/blob/master/CHANGELOG.md\n        leakCanaryNoOp                           : \"com.squareup.leakcanary:leakcanary-android-no-op:1.5.4\",\n        sqlDelight                               : \"com.squareup.sqldelight:runtime:0.6.1\",\n\n        javaPoet                                 : 'com.squareup:javapoet:1.8.0',\n        intellijAnnotations                      : 'com.intellij:annotations:12.0',\n        runtimeJar                               : files(getRuntimeJar()),\n        toolsJar                                 : files(Jvm.current().getToolsJar()),\n\n        autoService                              : \"com.google.auto.service:auto-service:1.0-rc4\",                      // https://github.com/google/auto/releases\n        autoValue                                : \"com.google.auto.value:auto-value:1.3\",\n        autoParcel                               : \"com.github.frankiesardo:auto-parcel:0.3.1\",                         // https://github.com/frankiesardo/auto-parcel/releases\n        autoParcelProcessor                      : \"com.github.frankiesardo:auto-parcel-processor:0.3.1\"\n]\n\ndef getRuntimeJar() {\n    try {\n        final File javaBase = new File(System.getProperty(\"java.home\")).getCanonicalFile();\n        File runtimeJar = new File(javaBase, \"lib/rt.jar\");\n        if (runtimeJar.exists()) {\n            return runtimeJar;\n        }\n        runtimeJar = new File(javaBase, \"jre/lib/rt.jar\");\n        return runtimeJar.exists() ? runtimeJar : null;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}\n\n// Option to disable Pre-Dexing on CI env\nproject.ext.preDexLibs = !project.hasProperty('disablePreDex')\n\nsubprojects {\n    apply plugin: 'com.github.ben-manes.versions'\n\n    project.plugins.whenPluginAdded { plugin ->\n        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)\n                || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {\n\n            // enable or disable pre-dexing\n            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs\n\n            // treat all Android Lint warning in all sub-projects as errors\n            project.android.lintOptions.warningsAsErrors = true\n\n            // StorIO should support Java 6\n            project.android.compileOptions.sourceCompatibility = JavaVersion.VERSION_1_6\n            project.android.compileOptions.targetCompatibility = JavaVersion.VERSION_1_6\n\n            project.android.testOptions.unitTests.all {\n                testLogging {\n                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'\n                    exceptionFormat 'full'\n                }\n            }\n        }\n\n        // Ignore 'debug' buildType for library projects\n        // Because we don't have debug-specific code and we don't need to build debug variants\n        // https://gist.github.com/artem-zinnatullin/ec3bce6dcb2cd524c435\n        if ('com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {\n            project.android.variantFilter {\n                if (it.buildType.name.equals('debug')) {\n                    it.ignore = true\n                }\n            }\n        }\n    }\n}\n\ndef gitTag() {\n    def tag = 'git tag --list --points-at HEAD'.execute((List) null, rootProject.projectDir).text.trim()\n\n    if (tag.split(System.lineSeparator()).length > 1) {\n        throw new IllegalStateException(\"gitTag is accessed but commit has multiple tags: $tag\")\n    }\n\n    return tag\n}\n\ndef projectVersion() {\n    def tag = gitTag()\n\n    if (tag.startsWith('v')) {\n        return tag.substring(1)\n    } else if (tag.isEmpty()) {\n        return 'development'\n    }\n\n    return tag\n}\n\ndef validateTagAndVersion() {\n    if (gitTag().isEmpty()) {\n        throw new IllegalStateException('Publishing is not allowed because current commit has no tag')\n    }\n\n    if (projectVersion().isEmpty()) {\n        throw new IllegalStateException('Publishing is not allowed because current projectVersion is empty')\n    }\n\n    if ('development'.equals(projectVersion())) {\n        throw new IllegalStateException('Publishing is not allowed because current projectVersion is \"development\"')\n    }\n}\n\ndef isValidReleaseState() {\n    if ('true' != System.getenv('PUBLISH_RELEASE')) {\n        return false\n    }\n\n    try {\n        validateTagAndVersion()\n        return true\n    } catch (Exception e) {\n        return false\n    }\n}\n\next.VERSION_NAME = projectVersion()\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : 'https://oss.sonatype.org/content/repositories/snapshots/'\n}\n\ndef getRepositoryUsername() {\n    return System.getenv('SONATYPE_USERNAME')\n}\n\ndef getRepositoryPassword() {\n    return System.getenv('SONATYPE_PASSWORD')\n}\n\napply plugin: 'io.codearte.nexus-staging'\n\nnexusStaging {\n    packageGroup = 'com.pushtorefresh'\n    username = getRepositoryUsername()\n    password = getRepositoryPassword()\n}\n"
        },
        {
          "name": "build.workaround-missing-resource.gradle",
          "type": "blob",
          "size": 1.1962890625,
          "content": "// Source - https://github.com/nenick/AndroidStudioAndRobolectric/blob/master/app/build.workaround-missing-resource.gradle\n// Workaround for missing test resources when running unit tests within android studio.\n// This copies the test resources next to the test classes for each variant.\n// Tracked at https://github.com/nenick/AndroidStudioAndRobolectric/issues/7\n// Original solution comes from https://code.google.com/p/android/issues/detail?id=136013#c10\n// See also https://code.google.com/p/android/issues/detail?id=64887\ngradle.projectsEvaluated {\n  // Base path which is recognized by android studio.\n  def testClassesPath = \"${buildDir}/intermediates/\"\n  // Copy must be done for each variant.\n  def variants = android.libraryVariants.collect()\n\n  variants.each { variant ->\n    def variationName = variant.name.capitalize()\n    def variationPath = variant.buildType.name\n\n    // Specific copy task for each variant\n    def copyTestResourcesTask = project.tasks.create(\"copyTest${variationName}Resources\", Copy)\n    copyTestResourcesTask.from(\"${projectDir}/src/test/resources\")\n    copyTestResourcesTask.into(\"${testClassesPath}/sourceFolderJavaResources/${variationPath}\")\n    copyTestResourcesTask.execute()\n  }\n}"
        },
        {
          "name": "checkstyle",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 2.1005859375,
          "content": "#!/bin/bash\nset -e\n\n# You can run it from any directory.\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nPROJECT_DIR=\"$DIR\"\n\npushd \"$PROJECT_DIR\"\n\n# Export \"PUBLISH_RELEASE=true\" to initiate release process.\nif [ \"$PUBLISH_RELEASE\" != \"true\" ]; then\n    echo \"Running non-release build...\".\n\n    # For some reason test for annotation processor are failing on a regular CI setup.\n    # So we had to exclude test task for it from the main build process and execute it as a separate command.\n    ./gradlew clean build checkstyle -PdisablePreDex --exclude-task :storio-sqlite-annotations-processor-test:test --exclude-task :storio-content-resolver-annotations-processor-test:test\n    ./gradlew :storio-sqlite-annotations-processor-test:test\n    ./gradlew :storio-content-resolver-annotations-processor-test:test\nelse\n    echo \"Launching release publishing process...\"\n\n    if [ -z \"$GPG_SECRET_KEYS\" ]; then\n        echo \"Put base64 encoded gpg secret key for signing into GPG_SECRET_KEYS env variable.\"\n        exit 1\n    fi\n\n    if [ -z \"$GPG_OWNERTRUST\" ]; then\n        echo \"Put base64 encoded gpg ownertrust for signing into GPG_OWNERTRUST env variable.\"\n        exit 1\n    fi\n\n    if [ -z \"$GPG_KEY_ID\" ]; then\n        echo \"Put GPG key id into GPG_KEY_ID env variable.\"\n        exit 1\n    fi\n\n    if [ -z \"$GPG_PASSPHRASE\" ]; then\n        echo \"Put GPG passphrase into GPG_PASSPHRASE env variable.\"\n        exit 1\n    fi\n\n    set +e\n    echo \"$GPG_SECRET_KEYS\" | base64 --decode | gpg --import\n    gpg_import_result=$?\n    set -e\n\n    # Code '2' means that keys were already in local keychain.\n    if [ \"$gpg_import_result\" == \"0\" ] || [ \"$gpg_import_result\" == \"2\" ]; then\n        echo \"GPG keys imported successfully.\"\n    else\n        echo \"Failed to import GPG keys.\"\n        exit 1\n    fi\n\n    echo 'Importing GPG ownertrust...'\n    echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust;\n    echo 'GPG ownertrust imported successfully.'\n\n    ./gradlew clean uploadArchives closeAndReleaseRepository -Psigning.keyId=\"$GPG_KEY_ID\" -Psigning.password=\"$GPG_PASSPHRASE\" -Psigning.secretKeyRingFile=\"$HOME/.gnupg/secring.gpg\"\nfi\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7041015625,
          "content": "VERSION_CODE=31\nGROUP=com.pushtorefresh.storio3\n\nPOM_DESCRIPTION=Modern API for SQLiteDatabase and ContentResolver\nPOM_URL=https://github.com/pushtorefresh/storio\nPOM_SCM_URL=https://github.com/pushtorefresh/storio\nPOM_SCM_CONNECTION=scm:git@github.com:pushtorefresh/storio.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:pushtorefresh/storio.git\nPOM_LICENCE_NAME=Apache License Version 2.0\nPOM_LICENCE_URL=https://github.com/pushtorefresh/storio/blob/master/LICENSE.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=pushtorefresh\nPOM_DEVELOPER_NAME=Pushtorefresh\n\nRELEASE_REPOSITORY_URL=https://oss.sonatype.org/service/local/staging/deploy/maven2/\nSNAPSHOT_REPOSITORY_URL=https://oss.sonatype.org/content/repositories/snapshots\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.20703125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.6162109375,
          "content": "include ':storio-common'\ninclude ':storio-test-common'\ninclude ':storio-sqlite'\ninclude ':storio-content-resolver'\n\ninclude ':storio-sqlite-annotations'\ninclude ':storio-content-resolver-annotations'\n\ninclude ':storio-common-annotations-processor'\ninclude ':storio-sqlite-annotations-processor'\ninclude ':storio-sqlite-annotations-processor-test'\ninclude ':storio-sqlite-annotations-processor-androidx-test'\ninclude ':storio-content-resolver-annotations-processor'\ninclude ':storio-content-resolver-annotations-processor-test'\n\ninclude ':storio-test-without-rxjava'\n\ninclude ':storio-basic-sample-app'\ninclude ':storio-sample-app'\n"
        },
        {
          "name": "storio-basic-sample-app",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-common-annotations-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-content-resolver-annotations-processor-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-content-resolver-annotations-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-content-resolver-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-content-resolver",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-sample-app",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-sqlite-annotations-processor-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-sqlite-annotations-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-sqlite-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-sqlite",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-test-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "storio-test-without-rxjava",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}