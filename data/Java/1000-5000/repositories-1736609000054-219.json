{
  "metadata": {
    "timestamp": 1736609000054,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Piasy/BigImageViewer",
      "stars": 3983,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": "**.iml\n.idea\n.gradle\n/local.properties\nbintray.properties\n.DS_Store\n**/build\n/captures\n\n.buckd\n.okbuck\nbuck-out\n.buckconfig\n.buckconfig.local\n**/BUCK\n"
        },
        {
          "name": "BigImageViewer",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.5087890625,
          "content": "# Change log\n\n+ v1.8.1\n  - Fix mime type when save image to gallery;\n+ v1.8.0\n  - Migrate to MavenCentral;\n+ v1.7.1\n  - Fix webp type check bug;\n+ v1.7.0\n  - Remove android-gif-drawable dependency\n+ v1.6.5\n  - Fix the CloseableReference not closed problem, #196;\n+ v1.6.4\n  - Minor opt;\n+ v1.6.3\n  - Fix Android 10 issue for Scoped Storage, #193\n+ v1.6.2\n  - Update dependencies, fix #184\n+ v1.6.1\n  - Update click handling, fix #180\n+ v1.6.0\n  - Experimental support for shared element transition\n+ v1.5.7\n  - Add `ImageLoader.cancelAll()` to allow APP cancel all flying requests, avoiding memory leak;\n+ v1.5.6\n  - Replace deprecated Glide SimpleTarget, #131\n  - Fix NPE when thumbnail scale type not specified, #130\n+ v1.5.5\n  - Migrate to Android X\n+ v1.5.4\n  - Add thumbnail scale type attribute\n+ v1.5.3\n  - Determine still/animated webp, show still webp with SSIV\n  - Use ImageView to display animated webp rather than leave it blank when using GlideImageLoader\n+ v1.5.2\n  - Support custom Glide components\n+ v1.5.1\n  - Fix #110, click listener bug\n+ v1.5.0\n  - Gif support, cheers~ 🍻\n  - Move thumbnail view creation from `ImageLoader` into `ImageViewFactory`\n+ v1.4.7\n  - Fix #91\n+ v1.4.6\n  - Remove commons-io dependency\n+ v1.4.5\n  - Add `cancel` method\n  - Auto cancel when detach from window to fix memory leak\n+ v1.4.4\n  - Add `INIT_SCALE_TYPE_START` scale type\n  - Rename `INIT_SCALE_TYPE_AUTO` to `INIT_SCALE_TYPE_CUSTOM`\n+ v1.4.3\n  - Fix #72: allow disable tap to retry fail image\n+ v1.4.2\n  - Fix crash when pass attr to SSIV in some case\n+ v1.4.1\n  - Remove logging\n  - Update dependencies\n+ v1.4.0\n  - Upgrade to Glide 4.x\n  - Update min sdk version to 14 according to Glide 4.x\n+ v1.3.2\n  - Fix Android Studio preview issue\n+ v1.3.1\n  - Fix NPE when no failure image specified\n  - Support custom SSIV\n+ v1.3.0\n  - Add events callback for library user\n  - Support failure image, and tap-to-reload\n  - `currentImageFile` -> `getCurrentImageFile`\n+ v1.2.9\n  - Add access to the internal SSIV, #42\n+ v1.2.8\n  - Update fresco to v1.2.0, #41\n+ v1.2.7\n  - Allow disable display optimization, #35, #38\n+ v1.2.6\n  - Fix #37\n+ v1.2.5\n  - let users handle permission check\n  - animate to hide thumbnail image\n+ v1.2.4\n  - fix crash, thanks YOLO\n+ v1.2.3\n  - add initScaleType\n+ v1.2.2\n  - Fix #16\n+ v1.2.1\n  - Change minSdkVersion to 10\n+ v1.2.0\n  - Add progress and thumbnail support\n+ v1.1.3\n  - Play auto scale animation only when showing long image\n+ v1.1.2\n  - Optimize image display effect, including long image support\n  - Save image file to gallery\n"
        },
        {
          "name": "FrescoImageLoader",
          "type": "tree",
          "content": null
        },
        {
          "name": "FrescoImageViewFactory",
          "type": "tree",
          "content": null
        },
        {
          "name": "GlideImageLoader",
          "type": "tree",
          "content": null
        },
        {
          "name": "GlideImageViewFactory",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2018 Piasy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "ProgressPieIndicator",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.330078125,
          "content": "# BigImageViewer\n\n<img src=\"art/Logotype_primary.png\" width=\"70%\" height=\"70%\"/>\n\nBig image viewer supporting pan and zoom, with very little memory usage and full\nfeatured image loading choices. Powered by [Subsampling Scale Image\nView](https://github.com/davemorrissey/subsampling-scale-image-view),\n[Fresco](https://github.com/facebook/fresco),\n[Glide](https://github.com/bumptech/glide), and\n[Picasso](https://github.com/square/picasso). Even with gif and webp support!\n\n## Demo\n\n![memory usage](art/android_studio_memory_monitor.png)\n\npan and zoom               |  gif support\n:-------------------------:|:-------------------------:\n![demo](art/fresco_big_image_viewer_demo.gif)  |  ![gif support](art/biv_gif_support.gif)\n\n## Getting started\n\n### Add the dependencies\n\n**Note: please put this download url at the first of your `repositories` part, otherwise, gradle may search in wrong place.**\n\n``` gradle\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n\nimplementation 'com.github.piasy:BigImageViewer:1.8.1'\n\n// load with fresco\nimplementation 'com.github.piasy:FrescoImageLoader:1.8.1'\n\n// load with glide\nimplementation 'com.github.piasy:GlideImageLoader:1.8.1'\n\n// progress pie indicator\nimplementation 'com.github.piasy:ProgressPieIndicator:1.8.1'\n\n// support thumbnail, gif and webp with Fresco\nimplementation 'com.github.piasy:FrescoImageViewFactory:1.8.1'\n\n// support thumbnail and gif with Glide\nimplementation 'com.github.piasy:GlideImageViewFactory:1.8.1'\n```\n\n### Initialize\n\n``` java\n// MUST use app context to avoid memory leak!\n// load with fresco\nBigImageViewer.initialize(FrescoImageLoader.with(appContext));\n\n// or load with glide\nBigImageViewer.initialize(GlideImageLoader.with(appContext));\n\n// or load with glide custom component\nBigImageViewer.initialize(GlideCustomImageLoader.with(appContext, CustomComponentModel.class));\n```\n\n**Note that** if you've already used Fresco in your project, please change\n`Fresco.initialize` into `BigImageViewer.initialize`.\n\n### Add the BigImageView to your layout\n\n``` xml\n<com.github.piasy.biv.view.BigImageView\n        android:id=\"@+id/mBigImage\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:failureImage=\"@drawable/failure_image\"\n        app:failureImageInitScaleType=\"center\"\n        app:optimizeDisplay=\"true\"\n        />\n```\n\nYou can disable display optimization using `optimizeDisplay` attribute, or\n`BigImageView.setOptimizeDisplay(false)`, which will disable animation for long\nimage, and the switch between thumbnail and origin image.\n\n### Show the image\n\n``` java\nBigImageView bigImageView = (BigImageView) findViewById(R.id.mBigImage);\nbigImageView.showImage(Uri.parse(url));\n```\n\n## Usage\n\n### Animated image support\n\nSince 1.5.0, BIV support display animated image, e.g. gif and animated webp, to achieve that,\nyou need set a custom `ImageViewFactory` via `biv.setImageViewFactory`:\n\n``` java\n// FrescoImageViewFactory is a prebuilt factory, which use Fresco's SimpleDraweeView\n// to display animated image, both gif and webp are supported.\nbiv.setImageViewFactory(new FrescoImageViewFactory());\n\n// GlideImageViewFactory is another prebuilt factory, which use ImageView to display gif,\n// animated webp is not supported (although it will be displayed with ImageView,\n// but it won't animate).\nbiv.setImageViewFactory(new GlideImageViewFactory());\n```\n\nNode: if the image is not gif or animated webp, then it will be displayed by SSIV,\nthe image type is not determined by its file extension, but by its file header magic code.\n\n### Thumbnail support\n\nTo show a thumbnail before the big image is loaded, you can call below version of `showImage`:\n\n``` java\nbigImageView.showImage(Uri.parse(thumbnail), Uri.parse(url));\n```\n\nNote: make sure that you have already called `setImageViewFactory`.\n\n### Shared element transition support (experimental)\n\nSince 1.6.0, BIV has experimental support for shared element transition,\nbut it has following known issues:\n\n+ The shared image may flicker during enter transition, or become white after return transition,\nwhen using Fresco, see [Fresco issue #1445](https://github.com/facebook/fresco/issues/1445);\n+ The shared image may flicker after return transition, especially after you zoomed SSIV;\n\nYou can play with the demo app to evaluate the shared element transition support.\n\n### Download progress indicator\n\n``` java\nbigImageView.setProgressIndicator(new ProgressPieIndicator());\n```\n\nThere is one built-in indicator, `ProgressPieIndicator`, you can implement your\nown indicator easily, [learn by example](/ProgressPieIndicator).\n\n### Prefetch\n\nYou can prefetch images in advance, so it could be shown immediately when user\nwant to see it.\n\n``` java\nBigImageViewer.prefetch(uris);\n```\n\n### Save image into gallery\n\n``` java\nbigImageView.setImageSaveCallback(new ImageSaveCallback() {\n    @Override\n    public void onSuccess(String uri) {\n        Toast.makeText(LongImageActivity.this,\n                \"Success\",\n                Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onFail(Throwable t) {\n        t.printStackTrace();\n        Toast.makeText(LongImageActivity.this,\n                \"Fail\",\n                Toast.LENGTH_SHORT).show();\n    }\n});\n\n// should be called on worker/IO thread\nbigImageView.saveImageIntoGallery();\n```\n\n### Get current image file\n\n``` java\n// only valid when image file is downloaded.\nFile path = bigImageView.getCurrentImageFile();\n```\n\n### Image init scale type\n\nYou can set the normal image scale type using `initScaleType` attribute, or `setInitScaleType`.\n\n``` java\nmBigImageView.setInitScaleType(BigImageView.INIT_SCALE_TYPE_CENTER_CROP);\n```\n\n| value | effect |\n| ------| ------ |\n| center | Center the image in the view, but perform no scaling. |\n| centerCrop | Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding). The image is then centered in the view. |\n| centerInside | Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding). The image is then centered in the view. |\n| fitCenter | Scales the image so that it fits entirely inside the parent. At least one dimension (width or height) will fit exactly. Aspect ratio is preserved. Image is centered within the parent's bounds. |\n| fitEnd | Scales the image so that it fits entirely inside the parent. At least one dimension (width or height) will fit exactly. Aspect ratio is preserved. Image is aligned to the bottom-right corner of the parent. |\n| fitStart | Scales the image so that it fits entirely inside the parent. At least one dimension (width or height) will fit exactly. Aspect ratio is preserved. Image is aligned to the top-left corner of the parent. |\n| fitXY | Scales width and height independently, so that the image matches the parent exactly. This may change the aspect ratio of the image. |\n| custom | Scale the image so that both dimensions of the image will be equal to or less than the maxScale and equal to or larger than minScale. The image is then centered in the view. |\n| start | Scale the image so that both dimensions of the image will be equal to or larger than the corresponding dimension of the view. The top left is shown. |\n\nNote: SSIV only support centerCrop, centerInside, custom and start, other scale types are\ntreated as centerInside, while other scale types may be used by animated image types.\n\n### Failure image\n\nYou can set a local failure image using `failureImage` attribute, or `setFailureImage`.\n\nIt will displayed using an `ImageView` when the image network request fails. If not specified,\nnothing is displayed when the request fails.\n\n#### Failure image init scale type\n\nYou can set the failure image scale type using `failureImageInitScaleType` attribute,\nor `setFailureImageInitScaleType`.\n\nAny value of [ImageView.ScaleType](https://developer.android.com/reference/android/widget/ImageView.ScaleType.html)\nis valid. Default value is `ImageView.ScaleType.FIT_CENTER`. It will be ignored if there is\nno failure image set.\n\n#### Tap to retry\n\nWhen failure image is specified, you can tap the failure image then it will retry automatically.\nThat's the default behavior, you can change it using `tapToRetry` attribute, or `setTapToRetry`.\n\n### Image load callback\n\nYou can handle the image load response by creating a new `ImageLoader.Callback`\nand overriding the key callbacks\n\n```java\nImageLoader.Callback myImageLoaderCallback = new ImageLoader.Callback() {\n    @Override\n    public void onCacheHit(int imageType, File image) {\n      // Image was found in the cache\n    }\n\n    @Override\n    public void onCacheMiss(int imageType, File image) {\n      // Image was downloaded from the network\n    }\n\n    @Override\n    public void onStart() {\n      // Image download has started\n    }\n\n    @Override\n    public void onProgress(int progress) {\n      // Image download progress has changed\n    }\n\n    @Override\n    public void onFinish() {\n      // Image download has finished\n    }\n\n    @Override\n    public void onSuccess(File image) {\n      // Image was retrieved successfully (either from cache or network)\n    }\n\n    @Override\n    public void onFail(Exception error) {\n      // Image download failed\n    }\n}\n```\n\nThen setting it as the image load callback\n\n```java\nmBigImageView.setImageLoaderCallback(myImageLoaderCallback);\n```\n\nThe `onSuccess(File image)` is always called after the image was retrieved\nsuccessfully whether from the cache or the network.\n\nFor an example, see ImageLoaderCallbackActivity.java\n\n### Cancel image loading\n\nBIV will cancel image loading automatically when detach from window, you can also call `cancel`\nto cancel it manually.\n\nYou can also call `BigImageViewer.imageLoader().cancelAll();` in an appropriate time,\ne.g. Activity/Fragment's `onDestroy` callback, to cancel all flying requests, avoiding memory leak.\n\n### Full customization\n\nYou can get the SSIV instance through the method below:\n\n``` java\npublic SubsamplingScaleImageView getSSIV() {\n    return mImageView;\n}\n```\n\nThen you can do anything you can imagine about SSIV :)\n\nNote: you should test whether SSIV is null, because the image could be a gif,\nthen it won't be displayed by SSIV.\n\n### Custom SSIV support\n\nYou can even use your own custom SSIV, by calling `biv.setImageViewFactory()`,\npassing in a factory that override `createStillImageView`, and return your custom SSIV.\n\n### Custom Glide components support\n\nYou can use your custom Glide's [components](https://bumptech.github.io/glide/doc/configuration.html#registering-components).\nIf you have customized your Glide's configuration, you are able to apply that configuration to BIV too, to do that you only have to initialize BIV in this way:\n\n```java\nBigImageViewer.initialize(GlideCustomImageLoader.with(appContext, CustomComponentModel.class));\n```\n\nWhere `CustomComponentModel.class` is the Glide's model component. That's it!\n\nFor more detailed example, please refer to [the example project](https://github.com/Piasy/BigImageViewer/tree/master/app/src/main/java/com/github/piasy/biv/example/glide).\n\n## Caveats\n\n+ Handle permission when you want to save image into gallery.\n+ When you want load local image file, you can create the Uri via\n`Uri.fromFile`, but the path will be url encoded, and may cause the image loader\nfail to load it, consider using `Uri.parse(\"file://\" + file.getAbsolutePath())`.\n+ When using with RecyclerView or ViewPager, the recycled BIV doesn't know\nit should clear the loaded image or reload the image,\nso you need manually notify it in some way,\nsee [issue 107](https://github.com/Piasy/BigImageViewer/issues/107),\nand [issue 177](https://github.com/Piasy/BigImageViewer/issues/177).\n+ Crash on Android 4.x device? You could force gradle to use a specific version of OkHttp (some version earlier than 3.13.0), by adding this block to your module's build.gradle, please note that it should be added at the top level, not inside any other block:\n\n    ```gradle\n\n    configurations {\n      all {\n        resolutionStrategy {\n          eachDependency { DependencyResolveDetails details ->\n            if (details.requested.group == 'com.squareup.okhttp3' &&\n                details.requested.name ==\n                'okhttp') {\n              // OkHttp drops support before 5.0 since 3.13.0\n              details.useVersion '3.12.6'\n            }\n          }\n        }\n      }\n    }\n    ```\n\n## Why another big image viewer?\n\nThere are several big image viewer libraries,\n[PhotoDraweeView](https://github.com/ongakuer/PhotoDraweeView),\n[FrescoImageViewer](https://github.com/stfalcon-studio/FrescoImageViewer), and\n[Subsampling Scale Image\nView](https://github.com/davemorrissey/subsampling-scale-image-view).\n\nThey both support pan and zoom. PhotoDraweeView and FrescoImageViewer both use\nFresco to load image, which will cause extremely large memory usage when showing\nbig images. Subsampling Scale Image View uses very little memory, but it can\nonly show local image file.\n\nThis library show big image with Subsampling Scale Image View, so it only uses\nvery little memory. And this library support using different image load\nlibraries, so it's full featured!\n\nIf you are interested in how does this library work, you can refer to [this\nissue](https://github.com/Piasy/BigImageViewer/issues/8), and [Subsampling Scale\nImage View](https://github.com/davemorrissey/subsampling-scale-image-view).\n\n## Performance\n\nMemory usage of different libraries:\n\n| \\- | PhotoDraweeView | FrescoImageViewer | BigImageViewer |\n| ------| ------ | ------ | ------ |\n| 4135\\*5134 | 80MB | 80MB | 2~20 MB |\n\n## Todo\n\n+ [x] GlideImageLoader\n+ [x] Save image file to gallery\n+ [x] Optimize long image showing effect, thanks for [razerdp](https://github.com/razerdp)\n+ [x] Optimize \"double tap to zoom\" effect, thanks for [razerdp](https://github.com/razerdp)\n+ [x] Loading animation\n+ [x] Downloading progress\n+ [x] Thumbnail support\n+ [ ] Component to display image list, with memory optimization\n+ [x] Fail image\n+ [x] Retry when fail\n+ [ ] PicassoImageLoader, track [this issue](https://github.com/square/picasso/issues/506)\n\nThose features are offered by image load libraries, and they should be easy to\nimplement, but I don't have enough time currently. So your contributions are\nwelcome!\n\nWhen you submit PR, please conform the [code style of this project](https://github.com/Piasy/java-code-styles),\nwhich is customized from Square Android style.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "buckw",
          "type": "blob",
          "size": 5.9169921875,
          "content": "#!/usr/bin/env bash\n\n#########################################################################\n##\n##  Buck wrapper script to invoke okbuck when needed, before running buck\n##\n##  Created by OkBuck Gradle Plugin on : Sat Dec 03 15:41:27 CST 2016\n##\n#########################################################################\n\nWORKING_DIR=$(pwd)\n\nred=`tput setab 1 2>/dev/null || true`\nyellow=`tput setab 3 2>/dev/null || true`\ngreen=`tput setab 2 2>/dev/null || true`\nblue=`tput setab 4 2>/dev/null || true`\nreset=`tput sgr0 2>/dev/null || true`\nbold=`tput bold 2>/dev/null || true`\n\ndie ( ) {\n    echo\n    echo \"${bold}${red} $* ${reset}\"\n    echo\n    exit 1\n}\n\ninfo ( ) {\n    echo \"${bold}${blue} $* ${reset}\"\n}\n\nwarn ( ) {\n    echo \"${bold}${yellow} $* ${reset}\"\n}\n\nsuccess ( ) {\n    echo\n    echo \"${bold}${green} $* ${reset}\"\n    echo\n}\n\nensure ( ) {\n    command -v $1 >/dev/null 2>&1 || die \"ERROR: '$1' could be found in your PATH. Please install $1. $2\"\n}\n\njsonq() {\n    python -c \"import sys,json; obj=json.load(sys.stdin); print($1)\"\n}\n\nensure python 'https://www.python.org'\nensure ant 'http://ant.apache.org/'\nINSTALLED_WATCHMAN=`command -v watchman`\n\nDEFAULT_BUCK_REPO=\"https://github.com/facebook/buck.git\"\nDEFAULT_BUCK_INSTALL_DIR=\"$HOME/.gradle/caches/okbuck/buck\"\nCUSTOM_BUCK_REPO=\"\"\nCUSTOM_REMOTE_NAME=\"custom\"\nOKBUCK_SUCCESS=\"$WORKING_DIR/build/okbuck.success\"\nOKBUCK_DIR=\".okbuck\"\nMAX_DISPLAY_CHANGES=10\n\nensureWatch ( ) {\n    watchman watch-project $WORKING_DIR >/dev/null 2>&1\n}\n\ngetToClean ( ) {\n    ensureWatch\n\n    watchman --output-encoding=json -j 2>&1 <<-EOT\n[\"query\", \"$WORKING_DIR\", {\n    \"expression\": [\"allof\",\n        [\"type\", \"f\"],\n        [\"anyof\",\n            [\"imatch\", \".buckconfig.local\", \"wholename\"],\n            [\"imatch\", \"**/BUCK\", \"wholename\"]\n        ],\n        [\"not\",\n            [\"imatch\", \".okbuck/**/BUCK\", \"wholename\"]\n        ]\n    ],\n    \"fields\": [\"name\"]\n}]\nEOT\n}\n\ngetChanges ( ) {\n    ensureWatch\n\n    WATCHED_CHANGES=`watchman --output-encoding=json -j 2>&1 <<-EOT\n[\"query\", \"$WORKING_DIR\", {\n    \"since\": \"n:okbuck_trig\",\n    \"expression\": [\"allof\",\n        [\"type\", \"f\"],\n        [\"anyof\",\n            [\"imatch\", \"**/*.gradle\", \"wholename\"],\n            [\"imatch\", \"**/src/**/AndroidManifest.xml\", \"wholename\"],\n            [\"imatch\", \"**/gradle-wrapper.properties\", \"wholename\"],\n            [\"imatch\", \"**/lint.xml\", \"wholename\"]\n        ]\n    ],\n    \"fields\": [\"name\"]\n}]\nEOT`\n    SOURCE_ROOTS=`watchman --output-encoding=json -j 2>&1 <<-EOT\n[\"query\", \".\", {\n    \"since\": \"n:okbuck_source_roots\",\n    \"expression\": [\"allof\",\n        [\"type\", \"d\"],\n        [\"anyof\",\n            [\"imatch\", \"**/src/**/java\", \"wholename\"],\n            [\"imatch\", \"**/src/**/res\", \"wholename\"],\n            [\"imatch\", \"**/src/**/resources\", \"wholename\"]\n        ]\n    ],\n    \"fields\": [\"new\", \"exists\", \"name\"]\n}]\nEOT`\n}\n\nupdateOkBuckSuccess ( ) {\n    OKBUCK_SUCCESS_DIR=`dirname $OKBUCK_SUCCESS`\n    mkdir -p $OKBUCK_SUCCESS_DIR\n    touch \"$OKBUCK_SUCCESS\"\n}\n\nrunOkBuck ( ) {\n    info \"RUNNING OKBUCK...\"\n    echo\n\n    if [[ ! -z \"$INSTALLED_WATCHMAN\" ]]; then\n        getToClean | jsonq '\"\\n\".join(obj[\"files\"])' | xargs rm\n        info \"DELETED OLD BUCK FILES\"\n        EXTRA_OKBUCK_ARGS=\"-xokbuckClean $EXTRA_OKBUCK_ARGS\"\n    fi\n\n    rm -f $OKBUCK_SUCCESS\n    ( $WORKING_DIR/gradlew -p $WORKING_DIR okbuck -Dokbuck.wrapper=true $EXTRA_OKBUCK_ARGS --stacktrace --offline &&\n    updateOkBuckSuccess && success \"PROCEEDING WITH BUCK\" ) || die \"OKBUCK FAILED\"\n}\n\nwatchmanWorkflow ( ) {\n    # Get list of changed files since last time by querying watchman\n    getChanges\n\n    # Format list for simpler output\n    CHANGES=$(echo $WATCHED_CHANGES | jsonq '\" \".join(obj[\"files\"])')\n    NEW_OR_DELETED_SOURCE_ROOTS=$(echo $SOURCE_ROOTS | jsonq '\" \".join([f[\"name\"] for f in obj[\"files\"] if (not f[\"exists\"] or f[\"new\"])])')\n    NUM_CHANGES=$(echo $CHANGES $NEW_OR_DELETED_SOURCE_ROOTS | wc -w)\n\n    if [[ $NUM_CHANGES -gt 0 ]]; then\n        info \"CHANGES DETECTED IN:\"\n        echo $CHANGES $NEW_OR_DELETED_SOURCE_ROOTS | tr ' ' '\\n' | head -n $MAX_DISPLAY_CHANGES\n        if [[ $NUM_CHANGES -gt $MAX_DISPLAY_CHANGES ]]; then\n            DIFF=`expr $NUM_CHANGES - $MAX_DISPLAY_CHANGES`\n            echo \"...and $DIFF more\"\n        fi\n        echo\n        runOkBuck\n    fi\n}\n\nsetupBuckBinary ( ) {\n    # If no explicit buck binary is set\n    if [[ -z \"$BUCK_BINARY\" ]] ; then\n        # If no buck installation directory is set\n        if [[ -z \"$BUCK_HOME\" ]]; then\n            BUCK_HOME=$DEFAULT_BUCK_INSTALL_DIR\n        fi\n\n        # Install buck from source if not already available\n        if [[ ! -d \"$BUCK_HOME\" ]]; then\n            warn \"BUCK NOT FOUND IN '$BUCK_HOME'. INSTALLING BUCK...\"\n            git clone $DEFAULT_BUCK_REPO $BUCK_HOME\n        fi\n\n        # Add custom buck remote\n        if [[ ! -z $CUSTOM_BUCK_REPO ]]; then\n            cd $BUCK_HOME\n            REMOTE_EXISTS=$(git remote -v | grep \"$CUSTOM_REMOTE_NAME\")\n            if [[ -z \"$REMOTE_EXISTS\" ]]; then\n                git remote add $CUSTOM_REMOTE_NAME $CUSTOM_BUCK_REPO\n            fi\n            cd $WORKING_DIR\n        fi\n\n        BUCK_BINARY=\"$BUCK_HOME/bin/buck\"\n    fi\n}\n\n# Run tasks before buck command\nsetupBuckRun ( ) {\n    if [[ ! -z \"$SKIP_OKBUCK\" ]]; then\n        :\n    elif [[ ! -z \"$FORCE_OKBUCK\" ]]; then\n        runOkBuck\n    elif [[ ! -f \"$OKBUCK_SUCCESS\" ]] || [[ ! -d \"$OKBUCK_DIR\" ]]; then\n        warn \"NO PREVIOUS SUCCESSFUL OKBUCK RUN\"\n        if [[ ! -z \"$INSTALLED_WATCHMAN\" ]]; then\n            getChanges # Prevent watchman from running after this run, since changes would already be accounted for\n        fi\n        runOkBuck\n    elif [[ ! -z \"$INSTALLED_WATCHMAN\" ]]; then\n        watchmanWorkflow\n    else\n        warn 'ALWAYS RUNNING OKBUCK SINCE WATCHMAN IS NOT INSTALLED'\n        warn 'INSTALL WATCHMAN FOR FASTER BUILDS'\n        warn 'https://facebook.github.io/watchman'\n        echo\n        runOkBuck\n    fi\n\n    setupBuckBinary\n}\n\nsetupBuckRun\n\n# Invoke buck binary with arguments\nexec \"$BUCK_BINARY\" \"$@\"\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.8251953125,
          "content": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018 Piasy\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        google()\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.3.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.21\"\n\n        // ./gradlew dependencyUpdates\n        classpath 'com.github.ben-manes:gradle-versions-plugin:0.44.0'\n\n        // ./gradlew publishReleasePublicationToSonatypeRepository\n        // ./gradlew closeAndReleaseRepository\n        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.7.20'\n        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    projectName = 'BigImageViewer'\n    groupName = 'com.github.piasy'\n\n    artifactDescription = 'Big image viewer supporting pan and zoom, with very little memory ' +\n            'usage and full featured image loading choices. Powered by Subsampling Scale ' +\n            'Image View, Fresco, Glide, and Picasso.'\n\n    releaseVersionCode = 45\n    releaseVersionName = '1.9.0'\n\n    PUBLISH_GROUP_ID = groupName\n    PUBLISH_VERSION = releaseVersionName\n\n    androidCompileSdkVersion = 33\n    minSdkVersion = 14\n    targetSdkVersion = 33\n\n    annotationVersion = '1.5.0'\n\n    frescoVersion = '2.6.0'\n    glideVersion = '4.14.2'\n    // OkHttp drops support before 5.0 since 3.13.0\n    okhttpVersion = '3.12.6'\n    ssivVersion = '3.10.0'\n}\n\napply plugin: 'io.codearte.nexus-staging'\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8984375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n\n#enable R8\nandroid.enableR8=true\nandroid.enableD8.desugaring=true\n\n#enables AGP to use gradle workers\nandroid.enableGradleWorkers=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.3115234375,
          "content": "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2018 Piasy\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\ninclude(':app')\ninclude(':BigImageViewer')\ninclude(':FrescoImageLoader')\ninclude(':GlideImageLoader')\ninclude(':FrescoImageViewFactory')\ninclude(':GlideImageViewFactory')\ninclude(':ProgressPieIndicator')\n"
        }
      ]
    }
  ]
}