{
  "metadata": {
    "timestamp": 1736609071840,
    "page": 328,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WVector/AppUpdate",
      "stars": 3554,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.560546875,
          "content": "# Built application files\n#*.apk\n#*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\nout/\n\n# Gradle files\n.gradle/\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\n.navigation/\n\n# Android Studio captures folder\ncaptures/\n\n# Intellij\n*.iml\n.idea/\n\n# Keystore files\n*.jks\n\n\n*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.708984375,
          "content": "\n## Android 版本更新\n\n## 目录\n\n* [功能介绍](#功能介绍)\n* [效果图与示例 apk](#效果图与示例-apk)\n* [Gradle 依赖](#Gradle依赖)\n* [简单使用](#简单使用)\n* [详细说明](#详细说明)\n* [更新日志](#更新日志)\n* [License](#license)\n\n## 功能介绍\n\n- [x] 实现android版本更新\n- [x] 对kotlin适配，调用更简单\n- [x] 自定义接口协议，可以不改变现有项目的协议就能使用\n- [x] 支持get,post请求\n- [x] 支持进度显示，对话框进度条，和通知栏进度条展示\n- [x] 支持后台下载\n- [x] 支持强制更新\n- [x] 支持简单主题色配置(可以自动从顶部图片提取主色)\n- [x] 支持自定义对话框（可以监听下载进度）\n- [x] 支持静默下载（可以设置wifi状态下）\n- [x] 支持android7.0\n\n## 效果图与示例 apk\n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_01.png?raw=true\" width=\"1000\">\n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_02.png?raw=true\" width=\"1000\">\n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_03.png?raw=true\" width=\"1000\">\n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_05.png\" width=\"1000\">\n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_06.png\" width=\"1000\">\n\n\t\n[点击下载 Demo.apk](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/apk/sample-debug.apk) 或扫描下面的二维码安装\n\n![Demo apk文件二维](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/1498810770.png)\n\n\n\n## Gradle 依赖\n\n**java方式引用**\n\n```gradle\ndependencies {\n    compile 'com.qianwen:update-app:3.5.2'\n}\n```\n\n[![Download](https://api.bintray.com/packages/qianwen/maven/update-app/images/download.svg) ](https://bintray.com/qianwen/maven/update-app/_latestVersion) [![API](https://img.shields.io/badge/API-14%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=14) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![GitHub stars](https://img.shields.io/github/stars/WVector/AppUpdate.svg?style=plastic&label=Star) ](https://github.com/WVector/AppUpdate)\n\n\n**kotlin方式引用**\n\n```gradle\ndependencies {\n    compile 'com.qianwen:update-app-kotlin:1.2.3'\n}\n```\n\n[![Download](https://api.bintray.com/packages/qianwen/maven/update-app-kotlin/images/download.svg) ](https://bintray.com/qianwen/maven/update-app/_latestVersion) [![API](https://img.shields.io/badge/API-14%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=14) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![GitHub stars](https://img.shields.io/github/stars/WVector/AppUpdate.svg?style=plastic&label=Star) ](https://github.com/WVector/AppUpdate)\n\n\n## 简单使用\n\n\n\n1,java方式\n\n```java\n\tnew UpdateAppManager\n                .Builder()\n                //当前Activity\n                .setActivity(this)\n                //更新地址\n                .setUpdateUrl(mUpdateUrl)\n                //实现httpManager接口的对象\n                .setHttpManager(new UpdateAppHttpUtil())\n                .build()\n                .update();\n```\n2,kotlin方式\n\n```kotlin\n\tupdateApp(mUpdateUrl, UpdateAppHttpUtil()).update()\n```\n\n## 详细说明\n\n- [java方式](java.md)\n- [kotlin方式](kotlin.md)\n\n#### 进度条使用的是代码家的「[NumberProgressBar](https://github.com/daimajia/NumberProgressBar)」\n\n## 更新日志\n\nkotlin版本是依赖java版本的，所以java版本的问题kotlin自然修复\n\n\nv3.5.2\n\n\t1，修复下载过程中，关闭对话框不能自动安装问题。\n\nv3.5.1\n\n\t1，修复bug\n\nv3.5.0\n\n\t1，优化强制更新 \n\nv3.4.8 \n\n\t1,修复bug\n\t\nv3.4.7 \n\n\t1,优化 APP 安装的问题\n\t\nv3.4.6 \n\n\t1,优化 APP 安装的问题\n\nv3.4.5\n\n\t1，增加全局异常捕获方法\n\t\n\t                .handleException(new ExceptionHandler() \t\t\t\t\t\t{\n                    @Override\n                    public void onException(Exception e) {\n\n                    }\n                })\n\nv3.4.4\n\n\t1，修复bug\n[bug](https://github.com/WVector/AppUpdate/pull/68)\n\nv3.4.3\n\n\t1，修复bug\n[bug](https://github.com/WVector/AppUpdate/pull/67)\n   \nv3.4.2\n\n\t1,修复bug\n[bug](https://github.com/WVector/AppUpdate/pull/66)\n\nv3.4.1\n\n\t1,给插件使用者更多的配置和开启一些钩子方便适配不同的业务需求\n\t2,适配android8.0\n\n感谢[Jiiiiiin](https://github.com/Jiiiiiin)对项目的维护\n\nv3.4.0\n\n\t1,修复  \n[issues#59](https://github.com/WVector/AppUpdate/issues/59)\n\n\n\nv3.3.9\n\n\t1,适配android8.0的通知和安装未知来源的app\n\n感谢[typ0520](https://github.com/typ0520)对项目的维护\n\nv3.3.8\n\n\t1,增加存储空间权限申请\n\nV3.3.7\n\t\n\t1,修改默认安装包下载路径为download/packageName\n\n感谢[bean-liu](https://github.com/bean-liu)对项目的维护\n\nV3.3.6\n\t\n\t1,去掉对下载路径前缀的校验。\n[https://github.com/WVector/AppUpdate/issues/26](https://github.com/WVector/AppUpdate/issues/26)\n\nV3.3.5\n\n\t1，修复升级对话框布局中的问题。\n\t2，修复静默下载，关闭更新弹窗 再点击更新 一直显示的问题。\n[https://github.com/WVector/AppUpdate/issues/21](https://github.com/WVector/AppUpdate/issues/21)\n\nV3.3.4\n\n\t1，修复对话框更新内容过多，升级按钮被挤压的问题。\n\t2，去掉自动从图片提取颜色的功能， 通过.setThemeColor()设置按钮和精度条颜色，\n\t3，兼容compileSdkVersion <25\n\nV3.3.3\n\n\t1，修复下载路径是重定向路径不能下载的问题\n\nV3.3.2\n\n\t1，修复正在下载时，返回桌面报错的问题\n[https://github.com/WVector/AppUpdate/issues/14](https://github.com/WVector/AppUpdate/issues/14)\n\nV3.3.1\n\n\t1，修复对话框外可以点击的问题\n\nV3.3.0 \n\n\t1，可以设置不显示通知栏进度条。\n\t2，可以设置忽略版本。 \n\t3，优化下载时页面卡的问题（由于下载进度回调调用频繁，造成ui线程阻塞）。\n\t4，可以静默下载，类似网易云音乐，并且设置wifi状态下。\n\n V3.2.9 \n\n\t1，新增自定义对话框。\n\t2，适配kotlin，写法更简单。 \n\n\n## License\n\n   \tCopyright 2017 千匍\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License."
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "apk",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.369140625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.1.4'\n    ext.novoda_version = '0.4.0'\n    repositories {\n        jcenter()\n\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.3'\n        classpath \"com.novoda:bintray-release:$novoda_version\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\nallprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n\n//        maven{url 'https://dl.bintray.com/qianwen/maven/'}\n        maven { url \"https://www.jitpack.io\" }\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n    tasks.withType(Javadoc) {\n        options {\n            encoding \"UTF-8\"\n            charSet 'UTF-8'\n            links \"http://docs.oracle.com/javase/7/docs/api\"\n        }\n    }\n}\n\next {\n    update_app_version = '3.5.2'\n    update_app_kotlin_version = '1.2.3'\n}\n\n\n//防止上传kotlin是报错,\ntasks.getByPath(\":update-app-kotlin:releaseAndroidJavadocs\").enabled = false\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "java.md",
          "type": "blob",
          "size": 21.16796875,
          "content": "\n### 目录\n\n* [默认接口协议](#默认接口协议)\n* [自定义接口协议](#自定义接口协议)\n* [自定义接口协议+自定义对话框](#自定义接口协议+自定义对话框)\n* [自定义接口协议+自定义对话框+显示进度对话框](#自定义接口协议+自定义对话框+显示进度对话框)\n* [静默下载](#静默下载)\n* [静默下载+自定义对话框](#静默下载+自定义对话框)\n* [只用下载功能](#只用下载功能)\n* [实现HttpManager接口](#实现HttpManager接口)\n\n### 默认接口协议 \n\n#### 1，Request 请求参数\n\nGET：[https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/json/json.txt?appKey=ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f&version=0.1.0](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/json/json.txt?appKey=ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f&version=0.1.0)\n\n\n\n\t1,参数 appkey \n\tapp的唯一标志\n\tappkey可以在manifest文件中配置，也可以在代码中添加\n\txml配置如下：\n\n```xml\n\n  <meta-data\n            android:name=\"UPDATE_APP_KEY\"\n            android:value=\"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\"/>\n\n```\n\t\n\t2,参数 version \n\t版本号，工具自动添加(服务器判断客户端传过来的version和服务器存的最新的version，决定是否更新)\n\t\n```json\n\n```\n\n\t3, 服务器app后台管理界面 \n\n[点击下载后台代码](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/web/AppVersionManger.rar) \n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_04.png?raw=true\" width=\"1000\">\n\n#### 2, Response 服务器的返回json格式\n\t1,有新版本\n\n```json\n\n{\n  \"update\": \"Yes\",//有新版本\n  \"new_version\": \"0.8.3\",//新版本号\n  \"apk_file_url\": \"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/apk/app-debug.apk\", //apk下载地址\n  \"update_log\": \"1，添加删除信用卡接口\\r\\n2，添加vip认证\\r\\n3，区分自定义消费，一个小时不限制。\\r\\n4，添加放弃任务接口，小时内不生成。\\r\\n5，消费任务手动生成。\",//更新内容\n  \"target_size\": \"5M\",//apk大小\n  \"new_md5\":\"A818AD325EACC199BC62C552A32C35F2\",\n  \"constraint\": false//是否强制更新\n}\n\n```\n\n\t2,没有新版本\n\n```json\n\n{\n  \"update\": \"No\",//没有新版本\n}\n\n```\n\n\n#### 3,客户端检测是否有新版本，并且更新下载\n\n和自定义相比，不需要传自定义参数，和实现parseJson方法，其他都一样。\n\n\n```java\n\n\t//最简方式\n\tnew UpdateAppManager\n                .Builder()\n                //当前Activity\n                .setActivity(this)\n                //更新地址\n                .setUpdateUrl(mUpdateUrl)\n                //实现httpManager接口的对象\n                .setHttpManager(new UpdateAppHttpUtil())\n                .build()\n                .update();\n\t\n   \t            \n```\n\n### 自定义接口协议\n\n根据自己项目的接口，自己传参数给服务器，实现parseJson方法，解析json，设置新版本app信息。\n\n同时可以设置以下功能\n\n- 请求方式，get,post\n- 请求参数\n- 是否显示下载进度对话框\n- 对话框顶部图片（设置图片后自动识别主色调，然后为按钮，进度条设置颜色）\n- 按钮，进度条颜色\n- apk的下载路径\n- 是否忽略版本\n- 是否显示通知栏进度条\n\n如果以下的例子出错，请看项目中详细的使用案例\n\n```java\n\n \t\tString path = Environment.getExternalStorageDirectory().getAbsolutePath();\n\n        Map<String, String> params = new HashMap<String, String>();\n\n        params.put(\"appKey\", \"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\");\n        params.put(\"appVersion\", Utils.getVersionName(this));\n        params.put(\"key1\", \"value2\");\n        params.put(\"key2\", \"value3\");\n\n        new UpdateAppManager\n                .Builder()\n                //必须设置，当前Activity\n                .setActivity(this)\n                //必须设置，实现httpManager接口的对象\n                .setHttpManager(new OkGoUpdateHttpUtil())\n                //必须设置，更新地址\n                .setUpdateUrl(mUpdateUrl)\n\n                //以下设置，都是可选\n                //设置请求方式，默认get\n                .setPost(false)\n                //添加自定义参数，默认version=1.0.0（app的versionName）；apkKey=唯一表示（在AndroidManifest.xml配置）\n                .setParams(params)\n                //设置点击升级后，消失对话框，默认点击升级后，对话框显示下载进度\n                .hideDialogOnDownloading(false)\n                //设置头部，不设置显示默认的图片，设置图片后自动识别主色调，然后为按钮，进度条设置颜色\n                .setTopPic(R.mipmap.top_8)\n                //为按钮，进度条设置颜色，默认从顶部图片自动识别。\n                //.setThemeColor(ColorUtil.getRandomColor())\n                //设置apk下砸路径，默认是在下载到sd卡下/Download/1.0.0/test.apk\n                .setTargetPath(path)\n                //设置appKey，默认从AndroidManifest.xml获取，如果，使用自定义参数，则此项无效\n                //.setAppKey(\"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\")\n                //不显示通知栏进度条\n                .dismissNotificationProgress()\n                //是否忽略版本\n\t\t\t\t//.showIgnoreVersion()\n\n                .build()\n                //检测是否有新版本\n                .checkNewApp(new UpdateCallback() {\n                    /**\n                     * 解析json,自定义协议\n                     *\n                     * @param json 服务器返回的json\n                     * @return UpdateAppBean\n                     */\n                    @Override\n                    protected UpdateAppBean parseJson(String json) {\n                        UpdateAppBean updateAppBean = new UpdateAppBean();\n                        try {\n                            JSONObject jsonObject = new JSONObject(json);\n                            updateAppBean\n                                    //（必须）是否更新Yes,No\n                                    .setUpdate(jsonObject.optString(\"update\"))\n                                    //（必须）新版本号，\n                                    .setNewVersion(jsonObject.optString(\"new_version\"))\n                                    //（必须）下载地址\n                                    .setApkFileUrl(jsonObject.optString(\"apk_file_url\"))\n                                    //（必须）更新内容\n                                    .setUpdateLog(jsonObject.optString(\"update_log\"))\n                                    //大小，不设置不显示大小，可以不设置\n                                    .setTargetSize(jsonObject.optString(\"target_size\"))\n                                    //是否强制更新，可以不设置\n                                    .setConstraint(false)\n                                    //设置md5，可以不设置\n                                    .setNewMd5(jsonObject.optString(\"new_md51\"));\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        return updateAppBean;\n                    }\n\n                    /**\n                     * 网络请求之前\n                     */\n                    @Override\n                    public void onBefore() {\n                        CProgressDialogUtils.showProgressDialog(JavaActivity.this);\n                    }\n\n                    /**\n                     * 网路请求之后\n                     */\n                    @Override\n                    public void onAfter() {\n                        CProgressDialogUtils.cancelProgressDialog(JavaActivity.this);\n                    }\n\n                    /**\n                     * 没有新版本\n                     */\n                    @Override\n                    public void noNewApp() {\n                        Toast.makeText(JavaActivity.this, \"没有新版本\", Toast.LENGTH_SHORT).show();\n                    }\n                });\n\n\n\n```\n\n### 自定义接口协议+自定义对话框\n\n其他代码和上面一样，只需重写UpdateCallback 的 hasNewApp方法，然后调用自己的对话框\n\n```java\n\n\t/**\n     * 有新版本\n     *\n     * @param updateApp        新版本信息\n     * @param updateAppManager app更新管理器\n     */\n    @Override\n    public void hasNewApp(UpdateAppBean updateApp, UpdateAppManager updateAppManager) {\n        //自定义对话框\n        showDiyDialog(updateApp, updateAppManager);\n    }\n\n```\n\n\n\n下面是简单的对话框，新版本信息从  updateApp 对象获取，updateAppManager 可以控制后台开始下载，下载完自动安装\n\n直接调用 'updateAppManager.download();' ，进行下载。\n\n```java\n\n    /**\n     * 自定义对话框\n     *\n     * @param updateApp\n     * @param updateAppManager\n     */\n    private void showDiyDialog(final UpdateAppBean updateApp, final UpdateAppManager updateAppManager) {\n        String targetSize = updateApp.getTargetSize();\n        String updateLog = updateApp.getUpdateLog();\n\n        String msg = \"\";\n\n        if (!TextUtils.isEmpty(targetSize)) {\n            msg = \"新版本大小：\" + targetSize + \"\\n\\n\";\n        }\n\n        if (!TextUtils.isEmpty(updateLog)) {\n            msg += updateLog;\n        }\n\n        new AlertDialog.Builder(this)\n                .setTitle(String.format(\"是否升级到%s版本？\", updateApp.getNewVersion()))\n                .setMessage(msg)\n                .setPositiveButton(\"升级\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                            //不显示下载进度\n                            updateAppManager.download();\n\n                        dialog.dismiss();\n                    }\n                })\n                .setNegativeButton(\"暂不升级\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n```\n\n### 自定义接口协议+自定义对话框+显示进度对话框\n\n和上面的例子只有在控制下载有区别，传个回调，监听到下载进度。\n\nonFinish() 当返回 true ：下载完自动跳到安装界面，false：则不进行安装\n\n```java\n\n \tupdateAppManager.download(new DownloadService.DownloadCallback() {\n                                @Override\n                                public void onStart() {\n                                    HProgressDialogUtils.showHorizontalProgressDialog(JavaActivity.this, \"下载进度\", false);\n                                }\n\n                                /**\n                                 * 进度\n                                 *\n                                 * @param progress  进度 0.00 -1.00 ，总大小\n                                 * @param totalSize 总大小 单位B\n                                 */\n                                @Override\n                                public void onProgress(float progress, long totalSize) {\n                                    HProgressDialogUtils.setProgress(Math.round(progress * 100));\n                                }\n\n                                /**\n                                 *\n                                 * @param total 总大小 单位B\n                                 */\n                                @Override\n                                public void setMax(long total) {\n\n                                }\n\n\t\t\t\t\t\t \t\t/**\n\t\t\t\t\t\t         * 下载完了\n\t\t\t\t\t\t         * @param file 下载的app\n\t\t\t\t\t\t         * @return true ：下载完自动跳到安装界面，false：则不进行安装\n\t\t\t\t\t\t         */\n                                @Override\n                                public boolean onFinish(File file) {\n                                    HProgressDialogUtils.cancel();\n                                    return true;\n                                }\n\n                                @Override\n                                public void onError(String msg) {\n                                    Toast.makeText(JavaActivity.this, msg, Toast.LENGTH_SHORT).show();\n                                    HProgressDialogUtils.cancel();\n\n                                }\n                            });\n\n```\n\n### 静默下载\n以下是使用默认协议的例子，\n```java\n\n\t/**\n     * 静默下载，下载完才弹出升级界面\n     *\n     * @param view\n     */\n    public void silenceUpdateApp(View view) {\n        new UpdateAppManager\n                .Builder()\n                //当前Activity\n                .setActivity(this)\n                //更新地址\n                .setUpdateUrl(mUpdateUrl)\n                //实现httpManager接口的对象\n                .setHttpManager(new UpdateAppHttpUtil())\n                //只有wifi下进行，静默下载(只对静默下载有效)\n                .setOnlyWifi()\n                .build()\n                .silenceUpdate();\n    }\n\n\n```\n\n### 静默下载+自定义对话框\n\n以下是使用默认协议的例子，也可以使用自定义协议（请参考自定义协议例子）\n\n```java\n\n \t/**\n     * 静默下载，并且自定义对话框\n     *\n     * @param view\n     */\n    public void silenceUpdateAppAndDiyDialog(View view) {\n        new UpdateAppManager\n                .Builder()\n                //当前Activity\n                .setActivity(this)\n                //更新地址\n                .setUpdateUrl(mUpdateUrl)\n                //实现httpManager接口的对象\n                .setHttpManager(new UpdateAppHttpUtil())\n                //只有wifi下进行，静默下载(只对静默下载有效)\n                .setOnlyWifi()\n                .build()\n                .checkNewApp(new SilenceUpdateCallback() {\n                    @Override\n                    protected void showDialog(UpdateAppBean updateApp, UpdateAppManager updateAppManager, File appFile) {\n                        showSilenceDiyDialog(updateApp, appFile);\n                    }\n                });\n    }\n\n\n  \t/**\n     * 静默下载自定义对话框\n     *\n     * @param updateApp\n     * @param appFile\n     */\n    private void showSilenceDiyDialog(final UpdateAppBean updateApp, final File appFile) {\n        String targetSize = updateApp.getTargetSize();\n        String updateLog = updateApp.getUpdateLog();\n\n        String msg = \"\";\n\n        if (!TextUtils.isEmpty(targetSize)) {\n            msg = \"新版本大小：\" + targetSize + \"\\n\\n\";\n        }\n\n        if (!TextUtils.isEmpty(updateLog)) {\n            msg += updateLog;\n        }\n\n        new AlertDialog.Builder(this)\n                .setTitle(String.format(\"是否升级到%s版本？\", updateApp.getNewVersion()))\n                .setMessage(msg)\n                .setPositiveButton(\"安装\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        AppUpdateUtils.installApp(JavaActivity.this, appFile);\n                        dialog.dismiss();\n                    }\n                })\n                .setNegativeButton(\"暂不升级\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                    }\n                })\n                .create()\n                .show();\n    }\n\n```\n### 只用下载功能\n\n```java\n\n        UpdateAppBean updateAppBean = new UpdateAppBean();\n\n        //设置 apk 的下载地址\n        updateAppBean.setApkFileUrl(\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/apk/app-debug.apk\");\n\n        String path = \"\";\n        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) || !Environment.isExternalStorageRemovable()) {\n            try {\n                path = getExternalCacheDir().getAbsolutePath();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            if (TextUtils.isEmpty(path)) {\n                path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath();\n            }\n        } else {\n            path = getCacheDir().getAbsolutePath();\n        }\n\n        //设置apk 的保存路径\n        updateAppBean.setTargetPath(path);\n        //实现网络接口，只实现下载就可以\n        updateAppBean.setHttpManager(new UpdateAppHttpUtil());\n\n        UpdateAppManager.download(this, updateAppBean, new DownloadService.DownloadCallback() {\n            @Override\n            public void onStart() {\n                HProgressDialogUtils.showHorizontalProgressDialog(JavaActivity.this, \"下载进度\", false);\n                Log.d(TAG, \"onStart() called\");\n            }\n\n            @Override\n            public void onProgress(float progress, long totalSize) {\n                HProgressDialogUtils.setProgress(Math.round(progress * 100));\n                Log.d(TAG, \"onProgress() called with: progress = [\" + progress + \"], totalSize = [\" + totalSize + \"]\");\n\n            }\n\n            @Override\n            public void setMax(long totalSize) {\n                Log.d(TAG, \"setMax() called with: totalSize = [\" + totalSize + \"]\");\n            }\n\n            @Override\n            public boolean onFinish(File file) {\n                HProgressDialogUtils.cancel();\n                Log.d(TAG, \"onFinish() called with: file = [\" + file.getAbsolutePath() + \"]\");\n                return true;\n            }\n\n            @Override\n            public void onError(String msg) {\n                HProgressDialogUtils.cancel();\n                Log.e(TAG, \"onError() called with: msg = [\" + msg + \"]\");\n            }\n\n            @Override\n            public boolean onInstallAppAndAppOnForeground(File file) {\n                Log.d(TAG, \"onInstallAppAndAppOnForeground() called with: file = [\" + file + \"]\");\n                return false;\n            }\n        });\n\n```\n\n### 实现HttpManager接口\n\n根据自己项目使用的网络框架，自己实现HttpManager接口\n\n```java\n\n\tclass UpdateAppHttpUtil implements HttpManager {\n\t    /**\n\t     * 异步get\n\t     *\n\t     * @param url      get请求地址\n\t     * @param params   get参数\n\t     * @param callBack 回调\n\t     */\n\t    @Override\n\t    public void asyncGet(@NonNull String url, @NonNull Map<String, String> params, @NonNull final Callback callBack) {\n\t        OkHttpUtils.get()\n\t                .url(url)\n\t                .params(params)\n\t                .build()\n\t                .execute(new StringCallback() {\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callBack.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(String response, int id) {\n\t                        callBack.onResponse(response);\n\t                    }\n\t                });\n\t    }\n\t\n\t    /**\n\t     * 异步post\n\t     *\n\t     * @param url      post请求地址\n\t     * @param params   post请求参数\n\t     * @param callBack 回调\n\t     */\n\t    @Override\n\t    public void asyncPost(@NonNull String url, @NonNull Map<String, String> params, @NonNull final Callback callBack) {\n\t        OkHttpUtils.post()\n\t                .url(url)\n\t                .params(params)\n\t                .build()\n\t                .execute(new StringCallback() {\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callBack.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(String response, int id) {\n\t                        callBack.onResponse(response);\n\t                    }\n\t                });\n\t\n\t    }\n\t\n\t    /**\n\t     * 下载\n\t     *\n\t     * @param url      下载地址\n\t     * @param path     文件保存路径\n\t     * @param fileName 文件名称\n\t     * @param callback 回调\n\t     */\n\t    @Override\n\t    public void download(@NonNull String url, @NonNull String path, @NonNull String fileName, @NonNull final FileCallback callback) {\n\t        OkHttpUtils.get()\n\t                .url(url)\n\t                .build()\n\t                .execute(new FileCallBack(path, fileName) {\n\t                    @Override\n\t                    public void inProgress(float progress, long total, int id) {\n\t                        super.inProgress(progress, total, id);\n\t                        callback.onProgress(progress, total);\n\t                    }\n\t\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callback.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(File response, int id) {\n\t                        callback.onResponse(response);\n\t\n\t                    }\n\t\n\t                    @Override\n\t                    public void onBefore(Request request, int id) {\n\t                        super.onBefore(request, id);\n\t                        callback.onBefore();\n\t                    }\n\t                });\n\t\n\t    }\n\t}\n\n```\n\n"
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin.md",
          "type": "blob",
          "size": 12.078125,
          "content": "\n### 目录\n\n* [默认接口协议](#默认接口协议)\n* [自定义接口协议](#自定义接口协议)\n* [自定义接口协议+自定义对话框](#自定义接口协议+自定义对话框)\n* [自定义接口协议+自定义对话框+显示进度对话框](#自定义接口协议+自定义对话框+显示进度对话框)\n* [静默下载](#静默下载)\n* [静默下载+自定义对话框](#静默下载+自定义对话框)\n* [实现HttpManager接口](#实现HttpManager接口)\n\n### 默认接口协议 \n\n#### 1，Request 请求参数\n\nGET：[https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/json/json.txt?appKey=ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f&version=0.1.0](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/json/json.txt?appKey=ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f&version=0.1.0)\n\n\n\n\t1,参数 appkey \n\tapp的唯一标志\n\tappkey可以在manifest文件中配置，也可以在代码中添加\n\txml配置如下：\n\n```xml\n\n  <meta-data\n            android:name=\"UPDATE_APP_KEY\"\n            android:value=\"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\"/>\n\n```\n\t\n\t2,参数 version \n\t版本号，工具自动添加(服务器判断客户端传过来的version和服务器存的最新的version，决定是否更新)\n\t\n```json\n\n```\n\n\t3, 服务器app后台管理界面 \n\n[点击下载后台代码](https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/web/AppVersionManger.rar) \n\n<img src=\"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/image/example_04.png?raw=true\" width=\"1000\">\n\n#### 2, Response 服务器的返回json格式\n\t1,有新版本\n\n```json\n\n{\n  \"update\": \"Yes\",//有新版本\n  \"new_version\": \"0.8.3\",//新版本号\n  \"apk_file_url\": \"https://raw.githubusercontent.com/WVector/AppUpdateDemo/master/apk/app-debug.apk\", //apk下载地址\n  \"update_log\": \"1，添加删除信用卡接口\\r\\n2，添加vip认证\\r\\n3，区分自定义消费，一个小时不限制。\\r\\n4，添加放弃任务接口，小时内不生成。\\r\\n5，消费任务手动生成。\",//更新内容\n  \"target_size\": \"5M\",//apk大小\n  \"new_md5\":\"A818AD325EACC199BC62C552A32C35F2\",\n  \"constraint\": false//是否强制更新\n}\n\n```\n\n\t2,没有新版本\n\n```json\n\n{\n  \"update\": \"No\",//没有新版本\n}\n\n```\n\n\n#### 3,客户端检测是否有新版本，并且更新下载\n\n和自定义相比，不需要传自定义参数，和实现parseJson方法，其他都一样。\n\n\n```java\n\n\tupdateApp(mUpdateUrl, UpdateAppHttpUtil()).update()\n   \t            \n```\n\n### 自定义接口协议\n\n根据自己项目的接口，自己传参数给服务器，实现parseJson方法，解析json，设置新版本app信息。\n\n同时可以设置以下功能\n\n- 请求方式，get,post\n- 请求参数\n- 是否显示下载进度对话框\n- 对话框顶部图片（设置图片后自动识别主色调，然后为按钮，进度条设置颜色）\n- 按钮，进度条颜色\n- apk的下载路径\n- 是否忽略版本\n- 是否显示通知栏进度条\n\n如果以下的例子出错，请看项目中详细的使用案例\n\n```java\n\n        //下载路径\n        val path = Environment.getExternalStorageDirectory().absolutePath\n        //自定义参数\n        val params = HashMap<String, String>()\n        params.put(\"appKey\", \"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\")\n        params.put(\"appVersion\", AppUpdateUtils.getVersionName(this))\n        params.put(\"key1\", \"value2\")\n        params.put(\"key2\", \"value3\")\n\n        updateApp(mUpdateUrl, UpdateAppHttpUtil())\n        //自定义配置\n        {\n            //以下设置，都是可选\n            //设置请求方式，默认get\n            isPost = false\n            //添加自定义参数，默认version=1.0.0（app的versionName）；apkKey=唯一表示（在AndroidManifest.xml配置）\n            setParams(params)\n            //设置点击升级后，消失对话框，默认点击升级后，对话框显示下载进度\n            hideDialogOnDownloading(true)\n            //设置头部，不设置显示默认的图片，设置图片后自动识别主色调，然后为按钮，进度条设置颜色\n            topPic = R.mipmap.top_8\n            //为按钮，进度条设置颜色，默认从顶部图片自动识别。\n\t\t\t//setThemeColor(ColorUtil.getRandomColor())\n            //设置apk下砸路径，默认是在下载到sd卡下/Download/1.0.0/test.apk\n            targetPath = path\n            //设置appKey，默认从AndroidManifest.xml获取，如果，使用自定义参数，则此项无效\n\t\t\t//setAppKey(\"ab55ce55Ac4bcP408cPb8c1Aaeac179c5f6f\")\n\n        }\n                .check {\n                    onBefore { showProgressDialog() }\n                    //自定义解析\n                    parseJson {\n                        val jsonObject = JSONObject(it)\n                        UpdateAppBean()\n                                //（必须）是否更新Yes,No\n                                .setUpdate(jsonObject.optString(\"update\"))\n                                //（必须）新版本号，\n                                .setNewVersion(jsonObject.optString(\"new_version\"))\n                                //（必须）下载地址\n                                .setApkFileUrl(jsonObject.optString(\"apk_file_url\"))\n                                //（必须）更新内容\n                                .setUpdateLog(jsonObject.optString(\"update_log\"))\n                                //大小，不设置不显示大小，可以不设置\n                                .setTargetSize(jsonObject.optString(\"target_size\"))\n                                //是否强制更新，可以不设置\n                                .setConstraint(false)\n                                //设置md5，可以不设置\n                                .setNewMd5(jsonObject.optString(\"new_md5\"))\n\n                    }\n                    noNewApp { toast(\"没有新版本\") }\n                    onAfter { cancelProgressDialog() }\n                }\n\n\n```\n\n### 自定义接口协议+自定义对话框\n\n其他代码和上面一样，只需重写UpdateCallback 的 hasNewApp方法，然后调用自己的对话框\n\n```java\n\n\t hasNewApp { updateApp, updateAppManager ->\n                        showDiyDialog(updateApp, updateAppManager)\n                    }\n\n```\n\n\n\n下面是简单的对话框，新版本信息从  updateApp 对象获取，updateAppManager 可以控制后台开始下载，下载完自动安装\n\n直接调用 'updateAppManager.download();' ，进行下载。\n\n```java\n\n       dialog(\"是否升级到${updateApp.newVersion}版本？\"\n                , \"新版本大小：${updateApp.targetSize}\\n\\n${updateApp.updateLog}\")\n        {\n            positiveButton(\"升级\") {\n                updateAppManager.download()\n                dismiss()\n\n            }\n            negativeButton(\"暂不升级\") {\n                dismiss()\n            }\n            show()\n        }\n\n```\n\n### 自定义接口协议+自定义对话框+显示进度对话框\n\n和上面的例子只有在控制下载有区别，传个回调，监听到下载进度。\n\nonFinish() 当返回 true ：下载完自动跳到安装界面，false：则不进行安装\n\n```java\n\n\tupdateAppManager.download {\n\t                        onStart { HProgressDialogUtils.showHorizontalProgressDialog(this@KotlinActivity, \"下载进度\", false) }\n\t                        onProgress { progress, _ -> HProgressDialogUtils.setProgress(Math.round(progress * 100)) }\n\t                        onFinish {\n\t                            HProgressDialogUtils.cancel()\n\t                            true\n\t                        }\n\t                        onError {\n\t                            toast(it)\n\t                            HProgressDialogUtils.cancel()\n\t                        }\n\t                    }\n```\n\n### 静默下载\n以下是使用默认协议的例子，\n```java\n\n\n\t  updateApp(mUpdateUrl, UpdateAppHttpUtil())\n\t        {\n\t            setOnlyWifi()\n\t        }.silenceUpdate()\n\n\n\n```\n\n### 静默下载+自定义对话框\n\n以下是使用默认协议的例子，也可以使用自定义协议（请参考自定义协议例子）\n\n```java\n\n\n       updateApp(mUpdateUrl, UpdateAppHttpUtil())\n        {\n            setOnlyWifi()\n        }.checkNewApp(object : SilenceUpdateCallback() {\n            override fun showDialog(updateApp: UpdateAppBean, updateAppManager: UpdateAppManager?, appFile: File) {\n                showSilenceDiyDialog(updateApp, appFile)\n            }\n        })\n\n\n  \t /**\n     * 自定义对话框\n     */\n    private fun showSilenceDiyDialog(updateApp: UpdateAppBean, appFile: File?) {\n        dialog(\"是否升级到${updateApp.newVersion}版本？\"\n                , \"新版本大小：${updateApp.targetSize}\\n\\n${updateApp.updateLog}\")\n        {\n            positiveButton(\"升级\") {\n                AppUpdateUtils.installApp(this@KotlinActivity, appFile)\n                dismiss()\n\n            }\n            negativeButton(\"暂不升级\") {\n                dismiss()\n            }\n            show()\n        }\n    }\n\n\n```\n\n### 实现HttpManager接口\n\n根据自己项目使用的网络框架，自己实现HttpManager接口\n\n```java\n\n\tclass UpdateAppHttpUtil implements HttpManager {\n\t    /**\n\t     * 异步get\n\t     *\n\t     * @param url      get请求地址\n\t     * @param params   get参数\n\t     * @param callBack 回调\n\t     */\n\t    @Override\n\t    public void asyncGet(@NonNull String url, @NonNull Map<String, String> params, @NonNull final Callback callBack) {\n\t        OkHttpUtils.get()\n\t                .url(url)\n\t                .params(params)\n\t                .build()\n\t                .execute(new StringCallback() {\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callBack.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(String response, int id) {\n\t                        callBack.onResponse(response);\n\t                    }\n\t                });\n\t    }\n\t\n\t    /**\n\t     * 异步post\n\t     *\n\t     * @param url      post请求地址\n\t     * @param params   post请求参数\n\t     * @param callBack 回调\n\t     */\n\t    @Override\n\t    public void asyncPost(@NonNull String url, @NonNull Map<String, String> params, @NonNull final Callback callBack) {\n\t        OkHttpUtils.post()\n\t                .url(url)\n\t                .params(params)\n\t                .build()\n\t                .execute(new StringCallback() {\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callBack.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(String response, int id) {\n\t                        callBack.onResponse(response);\n\t                    }\n\t                });\n\t\n\t    }\n\t\n\t    /**\n\t     * 下载\n\t     *\n\t     * @param url      下载地址\n\t     * @param path     文件保存路径\n\t     * @param fileName 文件名称\n\t     * @param callback 回调\n\t     */\n\t    @Override\n\t    public void download(@NonNull String url, @NonNull String path, @NonNull String fileName, @NonNull final FileCallback callback) {\n\t        OkHttpUtils.get()\n\t                .url(url)\n\t                .build()\n\t                .execute(new FileCallBack(path, fileName) {\n\t                    @Override\n\t                    public void inProgress(float progress, long total, int id) {\n\t                        super.inProgress(progress, total, id);\n\t                        callback.onProgress(progress, total);\n\t                    }\n\t\n\t                    @Override\n\t                    public void onError(Call call, Response response, Exception e, int id) {\n\t                        callback.onError(validateError(e, response));\n\t                    }\n\t\n\t                    @Override\n\t                    public void onResponse(File response, int id) {\n\t                        callback.onResponse(response);\n\t\n\t                    }\n\t\n\t                    @Override\n\t                    public void onBefore(Request request, int id) {\n\t                        super.onBefore(request, id);\n\t                        callback.onBefore();\n\t                    }\n\t                });\n\t\n\t    }\n\t}\n\n```\n\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.06640625,
          "content": "include ':sample'\ninclude ':update-app'\ninclude ':update-app-kotlin'"
        },
        {
          "name": "update-app-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-app",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}