{
  "metadata": {
    "timestamp": 1736608930872,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hussien89aa/AndroidTutorialForBeginners",
      "stars": 4443,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Alaram App",
          "type": "tree",
          "content": null
        },
        {
          "name": "AlarmManager.java",
          "type": "blob",
          "size": 1.6630859375,
          "content": "\n public void startAlert() {  \n       // for Alarm 25/12/2012 at 12.00   \nCalendar myAlarmDate = Calendar.getInstance();\nmyAlarmDate.setTimeInMillis(System.currentTimeMillis());\nmyAlarmDate.set(2012, 11, 25, 12, 00, 0);\n//other way\n  Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.HOUR_OF_DAY, Hour);\n        calendar.set(Calendar.MINUTE, Minute);\n        calendar.set(Calendar.SECOND, 0);\n\n //define Repeating Alarm Start After Each 2 Minutes\n \n\n  AlarmManager am = (AlarmManager)context.getSystemService  (Context.ALARM_SERVICE);\n        Intent intent = new Intent(context, AlarmReceiver.class);\n        intent.setAction(\"com.quranonline.Broadcast\");\n        intent.putExtra(\"MyMessage\",context.getResources().getString(R.string.msg_notify));\n        PendingIntent pi = PendingIntent.getBroadcast(context, 0, intent,\n                PendingIntent.FLAG_UPDATE_CURRENT);\n        am.setRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(),\n                AlarmManager.INTERVAL_DAY , pi);\n// Create one time   Alarm Start After Each 2 Minutes\nalarmManager.set(AlarmManager.RTC_WAKEUP, myAlarmDate.getTimeInMillis(),_myPendingIntent); \n\n \n    }  \n\n\n    /* Permission need\n       <uses-permission android:name=\"android.permission.VIBRATE\" />  \n\n\n    */\n\n       /* run with os\n       //permission\n           <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n            \n            //filters\n             <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n                 <action android:name=\"android.intent.action.ACTION_SHUTDOWN\" />\n                <action android:name=\"android.intent.action.QUICKBOOT_POWEROFF\" />\n\n\n       */"
        },
        {
          "name": "AlertDialog.java",
          "type": "blob",
          "size": 0.744140625,
          "content": "  AlertDialog.Builder alert= new AlertDialog.Builder(this);\n        alert.setMessage(\"are you sure to delete\")\n                .setIcon(android.R.drawable.stat_notify_error)\n                .setTitle(\"Alert\")\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                      //do some thing  \n                    }\n                })\n                .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                             //do some thing  \n                    }\n                }).show();"
        },
        {
          "name": "AndroidVulnerabilityNote.txt",
          "type": "blob",
          "size": 0.0927734375,
          "content": "\nAndroid Vulnerability GitHub Repository\n\nhttps://github.com/dan7800/VulnerableAndroidAppOracle"
        },
        {
          "name": "Animation.txt",
          "type": "blob",
          "size": 2.0078125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n   <scale xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:fromXScale=\"0.5\"\n      android:toXScale=\"3.0\"\n      android:fromYScale=\"0.5\"\n      android:toYScale=\"3.0\"\n      android:duration=\"5000\"\n      android:pivotX=\"50%\"\n      android:pivotY=\"50%\" >\n   </scale>\n   \n  <rotate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:fromDegrees=\"0\"\n      android:toDegrees=\"360\"\n      android:pivotX=\"50%\"\n      android:pivotY=\"50%\"\n      android:duration=\"5000\" >\n   </rotate>\n\n     <alpha\n      android:fromAlpha=\"0\"\n      android:toAlpha=\"1\" \n      android:duration=\"2000\" >\n   </alpha>\n\n\n     <translate\n      android:fromXDelta=\"0%p\"\n      android:toXDelta=\"75%p\"\n      android:duration=\"800\" />\n\n      <scale\n      android:duration=\"500\"\n      android:fromXScale=\"1.0\"\n      android:fromYScale=\"1.0\"\n      android:interpolator=\"@android:anim/linear_interpolator\"\n      android:toXScale=\"1.0\"\n      android:toYScale=\"0.0\" />\n   \n</set>\n\n\n\n\n/*load\nImageView image = (ImageView)findViewById(R.id.imageView);\n   Animation animation1 = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slide);\n      image.startAnimation(animation1);\n\n\nUse the Reveal Effect\n// previously visible view\nfinal View myView = findViewById(R.id.my_view);\n\n// get the center for the clipping circle\nint cx = myView.getWidth() / 2;\nint cy = myView.getHeight() / 2;\n\n// get the initial radius for the clipping circle\nfloat initialRadius = (float) Math.hypot(cx, cy);\n\n// create the animation (the final radius is zero)\nAnimator anim =\n    ViewAnimationUtils.createCircularReveal(myView, cx, cy, initialRadius, 0);\n\n// make the view invisible when the animation is done\nanim.addListener(new AnimatorListenerAdapter() {\n    @Override\n    public void onAnimationEnd(Animator animation) {\n        super.onAnimationEnd(animation);\n        myView.setVisibility(View.INVISIBLE);\n    }\n});\n\n// start the animation\nanim.start();\n\n*/"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "BroadcastReceiver.java",
          "type": "blob",
          "size": 2.83203125,
          "content": "\n \n//Define BroadcastReceiver\n\npublic class MyReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // get the bundles in the message\n        final Bundle bundle = intent.getExtras();\n        // check the action equal to the action we fire in broadcast,\n        if   (   intent.getAction().equalsIgnoreCase(\"com.example.Broadcast\"))\n            //read the data from the intent\n            Toast.makeText(context,bundle.getString(\"username\"),Toast.LENGTH_LONG).show();\n\n  if   (   intent.getAction().equalsIgnoreCase(\"android.provider.Telephony.SMS_RECEIVED\"))\n{\n\t  if (bundle != null) {\n\n                final Object[] pdusObj = (Object[]) bundle.get(\"pdus\");\n                SmsMessage[] messages = new SmsMessage[pdusObj.length];\n                for (int i = 0; i < messages.length; i++) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                        String format = bundle.getString(\"format\");\n                        messages[i] = SmsMessage.createFromPdu((byte[]) pdusObj[i], format);\n                    }\n                    else {\n                        messages[i] = SmsMessage.createFromPdu((byte[]) pdusObj[i]);\n                    }\n                   // SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObj[i]);\n                    String senderNum =messages[i].getOriginatingAddress();\n                     String message =messages[i].getMessageBody();//\n                        }\n\n    }\n}\n\n/* add to AndroidManifest.xml\n   <uses-permission android:name=\"android.permission.READ_SMS\" />\n\n\n   <receiver android:name=\".MyReceiver\"\n           android:permission=\"android.permission.BROADCAST_SMS\"\n           tools:ignore=\"UnprotectedSMSBroadcastReceiver\">\n           <intent-filter android:priority=\"2147483647\">\n               <action android:name=\"android.provider.Telephony.SMS_RECEIVED\" />\n                  <action android:name=\"com.example.Broadcast\" >\n                </action>\n               <category android:name=\"android.intent.category.DEFAULT\" />\n           </intent-filter>\n       </receiver>\n\n\n*/\n\n// send sendBroadcast\n         Intent intent = new Intent();\n            //set the action that will receive our broadcast\n            intent.setAction(\"com.example.Broadcast\");\n            // add data to the bundle\n            intent.putExtra(\"username\", \"alxs1aa\");\n            // send the data to broadcast\n            sendBroadcast(intent);\n\n//send sms\n  SmsManager smsManagersend = SmsManager.getDefault();\n smsManagersend.sendTextMessage(\"phone number\", null,\"hellor from android\", null, null);\n                \n//start activity from \n   //start activity\n    Intent i = new Intent(context,MainActivity.class);\n   // i.setClassName(\"com.test\", \"com.test.MainActivity\");\n    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    context.startActivity(i);\n\n  \n"
        },
        {
          "name": "CitySunsetTime",
          "type": "tree",
          "content": null
        },
        {
          "name": "DBManager.java",
          "type": "blob",
          "size": 2.7783203125,
          "content": "package com.hussienalrubaye.androiddemowork;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.database.sqlite.SQLiteQueryBuilder;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\n\n/**\n * Created by hussienalrubaye on 9/8/16.\n */\n\npublic class DBManager {\n    private SQLiteDatabase sqlDB;\n    static final String DBName=\"Students\";\n    static final String TableName=\"Logins\";\n    static final String ColUserName=\"UserName\";\n    static final String ColPassWord=\"Password\";\n    static final String ColID=\"ID\";\n    static final  int DBVersion=3;\n     // create table Logins(ID integer primary key autoincrment, UserName text, Password text)\n     static final  String CreateTable=\" CREATE TABLE IF NOT EXISTS \" +TableName+\n             \"(ID INTEGER PRIMARY KEY AUTOINCREMENT,\"+ ColUserName+\n             \" TEXT,\"+ ColPassWord + \" TEXT);\";\n\n   private static class  DatabaseHelperUser extends SQLiteOpenHelper{\nContext context;\n        DatabaseHelperUser(Context context){\n            super(context,DBName,null,DBVersion);\n            this.context=context;\n\n        }\n\n        @Override\n        public void onCreate(SQLiteDatabase db) {\n            db.execSQL(CreateTable);\n            Toast.makeText(context,\"Table is created\",Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"Drop table IF  EXISTS \"+ TableName);\n            onCreate(db);\n        }\n    }\n\n\n\n    public DBManager(Context context){\n\n        DatabaseHelperUser db=new DatabaseHelperUser(context) ;\n        sqlDB=db.getWritableDatabase();\n\n    }\n\n    public  long Insert(ContentValues values){\n     long ID=   sqlDB.insert(TableName,\"\",values);\n        //could insert id is user id, or fail id is or equal 0\n        return ID;\n    }\n    //select username,Password from Logins where ID=1\n    public Cursor query(String[] Projection,String Selection,String[] SelectionArgs,String SortOrder){\n\n        SQLiteQueryBuilder qb= new SQLiteQueryBuilder();\n        qb.setTables(TableName);\n\n        Cursor cursor=qb.query(sqlDB,Projection,Selection,SelectionArgs,null,null,SortOrder);\n        return cursor;\n    }\n\n    public int Delete(String Selection,String[] SelectionArgs){\n        int count=sqlDB.delete(TableName,Selection,SelectionArgs);\n        return count;\n    }\n\npublic  int Update(ContentValues values,String Selection,String[] SelectionArgs)\n{\n    int count=sqlDB.update(TableName,values,Selection,SelectionArgs);\n    return count;\n}\n\n}\n"
        },
        {
          "name": "DatabaseHelper.java",
          "type": "blob",
          "size": 3.455078125,
          "content": "private SQLiteDatabase db;\n    static final String DATABASE_NAME = \"College\";\n    static final String STUDENTS_TABLE_NAME = \"students\";\n    static final int DATABASE_VERSION = 1;\n    static final String CREATE_DB_TABLE =\n            \" CREATE TABLE IF NOT EXISTS \" + STUDENTS_TABLE_NAME +\n                    \" (_id INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    \" name TEXT NOT NULL, \" +\n                    \" age TEXT NOT NULL);\";\n\n    /**\n     * Helper class that actually creates and manages\n     * the provider's underlying data repository.\n     */\n    private static class DatabaseHelper extends SQLiteOpenHelper {\n        DatabaseHelper(Context context){\n            super(context, DATABASE_NAME, null, DATABASE_VERSION);\n        }\n\n        @Override\n        public void onCreate(SQLiteDatabase db)\n        {\n            db.execSQL(CREATE_DB_TABLE);\n        }\n\n        @Override\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n            db.execSQL(\"DROP TABLE IF EXISTS \" +  STUDENTS_TABLE_NAME);\n            onCreate(db);\n        }\n    }\n\n\n\n    //user class\n\n    DatabaseHelper dbHelper = new DatabaseHelper(context);\n      db = dbHelper.getWritableDatabase();\n\n       public long insert(Uri uri, ContentValues values)\n    {\n        long rowID = db.insert( STUDENTS_TABLE_NAME, \"\", values);\n        /*\n        if (rowID > 0)\n        {\n            //added\n        }*/\n      return rowID;  \n}\n//select\n//projection coloum\nString[] projection={\"name\"};\n          public Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder)\n    {\n         SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n        qb.setTables(STUDENTS_TABLE_NAME);\n//get all\n           //     qb.setProjectionMap(STUDENTS_PROJECTION_MAP);\n //get one\n            //    qb.appendWhere( _ID + \"=\" + uri.getPathSegments().get(1));\n            \n\n  Cursor c = qb.query(db,   projection, selection, selectionArgs,null, null, sortOrder);\n\nreturn c;\n}\n\npublic int delete(Uri uri, String selection, String[] selectionArgs)\n    {\n        int count = db.delete(STUDENTS_TABLE_NAME, selection, selectionArgs);\n         return count;\n    }\n\n public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)\n    {\n        int count = 0;\n\n                count = db.update(STUDENTS_TABLE_NAME, values, selection, selectionArgs);\n           \n               // count = db.update(STUDENTS_TABLE_NAME, values, _ID + \" = \" + uri.getPathSegments().get(1) +\n                   //     (!TextUtils.isEmpty(selection) ? \" AND (\" +selection + ')' : \"\"), selectionArgs);\n         \n        return count;\n    }\n\n\n      // Add a new student record\n        ContentValues values = new ContentValues();\n// insert value\n        values.put(StudentsProvider.NAME, \"a\");\n        values.put(StudentsProvider.Age,\"b\");\n// define the play to insert the values in\n        insert( values);\n \n//select\n    Cursor c = query(students, null, null, null, \"name\");\n// move through all items\n        if (c.moveToFirst()) {\n            do{\n                // load the record name and age and id\n                Toast.makeText(this,\n                        c.getString(c.getColumnIndex(StudentsProvider._ID)) +\n                                \", \" +  c.getString(c.getColumnIndex( StudentsProvider.NAME)) +\n                                \", \" + c.getString(c.getColumnIndex( StudentsProvider.Age)),\n                        Toast.LENGTH_SHORT).show();\n            } while (c.moveToNext());\n\n\n\n\n\n\n"
        },
        {
          "name": "FindMyPhone Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Firebase.txt",
          "type": "blob",
          "size": 3.35546875,
          "content": "// Realtime Database\n \n \nprivate   DatabaseReference   mDatabase ;       \n\n mDatabase = FirebaseDatabase.getInstance().getReference();\n \n DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        Date date = new Date();\n        mDatabase.child(\"UsersUpdates\").child(GlobalClass.UserUID).child(\"UpdateOrder\").setValue(dateFormat.format(date).toString());\n \n   //check if there is update in order node\n        mDatabase.child(\"UsersUpdates\").child(\"UpdateOrder\").addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(DataSnapshot dataSnapshot) {\n          \n            }\n\n            @Override\n            public void onCancelled(DatabaseError error) {\n                // Failed to read value\n                // Log.w(TAG, \"Failed to read value.\", error.toException());\n            }\n        });\n\n\n\n//Remote config\n\nadd Xml file name \"price_tool\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <defaultsMap>\n    <enty>\n        <key>price</key>\n        <value>50 dolor</value>\n    </enty>\n\n</defaultsMap>\n\nCode  ro run\n\n\n final FirebaseRemoteConfig mFirebaseRemoteConfig = FirebaseRemoteConfig.getInstance();\n        mFirebaseRemoteConfig.setDefaults(R.xml.price_tool);\n       long exp=0;\n\n\n\n        mFirebaseRemoteConfig.fetch(exp).addOnCompleteListener(new OnCompleteListener<Void>() {\n            @Override\n            public void onComplete(@NonNull Task<Void> task) {\n                if (task.isSuccessful()) {\n                    String price = mFirebaseRemoteConfig.getString(\"price\");\n                    Toast.makeText(getApplicationContext(), price, Toast.LENGTH_LONG).show();\n                    mFirebaseRemoteConfig.activateFetched();\n                }\n            }\n        });\n\n\n        try{\n            int x=10/0;\n        }catch (Exception ex){\n            FirebaseCrash.report(new Exception(\"bugs in \"+ ex.getMessage()));\n        }\n\n\n\n\n\n\n//Storage- upload images\n   imageView=(ImageView)findViewById(R.id.imageView);\n\n        FirebaseStorage storage=FirebaseStorage.getInstance();\n        // Create a storage reference from our app\n        StorageReference storageRef = storage.getReferenceFromUrl(\"gs://firbasedemo-6228f.appspot.com\");\n\n// Create a reference to \"mountains.jpg\"\n        StorageReference mountainsRef = storageRef.child(\"images/mountains.jpg\");\n\n        imageView.setDrawingCacheEnabled(true);\n        imageView.buildDrawingCache();\n       // Bitmap bitmap = imageView.getDrawingCache();\n        BitmapDrawable drawable=(BitmapDrawable)imageView.getDrawable();\n        Bitmap bitmap =drawable.getBitmap();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);\n        byte[] data = baos.toByteArray();\n\n        UploadTask uploadTask = mountainsRef.putBytes(data);\n        uploadTask.addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle unsuccessful uploads\n            }\n        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\n            @Override\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\n                // taskSnapshot.getMetadata() contains file metadata such as size, content-type, and download URL.\n                Uri downloadUrl = taskSnapshot.getDownloadUrl();\n            }\n        });"
        },
        {
          "name": "Firebase_PlayServices_auth.java",
          "type": "blob",
          "size": 6.7353515625,
          "content": "// login firebase with play services\n//1-- add to gradle\n   compile 'com.google.firebase:firebase-auth:9.6.1'\n    compile 'com.google.android.gms:play-services-auth:9.6.1'\n\n    //1- extend \n       GoogleApiClient.OnConnectionFailedListener\n       //2 - define in public\n \n\n    private static final String TAG = \"GoogleActivity\";\n    private static final int RC_SIGN_IN = 9001;\n\n    // [START declare_auth]\n    private FirebaseAuth mAuth;\n    // [END declare_auth]\n\n    // [START declare_auth_listener]\n    private FirebaseAuth.AuthStateListener mAuthListener;\n    // [END declare_auth_listener]\n\n    private GoogleApiClient mGoogleApiClient;\n \n\n //3- onCreate add\n\n    \n        // [START config_signin]\n        // Configure Google Sign In\n        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n                .requestIdToken(getString(R.string.default_web_client_id))\n                .requestEmail()\n                .build();\n        // [END config_signin]\n\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\n                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)\n                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)\n                .build();\n\n        // [START initialize_auth]\n        mAuth = FirebaseAuth.getInstance();\n        // [END initialize_auth]\n\n        // [START auth_state_listener]\n        mAuthListener = new FirebaseAuth.AuthStateListener() {\n            @Override\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\n                FirebaseUser user = firebaseAuth.getCurrentUser();\n                if (user != null) {\n                    // User is signed in\n                    Log.d(TAG, \"onAuthStateChanged:signed_in:\" + user.getUid());\n                } else {\n                    // User is signed out\n                    Log.d(TAG, \"onAuthStateChanged:signed_out\");\n                }\n                // [START_EXCLUDE]\n                updateUI(user);\n                // [END_EXCLUDE]\n            }\n        };\n        // [END auth_state_listener]\n  \n//4 deine this methods\n    // [START on_start_add_listener]\n    @Override\n    public void onStart() {\n        super.onStart();\n        mAuth.addAuthStateListener(mAuthListener);\n    }\n    // [END on_start_add_listener]\n\n    // [START on_stop_remove_listener]\n    @Override\n    public void onStop() {\n        super.onStop();\n        if (mAuthListener != null) {\n            mAuth.removeAuthStateListener(mAuthListener);\n        }\n    }\n    // [END on_stop_remove_listener]\n\n    // [START onactivityresult]\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);\n        if (requestCode == RC_SIGN_IN) {\n            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);\n            if (result.isSuccess()) {\n                // Google Sign In was successful, authenticate with Firebase\n                GoogleSignInAccount account = result.getSignInAccount();\n                firebaseAuthWithGoogle(account);\n            } else {\n                // Google Sign In failed, update UI appropriately\n                // [START_EXCLUDE]\n                updateUI(null);\n                // [END_EXCLUDE]\n            }\n        }\n    }\n    // [END onactivityresult]\n\n    // [START auth_with_google]\n    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {\n        Log.d(TAG, \"firebaseAuthWithGoogle:\" + acct.getId());\n        // [START_EXCLUDE silent]\n        showProgressDialog();\n        // [END_EXCLUDE]\n\n        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);\n        mAuth.signInWithCredential(credential)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        Log.d(TAG, \"signInWithCredential:onComplete:\" + task.isSuccessful());\n\n                        // If sign in fails, display a message to the user. If sign in succeeds\n                        // the auth state listener will be notified and logic to handle the\n                        // signed in user can be handled in the listener.\n                        if (!task.isSuccessful()) {\n                            Log.w(TAG, \"signInWithCredential\", task.getException());\n                            Toast.makeText(GoogleSignInActivity.this, \"Authentication failed.\",\n                                    Toast.LENGTH_SHORT).show();\n                        }\n                        // [START_EXCLUDE]\n                        hideProgressDialog();\n                        // [END_EXCLUDE]\n                    }\n                });\n    }\n    // [END auth_with_google]\n\n    // [START signin]\n    private void signIn() {\n        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);\n        startActivityForResult(signInIntent, RC_SIGN_IN);\n    }\n    // [END signin]\n\n    private void signOut() {\n        // Firebase sign out\n        mAuth.signOut();\n\n        // Google sign out\n        Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(\n                new ResultCallback<Status>() {\n                    @Override\n                    public void onResult(@NonNull Status status) {\n                        updateUI(null);\n                    }\n                });\n    }\n\n    \n\n    private void updateUI(FirebaseUser user) {\n        hideProgressDialog();\n       String Email=user.getEmail();\n        String Uid= user.getUid();\n    }\n\n @Override\n        public void onConnected(Bundle connectionHint) {\n\n      Log.d(TAG, \"onConnection is connected:\" );\n        }\n    @Override\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\n        // An unresolvable error has occurred and Google APIs (including Sign-In) will not\n        // be available.\n        Log.d(TAG, \"onConnectionFailed:\" + connectionResult);\n        Toast.makeText(this, \"Google Play Services error.\", Toast.LENGTH_SHORT).show();\n    }\n\n \n @VisibleForTesting\n    public ProgressDialog mProgressDialog;\n\n    public void showProgressDialog() {\n        if (mProgressDialog == null) {\n            mProgressDialog = new ProgressDialog(this);\n            mProgressDialog.setMessage(getString(R.string.loading));\n            mProgressDialog.setIndeterminate(true);\n        }\n\n        mProgressDialog.show();\n    }\n\n    public void hideProgressDialog() {\n        if (mProgressDialog != null && mProgressDialog.isShowing()) {\n            mProgressDialog.dismiss();\n        }\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        hideProgressDialog();\n    }\n"
        },
        {
          "name": "Firebase_auth.java",
          "type": "blob",
          "size": 5.2470703125,
          "content": "// Fire base sign in\n\n//add to grade\ncompile 'com.google.firebase:firebase-auth:9.6.1'\n\n//code\n\n\n/**\n * Activity to demonstrate anonymous login and account linking (with an email/password account).\n */\n //1- define\n    private static final String TAG = \"AnonymousAuth\";\n\n    // [START declare_auth]\n    private FirebaseAuth mAuth;\n    // [END declare_auth]\n\n    // [START declare_auth_listener]\n    private FirebaseAuth.AuthStateListener mAuthListener;\n    // [END declare_auth_listener]\n \n //2- initiailze OnCreate()\n        // [START initialize_auth]\n        mAuth = FirebaseAuth.getInstance();\n        // [END initialize_auth]\n\n        // [START auth_state_listener]\n        mAuthListener = new FirebaseAuth.AuthStateListener() {\n            @Override\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\n                FirebaseUser user = firebaseAuth.getCurrentUser();\n                if (user != null) {\n                    // User is signed in\n                    Log.d(TAG, \"onAuthStateChanged:signed_in:\" + user.getUid());\n                } else {\n                    // User is signed out\n                    Log.d(TAG, \"onAuthStateChanged:signed_out\");\n                }\n                // [START_EXCLUDE]\n                updateUI(user);\n                // [END_EXCLUDE]\n            }\n        };\n        // [END auth_state_listener]\n  private void updateUI(FirebaseUser user) {\n        hideProgressDialog();\n String Email=user.getEmail();\n String Uid= user.getUid();\n    }\n\n    // [START on_start_add_listener]\n    @Override\n    public void onStart() {\n        super.onStart();\n        mAuth.addAuthStateListener(mAuthListener);\n    }\n    // [END on_start_add_listener]\n\n    // [START on_stop_remove_listener]\n    @Override\n    public void onStop() {\n        super.onStop();\n        if (mAuthListener != null) {\n            mAuth.removeAuthStateListener(mAuthListener);\n        }\n    }\n    // [END on_stop_remove_listener]\n\n    private void signInAnonymously() {\n        showProgressDialog();\n        // [START signin_anonymously]\n        mAuth.signInAnonymously()\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        Log.d(TAG, \"signInAnonymously:onComplete:\" + task.isSuccessful());\n\n                        // If sign in fails, display a message to the user. If sign in succeeds\n                        // the auth state listener will be notified and logic to handle the\n                        // signed in user can be handled in the listener.\n                        if (!task.isSuccessful()) {\n                            Log.w(TAG, \"signInAnonymously\", task.getException());\n                            Toast.makeText(MainActivity.this, \"Authentication failed.\",\n                                    Toast.LENGTH_SHORT).show();\n                        }\n\n                        // [START_EXCLUDE]\n                        hideProgressDialog();\n                        // [END_EXCLUDE]\n                    }\n                });\n        // [END signin_anonymously]\n    }\n\n    private void signOut() {\n        mAuth.signOut();\n   \n    }\n\n    private void linkAccount() {\n         \n\n        // Get email and password from form\n        String email = \"User_Email\";\n        String password =\"User_Password\";\n\n        // Create EmailAuthCredential with email and password\n        AuthCredential credential = EmailAuthProvider.getCredential(email, password);\n\n        // Link the anonymous user to the email credential\n        showProgressDialog();\n        // [START link_credential]\n        mAuth.getCurrentUser().linkWithCredential(credential)\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        Log.d(TAG, \"linkWithCredential:onComplete:\" + task.isSuccessful());\n\n                        // If sign in fails, display a message to the user. If sign in succeeds\n                        // the auth state listener will be notified and logic to handle the\n                        // signed in user can be handled in the listener.\n                        if (!task.isSuccessful()) {\n                            Toast.makeText(MainActivity.this, \"Authentication failed.\",\n                                    Toast.LENGTH_SHORT).show();\n                        }\n\n                        // [START_EXCLUDE]\n                        hideProgressDialog();\n                        // [END_EXCLUDE]\n                    }\n                });\n        // [END link_credential]\n    }\n\n  \n  @VisibleForTesting\n    public ProgressDialog mProgressDialog;\n\n    public void showProgressDialog() {\n        if (mProgressDialog == null) {\n            mProgressDialog = new ProgressDialog(this);\n            mProgressDialog.setMessage(getString(R.string.loading));\n            mProgressDialog.setIndeterminate(true);\n        }\n\n        mProgressDialog.show();\n    }\n\n    public void hideProgressDialog() {\n        if (mProgressDialog != null && mProgressDialog.isShowing()) {\n            mProgressDialog.dismiss();\n        }\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        hideProgressDialog();\n    }"
        },
        {
          "name": "Fragment.txt",
          "type": "blob",
          "size": 1.91796875,
          "content": "//layout\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <TimePicker\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/tp1\" />\n\n    <Button\n        android:text=\"Done\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/buDome\" />\n</LinearLayout>\n\n//Fragment class\n\npackage com.hussienalrubaye.androiddemowork;\n\nimport android.app.DialogFragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.TimePicker;\n\n/**\n * Created by hussienalrubaye on 9/7/16.\n */\n\npublic class PopTime extends DialogFragment implements View.OnClickListener {\n\n    View view;\n    TimePicker tp;\n    Button buDome;\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState)\n    {\n        view=inflater.inflate(R.layout.pop_time,container,false);\n        tp=(TimePicker)view.findViewById(R.id.tp1);\n        buDome=(Button)view.findViewById(R.id.buDome);\n        buDome.setOnClickListener(this);\n        return view;\n   }\n\n\n    @Override\n    public void onClick(View v) {\n        this.dismiss();\n        String timeOn=tp.getHour() +\":\"+ tp.getMinute();\nMainActivity ma=(MainActivity)getActivity();\n        ma.SetTime(timeOn);\n    }\n}\n\n\n/display Fragment from Activity\n\n public void SetTime(String Time){\n  Toast.makeText(getApplicationContext(),Time,Toast.LENGTH_LONG).show();\n    }\n\n\n    public void bushow(View view) {\n        android.app.FragmentManager fm= getFragmentManager();\n        PopTime popTime=new PopTime();\n        popTime.show(fm,\"Show fragment\");\n\n    }\n\n\n"
        },
        {
          "name": "GoogleApiClient.java",
          "type": "blob",
          "size": 3.9765625,
          "content": "  public class MyLocationListener\n            implements GoogleApiClient.ConnectionCallbacks,\n            GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener\n    {\n        private final String TAG = \"LOC_RECURRING_SAMPLE\";\n\n        // Constants that define how often location updates will be delivered\n        private final long LOC_UPDATE_INTERVAL = 10000; // 10s in milliseconds\n        private final long LOC_FASTEST_UPDATE = 5000; // 5s in milliseconds\n\n        protected GoogleApiClient mGoogleApiClient;\n        protected LocationRequest mLocRequest;\n        public     Location mCurLocation;\n\n        Context context;\n        public MyLocationListener(  Context context) {\n            this.context=context;\n            mCurLocation = null;\n\n            // build the Play Services client object\n            mGoogleApiClient = new GoogleApiClient.Builder(context)\n                    .addConnectionCallbacks(this)\n                    .addOnConnectionFailedListener(this)\n                    .addApi(LocationServices.API)\n                    .build();\n            mLocRequest=new LocationRequest();\n            mLocRequest.setInterval(LOC_UPDATE_INTERVAL);\n            mLocRequest.setFastestInterval(LOC_FASTEST_UPDATE);\n            mLocRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\n            // TODO: create the LocationRequest we'll use for location updates\n            onStart();\n        }\n\n\n        public void startLocationUpdates() {\n            // TODO: start the location updates\n\n            LocationServices.FusedLocationApi.requestLocationUpdates(\n                    mGoogleApiClient,mLocRequest,this);\n\n\n        }\n\n        public void stopLocationUpdates() {\n            // TODO: stop the updates\n\n            LocationServices.FusedLocationApi.removeLocationUpdates(\n                    mGoogleApiClient, this);\n\n\n        }\n\n        protected void updateUI() {\n            // take the lat and long of the current location object and add it to the list\n            if (mCurLocation != null) {\n                String lat = String.format(\"Lat: %f\\n\", mCurLocation.getLatitude());\n                String lon = String.format(\"Lon: %f\\n\", mCurLocation.getLongitude());\n\n\n            }\n        }\n\n        protected void initializeUI() {\n            // start by getting the last known location as a starting point\n            if (mCurLocation == null) {\n                mCurLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);\n\n                updateUI();\n\n\n            }\n\n\n        }\n\n        /**\n         * Called to handle the button clicks in the view\n         */\n\n        public void onClick(int id ) {\n            switch (id){\n                case 1:\n                    startLocationUpdates();\n                    break;\n                case 0:\n                    stopLocationUpdates();\n                    break;\n            }\n        }\n\n        /**\n         * Called by Play Services when the user's location changes\n         */\n        @Override\n        public void onLocationChanged(Location loc) {\n            mCurLocation = loc;\n            LocationService.location=loc;\n            updateUI();\n        }\n\n\n\n\n\n\n        /**\n         * Google Play Services Lifecycle methods\n         */\n        @Override\n        public void onConnected(Bundle connectionHint) {\n\n            initializeUI();\n            startLocationUpdates();\n        }\n\n        @Override\n        public void onConnectionFailed(ConnectionResult result) {\n            Log.d(TAG, \"Connection failed: ConnectionResult.getErrorCode() = \" + result.getErrorCode());\n        }\n\n        @Override\n        public void onConnectionSuspended(int cause) {\n            Log.d(TAG, \"Connection was suspended for some reason\");\n            mGoogleApiClient.connect();\n        }\n\n        /**\n         * Activity lifecycle events\n         */\n        public  void onStart() {\n\n            mGoogleApiClient.connect();\n        }\n\n        public void onStop() {\n            mGoogleApiClient.disconnect();\n\n        }\n\n    }"
        },
        {
          "name": "GooglePlayServices.java",
          "type": "blob",
          "size": 2.2568359375,
          "content": "  public class GooglePlayServices\n            implements GoogleApiClient.ConnectionCallbacks,\n            GoogleApiClient.OnConnectionFailedListener \n    {\n            private final String TAG = \"GooglePlayServices:\";\n        protected GoogleApiClient mGoogleApiClient;\n         \n        Context context;\n        public GooglePlayServices(  Context context) {\n            this.context=context;\n           \n            // build the Play Services client object\n            mGoogleApiClient = new GoogleApiClient.Builder(context)\n                    .addConnectionCallbacks(this)\n                    .addOnConnectionFailedListener(this)\n                    .addApi(LocationServices.API)\n                    .build();\n         \n       \n        }\n\n @Override\n    protected void onStart() {\n        super.onStart();\n        Log.i(TAG, \"onStart: Connecting to Google Play Services\");\n\n        // Connect to Play Services\n        GoogleApiAvailability gAPI = GoogleApiAvailability.getInstance();\n        int resultCode = gAPI.isGooglePlayServicesAvailable(this);\n        if (resultCode != ConnectionResult.SUCCESS) {\n            gAPI.getErrorDialog(this, resultCode, 1).show();\n        }\n        else {\n            mGoogleApiClient.connect();\n        }\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        if (mGoogleApiClient.isConnected()) {\n            Log.i(TAG, \"onStop: Disconnecting from Google Play Services\");\n            mGoogleApiClient.disconnect();\n        }\n    }\n        /**\n         * Google Play Services Lifecycle methods\n         */\n        @Override\n        public void onConnected(Bundle connectionHint) {\n         Log.i(TAG, \"onConnected: Is connected to Google Play Services\");\n           //TODO: we connected\n \n        }\n\n        @Override\n        public void onConnectionFailed(ConnectionResult result) {\n            //error result\n            Log.d(TAG, \"Connection failed: ConnectionResult.getErrorCode() = \" + result.getErrorCode());\n        }\n\n        @Override\n        public void onConnectionSuspended(int cause) {\n            Log.d(TAG, \"Connection was suspended for some reason\");\n            mGoogleApiClient.connect(); //reconnected\n        }\n \n \n\n    }\n\n    //TODO: Add play services in Grade\n    //compile 'com.google.android.gms:play-services:Version'"
        },
        {
          "name": "IntentService.java",
          "type": "blob",
          "size": 2.224609375,
          "content": "\n//Define Service\npublic class ServiceNotification extends IntentService {\n   public static boolean ServiceIsRun=false;\n\n    public ServiceNotification() {\n        super(\"MyWebRequestService\");\n    }\n    protected void onHandleIntent(Intent workIntent) {\n\n        // continue sending the messages\n        while ( ServiceIsRun) {\n             // creat new intent\n            Intent intent = new Intent();\n            //set the action that will receive our broadcast\n            intent.setAction(\"com.example.Broadcast\");\n            // add data to the bundle\n            intent.putExtra(\"username\", \"alxs1aa\");\n            // send the data to broadcast\n            sendBroadcast(intent);\n            //delay for 50000ms\n            try{\n                Thread.sleep(50000);\n            }catch (Exception ex){}\n\n\n        }\n    }\n\n\n}\n//Define BroadcastReceiver\n\npublic class MyReceiver extends BroadcastReceiver {\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // get the bundles in the message\n        final Bundle bundle = intent.getExtras();\n        // check the action equal to the action we fire in broadcast,\n        if   (   intent.getAction().equalsIgnoreCase(\"com.example.Broadcast\"))\n            //read the data from the intent\n            Toast.makeText(context,bundle.getString(\"username\"),Toast.LENGTH_LONG).show();\n    }\n}\n\n/* add to AndroidManifest.xml\n\n <!-- register the broadcast to listen to action names com.example.Broadcast-->\n        <receiver android:name=\".MyReceiver\" android:priority=\"2147483647\" >\n            <intent-filter>\n                <action android:name=\"com.example.Broadcast\" >\n                </action>\n            </intent-filter>\n        </receiver>\n <!-- register the service-->\n        <service\n            android:name=\".ServiceNotification\"\n            android:exported=\"false\" >\n        </service>\n\n\n\n*/\n\n//Start Service\n   // check if the services is already runs in background\n        if(ServiceNotification.ServiceIsRun==false ) {\n            ServiceNotification.ServiceIsRun  = true;\n            //register the services to run in background\n            Intent intent = new Intent(this, ServiceNotification.class);\n            // start the services\n            startService(intent);\n\n        } \n"
        },
        {
          "name": "JSONObject.java",
          "type": "blob",
          "size": 1.2080078125,
          "content": " /* this will be our strJsonstring\n  {\n   \"info\":\n   {\n      \"name\":\"Hussein\",\n      \"age\":27\n   },\n   \"jobs\":[\n   {\n      \"id\":1,\n      \"title\":\"Developer\",\n      \"desc\":\"Develop apps for user\",\n   },\n    {\n      \"id\":2,\n      \"title\":\"Tester\",\n      \"desc\":\"test apps\",\n   }\n]\n\n}\n\n*/\n\n  String JsonFromURL=\"{\" +\n                \"'info':{'name':'hussein','age':27 },\" +\n                \"'jobs':\" +\n                \"[\" +\n                \"{'id':1, 'title':'developer','desc':'nyc'},\" +\n                \"{'id':2, 'title':'developer','desc':'nyc'},\" +\n                \"{'id':3, 'title':'developer','desc':'nyc'}\" +\n                \"]\" +\n                \"}\";\n        try {\n            JSONObject json= new JSONObject(JsonFromURL);\n            JSONObject info=json.getJSONObject(\"info\");\n            String name=info.getString(\"name\");\n            int age=info.getInt(\"age\");\n            JSONArray jobs=json.getJSONArray(\"jobs\");\n\n            for ( int i=0; i<jobs.length();i++){\n               JSONObject Jobs= jobs.getJSONObject(i)  ;\n                String title=Jobs.getString(\"title\");\n                String desc=Jobs.getString(\"desc\");\n                int id=Jobs.getInt(\"id\");\n\n            }\n        }\n        catch (Exception ex){}\n "
        },
        {
          "name": "JSONvsXML",
          "type": "tree",
          "content": null
        },
        {
          "name": "JobService.Java",
          "type": "blob",
          "size": 1.2919921875,
          "content": "\n//1- Add service class\npublic class MyJobService extends JobService {\n    @Override\n    public boolean onStartJob(JobParameters jobParameters) {\n        // CALL URL,\n        Log.i(\"Job\",\" job is started succefuly\");\n        jobFinished(jobParameters,false);\n        return false;\n    }\n\n    @Override\n    public boolean onStopJob(JobParameters jobParameters) {\n        Log.i(\"Job\",\" job is stopped succefuly\");\n        return false;\n    }\n}\n//2- Add service to Mainfest.xml\n/*\n  <service android:name=\".MyJobService\"\n            android:permission=\"android.permission.BIND_JOB_SERVICE\"\n            />\n\n */\n//33- Call service\n\n            int JOBID=0;\n    public void bustart(View view) {\n\n        JobInfo.Builder builder= new\n                JobInfo.Builder(JOBID++,\n                new ComponentName( this,MyJobService.class));\n        builder.setMinimumLatency(1000);\n        builder.setOverrideDeadline(2000);\n       // builder.setPeriodic(2000);\n        //builder.setRequiresCharging(true);\n        //builder.setRequiresDeviceIdle(true);\n        //builder.setPersisted(true);\n       // builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED);\n        JobScheduler jobScheduler=\n                (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);\n        jobScheduler.schedule(builder.build());\n    }"
        },
        {
          "name": "LayoutBackground.xml",
          "type": "blob",
          "size": 1.0224609375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <item android:state_pressed=\"true\" >\n    <shape>\n      <solid\n          android:color=\"#70c656\" />\n      <stroke\n          android:width=\"1dp\"\n          android:color=\"#53933f\" />\n      <corners\n          android:radius=\"25dp\" />\n      <padding\n          android:left=\"10dp\"\n          android:top=\"10dp\"\n          android:right=\"10dp\"\n          android:bottom=\"10dp\" />\n    </shape>\n  </item>\n  <item>\n    <shape\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\">\n\n      <!-- Specify a semi-transparent solid green background color -->\n      <solid android:color=\"#ffffff\" />\n\n      <corners android:radius=\"5dp\"></corners>\n\n      <!-- Specify the margins that all content inside the drawable must adhere to -->\n      <padding\n          android:left=\"5dp\"\n          android:right=\"5dp\"\n          android:top=\"5dp\"\n          android:bottom=\"5dp\" />\n\n    </shape>\n  </item>\n</selector>"
        },
        {
          "name": "ListViewAdapter.java",
          "type": "blob",
          "size": 2.013671875,
          "content": "/*\nAdapter snaped code for Android apps that have \nuser id, job title and job description\n*/\n\n// adapter class\npublic class AdapterItems\n {\n  public   int ID;\n    public  String JobTitle;\n    public  String Description;\n//for news details\n    AdapterItems( int ID, String JobTitle,String Description)\n    {\n        this. ID=ID;\n        this. JobTitle=JobTitle;\n        this. Description=Description;\n    }\n}\n\n//display news list\n    private class MyCustomAdapter extends BaseAdapter {\n        public  ArrayList<AdapterItems>  listnewsDataAdpater ;\n\n        public MyCustomAdapter(ArrayList<AdapterItems>  listnewsDataAdpater) {\n            this.listnewsDataAdpater=listnewsDataAdpater;\n        }\n\n\n        @Override\n        public int getCount() {\n            return listnewsDataAdpater.size();\n        }\n\n        @Override\n        public String getItem(int position) {\n            return null;\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return position;\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent)\n         {\n            LayoutInflater mInflater = getLayoutInflater();\n           View myView = mInflater.inflate(R.layout.layout_ticket, null);\n             \n            final   AdapterItems s = listnewsDataAdpater.get(position);\n           \n              TextView txtJobTitle=( TextView)myView.findViewById(R.id.txtJobTitle);\n                txtJobTitle.setText(s.JobTitle);\n\n                return myView;\n        }\n\n}\n\n//adapter class\nArrayList<AdapterItems>    listnewsData = new ArrayList<AdapterItems>();\nMyCustomAdapter myadapter;\n \n //add data and view it\n listnewsData.add(new AdapterItems(1,\"developer\",\" develop apps\"));\n myadapter=new MyCustomAdapter(listnewsData);\nListView  lsNews=(ListView)findViewById(R.id.LVNews);\nlsNews.setAdapter(myadapter);//intisal with data\n\n//update  data in listview\n  listnewsData.add(new AdapterItems(2,\"tester\",\" test apps\"));\n   myadapter.notifyDataSetChanged();\n\n\n        //update\n\n//set on clicklinisner\n\n\n\n"
        },
        {
          "name": "MediaPlayerAndroidExample",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyAsyncTaskgetNews.java",
          "type": "blob",
          "size": 2.6435546875,
          "content": "public void buloginckic(View view) {\n        //get user name and password\n        EditText UserName=(EditText)findViewById(R.id.EDTUserName);\n        EditText Password=(EditText)findViewById(R.id.EDTpassword);\n        // send user name and password over the http\n        String url=\"http://sellingportal.alruabye.net/UsersWS.asmx/Login?UserName=\"+ UserName.getText().toString() +\"&Password=\"+ Password.getText().toString();\n       // start background task\n        new MyAsyncTaskgetNews().execute(url, \"news\");\n    }\n\n\n    // get news from server\n    public class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected void onPreExecute() {\n            //before works\n        }\n        @Override\n        protected String  doInBackground(String... params) {\n            // TODO Auto-generated method stub\n            try {\n                String NewsData;\n                  //define the url we have to connect with\n                URL url = new URL(params[0]);\n                //make connect with url and send request\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                //waiting for 7000ms for response\n                urlConnection.setConnectTimeout(7000);//set timeout to 5 seconds\n\n                try {\n                    //getting the response data\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    //convert the stream to string\n                    NewsData = ConvertInputToStringNoChange(in);\n                    //send to display data\n                    publishProgress(NewsData);\n                } finally {\n                    //end connection\n                    urlConnection.disconnect();\n                }\n\n            }catch (Exception ex){}\n            return null;\n        }\n        protected void onProgressUpdate(String... progress) {\n\n            try {\n                //display response data\n                Toast.makeText(getApplicationContext(),progress[0],Toast.LENGTH_LONG).show();\n\n            } catch (Exception ex) {\n            }\n\n\n        }\n\n        protected void onPostExecute(String  result2){\n\n\n        }\n\n\n\n\n    }\n\n// this method convert any stream to string\n    public static String ConvertInputToStringNoChange(InputStream inputStream) {\n\n        BufferedReader bureader=new BufferedReader( new InputStreamReader(inputStream));\n        String line ;\n        String linereultcal=\"\";\n\n        try{\n            while((line=bureader.readLine())!=null) {\n\n                linereultcal+=line;\n\n            }\n            inputStream.close();\n\n\n        }catch (Exception ex){}\n\n        return linereultcal;\n    }"
        },
        {
          "name": "MyCurrentLocationApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyLocationListener.java",
          "type": "blob",
          "size": 1.2802734375,
          "content": "import android.content.Context;\nimport android.location.Location;\nimport android.location.LocationListener;\nimport android.os.Bundle;\nimport android.widget.Toast;\n\n\npublic class MyLocationListener implements LocationListener {\n  Context context;\n     public static Location location;\n     public   MyLocationListener(Context context){\n       this.context  =context ;\n     }\n    public void onLocationChanged(Location location) {\n this.location=location;\n    }\n\n    public void onStatusChanged(String s, int i, Bundle b) {\n      //  Toast.makeText(context, \"Provider status changed\",\n       //         Toast.LENGTH_LONG).show();\n    }\n\n    public void onProviderDisabled(String s) {\n        Toast.makeText(context,\n                \"  GPS turned off . you cannot follow your locations\",\n                Toast.LENGTH_LONG).show();\n    }\n\n    public void onProviderEnabled(String s) {\n       // SettingSaved.LoadData(context);\n        Toast.makeText(context,\n                \" GPS turned on. you can follow your locations\",\n                Toast.LENGTH_LONG).show();\n    }\n\n\n}\n\nLocationListener locationListener = new MyLocationListener();\nLocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n\nlm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 35000, 10, this.locationListener);\n"
        },
        {
          "name": "MyTracker",
          "type": "tree",
          "content": null
        },
        {
          "name": "Notification.java",
          "type": "blob",
          "size": 0.3828125,
          "content": "  NotificationCompat.Builder nbuild= new NotificationCompat.Builder(this);\n        nbuild.setContentTitle(\"Danger\")\n                .setContentText(\"it will run soon\")\n                .setSmallIcon(R.drawable.play);\n\n        NotificationManager manager=(NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\n        manager.notify(1,nbuild.build());\n        manager.cancel(1);"
        },
        {
          "name": "PHP Webservice",
          "type": "tree",
          "content": null
        },
        {
          "name": "PhpMySqlQuery.php",
          "type": "blob",
          "size": 0.6845703125,
          "content": "<?php\n // 1- connect to db\n$host=\"127.0.0.1\";\n$user=\"root\";\n$password=\"12345\";\n$database=\"admins\";\n$connect=  mysqli_connect($host, $user, $password, $database);\nif(mysqli_connect_errno())\n{ die(\"cannot connect to database field:\". mysqli_connect_error());   }\n // define quesry \n$query=\"select * from logins\";  // $usename=$_GET['username'];\n$result=  mysqli_query($connect, $query);\nif(! $result)\n{ die(\"Error in query\");}\n //get data from database\n//$output=array();\nwhile($row=  mysqli_fetch_assoc($result))\n{\n $output[]=$row;  //$row['id']\n}\nprint(json_encode($output));// this will print the output in json\n// 4 clear\nmysqli_free_result($result);\n//5- close connection\nmysqli_close($connect);\n?>"
        },
        {
          "name": "Pockemon",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.7724609375,
          "content": " # The Complete Android App Development\n\n### In this course you will learn how to make 17 online games, and apps for Android, using Java. Watch using a [ FREE Youtube Link](https://www.youtube.com/channel/UCVNrwqQVKuQtnHHDfuFKc4w/videos). \n\nBellow, list of open source Apps that we build in tutorial\n\n- [Find My Age  App](#).\n- [Tic Tac Toe Local App](#).\n- [Calculator App](#).\n- [Pokémon Game App](#).\n- [Zoo App](#).\n- [Restaurants App](#).\n- [Find Sunrise time App](#).\n- [My Notes App](#).\n- [Tic Tac Toe using Firebase App](#).\n- [Facebook App using Firebase](#).\n- [MediaPlayer App](#).\n- [Alaram App](#).\n- [Notification Channel App](#).\n- [Light sensor App](#).\n- [Nimbuzz vibrate](#).\n- [Find My Phone App](#).\n- [Twitter App using Php + MySQL](#).\n\n\n\n\n![main](http://attach.alruabye.net/androidTutorialForBeginners/androidTutorialForBeginners.jpg)\n \n \n This source will help the beginners to start build their own Android  apps  from scratch. By the end of this course you will be able to build real world android apps. In this course you will learn how to build and design secure android apps avoiding Android Vulnerabilities, and how to work with android layout tools to design very attractive and responsive layout that work with different device size, then you will learn how to use Sqlite as local database storage  and Mysql as remote database storage, Also you will learn about web services and map. And  you will learn how to work with android device persimmons and access to device information and device services. Then you will learn how use Firebase to build apps with Real-time database, monetize your app, and other services that offered by firebase. In this tutorial you will learn how to build real world apps and online games like Twitter, Tic Tac Toy, and Find my phone\n"
        },
        {
          "name": "SeekBarandThread.text",
          "type": "blob",
          "size": 2.701171875,
          "content": "//layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n\n    tools:context=\"com.hussienalrubaye.androidpermission.MainActivity\">\n\n    <LinearLayout\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <SeekBar\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/sb1\"\n             />\n\n        <TextView\n            android:text=\"counter=1\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/tvCounter\"\n            android:textSize=\"42sp\" />\n\n        <Button\n            android:text=\"Start\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/button6\"\n            android:onClick=\"bustart\" />\n\n        <Button\n            android:text=\"Stop\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/button5\"\n            android:onClick=\"buStop\" />\n\n    </LinearLayout>\n</RelativeLayout>\n\n\n\n//code\n SeekBar sb1;\n    int MaxCounter=100;\n    TextView tvCounter;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sb1=(SeekBar)findViewById(R.id.sb1);\n        tvCounter=(TextView)findViewById(R.id.tvCounter) ;\n        sb1.setMax(MaxCounter);\n    }\n    boolean IsRunning=false;\n    int CounterUp=0;\n\n    public void bustart(View view) {\n        IsRunning=true;\n\n        myThread t=new myThread();\n        t.start();\n    }\n\n    public void buStop(View view) {\n\n        IsRunning=false;\n    }\n\n    class  myThread extends Thread{\n\n\n        @Override\n        public void run() {\n           while (IsRunning){\n\n               if (CounterUp<MaxCounter){\n // call ui\n\n                   runOnUiThread(new Runnable() {\n                       @Override\n                       public void run() {\n                           sb1.setProgress(CounterUp);\n                           tvCounter.setText(\"Couunter \"+ CounterUp);\n                       }\n                   });\n\n                   CounterUp=CounterUp+1;\n\n                   try {\n                       Thread.sleep(1000);\n                   } catch (InterruptedException e) {\n                       e.printStackTrace();\n                   }\n               }\n\n\n           }\n\n        }\n    }"
        },
        {
          "name": "Sensor accelerometer.txt",
          "type": "blob",
          "size": 1.7880859375,
          "content": "//permission\n\n<uses-feature android:name=\"android.hardware.sensor.accelerometer\"  android:required=\"true\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\"></uses-permission>\n   \n\n\n//code\n\npublic class MainActivity extends AppCompatActivity implements SensorEventListener  {\n\n    Sensor sensor;\n    SensorManager sensorManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sensorManager=(SensorManager)getSystemService(Context.SENSOR_SERVICE);\n        sensor=sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n\n    }\n\n    @Override\n    public  void onResume(){\n        super.onResume();\n        sensorManager.registerListener(this,sensor,SensorManager.SENSOR_DELAY_NORMAL);\n\n    }\n    @Override\n    public  void onPause(){\n        super.onPause();\n        sensorManager.unregisterListener(this);\n    }\n\n  float xOld=0;\n    float yOld=0;\n    float zOld=0;\n    float ThreaShold=3000;\n    long OldTime=0;\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n       float x =event.values[0];\n        float y =event.values[1];\n        float z =event.values[2];\n        long CurrentTime= System.currentTimeMillis();\n\n        if ((CurrentTime-OldTime)>100){\n\n            long TimeDiff=CurrentTime-OldTime;\n            OldTime=CurrentTime;\n\n            float speed=Math.abs(x+y+z-xOld-yOld-zOld)/TimeDiff *10000;\n            if (speed>ThreaShold){\n                Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);\n                v.vibrate(500);\n                Toast.makeText(getApplicationContext(),\"Shook\",Toast.LENGTH_LONG).show();;\n            }\n\n\n        }\n\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n}\n"
        },
        {
          "name": "Service.java",
          "type": "blob",
          "size": 1.4140625,
          "content": " \n\n/**\n * Created by hussienalrubaye on 10/1/16.\n */\n\npublic class LocationService extends Service\n{\n   \n    @Override\n    public void onCreate()\n    {\n        super.onCreate();\n      \n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId)\n    {\n       \n\n        return START_NOT_STICKY;\n    }\n\n    @Override\n    public IBinder onBind(Intent intent)\n    {\n        return null;\n    }\n\n\n\n\n\n\n    @Override\n    public void onDestroy() {\n        // handler.removeCallbacks(sendUpdatesToUI);\n        super.onDestroy();\n       // Log.v(\"STOP_SERVICE\", \"DONE\");\n      \n    }\n\n\n\n\n \n\n}\n\n//Start service\n\n            Intent callReceiverIntent = new Intent(\"com.domain.name.servicename\");\n            callReceiverIntent.putExtras(new Intent(context.getApplicationContext(), LocationService.class));\n           context. startService(callReceiverIntent);\n\n//\n           //Stop service\n\n            Intent callReceiverIntent = new Intent(\"com.domain.name.servicename\");\n          callReceiverIntent.putExtras(new Intent(context.getApplicationContext(), LocationService.class));\n           context. stopService(callReceiverIntent);\n\n//Config service Mainfest.xml\n           /*\n\n            <service android:name=\".LocationService\" >\n            <intent-filter>\n                <action android:name=\"com.domain.name.servicename\" />\n            </intent-filter>\n            </service>\n\n            */\n\n            //start alert\n\n\n\n"
        },
        {
          "name": "SharedPreferences.java",
          "type": "blob",
          "size": 0.6279296875,
          "content": "public class SharedRef {\n    SharedPreferences ShredRef;\n\n public SharedRef(Context context){\n     ShredRef=context.getSharedPreferences(\"myRef\",Context.MODE_PRIVATE);\n }\n\n    public  void SaveData(String UserName,String Password){\n        SharedPreferences.Editor editor=ShredRef.edit();\n        editor.putString(\"UserName\",UserName);\n        editor.putString(\"Password\",Password);\n        editor.commit();\n    }\n\n    public String LoadData(){\n         String FileContent=\"UserName:\"+ShredRef.getString(\"UserName\",\"No name\");\n        FileContent+=\",Password:\"+ShredRef.getString(\"Password\",\"No Password\");\n        return FileContent;\n    }\n\n}"
        },
        {
          "name": "SqliteDBAndroidExample",
          "type": "tree",
          "content": null
        },
        {
          "name": "Thread.java",
          "type": "blob",
          "size": 0.8173828125,
          "content": "\n//runOnUiThread\nclass MyThread extends Thread{\n\t @Override\n            public void run() {\n\n               runOnUiThread(new Runnable() //run on ui thread\n                 {\n                  public void run() \n                  { \n                    Log.i(\"timeleft\",\"\"+timeleft);  \n                    //update ui\n \n                  }\n                 });\n\n\n           }\n}\n\nMyThread t1 =new MyThread();  \nt1.start(); \n\n/*\n   txtv.post(new Runnable() {\n                    public void run(){\n                        //TODO\n                        txtv.setText(\"hi\");\n                    }\n                });\n\n                */\n\n       //other thread\n\nclass Multi3 implements Runnable{  \npublic void run(){  \nSystem.out.println(\"thread is running...\");  \n}  \n  \nMulti3 m1=new Multi3();  \nThread t1 =new Thread(m1);  \nt1.start(); \n\n\n"
        },
        {
          "name": "TicTacToyGame",
          "type": "tree",
          "content": null
        },
        {
          "name": "TwitterApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "Userinfo.json",
          "type": "blob",
          "size": 0.2392578125,
          "content": "  {\n   \"info\":\n   {\n      \"name\":\"Hussein\",\n      \"age\":27\n   },\n   \"jobs\":[\n   {\n      \"id\":1,\n      \"title\":\"Developer\",\n      \"desc\":\"Develop apps for user\",\n   },\n    {\n      \"id\":2,\n      \"title\":\"Tester\",\n      \"desc\":\"test apps\",\n   }\n]\n}"
        },
        {
          "name": "VulnerabilityNote.txt",
          "type": "blob",
          "size": 0.0927734375,
          "content": "\nAndroid Vulnerability GitHub Repository\n\nhttps://github.com/dan7800/VulnerableAndroidAppOracle"
        },
        {
          "name": "Web Services",
          "type": "tree",
          "content": null
        },
        {
          "name": "WebView.txt",
          "type": "blob",
          "size": 3.5234375,
          "content": "//layout\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n\n    tools:context=\"com.hussienalrubaye.androidpermission.MainActivity\">\n\n    <LinearLayout\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <LinearLayout\n            android:orientation=\"horizontal\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <EditText\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:inputType=\"textPersonName\"\n                android:text=\"\"\n                android:hint=\"Enter URL\"\n                android:ems=\"10\"\n                android:id=\"@+id/etURL\"\n                android:layout_weight=\"1\" />\n\n            <Button\n                android:onClick=\"buGo\"\n                android:text=\"Go\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:id=\"@+id/button2\"\n                android:layout_weight=\"1\" />\n        </LinearLayout>\n\n        <LinearLayout\n            android:orientation=\"horizontal\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <Button\n                android:onClick=\"buBack\"\n                android:text=\"Back\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:id=\"@+id/button4\"\n                android:layout_weight=\"1\" />\n\n            <Button\n                android:text=\"Forword\"\n                android:onClick=\"buForword\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:id=\"@+id/button3\"\n                android:layout_weight=\"1\" />\n        </LinearLayout>\n\n        <WebView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:id=\"@+id/wv1\" />\n    </LinearLayout>\n</RelativeLayout>\n\n\n// java code\npublic class MainActivity extends AppCompatActivity {\n//TextView tvDisplay;\n    EditText etURL;\n    WebView wv1;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n       // tvDisplay=(TextView)findViewById(R.id.tvDisplay);\n        wv1=(WebView)findViewById(R.id.wv1);\n        wv1.setWebViewClient(new myWebView());\n        wv1.getSettings().setJavaScriptEnabled(true);\n        wv1.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);\n        etURL=(EditText)findViewById(R.id.etURL);\n        wv1.loadUrl(\"http://alruabye.net\");\n\n\n    }\n\n\n    public void buGo(View view) {\n\n        LoadURL(etURL.getText().toString());\n    }\n\n \n    void LoadURL(String url){\n        this.url=url;\n        wv1.loadUrl(url);\n    }\n\n    public void buBack(View view) {\n        wv1.goBack();\n    }\n\n    public void buForword(View view) {\n        wv1.goForward();\n    }\n\n    private class myWebView extends WebViewClient{\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request){\n            return true;\n        }\n\n    }\n}\n\n//acces to internet\n    <uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n\n"
        },
        {
          "name": "bindService.java",
          "type": "blob",
          "size": 2.68359375,
          "content": "public class LocalService extends Service {\n    // Binder given to clients\n    private final IBinder mBinder = new LocalBinder();\n    // Random number generator\n    private final Random mGenerator = new Random();\n\n    /**\n     * Class used for the client Binder.  Because we know this service always\n     * runs in the same process as its clients, we don't need to deal with IPC.\n     */\n    public class LocalBinder extends Binder {\n        LocalService getService() {\n            // Return this instance of LocalService so clients can call public methods\n            return LocalService.this;\n        }\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    /** method for clients */\n    public int getRandomNumber() {\n      return mGenerator.nextInt(100);\n    }\n}\n\n//start service\n\npublic class BindingActivity extends Activity {\n    LocalService mService;\n    boolean mBound = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // Bind to LocalService\n        Intent intent = new Intent(this, LocalService.class);\n        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Unbind from the service\n        if (mBound) {\n            unbindService(mConnection);\n            mBound = false;\n        }\n    }\n\n    /** Called when a button is clicked (the button in the layout file attaches to\n      * this method with the android:onClick attribute) */\n    public void onButtonClick(View v) {\n        if (mBound) {\n            // Call a method from the LocalService.\n            // However, if this call were something that might hang, then this request should\n            // occur in a separate thread to avoid slowing down the activity performance.\n            int num = mService.getRandomNumber();\n            Toast.makeText(this, \"number: \" + num, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    /** Defines callbacks for service binding, passed to bindService() */\n    private ServiceConnection mConnection = new ServiceConnection() {\n\n        @Override\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // We've bound to LocalService, cast the IBinder and get LocalService instance\n            LocalBinder binder = (LocalBinder) service;\n            mService = binder.getService();\n            mBound = true;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName arg0) {\n            mBound = false;\n        }\n    };\n}"
        },
        {
          "name": "file.json",
          "type": "blob",
          "size": 3.9267578125,
          "content": "{\n \"query\": {\n  \"count\": 1,\n  \"created\": \"2016-09-10T00:59:13Z\",\n  \"lang\": \"en-us\",\n  \"results\": {\n   \"channel\": {\n    \"units\": {\n     \"distance\": \"mi\",\n     \"pressure\": \"in\",\n     \"speed\": \"mph\",\n     \"temperature\": \"F\"\n    },\n    \"title\": \"Yahoo! Weather - Rochester, NY, US\",\n    \"link\": \"http://us.rd.yahoo.com/dailynews/rss/weather/Country__Country/*https://weather.yahoo.com/country/state/city-2482949/\",\n    \"description\": \"Yahoo! Weather for Rochester, NY, US\",\n    \"language\": \"en-us\",\n    \"lastBuildDate\": \"Fri, 09 Sep 2016 08:59 PM EDT\",\n    \"ttl\": \"60\",\n    \"location\": {\n     \"city\": \"Rochester\",\n     \"country\": \"United States\",\n     \"region\": \" NY\"\n    },\n    \"wind\": {\n     \"chill\": \"75\",\n     \"direction\": \"315\",\n     \"speed\": \"7\"\n    },\n    \"atmosphere\": {\n     \"humidity\": \"53\",\n     \"pressure\": \"998.0\",\n     \"rising\": \"0\",\n     \"visibility\": \"16.1\"\n    },\n    \"astronomy\": {\n     \"sunrise\": \"6:44 am\",\n     \"sunset\": \"7:30 pm\"\n    },\n    \"image\": {\n     \"title\": \"Yahoo! Weather\",\n     \"width\": \"142\",\n     \"height\": \"18\",\n     \"link\": \"http://weather.yahoo.com\",\n     \"url\": \"http://l.yimg.com/a/i/brand/purplelogo//uh/us/news-wea.gif\"\n    },\n    \"item\": {\n     \"title\": \"Conditions for Rochester, NY, US at 08:00 PM EDT\",\n     \"lat\": \"43.186199\",\n     \"long\": \"-77.616402\",\n     \"link\": \"http://us.rd.yahoo.com/dailynews/rss/weather/Country__Country/*https://weather.yahoo.com/country/state/city-2482949/\",\n     \"pubDate\": \"Fri, 09 Sep 2016 08:00 PM EDT\",\n     \"condition\": {\n      \"code\": \"29\",\n      \"date\": \"Fri, 09 Sep 2016 08:00 PM EDT\",\n      \"temp\": \"76\",\n      \"text\": \"Partly Cloudy\"\n     },\n     \"forecast\": [\n      {\n       \"code\": \"47\",\n       \"date\": \"09 Sep 2016\",\n       \"day\": \"Fri\",\n       \"high\": \"81\",\n       \"low\": \"71\",\n       \"text\": \"Scattered Thunderstorms\"\n      },\n      {\n       \"code\": \"4\",\n       \"date\": \"10 Sep 2016\",\n       \"day\": \"Sat\",\n       \"high\": \"87\",\n       \"low\": \"66\",\n       \"text\": \"Thunderstorms\"\n      },\n      {\n       \"code\": \"4\",\n       \"date\": \"11 Sep 2016\",\n       \"day\": \"Sun\",\n       \"high\": \"73\",\n       \"low\": \"60\",\n       \"text\": \"Thunderstorms\"\n      },\n      {\n       \"code\": \"32\",\n       \"date\": \"12 Sep 2016\",\n       \"day\": \"Mon\",\n       \"high\": \"75\",\n       \"low\": \"55\",\n       \"text\": \"Sunny\"\n      },\n      {\n       \"code\": \"34\",\n       \"date\": \"13 Sep 2016\",\n       \"day\": \"Tue\",\n       \"high\": \"80\",\n       \"low\": \"60\",\n       \"text\": \"Mostly Sunny\"\n      },\n      {\n       \"code\": \"39\",\n       \"date\": \"14 Sep 2016\",\n       \"day\": \"Wed\",\n       \"high\": \"69\",\n       \"low\": \"60\",\n       \"text\": \"Scattered Showers\"\n      },\n      {\n       \"code\": \"30\",\n       \"date\": \"15 Sep 2016\",\n       \"day\": \"Thu\",\n       \"high\": \"67\",\n       \"low\": \"54\",\n       \"text\": \"Partly Cloudy\"\n      },\n      {\n       \"code\": \"30\",\n       \"date\": \"16 Sep 2016\",\n       \"day\": \"Fri\",\n       \"high\": \"72\",\n       \"low\": \"53\",\n       \"text\": \"Partly Cloudy\"\n      },\n      {\n       \"code\": \"28\",\n       \"date\": \"17 Sep 2016\",\n       \"day\": \"Sat\",\n       \"high\": \"76\",\n       \"low\": \"56\",\n       \"text\": \"Mostly Cloudy\"\n      },\n      {\n       \"code\": \"28\",\n       \"date\": \"18 Sep 2016\",\n       \"day\": \"Sun\",\n       \"high\": \"76\",\n       \"low\": \"61\",\n       \"text\": \"Mostly Cloudy\"\n      }\n     ],\n     \"description\": \"<![CDATA[<img src=\\\"http://l.yimg.com/a/i/us/we/52/29.gif\\\"/>\\n<BR />\\n<b>Current Conditions:</b>\\n<BR />Partly Cloudy\\n<BR />\\n<BR />\\n<b>Forecast:</b>\\n<BR /> Fri - Scattered Thunderstorms. High: 81Low: 71\\n<BR /> Sat - Thunderstorms. High: 87Low: 66\\n<BR /> Sun - Thunderstorms. High: 73Low: 60\\n<BR /> Mon - Sunny. High: 75Low: 55\\n<BR /> Tue - Mostly Sunny. High: 80Low: 60\\n<BR />\\n<BR />\\n<a href=\\\"http://us.rd.yahoo.com/dailynews/rss/weather/Country__Country/*https://weather.yahoo.com/country/state/city-2482949/\\\">Full Forecast at Yahoo! Weather</a>\\n<BR />\\n<BR />\\n(provided by <a href=\\\"http://www.weather.com\\\" >The Weather Channel</a>)\\n<BR />\\n]]>\",\n     \"guid\": {\n      \"isPermaLink\": \"false\"\n     }\n    }\n   }\n  }\n }\n}"
        },
        {
          "name": "handle.java",
          "type": "blob",
          "size": 0.7900390625,
          "content": "\nmyhandler handler =new myhandler();\n                // Create Inner Thread Class\nclass background extends   Thread \n {\n public void run() \n{                  \nMessage msgObj = handler.obtainMessage();\nBundle b = new Bundle();\nb.putString(\"message\", msg);\nmsgObj.setData(b);\nhandler.sendMessage(msgObj);   \n }\n\n}\n  \n \n// Define the Handler that receives messages from the thread and update the progress\nclass  myhandler extends Handler {\n public void handleMessage(Message msg) {\n                              if ((null != msg))   \n                            String aResponse = msg.getData().getString(\"message\");\n \n                        }\n                    }\n "
        },
        {
          "name": "in app purchase.java",
          "type": "blob",
          "size": 3.7470703125,
          "content": "//1- requestion permmion\n  <uses-permission android:name=\"com.android.vending.BILLING\" />\n\n  //2- go to men Android SDK Manager -> add Google Play Billing Library .\n\n  //3- got o AndroidSDK/extra/google/play_billing/sample\n  // copy all files in util folder to your app util folder\n    //chnage apk name of head all files\n  // add aidl folder and copy it content from other project\n\n\n  //4- add product in your play console\n\n  //5- add this code to your activity\n\n    //***************************Payment***************************\n   private static final String TAG =\"Your_packge_ID\";\n    // test ITEM_SKU android.test.purchased\n    // test token mypurchasetoken\n    static final String ITEM_SKU = \"android.test.purchased\";\n    IabHelper mHelper;\n\n  IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener\n            = new IabHelper.OnIabPurchaseFinishedListener() {\n        public void onIabPurchaseFinished(IabResult result,\n                                          Purchase purchase)\n        {\n            if (result.isFailure()) {\n                // Handle error\n                return;\n            }\n            else if (purchase.getSku().equals(ITEM_SKU)) {\n                consumeItem();\n                //clickButton.setEnabled(false);\n            }\n\n        }\n    };\n    public void consumeItem() {\n        mHelper.queryInventoryAsync(mReceivedInventoryListener);\n    }\n\n    IabHelper.QueryInventoryFinishedListener mReceivedInventoryListener\n            = new IabHelper.QueryInventoryFinishedListener() {\n        public void onQueryInventoryFinished(IabResult result,\n                                             Inventory inventory) {\n\n            if (result.isFailure()) {\n                // Handle failure\n            } else {\n                mHelper.consumeAsync(inventory.getPurchase(ITEM_SKU),\n                        mConsumeFinishedListener);\n            }\n        }\n    };\n    IabHelper.OnConsumeFinishedListener mConsumeFinishedListener =\n            new IabHelper.OnConsumeFinishedListener() {\n                public void onConsumeFinished(Purchase purchase,\n                                              IabResult result) {\n\n                    if (result.isSuccess()) {\n                     //  purchuase is done\n                    } else {\n                        // handle error\n                    }\n                }\n            };\n @Override\n    protected void onActivityResult(int requestCode, int resultCode,\n                                    Intent data)\n    {\n        if (!mHelper.handleActivityResult(requestCode,\n                resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n        }\n    }\n      void PayItem(String ITEM_SKU){\n        mHelper.launchPurchaseFlow(this, ITEM_SKU, 10001,\n                mPurchaseFinishedListener, \"mypurchasetoken\");\n    }\n    //***************************************************************\n// 7- in oncreate() add this code\n             //In app purchase\n        String base64EncodedPublicKey = \"your_API_key\" ;\n\n        mHelper = new IabHelper(this, base64EncodedPublicKey);\n\n        mHelper.startSetup(new\n                                   IabHelper.OnIabSetupFinishedListener() {\n                                       public void onIabSetupFinished(IabResult result)\n                                       {\n                                           if (!result.isSuccess()) {\n                                               Log.d(TAG, \"In-app Billing setup failed: \" + result);\n                                           } else {\n                                               Log.d(TAG, \"In-app Billing is set up OK\");\n\n                                           }\n                                       }\n                                   });\n\n\n        //8- purchuase\n      PayItem(ITEM_SKU);\n      \n\n"
        },
        {
          "name": "intent.java",
          "type": "blob",
          "size": 0.416015625,
          "content": "\n//intent send\n  Intent intent=new Intent(this,Main2Activity.class);\n        intent.putExtra(\"name\",\"hussein alruabye\");\n        intent.putExtra(\"age\",\"26\");\n          startActivity(intent);\n\n\n    // intent reciver\n         Bundle b= getIntent().getExtras();\n        TextView textView2=(TextView)findViewById(R.id.textView2);\n        textView2.setText(\"Name:\"+ b.getString(\"name\")+\n                \"age:\"+ b.getString(\"age\"));"
        },
        {
          "name": "liveCycle.java",
          "type": "blob",
          "size": 0.751953125,
          "content": "  protected void onStart(){\n        super.onStart();\n        Toast.makeText(this,\"OnStart\",Toast.LENGTH_LONG).show();\n    }\n\n    protected void onRestart(){\n        super.onRestart();\n        Toast.makeText(this,\"onRestart\",Toast.LENGTH_LONG).show();\n    }\n\n    protected void onResume(){\n        super.onResume();\n        Toast.makeText(this,\"onResume\",Toast.LENGTH_LONG).show();\n    }\n\n    protected void onPause(){\n        super.onPause();\n        Toast.makeText(this,\"onPause\",Toast.LENGTH_LONG).show();\n    }\n\n    protected void onStop(){\n        super.onStop();\n        Toast.makeText(this,\"onStop\",Toast.LENGTH_LONG).show();\n    }\n\n    protected void onDestroy(){\n        super.onDestroy();\n        Toast.makeText(this,\"onDestroy\",Toast.LENGTH_LONG).show();\n    }"
        },
        {
          "name": "map.java",
          "type": "blob",
          "size": 1.0146484375,
          "content": "  // Add a marker in Sydney and move the camera\n       LatLng sydney = new LatLng(-34, 151);\n        LatLng sydney2 = new LatLng(-34.01, 151.02);\n        LatLng sydney3 = new LatLng(-34.02, 151.03);\n\n\n        //without image\n        mMap.addMarker(new MarkerOptions().position(sydney).\n                title(\"Marker in Sydney\") );\n\n//with image\n   mMap.addMarker(new MarkerOptions().position(sydney).\n                title(\"Marker in Sydney\")\n        .snippet(\"details here\")\n        .icon(BitmapDescriptorFactory.fromResource(R.drawable.android)));\n\n        mMap.addCircle(new CircleOptions()\n        .center(sydney)\n        .radius(200)\n        .strokeColor(Color.RED)\n                .fillColor(Color.BLUE)\n        );\n\n        mMap.addPolyline( new PolylineOptions()\n        .add(sydney,sydney2)\n        .width(25)\n        .color(Color.BLUE)\n        .geodesic(true));\n\n        mMap.addPolygon(new PolygonOptions()\n        .add(sydney,sydney2,sydney3)\n        );\n\n\n\n\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(sydney,14));"
        },
        {
          "name": "menu.txt",
          "type": "blob",
          "size": 2.2353515625,
          "content": " 1-- menu layout\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <item\n        android:id=\"@+id/searchbar\"\n        android:title=\"Search\"\n        app:actionViewClass=\"android.widget.SearchView\"\n        app:showAsAction=\"always\"\n\n        ></item>\n    <item android:id=\"@+id/Home\"\n        android:icon=\"@drawable/home\"\n        android:title=\"Home\"\n        app:showAsAction=\"ifRoom\"/>\n    <item android:id=\"@+id/Add\"\n        android:icon=\"@drawable/add\"\n        android:title=\"Add\"\n        app:showAsAction=\"ifRoom\"/>\n    <item android:id=\"@+id/setting\"\n        android:icon=\"@drawable/settings\"\n        android:title=\"Setting\"\n        app:showAsAction=\"ifRoom\"/>\n\n\n</menu>\n\n2- menu code\n\n\n @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.mainmenu, menu);\n\n        SearchView sv=(SearchView) menu.findItem(R.id.searchbar).getActionView();\n        SearchManager sm=(SearchManager) getSystemService(Context.SEARCH_SERVICE);\n        sv.setSearchableInfo(sm.getSearchableInfo(getComponentName()));\n        sv.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n            @Override\n            public boolean onQueryTextSubmit(String query) {\n                Toast.makeText(getApplicationContext(),query,Toast.LENGTH_LONG).show();\n                return false;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle item selection\n        switch (item.getItemId()) {\n            case R.id.Home:\n                Toast.makeText(this,\"Home\",Toast.LENGTH_LONG).show();\n                return true;\n            case R.id.Add:\n                Toast.makeText(this,\"Add\",Toast.LENGTH_LONG).show();\n                return true;\n            case R.id.setting:\n                Toast.makeText(this,\"Seeting\",Toast.LENGTH_LONG).show();\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }"
        },
        {
          "name": "permission.java",
          "type": "blob",
          "size": 3.0400390625,
          "content": "//Sms Permiison\n/*\n <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.RECEIVE_SMS\" />\n\n*/\n//access to permsions\n    void CheckUserPermsions(){\n      if ( Build.VERSION.SDK_INT >= 23){\n                if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) !=\n                            PackageManager.PERMISSION_GRANTED  ){\n                     requestPermissions(new String[]{\n                                        android.Manifest.permission.ACCESS_FINE_LOCATION},\n                                REQUEST_CODE_ASK_PERMISSIONS);\n                        return ;\n                    }\n                }\n\n                getLastLocation();// init the contact list\n              \n    }\n    //get acces to location permsion\n    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;\n\n\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        switch (requestCode) {\n            case REQUEST_CODE_ASK_PERMISSIONS:\n                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    getLastLocation();// init the contact list\n                } else {\n                    // Permission Denied\n                    Toast.makeText( this,\"your message\" , Toast.LENGTH_SHORT)\n                            .show();\n                }\n                break;\n            default:\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n\n//Get last location\n  public  void getLastLocation(){\n  \t    LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\n  \t        Location myLocation=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n                if (myLocation == null) \n                {\n                    myLocation = locationManager.getLastKnownLocation(LocationManager.PASSIVE_PROVIDER);\n\n                }\n    }\n\n\n//read contact list\n      public  void getContactList(){\n ArrayList<ListItem> list_contact=new ArrayList<ListItem>() ;\n            Cursor cursor = getContentResolver().query( ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null,null, null);\n            while (cursor.moveToNext()) {\n                String name =cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n                String phoneNumber = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n                list_contact.add(new ListItem(name, phoneNumber));\n\n\n            }\n\n      }\n\n\n\npublic class ListItem {\n    public String Title;\n    public String phoneNumber;\n    public ListItem(String Title, String phoneNumber)\n    { this. Title=Title;\n        this. phoneNumber=phoneNumber;\n    }\n}\n\n\n\n//ratinal permmison\n    if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,\n             android.Manifest.permission.READ_CONTACTS)) {\n    }\n\n"
        },
        {
          "name": "sensor_light.txt",
          "type": "blob",
          "size": 1.408203125,
          "content": "// permission\n<uses-feature android:name=\"android.hardware.sensor.accelerometer\"  android:required=\"true\" />\n    <uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n   \n   \n\n//code\npublic class MainActivity extends AppCompatActivity implements SensorEventListener  {\n\n    Sensor sensor;\n    SensorManager sensorManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sensorManager=(SensorManager)getSystemService(Context.SENSOR_SERVICE);\n        sensor=sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);\n\n    }\n\n    @Override\n    public  void onResume(){\n        super.onResume();\n        sensorManager.registerListener(this,sensor,SensorManager.SENSOR_DELAY_NORMAL);\n\n    }\n    @Override\n    public  void onPause(){\n        super.onPause();\n        sensorManager.unregisterListener(this);\n    }\n\n MediaPlayer mp;\n    boolean isrunning=false;\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n\nif (event.values[0]>40 && isrunning==false){\n    isrunning=true;\n    mp=new MediaPlayer();\n    try {\n        mp.setDataSource(\"http://server6.mp3quran.net/thubti/001.mp3\");\n        mp.prepare();\n        mp.start();\n\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n\n\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n}"
        },
        {
          "name": "shape.xml",
          "type": "blob",
          "size": 1.0009765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_pressed=\"true\">\n        <shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:shape=\"rectangle\"\n\n            >\n            <solid android:color=\"#f9f9f9\"></solid>\n            <corners android:radius=\"150dp\"></corners>\n            <stroke android:color=\"#00bfd5\" android:width=\"1dp\"></stroke>\n            <padding android:bottom=\"12dp\" android:left=\"12dp\" android:right=\"12dp\"\n                android:top=\"12dp\"></padding>\n\n        </shape>\n\n\n    </item>\n\n\n<item>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:shape=\"rectangle\"\n\n    >\n     <solid android:color=\"#f3f\"></solid>\n    <corners android:radius=\"150dp\"></corners>\n<stroke android:color=\"#00bfd5\" android:width=\"1dp\"></stroke>\n<padding android:bottom=\"12dp\" android:left=\"12dp\" android:right=\"12dp\"\n     android:top=\"12dp\"></padding>\n\n</shape>\n\n\n</item>\n\n\n\n\n</selector>"
        },
        {
          "name": "string.txt",
          "type": "blob",
          "size": 0.4912109375,
          "content": "\n1-  lyaout\n<resources>\n    <string name=\"app_name\">localization</string>\n    <string name=\"buhome\">Home</string>\n    <string name=\"mgs\">Welcome</string>\n\n    <string-array name=\"myarray\">\n        <item>name</item>\n        <item>name</item>\n        <item>name</item>\n    </string-array>\n</resources>\n\n\n\n2- code\n\n\n        String msg=getResources().getString(R.string.mgs);\n        Toast.makeText(this,msg,Toast.LENGTH_LONG).show();\n        String[] myarray=getResources().getStringArray(R.array.myarray);"
        },
        {
          "name": "takePicture.txt",
          "type": "blob",
          "size": 0.662109375,
          "content": "\n// add permission\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"></uses-permission>\n   <uses-feature android:name=\"android.hardware.camera2\" android:required=\"true\"></uses-feature>\n\n\n//code\n void TakePicture(){\n        Intent intent= new Intent();\n        intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);\n        startActivityForResult(intent,tag);\n    }\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode,Intent data){\n        if (requestCode==tag && resultCode==RESULT_OK){\n         Bundle b=data.getExtras();\n            Bitmap img=(Bitmap)b.get(\"data\");\n            imageView.setImageBitmap(img);\n\n        }\n    }"
        }
      ]
    }
  ]
}