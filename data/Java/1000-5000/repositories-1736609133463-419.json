{
  "metadata": {
    "timestamp": 1736609133463,
    "page": 419,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "getActivity/Toaster",
      "stars": 3285,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": ".gradle\n.idea\n.cxx\n.externalNativeBuild\nbuild\ncaptures\n\n._*\n*.iml\n.DS_Store\nlocal.properties"
        },
        {
          "name": "HelpDoc-en.md",
          "type": "blob",
          "size": 10.46484375,
          "content": "#### Catalog\n\n* [How to customize toast display animation](#how-to-customize-toast-display-animation)\n\n* [How to customize toast display duration](#how-to-customize-toast-display-duration)\n\n* [How to customize toast layout style](#how-to-customize-toast-layout-style)\n\n* [How to switch to toast queue display strategy](#how-to-switch-to-toast-queue-display-strategy)\n\n* [What should I do if the framework cannot meet the scene I am currently using](#what-should-i-do-if-the-framework-cannot-meet-the-scene-i-am-currently-using)\n\n* [How to implement cross page display of toast in the framework](#how-to-implement-cross-page-display-of-toast-in-the-framework)\n\n* [Why the framework prefers to use window manager to implement toast](#why-the-framework-prefers-to-use-window-manager-to-implement-toast)\n\n#### How to customize toast display animation\n\n* When toast is initialized, just modify the toast strategy\n\n```java\nToaster.init(this, new ToastStrategy() {\n\n    @Override\n    public IToast createToast(IToastStyle<?> style) {\n        if (toast instanceof CustomToast) {\n            CustomToast customToast = ((CustomToast) toast);\n            // Set the toast animation effect\n            customToast.setAnimationsId(R.anim.xxx);\n        }\n        return toast;\n    }\n});\n```\n\n* The disadvantage of this method is that it will only take effect when the application is in the foreground. This is because the toast in the foreground is implemented with a framework, which is essentially a WindowManager. The advantage is that it is very flexible and is not limited by the system toast mechanism. The disadvantage is that it cannot It is displayed in the background; while the toast in the background is implemented by the system, the advantage is that it can be displayed in the background, the disadvantage is that it is very limited and cannot be customized too deeply; and the framework uses two The advantages and disadvantages of the two methods are complementary.\n\n#### How to customize toast display duration\n\n* When toast is initialized, just modify the toast strategy\n\n```java\nToaster.init(this, new ToastStrategy() {\n\n    @Override\n    public IToast createToast(IToastStyle<?> style) {\n        IToast toast = super.createToast(style);\n        if (toast instanceof CustomToast) {\n            CustomToast customToast = ((CustomToast) toast);\n            // Set the display duration of the short toast (default is 2000 milliseconds)\n            customToast.setShortDuration(1000);\n            // Set the display duration of the long Toast (default is 3500 milliseconds)\n            customToast.setLongDuration(5000);\n        }\n        return toast;\n    }\n});\n```\n\n* The disadvantage of this method is that it will only take effect when the application is in the foreground. This is because the toast in the foreground is implemented with a framework, which is essentially a WindowManager. The advantage is that it is very flexible and is not limited by the system toast mechanism. The disadvantage is that it cannot It is displayed in the background; while the toast in the background is implemented by the system, the advantage is that it can be displayed in the background, the disadvantage is that it is very limited and cannot be customized too deeply; and the framework uses two The advantages and disadvantages of the two methods are complementary.\n\n#### How to customize toast layout style\n\n* If you want to set the global toast style, you can call it like this (choose any one)\n\n```java\n// Modify toast layout\nToaster.setView(int id);\n```\n\n```java\n// Modified toast layout, toast shows center of gravity, toast shows position offset\nToaster.setStyle(IToastStyle<?> style);\n```\n\n* If you want to set a separate Toast display style for one occasion, you can do all of these (select either)\n\n```java\n// Modify toast layout\nToastParams params = new ToastParams();\nparams.text = \"I am toast of custom layout (partial effect)\";\nparams.style = new CustomViewToastStyle(R.layout.toast_custom_view);\nToaster.show(params);\n```\n\n```java\n// Modify the toast layout, toast display center of gravity, and toast display position offset\nToastParams params = new ToastParams();\nparams.text = \"I am toast of custom layout (partial effect)\";\nparams.style = new CustomViewToastStyle(R.layout.toast_custom_view, Gravity.CENTER, 10, 20);\nToaster.show(params);\n```\n\n* At this point, you may have a doubt, why setting a new toast style can only pass in the layout id instead of the View object? Because every time the framework displays toast, it will create a new toast object and View object. If the View object is passed in, it will not be able to create it every time it is displayed. As for why the framework does not reuse this View object, it is because if After reusing this View object, the following exceptions may be triggered:\n\n```text\njava.lang.IllegalStateException: View android.widget.TextView{7ffea98 V.ED..... ......ID 0,0-396,153 #102000b android:id/message} \nhas already been added to the window manager.\n    at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:371)\n    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:131)\n    at android.widget.Toast$TN.handleShow(Toast.java:501)\n    at android.widget.Toast$TN$1.handleMessage(Toast.java:403)\n    at android.os.Handler.dispatchMessage(Handler.java:112)\n    at android.os.Looper.loop(Looper.java:216)\n    at android.app.ActivityThread.main(ActivityThread.java:7625)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:524)\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:987)\n```\n\n* This is because WindowManager succeeded when addingView, but failed when removingView, which caused the View object of the previous toast to be unable to be reused when the next toast is displayed. Although this situation is relatively rare, there are still people who have reported this to me. Problem, in order to solve this problem, I decided not to reuse the View object. For specific adjustments to this piece, you can check the release record: [Toaster/releases/tag/9.0](https://github.com/getActivity/Toaster/releases/tag/9.0)\n\n#### How to switch to toast queue display strategy\n\n* You only need to modify the initialization method of the toast framework and manually pass in the toast strategy class. Here, you can use the ToastStrategy class that has been encapsulated by the framework.\n\n```java\n// Initialize the toast framework\n// Toaster.init(this);\nToaster.init(this, new ToastStrategy(ToastStrategy.SHOW_STRATEGY_TYPE_QUEUE));\n```\n\n* Note that the constructor needs to pass in `ToastStrategy.SHOW_STRATEGY_TYPE_QUEUE`. For an introduction to this field, see the code comments below\n\n```java\npublic class ToastStrategy {\n\n    /**\n     * Instant display mode (default)\n     *\n     * In the case of multiple toast display requests, before displaying the next toast\n     * The previous toast will be canceled immediately to ensure that the currently displayed toast message is up to date\n     */\n    public static final int SHOW_STRATEGY_TYPE_IMMEDIATELY = 0;\n\n    /**\n     * No message loss mode\n     *\n     * In the case of multiple toast display requests, wait for the previous toast to be displayed for 1 second or 1.5 seconds\n     * Then display the next toast, not according to the display duration of the toast, because the waiting time will be very long\n     * This can not only ensure that the user can see every toast message, but also ensure that the user will not wait too long\n     */\n    public static final int SHOW_STRATEGY_TYPE_QUEUE = 1;\n}\n```\n\n#### What should I do if the framework cannot meet the scene I am currently using\n\n* The Toaster framework is intended to solve some toast requirements. If Toaster cannot meet your needs, you can consider using the [EasyWindow](https://github.com/getActivity/EasyWindow) floating window framework to achieve it.\n\n#### How to implement cross page display of toast in the framework\n\n* By default, Toasts in the Toaster framework are only displayed on the current Activity. If an Activity switch occurs, the Toast becomes invisible as the current Activity is destroyed, making it impossible to display on the new Activity. The framework added support for this feature in version [12.5](https://github.com/getActivity/Toaster/releases/tag/12.5). The following is an example of how to use it:\n\n```java\nToastParams params = new ToastParams();\nparams.text = \"I am a Toast that can be displayed across pages\";\n// Indicates that this Toast needs to be displayed across pages\nparams.crossPageShow = true;\nToaster.show(params);\n\n#### Why the framework prefers to use window manager to implement toast\n\n* There are too many pits in the system toast, the main problems are as follows:\n\n    * System toast will cause some memory leaks\n\n    * System toast cannot realize custom display animation and display duration control\n\n    * Android 7.1 version will block the main thread and cause BadTokenException\n\n    * Closing the permission of the notification bar below Android 10.0 will cause the problem that the system toast cannot be displayed\n\n    * Android 11 and above, cannot customize the toast style (layout, position center of gravity, position offset)\n\n* Therefore, the framework prefers to use WindowManager instead of implementing toast display. The specific advantages and disadvantages are as follows:\n\n    * advantage\n\n        * There will be no memory leaks, and there will not be so many strange problems\n\n        * High degree of customization, support custom animation and custom display duration\n\n        * Break through Google's restrictions on toast in the new version of Android\n\n    * shortcoming\n\n        *  WindowManager cannot pop up <br> in the background without floating window permission (frame solution: if it is displayed in the background, use the system's toast to display)\n\n       *  The WindowManager will be bound to the Activity and will disappear with the Activity being destroyed <br> (framework solution: the display is delayed by 200ms, thus waiting for the latest Activity to be created before calling the display, so WindowManager is bound to the latest Activity and does not have the problem of disappearing with the old Activity when it finishes)\n\n* Of course, it is not to say that using the system toast is not good. It must be good to use WindowManger. It depends on the specific usage scenario. I think the best way is: use WindowManager to display the application in the foreground, and use the system in the background. the best solution is to use WindowManager in the foreground state and system Toast in the background state.\n"
        },
        {
          "name": "HelpDoc-zh.md",
          "type": "blob",
          "size": 11.1044921875,
          "content": "#### 目录\n\n* [框架怎么改名了](#框架怎么改名了)\n\n* [怎么自定义 Toast 显示动画](#怎么自定义-toast-显示动画)\n\n* [怎么自定义 Toast 显示时长](#怎么自定义-toast-显示时长)\n\n* [怎么自定义 Toast 布局样式](#怎么自定义-toast-布局样式)\n\n* [怎么切换成 Toast 排队显示的策略](#怎么切换成-toast-排队显示的策略)\n\n* [框架无法满足我当前使用的场景怎么办](#框架无法满足我当前使用的场景怎么办)\n\n* [框架中的 Toast 如何实现跨页面显示](#框架中的-toast-如何实现跨页面显示)\n\n* [为什么框架优先使用 WindowManager 来实现 Toast](#为什么框架优先使用-windowManager-来实现-toast)\n\n#### 框架怎么改名了\n\n* 框架改名是一个重大的操作，我为什么选择在现在这个时候改，是基于以下思考：\n\n    * 框架第一次提交是在 2018 年 9 月，不知不觉我已经维护了将近了 5 年的时间，我觉得 ToastUtils 这个名称已经配不上它的气质了，名字虽然好记，但是过于大众化，没有辨识度。\n\n    * 虽然名称叫 ToastUtils，但是经过无数次改造和重构后，它变得不像工具类了，比如它需要先调用 init 方法来初始化框架，才能使用 show 方法来显示 Toast，另外框架还对外提供了设置 Toast 策略类、Toast 拦截器、Toast 样式类，而这些方法不应该出现一个工具类中，工具类应该是只对外提供模板方法，而不应该把外部传入的对象作为静态持有着。\n\n    * 至于为什么选择在这个时候改名，这是框架基本稳定无 Bug 了，该解决的问题都已经解决完了，最近几个月已经没有人提 issue 了，相比前几年，一两个星期就能收到一个 issue 相比，框架已经非常稳定了，根据我以往的经验来讲，大家其实对框架的要求极其苛刻，如果这个框架在 Bugly 中有出现崩溃或者 ANR，哪怕是报一个用户一次异常，只要框架还在维护，就会有人找上门提 issue，而这次最近几个月没有人找上门，并不是用的人少了，更不是奇迹诞生了，大概率是调试阶段和线上阶段都没有找到框架的问题，框架的功能也能满足需求。\n\n* 至于为什么改名叫 Toaster，很大一部分原因是大家的选择，我发起了一项投票，票数最多的就是这个名字，同时我也采纳了这一项，因为不仅仅是名字好记有辨识度，还具备了特殊的含义，我们都知道 Toast 中文翻译是面包的意思，而 Toaster 中文翻译是烤面包机的意思，吃 Toast 之前需要先用烤一下，口感会更加酥脆。\n\n![](picture/zh/help_doc_rename_vote.jpg)\n\n#### 怎么自定义 Toast 显示动画\n\n* 在 Toast 初始化的时候，修改 Toast 策略即可\n\n```java\nToaster.init(this, new ToastStrategy() {\n\n    @Override\n    public IToast createToast(IToastStyle<?> style) {\n        if (toast instanceof CustomToast) {\n            CustomToast customToast = ((CustomToast) toast);\n            // 设置 Toast 动画效果\n            customToast.setAnimationsId(R.anim.xxx);\n        }\n        return toast;\n    }\n});\n```\n\n* 这种方式的缺点是只有应用在前台的情况下才会生效，这是因为前台的 Toast 是用框架实现的，本质上是一个 WindowManager，优点是非常灵活，不受系统 Toast 机制限制，缺点是无法在后台的情况下显示；而后台的 Toast 是用系统来实现的，优点是能在后台的情况下显示，缺点是局限性非常大，无法做太深的定制化；而框架正是利用了两种方式的优缺点进行了互补。\n\n#### 怎么自定义 Toast 显示时长\n\n* 在 Toast 初始化的时候，修改 Toast 策略即可\n\n```java\nToaster.init(this, new ToastStrategy() {\n\n    @Override\n    public IToast createToast(IToastStyle<?> style) {\n        IToast toast = super.createToast(style);\n        if (toast instanceof CustomToast) {\n            CustomToast customToast = ((CustomToast) toast);\n            // 设置短 Toast 的显示时长（默认是 2000 毫秒）\n            customToast.setShortDuration(1000);\n            // 设置长 Toast 的显示时长（默认是 3500 毫秒）\n            customToast.setLongDuration(5000);\n        }\n        return toast;\n    }\n});\n```\n\n* 这种方式的缺点是只有应用在前台的情况下才会生效，这是因为前台的 Toast 是用框架实现的，本质上是一个 WindowManager，优点是非常灵活，不受系统 Toast 机制限制，缺点是无法在后台的情况下显示；而后台的 Toast 是用系统来实现的，优点是能在后台的情况下显示，缺点是局限性非常大，无法做太深的定制化；而框架正是利用了两种方式的优缺点进行了互补。\n\n#### 怎么自定义 Toast 布局样式\n\n* 如果你想设置全局的 Toast 样式，可以这样调用（选择任一一种即可）\n\n```java\n// 修改 Toast 布局\nToaster.setView(int id);\n```\n\n```java\n// 修改 Toast 布局，Toast 显示重心，Toast 显示位置偏移\nToaster.setStyle(IToastStyle<?> style);\n```\n\n* 如果你想为某次 Toast 显示设置单独的样式，可以这样样用（选择任一一种即可）\n\n```java\n// 修改 Toast 布局\nToastParams params = new ToastParams();\nparams.text = \"我是自定义布局的 Toast（局部生效）\";\nparams.style = new CustomViewToastStyle(R.layout.toast_custom_view);\nToaster.show(params);\n```\n\n```java\n// 修改 Toast 布局、Toast 显示重心、Toast 显示位置偏移\nToastParams params = new ToastParams();\nparams.text = \"我是自定义布局的 Toast（局部生效）\";\nparams.style = new CustomViewToastStyle(R.layout.toast_custom_view, Gravity.CENTER, 10, 20);\nToaster.show(params);\n```\n\n* 到此，大家可能有一个疑惑，为什么设置新的 Toast 样式只能传入布局 id 而不是 View 对象？因为框架每次显示 Toast 的时候，都会创建新的 Toast 对象和 View 对象，如果传入 View 对象将无法做到每次显示的时候都创建，至于框架为什么不复用这个 View 对象，这是因为如果复用了这个 View 对象，可能会触发以下异常：\n\n```text\njava.lang.IllegalStateException: View android.widget.TextView{7ffea98 V.ED..... ......ID 0,0-396,153 #102000b android:id/message} \nhas already been added to the window manager.\n    at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:371)\n    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:131)\n    at android.widget.Toast$TN.handleShow(Toast.java:501)\n    at android.widget.Toast$TN$1.handleMessage(Toast.java:403)\n    at android.os.Handler.dispatchMessage(Handler.java:112)\n    at android.os.Looper.loop(Looper.java:216)\n    at android.app.ActivityThread.main(ActivityThread.java:7625)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:524)\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:987)\n```\n\n* 这是因为 WindowManager addView 的时候成功了，但是 removeView 的时候失败了，导致下一个 Toast 显示的时候，无法复用上一个 Toast 的 View 对象，虽然这种情况比较少见，但是仍然有人跟我反馈过这个问题，为了解决这一问题，所以决定不去复用 View 对象，具体对这块的调整可以查看发版记录：[Toaster/releases/tag/9.0](https://github.com/getActivity/Toaster/releases/tag/9.0)\n\n#### 怎么切换成 Toast 排队显示的策略\n\n* 只需要修改 Toast 框架的初始化方式，手动传入 Toast 策略类，这里使用框架已经封装好的 ToastStrategy 类即可，\n\n```java\n// 初始化 Toast 框架\n// Toaster.init(this);\nToaster.init(this, new ToastStrategy(ToastStrategy.SHOW_STRATEGY_TYPE_QUEUE));\n```\n\n* 注意构造函数需要传入 `ToastStrategy.SHOW_STRATEGY_TYPE_QUEUE`，关于这个字段的介绍可以看下面的代码注释\n\n```java\npublic class ToastStrategy {\n\n    /**\n     * 即显即示模式（默认）\n     *\n     * 在发起多次 Toast 的显示请求情况下，显示下一个 Toast 之前\n     * 会先立即取消上一个 Toast，保证当前显示 Toast 消息是最新的\n     */\n    public static final int SHOW_STRATEGY_TYPE_IMMEDIATELY = 0;\n\n    /**\n     * 不丢消息模式\n     *\n     * 在发起多次 Toast 的显示请求情况下，等待上一个 Toast 显示 1 秒或者 1.5 秒后\n     * 然后再显示下一个 Toast，不按照 Toast 的显示时长来，因为那样等待时间会很长\n     * 这样既能保证用户能看到每一条 Toast 消息，又能保证用户不会等得太久，速战速决\n     */\n    public static final int SHOW_STRATEGY_TYPE_QUEUE = 1;\n}\n```\n\n#### 框架无法满足我当前使用的场景怎么办\n\n* Toaster 框架意在解决一些的 Toast 需求，如果 Toaster 无法满足你的需求，你可以考虑使用 [EasyWindow](https://github.com/getActivity/EasyWindow) 悬浮窗框架来实现。\n\n#### 框架中的 Toast 如何实现跨页面显示\n\n* Toaster 中默认 Toast 是只在当前 Activity 上面展示的，如果遇到 Activity 切换，那么在 Toast 随着当前 Activity 销毁而不可见，导致无法在新 Activity 上面展示，框架在 [12.5](https://github.com/getActivity/Toaster/releases/tag/12.5) 版本新增支持了这一功能，具体调用示例如下：\n\n```java\nToastParams params = new ToastParams();\nparams.text = \"我是一个能跨页面展示的 Toast\";\n// 表示这个 Toast 需要跨页面展示\nparams.crossPageShow = true;\nToaster.show(params);\n```\n\n#### 为什么框架优先使用 WindowManager 来实现 Toast\n\n* 系统 Toast 的坑太多了，主要问题表现如下：\n\n    * 系统 Toast 会引发一些内存泄漏的问题\n\n    * 系统 Toast 无法实现自定义显示动画、显示时长控制\n\n    * Android 7.1 版本会主线程阻塞会出现 BadTokenException 的问题\n\n    * Android 10.0 以下关闭通知栏权限会导致系统 Toast 显示不出来的问题\n\n    * Android 11 及以上版本，无法自定义 Toast 样式（布局、位置重心、位置偏移）\n\n* 所以框架优先使用 WindowManager 来代替实现 Toast 显示，具体优缺点以下：\n\n    * 优点\n\n        * 不会出现内存泄漏，也不会有那么多奇奇怪怪的问题\n\n        * 可定制程度高，支持自定义动画和自定义显示时长\n\n        * 突破 Google 在新版本 Android 对 Toast 的一些限制\n\n    * 缺点\n\n        *  WindowManager 无法在没有悬浮窗权限情况下在后台弹出 <br> （框架的解决方案：如果是在后台的情况下显示，则使用系统的 Toast 来显示）\n\n       *  WindowManager 会和 Activity 绑定，会随 Activity 销毁而消失 <br> （框架的解决方案：延迟 200 毫秒显示，由此等待最新的 Activity 创建出来才调用显示，这样 WindowManager 就和最新 Activity 绑定在一起，就不会出现和旧 Activity finish 时一起消失的问题）\n\n* 当然不是说用系统 Toast 就不好，用 WindowManger 一定就好，视具体的使用场景而定，我觉得最好的方式是：应用处于前台状态下使用 WindowManager 来显示，而处于后台状态下使用系统 Toast 来显示，两者相结合，优势互补才是最佳方案。\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0791015625,
          "content": "\n                                 Apache License\n                           Version 2.0, September 2018\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Huang JinQun\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README-en.md",
          "type": "blob",
          "size": 17.1904296875,
          "content": "# [English Doc](README-en.md)\n\n# Toast Framework\n\n* Project address: [Github](https://github.com/getActivity/Toaster)\n\n* [Click here to download demo apk directly](https://github.com/getActivity/Toaster/releases/download/12.6/Toaster.apk)\n\n![](picture/en/demo_toast_activity.jpg) ![](picture/en/demo_toast_style_white.jpg) ![](picture/en/demo_toast_style_black.jpg)\n\n![](picture/en/demo_toast_layout_info.jpg) ![](picture/en/demo_toast_layout_warn.jpg) ![](picture/en/demo_toast_layout_success.jpg)\n\n![](picture/en/demo_toast_layout_error.jpg) ![](picture/en/demo_toast_layout_custom.jpg)\n\n#### Integration steps\n\n* If your project Gradle configuration is in `7.0` below, needs to be in `build.gradle` file added\n\n```groovy\nallprojects {\n    repositories {\n        // JitPack remote repository：https://jitpack.io\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n* If your Gradle configuration is `7.0` or above, needs to be in `settings.gradle` file added\n\n```groovy\ndependencyResolutionManagement {\n    repositories {\n        // JitPack remote repository：https://jitpack.io\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n* After configuring the remote warehouse, under the project app module `build.gradle` add remote dependencies to the file\n\n```groovy\nandroid {\n    // Support JDK 1.8\n    compileOptions {\n        targetCompatibility JavaVersion.VERSION_1_8\n        sourceCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n    // Toast framework：https://github.com/getActivity/Toaster\n    implementation 'com.github.getActivity:Toaster:12.6'\n}\n```\n\n#### Initialize the framework\n\n```java\npublic class XxxApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Initialize the toast framework\n        Toaster.init(this);\n    }\n}\n```\n\n#### Framework API introduction\n\n```java\n// Show toast\nToaster.show(CharSequence text);\nToaster.show(int id);\nToaster.show(Object object);\n\n// Toast is displayed in debug mode\nToaster.debugShow(CharSequence text);\nToaster.debugShow(int id);\nToaster.debugShow(Object object);\n\n// Delayed display of toast\nToaster.delayedShow(CharSequence text, long delayMillis);\nToaster.delayedShow(int id, long delayMillis);\nToaster.delayedShow(Object object, long delayMillis);\n\n// Show short toast\nToaster.showShort(CharSequence text);\nToaster.showShort(int id);\nToaster.showShort(Object object);\n\n// Show long toast\nToaster.showLong(CharSequence text);\nToaster.showLong(int id);\nToaster.showLong(Object object);\n\n// Custom display toast\nToaster.show(ToastParams params);\n\n// Cancel toast\nToaster.cancel();\n\n// Set toast layout (global effect)\nToaster.setView(int id);\n\n// Set toast style (global effect)\nToaster.setStyle(IToastStyle<?> style);\n// Get toast style\nToaster.getStyle()\n\n// Determine whether the current framework has been initialized\nToaster.isInit();\n\n// Set toast strategy (global effect)\nToaster.setStrategy(IToastStrategy strategy);\n// Get toast strategy\nToaster.getStrategy();\n\n// Set toast center of gravity and offset\nToaster.setGravity(int gravity);\nToaster.setGravity(int gravity, int xOffset, int yOffset);\n\n// Set Toast interceptor (global effect)\nToaster.setInterceptor(IToastInterceptor interceptor);\n// Get Toast interceptor\nToaster.getInterceptor();\n```\n\n#### Framework proguard rules\n\n* Added in the `proguard-rules.pro` file:\n\n```text\n-keep class com.hjq.toast.** {*;}\n```\n\n## [Please click here to view frequently asked questions](HelpDoc-en.md)\n\n#### Comparison between different Toast frameworks\n\n|  Function or detail  | [Toaster](https://github.com/getActivity/Toaster) |[ AndroidUtilCode-ToastUtils ](https://github.com/Blankj/AndroidUtilCode)| [Toasty](https://github.com/GrenderG/Toasty) |\n| :----: | :------: |  :-----: |  :-----: |\n| Corresponding version |  12.6 |  1.30.6  |  1.5.0  |\n|    Number of issues   |  [![](https://img.shields.io/github/issues/getActivity/Toaster.svg)](https://github.com/getActivity/Toaster/issues)  |[![](https://img.shields.io/github/issues/Blankj/AndroidUtilCode.svg)](https://github.com/Blankj/AndroidUtilCode/issues)|  [![](https://img.shields.io/github/issues/GrenderG/Toasty.svg)](https://github.com/GrenderG/Toasty/issues)  |\n|  Framework pack size | 31 KB | 500 KB | 50 KB |\n| Framework maintenance status| 维护中 | 停止维护 | 停止维护 |\n| Call code trace |  ✅  |  ❌  |  ❌  |\n| Support calling display in sub-threads |  ✅  |  ✅  |  ❌  |\n| Support setting partial Toast style |  ✅  |  ❌  |  ❌  |\n| Support setting global Toast style |  ✅  |  ❌  |  ❌  |\n| Support Toast Instant display |  ✅  |  ✅  |  ❌  |\n| Support Toast queue display |  ✅  |  ❌  |  ✅  |\n| Support Toast delayed display |  ✅  |  ❌  |  ❌  |\n| Solve the problem that Toast crashes on Android 7.1 |  ✅  |  ✅  |  ❌  |\n| Compatible with the problem that the Toast cannot be displayed after the permission of the notification bar is turned off |  ✅  |  ✅  |  ❌  |\n| Adapted to Android 11, the problem that Toast cannot be displayed in the background |  ✅  |  ❌  |  ❌  |\n\n#### Introduction to calling code positioning function\n\n* The framework will output the location of the code called by Toast in the log printing, so that developers can directly click Log to locate which class and line of code is called, which can greatly improve the efficiency of our troubleshooting, especially if the Toast content is returned by the server, I believe that no one will reject such a function.\n\n![](picture/en/demo_logcat_code.jpg)\n\n#### Introduction to the problem of Toast crashing on Android 7.1\n\n* This problem is caused by the addition of the WindowToken verification mechanism in Android 7.1, and this WindowToken is generated by NotificationManagerService. This WindowToken has a certain timeliness, and when the main thread of the application is blocked, WindowManager will calibrate the WindowToken when addingView However, the WindowToken has expired, and addView will throw an exception at this time.\n\n* Google fixed this problem in Android 8.0. The repair method is very simple and rude, which is to directly capture this exception. The repair idea of ​​the framework is similar to that of Google, but the repair method is different, because the framework cannot directly modify the system source code, so it is directly Exceptions are caught by means of Hook.\n\n#### Introduction to the problem that Toast cannot be displayed after the notification bar permission is turned off\n\n* This problem occurs because the display of the native Toast needs to pass through NMS (NotificationManagerService) to addView to the Window, and there is a `static final boolean ENABLE_BLOCKED_TOASTS = true` field in NMS. When the constant value is true, it will Trigger NMS to check the application notification bar permission. If there is no notification bar permission, then this Toast will be intercepted by NMS and output `Suppressing toast from package` log information. Xiaomi phones do not have this problem because they are Change the value of the `ENABLE_BLOCKED_TOASTS` field to `false`, so the check on the permission of the notification bar will not be triggered, and why do I know this? Because I once confirmed this with a MIUI engineer.\n\n* There are two ways for the framework to handle this problem. First, determine whether the current application is in the foreground state. If so, use a custom WindowManager instead of Toast to display it. If the current application is in the background state, it will use the INotificationManager interface in Hook Toast. The package name parameter passed by the enqueueToast method is changed to `android` to deceive NotificationManagerService, because NotificationManagerService has whitelisted the application with `android` package name, the system automatically permits. one thing to note is that, this method has expired on Android 10 and has been included in the reflection blacklist by the system, but the good news is that after checking and comparing the source code of NotificationManagerService, this problem (the problem of not being able to play Toast in the foreground after closing the notification bar permission) It has been fixed on Android 10.0, so the framework only goes to Hook INotificationManager when Android 9.0 and below and the notification bar permission is turned off. In addition, I also found the official code submission record about this piece:[ Always allow toasts from foreground apps ](https://cs.android.com/android/_/android/platform/frameworks/base/+/58b2453ed69197d765c7254241d9966ee49a3efb), you can take a look if you are interested, there is another question, if you want to still display Toast in the background in Android 10 and later versions, please ensure the notification bar permission or floating window permission of the application It is turned on. If you must require 100% display of Toast in the background state, please ensure that the application has the floating window permission, because on some mobile phones, even if there is a notification bar permission, it cannot display Toast in the background. For example, I use The HarmonyOS 2.0 test will not work, so it depends on how the product is considered.\n\n#### Android 11 cannot display Toast in the background\n\n* When we change the targetSdkVersion to 30 and above, we will find a problem. If the application is in the background process, and the Toast style of our application happens to be customized, then calling the show method of Toast in these cases will Surprisingly, Toast is not displayed. Please note that this problem is not a bug, but Android 11 prohibits this behavior. It is also noted in [Toast | Android Developers](https://developer.android.com/reference/android/widget/Toast#setView(android.view.View)), and it is not recommended to customize the style of Toast, and also tagged the `Toast.setView` method as `deprecated api`.\n\n* So how do we solve this problem? Is it really impossible to use custom style Toast? My answer is: Google only said that it cannot display custom Toast in the background, but it does not mean that it cannot be done in the foreground. The idea of ​​adapting the framework is that in the case of Android 11, it will first judge the current Toast Whether the application is in the foreground or the background, if it is in the foreground, it will display a custom-style Toast, if it is in the background, it will display a system-style Toast (by discarding the custom style to ensure that the Toast can be displayed normally), This can not only meet the requirements of Android 11, but also maximize the benefits of customized Toast.\n\n* It is worth noting that Toaster is currently the first and only framework of its kind to adapt to this feature of Android 11.\n\n#### Framework highlights\n\n* Take the lead: the first toast framework adapted to Android 11, developer do not need to care about the adaptation process\n\n* No permissions required: Regardless of whether the notification bar permission is granted or not, it does not affect the pop-up of the toast\n\n* Strong compatibility: Deal with the historical legacy of native Toast crashes in Android 7.1\n\n* Powerful functions: Toast can be popped up regardless of primary and secondary threads, and resource id and int type can be automatically identified\n\n* Easy to use: just pass in the text, and the duration of the toast display will be automatically determined according to the length of the text\n\n* Best performance: use lazy loading mode, only create Toast when displaying, do not take up Application startup time\n\n* Best experience: Displaying the next Toast will cancel the display of the previous Toast, so that it can be displayed immediately\n\n* Global unity: You can initialize the Toast style in the Application to achieve a once-and-for-all effect\n\n#### How to replace the existing native Toast in the project\n\n* Right-click the pop-up menu in the project, Replace in path, check the Regex option, and click Replace\n\n```text\nToast\\.makeText\\([^,]+,\\s*(.+),\\s*[^,]+\\)\\.show\\(\\)\n```\n\n```text\nToaster.show($1)\n```\n\n* Replace the package name\n\n```text\nimport android.widget.Toast\n```\n\n```text\nimport com.hjq.toast.Toaster\n```\n\n*  Then search globally and manually replace some that have not been replaced successfully\n\n```text\nToast.makeText\nnew Toast\n```\n\n#### Author's other open source projects\n\n* Android middle office: [AndroidProject](https://github.com/getActivity/AndroidProject)![](https://img.shields.io/github/stars/getActivity/AndroidProject.svg)![](https://img.shields.io/github/forks/getActivity/AndroidProject.svg)\n\n* Android middle office kt version: [AndroidProject-Kotlin](https://github.com/getActivity/AndroidProject-Kotlin)![](https://img.shields.io/github/stars/getActivity/AndroidProject-Kotlin.svg)![](https://img.shields.io/github/forks/getActivity/AndroidProject-Kotlin.svg)\n\n* Permissions framework: [XXPermissions](https://github.com/getActivity/XXPermissions) ![](https://img.shields.io/github/stars/getActivity/XXPermissions.svg) ![](https://img.shields.io/github/forks/getActivity/XXPermissions.svg)\n\n* Network framework: [EasyHttp](https://github.com/getActivity/EasyHttp)![](https://img.shields.io/github/stars/getActivity/EasyHttp.svg)![](https://img.shields.io/github/forks/getActivity/EasyHttp.svg)\n\n* Title bar framework: [TitleBar](https://github.com/getActivity/TitleBar)![](https://img.shields.io/github/stars/getActivity/TitleBar.svg)![](https://img.shields.io/github/forks/getActivity/TitleBar.svg)\n\n* Floating window framework: [EasyWindow](https://github.com/getActivity/EasyWindow)![](https://img.shields.io/github/stars/getActivity/EasyWindow.svg)![](https://img.shields.io/github/forks/getActivity/EasyWindow.svg)\n\n* Shape view framework: [ShapeView](https://github.com/getActivity/ShapeView)![](https://img.shields.io/github/stars/getActivity/ShapeView.svg)![](https://img.shields.io/github/forks/getActivity/ShapeView.svg)\n\n* Shape drawable framework: [ShapeDrawable](https://github.com/getActivity/ShapeDrawable)![](https://img.shields.io/github/stars/getActivity/ShapeDrawable.svg)![](https://img.shields.io/github/forks/getActivity/ShapeDrawable.svg)\n\n* Language switching framework: [Multi Languages](https://github.com/getActivity/MultiLanguages)![](https://img.shields.io/github/stars/getActivity/MultiLanguages.svg)![](https://img.shields.io/github/forks/getActivity/MultiLanguages.svg)\n\n* Gson parsing fault tolerance: [GsonFactory](https://github.com/getActivity/GsonFactory)![](https://img.shields.io/github/stars/getActivity/GsonFactory.svg)![](https://img.shields.io/github/forks/getActivity/GsonFactory.svg)\n\n* Logcat viewing framework: [Logcat](https://github.com/getActivity/Logcat)![](https://img.shields.io/github/stars/getActivity/Logcat.svg)![](https://img.shields.io/github/forks/getActivity/Logcat.svg)\n\n* Nested scrolling layout framework：[NestedScrollLayout](https://github.com/getActivity/NestedScrollLayout) ![](https://img.shields.io/github/stars/getActivity/NestedScrollLayout.svg) ![](https://img.shields.io/github/forks/getActivity/NestedScrollLayout.svg)\n\n* Android version guide: [AndroidVersionAdapter](https://github.com/getActivity/AndroidVersionAdapter)![](https://img.shields.io/github/stars/getActivity/AndroidVersionAdapter.svg)![](https://img.shields.io/github/forks/getActivity/AndroidVersionAdapter.svg)\n\n* Android code standard: [AndroidCodeStandard](https://github.com/getActivity/AndroidCodeStandard)![](https://img.shields.io/github/stars/getActivity/AndroidCodeStandard.svg)![](https://img.shields.io/github/forks/getActivity/AndroidCodeStandard.svg)\n\n* Android resource summary：[AndroidIndex](https://github.com/getActivity/AndroidIndex) ![](https://img.shields.io/github/stars/getActivity/AndroidIndex.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidIndex.svg)\n\n* Android open source leaderboard: [AndroidGithubBoss](https://github.com/getActivity/AndroidGithubBoss)![](https://img.shields.io/github/stars/getActivity/AndroidGithubBoss.svg)![](https://img.shields.io/github/forks/getActivity/AndroidGithubBoss.svg)\n\n* Studio boutique plugins: [StudioPlugins](https://github.com/getActivity/StudioPlugins)![](https://img.shields.io/github/stars/getActivity/StudioPlugins.svg)![](https://img.shields.io/github/forks/getActivity/StudioPlugins.svg)\n\n* Emoji collection: [emoji pa c shadow](https://github.com/getActivity/EmojiPackage)![](https://img.shields.io/github/stars/getActivity/EmojiPackage.svg)![](https://img.shields.io/github/forks/getActivity/EmojiPackage.svg)\n\n* China provinces json: [ProvinceJson](https://github.com/getActivity/ProvinceJson)![](https://img.shields.io/github/stars/getActivity/ProvinceJson.svg)![](https://img.shields.io/github/forks/getActivity/ProvinceJson.svg)\n\n* Markdown documentation：[MarkdownDoc](https://github.com/getActivity/MarkdownDoc) ![](https://img.shields.io/github/stars/getActivity/MarkdownDoc.svg) ![](https://img.shields.io/github/forks/getActivity/MarkdownDoc.svg)\n\n## License\n\n```text\nCopyright 2018 Huang JinQun\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.1328125,
          "content": "# [English Doc](README-en.md)\n\n# 吐司框架\n\n* 项目地址：[Github](https://github.com/getActivity/Toaster)\n\n* 博客地址：[只需体验三分钟，你就会跟我一样，爱上这款 Toast](https://www.jianshu.com/p/9b174ee2c571)\n\n* 可以扫码下载 Demo 进行演示或者测试，如果扫码下载不了的，[点击此处可直接下载](https://github.com/getActivity/Toaster/releases/download/12.6/Toaster.apk)\n\n![](picture/zh/download_demo_apk_qr_code.png)\n\n![](picture/zh/demo_toast_activity.jpg) ![](picture/zh/demo_toast_style_white.jpg) ![](picture/zh/demo_toast_style_black.jpg)\n\n![](picture/zh/demo_toast_layout_info.jpg) ![](picture/zh/demo_toast_layout_warn.jpg) ![](picture/zh/demo_toast_layout_success.jpg)\n\n![](picture/zh/demo_toast_layout_error.jpg) ![](picture/zh/demo_toast_layout_custom.jpg)\n\n#### 集成步骤\n\n* 如果你的项目 Gradle 配置是在 `7.0 以下`，需要在 `build.gradle` 文件中加入\n\n```groovy\nallprojects {\n    repositories {\n        // JitPack 远程仓库：https://jitpack.io\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n* 如果你的 Gradle 配置是 `7.0 及以上`，则需要在 `settings.gradle` 文件中加入\n\n```groovy\ndependencyResolutionManagement {\n    repositories {\n        // JitPack 远程仓库：https://jitpack.io\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n* 配置完远程仓库后，在项目 app 模块下的 `build.gradle` 文件中加入远程依赖\n\n```groovy\nandroid {\n    // 支持 JDK 1.8\n    compileOptions {\n        targetCompatibility JavaVersion.VERSION_1_8\n        sourceCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n    // 吐司框架：https://github.com/getActivity/Toaster\n    implementation 'com.github.getActivity:Toaster:12.6'\n}\n```\n\n#### 初始化框架\n\n```java\npublic class XxxApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // 初始化 Toast 框架\n        Toaster.init(this);\n    }\n}\n```\n\n#### 框架 API 介绍\n\n```java\n// 显示 Toast\nToaster.show(CharSequence text);\nToaster.show(int id);\nToaster.show(Object object);\n\n// debug 模式下显示 Toast\nToaster.debugShow(CharSequence text);\nToaster.debugShow(int id);\nToaster.debugShow(Object object);\n\n// 延迟显示 Toast\nToaster.delayedShow(CharSequence text, long delayMillis);\nToaster.delayedShow(int id, long delayMillis);\nToaster.delayedShow(Object object, long delayMillis);\n\n// 显示短 Toast\nToaster.showShort(CharSequence text);\nToaster.showShort(int id);\nToaster.showShort(Object object);\n\n// 显示长 Toast\nToaster.showLong(CharSequence text);\nToaster.showLong(int id);\nToaster.showLong(Object object);\n\n// 自定义显示 Toast\nToaster.show(ToastParams params);\n\n// 取消 Toast\nToaster.cancel();\n\n// 设置 Toast 布局（全局生效）\nToaster.setView(int id);\n\n// 设置 Toast 样式（全局生效）\nToaster.setStyle(IToastStyle<?> style);\n// 获取 Toast 样式\nToaster.getStyle()\n\n// 判断当前框架是否已经初始化\nToaster.isInit();\n\n// 设置 Toast 策略（全局生效）\nToaster.setStrategy(IToastStrategy strategy);\n// 获取 Toast 策略\nToaster.getStrategy();\n\n// 设置 Toast 重心和偏移\nToaster.setGravity(int gravity);\nToaster.setGravity(int gravity, int xOffset, int yOffset);\n\n// 设置 Toast 拦截器（全局生效）\nToaster.setInterceptor(IToastInterceptor interceptor);\n// 获取 Toast 拦截器\nToaster.getInterceptor();\n```\n\n#### 框架混淆规则\n\n* 在混淆规则文件 `proguard-rules.pro` 中加入\n\n```text\n-keep class com.hjq.toast.** {*;}\n```\n\n## [常见疑问请点击此处查看](HelpDoc-zh.md)\n\n#### 不同 Toast 框架之间的对比\n\n|  功能或细节  | [Toaster](https://github.com/getActivity/Toaster) | [AndroidUtilCode-ToastUtils](https://github.com/Blankj/AndroidUtilCode)  | [Toasty](https://github.com/GrenderG/Toasty) |\n| :----: | :------: |  :-----: |  :-----: |\n|    对应版本  |  12.6 |  1.30.6  |  1.5.0  |\n|    issues 数   |  [![](https://img.shields.io/github/issues/getActivity/Toaster.svg)](https://github.com/getActivity/Toaster/issues)  |  [![](https://img.shields.io/github/issues/Blankj/AndroidUtilCode.svg)](https://github.com/Blankj/AndroidUtilCode/issues)  |  [![](https://img.shields.io/github/issues/GrenderG/Toasty.svg)](https://github.com/GrenderG/Toasty/issues)  |\n|                    框架体积                 | 32 KB | 500 KB | 50 KB |\n|                   框架维护状态               | 维护中 | 停止维护 | 停止维护 |\n|                  调用代码定位                |  ✅  |  ❌  |  ❌  |\n|              支持在子线程中调用显示            |  ✅  |  ✅  |  ❌  |\n|            支持设置局部 Toast 样式            |  ✅  |  ❌  |  ❌  |\n|            支持设置全局 Toast 样式            |  ✅  |  ❌  |  ❌  |\n|              支持 Toast 即显即示             |  ✅  |  ✅  |  ❌  |\n|              支持 Toast 排队显示             |  ✅  |  ❌  |  ✅  |\n|              支持 Toast 延迟显示             |  ✅  |  ❌  |  ❌  |\n|      处理 Toast 在 Android 7.1 崩溃的问题     |  ✅  |  ✅  |  ❌  |\n|    兼容通知栏权限关闭后 Toast 显示不出来的问题    |  ✅  |  ✅  |  ❌  |\n|   适配 Android 11 不能在后台显示 Toast 的问题   |  ✅  |  ❌  |  ❌  |\n\n#### 调用代码定位功能介绍\n\n* 框架会在日志打印中输出在 Toast 调用的代码位置，这样开发者可以直接通过点击 Log 来定位是在哪个类哪行代码调用的，这样可以极大提升我们排查问题的效率，特别是 Toast 的内容是由服务器返回的情况下，我相信没有任何一个人会拒绝这样的功能。\n\n![](picture/zh/demo_logcat_code.jpg)\n\n#### Toast 在 Android 7.1 崩溃的问题介绍\n\n> [Toast 在 Android 7.1 崩溃排查及修复](https://www.jianshu.com/p/437f473017d6)\n\n* 这个问题是由于 Android 7.1 加入 WindowToken 校验机制导致的，而这个 WindowToken 是 NotificationManagerService 生成的，这个 WindowToken 是存在一定时效性的，而当应用的主线程被阻塞时，WindowManager 在 addView 时会对 WindowToken 进行校验，但是 WindowToken 已经过期了，这个时候 addView 就会抛出异常。\n\n* 谷歌在 Android 8.0 就修复了这个问题，修复方式十分简单粗暴，就是直接捕获这个异常，而框架的修复思路跟谷歌类似，只不过修复方式不太一样，因为框架无法直接修改系统源码，所以是直接通过 Hook 的方式对异常进行捕获。\n\n#### 通知栏权限关闭后 Toast 显示不出来的问题介绍\n\n> [Toast通知栏权限填坑指南](https://www.jianshu.com/p/1d64a5ccbc7c)\n\n* 这个问题的出现是因为原生 Toast 的显示要通过 NMS（NotificationManagerService） 才会 addView 到 Window 上面，而在 NMS 中有一个 `static final boolean ENABLE_BLOCKED_TOASTS = true` 的字段，当这个常量值为 true 时，会触发 NMS 对应用通知栏权限的检查，如果没有通知栏权限，那么这个 Toast 将会被 NMS 所拦截，并输出 `Suppressing toast from package` 日志信息，而小米手机没有这个问题是因为它是将 `ENABLE_BLOCKED_TOASTS` 字段值修改成 `false`，所以就不会触发对通知栏权限的检查，另外我为什么会知道有这个事情？因为我曾经和一名 MIUI 工程师一起确认过这个事情。\n\n* 框架处理这个问题的方式有两种，先判断当前应用是否处于前台状态，如果是则使用自定义的 WindowManager 代替 Toast 来显示，如果当前应用处于后台状态，则会通过 Hook Toast 中的 INotificationManager 接口，将 enqueueToast 方法传递的包名参数修改成 `android` 来欺骗 NotificationManagerService，因为 NotificationManagerService 已经将 `android` 包名的应用纳入白名单，系统会自动放行，需要注意的是，这种方式在 Android 10 上面已经失效了，已经被系统纳入反射黑名单，但是好消息是，通过查看和对比 NotificationManagerService 源码发现，这个问题（关闭通知栏权限后无法在前台弹 Toast 的问题）已经在 Android 10.0 的版本上面被修复了，所以框架只在 Android 9.0 及以下版本并且在关闭了通知栏权限的情况下才去 Hook INotificationManager，另外我还找到了官方关于这块的代码提交记录：[Always allow toasts from foreground apps](https://cs.android.com/android/_/android/platform/frameworks/base/+/58b2453ed69197d765c7254241d9966ee49a3efb)，大家可以感兴趣可以看看，还有一个问题，如果你想在 Android 10 及之后的版本仍然能在后台显示 Toast，请保证应用的通知栏权限或者悬浮窗权限处于开启的状态，如果你一定要求在后台状态下要 100% 能显示 Toast，请保证应用有悬浮窗权限，因为在某些厂商的手机上，就算有通知栏权限也是无法在后台显示 Toast，例如我用 HarmonyOS 2.0 测试就不行，所以具体要看产品怎么斟酌。\n\n#### Android 11 不能在后台显示 Toast 的问题介绍\n\n* 当我们将 targetSdkVersion 改成 30 及以上的版本时，会发现一个问题，如果应用处于后台进程的情况下，而恰好我们的应用 Toast 样式是经过定制的，那么在这些情况下调用 Toast 的 show 方法会惊奇的发现，Toast 没有显示出来，请注意这个问题不是 Bug，而是 Android 11 禁止了这种行为，在 [Toast 官方文档](https://developer.android.google.cn/reference/android/widget/Toast#setView(android.view.View)) 中也有注明，不建议对 Toast 的样式做定制化，并且还对 `Toast.setView` 方法进行了标记过时处理。\n\n* 那么我们如何解决这一问题呢？难道真的不能用自定义样式的 Toast 了？我的答案是：不，凡事不能一刀切，谷歌只说不能在后台显示自定义的 Toast，并不能代表不能在前台那么做，框架的适配思路是，在 Android 11 的情况下，会先判断当前应用是处于前台还是后台，如果是在前台的情况下就显示自定义样式的 Toast，如果是在后台的情况下就显示系统样式的 Toast（通过舍弃自定义样式来保证 Toast 能够正常显示出来），这样既能符合 Android 11 要求，同时又能将定制化 Toast 的权益最大化。\n\n* 值得注意的是：Toaster 是目前同类框架第一款也是唯一一款适配 Android 11 这一特性的框架。\n\n#### 框架亮点\n\n* 一马当先：首款适配 Android 11 的吐司框架，开发者无需关心适配过程\n\n* 无需权限：[不管有没有授予通知栏权限都不影响吐司的弹出](https://www.jianshu.com/p/1d64a5ccbc7c)\n\n* 兼容性强：[处理原生 Toast 在 Android 7.1 产生崩溃的历史遗留问题](https://www.jianshu.com/p/437f473017d6)\n\n* 功能强大：不分主次线程都可以弹出Toast，自动识别资源 id 和 int 类型\n\n* 使用简单：只需传入文本，会自动根据文本长度决定吐司显示的时长\n\n* 性能最佳：使用懒加载模式，只在显示时创建 Toast，不占用 Application 启动时间\n\n* 体验最佳：显示下一个 Toast 会取消上一个 Toast 的显示，真正做到即显即示\n\n* 全局统一：可以在 Application 中初始化 Toast 样式，达到一劳永逸的效果\n\n#### 如何替换项目中已有的原生 Toast\n\n* 在项目中右击弹出菜单，Replace in path，勾选 Regex 选项，点击替换\n\n```text\nToast\\.makeText\\([^,]+,\\s*(.+),\\s*[^,]+\\)\\.show\\(\\)\n```\n\n```text\nToaster.show($1)\n```\n\n* 对导包进行替换\n\n```text\nimport android.widget.Toast\n```\n\n```text\nimport com.hjq.toast.Toaster\n```\n\n*  再全局搜索，手动更换一些没有替换成功的\n\n```text\nToast.makeText\nnew Toast\n```\n\n#### 作者的其他开源项目\n\n* 安卓技术中台：[AndroidProject](https://github.com/getActivity/AndroidProject) ![](https://img.shields.io/github/stars/getActivity/AndroidProject.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidProject.svg)\n\n* 安卓技术中台 Kt 版：[AndroidProject-Kotlin](https://github.com/getActivity/AndroidProject-Kotlin) ![](https://img.shields.io/github/stars/getActivity/AndroidProject-Kotlin.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidProject-Kotlin.svg)\n\n* 权限框架：[XXPermissions](https://github.com/getActivity/XXPermissions) ![](https://img.shields.io/github/stars/getActivity/XXPermissions.svg) ![](https://img.shields.io/github/forks/getActivity/XXPermissions.svg)\n\n* 网络框架：[EasyHttp](https://github.com/getActivity/EasyHttp) ![](https://img.shields.io/github/stars/getActivity/EasyHttp.svg) ![](https://img.shields.io/github/forks/getActivity/EasyHttp.svg)\n\n* 标题栏框架：[TitleBar](https://github.com/getActivity/TitleBar) ![](https://img.shields.io/github/stars/getActivity/TitleBar.svg) ![](https://img.shields.io/github/forks/getActivity/TitleBar.svg)\n\n* 悬浮窗框架：[EasyWindow](https://github.com/getActivity/EasyWindow) ![](https://img.shields.io/github/stars/getActivity/EasyWindow.svg) ![](https://img.shields.io/github/forks/getActivity/EasyWindow.svg)\n\n* ShapeView 框架：[ShapeView](https://github.com/getActivity/ShapeView) ![](https://img.shields.io/github/stars/getActivity/ShapeView.svg) ![](https://img.shields.io/github/forks/getActivity/ShapeView.svg)\n\n* ShapeDrawable 框架：[ShapeDrawable](https://github.com/getActivity/ShapeDrawable) ![](https://img.shields.io/github/stars/getActivity/ShapeDrawable.svg) ![](https://img.shields.io/github/forks/getActivity/ShapeDrawable.svg)\n\n* 语种切换框架：[MultiLanguages](https://github.com/getActivity/MultiLanguages) ![](https://img.shields.io/github/stars/getActivity/MultiLanguages.svg) ![](https://img.shields.io/github/forks/getActivity/MultiLanguages.svg)\n\n* Gson 解析容错：[GsonFactory](https://github.com/getActivity/GsonFactory) ![](https://img.shields.io/github/stars/getActivity/GsonFactory.svg) ![](https://img.shields.io/github/forks/getActivity/GsonFactory.svg)\n\n* 日志查看框架：[Logcat](https://github.com/getActivity/Logcat) ![](https://img.shields.io/github/stars/getActivity/Logcat.svg) ![](https://img.shields.io/github/forks/getActivity/Logcat.svg)\n\n* 嵌套滚动布局框架：[NestedScrollLayout](https://github.com/getActivity/NestedScrollLayout) ![](https://img.shields.io/github/stars/getActivity/NestedScrollLayout.svg) ![](https://img.shields.io/github/forks/getActivity/NestedScrollLayout.svg)\n\n* Android 版本适配：[AndroidVersionAdapter](https://github.com/getActivity/AndroidVersionAdapter) ![](https://img.shields.io/github/stars/getActivity/AndroidVersionAdapter.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidVersionAdapter.svg)\n\n* Android 代码规范：[AndroidCodeStandard](https://github.com/getActivity/AndroidCodeStandard) ![](https://img.shields.io/github/stars/getActivity/AndroidCodeStandard.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidCodeStandard.svg)\n\n* Android 资源大汇总：[AndroidIndex](https://github.com/getActivity/AndroidIndex) ![](https://img.shields.io/github/stars/getActivity/AndroidIndex.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidIndex.svg)\n\n* Android 开源排行榜：[AndroidGithubBoss](https://github.com/getActivity/AndroidGithubBoss) ![](https://img.shields.io/github/stars/getActivity/AndroidGithubBoss.svg) ![](https://img.shields.io/github/forks/getActivity/AndroidGithubBoss.svg)\n\n* Studio 精品插件：[StudioPlugins](https://github.com/getActivity/StudioPlugins) ![](https://img.shields.io/github/stars/getActivity/StudioPlugins.svg) ![](https://img.shields.io/github/forks/getActivity/StudioPlugins.svg)\n\n* 表情包大集合：[EmojiPackage](https://github.com/getActivity/EmojiPackage) ![](https://img.shields.io/github/stars/getActivity/EmojiPackage.svg) ![](https://img.shields.io/github/forks/getActivity/EmojiPackage.svg)\n\n* AI 资源大汇总：[AiIndex](https://github.com/getActivity/AiIndex) ![](https://img.shields.io/github/stars/getActivity/AiIndex.svg) ![](https://img.shields.io/github/forks/getActivity/AiIndex.svg)\n\n* 省市区 Json 数据：[ProvinceJson](https://github.com/getActivity/ProvinceJson) ![](https://img.shields.io/github/stars/getActivity/ProvinceJson.svg) ![](https://img.shields.io/github/forks/getActivity/ProvinceJson.svg)\n\n* Markdown 语法文档：[MarkdownDoc](https://github.com/getActivity/MarkdownDoc) ![](https://img.shields.io/github/stars/getActivity/MarkdownDoc.svg) ![](https://img.shields.io/github/forks/getActivity/MarkdownDoc.svg)\n\n#### 微信公众号：Android轮子哥\n\n![](https://raw.githubusercontent.com/getActivity/Donate/master/picture/official_ccount.png)\n\n#### Android 技术 Q 群：10047167\n\n#### 如果您觉得我的开源库帮你节省了大量的开发时间，请扫描下方的二维码随意打赏，要是能打赏个 10.24 :monkey_face:就太:thumbsup:了。您的支持将鼓励我继续创作:octocat:（[点击查看捐赠列表](https://github.com/getActivity/Donate)）\n\n![](https://raw.githubusercontent.com/getActivity/Donate/master/picture/pay_ali.png) ![](https://raw.githubusercontent.com/getActivity/Donate/master/picture/pay_wechat.png)\n\n#### 广告区\n\n* 我现在任腾讯云服务器推广大使，大家如果有购买服务器的需求，可以通过下面的链接购买\n\n[![](https://upload-dianshi-1255598498.file.myqcloud.com/upload/nodir/345X200-9ae456f58874df499adf7c331c02cb0fed12b81d.jpg)](https://curl.qcloud.com/A6cYskvv)\n\n[【腾讯云】云服务器、云数据库、COS、CDN、短信等云产品特惠热卖中](https://curl.qcloud.com/A6cYskvv)\n\n[![](https://upload-dianshi-1255598498.file.myqcloud.com/345-200-b28f7dee9552f4241ea6a543f15a9798049701d4.jpg)](https://curl.qcloud.com/up4fQsdn)\n\n[【腾讯云】中小企业福利专场，多款刚需产品，满足企业通用场景需求](https://curl.qcloud.com/up4fQsdn)\n\n## License\n\n```text\nCopyright 2018 Huang JinQun\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.94921875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        // 阿里云云效仓库：https://maven.aliyun.com/mvn/guide\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        // 华为开源镜像：https://mirrors.huaweicloud.com/\n        maven { url 'https://repo.huaweicloud.com/repository/maven/' }\n        // JitPack 远程仓库：https://jitpack.io\n        maven { url 'https://jitpack.io' }\n        mavenCentral()\n        google()\n        // noinspection JcenterRepositoryObsolete\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.2'\n    }\n}\n\nallprojects {\n    repositories {\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        maven { url 'https://repo.huaweicloud.com/repository/maven/' }\n        maven { url 'https://jitpack.io' }\n        mavenCentral()\n        google()\n        // noinspection JcenterRepositoryObsolete\n        jcenter()\n    }\n\n    // 读取 local.properties 文件配置\n    def properties = new Properties()\n    def localPropertiesFile = rootProject.file(\"local.properties\")\n    if (localPropertiesFile.exists()) {\n        localPropertiesFile.withInputStream { inputStream ->\n            properties.load(inputStream)\n        }\n    }\n\n    String buildDirPath = properties.getProperty(\"build.dir\")\n    if (buildDirPath != null && buildDirPath != \"\") {\n        // 将构建文件统一输出到指定的目录下\n        setBuildDir(new File(buildDirPath, rootProject.name + \"/build/${path.replaceAll(':', '/')}\"))\n    } else {\n        // 将构建文件统一输出到项目根目录下的 build 文件夹\n        setBuildDir(new File(rootDir, \"build/${path.replaceAll(':', '/')}\"))\n    }\n}\n\ntasks.register('clean', Delete) {\n    delete rootProject.buildDir\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8330078125,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\n# 表示使用 AndroidX\nandroid.useAndroidX = true\n# 表示将第三方库迁移到 AndroidX\nandroid.enableJetifier = true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 7.845703125,
          "content": null
        },
        {
          "name": "picture",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include ':app', ':library'\n"
        }
      ]
    }
  ]
}