{
  "metadata": {
    "timestamp": 1736708128455,
    "page": 549,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openid/AppAuth-Android",
      "stars": 2917,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1630859375,
          "content": "root = true\n\n[*.{java,xml,gradle,md}]\ncharset = utf-8\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": ".gradle\n/local.properties\nbuild\napp/build\nlibrary/build\n.idea/*\n*.iml\nappauth.keystore\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.400390625,
          "content": "# This is the official list of authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n# Names should be added to this file as:\n# Name or Organization <email address>\n# The email address is not required for organizations.\n\nGoogle Inc.\nWeWork Companies Inc.\nRebecka Gulliksson <rebecka.gulliksson@gmail.com>\nIain McGinniss <iainmcgin@gmail.com>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2724609375,
          "content": "# Contributing to AppAuth\n\nAll contributions to AppAuth for Android are welcome!\n\nNote that as this library is planned to be used in high-profile production code,\nwe insist on a very high standards for the code and design, but don't feel shy:\ndiscuss your plans over \n[GitHub Issues](https://github.com/openid/AppAuth-Android/issues) and the\n[mailing list](http://lists.openid.net/mailman/listinfo/openid-specs-ab), and\nsend in those pull requests!\n\n# Signing the Agreements\n\nIn order to contribute to this project, you need to execute two legal agreements\nthat cover your contributions.  Pull requests from users who have not signed\nthese agreements will not be merged.\n\n## Execute the Contributor License Agreement (CLA)\n\n1. Visit http://openid.net/contribution-license-agreement/\n2. Tap *Execute OpenID Foundation Contribution License Agreement* for the\n   version relevant to you (Individual or Corporate).\n3. Follow the instructions to sign the agreement.\n\n## Execute the Working Group Contribution Agreement\n\nIn addition to the Code License Agreement, the OpenID Foundation also requires\na working group contribution agreement to cover any contributions you may make\ntowards the OpenID Connect spec itself (e.g. in comments, bug reports, feature\nrequests).\n\n1. Visit http://openid.net/intellectual-property/\n2. Tap *Execute Contributor Agreement By Electronic Signature* in the box\n   marked *Resources*.\n3. Follow the instructions to sign the document, state `OpenID AB/Connect` as\n   the Initial Working Group.\n\n# Making a Pull Request\n\n## Before you Start\n\nBefore you work on a big new feature, get in touch to make sure that your work\nis inline with the direction of the project and get input on your architecture.\nYou can file an [Issue](https://github.com/openid/AppAuth-Android/issues)\ndiscussing your proposal, or email the \n[list](http://lists.openid.net/mailman/listinfo/openid-specs-ab). \n\n## Coding Standards\n\nThe AppAuth library follows the\n[Google Coding Style](https://google.github.io/styleguide/javaguide.html) for\nthe Java language. Please review your own code for adherence to the standard\nand make sure to run the `check` gradle target.\n\n## Pull Request Reviews\n\nAll pull requests, even by members who have repository write access need to be\nreviewed and marked as \"LGTM\" before they will be merged.\n\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.6650390625,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people. For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# Names should be added to this file as:\n#     Name <email address>\n\nIain McGinniss <iainmcgin@google.com>\nWilliam Denniss <wdenniss@google.com>\nSteven Wright <stevewright@google.com>\nAlex Chau <alexchau@google.com>\nBenjamin Franz <bfranz@google.com>\nRebecka Gulliksson <rebecka.gulliksson@gmail.com>\nRahul Ravikumar <rahulrav@google.com>\nHenning Nielsen Lund <henning.n.lund@jp.dk>\n√òyvind Robertsen <oyvindrobertsen@gmail.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.93359375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.1015625,
          "content": "![AppAuth for Android](https://rawgit.com/openid/AppAuth-Android/master/appauth_lockup.svg)\n\n[![Download](https://img.shields.io/maven-central/v/net.openid/appauth)](https://search.maven.org/search?q=g:net.openid%20appauth)\n[![Javadocs](http://javadoc.io/badge/net.openid/appauth.svg)](http://javadoc.io/doc/net.openid/appauth)\n[![Build Status](https://github.com/openid/AppAuth-Android/actions/workflows/build.yml/badge.svg)](https://github.com/openid/AppAuth-Android/actions/workflows/build.yml)\n[![codecov.io](https://codecov.io/github/openid/AppAuth-Android/coverage.svg?branch=master)](https://codecov.io/github/openid/AppAuth-Android?branch=master)\n\nAppAuth for Android is a client SDK for communicating with\n[OAuth 2.0](https://tools.ietf.org/html/rfc6749) and\n[OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html) providers.\nIt strives to\ndirectly map the requests and responses of those specifications, while following\nthe idiomatic style of the implementation language. In addition to mapping the\nraw protocol flows, convenience methods are available to assist with common\ntasks like performing an action with fresh tokens.\n\nThe library follows the best practices set out in\n[RFC 8252 - OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252),\nincluding using\n[Custom Tabs](https://developer.chrome.com/multidevice/android/customtabs)\nfor authorization requests. For this reason,\n`WebView` is explicitly *not* supported due to usability and security reasons.\n\nThe library also supports the [PKCE](https://tools.ietf.org/html/rfc7636)\nextension to OAuth which was created to secure authorization codes in public\nclients when custom URI scheme redirects are used. The library is friendly to\nother extensions (standard or otherwise) with the ability to handle additional\nparameters in all protocol requests and responses.\n\nA talk providing an overview of using the library for enterprise single sign-on (produced by\nGoogle) can be found here:\n[Enterprise SSO with Chrome Custom Tabs](https://www.youtube.com/watch?v=DdQTXrk6YTk).\n\n## Download\n\nAppAuth for Android is available on [MavenCentral](https://search.maven.org/search?q=g:net.openid%20appauth)\n\n```groovy\nimplementation 'net.openid:appauth:<version>'\n```\n\n## Requirements\n\nAppAuth supports Android API 16 (Jellybean) and above. Browsers which provide a custom tabs\nimplementation are preferred by the library, but not required.\nBoth Custom URI Schemes (all supported versions of Android) and App Links (Android M / API 23+) can\nbe used with the library.\n\nIn general, AppAuth can work with any Authorization Server (AS) that supports\nnative apps as documented in [RFC 8252](https://tools.ietf.org/html/rfc8252),\neither through custom URI scheme redirects, or App Links.\nAS's that assume all clients are web-based or require clients to maintain\nconfidentiality of the client secrets may not work well.\n\n## Demo app\n\nA demo app is contained within this repository. For instructions on how to\nbuild and configure this app, see the\n[demo app readme](https://github.com/openid/AppAuth-Android/blob/master/app/README.md).\n\n## Conceptual overview\n\nAppAuth encapsulates the authorization state of the user in the\n[net.openid.appauth.AuthState](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java)\nclass, and communicates with an authorization server through the use of the\n[net.openid.appauth.AuthorizationService](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java)\nclass. AuthState is designed to be easily persistable as a JSON string, using\nthe storage mechanism of your choice (e.g.\n[SharedPreferences](https://developer.android.com/training/basics/data-storage/shared-preferences.html),\n[sqlite](https://developer.android.com/training/basics/data-storage/databases.html),\nor even just\n[in a file](https://developer.android.com/training/basics/data-storage/files.html)).\n\nAppAuth provides data classes which are intended to model the OAuth2\nspecification as closely as possible; this provides the greatest flexibility\nin interacting with a wide variety of OAuth2 and OpenID Connect implementations.\n\nAuthorizing the user occurs via the user's web browser, and the request\nis described using instances of\n[AuthorizationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationRequest.java).\nThe request is dispatched using\n[performAuthorizationRequest()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L159) on an AuthorizationService instance, and the response (an\n[AuthorizationResponse](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationResponse.java) instance) will be dispatched to the activity of your choice,\nexpressed via an Intent.\n\nToken requests, such as obtaining a new access token using a refresh token,\nfollow a similar pattern:\n[TokenRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/TokenRequest.java) instances are dispatched using\n[performTokenRequest()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L252) on an AuthorizationService instance, and a\n[TokenResponse](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/TokenResponse.java)\ninstance is returned via a callback.\n\nResponses can be provided to the\n[update()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java#L367)\nmethods on AuthState in order to track and persist changes to the authorization\nstate. Once in an authorized state, the\n[performActionWithFreshTokens()](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthState.java#L449)\nmethod on AuthState can be used to automatically refresh access tokens\nas necessary before performing actions that require valid tokens.\n\n## Implementing the authorization code flow\n\nIt is recommended that native apps use the\n[authorization code](https://tools.ietf.org/html/rfc6749#section-1.3.1)\nflow with a public client to gain authorization to access user data. This has\nthe primary advantage for native clients that the authorization flow, which\nmust occur in a browser, only needs to be performed once.\n\nThis flow is effectively composed of four stages:\n\n1. Discovering or specifying the endpoints to interact with the provider.\n2. Authorizing the user, via a browser, in order to obtain an authorization\n   code.\n3. Exchanging the authorization code with the authorization server, to obtain\n   a refresh token and/or ID token.\n4. Using access tokens derived from the refresh token to interact with a\n   resource server for further access to user data.\n\nAt each step of the process, an AuthState instance can (optionally) be updated\nwith the result to help with tracking the state of the flow.\n\n### Authorization service configuration\n\nFirst, AppAuth must be instructed how to interact with the authorization\nservice. This can be done either by directly creating an\n[AuthorizationServiceConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationServiceConfiguration.java#L102)\ninstance, or by retrieving an OpenID Connect discovery document.\n\nDirectly specifying an AuthorizationServiceConfiguration involves\nproviding the URIs of the authorization endpoint and token endpoint,\nand optionally a dynamic client registration endpoint (see \"Dynamic client\nregistration\" for more info):\n\n```java\nAuthorizationServiceConfiguration serviceConfig =\n    new AuthorizationServiceConfiguration(\n        Uri.parse(\"https://idp.example.com/auth\"), // authorization endpoint\n        Uri.parse(\"https://idp.example.com/token\")); // token endpoint\n```\n\nWhere available, using an OpenID Connect discovery document is preferable:\n\n```java\nAuthorizationServiceConfiguration.fetchFromIssuer(\n    Uri.parse(\"https://idp.example.com\"),\n    new AuthorizationServiceConfiguration.RetrieveConfigurationCallback() {\n      public void onFetchConfigurationCompleted(\n          @Nullable AuthorizationServiceConfiguration serviceConfiguration,\n          @Nullable AuthorizationException ex) {\n        if (ex != null) {\n          Log.e(TAG, \"failed to fetch configuration\");\n          return;\n        }\n\n        // use serviceConfiguration as needed\n    }\n});\n```\n\nThis will attempt to download a discovery document from the standard location\nunder this base URI,\n`https://idp.example.com/.well-known/openid-configuration`. If the discovery\ndocument for your IDP is in some other non-standard location, you can instead\nprovide the full URI as follows:\n\n```java\nAuthorizationServiceConfiguration.fetchFromUrl(\n    Uri.parse(\"https://idp.example.com/exampletenant/openid-config\"),\n    new AuthorizationServiceConfiguration.RetrieveConfigurationCallback() {\n        ...\n    }\n});\n```\n\nIf desired, this configuration can be used to seed an AuthState instance,\nto persist the configuration easily:\n\n```java\nAuthState authState = new AuthState(serviceConfig);\n```\n\n### Obtaining an authorization code\n\nAn authorization code can now be acquired by constructing an\nAuthorizationRequest, using its Builder. In AppAuth, the builders for each\ndata class accept the mandatory parameters via the builder constructor:\n\n```java\nAuthorizationRequest.Builder authRequestBuilder =\n    new AuthorizationRequest.Builder(\n        serviceConfig, // the authorization service configuration\n        MY_CLIENT_ID, // the client ID, typically pre-registered and static\n        ResponseTypeValues.CODE, // the response_type value: we want a code\n        MY_REDIRECT_URI); // the redirect URI to which the auth response is sent\n```\n\nOther optional parameters, such as the OAuth2\n[scope string](https://tools.ietf.org/html/rfc6749#section-3.3)\nor\nOpenID Connect\n[login hint](http://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.1.2.1)\nare specified through set methods on the builder:\n\n```java\nAuthorizationRequest authRequest = authRequestBuilder\n    .setScope(\"openid email profile https://idp.example.com/custom-scope\")\n    .setLoginHint(\"jdoe@user.example.com\")\n    .build();\n```\n\nThis request can then be dispatched using one of two approaches.\n\na `startActivityForResult` call using an Intent returned from the\n`AuthorizationService`, or by calling `performAuthorizationRequest` and\nproviding pending intent for completion and cancelation handling activities.\n\nThe `startActivityForResult` approach is simpler to use but may require\nmore processing of the result:\n\n```java\nprivate void doAuthorization() {\n  AuthorizationService authService = new AuthorizationService(this);\n  Intent authIntent = authService.getAuthorizationRequestIntent(authRequest);\n  startActivityForResult(authIntent, RC_AUTH);\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  if (requestCode == RC_AUTH) {\n    AuthorizationResponse resp = AuthorizationResponse.fromIntent(data);\n    AuthorizationException ex = AuthorizationException.fromIntent(data);\n    // ... process the response or exception ...\n  } else {\n    // ...\n  }\n}\n```\n\nIf instead you wish to directly transition to another activity on completion\nor cancelation, you can use `performAuthorizationRequest`:\n\n```java\nAuthorizationService authService = new AuthorizationService(this);\n\nauthService.performAuthorizationRequest(\n    authRequest,\n    PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCompleteActivity.class), 0),\n    PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCanceledActivity.class), 0));\n```\n\nThe intents may be customized to carry any additional data or flags required\nfor the correct handling of the authorization response.\n\n#### Capturing the authorization redirect\n\nOnce the authorization flow is completed in the browser, the authorization\nservice will redirect to a URI specified as part of the authorization request,\nproviding the response via query parameters. In order for your app to\ncapture this response, it must register with the Android OS as a handler for\nthis redirect URI.\n\nWe recommend using a custom scheme based redirect URI (i.e. those of form\n`my.scheme:/path`), as this is the most widely supported across all versions of\nAndroid. To avoid conflicts with other apps, it is recommended to configure a \ndistinct scheme using \"reverse domain name notation\". This can either match\nyour service web domain (in reverse) e.g. `com.example.service` or your package\nname `com.example.app` or be something completely new as long as it's distinct\nenough. Using the package name of your app is quite common but it's not always\npossible if it contains illegal characters for URI schemes (like underscores)\nor if you already have another handler for that scheme - so just use something\nelse.\n\nWhen a custom scheme is used, AppAuth can be easily configured to capture\nall redirects using this custom scheme through a manifest placeholder:\n\n```groovy\nandroid.defaultConfig.manifestPlaceholders = [\n  'appAuthRedirectScheme': 'com.example.app'\n]\n```\n\nAlternatively, the redirect URI can be directly configured by adding an\nintent-filter for AppAuth's RedirectUriReceiverActivity to your\nAndroidManifest.xml:\n\n```xml\n<activity\n        android:name=\"net.openid.appauth.RedirectUriReceiverActivity\"\n        tools:node=\"replace\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <data android:scheme=\"com.example.app\"/>\n    </intent-filter>\n</activity>\n```\n\nIf an HTTPS redirect URI is required instead of a custom scheme, the same\napproach (modifying your AndroidManifest.xml) is used:\n\n```xml\n<activity\n        android:name=\"net.openid.appauth.RedirectUriReceiverActivity\"\n        tools:node=\"replace\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <data android:scheme=\"https\"\n              android:host=\"app.example.com\"\n              android:path=\"/oauth2redirect\"/>\n    </intent-filter>\n</activity>\n```\n\nHTTPS redirects can be secured by configuring the redirect URI as an\n[app link](https://developer.android.com/training/app-links/index.html) in\nAndroid M and above. We recommend that a fallback page be configured at\nthe same address to forward authorization responses to your app via a custom\nscheme, for older Android devices.\n\n#### Handling the authorization response\n\nUpon completion of the authorization flow, the completion Intent provided to\nperformAuthorizationRequest will be triggered. The authorization response\nis provided to this activity via Intent extra data, which can be extracted\nusing the `fromIntent()` methods on AuthorizationResponse and\nAuthorizationException respectively:\n\n```java\npublic void onCreate(Bundle b) {\n  AuthorizationResponse resp = AuthorizationResponse.fromIntent(getIntent());\n  AuthorizationException ex = AuthorizationException.fromIntent(getIntent());\n  if (resp != null) {\n    // authorization completed\n  } else {\n    // authorization failed, check ex for more details\n  }\n  // ...\n}\n```\n\nThe response can be provided to the AuthState instance for easy persistence\nand further processing:\n\n```\nauthState.update(resp, ex);\n```\n\nIf the full redirect URI is required in order to extract additional information\nthat AppAuth does not provide, this is also provided to your activity:\n\n```java\npublic void onCreate(Bundle b) {\n  // ...\n  Uri redirectUri = getIntent().getData();\n  // ...\n}\n```\n\n### Exchanging the authorization code\n\nGiven a successful authorization response carrying an authorization code,\na token request can be made to exchange the code for a refresh token:\n\n```java\nauthService.performTokenRequest(\n    resp.createTokenExchangeRequest(),\n    new AuthorizationService.TokenResponseCallback() {\n      @Override public void onTokenRequestCompleted(\n            TokenResponse resp, AuthorizationException ex) {\n          if (resp != null) {\n            // exchange succeeded\n          } else {\n            // authorization failed, check ex for more details\n          }\n        }\n    });\n```\n\nThe token response can also be used to update an AuthState instance:\n\n```java\nauthState.update(resp, ex);\n```\n\n### Using access tokens\n\nFinally, the retrieved access token can be used to interact with a resource\nserver. This can be done directly, by extracting the access token from a\ntoken response. However, in most cases, it is simpler to use the\n`performActionWithFreshTokens` utility method provided by AuthState:\n\n```java\nauthState.performActionWithFreshTokens(service, new AuthStateAction() {\n  @Override public void execute(\n      String accessToken,\n      String idToken,\n      AuthorizationException ex) {\n    if (ex != null) {\n      // negotiation for fresh tokens failed, check ex for more details\n      return;\n    }\n\n    // use the access token to do something ...\n  }\n});\n```\n\nThis also updates the AuthState object with current access, id, and refresh tokens.\nIf you are storing your AuthState in persistent storage, you should write the updated\ncopy in the callback to this method.\n\n### Ending current session\n\nGiven you have a logged in session and you want to end it. In that case you need to get:\n- `AuthorizationServiceConfiguration`\n- valid Open Id Token that you should get after authentication\n- End of session URI that should be provided within you OpenId service config\n\nFirst you have to build EndSessionRequest\n\n```java\nEndSessionRequest endSessionRequest =\n    new EndSessionRequest.Builder(authorizationServiceConfiguration)\n        .setIdTokenHint(idToken)\n        .setPostLogoutRedirectUri(endSessionRedirectUri)\n        .build();\n```\nThis request can then be dispatched using one of two approaches.\n\na `startActivityForResult` call using an Intent returned from the `AuthorizationService`,\nor by calling `performEndSessionRequest` and providing pending intent for completion\nand cancelation handling activities.\n\nThe startActivityForResult approach is simpler to use but may require more processing of the result:\n\n```java\nprivate void endSession() {\n  AuthorizationService authService = new AuthorizationService(this);\n  Intent endSessionItent = authService.getEndSessionRequestIntent(endSessionRequest);\n  startActivityForResult(endSessionItent, RC_END_SESSION);\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  if (requestCode == RC_END_SESSION) {\n    EndSessionResponse resp = EndSessionResponse.fromIntent(data);\n    AuthorizationException ex = AuthorizationException.fromIntent(data);\n    // ... process the response or exception ...\n  } else {\n    // ...\n  }\n}\n```\nIf instead you wish to directly transition to another activity on completion or cancelation,\nyou can use `performEndSessionRequest`:\n\n```java\nAuthorizationService authService = new AuthorizationService(this);\n\nauthService.performEndSessionRequest(\n    endSessionRequest,\n    PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCompleteActivity.class), 0),\n    PendingIntent.getActivity(this, 0, new Intent(this, MyAuthCanceledActivity.class), 0));\n```\n\nEnd session flow will also work involving browser mechanism that is described in authorization\nmechanism session.\nHandling response mechanism with transition to another activity should be as follows:\n\n ```java\npublic void onCreate(Bundle b) {\n  EndSessionResponse resp = EndSessionResponse.fromIntent(getIntent());\n  AuthorizationException ex = AuthorizationException.fromIntent(getIntent());\n  if (resp != null) {\n    // authorization completed\n  } else {\n    // authorization failed, check ex for more details\n  }\n  // ...\n}\n```\n\n### AuthState persistence\n\nInstances of `AuthState` keep track of the authorization and token\nrequests and responses. This is the only object that you need to persist to\nretain the authorization state of the session. Typically, one would do this by\nstoring the authorization state in SharedPreferences or some other persistent\nstore private to the app:\n\n```java\n@NonNull public AuthState readAuthState() {\n  SharedPreferences authPrefs = getSharedPreferences(\"auth\", MODE_PRIVATE);\n  String stateJson = authPrefs.getString(\"stateJson\", null);\n  if (stateJson != null) {\n    return AuthState.jsonDeserialize(stateJson);\n  } else {\n    return new AuthState();\n  }\n}\n\npublic void writeAuthState(@NonNull AuthState state) {\n  SharedPreferences authPrefs = getSharedPreferences(\"auth\", MODE_PRIVATE);\n  authPrefs.edit()\n      .putString(\"stateJson\", state.jsonSerializeString())\n      .apply();\n}\n```\n\nThe demo app has an [AuthStateManager](https://github.com/openid/AppAuth-Android/blob/master/app/java/net/openid/appauthdemo/AuthStateManager.java)\ntype which demonstrates this in more detail.\n\n## Advanced configuration\n\nAppAuth provides some advanced configuration options via\n[AppAuthConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AppAuthConfiguration.java)\ninstances, which can be provided to\n[AuthorizationService](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java)\nduring construction.\n\n### Controlling which browser is used for authorization\n\nSome applications require explicit control over which browsers can be used\nfor authorization - for example, to require that Chrome be used for\nsecond factor authentication to work, or require that some custom browser\nis used for authentication in an enterprise environment.\n\nControl over which browsers can be used can be achieved by defining a\n[BrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserMatcher.java), and supplying this to the builder of AppAuthConfiguration.\nA BrowserMatcher is suppled with a\n[BrowserDescriptor](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserDescriptor.java)\ninstance, and must decide whether this browser is permitted for the\nauthorization flow.\n\nBy default, [AnyBrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/AnyBrowserMatcher.java)\nis used.\n\nFor your convenience, utility classes to help define a browser matcher are\nprovided, such as:\n\n- [Browsers](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/Browsers.java):\n  contains a set of constants for the official package names and signatures\n  of Chrome, Firefox and Samsung SBrowser.\n- [VersionedBrowserMatcher](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/VersionedBrowserMatcher.java):\n  will match a browser if it has a matching package name and signature, and\n  a version number within a defined\n  [VersionRange](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/VersionRange.java). This class also provides some static instances for matching\n  Chrome, Firefox and Samsung SBrowser.\n- [BrowserAllowList](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserAllowList.java):\n  takes a list of BrowserMatcher instances, and will match a browser if any\n  of these child BrowserMatcher instances signals a match.\n- [BrowserDenyList](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/browser/BrowserDenyList.java):\n  the inverse of BrowserAllowList - takes a list of browser matcher instances,\n  and will match a browser if it _does not_ match any of these child\n  BrowserMatcher instances.\n\nFor instance, in order to restrict the authorization flow to using Chrome\nor SBrowser as a custom tab:\n\n```java\nAppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()\n    .setBrowserMatcher(new BrowserAllowList(\n        VersionedBrowserMatcher.CHROME_CUSTOM_TAB,\n        VersionedBrowserMatcher.SAMSUNG_CUSTOM_TAB))\n    .build();\nAuthorizationService authService =\n        new AuthorizationService(context, appAuthConfig);\n```\n\nOr, to prevent the use of a buggy version of the custom tabs in\nSamsung SBrowser:\n\n```java\nAppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()\n    .setBrowserMatcher(new BrowserDenyList(\n        new VersionedBrowserMatcher(\n            Browsers.SBrowser.PACKAGE_NAME,\n            Browsers.SBrowser.SIGNATURE_SET,\n            true, // when this browser is used via a custom tab\n            VersionRange.atMost(\"5.3\")\n        )))\n    .build();\nAuthorizationService authService =\n        new AuthorizationService(context, appAuthConfig);\n```\n\n### Customizing the connection builder for HTTP requests\n\nIt can be desirable to customize how HTTP connections are made when performing\ntoken requests, for instance to use\n[certificate pinning](https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning)\nor to add additional trusted certificate authorities for an enterprise\nenvironment. This can be achieved in AppAuth by providing a custom\n[ConnectionBuilder](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/connectivity/ConnectionBuilder.java)\ninstance.\n\nFor example, to custom the SSL socket factory used, one could do the following:\n\n```java\nAppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()\n    .setConnectionBuilder(new ConnectionBuilder() {\n      public HttpURLConnection openConnect(Uri uri) throws IOException {\n        URL url = new URL(uri.toString());\n        HttpURLConnection connection =\n            (HttpURLConnection) url.openConnection();\n        if (connection instanceof HttpsUrlConnection) {\n          HttpsURLConnection connection = (HttpsURLConnection) connection;\n          connection.setSSLSocketFactory(MySocketFactory.getInstance());\n        }\n      }\n    })\n    .build();\n```\n\n### Issues with [ID Token](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/IdToken.java#L118) validation\n\nID Token validation was introduced in `0.8.0` but not all authorization servers or configurations support it correctly.\n\n- For testing environments [setSkipIssuerHttpsCheck](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AppAuthConfiguration.java#L129) can be used to bypass the fact the issuer needs to be HTTPS.\n\n```java\nAppAuthConfiguration appAuthConfig = new AppAuthConfiguration.Builder()\n    .setSkipIssuerHttpsCheck(true)\n    .build()\n```\n\n- For services that don't support nonce[s] resulting in **IdTokenException** `Nonce mismatch` just set nonce to `null` on the `AuthorizationRequest`. Please consider **raising an issue** with your Identity Provider and removing this once it is fixed.\n\n```java\nAuthorizationRequest authRequest = authRequestBuilder\n    .setNonce(null)\n    .build();\n```\n\n## Dynamic client registration\n\nAppAuth supports the\n[OAuth2 dynamic client registration protocol](https://tools.ietf.org/html/rfc7591).\nIn order to dynamically register a client, create a\n[RegistrationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/RegistrationRequest.java) and dispatch it using\n[performRegistrationRequest](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationService.java#L278)\non your AuthorizationService instance.\n\nThe registration endpoint can either\nbe defined directly as part of your\n[AuthorizationServiceConfiguration](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/AuthorizationServiceConfiguration.java),\nor discovered from an OpenID Connect discovery document.\n\n```java\nRegistrationRequest registrationRequest = new RegistrationRequest.Builder(\n    serviceConfig,\n    Arrays.asList(redirectUri))\n    .build();\n```\n\nRequests are dispatched with the help of `AuthorizationService`. As this\nrequest is asynchronous the response is passed to a callback:\n\n```java\nservice.performRegistrationRequest(\n    registrationRequest,\n    new AuthorizationService.RegistrationResponseCallback() {\n        @Override public void onRegistrationRequestCompleted(\n            @Nullable RegistrationResponse resp,\n            @Nullable AuthorizationException ex) {\n            if (resp != null) {\n                // registration succeeded, store the registration response\n                AuthState state = new AuthState(resp);\n                //proceed to authorization...\n            } else {\n              // registration failed, check ex for more details\n            }\n         }\n    });\n```\n\n## Utilizing client secrets (DANGEROUS)\n\nWe _strongly recommend_ you avoid using static client secrets in your\nnative applications whenever possible. Client secrets derived via a dynamic\nclient registration are safe to use, but static client secrets can be easily\nextracted from your apps and allow others to impersonate your app and steal\nuser data. If client secrets must be used by the OAuth2 provider you are\nintegrating with, we strongly recommend performing the code exchange step\non your backend, where the client secret can be kept hidden.\n\nHaving said this, in some cases using client secrets is unavoidable. In these\ncases, a [ClientAuthentication](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientAuthentication.java)\ninstance can be provided to AppAuth when performing a token request. This\nallows additional parameters (both HTTP headers and request body parameters) to\nbe added to token requests. Two standard implementations of\nClientAuthentication are provided:\n\n- [ClientSecretBasic](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientSecretBasic.java):\n  includes a client ID and client secret as an HTTP Basic Authorization header.\n- [ClientSecretPost](https://github.com/openid/AppAuth-Android/blob/master/library/java/net/openid/appauth/ClientSecretPost.java):\n  includes a client ID and client secret as additional request parameters.\n\nSo, in order to send a token request using HTTP basic authorization, one would\nwrite:\n\n```java\nClientAuthentication clientAuth = new ClientSecretBasic(MY_CLIENT_SECRET);\nTokenRequest req = ...;\nauthService.performTokenRequest(req, clientAuth, callback);\n```\n\nThis can also be done when using `performActionWithFreshTokens` on AuthState:\n\n```java\nClientAuthentication clientAuth = new ClientSecretPost(MY_CLIENT_SECRET);\nauthState.performActionWithFreshTokens(\n    authService,\n    clientAuth,\n    action);\n```\n\n## Modifying or contributing to AppAuth\n\nThis project requires the Android SDK for API level 25 (Nougat) to build,\nthough the produced binaries only require API level 16 (Jellybean) to be\nused. We recommend that you fork and/or clone this repository to make\nmodifications; downloading the source has been known to cause some developers\nproblems.\n\nFor contributors, see the additional instructions in\n[CONTRIBUTING.md](https://github.com/openid/AppAuth-Android/blob/master/CONTRIBUTING.md).\n\n### Building from the Command line\n\nAppAuth for Android uses Gradle as its build system. In order to build\nthe library and app binaries, run `./gradlew assemble`.\nThe library AAR files are output to `library/build/outputs/aar`, while the\ndemo app is output to `app/build/outputs/apk`.\nIn order to run the tests and code analysis, run `./gradlew check`.\n\n### Building from Android Studio\n\nIn AndroidStudio, File -> New -> Import project. Select the root folder\n(the one with the `build.gradle` file).\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "appauth_lockup.svg",
          "type": "blob",
          "size": 4.9580078125,
          "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1792 512\"><path d=\"M107.6 331.4A187.6 187.6 0 0 1 232.4 68l-21.8 46a151.6 151.6 0 0 0-81 171.3l-22 46.1zm283.8 67.5a187 187 0 0 1-229 0l39.6-16.7c22.1 12.6 47.6 19.7 74.9 19.7 27.2 0 52.7-7.1 74.8-19.7l39.7 16.7zM321.4 68a187.7 187.7 0 0 1 124.8 263.4l-21.9-46a151.6 151.6 0 0 0-81-171.4l-22-46z\" fill=\"#164a72\"/><path d=\"M276.9 336.4l89.6 37.8-22.7-47.6-67-28.3-66.9 28.3-22.5 47.6m89.5-352.9L90.3 415.2l48.5-20.5 22.5-47.5 71.1-150 44.5-93.9L339.3 235l53.2 112.2 22.5 47.5 48.5 20.5L276.9 21.3z\" fill=\"#00aeef\"/><path d=\"M321.3 277.2L277 183.3l-44.5 93.9 44.5-18.7z\" fill=\"#00aeef\"/><g fill=\"#164a72\"><path d=\"M701.4 246.5H612L591.2 303h-27.6l82-212.4h23.3l80.7 212.4H722l-20.6-56.6M620 224.7h73.6L657 124.1l-37 100.6\" /><path d=\"M910.3 230c0 23.3-5.4 41.8-16 55.6A54 54 0 0 1 849 306c-10 0-18.6-1.6-26-4.8a49.8 49.8 0 0 1-18.6-14.8l-.4.2v77.1h-27.2V145.3H800l2.6 20a52.7 52.7 0 0 1 19.1-17.1 57.5 57.5 0 0 1 26.9-5.9c19.8 0 35 7.7 45.6 23 10.7 15.1 16 35.7 16 61.6v3m-27-3c0-18.5-3.6-33.5-10.6-44.9a34.9 34.9 0 0 0-31.9-17.2c-8.8 0-16.3 2-22.3 5.8-6 4-10.8 9.3-14.4 16v76.2a43.7 43.7 0 0 0 14.5 15.9c6 3.7 13.5 5.5 22.5 5.5 14.2 0 24.7-4.9 31.6-14.7 7-10 10.5-23 10.5-39.5v-3\" /><path d=\"M1079.4 230c0 23.3-5.3 41.8-16 55.6a54 54 0 0 1-45.2 20.4c-10 0-18.7-1.6-26-4.8a49.8 49.8 0 0 1-18.6-14.8l-.5.2v77.1H946V145.3h23.2l2.6 20a52.7 52.7 0 0 1 19.1-17.1 57.5 57.5 0 0 1 26.9-5.9c19.8 0 35 7.7 45.6 23 10.7 15.1 16 35.7 16 61.6v3m-27-3c0-18.5-3.6-33.5-10.6-44.9a34.9 34.9 0 0 0-32-17.2c-8.8 0-16.2 2-22.2 5.8-6 4-10.8 9.3-14.5 16v76.2a43.7 43.7 0 0 0 14.6 15.9c6 3.7 13.4 5.5 22.5 5.5 14.2 0 24.7-4.9 31.6-14.7 7-10 10.5-23 10.5-39.5v-3\" /><path d=\"M1237.5 246.5h-89.4l-20.8 56.6h-27.6l82-212.4h23.3l80.7 212.4H1258l-20.6-56.6m-81.3-21.8h73.5l-36.5-100.6-37 100.6\" /><path d=\"M1411.8 280l-.4-.1a51.6 51.6 0 0 1-18.8 19.4 53.6 53.6 0 0 1-27.5 6.7c-17.5 0-31-5.4-40.3-16-9.5-10.9-14.2-28.1-14.2-51.8v-93h27.1v93.2c0 17.4 2.6 29.2 7.6 35.6 5 6.4 13 9.5 24 9.5s19.7-2 26.3-6.3a40.3 40.3 0 0 0 15.3-18.5V145.3h27V303h-24.2l-1.9-23\" /><path d=\"M1513.2 106.9v38.4h30.3v20.5h-30.3v96.6c0 7.7 1.3 13.2 4 16.3 2.5 3 6.1 4.5 10.7 4.5a56.4 56.4 0 0 0 13.7-1.9l3.7 19.1a57.5 57.5 0 0 1-24 5.5c-11 0-19.7-3.3-26-10.1-6.1-7-9.2-18-9.2-33.4v-96.6h-22.7v-20.5h22.7v-38.4h27\" /><path d=\"M1602.6 166.7l.4.1a55.3 55.3 0 0 1 46.7-24.5c17.2 0 30.3 5 39.4 15 9.1 9.8 13.7 25.5 13.7 47v98.8h-27v-99c0-13.8-2.8-23.7-8.5-30-5.6-6.2-14.2-9.3-25.8-9.3-8.4 0-16 2-22.6 6-6.6 4-12 9.5-16.3 16.5V303h-27.1V75.5h27v91.2\" /></g><g fill=\"#00aeef\"><path d=\"M1158.1 435.1v-51.9h-9.3v-7.8h9.3v-7.6c0-6.5 1.6-11.4 4.8-14.8 3.3-3.4 7.9-5.1 13.9-5.1a53.2 53.2 0 0 1 8 1.2l-1.3 8a18.1 18.1 0 0 0-5.4-.7c-3.3 0-5.8 1-7.4 3-1.5 1.8-2.3 4.6-2.3 8.4v7.6h12.7v7.8h-12.7v52h-10.3\" /><path d=\"M1189.3 404.7c0-9 2.3-16.4 7-22a24 24 0 0 1 19.6-8.4c8.3 0 14.9 2.8 19.6 8.5a32.7 32.7 0 0 1 7.1 21.9v1.3c0 9-2.3 16.3-7 21.9a24.3 24.3 0 0 1-19.6 8.3c-8.4 0-15-2.8-19.7-8.3-4.7-5.6-7-12.9-7-22v-1.2m10.2 1.3c0 6.5 1.4 11.8 4.1 15.9 2.7 4 6.9 6.1 12.4 6.1 5.4 0 9.5-2 12.3-6.1a28 28 0 0 0 4.1-16v-1.2c0-6.4-1.4-11.7-4.2-15.9a13.9 13.9 0 0 0-12.3-6.2c-5.5 0-9.6 2-12.3 6.2-2.7 4.2-4 9.5-4 15.9v1.3\" /><path d=\"M1284.6 384.6l-6-.3a13 13 0 0 0-7.7 2.2c-2 1.4-3.6 3.5-4.7 6.1v42.5H1256v-59.7h9.1l1 8.7h.2c1.6-3 3.7-5.5 6.2-7.2a15.1 15.1 0 0 1 11.4-2.4l2 .4-1.3 9.7\" /><path d=\"M1369.8 413.7H1336l-8 21.4h-10.3l31-80.3h8.8L1388 435h-10.4l-7.8-21.4m-30.8-8.2h27.8l-13.8-38-14 38\" /><path d=\"M1407.5 375.4l.8 9h.1a20.3 20.3 0 0 1 17.8-10.1c6.6 0 11.5 1.9 15 5.5 3.5 3.7 5.2 9.6 5.2 17.6v37.7H1436v-37.4c0-5.5-1-9.4-3.1-11.6-2-2.2-5.3-3.3-9.8-3.3a15.8 15.8 0 0 0-14.6 9v43.3h-10.3v-59.7h9.2\" /><path d=\"M1459.8 406.3c0-9.8 2-17.5 6-23.3 4-5.8 9.8-8.7 17.3-8.7a19 19 0 0 1 16.4 7.8h.2v-33h10.2v86h-8.8l-1-7.4c-1.9 2.8-4.3 5-7 6.4a22.1 22.1 0 0 1-10 2.1c-7.5 0-13.2-2.6-17.2-7.8-4-5.1-6-12.1-6-21v-1m10.2 1c0 6.3 1.2 11.3 3.7 15 2.5 3.5 6.4 5.3 11.8 5.3a15 15 0 0 0 8.5-2.2c2.3-1.5 4.1-3.7 5.6-6.5v-27.7a15 15 0 0 0-14-8.5c-5.4 0-9.4 2.2-11.9 6.5s-3.7 10-3.7 17v1.2\" /><path d=\"M1555 384.6l-6-.3a13 13 0 0 0-7.7 2.2c-2 1.4-3.6 3.5-4.7 6.1v42.5h-10.3v-59.7h9.2l1 8.7h.2c1.6-3 3.7-5.5 6.2-7.2a15.1 15.1 0 0 1 11.4-2.4l2 .4-1.3 9.7\" /><path d=\"M1562 404.7c0-9 2.4-16.4 7.1-22a24 24 0 0 1 19.5-8.4c8.4 0 15 2.8 19.7 8.5a32.7 32.7 0 0 1 7 21.9v1.3c0 9-2.3 16.3-7 21.9a24.3 24.3 0 0 1-19.6 8.3c-8.3 0-14.9-2.8-19.6-8.3-4.7-5.6-7-12.9-7-22v-1.2m10.2 1.3c0 6.5 1.4 11.8 4 15.9 2.8 4 7 6.1 12.4 6.1 5.5 0 9.6-2 12.3-6.1a28 28 0 0 0 4.2-16v-1.2c0-6.4-1.4-11.7-4.2-15.9a13.9 13.9 0 0 0-12.4-6.2c-5.4 0-9.5 2-12.2 6.2-2.7 4.2-4.1 9.5-4.1 15.9v1.3\" /><path d=\"M1639.8 435.1h-10.2v-59.7h10.2v59.7m0-75.1h-10.2v-11h10.2v11\" /><path d=\"M1654.3 406.3c0-9.8 2-17.5 6-23.3 4-5.8 9.8-8.7 17.3-8.7a19 19 0 0 1 16.4 7.8h.2v-33h10.2v86h-8.9l-.9-7.4c-2 2.8-4.4 5-7.2 6.4a22.1 22.1 0 0 1-10 2.1c-7.3 0-13-2.6-17.1-7.8-4-5.1-6-12.1-6-21v-1m10.2 1c0 6.3 1.2 11.3 3.7 15 2.5 3.5 6.4 5.3 11.8 5.3a15 15 0 0 0 8.6-2.2c2.2-1.5 4-3.7 5.6-6.5v-27.7a15 15 0 0 0-14-8.5c-5.5 0-9.5 2.2-12 6.5s-3.7 10-3.7 17v1.2\" /></g></svg>"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.5361328125,
          "content": "import org.ajoberstar.grgit.Grgit\n\napply from: 'config/keystore.gradle'\n\nbuildscript {\n    repositories {\n        gradlePluginPortal()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.0.1'\n        classpath 'org.ajoberstar.grgit:grgit-gradle:4.1.1'\n        classpath 'org.jacoco:org.jacoco.core:0.8.7'\n    }\n}\n\nsubprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\next.verifyKeystore()\n\ntry {\n    def grgit = Grgit.open(currentDir: project.rootDir)\n    def lastCommit = grgit.head()\n\n    project.ext.versionNum = grgit.log(includes:['HEAD']).size()\n    project.ext.versionName = grgit.describe()\n    project.ext.versionDate = lastCommit.getDate()\n    if (project.ext.versionName == null) {\n        project.ext.versionName = 'DEV'\n    }\n} catch (Exception ignored) {\n    project.ext.versionNum = 1\n    project.ext.versionName = 'DEV'\n    project.ext.versionDate = new Date()\n}\n\nproject.ext {\n    minSdkVersion = 16\n    compileSdkVersion = 33\n\n    googleVersions = [\n        glide                 : '4.12.0',\n        material              : '1.3.0',\n    ]\n\n    androidXVersions = [\n        annotation            : '1.2.0',\n        appCompat             : '1.3.0',\n        browser               : '1.3.0',\n    ]\n\n    okioVersion = '2.10.0'\n    jodaVersion = '2.10.10'\n}\n\ntask showVersion {\n    doLast {\n        logger.lifecycle(\"Version ID: \" + project.versionNum)\n        logger.lifecycle(\"Version Name: \" + project.versionName)\n        logger.lifecycle(\"Version Date: \" + project.versionDate)\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.07421875,
          "content": "android.enableJetifier=true\nandroid.useAndroidX=true\norg.gradle.daemon=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.775390625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include ':app', ':library'\n"
        }
      ]
    }
  ]
}