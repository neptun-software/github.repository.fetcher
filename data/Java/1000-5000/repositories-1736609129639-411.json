{
  "metadata": {
    "timestamp": 1736609129639,
    "page": 411,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chenBingX/SuperTextView",
      "stars": 3305,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.029296875,
          "content": "*.html linguist-language=Java\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1328125,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n.idea\n_config.yml\n"
        },
        {
          "name": "DevelopGuide.md",
          "type": "blob",
          "size": 26.0107421875,
          "content": "# SuperTextView 开发参考文档\n\n<img src=\"https://raw.githubusercontent.com/chenBingX/img/master/stv/SuperTextViewyuan.png\" width=230 height=230 align=right alt=\"SuperTextView\">\n\n  一直以来 **SuperTextView** 的使命，就是帮助 Android 开发者得心应手的构建 Android 应用。\n\n  **SuperTextView** 是一个高效的、全能的 **Android** 控件。通过 **SuperTextView** ，你可以快速实现圆角背景，设置渐变色背景，给控件和文字描边，为控件增加状态图，添加按压时文字或背景变色效果，通过 **Adjuster** 模块快速插入操作到控件绘制过程中，展示图片，甚至可以直接从网络上下载图片展示...基本上涵盖了 **Android** 日常开发中会用到的绝大部分效果。而实现这一切的代价，仅仅是给 **SuperTextView** 设置一个属性。**SuperTextView** 可以帮助开发者高效、便捷、优雅的完成需求开发。\n\n  本篇文档将详细的讲解目前 **SuperTextView** 的每一个功能，以便开发者能够快速上手。\n\n# 1. 获取 SuperTextView\n\n\n  - Gradle下添加依赖：\n\n  ```\n  dependencies {\n  compile 'com.github.chenBingX:SuperTextView:v3.1.1'\n  }\n  ```\n\n  - 项目地址\n\n  [https://github.com/chenBingX/SuperTextView](https://github.com/chenBingX/SuperTextView)\n\n  **注：关注项目以优先获得最新版本。**\n\n# 2. SuperTextView 属性预览\n\n  **SuperTextView** 的绝大部分属性均支持在xml中配置，设置后即预览到效果。\n\n  ```\n<SuperTextView\n\n  //设置圆角。会同时作用于填充和边框(如果边框存在的话)。\n  //如果要设置为圆形，只需要把该值设置为宽或长的1/2即可。\n  app:stv_corner=\"25dp\"\n\n  //设置左上角圆角\n  app:stv_left_top_corner=\"true\"\n\n  //设置右上角圆角\n  app:stv_right_top_corner=\"true\"\n\n  //设置左下角圆角\n  app:stv_left_bottom_corner=\"true\"\n\n  //设置右下角圆角\n  app:stv_right_bottom_corner=\"true\"\n\n  //设置填充颜色\n  app:stv_solid=\"@color/red\"\n\n  //设置边框颜色\n  app:stv_stroke_color=\"@color/black\"\n\n  //设置边框的宽度。\n  app:stv_stroke_width=\"2dp\"\n\n  //放置一个drawable在背景层上。默认居中显示。\n  //并且默认大小为SuperTextView的一半。\n  app:stv_state_drawable=\"@drawable/emoji\"\n\n  //设置drawable的显示模式。可选值如下：\n  // left、top、right、bottom、center(默认值)、\n  //leftTop、rightTop、leftBottom、rightBottom、\n  //fill(充满整个SuperTextView，此时会使设置drawable的大小失效)\n  app:stv_state_drawable_mode=\"center\"\n\n  //设置drawable的height\n  app:stv_state_drawable_height=\"30dp\"\n\n  //设置drawable的width\n  app:stv_state_drawable_width=\"30dp\"\n\n  //设置drawble相对于基础位置左边的距离\n  app:stv_state_drawable_padding_left=\"10dp\"\n\n  //设置drawble相对于基础位置上边的距离\n  app:stv_state_drawable_padding_top=\"10dp\"\n\n  // boolean类型。是否显示drawable。\n  //如果你想要设置的drawable显示出来，必须设置为true。\n  //当不想让它显示时，再设置为false即可。\n  app:stv_isShowState=\"true\"\n\n  // 是否将state_drawable作为背景图\n  // 将state_drawable作为背景图可以让SuperTextView具备展示图片的能力\n  // 通过调节corner、stroke等属性，可以给图片设置圆角、边框等\n  app:stv_drawableAsBackground=\"true\"\n\n  //放置一个drawable在背景层上。默认居中显示。\n  //并且默认大小为SuperTextView的一半。\n  app:stv_state_drawable2=\"@drawable/emoji\"\n\n  //与state_drawable类似\n  app:stv_state_drawable2_mode=\"center\"\n\n  //与state_drawable_height类似\n  app:stv_state_drawable2_height=\"30dp\"\n\n  //与state_drawable_width类似\n  app:stv_state_drawable2_width=\"30dp\"\n\n  //与state_drawable_padding_left类似\n  app:stv_state_drawable2_padding_left=\"10dp\"\n\n  //与state_drawable_padding_top类似\n  app:stv_state_drawable2_padding_top=\"10dp\"\n\n  //与isShowState类似\n  app:stv_isShow2State=\"true\"\n\n  //是否开启文字描边功能。\n  //注意，启用这个模式之后通过setTextColor()设置的颜色将会被覆盖。\n  //你需要通过text_fill_color来设置文字的颜色。\n  app:stv_text_stroke=\"true\"\n\n  // 文字的描边颜色。默认为Color.BLACK。\n  app:stv_text_stroke_color=\"@color/black\"\n\n  // 文字描边的宽度。\n  app:stv_text_stroke_width=\"1dp\"\n\n  // 文字填充的颜色。默认为Color.BLACK。\n  app:stv_text_fill_color=\"@color/blue\"\n\n  // boolean类型。是否启用Adjuster功能。\n  //具体干什么，需要在Java中为SuperTextView实现一个Adjuster。\n  //当你启用这个功能而没有实现自己的Adjuster时，\n  //SuperTextView会启用默认的Adjuster。它会按照一定的规则调整文字大小。\n  app:stv_autoAdjust=\"true\"\n\n  // 必须设置为true才能启用渐变功能。这意味着你可以灵活的控制这一功能。\n  app:stv_shaderEnable=\"true\"\n\n  // 设置起始颜色。\n  app:stv_shaderStartColor=\"@color/main_blue\"\n\n  // 设置结尾颜色。\n  app:stv_shaderEndColor=\"@color/pink\"\n\n  // 设置渐变模式。如上图可见，一共支持4中模式：\n  // topTopBottom, bottomToTop, leftToRight, rightToLeft\n  app:stv_shaderMode=\"rightToLeft\"\n\n  // 设置按压时的背景色\n  app:stv_pressBgColor=\"@color/red\"\n\n  // 设置按压时的文字颜色\n  app:stv_pressTextColor=\"@color/white\"\n\n  // 修改 drawable 的颜色\n  app:stv_state_drawable_tint=\"@color/gray\"\n\n  // 修改 drawable2 的颜色\n  app:stv_state_drawable2_tint=\"@color/red\"\n\n  // 修改 drawable 的旋转角度\n  app:stv_state_drawable_rotate=\"90\"\n\n  // 修改 drawable2 的旋转角度\n  app:stv_state_drawable2_rotate=\"90\"\n\n  // 是否启用渐变色文字\n  app:stv_textShaderEnable=\"true\"\n\n  // 设置文字的起始渐变色\n  app:stv_textShaderStartColor=\"@color/red\"\n\n  // 设置文字的结束渐变色\n  app:stv_textShaderEndColor=\"@color/yellow\"\n\n  // 设置文字的渐变的模式\n  // leftToRight：左 -> 右\n  // rightToLeft：右 -> 左\n  // topToBottom：上 -> 下\n  // bottomToTop：下 -> 上\n  app:stv_textShaderMode=\"leftToRight\"\n  />\n  ```\n\n# 3. SuperTextView Api\n\n  [点击此处，查看详细的《SuperTextView Api文档》](https://chenbingx.github.io/SuperTextView/SuperTextView-doc/index.html)\n  \n# 4. 开发指南\n\n## 4.1 SuperTextView中的层级\n  在 **SuperTextView** 中，有层级划分的概念。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/SuperTextView层级.png)\n\n  **1.Background层**：View的`Background`背景层。\n\n  **2.背景层**：即通过`app:stv_solid`设置的纯色背景层。在 `SuperTextView` 中通常将该层视做背景层，而不是View的`Background`。\n\n  **3.Drawable层**：`SuperTextView`的Drawable所在的层级。如果你希望通过 `SuperTextView` 来展示图片，就是在该层展示。\n\n  **4.文字层**：即绘制文字的层级。\n\n  理解层级的概念对于后面将要讲述的 **Adjuster** 很有帮助。\n\n## 4.2 设置圆角\n  圆角化功能是 **SuperTextView** 最基本的功能，你可以在xml文件或者Java中进行设置。\n\n  在xml中：\n\n  ```\n  app:stv_corner=\"25dp\"\n  ```\n  在Java中：\n\n  ```\n  stv.setCorner(25);\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/圆角矩形.png)\n\n  圆角化的设置仅对 **SuperTextView** 的【背景层】，或者将`Drawble`用于展示图片（即：配置了`app:stv_drawableAsBackground=\"true\"`）时有效。\n\n  如果你需要一个圆形的效果，只需要将`corner`值设置为控件最大边长度的一半即可。比如：\n\n  ```\n  android:layout_width=\"80dp\"\n  android:layout_height=\"80dp\"\n  app:stv_corner=\"40dp\"\n  app:stv_solid=\"#008673\"\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/圆形.png)\n\n  将一张普通的图片圆角化：\n\n  ```\n  app:stv_corner=\"15dp\"\n  app:stv_state_drawable=\"@drawable/avatar1\"\n  app:stv_drawableAsBackground=\"true\"\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/圆角图.png)\n\n  如果你希望实现圆形头像，或者圆角背景图的效果，那最适合不过了。\n\n## 4.3 控制每一个圆角\n  默认情况下，对 **SuperTextView** 设置`corner`会对控件的4个角都有效。当然也可以单独指定那些角需要圆角化。\n\n\n  在Xml\n\n  ```\n  //设置左上角圆角\n  app:stv_left_top_corner=\"true\"\n\n  //设置右上角圆角\n  app:stv_right_top_corner=\"true\"\n\n  //设置左下角圆角\n  app:stv_left_bottom_corner=\"true\"\n\n  //设置右下角圆角\n  app:stv_right_bottom_corner=\"true\"\n  ```\n\n  在Java中\n\n  ```\n  //设置左上角圆角\n  stv.setLeftTopCornerEnable( boolean);\n  // 设置左下角圆角\n  stv.setLeftBottomCornerEnable() boolean);\n  //设置右上角圆角\n  stv.setRightTopCornerEnable() boolean);\n  //设置右下角圆角\n  stv.setRightBottomCornerEnable() boolean);\n  ```\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照 2017-04-18 08.15.59.png)\n\n  需要注意的时候，一旦指定了任何一个圆角，`app:stv_corner` 将不再对4个角都有效了，你需要一个一个的去设置。\n\n## 4.4 边框\n\n  **SuperTextView** 可以通过简单的配置给控件加上边框，实际开发中十分的便捷。\n\n  ```\n  app:stv_solid=\"#78C3ED\"\n  app:stv_stroke_color=\"#5166ED\"\n  app:stv_stroke_width=\"5dp\"\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照 2017-04-18 08.15.42.png)\n\n  只需要设置`app:stv_stroke_width`大于0即开启了边框功能，如果没有设置`app:stv_stroke_color`，会有默认的黑色边框。边框的圆角化也会受到`corner`属性的影响。\n\n  边框的效果同样能够在展示图片的时候有效。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/圆形图片加边框.png)\n\n## 4.5 文字描边\n\n  使用 **SuperTextView** 能够很轻松的实现文字描边的功能。\n\n  ```\n  # 开启文字描边功能\n  app:stv_text_stroke=\"true\"\n  # 设置文字填充颜色\n  app:stv_text_fill_color=\"@color/white\"\n  # 设置文字描边颜色\n  app:stv_text_stroke_color=\"#461B50\"\n  # 设置文字描边宽度\n  app:stv_text_stroke_width=\"1dp\"\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/文字描边.png)\n\n  开启文字描边的功能后，文字颜色只能够通过`app:stv_text_fill_color`来设置，不要使用`android:textColor` ！\n\n  如果想要实现空心文字的效果，只需要将`app:stv_text_fill_color`设置为透明色，或者与背景色相同即可。\n\n  ![](http://ogemdlrap.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-18%20%E4%B8%8B%E5%8D%884.57.56.png)\n\n## 4.6 状态图\n\n  **SuperTextView** 自带状态图功能，即Drawable、Drawable2，能够展示两个状态图。\n\n  与系统的原生TextView的Drawable不同，**SuperTextView** 的状态图能够准确的控制位置和大小。\n\n  ```\n  # boolean类型。是否开启状态图1的功能。\n  app:stv_isShowState=\"true\"\n\n  # 设置状态图1的图片\n  app:stv_state_drawable=\"@drawable/emoji\"\n\n  # 设置状态图1的显示模式，决定了状态图1的基础位置\n  # 可选值如下：\n  # left、top、right、bottom、center(默认值)、\n  # leftTop、rightTop、leftBottom、rightBottom、\n  # fill(充满整个SuperTextView，此时会使设置drawable的大小失效)\n  app:stv_state_drawable_mode=\"center\"\n\n  # 设置状态图1的height\n  app:stv_state_drawable_height=\"30dp\"\n\n  # 设置状态图1的width\n  app:stv_state_drawable_width=\"30dp\"\n\n  # 设置状态图1相对于基础位置的左边的距离\n  app:stv_state_drawable_padding_left=\"10dp\"\n\n  # 设置状态图1相对于基础位置上边的距离\n  app:stv_state_drawable_padding_top=\"10dp\"\n\n\n  # boolean类型。是否开启状态图2的功能。\n  app:stv_isShow2State=\"true\"\n\n  # 设置状态图2的图片\n  app:stv_state_drawable2=\"@drawable/emoji\"\n\n  # 设置状态图2的显示模式，决定了状态图2的基础位置\n  # 可选值如下：\n  # left、top、right、bottom、center(默认值)、\n  # leftTop、rightTop、leftBottom、rightBottom、\n  # fill(充满整个SuperTextView，此时会使设置drawable的大小失效)\n  app:stv_state_drawable2_mode=\"center\"\n\n  # 设置状态图2的height\n  app:stv_state_drawable2_height=\"30dp\"\n\n  # 设置状态图2的width\n  app:stv_state_drawable2_width=\"30dp\"\n\n  # 设置状态图2相对于基础位置的左边的距离\n  app:stv_state_drawable2_padding_left=\"10dp\"\n\n  # 设置状态图2相对于基础位置上边的距离\n  app:stv_state_drawable2_padding_top=\"10dp\"\n\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照 2017-04-18 08.16.22.png)\n\n  上图是一些使用一个状态图实现的功能，可以看到，你可以轻松准确的控制状态图的位置和大小。\n\n  现在，看看两个状态图能够干什么。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照 2017-11-16 01.46.23.png)\n\n  - **示例一**\n\n  ```\n<com.coorchice.library.SuperTextView\nandroid:layout_width=\"100dp\"\nandroid:layout_height=\"100dp\"\n  ...\n  app:stv_corner=\"50dp\"\n  app:stv_state_drawable=\"@drawable/avatar1\"\n  # 将状态图1作为控件背景，以展示图片\n  app:stv_drawableAsBackground=\"true\"\n  # state_drawable2的配置由此开始\n  app:stv_isShowState2=\"true\"\n  app:stv_state_drawable2=\"@drawable/recousers\"\n  app:stv_state_drawable2_mode=\"rightTop\"\n  app:stv_state_drawable2_height=\"20dp\"\n  app:stv_state_drawable2_width=\"20dp\"\n  ...\n  />\n  ```\n\n  - **示例二**\n\n  ```\n<com.coorchice.library.SuperTextView\nandroid:layout_width=\"100dp\"\nandroid:layout_height=\"100dp\"\n  ...\n  # 背景图\n  android:background=\"@drawable/avatar7\"\n  # drawable1的配置由此开始\n  app:stv_isShowState=\"true\"\n  app:stv_state_drawable=\"@drawable/triangle\"\n  app:stv_state_drawable_mode=\"leftTop\"\n  app:stv_state_drawable_width=\"20dp\"\n  app:stv_state_drawable_height=\"20dp\"\n  # state_drawable2的配置由此开始\n  app:stv_isShowState2=\"true\"\n  app:stv_state_drawable2=\"@drawable/recousers\"\n  app:stv_state_drawable2_mode=\"rightTop\"\n  app:stv_state_drawable2_height=\"20dp\"\n  app:stv_state_drawable2_width=\"20dp\"\n  ...\n  />\n  ```\n\n## 4.7 渐变效果\n\n  **SuperTextView** 支持通过配置简单的属性实现渐变色效果。\n\n\n  ```\n  # 必须设置为true才能启用渐变功能。这意味着你可以灵活的控制这一功能。\n  app:stv_shaderEnable=\"true\"\n\n  # 设置起始颜色\n  app:stv_shaderStartColor=\"@color/main_blue\"\n\n  # 设置结尾颜色。\n  app:stv_shaderEndColor=\"@color/pink\"\n\n  # 设置渐变模式。如上图可见，一共支持4中模式：\n  # topTopBottom, bottomToTop, leftToRight, rightToLeft\n  app:stv_shaderMode=\"rightToLeft\"\n\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/渐变色.png)\n\n  这些属性也支持在Java中设置。\n\n  ```\n  // 开启渐变色功能\n  stv.setShaderEnable(true);\n  // 设置起始颜色\n  stv.setShaderStartColor(Color.BLUE);\n  // 设置结束颜色\n  stv.setShaderEndColor(Color.RED);\n  // 设置模式\n  stv.setShaderMode(SuperTextView.ShaderMode.LEFT_TO_RIGHT);\n  ```\n\n  渐变模式共有4种：\n\n  ```\n  public static enum ShaderMode {\n  /**\n  * 从上到下\n  */\n  TOP_TO_BOTTOM(0),\n  /**\n  * 从下到上\n  */\n  BOTTOM_TO_TOP(1),\n  /**\n  * 从左到右\n  */\n  LEFT_TO_RIGHT(2),\n  /**\n  * 从右到左\n  */\n  RIGHT_TO_LEFT(3);\n  }\n  ```\n\n## 4.8 按压变色\n\n  **SuperTextView** 能够快速的支持按压变色效果，就像下图一样，文字和背景色都支持。\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/按压变色.gif)\n\n\n  只需配置简单的属性：\n\n  ```\n  # 设置按压时的背景色\n  app:stv_pressBgColor=\"@color/red\"\n  # 设置按压时的文字颜色\n  app:stv_pressTextColor=\"@color/white\"\n  ```\n\n  在Java中：\n\n  ```\n  // 设置按压背景变色\n  stv.setPressBgColor(Color.RED);\n  // 取消按压文字变色\n  stv.setPressTextColor(-99);\n  ```\n\n  - 如果要取消按压背景变色，只需设置`PressBgColor`为透明色，`Color.TRANSPARENT`。\n  - 如果要取消按压文字变色，只需设置`PressTextColor`为-99。\n\n\n## 4.9 展示图片\n### 4.9.1 展示本地图片\n\n  前面有提到过，**SuperTextView** 可以通过状态图1变成一个`ImageView`。在设置好状态图1后，只需开启图片展示功能即可。\n\n  ```\n<com.coorchice.library.SuperTextView\n  ...\n  app:stv_state_drawable=\"@drawable/avatar1\"\n  # 开启图片展示功能\n  app:stv_drawableAsBackground=\"true\"\n  ...\n  />\n  ```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/展示本地图片.png)\n\n  需要注意的是，当将状态图1用于展示图片后，状态图1将不再具备状态图的功能，直到你关闭了图片展示功能，通过`stv.setDrawableAsBackground(false)`。\n\n### 4.9.2 展示网络图片\n\n  ```\n  stv.setUrlImage(url);\n  ```\n\n  在 **SuperTextView** 中，通过上面简单的一句即可将 **SuperTextView** 作为一个可以展示网络图片的ImageView。\n\n  调用上面的方法会默认开启 **SuperTextView** 的图片展示功能，因此，此时状态图1的状态图功能会被停用。你也可以通过以下方法，使得能够从网络中下载状态图1：\n\n  ```\n  stv.setUrlImage(url, false);\n  ```\n\n  第二个参数表示关闭图片展示功能。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/图片下载演示2.gif)\n\n  上图中，第一个例子是从网络中下载图片用作状态图，第二个例子是用作展示图片。\n\n  **SuperTextView** 为了保持依赖库的纯净和尽可能小的体积，并没有内置任何的图片加载框架。所以默认情况，将使用内置的一个简易图片引擎去下载图片，确保开发者能够正常使用展示网络图片的功能。\n\n  **SuperTextView** 具备兼容任意第三方图片下载框架的能力，建议开发者根据项目的具体情况，选择一个目前正在使用的图片加载框架，设置到 **SuperTextView** 中，以用来加载图片。 下面将通过几个的例子展示如何将现有的图片框架安装到 **SuperTextView** 中。\n\n  **第一步：实现图片引擎Engine**\n\n  在 **SuperTextView** 中，核心的图片加载引擎被抽象成接口 **Engine** ，开发者需要根据所用的图片框架，实现一个 **Engine**。\n\n  - **Glide图片加载框架**\n\n  ```\n  public class GlideEngine implements Engine {\n\n  private Context context;\n\n  public GlideEngine(Context context) {\n  this.context = context;\n  }\n\n  @Override\n  public void load(String url, final ImageEngine.Callback callback) {\n  Glide.with(context).load(url).into(new SimpleTarget<GlideDrawable>() {\n@Override\npublic void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n// 主要是通过callback返回Drawable对象给SuperTextView\ncallback.onCompleted(resource);\n}\n});\n}\n}\n```\n\n- **Picasso图片加载框架**\n\n```\npublic class PicassoEngine implements Engine {\n\nprivate Context context;\n\npublic PicassoEngine(Context context) {\nthis.context = context;\n}\n\n@Override\npublic void load(String url, final ImageEngine.Callback callback) {\nPicasso.with(context).load(url).into(new Target() {\n@Override\npublic void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\n// 主要是通过callback返回Drawable对象给SuperTextView\ncallback.onCompleted(new BitmapDrawable(Resources.getSystem(), bitmap));\n}\n\n@Override\npublic void onBitmapFailed(Drawable errorDrawable) {\n\n}\n\n@Override\npublic void onPrepareLoad(Drawable placeHolderDrawable) {\n\n}\n});\n}\n}\n```\n\n**第二步：安装图片引擎Engine**\n\n实现好 **Engine** 后，下一步就是要将其安装到 **SuperTextView** 中。\n\n建议可以在 Application的`onCreate()`中进行安装，这样当需要使用 **SuperTextView** 加载显示网络图片的时候，就能够用到三方图片框架了。\n\n```\npublic class STVApplication extends Application {\n\n@Override\npublic void onCreate() {\nsuper.onCreate();\n// 安装图片引擎\nImageEngine.install(new GlideEngine(this));\n// ImageEngine.install(new PicassoEngine(this));\n}\n}\n```\n\n一行代码，轻松安装。\n\n需要注意的是，任何时候，后安装的 **Engine** 实例总是会替换掉先前安装的 **Engine** 实例，即 **SuperTextView** 只允许全局存在一个 **Engine** 实例。\n\n只需简单两步，即可完成任意三方图片加载框架的适配。\n\n## 4.10 Adjuster\n\n**Adjuster** 被设计用来在 **SuperTextView** 的绘制过程中插入一些操作。这具有非常重要的意义。比如，实时的改变控件的状态，制作复杂的动画效果或者交互效果。\n\n```\npublic class YourAdjuster extends SuperTextView.Adjuster {\n\n@Override\nprotected void adjust(SuperTextView v, Canvas canvas) {\n//do your business。\n}\n\n@Override\npublic boolean onTouch(SuperTextView v, MotionEvent event) {\n//you can get the touch event.\n//If want to get a series of touch event, you must return true here.\n}\n\n}\n```\n\n通过重写 **Adjuster** 的 `adjust()` 方法，可以获取每次绘制过程中控件的`Canvas`对象，这意味着可以在绘制过程中从外部插入一些新的元素。当然，单单通过 **SuperTextView** 的实例修改其状态也是可以的。\n\n通过重写 **Adjuster** 的 `onTouch()` 方法，可以获取每一次控件的触摸事件，如果在该方法中返回true，表明该 **Adjuster** 需要获取后续的触摸事件，同时也会使得 **SuperTextView** 在整个控件树中回去拦截触摸事件。配合 `adjust()` 可以实现一些复杂的交互效果。值得注意的是，如果在 **SuperTextView** 之前，已经有控件拦截的触摸事件，那么其中的 **Adjuster** 将无法获取到触摸事件。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/SuperTextView.gif)\n\n当装载 **Adjuster** 到  **SuperTextView** 之后，需要调用以下方法来开启 **Adjuster** 的功能：\n\n```\nstv.setAutoAdjust(true);\n```\n\n当然，停止 **Adjuster** 只需要设置为false即可。\n\n### 4.10.1 如何装载Adjuster到SuperTextView\n\n```\nstv.addAdjuster(mAdjuster);\n```\n\n通过上面方法可以将一个 **Adjuster** 添加到 **SuperTextView** 中，最多支持添加3个 **Adjuster** 。超过3个的部分，将会始终覆盖最后一个 **Adjuster**。\n\n如果你想要移除一个 **Adjuster**，通过下面方法来实现。\n\n```\nstv.removeAdjuster(index)\n```\n\n### 4.10.2 设置Adjuster的层级\n\n前面有描述过 **SuperTextView** 的层级划分，**Adjuster** 可以通过配置，将其插入到指定的层级。\n\n```\nmAdjuster.setOpportunity(opportunity);\n```\n\n层级定义了如下几个枚举变量：\n\n```\npublic enum Opportunity {\n// 背景层和Drawable层之间\nBEFORE_DRAWABLE,\n// Drawable层和文字层之间\nBEFORE_TEXT,\n// 最上层\nAT_LAST\n}\n```\n\n分别对应如下几种场景，其中Emoji图是StateDrawable状态图，蓝色圆形就是一个 **Adjuster** ：\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/Opportunity.png)\n\n### 4.10.3 开启动画\n\n在 **SuperTextView** 中，可以通过以下方法触发 **SuperTextView** 的定时绘制：\n\n```\nstv.startAnim();\n```\n\n启动动画后， **SuperTextView** 将会以默认 **60fps** 的帧率进行刷新。配合 **Adjuster** 可以十分简单的实现动画效果。\n\n当 **SuperTextView** 离开屏幕后，将会自动停止正在播放的动画，当在次进入屏幕时，又会自动启动。所以开发者可以无需担心动画在后台消耗资源。\n\n当然，开发者也可以随时停止动画，通过调用以下方法：\n\n```\nstv.stopAnim();\n```\n\n通过以下方法，开发者可以随时修改 **SuperTextView** 的刷新频率：\n\n```\n// 每秒30帧\nstv.setFrameRate(30);\n```\n\n## 4.11 修改 StateDrawable 颜色\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/着色.png)  \n\n开发者可以轻松的改变一个图标的颜色，而不用再增加一个仅仅是颜色不同的图标到项目中。这项技术将为你的 Android 应用程序带来一次瘦身的机遇。  \n\n```\n# 修改 drawable 的颜色\napp:stv_state_drawable_tint=\"@color/gray\"\n\n# 修改 drawable2 的颜色\napp:stv_state_drawable2_tint=\"@color/red\"\n```\n\n只需要如此一行简单的代码，就能瞬间赋予一张图片千变万化的能力。想要任何色彩，当然是你说了算。而这一切的发生，无需再引进另外一张图片。\n\n在 Java 代码中，有与之对应 set/get 函数，让开发者可以在任何时候都能施展魔法，改变一张图片的色彩。\n\n\n## 4.12 修改 StateDrawable 旋转角度\n\nSuperTextView 被赋予了改变 StateDrawable 形态的能力。同样的一张图，开发者可以组合出无数种可能。  \n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/旋转.png)  \n\n只需简单的几行代码，你便可以随心所欲的变换任何一张图片。  \n\n```\n# 修改 drawable 的旋转角度\napp:stv_state_drawable_rotate=\"90\"\n\n# 修改 drawable2 的旋转角度\napp:stv_state_drawable2_rotate=\"90\"\n```\n\n无需复杂的代码，SuperTextView 一如既往的简洁、优雅。  \n\n同样，在 Java 代码中，也提供了对应的 set/get 函数。\n\n这项能力，可以有效的帮助开发者将 Android 应用的体积向着极致的方向压缩。\n\n\n## 4.13 设置文字渐变\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/文字渐变色.png)  \n\n这就是渐变文字！  \n\nSuperTextView 所提供的可能是目前为止实现渐变文字最简洁、优雅的解决方案。只需要简单的配置，就能实现酷炫的渐变文字效果。\n\n```\n# 是否启用渐变色文字\napp:stv_textShaderEnable=\"true\"\n\n# 设置文字的起始渐变色\napp:stv_textShaderStartColor=\"@color/red\"\n\n# 设置文字的结束渐变色\napp:stv_textShaderEndColor=\"@color/yellow\"\n\n# 设置文字的渐变的模式\n# leftToRight：左 -> 右\n# rightToLeft：右 -> 左\n# topToBottom：上 -> 下\n# bottomToTop：下 -> 上\napp:stv_textShaderMode=\"leftToRight\"\n```\n\n这些属性也在 Java 中开放了 set/get 接口，便于开发者随时动态的修改它们。\n\n\n---\n\n> - 如果你喜欢 [**SuperTextView**](https://github.com/chenBingX/SuperTextView)，希望能到 [**Github**](https://github.com/chenBingX/SuperTextView) 点个 **star** [🌟](https://github.com/chenBingX/SuperTextView) 哦！\n\n> - **CoorChice** 会不定期的在博客平台分享干货，快进入 [CoorChice的【个人主页】](https://juejin.im/user/57fc43b67db2a200595ffd94) 关注一波吧。\n\n**文档结束。更多例子可以Clone项目到本地学习，祝你使用愉快！**\n\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 48.6015625,
          "content": "> ### [GitAds](https://tracking.gitads.io/?repo=chenBingX/SuperTextView)\n> <a href=\"https://tracking.gitads.io/?repo=chenBingX/SuperTextView\"> <img src=\"https://images.gitads.io/chenBingX/SuperTextView\" alt=\"GitAds\"/> </a>\n\n\n# Hello, Developer！Welcome to use SuperTextView\n\n\n[![](https://jitpack.io/v/chenbingx/supertextview.svg)](https://jitpack.io/#chenbingx/supertextview) [![](https://img.shields.io/badge/SuperTextView-v3.2.6-orange.svg)](https://github.com/chenBingX/SuperTextView)  [![](https://img.shields.io/badge/SuperTextView-v3.2.6.64-orange.svg)](https://github.com/chenBingX/SuperTextView) [![](https://img.shields.io/badge/build-passing-brightgreen.svg)](https://github.com/chenBingX/SuperTextView) [![](https://img.shields.io/badge/API-19+-yellowgreen.svg)](https://android-arsenal.com/api?level=14#l14) [![](https://img.shields.io/badge/License-Apache--2.0-blueviolet.svg)](https://github.com/chenBingX/SuperTextView#license) [![](https://img.shields.io/badge/Author-CoorChice-blue.svg)](https://weibo.com/5406092281/profile?topnav=1&wvr=6) [![](https://img.shields.io/badge/QQ--Group-775951525-ff5722.svg)](https://jq.qq.com/?_wv=1027&k=5DIRlPm)\n\n\n# **English** | [**中文**](https://github.com/chenBingX/SuperTextView/blob/master/README_CN.md)\n\n<img src=\"https://gw.alicdn.com/tfs/TB1Ijt0c7cx_u4jSZFlXXXnUFXa-1014-1014.png\" width=200 height=200 align=right alt=\"SuperTextView\">\n\nHi，Developer，Welcome to use **SuperTextView** ！\n\nThank you and tens of thousands of Android developers for  your trust in me 😘。\n\n**SuperTextView** is different in that it is just a simple view element, but not just a view.\n\nIt's alive and dynamic, with powerful embedded logic that continues to provide you with rich but exceptionally simple development support.\n\n**SuperTextView** saves you from complex rendering logic. A simple **API** method call, the dazzling rendering effects are instantly available.\n\nYou just enjoy the amazing visual effects you have written, and the rest will be handed over to **SuperTextView**.\n\n# Feature\n\n- set rounded corners for **View**\n- supports separate control of each rounded corner\n- add border for **View**\n- add a stroke or hollow effect to the text\n- support up to 2 **Drawable** to display\n- accurately control the size and position of **Drawable**\n- support gradient background\n- touch discoloration\n- display pictures, including the net pictures\n- Supports setting network image directly in XML\n- set rounded corners for pictures\n- add borders to pictures\n-  **Adjuster** module can insert operation\n- change the color of **Drawable**\n- change the rotation of **Drawable**\n- support text gradient effect\n- support for setting click events separately for the **Drawable** zone\n- support **Gif** display\n- support for adding borders to **Gif**, as well as rounded corners\n- support **Gif** pause/play, modify frame rate\n- support for extracting the specified **Gif** frame\n- ...\n\n# Demo\n\n\n[ 📲 click here (or scan the qr code below) to download the **Demo**](https://raw.githubusercontent.com/chenBingX/img/master/%E5%85%B6%E5%AE%83%E6%96%87%E4%BB%B6/STVDemo.apk)\n\n<img src=\"https://gw.alicdn.com/tfs/TB1XX4.P1L2gK0jSZPhXXahvXXa-150-150.png\" width=150 height=150 align=center alt=\"SuperTextView\">\n\n|||||\n|:---:|:---:|:---:|:---:|\n|![](https://gw.alicdn.com/tfs/TB1Nex9PVY7gK0jSZKzXXaikpXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1SWbzdMgP7K4jSZFqXXamhVXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1qmScP1H2gK0jSZJnXXaT1FXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1_HmjP7T2gK0jSZFkXXcIQFXa-316-641.gif)|\n\n\n# Portal Area\n\n\n- [【Portal】：《SuperTextView Development Reference Document》- You can learn how to use SuperTextView to build your application more efficiently](https://github.com/chenBingX/SuperTextView/wiki)\n\n- [【Portal】：《SuperTextView API Document》— You can view all of the SuperTextView's available apis and properties](https://chenbingx.github.io/SuperTextView/SuperTextView-doc/index.html)\n\n\n# Usage\n\n\nAdd it in you build.gradle:\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ndependencies {\n    compile 'com.github.chenBingX:SuperTextView:VERSION_CODE'\n}\n```\n\n[The version code of the latest release can be found here.](https://github.com/chenBingX/SuperTextView/releases)\n\n# Special Note💡\n\n- **v3.2.6** support：`armeabi-v7a`\n\n- **v3.2.6.64** support：`armeabi-v7a`、`arm64-v8a`\n\n- **v3.2.6.99** support：`armeabi-v7a`、`arm64-v8a`、`x86`\n\n- ⚠️Attention: **`proguard-rules.pro`** please add `-keep class com.coorchice.library.gifdecoder.JNI { *; }`\n\n# Update Log\n\n## v3.2.6\n\n- 【New】Support for setting 'Network Image' in XML for StateDrawable and StateDrawable2\n\n> In XML, use a 'Network Image' as a background image\n\n![](https://gw.alicdn.com/imgextra/i1/O1CN01Pw9Z0U21Ie9BK88T9_!!6000000006962-0-tps-730-344.jpg)\n\n```html\n<com.coorchice.library.SuperTextView\n  android:id=\"@+id/stv_40\"\n  android:layout_width=\"150dp\"\n  android:layout_height=\"150dp\"\n  android:layout_gravity=\"center_horizontal\"\n  android:layout_marginTop=\"16dp\"\n  android:gravity=\"bottom|center\"\n  android:paddingBottom=\"1dp\"\n  android:text=\"网络背景图\"\n  android:textColor=\"#000\"\n  android:textSize=\"14sp\"\n  app:stv_corner=\"10dp\"\n  app:stv_isShowState=\"true\"\n  app:stv_drawableAsBackground=\"true\"\n  app:stv_solid=\"#f1f1f1\"\n  app:stv_state_drawable=\"https://gw.alicdn.com/imgextra/i3/O1CN01suhAFr1cXQX49D2xp_!!6000000003610-0-tps-468-466.jpg\" />\n```\n\n> In XML, set the 'Network Image' for StateDrawable2\n\n![](https://gw.alicdn.com/imgextra/i4/O1CN01j3XdIb1LHXK50WtRd_!!6000000001274-0-tps-736-236.jpg)\n\n```html\n<com.coorchice.library.SuperTextView\n  android:id=\"@+id/stv_41\"\n  android:layout_width=\"350dp\"\n  android:layout_height=\"100dp\"\n  android:layout_gravity=\"center_horizontal\"\n  android:layout_marginTop=\"30dp\"\n  android:paddingLeft=\"116dp\"\n  android:paddingTop=\"30dp\"\n  android:text=\"StateDrawable2 网络图\"\n  android:textColor=\"@color/black\"\n  android:textSize=\"14sp\"\n  app:stv_corner=\"50dp\"\n  app:stv_isShowState2=\"true\"\n  app:stv_left_bottom_corner=\"true\"\n  app:stv_left_top_corner=\"true\"\n  app:stv_solid=\"#f1f1f1\"\n  app:stv_state_drawable2=\"https://gw.alicdn.com/imgextra/i3/O1CN01XPmcmt1vJfKcQ8o6O_!!6000000006152-0-tps-500-500.jpg\"\n  app:stv_state_drawable2_height=\"100dp\"\n  app:stv_state_drawable2_mode=\"left\"\n  app:stv_state_drawable2_width=\"100dp\"/>\n```\n\n## v3.2.5\n\n- 【fix】 `stv_pressBgColor` invalid\n- 【fix】setDrawablePaddingLeft() not work\n- 【OP】Clear log\n- 【New】Support cache gif by the GifCache\n- 【OP】Optimize Gif rendering efficiency\n\n## v3.2.4\n\n- Fix Drawable directly write hexadecimal color value, does not display the problem\n\n- Drawable Support for specified layer\n\n    ```\n    <com.coorchice.library.SuperTextView\n        ...\n        // Configuring the level of Drawable1\n        app:stv_state_drawable_layer=\"beforeText\"\n        // Configuring the level of Drawable2\n        app:stv_state_drawable2_layer=\"afterText\"\n        ...\n        />\n    ```\n\n    Support mode:\n\n        - `beforeText`，Before the text\n        - `afterText`，After the text\n\n    **Java** has corresponding functions to support dynamic configuration.\n\n- Scale mode scaleType switch invalidation problem when fixing Drawable1 as background image\n\n## v3.2.3\n\n- Optimize text strokes\n\n- Optimize the display of transparent gif\n\n\n## v3.2.1 - Great，SuperTextView\n\nIn the new `v3.2.0` version, **SuperTextView** redefines itself again. Developers, take a look at the surprises prepared for you!🎉🎉🎉\n\n### this is... Gif ？\n\nThis time, **SuperTextView** brings powerful **Gif** driver support to developers.\n\nIf in the past, you have been upset about how to display a **Gif** chart on the Android platform, or you are stuck in the performance abyss of some three-party **Gif** libraries. But now, **SuperTextView** will completely change this situation.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo1.gif)\n\n**Gif** and **SuperTextView** are natural and natural, so you can display a **Gif** diagram in the most familiar and natural way. It's as simple as showing a normal picture as usual.\n\nThanks to the ultra-high performance of **c/c++** and the precise operation of memory. **SuperTextView** Customized the powerful **Gif** driver engine for mobile platforms by using **c/c++**.\n\n**SuperTextView**'s **Gif** engine, which can accurately manipulate image pixel memory, only update local pixel memory when frame refresh of **Gif** image, which makes **Gif** image rendering efficiency Got a qualitative leap.\n\nThrough asynchronous off-screen rendering technology, **SuperTextView** can ensure smooth and smooth application interface and sensitive response speed even when displaying large **Gif** images.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo2.gif)\n\n> 💡In the above Demo, using **SuperTextView** shows a **Gif** image with a **265** frame image, but the user interface is still very smooth.\n\n#### Display Gif super simple\n\nDisplay a **Gif** diagram in **SuperTextView**, super easy!\n\nYou can configure it directly in the **XML** layout document or add it in your code.\n\n##### Configuring **Gif** in **XML**\n\n```\n<com.coorchice.library.SuperTextView\n    android:id=\"@+id/stv_1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"150dp\"\n    app:stv_state_drawable=\"@drawable/gif_1\" />\n```\n\nYou can display the **Gif** diagram for the **SuperTextView** configuration just like configuring a normal image.\n\n##### Configuring Gif in your code\n\n```\nstv_1 = (SuperTextView) findViewById(R.id.stv_1);\nstv_1.setDrawable(R.drawable.gif_1);\n```\n\nIt's that simple and natural, **SuperTextView** allows developers to display a **Gif** diagram without any awareness.\n\nIn the kernel logic of **SuperTextView**, **SuperTextView** intelligently classifies the normal graph and **Gif** graph, and then processes and optimizes accordingly.\n\n##### Display network **Gif** is as simple\n\nWhat if your **Gif** is not local but in the cloud?\n\nYou don't have to worry about it!Everything is handed over to **SuperTextView**.\n\n```\nstv_1 = (SuperTextView) findViewById(R.id.stv_1);\nstv_1.setUrlImage(\"http://example.com/images/example.gif\");\n```\n\nWith just one line of code, **SuperTextView** will assist you in the background to load the **Gif** image and then process the rendering to the screen.\n\n> 💡In fact, the **Drawable1** and **Drawable2** image display bits of **SuperTextView** can be used to display **Gif** images. In short, everything is what you are familiar with.\n\n\n#### You can control more\n\n**SuperTextView** not only display **Gif**, but also you can control more details.\n\n##### Play / Pause\n\nYou can control **Gif** , play, or pause at any time.\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // Get the GifDrawable first\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // Play\n  gifDrawable.play();\n\n  // Pause\n  gifDrawable.stop();\n}\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo3.gif)\n\n##### Jump/Get the specified frame\n\nIn **SuperTextView**, you can always reach the image of the frame you specify, as well as the image that can be extracted to the specified frame.\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // Get the GifDrawable first\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // Jump to the specified frame\n  gifDrawable.gotoFrame(pre);\n\n  // Get the specified frame\n  Bitmap frame = gifDrawable.getFrame(i);\n}\n```\n> 💡Since **SuperTextView** can support local incremental rendering, when your **Gif** supports this rendering mode, it means you may need to enable ** strict mode by calling `gifDrawable.setStrict(true)` *, to ensure that the frame jump or frame extraction image is correct. This can take some time, so you should try to do the operations under ** strict mode** in an asynchronous thread.\n\n##### Fast, follow your heart\n\n**SuperTextView** allows you to modify the playback rate of the **Gif** chart at will.\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // Get the GifDrawable first\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // Set the frame playback interval, 20 ms\n  gifDrawable.setFrameDuration(20);\n}\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo4.gif)\n\n##### You can know all\n\nWith **SuperTextView** you can get a glimpse of the information of a **Gif**.\n\n- Get **Gif** size\n\n    ```\n    // Get width\n    int width = gifDrawable.getWidth();\n\n    // Get height\n    int height = gifDrawable.getHeight();\n    ```\n\n- Get **Gif** frame information\n\n    ```\n    // Get the number of frames\n    int frameCount = gifDrawable.getFrameCount();\n\n    // Get the current frame interval\n    int frameDuration = gifDrawable.getFrameDuration();\n\n    // Get the current render to that frame\n    int framePotision = gifDrawable.getCurrentFrame();\n\n    // Whether it is playing\n    boolean isPlaying = gifDrawable.isPlaying();\n    ```\n\n#### More brilliant Gif\n\n** SuperTextView ** and ** Gif ** rendered by virtue of seamless integration, after ** Drawable1 ** and ** Drawable2 ** all configuration items in the display ** Gif ** Figure, too, can enter into force.\n\n##### Gif as a normal Drawable\n    app:stv_state_drawable_rotate=\"90\"\n\nLet's take a look at what's going on with a **Gif** in the original **Drawable** position.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"50dp\"\n    android:paddingLeft=\"62dp\"\n    android:paddingRight=\"10dp\"\n    android:text=\"小火箭发射了！啦啦啦啦啦啦...\"\n    android:textColor=\"#ffffff\"\n    android:textSize=\"22dp\"\n    app:stv_corner=\"6dp\"\n    app:stv_isShowState=\"true\"\n    app:stv_solid=\"#0D1831\"\n\n    // set Gif\n    app:stv_state_drawable=\"@drawable/gif_1\"\n\n    // set Gif height\n    app:stv_state_drawable_height=\"40dp\"\n\n    // set Gif width\n    app:stv_state_drawable_width=\"40dp\"\n\n    // set Gif to left\n    app:stv_state_drawable_mode=\"left\"\n\n    // set Gif left spacing\n    app:stv_state_drawable_padding_left=\"10dp\"/>\n```\n\nThe effect is...\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo5.gif)\n\n\nNow let's try **Gif** to rotate 90 degrees.\n\n```\n<com.coorchice.library.SuperTextView\n    ...\n    // set Gif to rotate 90 degrees\n    app:stv_state_drawable_rotate=\"90\"\n    ...\n/>\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo6.gif)\n\n\n##### Fillet the Gif\n\n**SuperTextView** incredible implementation **Gif** The fillet of the graph opens a new door for developers.\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo7.gif)\n\n\nHowever, the realization of this effect is amazingly simple.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"185dp\"\n    android:layout_height=\"138.75dp\"\n    android:layout_gravity=\"center_horizontal\"\n    app:stv_corner=\"20dp\"\n\n    // set Gif as the control background\n    app:stv_drawableAsBackground=\"true\"\n\n    app:stv_scaleType=\"fitCenter\"\n\n    // Configuring Gif\n    app:stv_state_drawable=\"@drawable/gif_1\" />\n```\n\n##### Add a border to the Gif\n\nDevelopers can even easily add a border to a **Gif**.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"350dp\"\n    android:layout_height=\"148.4dp\"\n    android:layout_gravity=\"center_horizontal\"\n    android:gravity=\"center\"\n\n    // add the text will be more stylish\n    android:text=\"SuperTextView\"\n\n    android:textSize=\"36dp\"\n    android:textStyle=\"bold\"\n    android:visibility=\"invisible\"\n    app:stv_corner=\"6dp\"\n    app:stv_drawableAsBackground=\"true\"\n    app:stv_isShowState=\"true\"\n    app:stv_scaleType=\"center\"\n    // Set the border color\n    app:stv_stroke_color=\"@color/opacity_8_gray_4c\n\n    // Set the border width\n    app:stv_stroke_width=\"5dp\"\n\n    app:stv_text_fill_color=\"#ccffffff\"\n    app:stv_text_stroke=\"true\"\n    app:stv_text_stroke_color=\"#cc000000\"\n    app:stv_text_stroke_width=\"2dp\"\n\n    // Configuring Gif\n    app:stv_state_drawable=\"@drawable/gif_1\"/>\n```\n\nThe effect is instantly presented...\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo8.gif)\n\n\n##### Easily implement dynamic avatars\n\nIn the past, some cool dynamics often stopped at the complexity and cost of implementation. And **SuperTextView** brings you more possibilities, and your inspiration can be free.\n\nFor example, the implementation of dynamic avatars will be simpler than ever.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"80dp\"\n    android:layout_height=\"80dp\"\n    android:layout_marginLeft=\"30dp\"\n    app:stv_corner=\"40dp\"\n\n    // Set as background image\n    app:stv_drawableAsBackground=\"true\"\n\n    // Configure Gif avatar\n    app:stv_state_drawable=\"@drawable/gif_avatar\"\n\n    // Add border\n    app:stv_stroke_color=\"#ffffff\"\n    app:stv_stroke_width=\"3dp\"\n    />\n```\n\nIn the code, you can configure a web dynamic avatar directly.\n\n```\nstv.setUrlImage(\"http://gif_avatar.gif\");\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo9.gif)\n\n### More surprises\n\n#### Both Drawables support clicks!\n\nIn the new version of **SuperTextView**, **Drawable1** and **Drawable2** are given new capabilities - support for precise clicks.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo10.gif)\n\n**SuperTextView** By monitoring the location where the click action occurs, the click action can be accurately located in the area where it occurred (**Drawable1**, **Drawable2** or **Other areas**), then trigger accordingly Listening callbacks.\n\nYou can set the click action listener on **Drawable** for **SuperTextView** to make an accurate response when an action occurs.\n\n```\nstv.setOnDrawableClickedListener(new SuperTextView.OnDrawableClickedListener() {\n    @Override\n    public void onDrawable1Clicked(SuperTextView stv) {\n        // Drawable1 clicked，do something...\n    }\n    @Override\n    public void onDrawable2Clicked(SuperTextView stv) {\n        // Drawable2 clicked，do something...\n    }\n});\n\nstv.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // Non-Drawable area is clicked, do something...\n    }\n});\n```\n\n#### Background image zoom mode support\n\nNow, when you use **Drawable1** as the background image, you can configure different zoom modes for it to achieve your favorite effect.\n\n```\nstv.setScaleType(ScaleType.CENTER);\n```\n\n**SuperTextView** provides developers with up to 3 zoom modes:\n\n- `ScaleType.FIT_XY`\n\n    Stretch the picture to tile.\n\n- `ScaleType.FIT_CENTER`\n\n    Center the image adaptively.\n\n- `ScaleType.CENTER`\n\n    Crop the picture centered. Defaults.\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/stv_scaletype.png)\n\n\n#### Other updates\n\n- In the **XML** layout document, **Drawable1** and **Drawable2** now support direct setting **color** or **ShapeDrawable**.\n\n    ```\n    // Circle_f9ad36 is a shape file written in xml\n    app:stv_state_drawable=\"@drawable/circle_f9ad36\"\n\n    // Use solid color as Drawable\n    app:stv_state_drawable=\"#000000\"\n    ```\n\n- ⚠️ The minimum supported version **API** is promoted to **19**.\n\n- Rendering performance is at least **30%** better than in the past.\n\n- Upgrade the default image loading engine to support smart caching. Maybe now, you don't have to introduce a third-party image loading library.\n\n## v3.1.1 - Sincerity works，SuperTextView\n\n**SuperTextView** was built to help Android developers develop Android applications more efficiently, conveniently, and elegantly.\n\nNow the bona fides have escalated again. The new **SuperTextView** will open up more possibilities to Android developers, and, as always, **SuperTextView** will bring more efficient features.\n\n### 1 Amazing coloring\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/着色.png)\n\nThis update to **SuperTextView** adds a magical and powerful coloring capability to **StateDrawable**. Developers can easily change the color of an icon without having to add a different color icon to the project. This technology will give your Android applications a chance to slim down.\n\n```\n# modify the drawable color\napp:stv_state_drawable_tint=\"@color/gray\"\n\n# modify the drawable2 color\napp:stv_state_drawable2_tint=\"@color/red\"\n```\n\nWith such a simple line of code, you can instantly give an picture the power to change. Any color you want is up to you, of course. All this happened without the need to introduce another picture.\n\nIn the Java code, there is a set / get function corresponding to it, so that developers can cast magic at any time, changing the color of a picture.\n\n### 2 Seventy-two Metamorphoses;\n\n\nStateDrawable's enhancements go beyond color transformations. SuperTextView has been given the ability to change StateDrawable's shape. With the same picture, developers can combine an infinite number of possibilities.\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/旋转.png)\n\nWith a few lines of code, you can transform any picture as you wish.\n\n```\n# Modify the drawable's rotation\napp:stv_state_drawable_rotate=\"90\"\n\n# Modify the drawable's rotation\napp:stv_state_drawable2_rotate=\"90\"\n```\n\nNo need for complicated code, **SuperTextView** is as simple and elegant as ever.\n\nSimilarly, in Java code, the corresponding set/get function is also provided.\n\nThis ability can effectively help developers compress the volume of Android applications to the extreme.\n\n\n### 3 Wonderful is far more than this\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/文字渐变色.png)\n\nThis is the gradient text!\n\nWhat **SuperTextView** offers is probably the simplest and elegant solution for implementing gradient text so far. With a simple configuration, you can achieve cool gradient text effects.\n\n```\n# Whether to enable gradient text\napp:stv_textShaderEnable=\"true\"\n\n# Set the starting color of the text\napp:stv_textShaderStartColor=\"@color/red\"\n\n# Set the ending color of the text\napp:stv_textShaderEndColor=\"@color/yellow\"\n\n# Set the gradient mode of the text\n# leftToRight：left -> right\n# rightToLeft：right -> left\n# topToBottom：top -> bottom\n# bottomToTop：bottom -> top\napp:stv_textShaderMode=\"leftToRight\"\n```\n\nThese properties also provide the set/get interface in Java, making it easy for developers to modify them at any time.\n\n\n### 4 New apis have been opened\n\n#### 4.1 Adjuster adds onAttach, onDetach\n\nAdjuster added two new functions:\n\n-  `onAttach()` : when Adjuster is set to a **SuperTextView** will be invoked.\n-  `onDetach() ` : when Adjuster is removed from a **SuperTextView** will be invoked.\n\nBy rewriting these two functions in Adjuster, the developer can perform state registration, initialization, unregistration, resource release and other operations at the right time.\n\n```\npublic class MyAdjuster extends SuperTextView.Adjuster{\n\n    @Override\n    protected void adjust(SuperTextView superTextView, Canvas canvas) {\n\n    }\n\n    @Override\n    public void onAttach(SuperTextView stv) {\n      // will be called when the modifier is added to a SuperTextView\n    }\n\n    @Override\n    public void onDetach(SuperTextView stv) {\n      // will be called when the Adjuster is removed from SuperTextView\n    }\n}\n```\n\n#### 4.2 Provide getAdjusterList() function\n\nThis function allows the developer to get all the **Adjusters** in a **SuperTextView**. If there is no **Adjuster** in the **SuperTextView**, it will return null.\n\n### 5 ⚠️You must take these changes seriously\n\n#### 5.1 Attribute with the stv_ prefix\n\nAll properties of **SuperTextView** are now prefixed with `stv_`.\n\nThis avoids conflicts with the property names that **SuperTextView** may generate when other third-party libraries are introduced by the developer.\n\nIf the developer is currently using a previous version of **SuperTextView**, then after upgrading to the new version, you need to prefix the attributes in all xml with the `stv_` prefix.\n\n```\napp:corner=\"10dp\"\n```\n\ncorner is the name of the attribute in the old version. After upgrading to the new version, you need to add the `stv_` prefix to the front and become `stv_corner`.\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/replace.png)\n\nIf the developer is using **AndroidStudio**, open the bulk replacement dialog from `Edit > Find > Replace` and follow the instructions below.\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/属性替换.png)\n\nIf only **SuperTextView** uses the same namespace (such as `app`) in the developer's project, then fortunately, you can simply replace `app:` with `app:stv_`.\n\n#### 5.2 setAdjuster(Adjuster) has been removed\n\nStarting with **SuperTextView** v2.0, the `setAdjuster(Adjuster)` function is marked for the state to be removed, and the new function `addAdjuster(Adjuster)` is added instead.\n\nIn the new version, the `setAdjuster(Adjuster)` function will be officially removed. If the developer has used this method before, please change it to `addAdjuster(Adjuster)`.\n\n\n\n\n### 6 How to get started SuperTextView v3.1.1\n```\ndependencies {\n\t compile 'com.github.chenBingX:SuperTextView:v3.1.1'\n}\n```\n\n\n\n\n\n## v3.0 - Your long-awaited SuperTextView\nToday, **SuperTextView** has a range of common features such as fillets, borders, strokes, press discoloration, multi-state diagrams, fillet plots, versatile **Adjuster**, loading the net picture, and more. Thanks to this, developers can easily achieve a variety of very cumbersome effects, save a lot of development time, effectively reduce the complexity of the page, reduce project maintenance costs.\n\nWrite the code, it should be so pleasing!\n\n### 1. Linked Cloud SuperTextView\n\nAs early as a few months ago, many developers have suggested to **CoorChice** whether it is possible to have **SuperTextView** with the ability to load net picture. In fact, this is also **CoorChice** has been considered a long time ago, but in the early days of **SuperTextView**, perfecting its core functions is still the primary goal, so it has not been involved in image-related functions.\n\nUntil the last big version, **SuperTextView** v2.0, **CoorChie** tried to add the picture display function. This has enabled the scope of the **SuperTextView** to be expanded, as well as the ability to add strokes, rounded corners, and state diagrams to pictures. Related documentation can be found at the following link:\n\n[【Hello， SuperTextView】 - https://www.jianshu.com/p/1b91e11e441d](https://www.jianshu.com/p/1b91e11e441d)\n\nThis time, I got a good response from the developers. Everyone is looking forward to using **SuperTextView** to display and process picture. After the last release, developers seem to be more interested in a **SuperTextView** that can display the net picture.\n\nSo, now, the long-awaited **SuperTextView** is coming back!\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/图片下载演示2.gif)\n\n#### 1.1 Load a net picture\nTo display a net picture, you only need the following code in **SuperTextView**:\n\n```\nSuperTextView stv_1 = (SuperTextView) findViewById(R.id.stv_1);\n// fill in the picture Url\nstv_1.setUrlImage(url);\n```\n\nThe effect is the same as the second example of displaying an avatar in the image above.\n\nIf you want to display the net picture as a StateDrawable of **SuperTextView**, it's fine.\n\n```\n// fill in the picture Url\nstv_1.setUrlImage(url, false);\n```\n\nThe second parameter is **false** to indicate that the net picture will not be filled with the entire **SuperTextView** as a background, but as a state diagram. Of course, everything about the state diagram will be used here. As in the first example above, the entire layout, including pictures, text, and background, is processed in a **SuperTextView**, and pictures downloaded from the net are placed as **StateDrawable** in the place.\n\n#### 1.2 Image engine in SuperTextView\n**SuperTextView** In order to keep the library dependent on the purity and the smallest possible size, there is no built-in image load framework. So by default, a simple image engine built-in will be used to download pictures, to ensure that developers can use the ability to display the net picture.\n\nHowever, **CoorChice** still recommends that developers choose a image loading framework that is currently in use, depending on the project, and set it to **SuperTextView** to load the picture. **SuperTextView** has the ability to adapt to any image load framework. Below **CoorChice** will show you how to install an existing image framework into **SuperTextView** with the Glide and the Picasso examples.\n\n##### 1.2.1 Implementing image engine\nIn **SuperTextView**, the core image loading engine is abstracted into the interface **Engine**, and the developer needs to implement a **Engine** depending on the image frame used.\n\n- **the Glide Image load framework**\n\n```\npublic class GlideEngine implements Engine {\n\n  private Context context;\n\n  public GlideEngine(Context context) {\n        this.context = context;\n  }\n\n  @Override\n  public void load(String url, final ImageEngine.Callback callback) {\n        Glide.with(context).load(url).into(new SimpleTarget<GlideDrawable>() {\n        @Override\n        public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n            // mainly through the callback return Drawable object to SuperTextView\n            callback.onCompleted(resource);\n        }\n        });\n    }\n}\n```\n\n- **the Picasso Image load framework**\n\n```\npublic class PicassoEngine implements Engine {\n\n  private Context context;\n\n  public PicassoEngine(Context context) {\n        this.context = context;\n  }\n\n  @Override\n  public void load(String url, final ImageEngine.Callback callback) {\n        Picasso.with(context).load(url).into(new Target() {\n        @Override\n        public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\n            // mainly through the callback return Drawable object to SuperTextView\n            callback.onCompleted(new BitmapDrawable(Resources.getSystem(), bitmap));\n        }\n\n        @Override\n        public void onBitmapFailed(Drawable errorDrawable) {\n\n        }\n\n        @Override\n        public void onPrepareLoad(Drawable placeHolderDrawable) {\n\n        }\n    });\n  }\n}\n```\n\n##### 1.2.2 Install Image Engine\nAfter implementing **Engine**, the next step is to install it into **SuperTextView**.\n\n**CoorChice** it is recommended to install in the `onCreate()` of the application, so that when you need to use **SuperTextView** to load and display the net picture, you can use the three-party image load framwork.\n\n```\npublic class STVApplication extends Application {\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    // 安装图片引擎\n    ImageEngine.install(new GlideEngine(this));\n    // ImageEngine.install(new PicassoEngine(this));\n  }\n}\n```\n\nOne line of code for easy installation.\n\nIt should be noted that at any time, the post-installed **Engine** instance will always replace the previously installed **Engine** instance, ie **SuperTextView** only allows one **Engine** instance to exist globally.\n\nNow you can have **SuperTextView** load the picture using the specified three-party image load framework.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/图片下载列表演示.gif)\n\n\n### 2. How to get started SuperTextView v3.0\n```\n\tdependencies {\n\t   compile 'com.github.chenBingX:SuperTextView:v3.0.0'\n\t}\n```\n### 3. Other\n- Fix an animation problem\n- Some optimization\n\n\n\n## v2.0 - The future, from now on\n**All along, CoorChice has a vision and expects to be able to create such a control: it can meet most of your development needs, display text, pictures, geometry, animation, state, so that you can use a control to be efficient Complete most of the development work. It is so powerful, as if it is mentally minded, accepting your input, and presenting a stunning picture according to your mind. With the arrival of 【SuperTextView v2.0】, we are one step closer to this idea. Now, come and see 【SuperTextView v2.0】!**\n\n![SuperTextView v2.0](https://raw.githubusercontent.com/chenBingX/img/master/stv/stv_2.0_2.png)\n\n### 1 Now, Picture\nIn 【SuperTextView v2.0】, support for image display has been added. But it's not just about displaying pictures, it's also smart to crop the image to your desired shape based on your input.\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-11-16%2001.51.33.png)\n\nAdd a rounded corner to the picture, add a border, or turn it directly into a circle. All you need to do is set a few simple properties that are instantly visible in front of your eyes.\n\n#### 1.1 Display Picture\nHow to use **SuperTextView** to display a picture?\n\nJust add the following two lines of code to the xml.\n\n```\n<com.coorchice.library.SuperTextView\n    ...\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\nIf you are a loyal user of `SuperTextView`, you will find that the original `state_drawable` can now be used to display a picture.\n\n#### 1.2 Fill the picture with rounded corners\nNow that your picture is in front of you, maybe you want to do something different about it, for example, add a rounded corner, or directly become a circle? No problem, `SuperTextView` is now fully qualified for this kind of work.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"15dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\nSo Easy! On the basis of the original you only need to set a reasonable the `corner`.\n\n#### 1.3 Maybe you still want a border\nSometimes you may need to use a border to wrap your picture, as in the example above. That's right, this is definitely within the scope of the `SuperTextView` capability.\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"50dp\"\n    app:stv_stroke_color=\"#F4E187\"\n    app:stv_stroke_width=\"4dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\n`app:stv_stroke_color` controls the color of the border, and `app:stv_stroke_width` controls the width of the border. Everything is so smooth, a intelligent control should be like this, right?\n\n\n### 2 Second StateDrawable\nIn the face of complex changes in demand, 【SuperTextView】gave birth to a second drawable to deal with  this complexity.\n\n`state_drawable2` .\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-11-16%2001.46.23.png)\n\nNow, CoorChice will show you how the two effects in the above picture are implemented.\n\n- **eg. 1**\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"50dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    // The configuration of state_drawable2 starts here\n    app:stv_isShowState2=\"true\"\n    app:stv_state_drawable2=\"@drawable/recousers\"\n    app:stv_state_drawable2_mode=\"rightTop\"\n    app:stv_state_drawable2_height=\"20dp\"\n    app:stv_state_drawable2_width=\"20dp\"\n    ...\n />\n```\n\n- **eg. 2**\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    // background\n    android:background=\"@drawable/avatar7\"\n    // The configuration of drawable1 starts here\n    app:stv_isShowState=\"true\"\n    app:stv_state_drawable=\"@drawable/triangle\"\n    app:stv_state_drawable_mode=\"leftTop\"\n    app:stv_state_drawable_width=\"20dp\"\n    app:stv_state_drawable_height=\"20dp\"\n    // The configuration of state_drawable2 starts here\n    app:stv_isShowState2=\"true\"\n    app:stv_state_drawable2=\"@drawable/recousers\"\n    app:stv_state_drawable2_mode=\"rightTop\"\n    app:stv_state_drawable2_height=\"20dp\"\n    app:stv_state_drawable2_width=\"20dp\"\n    ...\n />\n```\n\nAs you are familiar with, `state_drawable2` continues all the smooth operations of the first generation. Under the wise use of your smart, 【SuperTextView】 will be able to shine! 😉\n\n### 3 The era of Adjuster\nPreviously, the design of `Adjuster` made 【SuperTextView】a soul and a smarter control. The insertion of the drawing process, the capture of touch events, makes it easy to change the state of a control from the outside. Creativity begins with the heart and goes here.\n\nNow, 【SuperTextView】can carry up to 3 `Adjuster` at the same time! Maybe your creativity will be more dazzling.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/多Adjuster演示.gif)\n\nIn the above example, CoorChice adds the two early  the【Sweep】and the【Move】effects to a 【SuperTextView】, and the result is what you see.\n\nMore `Adjuster` means more combinations and more surprises. In 【v1.4.0】, CoorChice also uses `Adjuster` to easily implement the press color change function.\n\nThis is the era of `Adjuster`, you can use it to be creative.\n\n⚠️ Note that the original `setAdjuster(Adjuster)` method is still preserved, but future versions will be removed and you must migrate as soon as possible. The new alternative is `addAdjuster(Adjuster)`.\n\n### 4 Other\n- Fixed spelling of the property `app:stv_shaderMode=\"leftToRight\"` that controls the Shader mode. The right is`app:stv_shaderMode=\"leftTopRight\"` . If you use this property, please correct it after upgrading 【SuperTextView v2.0】.\n- Added `set/getPressBgColor()` and `set/getPressTextColor()` to control the background color in the code.\n\n\n\n## v1.4.0\n- SuperTextView support to press to change background color  and text color.\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/按压变色.gif)\n\nYou just need to set these properties at the xml file like this:\n\n```\n# set the background color when you pressed\napp:stv_pressBgColor=\"@color/red\"\n# set the text color when you pressed\napp:stv_pressTextColor=\"@color/white\"\n```\n- There is a new method `getCorners()`. You can get the infomation of the corners in the `SuperTextView`, sometimes you really want to use this method.\n- How to use SuperTextView v1.4？\n\n```\ndependencies {\n\tcompile 'com.github.chenBingX:SuperTextView:v1.4'\n}\n```\n## v1.3\n- Now, you can change frame rate at any time.\n\n```\nmSuperTextView.setFrameRate(30);\n// set 30 fps\n```\n- Optimize the animation performance.\n- Cool, Cool, Cool! Shader is coming！\n\n![link](https://raw.githubusercontent.com/chenBingX/img/master/stv/渐变色.png)\n\nA touch namely change, imagine can't be stop. Artist, play to your creativity！\n\nYou can set the Shader Effect in the xml, and you can。\n\n```\napp:stv_shaderEnable=\"true\"\n// set true to begin shader.\n\napp:stv_shaderStartColor=\"@color/main_blue\"\n// set shader start color.\n\napp:stv_shaderEndColor=\"@color/pink\"\n// set shader end color.\n\napp:stv_shaderMode=\"rightToLeft\"\n// set shader mode. These are four mode：\n// topTopBottom, bottomToTop, leftToRight, rightToLeft\n```\n\nOf course, these properties can be changed by `set/get` method. eg：\n\n```\nmSuperTextView.setShaderStartColor(Color.RED);\n```\n\n- Now, **SuperTextView** javadoc is provided, you can download from here（click `index.html` to begin）：\n[**SuperTextView javadoc：http://ogemdlrap.bkt.clouddn.com/SuperTextView%E6%96%87%E6%A1%A3%20.zip?attname=**](http://ogemdlrap.bkt.clouddn.com/SuperTextView%E6%96%87%E6%A1%A3%20.zip?attname=)\n\n- how to use SuperTextView 1.3\n  in the **build.gradle**：\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ndependencies {\n    compile 'com.github.chenBingX:SuperTextView:v1.3'\n}\n```\n---\n\n## v1.1\n- Support Android 4.0，SdkVersion 14.\n- Support elegant fascinating **【Chain Programming】** , eg:\n\n\n```\nmSuperTextView.setAdjuster(new MoveEffectAdjuster())\n        .setAutoAdjust(true)\n        .startAnim();\n```\n\n- Reduce the library memory.\n\n## v1.0\n### 1 Attribute\n**SuperTextView** properties can be set in the XML easily, and you can see the effect immediately. Just like to use TextView.\n\n```\n<SuperTextView\n    android:layout_width=\"50dp\"\n    android:layout_height=\"50dp\"\n\n    //Set Corner.\n    //If you want to get a circle, you just need to set the value of half of width.\n    app:stv_corner=\"25dp\"\n    //Corner of left-top\n    app:stv_left_top_corner=\"true\"\n    //Corner of right-top\n    app:stv_right_top_corner=\"true\"\n    //Corner of left-bottom\n    app:stv_left_bottom_corner=\"true\"\n    //Corner of right-bottom\n    app:stv_right_bottom_corner=\"true\"\n    //Fill color\n    app:stv_solid=\"@color/red\"\n    //Stroke color\n    app:stv_stroke_color=\"@color/black\"\n    //Stroke width\n    app:stv_stroke_width=\"2dp\"\n    //Set a state drawbale\n    //The default size is half of the SuperTextView.\n    app:stv_state_drawable=\"@drawable/emoji\"\n    //The mode of the state drawable. Optional values:\n    // left、top、right、bottom、center(Default)、\n    //leftTop、rightTop、leftBottom、rightBottom、\n    //fill(Fill the SuperTextView. In this case, set state drawable size will not work.)\n    app:stv_state_drawable_mode=\"center\"\n    //state drawable height\n    app:stv_state_drawable_height=\"30dp\"\n    //state drawable width\n    app:stv_state_drawable_width=\"30dp\"\n    //The padding of the left, it base on the value of state_drawable_mode.\n    app:stv_state_drawable_padding_left=\"10dp\"\n    //The padding of the top, it base on the value of state_drawable_mode.\n    app:stv_state_drawable_padding_top=\"10dp\"\n    //boolean. Whether to show the state drawble.\n    app:stv_isShowState=\"true\"\n    //Whether to use the Stroke Text Function.\n    //Attention, Once you opne this function, setTextColor() will not work.\n    //That means you must to uses text_fill_color to set text color.\n    app:stv_text_stroke=\"true\"\n    // Text stroke color. The default value is Color.BLACK.\n    app:stv_text_stroke_color=\"@color/black\"\n    // Stroke text width.\n    app:stv_text_stroke_width=\"1dp\"\n    // Stroke text color. The default value is Color.BLACK.\n    app:stv_text_fill_color=\"@color/blue\"\n    //boolean. Whether to use the Adjuster Function.\n    //Use this function to do what you want to do.\n    //If open this function, but you haven't implemented your Adjuster, the DefaultAdjuster will be used.\n    //The DefaultAdjuster can auto adjust text size.\n    app:stv_autoAdjust=\"true\"\n    />\n\n```\nAll the attributes can be set in the java. You can also to get their value. e.g.:\n\n```\nmSuperTextView.setCorner(10);\nmSuperTextView.getCorner();\n```\n#### 1.1 Corner And Border\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.15.42.png)\n\nUsually, you have to write and manage a lot of <shape> file to implement the effect of the above chart. But now, you can easy to do this in the XML.\n\n#### 1.2 Not Simple Corner\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.15.59.png)\n\nDifferent from general Corner, **SuperTextView** can support to precise control the location of corner. One, two , three, what ever you want.\n\n#### 1.3 Amazing Stroke Text\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.16.13.png)\n\nUse Stroke text is so easily！\n\n#### 1.4 High-Efficient State Drawable\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.16.22.png)\n\nDifferent from general state drawable, **SuperTextView** supports more precise control options. You can easy to set state drawable, just to use one attribute.\n\n### 2 Explosive Adjuster\n**Adjuster** is be designed to insert some options in the drawing process of the **SuperTextView**. It has very important sense. e.g. The **DefaultAdjuster** can auto adjust text size before the text be draw. Of course, you can use it to do any thing.\n\n**If you want to use Adjuster, you must to invoke `SuperTextView.setAutoAdjust(true)`. Of course, you can invoke `SuperTextView.setAutoAdjust(false)` to stop it at any time. You should invoke these method carefully. Because, once you invoke the `SuperTextView.setAutoAdjust(true)`, but didn't set your Adjuster before, the DefaultAdjuster will be used immediately.Until you set yourself Adjuster.**\n\n#### 2.1 Intervene Drawing\nTo implement a Adjuster, you need to extends SuperTextView.Adjuster，and implement `adjust(SuperTextView v, Canvas canvas)` method. Adjuster.adjust() will be invoke whenever the draw happened, that means you can intervene the drawing process in the outside.\n\n```\npublic class YourAdjuster extends SuperTextView.Adjuster {\n\n  @Override\n  protected void adjust(SuperTextView v, Canvas canvas) {\n    //do your business。\n  }\n\n}\n```\n**Attention, if you start animation, you must be very careful to write the code in the adjuster(). Because the animation will be draw 60fps/s. That means, this method will be invoked 60 times in a second！So, do not to create any new object in this method. Otherwise, your app will be get a big lag！Because it will cause【Memory Thrashing】, and GC occur frequently. About the detail reason, you can see my this two articles:**\n- [【Android Memory Thrashing : http://www.jianshu.com/p/69e6f894c698】](http://www.jianshu.com/p/69e6f894c698)\n- [【Two chart to tell you why your app lags? : http://www.jianshu.com/p/df4d5ec779c8】](http://www.jianshu.com/p/df4d5ec779c8)\n\n\n#### 2.2 Response Touch Event\n\nIf you override the `onTouch(SuperTextView v, MotionEvent event)` method of the Adjuster, you will get the touch events of the **SuperTextView**. It's very important to get a series of touch events of **SuperTextView** to handle. And you must return true in the `onTouch()`, Otherwise you will just get a  ACTION_DOWN event, not a flow of events.\n\n```\npublic class YourAdjuster extends SuperTextView.Adjuster {\n\n  @Override\n  protected void adjust(SuperTextView v, Canvas canvas) {\n    //do your business。\n  }\n\n  @Override\n  public boolean onTouch(SuperTextView v, MotionEvent event) {\n    //you can get the touch event.\n    //If want to get a series of touch event, you must return true here.\n  }\n\n}\n```\n\n#### 2.3 So Amazing Effect\n\nBecause the **SuperTextView** the build-in animation driven, you can use Adjuster to implement the unbelievable effect. All the things you need to do is invoke `startAnim()`and `stopAnim()` to start or stop animation after your Adjuster write down.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/SuperTextView.gif)\n\nAs you can see, these beautiful effect is be implemented by Adjuster. This **pull plugin** design, makes you can use a new Adjuster in the **SuperTextView** at any time. You just need to create a new Adjuster, then invoke `setAdjuster()`.\n\n`@Alex_Cin` hopes to see the Ripple Effect, so in the `RippleAdjuster.java`, I've shown how to use Adjuster with Animation Driven to implement the Ripple Effect. [【RippleAdjuster.java link：https://github.com/chenBingX/SuperTextView/blob/master/app/src/main/java/com/coorchice/supertextview/SuperTextView/Adjuster/RippleAdjuster.java】](https://github.com/chenBingX/SuperTextView/blob/master/app/src/main/java/com/coorchice/supertextview/SuperTextView/Adjuster/RippleAdjuster.java)\n\nSee, you can implement your Ripple Effect.\n\n#### 2.4 Set the hierarchy of Adjuster\n**Adjuster** is sweet designed the hierarchy function. You invoke `Adjuster.setOpportunity(Opportunity opportunity)` to set the hierarchy of your Adjuster in the **SuperTextView**.\n\nIn the **SuperTextView**, the hierarchy is from bottom to top is divided into：Background Hierarchy、Drawable Hierarchy、Text Hierarchy. You can use Opportunity to set the hierarchy of your Adjuster to that you want layer.\n\n```\npublic enum Opportunity {\n      BEFORE_DRAWABLE, //between backgournd layer and drawable layer\n      BEFORE_TEXT,     //between drawable layer and text layer\n      AT_LAST          //The top layer\n}\n```\nOpportunity chart.\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/Opportunity.png)\n\nThe default value is `Opportunity.BEFORE_TEXT`. Like the second chart.\n\nIn fact, **SuperTextView** like a canvas, and you can draw your creative on it. It makes you forces on the creation, and you never need to write these useless code.\n\nNow you can start using **SuperTextView**.\n\n> - If you like [**SuperTextView**](https://github.com/chenBingX/SuperTextView), I thank you to go to the [**Github**](https://github.com/chenBingX/SuperTextView) to give me a  [**star** 🌟](https://github.com/chenBingX/SuperTextView) !\n\n> - In addition, **CoorChice** will occasionally share dry goods on the blog platform, including **Android related technology**, **machine learning**, **algorithm**,**new technology**, And ** some insights and thoughts about personal development and improvement**. Go to [CoorChice's 【Personal Homepage】](https://juejin.im/user/57fc43b67db2a200595ffd94)  to give me a follow.\n\n> - SuperTextView QQ Group：***775951525***\n\n# License\n\n\n\n\n    Copyright 2017 CoorChice\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 48.5146484375,
          "content": "# 你好, 开发者！欢迎使用 SuperTextView\n\n\n [![](https://jitpack.io/v/chenbingx/supertextview.svg)](https://jitpack.io/#chenbingx/supertextview) [![](https://img.shields.io/badge/SuperTextView-v3.2.6-orange.svg)](https://github.com/chenBingX/SuperTextView)  [![](https://img.shields.io/badge/SuperTextView-v3.2.6.64-orange.svg)](https://github.com/chenBingX/SuperTextView) [![](https://img.shields.io/badge/build-passing-brightgreen.svg)](https://github.com/chenBingX/SuperTextView) [![](https://img.shields.io/badge/API-19+-yellowgreen.svg)](https://android-arsenal.com/api?level=14#l14) [![](https://img.shields.io/badge/License-Apache--2.0-blueviolet.svg)](https://github.com/chenBingX/SuperTextView#license) [![](https://img.shields.io/badge/Author-CoorChice-blue.svg)](https://weibo.com/5406092281/profile?topnav=1&wvr=6) [![](https://img.shields.io/badge/交流群-775951525-ff5722.svg)](https://jq.qq.com/?_wv=1027&k=5DIRlPm)\n\n\n# [**English**](https://github.com/chenBingX/SuperTextView) | **中文**\n\n<img src=\"https://gw.alicdn.com/tfs/TB1Ijt0c7cx_u4jSZFlXXXnUFXa-1014-1014.png\" width=200 height=200 align=right alt=\"SuperTextView\">\n\n嘿，开发者你好，欢迎使用 **SuperTextView** ！\n\n感谢你及全球数万 **Android** 开发者的信赖 😘。\n\n**SuperTextView** 的与众不同在于，它只是一个简单的控件元素，但却不仅仅是一个控件。它生而灵动多变，强大的内嵌逻辑，为你持续提供丰富多彩却异常简单的开发支持。\n\n**SuperTextView** 将你从复杂的渲染逻辑中解救出来，一行简单的 **API** 接口调用，炫目渲染的效果即刻而至。\n\n你只需享受自己所编写出的惊人视效，剩下的一切就放心交给 **SuperTextView**。\n\n# 特性\n- 为 **View** 设置圆角\n- 支持单独控制每一个圆角\n- 为 **View** 添加边框\n- 为文字增加描边或空心效果\n- 支持最多 2 个 **Drawable** 展示\n- 可准确控制 **Drawable** 大小及位置\n- 支持渐变色背景\n- 触摸变色\n- 展示图片，包括网络图片\n- 支持 XML 中直接设置网络图片\n- 为图片设置圆角\n- 为图片增加边框\n- 可插入操作的 **Adjuster** 模块\n- 修改 **Drawable** 的颜色\n- 修改 **Drawable** 的旋转角度\n- 支持文字渐变色效果\n- 支持为 **Drawable** 区域单独设置点击事件\n- 支持 **Gif** 图展示\n- 支持为 **Gif** 图添加边框，以及圆角\n- 支持 **Gif** 图暂停/播放、修改帧率\n- 支持提取指定 **Gif 帧\n- ...\n\n# Demo 和演示\n\n[ 📲 点击此处（或扫描下方二维码），下载体验 **Demo**](https://raw.githubusercontent.com/chenBingX/img/master/%E5%85%B6%E5%AE%83%E6%96%87%E4%BB%B6/STVDemo.apk)\n\n<img src=\"https://gw.alicdn.com/tfs/TB1XX4.P1L2gK0jSZPhXXahvXXa-150-150.png\" width=150 height=150 align=center alt=\"SuperTextView\">\n\n|||||\n|:---:|:---:|:---:|:---:|\n|![](https://gw.alicdn.com/tfs/TB1Nex9PVY7gK0jSZKzXXaikpXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1SWbzdMgP7K4jSZFqXXamhVXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1qmScP1H2gK0jSZJnXXaT1FXa-316-641.gif)|![](https://gw.alicdn.com/tfs/TB1_HmjP7T2gK0jSZFkXXcIQFXa-316-641.gif)|\n\n\n# 传送门区\n\n- [【传送门】：《SuperTextView 开发参考文档》- 你可以学习到如何使用 SuperTextView 来提高你的应用的构建效率](https://github.com/chenBingX/SuperTextView/wiki/%E9%A6%96%E9%A1%B5)\n\n- [【传送门】：《SuperTextView API文档》— 你可以查看 SuperTextView 所有可用 API 及属性](https://chenbingx.github.io/SuperTextView/SuperTextView-doc/index.html)\n\n\n# 如何开始使用\n\n\n在你的**build.gradle**中加入：\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ndependencies {\n    compile 'com.github.chenBingX:SuperTextView:VERSION_CODE'\n}\n```\n\n[用这里的真实发行版本号, 替换 VERSION_CODE](https://github.com/chenBingX/SuperTextView/releases)\n\n\n\n# 特别提示💡\n\n- **v3.2.6** 版本支持：`armeabi-v7a`\n\n- **v3.2.6.64** 版本支持：`armeabi-v7a`、`arm64-v8a`\n\n- **v3.2.6.99** 版本支持：`armeabi-v7a`、`arm64-v8a`、`x86`\n\n- ⚠️ 特别注意：混淆请加上 `-keep class com.coorchice.library.gifdecoder.JNI { *; }`\n\n\n# 近期更新\n\n## v3.2.6\n\n- 支持在 XML 中，为 StateDrawable 和 StateDrawable2 设置网络图片\n\n> 在 XML 中，把网络图片作为背景图\n\n![](https://gw.alicdn.com/imgextra/i1/O1CN01Pw9Z0U21Ie9BK88T9_!!6000000006962-0-tps-730-344.jpg)\n\n```html\n<com.coorchice.library.SuperTextView\n  android:id=\"@+id/stv_40\"\n  android:layout_width=\"150dp\"\n  android:layout_height=\"150dp\"\n  android:layout_gravity=\"center_horizontal\"\n  android:layout_marginTop=\"16dp\"\n  android:gravity=\"bottom|center\"\n  android:paddingBottom=\"1dp\"\n  android:text=\"网络背景图\"\n  android:textColor=\"#000\"\n  android:textSize=\"14sp\"\n  app:stv_corner=\"10dp\"\n  app:stv_isShowState=\"true\"\n  app:stv_drawableAsBackground=\"true\"\n  app:stv_solid=\"#f1f1f1\"\n  app:stv_state_drawable=\"https://gw.alicdn.com/imgextra/i3/O1CN01suhAFr1cXQX49D2xp_!!6000000003610-0-tps-468-466.jpg\" />\n```\n\n> 在 XML 中，为 StateDrawable2 设置网络图片\n\n![](https://gw.alicdn.com/imgextra/i4/O1CN01j3XdIb1LHXK50WtRd_!!6000000001274-0-tps-736-236.jpg)\n\n```html\n<com.coorchice.library.SuperTextView\n  android:id=\"@+id/stv_41\"\n  android:layout_width=\"350dp\"\n  android:layout_height=\"100dp\"\n  android:layout_gravity=\"center_horizontal\"\n  android:layout_marginTop=\"30dp\"\n  android:paddingLeft=\"116dp\"\n  android:paddingTop=\"30dp\"\n  android:text=\"StateDrawable2 网络图\"\n  android:textColor=\"@color/black\"\n  android:textSize=\"14sp\"\n  app:stv_corner=\"50dp\"\n  app:stv_isShowState2=\"true\"\n  app:stv_left_bottom_corner=\"true\"\n  app:stv_left_top_corner=\"true\"\n  app:stv_solid=\"#f1f1f1\"\n  app:stv_state_drawable2=\"https://gw.alicdn.com/imgextra/i3/O1CN01XPmcmt1vJfKcQ8o6O_!!6000000006152-0-tps-500-500.jpg\"\n  app:stv_state_drawable2_height=\"100dp\"\n  app:stv_state_drawable2_mode=\"left\"\n  app:stv_state_drawable2_width=\"100dp\"/>\n```\n## v3.2.5\n\n- 修复 `stv_pressBgColor` 失效\n- 修复 `setDrawablePaddingLeft()` 失效\n- 清理log信息\n- 现在，Gif 支持了高速缓存模式，在此模式下，即使是超大 Gif 图，也能秒级加载\n- 优化 Gif 渲染效率\n\n## v3.2.4\n\n- 修复Drawable直接写16进制颜色值，不显示的问题\n\n- Drawable 支持指定层级\n\n    ```\n    <com.coorchice.library.SuperTextView\n        ...\n        // 配置 Drawable1 的层级\n        app:stv_state_drawable_layer=\"beforeText\"\n        // 配置 Drawable2 的层级\n        app:stv_state_drawable2_layer=\"afterText\"\n        ...\n        />\n    ```\n\n    支持模式:\n\n        - `beforeText`，在文字前\n        - `afterText`，在文字后\n\n    **Java** 中有对应函数支持动态配置。\n\n- 修复 Drawable1 作为背景图时，缩放模式 scaleType 切换失效问题\n\n## v3.2.3\n\n- 优化文字描边\n\n- 优化透明gif的展示\n\n## v3.2.1 - 大有可为，SuperTextView\n\n在全新的 `v3.2.0` 版本中，**SuperTextView** 再一次重新定义了自己。开发者，来看看精心为你准备的惊喜吧！🎉🎉🎉\n\n### 这是... Gif ？\n\n这一次，**SuperTextView** 为开发者带来了强力的 **Gif** 驱动支持。\n\n如果在过去，你曾经为如何在 Android 平台上展示一张 **Gif** 图而苦恼多日，或是困于一些三方 **Gif** 库的性能深渊中迷失方向。那么现在，**SuperTextView** 将彻底改变这一现状。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo1.gif)\n\n**Gif** 图与 **SuperTextView** 天生就是浑然天成，因此，你可以通过你最熟悉的、最自然的方式来让一张 **Gif** 图获得展示。就像你往常展示一张普通图片那样简单。\n\n得益于 **c/c++** 的超高性能，以及对内存的精确操作。**SuperTextView** 通过使用 **c/c++** 为移动平台专门定制了性能强悍的 **Gif** 驱动引擎。\n\n**SuperTextView** 的 **Gif** 引擎，能够精确操作图像像素内存，在 **Gif** 图像的帧刷新时，只对局部像素内存进行更新，这让 **Gif** 图像渲染效率得到了质的飞跃。\n\n通过异步离屏渲染技术，使得 **SuperTextView** 即使在展示超大 **Gif** 图像的同时，依旧能够确保应用界面丝滑的流畅度，以及灵敏的响应速度。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo2.gif)\n\n> 💡以上 Demo 中，使用 **SuperTextView** 展示了一张 **近17M** 大小，包含有 **265** 帧图像的 **Gif** 图，用户界面却依旧无比流畅。\n\n#### 展示 Gif 超简单\n\n在 **SuperTextView** 中展示一张 **Gif** 图，超简单！\n\n你可以直接 **XML** 布局文档中配置，或者在代码中进行添加。\n\n##### 在 **XML** 中配置 **Gif**\n\n```\n<com.coorchice.library.SuperTextView\n    android:id=\"@+id/stv_1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"150dp\"\n    app:stv_state_drawable=\"@drawable/gif_1\" />\n```\n\n你可以像配置一张普通图片一样，为 **SuperTextView** 配置展示 **Gif** 图。\n\n##### 在代码中配置 Gif\n\n```\nstv_1 = (SuperTextView) findViewById(R.id.stv_1);\nstv_1.setDrawable(R.drawable.gif_1);\n```\n\n就是这么简单、自然，**SuperTextView** 可以让开发者毫无感知的，就能配置展示一张 **Gif** 图。\n\n在 **SuperTextView** 的内核逻辑中，**SuperTextView** 会智能的对普通图和 **Gif** 图进行分类，然后作出相应的处理和优化。\n\n##### 展示网络 **Gif** 一样简单\n\n如果你的 **Gif** 图不在本地，而在云端，怎么办？\n\n你无需烦恼！一切放心交给 **SuperTextView**。\n\n```\nstv_1 = (SuperTextView) findViewById(R.id.stv_1);\nstv_1.setUrlImage(\"http://example.com/images/example.gif\");\n```\n\n只需一行代码，**SuperTextView** 会在后台协助你完成 **Gif** 图的加载，然后处理渲染到屏幕上。\n\n> 💡实际上，**SuperTextView** 的 **Drawable1** 和 **Drawable2** 图像展示位，均可用来展示 **Gif** 图。总之，一切都是你所熟悉的样子。\n\n\n#### 你可以掌控的更多\n\n**SuperTextView** 所提供给开发者的不仅仅是展示 **Gif** 图这么简单，你可以掌控更多的细节。\n\n##### 播放/暂停\n\n你可以随时控制 **Gif** 图，播放，或者暂停。\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // 先获取到 GifDrawable 对象\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // 播放\n  gifDrawable.play();\n\n  // 暂停\n  gifDrawable.stop();\n}\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo3.gif)\n\n##### 跳转/获取指定帧\n\n在 **SuperTextView** 中，你可以随时到达你指定的帧图像，以及能够提取得到到指定帧的图像。\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // 先获取到 GifDrawable 对象\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // 跳转到指定帧\n  gifDrawable.gotoFrame(pre);\n\n  // 获取指定帧\n  Bitmap frame = gifDrawable.getFrame(i);\n}\n```\n> 💡由于 **SuperTextView** 能够支持局部增量渲染，所以当你的 **Gif** 支持这种渲染模式时，意味着你可能需要通过调用 `gifDrawable.setStrict(true)` 开启 **严格模式**，来确保帧跳转或者帧提取的图像是正确的。这可能会花费一些时间，所以你应该尽量将 **严格模式** 下的操作在异步线程中进行。\n\n##### 快慢，随你心\n\n**SuperTextView** 允许你随意的修改 **Gif** 图的播放速率。\n\n```\nif (stv.getDrawable() instanceof GifDrawable) {\n  // 先获取到 GifDrawable 对象\n  GifDrawable gifDrawable = (GifDrawable) stv.getDrawable();\n\n  // 设置帧播放间隔时间，20ms\n  gifDrawable.setFrameDuration(20);\n}\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo4.gif)\n\n##### 你可以了若指掌\n\n通过 **SuperTextView** 你可以对一张 **Gif** 图像的信息了若指掌。\n\n- 获取 **Gif** 尺寸\n\n    ```\n    // 获取宽度\n    int width = gifDrawable.getWidth();\n\n    // 获取高度\n    int height = gifDrawable.getHeight();\n    ```\n\n- 获取 **Gif** 帧信息\n\n    ```\n    // 获取帧数\n    int frameCount = gifDrawable.getFrameCount();\n\n    // 获取当前帧间隔\n    int frameDuration = gifDrawable.getFrameDuration();\n\n    // 获取当前渲染到那一帧\n    int framePotision = gifDrawable.getCurrentFrame();\n\n    // 是否在播放\n    boolean isPlaying = gifDrawable.isPlaying();\n    ```\n\n#### 更出彩的 Gif\n\n**SuperTextView** 凭借对 **Gif** 渲染的无缝融合，此前 **Drawable1** 和 **Drawable2** 的一切配置项，在展示 **Gif** 图时，也同样能够生效。\n\n##### Gif 作为普通 Drawable\n    app:stv_state_drawable_rotate=\"90\"\n\n来看看在原本的 **Drawable** 位置放上一张 **Gif** 图会发生什么神奇的事情。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"50dp\"\n    android:paddingLeft=\"62dp\"\n    android:paddingRight=\"10dp\"\n    android:text=\"小火箭发射了！啦啦啦啦啦啦...\"\n    android:textColor=\"#ffffff\"\n    android:textSize=\"22dp\"\n    app:stv_corner=\"6dp\"\n    app:stv_isShowState=\"true\"\n    app:stv_solid=\"#0D1831\"\n\n    // 设置 Gif\n    app:stv_state_drawable=\"@drawable/gif_1\"\n\n    // 设置 Gif 高\n    app:stv_state_drawable_height=\"40dp\"\n\n    // 设置 Gif 宽\n    app:stv_state_drawable_width=\"40dp\"\n\n    // 设置 Gif 居左展示\n    app:stv_state_drawable_mode=\"left\"\n\n    // 设置 Gif 左间距\n    app:stv_state_drawable_padding_left=\"10dp\"/>\n```\n\n效果是...\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo5.gif)\n\n\n现在，我们将 **Gif** 旋转 90 度试试。\n\n```\n<com.coorchice.library.SuperTextView\n    ...\n    // 设置 Gif 旋转 90 度\n    app:stv_state_drawable_rotate=\"90\"\n    ...\n/>\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo6.gif)\n\n\n##### 将 Gif 圆角化\n\n**SuperTextView** 不可思议的实现了 **Gif** 图的圆角化，为开发者打开了一扇全新的大门。\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo7.gif)\n\n\n然而，这种效果的却是惊人的简单。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"185dp\"\n    android:layout_height=\"138.75dp\"\n    android:layout_gravity=\"center_horizontal\"\n    app:stv_corner=\"20dp\"\n\n    // 设置 Gif 作为控件背景\n    app:stv_drawableAsBackground=\"true\"\n\n    app:stv_scaleType=\"fitCenter\"\n\n    // 配置 Gif\n    app:stv_state_drawable=\"@drawable/gif_1\" />\n```\n\n##### 为 Gif 加上边框\n\n开发者甚至可以轻而易举的给一张 **Gif** 图加上边框。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"350dp\"\n    android:layout_height=\"148.4dp\"\n    android:layout_gravity=\"center_horizontal\"\n    android:gravity=\"center\"\n\n    // 加上文字会显的更有格调\n    android:text=\"SuperTextView\"\n\n    android:textSize=\"36dp\"\n    android:textStyle=\"bold\"\n    android:visibility=\"invisible\"\n    app:stv_corner=\"6dp\"\n    app:stv_drawableAsBackground=\"true\"\n    app:stv_isShowState=\"true\"\n    app:stv_scaleType=\"center\"\n    // 设置边框颜色\n    app:stv_stroke_color=\"@color/opacity_8_gray_4c\n\n    // 设置边框宽度\n    app:stv_stroke_width=\"5dp\"\n\n    app:stv_text_fill_color=\"#ccffffff\"\n    app:stv_text_stroke=\"true\"\n    app:stv_text_stroke_color=\"#cc000000\"\n    app:stv_text_stroke_width=\"2dp\"\n\n    // 配置 Gif\n    app:stv_state_drawable=\"@drawable/gif_1\"/>\n```\n\n效果即刻呈现...\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo8.gif)\n\n\n##### 轻松实现动态头像\n\n在过去，一些炫酷的动效，往往会止步于实现的复杂和成本上。而 **SuperTextView** 为你带了更多的可能，你的灵感可以无拘无束。\n\n比如，动态头像的实现，会比以往更加的简单。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"80dp\"\n    android:layout_height=\"80dp\"\n    android:layout_marginLeft=\"30dp\"\n    app:stv_corner=\"40dp\"\n\n    // 设置为背景图\n    app:stv_drawableAsBackground=\"true\"\n\n    // 配置 Gif 头像\n    app:stv_state_drawable=\"@drawable/gif_avatar\"\n\n    // 添加边框\n    app:stv_stroke_color=\"#ffffff\"\n    app:stv_stroke_width=\"3dp\"\n    />\n```\n\n在代码中，你可以直接配置一张网络动态头像。\n\n```\nstv.setUrlImage(\"http://gif_avatar.gif\");\n```\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo9.gif)\n\n### 更多的惊喜\n\n#### 两个 Drawable 都支持点击！\n\n在新版本的 **SuperTextView** 中，**Drawable1** 和 **Drawable2** 被赋予了全新的能力 —— 支持精确点击动作。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/gif_demo10.gif)\n\n**SuperTextView** 通过监控点击动作发生的位置，能够将点击动作准确的定位到所发生的区域中（**Drawable1**、**Drawable2** 或者 **其它区域**），然后触发相应的监听回调。\n\n你可以为 **SuperTextView** 设置 **Drawable** 上的点击动作监听器，以便在动作发生时，作出准确的响应。\n\n```\nstv.setOnDrawableClickedListener(new SuperTextView.OnDrawableClickedListener() {\n    @Override\n    public void onDrawable1Clicked(SuperTextView stv) {\n        // Drawable1 clicked，do something...\n    }\n    @Override\n    public void onDrawable2Clicked(SuperTextView stv) {\n        // Drawable2 clicked，do something...\n    }\n});\n\nstv.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // 非 Drawable 区域被点击，do something...\n    }\n});\n```\n\n#### 背景图缩放模式支持\n\n现在，当你将 **Drawable1** 作为背景图时，你可以为它配置不同的缩放模式，以达到你心仪的效果。\n\n```\nstv.setScaleType(ScaleType.CENTER);\n```\n\n**SuperTextView** 为开发者提供了多达 3 种的缩放模式：\n\n- `ScaleType.FIT_XY`\n\n    将图片拉伸平铺。\n\n- `ScaleType.FIT_CENTER`\n\n    将图片剪裁居中。\n\n- `ScaleType.CENTER`\n\n    将图片自适应居中。默认值。\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/stv_scaletype.png)\n\n\n#### 其它更新\n\n- 在 **XML** 布局文档中，**Drawable1** 和 **Drawable2** 现在支持直接设置 **颜色** 或者 **ShapeDrawable**。\n\n    ```\n    // circle_f9ad36 为 xml 中编写的 shape 文件\n    app:stv_state_drawable=\"@drawable/circle_f9ad36\"\n\n    // 使用纯色作为 Drawable\n    app:stv_state_drawable=\"#000000\"\n    ```\n\n- ⚠️ 最低支持版本 **API** 提升到 **19**。\n\n- 渲染性能比过去提升至少 **30%**。\n\n- 升级默认图片加载引擎，支持智能缓存。也许现在，你不必再引入第三方图片加载库了。\n\n## v3.1.1 - 诚意之作，SuperTextView\n\nSuperTextView 被打造来帮助 Android 开发者更高效、更便捷、更优雅的开发 Android 应用。\n\n现在，这一诚意之作再次升级。全新的 SuperTextView 将向 Android 开发者开放更多可能性，当然一如既往，SuperTextView 也带来了更多高效的功能。\n\n### 1 神奇的着色\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/着色.png)\n\nSuperTextView 此次的升级，为 StateDrawable 增加了神奇而强大的着色能力。开发者可以轻松的改变一个图标的颜色，而不用再增加一个仅仅是颜色不同的图标到项目中。这项技术将为你的 Android 应用程序带来一次瘦身的机遇。\n\n```\n# 修改 drawable 的颜色\napp:stv_state_drawable_tint=\"@color/gray\"\n\n# 修改 drawable2 的颜色\napp:stv_state_drawable2_tint=\"@color/red\"\n```\n\n只需要如此一行简单的代码，就能瞬间赋予一张图片千变万化的能力。想要任何色彩，当然是你说了算。而这一切的发生，无需再引进另外一张图片。\n\n在 Java 代码中，有与之对应 set/get 函数，让开发者可以在任何时候都能施展魔法，改变一张图片的色彩。\n\n### 2 七十二般变化\n\n对 StateDrawable 的增强，不仅仅限于颜色的变换。SuperTextView 更被赋予了改变 StateDrawable 形态的能力。同样的一张图，开发者可以组合出无数种可能。\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/旋转.png)\n\n只需简单的几行代码，你便可以随心所欲的变换任何一张图片。\n\n```\n# 修改 drawable 的旋转角度\napp:stv_state_drawable_rotate=\"90\"\n\n# 修改 drawable2 的旋转角度\napp:stv_state_drawable2_rotate=\"90\"\n```\n\n无需复杂的代码，SuperTextView 一如既往的简洁、优雅。\n\n同样，在 Java 代码中，也提供了对应的 set/get 函数。\n\n这项能力，可以有效的帮助开发者将 Android 应用的体积向着极致的方向压缩。\n\n\n### 3 精彩远不止于此\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/文字渐变色.png)\n\n这，就是渐变文字！\n\nSuperTextView 所提供的可能是目前为止实现渐变文字最简洁、优雅的解决方案。只需要简单的配置，就能实现酷炫的渐变文字效果。\n\n```\n# 是否启用渐变色文字\napp:stv_textShaderEnable=\"true\"\n\n# 设置文字的起始渐变色\napp:stv_textShaderStartColor=\"@color/red\"\n\n# 设置文字的结束渐变色\napp:stv_textShaderEndColor=\"@color/yellow\"\n\n# 设置文字的渐变的模式\n# leftToRight：左 -> 右\n# rightToLeft：右 -> 左\n# topToBottom：上 -> 下\n# bottomToTop：下 -> 上\napp:stv_textShaderMode=\"leftToRight\"\n```\n\n这些属性也在 Java 中开放了 set/get 接口，便于开发者随时动态的修改它们。\n\n\n### 4 开放了新的 API\n\n#### 4.1 Adjuster 增加 onAttach、onDetach\n\nAdjuster 增加了两个新的函数：\n\n- `onAttach()`：当 Adjuster 被设置到一个 SuperTextView 中时会被调用。\n- `onDetach()`：当 Adjuster 被从一个 SuperTextView 中移除时会被调用。\n\n通过在 Adjuster 中重写这两个函数，开发者可以在正确的时机进行状态注册、初始化，或者取消注册、释放资源等操作。\n\n```\npublic class MyAdjuster extends SuperTextView.Adjuster{\n\n    @Override\n    protected void adjust(SuperTextView superTextView, Canvas canvas) {\n\n    }\n\n    @Override\n    public void onAttach(SuperTextView stv) {\n      // 当 Adjuster 被加入一个 SuperTextView 时会被调用\n    }\n\n    @Override\n    public void onDetach(SuperTextView stv) {\n      // 当 Adjuster 被从 SuperTextView 移除时会被调用\n    }\n}\n```\n\n#### 4.2 提供 getAdjusterList() 函数\n\n这个函数可以让开发者获得一个 SuperTextView 中的所有 Adjuster。如果 SuperTextView 中没有 Adjuster 的话，将会返回 null。\n\n### 5⚠️ 你必须重视这些变化\n\n#### 5.1 属性增加了 stv_ 前缀\n\n现在，SuperTextView 的所有属性都加上了前缀 `stv_`。\n\n这样做可以避免当开发者引入的其它第三方库时，与 SuperTextView 可能产生的属性名冲突。\n\n如果开发者目前正在使用一个此前版本的 SuperTextView，那么当升级到新的版本后，需要在所有 xml 中的属性前加上 `stv_` 前缀。\n\n得益于现代 IDE 的强大，开发者可以轻松的完成这些工作。就像下面这样。\n\n```\napp:corner=\"10dp\"\n```\n\ncorner 是旧版本中的属性名称，升级到新版本后，需要在前面增加 `stv_` 前缀，变为 `stv_corner`。\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/replace.png)\n\n如果开发者使用的是 AndroidStudio，从 `Edit > Find > Replace` 打开批量替换对话框，然后按照下图操作即可。\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/属性替换.png)\n\n如果开发者的项目中只有 SuperTextView 使用了相同的命名空间（如 `app`），那么很幸运，你可以直接将 `app:` 替换为 `app:stv_` 即可。\n\n#### 5.2 setAdjuster(Adjuster) 已被移除\n\n从 SuperTextView v2.0 版本开始，`setAdjuster(Adjuster)` 函数就被标记为了将被移除的状态，同时加入了新的函数 `addAdjuster(Adjuster)` 作为替代。\n\n在新的版本中，`setAdjuster(Adjuster)` 函数将被正式移除，如果开发者此前使用了该方法，请将其修改为 `addAdjuster(Adjuster)`。\n\n\n\n\n### 6 如何开始 SuperTextView v3.1.1\n```\ndependencies {\n\t compile 'com.github.chenBingX:SuperTextView:v3.1.1'\n}\n```\n\n\n\n## v3.0 - 你期待已久的SuperTextView\n经过一年多的不断的聆听、思考、探索、验证， **SuperTextView** 完成了多次迭代，改善了一些问题，新增了一些功能，不断的完善，以带给开发者更好的开发体验。\n\n如今， **SuperTextView** 已经具备了诸如圆角、边框、描边、按压变色、多状态图、圆角图、万能的 **Adjuster** 、加载网络图片等一系列的常用功能。得益于此，开发者能够轻松实现各种原本十分麻烦的效果，节省大量的开发时间，有效减少页面的复杂度，降低项目维护成本。\n\n写代码，本应如此愉悦！\n\n### 1. 链接云端的SuperTextView\n\n早在几个月前，就开始有很多开发者向 **CoorChice** 建议，是否能够让 **SuperTextView** 具备加载网络图片的功能。其实这也是 **CoorChice** 很久之前就有考虑过的，但在 **SuperTextView** 的早期，完善其核心功能仍然是首要目标，所以一直没涉猎到图片相关的功能。\n\n直到上一个大版本，**SuperTextView v2.0**，**CoorChie** 才尝试添加了图片展示的功能。这使得**SuperTextView** 可使用的范围得到了扩大，同时针对图片也推出了给图片增加描边、设置圆角、设置状态图等功能。相关使用文档可到以下链接查阅：\n\n[【你好， SuperTextView】 - https://www.jianshu.com/p/1b91e11e441d](https://www.jianshu.com/p/1b91e11e441d)\n\n这一次尝试，获得了开发者们不错的反响，大家对于使用 **SuperTextView** 去展示处理图片是有所期待的。上一个版本发布后，开发者们对于一个能展示网络图片的 **SuperTextView** 似乎更加的感兴趣了。\n\n那么，现在，你所期待已久的 **SuperTextView** 在此！\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/图片下载演示2.gif)\n\n#### 1.1 加载一张网络图片\n显示一张网络图片，在 **SuperTextView** 中只需要如下代码：\n\n```\nSuperTextView stv_1 = (SuperTextView) findViewById(R.id.stv_1);\n//填入图片Url\nstv_1.setUrlImage(url);\n```\n\n效果就如上图中的第二个显示头像的例子一样。\n\n如果你希望将网络图片作为 **SuperTextView** 的 StateDrawable 来展示的话，完全没问题。\n\n```\n//填入图片Url\nstv_1.setUrlImage(url, false);\n```\n\n第二个参数为 **false** 表示网络图片将不会被作为背景充满整个 **SuperTextView**，而是作为一个状态图。当然，有关状态图的一切配置都将运用到此。就像上图中的第一个例子一样，整个布局包括图片、文字、背景都在一个 **SuperTextView** 中被处理，从网络下载的图片被作为 **StateDrawable** 放到了图中的位置。\n\n#### 1.2 SuperTextView中图片引擎\n**SuperTextView** 为了保持依赖库的纯净和尽可能小的体积，并没有内置任何的图片加载框架。所以默认情况，将使用内置的一个简易图片引擎去下载图片，确保开发者能够正常使用展示网络图片的功能。\n\n但 **CoorChice** 仍然建议开发者根据项目的具体情况，选择一个目前正在使用的图片加载框架，设置到 **SuperTextView** 中，以用来加载图片。 **SuperTextView** 具备适配任意图片加载框架的能力。下面 **CoorChice** 将通过 Glide 和 Picasso 的例子展示如何将现有的图片框架安装到 **SuperTextView** 中。\n\n##### 1.2.1 实现图片引擎Engine\n在 **SuperTextView** 中，核心的图片加载引擎被抽象成接口 **Engine** ，开发者需要根据所用的图片框架，实现一个 **Engine**。\n\n- **Glide图片加载框架**\n\n```\npublic class GlideEngine implements Engine {\n\n  private Context context;\n\n  public GlideEngine(Context context) {\n        this.context = context;\n  }\n\n  @Override\n  public void load(String url, final ImageEngine.Callback callback) {\n        Glide.with(context).load(url).into(new SimpleTarget<GlideDrawable>() {\n        @Override\n        public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {\n            // 主要是通过callback返回Drawable对象给SuperTextView\n            callback.onCompleted(resource);\n        }\n        });\n    }\n}\n```\n\n- **Picasso图片加载框架**\n\n```\npublic class PicassoEngine implements Engine {\n\n  private Context context;\n\n  public PicassoEngine(Context context) {\n        this.context = context;\n  }\n\n  @Override\n  public void load(String url, final ImageEngine.Callback callback) {\n        Picasso.with(context).load(url).into(new Target() {\n        @Override\n        public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\n            // 主要是通过callback返回Drawable对象给SuperTextView\n            callback.onCompleted(new BitmapDrawable(Resources.getSystem(), bitmap));\n        }\n\n        @Override\n        public void onBitmapFailed(Drawable errorDrawable) {\n\n        }\n\n        @Override\n        public void onPrepareLoad(Drawable placeHolderDrawable) {\n\n        }\n    });\n  }\n}\n```\n\n##### 1.2.2 安装图片引擎Engine\n实现好 **Engine** 后，下一步就是要将其安装到 **SuperTextView** 中。\n\n**CoorChice** 建议可以在 Application的`onCreate()`中进行安装，这样当需要使用 **SuperTextView** 加载显示网络图片的时候，就能够用到三方图片框架了。\n\n```\npublic class STVApplication extends Application {\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    // 安装图片引擎\n    ImageEngine.install(new GlideEngine(this));\n    // ImageEngine.install(new PicassoEngine(this));\n  }\n}\n```\n\n一行代码，轻松安装。\n\n需要注意的是，任何时候，后安装的 **Engine** 实例总是会替换掉先前安装的 **Engine** 实例，即 **SuperTextView** 只允许全局存在一个 **Engine** 实例。\n\n现在，你可以让 **SuperTextView** 使用指定的三方图片加载框架去加载图片了。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/图片下载列表演示.gif)\n\n\n### 2. 如何开始SuperTextView v3.0\n```\n\tdependencies {\n\t   compile 'com.github.chenBingX:SuperTextView:v3.0.0'\n\t}\n```\n### 3. 其它\n- 修复一个动画问题\n- 一些优化\n\n## v2.0 - 未来，从现在开始\n**一直以来，CoorChice都心存一个设想，期待着能够打造这样一个控件：它能满足你的大部分开发需求，展示文字、图片、几何、动画、状态，让你使用一个控件就能高效的完成大部分开发工作。它是如此的强大，仿佛有心智一般，接受着你的输入，按照你的心意，呈现出叹为观止的画面。随着【SuperTextView v2.0】的到来，我们离这个设想更近了一步。现在，来和【SuperTextView v2.0】见个面吧！**\n\n![SuperTextView v2.0](https://raw.githubusercontent.com/chenBingX/img/master/stv/stv_2.0_2.png)\n\n### 1 图片，就是现在\n在【SuperTextView v2.0】中，增加了对图片展示的支持。但不仅仅止于展示图片，它还能智能的根据你的输入将图片剪裁为你期望的形状。\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-11-16%2001.51.33.png)\n\n给图片加上圆角，加上边框，或者直接变成圆形，所有的一切只需要设置几个简单的属性，即刻呈现在你的眼前。\n\n#### 1.1 展示一张图片\n如何使用SuperTextView展示一张图片？只需要在xml中加上下面两句代码即可。\n\n```\n<com.coorchice.library.SuperTextView\n    ...\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\n如果你是`SuperTextView`的忠实用户的话，你会发现，原本的`state_drawable`现在可以被用来展示一张图片。\n\n#### 1.2 给图片加上圆角\n现在，你的图片呈现在了你的眼前，也许你还想对它做一些不一样的事情，比如，加个圆角，或者直接变成圆形？没问题，`SuperTextView`现在完全能胜任这样的工作。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"15dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\n如此简单！在原来的基础上你仅仅需要设置合理的`corner`值就行。\n\n#### 1.3 也许，你还想要边框\n有时候，你可能需要使用一个边框去包裹住你的图片，就像上面的示例那样。没错，这肯定在`SuperTextView`能力范围内。\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"50dp\"\n    app:stv_stroke_color=\"#F4E187\"\n    app:stv_stroke_width=\"4dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    ...\n />\n```\n\n`app:stv_stroke_color` 掌控着边框的颜色，`app:stv_stroke_width` 掌控着边框的宽度。一切如此流畅，一个有心智的控件本该如此，对吗？\n\n\n### 2 第二个状态图\n面对复杂的需求变化，【SuperTextView】为应对这种复杂性，孕育出了第二个状态图 `state_drawable2` 。\n\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-11-16%2001.46.23.png)\n\n现在，CoorChice将向你展示，上图中的两种效果是如何实现的。\n\n- **示例一**\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    app:stv_corner=\"50dp\"\n    app:stv_state_drawable=\"@drawable/avatar1\"\n    app:stv_drawableAsBackground=\"true\"\n    // state_drawable2的配置由此开始\n    app:stv_isShowState2=\"true\"\n    app:stv_state_drawable2=\"@drawable/recousers\"\n    app:stv_state_drawable2_mode=\"rightTop\"\n    app:stv_state_drawable2_height=\"20dp\"\n    app:stv_state_drawable2_width=\"20dp\"\n    ...\n />\n```\n\n- **示例二**\n\n```\n<com.coorchice.library.SuperTextView\n    android:layout_width=\"100dp\"\n    android:layout_height=\"100dp\"\n    ...\n    // 背景图\n    android:background=\"@drawable/avatar7\"\n    // drawable1的配置由此开始\n    app:stv_isShowState=\"true\"\n    app:stv_state_drawable=\"@drawable/triangle\"\n    app:stv_state_drawable_mode=\"leftTop\"\n    app:stv_state_drawable_width=\"20dp\"\n    app:stv_state_drawable_height=\"20dp\"\n    // state_drawable2的配置由此开始\n    app:stv_isShowState2=\"true\"\n    app:stv_state_drawable2=\"@drawable/recousers\"\n    app:stv_state_drawable2_mode=\"rightTop\"\n    app:stv_state_drawable2_height=\"20dp\"\n    app:stv_state_drawable2_width=\"20dp\"\n    ...\n />\n```\n\n就如你所熟悉的一样，`state_drawable2` 延续了第一代一切流畅的操作。在聪明的你合理的使用下，【SuperTextView】一定能够大放异彩！😉\n\n### 3 属于Adjuster的时代\n此前，`Adjuster` 的设计使得【SuperTextView】具有了灵魂，成为更聪明的控件。对绘制过程的插入，触摸事件的捕捉，使得你能轻松的从外部改变一个控件的状态。创意始于心，而行于此。\n\n现在，【SuperTextView】能够同时承载最多3个 `Adjuster` ！也许，你的创意会更加的炫目。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/多Adjuster演示.gif)\n\n在上面这个示例中，CoorChice将早起的两个【扫光】和【涟漪】特效都加入到了一个【SuperTextView】中，结果就是你看到的这样。\n\n更多的 `Adjuster` 意味着更多的组合，更多的惊喜。在【v1.4.0】中，CoorChice同样使用了 `Adjuster` 来轻松的实现了按压变色功能。\n\n这是 `Adjuster` 的时代，睿智的你一定可以运用它挥洒创意的。\n\n需要注意的是⚠️，原本的 `setAdjuster(Adjuster)` 方法目前仍然被保留，但以后的版本将会被移除，你必须要尽快迁移。新的替代方法为 `addAdjuster(Adjuster)` 。\n\n### 4 其它\n- 修正控制Shader模式的属性 `app:stv_shaderMode=\"leftToRight\"` 的拼写。原来为 `app:stv_shaderMode=\"leftTopRight\"` 。如果你使用了该属性，在升级【SuperTextView v2.0】后请及时修正。\n- 增加 `set/getPressBgColor()` 和 `set/getPressTextColor()` 用于在代码中控制按压背景色。\n\n## v1.4.0\n- 千呼万唤使出来！你想要的按压变色效果在这里！\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/按压变色.gif)\n\n只需在xml文件中设置以下两个属性就能轻松实现按压变色效果，例如上图那样的：\n\n```\n# 设置按压时的背景色\napp:stv_pressBgColor=\"@color/red\"\n# 设置按压时的文字颜色\napp:stv_pressTextColor=\"@color/white\"\n```\n这个功能是依托内置一个`Adjuster`实现的，你可以看看这[]()。\n\nCoorChice想说的是，`Adjuster`是`SuperTextView`的灵魂所在，它能够让一切创意变成可能。\n\n- 暴露一个新的方法`getCorners()`。你可以通过它获得`SuperTextView`的所有圆角信息，有时候你真的很需要它。\n- 如何使用SuperTextView v1.4？\n\n```\ndependencies {\n\tcompile 'com.github.chenBingX:SuperTextView:v1.4'\n}\n```\n\n## v1.3\n- 支持随时修改动画帧率。难以置信的是，你甚至可以在动画执行过程中随时修改！当然最好不要这么做。\n\n```\nmSuperTextView.setFrameRate(30);\n// 修改帧率为30帧\n```\n- 优化动画驱动的性能。\n- 酷炫不止，渐变来袭！\n\n![link](https://raw.githubusercontent.com/chenBingX/img/master/stv/渐变色.png)\n\n一触即变，想象不至于此。艺术家，发挥你的创造力吧！\n\n同样，渐变效果的设置支持在xml中设置，并且能够即时预览。\n\n```\napp:stv_shaderEnable=\"true\"\n// 必须设置为true才能启用渐变功能。这意味着你可以灵活的控制这一功能。\n\napp:stv_shaderStartColor=\"@color/main_blue\"\n// 设置起始颜色。\n\napp:stv_shaderEndColor=\"@color/pink\"\n// 设置结尾颜色。\n\napp:stv_shaderMode=\"rightToLeft\"\n// 设置渐变模式。如上图可见，一共支持4中模式：\n// topTopBottom, bottomToTop, leftToRight, rightToLeft\n```\n当然，这些属性也都提供了对应的`set/get`方法，供你在Java中动态改变／获取它们的值。比如：\n\n```\nmSuperTextView.setShaderStartColor(Color.RED);\n```\n- 现在，提供了**SuperTextView**的详尽文档，你可以到这下载查看（解压后打开目录下的`index.html`开始）：\n[**SuperTextView文档：https://chenbingx.github.io/SuperTextView/SuperTextView-doc/index.html**](https://chenbingx.github.io/SuperTextView/SuperTextView-doc/index.html)\n\n- 如何使用SuperTextView 1.3\n  在你的**build.gradle**中加入：\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ndependencies {\n    compile 'com.github.chenBingX:SuperTextView:v1.3'\n}\n```\n\n\n\n## v1.1\n- 最低支持Android 4.0，SdkVersion 14。\n- 支持优雅动人的 **【链式表达式】** , eg:\n```\nmSuperTextView.setAdjuster(new MoveEffectAdjuster())\n        .setAutoAdjust(true)\n        .startAnim();\n```\n- 减小占用空间。\n\n## v1.0\n\n### 1 支持的属性\n**SuperTextView**十分方便的支持在xml中直接设置属性，并且你能够立即看到效果。就像你平时使用TextView一样方便。\n\n```\n<SuperTextView\n    android:layout_width=\"50dp\"\n    android:layout_height=\"50dp\"\n\n    //设置圆角。会同时作用于填充和边框(如果边框存在的话)。\n    //如果要设置为圆形，只需要把该值设置为宽或长的1/2即可。\n    app:stv_corner=\"25dp\"\n    //设置左上角圆角\n    app:stv_left_top_corner=\"true\"\n    //设置右上角圆角\n    app:stv_right_top_corner=\"true\"\n    //设置左下角圆角\n    app:stv_left_bottom_corner=\"true\"\n    //设置右下角圆角\n    app:stv_right_bottom_corner=\"true\"\n    //设置填充颜色\n    app:stv_solid=\"@color/red\"\n    //设置边框颜色\n    app:stv_stroke_color=\"@color/black\"\n    //设置边框的宽度。\n    app:stv_stroke_width=\"2dp\"\n    //放置一个drawable在背景层上。默认居中显示。\n    //并且默认大小为SuperTextView的一半。\n    app:stv_state_drawable=\"@drawable/emoji\"\n    //设置drawable的显示模式。可选值如下：\n    // left、top、right、bottom、center(默认值)、\n    //leftTop、rightTop、leftBottom、rightBottom、\n    //fill(充满整个SuperTextView，此时会使设置drawable的大小失效)\n    app:stv_state_drawable_mode=\"center\"\n    //设置drawable的height\n    app:stv_state_drawable_height=\"30dp\"\n    //设置drawable的width\n    app:stv_state_drawable_width=\"30dp\"\n    //设置drawble相对于基础位置左边的距离\n    app:stv_state_drawable_padding_left=\"10dp\"\n    //设置drawble相对于基础位置上边的距离\n    app:stv_state_drawable_padding_top=\"10dp\"\n    // boolean类型。是否显示drawable。\n    //如果你想要设置的drawable显示出来，必须设置为true。\n    //当不想让它显示时，再设置为false即可。\n    app:stv_isShowState=\"true\"\n    //是否开启文字描边功能。\n    //注意，启用这个模式之后通过setTextColor()设置的颜色将会被覆盖。\n    //你需要通过text_fill_color来设置文字的颜色。\n    app:stv_text_stroke=\"true\"\n    // 文字的描边颜色。默认为Color.BLACK。\n    app:stv_text_stroke_color=\"@color/black\"\n    // 文字描边的宽度。\n    app:stv_text_stroke_width=\"1dp\"\n    // 文字填充的颜色。默认为Color.BLACK。\n    app:stv_text_fill_color=\"@color/blue\"\n    // boolean类型。是否启用Adjuster功能。\n    //具体干什么，需要在Java中为SuperTextView实现一个Adjuster。\n    //当你启用这个功能而没有实现自己的Adjuster时，\n    //SuperTextView会启用默认的Adjuster。它会按照一定的规则调整文字大小。\n    app:stv_autoAdjust=\"true\"\n    />\n\n```\n\n以上这些属性，均可以在Java中进行动态的设置。同时也能够获得它们的值。例如：\n\n\n```\nmSuperTextView.setCorner(10);\nmSuperTextView.getCorner();\n```\n\n\n\n#### 1.1 圆形和边框\n\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.15.42.png)\n\n为了实现上图效果，通常你需要编写和管理大量的<shape>文件。现在你只需要在xml或代码中对**SuperTextView**直接进行设置即可。\n\n#### 1.2 不简单的圆角\n![image](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.15.59.png)\n\n不同于简单的圆角，**SuperTextView**支持精确的控制圆角的位置。一个、两个、三个都没问题。一切由你掌控。\n\n#### 1.3 神奇的文字描边\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.16.13.png)\n\n文字描边从未如此简单！\n\n#### 1.4 高效的状态图\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/屏幕快照%202017-04-18%2008.16.22.png)\n\n不同于原生的Drawable，**SuperTextView**对于Drawable提供了更多精细化的控制操作。你能够轻松的指定Drawable大小以及位置，只需一个属性就能搞定。\n\n相信你一定深有感触，想要实现上图中的效果，往往需要嵌套多层布局(一般3层吧？)。而**SuperTextView**只需一个控件，并且十分简单高效的就能实现。它能够大量的减少你的App中的布局复杂程度，减少视图树的绘制时间。\n\n### 2 炸裂的Adjuster\n**Adjuster**被设计用来在**SuperTextView**的绘制过程中插入一些操作。这具有非常重要的意义。比如，默认实现的**DefaultAdjuster**能够动态的调整文字的大小。当然，你可以用它来实现各种各样的效果。\n\n**想要Adjuster生效，你必须调用`SuperTextView.setAutoAdjust(true)`来启用Adjuster功能。当然，你可以所以方便的停止，通过调用`SuperTextView.setAutoAdjust(false)`。并且，你需要注意调用顺序，因为一旦调用了`SuperTextView.setAutoAdjust(true)`，而Adjuster没有被设置的话，将会启用默认的`DefaultAdjuster`(它能够动态的调整文字大小)，直到你设置了你自己的Adjuster**\n\n#### 2.1 干预控件的绘制\n实现一个Adjuster需要继承SuperTextView.Adjuster，并且实现`adjust(SuperTextView v, Canvas canvas)`方法。Adjuster.adjust()会在每次绘制过程中被调用，这意味着你能够不可思议的从外部干预控件的绘制过程。\n\n```\npublic class YourAdjuster extends SuperTextView.Adjuster {\n\n  @Override\n  protected void adjust(SuperTextView v, Canvas canvas) {\n    //do your business。\n  }\n\n}\n```\n\n**注意，如果开启动画，你必须十分谨慎的编写adjuster()中的代码。因为动画会以60帧/每秒的速度进行绘制。这意味着，这个方法每秒会被调用60次！所以，千万不要在这个方法中重复的创建对象，会卡爆的！原因是短时间的大量将会引起【内存抖动】，导致GC频繁发生。相关知识你可以看看我的这两篇文章：**\n- [【Android内存基础——内存抖动http://www.jianshu.com/p/69e6f894c698】](http://www.jianshu.com/p/69e6f894c698)\n- [【用两张图告诉你，为什么你的App会卡顿?http://www.jianshu.com/p/df4d5ec779c8】](http://www.jianshu.com/p/df4d5ec779c8)\n\n\n#### 2.2 响应触摸事件\n\n如果你重载Adjuster的`onTouch(SuperTextView v, MotionEvent event)`方法，你将能够获得**SuperTextView**的触摸事件。这是重要的一点，如果你想持续的对**SuperTextView**的触摸事件进行处理，你必须使`onTouch()`返回true。否则你只能接收到一个ACTION_DOWN事件，而不是一个事件流。\n\n```\npublic class YourAdjuster extends SuperTextView.Adjuster {\n\n  @Override\n  protected void adjust(SuperTextView v, Canvas canvas) {\n    //do your business。\n  }\n\n  @Override\n  public boolean onTouch(SuperTextView v, MotionEvent event) {\n    //you can get the touch event.\n    //If want to get a series of touch event, you must return true here.\n  }\n\n}\n```\n\n#### 2.3 如此惊艳的效果\n\n得益于**SuperTextView**内置的动画驱动，你能够结合Adjuster来实现难以置信的动画效果。一切只需要在你合理的编写好Adjuster后，调用`startAnim()`和`stopAnim()`来启动／停止动画。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/SuperTextView.gif)\n\n如你所见，上面的效果就是通过Adjuster来实现的。并且这种**拔插式**的设计，使得你能够随时在同一个**SuperTextView**上使用新的Adjuster，你所有需要做的事情就是创建一个新的Adjuster，然后调用`setAdjuster()`。\n\n之前`@Alex_Cin`希望看到Ripple涟漪效果，所以在`RippleAdjuster.java`中，我演示了如何使用Adjuster和动画驱动配合实现上图的Rippler涟漪效果。[【RippleAdjuster.java链接：https://github.com/chenBingX/SuperTextView/blob/master/app/src/main/java/com/coorchice/supertextview/SuperTextView/Adjuster/RippleAdjuster.java】](https://github.com/chenBingX/SuperTextView/blob/master/app/src/main/java/com/coorchice/supertextview/SuperTextView/Adjuster/RippleAdjuster.java)\n\n看，你可以使用Adjuster实现自己的Ripple效果。\n\n#### 2.4 指定Adjuster的层级\n**Adjuster**贴心的设计了控制作用层级的功能。你可以通过`Adjuster.setOpportunity(Opportunity opportunity)`来指定Adjuster的绘制层级。\n\n在**SuperTextView**中，绘制层级被从下到上分为：背景层、Drawable层、文字层3个层级。通过Opportunity来指定你的Adjuster想要插入到那个层级间。\n\n```\npublic enum Opportunity {\n      BEFORE_DRAWABLE, //背景层和Drawable层之间\n      BEFORE_TEXT,     //Drawable层和文字层之间\n      AT_LAST          //最上层\n}\n```\n\n三种类型的Opportunity示意图。\n\n![](https://raw.githubusercontent.com/chenBingX/img/master/stv/Opportunity.png)\n\n默认值是`Opportunity.BEFORE_TEXT`。即第二张图的示例。\n\n事实上，只要你愿意，**SuperTextView**就相当于一张画布，你可以在上面任意的挥洒你的创意。它能够让你专注于创作，而不用去在意编写那些无用麻烦的代码。\n\n现在，你可以开始使用**SuperTextView**了。\n\n> - 如果你喜欢 [**SuperTextView**](https://github.com/chenBingX/SuperTextView)，希望能到 [**Github**](https://github.com/chenBingX/SuperTextView) 点个 **star** [🌟](https://github.com/chenBingX/SuperTextView) 哦！\n\n> - 此外，**CoorChice** 会不定期的在博客平台分享干货，内容包括 **Android 相关技术**、**机器学习**、**算法**、**新的技术**，以及**一些对个人发展提升的感悟和思考**。快进入 [CoorChice的【个人主页】](https://juejin.im/user/57fc43b67db2a200595ffd94) 关注一波吧。\n\n> - SuperTextView 指定官方交流群：***775951525***\n\n# License\n\n\n    Copyright 2017 CoorChice\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "SuperTextView-doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.677734375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        //noinspection GradleDynamicVersion\n        classpath 'com.android.tools.build:gradle:3.3.0'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include ':app', ':library'\n"
        }
      ]
    }
  ]
}