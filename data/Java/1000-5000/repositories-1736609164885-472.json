{
  "metadata": {
    "timestamp": 1736609164885,
    "page": 472,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "requery/requery",
      "stars": 3137,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.080078125,
          "content": ".gradle\n/local.properties\n/.idea\n/.idea/libraries\n.DS_Store\n/build\n/captures\n*.iml"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.65625,
          "content": "language: android\nsudo: required\ndist: precise\ngroup: edge\njdk:\n  - oraclejdk8\n\nandroid:\n  components:\n    - tools\n    - build-tools-28.0.3\n    - android-28\n    - extra\n\nservices:\n  - postgresql\n  - mysql\n\nbefore_cache:\n  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock\ncache:\n  directories:\n    - $HOME/.gradle/caches/\n    - $HOME/.gradle/wrapper/\n\nbefore_script:\n  - mysql -e \"create database if not exists testdb;\" -uroot\n  - psql -c 'create database testdb;' -U postgres\n  - echo no | android create avd --force -n test -t android-21 --abi armeabi-v7a\n  - emulator -avd test -no-audio -no-window &\n  - android-wait-for-emulator\n  - adb shell input keyevent 82 &\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.943359375,
          "content": "Change Log\n==========\n\n## 1.6.1\n\n- Fix Model file generated in wrong package in certain cases\n- Fix Android SqlCipherDatabaseSource not extendable\n\n## 1.6.0\n\n- Java 9 use new @Generated annotation\n- RxJava 1.0 support removed\n- Generate error if setter present for read-only field\n- SQLServer default map dates to datetime2 instead of timestamp\n- PostgresSQL fix default UUID type mapping\n- Android support AndroidX libraries\n- Add Spring boot example\n\n## 1.5.1\n\n- Add min/max to base expression functions\n- Add factory methods for creating different numeric type Named Expressions\n- EnumConverter uses name() for string conversion instead of toString()\n\n## 1.5.0\n\n- Deprecates RxJava 1.0 support in order to bring improvements to RxJava 2.0 support in a future version\n- Default indexes now include table name in the index name\n- Support setting generated member visibility (for removing synthetic accessors)\n- Support package private code generation for reduced method count on Android\n- Fix NoSuchElementException during table generation of an entity with no keys\n- Fix Android proguard rules\n- Fix EntityDataStore synchronization that could dead lock\n- Fix inserting empty collection returning null key set\n- Fix Kotlin ClassCastException when using long/int key types in the insert returning query\n- Fix CloseableIterator accumulation when using Result functions\n- Fix Connection not closed when exception thrown from a raw query \n\n## 1.4.1\n\n- Support accessing the Configuration instance from EntityDataStore\n- Support setting generated member visibility (for removing synthetic accessors)\n- Support accessing Transaction instance from KotlinReactiveEntityStore\n- PostgresSQL store blobs as bytea\n- Fix foreign key support in Android sqlcipher/sqlite-support\n- Fix stack overflow on bi-directional attributes in EnityProxy.toString\n- Fix references cascaded even if Cascade.NONE specified\n- Fix NoSuchMethodError when converting a entity with @Embedded types to json\n- Fix Observables not triggered for insert operations \n- Fix @Transient annotation not applied to methods\n- Fix @Transient members were checked for reserved works\n- Fix Connection instance not closed on transaction rollback\n\n## 1.4.0\n\n- Support item view types in Android RecyclerView adapter\n- Support withTransaction overloads for Kotlin entity stores\n- Support guava/streamsupport Optional types\n- Rx support transaction methods modified to update in a more expected way\n- Fix default value usage in inserts\n- Fix aliased expression not usable in orderby clause\n- Fix collection getters not used in Jackson serialization\n- Fix collection modification behavior\n- Fix cases where duplicate entity attributes would be generated\n- Fix MutableResult not usable in an entity definition \n- Fix Android unique column not being able to be added in an upgrade\n- Fix Kotlin Update.set() method property support\n\n## 1.3.2\n\n- Fix Rx observable changes not triggered for nested transactions\n- Fix query table auto aliases removed in union statement\n- Fix CascadeAction.NONE having no effect during a insert/update/delete\n\n## 1.3.1\n\n- Support Logical NOT operator\n- Support Converter for java.util.Currency\n- Fix non-null reference returned for null foreign key reference on entity retrieval \n- Fix column transformers not used when aliasing columns\n- Fix ConnectionPoolDataSource not used in ConnectionProvider\n- Fix Read only values not filtered from insert/update operations\n- Fix Android schema upgrade using not yet created indexes  \n- Fix Android incorrect concurrent access of DateFormat instance \n- Fix Android QueryLoader closed previous result instance\n- Fix processing error generated for @Transient entity not used in a relationship\n- Fix Kotlin EntityDataStore inner instance not exposed\n\n## 1.3.0\n\n- Support @Superclass hierarchies  \n- Support @Embedded types in Jackson serialization\n- Support mixed Kotlin queries (note this is an API change to Kotlin partial select statements)\n- Fix incorrect join alias generated in query\n- Fix Android gradle plugin update 2.3.0 not working with entities using databinding\n- Fix Kotlin insert into select query\n- Fix non-null constraint not generated on Postgres\n- Fix @View entities created as tables during schema generation\n\n## 1.2.1\n\n- Support row value expressions\n- Support generating entities from Kotlin abstract classes\n- Support Kotlin 1.1\n- Fix handling of self referencing Many-to-Many relationship\n- Fix Android table/column name transformers not used during upgrade\n- Fix use AutoValue builder setters if available\n- Fix @Value.Default handling for immutable.org types\n- Fix deleting entities from a One-To-Many when using delete(Iterable)\n- Kotlin fix varargs in raw query not expanded\n- Kotlin fix ClassCastException when using a join clause\n\n## 1.2.0\n\n- Support Jackson serialization with a new Jackson serialization module (requery-jackson)\n- Support insert into select query\n- Support additional query functions\n- Support improved for Immutable.org types\n- Fix unique constraints not applied during table generation\n- Fix closing connection/statement if an exception is thrown during prepare\n- Fix ClassCastException when using a function in a where expression\n- Fix NPE when a junction table contains a non-associative attribute\n- Fix unsupported on update clause generated when using an Oracle database \n- Fix Kotlin EntityStore delete should return a nullable type\n\n## 1.1.2\n\n- Support @View annotation for mapping entities to table views\n- Fix runInTransaction rollback behavior\n- Fix add column not added to foreign key during table upgrade\n- Fix function expression in order by column caused incorrect sql generation\n- Fix rx observableResult not triggered for multiple entity delete\n- Fix OptimisticLockException when updating an entity with a @Version column\n- Fix Kotlin select distinct query\n- Fix Android incompatible date types, now stored as ISO 8601\n- Fix update listener not invoked for some upsert calls\n\n## 1.1.1\n\n- Support new KotlinReactiveEntityStore/KotlinRxEntityStore for RxJava 2.0 & RxJava 1.0\n- Support improved compile errors when an invalid relationship is defined\n- Support improved handling of entity associations marked with @Key\n- Support kotlin-kapt plugin for annotation processing\n- Support kotlin raw queries\n- Fix incorrect type in raw queries for integer values on Oracle\n- Fix Java 8 date time conversion for zoned times\n- Fix empty index name during table generation\n- Fix ClassCastException when using a custom converter that converted to a collection in a query\n- Fix NPE when using non relational attributes in a junction table\n- Fix Kotlin withTransaction rollback\n- Fix Kotlin join on condition incorrect sql generated\n\n## 1.1.0\n\n- Support extendable query types. RxJava and RxJava 2.0 result conversion methods are now separated\ninto different classes. This is a minor API change that should not effect most code.\n- Support [Reactor Core extensions](http://projectreactor.io)\n- Support custom column definitions for table generation\n- Support for @Entity(copyable) shallow copying via generated copy() method\n- Kotlin findByKey returns nullable value\n- Fix ClassNotFoundException referencing a RxJava 1.0 class when using RxJava 2.0\n- Fix OneToMany cascaded elements incorrectly updated instead of inserted\n- Fix stackoverflow in ManagedTransaction.begin()\n- Fix foreign key support using Android SQLCipher database\n- Fix multiple blob arguments in Android query expression\n- Fix some compilation issues using Android Jack compiler\n\n## 1.0.2\n\n- Support repeated @Embedded fields\n- Support RxJava 2.0 maybe operator\n- Fix null TypeElement when using Android Jack compiler\n- Fix parentheses in nested conditional expressions\n- Fix parameter name ordering for kotlin data classes\n- Fix reserved name field names generated from properties\n- Fix incorrect behavior of Rx runInTransaction\n- Fix stack overflow in Kotlin refreshAll\n- Fix OrderBy attribute name prefix not removed\n\n## 1.0.1\n\n- Support multi-column unique indexes\n- Support delete on entities with no key\n- Fix EntityStore.insert method returning generated keys transaction not committed\n- Fix Android proguard rules for RxJava 2.0\n- Fix Android sqlite blob query arguments not working\n- Fix Android onCreateMapping invocation for SqlitexDatabaseSource\n- Fix Kotlin type variance parameter on join queries\n- Fix m prefixed member name not removed in generated setMappedAttribute\n\n## 1.0.0\n\n- Support for RxJava 2.0\n- Support update on specific attributes\n- Support insert with default values\n- Support Kotlin 1.0.4\n- Fix Android mapping support for BigDecimal\n- Fix cascading Many-to-Many inserts\n\n## 1.0.0-rc4\n\n- Fix compilation of certain queries under Java 8\n- Fix Android Uri converter not applied\n- Fix multiple model definitions inside the same java package\n- Fix member prefixes in Attribute static field names not removed\n- Fix Kotlin attribute missing declared type definitions\n\n## 1.0.0-rc3\n\n- Support embeddable AutoValue types\n- Fix Kotlin processing of interfaces containing companion objects\n- Fix Kotlin query matching attributes to property names\n- Fix Kotlin unsupported method names on Android \n- Fix multiple column unique constraint\n\n## 1.0.0-rc2\n\n- Support custom function calls on expressions in generated sql\n- Support @Superclass on interface entity types\n- Fix @Transient property not generated when using an interface entity type\n- Fix @JunctionTable.type() error during processing\n- Fix @JunctionTable custom column referencedColumn not used\n\n## 1.0.0-rc1\n\n- Kotlin module\n- Support global custom table / column naming\n- Fix self referencing table when used in a relationship\n- Fix relational column ordering when using a set\n\n## 1.0.0-beta23\n\n- Support global entity state change listeners\n- Support Tuple result in Android query adapter\n- Fix NPE in query generation for MS SQL\n- Fix read timeout on Android when using toSelfObservable\n- Fix reserved name checks for table & column names\n\n## 1.0.0-beta22\n\n- Support Rx type changes for update queries\n- Fix RowCountException when deleting cascading entity\n- Fix ClassCastException when using CompositeKey\n\n## 1.0.0-beta21\n\n- Support for @Embedded types\n- Support 'is' prefix for boolean getters\n- Support compile time validation of many-to-one & one-to-many mapping\n- Fix possible Constraint violation in One-to-Many insert\n- Fix invalid UUID conversion\n- Fix query/update of a relational field that is also used as a key\n\n## 1.0.0-beta20\n\n- Fix possible StackOverflow in One-to-Many insert\n- Fix possible closed Result in toObservable()\n- Fix ClassCastException for key attributes that are also entity references\n- Fix Android default proguard rules for SQLCipher/SQLite support\n\n## 1.0.0-beta19\n\n- Support self referential entity types\n- Fix cascading upsert for relational entities\n- Fix foreign key column not included in default selection in some cases\n- Fix findByKey defaults to returning null if entity not present\n- Fix Android default proguard rules\n\n## 1.0.0-beta18\n\n- Support relational type changes in rx toSelfObservable\n- Fix @Entity.name not taking effect for the generated class name\n- Fix cascading upsert for relational entities\n- Fix entity state listeners not add from @Superclass types\n- Fix annotations only looked up when added directly from the annotation processor\n- Fix Type.singleKeyAttribute not available until keyAttributes was called\n\n## 1.0.0-beta17\n\n- Support @OrderBy annotation for ordering relations in entities\n- Support separate query expression for foreign keys using the key raw type\n- Support @JunctionTable#type value that allows the junction table to be manually specified\n- Fix @Superclass non-annotated fields/methods ignored\n- Fix issues when generating from an Kotlin interface/data class\n\n## 1.0.0-beta16\n\n- Support generating entity types from Kotlin abstract and data classes\n- Support non integer key types in generated join tables\n- Support @CheckReturnValue to add IDE warnings for methods that require additional calls\n- Support iterable overloads for update/upsert\n- Support additional validations of @OneToOne relationships\n- Fix stackoverflow exception in cascade reference\n- Fix null mapping instance in reader/writer classes in certain cases\n\n## 1.0.0-beta15\n\n- Fix generated SQL incorrect in some non-US locales\n- Fix several issues when using immutable types\n- Fix RxJava type changes not serialized\n- Fix Android library publish\n- Fix Android table not existing error on database first created w/ WAL mode\n\n## 1.0.0-beta14\n\n- Support for generating mappings for final/non-extendable classes\n- Support raw query parameter expansion\n- Fix cascade saving of entities in update\n- Fix upsert for CompletableEntityStore\n- Fix entity parceling on Android\n\n## 1.0.0-beta13\n\n- Support non observable collections in relations\n- Annotation processor dependencies shadowed to prevent conflicts with other libraries\n\n## 1.0.0-beta12\n\n- Support for Android SQLite support library\n- Support table creation mode in Android for development\n- Fix @Converter implementations using generic types\n- Fix cascade saving of foreign key references\n- Fix missing sources for requery-android artifact\n\n## 1.0.0-beta11\n\n- Support for Upserts\n- Support for raw queries\n- Fix cascading insert/updates based on primary key presence\n\n## 1.0.0-beta10\n\n- Support for multi-column indexes\n- Support on update referential action for foreign key annotation\n- Fix for checking type hierarchy for superclass elements\n- Fix missing space in sub select query alias\n\n## 1.0.0-beta9\n\n- Support substr() function\n- Support sub selects in join queries\n- Support generation of metadata only classes\n\n## 1.0.0-beta8\n\n- Support foreign key references in queries\n- Fix create result iterator only when Observable is subscribed\n\n## 1.0.0-beta7\n\n- Support @Superclass and @MappedSuperclass entity inheritance\n- Fix Observable not triggered when deleting a entity\n\n## 1.0.0-beta6\n\n- Change behavior of toSelfObservable to use PublishSubject\n\n## 1.0.0-beta5\n\n- Support primitive byte type specialization\n\n## 1.0.0-beta4\n\n- Support query expressions on right side of conditions\n- Fix missing imports in generated code\n\n## 1.0.0-beta3\n\n- Support for @AutoValue types\n\n## 1.0.0-beta2\n\n- Support SQLCipher on Android\n\n## 1.0.0-beta1\n\n- Initial beta release"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7412109375,
          "content": "Contributing\n============\n\nContributions are welcome. In order to contribute first fork the repository and create a pull\nrequest. For large changes or those that have design impact it is best to create an issue and\npropose the change first.\n\nWhen submitting a PR the request will be automatically built and tested in a CI environment.\nHowever the CI tests do not test all functionality and additional checks maybe required\ndepending on the change before it can be merged. Additional tests should be provided for any new\nfunctionality.\n\nFollow the existing code style whenever possible. The code style is standard Java, 4 space indent\nwith line wrapping at 100 columns.\n\nAll contributors must accept the contribution agreement before any changes can be merged."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.484375,
          "content": "![requery](http://requery.github.io/logo.png)\n\nA light but powerful object mapping and SQL generator for Java/Kotlin/Android with RxJava and Java 8 support.\nEasily map to or create databases, perform queries and updates from any platform that uses Java.\n\n[![Build Status](https://travis-ci.org/requery/requery.svg?branch=master)](https://travis-ci.org/requery/requery)\n[![Download](https://api.bintray.com/packages/requery/requery/requery/images/download.svg)](https://bintray.com/requery/requery/requery/_latestVersion)\n\nExamples\n--------\n\nDefine entities from an abstract class:\n\n```java\n@Entity\nabstract class AbstractPerson {\n\n    @Key @Generated\n    int id;\n\n    @Index(\"name_index\")                     // table specification\n    String name;\n\n    @OneToMany                               // relationships 1:1, 1:many, many to many\n    Set<Phone> phoneNumbers;\n\n    @Converter(EmailToStringConverter.class) // custom type conversion\n    Email email;\n\n    @PostLoad                                // lifecycle callbacks\n    void afterLoad() {\n        updatePeopleList();\n    }\n    // getter, setters, equals & hashCode automatically generated into Person.java\n}\n\n```\nor from an interface:\n\n```java\n@Entity\npublic interface Person {\n\n    @Key @Generated\n    int getId();\n\n    String getName();\n\n    @OneToMany\n    Set<Phone> getPhoneNumbers();\n\n    String getEmail();\n}\n```\nor use immutable types such as those generated by [@AutoValue](https://github.com/google/auto/tree/master/value):\n\n```java\n@AutoValue\n@Entity\nabstract class Person {\n\n    @AutoValue.Builder\n    static abstract class Builder {\n        abstract Builder setId(int id);\n        abstract Builder setName(String name);\n        abstract Builder setEmail(String email);\n        abstract Person build();\n    }\n\n    static Builder builder() {\n        return new AutoValue_Person.Builder();\n    }\n\n    @Key\n    abstract int getId();\n\n    abstract String getName();\n    abstract String getEmail();\n}\n```\n(Note some features will not be available when using immutable types, see [here](https://github.com/requery/requery/wiki/Immutable-types))\n\n**Queries:** dsl based query that maps to SQL\n\n```java\nResult<Person> query = data\n    .select(Person.class)\n    .where(Person.NAME.lower().like(\"b%\")).and(Person.AGE.gt(20))\n    .orderBy(Person.AGE.desc())\n    .limit(5)\n    .get();\n```\n\n**Relationships:** represent relations more efficiently with Java 8 Streams, RxJava Observables or\nplain iterables. (sets and lists are supported to)\n\n```java\n@Entity\nabstract class AbstractPerson {\n\n    @Key @Generated\n    int id;\n\n    @ManyToMany\n    Result<Group> groups;\n    // equivalent to:\n    // data.select(Group.class)\n    // .join(Group_Person.class).on(Group_ID.equal(Group_Person.GROUP_ID))\n    // .join(Person.class).on(Group_Person.PERSON_ID.equal(Person.ID))\n    // .where(Person.ID.equal(id))\n}\n```\n\n**[Kotlin](https://github.com/requery/requery/wiki/Kotlin) specific support using property references and infix functions:**\n\n```kotlin\ndata {\n    val result = select(Person::class) where (Person::age gt 21) and (Person::name eq \"Bob\") limit 10\n}\n```\n\n**Java 8 [streams](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html):**\n\n```java\ndata.select(Person.class)\n    .orderBy(Person.AGE.desc())\n    .get()\n    .stream().forEach(System.out::println);\n```\n\n**Java 8 optional and time support:**\n\n```java\npublic interface Person {\n\n    @Key @Generated\n    int getId();\n\n    String getName();\n    Optional<String> getEmail();\n    ZonedDateTime getBirthday();\n}\n```\n\n**[RxJava](https://github.com/ReactiveX/RxJava) [Observables](http://reactivex.io/documentation/observable.html):**\n\n```java\nObservable<Person> observable = data\n    .select(Person.class)\n    .orderBy(Person.AGE.desc())\n    .get()\n    .observable();\n```\n\n**[RxJava](https://github.com/ReactiveX/RxJava) observe query on table changes:**\n\n```java\nObservable<Person> observable = data\n    .select(Person.class)\n    .orderBy(Person.AGE.desc())\n    .get()\n    .observableResult().subscribe(::updateFromResult);\n```\n\n**Read/write separation** Along with immutable types optionally separate queries (reading)\nand updates (writing):\n\n```java\nint rows = data.update(Person.class)\n    .set(Person.ABOUT, \"student\")\n    .where(Person.AGE.lt(21)).get().value();\n```\n\nFeatures\n--------\n\n- No Reflection\n- Fast startup & performance\n- No dependencies (RxJava is optional)\n- Typed query language\n- Table generation\n- Supports JDBC and most popular databases (MySQL, Oracle, SQL Server, Postgres and more)\n- Supports Android (SQLite, RecyclerView, Databinding, SQLCipher)\n- Blocking and non-blocking API\n- Partial objects/refresh\n- Upsert support\n- Caching\n- Lifecycle callbacks\n- Custom type converters\n- Compile time entity validation\n- JPA annotations (however requery is not a JPA provider)\n\nReflection free\n---------------\n\nrequery uses compile time annotation processing to generate entity model classes and mapping\nattributes. On Android this means you get about the same performance reading objects from a query\nas if it was populated using the standard Cursor and ContentValues API.\n\nQuery with Java\n---------------\n\nThe compiled classes work with the query API to take advantage of compile time generated attributes.\nCreate type safe queries and avoid hard to maintain, error prone string concatenated queries.\n\nRelationships\n-------------\n\nYou can define One-to-One, One-to-Many, Many-to-One, and Many-to-Many relations in your models using\nannotations. Relationships can be navigated in both directions. Of many type relations can be loaded\ninto standard java collection objects or into a more efficient\n[Result](http://requery.github.io/javadoc/io/requery/query/Result.html) type.\nFrom a [Result](http://requery.github.io/javadoc/io/requery/query/Result.html)\neasily create a Stream, RxJava Observable, Iterator, List or Map.\n\nMany-to-Many junction tables can be generated automatically. Additionally the relation model is\nvalidated at compile time eliminating runtime errors.\n\nvs JPA\n------\n\nrequery provides a modern set of interfaces for persisting and performing queries. Some key\ndifferences between requery and JPA providers like Hibernate or EclipseLink:\n\n- Queries maps directly to SQL as opposed to JPQL.\n- Dynamic Queries easily done through a DSL as opposed to the verbose `CriteriaQuery` API.\n- Uses easily understandable extended/generated code instead of reflection/bytecode weaving for\n  state tracking and member access\n\nAndroid\n-------\n\nDesigned specifically with Android support in mind. See [requery-android/example](https://github.com/requery/requery/tree/master/requery-android/example)\nfor an example Android project using databinding and interface based entities. For more information\nsee the [Android](https://github.com/requery/requery/wiki/Android) page.\n\nSupported Databases\n-------------------\nTested on some of the most popular databases:\n\n- PostgresSQL (9.1+)\n- MySQL 5.x\n- Oracle 12c+\n- Microsoft SQL Server 2012 or later\n- SQLite (Android or with the [xerial](https://github.com/xerial/sqlite-jdbc) JDBC driver)\n- Apache Derby 10.11+\n- H2 1.4+\n- HSQLDB 2.3+\n\nJPA Annotations\n---------------\n\nA subset of the JPA annotations that map onto the requery annotations are supported.\nSee [here](https://github.com/requery/requery/wiki/JPA-Annotations) for more information.\n\nUpserts\n-------\n\nUpserts are generated with the appropriate database specific query statements:\n- Oracle/SQL Server/HSQL: `merge into when matched/not matched`\n- PostgresSQL: `on conflict do update` (requires 9.5 or later)\n- MySQL: `on duplicate key update`\n\nUsing it\n--------\n\nVersions are available on bintray jcenter / maven central.\n\n```gradle\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    compile 'io.requery:requery:1.6.1'\n    compile 'io.requery:requery-android:1.6.1' // for android\n    annotationProcessor 'io.requery:requery-processor:1.6.1'\n}\n```\n\nFor information on gradle and annotation processing & gradle see the [wiki](https://github.com/requery/requery/wiki/Gradle-&-Annotation-processing#annotation-processing).\n\nLicense\n-------\n\n    Copyright (C) 2019 requery.io\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 4.048828125,
          "content": "apply plugin: 'java'\napply plugin: 'idea'\napply plugin: 'maven-publish'\n\nbuildscript {\n    ext.android_buildtools_version = '28.0.3'\n    ext.androidx_version = '1.0.0'\n    ext.jackson_version = '2.8.6'\n    ext.jpa_version = '2.1.1'\n    ext.kotlin_version = '1.3.11'\n    ext.rxjava2_version = '2.2.3'\n    ext.reactor_version = '3.2.2.RELEASE'\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"org.jetbrains.dokka:dokka-gradle-plugin:0.9.8\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }\n    }\n}\n\nidea {\n    project {\n        jdkName = '1.8'\n    }\n}\n\ngroup = 'io.requery'\nversion = '1.6.1'\ndescription = 'A light but powerful object mapper and SQL generator for Java/Android'\n\nProperties properties = new Properties()\nFile localProperties = project.rootProject.file('local.properties')\nif (localProperties.exists()) {\n    properties.load(localProperties.newDataInputStream())\n}\n\nconfigure([project(':requery'), project(':requery-processor'), project(':requery-kotlin'), project(':requery-jackson')]) {\n    apply plugin: 'java'\n    apply plugin: 'maven-publish'\n\n    javadoc.options.links(\"http://docs.oracle.com/javase/8/docs/api/\");\n\n    task sourcesJar(type: Jar, dependsOn: classes) {\n        classifier = 'sources'\n        from sourceSets.main.allSource\n    }\n\n    task javadocJar(type: Jar, dependsOn: javadoc) {\n        classifier = 'javadoc'\n        from javadoc.destinationDir\n    }\n\n    publishing {\n        publications {\n            maven(MavenPublication) {\n                from components.java\n                groupId rootProject.group\n                artifactId project.name\n                version rootProject.version\n\n                artifact sourcesJar\n                artifact javadocJar\n\n                pom.withXml {\n                    asNode().children().last() + project.pomXml\n                }\n            }\n        }\n\n        repositories {\n            maven {\n                credentials {\n                    username = bintray.user\n                    password = bintray.key\n                }\n                url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'\n            }\n        }\n    }\n}\n\nconfigure([project(':requery'), project(':requery-processor'), project(':requery-android'), project(':requery-kotlin'), project(':requery-jackson')]) {\n    apply plugin: 'com.jfrog.bintray'\n\n    bintray {\n        user = properties.getProperty('bintray.user')\n        key = properties.getProperty('bintray.apikey')\n        publications = ['maven']\n        pkg {\n            repo = 'requery'\n            name = 'requery'\n            userOrg = 'requery'\n            licenses = ['Apache-2.0']\n            vcsUrl = 'https://github.com/requery/requery.git'\n            version {\n                name = rootProject.version\n                desc = rootProject.description\n                released  = new Date()\n            }\n        }\n    }\n\n    ext {\n        pomXml = {\n            resolveStrategy = Closure.DELEGATE_FIRST\n            name project.name\n            description project.description ?: rootProject.description\n            url 'https://github.com/requery/requery'\n            scm {\n                url 'https://github.com/requery/requery.git'\n                connection 'scm:git:git://github.com/requery/requery.git'\n                developerConnection 'scm:git:git@github.com/requery/requery.git'\n            }\n            licenses {\n                license {\n                    name 'The Apache Software License, Version 2.0'\n                    url 'http://www.apache.org/license/LICENSE-2.0.txt'\n                    distribution 'repo'\n                }\n            }\n            developers {\n                developer {\n                    id 'npurushe'\n                    name 'Nikhil Purushe'\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.107421875,
          "content": "org.gradle.configureondemand=false\nandroid.useAndroidX=true\nandroid.enableJetifier=true\nandroid.enableR8=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.20703125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "requery-android",
          "type": "tree",
          "content": null
        },
        {
          "name": "requery-jackson",
          "type": "tree",
          "content": null
        },
        {
          "name": "requery-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "requery-processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "requery-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "requery",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.3359375,
          "content": "rootProject.name = 'requery-persistence'\ninclude ':requery'\ninclude ':requery-processor'\ninclude ':requery-test'\ninclude ':requery-android'\ninclude ':requery-android:example'\ninclude ':requery-android:example-kotlin'\ninclude ':requery-jackson'\ninclude ':requery-kotlin'\ninclude ':requery-test:kotlin-test'\ninclude ':requery:example-springboot'\n"
        }
      ]
    }
  ]
}