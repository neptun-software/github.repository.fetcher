{
  "metadata": {
    "timestamp": 1736608939176,
    "page": 138,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dreamhead/moco",
      "stars": 4384,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1142578125,
          "content": ".gradle\ntarget\nbuild\n*.iml\n*.ipr\n*.iws\nout\nreports\n.DS_Store\n.idea\n.gradletasknamecache\n*.output\n.gmoco_pid\ngmoco.log"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2177734375,
          "content": "dist: xenial\nlanguage: java\njdk:\n#  - oraclejdk8\n  - openjdk8\n  - oraclejdk11\n  - openjdk11\n#  - oraclejdk7\n#  - openjdk7\n#  - openjdk6\n\nscript:\n  \"./gradlew check -i\"\n\naddons:\n  hosts:\n    - mocobuild\n  hostname: mocobuild"
        },
        {
          "name": "MIT-LICENSE.txt",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\nCopyright (c) 2012-2022 ZHENG Ye\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.14453125,
          "content": "<img src=\"moco-doc/DukeChoice-960x90-lm.png?raw=true\">\n\n<a href=\"https://github.com/dreamhead/moco\">\n  <img src=\"moco-doc/moco.png?raw=true\" width=\"100px\">\n</a>\n\n# [Moco](https://github.com/dreamhead/moco) \n[![Build](https://github.com/dreamhead/moco/actions/workflows/build.yaml/badge.svg)](https://github.com/dreamhead/moco/actions/workflows/build.yaml)\n[![HitCount](http://hits.dwyl.com/dreamhead/moco.svg?style=flat-square)](http://hits.dwyl.com/dreamhead/moco)\n\nMoco is an easy setup stub framework.\n\n## Latest Release\n* [![Maven Central](https://img.shields.io/maven-central/v/com.github.dreamhead/moco-core.svg?label=Maven%20Central)](https://central.sonatype.com/artifact/com.github.dreamhead/moco-core)\n* [Release Notes](moco-doc/ReleaseNotes.md)\n\n## User Voice\n* [Let me know](https://jinshuju.net/f/Agawf9) if you are using Moco.\n* Join Moco [mailing list](https://groups.google.com/forum/#!forum/moco-stub) to discuss.\n\n## Why\nIntegration, especially based on HTTP protocol, e.g. web service, REST etc, is wildly used in most of our development.\n\nIn the old days, we just deployed another WAR to an application server, e.g. Jetty or Tomcat etc. As we all know, it's so boring to develop a WAR and deploy it to any application server, even if we use an embeded server. And the WAR needs to be reassembled even if we just want to change a little bit.\n\n## Quick Start\n* Download [Standalone Moco Runner](https://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/1.5.0/moco-runner-1.5.0-standalone.jar)\n* Write your own configuration file to describe your Moco server configuration as follow:\n```json\n[\n  {\n    \"response\" :\n      {\n        \"text\" : \"Hello, Moco\"\n      }\n  }\n]\n```\n(foo.json)\n\n* Run Moco HTTP server with the configuration file.\n```shell\njava -jar moco-runner-<version>-standalone.jar http -p 12306 -c foo.json\n```\n\n* Now, open your favorite browser to visit http://localhost:12306 and you will see \"Hello, Moco\".\n\n## Documents\n* More [Usages](moco-doc/usage.md)\n* Detailed [HTTP APIs](moco-doc/apis.md) or [Socket APIs](moco-doc/socket-apis.md)\n* Detailed [REST API](moco-doc/rest-apis.md)\n* Detailed [Websocket API](moco-doc/websocket-apis.md)\n* [Global Settings](moco-doc/global-settings.md) for multiple configuration files.\n* [Command Line Usages](moco-doc/cmd.md)\n* [Extend Moco](moco-doc/extending.md) if current API does not meet your requirement.\n\n## Build\nMake sure you have JDK and Gradle installed.\n\n* Clone Moco\n\n```shell\ngit clone git@github.com:dreamhead/moco.git\n```\n* Build Moco\n\n```shell\n./gradlew build\n```\n* Build uberjar\n\n```shell\n./gradlew uberjar\n```\n* Check code before commit\n\n```shell\n./gradlew check\n```\n\n## Contributing\nCheck out what you can help [here](moco-doc/plan.md) if you do not have any existing idea.\n\n## Copyright and license\nCopyright 2012-2023 ZHENG Ye\n\nLicensed under MIT License (the \"License\"); You may obtain a copy of the License in the LICENSE file, or at:\n\nhttps://raw.github.com/dreamhead/moco/master/MIT-LICENSE.txt\n\n## Powered By\n\n<img src=\"moco-doc/logo_intellij_idea.png?raw=true\">\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=dreamhead/moco&type=Date)](https://star-history.com/#dreamhead/moco&Date)\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 5.6982421875,
          "content": "allprojects {\n    apply plugin: 'idea'\n    apply plugin: 'signing'\n    apply plugin: 'maven-publish'\n}\n\nidea {\n    project {\n        jdkName = JavaVersion.VERSION_1_8\n        languageLevel = JavaVersion.VERSION_1_8\n\n        vcs = \"Git\"\n    }\n\n    workspace.iws.withXml { provider ->\n        def junitDefaults = provider.node.component.find { it.@name == 'RunManager' }.configuration.find {\n            it.@type == 'JUnit'\n        }\n        junitDefaults.option.find { it.@name == 'WORKING_DIRECTORY' }.@value = '$MODULE_DIR$'\n    }\n}\n\nsubprojects {\n    apply plugin: 'java-library'\n    group = 'com.github.dreamhead'\n    version = '1.5.0'\n\n    java {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n        withSourcesJar()\n        withJavadocJar()\n    }\n\n    repositories {\n        mavenCentral()\n    }\n\n    publishing {\n        publications {\n            mavenJava(MavenPublication) {\n                groupId = project.group\n                artifactId = project.name\n                version = project.version\n\n                from components.java\n\n                pom {\n                    name = project.name\n                    description = 'Moco is an easy setup stub framework, mainly focusing on testing and integration.'\n                    url = 'https://github.com/dreamhead/moco'\n                    licenses {\n                        license {\n                            name = 'MIT Licence'\n                            url = 'https://raw.githubusercontent.com/dreamhead/moco/master/MIT-LICENSE.txt'\n                        }\n                    }\n                    developers {\n                        developer {\n                            id = 'dreamhead'\n                            name = 'Zheng Ye'\n                            email = 'dreamhead.cn@gmail.com'\n                        }\n                    }\n                    scm {\n                        connection = 'https://github.com/dreamhead/moco.git'\n                        developerConnection = 'https://github.com/dreamhead/moco.git'\n                        url = 'https://github.com/dreamhead/moco'\n                    }\n                }\n            }\n        }\n\n        repositories {\n            maven {\n                def releasesRepoUrl = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n                def snapshotsRepoUrl = \"https://oss.sonatype.org/content/repositories/snapshots\"\n                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n                credentials {\n                    username = sonatypeUsername\n                    password = sonatypePassword\n                }\n            }\n        }\n    }\n\n    signing {\n        sign publishing.publications.mavenJava\n    }\n\n    project.jar {\n        manifest {\n            attributes 'Package': \"com.github.dreamhead\",\n                    'Implementation-Title': \"${project.name}\",\n                    'Implementation-Version': \"${archiveVersion.get()}\",\n                    'Implementation-Vendor': 'Zheng Ye',\n                    'Built-By': 'Zheng Ye',\n                    'Built-Date': new Date().getDateTimeString(),\n                    'Built-With': \"gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}\",\n                    'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'\n        }\n    }\n\n    project.dependencies {\n        implementation(\n                \"com.google.guava:guava:$guavaVersion\",\n                \"io.netty:netty-codec-http:$nettyVersion\",\n                \"io.netty:netty-handler:$nettyVersion\",\n                \"com.fasterxml.jackson.core:jackson-databind:$jacksonVersion\",\n                \"com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion\",\n                \"org.apache.httpcomponents.client5:httpclient5:$httpClientVersion\",\n                \"com.jayway.jsonpath:json-path:$jsonpathVersion\",\n                \"org.freemarker:freemarker:$freemarkerVersion\",\n                \"org.slf4j:slf4j-api:$slf4jVersion\"\n        )\n\n        testImplementation(\n                \"org.hamcrest:hamcrest-core:$hamcrestVersion\",\n                \"org.hamcrest:hamcrest-library:$hamcrestVersion\",\n                \"org.mockito:mockito-core:$mockitoVersion\",\n                \"org.apache.httpcomponents.client5:httpclient5-fluent:$httpClientVersion\",\n                \"org.skyscreamer:jsonassert:$jsonAssertVersion\",\n                \"jakarta.websocket:jakarta.websocket-api:$websocketVersion\"\n        )\n\n        testRuntimeOnly(\n                \"org.glassfish.tyrus.bundles:tyrus-standalone-client:$tyrusClientVersion\"\n        )\n    }\n\n    test {\n        testLogging {\n            afterSuite { desc, result ->\n                if (!desc.parent) { // will match the outermost suite\n                    println \"Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)\"\n                }\n            }\n        }\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs << \"-Xlint:unchecked\"\n        options.compilerArgs << \"-Xlint:deprecation\"\n        options.encoding = 'UTF-8'\n    }\n}\n\nconfigure(subprojects.findAll {!it.name.startsWith(\"moco-junit\")}) {\n    dependencies {\n        testImplementation(\n                \"org.junit.jupiter:junit-jupiter-api:$junitVersion\",\n                \"org.junit.jupiter:junit-jupiter-engine:$junitVersion\",\n                \"org.junit.jupiter:junit-jupiter-params:$junitVersion\"\n        )\n\n        testRuntimeOnly(\n                \"org.junit.platform:junit-platform-launcher:$junitPlatformVersion\"\n        )\n    }\n\n    test {\n        useJUnitPlatform()\n    }\n}\n\nwrapper {\n    gradleVersion = '8.7'\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.623046875,
          "content": "# Default config properties, can be overridden by ~/.gradle/gradle.properties\nsonatypeUsername=\nsonatypePassword=\norg.gradle.daemon=true\norg.gradle.jvmargs=-XX:+HeapDumpOnOutOfMemoryError -Xmx1024m -Dfile.encoding=utf-8\n\nguavaVersion=33.2.1-jre\nnettyVersion=4.1.111.Final\nslf4jVersion=2.0.13\njacksonVersion=2.17.2\njunit5BaseVersion=5.0.0\njunitVersion=5.10.2\njunitPlatformVersion=1.10.0\nhamcrestVersion=2.2\nmockitoVersion=4.11.0\nhttpClientVersion=5.1.4\njsonpathVersion=2.9.0\nfreemarkerVersion=2.3.33\njsonAssertVersion=1.5.1\nlogbackVersion=1.3.14\ncommonsCliVersion=1.8.0\nproguardVersion=7.5.0\nwebsocketVersion=2.0.0\ntyrusClientVersion=2.0.0"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.849609375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "moco-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "moco-doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "moco-junit",
          "type": "tree",
          "content": null
        },
        {
          "name": "moco-junit5",
          "type": "tree",
          "content": null
        },
        {
          "name": "moco-runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "moco-shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "proguard.pro",
          "type": "blob",
          "size": 4.1630859375,
          "content": "-printusage shrinking.output\n\n-dontobfuscate\n-dontoptimize\n\n-keepattributes *Annotation*,EnclosingMethod\n\n-keep public class com.github.dreamhead.moco.bootstrap.Main {\n    public static void main(java.lang.String[]);\n}\n\n-keep public class com.github.dreamhead.moco.parser.deserializer.*{*;}\n-keep public class com.github.dreamhead.moco.parser.model.*{*;}\n-keep public class com.github.dreamhead.moco.parser.model.websocket.*{*;}\n-keep public class com.github.dreamhead.moco.resource.reader.TemplateRequest{*;}\n-keep public class com.github.dreamhead.moco.resource.reader.TemplateRequest$TemplateClient{*;}\n-keep public class com.github.dreamhead.moco.Moco{*;}\n-keep public class com.github.dreamhead.moco.MocoRest{*;}\n-keep public class com.github.dreamhead.moco.HttpMethod{*;}\n-keep public class com.github.dreamhead.moco.Runner{*;}\n-keep public class com.github.dreamhead.moco.Runnable{*;}\n-keep public class com.github.dreamhead.moco.MocoRunner{*;}\n-keep public class com.github.dreamhead.moco.handler.*{*;}\n-keep public class com.github.dreamhead.moco.dumper.*{*;}\n-keep public class com.github.dreamhead.moco.MocoJsonRunner{*;}\n-keep public class com.github.dreamhead.moco.util.Jsons{*;}\n-keep public class com.github.dreamhead.moco.resource.Transformer{*;}\n-keep public class com.github.dreamhead.moco.runner.ShutdownRunner{\n    public int shutdownPort();\n}\n\n-keep public class org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory{*;}\n-keep public class org.apache.hc.client5.http.impl.classic.HttpClientBuilder{*;}\n-keep public class org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder{*;}\n-keep public class org.apache.hc.core5.http.message.BasicClassicHttpRequest{*;}\n-keep public class org.apache.hc.core5.http.message.BasicClassicHttpResponse{*;}\n-keep public class org.apache.hc.core5.http.io.HttpClientResponseHandler{*;}\n-keep public class org.apache.hc.client5.http.config.RequestConfig{*;}\n-keep public class org.apache.hc.client5.http.ClientProtocolException{*;}\n-keep public class org.apache.hc.client5.http.impl.classic.CloseableHttpClient{*;}\n-keep public class org.apache.hc.core5.http.ClassicHttpResponse{*;}\n-keep public class org.apache.hc.core5.http.HttpResponse{*;}\n-keep public class org.apache.hc.core5.http.HttpMessage{*;}\n-keep public class org.apache.hc.core5.http.MessageHeaders{*;}\n-keep public class org.apache.hc.core5.http.Header{*;}\n\n-keep public class com.google.common.io.Files{*;}\n-keep public class com.google.common.collect.ImmutableMultimap{*;}\n-keep public class org.slf4j.LoggerFactory{*;}\n-keep public class ch.qos.logback.**{*;}\n-keep public class org.apache.commons.logging.impl.SimpleLog{*;}\n-keep public class org.apache.commons.logging.impl.LogFactoryImpl{*;}\n-keep public class com.fasterxml.jackson.core.type.TypeReference{*;}\n\n-keepclassmembers class * extends java.lang.Enum {\n    <fields>;\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n\n-keep public class io.netty.channel.DefaultChannelPipeline{*;}\n-keep public class io.netty.handler.codec.http.cookie.DefaultCookie{*;}\n-keep public class io.netty.handler.codec.http.cookie.CookieHeaderNames{*;}\n-keep public class io.netty.handler.codec.http.cookie.CookieHeaderNames$SameSite{*;}\n-keep public class com.ctc.wstx.stax.WstxInputFactory{*;}\n-keep public class com.ctc.wstx.stax.WstxOutputFactory{*;}\n\n#jce.jar\n-dontwarn org.apache.http.impl.auth.**\n#jsse.jar\n-dontwarn org.apache.http.conn.**\n-dontwarn org.apache.http.impl.**\n\n-dontwarn io.netty.**\n-dontwarn com.jayway.jsonpath.spi.impl.JacksonProvider\n-dontwarn com.jayway.jsonpath.spi.json.JsonOrgJsonProvider\n-dontwarn com.jayway.jsonpath.spi.json.JettisonProvider**\n-dontwarn com.jayway.jsonpath.spi.json.TapestryJsonProvider\n-dontwarn com.jayway.jsonpath.spi.mapper.JsonOrgMappingProvider\n-dontwarn ch.qos.logback.core.**\n-dontwarn ch.qos.logback.classic.**\n-dontwarn freemarker.**\n-dontwarn org.slf4j.**\n-dontwarn org.apache.log4j.**\n-dontwarn org.apache.commons.logging.**\n-dontwarn com.google.**\n-dontwarn net.sf.cglib.**\n-dontwarn org.osgi.framework.**\n-dontwarn com.ctc.wstx.**\n-dontwarn jakarta.json.**\n-dontwarn org.conscrypt.**\n-dontwarn org.brotli.dec.**\n-dontwarn edu.umd.cs.findbugs.annotations.**\n-dontwarn com.sun.jna.**"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.087890625,
          "content": "rootProject.name = 'moco'\ninclude 'moco-core', 'moco-runner', 'moco-junit', 'moco-junit5'\n"
        }
      ]
    }
  ]
}