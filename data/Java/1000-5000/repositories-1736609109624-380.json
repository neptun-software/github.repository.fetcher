{
  "metadata": {
    "timestamp": 1736609109624,
    "page": 380,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yigit/android-priority-jobqueue",
      "stars": 3395,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4296875,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# release configuration\nreleaseConfig.properties\n\n# Eclipse project files\n.classpath\n.project\n.idea\n.css\n*.html\n.img\n.DS_Store\njobqueue/out\ncoverage-report\njunitvmwatcher*.properties\njobqueue/cobertura.ser\njobqueue/javadoc\nout\n*.iml\npages\n.gradle\nbuild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.4853515625,
          "content": "# This Project is Deprecated!\n\nThanks to everybody who've used Android Priority JobQueue.\nIt was designed in a world where there was no JobScheduler, RxJava was not popular and Kotlin wasn't even born publicly.\n\nToday, most of the learnings in this project are part of WorkManager, the official deferred task library for Android. I've been involved in its development and I think it is the right way to do deferred tasks on Android.\n\nFor your persistent jobs, I recommend using WorkManager.\nFor your non-persistent jobs, drink the kool aid and use Coroutines.\n\nThanks.\n\n### V2 is here!\nThere is a major internal rewrite of this project for more stability and new features. If you were using v1, see the migration guide here: [migration from v1 to v2](https://github.com/yigit/android-priority-jobqueue/wiki/V1-to-V2-migration)\n\n``` gradle\ndependencies {\n    compile 'com.birbit:android-priority-jobqueue:2.0.1'\n}\n```\n\n### Master Build Status\n[![CircleCI](https://circleci.com/gh/yigit/android-priority-jobqueue/tree/master.svg?style=svg)](https://circleci.com/gh/yigit/android-priority-jobqueue/tree/master)\n[![codecov](https://codecov.io/gh/yigit/android-priority-jobqueue/branch/master/graph/badge.svg)](https://codecov.io/gh/yigit/android-priority-jobqueue)\n\nAndroid Priority Job Queue (Job Manager)\n==========================\n\nPriority Job Queue is an implementation of a [Job Queue](http://en.wikipedia.org/wiki/Job_queue) specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.\n\nIt is written primarily with [flexibility][10] & [functionality][11] in mind. This is an ongoing project, which we will continue to add stability and performance improvements.\n\n  - [Why ?](#why-)\n   - [The Problem](#the-problem)\n   - [Our Solution](#our-solution)\n  - [Show me the code](#show-me-the-code)\n  - [Priority Job Queue vs Job Scheduler vs GCMNetworkManager vs ?](#priority-job-queue-vs-job-scheduler-vs-gcmnetworkmanager-vs-)\n  - [What's happening under the hood?](#under-the-hood)\n  - [Advantages](#advantages)\n  - [Getting Started](#getting-started)\n  - [Version History](#version-history)\n  - [Running Tests](#running-tests)\n  - [wiki][9]\n  - [Dependencies](#dependencies)\n  - [License](#license)\n\n\n### Why ?\n#### The Problem\nAlmost every application does work in a background thread. These \"background tasks\" are expected to keep the application responsive and robust, especially during unfavorable situations (e.g. limited network connectivity). In Android applications, there are several ways to implement background work:\n\n * **Async Task:** Using an async task is the simplest approach, but it is tightly coupled with the activity lifecycle. If the activity dies (or is re-created), any ongoing async task will become wasted cycles or otherwise create unexpected behavior upon returning to the main thread. In addition, it is a terrible idea to drop a response from a network request just because a user rotated his/her phone.\n * **Loaders:** Loaders are a better option, as they recover themselves after a configuration change. On the other hand, they are designed to load data from disk and are not well suited for long-running network requests.\n * **Service with a Thread Pool:** Using a service is a much better solution, as it de-couples business logic from your UI. However, you will need a thread pool (e.g. ThreadPoolExecutor) to process requests in parallel, broadcast events to update the UI, and write additional code to persist queued requests to disk. As your application grows, the number of background operations grows, which force you to consider task prioritization and often-complicated concurrency problems.\n\n#### Our Solution\nJob Queue provides you a nice framework to do all of the above and more. You define your background tasks as [Jobs][11] and enqueue them to your [JobManager][10] instance. Job Manager will take care of prioritization, persistence, load balancing, delaying, network control, grouping etc. It also provides a nice lifecycle for your jobs to provide a better, consistent user experience.\n\nAlthough not required, it is most useful when used with an event bus. It also supports dependency injection.\n\n* Job Queue was inspired by a [Google I/O 2010 talk on REST client applications][8].\n\n### Show me the code\n\nSince a code example is worth thousands of documentation pages, here it is.\n\nFile: [PostTweetJob.java](https://github.com/yigit/android-priority-jobqueue/blob/master/examples/twitter/TwitterClient/src/com/birbit/android/jobqueue/examples/twitter/jobs/PostTweetJob.java)\n``` java\n// A job to send a tweet\npublic class PostTweetJob extends Job {\n    public static final int PRIORITY = 1;\n    private String text;\n    public PostTweetJob(String text) {\n        // This job requires network connectivity,\n        // and should be persisted in case the application exits before job is completed.\n        super(new Params(PRIORITY).requireNetwork().persist());\n    }\n    @Override\n    public void onAdded() {\n        // Job has been saved to disk.\n        // This is a good place to dispatch a UI event to indicate the job will eventually run.\n        // In this example, it would be good to update the UI with the newly posted tweet.\n    }\n    @Override\n    public void onRun() throws Throwable {\n        // Job logic goes here. In this example, the network call to post to Twitter is done here.\n        // All work done here should be synchronous, a job is removed from the queue once \n        // onRun() finishes.\n        webservice.postTweet(text);\n    }\n    @Override\n    protected RetryConstraint shouldReRunOnThrowable(Throwable throwable, int runCount,\n            int maxRunCount) {\n        // An error occurred in onRun.\n        // Return value determines whether this job should retry or cancel. You can further\n        // specify a backoff strategy or change the job's priority. You can also apply the\n        // delay to the whole group to preserve jobs' running order.\n        return RetryConstraint.createExponentialBackoff(runCount, 1000);\n    }\n    @Override\n    protected void onCancel(@CancelReason int cancelReason, @Nullable Throwable throwable) {\n        // Job has exceeded retry attempts or shouldReRunOnThrowable() has decided to cancel.\n    }\n}\n\n\n```\n\nFile: [TweetActivity.java](https://github.com/yigit/android-priority-jobqueue/blob/master/examples/twitter/TwitterClient/src/com/birbit/android/jobqueue/examples/twitter/SampleTwitterClient.java#L53)\n``` java\n//...\npublic void onSendClick() {\n    final String status = editText.getText().toString();\n    if(status.trim().length() > 0) {\n      jobManager.addJobInBackground(new PostTweetJob(status));\n      editText.setText(\"\");\n    }\n}\n...\n```\n\n\nThat's it. :) Job Manager allows you to enjoy:\n\n* No network calls in activity-bound async tasks\n* No serialization mess for important requests\n* No \"manual\" implementation of network connectivity checks or retry logic\n\n### Priority Job Queue vs Job Scheduler vs GCMNetworkManager vs ?\nOn Lollipop, Android introduced [JobScheduler][14] which is a system friendly way to run non-time-critical tasks. It makes your code cleaner, makes your app a good citizen of the ecosystem and it is backported via [GCMNetworkManager][15].\n\nThe first version of Job Queue was created approximately 2 years before Job Scheduler. The major difference is that Job Queue is designed to run **all of** your background tasks while Job Scheduler is designed only for those you can defer.\n\nWe've created Job Queue because we wanted to have more control over the non-ui-thread activity of our application. We needed a convenient way to prioritize them, persist them accross application restarts and group based on the resources they access. \n\nA good practice of using Job Queue is to write **all** of your network tasks as Jobs and use **AsyncTasks** for disk access (e.g. loading data from sqlite). If you have long running background operations (e.g. processing an image), it is also a good practice to use Job Queue.\n\nStarting with **v2**, Job Queue can be integrated with JobScheduler or GCMNetworkManager. This integration allows Job Queue to wake up the aplication based on the criterias of the Jobs it has. You can see the details on the related [wiki][16] page. The Scheduler API is flexible such that you can implement a custom version of it if your target market does not have Google Play Services.\n\n### Under the hood\n* When user clicked the send button, `onSendClick()` was called, which creates a `PostTweetJob` and adds it to Job Queue for execution.\nIt runs on a background thread because Job Queue will make a disk access to persist the job.\n\n* Right after `PostTweetJob` is synchronized to disk, Job Queue calls `DependencyInjector` (if provided) which will [inject fields](http://en.wikipedia.org/wiki/Dependency_injection) into our job instance.\nAt `PostTweetJob.onAdded()` callback, we saved `PostTweetJob` to disk. Since there has been no network access up to this point, the time between clicking the send button and reaching `onAdded()` is within fractions of a second. This allows the implementation of `onAdded()` to inform UI to display the newly sent tweet almost instantly, creating a \"fast\" user experience.\nIn V1, `onAdded()` is called on the thread job was added.\nIn V2, `onAdded()` is called in JobManager's own thread.\n\n* When it's time for `PostTweetJob` to run, Job Queue will call `onRun()` (and it will only be called if there is an active network connection, as dictated at the job's constructor).\nBy default, Job Queue uses a simple connection utility that checks `ConnectivityManager` (ensure you have `ACCESS_NETWORK_STATE` permission in your manifest). You can provide a [custom implementation][1] which can\nadd additional checks (e.g. your server stability). You should also provide a [`NetworkUtil`][1] which can notify Job Queue when network\nis recovered so that Job Queue will avoid a busy loop and decrease # of consumers(default configuration does it for you).\n\n* Job Queue will keep calling `onRun()` until it succeeds (or reaches a retry limit). If `onRun()` throws an exception,\nJob Queue will call `shouldReRunOnThrowable()` to allow you to handle the exception and decide whether to retry job execution or abort.\n\n* If all retry attempts fail (or when `shouldReRunOnThrowable()` returns false), Job Queue will call `onCancel()` to allow you to clean\nyour database, inform the user, etc.\n\n### Advantages\n* It is very easy to de-couple application logic from your activities, making your code more robust, easy to refactor, and easy to **test**.\n* You don't have to deal with `AsyncTask` lifecycles. This is true assuming you use an event bus to update your UI (you should).\nAt Path, we use [greenrobot's EventBus](https://github.com/greenrobot/EventBus); however, you can also go with your favorite. (e.g. [Square's Otto] (https://github.com/square/otto))\n* Job Queue takes care of prioritizing jobs, checking network connection, running them in parallel, etc. Job prioritization is especially indispensable when you have a resource-heavy app like ours.\n* You can delay jobs. This is helpful in cases like sending a GCM token to your server. It is very common to acquire a GCM token and send it to your server when a user logs in to your app, but you don't want it to interfere with critical network operations (e.g. fetching user-facing content).\n* You can group jobs to ensure their serial execution, if necessary. For example, assume you have a messaging client and your user sent a bunch of messages when their phone had no network coverage. When creating these `SendMessageToNetwork` jobs, you can group them by conversation ID. Through this approach, messages in the same conversation will send in the order they were enqueued, while messages between different conversations are still sent in parallel. This lets you effortlessly maximize network utilization and ensure data integrity.\n* By default, Job Queue monitors network connectivity (so you don't need to worry about it). When a device is operating offline, jobs that require the network won't run until connectivity is restored. You can even provide a custom [`NetworkUtil`][1] if you need custom logic (e.g. you can create another instance of Job Queue which runs only if there is a wireless connection).\n* It is unit tested and mostly documented. You can check our [code coverage report][3] and [Javadoc][4].\n\n\n### Getting Started\nWe distribute artifacts through maven central repository.\n\n### AndroidX Version\nGradle: `compile 'com.birbit:android-priority-jobqueue:3.0.0'`\nMaven:\n\n``` xml\n<dependency>\n    <groupId>com.birbit</groupId>\n    <artifactId>android-priority-jobqueue</artifactId>\n    <version>3.0.0</version>\n</dependency>\n```\n\n#### Android Support Version\nGradle: `compile 'com.birbit:android-priority-jobqueue:2.0.1'`\nMaven:\n\n``` xml\n<dependency>\n    <groupId>com.birbit</groupId>\n    <artifactId>android-priority-jobqueue</artifactId>\n    <version>2.0.1</version>\n</dependency>\n```\n\nYou can also [download][5] library jar, sources and Javadoc from Maven Central.\n\nWe highly recommend checking how you can configure job manager and individual jobs.\n* [Configure job manager][10]\n* [Configure individual jobs][11]\n* [Review sample app][6]\n* [Review sample configuration][7]\n\n### Version History\n  - 3.0.0 (Jan 20, 2020)\n   - Updated to AndroidX dependencies\n  - 2.0.1 (Oct 11, 2016)\n   - Fixed high CPU usage if queues are full (#262)\n   - Handle bad input from job schedulers (#254)\n  - 2.0.0 (Aug 14, 2016)\n   - Validate JobManager ids\n  - 2.0.0-beta3 (Aug 7, 2016)\n   - Minor improvements in GCMNetworkManager\n  - 2.0.0-beta2 (July 25, 2016)\n   - Fixed a bug about cancelling persistent jobs (#212)\n   - Fixed a cursor leak in the persistent queue (#206)\n   - Added custom duration to the BatchingScheduler (#202)\n  - 2.0.0-beta1 (June 27, 2016)\n   - Commitment to the final 2.0 API and backward compatibility\n   - Fixed a bug where cancel reason was not passed to onCancel if Job decides not to try again\n  - 2.0.0-alpha5 (June 21, 2016)\n   - Important fix with Framework Scheduler where it was not setting delay properly\n  - 2.0.0-alpha4 (June 16, 2016) - Last planned alpha release (with api changes)\n   - Introduced deadline parameter. Job will be run (or cancelled) when it hits the deadline regardless of its constraints.\n   - Made it easier to write custom serializer by making base job fully transient.\n   - Moved persistent job data to individual files which will lift the limit on the job size.\n   - If Job serialization fails, JobManager will throw an exception.\n  - 2.0.0-alpha3 (May 28, 2016)\n   - New onCancel API receives the exception\n   - Changed how schedulers are constructed to avoid NPE issues\n   - New ThreadPool configuration to allow custom thread creation for consumers\n  - 2.0.0-alpha1 (March 26, 2016)\n   - A major rewrite with 70+ commits\n   - [Migration guide][13]\n  - 1.3.5 (Nov 7, 2015)\n   - Default NetworkUtil is now Doze aware. (thanks @coltin)\n   - RetryConstraint Delay can be applied to the group to preserve jobs' execution order. (#41)\n  - 1.3.4 (Sept 12, 2015)\n   - Fixed a potential ANR that was caused by sync on main thread. Issue #40\n  - 1.3.3 (July 12, 2015)\n   - Fixed default exponential backoff. Issue #33\n  - 1.3.2 (July 5, 2015)\n   - Added ability to change a Job's priority or add delay before it is retried. This mechanism can be used to add exponential backoff to jobs.\n   - Added `Job#getApplicationContext` as a convenience method to get the Context inside a Job.\n  - 1.3.1 (April 19, 2015)\n   - Fixed issue #19 which was blocking a group forever if a job from that group is cancelled while running and then onRun fails.\n   - Updated Robolectric version and moved all testing to Gradle.\n   - Goodbye Cobertura, Welcome Jacoco!\n  - 1.3 (March 23, 2015)\n   - Ability to add tags to jobs. These tags can be used to later retrieve jobs.\n   - Added long awaited job cancellation. You can use tags to cancel jobs.\n   - Removed deprecated BaseJob class. This may break backward compatibility.\n  - 1.1.2 (Feb 18, 2014)\n   - Report exceptions to logger if addInBackground fails. (#31)\n  - 1.1.1 (Feb 8, 2014)\n   - Fixed an important bug (#35) where jobs in the same group may run in parallel if many of them become available at the same time while multiple consumer threads are waiting for a new job. \n  - 1.1 (Jan 30, 2014)\n   - Job Status query API (#18)\n   - Fixed a stackoverflow bug when network status changes after a long time. (#21) \n  - 1.0 (Jan 14, 2014):\n   - Added [parameterized][12] constructor for Job for more readable code.\n   - Deprecated `BaseJob` in favor of a more complete `Job` class.\n  - 0.9.9 (Dec 16, 2013):\n   - First public release.\n\n\n### [Wiki][9]\n\n### Dependencies\n- Job Queue\n- - [Support-v4](https://developer.android.com/topic/libraries/support-library/index.html)\n- - [Okio](https://github.com/square/okio) ([license](https://github.com/square/okio/blob/master/LICENSE.txt))\n- For testing, we use:\n- - [Junit 4](http://junit.org/) ([license](https://github.com/junit-team/junit4/blob/master/LICENSE-junit.txt))\n- - [Robolectric](http://robolectric.org/) ([license](https://github.com/robolectric/robolectric/blob/master/LICENSE.txt))\n- - [Fest Util](http://easytesting.org/) ([license](http://www.apache.org/licenses/LICENSE-2.0))\n- - [Hamcrest](https://code.google.com/p/hamcrest/) ([license](http://opensource.org/licenses/BSD-3-Clause))\n- For code coverage report, we use:\n- Sample Twitter client uses:\n- - [Twitter4j](http://twitter4j.org/en)\n- - [EventBus](https://github.com/greenrobot/EventBus)\n- - [Path's fork of greenDAO](https://github.com/path/greenDAO) . ([original repo](https://github.com/greenrobot/greenDAO))\n- - [Play Services GCM](https://developer.android.com/topic/libraries/support-library/features.html#v4) `compile 'com.google.android.gms:play-services-gcm:10.0.1'`\n\n### Building\n\n* Clone the repo\n* `> cd jobqueue`\n* `> ./gradlew clean assembleDebug assembleDebugUnitTest test`\n*\nThis will create a jar file under _release_ folder.\n\n#### Running Tests\n* > `cd jobqueue`\n* > `./gradlew clean check`\n\n\n## License\n\nAndroid Priority Jobqueue is made available under the [MIT license](http://opensource.org/licenses/MIT):\n\n<pre>\nThe MIT License (MIT)\n\nCopyright (c) 2013 Path, Inc.\nCopyright (c) 2014 Google, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</pre>\n\n\n[1]: https://github.com/yigit/android-priority-jobqueue/blob/master/jobqueue/src/main/java/com/birbit/android/jobqueue/network/NetworkUtil.java\n[2]: https://github.com/yigit/android-priority-jobqueue/blob/master/jobqueue/src/main/java/com/birbit/android/jobqueue/network/NetworkEventProvider.java\n[3]: http://yigit.github.io/android-priority-jobqueue/coverage-report/index.html\n[4]: http://yigit.github.io/android-priority-jobqueue/javadoc/index.html\n[5]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22android-priority-jobqueue%22\n[6]: https://github.com/yigit/android-priority-jobqueue/tree/master/examples\n[7]: https://github.com/yigit/android-priority-jobqueue/blob/master/examples/twitter/TwitterClient/src/com/birbit/android/jobqueue/examples/twitter/TwitterApplication.java#L26\n[8]: http://www.youtube.com/watch?v=xHXn3Kg2IQE\n[9]: https://github.com/yigit/android-priority-jobqueue/wiki\n[10]: https://github.com/yigit/android-priority-jobqueue/wiki/Job-Manager-Configuration\n[11]: https://github.com/yigit/android-priority-jobqueue/wiki/Job-Configuration\n[12]: https://github.com/yigit/android-priority-jobqueue/blob/master/jobqueue/src/main/java/com/birbit/android/jobqueue/Params.java\n[13]: https://github.com/yigit/android-priority-jobqueue/wiki/V1-to-V2-migration\n[14]: https://developer.android.com/reference/android/app/job/JobScheduler.html\n[15]: https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\n[16]: https://github.com/yigit/android-priority-jobqueue/wiki/Integration-with-JobScheduler-and-GcmNetworkManager\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.357421875,
          "content": "buildscript {\n  repositories {\n    google()\n    jcenter()\n    mavenCentral()\n  }\n\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.5.3'\n    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0'\n    classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'\n  }\n}\n\nallprojects {\n  repositories {\n    google()\n    mavenCentral()\n    jcenter()\n  }\n}"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.927734375,
          "content": "android.enableJetifier=true\nandroid.useAndroidX=true\n\nSONATYPE_NEXUS_USERNAME=yigit\nSONATYPE_NEXUS_PASSWORD=<another pass>\nsigning.keyId=<key id in secring>\nsigning.password=<some pass>\nsigning.secretKeyRingFile=/home/yboyar/src/android-priority-jobqueue/secring.gpg\nGROUP=com.birbit\nVERSION_NAME=3.0.0\n\nPOM_DESCRIPTION=a Job Queue specifically written for Android to easily schedule jobs (tasks) that run in the background, improving UX and application stability.\nPOM_INCEPTION_YEAR=2016\n\nPOM_URL=https://github.com/yigit/android-priority-jobqueue/\nPOM_SCM_URL=https://github.com/yigit/android-priority-jobqueue/\nPOM_SCM_CONNECTION=scm:git:git://github.com/yigit/android-priority-jobqueue.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/yigit/android-priority-jobqueue.git\n\nPOM_LICENCE_NAME=The MIT License (MIT)\nPOM_LICENCE_URL=http://opensource.org/licenses/MIT\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=yigit\nPOM_DEVELOPER_NAME=Yigit Boyar\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.775390625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jobqueue",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.10546875,
          "content": "rootProject.name = \"android-priority-jobqueue\"\ninclude \":jobqueue\"\ninclude \":examples:twitter:TwitterClient\""
        }
      ]
    }
  ]
}