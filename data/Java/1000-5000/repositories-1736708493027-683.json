{
  "metadata": {
    "timestamp": 1736708493027,
    "page": 683,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AlexLiuSheng/CheckVersionLib",
      "stars": 2686,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "*.iml\n.gradle\n/local.properties\n\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2138671875,
          "content": "language: android\nandroid:\n  components:\n  - tools\n  - build-tools-24.0.2\n  - android-24\n  - extra-android-m2repository\n  - extra-android-support\nbefore_install:\n- chmod +x gradlew\nscript:\n- \"./gradlew assembleRelease\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.78515625,
          "content": "## CheckVersionLib[![](https://jitpack.io/v/AlexLiuSheng/CheckVersionLib.svg)](https://jitpack.io/#AlexLiuSheng/CheckVersionLib)\n\n## V2 Version has been born with shocking, strong functions,chain programing, easy to integrate,strong extension\n[中文文档](https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/README_UN.MD)\n\nThe strongest feature is easier to integrate than version  of V1.+\n\n### Effect\n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/v2.jpg\" width=200/><img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/V2.gif\" width=200/>\n \n### Features\n- [x] Invoke everywhere you want\n\n- [x] **Easy**\n\n- [x] **Strong Extension**\n\n- [x] Adapt to all applications that have update function\n\n- [x] **Customize Ui**\n\n- [x] Support Force Update（one line code）\n\n- [x] Support Silence Download （one line code）\n\n- [x] Adapt to Android 13\n\n### include\n```\nallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n```\n\n```\n\ndependencies {\n\t        implementation 'com.github.AlexLiuSheng:CheckVersionLib:2.4.2'\n\t}\n```\n\n### usage\n\n\n\n> Only using download mode\n\nthe easiest way to use\n\n```\n        AllenVersionChecker\n                .getInstance()\n                .downloadOnly(\n                        UIData.create().setDownloadUrl(downloadUrl)\n                )\n                .executeMission(context);\n```\n\n`UIData`：UIData is the type of Bundle，it saves some data for displaying ui page，it can use in your customization page/\n\n\n\n> Request Version + Download mode\n\nthe easiest way to call \n```\n   AllenVersionChecker\n                .getInstance()\n                .requestVersion()\n                .setRequestUrl(requestUrl)\n                .request(new RequestVersionListener() {\n                    @Nullable\n                    @Override\n                    public UIData onRequestVersionSuccess(String result) {\n                        //get the data response from server,parse,get the `downloadUlr` and some other ui date\n                      \n                        ...\n                        //return null if you dont want to update application\n                        return UIData.create().setDownloadUrl(downloadUrl);\n                    }\n\n                    @Override\n                    public void onRequestVersionFailure(String message) {\n\n                    }\n                })\n                .executeMission(context);\n\n\n```\nSome other http params for request app version,as follows\n\n```\n AllenVersionChecker\n                .getInstance()\n                .requestVersion()\n                .setHttpHeaders(httpHeader)\n                .setRequestMethod(HttpRequestMethod.POSTJSON)\n                .setRequestParams(httpParam)\n                .setRequestUrl(requestUrl)\n                .request(new RequestVersionListener() {\n                    @Nullable\n                    @Override\n                    public UIData onRequestVersionSuccess(String result) {\n                        //get the data response from server,parse,get the `downloadUlr` and some other ui date\n                        ...\n                        UIData uiData = UIData\n                                .create()\n                                .setDownloadUrl(downloadUrl)\n                                .setTitle(updateTitle)\n                                .setContent(updateContent);\n                        //return null if you dont want to update application\n                        uiData.getVersionBundle().putString(\"key\", \"your value\");\n                        return uiData;\n\n                    }\n\n                    @Override\n                    public void onRequestVersionFailure(String message) {\n\n                    }\n                })\n                .executeMission(context);\n```\n\nthe instructions above is the basic using for integrating(library has a set of default ui page),you can use some other params,if it does not fit your requirement the above.\n\n### cancel all mission\nto avoid memory leak,It is necessary to cancel all missiones when you dont want to use library.you should put code of cancel in properly place.\n```\n AllenVersionChecker.getInstance().cancelAllMission();\n```\n### some other functions\nfirst of all,the builder of follow is called `DownloadBuilder`\n```\n DownloadBuilder builder=AllenVersionChecker\n                .getInstance()\n                .downloadOnly();\n                \n                \n      or          \n                \n                \n                \n DownloadBuilder builder=AllenVersionChecker\n                 .getInstance()\n                 .requestVersion()\n                 .request()\n```\n> cancel mission\n\n ```\n  AllenVersionChecker.getInstance().cancelAllMission(this);\n\n```\n> silent download\n  \n  ```\n   builder.setSilentDownload(true); false for default\n  ```\n> set the newest version code of your server returned，it is used to verify if use file cache.\n \n  - Cache category：first check running app's versionCode whether equal with the installation package.Then check developer whether pass the newest VersionCode ,if so, check the \n   VersionCode is greater than local,if it is truth ,download apk from server, otherwise use cache.\n  ```\n   builder.setNewestVersionCode(int); null for default \n  ```\n> Force Update\n\n  set the listener represent need force update function,it will be call when user cancel the download operation,developer need close all the activities of application.\n\n  ```\n  builder.setForceUpdateListener(() -> {\n                forceUpdate();\n            });\n\n```    \n**update in v2.2.1** \n   for setForceUpdateListener dynamically after server response,you can setForceUpdateListener in callback of http request,eg.\n  ```\n     public UIData onRequestVersionSuccess(DownloadBuilder downloadBuilder,String result) {\n                            downloadBuilder.setForceUpdateListener(() -> {\n                                forceUpdate();\n                            });\n                            Toast.makeText(V2Activity.this, \"request successful\", Toast.LENGTH_SHORT).show();\n                            return crateUIData();\n                        }\n  ```  \n> Force ReDownload no matter there is cache\n\n\n  \n```\n builder.setForceRedownload(true); false for default\n``` \n\n> set whether show downloading dialog\n```\nbuilder.setShowDownloadingDialog(false); true for default\n```\n> set whether  show notification\n\n```\nbuilder.setShowNotification(false);  true for default \n```\n> **run as foreground service（update in 2.2.2）**\nrecomended\n```\nbuilder.setRunOnForegroundService(true); 默认true\n```\n> customize notification\n```\n      builder.setNotificationBuilder(\n                 NotificationBuilder.create()\n                         .setRingtone(true)\n                         .setIcon(R.mipmap.dialog4)\n                         .setTicker(\"custom_ticker\")\n                         .setContentTitle(\"custom title\")\n                         .setContentText(getString(R.string.custom_content_text))\n         );\n```\n> set whether show download failed dialog\n\n```\n  builder.setShowDownloadFailDialog(false); true for default\n```\n> customize download apk path\n\n```\n  builder.setDownloadAPKPath(address); default：/storage/emulated/0/AllenVersionPath/\n```\n> customize download apk name\n```\n  builder.setApkName(apkName); default：getPackageName()\n```\n> set download listener\n\n```\n   builder.setApkDownloadListener(new APKDownloadListener() {\n             @Override\n             public void onDownloading(int progress) {\n                 \n             }\n\n             @Override\n             public void onDownloadSuccess(File file) {\n\n             }\n\n             @Override\n             public void onDownloadFail() {\n\n             }\n         });\n```\n> cancel listener\n```\n\n builder.setOnCancelListener(() -> {\n            Toast.makeText(V2Activity.this,\"Cancel Hanlde\",Toast.LENGTH_SHORT).show();\n        });\n```\n**if u want to monitor the cancel operation in different state**\n- ` builder.setDownloadingCancelListener();`\n- `builder.setDownloadFailedCancelListener();`\n- `builder.setReadyDownloadCancelListener();`\n\n> set commit click listener(**added after 2.2.2**)\n\n- ` builder.setReadyDownloadCommitClickListener();`\n- `builder.setDownloadFailedCommitClickListener();`\n> silent download+install directly（dont popup update dialog）\n```\n    builder.setDirectDownload(true);\n           builder.setShowNotification(false);\n           builder.setShowDownloadingDialog(false);\n           builder.setShowDownloadFailDialog(false);\n```\n> customize install callback\n```\n  setCustomDownloadInstallListener(CustomInstallListener customDownloadInstallListener)\n```\n\n### customize the ui page\n\nCustomization page used the way of listener,developer need return the Dialog(parent:android.app) that you customized\n\n\n - all the dialog must initiate with the context inside the listener.\n \n - the data fo page takes from UIData\n\n> **Customize Show Version Dialog**\n\n   set`CustomVersionDialogListener`\n   \n\n- define the page **must** have a commit download button,the id of button must be `@id/versionchecklib_version_dialog_commit`\n\n- if has cancel button(ignore if not),the id of button must be `@id/versionchecklib_version_dialog_cancel`\n\neg.\n\n```\n  builder.setCustomVersionDialogListener((context, versionBundle) -> {\n            BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_dialog_one_layout);\n            //versionBundle is instance of UIData，passed from developer,it can be use to display \n            TextView textView = baseDialog.findViewById(R.id.tv_msg);\n            textView.setText(versionBundle.getContent());\n            return baseDialog;\n        });\n\n```\n\n> **customize downloading dialog page**\n\nset`CustomDownloadingDialogListener`\n\n\n- if has cancel button(ignore if not),the id of button must be`@id/versionchecklib_loading_dialog_cancel`\n\n\n```\n    builder.setCustomDownloadingDialogListener(new CustomDownloadingDialogListener() {\n            @Override\n            public Dialog getCustomDownloadingDialog(Context context, int progress, UIData versionBundle) {\n                BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_download_layout);\n                return baseDialog;\n            }\n// loop invoke the updateUI method when downloading\n            @Override\n            public void updateUI(Dialog dialog, int progress, UIData versionBundle) {\n                TextView tvProgress = dialog.findViewById(R.id.tv_progress);\n                ProgressBar progressBar = dialog.findViewById(R.id.pb);\n                progressBar.setProgress(progress);\n                tvProgress.setText(getString(R.string.versionchecklib_progress, progress));\n            }\n        });\n```\n\n> **customize download failed page**\n\nsetCustomDownloadFailedListener\n\n- if having button of **retry**,the id must be`@id/versionchecklib_failed_dialog_retry`\n\n- if having the button of **commit/cancel**,the id must be `@id/versionchecklib_failed_dialog_cancel`\n\n```\n   builder.setCustomDownloadFailedListener((context, versionBundle) -> {\n            BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_download_failed_dialog);\n            return baseDialog;\n        });\n```\n***\n\n###  ProGuard\n```\n-keepattributes *Annotation*\n-keepclassmembers class * {\n    @org.greenrobot.eventbus.Subscribe <methods>;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n \n# Only required if you use AsyncExecutor\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    <init>(java.lang.Throwable);\n}\n -keep class com.allenliu.versionchecklib.**{*;}\n```\n\n### update Log\n  - 2.2.1\n    - fix the bugs of memory leak\n    - use binder to pass params\n    - some known issues \t\n\n### Last\n\n***\n\n - download the  [demo](https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/sample/src/main/java/com/allenliu/sample/v2/V2Activity.java) to view  more functions\n \n - thanks all for the support library\n \n - star/issue is welcome\n \n\n\n### License\n\n***\n\nApache 2.0\n"
        },
        {
          "name": "README_UN.MD",
          "type": "blob",
          "size": 11.5986328125,
          "content": "## CheckVersionLib[![](https://jitpack.io/v/AlexLiuSheng/CheckVersionLib.svg)](https://jitpack.io/#AlexLiuSheng/CheckVersionLib)\n## V2版震撼来袭，功能强大，链式编程，调用简单，集成轻松，扩展性强大\n\n老规矩先看V2效果，这个版本最大的特点就是使用非常简单，相对于1.+版本\n\n### 效果\n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/v2.jpg\" width=200/><img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/V2.gif\" width=200/>\n \n### 特点\n- [x] 任何地方都可以调用\n\n- [x] **简单简单简单简单**（重要的话我说四遍）\n\n- [x] **扩展性强大**\n\n- [x] 所有具有升级功能的app均可使用，耶稣说的\n\n- [x] **更强大的自定义界面支持**\n\n- [x] 支持强制更新（一行代码）\n\n- [x] 支持静默下载 （一行代码）\n\n- [x] 适配到Android 13\n\n### 导入\n```\nallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n```\n\n```\ndependencies {\n\t        implementation 'com.github.AlexLiuSheng:CheckVersionLib:2.4.2'\n\t}\n```\n\n### 使用\n\n两种模式\n\n> 只使用下载模式\n\n先来个最简单的调用\n\n```\n        AllenVersionChecker\n                .getInstance()\n                .downloadOnly(\n                        UIData.create().setDownloadUrl(downloadUrl)\n                )\n                .executeMission(context);\n```\n\n`UIData`：UIData是一个Bundle，用于存放用于UI展示的一些数据，后面自定义界面时候可以拿来用\n\n\n\n> 请求服务器版本+下载\n\n该模式最简单的使用\n```\n   AllenVersionChecker\n                .getInstance()\n                .requestVersion()\n                .setRequestUrl(requestUrl)\n                .request(new RequestVersionListener() {\n                    @Nullable\n                    @Override\n                    public UIData onRequestVersionSuccess(String result) {\n                        //拿到服务器返回的数据，解析，拿到downloadUrl和一些其他的UI数据\n                        ...\n                        //如果是最新版本直接return null\n                        return UIData.create().setDownloadUrl(downloadUrl);\n                    }\n\n                    @Override\n                    public void onRequestVersionFailure(String message) {\n\n                    }\n                })\n                .executeMission(context);\n\n\n```\n请求版本一些其他的http参数可以设置，如下\n\n```\n AllenVersionChecker\n                .getInstance()\n                .requestVersion()\n                .setHttpHeaders(httpHeader)\n                .setRequestMethod(HttpRequestMethod.POSTJSON)\n                .setRequestParams(httpParam)\n                .setRequestUrl(requestUrl)\n                .request(new RequestVersionListener() {\n                    @Nullable\n                    @Override\n                    public UIData onRequestVersionSuccess(String result) {\n                        //拿到服务器返回的数据，解析，拿到downloadUrl和一些其他的UI数据\n                        ...\n                        UIData uiData = UIData\n                                .create()\n                                .setDownloadUrl(downloadUrl)\n                                .setTitle(updateTitle)\n                                .setContent(updateContent);\n                        //放一些其他的UI参数，拿到后面自定义界面使用\n                        uiData.getVersionBundle().putString(\"key\", \"your value\");\n                        return uiData;\n\n                    }\n\n                    @Override\n                    public void onRequestVersionFailure(String message) {\n\n                    }\n                })\n                .executeMission(context);\n```\n\n### 合适的地方关闭任务\n 为了避免不必要的内存泄漏，需要在合适的地方取消任务\n ```\n AllenVersionChecker.getInstance().cancelAllMission();\n ```\n\n\n以上就是最基本的使用（库默认会有一套界面），如果还不满足项目需求，下面就可以用这个库来飙车了\n\n### 一些其他的function设置\n解释下，下面的builder叫`DownloadBuilder`\n```\n DownloadBuilder builder=AllenVersionChecker\n                .getInstance()\n                .downloadOnly();\n                \n                \n      or          \n                \n                \n                \n DownloadBuilder builder=AllenVersionChecker\n                 .getInstance()\n                 .requestVersion()\n                 .request()\n```\n> 取消任务\n\n ```\n  AllenVersionChecker.getInstance().cancelAllMission(this);\n\n```\n> 静默下载\n  \n  ```\n   builder.setSilentDownload(true); 默认false\n  ```\n> 设置当前服务器最新的版本号，供库判断是否使用缓存\n \n  - 缓存策略：如果本地有安装包，首先判断与当前运行的程序的versionCode是否不一致，然后判断是否有传入最新的\n    versionCode，如果传入的versionCode大于本地的，重新从服务器下载，否则使用缓存\n  \n  ```\n   builder.setNewestVersionCode(int); 默认null\n  ```\n> 强制更新\n\n  设置此listener即代表需要强制更新，会在用户想要取消下载的时候回调\n  需要你自己关闭所有界面\n  ```\n  builder.setForceUpdateListener(() -> {\n                forceUpdate();\n            });\n```    \n**update in v2.2.1** \n   动态设置是否强制更新，如果使用本库来请求服务器，可以在回调时动态设置一些参数或者回调\n  ```\n     public UIData onRequestVersionSuccess(DownloadBuilder downloadBuilder,String result) {\n                            downloadBuilder.setForceUpdateListener(() -> {\n                                forceUpdate();\n                            });\n                            Toast.makeText(V2Activity.this, \"request successful\", Toast.LENGTH_SHORT).show();\n                            return crateUIData();\n                        }\n  ```  \n> 下载忽略本地缓存\n\n  如果本地有安装包缓存也会重新下载apk\n  \n```\n builder.setForceRedownload(true); 默认false\n``` \n\n> 是否显示下载对话框\n```\nbuilder.setShowDownloadingDialog(false); 默认true\n```\n> 是否显示通知栏\n```\nbuilder.setShowNotification(false);  默认true\n```\n> **以前台service运行（update in 2.2.2）**\n推荐以前台服务运行更新，防止在后台时，服务被杀死\n```\nbuilder.setRunOnForegroundService(true); 默认true\n\n```\n> 自定义通知栏\n```\n      builder.setNotificationBuilder(\n                 NotificationBuilder.create()\n                         .setRingtone(true)\n                         .setIcon(R.mipmap.dialog4)\n                         .setTicker(\"custom_ticker\")\n                         .setContentTitle(\"custom title\")\n                         .setContentText(getString(R.string.custom_content_text))\n         );\n```\n> 是否显示失败对话框\n\n```\n  builder.setShowDownloadFailDialog(false); 默认true\n```\n> 自定义下载路径\n\n```\n  builder.setDownloadAPKPath(address); 默认：/storage/emulated/0/AllenVersionPath/\n```\n> 自定义下载文件名\n```\n  builder.setApkName(apkName); 默认：getPackageName()\n```\n> 可以设置下载监听\n\n```\n   builder.setApkDownloadListener(new APKDownloadListener() {\n             @Override\n             public void onDownloading(int progress) {\n                 \n             }\n\n             @Override\n             public void onDownloadSuccess(File file) {\n\n             }\n\n             @Override\n             public void onDownloadFail() {\n\n             }\n         });\n```\n> 设置取消监听\n此回调会监听所有cancel事件\n```\n \n builder.setOnCancelListener(() -> {\n            Toast.makeText(V2Activity.this,\"Cancel Hanlde\",Toast.LENGTH_SHORT).show();\n        });\n```\n**如果想单独监听几种状态下的cancel，可像如下这样设置**\n- ` builder.setDownloadingCancelListener();`\n- `builder.setDownloadFailedCancelListener();`\n- `builder.setReadyDownloadCancelListener();`\n\n> 设置确定监听(**added after 2.2.2**)\n\n- ` builder.setReadyDownloadCommitClickListener();`\n- `builder.setDownloadFailedCommitClickListener();`\n\n> 静默下载+直接安装（不会弹出升级对话框）\n```\n    builder.setDirectDownload(true);\n           builder.setShowNotification(false);\n           builder.setShowDownloadingDialog(false);\n           builder.setShowDownloadFailDialog(false);\n```\n> 自定义安装回调\n```\n    setCustomDownloadInstallListener(CustomInstallListener customDownloadInstallListener)\n```\n\n### 自定义界面\n\n自定义界面使用回调方式，开发者需要返回自己定义的Dialog（父类android.app）\n\n - 所有自定义的界面必须使用listener里面的context实例化\n \n - 界面展示的数据通过UIData拿\n\n> **自定义显示更新界面**\n\n   设置`CustomVersionDialogListener`\n   \n\n- 定义此界面**必须**有一个确定下载的按钮，按钮id必须为`@id/versionchecklib_version_dialog_commit`\n\n- 如果有取消按钮（没有忽略本条要求），则按钮id必须为`@id/versionchecklib_version_dialog_cancel`\n\neg.\n\n```\n  builder.setCustomVersionDialogListener((context, versionBundle) -> {\n            BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_dialog_one_layout);\n            //versionBundle 就是UIData，之前开发者传入的，在这里可以拿出UI数据并展示\n            TextView textView = baseDialog.findViewById(R.id.tv_msg);\n            textView.setText(versionBundle.getContent());\n            return baseDialog;\n        });\n\n```\n\n> **自定义下载中对话框界面**\n\n设置`CustomDownloadingDialogListener`\n\n\n- 如果此界面要设计取消操作（没有忽略），请务必将id设置为`@id/versionchecklib_loading_dialog_cancel`\n\n\n```\n    builder.setCustomDownloadingDialogListener(new CustomDownloadingDialogListener() {\n            @Override\n            public Dialog getCustomDownloadingDialog(Context context, int progress, UIData versionBundle) {\n                BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_download_layout);\n                return baseDialog;\n            }\n//下载中会不断回调updateUI方法\n            @Override\n            public void updateUI(Dialog dialog, int progress, UIData versionBundle) {\n                TextView tvProgress = dialog.findViewById(R.id.tv_progress);\n                ProgressBar progressBar = dialog.findViewById(R.id.pb);\n                progressBar.setProgress(progress);\n                tvProgress.setText(getString(R.string.versionchecklib_progress, progress));\n            }\n        });\n```\n\n> **自定义下载失败对话框**\n\n设置CustomDownloadFailedListener\n\n- 如果有**重试**按钮请将id设置为`@id/versionchecklib_failed_dialog_retry`\n\n- 如果有 **确认/取消**按钮请将id设置为`@id/versionchecklib_failed_dialog_cancel`\n\n```\n   builder.setCustomDownloadFailedListener((context, versionBundle) -> {\n            BaseDialog baseDialog = new BaseDialog(context, R.style.BaseDialog, R.layout.custom_download_failed_dialog);\n            return baseDialog;\n        });\n```\n***\n\n### update Log\n  - 2.2.1\n    - 修复内存泄漏问题\n    - 使用binder传递参数\n    - 一些已知的bug \t\n\n\n###  混淆配置\n```\n -keepattributes *Annotation*\n-keepclassmembers class * {\n    @org.greenrobot.eventbus.Subscribe <methods>;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n \n# Only required if you use AsyncExecutor\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    <init>(java.lang.Throwable);\n}\n```\n\n\n### 最后\n\n***\n\n - 更全面的使用请看 [demo](https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/sample/src/main/java/com/allenliu/sample/v2/V2Activity.java)\n \n - 感谢各位对本库的支持\n \n - 欢迎star/issue\n \n\n\n### License\n\n***\n\nApache 2.0\n"
        },
        {
          "name": "README_V1.1.md",
          "type": "blob",
          "size": 5.171875,
          "content": "# CheckVersionLib[ ![Download](https://api.bintray.com/packages/zkxy/maven/VersionCheckLib/images/download.svg) ](https://bintray.com/zkxy/maven/VersionCheckLib/_latestVersion)\n  现在热更新技术挺火的，大公司都出了自己的热更新框架，但是各家热更新都有各自优缺点，终究不能解决所有bug，万不得已还是得进行版本升级，这是一个android上的自动版本检测并更新库。库集成了检测版本、下载版本以及自动安装升级\n## 特点\n- [x] 任何地方都可以检测（可设置定时检测）\n\n- [x] app内任何地方都可以弹出升级对话框\n\n- [x] **自定义性强，手动回调解析，适用于各种版本检测接口**\n\n- [x] 自动处理下载和安装\n\n- [x] 自动请求读写权限\n\n- [x] **支持自定义界面**\n\n- [x] 支持强制更新\n\n## 效果\n \n \n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/custom.gif\" width=200/><img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/style1.png\" width=200/>\n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/style2.png\" width=200/>\n \n## 使用步骤\n### android studio导入\n`compile 'com.allenliu.versionchecklib:library:1.1'`\n\n\n### 如何使用\n1.自定义service，service继承 `AVersionService `，实现其中的 `onResponses(AVersionService service, String response)`抽象方法.\n\n该方法主要是请求版本接口的回调，由于不同的使用者版本检测接口返回数据类型不一致，所以你需要自己解析数据，判断版本号之后调用升级对话框，如果使用库默认的界面直接调用如下方法: `service.showVersionDialog(downloadUrl,title,updateMsg )`\n\n示例代码:\n           \n\t     \n\t     if (serverVersion > clientVersion) { \n\t      //传入下载地址，以及版本更新消息\n\t     service.showVersionDialog(downloadUrl,title,updateMsg );}\n\t     \n\t\n\t      \n\n              \n2.在任意地方开启自定义service，并传入`VersionParam`\n\n        versionParams = new VersionParams().setRequestUrl(\"http://www.baidu.com\");\n        Intent intent = new Intent(this, DemoService.class);\n        intent.putExtra(AVersionService.VERSION_PARAMS_KEY, versionParams);\n        startService(intent);\n\t\n   `VersionParams`有如下方法，除了requestUrl都是可选值\n \n   <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/versionparams.png\" width=400/>\n\t  \n### **自定义界面** \n   如果想自定义界面，只需创建一个继承自`VersionDialogActivity`的Activity,Activity设置Theme为透明：\n\n ` android:theme=\"@style/versionCheckLibvtransparentTheme\"`\n \n   开启Service的时候，将自定义的Activity传入VersionParams\n   \n   `setCustomDownloadActivityClass(CustomVersionDialogActivity.class)`\n   \n   - 自定义 版本dialog,重写 `showVersionDialog()` ,在里面实现自己的逻辑，最后调用`downloadFile(url)`或者`downloadFile(url,filecallback)`注意不要调用父类的方法\n   \n   - 自定义 下载中dialog，重写`showLoadingDialog(int currentProgress)`,在里面实现自己的逻辑\n   \n   - 自定义 下载失败dialog ,重写`showFailDialog`，实现自己的逻辑\n   \n   - 强制更新。如果使用默认的版本dialog，`setCancelClickListner`回调里实现，具体用法请看demo\n   \n   - 除此之外还可以在定义的Activity里面监听一些下载和点击回调 \n  \n         setOnDownloadSuccessListener(this);\n\t \n         setCommitClickListener(this);\n\t  \n         setCancelClickListener(this);\n\t \n\t     setOnDownloadingListener(this);\n       \n### 下载通知栏图标和文字替换\n需要自定义图标只需在mimap文件下建立`ic_launcher`图标，替换标题只需在项目xml定义`app_name`属性,还有其他一些属性替换，如下表:\n\n| 属性名        | 属性值           | \n| ------------- |:-------------:|\n| versionchecklib_confirm    | 确认 |\n| versionchecklib_cancel   | 取消      |   \n|versionchecklib_retry | 重试    |  \n|versionchecklib_download_fail_retry| 下载失败是否重试？   |  \n|versionchecklib_download_finish | 下载完成，点击安装   |  \n|versionchecklib_downloading | 正在下载中...  |  \n|versionchecklib_check_new_version |检测到新版本  |  \n|versionchecklib_download_fail | 下载失败，点击重试|  \n更详细的使用请看demo\n`欢迎star和提issue`\n## License\n        \n        Copyright 2017 AllenLiu.\n\n        Licensed to the Apache Software Foundation (ASF) under one or more contributor\n        license agreements. See the NOTICE file distributed with this work for\n        additional information regarding copyright ownership. The ASF licenses this\n        file to you under the Apache License, Version 2.0 (the \"License\"); you may not\n        use this file except in compliance with the License. You may obtain a copy of\n        the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n        License for the specific language governing permissions and limitations under\n        the License.\n  \n"
        },
        {
          "name": "README_V1.md",
          "type": "blob",
          "size": 11.7998046875,
          "content": "# CheckVersionLib[ ![Download](https://api.bintray.com/packages/zkxy/maven/VersionCheckLib/images/download.svg) ](https://bintray.com/zkxy/maven/VersionCheckLib/_latestVersion)\n\n#  [V2版来袭](https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/README.MD)\n[English Doc](https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/README_EN.md)\n## 特点\n- [x] 任何地方都可以检测（可设置定时检测）\n\n- [x] app内任何地方都可以弹出升级对话框\n\n- [x] **自定义性强，手动回调解析，适用于各种版本检测接口**\n\n- [x] 自动处理下载和安装\n\n- [x] 自动请求读写权限\n\n- [x] **支持自定义界面**\n\n- [x] 支持强制更新\n\n- [x] 支持静默下载\n\n- [x] 使用okhttp请求，不与第三方请求框架冲突\n\n- [x] 适配到Android O\n\n## 效果\n \n \n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/custom.gif\" width=200/> <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/main.jpg\" width=200/> <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/style1.png\" width=200/>\n <img src=\"https://github.com/AlexLiuSheng/CheckVersionLib/blob/master/gif/style2.png\" width=200/>\n \n## 使用步骤\n### android studio导入\n`compile 'com.allenliu.versionchecklib:library:1.8.8'`\n\n\n### 如何使用\n#### 1.请求版本接口 + 下载模块\n1.自定义service，service继承 `AVersionService `，实现其中的 `onResponses(AVersionService service, String response)`抽象方法.\n\n该方法主要是请求版本接口的回调，由于不同的使用者版本检测接口返回数据类型不一致，所以你需要自己解析数据，判断版本号之后调用升级对话框，如果使用库默认的界面直接调用如下方法: `service.showVersionDialog(downloadUrl,title,updateMsg )`\n\n示例代码:\n           \n\t     \n\t     if (serverVersion > clientVersion) { \n\t      //传入下载地址，以及版本更新消息\n\t     service.showVersionDialog(downloadUrl,title,updateMsg );\n\t    // or \n\t    service.showVersionDialog(downloadUrl,title,updateMsg,bundle);\n\t     }\n\t     \n\t\n\n              \n2.在任意地方开启自定义service，并传入`VersionParam`\n\n      ```\n         VersionParams.Builder builder = new VersionParams.Builder()\n                      .setRequestUrl(\"http://www.baidu.com\")\n                      .setService(DemoService.class);\n                      \n         AllenChecker.startVersionCheck(this, builder.build());\n      ```\n\t\n#### 2.只使用下载模块\n\n\n    只使用下载模块不用定义第一步的service，正常传入versiongParams参数，不设置requestUrl和service，只用设置onlyDownload 为true。并且传入downloadUrl和需要显示的信息\n\n\n ```\n  //如果仅使用下载功能，downloadUrl是必须的\n   builder.setOnlyDownload(true)\n                .setDownloadUrl(\"http://down1.uc.cn/down2/zxl107821.uc/miaokun1/UCBrowser_V11.5.8.945_android_pf145_bi800_(Build170627172528).apk\")\n                .setTitle(\"检测到新版本\")\n                .setUpdateMsg(getString(R.string.updatecontent));\n                \n   AllenChecker.startVersionCheck(this, builder.build());\n ```\n\t\n   `VersionParams`属性见下表：\n \n   | 属性名        | 是否必须           | 默认值 |解释|\n   | ------------- |:-------------|:-------------|:-------------:|\n   | requestUrl   | 是 |-|请求版本接口的url|\n   | service   | 是 |-|指定你自己的service|\n   |downloadAPKPath|否|/storage/emulated/0/AllenVersionPath/|apk下载路径|\n   | httpHeaders   | 否 |不传为空|http版本请求header|\n   | pauseRequestTime   | 否 |1000*30|版本接口请求失败与下次请求间隔时间（如果为-1表示请求失败不继续请求）|\n   | httpHeaders   | 否 |不传为空|http版本请求header|\n   | requestMethod   | 否 |GET|http版本请求方式|\n   | requestParams   | 否 |不传为空|http版本请求携带的参数|\n   | customDownloadActivityClass   | 否 |VersionDialogActivity.class|版本dialog Activity,使用默认界面不指定|\n   | isForceRedownload   | 否 |false|如果本地有缓存，是否强制重新下载apk(设置false会如果下载了安装包而用户没有安装则不会再次下载)|\n   | isSilentDownload   | 否 |false|静默下载开关|\n   | onlyDownload  |否|false|是否只使用下载模块|\n   |title|否|null|只使用下载模块时，升级对话框的title|\n   |updateMsg|否|null|只使用下载模块时，升级对话框内容|\n   |downloadUrl|只使用下载模式时必须|-|只使用下载模块时传入的下载apk地址|\n   |paramBundle|否|null|额外的一些参数可以放里面，可以在versiongDialogActivity里面使用|\n   |isShowDownloadingDialog|否|true|是否显示下载对话框|\n   |isShowNotification|否|true|是否显示下载的通知栏|\n   |isShowDownloadFailDialog|否|true|是否显示下载失败对话框|\n \n#### 3.开启和关闭log\n\n `AllenChecker.init(true)`\n \n#### 4.取消请求\n\n   取消全部请求\n   \n `AllenChecker.cancelMission();`\n\t  \n### **自定义界面** \n   如果想自定义界面，只需创建一个继承自`VersionDialogActivity`的Activity,\n   Activity设置Theme为透明：\n\n ` android:theme=\"@style/versionCheckLibvtransparentTheme\"`\n   \n   设置launchMode为SingleTask\n   \n   ` android:launchMode=\"singleTask\"`\n \n   记住将自定义的Activity传入VersionParams\n   \n   `setCustomDownloadActivityClass(CustomVersionDialogActivity.class)`\n   \n   - 调用父类`getVersionTitle()` ,`getVersionUpdateMsg()`,`getVersionParamBundle()`方法,这是从service传过来的值，可以在自定义界面使用\n   \n   - 自定义 `versionDialog`：\n     重写 `showVersionDialog()` ,在里面实现自己的逻辑，在确认按钮里调用 `super.dealAPK();`\n\n     \n     example code:\n   ```\n     versionDialog = new BaseDialog(this, R.style.BaseDialog, R.layout.custom_dialog_two_layout);\n         TextView tvTitle = (TextView) versionDialog.findViewById(R.id.tv_title);\n         TextView tvMsg = (TextView) versionDialog.findViewById(R.id.tv_msg);\n         Button btnUpdate = (Button) versionDialog.findViewById(R.id.btn_update);\n \n         versionDialog.show();\n         //设置dismiss listener 用于强制更新,dimiss会回调dialogDismiss方法\n         versionDialog.setOnDismissListener(this);\n         //可以使用之前从service传过来的一些参数比如：title。msg，downloadurl，parambundle\n         tvTitle.setText(getVersionTitle());\n         tvMsg.setText(getVersionUpdateMsg());\n         //可以使用之前service传过来的值\n         Bundle bundle = getVersionParamBundle();\n         btnUpdate.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View view) {\n                 versionDialog.dismiss();\n                 CustomVersionDialogActivity.super.dealAPK();\n \n             }\n         });\n         versionDialog.show();\n  ```\n\t\n   - 自定义 `downloadingDialog`，重写`showLoadingDialog(int currentProgress)`,在里面实现自己的逻辑\n   \n   - 自定义 `failDialog` ,重写`showFailDialog`，实现自己的逻辑\n   \n   - 强制更新。如果使用默认的版本dialog，`dialogDismiss`和`onDownloadSuccess`回调里关闭app，具体用法请看demo\n   \n   - 除此之外还可以在定义的Activity里面监听一些下载和点击回调 \n   \n   \n                 setApkDownloadListener(this);\n                 setCommitClickListener(this);\n                 setDialogDimissListener(this);\n\t\t \n### 强制更新\n\n主要思路就是监听\n\n   ```\n                 setApkDownloadListener(this);\n\t\t         setDialogDimissListener(this);\n   ```\n \n\t\t \n具体查看[ForceUpdate](https://github.com/AlexLiuSheng/CheckVersionLib/tree/master/ForceUpdateDemo)\n \n### 下载通知栏图标和文字替换\n需要自定义图标只需在mimap文件下建立`ic_launcher`图标，替换标题只需在项目xml定义`app_name`属性,还有其他一些属性替换（[仍然被替换？](https://github.com/AlexLiuSheng/CheckVersionLib/issues/83)），如下表:\n\n| 属性名        | 属性值           | \n| ------------- |:-------------:|\n| versionchecklib_confirm    | 确认 |\n| versionchecklib_cancel   | 取消      |   \n|versionchecklib_retry | 重试    |  \n|versionchecklib_download_fail_retry| 下载失败是否重试？   |  \n|versionchecklib_download_finish | 下载完成，点击安装   |  \n|versionchecklib_downloading | 正在下载中...  |  \n|versionchecklib_check_new_version |检测到新版本  |  \n|versionchecklib_download_fail | 下载失败，点击重试|  \n更详细的使用请看demo\n`欢迎star和提issue`\n## 更新日志\nV 1.8.8\n\n   - fix the oom of static context\n   \nV 1.8.6\n\n   - fix [issue80](https://github.com/AlexLiuSheng/CheckVersionLib/issues/80)\n   \nV 1.8.4\n   - support android 8\n   \nV 1.8.3 \n   - fix [issue73](https://github.com/AlexLiuSheng/CheckVersionLib/issues/73)\n   - fix [issue75](https://github.com/AlexLiuSheng/CheckVersionLib/issues/75)\n\nV 1.8.2\n   - fix bug of silent downloading \n  \nV 1.8.0\n   - fix bugs of force update\n   - fix [issue](https://github.com/AlexLiuSheng/CheckVersionLib/issues/68)\n- V1.7.7\n   - fix [issue](https://github.com/AlexLiuSheng/CheckVersionLib/issues/64)\n   - fix re downloading apk when app have cache of apk\n   - fix [issue](https://github.com/AlexLiuSheng/CheckVersionLib/issues/63)\n- V1.7.6\n   - support cancel all the task\n- V1.7.5\n   - support multiple language mode\n- V1.7.4\n   - solve [issues#59](https://github.com/AlexLiuSheng/CheckVersionLib/issues/59)\n- V1.7.2\n   - support https request\n- V1.7.1\n   - 增加是否显示下载通知栏开关\n   - 增加是否显示下载对话框开关\n- V1.6.9\n   - VersionDialogActivity statusbar transparent\n- V1.6.8\n   - 增加只使用下载功能用法\n- V1.6.6\n   - 解决[issues#33](https://github.com/AlexLiuSheng/CheckVersionLib/issues/33)\n- V1.6.5\n   - 解决了[issues#32](https://github.com/AlexLiuSheng/CheckVersionLib/issues/32)\n- V1.6.0\n   - 优化项目，移除okgo\n   - 使用okhttp实现请求和下载\n- V1.5.4 [issues#27](https://github.com/AlexLiuSheng/CheckVersionLib/issues/27)\n   - 解决了 [issues#27](https://github.com/AlexLiuSheng/CheckVersionLib/issues/27)\n- V1.5.3 [issues#26](https://github.com/AlexLiuSheng/CheckVersionLib/issues/26)\n   - 解决了 [issues#26](https://github.com/AlexLiuSheng/CheckVersionLib/issues/26)\n- V1.5.2\n   - 解决了 [issues#25](https://github.com/AlexLiuSheng/CheckVersionLib/issues/25)\n- V1.5.1\n   - solve [issues#24](https://github.com/AlexLiuSheng/CheckVersionLib/issues/24)\n- V1.5\n   - 增加getVersionTitle,getVersionParamBundle,getVersionUpdateMsg方法，方便自定义界面使用\n   - 修复了对本地缓存apk的判断优化。只有本地安装包与当前app的包名一样并且versioncode不一样才会认为本地有apk\n- V1.4\n   - 修复了之前自定义界面不能使用从service传过去的title，updateMsg问题\n- V1.3 \n   - 增加**静默下载**功能\n   - 优化库启动方式\n- V1.2\n   - **强制重新下载开关**功能\n- V1.1\n   - 添加apk下载缓存，下载完成之后默认不再次下载。安装之后删除安装包\n   \n\n## License\n        \n        Copyright 2017 AllenLiu.\n\n        Licensed to the Apache Software Foundation (ASF) under one or more contributor\n        license agreements. See the NOTICE file distributed with this work for\n        additional information regarding copyright ownership. The ASF licenses this\n        file to you under the Apache License, Version 2.0 (the \"License\"); you may not\n        use this file except in compliance with the License. You may obtain a copy of\n        the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n        Unless required by applicable law or agreed to in writing, software\n        distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n        License for the specific language governing permissions and limitations under\n        the License.\n  \n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.5947265625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = \"1.8.0\"\n\n    repositories {\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.0.2'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gif",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.923828125,
          "content": "## Project-wide Gradle settings.\n#\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx1024m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n#\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#Wed Apr 18 14:01:51 CST 2018\nandroid.defaults.buildfeatures.buildconfig=true\nandroid.enableJetifier=true\nandroid.nonFinalResIds=false\nandroid.nonTransitiveRClass=false\nandroid.useAndroidX=true\norg.gradle.jvmargs=-Xmx1536m\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "library.jar",
          "type": "blob",
          "size": 24.24609375,
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0283203125,
          "content": "include ':library', \"sample\"\n"
        }
      ]
    }
  ]
}