{
  "metadata": {
    "timestamp": 1736708172146,
    "page": 631,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sqlcipher/android-database-sqlcipher",
      "stars": 2774,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2919921875,
          "content": "root = true\n\ncharset = utf-8\n\n[*.{java,cpp,h,aidl,xml,md}]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = lf\n\n[*.gradle]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4501953125,
          "content": ".gradle\nbuild\n.DS_Store\nandroid-database-sqlcipher/src/main/external/sqlcipher\nandroid-database-sqlcipher/src/main/external/openssl\nandroid-database-sqlcipher/src/main/external/android-libs/\nandroid-database-sqlcipher/.externalNativeBuild/\nandroid-database-sqlcipher/src/main/libs*\nandroid-database-sqlcipher/src/main/obj\nandroid-database-sqlcipher/src/main/external/openssl-*/\nandroid-database-sqlcipher/src/main/cpp/sqlite3.[c,h]\n.idea/\n*.iml\nlocal.properties"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8388671875,
          "content": ".POSIX:\n.PHONY: init clean distclean build-openssl build publish-local-snapshot \\\n\tpublish-local-release publish-remote-snapshot public-remote-release check\nGRADLE = ./gradlew\n\nclean:\n\t$(GRADLE) clean\n\ndistclean:\n\t$(GRADLE) distclean \\\n\t-PsqlcipherRoot=\"$(SQLCIPHER_ROOT)\"\n\nbuild-openssl:\n\t$(GRADLE) buildOpenSSL\n\ncheck:\n\t$(GRADLE) check\n\nformat:\n\t$(GRADLE) editorconfigFormat\n\nbuild-debug:\n\t$(GRADLE) android-database-sqlcipher:bundleDebugAar \\\n\t-PdebugBuild=true \\\n\t-PsqlcipherRoot=\"$(SQLCIPHER_ROOT)\" \\\n\t-PopensslRoot=\"$(OPENSSL_ROOT)\" \\\n\t-PopensslAndroidNativeRoot=\"$(OPENSSL_ANDROID_LIB_ROOT)\" \\\n\t-PsqlcipherCFlags=\"$(SQLCIPHER_CFLAGS)\" \\\n\t-PsqlcipherAndroidClientVersion=\"$(SQLCIPHER_ANDROID_VERSION)\"\n\nbuild-release:\n\t$(GRADLE) android-database-sqlcipher:bundleReleaseAar \\\n\t-PdebugBuild=false \\\n\t-PsqlcipherRoot=\"$(SQLCIPHER_ROOT)\" \\\n\t-PopensslRoot=\"$(OPENSSL_ROOT)\" \\\n\t-PopensslAndroidNativeRoot=\"$(OPENSSL_ANDROID_LIB_ROOT)\" \\\n\t-PsqlcipherCFlags=\"$(SQLCIPHER_CFLAGS)\" \\\n\t-PsqlcipherAndroidClientVersion=\"$(SQLCIPHER_ANDROID_VERSION)\"\n\npublish-local-snapshot:\n\t@ $(collect-signing-info) \\\n\t$(GRADLE) \\\n\t-PpublishSnapshot=true \\\n\t-PpublishLocal=true \\\n\t-PsigningKeyId=\"$$gpgKeyId\" \\\n\t-PsigningKeyRingFile=\"$$gpgKeyRingFile\" \\\n\t-PsigningKeyPassword=\"$$gpgPassword\" \\\n\tuploadArchives\n\npublish-local-release:\n\t@ $(collect-signing-info) \\\n\t$(GRADLE) \\\n\t-PpublishSnapshot=false \\\n\t-PpublishLocal=true \\\n\t-PsigningKeyId=\"$$gpgKeyId\" \\\n\t-PsigningKeyRingFile=\"$$gpgKeyRingFile\" \\\n\t-PsigningKeyPassword=\"$$gpgPassword\" \\\n\tuploadArchives\n\npublish-remote-snapshot:\n\t@ $(collect-signing-info) \\\n\t$(collect-nexus-info) \\\n\t$(GRADLE) \\\n\t-PpublishSnapshot=true \\\n\t-PpublishLocal=false \\\n\t-PsigningKeyId=\"$$gpgKeyId\" \\\n\t-PsigningKeyRingFile=\"$$gpgKeyRingFile\" \\\n\t-PsigningKeyPassword=\"$$gpgPassword\" \\\n\t-PnexusUsername=\"$$nexusUsername\" \\\n\t-PnexusPassword=\"$$nexusPassword\" \\\n\tuploadArchives\n\npublish-remote-release:\n\t@ $(collect-signing-info) \\\n\t$(collect-nexus-info) \\\n\t$(GRADLE) \\\n\t-PpublishSnapshot=false \\\n\t-PpublishLocal=false \\\n\t-PdebugBuild=false \\\n\t-PsigningKeyId=\"$$gpgKeyId\" \\\n\t-PsigningKeyRingFile=\"$$gpgKeyRingFile\" \\\n\t-PsigningKeyPassword=\"$$gpgPassword\" \\\n\t-PnexusUsername=\"$$nexusUsername\" \\\n\t-PnexusPassword=\"$$nexusPassword\" \\\n\t-PsqlcipherRoot=\"$(SQLCIPHER_ROOT)\" \\\n\t-PopensslRoot=\"$(OPENSSL_ROOT)\" \\\n\t-PopensslAndroidLibRoot=\"$(OPENSSL_ANDROID_LIB_ROOT)\" \\\n\t-PsqlcipherCFlags=\"$(SQLCIPHER_CFLAGS)\" \\\n\t-PsqlcipherAndroidClientVersion=\"$(SQLCIPHER_ANDROID_VERSION)\" \\\n\tandroid-database-sqlcipher:publish\n\ncollect-nexus-info := \\\n\tread -p \"Enter Nexus username:\" nexusUsername; \\\n\tstty -echo; read -p \"Enter Nexus password:\" nexusPassword; stty echo;\n\ncollect-signing-info := \\\n\tread -p \"Enter GPG signing key id:\" gpgKeyId; \\\n\tread -p \"Enter full path to GPG keyring file \\\n\t(possibly ${HOME}/.gnupg/secring.gpg)\" gpgKeyRingFile; \\\n\tstty -echo; read -p \"Enter GPG password:\" gpgPassword; stty echo;\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9794921875,
          "content": "### Deprecated Library\n\nThe `android-database-sqlcipher` project has been [officially deprecated](https://www.zetetic.net/blog/2023/08/31/sqlcipher-4.5.5-release#sqlcipher-android-455). The long-term replacement is [`sqlcipher-android`](https://github.com/sqlcipher/sqlcipher-android). Instructions for migrating from `android-database-sqlcipher` to `sqlcipher-android`may be found [here](https://www.zetetic.net/sqlcipher/sqlcipher-for-android-migration/).\n\n\n### Download Source and Binaries\n\nThe latest AAR binary package information can be [here](https://www.zetetic.net/sqlcipher/open-source), the source can be found [here](https://github.com/sqlcipher/android-database-sqlcipher).\n<p><a title=\"Latest version from Maven Central\" href=\"https://maven-badges.herokuapp.com/maven-central/net.zetetic/android-database-sqlcipher\"><img src=\"https://maven-badges.herokuapp.com/maven-central/net.zetetic/android-database-sqlcipher/badge.svg\"></a></p>\n\n### Compatibility\n\nSQLCipher for Android runs on Android from 5.0 (API 21), for `armeabi-v7a`, `x86`, `x86_64`, and `arm64_v8a` architectures.\n\n### Contributions\n\nWe welcome contributions, to contribute to SQLCipher for Android, a [contributor agreement](https://www.zetetic.net/contributions/) needs to be submitted. All submissions should be based on the `master` branch.\n\n### An Illustrative Terminal Listing\n\nA typical SQLite database in unencrypted, and visually parseable even as encoded text. The following example shows the difference between hexdumps of a standard SQLite database and one implementing SQLCipher.\n\n```\n~ sjlombardo$ hexdump -C sqlite.db\n00000000 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00 |SQLite format 3.|\n…\n000003c0 65 74 32 74 32 03 43 52 45 41 54 45 20 54 41 42 |et2t2.CREATE TAB|\n000003d0 4c 45 20 74 32 28 61 2c 62 29 24 01 06 17 11 11 |LE t2(a,b)$…..|\n…\n000007e0 20 74 68 65 20 73 68 6f 77 15 01 03 01 2f 01 6f | the show…./.o|\n000007f0 6e 65 20 66 6f 72 20 74 68 65 20 6d 6f 6e 65 79 |ne for the money|\n\n~ $ sqlite3 sqlcipher.db\nsqlite> PRAGMA KEY=’test123′;\nsqlite> CREATE TABLE t1(a,b);\nsqlite> INSERT INTO t1(a,b) VALUES (‘one for the money’, ‘two for the show’);\nsqlite> .quit\n\n~ $ hexdump -C sqlcipher.db\n00000000 84 d1 36 18 eb b5 82 90 c4 70 0d ee 43 cb 61 87 |.?6.?..?p.?C?a.|\n00000010 91 42 3c cd 55 24 ab c6 c4 1d c6 67 b4 e3 96 bb |.B?..?|\n00000bf0 8e 99 ee 28 23 43 ab a4 97 cd 63 42 8a 8e 7c c6 |..?(#C??.?cB..|?|\n\n~ $ sqlite3 sqlcipher.db\nsqlite> SELECT * FROM t1;\nError: file is encrypted or is not a database\n```\n(example courtesy of SQLCipher)\n\n### Application Integration\n\nYou have a two main options for using SQLCipher for Android in your app:\n\n- Using it with Room or other consumers of the `androidx.sqlite` API\n\n- Using the native SQLCipher for Android classes\n\nIn both cases, you will need to add a dependency on `net.zetetic:android-database-sqlcipher`,\nsuch as having the following line in your module's `build.gradle` `dependencies`\nclosure:\n\n```gradle\nimplementation \"net.zetetic:android-database-sqlcipher:4.5.3\"\nimplementation \"androidx.sqlite:sqlite:2.1.0\"\n```\n\n(replacing `4.5.3` with the version you want)\n\n<a title=\"Latest version from Maven Central\" href=\"https://maven-badges.herokuapp.com/maven-central/net.zetetic/android-database-sqlcipher\"><img src=\"https://maven-badges.herokuapp.com/maven-central/net.zetetic/android-database-sqlcipher/badge.svg\"></a>\n\n#### Using SQLCipher for Android With Room\n\nSQLCipher for Android has a `SupportFactory` class in the `net.sqlcipher.database` package\nthat can be used to configure Room to use SQLCipher for Android.\n\nThere are three `SupportFactory` constructors:\n\n- `SupportFactory(byte[] passphrase)`\n- `SupportFactory(byte[] passphrase, SQLiteDatabaseHook hook)`\n- `SupportFactory(byte[] passphrase, SQLiteDatabaseHook hook, boolean clearPassphrase)`\n\nAll three take a `byte[]` to use as the passphrase (if you have a `char[]`, use\n`SQLiteDatabase.getBytes()` to get a suitable `byte[]` to use).\n\nTwo offer a `SQLiteDatabaseHook` parameter that you can use\nfor executing SQL statements before or after the passphrase is used to key\nthe database.\n\nThe three-parameter constructor also offers `clearPassphrase`, which defaults\nto `true` in the other two constructors. If `clearPassphrase` is set to `true`,\nthis will zero out the bytes of the `byte[]` after we open the database. This\nis safest from a security standpoint, but it does mean that the `SupportFactory`\ninstance is a single-use object. Attempting to reuse the `SupportFactory`\ninstance later will result in being unable to open the database, because the\npassphrase will be wrong. If you think that you might need to reuse the\n`SupportFactory` instance, pass `false` for `clearPassphrase`.\n\nThen, pass your `SupportFactory` to `openHelperFactory()` on your `RoomDatabase.Builder`:\n\n```java\nfinal byte[] passphrase = SQLiteDatabase.getBytes(userEnteredPassphrase);\nfinal SupportFactory factory = new SupportFactory(passphrase);\nfinal SomeDatabase room = Room.databaseBuilder(activity, SomeDatabase.class, DB_NAME)\n  .openHelperFactory(factory)\n  .build();\n```\n\nNow, Room will make all of its database requests using SQLCipher for Android instead\nof the framework copy of SQLCipher.\n\nNote that `SupportFactory` should work with other consumers of the `androidx.sqlite` API;\nRoom is merely a prominent example.\n\n#### Using SQLCipher for Android's Native API\n\nIf you have existing SQLite code using classes like `SQLiteDatabase` and `SQLiteOpenHelper`,\nconverting your code to use SQLCipher for Android mostly is a three-step process:\n\n1. Replace all `android.database.sqlite.*` `import` statements with ones that\nuse `net.sqlcipher.database.*` (e.g., convert `android.database.sqlite.SQLiteDatabase`\nto `net.sqlcipher.database.SQLiteDatabase`)\n\n2. Before attempting to open a database, call `SQLiteDatabase.loadLibs()`, passing\nin a `Context` (e.g., add this to `onCreate()` of your `Application` subclass, using\nthe `Application` itself as the `Context`)\n\n3. When opening a database (e.g., `SQLiteDatabase.openOrCreateDatabase()`), pass\nin the passphrase as a `char[]` or `byte[]`\n\nThe rest of your code may not need any changes.\n\nAn article covering both integration of SQLCipher into an Android application as well as building the source can be found [here](https://www.zetetic.net/sqlcipher/sqlcipher-for-android/).\n\n### ProGuard\n\nFor applications which utilize ProGuard, a few additional rules must be included when using SQLCipher for Android. These rules instruct ProGuard to omit the renaming of the internal SQLCipher classes which are used via lookup from the JNI layer. It is worth noting that since SQLCipher or Android is based on open source code there is little value in obfuscating the library anyway. The more important use of ProGuard is to protect your application code and business logic.\n\n```\n-keep,includedescriptorclasses class net.sqlcipher.** { *; }\n-keep,includedescriptorclasses interface net.sqlcipher.** { *; }\n```\n\n### Building\n\nIn order to build `android-database-sqlcipher` from source you will need both the Android SDK, Gradle, Android NDK, SQLCipher core source directory, and an OpenSSL source directory. We currently recommend using Android NDK LTS version `23.0.7599858`.\n\nTo complete the `make` command, the `ANDROID_NDK_HOME` environment variable must be defined which should point to your NDK root. Once you have cloned the repo, change directory into the root of the repository and run the following commands:\n\n```\nSQLCIPHER_ROOT=/some/path/to/sqlcipher-folder \\\nOPENSSL_ROOT=/some/path/to/openssl-folder \\\nSQLCIPHER_CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2\" \\\nSQLCIPHER_ANDROID_VERSION=\"4.5.3\" \\\nmake build-release\n```\n\nYou may specify other build flags/features within `SQLCIPHER_CFLAGS`, however, specifying `-DSQLITE_HAS_CODEC` and `-DSQLITE_TEMP_STORE` is necessary in the list of flags.\n\n### License\n\nThe Android support libraries are licensed under Apache 2.0, in line with the Android OS code on which they are based. The SQLCipher code itself is licensed under a BSD-style license from Zetetic LLC. Finally, the original SQLite code itself is in the public domain.\n"
        },
        {
          "name": "SQLCIPHER_LICENSE",
          "type": "blob",
          "size": 1.6962890625,
          "content": "http://sqlcipher.net\n\n Copyright (c) 2010 Zetetic LLC\n            All rights reserved.\n\n            Redistribution and use in source and binary forms, with or without\n            modification, are permitted provided that the following conditions are met:\n                * Redistributions of source code must retain the above copyright\n                  notice, this list of conditions and the following disclaimer.\n                * Redistributions in binary form must reproduce the above copyright\n                  notice, this list of conditions and the following disclaimer in the\n                  documentation and/or other materials provided with the distribution.\n                * Neither the name of the ZETETIC LLC nor the\n                  names of its contributors may be used to endorse or promote products\n                  derived from this software without specific prior written permission.\n\n            THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY\n            EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n            WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n            DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY\n            DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n            (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n            ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n            (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n            SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "android-database-sqlcipher",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 3.5615234375,
          "content": "buildscript {\n  repositories {\n    google()\n    mavenCentral()\n    maven {\n      url \"https://plugins.gradle.org/m2/\"\n    }\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:7.3.1'\n    classpath \"gradle.plugin.org.ec4j.gradle:editorconfig-gradle-plugin:0.0.3\"\n  }\n}\n\nallprojects {\n  repositories {\n    google()\n    mavenCentral()\n  }\n}\n\next {\n  if(project.hasProperty('sqlcipherAndroidClientVersion')) {\n    clientVersionNumber = \"${sqlcipherAndroidClientVersion}\"\n  } else {\n    clientVersionNumber = \"UndefinedBuildNumber\"\n  }\n  mavenPackaging = \"aar\"\n  mavenGroup = \"net.zetetic\"\n  mavenArtifactId = \"android-database-sqlcipher\"\n  mavenLocalRepositoryPrefix = \"file://\"\n  if(project.hasProperty('publishLocal') && publishLocal.toBoolean()){\n    mavenSnapshotRepositoryUrl = \"outputs/snapshot\"\n    mavenReleaseRepositoryUrl = \"outputs/release\"\n  } else {\n    mavenLocalRepositoryPrefix = \"\"\n    mavenSnapshotRepositoryUrl = \"https://oss.sonatype.org/content/repositories/snapshots\"\n    mavenReleaseRepositoryUrl = \"https://oss.sonatype.org/service/local/staging/deploy/maven2\"\n  }\n  if(project.hasProperty('publishSnapshot') && publishSnapshot.toBoolean()){\n    mavenVersionName = \"${clientVersionNumber}-SNAPSHOT\"\n  } else {\n    mavenVersionName = \"${clientVersionNumber}\"\n  }\n  if(project.hasProperty('nexusUsername')){\n    nexusUsername = \"${nexusUsername}\"\n  }\n  if(project.hasProperty('nexusPassword')){\n    nexusPassword = \"${nexusPassword}\"\n  }\n  mavenPomDescription = \"SQLCipher for Android is a plugin to SQLite that provides full database encryption.\"\n  mavenPomUrl = \"https://www.zetetic.net/sqlcipher\"\n  mavenScmUrl = \"https://github.com/sqlcipher/android-database-sqlcipher.git\"\n  mavenScmConnection = \"scm:git:https://github.com/sqlcipher/android-database-sqlcipher.git\"\n  mavenScmDeveloperConnection = \"scm:git:https://github.com/sqlcipher/android-database-sqlcipher.git\"\n  mavenLicenseUrl = \"https://www.zetetic.net/sqlcipher/license/\"\n  mavenDeveloperName = \"Zetetic Support\"\n  mavenDeveloperEmail = \"support@zetetic.net\"\n  mavenDeveloperOrganization = \"Zetetic LLC\"\n  mavenDeveloperUrl = \"https://www.zetetic.net\"\n  minimumAndroidSdkVersion = 21\n  minimumAndroid64BitSdkVersion = 21\n  targetAndroidSdkVersion = 26\n  compileAndroidSdkVersion = 26\n  mainProjectName = \"android-database-sqlcipher\"\n  nativeRootOutputDir = \"${projectDir}/${mainProjectName}/src/main\"\n  if(project.hasProperty('sqlcipherRoot')) {\n    sqlcipherDir = \"${sqlcipherRoot}\"\n  }\n  if(project.hasProperty('opensslAndroidNativeRoot') && \"${opensslAndroidNativeRoot}\") {\n    androidNativeRootDir = \"${opensslAndroidNativeRoot}\"\n  } else {\n    androidNativeRootDir = \"${nativeRootOutputDir}/external/android-libs\"\n  }\n  if(project.hasProperty('opensslRoot')) {\n    opensslDir = \"${opensslRoot}\"\n  }\n  if(project.hasProperty('debugBuild') && debugBuild.toBoolean()) {\n    otherSqlcipherCFlags = \"-fstack-protector-all\"\n    ndkBuildType=\"NDK_DEBUG=1\"\n  } else {\n    otherSqlcipherCFlags = \"-DLOG_NDEBUG -fstack-protector-all\"\n    ndkBuildType=\"NDK_DEBUG=0\"\n  }\n  if(project.hasProperty('sqlcipherCFlags')\n     && project.sqlcipherCFlags?.trim()\n     && project.sqlcipherCFlags?.contains('SQLITE_HAS_CODEC')\n     && project.sqlcipherCFlags?.contains('SQLITE_TEMP_STORE')) {\n       sqlcipherCFlags = \"${sqlcipherCFlags}\"\n  } else {\n    if(!project.gradle.startParameter.taskNames.toString().contains('clean')){\n      throw new InvalidUserDataException(\"SQLCIPHER_CFLAGS environment variable must be specified and include at least '-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2'\")\n    }\n  }\n}\n\ntask clean(type: Delete) {\n  delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.0234375,
          "content": "android.useAndroidX=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.6982421875,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.037109375,
          "content": "include ':android-database-sqlcipher'\n"
        }
      ]
    }
  ]
}