{
  "metadata": {
    "timestamp": 1736708608489,
    "page": 921,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spring-projects/spring-integration-samples",
      "stars": 2327,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.22265625,
          "content": "application.log\napplication.log*\ntarget/\nbin/\nlog.roo\n.project\n.classpath\n.springBeans\n.DS_Store\n*.iml\n*.ipr\n*.iws\nderby.log\n.idea\nactivemq-data\n.settings/\n.sts4-cache\n.factorypath\nout\n/.gradle\nbuild/\n/classes\n.mvn\nmvnw*\n.vscode"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.716796875,
          "content": "Spring Integration Samples\n==========================\n\n[![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.spring.io/scans?search.rootProjectNames=spring-integration-samples)\n\nWelcome to the **Spring Integration Samples** repository which provides **50+ samples** to help you learn [Spring Integration][]. To simplify your experience, the *Spring Integration* samples are split into 4 distinct categories:\n\n* Basic\n* Intermediate\n* Advanced\n* Applications\n* DSL\n\nInside of each category you'll find a **README.md** file, which will contain a more detailed description of that category. Each sample also comes with its own **README.md** file explaining further details, e.g. how to run the respective sample.\n\n| For additional samples, please also checkout the [Spring Integration Extensions][] project as it also provides numerous samples.\n\n*Happy Integration!*\n\n# Note\n\nThis (main) branch requires Spring Integration 6.0 or above. \nFor samples running against earlier versions of Spring Integration, use the __5.5.x__ and other branches.\n\nThe project requires now Java 17 or above.\nTo open the project in the IDE, use its `import` option against a `build.gradle` file from the root project directory.\n\n## Related GitHub projects\n\n* [Spring Integration][]\n* [Spring Integration Extensions][]\n\n## Community Sample Projects\n\n* [Xavier Padr√≥][]\n\n# Categories\n\nBelow is a short description of each category.\n\n## DSL\n\nThis directory holds demos/samples for Spring Integration 4.0 Java Configuration as well as the Java DSL Extension.\n\n## Basic\n\nThis is a good place to get started. The samples here are technically motivated and demonstrate the bare minimum with regard to configuration and code to help you to get introduced to the basic concepts, API and configuration of Spring Integration. For example, if you are looking for an answer on how to wire a **Service Activator**  to a **Channel** or how to apply a **Gateway** to your message exchange or how to get started with using the **MAIL** or **XML** module, this would be the right place to find a relevant sample. The bottom line is that this is a good starting point.\n\n* **amqp** - Demonstrates the functionality of the various **AMQP Adapters**\n* **barrier** - Shows how to suspend a thread until some asynchronous event occurs\n* **control-bus** - Demonstrates the functionality of the **Control Bus**\n* **enricher** - This sample demonstrates how the Enricher components can be used\n* **feed** - Demonstrates the functionality of the **Feed Adapter** (RSS/ATOM)\n* **file** - Demonstrates aspects of the various File Adapters (e.g. **File Inbound/Outbound Channel Adapters**, file **polling**)\n* **ftp** - Demonstrates the **FTP support** available with Spring Integration\n* **helloworld** - Very simple starting example illustrating a basic message flow (using **Channel**, **ServiceActivator**, **QueueChannel**)\n* **http** - Demonstrates request/reply communication when using a pair of **HTTP Inbound/Outbound gateways**\n* **jdbc** - Illustrates the usage of the Jdbc Adapters, including object persistence and retrieval\n* **jms** - Demonstrates **JMS** support available with Spring Integration\n* **jmx** - Demonstrates **JMX** support using a **JMX Attribute Polling Channel** and **JMX Operation Invoking Channel Adapter**\n* **jpa** - Shows the usage of the JPA Components\n* **mail** - Example showing **IMAP** and **POP3** support\n* **mqtt** - Demonstrates the functionality of inbound and outbound **MQTT Adapters**\n* **mongodb** - Shows how to persist a Message payload to a **MongoDb** document store and how to read documents from **MongoDb**\n* **oddeven** - Example combining the functionality of **Inbound Channel Adapter**, **Filter**, **Router** and **Poller**\n* **quote** - Example demoing core EIP support using **Channel Adapter (Inbound and Stdout)**, **Poller** with Interval Triggers, **Service Activator**\n* **sftp** - Demonstrating SFTP support using **SFTP Inbound / Outbound Channel Adapters**\n* **tcp-amqp** - Demonstrates basic functionality of bridging the **Spring Integration TCP Adapters** with **Spring Integration AMQP Adapters**\n* **tcp-broadcast** - Demonstrates broadcasting a message to multiple connected TCP clients.\n* **tcp-client-server** - Demonstrates socket communication using **TcpOutboundGateway**, **TcpInboundGateway** and also uses a **Gateway** and a **Service Activator**\n* **tcp-with-headers** - Demonstrates sending headers along with the payload over TCP using JSON.\n* **testing-examples** - A series of test cases that show techniques to **test** Spring Integration applications.\n* **twitter** - Illustrates Twitter support using the **Twitter Inbound Channel Adapter**, **Twitter Inbound Search Channel Adapter**, **Twitter Outbound Channel Adapter**\n* **ws-inbound-gateway** - Example showing basic functionality of the **Web Service Gateway**\n* **ws-outbound-gateway** - Shows outbound web services support using the **Web Service Outbound Gateway**, **Content Enricher**, Composed Message Processor (**Chain**)\n* **xml** - Example demonstrates various aspects of the **Xml** support using an **XPath Splitter**, **XPath Router**, **XSLT Transformer** as well as **XPath Expression** support\n* **xmpp** - Show the support for [**XMPP**](https://en.wikipedia.org/wiki/Extensible_Messaging_and_Presence_Protocol) (formerly known as Jabber) using e.g. GoogleTalk\n* **zip** - Show the support for zip files manipulations\n\n## Intermediate\n\nThis category targets developers who are already more familiar with the Spring Integration framework (past getting started), but need some more guidance while resolving more advanced technical problems that you have to deal with when switching to a Messaging architecture. For example, if you are looking for an answer on how to handle errors in various scenarios, or how to properly configure an **Aggregator** for the situations where some messages might not ever arrive for aggregation, or any other issue that goes beyond a basic understanding and configuration of a particular component to address \"what else you can do?\" types of problems, this would be the right place to find relevant examples.\n\n* **async-gateway** - Usage example of an asynchronous **Gateway**\n* **dynamic-poller** - Example shows usage of a **Poller** with a custom **Trigger** to change polling periods at runtime\n* **async-gateway** - Example shows usage of an **Asynchronous Gateway**\n* **errorhandling** - Demonstrates basic **Error Handling** capabilities of Spring Integration\n* **file-processing** - Sample demonstrates how to wire a message flow to process files either sequentially (maintain the order) or concurrently (no order).\n* **mail-attachments** - Demonstrates the processing of email attachments\n* **monitoring** The project used in the *[Spring Integration Management and Monitoring Webinar](https://www.springsource.org/node/3598)* Also available on the *[SpringSourceDev YouTube Channel](https://www.youtube.com/SpringSourceDev)*\n* **multipart-http** - Demonstrates the sending of HTTP multipart requests using Spring's **RestTemplate** and a Spring Integration **Http Outbound Gateway**\n* **rest-http** - This sample demonstrates how to send an HTTP request to a Spring Integration's HTTP service while utilizing Spring Integration's new HTTP Path usage. This sample also uses Spring Security for HTTP Basic authentication. With HTTP Path facility, the client program can send requests with URL Variables.\n* **retry-and-more** Provides samples showing the application of MessageHandler Advice Chains to endpoints - retry, circuit breaker, expression evaluating\n* **splitter-aggregator-reaper** A demonstration of implementing the Splitter and Aggregator *Enterprise Integration Patterns* (EIP) together. This sample also provides a concrete example of a [message store reaper][] in action.\n* **stored-procedures-derby**  Provides an example of the stored procedure Outbound Gateway using *[Apache Derby](https://db.apache.org/derby/)*\n* **stored-procedures-ms** Provides an example of the stored procedure Outbound Gateway using *Microsoft SQL Server*\n* **stored-procedures-oracle** Provides an example of the stored procedure Outbound Gateway using *ORACLE XE*\n* **stored-procedures-postgresql** Provides an example of the stored procedure Outbound Gateway using *[PostgreSQL](https://www.postgresql.org/)*\n* **tcp-async-bi-directional** - Demonstrates the use of *Collaborating Channel Adapters* for arbitrary async messaging (not request/reply) between peers.\n* **tcp-client-server-multiplex** - Demonstrates the use of *Collaborating Channel Adapters* with multiple in-flight requests/responses over a single connection.\n* **travel** - More sophisticated example showing the retrieval of weather (SOAP Web Service) and traffic (HTTP Service) reports using real services\n* **tx-synch** Provides a sample demonstrating the use of transaction synchronization, renaming an input file to a different filename, depending on whether the transaction commits, or rolls back.\n\n## Advanced\n\nThis category targets advanced developers who are quite familiar with Spring Integration but are looking to address a specific custom need by extending the Spring Integration public API. For example, if you are looking for samples showing how to implement a custom **Channel** or **Consumer** (event-based or polling-based), or you are trying to figure out what is the most appropriate way to implement a custom **BeanParser** on top of the Spring Integration BeanParser hierarchy when implementing a custom namespace, this would be the right place to look. Here you can also find samples that will help you with adapter development. Spring Integration comes with an extensive library of adapters that allow you to connect remote systems with the Spring Integration messaging framework. However you might have a need to integrate with a system for which the core framework does not provide an adapter, so you have to implement your own. This category would include samples showing you how to implement various adapters.\n\n* **advanced-testing-examples** - Example test cases that show advanced techniques to test Spring Integration applications\n* **dynamic-ftp** - Demonstrates one technique for sending files to dynamic destinations.\n* **dynamic-tcp-client** - Demonstrates a technique for dynamically creating TCP clients.\n\n## Applications\n\nThis category targets developers and architects who have a good understanding of Message-Driven architecture and Enterprise Integration Patterns, and have an above average understanding of Spring and Spring integration and who are looking for samples that address a particular business problem. In other words, the emphasis of samples in this category is '**business use cases**' and how they can be solved via a Messaging architecture and Spring Integration in particular. For example, if you are interested to see how a Loan Broker process or Travel Agent process could be implemented and automated via Spring Integration, this would be the right place to find these types of samples.\n\n* **cafe** - Emulates a simple operation of a coffee shop combining various Spring Integration adapters (Including **Router** and **Splitter**) see [Appendix A of the reference documentation](https://docs.spring.io/spring-integration/docs/current/reference/html/#samples) for more details. Implementations are provided for:\n  - AMQP\n  - JMS\n  - In memory channels\n* **cafe-scripted** - Scripted implementation of the classic **cafe** sample application. Supports **JavaScript**, **Groovy**, **Ruby**, and **Python**.\n* **loan-broker** - Simulates a simple banking application (Uses **Gateway**, **Chain**, **Header Enricher**, **Recipient List Router**, **Aggregator**) see [Appendix A of the reference documentation](https://docs.spring.io/spring-integration/docs/current/reference/html/#samples) for more details\n* **loanshark** This extension to the loan broker sample shows how to exchange messages between Spring Integration applications (and other technologies) using **UDP**.\n  **file-split-ftp** - Reads a file; splits into 3 based on contents; sends files over ftp; sends email with results.\n\n# Contributing\n\nSee the [Spring Integration Contributor Guidelines](https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc) for information about how to contribute to this repository.\n\n# Resources\n\nFor more information, please visit the Spring Integration website at: [https://projects.spring.io/spring-integration/](https://projects.spring.io/spring-integration/)\n\n[Spring Integration]: https://github.com/spring-projects/spring-integration\n[Spring Integration Extensions]: https://github.com/spring-projects/spring-integration-extensions\n\n[message store reaper]: https://docs.spring.io/spring-integration/api/org/springframework/integration/store/MessageGroupStoreReaper.html\n\n[Xavier Padr√≥]: https://github.com/xpadro/spring-integration\n"
        },
        {
          "name": "advanced",
          "type": "tree",
          "content": null
        },
        {
          "name": "applications",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 44.4482421875,
          "content": "buildscript {\n\trepositories {\n\t\tmavenCentral()\n\t\tgradlePluginPortal()\n\t\tmaven { url 'https://repo.spring.io/milestone' }\n\t\tmaven { url 'https://repo.spring.io/snapshot' }\n\t}\n\tdependencies {\n\t\tclasspath 'io.spring.gradle:dependency-management-plugin:1.1.5'\n\t\tclasspath \"org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion\"\n\t\tclasspath 'org.gretty:gretty:4.0.3'\n\t}\n}\n\ndescription = 'Spring Integration Samples'\n\napply plugin: 'base'\napply plugin: 'idea'\n\next {\n\tlinkHomepage = 'https://projects.spring.io/spring-integration'\n\tlinkCi = 'https://build.spring.io/browse/INTSAMPLES'\n\tlinkIssue = 'https://github.com/spring-projects/spring-integration-samples/issues'\n\tlinkScmUrl = 'https://github.com/spring-projects/spring-integration-samples'\n\tlinkScmConnection = 'scm:git:git://github.com/spring-projects/spring-integration-samples.git'\n\tlinkScmDevConnection = 'scm:git:ssh://git@github.com:spring-projects/spring-integration-samples.git'\n}\n\nallprojects {\n\tgroup = 'org.springframework.integration.samples'\n\n\trepositories {\n\t\tmavenLocal()\n\t\tmavenCentral()\n\t\tmaven { url 'https://repo.spring.io/milestone' }\n\t\tmaven { url 'https://repo.spring.io/snapshot' }\n//\t\tmaven { url 'https://repo.spring.io/libs-staging-local' }\n\t}\n\n}\n\nsubprojects { subproject ->\n\n\tapply plugin: 'eclipse'\n\tapply plugin: 'idea'\n\n\teclipse {\n\t\tproject {\n\t\t\tnatures += 'org.springframework.ide.eclipse.core.springnature'\n\t\t}\n\t}\n\n\tif (!(subproject.name in ['advanced', 'applications', 'basic', 'intermediate', 'dsl', 'cafe'])) {\n\n\t\tapply plugin: 'java-library'\n\t\tapply plugin: 'io.spring.dependency-management'\n\t\tapply plugin: 'maven-publish'\n\n\t\ttasks.withType(GenerateModuleMetadata) {\n\t\t\tenabled = false\n\t\t}\n\n\t\tmodel {\n\t\t\ttasks.generatePomFileForMavenJavaPublication {\n\t\t\t\tdestination = file('pom.xml')\n\t\t\t}\n\t\t}\n\n\t\ttask generatePom(dependsOn: 'generatePomFileForMavenJavaPublication')\n\n\t\tpublishing {\n\t\t\tpublications {\n\t\t\t\tmavenJava(MavenPublication) {\n\t\t\t\t\tsuppressAllPomMetadataWarnings()\n\t\t\t\t\tfrom components.java\n\t\t\t\t\tpom {\n\t\t\t\t\t\tname = project.description\n\t\t\t\t\t\tdescription = project.description\n\t\t\t\t\t\turl = linkScmUrl\n\t\t\t\t\t\torganization {\n\t\t\t\t\t\t\tname = 'Spring IO'\n\t\t\t\t\t\t\turl = 'https://spring.io/projects/spring-integration'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlicenses {\n\t\t\t\t\t\t\tlicense {\n\t\t\t\t\t\t\t\tname = 'Apache License, Version 2.0'\n\t\t\t\t\t\t\t\turl = 'https://www.apache.org/licenses/LICENSE-2.0.txt'\n\t\t\t\t\t\t\t\tdistribution = 'repo'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscm {\n\t\t\t\t\t\t\turl = linkScmUrl\n\t\t\t\t\t\t\tconnection = 'scm:git:' + linkScmConnection\n\t\t\t\t\t\t\tdeveloperConnection = 'scm:git:' + linkScmDevConnection\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdevelopers {\n\t\t\t\t\t\t\tdeveloper {\n\t\t\t\t\t\t\t\tid = 'artembilan'\n\t\t\t\t\t\t\t\tname = 'Artem Bilan'\n\t\t\t\t\t\t\t\temail = 'artem.bilan@broadcom.com'\n\t\t\t\t\t\t\t\troles = ['project lead']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdeveloper {\n\t\t\t\t\t\t\t\tid = 'garyrussell'\n\t\t\t\t\t\t\t\tname = 'Gary Russell'\n\t\t\t\t\t\t\t\temail = 'github@gprussell.net'\n\t\t\t\t\t\t\t\troles = ['project lead emeritus']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdeveloper {\n\t\t\t\t\t\t\t\tid = 'markfisher'\n\t\t\t\t\t\t\t\tname = 'Mark Fisher'\n\t\t\t\t\t\t\t\temail = 'mark.ryan.fisher@gmail.com'\n\t\t\t\t\t\t\t\troles = ['project founder and lead emeritus']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tissueManagement {\n\t\t\t\t\t\t\tsystem = 'GitHub'\n\t\t\t\t\t\t\turl = linkIssue\n\t\t\t\t\t\t}\n\t\t\t\t\t\twithXml {\n\t\t\t\t\t\t\tasNode().appendNode('properties')appendNode('java.version', java.sourceCompatibility)\n\t\t\t\t\t\t\tif (subproject.plugins.hasPlugin('org.akhikhl.gretty')) {\n\t\t\t\t\t\t\t\tasNode().appendNode('packaging', 'war')\n\t\t\t\t\t\t\t\tdef plugins = asNode().build?.find()?.plugins?.find()\n\t\t\t\t\t\t\t\tif (!plugins) {\n\t\t\t\t\t\t\t\t\tplugins = asNode().appendNode('build').appendNode('plugins')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tplugins.appendNode('plugin')\n\t\t\t\t\t\t\t\t\t\t.with {\n\t\t\t\t\t\t\t\t\t\t\tappendNode('groupId', 'org.mortbay.jetty')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('artifactId', 'jetty-maven-plugin')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('version', '8.1.14.v20131031')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('configuration')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.appendNode('webAppConfig')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.appendNode('contextPath', '/' + subproject.name)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (subproject.plugins.hasPlugin('org.springframework.boot')) {\n\t\t\t\t\t\t\t\tasNode().get('packaging').first().value = 'jar'\n\t\t\t\t\t\t\t\tdef plugins = asNode().build?.find()?.plugins?.find()\n\t\t\t\t\t\t\t\tif (!plugins) {\n\t\t\t\t\t\t\t\t\tplugins = asNode().appendNode('build').appendNode('plugins')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tplugins.appendNode('plugin')\n\t\t\t\t\t\t\t\t\t\t.with {\n\t\t\t\t\t\t\t\t\t\t\tappendNode('groupId', 'org.springframework.boot')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('artifactId', 'spring-boot-maven-plugin')\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tasNode().appendNode('parent').with {\n\t\t\t\t\t\t\t\t\tappendNode('groupId', 'org.springframework.boot')\n\t\t\t\t\t\t\t\t\tappendNode('artifactId', 'spring-boot-starter-parent')\n\t\t\t\t\t\t\t\t\tappendNode('version', property('springBootVersion'))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (subproject.plugins.hasPlugin('java-library')) {\n\t\t\t\t\t\t\t\tdef repositories = asNode().appendNode('repositories')\n\t\t\t\t\t\t\t\trepositories.appendNode('repository')\n\t\t\t\t\t\t\t\t\t\t.with {\n\t\t\t\t\t\t\t\t\t\t\tappendNode('id', 'repo.spring.io.milestone')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('name', 'Spring Framework Maven Milestone Repository')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('url', 'https://repo.spring.io/milestone')\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trepositories.appendNode('repository')\n\t\t\t\t\t\t\t\t\t\t.with {\n\t\t\t\t\t\t\t\t\t\t\tappendNode('id', 'repo.spring.io.snapshot')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('name', 'Spring Framework Maven Snapshot Repository')\n\t\t\t\t\t\t\t\t\t\t\tappendNode('url', 'https://repo.spring.io/snapshot')\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdef pomDeps = asNode().dependencies.find()\n\t\t\t\t\t\t\tif (!pomDeps) {\n\t\t\t\t\t\t\t\tpomDeps = asNode().appendNode('dependencies')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsubproject.configurations.testImplementation.dependencies.each { dep ->\n\t\t\t\t\t\t\t\tpomDeps.appendNode('dependency').with {\n\t\t\t\t\t\t\t\t\tappendNode('groupId', dep.group)\n\t\t\t\t\t\t\t\t\tappendNode('artifactId', dep.name)\n\t\t\t\t\t\t\t\t\tif (dep.version) {\n\t\t\t\t\t\t\t\t\t\tappendNode('version', dep.version)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tappendNode('scope', 'test')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsubproject.configurations.testRuntimeOnly.dependencies.each { dep ->\n\t\t\t\t\t\t\t\tpomDeps.appendNode('dependency').with {\n\t\t\t\t\t\t\t\t\tappendNode('groupId', dep.group)\n\t\t\t\t\t\t\t\t\tappendNode('artifactId', dep.name)\n\t\t\t\t\t\t\t\t\tif (dep.version) {\n\t\t\t\t\t\t\t\t\t\tappendNode('version', dep.version)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tappendNode('scope', 'runtime')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcompileJava {\n\t\t\tsourceCompatibility = JavaVersion.VERSION_17\n\t\t\ttargetCompatibility = JavaVersion.VERSION_17\n\t\t}\n\n\t\tcompileTestJava {\n\t\t\tsourceCompatibility = JavaVersion.VERSION_17\n\t\t\ttargetCompatibility = JavaVersion.VERSION_17\n\t\t\toptions.encoding = 'UTF-8'\n\t\t}\n\n\t\text {\n\t\t\tartemisVersion = '2.33.0'\n\t\t\taspectjVersion = '1.9.22.1'\n\t\t\tcommonsDigesterVersion = '2.1'\n\t\t\tcommonsDbcpVersion = '2.12.0'\n\t\t\tcommonsFileUploadVersion = '1.5'\n\t\t\tcommonsIoVersion = '2.16.1'\n\t\t\tcommonsLangVersion = '3.12.0'\n\t\t\tcommonsPoolVersion = '2.11.1'\n\t\t\tc3p0Version = '0.9.5.5'\n\t\t\tderbyVersion = '10.16.1.1'\n\t\t\thamcrestVersion = '2.2'\n\t\t\thibernateVersion = '6.5.2.Final'\n\t\t\thibernateValidatorVersion = '8.0.0.Final'\n\t\t\tftpServerVersion = '1.2.0'\n\t\t\tflexjsonVersion = '2.0'\n\t\t\tgraalvmVersion = '24.0.2'\n\t\t\tgroovyVersion = '4.0.23'\n\t\t\thsqldbVersion = '2.7.3'\n\t\t\th2Version = '2.2.224'\n\t\t\tjacksonVersion = '2.18.0'\n\t\t\tjaxbVersion = '4.0.5'\n\t\t\tjodaTimeVersion = '1.6'\n\t\t\tjtaVersion = '2.0.0'\n\t\t\tjtdsVersion = '1.2.6'\n\t\t\tjmsApiVersion = '3.1.0'\n\t\t\tjrubyVersion = '9.4.7.0'\n\t\t\tjpaApiVersion = '3.1.0'\n\t\t\tjstlVersion = '1.2'\n\t\t\tjunitVersion = '4.13.2'\n\t\t\tjunitJupiterVersion = '5.11.1'\n\t\t\tlog4jVersion = '2.23.1'\n\t\t\tmailVersion = '2.0.3'\n\t\t\tmockitoVersion = '5.12.0'\n\t\t\tmongoDriverVersion = '5.1.1'\n\t\t\topenJpaVersion = '2.4.0'\n\t\t\toracleDriverVersion = '23.3.0.23.09'\n\t\t\tpostgresVersion = '42.7.3'\n\t\t\tslf4jVersion = '1.7.30'\n\t\t\tspringCloudVersion = '2023.0.2'\n\t\t\tspringIntegrationVersion = '6.4.0-SNAPSHOT'\n\t\t\tset('spring-integration.version', \"$springIntegrationVersion\")\n\t\t\tspringIntegrationSocialTwiterVersion = '1.0.1.BUILD-SNAPSHOT'\n\t\t\tspringIntegrationSplunkVersion = '1.2.0.BUILD-SNAPSHOT'\n\t\t\tspringVersion = '6.2.0-SNAPSHOT'\n\t\t\tspringSecurityVersion = '6.4.0-SNAPSHOT'\n\t\t\tspringWebFlowVersion = '3.0.0'\n\t\t\ttestcontainersVersion = '1.19.8'\n\t\t\ttilesJspVersion = '2.2.1'\n\t\t}\n\n\t\tsourceSets.each {\n\t\t\tit.resources.srcDirs = [\"src/${it.name}/resources\", \"src/${it.name}/java\"]\n\t\t}\n\n\t\tdependencyManagement {\n\t\t\timports {\n\t\t\t\tmavenBom \"org.springframework.integration:spring-integration-bom:$springIntegrationVersion\"\n\t\t\t\tmavenBom \"org.springframework:spring-framework-bom:$springVersion\"\n\t\t\t\tmavenBom \"com.fasterxml.jackson:jackson-bom:$jacksonVersion\"\n\t\t\t\tmavenBom \"org.junit:junit-bom:$junitJupiterVersion\"\n\t\t\t}\n\t\t}\n\n\t\t// dependencies that are common across all java projects\n\t\tdependencies {\n\t\t\ttestImplementation(\"junit:junit:$junitVersion\") {\n\t\t\t\texclude group: 'org.hamcrest'\n\t\t\t}\n\t\t\ttestImplementation \"org.hamcrest:hamcrest-library:$hamcrestVersion\"\n\t\t\ttestImplementation(\"org.mockito:mockito-core:$mockitoVersion\") {\n\t\t\t\texclude group: 'org.hamcrest'\n\t\t\t}\n\t\t\ttestImplementation 'org.junit.jupiter:junit-jupiter-api'\n\t\t\ttestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n\t\t\ttestRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n\t\t\t// To support JUnit 4 tests\n\t\t\ttestRuntimeOnly 'org.junit.vintage:junit-vintage-engine'\n\t\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t\t}\n\n\t\t// enable all compiler warnings; individual projects may customize further\n\t\text.xLintArg = '-Xlint:all,-options,-processing'\n\t\t[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]\n\n\t\ttest {\n\t\t\tuseJUnitPlatform()\n\t\t\t// suppress all console output during testing unless running `gradle -i`\n\t\t\tlogging.captureStandardOutput(LogLevel.INFO)\n\t\t}\n\t}\n\n\ttask cleanTarget(type: Delete) {\n\t\tdelete 'target'\n\t}\n\n\tclean.dependsOn cleanTarget\n}\n\nproject('advanced-testing-examples') {\n\tdescription = 'Advanced Testing Examples'\n\n\tdependencies {\n\t\tapi \"jakarta.jms:jakarta.jms-api:$jmsApiVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-jms'\n\t\tapi 'org.springframework.integration:spring-integration-groovy'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('dynamic-ftp') {\n\tdescription = 'Dynamic FTP Demo'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ftp'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('cafe-si') {\n\tdescription = 'Cafe - Pure Spring Integration'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.cafe.xml.CafeDemoApp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'com.fasterxml.jackson.core:jackson-databind'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('cafe-amqp') {\n\tdescription = 'Cafe - With AMQP Message Broker'\n\n\tdependencies {\n\t\tapi project(':cafe-si')\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('cafe-jms') {\n\tdescription = 'Cafe - With JMS Message Broker'\n\n\tdependencies {\n\t\tapi project(':cafe-si')\n\t\tapi(\"org.apache.activemq:artemis-server:$artemisVersion\") {\n\t\t\texclude group: 'org.jboss.logmanager'\n\t\t}\n\t\tapi \"org.apache.activemq:artemis-jakarta-client:$artemisVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-jms'\n\t\tapi \"jakarta.jms:jakarta.jms-api:$jmsApiVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('cafe-scripted') {\n\tdescription = 'Cafe Sample (Scripted Implementation)'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'org.springframework.integration:spring-integration-groovy'\n\t\tapi 'org.springframework.integration:spring-integration-jmx'\n\t\tapi 'org.springframework.integration:spring-integration-rsocket'\n\t\tapi \"org.jruby:jruby-complete:$jrubyVersion\"\n\t\tapi \"org.graalvm.sdk:graal-sdk:$graalvmVersion\"\n\t\tapi \"org.graalvm.polyglot:python:$graalvmVersion\"\n\t\tapi \"org.apache.groovy:groovy-jsr223:$groovyVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runCafeDemoApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.cafe.demo.CafeDemoApp'\n\t\targs project.hasProperty('lang') ? project.lang : ''\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runControlBus(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.cafe.demo.ControlBusMain'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('loan-broker') {\n\tdescription = 'Loan Broker Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.loanbroker.demo.LoanBrokerDemo'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runLoanBrokerSharkDetectorDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.loanbroker.demo.LoanBrokerSharkDetectorDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n}\n\nproject('loanshark') {\n\tdescription = 'Loan Shark Sample'\n\n\tapply plugin: 'war'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'eclipse-wtp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi 'org.springframework:spring-orm'\n\t\tapi 'org.springframework:spring-aop'\n\t\tapi 'org.springframework:spring-aspects'\n\t\tapi \"org.aspectj:aspectjtools:$aspectjVersion\"\n\t\tapi 'org.springframework:spring-jdbc'\n\t\tapi 'org.springframework:spring-tx'\n\t\tapi 'org.springframework:spring-context'\n\t\tapi \"commons-fileupload:commons-fileupload:$commonsFileUploadVersion\"\n\t\tapi \"org.apache.commons:commons-dbcp2:$commonsDbcpVersion\"\n\t\tapi \"commons-digester:commons-digester:$commonsDigesterVersion\"\n\t\tapi \"org.apache.commons:commons-pool2:$commonsPoolVersion\"\n\t\tapi \"org.apache.tiles:tiles-jsp:$tilesJspVersion\"\n\t\tapi \"joda-time:joda-time:$jodaTimeVersion\"\n\t\tapi \"jakarta.transaction:jakarta.transaction-api:$jtaVersion\"\n\t\tapi \"org.hsqldb:hsqldb:$hsqldbVersion\"\n\t\tapi \"net.sf.flexjson:flexjson:$flexjsonVersion\"\n\t\tapi \"org.hibernate:hibernate-validator:$hibernateValidatorVersion\"\n\t\tapi \"jakarta.persistence:jakarta.persistence-api:$jpaApiVersion\"\n\t\tapi \"org.hibernate.orm:hibernate-core:$hibernateVersion\"\n\t\tapi \"org.springframework.webflow:spring-js-resources:$springWebFlowVersion\"\n\t\tapi \"org.slf4j:slf4j-api:$slf4jVersion\"\n\n\t\truntimeOnly \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\truntimeOnly \"org.slf4j:slf4j-log4j12:$slf4jVersion\"\n\t\truntimeOnly \"org.slf4j:jcl-over-slf4j:$slf4jVersion\"\n\t}\n\n}\n\nproject('amqp') {\n\tdescription = 'AMQP Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\truntimeOnly \"org.slf4j:slf4j-jcl:$slf4jVersion\"\n\t}\n\n\ttask runSimple(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.amqp.SampleSimple'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t\tstandardInput = System.in\n\t\t// \tuseful for debugging the GradleWorkerMain\n\t\t//\t\tjvmArgs \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000\"\n\n\t}\n\n\ttask runPubConfirmsReturns(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.amqp.SamplePubConfirmsReturns'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t\tstandardInput = System.in\n\t\t// \tuseful for debugging the GradleWorkerMain\n\t\t//\t\tjvmArgs \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000\"\n\n\t}\n\n}\n\nproject('barrier') {\n\tdescription = 'Barrier Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-web'\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.boot:spring-boot-starter-amqp'\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\n\t\ttestImplementation 'org.springframework.amqp:spring-rabbit-junit'\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.barrier.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.barrier.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('control-bus') {\n\tdescription = 'Control Bus Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('enricher') {\n\tdescription = 'Enricher Basic Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.enricher.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"com.h2database:h2:$h2Version\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('feed') {\n\tdescription = 'Feed (RSS/ATOM) Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-feed'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('file') {\n\tdescription = 'File Copy Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('ftp') {\n\tdescription = 'FTP Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ftp'\n\t\tapi \"commons-io:commons-io:$commonsIoVersion\"\n\t\tapi \"org.apache.ftpserver:ftpserver-core:$ftpServerVersion\"\n\t\tapi \"org.slf4j:slf4j-api:$slf4jVersion\"\n\n\t\truntimeOnly \"org.slf4j:slf4j-log4j12:$slf4jVersion\"\n\n\t\ttestImplementation \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t}\n\n\ttest {\n\t\tinclude '**/TestSuite*'\n\t}\n}\n\nproject('helloworld') {\n\tdescription = 'Hello World Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runHelloWorldApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.helloworld.HelloWorldApp'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runPollerApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.helloworld.PollerApp'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n}\n\nproject('http') {\n\tdescription = 'HTTP Sample'\n\n\tapply plugin: 'war'\n\tapply plugin: 'application'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'eclipse-wtp'\n\n\tmainClassName = 'org.springframework.integration.samples.http.HttpClientDemo'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework.integration:spring-integration-mail'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi \"commons-fileupload:commons-fileupload:$commonsFileUploadVersion\"\n\t\tapi \"commons-io:commons-io:$commonsIoVersion\"\n\t\tapi \"org.eclipse.angus:jakarta.mail:$mailVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n}\n\n/*project('splunk') {\n\tdescription = 'Splunk Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.springframework.integration:spring-integration-splunk:$springIntegrationSplunkVersion\"\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot  {\n        mainClass = 'org.springframework.integration.samples.splunk.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.splunk.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}*/\n\nproject('kafka') {\n\tdescription = 'Apache Kafka Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi('org.springframework.integration:spring-integration-kafka') {\n\t\t\texclude group: 'org.slf4j'\n\t\t}\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.kafka.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.kafka.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('mqtt') {\n\tdescription = 'MQTT Basic Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'org.springframework.integration:spring-integration-mqtt'\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t\ttestImplementation \"org.springframework.integration:spring-integration-test\"\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.mqtt.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.mqtt.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n\n}\n\nproject('si4demo') {\n\tdescription = 'Java Configuration/DSL Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-web'\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-mail'\n\t\tapi \"org.springframework.integration:spring-integration-social-twitter:$springIntegrationSocialTwiterVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi \"org.eclipse.angus:jakarta.mail:$mailVersion\"\n\t\tapi 'com.rometools:rome:2.1.0'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.si4demo.dsl.Application'\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\nproject('cafe-dsl') {\n\tdescription = 'Java DSL Cafe Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi project(\":cafe-si\")\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.dsl.cafe.lambda.Application'\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\n\nproject('jdbc') {\n\tdescription = 'JDBC Basic Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.jdbc.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi \"com.h2database:h2:$h2Version\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('jms') {\n\tdescription = 'JMS Basic Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.jms.Main'\n\n\tdependencies {\n\t\tapi \"jakarta.jms:jakarta.jms-api:$jmsApiVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-jms'\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi(\"org.apache.activemq:artemis-server:$artemisVersion\") {\n\t\t\texclude group: 'org.jboss.logmanager'\n\t\t}\n\t\tapi \"org.apache.activemq:artemis-jakarta-client:$artemisVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t}\n}\n\nproject('jmx') {\n\tdescription = 'JMX Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jmx'\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('jpa') {\n\tdescription = 'JPA Basic Sample'\n\n\tapply plugin: 'application'\n\tapply plugin: 'org.springframework.boot'\n\n\tmainClassName = 'org.springframework.integration.samples.jpa.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-data-jpa'\n\t\tapi 'org.springframework.integration:spring-integration-jpa'\n\t\tapi \"com.h2database:h2:$h2Version\"\n\n\t\truntimeOnly 'org.springframework:spring-instrument'\n\t\truntimeOnly \"jakarta.persistence:jakarta.persistence-api:$jpaApiVersion\"\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n\n}\n\nproject('mail') {\n\tdescription = 'Mail (IMAP + POP3) Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-mail'\n\t\tapi 'org.springframework:spring-context'\n\t\tapi \"org.eclipse.angus:jakarta.mail:$mailVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runGmailInboundPop3AdapterTestApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.mail.imapidle.GmailInboundPop3AdapterTestApp'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runGmailInboundImapIdleAdapterTestApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.mail.imapidle.GmailInboundImapIdleAdapterTestApp'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('mongodb') {\n\tdescription = 'MongoDb Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-mongodb'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\tapi \"org.mongodb:mongodb-driver-sync:$mongoDriverVersion\"\n\t}\n\n\ttask runMongoDbInboundAdapterDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.mongodb.inbound.MongoDbInboundAdapterDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runMongoDbOutboundAdapterDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.mongodb.inbound.MongoDbOutboundAdapterDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('oddeven') {\n\tdescription = 'Odd-Even Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runCronOddEvenDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.oddeven.CronOddEvenDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runIntervalOddEvenDemoTestApp(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.oddeven.IntervalOddEvenDemoTestApp'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('quote') {\n\tdescription = 'Quote Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('sftp') {\n\tdescription = 'SFTP Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-sftp'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('tcp-amqp') {\n\tdescription = 'TCP-AMQP Basic Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.tcpamqp.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi \"org.slf4j:slf4j-api:$slf4jVersion\"\n\n\t\truntimeOnly \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\truntimeOnly \"org.slf4j:slf4j-log4j12:$slf4jVersion\"\n\t}\n}\n\nproject('tcp-broadcast') {\n\tdescription = 'TCP Client Broadcast Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-web'\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.tcpbroadcast.TcpBroadcastApplication'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.tcpbroadcast.TcpBroadcastApplication'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('tcp-client-server') {\n\tdescription = 'TCP Client Server Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.tcpclientserver.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi \"org.apache.commons:commons-lang3:$commonsLangVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-test'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('testcontainers-rabbitmq') {\n\tdescription = 'Testcontainers RabbitMQ Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.testcontainersrabbitmq.TestcontainersRabbitmqApplication'\n\t}\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi 'org.springframework.boot:spring-boot-starter-json'\n\n\t\ttestImplementation('org.springframework.boot:spring-boot-starter-test') {\n\t\t\texclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n\t\t}\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t\ttestImplementation 'org.springframework.amqp:spring-rabbit-test'\n\t\ttestImplementation 'org.springframework.cloud:spring-cloud-starter'\n\n\t\ttestImplementation \"org.testcontainers:junit-jupiter:$testcontainersVersion\"\n\t\ttestImplementation 'com.playtika.testcontainers:embedded-rabbitmq:2.0.19'\n\n\t}\n\n\tdependencyManagement {\n\t\timports {\n\t\t\tmavenBom \"org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion\"\n\t\t}\n\t}\n}\n\nproject('testing-examples') {\n\tdescription = 'Testing Examples'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.testing.externalgateway.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework.integration:spring-integration-ws'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t}\n}\n\nproject('twitter') {\n\tdescription = 'Twitter Basic Sample'\n\n\tdependencies {\n\t\tapi \"org.springframework.integration:spring-integration-social-twitter:$springIntegrationSocialTwiterVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/*Sample*'\n\t}\n}\n\nproject('ws-inbound-gateway') {\n\tdescription = 'WS Inbound Gateway Sample'\n\n\tapply plugin: 'war'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'eclipse-wtp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-xml'\n\t\tapi 'org.springframework.integration:spring-integration-ws'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/InContainerTests*'\n\t}\n}\n\nproject('ws-outbound-gateway') {\n\tdescription = 'WS Outbound Gateway Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.ws.WebServiceDemoTestApp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'org.springframework.integration:spring-integration-ws'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('xml') {\n\tdescription = 'XML Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.xml.BookOrderProcessingTestApp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-xml'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('xmpp') {\n\tdescription = 'XMPP Basic Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-xmpp'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/*Sample*'\n\t}\n}\n\nproject('async-gateway') {\n\tdescription = 'Async Gateway Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('dynamic-poller') {\n\tdescription = 'Dynamic Poller Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.poller.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('errorhandling') {\n\tdescription = 'Error Handling Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('file-processing') {\n\tdescription = 'File Processing Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('mail-attachments') {\n\tdescription = 'Mail Attachment Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.mailattachments.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-mail'\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi \"org.eclipse.angus:jakarta.mail:$mailVersion\"\n\t\tapi \"commons-io:commons-io:$commonsIoVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\n\t}\n}\n\nproject('monitoring') {\n\tdescription = 'Monitoring Application'\n\n\tapply plugin: 'war'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'application'\n\tapply plugin: 'eclipse-wtp'\n\n\tmainClassName = 'org.springintegration.SpringIntegrationTest'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jmx'\n\t\tapi \"org.springframework.integration:spring-integration-social-twitter:$springIntegrationSocialTwiterVersion\"\n\t\tapi 'org.springframework.integration:spring-integration-groovy'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi \"javax.servlet:jstl:$jstlVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('multipart-http') {\n\tdescription = 'HTTP Multipart Demo'\n\n\tapply plugin: 'war'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'eclipse-wtp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi 'com.fasterxml.jackson.core:jackson-databind'\n\t\tapi \"commons-fileupload:commons-fileupload:$commonsFileUploadVersion\"\n\t\tapi \"commons-io:commons-io:$commonsIoVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('rest-http') {\n\tdescription = 'Spring Integration Rest HTTP Path Usage Demo'\n\n\tapply plugin: 'war'\n\tapply plugin: 'org.gretty'\n\tapply plugin: 'eclipse-wtp'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework:spring-webmvc'\n\t\tapi 'org.springframework:spring-oxm'\n\t\tapi 'org.springframework:spring-tx'\n\t\tapi 'org.springframework:spring-jdbc'\n\t\tapi 'org.springframework:spring-context'\n\t\tapi 'org.springframework:spring-aop'\n\t\tapi 'com.fasterxml.jackson.core:jackson-databind'\n\t\tapi \"org.springframework.security:spring-security-web:$springSecurityVersion\"\n\t\tapi \"org.springframework.security:spring-security-config:$springSecurityVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\tapi \"com.sun.xml.bind:jaxb-impl:$jaxbVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/RestHttpClientTest*'\n\t}\n\n}\n\nproject('retry-and-more') {\n\tdescription = 'Retry and More Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-stream'\n\t\tapi 'org.springframework.integration:spring-integration-amqp'\n\t\tapi 'org.springframework.integration:spring-integration-ftp'\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi(\"org.mockito:mockito-core:$mockitoVersion\") {\n\t\t\texclude group: 'org.hamcrest'\n\t\t}\n\t\tapi \"org.hamcrest:hamcrest-library:$hamcrestVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttask runCircuitBreakerDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.advice.CircuitBreakerDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runFileTransferDeleteAfterSuccessDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.advice.FileTransferDeleteAfterSuccessDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runFileTransferRenameAfterFailureDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.advice.FileTransferRenameAfterFailureDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runStatefulRetryDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.advice.StatefulRetryDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttask runStatelessRetryDemo(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.advice.StatelessRetryDemo'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('splitter-aggregator-reaper') {\n\tdescription = 'Splitter-Aggregator-Reaper Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.splitteraggregator.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\n\nproject('stored-procedures-derby') {\n\tdescription = 'Derby Stored Procedures Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.storedprocedure.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi \"org.apache.derby:derby:$derbyVersion\"\n\t\tapi \"org.apache.derby:derbytools:$derbyVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('stored-procedures-oracle') {\n\tdescription = 'Oracle Stored Procedures Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.storedprocedure.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi \"com.oracle.database.jdbc:ojdbc11:$oracleDriverVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/StringConversionServiceTest*'\n\t}\n}\n\nproject('stored-procedures-ms') {\n\tdescription = 'MS SQLServer Stored Procedures Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.storedprocedure.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi \"net.sourceforge.jtds:jtds:$jtdsVersion\"\n\t\tapi \"com.mchange:c3p0:$c3p0Version\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n\n\ttest {\n\t\texclude '**/StringConversionServiceTest*'\n\t}\n}\n\nproject('stored-procedures-postgresql') {\n\tdescription = 'PostgreSQL Stored Procedures Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.storedprocedure.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi \"org.postgresql:postgresql:$postgresVersion\"\n\t\tapi \"org.apache.commons:commons-dbcp2:$commonsDbcpVersion\"\n\t\tapi \"org.apache.commons:commons-pool2:$commonsPoolVersion\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('tcp-async-bi-directional') {\n\tdescription = 'Bi-Directional TCP Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi \"org.springframework.integration:spring-integration-ip\"\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t\ttestImplementation \"org.springframework.integration:spring-integration-test\"\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.tcpasyncbi.TcpAsyncBiDirectionalApplication'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.tcpasyncbi.TcpAsyncBiDirectionalApplication'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('tcp-client-server-multiplex') {\n\tdescription = 'TCP Client Server Multiplexing Sample'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t}\n}\n\nproject('travel') {\n\tdescription = 'Travel Services Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.travel.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-ws'\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework:spring-web'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('tx-synch') {\n\tdescription = 'Transaction Synchronization Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.advice.TransactionSynchronizationDemo'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-jdbc'\n\t\tapi 'org.springframework.integration:spring-integration-file'\n\t\tapi \"com.h2database:h2:$h2Version\"\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nproject('web-sockets') {\n\tdescription = 'Web Sockets Basic Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-websocket'\n\t\tapi \"org.springframework.integration:spring-integration-websocket\"\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.websocket.standard.server.Application'\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\nproject('stomp-chat') {\n\tdescription = 'Web Sockets Stomp Chat Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-websocket'\n\t\tapi 'org.springframework.integration:spring-integration-websocket'\n\t\tapi 'org.springframework.integration:spring-integration-event'\n\t\tapi 'org.springframework.integration:spring-integration-groovy'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.chat.stomp.server.Application'\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\nproject('kafka-dsl') {\n\tdescription = 'Java DSL Kafka Sample'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-core'\n\t\tapi 'org.springframework.integration:spring-integration-kafka'\n\t\tapi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.dsl.kafka.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.dsl.kafka.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\nproject('file-split-ftp') {\n\tdescription = 'File Split FTP'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-web'\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-ftp'\n\t\tapi 'org.springframework.integration:spring-integration-http'\n\t\tapi 'org.springframework.integration:spring-integration-mail'\n\t\tapi \"org.eclipse.angus:jakarta.mail:$mailVersion\"\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t\ttestImplementation 'org.springframework.integration:spring-integration-test'\n\t\ttestImplementation ('com.icegreen:greenmail:2.1.0-alpha-3') {\n\t\t\texclude group: 'com.sun.mail'\n\t\t\texclude group: 'jakarta.activation'\n\t\t}\n\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.filesplit.Application'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.filesplit.Application'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('dynamic-tcp-client') {\n\tdescription = 'Dynamic TCP Client'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.dynamictcp.DynamicTcpClientApplication'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.dynamictcp.DynamicTcpClientApplication'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n}\n\nproject('tcp-with-headers') {\n\tdescription = 'TCP Send/Receive with headers'\n\n\tapply plugin: 'org.springframework.boot'\n\n\tdependencies {\n\t\tapi 'org.springframework.boot:spring-boot-starter-integration'\n\t\tapi 'org.springframework.integration:spring-integration-ip'\n\t\tapi 'com.fasterxml.jackson.core:jackson-databind'\n\n\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t}\n\n\tspringBoot {\n\t\tmainClass = 'org.springframework.integration.samples.tcpheaders.TcpWithHeadersApplication'\n\t}\n\n\ttask run(type: JavaExec) {\n\t\tmain 'org.springframework.integration.samples.tcpheaders.TcpWithHeadersApplication'\n\t\tclasspath = sourceSets.main.runtimeClasspath\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n\nproject('zip') {\n\tdescription = 'Zip Channel Adapters Sample'\n\n\tapply plugin: 'application'\n\n\tmainClassName = 'org.springframework.integration.samples.zip.Main'\n\n\tdependencies {\n\t\tapi 'org.springframework.integration:spring-integration-zip'\n\t\tapi \"org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion\"\n\t}\n\n\ttasks.withType(JavaExec) {\n\t\tstandardInput = System.in\n\t}\n}\n"
        },
        {
          "name": "dsl",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1435546875,
          "content": "version=6.4.0\nspringBootVersion=3.4.0-SNAPSHOT\norg.gradle.jvmargs=-Xmx1536M -Dfile.encoding=UTF-8\norg.gradle.caching=true\norg.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright ¬© 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions ¬´$var¬ª, ¬´${var}¬ª, ¬´${var:-default}¬ª, ¬´${var+SET}¬ª,\n#           ¬´${var#prefix}¬ª, ¬´${var%suffix}¬ª, and ¬´$( cmd )¬ª;\n#         * compound commands having a testable exit status, especially ¬´case¬ª;\n#         * various built-in commands including ¬´command¬ª, ¬´set¬ª, and ¬´ulimit¬ª.\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "intermediate",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.69140625,
          "content": "pluginManagement {\n\trepositories {\n\t\tgradlePluginPortal()\n\t\tmavenCentral()\n\t}\n}\n\nplugins {\n\tid 'io.spring.develocity.conventions' version '0.0.21'\n}\n\nrootProject.name = 'spring-integration-samples'\n\n['advanced', 'applications', 'basic', 'intermediate', 'dsl'].each {\n\tdef projectDir = new File(rootDir, it)\n\tinclude \":${it}\"\n\tprojectDir.eachDir { dir ->\n\t\tif (!dir.name.startsWith('.') && 'splunk' != dir.name) {\n\t\t\tinclude \":${dir.name}\"\n\t\t\tproject(\":${dir.name}\").projectDir = new File(projectDir.absolutePath, dir.name)\n\t\t\tif ('cafe' == dir.name) {\n\t\t\t\tdir.eachDir { cafe ->\n\t\t\t\t\tinclude \":${cafe.name}\"\n\t\t\t\t\tproject(\":${cafe.name}\").projectDir = new File(dir.absolutePath, cafe.name)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
        }
      ]
    }
  ]
}