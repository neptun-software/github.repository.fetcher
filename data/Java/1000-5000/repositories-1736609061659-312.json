{
  "metadata": {
    "timestamp": 1736609061659,
    "page": 312,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RoaringBitmap/RoaringBitmap",
      "stars": 3594,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c text\n*.h text\n*.java text\n*.xml text\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n*.bat text eol=crlf\n*.ps1 text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.svg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.396484375,
          "content": ".setting/\nbin/\ntarget/\nbuild/\n*/build\n*/out\n/.gradle\n\n# OS X\n.DS_Store\n.java-version\n\n# intellij\n.idea\n*.iml\n\n.vscode\n\nroaringbitmap/dependency-reduced-pom.xml\n\n# eclipse\n.project\n.classpath\n.settings\n\n# mvn release process\nrelease.properties\npom.xml.releaseBackup\npom.xml.next\npom.xml.tag\n\n# We ignore .bin files as they may be generated by fuzz-tests\n# Beware there is real .bin files in /testdata\n*.bin\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.474609375,
          "content": "# This is the official list of authors for copyright purposes\nDaniel Lemire,\nOwen Kaser,\nSamy Chambi,\nJon Alvarado,\nRory Graves,\nBjörn Sperber,\nSeth Pellegrino,\nBorislav Ivanov,\nGregory Ssi-Yan-Kai,\nGalderic Puntí,\nNavis Ryu,\nJerven Bolleman,\nKeuntae Park,\nOlaf Krische,\nGeorge Kankava,\nJunyuan Zheng,\nPrzemek Piotrowski,\nOlivier Peyrusse,\nRichard Startin,\nErik Gorset,\nBenoit Lacelle,\nYizhu Sun,\nAmit Desai,\nSimon Spero,\nRafael Telles,\nMehrez Douaihy,\nNuwan Sanjeewa Abeysiriwardana\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.03515625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright 2013-2016 the RoaringBitmap authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-2.0.txt",
          "type": "blob",
          "size": 11.0947265625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2013-2016 the RoaringBitmap authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.8505859375,
          "content": "RoaringBitmap\n=============\n[![][license img]][license]\n[![docs-badge][]][docs]\n![Java 11 CI](https://github.com/RoaringBitmap/RoaringBitmap/workflows/Java%2011%20CI/badge.svg)\n\n- [Introduction](#introduction)\n- [When should you use a bitmap?](#when-should-you-use-a-bitmap)\n- [When should you use compressed bitmaps?](#when-should-you-use-compressed-bitmaps)\n- [How does Roaring compare with the alternatives?](#how-does-roaring-compare-with-the-alternatives)\n- [Code sample](#code-sample)\n- [API docs](#api-docs)\n- [Download](#download)\n- [Usage within a Maven project](#usage-within-a-maven-project)\n- [Usage within a gradle project](#usage-within-a-gradle-project)\n- [Scientific Documentation](#scientific-documentation)\n- [Unsigned integers](#unsigned-integers)\n- [Working with memory-mapped bitmaps](#working-with-memory-mapped-bitmaps)\n- [Thread safety](#thread-safety)\n- [Kryo](#kryo)\n- [64-bit integers (long)](#64-bit-integers-long)\n- [Range Bitmaps](#range-bitmaps)\n- [Prerequisites](#prerequisites)\n- [Usage for RoaringBitmap Developers](#usage-for-roaringbitmap-developers)\n- [IntelliJ and Eclipse](#intellij-and-eclipse)\n- [Contributing](#contributing)\n- [FAQ](#faq)\n- [Benchmark](#benchmark)\n- [Mailing list/discussion group](#mailing-listdiscussion-group)\n- [Funding](#funding)\n\nIntroduction\n-------------\n\nBitsets, also called bitmaps, are commonly used as fast data structures.\nUnfortunately, they can use too much memory. To compensate, we often use\ncompressed bitmaps.\n\nRoaring bitmaps are compressed bitmaps which tend to outperform conventional\ncompressed bitmaps such as WAH, EWAH or Concise. In some instances, roaring bitmaps can\nbe hundreds of times faster and they often offer significantly better compression.\nThey can even be faster than uncompressed bitmaps.\n\nRoaring bitmaps are found to work well in many important applications:\n\n> Use Roaring for bitmap compression whenever possible. Do not use other bitmap compression methods ([Wang et al., SIGMOD 2017](http://db.ucsd.edu/wp-content/uploads/2017/03/sidm338-wangA.pdf))\n\n> kudos for making something that makes my software run 5x faster (Charles Parker from BigML)\n\nThis library is used by\n*   [Apache Spark](http://spark.apache.org/),\n*   [Apache Hive](http://hive.apache.org),\n*   [Apache Tez](http://tez.apache.org),\n*   [Apache Kylin](http://kylin.io),\n*   [Apache CarbonData](https://carbondata.apache.org),\n*   [Netflix Atlas](https://github.com/Netflix/atlas),\n*   [OpenSearchServer](http://www.opensearchserver.com),\n*   [zenvisage](http://zenvisage.github.io/),\n*   [Jive Miru](https://github.com/jivesoftware/miru),\n*   [Tablesaw](https://github.com/jtablesaw/tablesaw),\n*   [Apache Hivemall](http://hivemall.incubator.apache.org),\n*   [Gaffer](https://github.com/gchq/Gaffer),\n*   [Apache Pinot](https://pinot.apache.org/),\n*   [Apache Druid](https://druid.apache.org/),\n*   [SirixDB](https://sirix.io)\n*   [EvitaDB](https://evitadb.io/)\n*   [Apache Iceberg](https://iceberg.apache.org/)\n*   [Apache Pulsar](https://pulsar.apache.org/)\n\nThe library is mature and has been used in production for many years.\n\nThe YouTube SQL Engine, [Google Procella](https://research.google/pubs/pub48388/), uses Roaring bitmaps for indexing. [Apache Lucene](http://lucene.apache.org/) uses  Roaring bitmaps, though they have their own [independent implementation](https://svn.apache.org/viewvc/lucene/dev/branches/branch_5x/lucene/core/src/java/org/apache/lucene/util/RoaringDocIdSet.java?view=markup&pathrev=1629606). Derivatives of Lucene such as Solr and Elastic also use Roaring bitmaps.\nOther platforms such as [Whoosh](https://pypi.python.org/pypi/Whoosh/), [Microsoft Visual Studio Team Services (VSTS)](https://www.visualstudio.com/team-services/) and [Pilosa](https://github.com/pilosa/pilosa) also use Roaring bitmaps with their own implementations. You find Roaring bitmaps in [InfluxDB](https://www.influxdata.com), [Bleve](http://www.blevesearch.com), [Cloud Torrent](https://github.com/jpillora/cloud-torrent), [Redpanda](https://github.com/redpanda-data/redpanda), and so forth.\n\n\n[There is a serialized format specification for interoperability between implementations](https://github.com/RoaringBitmap/RoaringFormatSpec/).\nWe have interoperable [C/C++](https://github.com/RoaringBitmap/CRoaring), Java and [Go](https://github.com/RoaringBitmap/roaring) implementations.\n\n(c) 2013-... the RoaringBitmap authors\n\n\nThis code is licensed under Apache License, Version 2.0 (AL2.0).\n\n\n\nWhen should you use a bitmap?\n-------------------------------\n\n\nSets are a fundamental abstraction in\nsoftware. They can be implemented in various\nways, as hash sets, as trees, and so forth.\nIn databases and search engines, sets are often an integral\npart of indexes. For example, we may need to maintain a set\nof all documents or rows  (represented by numerical identifier)\nthat satisfy some property. Besides adding or removing\nelements from the set, we need fast functions\nto compute the intersection, the union, the difference between sets, and so on.\n\n\nTo implement a set\nof integers, a particularly appealing strategy is the\nbitmap (also called bitset or bit vector). Using n bits,\nwe can represent any set made of the integers from the range\n[0,n): the ith bit is set to one if integer i is present in the set.\nCommodity processors use words of W=32 or W=64 bits. By combining many such words, we can\nsupport large values of n. Intersections, unions and differences can then be implemented\n as bitwise AND, OR and ANDNOT operations.\nMore complicated set functions can also be implemented as bitwise operations.\n\nWhen the bitset approach is applicable, it can be orders of\nmagnitude faster than other possible implementation of a set (e.g., as a hash set)\nwhile using several times less memory.\n\nHowever, a bitset, even a compressed one is not always applicable. For example, if\nyou have 1000 random-looking integers, then a simple array might be the best representation.\nWe refer to this case as the \"sparse\" scenario.\n\nWhen should you use compressed bitmaps?\n--------------------------\n\nAn uncompressed BitSet can use a lot of memory. For example, if you take a BitSet\nand set the bit at position 1,000,000 to true and you have just over 100kB. That is over 100kB\nto store the position of one bit. This is wasteful  even if you do not care about memory:\nsuppose that you need to compute the intersection between this BitSet and another one\nthat has a bit at position 1,000,001 to true, then you need to go through all these zeroes,\nwhether you like it or not. That can become very wasteful.\n\nThis being said, there are definitively cases where attempting to use compressed bitmaps is wasteful.\nFor example, if you have a small universe size. E.g., your bitmaps represent sets of integers\nfrom [0,n) where n is small (e.g., n=64 or n=128). If you can use an uncompressed BitSet and\nit does not blow up your memory usage,  then compressed bitmaps are probably not useful\nto you. In fact, if you do not need compression, then a BitSet offers remarkable speed.\n\nThe sparse scenario is another use case where compressed bitmaps should not be used.\nKeep in mind that random-looking data is usually not compressible. E.g., if you have a small set of\n32-bit random integers, it is not mathematically possible to use far less than 32 bits per integer,\nand attempts at compression can be counterproductive.\n\nHow does Roaring compare with the alternatives?\n------------------------------------------------\n\nMost alternatives to Roaring are part of a larger family of compressed bitmaps that are run-length-encoded\nbitmaps. They identify long runs of 1s or 0s and they represent them with a marker word.\nIf you have a local mix of 1s and 0, you use an uncompressed word.\n\nThere are many formats in this family:\n\n* Oracle's BBC (Byte-aligned Bitmap Code) is an obsolete format at this point: though it may provide good compression,\nit is likely much slower than more recent alternatives due to excessive branching.\n* WAH (Word Aligned Hybrid) is a patented variation on BBC that provides better performance.\n* Concise is a variation on the patented WAH. In some specific instances, it can compress\nmuch better than WAH (up to 2x better), but it is generally slower.\n* EWAH (Enhanced Word Aligned Hybrid) is both free of patent, and it is faster than all the above. On the downside, it\ndoes not compress quite as well. It is faster because it allows some form of \"skipping\"\nover uncompressed words. So though none of these formats are great at random access, EWAH\nis better than the alternatives.\n\n\n\nThere is a big problem with these formats however that can hurt you badly in some cases: there is no random access. If you want to check whether a given value is present in the set, you have to start from the beginning and \"uncompress\" the whole thing. This means that if you want to intersect a big set with a large set, you still have to uncompress the whole big set in the worst case...\n\nRoaring solves this problem. It works in the following manner. It divides the data into chunks of 2<sup>16</sup> integers\n(e.g., [0, 2<sup>16</sup>), [2<sup>16</sup>, 2 x 2<sup>16</sup>), ...). Within a chunk, it can use an uncompressed bitmap, a simple list of integers,\nor a list of runs. Whatever format it uses, they all allow you to check for the presence of any one value quickly\n(e.g., with a binary search). The net result is that Roaring can compute many operations much faster than run-length-encoded\nformats like WAH, EWAH, Concise... Maybe surprisingly, Roaring also generally offers better compression ratios.\n\n\n\nCode sample\n-------------\n\n```java\nimport org.roaringbitmap.RoaringBitmap;\n\npublic class Basic {\n\n  public static void main(String[] args) {\n        RoaringBitmap rr = RoaringBitmap.bitmapOf(1,2,3,1000);\n        RoaringBitmap rr2 = new RoaringBitmap();\n        rr2.add(4000L,4255L);\n        rr.select(3); // would return the third value or 1000\n        rr.rank(2); // would return the rank of 2, which is index 1\n        rr.contains(1000); // will return true\n        rr.contains(7); // will return false\n\n        RoaringBitmap rror = RoaringBitmap.or(rr, rr2);// new bitmap\n        rr.or(rr2); //in-place computation\n        boolean equals = rror.equals(rr);// true\n        if(!equals) throw new RuntimeException(\"bug\");\n        // number of values stored?\n        long cardinality = rr.getLongCardinality();\n        System.out.println(cardinality);\n        // a \"forEach\" is faster than this loop, but a loop is possible:\n        for(int i : rr) {\n          System.out.println(i);\n        }\n  }\n}\n```\n\nPlease see the examples folder for more examples, which you can run with `./gradlew :examples:runAll`, or run a specific one with `./gradlew :examples:runExampleBitmap64`, etc.\n\nAPI docs\n---------\n\nhttp://www.javadoc.io/doc/org.roaringbitmap/RoaringBitmap/\n\n\nDownload\n---------\n\nYou can download releases from github:\nhttps://github.com/RoaringBitmap/RoaringBitmap/releases\n\nUsage within a Maven project\n---------\n\n### 1. Using JitPack\n\n\nAdd the following dependency to your pom.xml file...\n\n```xml\n<dependency>\n    <groupId>com.github.RoaringBitmap.RoaringBitmap</groupId>\n    <artifactId>roaringbitmap</artifactId>\n    <version>1.3.16</version>\n</dependency>\n```\n\nYou may adjust the version number.\n\nThen add the repository to your pom.xml file:\n\n```xml\n<repositories>\n    <repository>\n        <id>jitpack.io</id>\n        <url>https://jitpack.io</url>\n    </repository>\n</repositories>\n```\nSee https://github.com/RoaringBitmap/JitPackRoaringBitmapProject for a complete example.\n\n\n### 2. Using GitHub Packages\n\nAdd the following dependency to your `pom.xml` file inside the `<dependencies>` element...\n\n```xml\n<dependency>\n    <groupId>org.roaringbitmap</groupId>\n    <artifactId>roaringbitmap</artifactId>\n    <version>1.3.16</version>\n</dependency>\n```\n\nAdd the GitHub repository inside the `<repositories>` element (`pom.xml` file)...\n\n```xml\n<repositories>\n    <repository>\n        <id>github</id>\n        <name>Roaring Maven Packages</name>\n        <url>https://maven.pkg.github.com/RoaringBitmap/RoaringBitmap</url>\n        <releases><enabled>true</enabled></releases>\n        <snapshots><enabled>true</enabled></snapshots>\n    </repository>\n</repositories>\n```\n\nSee https://github.com/RoaringBitmap/MavenRoaringBitmapProject for a complete example.\n\nThe registry access is is protected by an authorisation. So you have to add your GitHub credentials to your global settings.xml: `$HOME\\.m2\\settings.xml`.\n\nYou will need a token which you can generate on GitHub.\n\n```\nGitHub > Settings > Developer Settings > Personal access tokens > Generate new token\n```\n\nThe token needs the read:packages permission. The token identifier is a long string such as `ghp_ieOkN`.\n\nPut the following in your `settings.xml` file, within the `<servers>` element.\n\n```xml\n<server>\n  <id>github</id>\n  <username>lemire</username>\n  <password>ghp_ieOkN</password>\n</server>\n```\n\nReplace `lemire` by your GitHub username and `ghp_ieOkN` by the token identifier\nyou just generated.\n\nUsage within a gradle project\n------------------\n\n### 1. Using JitPack\n\nThen all you need is to edit your `build.gradle` file like so:\n\n\n```groovy\nplugins {\n    id 'java'\n}\n\ngroup 'org.roaringbitmap' // name of your project\nversion '1.0-SNAPSHOT' // version of your project\n\nrepositories {\n    mavenCentral()\n    maven {\n        url 'https://jitpack.io'\n    }\n}\n\ndependencies {\n    implementation 'com.github.RoaringBitmap.RoaringBitmap:roaringbitmap:1.3.16'\n    testImplementation 'junit:junit:3.8.1'\n}\n```\n\n\nSee https://github.com/RoaringBitmap/JitPackRoaringBitmapProject for a complete example.\n\n\n### 2. Using GitHub Packages\n\n\nYou first need your GitHub credentials. Go\nto \n\n```\nGitHub > Settings > Developer Settings > Personal access tokens > Generate new token\n```\n\nAnd create a token with read:packages permission.\n\nIf your GitHub user name is `lemire` and your GitHub personal token `ghp_ieOkN`,\nthen you can set them using system variables. Under bash, you can do it like so:\n```\nexport GITHUB_USER=lemire\nexport GITHUB_PASSWORD=ghp_ieOkN\n```\n\n\nIf you prefer you can write your GitHub credentials in your  gradle.properties\nfile\n\n```\n# gradle.properties\ngithubUser=lemire\ngithubPassword=ghp_ieOkN\n```\n\nThen all you need is to edit your `build.gradle` file like so:\n\n```groovy\nplugins {\n    id 'java'\n}\n\ngroup 'org.roaringbitmap' // name of your project\nversion '1.0-SNAPSHOT' // version of your project\n\nrepositories {\n    mavenCentral()\n    maven {\n        url 'https://maven.pkg.github.com/RoaringBitmap/RoaringBitmap'\n        credentials {\n            username = System.properties['githubUser'] ?: System.env.GITHUB_USER\n            password = System.properties['githubPassword'] ?: System.env.GITHUB_PASSWORD\n        }\n    }\n}\n\ndependencies {\n    implementation 'org.roaringbitmap:roaringbitmap:1.3.16'\n    testImplementation 'junit:junit:3.8.1'\n}\n```\n\nSee https://github.com/RoaringBitmap/MavenRoaringBitmapProject for a complete example.\n\n\n\nScientific Documentation\n--------------------------\n\n- Daniel Lemire, Owen Kaser, Nathan Kurz, Luca Deri, Chris O'Hara, François Saint-Jacques, Gregory Ssi-Yan-Kai, Roaring Bitmaps: Implementation of an Optimized Software Library, Software: Practice and Experience 48 (4), 2018 [arXiv:1709.07821](https://arxiv.org/abs/1709.07821)\n-  Samy Chambi, Daniel Lemire, Owen Kaser, Robert Godin,\nBetter bitmap performance with Roaring bitmaps,\nSoftware: Practice and Experience 46 (5), 2016. [arXiv:1402.6407](http://arxiv.org/abs/1402.6407) This paper used data from http://lemire.me/data/realroaring2014.html\n- Daniel Lemire, Gregory Ssi-Yan-Kai, Owen Kaser, Consistently faster and smaller compressed bitmaps with Roaring, Software: Practice and Experience 46 (11), 2016. [arXiv:1603.06549](http://arxiv.org/abs/1603.06549)\n- Samy Chambi, Daniel Lemire, Robert Godin, Kamel Boukhalfa, Charles Allen, Fangjin Yang, Optimizing Druid with Roaring bitmaps, IDEAS 2016, 2016. http://r-libre.teluq.ca/950/\n\n\nUnsigned integers\n------------------\n\nJava lacks native unsigned integers but integers are still considered to be unsigned within Roaring and ordered according to ``Integer.compareUnsigned``. This means that Java will order the numbers like so 0, 1, ..., 2147483647, -2147483648, -2147483647,..., -1. To interpret correctly, you can use ``Integer.toUnsignedLong`` and ``Integer.toUnsignedString``.\n\n\nWorking with memory-mapped bitmaps\n---------------------------------------\n\nIf you want to have your bitmaps lie in memory-mapped files, you can\nuse the org.roaringbitmap.buffer package instead. It contains two\nimportant classes, ImmutableRoaringBitmap and MutableRoaringBitmap.\nMutableRoaringBitmaps are derived from ImmutableRoaringBitmap, so that\nyou can convert (cast) a MutableRoaringBitmap to an ImmutableRoaringBitmap\nin constant time.\n\nAn ImmutableRoaringBitmap that is not an instance of a MutableRoaringBitmap\nis backed by a ByteBuffer which comes with some performance overhead, but\nwith the added flexibility that the data can reside anywhere (including outside\nof the Java heap).\n\nAt times you may need to work with bitmaps that reside on disk (instances\nof ImmutableRoaringBitmap) and bitmaps that reside in Java memory. If you\nknow that the bitmaps will reside in Java memory, it is best to use\nMutableRoaringBitmap instances, not only can they be modified, but they\nwill also be faster. Moreover, because MutableRoaringBitmap instances are\nalso ImmutableRoaringBitmap instances, you can write much of your code\nexpecting ImmutableRoaringBitmap.\n\nIf you write your code expecting ImmutableRoaringBitmap instances, without\nattempting to cast the instances, then your objects will be truly immutable.\nThe MutableRoaringBitmap has a convenience method (toImmutableRoaringBitmap)\nwhich is a simple cast back to an ImmutableRoaringBitmap instance.\nFrom a language design point of view, instances of the ImmutableRoaringBitmap class are immutable only when used as per\nthe interface of the ImmutableRoaringBitmap class. Given that the class is not final, it is possible\nto modify instances, through other interfaces. Thus we do not take the term \"immutable\" in a purist manner,\nbut rather in a practical one.\n\nOne of our motivations for this design where MutableRoaringBitmap instances can be casted\ndown to ImmutableRoaringBitmap instances is that bitmaps are often large,\nor used in a context where memory allocations are to be avoided, so we avoid forcing copies.\nCopies could be expected if one needs to mix and match ImmutableRoaringBitmap and MutableRoaringBitmap instances.\n\nThe following code sample illustrates how to create an ImmutableRoaringBitmap\nfrom a ByteBuffer. In such instances, the constructor only loads the meta-data\nin RAM while the actual data is accessed from the ByteBuffer on demand.\n\n```java\n        import org.roaringbitmap.buffer.*;\n\n        //...\n\n        MutableRoaringBitmap rr1 = MutableRoaringBitmap.bitmapOf(1, 2, 3, 1000);\n        MutableRoaringBitmap rr2 = MutableRoaringBitmap.bitmapOf( 2, 3, 1010);\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        DataOutputStream dos = new DataOutputStream(bos);\n        // If there were runs of consecutive values, you could\n        // call rr1.runOptimize(); or rr2.runOptimize(); to improve compression\n        rr1.serialize(dos);\n        rr2.serialize(dos);\n        dos.close();\n        ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray());\n        ImmutableRoaringBitmap rrback1 = new ImmutableRoaringBitmap(bb);\n        bb.position(bb.position() + rrback1.serializedSizeInBytes());\n        ImmutableRoaringBitmap rrback2 = new ImmutableRoaringBitmap(bb);\n```\n\nAlternatively, we can serialize directly to a `ByteBuffer` with the `serialize(ByteBuffer)` method.\n\n\nOperations on an ImmutableRoaringBitmap such as and, or, xor, flip, will\ngenerate a RoaringBitmap which lies in RAM. As the name suggest, the\nImmutableRoaringBitmap itself cannot be modified.\n\n\nThis design was inspired by Apache Druid.\n\nOne can find a complete working example in the test file TestMemoryMapping.java.\n\nNote that you should not mix the classes from the org.roaringbitmap package with the classes\nfrom the org.roaringbitmap.buffer package. They are incompatible. They serialize\nto the same output however. The performance of the code in org.roaringbitmap package is\ngenerally superior because there is no overhead due to the use of ByteBuffer instances.\n\nThread safety\n-----\n\nIn general, it is unsafe to access the same bitmaps using different threads--the bitmaps are unsynchronized for performance. Should you want to access a Bitmap from more than one thread, you should provide synchronization. However, you can access an immutable bitmap from multiple threads, as long as you abide by the `ImmutableBitmapDataProvider` interface.\n\nKryo\n-----\n\nMany applications use Kryo for serialization/deserialization. One can\nuse Roaring bitmaps with Kryo efficiently thanks to a custom serializer (Kryo 5):\n\n```java\npublic class RoaringSerializer extends Serializer<RoaringBitmap> {\n    @Override\n    public void write(Kryo kryo, Output output, RoaringBitmap bitmap) {\n        try {\n            bitmap.serialize(new KryoDataOutput(output));\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException();\n        }\n    }\n    @Override\n    public RoaringBitmap read(Kryo kryo, Input input, Class<? extends RoaringBitmap> type) {\n        RoaringBitmap bitmap = new RoaringBitmap();\n        try {\n            bitmap.deserialize(new KryoDataInput(input));\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException();\n        }\n        return bitmap;\n    }\n\n}\n```\n\n64-bit integers (long)\n-----------------------\n\nThough Roaring Bitmaps were designed with the 32-bit case in mind, we have extensions to 64-bit integers.\nWe offer two classes for this purpose: `Roaring64NavigableMap` and `Roaring64Bitmap`.\n\nThe `Roaring64NavigableMap` relies on a conventional red-black-tree. The keys are 32-bit integers representing\nthe most significant 32~bits of  elements\nwhereas the values of the tree are 32-bit Roaring bitmaps. The 32-bit Roaring bitmaps represent the least significant\nbits of a set of elements.\n\nThe newer `Roaring64Bitmap` approach relies on the ART data structure to hold the key/value pair. The key\n is made of the most significant 48~bits of elements whereas the values are 16-bit Roaring containers. It is inspired by\n [The Adaptive Radix Tree: ARTful Indexing for Main-Memory Databases](https://db.in.tum.de/~leis/papers/ART.pdf) by Leis et al. (ICDE '13).\n\n```java\n    import org.roaringbitmap.longlong.*;\n\n\n    // first Roaring64NavigableMap\n    LongBitmapDataProvider r = Roaring64NavigableMap.bitmapOf(1,2,100,1000);\n    r.addLong(1234);\n    System.out.println(r.contains(1)); // true\n    System.out.println(r.contains(3)); // false\n    LongIterator i = r.getLongIterator();\n    while(i.hasNext()) System.out.println(i.next());\n\n\n    // second Roaring64Bitmap\n    bitmap1 = new Roaring64Bitmap();\n    bitmap2 = new Roaring64Bitmap();\n    int k = 1 << 16;\n    long i = Long.MAX_VALUE / 2;\n    long base = i;\n    for (; i < base + 10000; ++i) {\n       bitmap1.add(i * k);\n       bitmap2.add(i * k);\n    }\n    b1.and(bitmap2);\n```\n\nThe serialization of 64-bit Roaring bitmaps is specified: see\nhttps://github.com/RoaringBitmap/RoaringFormatSpec#extention-for-64-bit-implementations\n\nHowever, it is implemented only by `Roaring64NavigableMap`, by switching:\n\n    Roaring64NavigableMap.SERIALIZATION_MODE = Roaring64NavigableMap.SERIALIZATION_MODE_PORTABLE\n\nRange Bitmaps\n-------------\n\n`RangeBitmap` is a succinct data structure supporting range queries.\nEach value added to the bitmap is associated with an incremental identifier,\nand queries produce a `RoaringBitmap` of the identifiers associated with values\nthat satisfy the query. Every value added to the bitmap is stored separately,\nso that if a value is added twice, it will be stored twice, and if that value\nis less than some threshold, there will be at least two integers in the resultant\n`RoaringBitmap`.\n\nIt is more efficient - in terms of both time and space - to\nprovide a maximum value. If you don't know the maximum value,\nprovide a `Long.MAX_VALUE`. Unsigned order is used like elsewhere in\nthe library.\n\n```java\nvar appender = RangeBitmap.appender(1_000_000);\nappender.add(1L);\nappender.add(1L);\nappender.add(100_000L);\nRangeBitmap bitmap = appender.build();\nRoaringBitmap lessThan5 = bitmap.lt(5); // {0,1}\nRoaringBitmap greaterThanOrEqualTo1 = bitmap.gte(1); // {0, 1, 2}\nRoaringBitmap greaterThan1 = bitmap.gt(1); // {2}\nRoaringBitmap equalTo1 = bitmap.eq(1); // {0, 1}\nRoaringBitmap notEqualTo1 = bitmap.neq(1); // {2}\n```\n\n`RangeBitmap` is can be written to disk and memory mapped:\n\n```java\nvar appender = RangeBitmap.appender(1_000_000);\nappender.add(1L);\nappender.add(1L);\nappender.add(100_000L);\nByteBuffer buffer = mapBuffer(appender.serializedSizeInBytes());\nappender.serialize(buffer);\nRangeBitmap bitmap = RangeBitmap.map(buffer);\n```\n\nThe serialization format uses little endian byte order.\n\nPrerequisites\n-------------\n\n\n - Version 0.7.x requires JDK 8 or better\n - Version 0.6.x requires JDK 7 or better\n - Version 0.5.x requires JDK 6 or better\n\n\n\n\nUsage for RoaringBitmap Developers\n------\n\n* Get java\n\n* ``./gradlew assemble`` will compile\n* ``./gradlew build`` will compile and run the unit tests\n* ``./gradlew test `` will run the tests\n* ``./gradlew :roaringbitmap:test --tests TestIterators.testIndexIterator4`` runs just the test `TestIterators.testIndexIterator4`; `./gradlew -i :roaringbitmap:test --tests TestRoaringBitmap.issue623` runs just the test `issue623` in the class ` TestRoaringBitmap` while printing out to the console.\n* ``./gradlew  bsi:test --tests BufferBSITest.testEQ``  run just the test `BufferBSITest.testEQ` in the `bsi` submodule\n\n\nIntelliJ and Eclipse\n--------\n\nIf you plan to contribute to RoaringBitmap, you can load\nit up in your favorite IDE.\n- For IntelliJ, in the IDE create a new project, possibly from existing sources, choose import, gradle.\n- For Eclipse: File, Import, Existing Gradle Projects, Select RoaringBitmap from your disk.\n\nContributing\n------------\n\nContributions are invited. We use the Google Java style (see `roaring_google_checks.xml`). It can be applied\nautomatically to your code with `./gradlew spotlessApply`\n\nPlease do not reformat the code needlessly (especially on comments/javadoc).\n\nFAQ\n----\n\n* I am getting an error about a bad cookie. What is this about?\n\nIn the serialized files, part of the first 4 bytes are dedicated to a \"cookie\"\nwhich serves to indicate the file format.\n\nIf you try to deserialize or map a bitmap from data that has an\nunrecognized \"cookie\", the code will abort the process and report\nan error.\n\nThis problem will occur to all users who serialized Roaring bitmaps\nusing versions prior to 0.4.x as they upgrade to version 0.4.x or better.\nThese users need to refresh their serialized bitmaps.\n\n* How big can a Roaring bitmap get?\n\nGiven N integers in [0,x), then the serialized size in bytes of\na Roaring bitmap should never exceed this bound:\n\n`` 8 + 9 * ((long)x+65535)/65536 + 2 * N ``\n\nThat is, given a fixed overhead for the universe size (x), Roaring\nbitmaps never use more than 2 bytes per integer. You can call\n``RoaringBitmap.maximumSerializedSize`` for a more precise estimate.\n\n* What is the worst case scenario for Roaring bitmaps?\n\nThere is no such thing as a data structure that is always ideal. You should\nmake sure that Roaring bitmaps fit your application profile.\nThere are at least two cases where Roaring bitmaps can be easily replaced\nby superior alternatives compression-wise:\n\n1. You have few random values spanning in a large interval (i.e., you have\na very sparse set). For example, take the set 0, 65536, 131072, 196608, 262144 ...\nIf this is typical of your application, you might consider using a HashSet or\na simple sorted array.\n\n2. You have dense set of random values that never form runs of continuous\nvalues. For example, consider the set 0,2,4,...,10000. If this is typical of your\napplication, you might be better served with a conventional bitset (e.g., Java's BitSet class).\n\n* How do I select an element at random?\n\n         Random random = new Random();\n         bitmap.select(random.nextInt(bitmap.getCardinality()));\n\n\nBenchmark\n-----------\n\nTo run JMH benchmarks, use the following commands:\n\n         $ ./gradlew jmh::shadowJar\n         $ java -jar jmh/build/libs/benchmarks.jar\n\nYou can also run a specific benchmark:\n\n         $ java -jar jmh/build/libs/benchmarks.jar 'org.roaringbitmap.aggregation.and.identical.*'\n\nIf you have a bash shell, you can also run our script which automatically builds and run specific tests...\n\n         $ ./jmh/run.sh 'org.roaringbitmap.aggregation.and.identical.*'\n\n\nMailing list/discussion group\n-----------------------------\n\nhttps://groups.google.com/forum/#!forum/roaringbitmaps\n\nFunding\n----------\n\nThis work was supported by NSERC grant number 26143.\n\n\n\n[maven img]:https://maven-badges.herokuapp.com/maven-central/org.roaringbitmap/RoaringBitmap/badge.svg\n[maven]:http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.roaringbitmap%22%20\n\n[license]:LICENSE-2.0.txt\n[license img]:https://img.shields.io/badge/License-Apache%202-blue.svg\n\n[docs-badge]:https://img.shields.io/badge/API-docs-blue.svg?style=flat-square\n[docs]:http://www.javadoc.io/doc/org.roaringbitmap/RoaringBitmap/\n"
        },
        {
          "name": "bsi",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 7.1083984375,
          "content": "plugins {\n    id(\"net.researchgate.release\") version \"2.8.1\"\n    id(\"com.github.ben-manes.versions\") version \"0.38.0\"\n    id(\"maven-publish\")\n    id(\"com.diffplug.spotless\") version \"6.25.0\"\n}\n\n\n\n// some parts of the Kotlin DSL don't work inside a `subprojects` block yet, so we do them the old way\n// (without typesafe accessors)\n\nsubprojects {\n    // used in per-subproject dependencies\n    @Suppress(\"UNUSED_VARIABLE\") val deps by extra {\n        mapOf(\n                \"jupiter\" to \"5.6.1\",\n                \"guava\" to \"20.0\",\n                \"commons-lang\" to \"3.4\"\n        )\n    }\n\n    apply(plugin = \"java-library\")\n\n    repositories {\n        mavenCentral()\n    }\n\n    group = \"org.roaringbitmap\"\n\n    tasks {\n        withType<JavaCompile> {\n            options.isDeprecation = true\n            options.isWarnings = true\n            options.compilerArgs = listOf(\"-Xlint:unchecked\")\n            options.release.set(8)\n        }\n\n        withType<Javadoc> {\n            options {\n                // suppress javadoc's complaints about undocumented things\n                // we have to set a dummy \"value\" (here, `true`) to have the option actually used\n                (this as StandardJavadocDocletOptions).addBooleanOption(\"Xdoclint:none\").value = true\n            }\n        }\n\n        withType<Test> {\n            val javaToolchains  = project.extensions.getByType<JavaToolchainService>()\n            javaLauncher.set(javaToolchains.launcherFor {\n                languageVersion.set(\n                    JavaLanguageVersion.of((project.properties[\"testOnJava\"] ?: \"11\").toString()))\n            })\n        }\n    }\n\n    apply(plugin = \"com.diffplug.spotless\")\n\n    // You can format the codebase with `./gradlew spotlessApply`\n    // You check the codebase format with `./gradlew spotlessCheck`\n    spotless {\n        // Ratchetting from master means we check/apply only files which are changed relatively to master\n        // This is especially useful for performance, given the whole codebase has been formatted with Spotless.\n        ratchetFrom(\"origin/master\")\n\n        java {\n            // Disbale javadoc formatting as most the javacode do not follow HTML syntax.\n            googleJavaFormat().reflowLongStrings().formatJavadoc(false)\n            formatAnnotations()\n\n            importOrder(\"\\\\#\", \"org.roaringbitmap\", \"\", \"java\", \"javax\")\n            removeUnusedImports()\n\n            trimTrailingWhitespace()\n            endWithNewline()\n\n            // https://github.com/opensearch-project/opensearch-java/commit/2d6d5f86a8db9c7c9e7b8d0f54df97246f7b7d7e\n            // https://github.com/diffplug/spotless/issues/649\n            val wildcardImportRegex = Regex(\"\"\"^import\\s+(?:static\\s+)?[^*\\s]+\\.\\*;$\"\"\", RegexOption.MULTILINE)\n            custom(\"Refuse wildcard imports\") { contents ->\n                // Wildcard imports can't be resolved by spotless itself.\n                // This will require the developer themselves to adhere to best practices.\n                val wildcardImports = wildcardImportRegex.findAll(contents)\n                if (wildcardImports.any()) {\n                    var msg = \"\"\"\n                    Please replace the following wildcard imports with explicit imports ('spotlessApply' cannot resolve this issue):\n                \"\"\".trimIndent()\n                    wildcardImports.forEach {\n                        msg += \"\\n\\t- ${it.value}\"\n                    }\n                    msg += \"\\n\"\n                    throw AssertionError(msg)\n                }\n                contents\n            }\n        }\n    }\n}\n\nsubprojects.filter { listOf(\"roaringbitmap\", \"bsi\").contains(it.name) }.forEach { project ->\n    project.run {\n        apply(plugin = \"maven-publish\")\n        configure<JavaPluginExtension> {\n            withSourcesJar()\n            withJavadocJar()\n        }\n\n        configure<PublishingExtension> {\n            publications {\n                register<MavenPublication>(\"sonatype\") {\n                    groupId = project.group.toString()\n                    artifactId = project.name\n                    version = project.version.toString()\n\n                    from(components[\"java\"])\n\n                    // requirements for maven central\n                    // https://central.sonatype.org/pages/requirements.html\n                    pom {\n                        name.set(\"${project.group}:${project.name}\")\n                        description.set(\"Roaring bitmaps are compressed bitmaps (also called bitsets) which tend to outperform conventional compressed bitmaps such as WAH or Concise.\")\n                        url.set(\"https://github.com/RoaringBitmap/RoaringBitmap\")\n                        issueManagement {\n                            system.set(\"GitHub Issue Tracking\")\n                            url.set(\"https://github.com/RoaringBitmap/RoaringBitmap/issues\")\n                        }\n                        licenses {\n                            license {\n                                name.set(\"Apache 2\")\n                                url.set(\"http://www.apache.org/licenses/LICENSE-2.0.txt\")\n                                distribution.set(\"repo\")\n                            }\n                        }\n                        developers {\n                            developer {\n                                id.set(\"lemire\")\n                                name.set(\"Daniel Lemire\")\n                                email.set(\"lemire@gmail.com\")\n                                url.set(\"http://lemire.me/en/\")\n                                roles.addAll(\"architect\", \"developer\", \"maintainer\")\n                                timezone.set(\"-5\")\n                                properties.put(\"picUrl\", \"http://lemire.me/fr/images/JPG/profile2011B_152.jpg\")\n                            }\n                        }\n                        scm {\n                            connection.set(\"scm:git:https://github.com/RoaringBitmap/RoaringBitmap.git\")\n                            developerConnection.set(\"scm:git:https://github.com/RoaringBitmap/RoaringBitmap.git\")\n                            url.set(\"https://github.com/RoaringBitmap/RoaringBitmap\")\n                        }\n                    }\n                }\n            }\n\n             // A safe throw-away place to publish to:\n            // ./gradlew publishSonatypePublicationToLocalDebugRepository -Pversion=foo\n            repositories {\n                maven {\n                    name = \"localDebug\"\n                    url = project.buildDir.toPath().resolve(\"repos\").resolve(\"localDebug\").toUri()\n                }\n            }\n\n            // ./gradlew publishSonatypePublicationToGitHubPackagesRepository\n            repositories {\n                maven {\n                    name = \"GitHubPackages\"\n                    url = uri(\"https://maven.pkg.github.com/RoaringBitmap/RoaringBitmap\")\n                    credentials {\n                        username = System.getenv(\"GITHUB_ACTOR\")\n                        password = System.getenv(\"GITHUB_TOKEN\")\n                    }\n                }\n            }\n\n        }\n\n\n    }\n}\n\nrelease {\n    // for some odd reason, we used to have our tags be of the form roaringbitmap-0.1.0\n    // instead of just 0.1.0 or v0.1.0.\n    tagTemplate = \"\\$version\"\n}\n\t\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1171875,
          "content": "version = 1.3.20-SNAPSHOT\norg.gradle.parallel=false\norg.gradle.daemon=true\norg.gradle.jvmargs=-Xmx2g -XX:+UseParallelGC\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8837890625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jitpack.yml",
          "type": "blob",
          "size": 0.0966796875,
          "content": "jdk:\n  - openjdk11\nbefore_install:\n   - sdk install java 11.0.1-open\n   - sdk use java 11.0.1-open\n"
        },
        {
          "name": "jmh",
          "type": "tree",
          "content": null
        },
        {
          "name": "real-roaring-dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "roaringbitmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.169921875,
          "content": "include(\n        \"roaringbitmap\",\n        \"bsi\",\n        \"fuzz-tests\",\n        \"jmh\",\n        \"real-roaring-dataset\",\n        \"examples\",\n        \"simplebenchmark\"\n        )\n"
        },
        {
          "name": "simplebenchmark",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}