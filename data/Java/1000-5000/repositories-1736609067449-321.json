{
  "metadata": {
    "timestamp": 1736609067449,
    "page": 321,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spockframework/spock",
      "stars": 3561,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5947265625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{java,groovy,gradle,xml,html,js}]\nindent_style = space\nindent_size = 2\n\n[**/StringComparisonRendering.groovy]\n# The file contains important whitespace at the end of the line in a multi-line string.\n# and editorconfig doesn't seem to respect multi-line strings.\ntrim_trailing_whitespace = false\n\n[*.{kt,kts}]\nindent_size = 4\nij_kotlin_allow_trailing_comma = false\nij_kotlin_allow_trailing_comma_on_call_site = false\nktlint_code_style = intellij_idea\nktlint_standard_function-signature = disabled\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6015625,
          "content": "# based on https://github.com/alexkaratarakis/gitattributes\n* text=auto eol=lf\n\n# These are explicitly windows files and should use crlf\n*.bat      text eol=crlf\n*.cmd      text eol=crlf\n\n# sources\n*.java          text diff=java\n*.groovy        text diff=java\n*.gradle        text diff=java\n*.gradle.kts    text diff=java\n*.md            text diff=md\n\n# Graphics\n*.png      binary\n*.jpg      binary\n*.jpeg     binary\n*.gif      binary\n*.ico      binary\n\n#other\n*.jar      binary\n*.gpg      binary\n\n# Exclude files from exporting\n.gitattributes export-ignore\n.gitignore     export-ignore\n.gitkeep       export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4384765625,
          "content": "# directory names starting and ending with / will be excluded from root IDEA module\n# directory names ending with / will be excluded from all IDEA modules (see ide.gradle)\n\n# Gradle\n.gradle/\nbuild/\n\n# Maven\ntarget/\n\n# IDEA\n.idea/\n*.iml\n*.ipr\n*.iws\nout/\n\n# Eclipse\n.project\n.classpath\n.settings/\nbin/\n\n# Grails\nstacktrace.log\n\n# Documentation\n/docs/_build/\n\n# Mac\n.DS_Store\n\n# Shippable CI\n/shippable/\n\nFoo.*\n/.shelf/\n/.asciidoctor/\n\n!.idea/icon.png\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.adoc",
          "type": "blob",
          "size": 11.21484375,
          "content": "== Ways to Contribute\n\nThere are many ways to contribute to Spock:\n\n* Spreading the word by talking, tweeting, blogging, presenting, submitting talks, writing tutorials or articles (or a book!), sharing success stories, etc.\n* Helping other users by participating in https://gitter.im/spockframework/spock[gitter] discussions, answering https://stackoverflow.com/questions/tagged/spock[Spock questions] on Stack Overflow, etc.\n* Providing early feedback on https://oss.sonatype.org/content/repositories/snapshots/org/spockframework/[development snapshots] and new features\n* Improving and extending the https://docs.spockframework.org[reference documentation] https://github.com/spockframework/spock/tree/master/docs[(source)]\n* Translating blog posts, articles, and the reference documentation to other languages (with permission of the authors)\n* Fixing open issues listed in the https://issues.spockframework.org[issue tracker]\n* Proposing, discussing, and implementing new features\n* Donating money to fund further development\n* Surprising us with some other form of contribution!\n\nAll forms of contribution are very much appreciated.\n\n== Communication\n\nGood communication makes a big difference.\nWe are always eager to listen, reflect, and discuss.\nDon't hesitate to get in touch via the https://issues.spockframework.org[issue tracker], https://github.com/spockframework/spock/discussions[discussions], or https://gitter.im/spockframework/spock[gitter].\nChoose whatever medium feels most appropriate.\n\n== Triage Issues image:https://www.codetriage.com/spockframework/spock/badges/users.svg[Open Source Helpers,link=https://www.codetriage.com/spockframework/spock]\n\nYou can triage issues which may include reproducing bug reports or asking for vital information, such as version numbers or reproduction instructions.\nIf you would like to start triaging issues, one easy way to get started is to https://www.codetriage.com/spockframework/spock[subscribe to Spock on CodeTriage].\n\n== Contributing Code/Docs\n\nTo contribute code or documentation, please submit a pull request to the https://github.com/spockframework/spock[GitHub repository].\n\nA good way to familiarize yourself with the codebase and contribution process is to look for and tackle low-hanging fruits in the https://issues.spockframework.org[issue tracker].\nBefore embarking on a more ambitious contribution, please quickly <<Communication,get in touch>> with us.\nThis will help to make sure that the contribution is aligned with Spock's overall direction and goals, and gives us a chance to guide design and implementation where needed.\n\nIMPORTANT: *We appreciate your effort, and want to avoid a situation where a contribution requires extensive rework (by you or by us), sits in the queue for a long time, or cannot be accepted at all!*\n\n=== What Makes a Good Pull Request\n\nWhen reviewing pull requests, we value the following qualities (in no particular order):\n\n* Carefully crafted, clean, and concise code\n* Small, focused commits that tackle one thing at a time\n* New code blends in well with existing code, respecting established coding standards and practices\n* Tests are updated/added along with the code, communicate intent, and cover important cases (see <<Tests,Tests>> for additional information)\n* Documentation (Javadoc, Groovydoc, reference documentation, release notes) is updated/added along with the code\n* A good commit message that follows the https://chris.beams.io/posts/git-commit/[seven rules]\n\nDon't be intimidated by these words.\nPull requests that satisfy Spock's overall direction and goals (see above), are crafted carefully, and aren't aiming too high, have a good chance of getting accepted.\nBefore doing so, we may ask for some concrete improvements to be made, in which case we hope for your cooperation.\n\n=== Guiding Principles\n\n==== Try to avoid breaking stuff\n\nSpock has been around for a long time, and people have built a large suite of tests that rely on Spock.\nPeople want their tests to fail if they make an error; they don't want to update their tests because their testing framework broke stuff.\n\nUnless there is a compelling reason to break something, don't do it.\nThe potential impact also has to be considered, if the change only affects a niche use-case then it is easier to include than something that breaks every use-case.\n\nIf a behavior has been around long enough it might become a https://xkcd.com/1172/[feature], even if that was never intended or was even a bug.\nIn some cases, we will decide to keep the existing behavior, even if we'd do it differently when starting from a blank slate.\n\n==== Can it be solved with an extension instead?\n\nDon't add specialized code to `spock-core` if it can be achieved by Spock's powerful extension system.\n\nIf it is not possible at the moment, can the extension system be improved so that it can cover this use-case instead?\n\n===== Can it be a third-party extension?\n\nSpock has a fair number of built-in extensions, and we want to keep this number limited as each extension will increase the maintenance burden.\n\nYou can find a list of third-party extensions in the https://github.com/spockframework/spock/wiki/Third-Party-Extensions[Spock Wiki], and it is easy to get yours added as well.\n\n=== Code Standards\n\nA non-exhaustive list :\n\n* Indent with 2 spaces (should already be set by `.editorconfig`)\n* One-line `if` expression can only be used as a `return` guard, e.g., `if (!ok) return;`.\n  For other cases, put the body next to the line and add braces.\n* Prefer to use `Type mock = Mock()` instead of `def mock = Mock(Type)` unless you are explicitly testing the other syntax.\n* Add a blank line before a block label, excluding the first block in a feature.\n+\n[source,groovy]\n----\ndef \"a feature\"() {\n  given:\n  def a = 1\n\n  expect:\n  a == 1\n}\n----\n* Don't put code in the same line as a block label.\n* Use `given` instead of `setup`\n* Don't add `noExceptionThrown()` if other assertions are present.\n* Use explicit parameter types when using non-primitive data variables unless you are explicitly testing the other syntax.\n* If you use unroll patterns, prefer to have a feature name describing the general use case and use the `@Unroll` extension to provide the pattern for the iteration.\n+\n[source,groovy]\n----\n@Unroll(\"adding #a and #b gives #c\")\ndef \"testing addition\"() {\n  // ...\n}\n----\n+\nThis pattern gives a better test report, as the intermediate node will be the non-templated feature name.\n\n\n=== Implementation Language\n\nThe implementation language for the https://github.spockframework.org/spock/tree/master/spock-core[spock-core] module is Java.\nJava is also the default language for all other modules (except `spock-specs`), but it's fine to use Groovy when there is a concrete reason.\nAs a general guideline, use the same language as the surrounding code.\n\n=== Compatibility\n\nSpock supports JRE 8 and higher.\nTherefore, language features and APIs that are only available in Java 9 or higher cannot be used.\nExceptions to this rule need to be discussed beforehand.\nThe same goes for changes to user-visible behavior.\n\n=== Tests\n\nAll tests are written in Spock. Tests for `spock-core` are located in the `spock-specs` project; all other projects have co-located tests.\nA functional test is required for each user-visible behavior.\nFunctional tests for `spock-core` are located under https://github.spockframework.org/spock/tree/master/spock-specs/src/test/groovy/org/spockframework/smoke[`spock-specs/src/test/groovy/org/spockframework/smoke`].\n\n== Development Tools\n\n=== Command Line Build\n\nSpock is built with https://www.gradle.org[Gradle].\nThe only prerequisite for executing the build is an installation of JDK 8 and JDK 17.\nThe build itself must be run with JDK 17, but JDK 8 must be available via toolchain.\nYou can check if Gradle can locate the necessary JDKs by running `./gradlew javaToolchains`.\nIf gradle can't locate your JDK 8, you can make the location of the JDK 8 available via an environment variable called `JDK8`.\n\nAfter cloning the https://github.com/spockframework/spock[GitHub repository], cd into the top directory and execute `./gradlew build`. The build should succeed without any errors. `./gradlew tasks` lists the available tasks.\nAlways use the Gradle Wrapper (`gradlew` command) rather than your own Gradle installation.\n\n=== CI Build\n\nEach push to the official GitHub repository triggers a https://builds.spockframework.org[Linux CI build] and https://winbuilds.spockframework.org[Windows CI build].\nPull requests are built as well.\n\n=== IDE Setup\n\nUsing an IDE is recommended but not mandatory.\nWhether or not you use an IDE, please make sure that `./gradlew build` (even better `./allVariants build`) succeeds before submitting a pull request.\n\n==== IntelliJ IDEA\n\nThe latest IntelliJ IDEA (Community Edition) is the *preferred* IDE for developing Spock.\nTo generate an IDEA project configuration:\n\n* `./gradlew cleanIdea idea`, followed by\n* `File -&gt; Open` in Intellij, then\n* select the appropriate `spock-2.5.ipr`.\n\nNOTE: You can provide an optional 'variant' flag to the gradle build `-Dvariant=[2.5|3.0|4.0]` that specifies the version of groovy you wish to use.\nFor example, if we wish to use groovy 3.0, we would run `./gradlew cleanIdea idea -Dvariant=3.0` and import the generated `spock-3.0.ipr` into Intellij.\nYou can also use the helper script `allVariants`, e.g., `./allVariants idea`, which will create or update the project for all three variants.\n\nThis should result in a fully functional IDE setup where:\n\n* Git VCS integration is configured\n* Important formatter settings are configured (e.g. two spaces indent)\n* Both Java and Groovy code compiles without problems\n* All tests can be run without problems\n\nFrom time to time (e.g. when someone has added a new dependency), it may be necessary to re-sync the IDEA project with the Gradle build.\nThis is done by re-running the steps above.\n\nNote: Unfortunately there are currently https://github.com/spockframework/spock/issues/70[some issues] with Intellij's Gradle support that prevent integration with the Spock project.\nPlease use the method described above rather than importing the top-level `build.gradle` file.\n\n==== Eclipse\n\nEclipse 3.7+ with the latest https://github.com/groovy/groovy-eclipse/wiki[Groovy plugin] should work reasonably well for developing Spock.\nTo import the Gradle build into Eclipse, either run `./gradlew eclipse` and import the generated Eclipse projects via `File-&gt;Import-&gt;General-&gt;Existing Project into Workspace`, or install the https://github.com/spring-projects/eclipse-integration-gradle/[Eclipse Gradle Tooling] and import via `File-&gt;Import-&gt;Gradle-&gt;Gradle Project`.\nEither method should result in an IDE setup where:\n\n* Both Java and Groovy code compiles without problems\n* All tests can be run without problems\n\nFrom time to time (e.g. when someone has added a new dependency), it may be necessary to resync the Eclipse project with the Gradle build.\nDepending on the method of import (see above), this is done by re-running `./gradlew [cleanEclipse] eclipse` and then refreshing all Eclipse projects (F5), or by selecting `Gradle-&gt;Refresh All` in the Package Explorer's context menu.\n\nIf you encounter any problems with the IDE setup, or want to make some improvements to it, please <<Communication,get in touch>> with us.\n\n== The End\n\nThanks for reading this far. We are looking forward to your contributions!\n\nThe Spock Framework Team\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.623046875,
          "content": "=========================================================================\n==  NOTICE file corresponding to the section 4 d of                    ==\n==  the Apache License, Version 2.0,                                   ==\n==  in this case for the Spock distribution.                           ==\n=========================================================================\n\nThis product includes software developed by\nThe Apache Software Foundation (https://www.apache.org/).\n\nFor licenses see the LICENSE file.\n\nIf any software distributed with Spock does not have an Apache 2 License, its license is explicitly listed in the\nLICENSE file.\n"
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 7.333984375,
          "content": ":spock-release-version: 2.4-M5\n:spock-release-date: 2025-01-07\n:spock-snapshot-version: 2.4\n\nhttps://github.com/spockframework/spock/blob/master/LICENSE[image:https://img.shields.io/badge/License-Apache%202.0-blue.svg[License]]\nhttps://search.maven.org/search?q=g:org.spockframework[image:https://img.shields.io/maven-central/v/org.spockframework/spock-core.svg?label=Maven%20Central[Maven\nCentral]]\nhttps://github.com/spockframework/spock/actions/workflows/release.yml[image:https://img.shields.io/github/actions/workflow/status/spockframework/spock/release.yml?branch=master[GitHub\nWorkflow Status (branch)]]\nhttps://jitpack.io/#org.spockframework/spock[image:https://jitpack.io/v/org.spockframework/spock.svg[Jitpack]]\nhttps://codecov.io/gh/spockframework/spock[image:https://codecov.io/gh/spockframework/spock/branch/master/graph/badge.svg[Codecov]]\nhttps://gitter.im/spockframework/spock?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge[image:https://badges.gitter.im/spockframework/spock.svg[Gitter]]\nhttps://ge.spockframework.org/scans[image:https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A[Revved\nup by Develocity]]\n\nimage::docs/images/spock-main-logo.png[width=100px,float=right]\n\n== Spock Framework\n\nSpock is a BDD-style developer testing and specification framework for\nJava and https://groovy-lang.org/[Groovy] applications.To learn more\nabout Spock, visit\nhttps://spockframework.org[https://spockframework.org].To run a sample\nspec in your browser use the\nhttps://groovyconsole.dev/[Groovy Web Console].\n\n=== Latest Versions\n\n* The latest 2.x release version is *{spock-release-version}* ({spock-release-version}-groovy-2.5,\n{spock-release-version}-groovy-3.0, {spock-release-version}-groovy-4.0), released on {spock-release-date}.\n* The current development version is *{spock-snapshot-version}-SNAPSHOT*\n({spock-snapshot-version}-groovy-2.5-SNAPSHOT, {spock-snapshot-version}-groovy-3.0-SNAPSHOT, , {spock-snapshot-version}-groovy-4.0-SNAPSHOT).\n\n*NOTE:* Spock 2.x is based on the JUnit 5 Platform and require Java\n8+/groovy-2.5+ (Groovy 3.0 or 4.0 is recommended, especially in projects using\nJava 12+).\n\nReleases are available from\nhttps://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.spockframework%22[Maven\nCentral]. Development snapshots are available from\nhttps://oss.sonatype.org/content/repositories/snapshots/org/spockframework/[Sonatype\nOSS].\n\n==== Ad-Hoc Intermediate Releases\n\nFor intermediate stable builds we recommend to use\nhttps://jitpack.io/#org.spockframework/spock[Jitpack] (go here for\ninstructions):\n\n. Add https://jitpack.io[https://jitpack.io] as a repository\n. Use `org.spockframework.spock` as `groupId` and the normal\n`artifact-id`\n\n[source,groovy,subs=\"attributes\"]\n----\nrepositories {\n    // ...\n    maven { url 'https://jitpack.io' }\n}\n\ndependencies {\n    testImplementation 'org.spockframework.spock:spock-core:spock-{spock-release-version}'\n    testImplementation 'org.spockframework.spock:spock-spring:spock-{spock-release-version}'\n}\n----\n\n[start=3]\n. For intermediate releases you can also use the commit-hash as version,\ne.g. compile `com.github.spockframework.spock:spock-core:d91bf785a1`\n\n=== Modules\n\n* spock-core -- Core framework. This is the only mandatory module.\n* spock-specs -- Specifications for spock-core, implemented using Spock.\nNot required for using Spock.\n* spock-spring -- Integration with the\nhttps://docs.spring.io/spring/docs/4.1.5.RELEASE/spring-framework-reference/html/testing.html#testcontext-framework[Spring\nTestContext Framework].\n* spock-tapestry -- Integration with the\nhttps://tapestry.apache.org/[Tapestry 5] IoC container.\n* spock-guice -- Integration with https://github.com/google/guice[Guice]\n2/3.\n* spock-unitils -- Integration with http://www.unitils.org/[Unitils].\n\n=== Building\n\n==== Prerequisites\n\nSpock needs both a JDK 8 and JDK 17+ installed.\n\n* JDK 8 is required to compile Spock via toolchains (automatic download is disabled).\n* The gradle build itself requires at least JDK 17 to run.\n\nJDK locations must be made known to toolchains via `JDK<version>=<PATH>` environment\nvariable, e.g., `JDK8=/path/to/jdk8`.\n\n==== Supported versions\n\nSpock is supported for Java version 8+.\n\nSpock is supported for Groovy versions 2.5, 3.0, and 4.0.\n\nThe tests are testing Spock with the specific versions (variants) of\nGroovy and Java. Default Groovy version is 2.5.\n\nThe Groovy 3.0 and 4.0 variant should pass on all supported JDK versions,\nGroovy 2.5 does not work with Java 17+:\n\n....\n./gradlew build\n....\n\nTo build a specific variant of Spock, use the variant name as a parameter\n\n....\n./gradlew build -Dvariant=4.0\n....\n\nTo test against a specific Java version, use the java version name as a parameter, the path to the Java version must be set via an environment variable `JDK<version>=<PATH>`.\nOf course, this can combined with the variant selection from above.\n\n....\n./gradlew build -DjavaVersion=17\n....\n\n(Windows: `gradlew build`). All build dependencies, including the\nhttps://www.gradle.org[build tool] itself, will be downloaded\nautomatically (unless already present).\n\n=== Contributing\n\nContributions are welcome! Please see the\nhttps://github.com/spockframework/spock/blob/master/CONTRIBUTING.adoc[contributing\npage] for detailed instructions.\n\n=== Support\n\nIf you have any comments or questions, please direct them to the\nhttps://github.com/spockframework/spock/discussions[user forum]. All\nfeedback is appreciated!\n\n=== Java 9 Module Names\n\nAll published jars (beginning with Spock 1.2) will contain\nAutomatic-Module-Name manifest attribute. This allows for Spock to be\nused in a Java 9 Module Path.\n\n* spock-core -- `org.spockframework.core`\n* spock-spring -- `org.spockframework.spring`\n* spock-tapestry -- `org.spockframework.tapestry`\n* spock-guice -- `org.spockframework.guice`\n* spock-unitils -- `org.spockframework.unitils`\n\nSo module authors can use well known module names for the spock modules,\ne.g. something like this:\n\n....\nopen module foo.bar {\n  requires org.spockframework.core;\n  requires org.spockframework.spring;\n}\n....\n\n=== Logo\n\nThe Spock Logo, created by Ayşe Altınsoy (@AltinsoyAyse), is\nmanaged in the https://github.com/spockframework/spock-logo[spock-logo\nrepository].\n\n=== Links\n\n* Spock Homepage -- https://spockframework.org[https://spockframework.org]\n* Groovy Web Console -- https://groovyconsole.dev/[https://groovyconsole.dev/]\n* GitHub Organization -- https://github.com/spockframework[https://github.com/spockframework]\n* Reference Documentation -- https://docs.spockframework.org[https://docs.spockframework.org]\n* User Forum -- https://github.com/spockframework/spock/discussions[https://github.com/spockframework/spock/discussions]\n* Chat -- https://gitter.im/spockframework/spock[https://gitter.im/spockframework/spock]\n* Stack Overflow -- https://stackoverflow.com/questions/tagged/spock[https://stackoverflow.com/questions/tagged/spock]\n* Issue Tracker -- https://github.com/spockframework/spock/issues[https://github.com/spockframework/spock/issues]\n* Spock Example Project -- https://github.com/spockframework/spock-example[https://github.com/spockframework/spock-example]\n* X (Twitter) -- https://twitter.com/SpockFramework[https://twitter.com/SpockFramework]\n* Mastodon -- https://fosstodon.org/@spockframework[https://fosstodon.org/@spockframework]\n* Bluesky -- https://bsky.app/profile/spockframework.org[https://bsky.app/profile/spockframework.org]\n\n🖖 Live Long And Prosper!\n\nThe Spock Framework Team\n"
        },
        {
          "name": "allVariants",
          "type": "blob",
          "size": 0.076171875,
          "content": "#!/bin/sh\nfor var in 2.5 3.0 4.0; do\n    ./gradlew -Dvariant=\"$var\" \"$@\"\ndone\n"
        },
        {
          "name": "allVariants.bat",
          "type": "blob",
          "size": 0.0732421875,
          "content": "@echo off\nfor %%v in (2.5 3.0 4.0) do (\n    gradlew.bat -Dvariant=%%v %*\n)\n"
        },
        {
          "name": "build-logic",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 15.1376953125,
          "content": "import java.time.Duration\n\nimport static org.spockframework.gradle.AsciiDocLinkVerifier.verifyAnchorlessCrossDocumentLinks\nimport static org.spockframework.gradle.AsciiDocLinkVerifier.verifyLinksAndAnchors\n\nplugins {\n  id \"org.spockframework.base\" apply false\n  id \"java-base\"\n  id \"org.asciidoctor.jvm.convert\"\n  id \"jacoco\"\n  id \"net.nemerosa.versioning\"\n  id \"io.github.gradle-nexus.publish-plugin\"\n  id \"com.github.ben-manes.versions\"\n  id \"io.spring.nohttp\"\n  id \"org.spockframework.preprocess-workflows\"\n}\n\ndescription = \"Spock Framework\"\n\next {\n  baseVersion = \"2.4\"\n  snapshotVersion = true\n  milestone = 0\n  javaVersions = javaVersionsList.trim().split(/\\s*+,\\s*+/).collect { it as int }\n  javaVersion = (System.getProperty(\"javaVersion\") ?: 8) as int\n  variants = variantsList.trim().split(/\\s*+,\\s*+/).collect { it as BigDecimal }\n  variant = System.getProperty(\"variant\") as BigDecimal ?: variants.first()\n  develocity.buildScan.tag \"groovy-$variant\"\n  if (variant == 2.5) {\n    groovyGroup = \"org.codehaus.groovy\"\n    groovyVersion = libs.versions.groovy2.get()\n    minGroovyVersion = \"2.5.0\"\n    maxGroovyVersion = \"2.9.99\"\n    if (javaVersion >= 17) {\n      throw new InvalidUserDataException(\"Groovy $variant is not compatible with Java $javaVersion\")\n    }\n  } else if (variant == 3.0) {\n    groovyGroup = \"org.codehaus.groovy\"\n    groovyVersion = libs.versions.groovy3.get()\n    minGroovyVersion = \"3.0.0\"\n    maxGroovyVersion = \"3.9.99\"\n  } else if (variant == 4.0) {\n    groovyGroup = \"org.apache.groovy\"\n    groovyVersion = libs.versions.groovy4.get()\n    minGroovyVersion = \"4.0.0\"\n    maxGroovyVersion = \"4.9.99\"\n  } else {\n    throw new InvalidUserDataException(\"Unknown variant: $variant. Choose one of: $variants\")\n  }\n\n  groovyDependencies = [\n    [group: groovyGroup, name: \"groovy\", version: groovyVersion]\n  ]\n  groovyConsoleExtraDependencies = [\n    [group: groovyGroup, name: \"groovy-console\", version: groovyVersion],\n    [group: groovyGroup, name: \"groovy-test-junit5\", version: groovyVersion], // for executing specs\n    [group: \"org.apache.ivy\", name: \"ivy\", version: \"2.5.3\"] // for @Grab support\n  ]\n  maxGroovyVersion = snapshotVersion ? \"9.9.99\" : maxGroovyVersion\n  if (System.getProperty(\"groovyVersion\")) {\n    groovyVersion = System.getProperty(\"groovyVersion\")\n  }\n  fullVersion = baseVersion + ((!snapshotVersion && milestone) ? \"-M$milestone\" : \"\") + \"-groovy-$variant\" + (snapshotVersion ? \"-SNAPSHOT\" : '')\n  variantLessVersion = baseVersion + (snapshotVersion ? \"-SNAPSHOT\" : (milestone ? \"-M$milestone\" : \"\"))\n  develocity.buildScan.tag \"Java $javaVersion\"\n\n  groovylibs = [\n    groovy              : groovyDependencies,\n    groovyNio           : \"$groovyGroup:groovy-nio:$groovyVersion\", //for groovy methods on Path\n    groovySql           : \"$groovyGroup:groovy-sql:$groovyVersion\", //for some Spring and Unitils tests\n    groovyTest          : \"$groovyGroup:groovy-test:$groovyVersion\", //for @NotYetImplemented\n    groovyJmx           : \"$groovyGroup:groovy-jmx:$groovyVersion\",  //for triggering jacoco dump via jmx\n  ]\n}\n\nnohttp {\n  source.exclude \"**/out/**\"\n  source.exclude \"**/build*/**\"\n  source.exclude \"**/.shelf/**\"\n}\n\nallprojects {\n  ext.displayName = null\n\n  group = \"org.spockframework\"\n  version = fullVersion\n\n  apply from: script(\"common\")\n\n  // ignore mutable data that is irrelevant for compilation output\n  normalization {\n    runtimeClasspath {\n      metaInf {\n        ignoreAttribute(\"Build-Revision\")\n      }\n    }\n  }\n}\n\napply from: script(\"ide\")\n\nsubprojects {\n  apply plugin: \"java-library\"\n  apply plugin: \"groovy\"\n  apply plugin: \"jacoco\"\n  apply plugin: \"org.spockframework.base\"\n\n  java {\n    toolchain {\n      languageVersion = JavaLanguageVersion.of(javaVersion)\n    }\n  }\n\n  sourceSets.all { ss ->\n    for (gv in variants.findAll { variant <= it }) {\n      java {\n        srcDir \"src/${ss.name}-groovy-le-$gv/java\"\n      }\n      groovy {\n        srcDir \"src/${ss.name}-groovy-le-$gv/groovy\"\n      }\n      resources {\n        srcDir \"src/${ss.name}-groovy-le-$gv/resources\"\n      }\n    }\n    for (jv in javaVersions.findAll { javaVersion <= it }) {\n      java {\n        srcDir \"src/${ss.name}-java-le-$jv/java\"\n      }\n      groovy {\n        srcDir \"src/${ss.name}-java-le-$jv/groovy\"\n      }\n      resources {\n        srcDir \"src/${ss.name}-java-le-$jv/resources\"\n      }\n    }\n    for (gv in variants.findAll { variant >= it }) {\n      java {\n        srcDir \"src/${ss.name}-groovy-ge-$gv/java\"\n      }\n      groovy {\n        srcDir \"src/${ss.name}-groovy-ge-$gv/groovy\"\n      }\n      resources {\n        srcDir \"src/${ss.name}-groovy-ge-$gv/resources\"\n      }\n    }\n    for (jv in javaVersions.findAll { javaVersion >= it }) {\n      java {\n        srcDir \"src/${ss.name}-java-ge-$jv/java\"\n      }\n      groovy {\n        srcDir \"src/${ss.name}-java-ge-$jv/groovy\"\n      }\n      resources {\n        srcDir \"src/${ss.name}-java-ge-$jv/resources\"\n      }\n    }\n  }\n\n  dependencies {\n    implementation(project.name == \"spock-gradle\" ? [] : groovylibs.groovy)\n  }\n\n  configureJavadoc(tasks.named(\"javadoc\"))\n  configureGroovydoc(tasks.named(\"groovydoc\"))\n\n  tasks.register(\"sourcesJar\", Jar) {\n    archiveClassifier = \"sources\"\n    from sourceSets.main.allSource\n  }\n\n  tasks.register(\"javadocJar\", Jar) {\n    archiveClassifier = \"javadoc\"\n    from javadoc\n  }\n\n  tasks.withType(Jar).configureEach {\n    /*\n     * Ensure the jar can be built in a reproducible manner, This shall prevent build cache misses, when different variants are tested.\n     */\n    preserveFileTimestamps = false\n    reproducibleFileOrder = true\n  }\n\n  tasks.withType(Test).configureEach {\n    useJUnitPlatform()\n    def taskName = name\n    reports {\n      junitXml {\n        outputLocation = file(\"${outputLocation.get()}/$taskName-$variant\")\n      }\n      html {\n        outputLocation = file(\"${outputLocation.get()}/$taskName-$variant\")\n      }\n    }\n    // As a generous general timeout, instead of the 6h of GHA.\n    timeout = Duration.ofMinutes(15)\n  }\n\n  tasks.register(\"allDependencyInsight\", DependencyInsightReportTask) {}\n\n  jacoco {\n    toolVersion = libs.versions.jacoco.get()\n  }\n}\n\ntasks.register(\"collectTestXml\") {\n  group = 'Test reports'\n  description = \"Collects the test xmls from every subproject into a new directory with subproject as name.\"\n  def reportingProjects = subprojects.findAll()\n  dependsOn(reportingProjects.tasks.collectMany { it.withType(Test) })\n\n\n  doFirst {\n    def target = layout.buildDirectory.dir(\"collected-test-results\").get().asFile\n    target.mkdirs()\n    reportingProjects.each { rp ->\n      rp.tasks.withType(Test).each { testTask ->\n        def repSrc = testTask.reports.junitXml.destination\n\n        def repTarget = file(\"$target/$rp.name-$repSrc.name\")\n        copy {\n          from repSrc\n          into repTarget\n          include '**/*.xml'\n        }\n      }\n    }\n  }\n}\n\n\ntasks.register(\"codeCoverageReport\", JacocoReport) {\n  group = 'Coverage reports'\n  description = \"Creates an aggregate coverage for the whole project.\"\n  def reportingProjects = subprojects\n  dependsOn(reportingProjects.tasks.collectMany { it.withType(Test) })\n\n  additionalSourceDirs.from(reportingProjects.sourceSets.main.allSource.srcDirs)\n  additionalClassDirs.from(reportingProjects.sourceSets.main.output)\n  executionData.from(files(reportingProjects.jacocoTestReport.executionData).filter { it.exists() })\n  executionData.from(file('spock-specs/build/jacoco/compileTestGroovy.exec'))\n\n  reports {\n    html.required = true\n    xml.required = true\n    xml.outputLocation = layout.buildDirectory.file(\"reports/jacoco/report.xml\") // report must be here for codecov to pick it up\n    csv.required = false\n  }\n}\n\nif (gradle.startParameter.taskNames == [\"ghActionsBuild\"]) {\n  gradle.startParameter.taskNames = [\"build\", \"preprocessWorkflows\", \"codeCoverageReport\"]\n}\n\nif (gradle.startParameter.taskNames == [\"ghActionsPublish\"] || gradle.startParameter.taskNames == [\"ghActionsDocs\"]) {\n  def originalStartParameterTaskNames = gradle.startParameter.taskNames\n  gradle.startParameter.taskNames = []\n  boolean isMaster = System.getenv(\"GITHUB_REF\") == \"refs/heads/master\"\n  boolean isTag = System.getenv(\"GITHUB_REF\")?.startsWith('refs/tags/spock-')\n  if (!(System.getenv(\"GITHUB_EVENT_NAME\") == \"push\"\n    && (isMaster || isTag)\n    && System.getenv(\"GITHUB_REPOSITORY\") == 'spockframework/spock')) {\n    throw new IllegalArgumentException(\"\"\"ghActionsPublish can only be run on push to branch master or tag in repo spockframework/spock\n      event: ${System.getenv(\"GITHUB_EVENT_NAME\")}\n      ref: ${System.getenv(\"GITHUB_REF\")}\n      repo: ${System.getenv(\"GITHUB_REPOSITORY\")}\"\"\")\n  }\n\n  if (originalStartParameterTaskNames == [\"ghActionsPublish\"]) {\n    if (javaVersion != javaVersions.min()) {\n      throw new IllegalArgumentException(\"ghActionsPublish can only be run on Java ${javaVersions.min()} but was run on $javaVersion\")\n    }\n    /*\n      We want to release only snapshots directly from master, final releases will be tagged and then published from that tag.\n     */\n    if (snapshotVersion) {\n      gradle.startParameter.taskNames += [\"publishToSonatype\"]\n    } else if (isTag) {\n      gradle.startParameter.taskNames += [\"publishToSonatype\", \"closeSonatypeStagingRepository\"]\n    } // else {\n    // disable tag release for now as this is done with a token, that doesn't trigger other workflows\n    // gradle.startParameter.taskNames += [\"tagRelease\"]\n    // }\n  }\n\n  if (originalStartParameterTaskNames == [\"ghActionsDocs\"] && (snapshotVersion || isTag)) {\n    if (javaVersion != javaVersions.max()) {\n      throw new IllegalArgumentException(\"ghActionsPublish can only be run on Java ${javaVersions.max()} but was run on $javaVersion\")\n    }\n    if (variant != variants.max()) {\n      throw new IllegalArgumentException(\"ghActionsPublish can only be run with variant ${variants.max()} but was run with $variant\")\n    }\n    gradle.startParameter.taskNames += [\"publishJavadoc\", \"publishDocs\"]\n  }\n}\n\ntasks.register(\"publishJavadoc\", Exec) {\n  dependsOn \"javadoc\"\n  commandLine \"sh\", \"-c\",\n    \"\"\"\n  git config user.email \"dev@forum.spockframework.org\"\n  git config user.name \"Spock Framework Robot\"\n  git fetch origin +gh-pages:gh-pages\n  git switch gh-pages\n  rm -rf javadoc/$variantLessVersion\n  mkdir -p javadoc/$variantLessVersion\n  cp -r build/javadoc/$variantLessVersion javadoc/\n  git add javadoc\n  git commit -qm \"Publish javadoc/$variantLessVersion\"\n  git push \"https://\\$GITHUB_TOKEN@github.com/spockframework/spock.git\" gh-pages 2>&1 | sed \"s/\\$GITHUB_TOKEN/xxx/g\"\n  git switch -\n\"\"\"\n}\ntasks.register(\"publishDocs\", Exec) {\n  dependsOn \"asciidoctor\"\n  commandLine \"sh\", \"-c\",\n    \"\"\"\n  git config user.email \"dev@forum.spockframework.org\"\n  git config user.name \"Spock Framework Robot\"\n  git fetch origin +gh-pages:gh-pages\n  git switch gh-pages\n  rm -rf docs/$variantLessVersion\n  mkdir -p docs/$variantLessVersion\n  cp -r build/docs/asciidoc/* docs/$variantLessVersion\n  git add docs\n  git commit -qm \"Publish docs/$variantLessVersion\"\n  git push \"https://\\$GITHUB_TOKEN@github.com/spockframework/spock.git\" gh-pages 2>&1 | sed \"s/\\$GITHUB_TOKEN/xxx/g\"\n  git switch -\n\"\"\"\n}\ntasks.register(\"tagRelease\", Exec) {\n  commandLine \"sh\", \"-c\",\n    \"\"\"\n  git config user.email \"dev@forum.spockframework.org\"\n  git config user.name \"Spock Framework Robot\"\n  git checkout master\n  git tag -f spock-$variantLessVersion\n  git push \"https://\\$GITHUB_TOKEN@github.com/spockframework/spock.git\" spock-$variantLessVersion 2>&1 | sed \"s/\\$GITHUB_TOKEN/xxx/g\"\n\"\"\"\n}\n\ntasks.register(\"javadoc\", Javadoc) {\n  title \"Spock Framework API Documentation ($variantLessVersion)\"\n  destinationDir file(\"build/javadoc/$variantLessVersion\")\n  source subprojects.collect { project -> project.tasks.named(\"javadoc\").map { it.source } }\n  classpath = files(subprojects.collect { project -> project.tasks.named(\"javadoc\").map { it.classpath } })\n}\n\nconfigureJavadoc(tasks.named(\"javadoc\"), true)\n\ntasks.register(\"groovydoc\", Groovydoc) {\n  docTitle \"Spock Framework API Documentation ($variantLessVersion)\"\n  windowTitle \"Spock Framework API Documentation ($variantLessVersion)\"\n  destinationDir file(\"build/groovydoc/$variantLessVersion\")\n  source subprojects.collect { project -> project.tasks.named(\"groovydoc\").map { it.source } }\n  classpath = files(subprojects.collect { project -> project.tasks.named(\"groovydoc\").map { it.classpath } })\n  groovyClasspath = files(projects.spockCore.dependencyProject.tasks.named(\"groovydoc\").map { it.groovyClasspath })\n\n  access = GroovydocAccess.PROTECTED\n  processScripts = false\n  includeMainForScripts = false\n  includeAuthor = false\n}\n\nconfigureGroovydoc(tasks.named(\"groovydoc\"))\n\nconfigurations {\n  asciidoctorExtensions\n}\n\ndependencies {\n  // local extension from build-logic/asciidoc-extensions\n  asciidoctorExtensions 'spockbuild:asciidoc-extensions'\n}\n\nasciidoctorj {\n  version = libs.versions.asciidoctorj\n  fatalWarnings(missingIncludes())\n  modules {\n    diagram.use()\n  }\n}\n\ntasks.named(\"asciidoctor\") {\n  // work-around for https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/721\n  dependsOn(project.configurations.asciidoctorExtensions)\n  configurations 'asciidoctorExtensions'\n  sourceDir = \"docs\"\n  baseDirFollowsSourceDir()\n  logDocuments = true\n  attributes \"source-highlighter\": \"coderay\", \"linkcss\": true, \"sectanchors\": true, \"revnumber\": variantLessVersion, \"commit-ish\": System.getenv(\"GITHUB_SHA\") ?: \"master\"\n  // also treats the included specs as inputs\n  inputs.dir file(\"spock-specs/src/test/groovy/org/spockframework/docs\")\n  inputs.dir file(\"spock-specs/src/test/resources/snapshots/org/spockframework/docs\")\n  inputs.dir file(\"spock-spring/src/test/groovy/org/spockframework/spring/docs\")\n  inputs.dir file(\"spock-spring/src/test/resources/org/spockframework/spring/docs\")\n  inputs.dir file(\"spock-spring/boot2-test/src/test/groovy/org/spockframework/boot2\")\n\n  doFirst { verifyAnchorlessCrossDocumentLinks(sourceFileTree) }\n  doLast { verifyLinksAndAnchors(outputs.files.asFileTree) }\n}\n\nnexusPublishing {\n  packageGroup = 'org.spockframework'\n  repositories {\n    sonatype {\n      username = System.getenv(\"SONATYPE_OSS_USER\")\n      password = System.getenv(\"SONATYPE_OSS_PASSWORD\")\n    }\n  }\n  transitionCheckOptions {\n    // closing checks take some time so increase the retries\n    // total time is maxRetries(180) * delayBetween(10s) = 30m\n    maxRetries.set(180)\n  }\n}\n\nFile script(String name) {\n  project.file(\"gradle/${name}.gradle\")\n}\n\ndef configureJavadoc(TaskProvider javadoc, boolean root = false) {\n  javadoc.configure {\n    include \"spock/**\"\n    configure(options) {\n      options.addStringOption('Xdoclint:none', '-quiet')\n      options.noTimestamp()\n      options.addStringOption('source', '1.8')\n      links \"https://docs.groovy-lang.org/docs/groovy-$groovyVersion/html/gapi/\"\n      links \"https://junit.org/junit4/javadoc/latest/\"\n      links \"https://javadoc.io/doc/org.mockito/mockito-core/${libs.versions.mockito5.get()}/\"\n      // Use offline package list, as the JavaVersion is fixed to 8 for the time being\n      // and Hamcrest has certificate issues for their domain.\n      linksOffline(\"https://docs.oracle.com/javase/8/docs/api/\", \"${root ? '' : '../'}javadoc/java-8\")\n      linksOffline(\"https://hamcrest.org/JavaHamcrest/javadoc/2.2/\", \"${root ? '' : '../'}javadoc/hamcrest-2.2\")\n    }\n  }\n}\n\ndef configureGroovydoc(TaskProvider groovydoc) {\n  groovydoc.configure {\n    include \"spock/**\"\n  }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.833984375,
          "content": "#\n# Copyright 2018 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\norg.gradle.java.installations.auto-download=false\norg.gradle.java.installations.fromEnv=JDK8,JDK11,JDK17,JDK21,JDK23\n\norg.gradle.parallel=true\norg.gradle.caching=true\n\njavaVersionsList=8, 11, 17, 21\nvariantsList=2.5, 3.0, 4.0\nkotlin.code.style=official\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "javadoc",
          "type": "tree",
          "content": null
        },
        {
          "name": "jitpack.yml",
          "type": "blob",
          "size": 0.3642578125,
          "content": "before_install:\n  - sdk install java 8.0.345-tem\n  - sdk install java 11.0.16-tem\n  - sdk use java 11.0.16-tem\n  - export JAVA8=`sdk home java 8.0.345-tem`\n  - export JAVA11=`sdk home java 11.0.16-tem`\ninstall:\n  - ./gradlew build publishToMavenLocal -Dvariant=2.5\n  - ./gradlew build publishToMavenLocal -Dvariant=3.0\n  - ./gradlew build publishToMavenLocal -Dvariant=4.0\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 3.205078125,
          "content": "import com.gradle.enterprise.gradleplugin.internal.extension.BuildScanExtensionWithHiddenFeatures\n\npluginManagement {\n  repositories {\n    mavenCentral()\n    gradlePluginPortal()\n  }\n\n  plugins {\n    id \"com.gradle.develocity\" version \"3.19\"\n    id \"com.gradle.common-custom-user-data-gradle-plugin\" version \"2.0.2\"\n    id \"org.asciidoctor.jvm.convert\" version \"4.0.4\"\n    id \"net.nemerosa.versioning\" version \"3.1.0\"\n    id \"io.github.gradle-nexus.publish-plugin\" version \"2.0.0\"\n    id \"com.github.ben-manes.versions\" version \"0.51.0\"\n    id \"biz.aQute.bnd.builder\" version \"7.1.0\"\n    id \"io.spring.nohttp\" version \"0.0.11\"\n  }\n}\n\nplugins {\n  id \"com.gradle.develocity\"\n  id \"com.gradle.common-custom-user-data-gradle-plugin\"\n}\n\ndependencyResolutionManagement {\n  repositories {\n    mavenCentral()\n  }\n}\n\nif (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {\n  throw new InvalidUserDataException(\"The spock build needs to be run with JDK 17 or higher, but was: ${JavaVersion.current()}\")\n}\n\n\ndef develocityServer = \"https://ge.spockframework.org\"\ndef isCiServer = System.env[\"CI\"] || System.env[\"GITHUB_ACTIONS\"]\n\ndef accessKeysAreMissing() {\n  return !(System.env['DEVELOCITY_ACCESS_KEY']?.trim())\n}\n\ndevelocity {\n  buildScan {\n    uploadInBackground = !isCiServer\n\n\n    if (gradle.startParameter.buildScan || (isCiServer && accessKeysAreMissing())) {\n      termsOfUseUrl = \"https://gradle.com/help/legal-terms-of-use\"\n    } else {\n      server = develocityServer\n      publishing.onlyIf {  it.authenticated }\n      }\n\n    if (isCiServer) {\n      termsOfUseAgree = \"yes\"\n    }\n\n    obfuscation {\n      if (isCiServer) {\n        username { \"github\" }\n      } else {\n        hostname { null }\n        ipAddresses { [] }\n      }\n    }\n  }\n}\n\nbuildCache {\n  local {\n    enabled = !isCiServer\n  }\n  if (gradle.startParameter.buildScan || (isCiServer && accessKeysAreMissing())) {\n    remote(HttpBuildCache) {\n      url = uri(\"$develocityServer/cache/\")\n      push = false\n    }\n  } else {\n    remote(develocity.buildCache) {\n      push = isCiServer\n    }\n  }\n}\n\nenableFeaturePreview(\"TYPESAFE_PROJECT_ACCESSORS\")\n\nincludeBuild \"build-logic\"\ninclude \"spock-bom\"\ninclude \"spock-core\"\ninclude \"spock-specs\"\ninclude \"spock-specs:mock-integration\"\ninclude \"spock-spring\"\ninclude \"spock-guice\"\ninclude \"spock-junit4\"\ninclude \"spock-testkit\"\n\ndef variant = System.getProperty(\"variant\") as BigDecimal ?: 2.5\ndef javaVersion = (System.getProperty(\"javaVersion\") ?: 8) as int\n\nif (variant == 2.5) {\n  //Remove once Groovy 2.5 support is dropped\n  include \"spock-groovy2-compat\"\n} else {\n  // require Java 17 which isn't supported by Groovy 2.5\n  include \"spock-spring:boot3-test\"\n  include \"spock-spring:spring6-test\"\n}\n\n// https://issues.apache.org/jira/projects/TAP5/issues/TAP5-2588\nif (javaVersion == 8) {\n  include \"spock-tapestry\"\n}\n\ninclude \"spock-unitils\"\n\nif (javaVersion <= 17) {\n  include \"spock-spring:boot2-test\"\n}\ninclude \"spock-spring:spring3-test\"\ninclude \"spock-spring:spring5-test\"\n\nrootProject.name = \"spock\"\nnameBuildScriptsAfterProjectNames(rootProject.children)\n\ndef nameBuildScriptsAfterProjectNames(projects) {\n  for (prj in projects) {\n    prj.buildFileName = prj.name + \".gradle\" - \"spock-\"\n    nameBuildScriptsAfterProjectNames(prj.children)\n  }\n}\n"
        },
        {
          "name": "spock-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-groovy2-compat",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-guice",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-junit4",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-specs",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-tapestry",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-testkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "spock-unitils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}