{
  "metadata": {
    "timestamp": 1736708631440,
    "page": 966,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spring-projects/spring-kafka",
      "stars": 2259,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1533203125,
          "content": "root=true\n\n[*.java]\nindent_style = tab\nindent_size = 4\ncontinuation_indent_size = 8\n\n[*.xml]\nindent_style = tab\nindent_size = 4\ncontinuation_indent_size = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "*.iml\n*.ipr\n*.iws\n.classpath\n.gradle\n.idea\n.project\n.settings\n.sts4-cache\n.checkstyle\nbin\nbuild\nout\ntarget\n.DS_Store\n.vscode\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.adoc",
          "type": "blob",
          "size": 2.2978515625,
          "content": "= Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open\nand welcoming community, we pledge to respect all people who contribute through reporting\nissues, posting feature requests, updating documentation, submitting pull requests or\npatches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for\neveryone, regardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses,\n  without explicit permission\n* Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments,\ncommits, code, wiki edits, issues, and other contributions that are not aligned to this\nCode of Conduct, or to ban temporarily or permanently any contributor for other behaviors\nthat they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to fairly and\nconsistently applying these principles to every aspect of managing this project. Project\nmaintainers who do not follow or enforce the Code of Conduct may be permanently removed\nfrom the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces when an\nindividual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by\ncontacting a project maintainer at spring-code-of-conduct@pivotal.io . All complaints will\nbe reviewed and investigated and will result in a response that is deemed necessary and\nappropriate to the circumstances. Maintainers are obligated to maintain confidentiality\nwith regard to the reporter of an incident.\n\nThis Code of Conduct is adapted from the\nhttps://contributor-covenant.org[Contributor Covenant], version 1.3.0, available at\nhttps://contributor-covenant.org/version/1/3/0/[contributor-covenant.org/version/1/3/0/]\n"
        },
        {
          "name": "CONTRIBUTING.adoc",
          "type": "blob",
          "size": 12.8798828125,
          "content": "= Spring for Apache Kafka Contributor Guidelines\n\nDo you have something you'd like to contribute to **Spring for Apache Kafka**?\nWe welcome pull requests, but ask that you carefully read this document first to understand how best to submit them;\nwhat kind of changes are likely to be accepted; and what to expect from the Spring team when evaluating your submission.\n\nPlease refer back to this document as a checklist before issuing any pull request; this will save time for everyone!\n\n== Code of Conduct\nThis project adheres to the Contributor Covenant link:CODE_OF_CONDUCT.adoc[code of conduct].\nBy participating, you  are expected to uphold this code. Please report unacceptable behavior to\nspring-code-of-conduct@pivotal.io.\n\n== Understand the basics\n\nNot sure what a *pull request* is, or how to submit one?  Take a look at GitHub's excellent documentation:\nhttps://help.github.com/articles/using-pull-requests/[Using Pull Requests] first.\n\n== Search GitHub ticket first; create an issue if necessary\n\nIs there already an issue that addresses your concern?  Search the\nhttps://github.com/spring-projects/spring-kafka/issues[GitHub issue tracker] to see if you can find something similar.\nIf not, please create a new issue before submitting a pull request unless the change is truly trivial, e.g. typo fixes,\nremoving compiler warnings, etc.\n\n== Sign the contributor license agreement\n\nIf you have not previously done so, please fill out and\nsubmit the https://cla.pivotal.io/sign/spring[Contributor License Agreement (CLA)].\n\nVery important, before we can accept any *Spring Kafka contributions*, we will need you to sign the CLA.\nSigning the CLA does not grant anyone commit rights to the main repository, but it does mean that we can accept your contributions, and you will get an author credit if we do.\n\n== Fork the Repository\n\n1. Go to https://github.com/spring-projects/spring-kafka[https://github.com/spring-projects/spring-kafka]\n2. Hit the \"fork\" button and choose your own GitHub account as the target\n3. For more detail see https://help.github.com/fork-a-repo/[Fork A Repo].\n\n== Setup your Local Development Environment\n\n1. `git clone --recursive git@github.com:<your-github-username>/spring-kafka.git`\n2. `cd spring-kafka`\n3. `git remote show`\n_you should see only 'origin' - which is the fork you created for your own GitHub account_\n4. `git remote add upstream git@github.com:spring-projects/spring-kafka.git`\n5. `git remote show`\n_you should now see 'upstream' in addition to 'origin' where 'upstream' is the SpringIO repository from which releases are built_\n6. `git fetch --all`\n7. `git branch -a`\n_you should see branches on origin as well as upstream, including 'main'_\n\n== A Day in the Life of a Contributor\n\n* _Always_ work on topic branches (Typically use the GitHub issue ID as the branch name).\n  - For example, to create and switch to a new branch for issue GH-123: `git checkout -b GH-123`\n* You might be working on several different topic branches at any given time, but when at a stopping point for one of those branches, commit (a local operation).\n* Please follow the \"Commit Guidelines\" described in\nhttps://git-scm.com/book/ms/v2/Distributed-Git-Contributing-to-a-Project[this chapter of Pro Git].\n* Then to begin working on another issue (say GH-101): `git checkout GH-101`. The _-b_ flag is not needed if that\nbranch already exists in your local repository.\n* When ready to resolve an issue or to collaborate with others, you can push your branch to origin (your fork),\ne.g.: `git push origin GH-123`\n* If you want to collaborate with another contributor, have them fork your repository (add it as a remote) and\n`git fetch <your-username>` to grab your branch.\nAlternatively, they can use `git fetch --all` to sync their local state with all of their remotes.\n* If you grant that collaborator push access to your repository, they can even apply their changes to your branch.\n* When ready for your contribution to be reviewed for potential inclusion in the main branch of the canonical\nspring-kafka repository (what you know as 'upstream'), issue a pull request to the SpringSource repository\n(for more detail, see https://help.github.com/articles/using-pull-requests/[Using pull requests]).\n* The project lead may merge your changes into the upstream main branch as-is, he may keep the pull request open yet\nadd a comment about something that should be modified, or he might reject the pull request by closing it.\n* A prerequisite for any pull request is that it will be cleanly merge-able with the upstream main's current state.\n**This is the responsibility of any contributor.**\nIf your pull request cannot be applied cleanly, the project lead will most likely add a comment requesting that you make\nit merge-able.\nFor a full explanation, see https://git-scm.com/book/en/Git-Branching-Rebasing[the Pro Git section on rebasing].\nAs stated there: _\"> Often, you’ll do this to make sure your commits apply cleanly on a remote branch — perhaps in a\nproject to which you’re trying to contribute but that you don’t maintain.\"_\n\n== Keeping your Local Code in Sync\n* As mentioned above, you should always work on topic branches (since 'main' is a moving target). However, you do want\nto always keep your own 'origin' main branch in synch with the 'upstream' main.\n* Within your local working directory, you can sync up all remotes' branches with: `git fetch --all`\n* While on your own local main branch: `git pull upstream main` (which is the equivalent of fetching upstream/main\nand merging that into the branch you are in currently)\n* Now that you're in synch, switch to the topic branch where you plan to work, e.g.: `git checkout -b GH-123`\n* When you get to a stopping point: `git commit`\n* If changes have occurred on the upstream/main while you were working you can synch again:\n    - Switch back to main: `git checkout main`\n    - Then: `git pull upstream main`\n    - Switch back to the topic branch: `git checkout GH-123` (no -b needed since the branch already exists)\n    - Rebase the topic branch to minimize the distance between it and your recently synched main branch: `git rebase main`\n(Again, for more detail see https://git-scm.com/book/en/Git-Branching-Rebasing[the Pro Git section on rebasing]).\n* **Note** You cannot rebase if you have already pushed your branch to your remote because you'd be rewriting history\n(see **'The Perils of Rebasing'** in the article).\nIf you rebase by mistake, you can undo it as discussed\nhttps://stackoverflow.com/questions/134882/undoing-a-git-rebase[in this StackOverflow discussion].\nOnce you have published your branch, you need to merge in the main rather than rebasing.\n* Now, if you issue a pull request, it is much more likely to be merged without conflicts.\nMost likely, any pull request that would produce conflicts will be deferred until the issuer of that pull request makes\nthese adjustments.\n* Assuming your pull request is merged into the 'upstream' main, you will actually end up pulling that change into\nyour own main eventually, and at that time, you may decide to delete the topic branch from your local repository and\nyour fork (origin) if you pushed it there.\n    - to delete the local branch: `git branch -d GH-123`\n    - to delete the branch from your origin: `git push origin :GH-123`\n\n== Maintain a linear commit history\n\nWhen merging to main, the project __always__ uses fast-forward merges.\nWhen issuing pull requests, please ensure that your commit history is linear.\nFrom the command line you can check this using:\n\n----\nlog --graph --pretty=oneline\n----\n\nAs this may cause lots of typing, we recommend creating a global alias, e.g. `git logg` for this:\n\n----\ngit config --global alias.logg 'log --graph --pretty=oneline'\n----\n\nThis command, will provide the following output, which in this case shows a nice linear history:\n\n----\n* c129a02e6c752b49bacd4a445092a44f66c2a1e9 INT-2721 Increase Timers on JDBC Delayer Tests\n* 14e556ce23d49229c420632cef608630b1d82e7d INT-2620 Fix Debug Log\n* 6140aa7b2cfb6ae309c55a157e94b44e5d0bea4f INT-3037 Fix JDBC MS Discard After Completion\n* 077f2b24ea871a3937c513e08241d1c6cb9c9179 Update Spring Social Twitter to 1.0.5\n* 6d4f2b46d859c903881a561c35aa28df68f8faf3 INT-3053 Allow task-executor on <reply-listener/>\n* 56f9581b85a8a40bbcf2461ffc0753212669a68d Update Spring Social Twitter version to 1.0.4\n----\n\nIf you see intersecting lines, that usually means that you forgot to rebase you branch.\nAs mentioned earlier, **please rebase against main** before issuing a pull request.\n\n== Mind the whitespace\n\nPlease carefully follow the whitespace and formatting conventions already present in the framework.\n\n1. Tabs, not spaces\n2. Unix (LF), not DOS (CRLF) line endings\n3. Eliminate all trailing whitespace\n4. Wrap Javadoc at 90 characters\n5. Aim to wrap code at 120 characters, but favor readability over wrapping\n6. Preserve existing formatting; i.e. do not reformat code for its own sake\n7. Search the codebase using `git grep` and other tools to discover common\n   naming conventions, etc.\n8. Latin-1 (ISO-8859-1) encoding for Java sources; use `native2ascii` to convert\n   if necessary\n\n== Add Apache license header to all new classes\n\n[source, java]\n----\n/*\n * Copyright 2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage ...;\n----\n\n== Update license header to modified files as necessary\n\nAlways check the date range in the Apache license header. For example, if you've modified a file in 2016 whose header\nstill reads\n\n[source java]\n----\n * Copyright 2002-2011 the original author or authors.\n----\n\nthen be sure to update it to 2016 appropriately\n\n[source java]\n----\n * Copyright 2002-2016 the original author or authors.\n----\n\n== Use @since tags\n\nUse @since tags for newly-added public API types and methods e.g.\n\n[source java]\n----\n/**\n * ...\n *\n * @author First Last\n * @since 3.0\n * @see ...\n */\n----\n\n== Submit JUnit test cases for all behavior changes\n\nSearch the codebase to find related unit tests and add additional @Test methods within. It is also acceptable to submit test cases on a per GitHub issue basis.\n\n== Squash commits\n\nUse `git rebase --interactive`, `git add --patch` and other tools to \"squash\" multiple commits into atomic changes.\nIn addition to the man pages for git, there are many resources online to help you understand how these tools work.\n\n== Use your real name in git commits\n\nPlease configure git to use your real first and last name for any commits you intend to submit as pull requests. For example, this is not acceptable:\n\n    Author: Nickname <user@mail.com>\n\nRather, please include your first and last name, properly capitalized, as submitted against the SpringSource contributor license agreement:\n\n    Author: First Last <user@mail.com>\n\nThis helps ensure traceability against the CLA, and also goes a long way to ensuring useful output from tools like `git shortlog` and others.\n\nYou can configure this globally via the account admin area GitHub (useful for fork-and-edit cases); globally with\n\n    git config --global user.name \"First Last\"\n    git config --global user.email user@mail.com\n\nor locally for the *spring-kafka* repository only by omitting the '--global' flag:\n\n    cd spring-kafka\n    git config user.name \"First Last\"\n    git config user.email user@mail.com\n\n== Run all tests prior to submission\n\nSee the https://github.com/spring-projects/spring-kafka#checking-out-and-building[checking out and building]\nsection of the README for instructions.\nMake sure that all tests pass prior to submitting your pull request.\n\n== Mention your pull request on the associated GitHub issue\n\nAdd a comment to the associated GitHub issue(s) linking to your new pull request.\n\n== Provide a Link to the GitHub issue in the Associated Pull Request\n\nThere are multiple ways to link a Pull Request to a GitHub issue as described\nhttps://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue[here].\n\nOne way would be to add a GitHub issue link to your first commit comment of the pull request on the second line,\nso your commit message may look like this:\n\n----\n    GH-1: Add Contribution Guidelines\n\n    Fixes GH-1 (https://github.com/spring-projects/spring-kafka/issues/1)\n\n    * add `CONTRIBUTING.adoc` describing the Contribution procedure\n    * mention Contribution Guidelines in the `README.md`\n    * mention CODE_OF_CONDUCT in the `README.md`\n----\n\nAlso by using specific\nhttps://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword[keywords]\nyou can link to a GitHub issue like so:\n\n    Closes #10\n"
        },
        {
          "name": "LICENCE.txt",
          "type": "blob",
          "size": 11.107421875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by testData1) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class testData1 and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [testData1 of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8388671875,
          "content": "Spring for Apache Kafka\n[![Build Status](https://github.com/spring-projects/spring-kafka/actions/workflows/ci-snapshot.yml/badge.svg)](https://github.com/spring-projects/spring-kafka/actions/workflows/ci-snapshot.yml)\n[![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.spring.io/scans?search.rootProjectNames=spring-kafka)\n==================\n\n# Code of Conduct\n\nPlease see our [Code of conduct](https://github.com/spring-projects/.github/blob/master/CODE_OF_CONDUCT.md).\n\n# Reporting Security Vulnerabilities\n\nPlease see our [Security policy](https://github.com/spring-projects/spring-kafka/security/policy).\n\n# Checking out and Building\n\nTo check out the project and build from source, do the following:\n\n    git clone git://github.com/spring-projects/spring-kafka.git\n    cd spring-kafka\n    ./gradlew build\n\nJava 17 or later version is recommended to build the project.\n\nIf you encounter out of memory errors during the build, change the `org.gradle.jvmargs` property in `gradle.properties`.\n\nTo build and install jars into your local Maven cache:\n\n    ./gradlew install\n\nTo build API Javadoc (results will be in `build/api`):\n\n    ./gradlew api\n\nTo build reference documentation (results will be in `spring-kafka-docs/build/site`):\n\n    ./gradlew antora\n\nTo build complete distribution including `-dist`, `-docs`, and `-schema` zip files (results will be in `build/distributions`)\n\n    ./gradlew dist\n\n# Using Eclipse\n\nTo generate Eclipse metadata (.classpath and .project files), do the following:\n\n    ./gradlew eclipse\n\nOnce complete, you may then import the projects into Eclipse as usual:\n\n *File -> Import -> Existing projects into workspace*\n\nBrowse to the *'spring-kafka'* root directory. All projects should import free of errors.\n\n# Using IntelliJ IDEA\n\nTo generate IDEA metadata (.iml and .ipr files), do the following:\n\n    ./gradlew idea\n\n# Resources\n\nFor more information, please visit the Spring Kafka website at:\n[Reference Manual](https://docs.spring.io/spring-kafka/reference/index.html)\n\n# Contributing to Spring Kafka\n\nHere are some ways for you to get involved in the community:\n\n* Get involved with the Spring community on the Spring Community Forums.  \nPlease help out on the [StackOverflow](https://stackoverflow.com/questions/tagged/spring-kafka) by responding to questions and joining the debate.\n* Create [GitHub issues](https://github.com/spring-projects/spring-kafka/issues) for bugs and new features and comment and vote on the ones that you are interested in.\n* GitHub is for social coding: if you want to write code, we encourage contributions through pull requests from [forks of this repository](https://help.github.com/forking/).  \nIf you want to contribute code this way, please reference a GitHub issue as well covering the specific issue you are addressing.\n* Watch for upcoming articles on Spring by [subscribing](https://www.springsource.org/node/feed) to springframework.org\n\nBefore we accept a non-trivial patch or pull request we will need you to sign the [contributor's agreement](https://support.springsource.com/spring_committer_signup).\nSigning the contributor's agreement does not grant anyone commit rights to the main repository, but it does mean that we can accept your contributions, and you will get an author credit if we do.\nActive contributors might be asked to join the core team and given the ability to merge pull requests.\n\n## Code Conventions and Housekeeping\nNone of these is essential for a pull request, but they will all help.\nThey can also be added after the original pull request but before a merge.\n\n* Use the Spring Framework code format conventions (import `eclipse-code-formatter.xml` from the root of the project if you are using Eclipse).\n* Make sure all new `.java` files to have a simple Javadoc class comment with at least an `@author` tag identifying you, and preferably at least a paragraph on what the class is for.\n* Add the ASF license header comment to all new `.java` files (copy from existing files in the project)\n* Add yourself as an `@author` to the `.java` files that you modify substantially (more than cosmetic changes).\n* Add some Javadocs and, if you change the namespace, some XSD doc elements.\n* A few unit tests would help a lot as well - someone has to do it.\n* If no-one else is using your branch, please rebase it against the current main (or another target branch in the main project).\n\n# Getting Support\nUse the [`spring-kafka` tag on Stack Overflow](https://stackoverflow.com/questions/tagged/spring-kafka) to ask questions; include code and configuration and clearly explain your problem, providing an [MCRE](https://stackoverflow.com/help/minimal-reproducible-example) if possible.\n[Commercial support](https://spring.io/support) is also available.\n\n# License\n\nSpring Kafka is released under the terms of the Apache Software License Version 2.0 (see LICENSE.txt).\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 13.9541015625,
          "content": "buildscript {\n\text.kotlinVersion = '1.9.25'\n\text.isCI = System.getenv('GITHUB_ACTION')\n\trepositories {\n\t\tgradlePluginPortal()\n\t\tmavenCentral()\n\t\tif (version.endsWith('SNAPSHOT')) {\n\t\t\tmaven { url 'https://repo.spring.io/snapshot' }\n\t\t}\n\t}\n\tdependencies {\n\t\tclasspath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n\t\tclasspath \"org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion\"\n\t}\n}\n\nplugins {\n\tid 'base'\n\tid 'idea'\n\tid 'org.ajoberstar.grgit' version '5.3.0'\n\tid 'io.spring.nohttp' version '0.0.11'\n\tid 'io.spring.dependency-management' version '1.1.7' apply false\n\tid 'com.github.spotbugs' version '6.0.28'\n\tid 'io.freefair.aggregate-javadoc' version '8.10.2'\n}\n\napply plugin: 'io.spring.nohttp'\n\ndescription = 'Spring for Apache Kafka'\n\next {\n\tlinkHomepage = 'https://github.com/spring-projects/spring-kafka'\n\tlinkCi = 'https://build.spring.io/browse/SK'\n\tlinkIssue = 'https://github.com/spring-projects/spring-kafka/issues'\n\tlinkScmUrl = 'https://github.com/spring-projects/spring-kafka'\n\tlinkScmConnection = 'https://github.com/spring-projects/spring-kafka.git'\n\tlinkScmDevConnection = 'git@github.com:spring-projects/spring-kafka.git'\n\n\tjavadocLinks = [\n\t\t'https://docs.oracle.com/en/java/javase/17/docs/api/',\n\t\t'https://docs.spring.io/spring-framework/docs/current/javadoc-api/'\n\t] as String[]\n\n\n\tmodifiedFiles =\n\t\t\tfiles()\n\t\t\t\t\t.from {\n\t\t\t\t\t\tfiles(grgit.status().unstaged.modified)\n\t\t\t\t\t\t\t\t.filter { f -> f.name.endsWith('.java') || f.name.endsWith('.kt') }\n\t\t\t\t\t}\n\tmodifiedFiles.finalizeValueOnRead()\n\n\tassertjVersion = '3.25.3'\n\tawaitilityVersion = '4.2.2'\n\thamcrestVersion = '3.0'\n\thibernateValidationVersion = '8.0.2.Final'\n\tjacksonBomVersion = '2.18.2'\n\tjaywayJsonPathVersion = '2.9.0'\n\tjunit4Version = '4.13.2'\n\tjunitJupiterVersion = '5.11.4'\n\tkafkaVersion = '3.8.1'\n\tkotlinCoroutinesVersion = '1.8.1'\n\tlog4jVersion = '2.24.3'\n\tmicrometerDocsVersion = '1.0.4'\n\tmicrometerVersion = '1.14.2'\n\tmicrometerTracingVersion = '1.4.1'\n\tmockitoVersion = '5.14.2'\n\treactorVersion = '2024.0.1'\n\tscalaVersion = '2.13'\n\tspringBootVersion = '3.3.7' // docs module\n\tspringDataVersion = '2024.1.1'\n\tspringRetryVersion = '2.0.11'\n\tspringVersion = '6.2.1'\n\tzookeeperVersion = '3.8.4'\n\n\tidPrefix = 'kafka'\n\n\tjavaProjects = subprojects - project(':spring-kafka-bom') - project(':spring-kafka-docs')\n\n}\n\nnohttp {\n\tsource.include '**/src/**'\n\tsource.exclude '**/*.gif', '**/*.ks', '**/.gradle/**'\n}\n\nallprojects {\n\tgroup = 'org.springframework.kafka'\n\n\tapply plugin: 'io.spring.dependency-management'\n\n\trepositories {\n\t\tmavenCentral()\n\t\tmaven { url 'https://repo.spring.io/milestone' }\n\t\tif (version.endsWith('SNAPSHOT')) {\n\t\t\tmaven { url 'https://repo.spring.io/snapshot' }\n\t\t}\n//\t\tmaven { url 'https://repository.apache.org/content/groups/staging/' }\n\t}\n\n\tdependencyManagement {\n\t\tresolutionStrategy {\n\t\t\tcacheChangingModulesFor 0, 'seconds'\n\t\t}\n\t\tapplyMavenExclusions = false\n\t\tgeneratedPomCustomization {\n\t\t\tenabled = false\n\t\t}\n\n\t\timports {\n\t\t\tmavenBom \"com.fasterxml.jackson:jackson-bom:$jacksonBomVersion\"\n\t\t\tmavenBom \"org.junit:junit-bom:$junitJupiterVersion\"\n\t\t\tmavenBom \"io.micrometer:micrometer-bom:$micrometerVersion\"\n\t\t\tmavenBom \"io.micrometer:micrometer-tracing-bom:$micrometerTracingVersion\"\n\t\t\tmavenBom \"io.projectreactor:reactor-bom:$reactorVersion\"\n\t\t\tmavenBom \"org.springframework.data:spring-data-bom:$springDataVersion\"\n\t\t\tmavenBom \"org.springframework:spring-framework-bom:$springVersion\"\n\t\t}\n\t}\n}\n\nconfigure(javaProjects) { subproject ->\n\tapply plugin: 'java-library'\n\tapply plugin: 'eclipse'\n\tapply plugin: 'idea'\n\tapply plugin: 'checkstyle'\n\tapply plugin: 'kotlin'\n\tapply plugin: 'kotlin-spring'\n\n\tapply from: \"${rootProject.projectDir}/gradle/publish-maven.gradle\"\n\n\tjava {\n\t\twithJavadocJar()\n\t\twithSourcesJar()\n\t\tregisterFeature('optional') {\n\t\t\tusingSourceSet(sourceSets.main)\n\t\t}\n\t}\n\n\tcompileJava {\n\t\toptions.release = 17\n\t}\n\n\tcompileTestJava {\n\t\tsourceCompatibility = JavaVersion.VERSION_17\n\t\ttargetCompatibility = JavaVersion.VERSION_17\n\t\toptions.encoding = 'UTF-8'\n\t}\n\n\teclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'\n\n\t// dependencies that are common across all java projects\n\tdependencies {\n\t\tdef spotbugsAnnotations = \"com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}\"\n\t\tcompileOnly spotbugsAnnotations\n\t\ttestCompileOnly spotbugsAnnotations\n\n\t\ttestImplementation 'org.junit.jupiter:junit-jupiter-api'\n\t\ttestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n\t\ttestRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n\n\t\t// To avoid compiler warnings about @API annotations in JUnit code\n\t\ttestCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'\n\n\t\ttestRuntimeOnly \"org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion\"\n\n\t\ttestImplementation 'org.jetbrains.kotlin:kotlin-reflect'\n\t\ttestImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'\n\t\ttestImplementation(\"org.awaitility:awaitility:$awaitilityVersion\") {\n\t\t\texclude group: 'org.hamcrest'\n\t\t}\n\t\ttestImplementation \"org.hamcrest:hamcrest-core:$hamcrestVersion\"\n\t\toptionalApi \"org.assertj:assertj-core:$assertjVersion\"\n\t}\n\n\t// enable all compiler warnings; individual projects may customize further\n\t[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options,-processing', '-parameters']\n\n\ttest {\n\t\ttestLogging {\n\t\t\tevents 'skipped', 'failed'\n\t\t\tshowStandardStreams = project.hasProperty('showStandardStreams') ?: false\n\t\t\tshowExceptions = true\n\t\t\tshowStackTraces = true\n\t\t\texceptionFormat = 'full'\n\t\t}\n\n\t\tmaxHeapSize = '1536m'\n\t\tuseJUnitPlatform()\n\t}\n\n\tcheckstyle {\n\t\tconfigDirectory.set(rootProject.file('src/checkstyle'))\n\t\ttoolVersion = '10.18.2'\n\t}\n\n\tpublishing {\n\t\tpublications {\n\t\t\tmavenJava(MavenPublication) {\n\t\t\t\tsuppressAllPomMetadataWarnings()\n\t\t\t\tfrom components.java\n\t\t\t}\n\t\t}\n\t}\n\n\ttasks.register('updateCopyrights') {\n\t\tonlyIf { !isCI }\n\t\tinputs.files(modifiedFiles.filter { f -> f.path.contains(subproject.name) })\n\t\toutputs.dir('build/classes')\n\n\t\tdoLast {\n\t\t\tdef now = Calendar.instance.get(Calendar.YEAR) as String\n\t\t\tinputs.files.each { file ->\n\t\t\t\tdef line\n\t\t\t\tfile.withReader { reader ->\n\t\t\t\t\twhile (line = reader.readLine()) {\n\t\t\t\t\t\tdef matcher = line =~ /Copyright (20\\d\\d)-?(20\\d\\d)?/\n\t\t\t\t\t\tif (matcher.count) {\n\t\t\t\t\t\t\tdef beginningYear = matcher[0][1]\n\t\t\t\t\t\t\tif (now != beginningYear && now != matcher[0][2]) {\n\t\t\t\t\t\t\t\tdef years = \"$beginningYear-$now\"\n\t\t\t\t\t\t\t\tdef sourceCode = file.getText('UTF-8')\n\t\t\t\t\t\t\t\tsourceCode = sourceCode.replaceFirst(/20\\d\\d(-20\\d\\d)?/, years)\n\t\t\t\t\t\t\t\tfile.write(sourceCode)\n\t\t\t\t\t\t\t\tprintln \"Copyright updated for file: $file\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcompileKotlin.dependsOn updateCopyrights\n\n\tjar {\n\t\tmanifest {\n\t\t\tattributes(\n\t\t\t\t\t'Implementation-Version': archiveVersion,\n\t\t\t\t\t'Created-By': \"JDK ${System.properties['java.version']} (${System.properties['java.specification.vendor']})\",\n\t\t\t\t\t'Implementation-Title': subproject.name,\n\t\t\t\t\t'Implementation-Vendor-Id': subproject.group,\n\t\t\t\t\t'Implementation-Vendor': 'Broadcom Inc.',\n\t\t\t\t\t'Implementation-URL': linkHomepage,\n\t\t\t\t\t'Automatic-Module-Name': subproject.name.replace('-', '.')  // for Jigsaw\n\t\t\t)\n\t\t}\n\n\t\tfrom(\"${rootProject.projectDir}/src/dist\") {\n\t\t\tinclude 'notice.txt'\n\t\t\tinto 'META-INF'\n\t\t\texpand(copyright: new Date().format('yyyy'), version: project.version)\n\t\t}\n\t\tfrom(\"${rootProject.projectDir}\") {\n\t\t\tinclude 'LICENSE.txt'\n\t\t\tinto 'META-INF'\n\t\t}\n\t}\n\n\ttasks.withType(Javadoc) {\n\t\toptions.addBooleanOption('Xdoclint:syntax', true) // only check syntax with doclint\n\t\toptions.addBooleanOption('Werror', true) // fail build on Javadoc warnings\n\t}\n\n}\n\nproject ('spring-kafka') {\n\tdescription = 'Spring Kafka Support'\n\n\tdependencies {\n\t\tapi 'org.springframework:spring-context'\n\t\tapi 'org.springframework:spring-messaging'\n\t\tapi 'org.springframework:spring-tx'\n\t\tapi (\"org.springframework.retry:spring-retry:$springRetryVersion\") {\n\t\t\texclude group: 'org.springframework'\n\t\t}\n\t\tapi \"org.apache.kafka:kafka-clients:$kafkaVersion\"\n\t\tapi 'io.micrometer:micrometer-observation'\n\t\toptionalApi \"org.apache.kafka:kafka-streams:$kafkaVersion\"\n\t\toptionalApi \"org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$kotlinCoroutinesVersion\"\n\t\toptionalApi 'com.fasterxml.jackson.core:jackson-core'\n\t\toptionalApi 'com.fasterxml.jackson.core:jackson-databind'\n\t\toptionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'\n\t\toptionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'\n\t\toptionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-joda'\n\t\toptionalApi ('com.fasterxml.jackson.module:jackson-module-kotlin') {\n\t\t\texclude group: 'org.jetbrains.kotlin'\n\t\t}\n\n\t\t// Spring Data projection message binding support\n\t\toptionalApi ('org.springframework.data:spring-data-commons') {\n\t\t\texclude group: 'org.springframework'\n\t\t\texclude group: 'io.micrometer'\n\t\t}\n\t\toptionalApi \"com.jayway.jsonpath:json-path:$jaywayJsonPathVersion\"\n\n\t\toptionalApi 'io.projectreactor:reactor-core'\n\t\toptionalApi 'io.projectreactor.kafka:reactor-kafka'\n\t\toptionalApi 'io.micrometer:micrometer-core'\n\t\toptionalApi 'io.micrometer:micrometer-tracing'\n\n\t\ttestImplementation project (':spring-kafka-test')\n\t\ttestImplementation 'io.projectreactor:reactor-test'\n\t\ttestImplementation \"org.mockito:mockito-junit-jupiter:$mockitoVersion\"\n\t\ttestImplementation \"org.hibernate.validator:hibernate-validator:$hibernateValidationVersion\"\n\t\ttestImplementation ('io.micrometer:micrometer-tracing-integration-test') {\n\t\t\texclude group: 'org.mockito'\n\t\t}\n\t}\n}\n\nproject('spring-kafka-bom') {\n\tdescription = 'Spring for Apache Kafka (Bill of Materials)'\n\n\tapply plugin: 'java-platform'\n\tapply from: \"${rootDir}/gradle/publish-maven.gradle\"\n\n\tdependencies {\n\t\tconstraints {\n\t\t\tjavaProjects.sort { \"$it.name\" }.each {\n\t\t\t\tapi it\n\t\t\t}\n\t\t}\n\t}\n\n\tpublishing {\n\t\tpublications {\n\t\t\tmavenJava(MavenPublication) {\n\t\t\t\tfrom components.javaPlatform\n\t\t\t}\n\t\t}\n\t}\n}\n\nproject ('spring-kafka-test') {\n\tdescription = 'Spring Kafka Test Support'\n\n\tdependencies {\n\t\tapi 'org.springframework:spring-context'\n\t\tapi 'org.springframework:spring-test'\n\t\tapi \"org.springframework.retry:spring-retry:$springRetryVersion\"\n\n\t\tapi (\"org.apache.zookeeper:zookeeper:$zookeeperVersion\") {\n\t\t\texclude group: 'org.slf4j', module: 'slf4j-log4j12'\n\t\t\texclude group: 'log4j'\n\t\t}\n\t\tapi \"org.apache.kafka:kafka-clients:$kafkaVersion:test\"\n\t\tapi \"org.apache.kafka:kafka-server:$kafkaVersion\"\n\t\tapi \"org.apache.kafka:kafka-metadata:$kafkaVersion\"\n\t\tapi \"org.apache.kafka:kafka-server-common:$kafkaVersion\"\n\t\tapi \"org.apache.kafka:kafka-server-common:$kafkaVersion:test\"\n\t\tapi \"org.apache.kafka:kafka-streams-test-utils:$kafkaVersion\"\n\t\tapi (\"org.apache.kafka:kafka_$scalaVersion:$kafkaVersion\") {\n\t\t\texclude group: 'commons-logging'\n\t\t}\n\t\tapi (\"org.apache.kafka:kafka_$scalaVersion:$kafkaVersion:test\") {\n\t\t\texclude group: 'commons-logging'\n\t\t}\n\t\tapi 'org.junit.jupiter:junit-jupiter-api'\n\t\tapi 'org.junit.platform:junit-platform-launcher'\n\t\toptionalApi \"org.hamcrest:hamcrest-core:$hamcrestVersion\"\n\t\toptionalApi \"org.mockito:mockito-core:$mockitoVersion\"\n\t\toptionalApi (\"junit:junit:$junit4Version\") {\n\t\t\texclude group: 'org.hamcrest', module: 'hamcrest-core'\n\t\t}\n\t\toptionalApi \"org.apache.logging.log4j:log4j-core:$log4jVersion\"\n\t}\n}\n\nconfigurations {\n\tmicrometerDocs\n}\n\ndependencies {\n\tmicrometerDocs \"io.micrometer:micrometer-docs-generator:$micrometerDocsVersion\"\n}\n\ndef observationInputDir = file('spring-kafka/src/main/java/org/springframework/kafka/support/micrometer').absolutePath\ndef generatedDocsDir = file('build/docs/generated').absolutePath\n\ntasks.register('generateObservabilityDocs', JavaExec) {\n\tmainClass = 'io.micrometer.docs.DocsGeneratorCommand'\n\tinputs.dir(observationInputDir)\n\toutputs.dir(generatedDocsDir)\n\tclasspath configurations.micrometerDocs\n\targs observationInputDir, /.+/, generatedDocsDir\n}\n\ntasks.register('filterMetricsDocsContent', Copy) {\n\tdependsOn generateObservabilityDocs\n\tfrom generatedDocsDir\n\tinclude '_*.adoc'\n\tinto generatedDocsDir\n\trename { filename -> filename.replace '_', '' }\n\tfilter { line -> line.replaceAll('org.springframework.kafka.support.micrometer.', '').replaceAll('^Fully qualified n', 'N') }\n}\n\ndependencies {\n\tjavaProjects.each {\n\t\tjavadoc it\n\t}\n}\n\njavadoc {\n\ttitle = \"${rootProject.description} ${version} API\"\n\toptions {\n\t\tencoding = 'UTF-8'\n\t\tmemberLevel = JavadocMemberLevel.PROTECTED\n\t\tauthor = true\n\t\theader = project.description\n\t\tuse = true\n\t\toverview = 'src/api/overview.html'\n\t\tsplitIndex = true\n\t\tlinks(project.ext.javadocLinks)\n\t\taddBooleanOption('Xdoclint:syntax', true) // only check syntax with doclint\n\t}\n\n\tdestinationDir = file('build/api')\n\tclasspath = files().from { files(javaProjects.collect { it.sourceSets.main.compileClasspath }) }\n}\n\ntasks.register('api') {\n\tgroup = 'Documentation'\n\tdescription = 'Generates aggregated Javadoc API documentation.'\n\tdependsOn javadoc\n}\n\ntasks.register('docsZip', Zip) {\n\tgroup = 'Distribution'\n\tarchiveClassifier = 'docs'\n\tdescription = \"Builds -${archiveClassifier} archive containing api and reference \" +\n\t\t\t\"for deployment at static.spring.io/spring-kafka/docs.\"\n\n\tfrom('src/dist') {\n\t\tinclude 'changelog.txt'\n\t}\n\n\tfrom(javadoc) {\n\t\tinto 'api'\n\t}\n}\n\ntasks.register('distZip', Zip) {\n\tdependsOn 'docsZip'\n\tgroup = 'Distribution'\n\tarchiveClassifier = 'dist'\n\tdescription = \"Builds -${archiveClassifier} archive, containing all jars and docs, \" +\n\t\t\t\"suitable for community download page.\"\n\n\text.baseDir = \"${project.name}-${project.version}\"\n\n\tfrom('src/dist') {\n\t\tinclude 'readme.txt'\n\t\tinclude 'notice.txt'\n\t\tinto \"${baseDir}\"\n\t}\n\n\tfrom(\"$project.rootDir\") {\n\t\tinclude 'LICENSE.txt'\n\t\tinto \"${baseDir}\"\n\t}\n\n\tfrom(zipTree(docsZip.archiveFile)) {\n\t\tinto \"${baseDir}/docs\"\n\t}\n\n\tjavaProjects.each { subproject ->\n\t\tinto (\"${baseDir}/libs\") {\n\t\t\tfrom subproject.jar\n\t\t\tfrom subproject.sourcesJar\n\t\t\tfrom subproject.javadocJar\n\t\t}\n\t}\n\n\tfrom(project(':spring-kafka-bom').generatePomFileForMavenJavaPublication) {\n\t\tinto \"${baseDir}/libs\"\n\t\trename 'pom-default.xml', \"spring-kafka-bom-${project.version}.xml\"\n\t}\n\n}\n\ntasks.register('dist') {\n\tdependsOn assemble\n\tgroup = 'Distribution'\n\tdescription = 'Builds -dist, -docs distribution archives.'\n}\n\napply from: \"${rootProject.projectDir}/gradle/publish-maven.gradle\"\n\npublishing {\n\tpublications {\n\t\tmavenJava(MavenPublication) {\n\t\t\tartifact docsZip\n\t\t\tartifact distZip\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.158203125,
          "content": "version=3.3.2-SNAPSHOT\norg.gradle.jvmargs=-Xmx1536M -Dfile.encoding=UTF-8\norg.gradle.caching=true\norg.gradle.parallel=true\nkotlin.stdlib.default.dependency=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.556640625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.2890625,
          "content": "pluginManagement {\n\trepositories {\n\t\tgradlePluginPortal()\n\t\tmavenCentral()\n\t}\n}\n\nplugins {\n\tid 'io.spring.develocity.conventions' version '0.0.22'\n}\n\nrootProject.name = 'spring-kafka-dist'\n\ninclude 'spring-kafka'\ninclude 'spring-kafka-bom'\ninclude 'spring-kafka-test'\ninclude 'spring-kafka-docs'\n"
        },
        {
          "name": "spring-kafka-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-kafka-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-kafka-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-kafka",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}