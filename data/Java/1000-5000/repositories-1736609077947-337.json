{
  "metadata": {
    "timestamp": 1736609077947,
    "page": 337,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "luontola/retrolambda",
      "stars": 3538,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1796875,
          "content": "*.txt           eol=lf\n*.md            eol=lf\n*.java          eol=lf\n*.properties    eol=lf\n*.rb            eol=lf\n*.xml           eol=lf\n*.html          eol=lf\n*.iml           eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "/target/\n/*/target/\n.classpath\n.settings\n.project\n.DS_Store\n/build.log\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 1.2177734375,
          "content": "\nBuilding Retrolambda\n====================\n\nSet the following environment variables to point to the installation\ndirectories of those particular JDK versions:\n`JAVA8_HOME`, `JAVA7_HOME`, `JAVA6_HOME`, `JAVA5_HOME`\n\nCreate ~/.m2/toolchains.xml and list all the JDKs there as shown in\nhttp://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/jdk.html\n\nCompile the project with Maven using the command:\n\n    mvn clean verify\n\nTo run the tests using Java 6 and Java 5, use the commands:\n\n    mvn clean verify -P java6\n    mvn clean verify -P java5\n\nTo run all combinations of test configurations, use the script:\n\n    ./scripts/build.sh\n\nFinally copy the executable JAR from the `retrolambda/target/` directory.\n\n\nUsing the Docker-based Development Environment\n----------------------------------------------\n\nTo avoid having to install all the Java versions on your computer, there is a\nDocker image for building Retrolambda.\n\nThe image is already in Docker Hub, but it can also be built locally with the\nfollowing command. But first you need to download the JDK 5 and 9 installers\ninto the `dev/installers` directory and install [Rocker](https://github.com/grammarly/rocker).\n\n    make\n\nTo run a shell inside the container:\n\n    make shell\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8193359375,
          "content": "#\n# Makefile to manage this project's development environment.\n#\n\nTAG=luontola/retrolambda-dev\nNAME=wrapping-retrolambda-shell\nDATE=$(shell date +\"%Y-%m-%d\")\n\n# Directory that this Makefile is in\nmkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))\ncurrent_path := $(dir $(mkfile_path))\n\n# Builds the development docker file\ndocker-build:\n\trocker build --var Tag=$(TAG) --var Date=$(DATE) --file dev/Rockerfile\n\n# Clean this docker image\ndocker-clean:\n\t-docker rmi $(TAG)\n\n# Start a development shell\nshell:\n\tmkdir -p ~/.m2\n\tdocker run --rm \\\n\t\t--name=$(NAME) \\\n\t\t-P=true \\\n\t\t-v ~/.m2/repository:/root/.m2/repository \\\n\t\t-v ~/.m2/settings.xml:/root/.m2/settings.xml \\\n\t\t-v $(current_path):/project \\\n\t\t-it $(TAG) /bin/bash\n\n# Attach a new terminal to the already running shell\nshell-attach:\n\tdocker exec -it -u=$(USER) $(NAME) /bin/bash\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.3857421875,
          "content": "\nRetrolambda: Use Lambdas on Java 7\n==================================\n\n[![Retrolambda presentation video](resources/presentation-preview.png)](https://www.youtube.com/watch?v=DUdhfPh9V_s)\n\nJust as there was *Retroweaver* et al. for running Java 5 code with\ngenerics on Java 1.4, *Retrolambda* lets you run Java 8 code with **lambda\nexpressions**, **method references** and **try-with-resources statements**\non Java 7, 6 or 5. It does this by transforming your Java 8 compiled\nbytecode so that it can run on an older Java runtime. After the\ntransformation they are just a bunch of normal .class files, without any\nadditional runtime dependencies.\n[Read more details](#backported-language-features).\n\nThere is also [limited support](#known-limitations) for backporting\n**default methods** and **static methods on interfaces**. This feature is\ndisabled by default.\n\nRetrolambda supports backporting to Java 7, Java 6 and Java 5 runtimes. And\nfor adventurous developers there are [other backporting\ntools](http://en.wikipedia.org/wiki/Java_backporting_tools) that may let\nyou go from Java 5 down to Java 1.4.\n\nNowadays Android Studio has [built-in support for Java 8 features](https://developer.android.com/studio/write/java8-support),\nso that is probably the first thing to try out. Otherwise, Retrolambda\nworks also for Android: Serge Zaitsev has written [an article about\nit](https://zserge.com/posts/android-lambda/) and there is a [Gradle\nplugin](#gradle-plugin) which makes it easy.\n\nRetrolambda does not backport the new Java 8 APIs, but there are other\nprojects that have backported some of them:\n\n* [streamsupport](http://sourceforge.net/projects/streamsupport/) backports the `java.util.stream` API\n* [ThreeTen](http://www.threeten.org/) backports the `java.time` API\n\nAdditionally [Animal Sniffer](http://www.mojohaus.org/animal-sniffer/) and \n[IntelliJ IDEA](https://www.jetbrains.com/idea/) can warn about the use of\nJava 8 APIs.\n\n\nUser Guide\n----------\n\nRetrolambda can be run as a [Maven plugin](#maven-plugin),\n[Gradle plugin](#gradle-plugin) or\n[command line application](#command-line-application). Also have a look at\n[some tips for using Retrolambda effectively](#tips).\n\n\n### Maven Plugin\n\nTo run Retrolambda using Maven, add the following to your pom.xml:\n\n```xml\n<plugin>\n    <groupId>net.orfjackal.retrolambda</groupId>\n    <artifactId>retrolambda-maven-plugin</artifactId>\n    <version>2.5.7</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>process-main</goal>\n                <goal>process-test</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\nSee the [plugin documentation](https://luontola.github.io/retrolambda/retrolambda-maven-plugin/plugin-info.html)\nfor all possible parameters. There is also a usage example in [end-to-end-tests/pom.xml](https://github.com/luontola/retrolambda/blob/master/end-to-end-tests/pom.xml)\n\n\n### Gradle Plugin\n\n[Gradle Retrolamba Plugin](https://github.com/evant/gradle-retrolambda) is developed by Evan Tatarka. See its site for usage instructions.\n\n\n### Command Line Application\n\n[Download](https://oss.sonatype.org/content/groups/public/net/orfjackal/retrolambda/retrolambda/)\nthe latest `retrolambda.jar` from Maven Central.\n\nUse JDK 8 to compile your source code.\n\nRun Retrolambda, using Java 8, on the class files produced by JDK 8. Run\n`java -jar retrolambda.jar` without any additional options to see the\ninstructions (for your convenience they are also shown below).\n\nYour class files should now run on Java 7 or older.\n\n```\nUsage: java -Dretrolambda.inputDir=? -Dretrolambda.classpath=? [-javaagent:retrolambda.jar] -jar retrolambda.jar\n\nRetrolambda takes Java 8 classes and backports lambda expressions and\nsome other language features to work on Java 7, 6 or 5.\nWeb site: https://github.com/luontola/retrolambda\n\nCopyright (c) 2013-2017  Esko Luontola and other Retrolambda contributors\nThis software is released under the Apache License 2.0.\nThe license text is at http://www.apache.org/licenses/LICENSE-2.0\n\nConfigurable system properties:\n\n  retrolambda.bytecodeVersion\n      Major version number for the generated bytecode. For a list, see\n      offset 7 at http://en.wikipedia.org/wiki/Java_class_file#General_layout\n      Default value is 51 (i.e. Java 7)\n\n  retrolambda.defaultMethods\n      Whether to backport default methods and static methods on interfaces.\n      LIMITATIONS: All backported interfaces and all classes which implement\n      them or call their static methods must be backported together,\n      with one execution of Retrolambda.\n      Disabled by default. Enable by setting to \"true\"\n\n  retrolambda.inputDir (required)\n      Input directory from where the original class files are read.\n\n  retrolambda.outputDir\n      Output directory into where the generated class files are written.\n      Defaults to same as retrolambda.inputDir\n\n  retrolambda.classpath (required)\n      Classpath containing the original class files and their dependencies.\n      Uses ; or : as the path separator, see java.io.File#pathSeparatorChar\n\n  retrolambda.classpathFile (alternative)\n      File listing the classpath entries.\n      Alternative to retrolambda.classpath for avoiding the command line\n      length limit. The file must list one file per line with UTF-8 encoding.\n\n  retrolambda.includedFiles\n      List of files to process, instead of processing all files.\n      This is useful for a build tool to support incremental compilation.\n      Uses ; or : as the path separator, see java.io.File#pathSeparatorChar\n\n  retrolambda.includedFilesFile (alternative)\n      File listing the files to process, instead of processing all files.\n      Alternative to retrolambda.includedFiles for avoiding the command line\n      length limit. The file must list one file per line with UTF-8 encoding.\n\n  retrolambda.javacHacks\n      Attempts to fix javac bugs (type-annotation emission for local variables).\n      Disabled by default. Enable by setting to \"true\"\n\n  retrolambda.quiet\n      Reduces the amount of logging.\n      Disabled by default. Enable by setting to \"true\"\n\nIf the Java agent is used, then Retrolambda will use it to capture the\nlambda classes generated by Java. Otherwise Retrolambda will hook into\nJava's internal lambda dumping API, which is more susceptible to suddenly\nstopping to work between Java releases.\n```\n\n\n### Tips\n\nBe sure to run comprehensive tests on your target JVM version (e.g. Java\n7), in case the code accidentally uses Java 8 APIs or language features\nthat Retrolambda doesn't backport.\n\nDuring development, inside an IDE, it's the easiest to use Java 8, without\nRetrolamba, to compile and run tests. But in your continuous integration\nand release builds you should run all tests using the target Java version.\nFor example, you can configure Maven Surefire Plugin to run tests\n[using a different JVM](http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#jvm).\n\nI recommend setting up environment variables JAVA8_HOME, JAVA7_HOME etc. and\nreferring to those variables in the build configuration, instead of relying on\nwhat happens to be the default Java version in JAVA_HOME.\n\nYou will need Java 8 for compiling and also for generating Javadocs.\nJDK 7's Javadoc tool will fail for some valid Java 8 code.\n\n\nBackported Language Features\n----------------------------\n\n**Lambda expressions** are backported by converting them to anonymous inner\nclasses. This includes the optimization of using a singleton instance for\nstateless lambda expressions to avoid repeated object allocation.\n\n**Method references** are basically just syntax sugar for lambda\nexpressions and they are backported in the same way.\n\n**Try-with-resources statements** are backported by removing calls to\n`Throwable.addSuppressed` if the target bytecode version is below Java 7.\nIf you would like the suppressed exceptions to be logged instead of\nswallowed, please create a feature request and we'll make it configurable.\n\n**Objects.requireNonNull calls** are replaced with calls to `Object.getClass`\nif the target bytecode version is below Java 7. The synthetic null checks\ngenerated by JDK 9 use `Objects.requireNonNull`, whereas earlier JDK versions\nused `Object.getClass`.\n\n\n*Optionally also:*\n\n**Default methods** are backported by copying the default methods to a\ncompanion class (interface name + \"$\") as static methods, replacing the\ndefault methods in the interface with abstract methods, and by adding the\nnecessary method implementations to all classes which implement that\ninterface.\n\n**Static methods on interfaces** are backported by moving the static\nmethods to a companion class (interface name + \"$\"), and by changing all\nmethods calls to call the new method location.<sup>[1]</sup>\n\n<sup>[1]</sup> *The static methods are moved to a companion class even with\ndefault method support disabled, because some of them may be lambda\nimplementation methods, but the method calls to static methods are not\nupdated. This may cause weird error messages if static methods on\ninterfaces are accidentally used without enabling default method support.*\n\n\nKnown Limitations\n-----------------\n\nDoes not backport Java 8 APIs.\n\nBackporting default methods and static methods on interfaces requires all\nbackported interfaces and all classes which implement them or call their\nstatic methods to be backported together, with one execution of\nRetrolambda. In other words, you must *always do a clean build*. Also,\nbackporting default methods won't work across module or dependency\nboundaries.\n\nMay break if a future JDK 8 build stops generating a new class for each\n`invokedynamic` call. Retrolambda works so that it captures the bytecode\nthat `java.lang.invoke.LambdaMetafactory` generates dynamically, so\noptimizations to that mechanism may break Retrolambda.\n\nJava 9 and higher are not supported; just build your project with Java 8. The\nnew JDKs mostly just add new APIs, which you anyways wouldn't be able to use on\non older JREs. To backport new language features, create a new tool for it\nyourself or pay someone to do it, if you think it's worth the effort. ;)\n\n\nVersion History\n---------------\n\n### Retrolambda 2.5.7 (2020-01-23)\n\n- Improved error messages for Java 12 and newer, which have been confirmed\n  to not work without the Java agent\n  ([Issue #154](https://github.com/luontola/retrolambda/issues/154))\n- Upgraded the ASM library to improve compatibility with Java 13\n  ([Issue #154](https://github.com/luontola/retrolambda/issues/154))\n\n### Retrolambda 2.5.6 (2018-11-30)\n\n- Fix a `NullPointerException` crash in the Maven plugin on Java 10 & 11\n- Fix Java agent to work on Java 9+\n  ([Pull request #148](https://github.com/luontola/retrolambda/pull/148))\n\n### Retrolambda 2.5.5 (2018-08-14)\n\n- Fix an `ArrayIndexOutOfBoundsException` crash in ASM due to incorrect bytecode \n  produced by `javac` under some circumstances. See [JDK-8073658](https://bugs.openjdk.java.net/browse/JDK-8073658)\n  and [ASM-317845](https://gitlab.ow2.org/asm/asm/issues/317845).\n  Enable the `javacHacks` parameter for a workaround to this issue.\n  ([Pull request #143](https://github.com/luontola/retrolambda/pull/143))\n\n### Retrolambda 2.5.4 (2018-05-30)\n\n- Fix regression in Maven plugin; use classpathFile\n  ([Issue #141](https://github.com/luontola/retrolambda/issues/141))\n\n### Retrolambda 2.5.3 (2017-12-28)\n\n- Copy the `SourceFile` attribute of the enclosing class into the lambda class\n  ([Issue #131](https://github.com/luontola/retrolambda/issues/131))\n\n### Retrolambda 2.5.2 (2017-12-28)\n\n- Fixed running Retrolambda under Java 9\n  ([Issue #137](https://github.com/luontola/retrolambda/issues/137))\n- Consider `module-info.class` as a resource and do not try backporting it\n  ([Issue #122](https://github.com/luontola/retrolambda/issues/122))\n\n### Retrolambda 2.5.1 (2017-02-23)\n\n- Fixed the enclosing method attribute of anonymous classes declared inside\n  lambda expressions\n  ([Issue #121](https://github.com/luontola/retrolambda/issues/121))\n\n### Retrolambda 2.5.0 (2017-01-22)\n\n- Fixed lambda expressions in subclasses accidentally overriding lambda\n  expressions in their parent. If you are using version 2.2.0 or greater,\n  it is strongly recommended to upgrade to this version.\n  ([Issue #109](https://github.com/luontola/retrolambda/issues/109))\n\n### Retrolambda 2.4.0 (2017-01-11)\n\n- Added an option to reduce the amount of logging\n  ([Issue #103](https://github.com/luontola/retrolambda/issues/103))\n- Removes `java/lang/invoke/LambdaForm$Hidden` annotations from the generated \n  lambda classes to avoid issues with ProGuard \n  ([Pull request #118](https://github.com/luontola/retrolambda/pull/118))\n- Fixed backporting classes in the default package\n  ([Issue #105](https://github.com/luontola/retrolambda/issues/105))\n- Fixed backporting `java.lang.Object` itself\n  ([Pull request #113](https://github.com/luontola/retrolambda/pull/113))\n\n### Retrolambda 2.3.0 (2016-04-30)\n\n- Optimize generated code to reduce method count\n  ([Issue #81](https://github.com/luontola/retrolambda/issues/81))\n    - Alter when accessor methods are generated\n      ([Pull request #84](https://github.com/luontola/retrolambda/pull/84))\n    - Remove NEW, DUP instructions when changing NEWINVOKESPECIAL to INVOKESTATIC\n      ([Pull request #85](https://github.com/luontola/retrolambda/pull/85))\n    - Skip access method when lambda body method can be promoted\n      ([Pull request #86](https://github.com/luontola/retrolambda/pull/86))\n- Fix method reference to protected method in base class in other package\n  failing with IllegalAccessError\n  ([Issue #89](https://github.com/luontola/retrolambda/issues/89))\n\n### Retrolambda 2.2.0 (2016-04-29)\n\n- Backports calls to `Objects.requireNonNull`, improving JDK 9 support\n  ([Issue #75](https://github.com/luontola/retrolambda/issues/75))\n- Optimize generated code to reduce method count\n  ([Issue #81](https://github.com/luontola/retrolambda/issues/81))\n    - Detect and omit the JVM's lambda factory method\n      ([Pull request #82](https://github.com/luontola/retrolambda/pull/82))\n\n\n### Retrolambda 2.1.0 (2015-12-19)\n\n- Added the `-Dretrolambda.classpathFile` parameter to avoid\n  the command line length limit\n  ([Issue #70](https://github.com/luontola/retrolambda/issues/70))\n- Added the `-Dretrolambda.includedFilesFile` parameter to avoid\n  the command line length limit\n  ([Pull request #74](https://github.com/luontola/retrolambda/pull/74))\n- Made it easier to invoke Retrolambda as a library. Made `Config`\n  an interface and fixed an assumption of using the default file system\n  ([Pull request #71](https://github.com/luontola/retrolambda/pull/71))\n- Don't create a companion class when an interface has just\n  a static initialization block because of constant fields\n  ([Issue #66](https://github.com/luontola/retrolambda/issues/66))\n- Improved error messages: report the name of the class or lambda method which\n  crashed Retrolambda\n  ([Issue #69](https://github.com/luontola/retrolambda/issues/69))\n\n### Retrolambda 2.0.6 (2015-09-06)\n\n- Fixed method references to constructors causing VerifyError on Android\n  ([Issue #67](https://github.com/luontola/retrolambda/issues/67))\n\n### Retrolambda 2.0.5 (2015-07-19)\n\n- Support for lambdas with marker interfaces\n  ([Issue #62](https://github.com/luontola/retrolambda/issues/62))\n\n### Retrolambda 2.0.4 (2015-07-08)\n\n- Fixed a compile error when calling default methods from another module\n  ([Issue #56](https://github.com/luontola/retrolambda/issues/56))\n- Fixed method references to constructors of the current class\n  ([Issue #60](https://github.com/luontola/retrolambda/issues/60))\n- Removes bytecode references to `java.lang.invoke.MethodHandles.Lookup` on\n  Java 6 and older\n  ([Issue #61](https://github.com/luontola/retrolambda/issues/61))\n- Copies non-class files from input to output directory\n  ([Issue #54](https://github.com/luontola/retrolambda/issues/54))\n\n### Retrolambda 2.0.3 (2015-06-07)\n\n- Fixed Retrolambda generating stack map frames for Java 5 bytecode,\n  causing some bytecode tools to fail\n  ([Issue #55](https://github.com/luontola/retrolambda/issues/55))\n\n### Retrolambda 2.0.2 (2015-04-14)\n\n- Fixed a hack which caused lambdas in interfaces to be backported twice,\n  possibly producing broken method calls in the bytecode\n  ([Issue #48](https://github.com/luontola/retrolambda/issues/48))\n- Fixed the handling of non-static lambda implementation methods in\n  interfaces, i.e. lambdas which capture `this`\n  ([Issue #48](https://github.com/luontola/retrolambda/issues/48))\n- Removes generic method signatures from the default method implementation\n  methods which are placed in the interface's companion class, to avoid\n  them getting out of sync with their erased method descriptors\n  ([Issue #48](https://github.com/luontola/retrolambda/issues/48))\n\n### Retrolambda 2.0.1 (2015-04-06)\n\n- Fixed not backporting lambda expressions in default methods and static\n  methods on interfaces\n  ([Issue #48](https://github.com/luontola/retrolambda/issues/48))\n\n### Retrolambda 2.0.0 (2015-03-28)\n\n- Backports default methods and static methods on interfaces\n  ([Issue #31](https://github.com/luontola/retrolambda/issues/31))\n\n### Retrolambda 1.8.1 (2015-01-06)\n\n- Backports lambda expressions in an interface's constant initializer\n  ([Issue #42](https://github.com/luontola/retrolambda/issues/42))\n\n### Retrolambda 1.8.0 (2014-11-16)\n\n- Backports try-with-resources statements to Java 6 and older by removing\n  calls to `Throwable.addSuppressed`\n  ([Issue #38](https://github.com/luontola/retrolambda/issues/38))\n\n### Retrolambda 1.7.0 (2014-10-21)\n\n- Support for serializable lambdas\n  ([Issue #35](https://github.com/luontola/retrolambda/issues/35))\n\n### Retrolambda 1.6.2 (2014-10-03)\n\n- Fixed a crash when trying to backport Android classes\n  ([Issue #34](https://github.com/luontola/retrolambda/issues/34))\n\n### Retrolambda 1.6.1 (2014-08-25)\n\n- Fixed a crash when trying backport classes which are nominally the same\n  as those included in the JRE, but which have different bytecode\n  ([Issue #29](https://github.com/luontola/retrolambda/issues/29))\n\n### Retrolambda 1.6.0 (2014-08-20)\n\n- Does not anymore require the use of a Java agent\n  ([Issue #27](https://github.com/luontola/retrolambda/issues/27))\n- Maven plugin: by default run Retrolambda in the same process as Maven,\n  making it a bit faster. If Maven is not running under Java 8, then will\n  fall back to forking the process and using the Java agent mechanism\n\n### Retrolambda 1.5.0 (2014-07-19)\n\n- Maven plugin: use the [JDK from Maven Toolchains](http://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/jdk.html)\n  if available. The `java8home` configuration parameter overrides this\n  ([Issue #24](https://github.com/luontola/retrolambda/pull/24))\n\n### Retrolambda 1.4.0 (2014-07-04)\n\n- Added an optional `-Dretrolambda.includedFiles` parameter to support the\n  incremental compilers of build tools\n  ([Issue #23](https://github.com/luontola/retrolambda/pull/23))\n- Decides which lambda classes to save based on the current class being\n  processed, instead of the class loader that loaded the lambda class\n  ([Issue #21](https://github.com/luontola/retrolambda/issues/21))\n\n### Retrolambda 1.3.0 (2014-06-04)\n\n- Maven plugin: made the input and output directories configurable\n  ([Issue #20](https://github.com/luontola/retrolambda/issues/20))\n- Maven plugin: by default use the current JRE for running Retrolambda.\n  For the old behavior, add `<java8home>${env.JAVA8_HOME}</java8home>`\n  to the plugin configuration\n\n### Retrolambda 1.2.3 (2014-05-19)\n\n- Android: Fixed NoSuchMethodError when calling a private method to which\n  there is a method reference\n  ([Issue #18](https://github.com/luontola/retrolambda/issues/18))\n- Fixed the possibility of accidentally overriding private methods to which\n  there is method reference\n  ([Issue #19](https://github.com/luontola/retrolambda/issues/19))\n\n### Retrolambda 1.2.2 (2014-05-15)\n\n- Fixed method references to private methods; will now make them\n  package-private the same way as lambda implementation methods\n  ([Issue #17](https://github.com/luontola/retrolambda/issues/17))\n\n### Retrolambda 1.2.1 (2014-05-04)\n\n- Fixed the Retrolambda Maven plugin not using the project's classpath\n  ([Issue #16](https://github.com/luontola/retrolambda/issues/16))\n- Maven plugin: save `retrolambda.jar` under `target/retrolambda/`\n- Suppress false warning about class initializer methods on interfaces\n\n### Retrolambda 1.2.0 (2014-05-02)\n\n- Maven plugin for running Retrolambda\n  (thanks, [Dave Moten](https://github.com/davidmoten))\n\n### Retrolambda 1.1.4 (2014-03-29)\n\n- Removes from interfaces bridge methods which were generated by JDK 8 e.g.\n  when an interface overrides a method and refines its return type\n  ([Issue #13](https://github.com/luontola/retrolambda/issues/13))\n\n### Retrolambda 1.1.3 (2014-03-25)\n\n- Fixed incompatibility with the Eclipse JDT compiler, version Kepler SR2\n  with the Java 8 support patch 1.0.0.v20140317-1959\n  ([Issue #12](https://github.com/luontola/retrolambda/issues/12))\n\n### Retrolambda 1.1.2 (2014-01-08)\n\n- Updated to work with JDK 8 Early Access Build b121 (2013-12-19)\n  ([Issue #3](https://github.com/luontola/retrolambda/issues/3))\n\n### Retrolambda 1.1.1 (2013-11-27)\n\n- Show help if the `-javaagent` parameter is missing\n  ([Issue #2](https://github.com/luontola/retrolambda/issues/2))\n\n### Retrolambda 1.1.0 (2013-07-25)\n\n- Create only one instance of lambdas which do not capture arguments; i.e.\n  the same optimization as what JDK 8 does\n- Start the sequence number of lambda classes from one (e.g.\n  `com.example.Foo$$Lambda$1`) for each enclosing class\n\n### Retrolambda 1.0.0 (2013-07-23)\n\n- Backports lambda expressions and method references to Java 7 and older\n- Tested to work with JDK 8 Early Access Build b99 (2013-07-19)\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "end-to-end-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "parent",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 1.173828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>net.orfjackal.retrolambda</groupId>\n        <artifactId>parent</artifactId>\n        <version>2.5.8-SNAPSHOT</version>\n        <relativePath>parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>project</artifactId>\n    <packaging>pom</packaging>\n\n    <name>Retrolambda</name>\n\n    <modules>\n        <module>parent</module>\n        <module>retrolambda</module>\n        <module>retrolambda-api</module>\n        <module>retrolambda-maven-plugin</module>\n        <module>end-to-end-tests</module>\n    </modules>\n\n    <build>\n        <plugins>\n\n            <!-- Don't deploy the project's aggregate module to Maven Central -->\n\n            <plugin>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n\n        </plugins>\n    </build>\n\n</project>\n"
        },
        {
          "name": "project.iml",
          "type": "blob",
          "size": 1.2216796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_1_8\">\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/parent/target/classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/parent/target/test-classes\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.12\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-library:1.3\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-core:1.3\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-core:1.10.19\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.objenesis:objenesis:2.1\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "retrolambda-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "retrolambda-maven-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "retrolambda",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}