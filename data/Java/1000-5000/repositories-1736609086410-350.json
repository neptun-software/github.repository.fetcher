{
  "metadata": {
    "timestamp": 1736609086410,
    "page": 350,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KingJA/LoadSir",
      "stars": 3490,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1220703125,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n/.idea\n"
        },
        {
          "name": "README-en.md",
          "type": "blob",
          "size": 10.9765625,
          "content": "![](imgs/LoadSir.jpg)\n\nEnglish | [中文](README-cn.md)\n\nWhat's LoadSir?\n---\n\n[![](https://img.shields.io/badge/%20%20Android%20Arsenal%20%20-%20%20LoadSir%20%20-blue.svg)](https://android-arsenal.com/details/1/6227)\n[![](https://img.shields.io/badge/%20%20aar%20size-26KB-green.svg)](https://bintray.com/kingja/maven/loadsir#files/com%2Fkingja%2Floadsir%2Floadsir%2F1.2.0)\n:point_right:[![](https://img.shields.io/github/release/KingJA/LoadSir.svg)](https://github.com/KingJA/LoadSir/releases):point_left:\n\n\n***LoadSir*** is a lightweight, good expandable Android library used for displaying different pages like **loading**,\n**error**, **empty**, **timeout** or even your **custom page** when you load data from database or a REST service. LoadSir is very different from\nother similar libraries. I mean... ***better***.\n\nPreview - samples\n---\n| **in [Activity](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/NormalActivity.java)**|**in [View](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/ViewTargetActivity.java)**|**in [Fragment](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/NormalFragment.java)**|\n|:---:|:----:|:----:|\n|![](imgs/normal_activity.gif)|![](imgs/view_activity.gif)|![](imgs/single_fragment.gif)|\n\n| **[Placeholder](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/PlaceholderActivity.java)**|**[Multi-Fragment](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/MultiFragmentActivity.java)**|**[ViewPager+Fragment](https://github.com/KingJA/LoadSir/blob/master/app/src/main/java/sample/kingja/loadsir/target/MultiFragmentWithViewPagerActivity.java)**|\n|:---:|:----:|:----:|\n|![](imgs/placeholder_activity.gif)|![](imgs/muitl_fragment.gif)|![](imgs/viewpage_fragment.gif)|\n\nDownload Demo\n---\n![](imgs/qcode_1.3.8.png)\n###### (password：9517)\n\nFeature\n---\n* :star: support for Activity, Fragment, Fragment(v4), View\n* :star: support for Multi-Fragment, Fragment+ViewPager\n* :star: convert http result structure into a Callback\n* :star: no need to modify the layout\n* :star: only load one layout once\n* :star: no need to set enum or constant for status code\n* :star: set your own onClick logic in custom Callback\n* :star: no preloaded load page\n* :star: support for keeping the toolbar, titleview\n* allow to customize your own load page\n* set the retry onClick listener `OnReloadListener`\n* set the default load page\n* add multi load pages\n* thread-safety\n\nHow does LoadSir work?\n---\n<div align=\"center\"><img src=\"imgs/LoadSir_flow.jpg\"/></div>\n\n🚀 Getting started\n---\n\nLoadSir only needs 3 steps: **1. Config** -> **2. Register** -> **3. Display**\n\n### Download\n\n```groovy\ncompile 'com.kingja.loadsir:loadsir:1.3.8'\n```\n\n### Step 1: Config\nThere are two ways to set the config. Add your custom pages and set the default page.\n\n* ###### Global Config\nSet config with singleton pattern, you can do it in your Application. No matter where you do this job, you could get the\nunique LoadSir everywhere.\n\n```java\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        LoadSir.beginBuilder()\n                .addCallback(new ErrorCallback())\n                .addCallback(new EmptyCallback())\n                .addCallback(new LoadingCallback())\n                .addCallback(new TimeoutCallback())\n                .addCallback(new CustomCallback())\n                .setDefaultCallback(LoadingCallback.class)\n                .commit();\n    }\n}\n```\n* ###### Single Config\nIf you want to create another specific LoadSir, you can set config like this.\n\n```java\nLoadSir loadSir = new LoadSir.Builder()\n                .addCallback(new LoadingCallback())\n                .addCallback(new EmptyCallback())\n                .addCallback(new ErrorCallback())\n                .build();\nloadService = loadSir.register(this, new Callback.OnReloadListener() {\n    @Override\n    public void onReload(View v) {\n        // retry logic\n    }\n});\n```\n### Step 2: Register\n\nTell LoadSir which \"layout\" you want to be replaced with LoadLayout.\n\n* ###### Register an Activity\nThe registered `Activity` will be handled by LoadSir.\n```java\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_content);\n    \n    // You can change the callback on sub thread directly.\n    LoadService loadService = LoadSir.getDefault().register(this, new Callback.OnReloadListener() {\n        @Override\n        public void onReload(View v) {\n            // your retry logic \n        }\n    });\n}\n```\n\n* ###### Register a View\nThe registered `ImageView` will be handled by LoadSir.\n```java\nImageView imageView = (ImageView) findViewById(R.id.iv_img);\nLoadSir loadSir = new LoadSir.Builder()\n        .addCallback(new TimeoutCallback())\n        .setDefaultCallback(LoadingCallback.class)\n        .build();\nloadService = loadSir.register(imageView, new Callback.OnReloadListener() {\n    @Override\n    public void onReload(View v) {\n        loadService.showCallback(LoadingCallback.class);\n        // your retry logic\n    }\n});\n```\n\n* ###### Register a Fragment\nThe registered `Fragment` will be handled by LoadSir.\nUse it in Fragment is a bit different from the other two, follow the template code.\n```java\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    //step 1：obtain root view\n    rootView = View.inflate(getActivity(), R.layout.fragment_a_content, null);\n    \n    //step 2：obtain the LoadService\n    LoadService loadService = LoadSir.getDefault().register(rootView, new Callback.OnReloadListener() {\n        @Override\n        public void onReload(View v) {\n            // your retry logic\n        }\n    });\n    \n    //step 3：return the LoadLayout from LoadService\n    return loadService.getLoadLayout();\n}\n```\n\n### Step 3: Display\nWhat to show after fetching data (from REST service or database...)?\n* ###### Direct Display\n```java\nprotected void loadFromNet() {\n    // do net job/load data...\n\n    // callback after finish\n    loadService.showSuccess(); // successful case -> show the data, eg RecyclerView,...\n    --- OR ---\n    loadService.showCallback(EmptyCallback.class); // do/show something else\n}\n```\n**Info:** `showSuccess()` calls the `SuccessCallback` to \"hide\" LoadSir and show the content.\n\n* ###### Convertor Display (recommended)\nIf you want LoadSir to do callback automatically, you can pass a Convertor when you register.\n\n```java\nLoadService loadService = LoadSir.getDefault().register(this, new Callback.OnReloadListener() {\n    @Override\n    public void onReload(View v) {\n         // retry logic\n    }}, new Convertor<HttpResult>() {\n    @Override\n    public Class<? extends Callback> map(HttpResult httpResult) {\n        Class<? extends Callback> resultCode = SuccessCallback.class;\n        switch (httpResult.getResultCode()) {\n            case SUCCESS_CODE:\n                if (httpResult.getData().size() == 0) {\n                    resultCode = EmptyCallback.class;\n                }else{\n                    resultCode = SuccessCallback.class;\n                }\n                break;\n            case ERROR_CODE:\n                resultCode = ErrorCallback.class;\n                break;\n        }\n        return resultCode;\n    }\n});\n```\nPass a HttpResult, now you start up a robot LoadSir.\n```java\nloadService.showWithConvertor(httpResult);\n```\n\n### Customize\nYou can customize your own load page like loading, empty, error, timeout, etc. Provide the layout and fill the retry\nlogic (if necessarily).\n\n```java\npublic class CustomCallback extends Callback {\n\n    @Override\n    protected int onCreateView() {\n        return R.layout.layout_custom;\n    }\n\n    @Override\n    protected boolean onReloadEvent(final Context context, View view) {\n        Toast.makeText(context.getApplicationContext(), \"Hello buddy! :p\", Toast.LENGTH_SHORT).show();\n        (view.findViewById(R.id.iv_gift)).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(context.getApplicationContext(), \"It's your gift! :p\", Toast.LENGTH_SHORT).show();\n            }\n        });\n        return true;\n    }\n\n    //set visibility of SuccessView when callback is attach to Layout,true:visible, false: invisible\n    @Override\n    public boolean getSuccessVisible() {\n        return super.getSuccessVisible();\n    }\n\n    //Called when the view of Callback is attached to LoadLayout.\n    @Override\n    public void onAttach(Context context, View view) {\n        super.onAttach(context, view);\n    }\n\n    //Called when the view of Callback was detached from LoadLayout.\n    @Override\n    public void onDetach() {\n        super.onDetach(context, view);\n    }\n\n}\n```\n\n### Modify Callback Dynamically\nAccess the view of a `Callback`.\n```java\nloadService = LoadSir.getDefault().register(...);\nloadService.setCallBack(EmptyCallback.class, new Transport() {\n   @Override\n   public void order(Context context, View view) {\n       TextView mTvEmpty = (TextView) view.findViewById(R.id.tv_empty);\n       mTvEmpty.setText(\"Fine, no data. You must fill it!\");\n   }\n});\n```\n### Default Callback in LoadSir\n\n```java\nProgressCallback loadingCallback = new ProgressCallback.Builder()\n        .setTitle(\"Loading\", R.style.Hint_Title)\n        .build();\n\nHintCallback hintCallback = new HintCallback.Builder()\n        .setTitle(\"Error\", R.style.Hint_Title)\n        .setSubTitle(\"Sorry, buddy, I will try it again.\")\n        .setHintImg(R.drawable.error)\n        .build();\n\nLoadSir loadSir = new LoadSir.Builder()\n        .addCallback(loadingCallback)\n        .addCallback(hintCallback)\n        .setDefaultCallback(ProgressCallback.class)\n        .build();\n```\n\n\n\n\n\n### :bulb: About placeholder effect\nThe effect of placeholder is just like the library [ShimmerRecyclerView](https://github.com/sharish/ShimmerRecyclerView)\nworks. LoadSir do the similar job only through a PlaceHolderCallback, just a custom ***Callback***. That feeling was\namazing. :ghost:\n\n## Docs\n* :point_right: [FAQ](docs/FAQ.md)\n* 📌 [Version changelog](docs/changelog.md)\n* [Best Practice](docs/BestPractice.md)\n* [What will the next version include?](docs/NextVersion.md)\n\n## ProGuard\n\n```xml\n-dontwarn com.kingja.loadsir.**\n-keep class com.kingja.loadsir.** {*;}\n```\n## Contact Me\nAny questions: Welcome to contact me.\n* Email: kingjavip@gmail.com\n\n## License\n\n    Copyright 2017 KingJA\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.1884765625,
          "content": "![](imgs/LoadSir.jpg)\n\n中文 | [English](README-en.md)\n\nLoadSir\n---\n\n[![](https://img.shields.io/badge/%20%20Android%20Arsenal%20%20-%20%20LoadSir%20%20-blue.svg)](https://android-arsenal.com/details/1/6227)\n[![](https://img.shields.io/badge/%20%20aar%20size-26KB-green.svg)](https://bintray.com/kingja/maven/loadsir#files/com%2Fkingja%2Floadsir%2Floadsir%2F1.2.0)\n:point_right:[![](https://img.shields.io/github/release/KingJA/LoadSir.svg)](https://github.com/KingJA/LoadSir/releases):point_left:\n\n`LoadSir`是一个高效易用，低碳环保，扩展性良好的加载反馈页管理框架，在加载网络或其他数据时候，根据需求切换状态页面，\n可添加自定义状态页面，如加载中，加载失败，无数据，网络超时，如占位图，登录失效等常用页面。可配合网络加载框架，结合返回\n状态码，错误码，数据进行状态页自动切换，封装使用效果更佳。\n\n使用场景\n---\n| **in Activity**|**in View**|**in Fragment**|\n|:---:|:----:|:----:|\n|![](imgs/normal_activity.gif)|![](imgs/view_activity.gif)|![](imgs/single_fragment.gif)|\n\n| **Placeholder**|**Muitl-Fragment**|**ViewPage+Fragment**|\n|:---:|:----:|:----:|\n|![](imgs/placeholder_activity.gif)|![](imgs/muitl_fragment.gif)|![](imgs/viewpage_fragment.gif)|\n\n下载 Demo\n---\n![](imgs/qcode_1.3.8.png)\n###### (密码：9517)\n\n流程图\n---\n<div align=\"center\"><img src=\"imgs/LoadSir_flow.jpg\"/></div>\n\nLoadSir的功能及特点\n---\n* :star:支持Activity，Fragment，Fragment(v4)，View状态回调\n* :star:适配多个Fragment切换，及Fragment+ViewPager切换，不会布局叠加或者布局错乱\n* :star:利用泛型转换输入信号和输出状态，可根据网络返回体的状态码或者数据返回自动适配状态页，实现全局自动状态切换\n* :star:无需修改布局文件\n* :star:只加载唯一一个状态视图，不会预加载全部视图\n* :star:不需要设置枚举或者常量状态值，直接用状态页类类型(xxx.class)作为状态码\n* :star:可对单个状态页单独设置点击事件，根据返回boolean值覆盖或者结合OnReloadListener使用，如网络错误可跳转设置页\n* :star:无预设页面，低耦合，开发者随心配置\n* :star:可保留标题栏(Toolbar,titile view等)\n* 可设置重新加载点击事件(OnReloadListener)\n* 可自定义状态页(继承Callback类)\n* 可在子线程直接切换状态\n* 可设置初始状态页(常用进度页作为初始状态)\n* 可扩展状态页面，在配置中添加自定义状态页\n* 可全局单例配置，也可以单独配置\n\n\n\n开始使用LoadSir\n---\n\nLoadSir的使用，只需要简单的三步\n\n### 添加依赖\n\n```groovy\ncompile 'com.kingja.loadsir:loadsir:1.3.8'\n```\n\n### 第一步：配置\n\n###### 全局配置方式\n全局配置方式，使用的是单例模式，即获取的配置都是一样的。可在Application中配置，添加状态页，设置默认状态页\n\n```java\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        LoadSir.beginBuilder()\n                .addCallback(new ErrorCallback())//添加各种状态页\n                .addCallback(new EmptyCallback())\n                .addCallback(new LoadingCallback())\n                .addCallback(new TimeoutCallback())\n                .addCallback(new CustomCallback())\n                .setDefaultCallback(LoadingCallback.class)//设置默认状态页\n                .commit();\n    }\n}\n```\n###### 单独配置方式\n如果你即想保留全局配置，又想在某个特殊页面加点不同的配置，可采用该方式。\n\n```java\nLoadSir loadSir = new LoadSir.Builder()\n                .addCallback(new LoadingCallback())\n                .addCallback(new EmptyCallback())\n                .addCallback(new ErrorCallback())\n                .build();\n        loadService = loadSir.register(this, new Callback.OnReloadListener() {\n            @Override\n            public void onReload(View v) {\n                // 重新加载逻辑\n            }\n        });\n```\n### 第二步：注册\n\n###### 在Activity中使用\n\n```java\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_content);\n    // Your can change the callback on sub thread directly.\n    LoadService loadService = LoadSir.getDefault().register(this, new Callback.OnReloadListener() {\n        @Override\n        public void onReload(View v) {\n            // 重新加载逻辑\n        }\n    });\n}}\n```\n\n###### 在View 中使用\n```java\nImageView imageView = (ImageView) findViewById(R.id.iv_img);\nLoadSir loadSir = new LoadSir.Builder()\n        .addCallback(new TimeoutCallback())\n        .setDefaultCallback(LoadingCallback.class)\n        .build();\nloadService = loadSir.register(imageView, new Callback.OnReloadListener() {\n    @Override\n    public void onReload(View v) {\n        loadService.showCallback(LoadingCallback.class);\n        // 重新加载逻辑\n    }\n});\nPs:\n[1]要注册RelativeLayout或ConstraintLayout的子View，如果该子View被其它子View约束，建议在子View外层再包一层布局，参考\nacitivy_view.xm和activity_constraintlayout.xml\n```\n###### 在Fragment 中使用\n由于Fragment添加到Activitiy方式多样，比较特别，所以在Fragment注册方式不同于上面两种，大家先看模板代码：\n```java\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle\n        savedInstanceState) {\n    //第一步：获取布局View\n    rootView = View.inflate(getActivity(), R.layout.fragment_a_content, null);\n    //第二步：注册布局View\n    LoadService loadService = LoadSir.getDefault().register(rootView, new Callback.OnReloadListener() {\n        @Override\n        public void onReload(View v) {\n            // 重新加载逻辑\n        }\n    });\n    //第三步：返回LoadSir生成的LoadLayout\n    return loadService.getLoadLayout();\n}\n```\n\n### 第三步： 回调\n\n###### 直接回调\n```java\nprotected void loadNet() {\n        // 进行网络访问...\n        // 进行回调\n        loadService.showSuccess();//成功回调\n        loadService.showCallback(EmptyCallback.class);//其他回调\n    }\n```\n###### 转换器回调 (推荐使用)\n如果你不想再每次回调都要手动进行的话，可以选择注册的时候加入转换器，可根据返回的数据，适配对应的状态页。\n\n```java\nLoadService loadService = LoadSir.getDefault().register(this, new Callback.OnReloadListener() {\n    @Override\n    public void onReload(View v) {\n            // 重新加载逻辑\n    }}, new Convertor<HttpResult>() {\n    @Override\n    public Class<? extends Callback> map(HttpResult httpResult) {\n        Class<? extends Callback> resultCode = SuccessCallback.class;\n        switch (httpResult.getResultCode()) {\n            case SUCCESS_CODE://成功回调\n                if (httpResult.getData().size() == 0) {\n                    resultCode = EmptyCallback.class;\n                }else{\n                    resultCode = SuccessCallback.class;\n                }\n                break;\n            case ERROR_CODE:\n                resultCode = ErrorCallback.class;\n                break;\n        }\n        return resultCode;\n    }\n});\n```\n回调的时候直接传入转换器指定的数据类型。\n```java\nloadService.showWithConvertor(httpResult);\n```\n\n### 自定义回调页\nLoadSir为了完全解耦，没有预设任何状态页，需要自己实现，开发者自定义自己的回调页面，比如加载中，没数据，错误，超时等常用页面，\n设置布局及自定义点击逻辑\n\n```java\npublic class CustomCallback extends Callback {\n\n    //填充布局\n    @Override\n    protected int onCreateView() {\n        return R.layout.layout_custom;\n    }\n    //当前Callback的点击事件，如果返回true则覆盖注册时的onReloa()，如果返回false则两者都执行，先执行onReloadEvent()。\n    @Override\n    protected boolean onReloadEvent(final Context context, View view) {\n        Toast.makeText(context.getApplicationContext(), \"Hello buddy! :p\", Toast.LENGTH_SHORT).show();\n        (view.findViewById(R.id.iv_gift)).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(context.getApplicationContext(), \"It's your gift! :p\", Toast.LENGTH_SHORT).show();\n            }\n        });\n        return true;\n    }\n\n    //是否在显示Callback视图的时候显示原始图(SuccessView)，返回true显示，false隐藏\n    @Override\n    public boolean getSuccessVisible() {\n        return super.getSuccessVisible();\n    }\n\n    //将Callback添加到当前视图时的回调，View为当前Callback的布局View\n    @Override\n    public void onAttach(Context context, View view) {\n        super.onAttach(context, view);\n    }\n\n    //将Callback从当前视图删除时的回调，View为当前Callback的布局View\n    @Override\n    public void onDetach() {\n        super.onDetach(context, view);\n    }\n\n}\n```\n### 动态修改Callback\n\n```java\nloadService = LoadSir.getDefault().register(...);\nloadService.setCallBack(EmptyCallback.class, new Transport() {\n   @Override\n   public void order(Context context, View view) {\n       TextView mTvEmpty = (TextView) view.findViewById(R.id.tv_empty);\n       mTvEmpty.setText(\"fine, no data. You must fill it!\");\n   }\n});\n```\n\n### LoadSir自带便携式Callback\n\n```java\nProgressCallback loadingCallback = new ProgressCallback.Builder()\n        .setTitle(\"Loading\", R.style.Hint_Title)\n        .build();\n\nHintCallback hintCallback = new HintCallback.Builder()\n        .setTitle(\"Error\", R.style.Hint_Title)\n        .setSubTitle(\"Sorry, buddy, I will try it again.\")\n        .setHintImg(R.drawable.error)\n        .build();\n\nLoadSir loadSir = new LoadSir.Builder()\n        .addCallback(loadingCallback)\n        .addCallback(hintCallback)\n        .setDefaultCallback(ProgressCallback.class)\n        .build();\n```\n\n在使用过程中，遇到问题可以先去[FAQ](docs/FAQ.md)和Issues看看有没解决方案，如果没有的话，请给我提Issue吧。\n\n\n### :bulb: About placeholder effect\nplaceholder效果状态页类似[ShimmerRecyclerView](https://github.com/sharish/ShimmerRecyclerView)的效果. LoadSir只用了一个\n自定义状态页PlaceHolderCallback就完成类似的效果，是不是很棒 :ghost:\n\n## Docs\n* :point_right: [常见问题](docs/FAQ-cn.md)\n* 📌 [更新日志](docs/changelog.md)\n* [最佳实践](docs/BestPractice-cn.md)\n* [下个版本开发计划](docs/NextVersion.md)\n\n## 代码混淆\n\n```xml\n-dontwarn com.kingja.loadsir.**\n-keep class com.kingja.loadsir.** {*;}\n```\n\n## Contact Me\nAny questions,Welcome to contact me.\n* Email:kingjavip@gmail.com\n* QQ群(818251143)\n\n## License\n\n    Copyright 2017 KingJA\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.5693359375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.5.3'\n        classpath 'com.novoda:bintray-release:0.9.2'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.21484375,
          "content": "VERSION_NAME=1.3.8\nVERSION_CODE=2020030801\nCOMPILE_SDK_VERSION = 28\nBUILD_TOOLS_VERSION = 28.0.3\nMIN_SDK_VERSION = 16\nTARGET_SDK_VERSION = 28\nSUPPORT_VERSION = 28.1.0\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "loadsir",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include ':app', ':loadsir'\n"
        }
      ]
    }
  ]
}