{
  "metadata": {
    "timestamp": 1736708563532,
    "page": 828,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "logfellow/logstash-logback-encoder",
      "stars": 2451,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.427734375,
          "content": "# Note: the LAST match wins!  (Not the first match, which be would be intuitive)\n\n# Allow git to intelligently detect the type of file, and to do whatever it thinks best\n# To override this for specific files, make sure you add those rules AFTER this line.\n* text=auto\n\n*.gitattributes text\n*.gitignore text\n*.java text\n*.md text\n*.properties text\n*.txt text\n*.xml text\n*.yml text\n\n*.jar binary\n\n*.sh eol=lf\nmvnw eol=lf\nmvnw.cmd eol=crlf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.126953125,
          "content": ".classpath\n.project\n.settings/\n.*.md.html\n\ndependency-reduced-pom.xml\n\ntarget/\ntarget-eclipse/\n\n.idea\n*.iml\ntest.log\n/.checkstyle\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.5458984375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement by using\nthe [Report Content][report content] functionality of GitHub.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available\nat [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n[report content]: https://docs.github.com/en/free-pro-team@latest/github/building-a-strong-community/reporting-abuse-or-spam#reporting-an-issue-or-pull-request \n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6103515625,
          "content": "Contributing to logstash-logback-encoder\n========================================\n\n* [Code of Conduct](#code-of-conduct)\n* [How to Contribute](#how-to-contribute)\n  * [Discuss](#discuss)\n  * [Create an Issue](#create-an-issue)\n  * [Submit a Pull Request](#submit-a-pull-request)\n  * [Participate in Reviews](#participate-in-reviews)\n  * [Become a Maintainer](#become-a-maintainer)\n* [Build from Source](#build-from-source)\n* [Source Code Style](#source-code-style)\n* [License](#license)\n\nCode of Conduct\n---------------\n\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md)\n\nHow to Contribute\n-----------------\n\n### Discuss\n\nIf you have a question, check Stack Overflow using the\n[logstash-logback-encoder](https://stackoverflow.com/questions/tagged/logstash-logback-encoder) tag.\n\nIf you believe there is an issue, search through\n[existing issues](https://github.com/logfellow/logstash-logback-encoder/issues) trying a\nfew different ways to find discussions, past or current, that are related to the issue.\nReading those discussions helps you to learn about the issue, and helps us to make a decision.\n\n### Create an Issue\n\nReporting an issue or making a feature request is a great way to contribute.\nYour feedback and the conversations that result from it provide a continuous flow of ideas.\nHowever, before creating an issue, please take the time to [discuss and research](#discuss) first.\n\nIf creating an issue after a discussion on Stack Overflow, please provide a description\nin the issue instead of simply referring to Stack Overflow.\nThe issue tracker is an important place of record for design discussions and should be self-sufficient.\n\nOnce you're ready, create an [issue](https://github.com/logfellow/logstash-logback-encoder/issues).\n\n### Submit a Pull Request\n\n1. Should you create an issue first? No, just create the pull request and use the\n   description to provide context and motivation, as you would for an issue. If you want\n   to start a discussion first or have already created an issue, once a pull request is\n   created, we will close the issue as superseded by the pull request, and the discussion\n   about the issue will continue under the pull request.\n\n2. Always check out the `main` branch and submit pull requests against it.\n\n3. Choose the granularity of your commits consciously and squash commits that represent\n   multiple edits or corrections of the same logical change. See\n   [Rewriting History section of Pro Git](https://git-scm.com/book/en/Git-Tools-Rewriting-History)\n   for an overview of streamlining the commit history.\n\n4. Format commit messages using 55 characters for the subject line, 72 characters per line\n   for the description, followed by the issue fixed, e.g. `Fixes #351`. See the\n   [Commit Guidelines section of Pro Git](https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines)\n   for best practices around commit messages.\n\nIf accepted, your contribution might be heavily modified as needed prior to merging.\nYou will likely retain author attribution for your Git commits granted that the bulk of\nyour changes remain intact. You may also be asked to rework the submission.\n\nIf asked to make corrections, simply push the changes against the same branch, and your\npull request will be updated. In other words, you do not need to create a new pull request\nwhen asked to make changes.\n\n### Participate in Reviews\n\nHelping to review pull requests is another great way to contribute. Your feedback\ncan help to shape the implementation of new features. When reviewing pull requests,\nhowever, please refrain from approving or rejecting a PR unless you are a core\ncommitter for logstash-logback-encoder.\n\n### Become a Maintainer\n\nIf you are interested in becoming a maintainer, show your support by making contributions\nusing any of the above means.  After you have been involved in the project for a while,\nyou may request to become a maintainer by filing an issue.\n\nBuild from Source\n-----------------\n\nJDK 11 is required to build from source.\n\nUse `mvnw` (\\*nix) or `mvnw.cmd` (windows) to build.\n\n```\n./mvnw clean install\n```\n\nSource Code Style\n-----------------\n\nPlease follow the style used by the existing code in the repository.\nRules are enforced by [checkstyle](src/checkstyle/checkstyle.xml).\n\nJava source files must include the following header at the top of the file, before the _package_ declaration:\n\n```\n/*\n * Copyright 2013-${year} the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\nThe project makes use of the great [Mycila Maven License Plugin](https://github.com/mathieucarbou/license-maven-plugin) to check for the presence of a valid header in source files during the build process.\n\nYou can manually check your source files by invoking the plugin manually on the command line as follows:\n\n```\nmvn license:check\n```\n\nYou can also ask the plugin to automatically update the header for you like this:\n\n```\nmvn license:format\n```\n\n\nLicense\n-------\n\nBy contributing, you agree that the contributions will be licensed under the\n[Apache License 2.0](https://github.com/logfellow/logstash-logback-encoder/blob/main/LICENSE).\n\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 1.103515625,
          "content": "See [contributors](https://github.com/logfellow/logstash-logback-encoder/graphs/contributors) for the most up-to-date list.\n\nThe list below is no longer being maintained, but is kept for historical purposes.\n\n* Sajan Alexander (sajanalexander)\n* Dmitry Andrianov (dimas)\n* Simon Barbey (spydesk)\n* Vincent Behar (vbehar)\n* Mirko Bernardoni (mirko1978)\n* Phil Clay (philsttr)\n* Mirko Friedenhagen (mfriedenhagen)\n* Christophe Furmaniak (looztra)\n* Michal Galet (galet)\n* Edu Garcia (Arcnor)\n* Jorg Heymans (heymjo)\n* Bernd Kiefer (brndkfr)\n* Matthias Kiefer (kiefermat)\n* Ben Kirwin (bkirwi)\n* Łukasz Klich (kleewho)\n* Nicolas Labrot (nithril)\n* David MacDonald (dmacdonald2013)\n* Tim Meighen (tmeighen)\n* Ryan O'Keeffe (danielredoak)\n* Shai Nagar (sha1n)\n* Sébastien Pasche (braoru)\n* James Pennell (jpennell)\n* Kyle Prager (kyleprager)\n* Neil Prosser (neilprosser)\n* Bertrand Renuart (brenuart)\n* Alex Sherwin (alex-sherwin)\n* Dmitry Sklyut (dsklyut)\n* Behar Veliqi (bveliqi)\n* Gunnar Wagenknecht (guw)\n* Ivan Yatskevich (yatskevich)\n* Brandon Zeeb (phasebash)\n* Matjaž (mpecan)\n* (jaag82)\n* (ouaibsky)\n* (schup)\n* (vboulaye)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PROCESS.md",
          "type": "blob",
          "size": 2.3583984375,
          "content": "Development Processes\n=====================\n\nThis page covers the processes used by the maintainers of logstash-logback-encoder.\n\n* [Branching Strategy](#branching-strategy)\n* [Version Support](#version-support)\n* [Releasing](#releasing)\n\nBranching Strategy\n------------------\n\nThe `main` branch is the head for the next release.\n\nThe project version referenced in the `pom.xml` file on the `main` branch is\nthe next release version appended with `-SNAPSHOT`.\n\nPRs are submitted against `main`.\n\n\nVersion Support\n---------------\n\nOnly the latest version is \"supported\" and actively maintained.\n\nAll changes and improvements are made against the latest version.\n\nIn other words, older releases will not be hotfixed, and backports will not be performed to older releases.\n\n\nReleasing\n---------\n\nTo perform a release, push a commit ([like this one](https://github.com/logfellow/logstash-logback-encoder/commit/aa942e9fe59320fa1b39f1b54f8a742dd8fd9930))\nto the `main` branch that:\n\n1. Bumps the version references in the README.md\n2. Contains a commit message that starts with `[release]`\n    \nThe [build workflow](.github/workflows/build.yml) sees `[release]` in the commit message\nand uses the `maven-release-plugin` to perform the release, which then:\n\n1. Strips the `-SNAPSHOT` from the pom version,\n2. Creates the git tag, and builds the artifacts\n3. Uses the `maven-gpg-plugin` to sign the artifacts with [this GPG signing key](http://keyserver.ubuntu.com/pks/lookup?search=0x794038C5C4DF6A3F&fingerprint=on&op=index)\n   using the [`GPG_KEY` and `GPG_PASSPHRASE` secrets](https://github.com/logfellow/logstash-logback-encoder/settings/secrets/actions)\n4. Uses the `nexus-staging-maven-plugin` to:\n   1. Deploy the artifact to a staging repository hosted at https://oss.sonatype.org/\n      using the [`OSSRH_USERNAME` and `OSSRH_PASSWORD` secrets](https://github.com/logfellow/logstash-logback-encoder/settings/secrets/actions)\n   2. Automatically [release](https://central.sonatype.org/pages/releasing-the-deployment.html) the staging repository if no errors occur.\n      * After the staging repository is released, the new artifacts will eventually propagate to maven central. \n5. Bumps the version to the next `-SNAPSHOT` version.\n\nAfter releasing, create a [release](https://github.com/logfellow/logstash-logback-encoder/releases) for the tag\nthat includes release notes of all the changes in the new version.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 142.2275390625,
          "content": "> !! This document applies to the next version under development.\n>\n> &nbsp; &nbsp; See [here for documentation on the latest released version](https://github.com/logfellow/logstash-logback-encoder/tree/logstash-logback-encoder-8.0).\n\n# Logstash Logback Encoder\n\n[![Build](https://github.com/logfellow/logstash-logback-encoder/workflows/build/badge.svg?branch=main)](https://github.com/logfellow/logstash-logback-encoder/actions)\n[![Javadocs](http://www.javadoc.io/badge/net.logstash.logback/logstash-logback-encoder.svg)](http://www.javadoc.io/doc/net.logstash.logback/logstash-logback-encoder)\n[![Maven Central](https://img.shields.io/maven-central/v/net.logstash.logback/logstash-logback-encoder)](https://search.maven.org/artifact/net.logstash.logback/logstash-logback-encoder)\n[![Release Notes](https://img.shields.io/github/v/release/logfellow/logstash-logback-encoder?label=release%20notes)](https://github.com/logfellow/logstash-logback-encoder/releases/latest)\n\nProvides [logback](http://logback.qos.ch/) encoders, layouts, and appenders to log in JSON and [other formats supported by Jackson](#data-format).\n\nSupports both regular _LoggingEvents_ (logged through a `Logger`) and _AccessEvents_ (logged via [logback-access](http://logback.qos.ch/access.html)).\n\nOriginally written to support output in [logstash](https://www.elastic.co/guide/en/logstash/current)'s JSON format, but has evolved into a highly-configurable, general-purpose, structured logging mechanism for JSON and other Jackson dataformats.\nThe structure of the output, and the data it contains, is fully configurable.\n\n#### Contents:\n\n* [Including it in your project](#including-it-in-your-project)\n* [Java Version Requirements](#java-version-requirements)\n* [Usage](#usage)\n\t* [UDP Appenders](#udp-appenders)\n\t* [TCP Appenders](#tcp-appenders)\n\t\t* [Keep-alive](#keep-alive)\n\t\t* [Multiple Destinations](#multiple-destinations)\n\t\t* [Reconnection Delay](#reconnection-delay)\n\t\t* [Connection Timeout](#connection-timeout)\n\t\t* [Write Buffer Size](#write-buffer-size)\n\t\t* [Write Timeout](#write-timeout)\n\t\t* [Initial Send Delay](#initial-send-delay)\n\t\t* [SSL](#ssl)\n\t* [Async Appenders](#async-appenders)\n\t\t* [RingBuffer Size](#ringbuffer-size)\n\t\t* [RingBuffer Full](#ringbuffer-full)\n\t\t* [Graceful Shutdown](#graceful-shutdown)\n\t\t* [Wait Strategy](#wait-strategy)\n\t* [Appender Listeners](#appender-listeners)\n\t* [Encoders / Layouts](#encoders--layouts)\n* [LoggingEvent Fields](#loggingevent-fields)\n\t* [Standard Fields](#standard-fields)\n\t* [MDC fields](#mdc-fields)\n\t* [Key Value Pair fields](#key-value-pair-fields)\n\t* [Context fields](#context-fields)\n\t* [Caller Info Fields](#caller-info-fields)\n\t* [Custom Fields](#custom-fields)\n\t\t* [Global Custom Fields](#global-custom-fields)\n\t\t* [Event-specific Custom Fields](#event-specific-custom-fields)\n* [AccessEvent Fields](#accessevent-fields)\n\t* [Standard Fields](#standard-fields-1)\n\t* [Header Fields](#header-fields)\n* [Customizing Jackson](#customizing-jackson)\n\t* [Data Format](#data-format)\n\t* [Customizing JSON Factory and Generator](#customizing-json-factory-and-generator)\n\t* [Registering Jackson Modules](#registering-jackson-modules)\n\t* [Customizing Character Escapes](#customizing-character-escapes)\n* [Masking](#masking)\n* [Customizing Standard Field Names](#customizing-standard-field-names)\n* [Customizing Version](#customizing-version)\n* [Customizing Timestamp](#customizing-timestamp)\n* [Customizing LoggingEvent Message](#customizing-loggingevent-message)\n* [Customizing AccessEvent Message](#customizing-accessevent-message)\n* [Customizing Logger Name Length](#customizing-logger-name-length)\n* [Customizing Stack Traces](#customizing-stack-traces)\n    * [Omit Common Frames](#omit-common-frames)\n    * [Truncate after Regex](#truncate-after-regex)\n    * [Exclude Frames per Regex](#exclude-frames-per-regex)\n    * [Maximum Depth per Throwable](#maximum-depth-per-throwable)\n    * [Maximum Trace Size (bytes)](#maximum-trace-size)\n    * [Classname Shortening](#classname-shortening)\n    * [Custom Line Separator](#custom-line-separator)\n    * [Root Cause First](#root-cause-first)\n    * [Conditional Output](#conditional-output)\n    * [Stack Hashes](#stack-hashes)\n    * [Using with PatternLayout](#using-with-patternlayout)\n* [Registering Additional Providers](#registering-additional-providers)\n* [Prefix/Suffix/Separator](#prefixsuffixseparator)\n* [Composite Encoder/Layout](#composite-encoderlayout)\n\t* [Providers common to LoggingEvents and AccessEvents](#providers-common-to-loggingevents-and-accessevents)\n\t* [Providers for LoggingEvents](#providers-for-loggingevents)\n\t* [Providers for AccessEvents](#providers-for-accessevents)\n\t* [Nested JSON Provider](#nested-json-provider)\n\t* [Pattern JSON Provider](#pattern-json-provider)\n\t\t* [LoggingEvent patterns](#loggingevent-patterns)\n\t\t* [AccessEvent patterns](#accessevent-patterns)\n\t* [Custom JSON Provider](#custom-json-provider)\n* [Status Listeners](#status-listeners)\n* [Joran/XML Configuration](#joran-xml-configuration)\n\t* [Duration Property](#duration-property)\n\t* [Comma separated list of values](#comma-separated-list-of-values)\n\n\n## Including it in your project\n\nMaven style:\n\n```xml\n<dependency>\n    <groupId>net.logstash.logback</groupId>\n    <artifactId>logstash-logback-encoder</artifactId>\n    <version>8.0</version>\n    <!-- Use runtime scope if the project does not have any compile-time usage of logstash-logback-encoder,\n         such as usage of StructuredArguments/Markers or implementations such as\n         JsonProvider, AppenderListener, JsonFactoryDecorator, JsonGeneratorDecorator, etc\n    <scope>runtime</scope>\n    -->\n</dependency>\n<!-- Your project must also directly depend on either logback-classic or logback-access. For example: -->\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>1.5.6</version>\n    <!-- Use runtime scope if the project does not have any compile-time usage of logback,\n         such as implementations of Appender, Encoder, Layout, TurboFilter, etc\n    <scope>runtime</scope>\n    -->\n</dependency>\n```\n\nIf you get `ClassNotFoundException`/`NoClassDefFoundError`/`NoSuchMethodError` at runtime,\nthen ensure the required dependencies (and appropriate versions) as specified in the pom file\nfrom the maven repository exist on the runtime classpath.\nSpecifically, the following need to be available on the runtime classpath:\n\n* jackson-databind / jackson-core / jackson-annotations >= 2.17.0\n* logback-core >= 1.5.0\n* logback-classic >= 1.5.0 (required for logging _LoggingEvents_)\n* logback-access >= 2.0.0 (required for logging _AccessEvents_)\n* slf4j-api (usually comes as a transitive dependency of logback-classic)\n* java-uuid-generator (required if the `uuid` provider is used)\n\nOlder versions than the ones specified in the pom file _might_ work, but the versions in the pom file are what testing has been performed against.\nSupport for logback versions prior to 1.3.0 was removed in logstash-logback-encoder 7.4.\n\nIf you are using logstash-logback-encoder in a project (such as spring-boot) that also declares dependencies on any of the above libraries, you might need to tell maven explicitly which versions to use to avoid conflicts.\nYou can do so using maven's [dependencyManagement](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management) feature.\nFor example, to ensure that maven doesn't pick different versions of logback-core, logback-classic, and logback-access, add this to your project's pom.xml\n\n```xml\n<properties>\n    <logback-classic.version>1.5.6</logback-classic.version>\n    <logback-access.version>2.0.2</logback-access.version>\n</properties>\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback-classic.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback-classic.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback.access</groupId>\n            <artifactId>common</artifactId>\n            <version>${logback-access.version}</version>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n## Java Version Requirements\n\n| logstash-logback-encoder | Minimum Java Version supported |\n|--------------------------|--------------------------------|\n| 8.x                      | 11                             |\n| 7.x                      | 8                              |\n| 6.x                      | 8                              |\n| 5.x                      | 7                              |\n| &lt;= 4.x                | 6                              |\n\n\n## Usage\n\nTo log using JSON format, you must configure logback to use either:\n\n* an appender provided by the logstash-logback-encoder library, OR\n* an appender provided by logback (or another library) with an encoder or layout provided by the logstash-logback-encoder library\n\nThe appenders, encoders, and layouts provided by the logstash-logback-encoder library are as follows:\n\n| Format        | Protocol   | Function | LoggingEvent | AccessEvent\n|---------------|------------|----------| ------------ | -----------\n| Logstash JSON | Syslog/UDP | Appender | [`LogstashUdpSocketAppender`](/src/main/java/net/logstash/logback/appender/LogstashUdpSocketAppender.java) | [`LogstashAccessUdpSocketAppender`](/src/main/java/net/logstash/logback/appender/LogstashAccessUdpSocketAppender.java)\n| Logstash JSON | TCP        | Appender | [`LogstashTcpSocketAppender`](/src/main/java/net/logstash/logback/appender/LogstashTcpSocketAppender.java) | [`LogstashAccessTcpSocketAppender`](/src/main/java/net/logstash/logback/appender/LogstashAccessTcpSocketAppender.java)\n| any           | any        | Appender | [`LoggingEventAsyncDisruptorAppender`](/src/main/java/net/logstash/logback/appender/LoggingEventAsyncDisruptorAppender.java) | [`AccessEventAsyncDisruptorAppender`](/src/main/java/net/logstash/logback/appender/AccessEventAsyncDisruptorAppender.java)\n| Logstash JSON | any        | Encoder  | [`LogstashEncoder`](/src/main/java/net/logstash/logback/encoder/LogstashEncoder.java) | [`LogstashAccessEncoder`](/src/main/java/net/logstash/logback/encoder/LogstashAccessEncoder.java)\n| Logstash JSON | any        | Layout   | [`LogstashLayout`](/src/main/java/net/logstash/logback/layout/LogstashLayout.java) | [`LogstashAccessLayout`](/src/main/java/net/logstash/logback/layout/LogstashAccessLayout.java)\n| General JSON  | any        | Encoder  | [`LoggingEventCompositeJsonEncoder`](/src/main/java/net/logstash/logback/encoder/LoggingEventCompositeJsonEncoder.java) | [`AccessEventCompositeJsonEncoder`](/src/main/java/net/logstash/logback/encoder/AccessEventCompositeJsonEncoder.java)\n| General JSON  | any        | Layout   | [`LoggingEventCompositeJsonLayout`](/src/main/java/net/logstash/logback/layout/LoggingEventCompositeJsonLayout.java) | [`AccessEventCompositeJsonLayout`](/src/main/java/net/logstash/logback/encoder/AccessEventCompositeJsonLayout.java)\n\nThese encoders/layouts can generally be used by any logback appender (such as `RollingFileAppender`).\n\nThe general _composite_ JSON encoders/layouts can be used to\noutput any JSON format/data by configuring them with various JSON _providers_.\nThe Logstash encoders/layouts are really just extensions of the general\ncomposite JSON encoders/layouts with a pre-defined set of providers.\n\nThe logstash encoders/layouts are easier to configure if you want to use the standard logstash version 1 output format.\nUse the [composite encoders/layouts](#composite-encoderlayout) if you want to heavily customize the output,\nor if you need to use logstash version 0 output.\n\nThe `*AsyncDisruptorAppender` appenders are similar to logback's `AsyncAppender`,\nexcept that a [LMAX Disruptor RingBuffer](https://lmax-exchange.github.io/disruptor/)\nis used as the queuing mechanism, as opposed to a `BlockingQueue`.\nThese async appenders can delegate to any other underlying logback appender.\n\n\n\n### UDP Appenders\n\nTo output JSON for LoggingEvents to a syslog/UDP channel,\nuse the `LogstashUdpSocketAppender` with a `LogstashLayout` or `LoggingEventCompositeJsonLayout`\nin your `logback.xml`, like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashUdpSocketAppender\">\n        <host>MyAwesomeSyslogServer</host>\n        <!-- port is optional (default value shown) -->\n        <port>514</port>\n        <!-- layout is required -->\n        <layout class=\"net.logstash.logback.layout.LogstashLayout\"/>\n    </appender>\n    \n    <root level=\"all\">\n        <appender-ref ref=\"stash\" />\n    </root>\n</configuration>\n```\nYou can further customize the JSON output by customizing the layout as described in later sections.\n\nFor example, to configure [global custom fields](#global-custom-fields), you can specify\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashUdpSocketAppender\">\n    <host>MyAwesomeSyslogServer</host>\n    <!-- port is optional (default value shown) -->\n    <port>514</port>\n    <layout class=\"net.logstash.logback.layout.LogstashLayout\">\n        <customFields>{\"appname\":\"myWebservice\"}</customFields>\n    </layout>\n</appender>\n```\n\nTo output JSON for AccessEvents over UDP, use a `LogstashAccessUdpSocketAppender`\nwith a `LogstashAccessLayout` or `AccessEventCompositeJsonLayout`\nin your `logback-access.xml`, like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashAccessUdpSocketAppender\">\n        <host>MyAwesomeSyslogServer</host>\n        <!-- port is optional (default value shown) -->\n        <port>514</port>\n\n        <layout class=\"net.logstash.logback.layout.LogstashAccessLayout\">\n            <customFields>{\"appname\":\"myWebservice\"}</customFields>\n        </layout>\n    </appender>\n\n    <appender-ref ref=\"stash\" />\n</configuration>\n```\n\n\nTo receive syslog/UDP input in logstash, configure a [`syslog`](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-syslog.html) or [`udp`](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-udp.html) input with the [`json`](https://www.elastic.co/guide/en/logstash/current/plugins-codecs-json.html) codec in logstash's configuration like this:\n```\ninput {\n    syslog {\n        codec => \"json\"\n    }\n}\n```\n\n\n### TCP Appenders\n\nTo output JSON for LoggingEvents over TCP, use a `LogstashTcpSocketAppender`\nwith a `LogstashEncoder` or `LoggingEventCompositeJsonEncoder`\nin your `logback.xml`, like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n        <destination>127.0.0.1:4560</destination>\n\n        <!-- encoder is required -->\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\" />\n    </appender>\n\n    <root level=\"DEBUG\">\n        <appender-ref ref=\"stash\" />\n    </root>\n</configuration>\n```\n\n\nTo output JSON for AccessEvents over TCP, use a `LogstashAccessTcpSocketAppender`\nwith a `LogstashAccessEncoder` or `AccessEventCompositeJsonEncoder`\nin your `logback-access.xml`, like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashAccessTcpSocketAppender\">\n        <destination>127.0.0.1:4560</destination>\n\n        <!-- encoder is required -->\n        <encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\" />\n    </appender>\n\n    <appender-ref ref=\"stash\" />\n</configuration>\n```\n\nThe TCP appenders use an encoder, rather than a layout as the [UDP appenders](#udp-appenders) . \nYou can use a `Logstash*Encoder`, `*EventCompositeJsonEncoder`, or any other logback encoder.\nAll of the output formatting options are configured at the encoder level.\n\nInternally, the TCP appenders are asynchronous (using the [LMAX Disruptor RingBuffer](https://lmax-exchange.github.io/disruptor/)).\nAll the encoding and TCP communication is delegated to a single writer thread.\nThere is no need to wrap the TCP appenders with another asynchronous appender\n(such as `AsyncAppender` or `LoggingEventAsyncDisruptorAppender`).\n\nAll the configuration parameters (except for sub-appender) of the [async appenders](#async-appenders) are valid for TCP appenders. For example, `waitStrategyType` and `ringBufferSize`.\n\nBy default the TCP appenders will never block the logging thread - if the RingBuffer is full (e.g. due to slow network, etc), then events will be dropped. If desired, the appender can also be configured to block and wait for free space, see [RingBuffer Full](#ringbuffer-full) for more information.\n\nThe TCP appenders will automatically reconnect if the connection breaks. Multiple destinations can be configured to increase availability and reduce message lost. See [Multiple Destinations](#multiple-destinations) for more information.\n\nTo receive TCP input in logstash, configure a [`tcp`](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-tcp.html) input with the [`json_lines`](https://www.elastic.co/guide/en/logstash/current/plugins-codecs-json_lines.html) codec in logstash's configuration like this:\n\n```\ninput {\n    tcp {\n        port => 4560\n            codec => json_lines\n    }\n}\n```\n\nIn order to guarantee that logged messages have had a chance to be processed by the TCP appender, you'll need to [cleanly shut down logback](http://logback.qos.ch/manual/configuration.html#stopContext) when your application exits.\n\n\n#### Keep-Alive\n\nIf events occur infrequently, and the connection breaks consistently due to a server-side idle timeout,\nthen you can enable keep alive functionality by configuring a `keepAliveDuration` like this:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <keepAliveDuration>5 minutes</keepAliveDuration>\n</appender>\n```\n\nThis setting accepts a Logback Duration value - see the section dedicated to [Duration Property](#duration-property) for more information about the valid values.\n\nWhen the `keepAliveDuration` is set, then a keep alive message will be sent if an event has not occurred for the length of the duration.\nThe keep alive message defaults to unix line ending (`\\n`), but can be changed by setting the `keepAliveMessage` property to the desired value. The following values have special meaning:\n\n- `<empty string>`: no keep alive\n- `SYSTEM`: system's line separator\n- `UNIX`: unix line ending (`\\n`)\n- `WINDOWS`: windows line ending (`\\r\\n`)\n\nAny other value will be used as-is.\n\nThe keep alive message is encoded in `UTF-8` by default. This can be changed by setting the `keepAliveCharset` property to the name of the desired charset.\n\n\n#### Multiple Destinations\n\nThe TCP appenders can be configured to try to connect to one of several destinations like this:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <destination>destination1.domain.com:4560</destination>\n    <destination>destination2.domain.com:4560</destination>\n    <destination>destination3.domain.com:4560</destination>\n\n    ...\n</appender>\n```\n\nor this:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <destination>\n        destination1.domain.com:4560,\n        destination2.domain.com:4560,\n        destination3.domain.com:4560\n    </destination>\n\n    ...\n</appender>\n```\n\nDestinations are expressed using the following format: `host[:port]` where:\n- `host` can be a hostname (eg. `localhost`) , an IPv4 address (eg. `192.168.1.1`) or an IPv6 address enclosed between brackets (eg. `[2001:db8::1]`).\n- `port` is optional and, if specified, must be prefixed by a colon (`:`). It must be a valid integer value between `0` and `65535`.\n\n\nThe appender uses a `connectionStrategy` to determine:\n\n* the order in which destination connections are attempted, and \n* when an established connection should be reestablished (to the next destination selected by the connection strategy).\n\nLogs are only sent to one destination at a time (i.e. not all destinations).\nBy default, the appender will stay connected to the connected destination\nuntil it breaks, or until the application is shut down.\nSome connection strategies can force a reconnect (see below).\nIf a connection breaks, then the appender will attempt to connect\nto the next destination selected by the connection strategy. \n\n\nThe available connection strategies are as follows:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Strategy</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>preferPrimary</tt></td>\n      <td>(default)\nThe first destination is considered the <em>primary</em> destination.\nEach additional destination is considered a <em>secondary</em> destination.\nThis strategy prefers the primary destination, unless it is down.\nThe appender will attempt to connect to each destination in the order in which they are configured.\nIf a connection attempt fails, thes the appender will attempt to connect to the next destination.\nIf a connection succeeds, and then closes <em>before</em> the <tt>minConnectionTimeBeforePrimary</tt>\nhas elapsed, then the appender will attempt to connect to the next destination.\nIf a connection succeeds, and then closes <em>after</em> the <tt>minConnectionTimeBeforePrimary</tt>\nhas elapsed, then the appender will attempt to connect\nto the destinations in the order in which they are configured,\nstarting at the first/primary destination.\n<br/><br/>\nThe <tt>secondaryConnectionTTL</tt> can be set to gracefully close connections to <em>secondary</em>\ndestinations after a specific duration.  This will force the\nthe appender to reattempt to connect to the destinations in order again.\nThe <tt>secondaryConnectionTTL</tt> value does not affect connections to the\n<em>primary</em> destination.\n<br/><br/>\nThe <tt>minConnectionTimeBeforePrimary</tt> (10 seconds by default) specifies\nthe minimum amount of time that a sucessfully established connection\nmust remain open before the next connection attempt will try the primary.\ni.e. If a connection stays open less than this amount of time,\nthen the next connection attempt will attempt the next destination (instead of the primary).\nThis is used to prevent a connection storm to the primary in the case the\nprimary accepts a connection, and then immediately closes it. \n<br/><br/>\nExample:\n<pre>\n  &lt;appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\"&gt;\n      &lt;destination&gt;destination1.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination2.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination3.domain.com:4560&lt;/destination&gt;\n      &lt;connectionStrategy&gt;\n          &lt;preferPrimary&gt;\n              &lt;secondaryConnectionTTL&gt;5 minutes&lt;/secondaryConnectionTTL&gt;\n          &lt;/preferPrimary&gt;\n      &lt;/connectionStrategy&gt;\n  &lt;/appender&gt;\n</pre>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>roundRobin</tt></td>\n      <td>\nThis strategy attempts connections to the destination in round robin order.\nIf a connection fails, the next destination is attempted.\n<br/><br/>\nThe <tt>connectionTTL</tt> can be set to gracefully close connections after a specific duration.\nThis will force the the appender to reattempt to connect to the next destination.\n<br/><br/>\nExample:\n<pre>\n  &lt;appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\"&gt;\n      &lt;destination&gt;destination1.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination2.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination3.domain.com:4560&lt;/destination&gt;\n      &lt;connectionStrategy&gt;\n          &lt;roundRobin&gt;\n              &lt;connectionTTL&gt;5 minutes&lt;/connectionTTL&gt;\n          &lt;/roundRobin&gt;\n      &lt;/connectionStrategy&gt;\n  &lt;/appender&gt;\n</pre>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>random</tt></td>\n      <td>\nThis strategy attempts connections to the destination in a random order.\nIf a connection fails, the next random destination is attempted.\n<br/><br/>\nThe <tt>connectionTTL</tt> can be set to gracefully close connections after a specific duration.\nThis will force the the appender to reattempt to connect to the next random destination.\n<br/><br/>\nExample:\n<pre>\n  &lt;appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\"&gt;\n      &lt;destination&gt;destination1.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination2.domain.com:4560&lt;/destination&gt;\n      &lt;destination&gt;destination3.domain.com:4560&lt;/destination&gt;\n      &lt;connectionStrategy&gt;\n          &lt;random&gt;\n              &lt;connectionTTL&gt;5 minutes&lt;/connectionTTL&gt;\n          &lt;/random&gt;\n      &lt;/connectionStrategy&gt;\n  &lt;/appender&gt;\n</pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nYou can also use your own custom connection strategy by implementing the `DestinationConnectionStrategy` interface,\nand configuring the appender to use it like this:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <destination>destination1.domain.com:4560</destination>\n    <destination>destination2.domain.com:4560</destination>\n    <destination>destination3.domain.com:4560</destination>\n    <connectionStrategy class=\"your.package.YourDestinationConnectionStrategy\">\n    </connectionStrategy>\n</appender>\n```\n\n\n#### Reconnection Delay\n\nBy default, the TCP appender will wait 30 seconds between connection attempts to a single destination.\nThe time between connection attempts to each destination is tracked separately.\n\nThis amount of time to delay can be changed by setting the `reconnectionDelay` field.\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <reconnectionDelay>1 second</reconnectionDelay>\n</appender>\n```\n\nThis setting accepts a Logback Duration value - see the section dedicated to [Duration Property](#duration-property) for more information about the valid values.\n\n\n#### Connection Timeout\n\nBy default, a connection timeout of 5 seconds is used when connecting to a remote destination.\nYou can adjust this by setting the appender's `connectionTimeout` configuration property to the desired value.\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <connectionTimeout>5 seconds</connectionTimeout>\n</appender>\n```\n\nA value of `0` means \"don't use a timeout and wait indefinitely\" which often really means \"use OS defaults\".\n\nThis setting accepts a Logback Duration value - see the section dedicated to [Duration Property](#duration-property) for more information about the valid values.\n\n\n#### Write Buffer Size\n\nBy default, a buffer size of `8192` bytes is used to buffer socket output stream writes.\nYou can adjust this by setting the appender's `writeBufferSize`.\n \n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <writeBufferSize>16384</writeBufferSize>\n</appender>\n```\n\nBuffering can be disabled by setting the `writeBufferSize` to `0`.\nConsider disabling the write buffer if you are concerned about losing data from the buffer for flaky connections.\nDisabling the buffer can potentially slow down the writer thread due to increased system calls,\nbut in some environments, this does not seem to affect overall performance.\nSee [this discussion](https://github.com/logfellow/logstash-logback-encoder/issues/342).\n\n\n#### Write Timeout\n\nIf a destination stops reading from its socket input, but does not close the connection, then writes from the TCP appender will eventually backup, causing the ring buffer to backup, causing events to be dropped.\n\nTo detect this situation, you can enable a write timeout, so that \"stuck\" writes will eventually timeout, at which point the connection will be re-established.\nWhen the [write buffer](#write-buffer-size) is enabled, any buffered data will be lost when the connection is reestablished.\n\nBy default there is no write timeout. To enable a write timeout, do the following:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <writeTimeout>1 minute</writeTimeout>\n</appender>\n```\n\nNote that since the blocking java socket output stream used to send events does not have a concept of a write timeout, write timeouts are detected using a task scheduled periodically with the same frequency as the write timeout.\nFor example, if the write timeout is set to 30 seconds, then a task will execute every 30 seconds to see if 30 seconds has elapsed since the start of the current write operation.\nTherefore, it is recommended to use longer write timeouts (e.g. > 30s, or minutes), rather than short write timeouts, so that this task does not execute too frequently.\nAlso, this approach means that it could take up to two times the write timeout before a write timeout is detected.\n\nThe write timeout must be >0. A timeout of zero is interpreted as an infinite timeout which effecively means \"no write timeout\".\n\nThis setting accepts a Logback Duration value - see the section dedicated to [Duration Property](#duration-property) for more information about the valid values.\n\n\n\n#### Initial Send Delay\n\nThe appender starts writing the events stored in the queue as soon as the connection is established. In some cases you may want to add an extra delay before sending the first events after the connection is established. This may come in handy in situations where the appender connects to an intermediate proxy that needs some time to establish a connection to the final destination. If the appender starts writing immediately, events may be lost in-flight if the proxy ultimately fails to connect to the final destination. \n\nTo enable this feature, set the `initialSendDelay` to the desired delay before the first event is sent after the connection is established. If the connection is lost before the delay expires, no event will be lost. The default value is `0` which means no delay and start flusing pending events immediately.\n\nThe following example configures a delay of 5 secondes before writing in the new connection:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n    <initialSendDelay>5 secondes</initialSendDelay>\n</appender>\n```\n\nThis setting accepts a Logback Duration value - see the section dedicated to [Duration Property](#duration-property) for more information about the valid values.\n\n\n#### SSL\n\nTo use SSL, add an `<ssl>` sub-element within the `<appender>` element for the `LogstashTcpSocketAppender`\nor `LogstashAccessTcpSocketAppender`.\n\nSee the [logback manual](http://logback.qos.ch/manual/usingSSL.html) for how to configure SSL.\nSSL for the `Logstash*TcpSocketAppender`s are configured the same way as logback's `SSLSocketAppender`.\n\nFor example, to enable SSL using the JVM's default keystore/truststore, do the following:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    ...\n\n    <!-- Enable SSL using the JVM's default keystore/truststore -->\n    <ssl/>\n</appender>\n```\n\nTo use a different truststore, do the following:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashAccessTcpSocketAppender\">\n    ...\n\n    <!-- Enable SSL and use a different truststore -->\n    <ssl>\n        <trustStore>\n            <location>classpath:server.truststore</location>\n            <password>${server.truststore.password}</password>\n        </trustStore>\n    </ssl>\n</appender>\n```\n\nAll the customizations that [logback](http://logback.qos.ch/manual/usingSSL.html) offers\n(such as configuring cipher specs, protocols, algorithms, providers, etc.)\nare supported by the `Logback*TcpSocketAppender`s.\n\nSee the logstash documentation for the [`tcp`](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-tcp.html) input for how to configure it to use SSL.\n\n\n### Async Appenders\n\nThe `*AsyncDisruptorAppender` appenders are similar to logback's `AsyncAppender`,\nexcept that a [LMAX Disruptor RingBuffer](https://lmax-exchange.github.io/disruptor/)\nis used as the queuing mechanism, as opposed to a `BlockingQueue`.\nThese async appenders can delegate to any other underlying logback appender.\n\nFor example:\n\n```xml\n<appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    ...\n</appender>\n    \n<appender name=\"async\" class=\"net.logstash.logback.appender.LoggingEventAsyncDisruptorAppender\">\n    <appender-ref ref=\"file\" />\n</appender>\n```\n\n> **Warning**\n> Since Logback 1.3 it is not allowed anymore to declare an `<appender>` inside another `<appender>`. The nested appender should instead be declared outside and `<appender-ref>` must be used to refer to it.\n> \n> See [LOGBACK-1674](https://jira.qos.ch/browse/LOGBACK-1674) for more information.\n\n\n#### RingBuffer Size\n\nLogging events are first enqueued in a ring buffer before they are delivered to their final destination by a separate handler thread.\nThe buffer size is fixed, it does not grow or shrink at runtime. Its size is determined  by the `ringBufferSize` configuration property set to `8192` by default.\n\nIf the handler thread is not as fast as the producing threads, then the ring buffer will eventually fill up, at which point events will be dropped (the default) or the producing threads are blocked depending on configured `appendTimeout` (see [RingBuffer Full](#ringbuffer-full).\n\n\n#### RingBuffer Full\n\nThe async appenders will by default never block the logging thread.\nIf the RingBuffer is full (e.g. due to slow network, etc), then events will be dropped.\n\nAlternatively, you can configure the appender to wait until space becomes available instead of dropping the events immediately. This may come in handy when you want to rely on the buffering and the async nature of the appender but don't want to loose any event in case of large logging bursts that exceed the size of the RingBuffer.\n\nThe behaviour of the appender when the RingBuffer is controlled by the `appendTimeout` configuration property:\n\n| `appendTimeout` | Behaviour when RingBuffer is full                                      |\n|-----------------|------------------------------------------------------------------------|\n| `< 0`           | disable timeout and wait until space is available                      |\n| `0`             | no timeout, give up immediately and drop event (this is the *default*) |\n| `> 0`           | retry during the specified amount of time                              |\n\n\nLogging threads waiting for space in the RingBuffer wake up periodically at a frequency starting at `1ns` and increasing exponentially up to `appendRetryFrequency` (default `5ms`). \nOnly one thread is allowed to retry at a time. If a thread is already retrying, additional threads are waiting on a lock until the first is finished. This strategy should help to limit CPU consumption while providing good enough latency and throughput when the ring buffer is at (or close) to its maximal capacity.\n\nWhen the appender drops an event, it emits a warning status message every `droppedWarnFrequency` consecutive dropped events (`1000` by default, use `0` to turn off warnings). Another status message is emitted when the drop period is over and a first event is succesfully enqueued reporting the total number of events that were dropped.\n\n\n#### Graceful Shutdown\n\nIn order to guarantees that logged messages have had a chance to be processed by asynchronous appenders (including the TCP appender) and ensure background threads have been stopped, you'll need to [cleanly shut down logback](http://logback.qos.ch/manual/configuration.html#stopContext) when your application exits.\n\nWhen gracefully stopped, async appenders wait until all events in the buffer are processed and the buffer is empty.\nThe maximum time to wait is configured by the `shutdownGracePeriod` parameter and is set to `1 minute` by default.\nEvents still in the buffer after this period is elapsed are dropped and the appender is stopped.\n\n\n#### Wait Strategy\n\nBy default, the [`BlockingWaitStrategy`](https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/BlockingWaitStrategy.html) is used by the worker thread spawned by this appender.\nThe `BlockingWaitStrategy` minimizes CPU utilization, but results in slower latency and throughput.\nIf you need faster latency and throughput (at the expense of higher CPU utilization), consider\na different [wait strategy](https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/WaitStrategy.html) offered by the disruptor.\n\n> !! Whichever wait strategy you choose, be sure to test and monitor CPU utilization, latency, and throughput to ensure it meets your needs.\n> For example, in some configurations, `SleepingWaitStrategy` can consume 90% CPU utilization at rest.\n\nThe wait strategy can be configured on the async appender using the `waitStrategyType` parameter, like this:\n\n```xml\n<appender name=\"async\" class=\"net.logstash.logback.appender.LoggingEventAsyncDisruptorAppender\">\n    <waitStrategyType>sleeping</waitStrategyType>\n    ...\n</appender>\n```\n\nThe supported wait strategies are as follows:\n\n<table>\n  <tbody>\n    <tr>\n      <th>Wait Strategy</th>\n      <th>Parameters</th>\n      <th>Implementation</th>\n    </tr>\n    <tr>\n      <td><tt>blocking</tt></td>\n      <td>none</td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/BlockingWaitStrategy.html\"><tt>BlockingWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><tt>busySpin</tt></td>\n      <td>none</td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/BusySpinWaitStrategy.html\"><tt>BusySpinWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><tt>liteBlocking</tt></td>\n      <td>none</td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/LiteBlockingWaitStrategy.html\"><tt>LiteBlockingWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><tt>yielding</tt></td>\n      <td>none</td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/YieldingWaitStrategy.html\"><tt>YieldingWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><pre>sleeping{\n  <em>retries</em>,\n  <em>sleepTimeNs</em>\n}\n</pre>e.g.<br/><tt>sleeping</tt><br/>or<br/><tt>sleeping{500,1000}</tt></td>\n      <td>\n        <ol>\n          <li><tt>retries</tt> - Number of times (integer) to spin before sleeping. (default = 200)</li>\n          <li><tt>sleepTimeNs</tt> - Time in nanoseconds to sleep each iteration after spinning (default = 100)</li>\n        </ol>\n      </td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/SleepingWaitStrategy.html\"><tt>SleepingWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><pre>phasedBackoff{\n  <em>spinTime</em>,\n  <em>yieldTime</em>,\n  <em>timeUnit</em>,\n  <em>fallbackStrategy</em>\n}\n</pre>\ne.g.<br/><tt>phasedBackoff{10,60,seconds,blocking}</tt></td>\n      <td>\n        <ol>\n          <li><tt>spinTime</tt> - Time to spin before yielding</li>\n          <li><tt>yieldTime</tt> - Time to yield before falling back to the <tt>fallbackStrategy</tt></li>\n          <li><tt>timeUnit</tt> - Units of time for spin and yield timeouts. String name of a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html\"><tt>TimeUnit</tt></a> value (e.g. <tt>seconds</tt>)</li>\n          <li><tt>fallbackStrategy</tt> - String name of the wait strategy to fallback to after the timeouts have elapsed</li>\n        </ol>\n      </td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/PhasedBackoffWaitStrategy.html\"><tt>PhasedBackoffWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><pre>timeoutBlocking{\n  <em>timeout</em>,\n  <em>timeUnit</em>\n}\n</pre>e.g.<br/><tt>timeoutBlocking{1,minutes}</tt></td>\n      <td>\n        <ol>\n          <li><tt>timeout</tt> - Time to block before throwing an exception</li>\n          <li><tt>timeUnit</tt> - Units of time for timeout. String name of a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html\"><tt>TimeUnit</tt></a> value (e.g. <tt>seconds</tt>)</li>\n        </ol>\n      </td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/TimeoutBlockingWaitStrategy.html\"><tt>TimeoutBlockingWaitStrategy</tt></a></td>\n    </tr>\n    <tr>\n      <td><pre>liteTimeoutBlocking{\n  <em>timeout</em>,\n  <em>timeUnit</em>\n}\n</pre>e.g.<br/><tt>liteTimeoutBlocking{1,minutes}</tt></td>\n      <td>\n        <ol>\n          <li><tt>timeout</tt> - Time to block before throwing an exception</li>\n          <li><tt>timeUnit</tt> - Units of time for timeout. String name of a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html\"><tt>TimeUnit</tt></a> value (e.g. <tt>seconds</tt>)</li>\n        </ol>\n      </td>\n      <td><a href=\"https://lmax-exchange.github.io/disruptor/docs/com/lmax/disruptor/LiteTimeoutBlockingWaitStrategy.html\"><tt>LiteTimeoutBlockingWaitStrategy</tt></a></td>\n    </tr>\n  </tbody>\n</table>\n\nSee [AsyncDisruptorAppender](/src/main/java/net/logstash/logback/appender/AsyncDisruptorAppender.java)\nfor other configuration parameters (such as `ringBufferSize`, `threadNamePrefix`, `daemon`, and `droppedWarnFrequency`)\n\n\n### Appender Listeners\n\nListeners can be registered to an appender to receive notifications for the appender lifecycle and event processing.\n\nSee the two listener interfaces for the types of notifications that can be received:\n\n* [`AppenderListener`](/src/main/java/net/logstash/logback/appender/listener/AppenderListener.java) - basic notifications for the [async appenders](#async-appenders) and [UDP appenders](#udp-appenders).\n* [`TcpAppenderListener`](/src/main/java/net/logstash/logback/appender/listener/TcpAppenderListener.java) - extension of `AppenderListener` with additional TCP-specific notifications.  Only works with the [TCP appenders](#tcp-appenders). \n\nSome example use cases for a listener are:\n\n* Monitoring metrics for events per second, event processing durations, dropped events, connections successes / failures, etc.\n* Logging event processing errors to a different appender (that perhaps appends to a different destination).\n  \nA [`FailureSummaryLoggingAppenderListener`](src/main/java/net/logstash/logback/appender/listener/FailureSummaryLoggingAppenderListener.java)\nis provided that will log a warning on the first success after a series of consecutive append/send/connect failures.\nThe message includes summary details of the failures that occurred (such as the number of failures, duration of the failures, etc).\nTo register it:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashAccessTcpSocketAppender\">\n    <listener class=\"net.logstash.logback.appender.listener.FailureSummaryLoggingAppenderListener\">\n        <loggerName>net.logstash.logback.appender.listener.FailureSummaryLoggingAppenderListener</loggerName>\n    </listener>\n</appender>\n```\n\nYou may also create your own listener by implementing the `*Listener` interface and register it to an appender using the `listener` xml element like this:\n\n```xml\n<appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashAccessTcpSocketAppender\">\n    ...\n\n    <listener class=\"your.package.YourListenerClass\">\n        <yourListenerProperty>propertyValue</yourListenerProperty>\n    </listener>\n</appender>\n```\n\nMultiple listeners can be registered by supplying multiple `listener` xml elements.\n\n\n### Encoders / Layouts\n\nYou can use any of the encoders/layouts provided by the logstash-logback-encoder library with other logback appenders.\n\nFor example, to output LoggingEvents to a file, use the `LogstashEncoder`\nwith the `RollingFileAppender` in your `logback.xml` like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>info</level>\n        </filter>\n        <file>/some/path/to/your/file.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>/some/path/to/your/file.log.%d{yyyy-MM-dd}</fileNamePattern>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\" />\n    </appender>\n    \n    <root level=\"all\">\n        <appender-ref ref=\"stash\" />\n    </root>\n</configuration>\n```\n\nTo log AccessEvents to a file, configure your `logback-access.xml` like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"stash\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>/some/path/to/your/file.log</file>\n        <encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\" />\n    </appender>\n\n    <appender-ref ref=\"stash\" />\n</configuration>\n```\n\nThe `LogstashLayout` and `LogstashAccessLayout` can be configured the same way as\nthe `LogstashEncoder` and `LogstashAccessEncoder`.  All the other examples\nin this document use encoders, but the same options apply to the layouts as well.\n\nTo receive file input in logstash, configure a [`file`](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html) input in logstash's configuration like this:\n\n```\ninput {\n    file {\n        path => \"/some/path/to/your/file.log\"\n        codec => \"json\"\n    }\n}\n```\n\n\n\n## LoggingEvent Fields\n\nThe following sections describe the fields included in the JSON output by default for LoggingEvents written by the\n\n* `LogstashEncoder`\n* `LogstashLayout`, and\n* the logstash appenders\n\nIf you are using the [composite encoders/layouts](#composite-encoderlayout), then the fields written will\nvary by the providers you configure.\n\n\n### Standard Fields\n\nThese fields will appear in every LoggingEvent unless otherwise noted.\nThe field names listed here are the default field names.\nThe field names can be customized (see [Customizing Standard Field Names](#customizing-standard-field-names)).\n\n| Field         | Description\n|---------------|------------\n| `@timestamp`  | Time of the log event (`ISO_OFFSET_DATE_TIME`) - see [Customizing Timestamp](#customizing-timestamp)\n| `@version`    | Logstash format version (e.g. `1`) - see [Customizing Version](#customizing-version)\n| `message`     | Formatted log message of the event - see [Customizing Message](#customizing-message)\n| `logger_name` | Name of the logger that logged the event\n| `thread_name` | Name of the thread that logged the event\n| `level`       | String name of the level of the event\n| `level_value` | Integer value of the level of the event\n| `stack_trace` | (Only if a throwable was logged) The stacktrace of the throwable.  Stackframes are separated by line endings.\n| `tags`        | (Only if tags are found) The names of any markers not explicitly handled.  (e.g. markers from `MarkerFactory.getMarker` will be included as tags, but the markers from [`Markers`](/src/main/java/net/logstash/logback/marker/Markers.java) will not.) This can be fully disabled by specifying `<includeTags>false</includeTags>`, in the encoder/layout/appender configuration.\n\n\n\n### MDC fields\n\nBy default, `LogstashEncoder`/`LogstashLayout` will write each\n[Mapped Diagnostic Context (MDC) (`org.slf4j.MDC`)](https://www.slf4j.org/api/org/slf4j/MDC.html)\nentry to the output.\n\nTo disable writing MDC entries, add `<includeMdc>false</includeMdc>`\nto the `LogstashEncoder`/`LogstashLayout` configuration.\n\nYou can also configure specific entries in the MDC to be included or excluded as follows:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <includeMdcKeyName>key1ToInclude</includeMdcKeyName>\n    <includeMdcKeyName>key2ToInclude</includeMdcKeyName>\n</encoder>\n```\n\nor\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <excludeMdcKeyName>key1ToExclude</excludeMdcKeyName>\n    <excludeMdcKeyName>key2ToExclude</excludeMdcKeyName>\n</encoder>\n```\n\nWhen key names are specified for inclusion, then all other fields will be excluded.\nWhen key names are specified for exclusion, then all other fields will be included.\nIt is a configuration error to specify both included and excluded key names.\n\nBy default, the MDC key is used as the field name in the output.\nTo use an alternative field name in the output for an MDC entry,\nspecify `<mdcKeyFieldName>mdcKeyName=fieldName</mdcKeyFieldName>`: \n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <mdcKeyFieldName>key1=alternateFieldNameForKey1</mdcKeyFieldName>\n</encoder>\n```\n\nYou can also manipulate the MDC entry values written to the JSON output.\nBy default, no manipulations are done and all MDC entry values are written as text.\n\nCurrently, the following MDC entry writers are supported:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <!--\n        Writes long values (instead of String values) for any MDC values\n        that can be parsed as a long (radix 10).\n        e.g. Writes 1234 instead of \"1234\"\n    -->\n    <mdcEntryWriter class=\"net.logstash.logback.composite.loggingevent.mdc.LongMdcEntryWriter\"/>\n\n    <!--\n        Writes double values (instead of String values) for any MDC values\n        that can be parsed as a double, except NaN and positive/negative Infinity.\n        e.g. 1234.5678 instead of \"1234.5678\"\n    -->\n    <mdcEntryWriter class=\"net.logstash.logback.composite.loggingevent.mdc.DoubleMdcEntryWriter\"/>\n\n    <!--\n        Writes boolean values (instead of String values) for any MDC values\n        that equal \"true\" or \"false\", ignoring case.\n        e.g. Writes true instead of \"true\"\n    -->\n    <mdcEntryWriter class=\"net.logstash.logback.composite.loggingevent.mdc.BooleanMdcEntryWriter\"/>\n\n    <!--\n        Composite MDC entry writer that delegates writing MDC entries to a list of `MdcEntryWriter`\n        if the key of an MDC entry does match a given include pattern and does not match a given\n        exclude pattern.\n                \n        Omitting the 'includeMdcKeyPattern' means to include all MDC keys.\n        Omitting the 'excludeMdcKeyPattern' means to exclude no MDC keys.\n        \n        The elements with the key patterns are optional. If provided, use a regular expression\n        with the syntax of `java.util.regex.Pattern`.\n    -->\n    <mdcEntryWriter class=\"net.logstash.logback.composite.loggingevent.mdc.RegexFilteringMdcEntryWriter\">\n        <includeMdcKeyPattern>keyPatternToInclude</includeMdcKeyPattern>\n        <excludeMdcKeyPattern>keyPatternToExclude</excludeMdcKeyPattern>\n        <mdcEntryWriter class=\"net.logstash.logback.composite.loggingevent.LongMdcEntryWriter\"/>\n    </mdcEntryWriter>\n</encoder>\n```\n\nTo add your own MDC entry writer for other types or apply the manipulations only for specific fields\nyou can write your own implementation of [`MdcEntryWriter`](src/main/java/net/logstash/logback/composite/loggingevent/mdc/MdcEntryWriter.java).\n\nYou can also replace the default MDC JSON provider with your own class extending from\n[`MdcJsonProvider`](src/main/java/net/logstash/logback/composite/loggingevent/MdcJsonProvider.java).\nConfiguring your class as a [Custom JSON Provider](#custom-json-provider) will then replace\nthe default `MdcJsonProvider`.\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <provider class=\"mypackagenames.MyCustomMdcJsonProvider\"/>\n</encoder>\n```\n\n\n### Key Value Pair Fields\n\nSlf4j 2's [fluent API](https://www.slf4j.org/manual.html#fluent) supports attaching key value pairs to the log event.\n\n`LogstashEncoder`/`LogstashLayout` will write each key value pair as a field in the output by default.\n\nTo disable writing key value pairs, add `<includeKeyValuePairs>false</includeKeyValuePairs>`\nto the `LogstashEncoder`/`LogstashLayout` configuration.\n\nYou can also configure specific key value pairs to be included or excluded as follows:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <includeKeyValueKeyName>key1ToInclude</includeKeyValueKeyName>\n    <includeKeyValueKeyName>key2ToInclude</includeKeyValueKeyName>\n</encoder>\n```\n\nor\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <excludeKeyValueKeyName>key1ToExclude</excludeKeyValueKeyName>\n    <excludeKeyValueKeyName>key2ToExclude</excludeKeyValueKeyName>\n</encoder>\n```\n\nWhen key names are specified for inclusion, then all other keys will be excluded.\nWhen key names are specified for exclusion, then all other keys will be included.\nIt is a configuration error to specify both included and excluded key names.\n\nBy default, the key is used as the field name in the output.\nTo use an alternative field name in the output for an key value pair,\nspecify`<keyValuePairsKeyFieldName>keyName=fieldName</keyValuePairsKeyFieldName>`: \n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <keyValueKeyFieldName>key1=alternateFieldNameForKey1</keyValueKeyFieldName>\n</encoder>\n```\n\n\n### Context fields\n\nBy default, each property of Logback's Context (`ch.qos.logback.core.Context`)\nwill appear as a field in the LoggingEvent.\nThis can be disabled by specifying `<includeContext>false</includeContext>`\nin the encoder/layout/appender configuration.\n\nNote that logback versions prior to 1.1.10 included a `HOSTNAME` property by default in the context.\nAs of logback 1.1.10, the `HOSTNAME` property is lazily calculated (see [LOGBACK-1221](https://jira.qos.ch/browse/LOGBACK-1221)), and will no longer be included by default.\n\n\n### Caller Info Fields\nThe encoder/layout/appender do not contain caller info by default.\nThis can be costly to calculate and should be switched off for busy production environments.\n\nTo switch it on, add the `includeCallerData` property to the configuration.\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <includeCallerData>true</includeCallerData>\n</encoder>\n```\nIf the encoder is included inside an asynchronous appender, such as\n`AsyncAppender`, `LoggingEventAsyncDisruptorAppender`, or `LogstashTcpSocketAppender`, then\n`includeCallerData` must be set to true on the appender as well.\n\nWhen switched on, the following fields will be included in the log event:\n\n| Field                | Description\n|----------------------|------------\n| `caller_class_name`  | Fully qualified class name of the class that logged the event\n| `caller_method_name` | Name of the method that logged the event\n| `caller_file_name`   | Name of the file that logged the event\n| `caller_line_number` | Line number of the file where the event was logged\n\n\n\n### Custom Fields\n\nIn addition to the fields above, you can add other fields to the LoggingEvent either globally, or on an event-by-event basis.\n\n\n#### Global Custom Fields\n\nAdd custom fields that will appear in every LoggingEvent like this :\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <customFields>{\"appname\":\"myWebservice\",\"roles\":[\"customerorder\",\"auth\"],\"buildinfo\":{\"version\":\"Version 0.1.0-SNAPSHOT\",\"lastcommit\":\"75473700d5befa953c45f630c6d9105413c16fe1\"}}</customFields>\n</encoder>\n```\n\nor in an AccessEvent like this :\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\">\n    <customFields>{\"appname\":\"myWebservice\",\"roles\":[\"customerorder\",\"auth\"],\"buildinfo\":{\"version\":\"Version 0.1.0-SNAPSHOT\",\"lastcommit\":\"75473700d5befa953c45f630c6d9105413c16fe1\"}}</customFields>\n</encoder>\n```\n\n\n\n#### Event-specific Custom Fields\n\nWhen logging a message, you can add additional fields to the JSON output by using\n\n* _structured arguments_ provided by\n  [`StructuredArguments`](/src/main/java/net/logstash/logback/argument/StructuredArguments.java), OR\n* _markers_ provided by\n  [`Markers`](/src/main/java/net/logstash/logback/marker/Markers.java)\n\nThe difference between the two is that\n* `StructuredArguments` are included in a the log event's formatted message\n(when the message has a parameter for the argument) _AND_ in the JSON output.\n  * `StructuredArguments` will be included in the JSON output if using `LogstashEncoder/Layout`\n    or if using [composite encoders/layouts](#composite-encoderlayout) with the `arguments` provider.\n* `Markers` are only written to the JSON output, and _NEVER_ to the log event's formatted message.\n  * `Markers` will be included in the JSON output if using `LogstashEncoder/Layout`\n    or if using [composite encoders/layouts](#composite-encoderlayout) with the `logstashMarkers` provider.\n\n\nYou can use `StructuredArguments` even if the message does not contain a parameter\nfor the argument.  However, in this case, the argument will only be written to the JSON output\nand not the formatted message (which is effectively the same behavior that the Markers provide).\nIn general, you should use `StructuredArguments`, unless you have a static analyzer\nthat flags parameter count / argument count mismatches.\n\nBoth `StructuredArguments` and `Markers` require constructing additional objects.\nTherefore, it is best practice to surround the log lines with `logger.isXXXEnabled()`,\nto avoid the object construction if the log level is disabled.\n\nExamples using `StructuredArguments`:\n\n```java\nimport static net.logstash.logback.argument.StructuredArguments.*;\n\n/*\n * Add \"name\":\"value\" to the JSON output,\n * but only add the value to the formatted message.\n *\n * The formatted message will be `log message value`\n */\nlogger.info(\"log message {}\", value(\"name\", \"value\"));\n\n/*\n * Add \"name\":\"value\" to the JSON output,\n * and add name=value to the formatted message.\n *\n * The formatted message will be `log message name=value`\n */\nlogger.info(\"log message {}\", keyValue(\"name\", \"value\"));\n\n/*\n * Add \"name\":\"value\" ONLY to the JSON output.\n *\n * Since there is no parameter for the argument,\n * the formatted message will NOT contain the key/value.\n *\n * If this looks funny to you or to static analyzers,\n * consider using Markers instead.\n */\nlogger.info(\"log message\", keyValue(\"name\", \"value\"));\n\n/*\n * Add multiple key value pairs to both JSON and formatted message\n */\nlogger.info(\"log message {} {}\", keyValue(\"name1\", \"value1\"), keyValue(\"name2\", \"value2\")));\n\n/*\n * Add \"name\":\"value\" to the JSON output and\n * add name=[value] to the formatted message using a custom format.\n */\nlogger.info(\"log message {}\", keyValue(\"name\", \"value\", \"{0}=[{1}]\"));\n\n/*\n * In the JSON output, values will be serialized by Jackson's ObjectMapper.\n * In the formatted message, values will follow the same behavior as logback\n * (formatting of an array or if not an array `toString()` is called).\n *\n * Add \"foo\":{...} to the JSON output and add `foo.toString()` to the formatted message:\n *\n * The formatted message will be `log message <result of foo.toString()>`\n */\nFoo foo  = new Foo();\nlogger.info(\"log message {}\", value(\"foo\", foo));\n\n/*\n * Add \"name1\":\"value1\",\"name2\":\"value2\" to the JSON output by using a Map,\n * and add `myMap.toString()` to the formatted message.\n *\n * Note the values can be any object that can be serialized by Jackson's ObjectMapper\n * (e.g. other Maps, JsonNodes, numbers, arrays, etc)\n */\nMap myMap = new HashMap();\nmyMap.put(\"name1\", \"value1\");\nmyMap.put(\"name2\", \"value2\");\nlogger.info(\"log message {}\", entries(myMap));\n\n/*\n * Add \"array\":[1,2,3] to the JSON output,\n * and array=[1,2,3] to the formatted message.\n */\nlogger.info(\"log message {}\", array(\"array\", 1, 2, 3));\n\n/*\n * Add fields of any object that can be unwrapped by Jackson's UnwrappableBeanSerializer to the JSON output.\n * i.e. The fields of an object can be written directly into the JSON output.\n * This is similar to the @JsonUnwrapped annotation.\n *\n * The formatted message will contain `myobject.toString()`\n */\nlogger.info(\"log message {}\", fields(myobject));\n\n/*\n * In order to normalize a field object name, static helper methods can be created.\n * For example:\n *     public static StructuredArgument foo(Foo foo) {\n *         return StructuredArguments.value(\"foo\", foo);\n *     }\n */\nlogger.info(\"log message {}\", foo(foo));\n\n```\n\nAbbreviated convenience methods are available for all the structured argument types.\nFor example, instead of `keyValue(key, value)`, you can use `kv(key, value)`.\n\n\n\nExamples using `Markers`:\n\n```java\nimport static net.logstash.logback.marker.Markers.*;\n\n/*\n * Add \"name\":\"value\" to the JSON output.\n */\nlogger.info(append(\"name\", \"value\"), \"log message\");\n\n/*\n * Add \"name1\":\"value1\",\"name2\":\"value2\" to the JSON output by using multiple markers.\n */\nlogger.info(append(\"name1\", \"value1\").and(append(\"name2\", \"value2\")), \"log message\");\n\n/*\n * Add \"name1\":\"value1\",\"name2\":\"value2\" to the JSON output by using a map.\n *\n * Note the values can be any object that can be serialized by Jackson's ObjectMapper\n * (e.g. other Maps, JsonNodes, numbers, arrays, etc)\n */\nMap myMap = new HashMap();\nmyMap.put(\"name1\", \"value1\");\nmyMap.put(\"name2\", \"value2\");\nlogger.info(appendEntries(myMap), \"log message\");\n\n/*\n * Add \"array\":[1,2,3] to the JSON output\n */\nlogger.info(appendArray(\"array\", 1, 2, 3), \"log message\");\n\n/*\n * Add \"array\":[1,2,3] to the JSON output by using raw json.\n * This allows you to use your own json seralization routine to construct the json output\n */\nlogger.info(appendRaw(\"array\", \"[1,2,3]\"), \"log message\");\n\n/*\n * Add any object that can be serialized by Jackson's ObjectMapper\n * (e.g. Maps, JsonNodes, numbers, arrays, etc)\n */\nlogger.info(append(\"object\", myobject), \"log message\");\n\n/*\n * Add fields of any object that can be unwrapped by Jackson's UnwrappableBeanSerializer.\n * i.e. The fields of an object can be written directly into the json output.\n * This is similar to the @JsonUnwrapped annotation.\n */\nlogger.info(appendFields(myobject), \"log message\");\n\n```\n\n\n## AccessEvent Fields\n\nThe following sections describe the fields included in the JSON output by default for AccessEvents written by the\n\n* `LogstashAccessEncoder`,\n* `LogstashAccessLayout`, and\n* the logstash access appenders.\n\nIf you are using the [composite encoders/layouts](#composite-encoderlayout), then the fields written will\nvary by the providers you configure.\n\n\n\n### Standard Fields\n\nThese fields will appear in every AccessEvent unless otherwise noted.\nThe field names listed here are the default field names.\nThe field names can be customized (see [Customizing Standard Field Names](#customizing-standard-field-names)).\n\n| Field         | Description\n|---------------|------------\n| `@timestamp`  | Time of the log event. (`yyyy-MM-dd'T'HH:mm:ss.SSSZZ`)  See [customizing timestamp](#customizing-timestamp).\n| `@version`    | Logstash format version (e.g. `1`)   See [customizing version](#customizing-version).\n| `message`     | Message in the form `${remoteHost} - ${remoteUser} [${timestamp}] \"${requestUrl}\" ${statusCode} ${contentLength}`\n| `method` | HTTP method\n| `protocol` | HTTP protocol\n| `status_code` | HTTP status code\n| `requested_url` | Request URL\n| `requested_uri` | Request URI\n| `remote_host` | Remote host\n| `remote_user` | Remote user\n| `content_length` | Content length\n| `elapsed_time` | Elapsed time in millis\n\n\n### Header Fields\n\nRequest and response headers are not logged by default, but can be enabled by specifying a field name for them, like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\">\n    <fieldNames>\n        <requestHeaders>request_headers</requestHeaders>\n        <responseHeaders>response_headers</responseHeaders>\n    </fieldNames>\n</encoder>\n```\n\nSee [Customizing Standard Field Names](#customizing-standard-field-names)) for more details.\n\nTo write the header names in lowercase (so that header names that only differ by case are treated the same),\nset `lowerCaseFieldNames` to true, like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\">\n    <fieldNames>\n        <requestHeaders>request_headers</requestHeaders>\n        <responseHeaders>response_headers</responseHeaders>\n    </fieldNames>\n    <lowerCaseHeaderNames>true</lowerCaseHeaderNames>\n</encoder>\n```\n\nHeaders can be filtered via configuring the `requestHeaderFilter` and/or the `responseHeaderFilter`\nwith a [`HeaderFilter`](/src/main/java/net/logstash/logback/composite/accessevent/HeaderFilter.java), such as the\n[`IncludeExcludeHeaderFilter`](/src/main/java/net/logstash/logback/composite/accessevent/IncludeExcludeHeaderFilter.java).\n\nThe `IncludeExcludeHeaderFilter` can be configured like this:\n \n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\">\n    <fieldNames>\n        <requestHeaders>request_headers</requestHeaders>\n    </fieldNames>\n    <requestHeaderFilter>\n        <include>Content-Type</include>\n    </requestHeaderFilter>\n</encoder>\n```\n\nCustom filters implementing [`HeaderFilter`](/src/main/java/net/logstash/logback/composite/accessevent/HeaderFilter.java)\ncan be used by specifying the filter class like this:\n\n```xml\n<requestHeaderFilter class=\"your.package.YourFilterClass\"/>\n```\n\n## Customizing Jackson\n\nLogstash-logback-encoder uses [Jackson](https://github.com/FasterXML/jackson) to encode log and access events.\n\nLogstash-logback-encoder provides sensible defaults for Jackson, but gives you full control over the Jackson configuration.\n\nFor example, you can:\n* specify the [data format](#data-format)\n* customize the [`JsonFactory` and `JsonGenerator`](#customizing-json-factory-and-generator)\n* register [jackson modules](#registering-jackson-modules)\n* configure [character escapes](#customizing-character-escapes) \n\n### Data Format\n\nJSON is used by default, but other data formats supported by Jackson can be used.\n* [text data formats](https://github.com/FasterXML/jackson-dataformats-text)\n* [binary data formats](https://github.com/FasterXML/jackson-dataformats-binary)\n\n> :warning: When using non-JSON data formats, you must include the appropriate jackson dataformat library on the runtime classpath,\n> typically via a  maven/gradle dependency  (e.g. for Smile, include `jackson-dataformat-smile`).\n\n[Decorators](#customizing-json-factory-and-generator) are provided for the following data formats:\n* `cbor` - [`CborJsonFactoryDecorator`](src/main/java/net/logstash/logback/decorate/cbor/CborJsonFactoryDecorator.java)\n* `smile` - [`SmileJsonFactoryDecorator`](src/main/java/net/logstash/logback/decorate/smile/SmileJsonFactoryDecorator.java)\n* `yaml` - [`YamlJsonFactoryDecorator`](src/main/java/net/logstash/logback/decorate/yaml/YamlJsonFactoryDecorator.java)\n\nTo use one these formats, specify the `<jsonFactoryDecorator>` like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonFactoryDecorator class=\"net.logstash.logback.decorate.smile.SmileJsonFactoryDecorator\"/>\n</encoder>\n```\nOther data formats can be used by implementing a custom\n[`net.logstash.logback.decorate.JsonFactoryDecorator`](src/main/java/net/logstash/logback/decorate/JsonFactoryDecorator.java).\n\n\nThe following [decorators](#customizing-json-factory-and-generator)\ncan be used to configure data-format-specific generator features:\n* [`SmileFeatureJsonGeneratorDecorator`](src/main/java/net/logstash/logback/decorate/smile/SmileFeatureJsonGeneratorDecorator.java)\n* [`CborFeatureJsonGeneratorDecorator`](src/main/java/net/logstash/logback/decorate/cbor/CborFeatureJsonGeneratorDecorator.java)\n* [`YamlFeatureJsonGeneratorDecorator`](src/main/java/net/logstash/logback/decorate/yaml/YamlFeatureJsonGeneratorDecorator.java)\n\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonFactoryDecorator class=\"net.logstash.logback.decorate.smile.SmileJsonFactoryDecorator\"/>\n    <jsonGeneratorDecorator class=\"net.logstash.logback.decorate.smile.SmileFeatureJsonGeneratorDecorator\">\n        <disable>WRITE_HEADER</disable>\n    </jsonGeneratorDecorator>\n</encoder>\n``` \n\n### Customizing JSON Factory and Generator\n\nThe `JsonFactory` and `JsonGenerator` used to write output can be customized by instances of:\n* [`JsonFactoryDecorator`](/src/main/java/net/logstash/logback/decorate/JsonFactoryDecorator.java)\n* [`JsonGeneratorDecorator`](/src/main/java/net/logstash/logback/decorate/JsonGeneratorDecorator.java)\n\nFor example, you could enable pretty printing by using the\n[PrettyPrintingJsonGeneratorDecorator](/src/main/java/net/logstash/logback/decorate/PrettyPrintingJsonGeneratorDecorator.java)\n\nOr customize object mapping like this:\n\n```java\npublic class ISO8601DateDecorator implements JsonFactoryDecorator  {\n\n    @Override\n    public JsonFactory decorate(JsonFactory factory) {\n        ObjectMapper codec = (ObjectMapper) factory.getCodec();\n        codec.setDateFormat(new ISO8601DateFormat());\n        return factory;\n    }\n}\n```\nand then specify the decorators in the logback.xml file like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonGeneratorDecorator class=\"net.logstash.logback.decorate.PrettyPrintingJsonGeneratorDecorator\"/>\n    <jsonFactoryDecorator class=\"your.package.ISO8601DateDecorator\"/>\n</encoder>\n```\n\n`JsonFactory` and `JsonGenerator` features can be enabled/disabled by using the\n`FeatureJsonFactoryDecorator` and `FeatureJsonGeneratorDecorator`, respectively.\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonFactoryDecorator class=\"net.logstash.logback.decorate.FeatureJsonFactoryDecorator\">\n        <disable>USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING</disable>\n    </jsonFactoryDecorator>\n    <jsonGeneratorDecorator class=\"net.logstash.logback.decorate.FeatureJsonGeneratorDecorator\">\n        <enable>WRITE_NUMBERS_AS_STRINGS</enable>\n    </jsonGeneratorDecorator>\n</encoder>\n``` \n\nSee the [net.logstash.logback.decorate](/src/main/java/net/logstash/logback/decorate) package\nand sub-packages for other decorators.\n\n### Registering Jackson Modules\n\nBy default, Jackson modules are dynamically registered via\n[`ObjectMapper.findAndRegisterModules()`](https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/ObjectMapper.html#findAndRegisterModules--).\n\nTherefore, you just need to add jackson modules (e.g. jackson-datatype-jdk8) to the classpath,\nand they will be dynamically registered.\n\nTo disable automatic discovery, set `<findAndRegisterJacksonModules>false</findAndRegisterJacksonModules>` on the encoder/layout.\n\nIf you have a module that Jackson is not able to dynamically discover,\nyou can register it manually via a [`JsonFactoryDecorator`](#customizing-json-factory-and-generator).\n\n### Customizing Character Escapes\n\nBy default, when a string is written as a JSON string value, any character not allowed in a JSON string will be escaped.\nFor example, the newline character (ASCII 10) will be escaped as `\\n`.\n\nTo customize these escape sequences, use the `net.logstash.logback.decorate.CharacterEscapesJsonFactoryDecorator`.\n\nFor example, if you want to use something other than `\\n` as the escape sequence for the newline character, you can do the following:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonFactoryDecorator class=\"net.logstash.logback.decorate.CharacterEscapesJsonFactoryDecorator\">\n        <escape>\n            <targetCharacterCode>10</targetCharacterCode>\n            <escapeSequence>\\u2028</escapeSequence>\n        </escape>\n    </jsonFactoryDecorator>\n</encoder>\n```\n\nYou can also disable all the default escape sequences by specifying `<includeStandardAsciiEscapesForJSON>false</includeStandardAsciiEscapesForJSON>` on the `CharacterEscapesJsonFactoryDecorator`.\nIf you do this, then you will need to register custom escapes for each character that is illegal in JSON string values.  Otherwise, invalid JSON could be written.\n\n## Masking\n\nThe [`MaskingJsonGeneratorDecorator`](src/main/java/net/logstash/logback/mask/MaskingJsonGeneratorDecorator.java)\ncan be used to mask sensitive values (e.g. personally identifiable information (PII) or financial data).\n\nData to be masked can be identified by [path](#identifying-field-values-to-mask-by-path)\nand/or by [value](#identifying-field-values-to-mask-by-value).\n\n### Identifying field values to mask by path\n\nPaths of fields to mask can be specified in several ways, as shown in the following example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonGeneratorDecorator class=\"net.logstash.logback.mask.MaskingJsonGeneratorDecorator\">\n    \n        <!-- The default mask string can optionally be specified by <defaultMask>.\n             When the default mask string is not specified, **** is used.\n        -->\n        <defaultMask>****</defaultMask>\n        \n        <!-- Field paths to mask added via <path> will use the default mask string -->\n        <path>singleFieldName</path>\n        <path>/absolute/path/to/mask</path>\n        <path>partial/path/to/mask</path>\n        <path>partial/path/with/*/wildcard</path>\n        <path>tilde~0slash~1escapedPath</path>\n        \n        <!-- Multiple field paths can be specified as a comma separated string in the <paths> element. -->\n        <paths>path1, path2, path3</paths>\n        \n        <!-- Field paths to mask added via <pathMask> can use a non-default mask string -->\n        <pathMask>\n            <path>some/path</path>\n            <path>some/other/path</path>\n            <mask>[masked]</mask>\n        </pathMask>\n        <pathMask>\n            <paths>anotherFieldName,anotherFieldName2</paths>\n            <mask>**anotherCustomMask**</mask>\n        </pathMask>\n        \n        <!-- Field paths to mask can be supplied dynamically with an implementation\n             of MaskingJsonGeneratorDecorator.PathMaskSupplier\n        -->\n        <pathMaskSupplier class=\"your.custom.PathMaskSupplierA\"/>\n        \n        <!-- Custom implementations of net.logstash.logback.mask.FieldMasker\n             can be used for more advanced masking behavior\n        -->\n        <fieldMasker class=\"your.custom.FieldMaskerA\"/>\n        <fieldMasker class=\"your.custom.FieldMaskerB\"/>\n    </jsonGeneratorDecorator>\n</encoder>\n```\n\nSee [`PathBasedFieldMasker`](src/main/java/net/logstash/logback/mask/PathBasedFieldMasker.java)\nfor the path string format and more examples.  But in general:\n\n* Paths follow a format similar to (but not _exactly_ same as) a [JSON Pointer](http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03).\n* Absolute paths start with `/` and are absolute to the root of the JSON output event (e.g. `/@timestamp` would mask the default timestamp field)\n* Partial paths do not start with `/` and match anywhere that path sequence is seen in the output.\n* A path with a single token (i.e. no `/` characters) will match all occurrences of a field with the given name\n* A wildcard token (`*`) will match anything at that location within the path\n* Use `~1` to escape `/` within a token\n* Use `~0` to escape `~` within a token\n\n### Identifying field values to mask by value\n\nSpecific values to be masked can be specified in several ways, as seen in the following example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <jsonGeneratorDecorator class=\"net.logstash.logback.mask.MaskingJsonGeneratorDecorator\">\n    \n        <!-- The default mask string can optionally be specified by <defaultMask>.\n             When the default mask string is not specified, **** is used.\n        -->\n        <defaultMask>****</defaultMask>\n        \n        <!-- Values to mask added via <value> will use the default mask string -->\n        <value>^foo$</value>\n        <value>bar</value>\n        \n        <!-- Multiple values can be specified as a comma separated string in the <values> element. -->\n        <values>\n            ^baz$,\n            ^blah$\n        </values>\n        \n        <!-- Values to mask added via <valueMask> can use a non-default mask string\n             The mask string here can reference regex capturing groups if needed \n        -->\n        <valueMask>\n            <value>^(foo)-.*$</value>\n            <value>^(bar)-.*$</value>\n            <mask>$1****</mask>\n        </valueMask>\n        \n        <!-- Values to mask can be supplied dynamically with an implementation of\n             MaskingJsonGeneratorDecorator.ValueMaskSupplier\n        -->\n        <valueMaskSupplier class=\"your.custom.ValueMaskSupplierA\"/>\n        \n        <!-- Custom implementations of net.logstash.logback.mask.ValueMasker\n             can be used for more advanced masking behavior\n        -->\n        <valueMasker class=\"your.custom.ValueMaskerA\"/>\n        <valueMasker class=\"your.custom.ValueMaskerB\"/>\n    </jsonGeneratorDecorator>\n</encoder>\n```\n\nIdentifying data to mask by value is much more expensive than identifying data to mask by [path](#identifying-field-values-to-mask-by-path).\nTherefore, prefer identifying data to mask by path.\n\nThe value to mask is passed through every value masker, with the output of one masker passed as input to the next masker. \nThis allows each masker to mask specific substrings within the value.\nThe order in which the maskers are executed is not defined, and should not be relied upon.\n\nWhen using regexes to identify strings to mask, all matches within each string field value will be replaced.\nIf you want to match the full string field value, then use the beginning of line (`^`) and end of line (`$`) markers.\n\n\n## Customizing Standard Field Names\n\nThe standard field names above for LoggingEvents and AccessEvents can be customized by using the `fieldNames`configuration element in the encoder or appender configuration.\n\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <fieldNames>\n        <timestamp>time</timestamp>\n        <message>msg</message>\n        <stackTrace>stacktrace</stackTrace>\n        ...\n    </fieldNames>\n</encoder>\n```\nPrevent a field from being output by setting the field name to `[ignore]`.\n\nFor LoggingEvents, see [`LogstashFieldNames`](/src/main/java/net/logstash/logback/fieldnames/LogstashFieldNames.java)\nfor all the field names that can be customized.  Each java field name in that class is the name of the xml element that you would use to specify the field name (e.g. `logger`, `levelValue`).  Additionally, a separate set of [shortened field names](/src/main/java/net/logstash/logback/fieldnames/ShortenedFieldNames.java) can be configured like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <fieldNames class=\"net.logstash.logback.fieldnames.ShortenedFieldNames\"/>\n</encoder>\n```\n\nFor LoggingEvents, log the caller info, MDC properties, and context properties\nin sub-objects within the JSON event by specifying field\nnames for `caller`, `mdc`, and `context`, respectively.\n\nFor AccessEvents, see [`LogstashAccessFieldNames`](/src/main/java/net/logstash/logback/fieldnames/LogstashAccessFieldNames.java)\nfor all the field names that can be customized. Each java field name in that class is the name of the xml element that you would use to specify the field name (e.g. `fieldsMethod`, `fieldsProtocol`).\n\n\n## Customizing Version\n\nThe version field value by default is the string value `1`.\n\nThe value can be changed like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <version>2</version>\n</encoder>\n```\n\nThe value can be written as a number (instead of a string) like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <writeVersionAsInteger>true</writeVersionAsInteger>\n</encoder>\n```\n\n\n## Customizing Timestamp\n\nBy default, timestamps are written as string values in the format specified by\n[`DateTimeFormatter.ISO_OFFSET_DATE_TIME`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_OFFSET_DATE_TIME)\n(e.g. `2019-11-03T10:15:30.123+01:00`), in the default TimeZone of the host Java platform.\n\nYou can change the pattern like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <timestampPattern>yyyy-MM-dd'T'HH:mm:ss.SSS</timestampPattern>\n</encoder>\n```\n\nThe value of the `timestampPattern` can be any of the following:\n\n* `[UNIX_TIMESTAMP_AS_NUMBER]` - timestamp written as a JSON number value of the milliseconds since unix epoch\n* `[UNIX_TIMESTAMP_AS_STRING]` - timestamp written as a JSON string value of the milliseconds since unix epoch\n* `[` _`constant`_ `]` - (e.g. `[ISO_OFFSET_DATE_TIME]`) timestamp written using the given `DateTimeFormatter` constant\n* any other value - (e.g. `yyyy-MM-dd'T'HH:mm:ss.SSS`) timestamp written using a `DateTimeFormatter` created from the given pattern\n\nThe provider uses a standard Java DateTimeFormatter under the hood. However, special optimisations are applied when using one of the following standard ISO formats that make it nearly 7x faster and more GC friendly:\n\n* `[ISO_OFFSET_DATE_TIME]`\n* `[ISO_ZONED_DATE_TIME]`\n* `[ISO_LOCAL_DATE_TIME]`\n* `[ISO_DATE_TIME]`\n* `[ISO_INSTANT]`\n\n\nWith logback 1.3+ the timestamp will have millisecond precision.\n\nThe formatter uses the default TimeZone of the host Java platform by default. You can change it like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <timeZone>UTC</timeZone>\n</encoder>\n```\n\nThe value of the `timeZone` element can be any string accepted by java's `TimeZone.getTimeZone(String id)` method.\nFor example `America/Los_Angeles`, `GMT+10` or `UTC`.\nUse the special value `[DEFAULT]` to use the default TimeZone of the system.\n\n\n\n## Customizing LoggingEvent Message\n\nBy default, LoggingEvent messages are written as JSON strings. Any characters not allowed in a JSON string, such as newlines, are escaped.\nSee the [Customizing Character Escapes](#customizing-character-escapes) section for details.\n\nYou can also write messages as JSON arrays instead of strings, by specifying a `messageSplitRegex` to split the message text.\nThis configuration element can take the following values:\n\n* any valid regex pattern\n* `SYSTEM` (uses the system-default line separator)\n* `UNIX` (uses `\\n`)\n* `WINDOWS` (uses `\\r\\n`)\n\nIf you split the log message by the origin system's line separator, the written message does not contain any embedded line separators.\nThe target system can unambiguously parse the message without any knowledge of the origin system's line separators.\n\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <messageSplitRegex>SYSTEM</messageSplitRegex>\n</encoder>\n```\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <messageSplitRegex>\\r?\\n</messageSplitRegex>\n</encoder>\n```\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <messageSplitRegex>#+</messageSplitRegex>\n</encoder>\n```\n\n## Customizing AccessEvent Message\n\nBy default, AccessEvent messages are written in the following format:\n\n```\n%clientHost - %user [%date] \"%requestURL\" %statusCode %bytesSent\n```\n\nTo customize the message pattern, specify the `messagePattern` like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashAccessEncoder\">\n    <messagePattern>%clientHost [%date] \"%requestURL\" %statusCode %bytesSent</messagePattern>\n</encoder>\n```\n\nThe pattern can contain any of the [AccessEvent conversion words](http://logback.qos.ch/manual/layouts.html#AccessPatternLayout).\n\n\n## Customizing Logger Name Length\n\nFor LoggingEvents, you can shorten the logger name field length similar to the normal pattern style of `%logger{36}`.\nExamples of how it is shortened can be found [here](https://logback.qos.ch/manual/layouts.html#logger).\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <shortenedLoggerNameLength>36</shortenedLoggerNameLength>\n</encoder>\n```\n\nThe algorithm will shorten the logger name and attempt to reduce its size down to a maximum of number of characters.\nIt does so by reducing each part between dots to their first letter and gradually expand them starting from the right most element until the maximum size is reached.\n\nTo enable this feature, set the `shortenedLoggerNameLength` property to the desired value.\nSetting the length to zero constitutes an exception and returns only the part of the logger name after last dot.\nUse `-1` to disable shortening entirely.\n\nThe next table provides examples of the abbreviation algorithm in action.\n\n|LENGTH|LOGGER NAME                 |SHORTENED                  |\n|------|----------------------------|---------------------------|\n|0     | `org.company.stack.Sample` | `Sample`                  |\n|5     | `org.company.stack.Sample` | `o.c.s.Sample`            |\n|16    | `org.company.stack.Sample` | `o.c.stack.Sample`        |\n|22    | `org.company.stack.Sample` | `o.company.stack.Sample`  |\n|25    | `org.company.stack.Sample` | `org.company.stack.Sample`|\n\n\n\n## Customizing Stack Traces\n\nWhen [logging exceptions](https://www.baeldung.com/slf4j-log-exceptions),\nstack traces are formatted using logback's `ExtendedThrowableProxyConverter` by default.\nHowever, you can configure the encoder to use any [`ThrowableHandlingConverter`](https://logback.qos.ch/apidocs/ch/qos/logback/classic/pattern/ThrowableHandlingConverter.html) to format stacktraces.\n\nNote that the `ThrowableHandlingConverter` only applies to the\n[exception passed as an extra argument](https://www.baeldung.com/slf4j-log-exceptions)\nto the log method, the way you normally log an exception in slf4j.\nDo **NOT** use [structured arguments or markers](#event-specific-custom-fields) for exceptions.\n\nA powerful [`ShortenedThrowableConverter`](/src/main/java/net/logstash/logback/stacktrace/ShortenedThrowableConverter.java) is included in the logstash-logback-encoder library to format stacktraces with the features listed in the next sections.\nThis converter can even be used within a `PatternLayout` to format stacktraces in any non-JSON logs you may have.\n\n\n### Omit Common Frames\n\nNested stacktraces often contain redudant frames that can safely be omitted without loosing any valuable information.\n\nThe following example shows a standard stack trace of an exception with a single root cause:\n\n```\njava.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:36)\n\tat org.company.stack.Sample.omitCommonFrames(Sample.java:22)\n\tat org.company.stack.Sample.main(Sample.java:18)\nCaused by: java.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:38)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:36)\n\tat org.company.stack.Sample.omitCommonFrames(Sample.java:22)\n\tat org.company.stack.Sample.main(Sample.java:18)\n```\n\nAs we can see, the exception and the root cause have the first 7 frames in common. The overall stack trace length can be reduced by omitting these redundant frames from the root cause, as shown below:\n\n```\njava.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:36)\n\tat org.company.stack.Sample.omitCommonFrames(Sample.java:22)\n\tat org.company.stack.Sample.main(Sample.java:18)\nCaused by: java.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:38)\n\t... 6 common frames omitted\n```\n\nCommon frames are omitted and replaced with a message indicating the number of frames dropped. Note that the last common frame remains as a visual cue to the reader.\n\nThis feature is enabled by default and can be disabled if desired by setting the `omitCommonFrames` property to `false`.\n\n\n\n### Truncate after Regex\n\nIt is possible to use regular expressions to truncate the stacktrace after the first matching stacktrace element. The strings being matched against are in the form \"fullyQualifiedClassName.methodName\".\n\nFor example, to suppress everything below `org.company.stack.framework` package or after a call to the `StackGenerator.one()` method, configure the following:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <truncateAfter>^org\\.company\\.stack\\.framework\\..*</truncateAfter>\n        <truncateAfter>^\\.StackGenerator\\.one</truncateAfter>\n    </throwableConverter>\n</encoder>\n```\n\nThis will produce something similar to the following:\n\n```\njava.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\t... 4 frames truncated\nCaused by: java.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\t... 7 frames truncated (including 6 common frames)\n```\n\nNote how the stacktrace is truncated _after_ the matching frames.\n\nAlternatively, multiple regex patterns can be specified at once using the `<truncateAfters>` configuration keyword. This property accepts an optional comma separated list of patterns. The previous example configuration can also be written as follows:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <truncateAfters>\n            ^org\\.company\\.stack\\.framework\\..*,\n            ^\\.StackGenerator\\.one\n        </truncateAfters>\n    </throwableConverter>\n</encoder>\n```\n\nUsing the `<truncateAfters>` configuration option can be useful when using an environment variable to specify the actual patterns at deployment time.\n\n\n\n### Exclude Frames per Regex\n\nSometimes portions of the stacktrace are not worthy of interest and you want to exclude them to make the overall stacktrace shorter. The encoder allows to filter out consecutive unwanted stacktrace elements based on regular expressions and replace them with a single message indicating \"something\" has been removed.\n\nTo enable this feature, simply define the regex patterns matching the frames you want to exclude using one or more `<exclude>` configuration keywords.\n\nTake the following stacktrace as an example:\n\n```\njava.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\tat org.company.stack.gen.StackGenerator.threeSingle$SpringCGLIB(StackGenerator.java:14)\n\tat org.company.stack.gen.StackGenerator.twoSingle$SpringCGLIB(StackGenerator.java:11)\n\tat org.company.stack.gen.StackGenerator.oneSingle$SpringCGLIB(StackGenerator.java:8)\n\tat org.company.stack.gen.StackGenerator.generateSingle(StackGenerator.java:5)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:107)\n\tat org.company.stack.Sample.exclude(Sample.java:94)\n\tat org.company.stack.Sample.main(Sample.java:19)\n```\n\nSuppose the last three frames are common to all your exceptions (they come from the application bootstrap) and you want to reduce them to a single line for brevetiy. Also, you are not interested in frames with `package.classname` ending with `$SpringCGLIB` because they are generated by the Spring runtime... To do this, you will use the following configuration:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <exclude>\\$SpringCGLIB$</exclude>\n        <exclude>^org\\.company\\.stack\\.Sample\\..*</exclude>\n    </throwableConverter>\n</encoder>\n```\n\nAnd your stacktrace would be rendered as follows:\n\n```\njava.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\t... 3 frames excluded\n\tat org.company.stack.gen.StackGenerator.generateSingle(StackGenerator.java:5)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\t... 3 frames excluded\n```\n\nNote that the converter effectively removes stack trace elements only if at least **TWO** consecutive frames match the configured regex patterns. This is to avoid replacing a single frame with \"... 1 frames excluded\" that doesn't shorten the stacktrace at all...\n\nIn addition, the first frame of the stacktrace is always output and cannot be excluded.\n\n\nAlternatively, multiple exclusion patterns can be specified at once using the `<exclusions>` configuration keyword. This property accepts an optional comma separated list of patterns. The previous example configuration can also be written as follows:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <exclusions>\n            \\$SpringCGLIB$,\n            ^org\\.company\\.stack\\.Sample\\..*\n        </exclusions>\n    </throwableConverter>\n</encoder>\n```\n\nUsing the `<exclusions>` configuration option can be useful when using an environment variable to specify the actual patterns at deployment time.\n\n\n\n### Maximum Depth per Throwable\n\nThe `maxDepthPerThrowable` property is used to limit the depth of each individual throwable nested inside the original exception, caused-bys and suppressed exceptions included. Beyond this limit, additional elements are omitted and a message indicating the number elements removed is added instead.\n\nFor example, the following configuration limits the stacktrace to 2 elements:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <maxDepthPerThrowable>2</maxDepthPerThrowable>\n    </throwableConverter>\n</encoder>\n```\n\nThis would produce something similar to the following:\n\n```\njava.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\t... 5 frames truncated\nCaused by: java.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\t... 7 frames truncated (including 6 common frames)\n```\n\nNote how the maximum depth applies to each individual throwables. The last message indicates that 7 frames were truncated of which 6 are common to both the exception and the cause.\n\nThe special value `-1` can be used to disable the feature and allow for an unlimited depth (no limit), which is the default.\n\n\n\n### Maximum Trace Size (bytes)\n\nThe `maxLength` property is used to set a limit on the size of the overall trace, all throwables combined.\n\nFor example, use the following configuration to limit the size to `256` characters:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <maxLength>256</maxLength>\n    </throwableConverter>\n</encoder>\n```\n\nThe overall trace will be limited to 256 characters like this:\n\n```\njava.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher....\n```\n\nThe special value `-1` can be used to disable the feature and allow for an unlimited length (no limit), which is the default.\n\n\n\n### Classname Shortening\n\nClass names can be abbreviated in a way similar to the Logback layout [feature](https://logback.qos.ch/manual/layouts.html#logger).\nThe algorithm will shorten the full class name (package + class) and attempt to reduce its size down to a maximum of number of characters.\nIt does so by reducing the package elements to their first letter and gradually expand them starting from the right most element until the maximum size is reached.\n\nTo enable this feature, set the `shortenedClassNameLength` property to the desired value.\nSetting the length to zero constitutes an exception and returns the \"simple\" class name without package name.\nSet length to `-1` to disable shortening entirely.\n\nThe next table provides examples of the abbreviation algorithm in action.\n\n|LENGTH|CLASSNAME                   |SHORTENED                  |\n|------|----------------------------|---------------------------|\n|0     | `org.company.stack.Sample` | `Sample`                  |\n|5     | `org.company.stack.Sample` | `o.c.s.Sample`            |\n|16    | `org.company.stack.Sample` | `o.c.stack.Sample`        |\n|22    | `org.company.stack.Sample` | `o.company.stack.Sample`  |\n|25    | `org.company.stack.Sample` | `org.company.stack.Sample`|\n\n\nFor example, use the following configuration to try to shorten the class names down to 25 characters:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <shortenedClassNameLength>25</shortenedClassNameLength>\n    </throwableConverter>\n</encoder>\n```\n\nThis will produce an output similar to this:\n\n```\nj.lang.RuntimeException: Unable to invoke service\n\tat o.c.s.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat o.c.s.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat o.c.s.f.Dispatcher.invoke(Dispatcher.java:11)\n\tat o.c.s.f.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:97)\n\tat org.company.stack.Sample.classNameShortening(Sample.java:77)\n\tat org.company.stack.Sample.main(Sample.java:19)\nCaused by: j.lang.RuntimeException: Destination unreachable\n\tat o.c.s.gen.StackGenerator.two(StackGenerator.java:58)\n\tat o.c.s.gen.StackGenerator.one(StackGenerator.java:55)\n\tat o.c.s.gen.StackGenerator.causedBy(StackGenerator.java:38)\n\t... 6 common frames omitted\n```\n\nNote that the exception name is also shortened, as are the individual frames.\n\nAlternatively you can specify your own custom abbreviation strategy with the `<classNameAbbreviator>` configuration property as shown below:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter>\n        <classNameAbbreviator class=\"your.own.CustomAbbreviator\">\n            <param1>aValue</param1>\n        </classNameAbbreviator>\n    </throwableConverter>\n</encoder>\n```\n\n> **Note**\n> The value of `<shortenedClassNameLength>` property is ignored when a custom abbreviator is explicitly specified.\n\n\n\n### Custom Line Separator\n\nStacktrace elements are sperated by the `SYSTEM` line separator by default. \nThe `linesSeparator` property can be used to specify a different value. The line separator can be specified as:\n\n* `SYSTEM` (uses the system default)\n* `UNIX` (uses `\\n`)\n* `WINDOWS` (uses `\\r\\n`), or\n* any other string.\n\nFor example, to use a pipe (`|`) as separator between stacktrace elements you would use the following configuration:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <lineSeparator>|</lineSeparator>\n    </throwableConverter>\n</encoder>\n```\n\nThe stacktrace will be rendered on a single line with `|` between frames as follows (the line is truncated for readability):\n\n```\njava.lang.RuntimeException: Unable to invoke service|\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)|\tat org.c\n```\n\n\n### Root Cause First\n\nStacktraces are usually rendered with the root cause appearing last.\nYou can invert the order and have the root cause output first by setting the `rootCauseFirst` property to `true` (`false` by default).\n\nSample output:\n\n```\njava.lang.RuntimeException: Destination unreachable\n\tat org.company.stack.gen.StackGenerator.two(StackGenerator.java:58)\n\tat org.company.stack.gen.StackGenerator.one(StackGenerator.java:55)\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:38)\n\t... 6 common frames omitted\nWrapped by: java.lang.RuntimeException: Unable to invoke service\n\tat org.company.stack.gen.StackGenerator.causedBy(StackGenerator.java:40)\n\tat org.company.stack.gen.StackGenerator.generateCausedBy(StackGenerator.java:34)\n\tat org.company.stack.framework.Dispatcher.invoke(Dispatcher.java:11)\n\tat org.company.stack.framework.Dispatcher.dispatch(Dispatcher.java:8)\n\tat org.company.stack.Sample.execute(Sample.java:79)\n\tat org.company.stack.Sample.rootCauseFirst(Sample.java:66)\n\tat org.company.stack.Sample.main(Sample.java:18)\n```\n\n\n### Conditional Output\n\nStandard Logback [EventEvaluators](https://logback.qos.ch/manual/filters.html#evalutatorFilter) can be used to determine if the stacktrace should be rendered.\n\nEventEvaluators are used to _skip_ generation of the stack trace for matching ILoggingEvents. In other words, an evaluator must evaluate to `false` (do not skip) to include the stacktrace...\n\nThe following sample configuration leverage the Logback [JaninoEventEvaluator](https://logback.qos.ch/manual/filters.html#JaninoEventEvaluator) event evaluator to output the stacktrace only if the log message contains the word `billing`:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n        <evaluator class=\"ch.qos.logback.classic.boolex.JaninoEventEvaluator\">\n            <expression>return !message.contains(\"billing\");</expression>\n        </evaluator>\n    </throwableConverter>\n</encoder>\n```\n\nMultiple evaluators can be registered and are evaluated in the order in which they are registered. The stacktrace is only generated if all evaluators returned `false`.\n\n\n\n### Stack Hashes\n\n**To Be Documented**\n\nComputing and inlining hexadecimal hashes for each exception stack using the `inlineHash` or `stackHash` provider ([more info](stack-hash.md)).\n\n\n\n### Using with PatternLayout\n\nTo use this with a PatternLayout, you must configure a new \"conversionRule\" as described [here](http://logback.qos.ch/manual/layouts.html#customConversionSpecifier). \n\nFor example:\n\n```xml\n<!-- Define a new conversion rule named \"stack\" -->\n<conversionRule conversionWord=\"stack\"\n                converterClass=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\" />\n```\n\nThis configuration registers the `ShortenedThrowableConverter` under the name `stack`. From there the converter can be used in a PatternLayout using the syntax `%stack{options}` with optional configuration options between `{}`, each separated by a comma.\n\nThe first three options must appear in the following order:\n\n1. maxDepthPerThrowable - `full` or `short` or an integer value\n2. shortenedClassNameLength - `full` or `short` or an integer value\n3. maxLength - `full` or `short` or an integer value\n\nThe remaining options can appear in any order and are interpreted as follows:\n\n- keyword `rootFirst` - indicating that stacks should be printed root-cause first\n- keyword `inlineHash` - indicating that hexadecimal error hashes should be computed and inlined\n- keyword `inline` - indicating that the whole stack trace should be inlined, using `\\\\n` as separator\n- keyword `omitCommonFrames` - indicating that common frames should be omitted\n- keyword `keepCommonFrames` - indicating that common frames should be preserved\n- any other string:\n\t- first evaluated as the name of a registered Evaluator that will determine if the stacktrace is ignored,\n\t- if no evaluator is found with that name, the string is interpreted as a regex pattern for stack trace elements to exclude\n\nFor example,\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>[%thread] - %msg%n%stack{5,1024,10,rootFirst,omitCommonFrames,regex1,regex2,evaluatorName}</pattern>\n    </encoder>\n</appender>\n```\n\nNote that it is not possible to configure the `truncateAfter` feature when the converter is used within a pattern layout.\n\n\n\n## Registering Additional Providers\n\n`LogstashEncoder`, `LogstashAccessEncoder` and their \"layout\" counterparts all come with a predefined set of encoders. You can register additional JsonProviders using the `<provider>` configuration property as shown in the following example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    <!-- Add a new provider after those than come with the LogstashEncoder -->\n    <provider class=\"net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider\">\n        <pattern>\n          {\n             \"message\": \"%mdc{custom_value} %message\"\n          }\n        </pattern>\n    </provider>\n\n    <!-- Disable the default message provider -->\n    <fieldNames>\n        <message>[ignore]</message>\n    </fieldNames>\n</encoder>\n```\n\nYou can add several additional JsonProviders using multiple `<provider>` entries. They will appear just after the default providers registered by the LogstashEncoder.\n\nIn this example, the pattern provider produces a \"message\" JSON field that will conflict with the message field produced by the MessageJsonProvider already registered by the LogstashEncoder itself. Different options to avoid the conflict:\n\n- you instruct LogstashEncoder to use a different field name using the [fieldNames](#customizing-standard-field-names) configuration property;\n- you disable the message provider that comes with the encoder (that's the option illustrated in the example above);\n- you use a different field name in your pattern.\n\n\n## Prefix/Suffix/Separator\n\nYou can specify a prefix (written before the JSON object),\nsuffix (written after the JSON object),\nand/or line separator (written after suffix),\nwhich may be required for the log pipeline you are using, such as:\n\n* If you are using the Common Event Expression (CEE) format for syslog, you need to add the `@cee:` prefix.\n* If you are using other syslog destinations, you might need to add the standard syslog headers.\n* If you are using Loggly, you might need to add your customer token.\n\nFor example, to add standard syslog headers for syslog over UDP, configure the following:\n\n```xml\n<configuration>\n    <conversionRule conversionWord=\"syslogStart\" converterClass=\"ch.qos.logback.classic.pattern.SyslogStartConverter\"/>\n\n    <appender name=\"stash\" class=\"net.logstash.logback.appender.LogstashUdpSocketAppender\">\n        <host>MyAwesomeSyslogServer</host>\n        <!-- port is optional (default value shown) -->\n        <port>514</port>\n        <layout>\n            <prefix class=\"ch.qos.logback.classic.PatternLayout\">\n                <pattern>%syslogStart{USER}</pattern>\n            </prefix>\n        </layout>\n    </appender>\n\n    ...\n</configuration>\n```\n\nWhen using the `LogstashEncoder`, `LogstashAccessEncoder` or a composite encoder, the prefix is an `Encoder`, not a `Layout`, so you will need to wrap the prefix `PatternLayout` in a `LayoutWrappingEncoder` like this:\n\n```xml\n<configuration>\n    ...\n    <appender ...>\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n            ...\n            <prefix class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n                <layout class=\"ch.qos.logback.classic.PatternLayout\">\n                    <pattern>@cee:</pattern>\n                </layout>\n            </prefix>    \n        </encoder>\n    </appender>\n</configuration>\n```\n\nNote that logback's xml configuration reader will [trim whitespace from xml element values](https://github.com/qos-ch/logback/blob/c2dcbfcfb4048d11d7e81cd9220efbaaccf931fa/logback-core/src/main/java/ch/qos/logback/core/joran/event/BodyEvent.java#L27-L37).  Therefore, if you want to end the prefix or suffix pattern with whitespace, first add the whitespace, and then add something like `%mdc{keyThatDoesNotExist}` after it.  For example `<pattern>your pattern %mdc{keyThatDoesNotExist}</pattern>`.  This will cause logback to output the whitespace as desired, and then a blank string for the MDC key that does not exist.\n\nThe line separator, which is written after the suffix, can be specified as:\n* `SYSTEM` (uses the system default)\n* `UNIX` (uses `\\n`)\n* `WINDOWS` (uses `\\r\\n`), or\n* any other string.\n\nFor example:\n\n```xml\n<configuration>\n    ...\n    <appender ...>\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n            ...\n            <lineSeparator>UNIX</lineSeparator>\n        </encoder>\n    </appender>\n</configuration>\n```\n\n## Composite Encoder/Layout\n\nIf you want greater flexibility in the JSON format and data included in LoggingEvents and AccessEvents, use the [`LoggingEventCompositeJsonEncoder`](/src/main/java/net/logstash/logback/encoder/LoggingEventCompositeJsonEncoder.java)  and  [`AccessEventCompositeJsonEncoder`](/src/main/java/net/logstash/logback/encoder/AccessEventCompositeJsonEncoder.java)  (or the corresponding layouts).\n\nThese encoders/layouts are composed of one or more JSON _providers_ that contribute to the JSON output.  No providers are configured by default in the composite encoders/layouts.  You must add the ones you want.\n\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        <mdc/>\n        <pattern>\n            <pattern>\n                {\n                  \"timestamp\": \"%date{ISO8601}\",\n                  \"myCustomField\": \"fieldValue\",\n                  \"relative\": \"#asLong{%relative}\"\n                }\n            </pattern>\n        </pattern>\n        <stackTrace>\n            <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n                <maxDepthPerThrowable>30</maxDepthPerThrowable>\n                <maxLength>2048</maxLength>\n                <shortenedClassNameLength>20</shortenedClassNameLength>\n                <exclude>^sun\\.reflect\\..*\\.invoke</exclude>\n                <exclude>^net\\.sf\\.cglib\\.proxy\\.MethodProxy\\.invoke</exclude>\n                <evaluator class=\"myorg.MyCustomEvaluator\"/>\n                <rootCauseFirst>true</rootCauseFirst>\n            </throwableConverter>\n        </stackTrace>\n    </providers>\n</encoder>\n```\n\n\nThe logstash-logback-encoder library contains many providers out-of-the-box,\nand you can even plug-in your own by extending `JsonProvider`.\nEach provider has its own configuration options to further customize it.\n\nThese encoders/layouts make use of an internal buffer to hold the JSON output during the rendering process. \nThe size of this buffer is set to `1024` bytes by default. A different size can be configured by setting the `minBufferSize` property to the desired value.\nThe buffer automatically grows above the `minBufferSize` when needed to accommodate with larger events. However, only the first `minBufferSize` bytes will be reused by subsequent invocations. It is therefore strongly advised to set the minimum size at least equal to the average size of the encoded events to reduce unnecessary memory allocations and reduce pressure on the garbage collector.\n\n### Providers common to LoggingEvents and AccessEvents\n\nThe table below lists the providers available to both _LoggingEvents_ and _AccessEvents_.\nThe provider name is the xml element name to use when configuring.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Provider</th>\n      <th>Description/Properties</th>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>context</tt></td>\n      <td><p>Outputs entries from logback's context.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Sub-object field name (no sub-object)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>nestedField</tt></td>\n      <td>\n        <p>Nests a JSON object under the configured fieldName.</p>\n        <p>The nested object is populated by other providers added to this provider.</p>\n        <p>See <a href=\"#nested-json-provider\">Nested JSON provider</a>.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name</li>\n          <li><tt>providers</tt> - The providers that should populate the nested object.</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>pattern</tt></td>\n      <td>\n        <p>Outputs fields from a configured JSON Object string,\n           while substituting patterns supported by logback's <tt>PatternLayout</tt>.\n        </p>\n        <p>\n           See <a href=\"#pattern-json-provider\">Pattern JSON Provider</a>\n        </p>\n        <ul>\n          <li><tt>pattern</tt> - JSON object string (no default)</li>          \n          <li><tt>omitEmptyFields</tt> - whether to omit fields with empty values (<tt>false</tt>)</li>          \n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>sequence</tt></td>\n      <td>\n        <p>Event sequence number.\n        </p>\n        <p>With Logback 1.3+ the sequence number is obtained from the event itself as long as the LoggerContext is configured with a `SequenceNumberGenerator` (which is not by default).\nIf no SequenceNumberGenerator is configured, the provider emits a warning and reverts to a locally generated incrementing number starting at 1.\n        </p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>sequence</tt>)</li>\n          <li><tt>sequenceProvider</tt> - Alternate strategy to obtain the sequence number associated with the supplied event. Must implement `Function<ILoggingEvent, Long>` or `Function<IAccessEvent, Long>` depending on the type of event to process.\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>threadName</tt></td>\n      <td><p>Name of the thread from which the event was logged.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>thread_name</tt>)</li>          \n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>timestamp</tt></td>\n      <td><p>Event timestamp.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>@timestamp</tt>)</li>\n          <li><tt>pattern</tt> - Output format (<tt>[ISO_OFFSET_DATE_TIME]</tt>)  See <a href=\"#customizing-timestamp\">Customizing Timestamp</a> for possible values.</li>\n          <li><tt>timeZone</tt> - Timezone (system timezone)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>uuid</tt></td>\n      <td>\n        <p>\n          Outputs random UUID as field value. Handy when you want to provide unique identifier\n          for log lines.\n        </p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>uuid</tt>)</li>\n          <li><tt>strategy</tt> - UUID generation strategy (<tt>random</tt>). Supported options: <ul><li><tt>random</tt> - for Type 4 UUID</li>\n          <li><tt>time</tt> - for Type 1 time based UUID</li>\n          </ul></li>\n          <li><tt>ethernet</tt> - Only for 'time' strategy. When defined - MAC address to use for location part of UUID. Set it to <tt>interface</tt> value to use real underlying network interface or to specific values like <tt>00:C0:F0:3D:5B:7C</tt></li>          \n        </ul>\n          <p>Note: The <a href=\"https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator/\"><tt>com.fasterxml.uuid:java-uuid-generator</tt></a> optional dependency must be added to applications that use the `uuid` provider.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>version</tt></td>\n      <td><p>Logstash JSON format version.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>@version</tt>)</li>\n          <li><tt>version</tt> - Output value (<tt>1</tt>)</li>\n          <li><tt>writeAsInteger</tt> - Write the version as a integer value (<tt>false</tt> = write as a string value)</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n### Providers for LoggingEvents\n\nThe [common providers mentioned above](#providers-common-to-loggingevents-and-accessevents), and the providers listed in the table below, are available for _LoggingEvents_.\nThe provider name is the xml element name to use when configuring. Each provider's configuration properties are shown, with default configuration values in parenthesis.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Provider</th>\n      <th>Description/Properties</th>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>arguments</tt></td>\n      <td>\n        <p>Outputs fields from the event arguments array.</p>\n        <p>See <a href=\"#event-specific-custom-fields\">Event-specific Custom Fields</a>.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Sub-object field name (no sub-object)</li>\n          <li><tt>includeNonStructuredArguments</tt> - Include arguments that are not an instance\n          of <a href=\"/src/main/java/net/logstash/logback/argument/StructuredArgument.java\"><tt>StructuredArgument</tt></a>. \n          Object field name will be <tt>nonStructuredArgumentsFieldPrefix</tt> prepend to the argument index.\n          (default=false)\n          </li>\n          <li><tt>nonStructuredArgumentsFieldPrefix</tt> - Object field name prefix (default=arg)</li>\n        </ul>\n      </td>\n    </tr> \n    <tr>\n      <td valign=\"top\"><tt>callerData</tt></td>\n      <td><p>Outputs data about from where the logger was called (class/method/file/line).</p>\n        <ul>\n          <li><tt>fieldName</tt> - Sub-object field name (no sub-object)</li>\n          <li><tt>classFieldName</tt> - Field name for class name (<tt>caller_class_name</tt>)</li>\n          <li><tt>methodFieldName</tt> - Field name for method name (<tt>caller_method_name</tt>)</li>\n          <li><tt>fileFieldName</tt> - Field name for file name (<tt>caller_file_name</tt>)</li>\n          <li><tt>lineFieldName</tt> - Field name for line number (<tt>caller_line_number</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>contextName</tt></td>\n      <td><p>Outputs the name of logback's context.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>context</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>loggerName</tt></td>\n      <td><p>Name of the logger that logged the message.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>logger_name</tt>)</li>          \n          <li><tt>shortenedLoggerNameLength</tt> - Length to which the name will be attempted to be abbreviated (no abbreviation)</li>          \n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>logLevel</tt></td>\n      <td><p>Logger level text (INFO, WARN, etc).</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>level</tt>)</li>          \n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>logLevelValue</tt></td>\n      <td><p>Logger level numerical value.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>level_value</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>logstashMarkers</tt></td>\n      <td><p>Used to output Logstash Markers as specified in <em>Event-specific Custom Fields</em>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>mdc</tt></td>\n      <td>\n        <p>Outputs entries from the Mapped Diagnostic Context (MDC).\n           Will include all entries by default.\n           When key names are specified for inclusion, then all other fields will be excluded.\n           When key names are specified for exclusion, then all other fields will be included.\n           It is a configuration error to specify both included and excluded key names.\n        </p>\n        <ul>\n          <li><tt>fieldName</tt> - Sub-object field name (no sub-object)</li>\n          <li><tt>includeMdcKeyName</tt> - Name of keys to include (all)</li>\n          <li><tt>excludeMdcKeyName</tt> - Name of keys to exclude (none)</li>\n          <li><tt>mdcKeyFieldName</tt> - Strings in the form <tt>mdcKeyName=fieldName</tt>\n              that specify an alternate field name to output for specific MDC key (none)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>keyValuePairs</tt></td>\n      <td>\n        <p>Outputs key value pairs added via slf4j's fluent api.\n           Will include all key value pairs by default.\n           When key names are specified for inclusion, then all other keys will be excluded.\n           When key names are specified for exclusion, then all other keys will be included.\n           It is a configuration error to specify both included and excluded key names.\n        </p>\n        <ul>\n          <li><tt>fieldName</tt> - Sub-object field name (no sub-object)</li>\n          <li><tt>includeKeyName</tt> - Name of keys to include (all)</li>\n          <li><tt>excludeKeyName</tt> - Name of keys to exclude (none)</li>\n          <li><tt>keyFieldName</tt> - Strings in the form <tt>keyName=fieldName</tt>\n              that specify an alternate field name to output for specific key (none)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>message</tt></td>\n      <td><p>Formatted log event message.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>message</tt>)</li>\n          <li><tt>messageSplitRegex</tt> - If null or empty, write the message text as is (the default behavior).\n              Otherwise, split the message text using the specified regex and write it as an array.\n              See the <a href=\"#customizing-message\">Customizing Message</a> section for details.</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>rawMessage</tt></td>\n      <td><p>Raw log event message, as opposed to formatted log where parameters are resolved.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>raw_message</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>rootStackTraceElement</tt></td>\n      <td><p>(Only if a throwable was logged) Outputs a JSON Object containing the class and method name from which the outer-most exception was thrown.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>root_stack_trace_element</tt>)</li>\n          <li><tt>classFieldName</tt> - Field name containing the class name from which the outermost exception was thrown (<tt>class_name</tt>)</li>\n          <li><tt>methodFieldName</tt> - Field name containing the method name from which the outermost exception was thrown (<tt>method_name</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>stackHash</tt></td>\n      <td><p>(Only if a throwable was logged) Computes and outputs a hexadecimal hash of the throwable stack.</p>\n        <p>This helps identifying several occurrences of the same error (<a href=\"stack-hash.md\">more info</a>).</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>stack_hash</tt>)</li>\n          <li><tt>exclude</tt> - Regular expression pattern matching <i>stack trace elements</i> to exclude when computing the error hash</li>\n          <li><tt>exclusions</tt> - Comma separated list of regular expression patterns matching <i>stack trace elements</i> to exclude when computing the error hash</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>stackTrace</tt></td>\n      <td><p>Stacktrace of any throwable logged with the event. Stackframes are separated by newline chars.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>stack_trace</tt>)</li>\n          <li><tt>throwableConverter</tt> - The <tt>ThrowableHandlingConverter</tt> to use to format the stacktrace (<tt>stack_trace</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>tags</tt></td>\n      <td><p>Outputs logback markers as a comma separated list.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>tags</tt>)</li>          \n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>throwableClassName</tt></td>\n      <td><p>(Only if a throwable was logged) Outputs a field that contains the class name of the thrown Throwable.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>throwable_class</tt>)</li>\n          <li><tt>useSimpleClassName</tt> - When true, the throwable's simple class name will be used. When false, the fully qualified class name will be used. (<tt>true</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>throwableMessage</tt></td>\n      <td><p>(Only if a throwable was logged) Outputs a field that contains the message of the thrown Throwable.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>throwable_message</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>throwableRootCauseClassName</tt></td>\n      <td><p>(Only if a throwable was logged and a root cause could be determined) Outputs a field that contains the class name of the root cause of the thrown Throwable.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>throwable_root_cause_class</tt>)</li>\n          <li><tt>useSimpleClassName</tt> - When true, the throwable's simple class name will be used. When false, the fully qualified class name will be used. (<tt>true</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>throwableRootCauseMessage</tt></td>\n      <td><p>(Only if a throwable was logged and a root cause could be determined) Outputs a field that contains the message of the root cause of the thrown Throwable.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>throwable_root_cause_message</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n### Providers for AccessEvents  \n\nThe [common providers mentioned above](#providers-common-to-loggingevents-and-accessevents), and the providers listed in the table below, are available for _AccessEvents_.\nThe provider name is the xml element name to use when configuring. Each provider's configuration properties are shown, with default configuration values in parenthesis.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Provider</th>\n      <th>Description/Properties</th>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>contentLength</tt></td>\n      <td><p>Content length.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>content_length</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>elapsedTime</tt></td>\n      <td><p>Elapsed time in milliseconds.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>elapsed_time</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>message</tt></td>\n      <td><p>Message in the form `${remoteHost} - ${remoteUser} [${timestamp}] \"${requestUrl}\" ${statusCode} ${contentLength}`.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>message</tt>)</li>\n          <li><tt>pattern</tt> - Output format of the timestamp (<tt>[ISO_OFFSET_DATE_TIME]</tt>). See <a href=\"#customizing-timestamp\">above</a> for possible values.</li>\n          <li><tt>timeZone</tt> - Timezone (system timezone)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>method</tt></td>\n      <td><p>HTTP method.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>method</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>protocol</tt></td>\n      <td><p>HTTP protocol.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>protocol</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>remoteHost</tt></td>\n      <td><p>Remote Host.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>remote_host</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>remoteUser</tt></td>\n      <td><p>Remote User.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>remote_user</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>requestedUri</tt></td>\n      <td><p>Requested URI.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>requested_uri</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>requestedUrl</tt></td>\n      <td><p>Requested URL.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>requested_url</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>requestHeaders</tt></td>\n      <td><p>Include the request headers.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (no default, must be provided)</li>\n          <li><tt>lowerCaseHeaderNames</tt> - Write header names in lower case (<tt>false</tt>)</li>\n          <li><tt>filter</tt> - A filter to determine which headers to include/exclude.\n          See <a href=\"/src/main/java/net/logstash/logback/composite/accessevent/HeaderFilter.java\"><tt>HeaderFilter</tt></a>\n          and <a href=\"/src/main/java/net/logstash/logback/composite/accessevent/IncludeExcludeHeaderFilter.java\"><tt>IncludeExcludeHeaderFilter</tt></a></li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>responseHeaders</tt></td>\n      <td><p>Include the response headers.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (no default, must be provided)</li>\n          <li><tt>lowerCaseHeaderNames</tt> - Write header names in lower case (<tt>false</tt>)</li>\n          <li><tt>filter</tt> - A filter to determine which headers to include/exclude.\n          See <a href=\"/src/main/java/net/logstash/logback/composite/accessevent/HeaderFilter.java\"><tt>HeaderFilter</tt></a>\n          and <a href=\"/src/main/java/net/logstash/logback/composite/accessevent/IncludeExcludeHeaderFilter.java\"><tt>IncludeExcludeHeaderFilter</tt></a></li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td valign=\"top\"><tt>statusCode</tt></td>\n      <td><p>HTTP status code.</p>\n        <ul>\n          <li><tt>fieldName</tt> - Output field name (<tt>status_code</tt>)</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n### Nested JSON Provider\n\nUse the `nestedField` provider to create a sub-object in the JSON event output.\n\nFor example...\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        <timestamp/>\n        <nestedField>\n            <fieldName>fields</fieldName>\n            <providers>\n                <logLevel/>\n            </providers>\n        </nestedField>\n    </providers>\n</encoder>\n```\n\n...will produce something like...\n\n```json\n{\n    \"@timestamp\": \"...\",\n    \"fields\": {\n        \"level\": \"DEBUG\"\n    }\n}\n```\n\n\n### Pattern JSON Provider\n\nWhen used with a composite JSON encoder/layout, the `pattern` JSON provider can be used to\ndefine a template for a portion of the logged JSON output.\nThe encoder/layout will populate values within the template.\nEvery value in the template is treated as a pattern for logback's standard `PatternLayout` so it can be a combination\nof literal strings (for some constants) and various conversion specifiers (like `%d` for date).\n\nThe pattern string (configured within the pattern provider) must be a JSON Object.\nThe contents of the JSON object are included within the logged JSON output.\n\nThis example...\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        <!-- provides the timestamp -->\n        <timestamp/>\n\n        <!-- provides the version -->\n        <version/>\n\n        <!-- provides the fields in the configured pattern -->\n        <pattern>\n            <!-- the pattern that defines what to include -->\n            <pattern>\n                { \"level\": \"%level\" }\n            </pattern>\n        </pattern>\n    </providers>\n</encoder>\n```\n... will produce something like...\n\n```\n{\n    \"@timestamp\": \"...\",\n    \"@version\": \"1\",\n    \"level\": \"DEBUG\"\n}\n```\n\nThe real power comes from the fact that there are lots of standard conversion specifiers so you\ncan customise what is logged and how. For example, you could log a single specific value from MDC with `%mdc{mykey}`.\nOr, for access logs, you could log a single request header with `%i{User-Agent}`.\n\nYou can use nested objects and arrays in your pattern.\n\nIf you use a null, number, or a boolean constant in a pattern, it will keep its type in the\nresulting JSON. However, only the text values are searched for conversion patterns.\nAnd, as these patterns are sent through `PatternLayout`, the result is always a string\neven for something which you may feel should be a number - like for `%b` (bytes sent, in access logs).\n\nYou can either deal with the type conversion on the logstash side or you may use special operations provided by this encoder.\nThe operations are:\n\n* `#asLong{...}` - evaluates the pattern in curly braces and then converts resulting string to a Long (or a `null` if conversion fails).\n* `#asDouble{...}` - evaluates the pattern in curly braces and then converts resulting string to a Double (or a `null` if conversion fails).\n* `#asBoolean{...}`- evaluates the pattern in curly braces and then converts resulting string to a Boolean. Conversion is case insensitive. `true`, `yes`, `y` and `1` (case insensitive) are converted to a boolean `true`, a `null` or empty string is converted to `null`, anything else returns `false`.\n* `asNullIfEmpty{...}` - evaluates the pattern in curly braces and the converts resulting string into `null` if it is empty.\n* `#asJson{...}` - evaluates the pattern in curly braces and then converts resulting string to json (or a `null` if conversion fails).\n* `#tryJson{...}` - evaluates the pattern in curly braces and then converts resulting string to json (or just the string if conversion fails).\n\nSo this example...\n\n```xml\n<pattern>\n    {\n        \"line_str\": \"%line\",\n        \"line_long\": \"#asLong{%line}\",\n        \"has_message\": \"#asBoolean{%mdc{hasMessage}}\",\n        \"json_message\": \"#asJson{%message}\"\n    }\n</pattern>\n```\n\n... and this logging code...\n\n```java\nMDC.put(\"hasMessage\", \"true\");\nLOGGER.info(\"{\\\"type\\\":\\\"example\\\",\\\"msg\\\":\\\"example of json message with type\\\"}\");\n```\n\n...will produce something like...\n\n```json\n{\n    \"line_str\": \"97\",\n    \"line_long\": 97,\n    \"has_message\": true,\n    \"json_message\": {\"type\":\"example\",\"msg\":\"example of json message with type\"}\n}\n```\n\nNote that the value that is sent for `line_long` is a number even though in your pattern it is a quoted text.\nAnd the `json_message` field value is a json object, not a string.\n\nYou can escape an operation by prefixing it with `\\` if you don't want it to be interpreted.\n\n\n#### Omitting fields with empty values\n \nThe pattern provider can be configured to omit fields with the following _empty_ values:\n* `null`\n* empty string (`\"\"`)\n* empty array (`[]`)\n* empty object (`{}`)\n* objects containing only fields with empty values\n* arrays containing only empty values\n\nTo omit fields with empty values, configure `omitEmptyFields` to `true` (default is `false`), like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        <pattern>\n            <omitEmptyFields>true</omitEmptyFields>\n            <pattern>\n                {\n                    \"logger\": \"%logger\",\n                    \"level\": \"%level\",\n                    \"thread\": \"%thread\",\n                    \"message\": \"%message\",\n                    \"traceId\": \"%mdc{traceId}\"\n                }\n            </pattern>\n        </pattern>\n    </providers>\n</encoder>\n```\n\nIf the MDC did not contain a `traceId` entry, then a JSON log event from the above pattern would not contain the `traceId` field...\n\n```json\n{\n    \"logger\": \"com.example...\",\n    \"level\": \"DEBUG\",\n    \"thread\": \"exec-1\",\n    \"message\": \"Hello World!\"\n}\n```\n\n#### LoggingEvent patterns\n\nFor LoggingEvents, conversion specifiers from logback-classic's\n[`PatternLayout`](http://logback.qos.ch/manual/layouts.html#conversionWord) are supported.\n\nFor example:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        <timestamp/>\n        <pattern>\n            <pattern>\n                {\n                    \"custom_constant\": \"123\",\n                    \"tags\": [\"one\", \"two\"],\n                    \"logger\": \"%logger\",\n                    \"level\": \"%level\",\n                    \"thread\": \"%thread\",\n                    \"message\": \"%message\",\n                    ...\n                }\n            </pattern>\n        </pattern>\n    </providers>\n</encoder>\n```\n\nNote that the [`%property{key}`](https://logback.qos.ch/manual/layouts.html#property) conversion specifier behaves slightly differently when used in the context of the Pattern Json provider. If the property cannot be found in the logger context or the System properties, it returns **an empty string** instead of `null` as it would normally do. For example, assuming the \"foo\" property is not defined, `%property{foo}` would return `\"\"` (an empty string) instead of `\"null\"` (a string whose content is made of 4 letters).\n\nThe _property_ conversion specifier also allows you to specify a default value to use when the property is not defined. The default value is optional and can be specified using the `:-` operator as in Bash shell. For example, assuming the \"foo\" property is not defined, `%property{foo:-bar}` will return `bar`.\n\n\n#### AccessEvent patterns\n\nFor AccessEvents, conversion specifiers from logback-access's\n[`PatternLayout`](http://logback.qos.ch/xref/ch/qos/logback/access/PatternLayout.html) are supported.\n\nFor example:  \n\n```xml\n<encoder class=\"net.logstash.logback.encoder.AccessEventCompositeJsonEncoder\">\n    <providers>\n        <pattern>\n            <pattern>\n                {\n                    \"custom_constant\": \"123\",\n                    \"tags\": [\"one\", \"two\"],\n                    \"remote_ip\": \"%a\",\n                    \"status_code\": \"%s\",\n                    \"elapsed_time\": \"%D\",\n                    \"user_agent\": \"%i{User-Agent}\",\n                    \"accept\": \"%i{Accept}\",\n                    \"referer\": \"%i{Referer}\",\n                    \"session\": \"%requestCookie{JSESSIONID}\",\n                    ...\n                }\n            </pattern>\n        </pattern>\n    </providers>\n</encoder>\n```\n\nThere is also a special operation that can be used with this AccessEvents:\n\n* `#nullNA{...}` - if the pattern in curly braces evaluates to a dash (`-`), it will be replaced with a `null` value.\n\nYou may want to use it because many of the `PatternLayout` conversion words from logback-access will evaluate to `-`\nfor non-existent value (for example for a cookie, header or a request attribute).\n\nSo the following pattern...\n\n```xml\n<pattern>\n    {\n        \"default_cookie\": \"%requestCookie{MISSING}\",\n        \"filtered_cookie\": \"#nullNA{%requestCookie{MISSING}}\"\n    }\n</pattern>\n```\n\n...will produce...\n\n```json\n{\n    \"default_cookie\": \"-\",\n    \"filtered_cookie\": null\n}\n```\n\n### Custom JSON Provider\n\nYou can create your own JSON provider by implementing the [`JsonProvider`](src/main/java/net/logstash/logback/composite/JsonProvider.java) interface (or extending one of the existing classes that implements the `JsonProvider` interface).\n\nThen, add the provider to a `LoggingEventCompositeJsonEncoder` like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n    <providers>\n        ...\n        <provider class=\"your.provider.YourJsonProvider\">\n            <!-- Any properties exposed by your provider can be set here -->\n        </provider>\n        ...\n    </providers>\n</encoder>\n```\n\nor a `LogstashEncoder` like this:\n\n```xml\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\n    ...\n    <provider class=\"your.provider.YourJsonProvider\">\n        <!-- Any properties exposed by your provider can be set here -->\n    </provider>\n    ...\n</encoder>\n```\n\nYou can do something similar for `AccessEventCompositeJsonEncoder` and `LogstashAccessEncoder` as well, if your `JsonProvider` handles `IAccessEvent`s.\n\n\n## Status Listeners\n\nDuring execution, the encoders/appenders/layouts provided in logstash-logback-encoder\nwill add logback status messages to the logback [`StatusManager`](https://logback.qos.ch/apidocs/ch/qos/logback/core/status/StatusManager.html).\nThese status messages are typically reported via a logback [`StatusListener`](https://logback.qos.ch/apidocs/ch/qos/logback/core/status/StatusListener.html).\n\nSince the [async appenders](#async-appenders) (especially the [tcp appenders](#tcp-appenders))\nreport warnings and errors via the status manager, a default status listener that\noutputs WARN and ERROR level status messages to standard out\nwill be registered on startup if a status listener has not already been registered.\nTo disable the automatic registering of the default status listener by an appender, do one of the following:\n* register a different logback [status listener](https://logback.qos.ch/manual/configuration.html#dumpingStatusData), or\n* set `<addDefaultStatusListener>false</addDefaultStatusListener` in each async appender.\n\n\n## Joran/XML Configuration\n\nConfiguring Logback using XML is handled by Logback's Joran configuration system. This section is a short description of the high level data types supported by Joran. For more information, please refer to the [official documentation](http://logback.qos.ch/manual).\n\n### Duration property\n\nDuration represents a laps of time.\nIt can be specified as an integer value representing a number of milliseconds, or a string such as \"20 seconds\", \"3.5 minutes\" or \"5 hours\" that will be automatically  converted by logback's configuration system into Duration instances.\nThe recognized units of time are the `millisecond`, `second`, `minute`, `hour` and `day`. The unit name may be followed by an \"s\". Thus, \"2000 millisecond\" and \"2000 milliseconds\" are equivalent. In the absence of a time unit specification, milliseconds are assumed.\n\nThe following examples are therefore equivalent:\n\n```xml\n<duration>2000</duration>\n<duration>2000 millisecond</duration>\n<duration>2000 milliseconds</duration>\n```\n\n### Comma separated list of values\n\nWhen specified, some properties accept a comma-separated list of values. \n\nLeading and trailing whistespace characters are removed from each value during the decoding process, including tabs (`\\t`), carriage return (`\\r`) and line feeds (`\\n`) - see the `String.trim()` function for more information. It is therefore safe to add an extra blank after the comma or write the values on multiple lines for better readability.\n\nThe examples below are equivalent and produce a list containing the values `valueA`, `valueB`, and `valueC`:\n\n```xml\n<property>valueA, valueB, valueC</property>\n\n<property>\n    valueA,\n    valueB,\n    valueC\n</property>\n```\n\nAlso, multiple consecutive comma are treated as a single delimiter. This allows you to write a generic configuration as follows where the actual value comes from an external environment variable whose value may be empty.\n\n```xml\n<property>valueA, ${ENV_VAR}, valueC</property>\n```\n\nIf needed, the comma delimiter may be escaped by prefixing it with a backslash (`\\`) to treat it as being part of the value instead of considered as an actual delimiter. The example below defines a list containing one single element whose value is the string `foo,bar`:\n\n```xml\n<property>foo\\,bar</property>\n```\n\n\n## Profiling\n\n<a href=\"https://www.yourkit.com/java/profiler/\"><img src=\"https://www.yourkit.com/images/yk_logo.svg\" alt=\"YourKit Logo\" height=\"22\"/></a>\n\nMemory usage and performance of logstash-logback-encoder have been improved\nby addressing issues discovered with the help of the\n[YourKit Java Profiler](https://www.yourkit.com/java/profiler/).\n\nYourKit, LLC has graciously donated a free license of the\n[YourKit Java Profiler](https://www.yourkit.com/java/profiler/)\nto this open source project.\n"
        },
        {
          "name": "license-header.txt",
          "type": "blob",
          "size": 0.5673828125,
          "content": "Copyright 2013-${year} the original author or authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.0419921875,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`\\\\unset -f command; \\\\command -v java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.5751953125,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Maven Start Up Batch script\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM M2_HOME - location of maven2's installed home dir\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM set title of command window\ntitle %0\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\n)\n\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\nif exist %WRAPPER_JAR% (\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Found %WRAPPER_JAR%\n    )\n) else (\n    if not \"%MVNW_REPOURL%\" == \"\" (\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n    )\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n        echo Downloading from: %DOWNLOAD_URL%\n    )\n\n    powershell -Command \"&{\"^\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n\t\t\"}\"^\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\n\t\t\"}\"\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Finished downloading %WRAPPER_JAR%\n    )\n)\n@REM End of extension\n\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\n@REM work with both Windows and non-Windows executions.\nset MAVEN_CMD_LINE_ARGS=%*\n\n%MAVEN_JAVA_EXE% ^\n  %JVM_CONFIG_MAVEN_PROPS% ^\n  %MAVEN_OPTS% ^\n  %MAVEN_DEBUG_OPTS% ^\n  -classpath %WRAPPER_JAR% ^\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\n\ncmd /C exit /B %ERROR_CODE%\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 33.7236328125,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>net.logstash.logback</groupId>\n    <artifactId>logstash-logback-encoder</artifactId>\n    <version>8.1-SNAPSHOT</version>\n\n    <name>Logstash Logback Encoder</name>\n    <description>Provides logback encoders, layouts, and appenders to log in JSON and other formats supported by Jackson</description>\n    <url>https://github.com/logfellow/logstash-logback-encoder</url>\n    <inceptionYear>2013</inceptionYear>\n\n    <scm>\n        <url>https://github.com/logfellow/logstash-logback-encoder</url>\n        <connection>scm:git:https://github.com/logfellow/logstash-logback-encoder</connection>\n        <developerConnection>scm:git:https://github.com/logfellow/logstash-logback-encoder</developerConnection>\n        <tag>HEAD</tag>\n    </scm>\n\n    <properties>\n        <java.version>11</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n        <!-- runtime dependencies -->\n        <jackson.version>2.17.2</jackson.version>\n        <java-uuid-generator.version>5.1.0</java-uuid-generator.version>\n        <logback-core.version>1.5.6</logback-core.version>\n        <logback-access.version>2.0.2</logback-access.version>\n\n        <!-- shaded runtime dependencies -->\n        <disruptor.version>3.4.4</disruptor.version>\n\n        <!-- test dependencies -->\n        <assertj.version>3.26.3</assertj.version>\n        <awaitility.version>4.2.1</awaitility.version>\n        <junit.version>5.10.3</junit.version>\n        <mockito.version>5.12.0</mockito.version>\n\n        <!-- maven plugins -->\n        <build-helper-maven-plugin.version>3.6.0</build-helper-maven-plugin.version>\n        <extra-enforcer-rules.version>1.8.0</extra-enforcer-rules.version>\n        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>\n        <license-maven-plugin.version>4.5</license-maven-plugin.version>\n        <maven-bundle-plugin.version>5.1.9</maven-bundle-plugin.version>\n        <maven-checkstyle-plugin.version>3.4.0</maven-checkstyle-plugin.version>\n        <maven-clean-plugin.version>3.4.0</maven-clean-plugin.version>\n        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n        <maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>\n        <maven-gpg-plugin.version>3.2.4</maven-gpg-plugin.version>\n        <maven-install-plugin.version>3.1.2</maven-install-plugin.version>\n        <maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>\n        <maven-javadoc-plugin.version>3.8.0</maven-javadoc-plugin.version>\n        <maven-release-plugin.version>3.1.1</maven-release-plugin.version>\n        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>\n        <maven-shade-plugin.version>3.6.0</maven-shade-plugin.version>\n        <maven-source-plugin.version>3.3.1</maven-source-plugin.version>\n        <maven-surefire-plugin.version>3.3.1</maven-surefire-plugin.version>\n        <nexus-staging-maven-plugin.version>1.7.0</nexus-staging-maven-plugin.version>\n        <xml-maven-plugin.version>1.1.0</xml-maven-plugin.version>\n\n        <checkstyle.version>10.17.0</checkstyle.version>\n\n        <!-- maven-javadoc-plugin configuration -->\n        <maven.javadoc.failOnError>true</maven.javadoc.failOnError>\n        <maven.javadoc.failOnWarnings>true</maven.javadoc.failOnWarnings>\n\n        <!-- the server id the maven-release-plugin uses to obtain credentials to use when pushing tags/commits -->\n        <project.scm.id>github</project.scm.id>\n\n        <!-- Subdirectory below the surefire reports directory where to store test reports.\n             Used to differentiate between multiple test executions with different dependencies (used by Github CI)\n         -->\n        <surefire.reportsSubDir>default</surefire.reportsSubDir>\n    </properties>\n\n    <licenses>\n        <license>\n            <name>Apache License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0</url>\n        </license>\n        <license>\n            <name>MIT License</name>\n            <url>http://www.slf4j.org/license.html</url>\n            <comments>\n                The portion of LogstashBasicMarker.java that has been copied from \n                org.slf4j.helpers.BasicMarker is released under the MIT License.\n            </comments>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <id>neilprosser</id>\n            <name>Neil Prosser</name>\n            <email>neil.prosser@gmail.com</email>\n            <organization>Nokia</organization>\n            <organizationUrl>http://music.nokia.com</organizationUrl>\n        </developer>\n        <developer>\n            <id>philsttr</id>\n            <name>Phil Clay</name>\n        </developer>\n        <developer>\n            <id>lusis</id>\n            <name>John E. Vincent</name>\n            <email>lusis.org+github.com@gmail.com</email>\n        </developer>\n        <developer>\n            <id>brenuart</id>\n            <name>Bertrand Renuart</name>\n        </developer>\n    </developers>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.fasterxml.jackson</groupId>\n                <artifactId>jackson-bom</artifactId>\n                <version>${jackson.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.junit</groupId>\n                <artifactId>junit-bom</artifactId>\n                <version>${junit.version}</version>\n                <scope>import</scope>\n                <type>pom</type>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback-core.version}</version>\n            <!--\n               Required for logging regular ILoggingEvents with a Logger.\n               Not needed if only logging IAccessEvents for access logs. \n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>${logback-core.version}</version>\n            <!--\n               \"provided\" since users of logstash-logback-encoder must also\n               directly depend on logback-classic or logback-access,\n               and both of those depend on logback-core transitively.\n            -->\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback.access</groupId>\n            <artifactId>common</artifactId>\n            <version>${logback-access.version}</version>\n            <!--\n               Required for logging IAccessEvents for access logs.\n               Not needed if only logging regular ILoggingEvents with a Logger.\n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-cbor</artifactId>\n            <!--\n                Only needed if net.logstash.logback.decorate.cbor is used.\n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-smile</artifactId>\n            <!--\n                Only needed if net.logstash.logback.decorate.smile is used.\n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-yaml</artifactId>\n            <!--\n                Only needed if net.logstash.logback.decorate.yaml is used.\n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.uuid</groupId>\n            <artifactId>java-uuid-generator</artifactId>\n            <version>${java-uuid-generator.version}</version>\n            <!--\n               Only needed if the UuidJsonProvider is used.\n            -->\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.lmax</groupId>\n            <artifactId>disruptor</artifactId>\n            <version>${disruptor.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>${assertj.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-subclass</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-junit-jupiter</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.awaitility</groupId>\n            <artifactId>awaitility</artifactId>\n            <version>${awaitility.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>${maven-compiler-plugin.version}</version>\n                <configuration>\n                    <release>${java.version}</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-enforcer-plugin</artifactId>\n                <version>${maven-enforcer-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>enforce</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <requireJavaVersion>\n                                    <version>[11,)</version>\n                                </requireJavaVersion>\n                                <requireMavenVersion>\n                                    <version>[3.5.0,)</version>\n                                </requireMavenVersion>\n                                \n                                <!-- Verify that there are no classes in dependencies having bytecode versions\n                                     higher than the minimum JDK version we support.\n                                 -->\n                                <enforceBytecodeVersion>\n                                    <maxJdkVersion>11</maxJdkVersion>\n                                    <ignoreClasses>\n                                        <ignoreClass>META-INF/versions/*</ignoreClass>\n                                    </ignoreClasses>\n                                    <ignoredScopes>\n                                        <ignoredScope>test</ignoredScope>\n                                    </ignoredScopes>\n                                </enforceBytecodeVersion>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>extra-enforcer-rules</artifactId>\n                        <version>${extra-enforcer-rules.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>com.mycila</groupId>\n                <artifactId>license-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <phase>process-sources</phase>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>${maven-jar-plugin.version}</version>\n                <configuration>\n                    <archive>\n                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n                        <manifestEntries>\n                            <Automatic-Module-Name>logstash.logback.encoder</Automatic-Module-Name>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n            </plugin>\n            \n            <!-- \n                Build a flatten POM (consumer)\n             -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>flatten-maven-plugin</artifactId>\n                <version>${flatten-maven-plugin.version}</version>\n                <configuration>\n                    <flattenMode>ossrh</flattenMode>\n                    <keepCommentsInPom>true</keepCommentsInPom>\n                    <updatePomFile>true</updatePomFile>\n                    <flattenedPomFilename>flattened-pom.xml</flattenedPomFilename>\n                    <outputDirectory>${project.build.directory}</outputDirectory>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>flatten</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>flatten</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            \n            <!-- \n                Remove shaded dependencies from the flatten POM\n             -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>xml-maven-plugin</artifactId>\n                <version>${xml-maven-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>transform</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <transformationSets>\n                        <transformationSet>\n                            <dir>${project.build.directory}</dir>\n                            <outputDir>${project.build.directory}</outputDir>\n                            <includes>\n                                <include>flattened-pom.xml</include>\n                            </includes>\n                            <stylesheet>src/xsl/flatten-pom.xslt</stylesheet>\n                        </transformationSet>\n                    </transformationSets>\n                </configuration>\n            </plugin>\n            \n            <!-- \n                Shade some dependencies inside the main jar.\n                \n                Note: don't forget to update the XSLT used to build the flatten POM when adding/removing\n                      shaded dependencies.\n             -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>${maven-shade-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <shadedArtifactAttached>false</shadedArtifactAttached>\n                    <createDependencyReducedPom>false</createDependencyReducedPom>\n                    <createSourcesJar>true</createSourcesJar>\n                    <shadeSourcesContent>true</shadeSourcesContent>\n                    <minimizeJar>true</minimizeJar>\n                    <artifactSet>\n                        <includes>\n                            <include>com.lmax:disruptor</include>\n                        </includes>\n                    </artifactSet>\n                    <filters>\n                        <filter>\n                            <artifact>com.lmax:disruptor</artifact>\n                            <excludes>\n                                <exclude>META-INF/MANIFEST.MF</exclude>\n                            </excludes>\n                        </filter>\n                    </filters>\n                    <relocations>\n                        <relocation>\n                            <pattern>com.lmax.disruptor</pattern>\n                            <shadedPattern>${project.groupId}.encoder.com.lmax.disruptor</shadedPattern>\n                        </relocation>\n                    </relocations>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <version>${maven-bundle-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <id>bundle-manifest</id>\n                        <phase>process-classes</phase>\n                        <goals>\n                            <goal>manifest</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <instructions>\n                        <!-- packages to export -->\n                        <Export-Package>net.logstash.logback.*</Export-Package>\n                        <!-- attach to Logback bundle as fragment -->\n                        <Fragment-Host>ch.qos.logback.classic</Fragment-Host>\n                        <!-- exclude following imports as required classes are relocated by shade plugin and ignore ch.qos.logback.[core,classic] because this is a fragment and gets them from parent. -->\n                        <Import-Package>!com.lmax.disruptor.*,!ch.qos.logback.classic.*,!ch.qos.logback.core.*,!org.slf4j.*,*</Import-Package>\n                    </instructions>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <phase>process-sources</phase>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            \n            <!-- Install JaCoCo agent and produce reports at the end of the build.\n            -->\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>jacoco-prepare-agent</id>\n                        <phase>process-test-classes</phase> <!-- must be ready for the `test` phase, default is \"initialize\" -->\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>jacoco-report</id>\n                        <phase>verify</phase> <!-- this is the default -->\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-clean-plugin</artifactId>\n                    <version>${maven-clean-plugin.version}</version>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-install-plugin</artifactId>\n                    <version>${maven-install-plugin.version}</version>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-source-plugin</artifactId>\n                    <version>${maven-source-plugin.version}</version>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                    <version>${maven-surefire-plugin.version}</version>\n                    <configuration>\n                        <!--\n                            GitHub CI runs tests against different jackson versions.\n                            Therefore, differentiate the report directories by jackson versions.\n                        -->\n                        <reportsDirectory>${project.build.directory}/surefire-reports/${surefire.reportsSubDir}</reportsDirectory>\n                    </configuration>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <version>${maven-javadoc-plugin.version}</version>\n                    <configuration>\n                        <!-- Enable all validation checks except \"accessibility\"\n                         -->\n                        <doclint>all,-missing,-accessibility</doclint>\n                        \n                        <!-- Setup links to external api docs\n                         -->\n                        <links>   \n                            <link>https://javadoc.io/doc/ch.qos.logback/logback-core/${logback-core.version}</link>\n                            <link>https://javadoc.io/doc/ch.qos.logback/logback-classic/${logback-core.version}</link>\n                            <link>https://javadoc.io/doc/ch.qos.logback.access/common/${logback-access.version}</link>\n                            \n                            <link>https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/${jackson.version}</link>\n                            <link>https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/${jackson.version}</link>\n                        </links>\n                        \n                        <!-- Explicitly set version. This should help to get rid of the following\n                             warning when building the project with JDK 11+:\n                             \n                                The code being documented uses modules but the packages defined in\n                                https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.\n                         -->\n                        <source>${java.version}</source>\n                        \n                        <!-- Shuts off non-error and non-warning messages, leaving only the\n                             warnings and errors appear.\n                         -->\n                        <quiet>true</quiet>\n                    </configuration>\n                </plugin>\n                \n                <!-- Configure checkstyle with sensible defaults for this project so it can be\n                     executed standalone from the CLI as follows:\n                     \n                         mvn checkstyle:check\n                 -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-checkstyle-plugin</artifactId>\n                    <version>${maven-checkstyle-plugin.version}</version>\n                    <configuration>\n                        <configLocation>src/checkstyle/checkstyle.xml</configLocation>\n                        <includeTestSourceDirectory>true</includeTestSourceDirectory>\n                    </configuration>\n                    <dependencies>\n                        <dependency>\n                            <groupId>com.puppycrawl.tools</groupId>\n                              <artifactId>checkstyle</artifactId>\n                              <version>${checkstyle.version}</version>\n                        </dependency>\n                    </dependencies>\n                </plugin>\n                \n                <plugin>\n                    <groupId>com.mycila</groupId>\n                    <artifactId>license-maven-plugin</artifactId>\n                    <version>${license-maven-plugin.version}</version>\n                    <configuration>\n                        <header>license-header.txt</header>\n                        <mapping>\n                            <java>SLASHSTAR_STYLE</java>\n                        </mapping>\n                        <includes>\n                            <include>src/main/java/**</include>\n                            <include>src/test/java/**</include>\n                        </includes>\n                        <defaultProperties>\n                            <year>2023</year>\n                        </defaultProperties>\n                    </configuration>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-release-plugin</artifactId>\n                    <version>${maven-release-plugin.version}</version>\n                </plugin>\n                \n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-resources-plugin</artifactId>\n                    <version>${maven-resources-plugin.version}</version>\n                </plugin>\n                \n                <!-- Java Code Coverage (JaCoCo)\n                 -->\n                <plugin>\n                    <groupId>org.jacoco</groupId>\n                    <artifactId>jacoco-maven-plugin</artifactId>\n                    <version>0.8.12</version>\n                    <configuration>\n                        <!-- Only instrument \"net.logstash.**\" by default\n                         -->\n                        <includes>\n                            <include>net/logstash/**</include>\n                        </includes>\n                        \n                        <!-- Produce XML report for Codecov, and HTML for local builds if user wants to\n                             have a look at it...    \n                         -->\n                        <formats>\n                            <format>XML</format>\n                            <format>HTML</format>\n                        </formats>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n    <profiles>\n        <profile>\n            <id>ossrh</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>${maven-gpg-plugin.version}</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.sonatype.plugins</groupId>\n                        <artifactId>nexus-staging-maven-plugin</artifactId>\n                        <version>${nexus-staging-maven-plugin.version}</version>\n                        <extensions>true</extensions>\n                        <configuration>\n                            <serverId>ossrh</serverId>\n                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                            <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        \n        <profile>\n            <id>java15</id>\n            <activation>\n                <jdk>[1.15,)</jdk>\n            </activation>\n            <properties>\n                <!-- A warning is emitted when javadoc is missing on a public/protected method.\n                     Temporarily disable failure in this case until the code is fully documented.\n                -->\n                <maven.javadoc.failOnWarnings>false</maven.javadoc.failOnWarnings>\n            </properties>\n        </profile>\n\n        <profile>\n            <id>github</id>\n            <activation>\n                <property>\n                    <name>env.CI</name>\n                </property>\n            </activation>\n            <properties>\n                <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n            </properties>\n        </profile>\n        \n        <!--\n            Profile used by the Eclipse Maven plugin (m2eclipse).\n            \n            Activation:\n                Profile is activated if the property \"m2e.version\" is found.\n                The Eclipse plugin automatically exports this property which in turn causes the profile\n                to be automatically activated under Eclipse.\n         -->\n        <profile>\n            <id>m2e</id>\n            <activation>\n                <property>\n                    <name>m2e.version</name>\n                </property>\n            </activation>\n\n            <build>\n                <!--\n                    Tell eclipse to use another directory for its generated classes than the one\n                    used by the command line Maven.\n                 -->\n                <directory>target-eclipse</directory>\n            </build>\n        </profile>\n        \n        <!-- \n            \"Fast\" profile that can be used during local development to disable most of the \"heavy\"\n            steps not strictly required to produce a final jar.\n         -->\n        <profile>\n            <id>fast</id>\n            <properties>\n                <maven.javadoc.skip>true</maven.javadoc.skip>\n                <maven.source.skip>true</maven.source.skip>\n                <license.skip>true</license.skip>\n                <checkstyle.skip>true</checkstyle.skip>\n            </properties>\n        </profile>\n        \n        <!--\n            Include samples used through the documentation\n        -->\n        <profile>\n            <id>samples</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>build-helper-maven-plugin</artifactId>\n                        <version>${build-helper-maven-plugin.version}</version>\n                        <executions>\n                            <execution>\n                                <id>add-sample-sources</id>\n                                <phase>generate-test-sources</phase>\n                                <goals>\n                                    <goal>add-test-source</goal>\n                                </goals>\n                                <configuration>\n                                    <sources>\n                                        <source>src/sample/java</source>\n                                    </sources>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        \n        <!--\n            Profile used to run backward compatibility tests against jackson 2.12\n        -->\n        <profile>\n            <id>compat-jackson</id>\n            <properties>\n                <jackson.version>2.12.7</jackson.version>\n                <surefire.reportsSubDir>jackson-${jackson.version}</surefire.reportsSubDir>\n            </properties>\n        </profile>\n    </profiles>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stack-hash.md",
          "type": "blob",
          "size": 20.193359375,
          "content": "# Details about stack hash\n\nThis page gives details about the **stack hash** feature (goal and implementation).\n\n\n## Why generating stack hashes?\n\nActually the `stack_hash` is meant to identify an error (throwable) with a **short** and **stable** signature, that \nwill help matching several distinct occurrences of the same type of error:\n\n* **short** for easing elasticsearch indexing, and take advantage of it (that's why we use a hex encoded hash),\n* **stable** is the tricky part, as the same type of error occurring twice may not generate exactly the same stack trace (see below).\n\nThis done, it becomes easy with elasticsearch or any other logs centralization and indexation system to:\n\n* **count** distinct type of errors that occur in your code over time,\n* **count** occurrences and frequency of a given type of error,\n* **detect** when a (new) type of error occurred for the first time (maybe linking this to a new version being deployed?).\n\nThe stack hash may also become a simple error id that you can link your bug tracker with...\n\n\n## Stack hash stability challenge by examples\n\n### Let's consider error stack 1\n\n*(the stack trace presented here has been cut by half from useless lines)*\n\n<pre>\n<b>com.xyz.MyApp$MyClient$MyClientException</b>: <strike>An error occurred while getting Alice's things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:26)</b>\n  at <b>com.xyz.MyApp$MyService.displayThings(MyApp.java:16)</b>\n  at <strike>com.xyz.MyApp$MyService$$FastClassByCGLIB$$e7645040.invoke()</strike><sup>(aop)</sup>\n  at <i>net.sf.cglib.proxy.MethodProxy.invoke()</i><sup>(aop)</sup>\n  at <i>org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed()</i><sup>(fwk)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke0()</i><sup>(aop)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>sun.reflect.DelegatingMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>java.lang.reflect.Method.invoke()</i><sup>(aop)</sup>\n  at <i>org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.AspectJAroundAdvice.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.transaction.interceptor.TransactionInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept()</i><sup>(fwk)</sup>\n  at <strike>com.xyz.MyApp$MyService$$EnhancerBySpringCGLIB$$c673c675.displayThings(&lt;generated&gt;)</strike><sup>(aop)</sup>\n  at <strike>sun.reflect.GeneratedMethodAccessor647.invoke(Unknown Source)</strike><sup>(aop)</sup>\n  at <i>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</i><sup>(aop)</sup>\n  at <i>java.lang.reflect.Method.invoke(Method.java:498)</i><sup>(aop)</sup>\n  at <i>org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)</i><sup>(fwk)</sup>\n  at <i>javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</i><sup>(jee)</sup>\n  at <i>org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)</i><sup>(fwk)</sup>\n  at <i>javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</i><sup>(jee)</sup>\n  at <i>org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</i><sup>(jee)</sup>\n  ...\n  at <i>org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)</i><sup>(fwk)</sup>\n  at <i>org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)</i><sup>(fwk)</sup>\n  at <i>org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)</i><sup>(fwk)</sup>\n  at <i>org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)</i><sup>(fwk)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</i><sup>(jee)</sup>\n  ...\n  at <i>org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</i><sup>(jee)</sup>\n  at <i>org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:436)</i><sup>(jee)</sup>\n  at <i>org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078)</i><sup>(jee)</sup>\n  at <i>org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)</i><sup>(jee)</sup>\n  at <i>org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)</i><sup>(jee)</sup>\n  at <i>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</i><sup>(jee)</sup>\n  at <i>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</i><sup>(jee)</sup>\n  at <i>org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</i><sup>(jee)</sup>\n  at <i>java.lang.Thread.run(Thread.java:748)</i><sup>(jee)</sup>\n  ...\nCaused by: <b>com.xyz.MyApp$HttpStack$HttpError</b>: <strike>I/O error on GET http://dummy/user/alice/things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$HttpStack.get(MyApp.java:40)</b>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:24)</b>\n  ... 23 common frames omitted\nCaused by: <b>java.net.SocketTimeoutException</b>: <strike>Read timed out</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$HttpStack.get(MyApp.java:38)</b>\n  ... 24 common frames omitted\n</pre>\n\n---\n\n<strike>Strike out elements</strike> may vary from one occurrence to the other:\n\n* <strike>error messages</strike><sup>(msg)</sup> often contain stuff related to the very error occurrence context,\n* <strike>AOP generated classes</strike><sup>(aop)</sup> may vary from one execution to another.\n\n*Italic* elements are somewhat not stable, or at least useless (purely technical). Ex:\n\n* <i>JEE container stuff</i><sup>(jee)</sup>: may change when you upgrade your JEE container version or add/remove/reorganize your servlet filters chain for instance,\n* <i>Spring Framework</i><sup>(fwk)</sup> underlying stacks (MVC, security) for pretty much the same reason,\n* <i>AOP and dynamic invocation</i><sup>(aop)</sup>: purely technical, and quite implementation-dependent.\n\nOnly **bolded elements** are supposed to be stable.\n\n\n### Now let's consider error stack 2\n\n*(shortened)*\n\n<pre>\n<b>com.xyz.MyApp$MyClient$MyClientException</b>: <strike>An error occurred while getting <b>Bob</b>'s things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:26)</b>\n  at <b>com.xyz.MyApp$MyService.displayThings(MyApp.java:16)</b>\n  at <strike>com.xyz.MyApp$MyService$$FastClassByCGLIB$$<b>07e70d1e</b>.invoke()</strike><sup>(aop)</sup>\n  at <i>net.sf.cglib.proxy.MethodProxy.invoke()</i><sup>(aop)</sup>\n  at <i>org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed()</i><sup>(fwk)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke0()</i><sup>(aop)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>sun.reflect.DelegatingMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>java.lang.reflect.Method.invoke()</i><sup>(aop)</sup>\n  at <i>org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.AspectJAroundAdvice.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.transaction.interceptor.TransactionInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept()</i><sup>(fwk)</sup>\n  at <strike>com.xyz.MyApp$MyService$$EnhancerBySpringCGLIB$$<b>e3f570b1</b>.displayThings(&lt;generated&gt;)</strike><sup>(aop)</sup>\n  at <strike>sun.reflect.<b>GeneratedMethodAccessor737</b>.invoke(Unknown Source)</strike><sup>(aop)</sup>\n  ...\nCaused by: <b>com.xyz.MyApp$HttpStack$HttpError</b>: <strike>I/O error on GET http://dummy/user/<b>bob</b>/things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$HttpStack.get(MyApp.java:40)</b>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:24)</b>\n  ... 23 common frames omitted\nCaused by: <b>java.net.SocketTimeoutException</b>: <strike>Read timed out</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$HttpStack.get(MyApp.java:38)</b>\n  ... 24 common frames omitted\n</pre>\n\n---\n\nYou may see in this example that most of the <strike>strike elements have slight <b>differences</b></strike> from error stack\n1 (messages and generated classes names).\n\nNevertheless it is the same exact error (despite the context is different as it applies to another user), and the goal\nhere is to be able to count them as *two occurrences of the same error*.\n\n### Now let's consider error stack 3\n\n*(shortened)*\n\n<pre>\n<b>com.xyz.MyApp$MyClient$MyClientException</b>: <strike>An error occurred while getting Alice's things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:26)</b>\n  at <b>com.xyz.MyApp$MyService.displayThings(MyApp.java:16)</b>\n  at <strike>com.xyz.MyApp$MyService$$FastClassByCGLIB$$e7645040.invoke()</strike><sup>(aop)</sup>\n  at <i>net.sf.cglib.proxy.MethodProxy.invoke()</i><sup>(aop)</sup>\n  at <i>org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.framework.ReflectiveMethodInvocation.proceed()</i><sup>(fwk)</sup>\n  at <i>org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed()</i><sup>(fwk)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke0()</i><sup>(aop)</sup>\n  at <i>sun.reflect.NativeMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>sun.reflect.DelegatingMethodAccessorImpl.invoke()</i><sup>(aop)</sup>\n  at <i>java.lang.reflect.Method.invoke()</i><sup>(aop)</sup>\n  ...\nCaused by: <b>com.xyz.MyApp$HttpStack$HttpError</b>: <strike>I/O error on GET http://dummy/user/alice/things</strike><sup>(msg)</sup>\n  at <b>com.xyz.MyApp$HttpStack.get(MyApp.java:40)</b>\n  at <b>com.xyz.MyApp$MyClient.getTheThings(MyApp.java:24)</b>\n  ... 23 common frames omitted\nCaused by: <b>javax.net.ssl.SSLException</b>: <strike>Connection has been shutdown: javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown</strike><sup>(msg)</sup>\n  at <b>com.sun.net.ssl.internal.ssl.SSLSocketImpl.checkEOF(SSLSocketImpl.java:1172)</b>\n  ... 24 common frames omitted\n</pre>\n\n---\n\nHere, you can see that the first and second errors are the same as in error stack 1, but the root cause is different (`SSLException` instead of `SocketTimeoutException`).\n\nSo in that case we don't want the top error hash computed for error stack 3 to be the same as for error stack 1.\n\n## Stack hash computation rules\n\nAs a conclusion, stack hash computation applies the following rules:\n\n1. a stack hash shall **not compute with the error message**\n2. a stack hash shall **compute with it's parent cause** (recurses)\n3. in order to stabilize the stack hash (over time and space), it's recommended to **exclude non-stable elements**\n\n\n## Using stack hash in `logstash-logback-encoder` components\n\n### `StackHashJsonProvider`\n\nThis provider computes the stack hash for any log event with a throwable, and adds it as a single JSON attribute (`stack_hash` by default).\n\nIt also supports defining a list of exclusion patterns.\n\n### `ShortenedThrowableConverter`\n\nSetting the `inlineHash` property to `true` in the `net.logstash.logback.stacktrace.ShortenedThrowableConverter` component\ncomputes and inlines stack hashes into the stack trace.\n\nThe exclusion patterns to shorten the stack trace are used to compute the stack hashes too.\n\nNote: if no exclusion pattern is specified and the `inlineHash` property is active, a minimal filter is used to filter out\nelements with no source info (null filename or linenumber < 0) to ignore generated classnames. The drawback is that it \nwill also exclude classes not compiled in debug mode (do not contain source info).\n\n## Recommended exclusion patterns\n\nIn a spring framework context, the following exclusion patterns produce pretty stable hashes:\n\n```xml\n  <provider class=\"net.logstash.logback.composite.loggingevent.StackHashJsonProvider\">\n    <!-- generated class names -->\n    <exclude>\\$\\$FastClassByCGLIB\\$\\$</exclude>\n    <exclude>\\$\\$EnhancerBySpringCGLIB\\$\\$</exclude>\n    <exclude>^sun\\.reflect\\..*\\.invoke</exclude>\n    <!-- JDK internals -->\n    <exclude>^com\\.sun\\.</exclude>\n    <exclude>^sun\\.net\\.</exclude>\n    <!-- dynamic invocation -->\n    <exclude>^net\\.sf\\.cglib\\.proxy\\.MethodProxy\\.invoke</exclude>\n    <exclude>^org\\.springframework\\.cglib\\.</exclude>\n    <exclude>^org\\.springframework\\.transaction\\.</exclude>\n    <exclude>^org\\.springframework\\.validation\\.</exclude>\n    <exclude>^org\\.springframework\\.app\\.</exclude>\n    <exclude>^org\\.springframework\\.aop\\.</exclude>\n    <exclude>^java\\.lang\\.reflect\\.Method\\.invoke</exclude>\n    <!-- Spring plumbing -->\n    <exclude>^org\\.springframework\\.ws\\..*\\.invoke</exclude>\n    <exclude>^org\\.springframework\\.ws\\.transport\\.</exclude>\n    <exclude>^org\\.springframework\\.ws\\.soap\\.saaj\\.SaajSoapMessage\\.</exclude>\n    <exclude>^org\\.springframework\\.ws\\.client\\.core\\.WebServiceTemplate\\.</exclude>\n    <exclude>^org\\.springframework\\.web\\.filter\\.</exclude>\n    <!-- Tomcat internals -->\n    <exclude>^org\\.apache\\.tomcat\\.</exclude>\n    <exclude>^org\\.apache\\.catalina\\.</exclude>\n    <exclude>^org\\.apache\\.coyote\\.</exclude>\n    <exclude>^java\\.util\\.concurrent\\.ThreadPoolExecutor\\.runWorker</exclude>\n    <exclude>^java\\.lang\\.Thread\\.run$</exclude>\n  </provider>\n```\n\nAlso notice that both `StackHashJsonProvider` and `ShortenedThrowableConverter` components support a single `<exclusions>`\nelement to set all exclusion patterns at once (as a coma separated list):\n\n```xml\n  <provider class=\"net.logstash.logback.composite.loggingevent.StackHashJsonProvider\">\n    <!-- coma separated exclusion patterns -->\n    <exclusions>\\$\\$FastClassByCGLIB\\$\\$,\\$\\$EnhancerBySpringCGLIB\\$\\$,^sun\\.reflect\\..*\\.invoke,^com\\.sun\\.,^sun\\.net\\.,^net\\.sf\\.cglib\\.proxy\\.MethodProxy\\.invoke,^org\\.springframework\\.cglib\\.,^org\\.springframework\\.transaction\\.,^org\\.springframework\\.validation\\.,^org\\.springframework\\.app\\.,^org\\.springframework\\.aop\\.,^java\\.lang\\.reflect\\.Method\\.invoke,^org\\.springframework\\.ws\\..*\\.invoke,^org\\.springframework\\.ws\\.transport\\.,^org\\.springframework\\.ws\\.soap\\.saaj\\.SaajSoapMessage\\.,^org\\.springframework\\.ws\\.client\\.core\\.WebServiceTemplate\\.,^org\\.springframework\\.web\\.filter\\.,^org\\.apache\\.tomcat\\.,^org\\.apache\\.catalina\\.,^org\\.apache\\.coyote\\.,^java\\.util\\.concurrent\\.ThreadPoolExecutor\\.runWorker,^java\\.lang\\.Thread\\.run$</exclusions>\n  </provider>\n```\n\nObviously it is recommended to use either multiple `<exclude>` elements or one single `<exclusions>`.\n\n## Tip: variabilize your exclusion patterns!\n\nIf you compute stack hashes with both `StackHashJsonProvider` and `ShortenedThrowableConverter` components, \nit is highly recommended to use **the same exclusion patterns** for both or - in some cases - you will not get same hashes.\n\nIn such a case, or even if you just want to make the exclusion patterns configurable, you shall use the `<exclusions>`\nfield (see above) in conjunction with a Logback variable.\n\nHere is an example:\n\n```xml\n  <!-- 1: define stack trace exclusion patterns in a variable -->\n  <property name=\"STE_EXCLUSIONS\" value=\"\\$\\$FastClassByCGLIB\\$\\$,\\$\\$EnhancerBySpringCGLIB\\$\\$,^sun\\.reflect\\..*\\.invoke,^com\\.sun\\.,^sun\\.net\\.,^net\\.sf\\.cglib\\.proxy\\.MethodProxy\\.invoke,^org\\.springframework\\.cglib\\.,^org\\.springframework\\.transaction\\.,^org\\.springframework\\.validation\\.,^org\\.springframework\\.app\\.,^org\\.springframework\\.aop\\.,^java\\.lang\\.reflect\\.Method\\.invoke,^org\\.springframework\\.ws\\..*\\.invoke,^org\\.springframework\\.ws\\.transport\\.,^org\\.springframework\\.ws\\.soap\\.saaj\\.SaajSoapMessage\\.,^org\\.springframework\\.ws\\.client\\.core\\.WebServiceTemplate\\.,^org\\.springframework\\.web\\.filter\\.,^org\\.apache\\.tomcat\\.,^org\\.apache\\.catalina\\.,^org\\.apache\\.coyote\\.,^java\\.util\\.concurrent\\.ThreadPoolExecutor\\.runWorker,^java\\.lang\\.Thread\\.run$\"/>\n  \n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\n      <providers>\n        ...\n        <stackTrace>\n          <throwableConverter class=\"net.logstash.logback.stacktrace.ShortenedThrowableConverter\">\n            <inlineHash>true</inlineHash>\n            <!-- 2: use defined variable -->\n            <exclusions>${STE_EXCLUSIONS}</exclusions>\n          </throwableConverter>\n        </stackTrace>\n        ...\n        <stackHash>\n          <!-- 2: use defined variable -->\n          <exclusions>${STE_EXCLUSIONS}</exclusions>\n        </stackHash>\n        ...\n      </providers>\n    </encoder>\n  </appender>\n```\n"
        }
      ]
    }
  ]
}