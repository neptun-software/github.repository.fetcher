{
  "metadata": {
    "timestamp": 1736708508238,
    "page": 709,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kong/unirest-java",
      "stars": 2633,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.19921875,
          "content": ".classpath\npom.xml.releaseBackup\n.project\ntarget\n.DS_Store\n.settings\nrelease.properties\n.idea\n*.iml\n.gitconfig\n_site/\nGemfile.lock\n.sass-cache/\n.jekyll-metadata\n1.jpg\ndependency-reduced-pom.xml\nsite\n```\n\n"
        },
        {
          "name": ".java-version",
          "type": "blob",
          "size": 0.0029296875,
          "content": "11\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.130859375,
          "content": "## 4.4.5\n* Issue #536 UnirestInstance should implement AutoCloseable\n\n## 4.4.4\n* issue #528 reset content headers when multiPartContent is called\n\n## 4.4.0\n* Issue #526 split connection timeout from request timeout. The request no longer has a connection timeout setting, and instead has a request timeout setting as a replacement. Previously these two settings had been conflated. The overall config also has a default request timeout that will be applied to all requests if the request setting is not set. The default setting is null which indicates a infinite timeout. \n\n## 4.3.2\n* Issue #523 when paging create a new copy of the request for each page rather than reusing the original\n* Issue #524 support the Partitioned flag on cookies for CHIPs (Cookies Having Independent Partitioned State) \n* Make Path public. Because its handy\n\n## 4.3.1\n* Added convenience methods for using ContentType with accepts and contentType methods\n\n## 4.3.0\nThe modules have been repackaged and put into new maven coordinates in order to avoid conflicts with the 3.x line of unirest.\nThe mock module has had its maven artifact ID changed only.\n\n| Old Maven Artifact ID | New Maven Artifact ID   | Old Class Package    | New Class Package            |\n|----|-------------------------|----------------------|------------------------------|\n|unirest-object-mappers-gson | unirest-modules-gson    | kong.unirest.gson    | kong.unirest.modules.gson    |\n|unirest-objectmapper-jackson | unirest-modules-jackson | kong.unirest.jackson | kong.unirest.modules.jackson |\n|unirest-mocks | unirest-modules-mocks   | kong.unirest.core    | kong.unirest.core    |\n\n\n## 4.2.9\n* re-work request summary to be closer in reality to the actual request for multipart requests.\n\n## 4.2.8\n* populate the content type for non-binary multiparts\n* added method to accept a form part with a ContentType type in addition to string\n\n## 4.2.7\n* Changes to the json CoreFactory to allow for multiple different strategies for finding the JsonEngine in the classpath.\n* Allow setting a custom JsonFactory directly\n\n## 4.2.6\n* Allow for per-request config of http version\n\n## 4.2.5\n* Minor optimizations and doc updates\n* Issue #511: pass the HTTP version from the config to the request\n\n## 4.2.3\n* issue #506 have thenConsume pass on a basic response with no body so that other things like retry logic and interceptors can function properly\n\n## 4.2.2\n* Unirest-Mocks: add some options for doing verify by adding a 'Times' param for things like never() and exactly(number)\n* In 429/503 retry logic skip retry when response is null\n\n## 4.2.1\n* #503 Remove old retry setting that no longer works with the Java client\n* #504 allow asserting just one expectation verification on mock asserts\n\n## 4.1.1\n* issue #493: Copy status text from MockResponse\n* MockClient not properly evaluating verb in matching invokes\n* Expose a way in MockClient to supply a handler supplier for responses based dynamically on the request. Great for creating TestDouble services.\n\n## 4.1.0\n* No longer supporting shaded jars. Core Unirest no longer has any dependencies at all, and the modular framework of the library no longer jives with the shade-plugin causing other issues.\n\n## 4.0.12\n* Expose headers on RequestSummary\n\n## 4.0.11\n* Support retry on async requests\n\n## 4.0.10\n* Java TTL is in seconds not millies\n\n## 4.0.9\n* Expose a RetryStrategy to allow more advanced overrides of retry-behavior\n  * Allow client to determine IF the request should be retries\n  * Allow clients to determine the wait time\n\n\n## 4.0.8\n* Add 503 to the list of default retryable codes\n* Sets the Java TTL when configured\n\n## 4.0.6 - 4.0.7 (RIP)\n* Eaten by maven central\n\n## 4.0.5\n* Issue #493 Make MockClient take a MockResponse properly\n* Documentation and upgrade guide fixes\n\n## 4.0.4\n* Issue #484 Support headers with null values\n\n## 4.0.3\n* Another tweek to the BOM\n* Update dependencies (Jackson, GSON, Junit/Mockito)\n\n## 4.0.2\n* Fix BOM coordinates\n\n## 4.0.0\n* Java 11+ is now a requirement\n* HTTP2 support\n* WebSocket support\n* Apache Replaced by native Java HTTP Client\n* Modular Maven config with bom\n* Zero external runtime dependencies by default\n* You MUST include JSON support on your own ([see upgrade guide](mkdocs/docs/upgrade-guide))\n* New Maven coordinates\n* New packaging in order to not conflict with older versions\n\n## 3.14.5\n* fix issue introduced with 3.14.4 where binary data is not read\n\n## 3.14.4\n* Fix NullPointerException in MockClient\n* Fix argument validation in MonitoringInputStream\n\n## 3.14.3\n* Attempt to skip recovering the body from large binary responses like files when an error occurs.\n\n## 3.14.2\n* issue #469, do not add bytes twice in MonitoringInputStream\n\n## 3.14.1\n* Add the RequestSummary to the HttpResponse\n\n## 3.14.0\n* issue #461 return HttpResponse<Empty> for asEmpty()\n* issue #450 add authenticated proxies to request\n* issue #451 pass original failure reason to new mapped response in ifFailure\n* issue #444, add ability to directly assert a body (only works with non-multipart bodies\n* issue #444, add ability to directly assert a body field in a multipart request\n* re-name some methods on the Assert interface to better express a fluent feel\n\n## 3.13.13\n* Cookie dates always follow US Locale to avoid invalid unicode in headers\n\n## 3.13.12\n* Allow use of progress monitor for byte[] bodies\n* Dependency upgrades\n\n## 3.13.11\n* Content-Type should be overwritten rather than adding a second Content-Type\n* Forcing multipart overrides content-type headers\n\n## 3.13.9\n* Bypass silly NPE in Json Parsing\n\n## 3.13.8\n* Made HttpMethod::all static\n\n## 3.13.7\n* Dependency upgrades\n\n## 3.13.6\n* issue #424 Cannot use response.mapError with ByteResponse\n\n## 3.13.5\n* Bump httpasyncclient dependency to 4.1.5 for [bug fixes](http://www.apache.org/dist/httpcomponents/httpasyncclient/RELEASE_NOTES-4.1.x.txt).\n\n## 3.13.4\n* Add ability to override all Headers with a map\n\n## 3.13.3\n* Support a way to override Apache HttpClientBuilder options with the Client Builder. All Unirest configs are set first, then the consumer is called which allows consumers to override or add additional configs:\n```java\n Unirest.config()\n        .httpClient(ApacheClient.builder(c -> c.setMaxConnTotal(5000));\n```\n\n## 3.13.2\n* Allow using a MockResponse in the MockRequestBuilder\n\n## 3.13.1\n* add some new features to MockClient\n    * mockClient.reset() will clear any expectations\n    * mockClient.defaultResponse() returns a default response expectation for when an explicit expectation was not matched\n    * thenReturn(Supplier<String> supplier) allows you to set the response body as a supplier to be invoked at request time.\n\n## 3.13.0\n* Support InputStreams as bodies.\n* Support ProgressMonitors for InputStream bodies\n* Unirest-Mocks now includes a MockResponse<T> and a MockConfig for use independent of the MockClient\n\n## 3.12.0\n* Bump GSON to 2.8.8\n* Support honoring Retry-After headers on 429/529 for regular (not async) requests.\n    * This feature will likely not make it to async until Unirest 4.\n    * Can be enabled with ```Unirest.config().retryAfter(true);```\n    * Has a max re-try counter with a default of 10 which can be set with:\n        * ```Unirest.config().retryAfter(true, maxNumberOfRetries);```\n    * ðŸ”¥ While Honoring The Retry-After header the thread will be blocked! ðŸ”¥\n        * It is highly recommend that this feature be used in conjunction with a circuit-breaking framework.\n        * Let's say you have a web app that is making Unirest calls to downstream system X. You have many requests invoking this same service. If X starts to return 429's and Unirest is waiting on ALL of those requests. Unirest will quickly consume all your threads. At this time Unirest has no circuit-breaker of it's own to detect that this is happening. It will simply be happy to pause all of your threads forever.\n\n## 3.11.13\n* Bump Jackson version in object-mapper-jackson to 2.12.4\n* Bump test and CI dependencies\n\n## 3.11.12\n* make the default basic cache concurrent.\n\n## 3.11.11\n* useSystemProperties should be reset back to false on reset\n\n## 3.11.10\n* issue #394 use the configured Object Mapper rather than always Json\n* internal pre-factorings to get ready for Unirest 4\n\n## 3.11.09\n* Expected body param values for Mock expects need to be url encoded\n* Support ANY expectation on methods for MockClient. (e.g. ```expect(HttpMethod.GET)``)\n\n## 3.11.08\n* Adds new body matchers to the Mock client for asserting multipart forms.\n\n## 3.11.07\n* add a new object constructor on JSONObject for basic object serialization\n* issue #392 overwrite non-specified number serialization\n  \n## 3.11.06\n* add a convenience method for setting the content type\n* add a common reference to popular mime types\n* cache methods on Config were not returning the config for the builder pattern.\n* add a CookieSpecs const class for reference\n\n## 3.11.05\n*  issue #383 some problems with relocated packages.\n\n## 3.11.04\n* issue #383 missing some relocations for uber-jars\n* PR #381 support for custom ciphers and protocols for https requests\n* Mock server should call into metrics just like the real thing\n* CI/CD improvements\n\n## 3.11.03\n* issue #378 make getDefaultBaseUrl public\n* issue #376 make sane toString representations for body parts.\n* issue #376 add a method for getting a particular body field\n* issue #376 added a ```asString()``` to the request summary to get string of the request so far suitable for logging\n* issue #379 Interceptors are not called when using MockClient \n\n## 3.11.02\n* Issue #373 MockClient should pass the config to the response.\n* Issue #374 Add methods to add default cookies to the config\n* Issue #375 Do not Escape HTML in JSON \n\n## 3.11.01\n* Upgrade Apache Http Client to 4.5.13 (fixes incorrect handling of malformed authority component in request URIs.)\n* Upgrade Jackson to 2.11.3 for the Jackson object mapper module\n* Upgrade various test and ci dependencies\n\n## 3.11.00\n* issue #368 honor hosts header when set by consumer. This mimics behavior in Postman\n* issue #370 expose copyOptions for file downloads\n* issue #265 New Mocking framework! See the unirest-mocks module.\n* issue #305 adding a noCharset() method as a more obvious way  to do noCharset(null)\n* Added Documentation\n* Merged the request ```body(JSONObject)``` amd ```body(JSONArray)``` into common ```body(JSONElement)``` method\n* Filled in some missing methods on RequestBodyEntity from HttpRequestWithBody to fully allow chaining in different orders.\n\n## 3.10.00\n* Introduce new HttpStatus constants class for reference to Http response codes.\n* Switch the ApacheClient to use Apache's build in eviction monitor rather than a custom one.\n* Add native default support for various Java DateTime types for the built in object mapper. All types will serialize to ISO-8601. Parsing from json will attempt various ISO variants.\n   * Types Supported:\n      * ZonedDateTime\n      * LocalDateTime\n      * LocalDate\n      * Calendar\n      * Date\n\n## 3.9.00 \n* Issue #362 when passing a string to the body method for a post, route as a string rather than passing to the object mapper.\n* Issue #362 when passing a native Unirest JSON Type to the body method for a post, route as a Json Type rather than passing to the object mapper.\n* issue #363 support multiple interceptors\n\n## 3.8.06\n* issue #359 make the default object mapper lazy so gson can be excluded\n\n### 3.8.01-.05 (RIP)\n   * sacrificed to an angry Nexus god.\n   * Nexus deploy plugin upgraded\n\n## 3.8.00 \n* Minor updates to org.apache.httpcomponents to 4.5.12\n* Upgrade Jackson to 2.11.0 \n* Switch all unit tests to JUnit 5 and update Mockito\n* issue #358 add ability to set a collection of cookies\n* issue #325 add response caching framework\n\n## 3.7.04\n* issue #357 Nulls are not serialized on JSONElement::toString\n\n## 3.7.03\n*  fix defaultBaseUrl to return the config builder\n\n## 3.7.02\n* Issue #348 Add 'Duration' as flavor to configure connection TTL\n* Issue #350 Parsing error occurs when POST response is empty gzip content type\n\n## 3.7.01\n* Issue #345 better error for path segment missing in JSONPointer\n* Support ```mapError``` to  map into a String\n\n## 3.7.00\n* Issue #342: Add a default base URL configuration\n\n## 3.6.01\n* Issue #341:\n   * Do not URLDecode cookie values because they may not be and decoding can remove legit values like +\n   * Split cookie pairs on the first = only so values can have =\n\n## 3.6.00\n* issue #336 Add ProgressMonitor for file downloads.\n\n## 3.5.00\n* Re-package the object mapper sub-modules to work with Java 11 per issue #324.\n* Update Jackson to 2.10.2\n* Update various build tools to work with Java 11\n\n## 3.4.04\n* issue #335 keep around failure bodies for mapping to error objects\n* Request objects implement equals for future feature to support request caching\n\n## 3.4.03\n* Patch bump of all Apache dependencies\n* Patch bump of gson\n* Minor bump of test dependencies: junit, mockito, etc\n\n## 3.4.02\n* #333 Spaces in route parameters\n* added the SameSite cookie attribute to the cookie parser\n* Updated checkstyle test dependency for security\n\n## 3.4.01\n* #331 ArrayIndexOutOfBoundsException when parsing cookie\n* Handle quoted cookie values\n\n## 3.4.00\n* Add methods to add cookies to the request and read cookie from the response\n\n## 3.3.00\n* Allow setting a custom HostNameVerifier for issue #322\n* By default use DefaultHostNameVerifier rather than the noop one\n\n## 3.2.00\n* Allow users to inject a custom SSLContext into the Config for security\n* Allow for a custom interceptor that is called when\n   * Before the request\n   * After the request\n   * When a fatal connection error happens.\n* Directly exposing Apache Interceptors is now deprecated\n* #319 escape spaces and tabs in raw urls\n* Override  toString on Headers for better logging pr #321\n\n## 3.1.02\n* #308 When parsing an error body allow for non-parsing error bodies\n\n## 3.1.00\n* #301 Unirest is now configured by default with a JsonObjectMapper\n* #302 Support a globally configured error consumer \n* JsonNode now has a ```toPrettyString``` method for getting a formatted json string\n\n## 3.0.00\n* Replace the dependency on org.json with a native kong.unirest library powered by gson that matches org.json interfaces. See the [Upgrade Guide](mkdocs/docs/upgrade-guide) for details.\n* Issue #299. Remove gzip content-encoding header after decompression on async client\n\n## 2.4.01\n* #308 When parsing an error body allow for non-parsing error bodies\n\n## 2.4.00\n* add an entire new return type: ```asBytes()``` (as well as async versions) will return a raw byte[] array.\n\n## 2.3.17\n* Issue #292: Use per request Object Mapper for request bodies.\n\n## 2.3.16\n* Catch the proper error rather than Exception in the old-apache compatibility fix\n\n## 2.3.15\n* Update jackson-databind to 2.9.9.3 because .2 has shenanigans \n\n## 2.3.14\n* Update jackson-databind to 2.9.9.2 to address moderate security vulnerability\n\n## 2.3.13\n* Add ```FAIL_ON_UNKNOWN_PROPERTIES = false``` to the default Jackson object mapper.\n\n## 2.3.12\n* Remember when an older version of apache was on the path for the remainder of the runtime\n\n## 2.3.11\n* Skip calling apache method that may not exist if older versions of client are on the path to avoid MethodNotFound exceptions.\n* Add a config option for setting the TTL of persistent connections:/ issue #286\n\n## 2.3.10\n* Update of jackson-databind for CVE-2019-12814\n\n## 2.3.09\n* #284 allow setting a custom factory for the RequestConfig \n\n## 2.3.08\n* #282 force maven not to pick the async clients version of client\n\n## 2.3.07\n* #280 regular Apache client not picking up max connections\n\n## 2.3.06\n* Updated dependencies to latest, including Apache Http Client (4.5.9)\n\n## 2.3.05\n* Unriest is now packaged both as a traditional jar and as a standalone jar with all of it's dependencies shaded. This is nice when you have a large project where many components may use different versions of things like Apache Http Client.\n\n## 2.3.02\n* Remove mistaken dependency that should have been scoped to test.\n\n## 2.3.01\n* Update Jackson dependency in object-mapper-jackson due to security.\n\n## 2.3.00\n* #267 make sure hooks are registered regardless of where we are in the lifecycle of the client engines\n* #264 Adds a metric hook for observing the health and performance of unirest. \n* #270 Throw a more helpful error when a older version of Apache Client has been pulled in over Unirest's requirement.\n* Upgrade Apache Http Client Dependency to 4.5.8\n\n## 2.2.02\n* Add a mapper function to transform a HttpResponse<V> to a HttpResponse<T>\n```java\nHttpResponse<Integer> response = Unirest.get(\"http://someplace/number\")\n                .asString()\n                .map(Integer::valueOf);\n```\n* Add a few ways to map a error response into a different type than the original\n```java\nErrorThing error = Unirest.get(\"http://someplace\")\n                .asObject(Thing.class)\n                .mapError(ErrorThing.class); // will be null if the request had been successful\n\nUnirest.get(\"http://someplace\")\n                .asObject(Thing.class)\n                .ifFailure(ErrorThing.class, f -> {\n                    // f is a HttpResponse<ErrorThing> \n                    // this function is not called if the request was succesful\n                }); \n\n```\n\n## 2.2.01\n* add cookiespec policies to config. These are the same as Apache Http Clients cookiespec. See org.apache.http.client.config.CookieSpec\n\n## 2.2.00\n* Introduce default implementations of popular object mappers\n    * Jackson\n    * GSON\n\n## 2.1.03\n* Finally address #26 You can add a file upload progress monitor. This monitor will get called for each file in a multipart file upload by name.\n``` java\n    Unirest.post(\"http://someplace\")\n           .field(\"myFile\", new File(\"/file/somthing.tar\")\n           .uploadMonitor((fieldName, fileName, bytesWritten, totalBytes) -> {\n                // draw a upload progress bar or something\n           })\n           .asEmpty()\n```\n* Fix an issue where when using generic methods that take object, passing in complex objects like InputStreams would not get send as the correct type.\n\n## 2.1.02\n* #120 support client certificates. You can pass in an entire keystore or just the path to it in the config.\n* part of #260: only support a single basic auth header.\n\n## 2.1.01\n* #260 add option to configure a default basic auth header\n\n## 2.1.00\n* #259 optionally flag the config to auto register the clients with shutdownhooks.\n* #165 allow forcing a simple url-encoded param POST/PUT to be multipart. This adds a new method to the body interface so bumping the minor.\n\n## 2.0.05\n* #118 enable overriding socket and connection timeouts per request\n* #72 enable passing a proxy per request. Only works with simple proxies for now.\n\n## 2.0.04\n* Disable SSL validation with ```Unirest.config().verifySsl(false)```. PLEASE DO NOT DO THIS IN PRODUCTION\n* Disable Automatic retries with ```Unirest.config().automaticRetries(false)```\n\n## 2.0.03\n* Make sure the GzipInputStream gets closed.\n* Support disabling compressed results which is asked for by default\n```java\nUnirest.config().requestCompression(false);\n```\n## 2.0.02\n* Pass route params as a map\n```java\nUnirest.get(\"http://example\")\n       .routeParam(ImmutableMap.of(\"cheese\", \"cheddar\", \"age\", 42))\n```\n\n# The following were releases from the merged OpenUnirest project\n\n### OpenUnirest:3.3.05\n* Add a noop response type when you just don't care about the body.\n```java\n   HttpResponse re = Unirest.get(\"http://no.body.knows\").asEmpty();\n```\n\n### OpenUnirest:3.3.04\n* Add the ability to follow a paged response by providing a lambda for the response type and one for getting the next page. It will stop once the next link is null or empty.\n* The PagedList has handy dandy methods to pass consumers to all success and failure responses.\n```java\nPagedList<JsonNode> result =  Unirest.get(\"http://and.pagey\")\n                .asPaged(\n                        r -> r.asJson(),\n                        r -> r.getHeaders().getFirst(\"nextPage\")\n                );\n```\n\n\n### OpenUnirest:3.3.03\n* Pulled isSuccess() up to the response interface so it can be used and enjoyed by everyone.\n\n### OpenUnirest:3.3.02\n* Add the ability to make requests to non-standard web methods for things like WebDAV, SVN, or other horrible things.\n```java\n   Unirest.request(\"CHEESE\", \"http://some.cheesy.thing\")\n          .asString();\n```\n\n### OpenUnirest:3.3.00\n* Slight breaking change with regard to accessing Apache specific classes via the config\n   * getClient and getAsyncClient return the Unirest containers for clients. You can still get to the Apache client through that for now but this is also deprecated. Eventually Unirest will make Apache just one of several modules.\n   * Apache client wrappers are now package local.\n* Add support for overriding the default expected encoding both on a per-request basis and as a default in the config.\n```java\n// Changing the default from UTF-8 for all requests\n// Unirest will still honor content-encoding if defined in the response headers\nUnirest.config().setDefaultResponseEncoding(\"windows-1250\");\n\n// Changing the default on a request. \n// This will explicitly be used EVEN IF the headers define something else.\nUnirest.get(\"http://some.file.with.windows.encoding/file.txt\")\n                .responseEncoding(\"windows-1250\")\n                .asString();\n```\n\n### OpenUnirest:3.2.06\n* access headers in order\n\n### OpenUnirest:3.2.05\n* UnirestInstance is autoclosable\n\n### OpenUnirest:3.2.04\n* Adds chainable ifSuccess and ifFailure consumer methods to the response. Now you can handle the response like\n```java\n Unirest.get(\"https://localhost/somewhere\")\n                .asString()\n                .ifSuccess(r -> log.info(\"Yippy!\"))\n                .ifFailure(r -> log.error(\"Booo\"));\n```\n\n### OpenUnirest:3.2.03\n* Allow the configuration of header suppliers.\n```java\n   Unirest.config().setDefaultHeader(\"trace\", () -> value);\n```\n\n### OpenUnirest:3.2.02\n* distinguish between set and add for default headers.\n\n### OpenUnirest:3.2.01\n* add method to replace a header rather than append to it.\n\n### OpenUnirest:3.3.00\n* Now you can stream the results into a file!\n   * It doesn't need to be a file either. It could be any result. Unirest will shove it in a file.\n```java\nFile file = Unirest.get(\"https://someplace/file.tar.gz\")\n                   .asFile(\"/local/storage/file.tar.gz\")\n                   .getBody();\n```\n\n### OpenUnirest:3.3.00\n* When encountering a parsing error with asObject or asJson capture the body in a UnirestParsingException\n* New BETA feature asFile method to stream the response into a file.\n\n### OpenUnirest:3.1.01\n* Detect if the async client has stopped for some reason and construct a new one. This one may be different from the one that was originally configured so we need to add a way to configure a supplier for clients rather than a direct client.\n\n### OpenUnirest:3.3.00\n* Deprecate methods that expose Apache. In the 4 line we will start supporting other clients. Primarily the java one supplied in Java9 (apache will still exist for 8-)\n* Add several functional methods for dealing with the raw response before the connection is closed. This is nice for large responses.\n\n### OpenUnirest:3.0.04\n* Parsing handler should capture unirest exceptions just like other exceptions.\n\n### OpenUnirest:3.0.03\n* Support Java system properties for proxies via ```Unirest.config().useSystemProperties(true);```\n    * https://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html\n\n### OpenUnirest:3.0.02\n* Add support for the authenticated proxies to the async client\n\n### OpenUnirest:3.0.01\n* Support for authenticated proxies with ```Unirest.config().proxy(\"proxy.server.host\", 80, \"username\",\"password\")```\n\n### OpenUnirest:3.3.00\n* This is a **major** release with several **breaking changes** which (other than the namespace change) should ONLY impact you if you are using some of Unirests more advanced features or custom configurations.\n* The maven artifact has changed to ```open-unirest-java```\n* The namespace has been shortened to just **unirest** (inspired by Java Spark)\n* The configuration system has been completely redone. Previously it was scattered across several classes and was entirely static. The new system has instances and supports multiple configurations. See the UPGRADE_GUIDE.md for details.\n    * Start accessing the config with ```Unirest.config()```\n* Almost everything is now fronted by interfaces, this makes testing easier.\n* Unirest itself can now be accessed as a interface with UnirestInstance\n* ObjectMappers can be passed in as part of the builder.\n* option no longer supports body (per http spec)\n* Accept and ContentType are now 1st class headers in the builder (```Unirest.get(path).accept(\"application/json\")```)\n* Major internal fixes so that which builder operations were available when is consistent.\n\n### OpenUnirest:2.5.03\n* Lazy init the HttpClients so they don't get in the way of setting custom clients.\n\n### OpenUnirest:2.5.02\n* More safety for issue #41\n\n### OpenUnirest:2.5.01\n* Fix Issue #41: possible init error in HttpClient under heavy load\n\n### OpenUnirest:2.5.00\n* Extracted Interface for HttpResponse to make testing easier\n\n### OpenUnirest:2.4.02\n* Updated org.json dependency\n\n### OpenUnirest:2.4.01\n* Add async versions of generic type methods\n\n### OpenUnirest:2.4.00\n* Issue #19 Add support for generic types with object mappers.\n\n### OpenUnirest:2.3.00\n* Add support for the JSON Patch standard (RFC6902) https://tools.ietf.org/html/rfc6902\n```java\n     Unirest.jsonPatch(MockServer.PATCH)\n            .add(\"/fruits/-\", \"Apple\")\n            .remove(\"/bugs\")\n            .replace(\"/lastname\", \"Flintsone\")\n            .test(\"/firstname\", \"Fred\")\n            .move(\"/old/location\", \"/new/location\")\n            .copy(\"/original/location\", \"/new/location\")\n            .asJson();\n```\n\n### OpenUnirest:2.2.12\n* Add optional flag overload to ```Unirest.shutDown(false)```. The flag indicates if the various Options should be cleared. This only applies to options that could survive a shutdown. The HttpClients and thread monitors will still be discarded.\n\n### OpenUnirest:2.2.11\n* Change default MultiPart mode to BROWSER_COMPATIBLE in order to support unicode filenames. Clients wishing to use the legacy mode can set it to STRICT. This should not be a problem for most users as few servers today lack support for unicode file names. Issue #35\n\n### OpenUnirest:2.2.10\n* Update Apache dependencies https://archive.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES-4.5.x.txt\n\n### OpenUnirest:2.2.08\n   * add an option to disable cookie management with ```Options.enableCookieManagement(false)```.\n   * In the future ignoring cookies will be the default.\n\n### OpenUnirest:2.2.07\n* Fix init error\n\n### OpenUnirest:2.2.06\n* added ability to turn off redirect following with ```Options.followRedirects(boolean enable)``` (default is true)\n\n### OpenUnirest:2.2.04\n* Add ```.charset(Charset charset)``` to POSTS (both form and body)\n* Clean up some ambiguous methods in form posting. This may be a breaking change for a very small number of users. There are better methods for handling these cases.\n* Added the ability to add HttpRequestInterceptors to the client. Though ```  Options.addInterceptor(new TestInterceptor()); ```\n\n### OpenUnirest:2.2.03\n* Expose the ```Options.init()``` method to restore the system to a fresh start after a shutdown.\n* ```Unirest.shutdown()``` no longer throws a checked exception\n\n### OpenUnirest:2.2.02\n* Fix NPE with null bodies from HEAD requests.\n\n### OpenUnirest:2.2.01\n* Quitly consume and close InputStreams that may not be complete.\n\n### OpenUnirest:2.2.00\n* Major refactoring of how response objects are built. This internalizes HttpClientHelper which was previously public but not needed if you were using the library in in the expected way. This refactoring sets up the library for future work to extend the number of supported formats and for greater expression in the methods for those formats.\n* Additional of functional map methods to HttpResponse so you don't have to stop the flow for further transformations.\n* Update the org.json dependency\n* Fixed issue with achor hashes in URLs (#17)\n* Fixed NPE in passing args as maps (#20)\n\n### OpenUnirest:2.1.01\n* JSON parsing errors no longer just throw out of ```asJson``` but are captured and can be inspected via ```HttpResponse::getParsingError```. This resolves the fact that most API's do not return valid JSON for non-200 status codes.\n* Return CompletableFuture rather that boring old Futures for all async methods.\n\n\n### OpenUnirest:2.0.02\n* UnirestException is no longer checked\n* Namespaces have been migrated to new **io.gitgub.openunirest** namespace\n* Thread leak in Options fixed\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1435546875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ryan.bergman@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.15625,
          "content": "# Contributing to Unirest\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by the [Open Unirest Code of Conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code.\n\n## How Can I Contribute?\n\n### Reporting Bugs\n**Explain how to produce the problem** in as many details as possible. When listing steps, **don't just say what you did, but explain how you did it**. \n* **Provide specific examples to demonstrate the steps**. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use [Markdown code blocks](https://help.github.com/articles/markdown-basics/#multiple-lines).\n* **Describe the behavior you observed after following the steps** and point out what exactly is the problem with that behavior.\n* **Explain which behavior you expected to see instead and why.**\n\nInclude details about your configuration and environment:\n\n* **What version of Unirest were you using?**\n* **What version of Java were you running it on?**\n* **Did you do any custom configuration to the client?**\n\n\n### Contributing Code\n\n* Before you put in all the work to add a new feature. Try opening a issue and checking if it's something that will be accepted. Sometimes a feature you think might be useful might be contrary to the goals or direction of the project. We won't want folks to get frustrated, so take a minute and talk it through with us.\n* If we do all agree it's a good idea we would expect:\n   * Backwards compatibility is important to this project and you should go out of your way to not make breaking changes.\n   * All contributions should be issued as pull requests and get reviewed by the admins of this project.\n   * All code should follow style guidelines enforced by the checkstyle and other static analysis.\n   * All code should have tests.\n      * Unit tests\n      * Behavioral tests (see https://github.com/Kong/unirest-java/tree/master/unirest/src/test/java/BehaviorTests)\n  * You should have run verify before submitting and the PR needs to have passed TravisCI before being merged.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0927734375,
          "content": "The MIT License\n\n * Copyright for portions of unirest-java are held by Kong Inc (c) 2013-2019.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.9794921875,
          "content": "# Unirest for Java \n\n[![Actions Status](https://github.com/kong/unirest-java/workflows/Verify/badge.svg)](https://github.com/kong/unirest-java/actions)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.konghq/unirest-java-parent/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.kong/unirest-java)\n[![Javadocs](http://www.javadoc.io/badge/com.konghq/unirest-java-core.svg)](http://www.javadoc.io/doc/com.konghq/unirest-java)\n\n\n## Unirest 4\nUnirest 4 is build on modern Java standards, and as such requires at least Java 11.\n\nUnirest 4's dependencies are fully modular, and have been moved to new Maven coordinates to avoid conflicts with the previous versions.\nYou can use a maven bom to manage the modules:\n\n## Documentation\nOur [Documentation](http://kong.github.io/unirest-java/)\n\n## Upgrading from Previous Versions \nSee the [Upgrade Guide](http://kong.github.io/unirest-java/upgrade-guilde)\n\n## ChangeLog \nSee the [Change Log](CHANGELOG.md) for recent changes.\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3623046875,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.1.x   | :white_check_mark: |\n| 3.0.x   | :x:                |\n| 2.4.x   | :white_check_mark: |\n| < 2.4   | :x:                |\n| 1.x.x   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report an issue and we will respond to security issues asap\n"
        },
        {
          "name": "bad-maven-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy.sh",
          "type": "blob",
          "size": 1.220703125,
          "content": "#!/bin/bash\n#\n# The MIT License\n#\n# Copyright for portions of unirest-java are held by Kong Inc (c) 2013.\n#\n# Permission is hereby granted, free of charge, to any person obtaining\n# a copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish,\n# distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so, subject to\n# the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n\nmvn clean verify\nmvn release:prepare -DskipTests\nmvn release:perform -DskipTests\n"
        },
        {
          "name": "mkdocs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 14.607421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.konghq</groupId>\n    <artifactId>unirest-java-parent</artifactId>\n    <packaging>pom</packaging>\n    <version>4.4.6-SNAPSHOT</version>\n    <name>unirest</name>\n    <description>Parent pom for unirest packages</description>\n    <url>http://github.com/Kong/unirest-java/</url>\n\n    <licenses>\n        <license>\n            <name>MIT</name>\n            <url>http://opensource.org/licenses/MIT</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <modules>\n        <module>unirest</module>\n        <module>unirest-modules-gson</module>\n        <module>unirest-modules-jackson</module>\n        <module>unirest-modules-mocks</module>\n        <module>unirest-bdd-tests</module>\n        <module>unirest-java-bom</module>\n        <!--<module>bad-maven-test</module>-->\n    </modules>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <jackson.version>2.17.2</jackson.version>\n        <main.dir>${project.basedir}</main.dir>\n        <junit.version>5.11.0</junit.version>\n        <mockito.version>5.15.2</mockito.version>\n        <maven-checkstyle-plugin.version>3.5.0</maven-checkstyle-plugin.version>\n        <assertj.version>3.26.3</assertj.version>\n        <maven-surefire-plugin.version>3.4.0</maven-surefire-plugin.version>\n    </properties>\n\n    <scm>\n        <url>https://github.com/Kong/unirest-java</url>\n        <connection>scm:git:git@github.com:Kong/unirest-java.git</connection>\n        <developerConnection>scm:git:git@github.com:Kong/unirest-java.git</developerConnection>\n        <tag>HEAD</tag>\n    </scm>\n\n    <developers>\n        <developer>\n            <id>Ryber</id>\n            <name>Ryan Bergman</name>\n            <url>https://github.com/ryber</url>\n            <roles>\n                <role>Maintainer</role>\n            </roles>\n        </developer>\n    </developers>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <profiles>\n        <profile>\n            <id>ossrh</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.6</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.mycila.maven-license-plugin</groupId>\n                <artifactId>maven-license-plugin</artifactId>\n                <version>1.8.0</version>\n                <configuration>\n                    <!-- Template location -->\n                    <header>${main.dir}/build/fileHeader.txt</header>\n                    <strictCheck>true</strictCheck>\n                    <excludes>\n                        <exclude>**/*.scss</exclude>\n                        <exclude>**/*.b64</exclude>\n                        <exclude>**/*.svg</exclude>\n                        <exclude>**/Gemfile</exclude>\n                        <exclude>.java-version</exclude>\n                        <exclude>.java-version</exclude>\n                        <exclude>**/*.js</exclude>\n                        <exclude>**/*.json</exclude>\n                        <exclude>**/*.p12</exclude>\n                        <exclude>**/*.pem</exclude>\n                        <exclude>**/*.html</exclude>\n                        <exclude>**/*.xml</exclude>\n                        <exclude>**/*.txt</exclude>\n                        <exclude>**/*.log</exclude>\n                        <exclude>**/*.md</exclude>\n                        <exclude>**/*.yml</exclude>\n                        <exclude>.idea/**</exclude>\n                        <exclude>.github/**</exclude>\n                        <exclude>**/*.scssc</exclude>\n                        <exclude>**/.jekyll-metadata</exclude>\n                        <exclude>.git*</exclude>\n                        <exclude>LICENSE</exclude>\n                        <exclude>Gemfile.lock</exclude>\n                    </excludes>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>format</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifestEntries>\n                            <Built-By>Unirest</Built-By>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>${maven-checkstyle-plugin.version}</version>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.puppycrawl.tools</groupId>\n                        <artifactId>checkstyle</artifactId>\n                        <version>10.18.0</version>\n                    </dependency>\n                </dependencies>\n                <executions>\n                    <execution>\n                        <phase>compile</phase>\n                        <id>auto-checkstyle</id>\n                        <goals>\n                            <goal>checkstyle</goal>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <configLocation>build/checkstyle.xml</configLocation>\n                    <suppressionsLocation>build/suppressions.xml</suppressionsLocation>\n                    <logViolationsToConsole>true</logViolationsToConsole>\n                    <consoleOutput>true</consoleOutput>\n                    <linkXRef>false</linkXRef>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <argLine>-Duser.timezone=UTC</argLine>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n            </plugin>\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.12</version>\n                <executions>\n                    <execution>\n                        <id>default-prepare-agent</id>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>default-report</id>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>default-check</id>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <configuration>\n                            <rules>\n                                <rule>\n                                    <element>BUNDLE</element>\n                                    <limits>\n                                        <limit implementation=\"org.jacoco.report.check.Limit\">\n                                            <counter>COMPLEXITY</counter>\n                                            <value>COVEREDRATIO</value>\n                                            <minimum>0.60</minimum>\n                                        </limit>\n                                    </limits>\n                                </rule>\n                            </rules>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>3.0.0</version>\n                <configuration>\n                    <tagNameFormat>v@{project.version}</tagNameFormat>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.13</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n                <configuration>\n                    <fork>true</fork>\n                    <meminitial>128m</meminitial>\n                    <maxmem>512m</maxmem>\n                    <source>11</source>\n                    <target>11</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.3.1</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.8.0</version>\n                <configuration>\n                    <source>11</source>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n\n    <dependencies>\n        <!-- common testing dependencies -->\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-junit-jupiter</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.assertj/assertj-core -->\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>${assertj.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.assertj/assertj-guava -->\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-guava</artifactId>\n            <version>${assertj.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-params</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.skyscreamer</groupId>\n            <artifactId>jsonassert</artifactId>\n            <version>1.5.3</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->\n        <dependency>\n            <groupId>com.google.guava</groupId>\n            <artifactId>guava</artifactId>\n            <version>33.3.0-jre</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>${maven-checkstyle-plugin.version}</version>\n                <reportSets>\n                    <reportSet>\n                        <reports>\n                            <report>checkstyle</report>\n                        </reports>\n                    </reportSet>\n                </reportSets>\n            </plugin>\n        </plugins>\n    </reporting>\n\n</project>"
        },
        {
          "name": "reports.sh",
          "type": "blob",
          "size": 1.1728515625,
          "content": "#\n# The MIT License\n#\n# Copyright for portions of unirest-java are held by Kong Inc (c) 2013.\n#\n# Permission is hereby granted, free of charge, to any person obtaining\n# a copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish,\n# distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so, subject to\n# the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\nopen ./unirest/target/site/jacoco/index.html "
        },
        {
          "name": "unirest-bdd-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "unirest-java-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "unirest-modules-gson",
          "type": "tree",
          "content": null
        },
        {
          "name": "unirest-modules-jackson",
          "type": "tree",
          "content": null
        },
        {
          "name": "unirest-modules-mocks",
          "type": "tree",
          "content": null
        },
        {
          "name": "unirest",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}