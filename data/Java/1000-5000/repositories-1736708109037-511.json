{
  "metadata": {
    "timestamp": 1736708109037,
    "page": 511,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ltsopensource/light-task-scheduler",
      "stars": 3010,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.083984375,
          "content": "*.js linguist-language=Java\n*.html linguist-language=Java\n*.css linguist-language=Java"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "*.iml\n.idea\n.DS_Store\ntarget\n/dist/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.0322265625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.10546875,
          "content": "\r\n# LTS用户文档\r\n\t\r\nLTS(light-task-scheduler)主要用于解决分布式任务调度问题，支持实时任务，定时任务和Cron任务。有较好的伸缩性，扩展性，健壮稳定性而被多家公司使用，同时也希望开源爱好者一起贡献。\r\n\r\n## ---> 底部有招人帖 \r\n\r\n## 项目地址\r\ngithub地址:\r\n[https://github.com/ltsopensource/light-task-scheduler](https://github.com/ltsopensource/light-task-scheduler)\r\n\r\noschina地址:\r\n[http://git.oschina.net/hugui/light-task-scheduler](http://git.oschina.net/hugui/light-task-scheduler)\r\n\r\n例子: \r\n[https://github.com/ltsopensource/lts-examples](https://github.com/ltsopensource/lts-examples)\r\n\r\n文档地址(正在更新中,后面以这个为准):\r\n[https://www.gitbook.com/book/qq254963746/lts/details](https://www.gitbook.com/book/qq254963746/lts/details)\r\n\r\n这两个地址都会同步更新。感兴趣，请加QQ群：109500214 (加群密码: hello world)一起探讨、完善。越多人支持，就越有动力去更新，喜欢记得右上角star哈。\r\n\r\n## 1.7.2-SNAPSHOT(master)变更主要点\r\n1. 优化JobContext中的BizLogger，由原来的去掉了threadlocal，解决taskTracker多线程的问题, 去掉LtsLoggerFactory.getLogger()用法\r\n\r\n## 框架概况\r\nLTS 有主要有以下四种节点：\r\n\r\n* JobClient：主要负责提交任务, 并接收任务执行反馈结果。\r\n* JobTracker：负责接收并分配任务，任务调度。\r\n* TaskTracker：负责执行任务，执行完反馈给JobTracker。\r\n* LTS-Admin：（管理后台）主要负责节点管理，任务队列管理，监控管理等。\r\n\r\n其中JobClient，JobTracker，TaskTracker节点都是`无状态`的。\r\n可以部署多个并动态的进行删减，来实现负载均衡，实现更大的负载量, 并且框架采用FailStore策略使LTS具有很好的容错能力。 \r\n\r\nLTS注册中心提供多种实现（Zookeeper，redis等），注册中心进行节点信息暴露，master选举。(Mongo or Mysql)存储任务队列和任务执行日志, netty or mina做底层通信, 并提供多种序列化方式fastjson, hessian2, java等。\r\n\r\nLTS支持任务类型：\r\n\r\n* 实时任务：提交了之后立即就要执行的任务。\r\n* 定时任务：在指定时间点执行的任务，譬如 今天3点执行（单次）。\r\n* Cron任务：CronExpression，和quartz类似（但是不是使用quartz实现的）譬如 0 0/1 * * * ?\r\n\r\n支持动态修改任务参数,任务执行时间等设置,支持后台动态添加任务,支持Cron任务暂停,支持手动停止正在执行的任务(有条件),支持任务的监控统计,支持各个节点的任务执行监控,JVM监控等等.\r\n\r\n## 架构图\r\n\r\n![LTS architecture](http://git.oschina.net/hugui/light-task-scheduler/raw/master/docs/LTS_architecture.png?dir=0&filepath=docs%2FLTS_architecture.png&oid=262a5234534e2d9fa8862f3e632c5551ebd95e21&sha=d01be5d59e8d768f49bbdc66c8334c37af8f7af5)\r\n\r\n## 概念说明\r\n\r\n### 节点组\r\n1. 英文名称 NodeGroup,一个节点组等同于一个小的集群，同一个节点组中的各个节点是对等的，等效的，对外提供相同的服务。\r\n2. 每个节点组中都有一个master节点，这个master节点是由LTS动态选出来的，当一个master节点挂掉之后，LTS会立马选出另外一个master节点，框架提供API监听接口给用户。\r\n\r\n### FailStore\r\n1. 顾名思义，这个主要是用于失败了存储的，主要用于节点容错，当远程数据交互失败之后，存储在本地，等待远程通信恢复的时候，再将数据提交。\r\n2. FailStore主要用户JobClient的任务提交，TaskTracker的任务反馈，TaskTracker的业务日志传输的场景下。\r\n3. FailStore目前提供几种实现：leveldb,rocksdb,berkeleydb,mapdb,ltsdb，用于可以自由选择使用哪种,用户也可以采用SPI扩展使用自己的实现。\r\n\r\n\r\n## 流程图\r\n下图是一个标准的实时任务执行流程。\r\n\r\n![LTS progress](http://git.oschina.net/hugui/light-task-scheduler/raw/master/docs/LTS_progress.png?dir=0&filepath=docs%2FLTS_progress.png&oid=22f60a83b51b26bac8dabbb5053ec9913cefc45c&sha=774aa73d186470aedbb8f4da3c04a86a6022be05)\r\n\r\n## LTS-Admin新版界面预览\r\n\r\n![LTS Admin](http://git.oschina.net/hugui/light-task-scheduler/raw/master/docs/LTS-Admin/LTS-Admin-cron-job-queue.png?dir=0&filepath=docs%2FLTS-Admin%2FLTS-Admin-cron-job-queue.png&oid=aecaf01bca5270a53b144891baaa3d7e56d47706&sha=a4fd9f31df9e1fc6d389a16bdc8d1964bb854766)\r\n目前后台带有由[ztajy](https://github.com/ztajy)提供的一个简易的认证功能. 用户名密码在auth.cfg中,用户自行修改.\r\n\r\n## 特性\r\n### 1、Spring支持\r\nLTS可以完全不用Spring框架，但是考虑到很用用户项目中都是用了Spring框架，所以LTS也提供了对Spring的支持，包括Xml和注解，引入`lts-spring.jar`即可。\r\n### 2、业务日志记录器\r\n在TaskTracker端提供了业务日志记录器，供应用程序使用，通过这个业务日志器，可以将业务日志提交到JobTracker，这些业务日志可以通过任务ID串联起来，可以在LTS-Admin中实时查看任务的执行进度。\r\n### 3、SPI扩展支持\r\nSPI扩展可以达到零侵入，只需要实现相应的接口，并实现即可被LTS使用，目前开放出来的扩展接口有\r\n\r\n1. 对任务队列的扩展，用户可以不选择使用mysql或者mongo作为队列存储，也可以自己实现。\r\n2. 对业务日志记录器的扩展，目前主要支持console，mysql，mongo，用户也可以通过扩展选择往其他地方输送日志。\r\n\r\n### 4、故障转移\r\n当正在执行任务的TaskTracker宕机之后，JobTracker会立马将分配在宕机的TaskTracker的所有任务再分配给其他正常的TaskTracker节点执行。\r\n### 5、节点监控\r\n可以对JobTracker，TaskTracker节点进行资源监控，任务监控等，可以实时的在LTS-Admin管理后台查看，进而进行合理的资源调配。\r\n### 6、多样化任务执行结果支持\r\nLTS框架提供四种执行结果支持，`EXECUTE_SUCCESS`，`EXECUTE_FAILED`，`EXECUTE_LATER`，`EXECUTE_EXCEPTION`，并对每种结果采取相应的处理机制，譬如重试。\r\n\r\n* EXECUTE_SUCCESS: 执行成功,这种情况，直接反馈客户端（如果任务被设置了要反馈给客户端）。\r\n* EXECUTE_FAILED：执行失败，这种情况，直接反馈给客户端，不进行重试。\r\n* EXECUTE_LATER：稍后执行（需要重试），这种情况，不反馈客户端，重试策略采用1min，2min，3min的策略，默认最大重试次数为10次，用户可以通过参数设置修改这个重试次数。\r\n* EXECUTE_EXCEPTION：执行异常, 这种情况也会重试(重试策略，同上)\r\n\r\n### 7、FailStore容错\r\n采用FailStore机制来进行节点容错，Fail And Store，不会因为远程通信的不稳定性而影响当前应用的运行。具体FailStore说明，请参考概念说明中的FailStore说明。\r\n\r\n## 项目编译打包\r\n项目主要采用maven进行构建，目前提供shell脚本的打包。\r\n环境依赖：`Java(jdk1.6+)` `Maven`\r\n\r\n用户使用一般分为两种：\r\n### 1、Maven构建\r\n可以通过maven命令将lts的jar包上传到本地仓库中。在父pom.xml中添加相应的repository，并用deploy命令上传即可。具体引用方式可以参考lts中的例子即可。\r\n### 2、直接Jar引用\r\n需要将lts的各个模块打包成单独的jar包，并且将所有lts依赖包引入。具体引用哪些jar包可以参考lts中的例子即可。\r\n\r\n## JobTracker和LTS-Admin部署\r\n提供`(cmd)windows`和`(shell)linux`两种版本脚本来进行编译和部署:\r\n\r\n1. 运行根目录下的`sh build.sh`或`build.cmd`脚本，会在`dist`目录下生成`lts-{version}-bin`文件夹\r\n\r\n2. 下面是其目录结构，其中bin目录主要是JobTracker和LTS-Admin的启动脚本。`jobtracker` 中是 JobTracker的配置文件和需要使用到的jar包，`lts-admin`是LTS-Admin相关的war包和配置文件。\r\nlts-{version}-bin的文件结构\r\n\r\n```java\r\n-- lts-${version}-bin\r\n    |-- bin\r\n    |   |-- jobtracker.cmd\r\n    |   |-- jobtracker.sh\r\n    |   |-- lts-admin.cmd\r\n    |   |-- lts-admin.sh\r\n    |   |-- lts-monitor.cmd\r\n    |   |-- lts-monitor.sh\r\n    |   |-- tasktracker.sh\r\n    |-- conf\r\n    |   |-- log4j.properties\r\n    |   |-- lts-admin.cfg\r\n    |   |-- lts-monitor.cfg\r\n    |   |-- readme.txt\r\n    |   |-- tasktracker.cfg\r\n    |   |-- zoo\r\n    |       |-- jobtracker.cfg\r\n    |       |-- log4j.properties\r\n    |       |-- lts-monitor.cfg\r\n    |-- lib\r\n    |   |-- *.jar\r\n    |-- war\r\n        |-- jetty\r\n        |   |-- lib\r\n        |       |-- *.jar\r\n        |-- lts-admin.war\r\n\r\n```\t    \r\n        \r\n3. JobTracker启动。如果你想启动一个节点，直接修改下`conf/zoo`下的配置文件，然后运行 `sh jobtracker.sh zoo start`即可，如果你想启动两个JobTracker节点，那么你需要拷贝一份zoo,譬如命名为`zoo2`,修改下`zoo2`下的配置文件，然后运行`sh jobtracker.sh zoo2 start`即可。logs文件夹下生成`jobtracker-zoo.out`日志。\r\n4. LTS-Admin启动.修改`conf/lts-monitor.cfg`和`conf/lts-admin.cfg`下的配置，然后运行`bin`下的`sh lts-admin.sh`或`lts-admin.cmd`脚本即可。logs文件夹下会生成`lts-admin.out`日志，启动成功在日志中会打印出访问地址，用户可以通过这个访问地址访问了。\r\n\r\n## JobClient（部署）使用\r\n需要引入lts的jar包有`lts-jobclient-{version}.jar`，`lts-core-{version}.jar` 及其它第三方依赖jar。\r\n### API方式启动\r\n```java\r\nJobClient jobClient = new RetryJobClient();\r\njobClient.setNodeGroup(\"test_jobClient\");\r\njobClient.setClusterName(\"test_cluster\");\r\njobClient.setRegistryAddress(\"zookeeper://127.0.0.1:2181\");\r\njobClient.start();\r\n\r\n// 提交任务\r\nJob job = new Job();\r\njob.setTaskId(\"3213213123\");\r\njob.setParam(\"shopId\", \"11111\");\r\njob.setTaskTrackerNodeGroup(\"test_trade_TaskTracker\");\r\n// job.setCronExpression(\"0 0/1 * * * ?\");  // 支持 cronExpression表达式\r\n// job.setTriggerTime(new Date()); // 支持指定时间执行\r\nResponse response = jobClient.submitJob(job);\r\n```\r\n    \r\n### Spring XML方式启动\r\n```java\r\n<bean id=\"jobClient\" class=\"com.github.ltsopensource.spring.JobClientFactoryBean\">\r\n    <property name=\"clusterName\" value=\"test_cluster\"/>\r\n    <property name=\"registryAddress\" value=\"zookeeper://127.0.0.1:2181\"/>\r\n    <property name=\"nodeGroup\" value=\"test_jobClient\"/>\r\n    <property name=\"masterChangeListeners\">\r\n        <list>\r\n            <bean class=\"com.github.ltsopensource.example.support.MasterChangeListenerImpl\"/>\r\n        </list>\r\n    </property>\r\n    <property name=\"jobFinishedHandler\">\r\n        <bean class=\"com.github.ltsopensource.example.support.JobFinishedHandlerImpl\"/>\r\n    </property>\r\n    <property name=\"configs\">\r\n        <props>\r\n            <!-- 参数 -->\r\n            <prop key=\"job.fail.store\">leveldb</prop>\r\n        </props>\r\n    </property>\r\n</bean>\r\n```    \r\n### Spring 全注解方式\r\n```java\r\n@Configuration\r\npublic class LTSSpringConfig {\r\n\r\n    @Bean(name = \"jobClient\")\r\n    public JobClient getJobClient() throws Exception {\r\n        JobClientFactoryBean factoryBean = new JobClientFactoryBean();\r\n        factoryBean.setClusterName(\"test_cluster\");\r\n        factoryBean.setRegistryAddress(\"zookeeper://127.0.0.1:2181\");\r\n        factoryBean.setNodeGroup(\"test_jobClient\");\r\n        factoryBean.setMasterChangeListeners(new MasterChangeListener[]{\r\n                new MasterChangeListenerImpl()\r\n        });\r\n        Properties configs = new Properties();\r\n        configs.setProperty(\"job.fail.store\", \"leveldb\");\r\n        factoryBean.setConfigs(configs);\r\n        factoryBean.afterPropertiesSet();\r\n        return factoryBean.getObject();\r\n    }\r\n}\r\n```\r\n## TaskTracker(部署使用)\r\n需要引入lts的jar包有`lts-tasktracker-{version}.jar`，`lts-core-{version}.jar` 及其它第三方依赖jar。\r\n### 定义自己的任务执行类\r\n```java\r\npublic class MyJobRunner implements JobRunner {\r\n    @Override\r\n    public Result run(JobContext jobContext) throws Throwable {\r\n        try {\r\n            // TODO 业务逻辑\r\n            // 会发送到 LTS (JobTracker上)\r\n            jobContext.getBizLogger().info(\"测试，业务日志啊啊啊啊啊\");\r\n\r\n        } catch (Exception e) {\r\n            return new Result(Action.EXECUTE_FAILED, e.getMessage());\r\n        }\r\n        return new Result(Action.EXECUTE_SUCCESS, \"执行成功了，哈哈\");\r\n    }\r\n}\r\n```\r\n### API方式启动\r\n```java \r\nTaskTracker taskTracker = new TaskTracker();\r\ntaskTracker.setJobRunnerClass(MyJobRunner.class);\r\ntaskTracker.setRegistryAddress(\"zookeeper://127.0.0.1:2181\");\r\ntaskTracker.setNodeGroup(\"test_trade_TaskTracker\");\r\ntaskTracker.setClusterName(\"test_cluster\");\r\ntaskTracker.setWorkThreads(20);\r\ntaskTracker.start();\r\n```\r\n### Spring XML方式启动\r\n```java\r\n<bean id=\"taskTracker\" class=\"com.github.ltsopensource.spring.TaskTrackerAnnotationFactoryBean\" init-method=\"start\">\r\n    <property name=\"jobRunnerClass\" value=\"com.github.ltsopensource.example.support.MyJobRunner\"/>\r\n    <property name=\"bizLoggerLevel\" value=\"INFO\"/>\r\n    <property name=\"clusterName\" value=\"test_cluster\"/>\r\n    <property name=\"registryAddress\" value=\"zookeeper://127.0.0.1:2181\"/>\r\n    <property name=\"nodeGroup\" value=\"test_trade_TaskTracker\"/>\r\n    <property name=\"workThreads\" value=\"20\"/>\r\n    <property name=\"masterChangeListeners\">\r\n        <list>\r\n            <bean class=\"com.github.ltsopensource.example.support.MasterChangeListenerImpl\"/>\r\n        </list>\r\n    </property>\r\n    <property name=\"configs\">\r\n        <props>\r\n            <prop key=\"job.fail.store\">leveldb</prop>\r\n        </props>\r\n    </property>\r\n</bean>\r\n```\r\n### Spring注解方式启动\r\n```java\r\n@Configuration\r\npublic class LTSSpringConfig implements ApplicationContextAware {\r\n    private ApplicationContext applicationContext;\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n\t@Bean(name = \"taskTracker\")\r\n    public TaskTracker getTaskTracker() throws Exception {\r\n        TaskTrackerAnnotationFactoryBean factoryBean = new TaskTrackerAnnotationFactoryBean();\r\n        factoryBean.setApplicationContext(applicationContext);\r\n        factoryBean.setClusterName(\"test_cluster\");\r\n        factoryBean.setJobRunnerClass(MyJobRunner.class);\r\n        factoryBean.setNodeGroup(\"test_trade_TaskTracker\");\r\n        factoryBean.setBizLoggerLevel(\"INFO\");\r\n        factoryBean.setRegistryAddress(\"zookeeper://127.0.0.1:2181\");\r\n        factoryBean.setMasterChangeListeners(new MasterChangeListener[]{\r\n                new MasterChangeListenerImpl()\r\n        });\r\n        factoryBean.setWorkThreads(20);\r\n        Properties configs = new Properties();\r\n        configs.setProperty(\"job.fail.store\", \"leveldb\");\r\n        factoryBean.setConfigs(configs);\r\n\r\n        factoryBean.afterPropertiesSet();\r\n//        factoryBean.start();\r\n        return factoryBean.getObject();\r\n    }\r\n}\r\n```\r\n## 参数说明\r\n[参数说明](https://qq254963746.gitbooks.io/lts/content/use/config-name.html)\r\n\r\n## 使用建议\r\n一般在一个JVM中只需要一个JobClient实例即可，不要为每种任务都新建一个JobClient实例，这样会大大的浪费资源，因为一个JobClient可以提交多种任务。相同的一个JVM一般也尽量保持只有一个TaskTracker实例即可，多了就可能造成资源浪费。当遇到一个TaskTracker要运行多种任务的时候，请参考下面的 \"一个TaskTracker执行多种任务\"。\r\n## 一个TaskTracker执行多种任务\r\n有的时候，业务场景需要执行多种任务，有些人会问，是不是要每种任务类型都要一个TaskTracker去执行。我的答案是否定的，如果在一个JVM中，最好使用一个TaskTracker去运行多种任务，因为一个JVM中使用多个TaskTracker实例比较浪费资源（当然当你某种任务量比较多的时候，可以将这个任务单独使用一个TaskTracker节点来执行）。那么怎么才能实现一个TaskTracker执行多种任务呢。下面是我给出来的参考例子。\r\n\r\n```java\r\n/**\r\n * 总入口，在 taskTracker.setJobRunnerClass(JobRunnerDispatcher.class)\r\n * JobClient 提交 任务时指定 Job 类型  job.setParam(\"type\", \"aType\")\r\n */\r\npublic class JobRunnerDispatcher implements JobRunner {\r\n\r\n    private static final ConcurrentHashMap<String/*type*/, JobRunner>\r\n            JOB_RUNNER_MAP = new ConcurrentHashMap<String, JobRunner>();\r\n\r\n    static {\r\n        JOB_RUNNER_MAP.put(\"aType\", new JobRunnerA()); // 也可以从Spring中拿\r\n        JOB_RUNNER_MAP.put(\"bType\", new JobRunnerB());\r\n    }\r\n\r\n    @Override\r\n    public Result run(JobContext jobContext) throws Throwable {\r\n        Job job = jobContext.getJob();\r\n        String type = job.getParam(\"type\");\r\n        return JOB_RUNNER_MAP.get(type).run(job);\r\n    }\r\n}\r\n\r\nclass JobRunnerA implements JobRunner {\r\n    @Override\r\n    public Result run(JobContext jobContext) throws Throwable {\r\n        //  TODO A类型Job的逻辑\r\n        return null;\r\n    }\r\n}\r\n\r\nclass JobRunnerB implements JobRunner {\r\n    @Override\r\n    public Result run(JobContext jobContext) throws Throwable {\r\n        // TODO B类型Job的逻辑\r\n        return null;\r\n    }\r\n}\r\n```\r\n## TaskTracker的JobRunner测试\r\n一般在编写TaskTracker的时候，只需要测试JobRunner的实现逻辑是否正确，又不想启动LTS进行远程测试。为了方便测试，LTS提供了JobRunner的快捷测试方法。自己的测试类集成`com.github.ltsopensource.tasktracker.runner.JobRunnerTester`即可，并实现`initContext`和`newJobRunner`方法即可。如[lts-examples](https://github.com/ltsopensource/lts-examples)中的例子：\r\n\r\n```java\r\npublic class TestJobRunnerTester extends JobRunnerTester {\r\n\r\n    public static void main(String[] args) throws Throwable {\r\n        //  Mock Job 数据\r\n        Job job = new Job();\r\n        job.setTaskId(\"2313213\");\r\n\r\n        JobContext jobContext = new JobContext();\r\n        jobContext.setJob(job);\r\n\r\n        JobExtInfo jobExtInfo = new JobExtInfo();\r\n        jobExtInfo.setRetry(false);\r\n\r\n        jobContext.setJobExtInfo(jobExtInfo);\r\n\r\n        // 运行测试\r\n        TestJobRunnerTester tester = new TestJobRunnerTester();\r\n        Result result = tester.run(jobContext);\r\n        System.out.println(JSON.toJSONString(result));\r\n    }\r\n\r\n    @Override\r\n    protected void initContext() {\r\n        // TODO 初始化Spring容器\r\n    }\r\n\r\n    @Override\r\n    protected JobRunner newJobRunner() {\r\n        return new TestJobRunner();\r\n    }\r\n}\r\n```\r\n\r\n## Spring Quartz Cron任务无缝接入\r\n对于Quartz的Cron任务只需要在Spring配置中增加一下代码就可以接入LTS平台\r\n\r\n```xml\r\n<bean class=\"com.github.ltsopensource.spring.quartz.QuartzLTSProxyBean\">\r\n    <property name=\"clusterName\" value=\"test_cluster\"/>\r\n    <property name=\"registryAddress\" value=\"zookeeper://127.0.0.1:2181\"/>\r\n    <property name=\"nodeGroup\" value=\"quartz_test_group\"/>\r\n</bean>\r\n```\r\n## Spring Boot 支持\r\n\r\n```java\r\n@SpringBootApplication\r\n@EnableJobTracker       // 启动JobTracker\r\n@EnableJobClient        // 启动JobClient\r\n@EnableTaskTracker      // 启动TaskTracker\r\n@EnableMonitor          // 启动Monitor\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```\r\n\r\n剩下的就只是在application.properties中添加相应的配置就行了, 具体见lts-example中的`com.github.ltsopensource.examples.springboot`包下的例子\r\n\r\n\r\n## 多网卡选择问题\r\n当机器有内网两个网卡的时候，有时候，用户想让LTS的流量走外网网卡，那么需要在host中，把主机名称的映射地址改为外网网卡地址即可，内网同理。\r\n\r\n## 关于节点标识问题\r\n如果在节点启动的时候设置节点标识,LTS会默认设置一个UUID为节点标识,可读性会比较差,但是能保证每个节点的唯一性,如果用户能自己保证节点标识的唯一性,可以通过 `setIdentity` 来设置,譬如如果每个节点都是部署在一台机器(一个虚拟机)上,那么可以将identity设置为主机名称\r\n\r\n## SPI扩展说明\r\n支持JobLogger,JobQueue等等的SPI扩展\r\n\r\n## [和其它解决方案比较](https://qq254963746.gitbooks.io/lts/content/introduce/compareother.html)\r\n\r\n\r\n## LTS-Admin使用jetty启动(默认)，不定期挂掉解决方案\r\n见[issue#389](https://github.com/ltsopensource/light-task-scheduler/issues/389)\r\n\r\n\r\n# 招人！！！\r\n工作年限  三年以上\r\n\r\n学历要求  本科\r\n\r\n期望层级  P6(资深Java工程师)/P7(技术专家)\r\n\r\n岗位描述  \r\n\r\n会员平台，负责阿里巴巴集团的用户体系，支持集团内各线业务线用户类需求，支持集团对外合作的用户通和业务通。\r\n包括各个端的用户登录&授权、Session体系、注册、账户管理、账户安全等功能，底层的用户信息服务，会话和凭证管理等等，是集团最核心的产品线之一，每天承载千亿次调用量、峰值千万QPS、以及分布全球的混合云架构等等。\r\n\r\n作为软件工程师，你将会在我们的核心产品上工作，这些产品为我们的商业基础设施提供关键功能，\r\n取决于你的兴趣和经验，你可以在如下的一个或多个领域工作：全球化，用户体验，数据安全，机器学习，系统高可用性等等。\r\n\r\n1. 独立完成中小型项目的系统分析、设计，并主导完成详细设计和编码的任务，确保项目的进度和质量； \r\n2. 能够在团队中完成code review的任务，确保相关代码的有效性和正确性，并能够通过code review提供相关性能以及稳定性的建议； \r\n3. 参与建设通用、灵活、智能的业务支撑平台，支撑上层多场景的复杂业务。\r\n岗位要求  \r\n1. 扎实的java编程基础，熟悉常用的Java开源框架； \r\n2. 具有基于数据库、缓存、分布式存储开发高性能、高可用数据应用的实际经验，熟练掌握LINUX操作系统； \r\n3. 具备良好的识别和设计通用框架及模块的能力； \r\n4. 热爱技术，工作认真、严谨，对系统质量有近乎苛刻的要求意识，善于沟通与团队协作；     \r\n5. 具备大型电子商务网站或金融行业核心系统开发、设计工作经验者优先；\r\n6. 具备大数据处理、算法、机器学习类工作经验优先。\r\n感兴趣，可以发简历到 hugui.hg@alibaba-inc.com 欢迎投递\r\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 1.1240234375,
          "content": "@echo off\n\nstart mvn clean install -DskipTests\necho \"LTS: mvn clean install -DskipTests\"\necho \"LTS: After sub window finished, close it , and press any key to continue\" & pause>nul\n\nset VERSION=1.7.2-SNAPSHOT\nset BASE_HOME=%~dp0%\nset DIST_BIN_DIR=lts-%VERSION%-bin\n\nmd \"%BASE_HOME%\\dist\"\nmd \"%BASE_HOME%\\dist\\%DIST_BIN_DIR%\"\n\nset LTS_Bin_Dir=%BASE_HOME%dist\\%DIST_BIN_DIR%\n\nset Startup_Dir=%BASE_HOME%\\lts-startup\ncd %Startup_Dir%\nstart mvn clean assembly:assembly -DskipTests -Pdefault\necho \"LTS: mvn clean assembly:assembly -DskipTests -Pdefault\"\necho \"LTS: After sub window finished, close it , and press any key to continue\" & pause>nul\n\nxcopy /e /y \"%Startup_Dir%\\target\\lts-bin\\lts\" \"%LTS_Bin_Dir%\"\ncd ..\\..\\\n\ncd %Startup_Dir%\nstart mvn clean assembly:assembly -DskipTests -Plts-admin\necho \"LTS: mvn clean assembly:assembly -DskipTests -Plts-admin\"\necho \"LTS: After sub window finished, close it , and press any key to continue\" & pause>nul\n\nxcopy /e /y \"%Startup_Dir%\\target\\lts-bin\\lts\\lib\" \"%LTS_Bin_Dir%\\war\\jetty\\lib\"\ncd ..\\..\\\n\nxcopy /e /y \"%BASE_HOME%\\lts-admin\\target\\lts-admin-%VERSION%.war\" \"%LTS_Bin_Dir%\\war\\lts-admin.war\"\ncd ..\\..\\\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.8544921875,
          "content": "#!/usr/bin/env bash\n\nVERSION=\"1.7.2-SNAPSHOT\"\n\nLTS_BIN=\"${BASH_SOURCE-$0}\"\nLTS_BIN=\"$(dirname \"${LTS_BIN}\")\"\nLTS_Bin_Dir=\"$(cd \"${LTS_BIN}\"; pwd)\"\n\ncd $LTS_Bin_Dir\n\nmvn clean install -U -DskipTests\n\nDist_Bin_Dir=\"$LTS_Bin_Dir/dist/lts-$VERSION-bin\"\nmkdir -p $Dist_Bin_Dir\n\nDist_Bin_Dir=\"$(cd \"$(dirname \"${Dist_Bin_Dir}/.\")\"; pwd)\"\n\nmkdir -p $Dist_Bin_Dir\n\n# 打包\nStartup_Dir=\"$LTS_Bin_Dir/lts-startup/\"\ncd $Startup_Dir\nmvn clean assembly:assembly -DskipTests -Pdefault\n\ncp -rf $Startup_Dir/target/lts-bin/lts/*  $Dist_Bin_Dir\n\nmkdir -p $Dist_Bin_Dir/war/jetty/lib\nmvn clean assembly:assembly -DskipTests -Plts-admin\ncp -rf $Startup_Dir/target/lts-bin/lts/lib  $Dist_Bin_Dir/war/jetty\ncp -rf $LTS_Bin_Dir/lts-admin/target/lts-admin-$VERSION.war $Dist_Bin_Dir/war/lts-admin.war\n\n cd $LTS_Bin_Dir/dist\n zip -r lts-$VERSION-bin.zip lts-$VERSION-bin/*\n rm -rf lts-$VERSION-bin\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-jobclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-jobtracker",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-monitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-startup",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts-tasktracker",
          "type": "tree",
          "content": null
        },
        {
          "name": "lts",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 15.1044921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>7</version>\n    </parent>\n\n    <groupId>com.github.ltsopensource</groupId>\n    <artifactId>lts-parent</artifactId>\n    <packaging>pom</packaging>\n    <version>1.7.2-SNAPSHOT</version>\n    <url>https://github.com/ltsopensource/light-task-scheduler.git</url>\n    <modules>\n        <module>lts-core</module>\n        <module>lts-jobtracker</module>\n        <module>lts-tasktracker</module>\n        <module>lts-jobclient</module>\n        <module>lts-admin</module>\n        <module>lts-spring</module>\n        <module>lts-startup</module>\n        <module>lts-monitor</module>\n        <module>lts</module>\n    </modules>\n\n    <properties>\n        <jedis.version>2.7.3</jedis.version>\n        <fastjson.version>1.2.7</fastjson.version>\n        <leveldbjni.version>1.8</leveldbjni.version>\n        <curator.version>2.9.1</curator.version>\n        <zkclient.version>0.1</zkclient.version>\n        <zk.version>3.4.5</zk.version>\n        <mongo.driver.version>3.0.2</mongo.driver.version>\n        <morphia.version>1.0.0-rc1</morphia.version>\n        <junit.version>4.11</junit.version>\n        <netty.version>4.0.20.Final</netty.version>\n        <jcl_version>1.1</jcl_version>\n        <slf4j.version>1.7.5</slf4j.version>\n        <log4j.version>1.2.16</log4j.version>\n        <dbutils.version>1.6</dbutils.version>\n        <druid.version>1.0.14</druid.version>\n        <mysql.version>5.1.26</mysql.version>\n        <sleepycat.version>5.0.73</sleepycat.version>\n        <rocksdbjni.version>3.10.1</rocksdbjni.version>\n        <h2.version>1.4.189</h2.version>\n        <springframework.version>4.2.5.RELEASE</springframework.version>\n        <mina.version>2.0.9</mina.version>\n        <hessian.version>4.0.38</hessian.version>\n        <mapdb.version>2.0-beta10</mapdb.version>\n        <groovy.version>2.4.5</groovy.version>\n        <jackson.version>2.6.3</jackson.version>\n        <aspectj.version>1.7.2</aspectj.version>\n        <javax.mail.version>1.5.4</javax.mail.version>\n        <spring.boot.version>1.3.3.RELEASE</spring.boot.version>\n        <javassist.version>3.20.0-GA</javassist.version>\n        <quartz.version>2.2.2</quartz.version>\n        <logback.version>1.2.1</logback.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.netty</groupId>\n                <artifactId>netty-all</artifactId>\n                <version>${netty.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.zookeeper</groupId>\n                <artifactId>zookeeper</artifactId>\n                <version>${zk.version}</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.jboss.netty</groupId>\n                        <artifactId>netty</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>log4j</groupId>\n                        <artifactId>log4j</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <groupId>com.github.sgroschupf</groupId>\n                <artifactId>zkclient</artifactId>\n                <version>${zkclient.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.curator</groupId>\n                <artifactId>curator-recipes</artifactId>\n                <version>${curator.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.mongodb.morphia</groupId>\n                <artifactId>morphia</artifactId>\n                <version>${morphia.version}</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.mongodb</groupId>\n                        <artifactId>mongo-java-driver</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>com.thoughtworks.proxytoys</groupId>\n                        <artifactId>proxytoys</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>cglib</groupId>\n                        <artifactId>cglib-nodep</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <groupId>org.mongodb</groupId>\n                <artifactId>mongo-java-driver</artifactId>\n                <version>${mongo.driver.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>druid</artifactId>\n                <version>${druid.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>${mysql.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>redis.clients</groupId>\n                <artifactId>jedis</artifactId>\n                <version>${jedis.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.fusesource.leveldbjni</groupId>\n                <artifactId>leveldbjni-all</artifactId>\n                <version>${leveldbjni.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>fastjson</artifactId>\n                <version>${fastjson.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>log4j</groupId>\n                <artifactId>log4j</artifactId>\n                <version>${log4j.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-log4j12</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>commons-logging</groupId>\n                <artifactId>commons-logging-api</artifactId>\n                <version>${jcl_version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.sleepycat</groupId>\n                <artifactId>je</artifactId>\n                <version>${sleepycat.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.rocksdb</groupId>\n                <artifactId>rocksdbjni</artifactId>\n                <version>${rocksdbjni.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.h2database</groupId>\n                <artifactId>h2</artifactId>\n                <version>${h2.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.mina</groupId>\n                <artifactId>mina-core</artifactId>\n                <version>${mina.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.caucho</groupId>\n                <artifactId>hessian</artifactId>\n                <version>${hessian.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.mapdb</groupId>\n                <artifactId>mapdb</artifactId>\n                <version>${mapdb.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.codehaus.groovy</groupId>\n                <artifactId>groovy</artifactId>\n                <version>${groovy.version}</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.apache.ant</groupId>\n                        <artifactId>ant</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>com.thoughtworks.xstream</groupId>\n                        <artifactId>xstream</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.codehaus.gpars</groupId>\n                        <artifactId>gpars</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.apache.ivy</groupId>\n                        <artifactId>ivy</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.fusesource.jansi</groupId>\n                        <artifactId>jansi</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-core</artifactId>\n                <version>${jackson.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-databind</artifactId>\n                <version>${jackson.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.sun.mail</groupId>\n                <artifactId>javax.mail</artifactId>\n                <version>${javax.mail.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot</artifactId>\n                <version>${spring.boot.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-autoconfigure</artifactId>\n                <version>${spring.boot.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.javassist</groupId>\n                <artifactId>javassist</artifactId>\n                <version>${javassist.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-classic</artifactId>\n                <version>${logback.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <profiles>\n        <profile>\n            <id>dev</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-compiler-plugin</artifactId>\n                        <configuration>\n                            <source>1.6</source>\n                            <target>1.6</target>\n                            <encoding>UTF-8</encoding>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <configuration>\n                            <attach>true</attach>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <phase>compile</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-compiler-plugin</artifactId>\n                        <configuration>\n                            <source>1.6</source>\n                            <target>1.6</target>\n                            <encoding>UTF-8</encoding>\n                        </configuration>\n                    </plugin>\n                    <!-- Source -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- Javadoc -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.9.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.5</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <scm>\n        <connection>scm:git:https://github.com/ltsopensource/light-task-scheduler.git</connection>\n        <developerConnection>scm:git:https://github.com/ltsopensource/light-task-scheduler.git</developerConnection>\n        <url>https://github.com/ltsopensource/light-task-scheduler.git</url>\n    </scm>\n\n    <developers>\n        <developer>\n            <id>hugui.hg</id>\n            <name>hugui</name>\n            <email>254963746@qq.com</email>\n        </developer>\n    </developers>\n</project>\n"
        },
        {
          "name": "开发者规范.md",
          "type": "blob",
          "size": 0.5009765625,
          "content": "1.尽量不要引入多余的jar包,如果是那种插件扩展,可以将jar设置为provided\n\n2.例子放入在lts-example中,测试用例在test中\n\n3.核心模块不要使用spring,spring作为一种扩展放入在lts-spring中\n\n4.新的贡献者,可以先merge到develop分支上,我先过一下,如果后面合作熟练了,成为稳定的开发者,可以直接提交master,并加入到开发组中\n\n5.贡献者如果想做那一块,可以先和群主qq254963746沟通下\n\n6.其他添加中...... 合作愉快"
        },
        {
          "name": "开发计划.md",
          "type": "blob",
          "size": 2.97265625,
          "content": "####1.任务暂停和恢复功能（紧急，耗时短）完成\n大概思路就是，新创建一个暂停任务表，当任务在页面上被用户点击暂停之后，就会被移动到这个暂停表里面，恢复的时候，从这个暂停表里面恢复到可执行表里面。当然这里面需要考虑任务正在执行等情况。\n####2.任务实时触发功能（紧急，耗时短）\n这个功能暂时定为只有Cron任务才会有这个功能，对于实时和定时任务，只需要修改下任务执行时间即可（如果定时任务也需要这个功能，内部也只是将任务执行时间和优先级设置下就行），对于Cron任务，就需要内部新添加一个任务去执行。\n####3.LTS KV存储优化：\n开始LTS自己的KV存储的目的主要是为了解决对第三方KV存储引擎的依赖，可以针对LTS的使用场景做各种优化和定制化。优化部分主要包含：\n\n* 当每个DataBlock的存储entry数目低于一定阀值（譬如50%）的时候，需要将DataBlock进行“垃圾回收”，删除并整理一些逻辑上已经删除的数据块。\n* 索引Index，目前只提供了一种内存方式的实现，还需要提供一种B+树的实现来解决大数据量下内存的局限性问题。目前之后Index snapshot来解决每次启动时缩短重放事务日志的问题。\n* 对于事务日志TxLog，目前没有删除策略，需要增加一个策略：当TxLog日志文件到达一定数量之后，并且当前所存活的kv个数为0的时候，可以将这些TxLog移除到bak目录下，待bak目录个数到达一定个数或者一定时间之后再删除。\n* 可以思考下数据压缩的问题\n\n####4.任务监控和报警（紧急，耗时长）：\n监控方面主要着手几个方面：\n\n* 对于各个节点的监控和报警\n\t* 某一个group的节点全挂了之后，需要报警\n\t* 对于某台机器的资源，譬如内存，cpu 等不足时报警\n\t* 对于某台TaskTracker消费任务失败率达到80%（一个阀值）之后报警，并自动将他隔离。\n\n* 对于任务执行指标的监控和报警\n\t* 可以设置对某种任务消费异常的报警\n\t* 对于任务队列中的任务消费延迟，堆积个数太多的时候进行告警\n\t* 可以自定义收到特定的BizLog进行报警\n* 报警形式可以是短信，邮件等\n\n####6.zookeeper客户端的封装 完成\n主要是为了去除对zkClient和curator的依赖\n####7.LTS nio框架的实现 完成(待优化)\n主要是为了去除对netty和mina的依赖\n####8.任务依赖的原生支持\n####9.对任务业务日志的处理\n可以采用按数量分表\n####10.TaskTracker增加设置,当自身节点内存不足或者cpu资源不足的时候,不去pull任务 (完成)\n\n####11.监控中心可以部署多个,主要用于收集节点的一些统计信息,采用注册中心节点暴露,不用各个节点人工设置 (完成)\n\n####12.在控制台增加对正在执行的job终止操作, 提供中断接口 (完成)\n\n####13.重试次数可以设置在任务级别(完成)\n\n"
        }
      ]
    }
  ]
}