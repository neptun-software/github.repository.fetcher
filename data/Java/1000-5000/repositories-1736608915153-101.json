{
  "metadata": {
    "timestamp": 1736608915153,
    "page": 101,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "square/sqlbrite",
      "stars": 4564,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".buildscript",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": "# IntelliJ IDEA\n.idea\n*.iml\n\n# Gradle\n.gradle\ngradlew.bat\nbuild\nlocal.properties\nreports\n\n# Apple\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.46484375,
          "content": "language: android\n\nandroid:\n  components:\n    - tools\n    - platform-tools\n\njdk:\n  - oraclejdk8\n\nbefore_install:\n  # Install SDK license so Android Gradle plugin can install deps.\n  - mkdir \"$ANDROID_HOME/licenses\" || true\n  - echo \"d56f5187479451eabf01fb78af6dfcb131a6481e\" > \"$ANDROID_HOME/licenses/android-sdk-license\"\n  # Install the rest of tools (e.g., avdmanager)\n  - sdkmanager tools\n  # Install the system image\n  - sdkmanager \"system-images;android-18;default;armeabi-v7a\"\n  # Create and start emulator for the script. Meant to race the install task.\n  - echo no | avdmanager create avd --force -n test -k \"system-images;android-18;default;armeabi-v7a\"\n  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &\n\ninstall: ./gradlew clean assemble assembleAndroidTest --stacktrace\n\nbefore_script:\n  - android-wait-for-emulator\n  - adb shell input keyevent 82\n\nscript: ./gradlew check connectedCheck --stacktrace\n\nafter_success:\n  - .buildscript/deploy_snapshot.sh\n\nenv:\n  global:\n    - secure: \"NIWC0zkThskXn7uduTJ1yT78voqEgzEfw8tOImGNBjZ/NDU6yxM4bh+tq+fnkn5ENjELV6fgcYd2DUJSWmkFD2k9ZMRNLm//AqlQihl8aT+DpWhDdCkQjnolHnjm1O7+ys7Q/vswBZEzkBxzIgivajZEzvjarQItJjbpBftQ0Cs=\"\n    - secure: \"ahPT9EzJVpkM4q2HA/VBxUzgicvfdOOZaEvOiQKJofy1FrLjrBS2LFxqCbyffg0sjGUyvBMLg767CSt/0xRRFWIpsjxCfmvEmAURi89zdZ8MUNXIwe7x/0lXCdQIt8eueq3Qh5qFwJUy4aFbzVvcmMXKswWzw1O0+IcvYX00/xc=\"\n\nbranches:\n  except:\n    - gh-pages\n\nnotifications:\n  email: false\n\nsudo: false\n\ncache:\n  directories:\n    - $HOME/.gradle\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.3984375,
          "content": "Change Log\n==========\n\nVersion 3.2.0 *(2018-03-05)*\n----------------------------\n\n * New: Add `query(SupportSQLiteQuery)` method for one-off queries.\n\n\nVersion 3.1.1 *(2018-02-12)*\n----------------------------\n\n * Fix: Useless `BuildConfig` classes are no longer included.\n * Fix: Eliminate Java interop checks for Kotlin extensions as they're only for Kotlin consumers and the checks exist in the Java code they delegate to anyway.\n\n\nVersion 3.1.0 *(2017-12-18)*\n----------------------------\n\n * New: `inTransaction` Kotlin extension function which handles starting, marking successful, and ending\n   a transaction.\n * New: Embedded lint check which validates the number of arguments passed to `query` and `createQuery`\n   match the number of expected arguments of the SQL statement.\n * Fix: Properly indent multi-line SQL statements in the logs for `query`.\n\n\nVersion 3.0.0 *(2017-11-28)*\n----------------------------\n\nGroup ID has changed to `com.squareup.sqlbrite3`.\n\n * New: Build on top of the Android architecture components Sqlite support library. This allows swapping\n   out the underlying Sqlite implementation to that of your choosing.\n\nBecause of the way the Sqlite support library works, there is no interop bridge between 1.x or 2.x to\nthis new version. If you haven't fully migrated to 2.x, complete that migration first and then upgrade\nto 3.x all at once.\n\n\nVersion 2.0.0 *(2017-07-07)*\n----------------------------\n\nGroup ID has changed to `com.squareup.sqlbrite2`.\n\n * New: RxJava 2.x support. Backpressure is no longer supported as evidenced by the use of\n   `Observable`. If you want to slow down query notifications based on backpressure or another metric\n   like time then you should apply those operators yourself.\n * New: `mapToOptional` for queries that return 0 or 1 rows.\n * New: `sqlbrite-kotlin` module provides `mapTo*` extension functions for `Observable<Query>`.\n * New: `sqlbrite-interop` module allows bridging 1.x and 2.x libraries together so that notifications\n   from each trigger queries from the other.\n\nNote: This version only supports RxJava 2.\n\n\nVersion 1.1.2 *(2017-06-30)*\n----------------------------\n\n * Internal architecture changes to support the upcoming 2.0 release and a bridge allowing both 1.x\n   and 2.x to be used at the same time.\n\n\nVersion 1.1.1 *(2016-12-20)*\n----------------------------\n\n * Fix: Correct spelling of `getWritableDatabase()` to match `SQLiteOpenHelper`.\n\n\nVersion 1.1.0 *(2016-12-16)*\n----------------------------\n\n * New: Expose `getReadableDatabase()` and `getWriteableDatabase()` convenience methods.\n * Fix: Do not cache instances of the readable and writable database internally as the framework\n   does this by default.\n\n\nVersion 1.0.0 *(2016-12-02)*\n----------------------------\n\n * RxJava dependency updated to 1.2.3.\n * Restore `@WorkerThread` annotations to methods which do I/O. If you're using Java 8 with\n   Retrolambda or Jack you need to use version 2.3 or newer of the Android Gradle plugin to have\n   these annotations correctly handled by lint.\n\n\nVersion 0.8.0 *(2016-10-21)*\n----------------------------\n\n * New: A `Transformer<Query, Query>` can be supplied which is applied to each returned observable.\n * New: `newNonExclusiveTransaction()` starts transactions in `IMMEDIATE` mode. See the platform\n   or SQLite documentation for more information.\n * New: APIs for insert/update/delete which allow providing a compiled `SQLiteStatement`.\n\n\nVersion 0.7.0 *(2016-07-06)*\n----------------------------\n\n * New: Allow `mapTo*` mappers to return `null` values. This is useful when querying on a single,\n   nullable column for which `null` is a valid value.\n * Fix: When `mapToOne` does not emit a value downstream, request another value from upstream to\n   ensure fixed-item requests (such as `take(1)`) as properly honored.\n * Fix: Add logging to synchronous `execute` methods.\n\n\nVersion 0.6.3 *(2016-04-13)*\n----------------------------\n\n * `QueryObservable` constructor is now public allow instances to be created for tests.\n\n\nVersion 0.6.2 *(2016-03-01)*\n----------------------------\n\n * Fix: Document explicitly and correctly handle the fact that `Query.run()` can return `null` in\n   some situations. The `mapToOne`, `mapToOneOrDefault`, `mapToList`, and `asRows` helpers have all\n   been updated to handle this case and each is documented with their respective behavior.\n\n\nVersion 0.6.1 *(2016-02-29)*\n----------------------------\n\n * Fix: Apply backpressure strategy between database/content provider and the supplied `Scheduler`.\n   This guards against backpressure exceptions when the scheduler is unable to keep up with the rate\n   at which queries are being triggered.\n * Fix: Indent the subsequent lines of a multi-line queries when logging.\n\n\nVersion 0.6.0 *(2016-02-17)*\n----------------------------\n\n * New: Require a `Scheduler` when wrapping a database or content provider which will be used when\n   sending query triggers. This allows the query to be run in subsequent operators without needing an\n   additional `observeOn`. It also eliminates the need to use `subscribeOn` since the supplied\n   `Scheduler` will be used for all emissions (similar to RxJava's `timer`, `interval`, etc.).\n\n   This also corrects a potential violation of the RxJava contract and potential source of bugs in that\n   all triggers will occur on the supplied `Scheduler`. Previously the initial value would trigger\n   synchronously (on the subscribing thread) while subsequent ones trigger on the thread which\n   performed the transaction. The new behavior puts the initial trigger on the same thread as all\n   subsequent triggers and also does not force transactions to block while sending triggers.\n\n\nVersion 0.5.1 *(2016-02-03)*\n----------------------------\n\n * New: Query logs now contain timing information on how long they took to execute. This only covers\n   the time until a `Cursor` was made available, not object mapping or delivering to subscribers.\n * Fix: Switch query logging to happen when `Query.run` is called, not when a query is triggered.\n * Fix: Check for subscribing inside a transaction using a more accurate primitive.\n\n\nVersion 0.5.0 *(2015-12-09)*\n----------------------------\n\n * New: Expose `mapToOne`, `mapToOneOrDefault`, and `mapToList` as static methods on `Query`. These\n   mirror the behavior of the methods of the same name on `QueryObservable` but can be used later in\n   a stream by passing the returned `Operator` instances to `lift()` (e.g.,\n   `take(1).lift(Query.mapToOne(..))`).\n * Requires RxJava 1.1.0 or newer.\n\n\nVersion 0.4.1 *(2015-10-19)*\n----------------------------\n\n * New: `execute` method provides the ability to execute arbitrary SQL statements.\n * New: `executeAndTrigger` method provides the ability to execute arbitrary SQL statements and\n   notifying any queries to update on the specified table.\n * Fix: `Query.asRows` no longer calls `onCompleted` when the downstream subscriber has unsubscribed.\n\n\nVersion 0.4.0 *(2015-09-22)*\n----------------------------\n\n * New: `mapToOneOrDefault` replaces `mapToOneOrNull` for more flexibility.\n * Fix: Notifications of table updates as the result of a transaction now occur after the transaction\n   has been applied. Previous the notification would happen during the commit at which time it was\n   invalid to create a new transaction in a subscriber.\n\n\nVersion 0.3.1 *(2015-09-02)*\n----------------------------\n\n * New: `mapToOne` and `mapToOneOrNull` operators on `QueryObservable`. These work on queries which\n   return 0 or 1 rows and are a convenience for turning them into a type `T` given a mapper of type\n   `Func1<Cursor, T>` (the same which can be used for `mapToList`).\n * Fix: Remove `@WorkerThread` annotations for now. Various combinations of lint, RxJava, and\n   retrolambda can cause false-positives.\n\n\nVersion 0.3.0 *(2015-08-31)*\n----------------------------\n\n * Transactions are now exposed as objects instead of methods. Call `newTransaction()` to start a\n   transaction. On the `Transaction` instance, call `markSuccessful()` to indicate success and\n   `end()` to commit or rollback the transaction. The `Transaction` instance implements `Closeable`\n   to allow its use in a try-with-resources construct. See the `newTransaction()` Javadoc for more\n   information.\n * `Query` instances can now be turned directly into an `Observable<T>` by calling `asRows` with a\n   `Func1<Cursor, T>` that maps rows to a type `T`. This allows easy filtering and limiting in\n   memory rather than in the query. See the `asRows` Javadoc for more information.\n * `createQuery` now returns a `QueryObservable` which offers a `mapToList` operator. This operator\n   also takes a `Func1<Cursor, T>` for mapping rows to a type `T`, but instead of individual rows it\n   collects all the rows into a list. For large query results or frequently updated tables this can\n   create a lot of objects. See the `mapToList` Javadoc for more information.\n * New: Nullability, `@CheckResult`, and `@WorkerThread` annotations on all APIs allow a more useful\n   interaction with lint in consuming projects.\n\n\nVersion 0.2.1 *(2015-07-14)*\n----------------------------\n\n * Fix: Add support for backpressure.\n\n\nVersion 0.2.0 *(2015-06-30)*\n----------------------------\n\n * An `Observable<Query>` can now be created from wrapping a `ContentResolver` in order to observe\n   queries from another app's content provider.\n * `SqlBrite` class is now a factory for both a `BriteDatabase` (the `SQLiteOpenHelper` wrapper)\n   and `BriteContentResolver` (the `ContentResolver` wrapper).\n\n\nVersion 0.1.0 *(2015-02-21)*\n----------------------------\n\nInitial release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.5888671875,
          "content": "Contributing\n============\n\nIf you would like to contribute code you can do so through GitHub by forking\nthe repository and sending a pull request.\n\nWhen submitting code, please make every effort to follow existing conventions\nand style in order to keep the code as readable as possible. Please also make\nsure your code compiles by running `./gradlew clean build`.\n\nBefore your code can be accepted into the project you must also sign the\n[Individual Contributor License Agreement (CLA)][1].\n\n\n [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3642578125,
          "content": "SQL Brite\n=========\n\nA lightweight wrapper around `SupportSQLiteOpenHelper` and `ContentResolver` which introduces reactive\nstream semantics to queries.\n\n# Deprecated\n\nThis library is no longer actively developed and is considered complete.\n\nIts database features (and far, far more) are now offered by [SQLDelight](https://github.com/cashapp/sqldelight/)\nand its [upgrading guide](https://github.com/cashapp/sqldelight/blob/1.0.0/UPGRADING.md) offers some\nmigration help.\n\nFor content provider monitoring please use [Copper](https://github.com/cashapp/copper) instead.\n\n\n\nUsage\n-----\n\nCreate a `SqlBrite` instance which is an adapter for the library functionality.\n\n```java\nSqlBrite sqlBrite = new SqlBrite.Builder().build();\n```\n\nPass a `SupportSQLiteOpenHelper` instance and a `Scheduler` to create a `BriteDatabase`.\n\n```java\nBriteDatabase db = sqlBrite.wrapDatabaseHelper(openHelper, Schedulers.io());\n```\n\nA `Scheduler` is required for a few reasons, but the most important is that query notifications can\ntrigger on the thread of your choice. The query can then be run without blocking the main thread or\nthe thread which caused the trigger.\n\nThe `BriteDatabase.createQuery` method is similar to `SupportSQLiteDatabase.query` except it takes an\nadditional parameter of table(s) on which to listen for changes. Subscribe to the returned\n`Observable<Query>` which will immediately notify with a `Query` to run.\n\n```java\nObservable<Query> users = db.createQuery(\"users\", \"SELECT * FROM users\");\nusers.subscribe(new Consumer<Query>() {\n  @Override public void accept(Query query) {\n    Cursor cursor = query.run();\n    // TODO parse data...\n  }\n});\n```\n\nUnlike a traditional `query`, updates to the specified table(s) will trigger additional\nnotifications for as long as you remain subscribed to the observable. This means that when you\ninsert, update, or delete data, any subscribed queries will update with the new data instantly.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nusers.subscribe(new Consumer<Query>() {\n  @Override public void accept(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"jw\", \"Jake Wharton\"));\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"mattp\", \"Matt Precious\"));\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"strong\", \"Alec Strong\"));\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 4\n```\n\nIn the previous example we re-used the `BriteDatabase` object \"db\" for inserts. All insert, update,\nor delete operations must go through this object in order to correctly notify subscribers.\n\nUnsubscribe from the returned `Subscription` to stop getting updates.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nSubscription s = users.subscribe(new Consumer<Query>() {\n  @Override public void accept(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"jw\", \"Jake Wharton\"));\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"mattp\", \"Matt Precious\"));\ns.unsubscribe();\n\ndb.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"strong\", \"Alec Strong\"));\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 3\n```\n\nUse transactions to prevent large changes to the data from spamming your subscribers.\n\n```java\nfinal AtomicInteger queries = new AtomicInteger();\nusers.subscribe(new Consumer<Query>() {\n  @Override public void accept(Query query) {\n    queries.getAndIncrement();\n  }\n});\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 1\n\nTransaction transaction = db.newTransaction();\ntry {\n  db.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"jw\", \"Jake Wharton\"));\n  db.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"mattp\", \"Matt Precious\"));\n  db.insert(\"users\", SQLiteDatabase.CONFLICT_ABORT, createUser(\"strong\", \"Alec Strong\"));\n  transaction.markSuccessful();\n} finally {\n  transaction.end();\n}\n\nSystem.out.println(\"Queries: \" + queries.get()); // Prints 2\n```\n*Note: You can also use try-with-resources with a `Transaction` instance.*\n\nSince queries are just regular RxJava `Observable` objects, operators can also be used to\ncontrol the frequency of notifications to subscribers.\n\n```java\nusers.debounce(500, MILLISECONDS).subscribe(new Consumer<Query>() {\n  @Override public void accept(Query query) {\n    // TODO...\n  }\n});\n```\n\nThe `SqlBrite` object can also wrap a `ContentResolver` for observing a query on another app's\ncontent provider.\n\n```java\nBriteContentResolver resolver = sqlBrite.wrapContentProvider(contentResolver, Schedulers.io());\nObservable<Query> query = resolver.createQuery(/*...*/);\n```\n\nThe full power of RxJava's operators are available for combining, filtering, and triggering any\nnumber of queries and data changes.\n\n\n\nPhilosophy\n----------\n\nSQL Brite's only responsibility is to be a mechanism for coordinating and composing the notification\nof updates to tables such that you can update queries as soon as data changes.\n\nThis library is not an ORM. It is not a type-safe query mechanism. It won't serialize the same POJOs\nyou use for Gson. It's not going to perform database migrations for you.\n\nSome of these features are offered by [SQL Delight][sqldelight] which can be used with SQL Brite.\n\n\n\nDownload\n--------\n\n```groovy\nimplementation 'com.squareup.sqlbrite3:sqlbrite:3.2.0'\n```\n\nFor the 'kotlin' module that adds extension functions to `Observable<Query>`:\n```groovy\nimplementation 'com.squareup.sqlbrite3:sqlbrite-kotlin:3.2.0'\n```\n\n\nSnapshots of the development version are available in [Sonatype's `snapshots` repository][snap].\n\n\n\nLicense\n-------\n\n    Copyright 2015 Square, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n\n\n [snap]: https://oss.sonatype.org/content/repositories/snapshots/\n [sqldelight]: https://github.com/square/sqldelight/\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.7138671875,
          "content": "Releasing\n========\n\n 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.\n 2. Update the `CHANGELOG.md` for the impending release.\n 3. Update the `README.md` with the new version.\n 4. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n 5. `./gradlew clean uploadArchives`.\n 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.\n 7. `git tag -a X.Y.Z -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n 8. Update the `gradle.properties` to the next SNAPSHOT version.\n 9. `git commit -am \"Prepare next development version.\"`\n 10. `git push && git push --tags`\n\nIf step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.626953125,
          "content": "buildscript {\n  ext.versions = [\n      'minSdk': 14,\n      'compileSdk': 27,\n      'kotlin': '1.1.60',\n      'lint': '26.0.1'\n  ]\n\n  repositories {\n    mavenCentral()\n    google()\n    jcenter()\n  }\n\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.0.1'\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}\"\n  }\n}\n\nallprojects {\n  repositories {\n    mavenCentral()\n    google()\n    jcenter()\n  }\n\n  group = GROUP\n  version = VERSION_NAME\n}\n\next {\n  // Android dependencies.\n  supportV4 = 'com.android.support:support-v4:27.0.0'\n  supportAnnotations = 'com.android.support:support-annotations:27.0.0'\n  supportTestRunner = 'com.android.support.test:runner:0.5'\n\n  supportSqlite = 'android.arch.persistence:db:1.0.0'\n  supportSqliteFramework = 'android.arch.persistence:db-framework:1.0.0'\n\n  // Third-party dependencies.\n  kotlinStdLib = \"org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}\"\n  dagger = 'com.google.dagger:dagger:2.13'\n  daggerCompiler = 'com.google.dagger:dagger-compiler:2.13'\n  butterKnifeRuntime = 'com.jakewharton:butterknife:8.8.1'\n  butterKnifeCompiler = 'com.jakewharton:butterknife-compiler:8.8.1'\n  timber = 'com.jakewharton.timber:timber:4.6.0'\n  autoValue = 'com.google.auto.value:auto-value:1.5'\n  autoValueParcel = 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'\n  rxJava = 'io.reactivex.rxjava2:rxjava:2.1.3'\n  rxAndroid = 'io.reactivex.rxjava2:rxandroid:2.0.1'\n  rxBinding = 'com.jakewharton.rxbinding2:rxbinding:2.0.0'\n  junit = 'junit:junit:4.12'\n  truth = 'com.google.truth:truth:0.36'\n\n  // Lint dependencies.\n  lintApi = \"com.android.tools.lint:lint-api:${versions.lint}\"\n  lint = \"com.android.tools.lint:lint:${versions.lint}\"\n  lintTests = \"com.android.tools.lint:lint-tests:${versions.lint}\"\n}\n\nconfigurations {\n  osstrich\n}\ndependencies {\n  osstrich 'com.squareup.osstrich:osstrich:1.2.0'\n}\ntask publishV1Javadoc(type: JavaExec) {\n  classpath = configurations.osstrich\n  main = 'com.squareup.osstrich.JavadocPublisher'\n  args = [\n      'build/javadoc',\n      'https://github.com/square/sqlbrite',\n      'com.squareup.sqlbrite'\n  ]\n}\ntask publishV2Javadoc(type: JavaExec) {\n  classpath = configurations.osstrich\n  main = 'com.squareup.osstrich.JavadocPublisher'\n  args = [\n      'build/javadoc',\n      'https://github.com/square/sqlbrite',\n      'com.squareup.sqlbrite2'\n  ]\n}\ntask publishV3Javadoc(type: JavaExec) {\n  classpath = configurations.osstrich\n  main = 'com.squareup.osstrich.JavadocPublisher'\n  args = [\n      'build/javadoc',\n      'https://github.com/square/sqlbrite',\n      'com.squareup.sqlbrite3'\n  ]\n}\ntask publishJavadoc(dependsOn: [publishV1Javadoc, publishV2Javadoc, publishV3Javadoc])\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.595703125,
          "content": "GROUP=com.squareup.sqlbrite3\nVERSION_NAME=3.2.1-SNAPSHOT\n\nPOM_DESCRIPTION=A lightweight wrapper around SQLiteOpenHelper which introduces reactive stream semantics to SQL operations.\n\nPOM_URL=http://github.com/square/sqlbrite/\nPOM_SCM_URL=http://github.com/square/sqlbrite/\nPOM_SCM_CONNECTION=scm:git:git://github.com/square/sqlbrite.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/square/sqlbrite.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=square\nPOM_DEVELOPER_NAME=Square, Inc.\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.123046875,
          "content": "include ':sqlbrite'\ninclude ':sqlbrite-kotlin'\ninclude ':sqlbrite-lint'\ninclude ':sample'\n\nrootProject.name = 'sqlbrite-root'\n"
        },
        {
          "name": "sqlbrite-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlbrite-lint",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlbrite",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}