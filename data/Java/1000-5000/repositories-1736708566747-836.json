{
  "metadata": {
    "timestamp": 1736708566747,
    "page": 836,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vladmihalcea/hypersistence-utils",
      "stars": 2437,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2294921875,
          "content": "# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n.idea/\ntarget/\n*.iml"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5244140625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright {2017-2020} {Mihalcea Vlad-Alexandru}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.7373046875,
          "content": "[![License](https://img.shields.io/github/license/vladmihalcea/hypersistence-utils.svg)](https://raw.githubusercontent.com/vladmihalcea/hypersistence-utils/master/LICENSE)\n[![Maven Central](https://img.shields.io/maven-central/v/io.hypersistence/hypersistence-utils-parent.svg)](https://central.sonatype.com/artifact/io.hypersistence/hypersistence-utils-hibernate-63/)\n[![JavaDoc](http://javadoc.io/badge/io.hypersistence/hypersistence-utils-hibernate-60.svg)](http://www.javadoc.io/doc/io.hypersistence/hypersistence-utils-hibernate-63)\n\n### Migrating to version 3\n\nThe project name was changed from Hibernate Types to Hypersistence Utils because the scope\nof the project is much broader now, offering Spring utilities as well.\n\nFor this reason, when migrating from the Hibernate Types 2.x to Hypersistence Utils 3.x,\nyou will need to follow these steps:\n\n1. First, you will need to change your Maven or Gradle dependency, as illustrated by the [Installation Guide](#installation-guide).\n2. Second, you will need to change the package name from `com.vladmihalcea.hibernate` to `io.hypersistence.utils.hibernate`.\n3. Third, you will need to change the package name from `com.vladmihalcea.spring` to `io.hypersistence.utils.spring`.\n\nThat's it!\n\n### Introduction\n\nThe Hypersistence Utils project gives you general-purpose utilities for both Spring and Hibernate. \n\nThe main advantage of this project is that it supports a broad range of Hibernate versions, spanning from Hibernate ORM **6.6**, **6.5**, **6.4**, **6.3** to **6.2**, **6.1**, **6.0**, **5.6**, and Hibernate **5.5**.\n\n### Installation Guide\n\nDepending on the Hibernate version you are using, you need to add the following dependency:\n\n#### Hibernate 6.6, 6.5, 6.4, and 6.3\n\n    <dependency>\n        <groupId>io.hypersistence</groupId>\n        <artifactId>hypersistence-utils-hibernate-63</artifactId>\n        <version>3.9.0</version>\n    </dependency>\n\n#### Hibernate 6.2\n\n    <dependency>\n        <groupId>io.hypersistence</groupId>\n        <artifactId>hypersistence-utils-hibernate-62</artifactId>\n        <version>3.9.0</version>\n    </dependency>\n\n#### Hibernate 6.1 and 6.0\n\n    <dependency>\n        <groupId>io.hypersistence</groupId>\n        <artifactId>hypersistence-utils-hibernate-60</artifactId>\n        <version>3.9.0</version>\n    </dependency>\n\n#### Hibernate 5.6 and 5.5\n\n    <dependency>\n        <groupId>io.hypersistence</groupId>\n        <artifactId>hypersistence-utils-hibernate-55</artifactId>\n        <version>3.9.0</version>\n    </dependency>\n\n#### Optional Maven Dependencies\n\nThe Hypersistence Utils project defines a list of optional dependencies that you will have to declare explicitly in your project in order to use them.\n\nThe reason why all these dependencies are optional, like Guava, Jackson, or PostgreSQL JDBC Driver, is that not all projects may need them.\n\nMoreover, the dependency version is extremely important because, from time to time, security issues may be discovered that get fixed in newer versions.\n\n> So, relying on this library to supply you with the dependency versions is a very dangerous thing to do. \n> \n> For instance, there have been [65 security issues discovered in the Jackson Data Bind library](https://www.cvedetails.com/vulnerability-list/vendor_id-15866/product_id-42991/Fasterxml-Jackson-databind.html) this project is heavily relying on. \n> \n> To avoid risking security issues, you need to take the responsibility of constantly upgrading all the dependencies that you are using along with the Hypersistence Utils library.\n\n##### JSON Optional Maven Dependencies\n\nIf you are using JSON Types, then you might be interested in setting the following dependencies based on your Hibernate version:\n\n###### Hibernate 6\n\n````xml\n<dependency>\n    <groupId>com.fasterxml.jackson.module</groupId>\n    <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>\n    <version>${jackson-module-jakarta-xmlbind-annotation}</version>\n</dependency>\n````\n\n###### Hibernate 5\n\n````xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>${jackson-databind.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>com.fasterxml.jackson.module</groupId>\n    <artifactId>jackson-module-jaxb-annotations</artifactId>\n    <version>${jackson-module-jaxb-annotation}</version>\n</dependency>\n````\n\n##### Guava Optional Maven Dependency\n\nIf you are mapping a `Range` using Guava, then you have to provide the Guava dependency explicitly:\n\n````xml\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>${guava.version}</version>\n</dependency>\n````\n\n##### Java Money and Currency API Optional Maven Dependency\n\nIf you are mapping a `MonetaryAmount`, then you have to provide the Moneta dependency explicitly:\n\n````xml\n<dependency>\n    <groupId>org.javamoney</groupId>\n    <artifactId>moneta</artifactId>\n    <version>${moneta.version}</version>\n    <type>pom</type>\n</dependency>\n````\n\n##### PostgreSQL Optional Maven Dependency\n\nIf you are mapping a PostgreSQL-specific column type (e.g., `inet`, `hstore`, `array`, `interval`), then you have to provide the PostgreSQL dependency explicitly:\n\n````xml\n<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>${postgresql.version}</version>\n</dependency>\n````\n\n### Features\n\n#### JSON \n\n##### Generic JSON Type\n\nThe `JsonType` allows you to map JSON column types, no matter if you're using Oracle,\nSQL Server, PostgreSQL or MySQL.\n\n###### Hibernate 6\n\nIf you're using Hibernate 6, you can map any JSON column to `Map`, `List`, POJO, `String`, or `JsonNode` entity property:\n\n````java\n@Type(JsonType.class)\nprivate Map<String, String> properties = new HashMap<>();\n````\n\n###### Hibernate 5\n\nIf you're using Hibernate 5, you can either provide the fully-qualified name of the Hibernate Type:\n\n````\n@Type(type = \"io.hypersistence.utils.hibernate.type.json.JsonType\")\n````\n\nOr, you can add the following mapping to your `package-info.java` class in the same package where your JPA entities are located:\n\n````java\n@TypeDef(\n    name = \"json\", typeClass = JsonType.class\n)\npackage io.hypersistence.optimizer;\n\nimport io.hypersistence.utils.hibernate.type.json.JsonType;\nimport org.hibernate.annotations.TypeDef;\n````\n\nLater, you can map the `Map`, `List`, POJO, `String`, or `JsonNode` entity properties to JSON columns like this:\n\n````java\n@Type(type = \"json\")\nprivate Map<String, String> properties = new HashMap<>();\n````\n\nFor more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).\n\n##### Best Practices\n\n> When mapping a JSON column type to a `POJO`, `List<POJO>` or `Map<String, POJO>`, you need to make sure that the `POJO` type overrides the default `equals` and `hashCode` methods and implements them according to the JSON object content. \n> \n> Otherwise, the Hibernate dirty checking mechanism may trigger unexpected UPDATE statements. Check out the [#134 issue for more details](https://github.com/vladmihalcea/hypersistence-utils/issues/138).\n\n##### Database-specific JSON types\n\n###### Oracle\n\nWhen using Oracle, you have several options:\n\n- you can use the generic `JsonType` that can work with the `JSON`, `VARCHAR`, or `BLOB` column types,\nas long as you hint the column type using the `columnDefinition` attribute of the JPA `@Column` annotation.\n- you can use the `JsonStringType` to map a `VARCHAR2` column type storing JSON.\n- you can use the `JsonBlobType` to map a `BLOB` column type storing JSON.\n\nFor more details, check out [this article](https://vladmihalcea.com/oracle-json-jpa-hibernate/).\n\n###### SQL Server\n\nWhen using SQL Server, you can use the generic `JsonType` or the `JsonStringType` to map an `NVARCHAR` column type storing JSON.\n\nFor more details, check out [this article](https://vladmihalcea.com/sql-server-json-hibernate/).\n\n###### PostgreSQL\n\nWhen using PostgreSQL, you can use the generic `JsonType` or the `JsonBinaryType` to map both `jsonb` and `json` column types.\n\nFor more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).\n\n###### MySQL\n\nWhen using MySQL, you can use the generic `JsonType` or the `JsonStringType` to map the `json` column type.\n\nFor more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).\n\n##### JSON mapping examples\n\n* [How to map a POJO to a JSON column using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/)\n* [How to map a String JPA property to a JSON column using Hibernate](https://vladmihalcea.com/map-string-jpa-property-json-column-hibernate/)\n* [How to map a Jackson `JsonNode` to a JSON column](https://vladmihalcea.com/how-to-store-schema-less-eav-entity-attribute-value-data-using-json-and-hibernate/)\n* [How to map JSON collections using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-collections-using-jpa-and-hibernate/)\n* [How to map a Java Map entity property as a JSON column with JPA and Hibernate](https://vladmihalcea.com/java-map-json-jpa-hibernate/)\n* [How to map Java Records to JSON columns using Hibernate](https://vladmihalcea.com/java-records-json-hibernate/)\n* [How to map polymorphic JSON objects with JPA and Hibernate](https://vladmihalcea.com/polymorphic-json-objects-hibernate/)\n* [How to encrypt and decrypt JSON properties with JPA and Hibernate](https://vladmihalcea.com/encrypt-decrypt-json-jpa/)\n* [Why you should use Hibernate Dynamic Update for JSON properties](https://vladmihalcea.com/hibernate-dynamic-update-json-properties/)\n* [How to map Oracle JSON columns using JPA and Hibernate](https://vladmihalcea.com/oracle-json-jpa-hibernate/)\n* [How to map SQL Server JSON columns using JPA and Hibernate](https://vladmihalcea.com/sql-server-json-hibernate/)\n* [How to customize the Jackson ObjectMapper used by Hypersistence Utils](https://vladmihalcea.com/hibernate-types-customize-jackson-objectmapper/)\n* [How to customize the JSON Serializer used by Hypersistence Utils](https://vladmihalcea.com/how-to-customize-the-json-serializer-used-by-hibernate-types/)\n* [How to fix the Hibernate `No Dialect mapping for JDBC type: 1111` issue when mixing JSON types with native SQL queries](https://vladmihalcea.com/hibernate-no-dialect-mapping-for-jdbc-type/)\n* [How to fix the `column is of type jsonb but expression is of type record` or `bytea` issue](https://vladmihalcea.com/jpa-query-setparameter-hibernate/)\n\n#### ARRAY \n\n* [How to map a PostgreSQL ARRAY to a Java `List` with JPA and Hibernate](https://vladmihalcea.com/postgresql-array-java-list/)\n* [How to map the PostgreSQL ARRAY to Java Arrays with JPA and Hibernate](https://vladmihalcea.com/how-to-map-java-and-sql-arrays-with-jpa-and-hibernate/)\n* [Multidimensional array mapping with JPA and Hibernate](https://vladmihalcea.com/multidimensional-array-jpa-hibernate/)\n* [How to map the HSQLDB ARRAY type with JPA and Hibernate](https://vladmihalcea.com/hibernate-hsqldb-array-type/)\n\n#### PostgreSQL Types (e.g. ENUM, INET, HSTORE, RANGE)\n\n* [Java Enum to PostgreSQL Enum Type](https://vladmihalcea.com/the-best-way-to-map-an-enum-type-with-jpa-and-hibernate/)\n* [How to map the PostgreSQL Inet type with JPA and Hibernate](https://vladmihalcea.com/postgresql-inet-type-hibernate/)\n* [How to map a PostgreSQL HStore entity property with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-hstore-jpa-entity-property-hibernate/)\n* [How to map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate](https://vladmihalcea.com/map-postgresql-enum-array-jpa-entity-property-hibernate/)\n* [How to map a PostgreSQL Range column type with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-range-column-type-jpa-hibernate/)\n* [How to map a PostgreSQL Interval to a Java `Duration` with Hibernate](https://vladmihalcea.com/map-postgresql-interval-java-duration-hibernate/)\n\n#### Generic Types\n\n* [The best way to map `MonetaryAmount` with JPA and Hibernate](https://vladmihalcea.com/monetaryamount-jpa-hibernate/)\n* [How to map `java.time.YearMonth` to DATE or INTEGER column](https://vladmihalcea.com/java-yearmonth-jpa-hibernate/)\n* [How to map `java.time.Year` and `java.time.Month` with JPA and Hibernate](https://vladmihalcea.com/java-time-year-month-jpa-hibernate/)\n* [`Character` to nullable CHAR column](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)\n* [`ImmutableType` utility to simplify `UserType` implementations](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)\n\n#### Utilities\n\n##### Spring\n\n* [The awesome BaseJpaRepository](https://vladmihalcea.com/basejparepository-hypersistence-utils/)\n* [The best Spring Data JpaRepository](https://vladmihalcea.com/best-spring-data-jparepository/)\n* [The Spring Data `findAll` Anti-Pattern](https://vladmihalcea.com/spring-data-findall-anti-pattern/)\n* [The Spring `@Retry` annotation to automatically retry on failure](https://vladmihalcea.com/optimistic-locking-retry-with-jpa/)\n\n###### BaseJpaRepository\n\nThe `BaseJpaRepository` is a much better alternative to the default Spring Data `JpaRepository` because it does not provide a `findAll` method or a `save` method that makes no sense in JPA terminology.\n\nTo use the `BaseJpaRepository` utility, make sure that you provide the `repositoryBaseClass` attribute in the `@EnableJpaRepositories` configuration to reference the `BaseJpaRepositoryImpl` from the Hypersistence Utils project:\n\n````java\n@Configuration\n@EnableJpaRepositories(\n    value = \"your.repository.package\",\n    repositoryBaseClass = BaseJpaRepositoryImpl.class\n)\npublic class JpaConfiguration {\n    ...\n}\n````\n\nThe `your.repository.package` is the Java package of your Spring repositories.\n\n###### HibernateRepository\n\nWhile the `BaseJpaRepository` is to be preferred, in case you need to use the default `JpaRepository`, then you can at least extend the `HibernateRepository` as well to deprecate the methods that may cause problems.\n\nTo use the `HibernateRepository`, make sure that you include the `io.hypersistence.utils.spring.repository` package in your `@EnableJpaRepositories` configuration:\n\n````java\n@Configuration\n@EnableJpaRepositories(\n    value = {\n        \"io.hypersistence.utils.spring.repository\",\n        \"your.repository.package\",\n        ...\n    }\n)\npublic class JpaConfiguration {\n    ...\n}\n````\n\nThe `your.repository.package` is the Java package of your Spring repositories.\n\n##### Identifier Generators\n\n* [`BatchSequenceGenerator` - Hibernate Batch Sequence Generator](https://vladmihalcea.com/hibernate-batch-sequence-generator/)\n\n##### Naming Strategy\n\n* [`CamelCaseToSnakeCaseNamingStrategy` - How to map camelCase properties to snake_case column names with Hibernate](https://vladmihalcea.com/map-camel-case-properties-snake-case-column-names-hibernate/)\n\n##### DTO Projection and ResultTransformer\n\n* [`ClassImportIntegrator` - How to write a compact DTO projection query with JPA](https://vladmihalcea.com/dto-projection-jpa-query/)\n* [`ListResultTransformer` - The best way to use a Hibernate ResultTransformer](https://vladmihalcea.com/hibernate-resulttransformer/)\n* [`MapResultTransformer` - How to return a Map result from a JPA or Hibernate query](https://vladmihalcea.com/jpa-query-map-result/)\n\n##### SQL Statement Count Validator\n\n* [`SQLStatementCountValidator` - How to detect the Hibernate N+1 query problem during testing](https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/)\n\n##### Query Utilities\n\n* [`SQLExtract` - How to get the SQL query from JPQL or JPA Criteria](https://vladmihalcea.com/get-sql-from-jpql-or-criteria/)\n* [`QueryStackTraceLogger` - How to find the source of an SQL query generated by Hibernate](https://vladmihalcea.com/source-sql-query-hibernate/)\n\n### Requirements\n\n* Java version supported by the Hibernate ORM version you are using.\n* SLF4J\n* Jackson Databind\n\n### Bug fixes and enhancements\n\n**This project is Free, as in Libre, not Gratis.**\n\n> There is no free-of-charge support. Only the source code and the binaries are available for free.\n> \n> If you need assistance with a given issue, you will need to purchase either the [Coaching Basic](https://vladmihalcea.teachable.com/p/high-performance-java-persistence-coaching-basic) or the [Coaching Pro](https://vladmihalcea.teachable.com/p/high-performance-java-persistence-coaching-pro) programs.\n\n#### Providing your own fix\n\nBesides the Paid support options, you have the option of providing your own fix. For that, here's what you need to do:\n\n1. Provide a replicating test case using the existing test cases as a template\n2. Provide a fix proposal\n3. Send a Pull Request with the fix proposal and the test case \n\nHowever, due to lack of time, I will review the submitted Pull Requests from time to time, so you may need to wait several months until the Pull Request is reviewed and integrated.\n\n### Are you struggling with application performance issues?\n\n<a href=\"https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes\">\n<img src=\"https://vladmihalcea.com/wp-content/uploads/2019/03/Hypersistence-Optimizer-300x250.jpg\" alt=\"Hypersistence Optimizer\">\n</a>\n\nImagine having a tool that can automatically detect if you are using JPA and Hibernate properly. No more performance issues, no more having to spend countless hours trying to figure out why your application is barely crawling.\n\nImagine discovering early during the development cycle that you are using suboptimal mappings and entity relationships or that you are missing performance-related settings. \n\nMore, with Hypersistence Optimizer, you can detect all such issues during testing and make sure you don't deploy to production a change that will affect data access layer performance.\n\n[Hypersistence Optimizer](https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) is the tool you've been long waiting for!\n\n#### Training\n\nIf you are interested in on-site training, I can offer you my [High-Performance Java Persistence training](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes),\nwhich can be adapted to one, two or three days of sessions. For more details, check out [my website](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).\n\n#### Consulting\n\nIf you want me to review your application and provide insight into how you can optimize it to run faster, \nthen check out my [consulting page](https://vladmihalcea.com/consulting/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).\n\n#### High-Performance Java Persistence Video Courses\n\nIf you want the fastest way to learn how to speed up a Java database application, then you should definitely enroll in [my High-Performance Java Persistence video courses](https://vladmihalcea.com/courses/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).\n\n#### High-Performance Java Persistence Book\n\nOr, if you prefer reading books, you are going to love my [High-Performance Java Persistence book](https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) as well.\n\n<a href=\"https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes\">\n<img src=\"https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_h200.jpg\" alt=\"High-Performance Java Persistence book\">\n</a>\n\n<a href=\"https://vladmihalcea.com/courses?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes\">\n<img src=\"https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_Video_Vertical_h200.jpg\" alt=\"High-Performance Java Persistence video course\">\n</a>\n\n#### Contributing Guide\n\nThe project uses [Maven Toolchains](https://maven.apache.org/guides/mini/guide-using-toolchains.html) as different modules are compiled and tested using different Java versions. \n\nHypersistence Utils 6 requires Java 11 while the other modules are compiled with Java 8.\n\nTo see how to configure Maven Toolchains, check out [this article](https://vladmihalcea.com/maven-and-java-multi-version-modules/).\n\nThe project uses various database systems for integration testing, and you can configure the JDBC connection settings using the \n`DatasourceProvider` instances (e.g., `PostgreSQLDataSourceProvider`), and the project uses Testcontainers to bootstrap a Docker container\nwith the required Oracle, SQL Server, PostgreSQL, or MySQL instance on demand. \n\n> If you are a regular contributor, it's advisable to set up the required database locally or use the Docker Compose configuration provided in the `docker` folder,\n> as bootstrapping the containers on demand is slower, and your tests are going to take longer to run.\n\nIf you want to fix an issue or add support for a new feature, please provide the associated integration test case that proves the improvement is working as expected.\n\n"
        },
        {
          "name": "build-without-tests.bat",
          "type": "blob",
          "size": 0.072265625,
          "content": "@echo off\n\nmvn -DskipTests -Darguments=-DskipTests clean install\n\ngoto:eof"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 28.7333984375,
          "content": "Version 3.9.0 - November 10, 2024\n================================================================================\n\nRemove PostgreSQLIntervalType from HibernateTypesContributor #750\n\nAdd support for SortedSet in ListArrayType #749\n\nAllow PostgreSQLCITextType entity attributes to be used in the LIKE query clause #743\n\nAdd support for GraalVM native image #740\n\nVersion 3.8.3 - September 30, 2024\n================================================================================\n\nFix Hibernate 6.6 JSON mapping on Oracle BLOB column type #742\n\nVersion 3.8.2 - July 25, 2024\n================================================================================\n\nAdd JsonClobType and improve JsonType to support CLOB column types #734\n\nVersion 3.8.1 - July 03, 2024\n================================================================================\n\nEnhance BatchSequenceGenerator with support for IdGeneratorType #728\n\nVersion 3.8.0 - June 27, 2024\n================================================================================\n\nAdd support for mapping Java Enums to custom ordinal values #730\n\nVersion 3.7.7 - June 21, 2024\n================================================================================\n\nRemove hypersistence-utils-hibernate-52 module #726\n\nMonetaryAmountType should use currency instead of property for the second attribute #707\n\nVersion 3.7.6 - June 04, 2024\n================================================================================\n\nUse Spring Data Range as an alternative to PostgreSQL range type #721\n\nListArrayType on Set entity attribute fails for EntityManager.merge operation #717\n\nVersion 3.7.5 - April 29, 2024\n================================================================================\n\nNullableCharacterType prevents Hibernate from escaping backslash properly #715\n\nVersion 3.7.4 - April 18, 2024\n================================================================================\n\nMake the JsonTypeDescriptor thread-safe #713\n\nEquals method not found on abstract class #709\n\nVersion 3.7.3 - February 16, 2024\n================================================================================\n\n\"java.lang.ClassCastException: class [Ljava.lang.String; cannot be cast to class [B\" thrown when using multiLoad with Hibernate 6.4 #700\n\nVersion 3.7.2 - February 08, 2024\n================================================================================\n\nExpecting BasicPluralJavaType for array class [Ljava.util.UUID;,\nbut got `com.vladmihalcea.hibernate.type.array.internal.UUIDArrayTypeDescriptor error with Hibernate 6.4 #698\n\nVersion 3.7.1 - January 30, 2024\n================================================================================\n\nAdd support for Hibernate 6.4 #685\n\nRemove hypersistence-utils-hibernate-5 module #693\n\nVersion 3.7.0 - December 18, 2023\n================================================================================\n\nOracle Interval Type does not support negative intervals #682\n\nReturn original object if target and original are the same when merging #677\n\nAdd a hypersistence-utils-hibernate-63 module for Hibernate 6.3 #657\n\nVersion 3.6.1 - November 11, 2023\n================================================================================\n\nExport the testing mechanism #676\n\nVersion 3.6.0 - October 12, 2023\n================================================================================\n\nImplement QueryStackTraceLogger using StackWalker #659\n\nAdd JFR based query logger #658\n\nAdds support for using MonetaryAmount in @ElementCollection #652\n\nVersion 3.5.3 - September 19, 2023\n================================================================================\n\nAdd QueryStackTraceLogger that allows you to locate the source of an SQL query executed by Hibernate #653\n\nVersion 3.5.2 - August 25, 2023\n================================================================================\n\nListArrayTypeDescriptor should use Collection as the underlying JavaType #650\n\nVersion 3.5.1 - June 26, 2023\n================================================================================\n\nThe ESCAPE literal in the LIKE clause is not escaped and caused an \"syntax error at end of input\" error #638\n\nVersion 3.5.0 - June 19, 2023\n================================================================================\n\nMake HibernateTypesContributor configurable so that we can enable or disable the automatic Type registration #623\n\nVersion 3.4.4 - June 16, 2023\n================================================================================\n\nImplement EnhancedUserType in a new DescriptorImmutableType in Hibernate 6 modules #633\n\nVersion 3.4.3 - June 12, 2023\n================================================================================\n\nPostgreSQLEnumType error \"Could not set value of type\" with Hibernate 6 and Quarkus Panache #634\n\nVersion 3.4.2 - May 30, 2023\n================================================================================\n\nRemove PostgreSQLEnumType from HibernateTypesContributor in Hibernate 6 modules #631\n\nVersion 3.4.1 - May 28, 2023\n================================================================================\n\nSQLExtractor returns JPQL instead of SQL #629\n\nPostgreSQLPeriodType refers to Duration in Javadoc #586\n\nVersion 3.4.0 - May 27, 2023\n================================================================================\n\nPostgreSQLEnumType returnedClass should be the Enum-specific class #627\n\n'empty' period causes NullPointerException in Range<ZonedDateTime> #622\n\nBatchSequenceGenerator should use PostgreSQL generate_series to speed up ID generation #614\n\nBatchSequenceGenerator should be able to search the DB sequence in the default schema #613\n\nBatchSequenceGenerator should be able to search the DB sequence in the default schema #611\n\nAdd a FloatArrayType to map float[] as JPA entity properties #606\n\nExpose Range utility methods #594\n\nVersion 3.3.2 - April 16, 2023\n================================================================================\n\nAdd support for configuring the Json Types using HBM files #610\n\nVersion 3.3.1 - April 01, 2023\n================================================================================\n\nAdapt the Hibernate 6.2 module to the new Type and BasicPluralJavaType changes #602\n\nVersion 3.3.0 - March 26, 2023\n================================================================================\n\nAdd support for Hibernate 6.2 #597\n\nRename peristAllAndFlush to persistAllAndFlush HibernateRepository #593\n\nAdd @Transactional annotation to BaseJpaRepository methods #584\n\nStarting app fails if Jackson is not present on the classpath #559\n\nAdd support for PostgreSQL ltree column type #543\n\nVersion 3.2.0 - February 16, 2023\n================================================================================\n\nThe Range Javadoc mentions Point instead of Range documentation #579\n\nChange signature of toString and areEqual methods in AbstractArrayTypeDescriptor to match those of its superclass #569\n\nListArrayTypeDescriptor doesn't support Spring JPA Projections #562\n\nAdd support for TSID #526\n\nVersion 3.1.2 - February 07, 2023\n================================================================================\n\nChange the RetryAspect log levels #570\n\nJsonNodeBinaryType cannot bind a JsonNode parameter value #554\n\nVersion 3.1.1 - January 13, 2023\n================================================================================\n\nInfinite recursion in getByReferenceId #552\n\nVersion 3.1.0 - January 11, 2023\n================================================================================\n\nAdd support for SQLStatementCountValidator #539\n\nAdd support for Retry annotation #537\n\nAdd the setObjectMapper method to the ObjectMapperWrapper class #304\n\nVersion 3.0.1 - December 28, 2022\n================================================================================\n\nCannot invoke \"JsonSerializer.clone(Object)\" because \"this.jsonSerializer\" is null #538\n\nDeprecate the hibernate-types configurations #535\n\nVersion 3.0.0 - December 27, 2022\n================================================================================\n\nRename project to Hypersistence Utils #534\n\nVersion 2.21.1 - December 24, 2022\n================================================================================\n\nObjectMapperWrapper throws NullPointerException when referencing the ObjectMapper #533\n\nVersion 2.21.0 - December 18, 2022\n================================================================================\n\nAdd support for Hibernate ORM 6.1 #531\n\nAvoid creating too many Jackson ObjectMapper instances #530\n\nAdd lockById function to the BaseHibernateRepository #529\n\nObjectMapperJsonSerializer should not clone a String JSON Object #528\n\nHibernate Types 6 throws ClassCastException \"CustomType cannot be cast to class EntityValuedModelPart\" #520\n\nAdd DistinctListTransformer to Hibernate Types 6 #517\n\nJsonTypeDescriptor throws NullPointerException when using a Kotlin var entity attribute #516\n\nHibernateRepository doesn't work with multiple DataSources #513\n\nEmpty ranges cannot be converted back to their initial String representation #507\n\nHibernateTypesContributor throws java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonSerializer #504\n\nAdd the BaseJpaRepository as a better alternative to Spring Data JpaRepository #501\n\nVersion 2.20.0 - October 17, 2022\n================================================================================\n\nAdd support for querying by the embedded MonetaryAmount attributes #497\n\nAllow the ListArrayType to support Set entity attributes #496\n\nJsonTypeDescriptor should use Objects.equals for both Collections and Maps #494\n\nAdd support for the PostgreSQL 'empty' range that's distinct from the (,) infinite range #492\n\nVersion 2.19.2 - September 12, 2022\n================================================================================\n\nAdd Javadoc comments for the HibernateRepository methods #484\n\nVersion 2.19.1 - September 10, 2022\n================================================================================\n\nThe findAll method from the JpaRepository is an Anti-Pattern and the HibernateRepository should deprecate it #483\n\nVersion 2.19.0 - September 05, 2022\n================================================================================\n\nGenerify the Comparable type in the Range class #478\n\nAdd support for GraalVM native images #343\n\nVersion 2.18.0 - August 15, 2022\n================================================================================\n\nReuse the DB containers bootstrapped by Testcontainers #477\n\nAdd support for Testcontainers #476\n\nAdd support for the JavaMoney (JSR 354) CurrencyUnit #473\n\nVersion 2.17.3 - August 03, 2022\n================================================================================\n\nHibernateTypesContributor throws java.lang.NoClassDefFoundError: javax/money/MonetaryAmount #468\n\nVersion 2.17.2 - August 03, 2022\n================================================================================\n\nMonetaryAmountType throws NullPointerException when reading a null column value #465\n\nEnvers throws MappingException: Type not supported for auditing #463\n\nVersion 2.17.1 - July 26, 2022\n================================================================================\n\nMake all jackson-module-jaxb-annotations optional #462\n\nSpring Boot 3 throws NoClassDefFoundError - javax/xml/bind/annotation/XmlElement #459\n\nAllow OffsetDateTime to be parsed from a Double value  #457\n\nVersion 2.17.0 - July 21, 2022\n================================================================================\n\nAvoid the double registration of DoubleArrayType in HibernateTypesContributor for PostgreSQL82Dialect #453\n\nUpdate Guava version to version 31.1 #451\n\nAdd support for JavaMoney (JSR 354) with the MonetaryAmountType #450\n\nAdd the amazing HibernateRepository #444\n\nVersion 2.16.3 - June 27, 2022\n================================================================================\n\nUpdate Readme to include information regarding building the project #447\n\nAdd PostgreSQLCITextType to TypeContributor #445\n\nHibernateTypesContributor does not register Types on Hibernate 5 and 4 for Oracle, SQL Server, and PostgreSQL #441\n\nMake the Configuration objects Serializable #438\n\nVersion 2.16.2 - May 03, 2022\n================================================================================\n\nMake the Hibernate 6 Ehcache dependency optional #433\n\nVersion 2.16.1 - April 16, 2022\n================================================================================\n\nFix the batch sequence generation for the 2.x version of H2 #428\n\nRemove warning generated on startup \"Type [org.hibernate.type.CustomType@6142b9dd] defined no registration keys; ignoring\" #427\n\nVersion 2.16.0 - April 12, 2022\n================================================================================\n\nAdd support for customizing the JsonType underlying Oracle column type #424\n\nChange JsonBinarySqlTypeDescriptor to bind the JSON object as String #423\n\nAdd support for Oracle 21c JSON columns #422\n\nVersion 2.15.2 - April 10, 2022\n================================================================================\n\nRegister the PostgreSQLGuavaRangeType only if Guava Range is available on the classpath #421\n\nVersion 2.15.1 - April 07, 2022\n================================================================================\n\nRename the Hibernate 6 Dynamic mutable and immutable abstract types #419\n\nAdd support for Hibernate 5.6 in BatchSequenceGenerator #417\n\nVersion 2.15.0 - April 06, 2022\n================================================================================\n\nAdd support for Hibernate 6 #401\n\nSupport for Jakarta EE 9 #380\n\nCreate a TypeContributor that registers all supported types #166\n\nVersion 2.14.1 - March 23, 2022\n================================================================================\n\nAdd support for using OffsetDateTime in JSON objects #408\n\nAdd support for LocalDateTime[] mappings #407\n\nAdd support for LocalDate[] mappings #406\n\nPostgreSQLEnumType#sqlTypes() should always return Types.VARCHAR #399\n\nVersion 2.14.0 - October 24, 2021\n================================================================================\n\nMove SQLExtractor to the query package #359\n\nMove the type/util classes that are not associated to types to the generic util package #358\n\nMove the ResultTransformer implementations to the query package #357\n\nMove CamelCaseToSnakeCaseNamingStrategy to the naming package #356\n\nAdd BatchSequenceGenerator #354\n\nVersion 2.13.0 - October 09, 2021\n================================================================================\n\nAvoid the unnecessary UPDATE for JsonNode entity mappings #348\n\nParse application.properties and load properties upon initialization #344\n\nVersion 2.12.1 - July 10, 2021\n================================================================================\n\nAdd support for half-hour time zones in ZonedDateTime #329\n\nVersion 2.12.0 - June 14, 2021\n================================================================================\n\nAdd hibernate-type-55 module #324\n\nPrevent NullPointerException caused by sqlArrayType in the ListArrayTypeDescriptor #320\n\nVersion 2.11.1 - May 11, 2021\n================================================================================\n\nAdd support for using the generic JsonType even when passing it via addScalar #317\n\nVersion 2.11.0 - May 10, 2021\n================================================================================\n\nAdd generic JsonType that auto-resolves the SqlTypeDescriptor #174\n\nVersion 2.10.4 - March 24, 2021\n================================================================================\n\nAdd fractional support to PostgreSQLIntervalType #307\n\nUse the provided delimiter parameter in the StringUtils.join method #302\n\nVersion 2.10.3 - February 25, 2021\n================================================================================\n\nReflectionUtils.getGenericTypes throws ClassCastException when using Kotlin Enums #300\n\nFalse positive \"class should override both the equals and hashCode methods\" for Enum values #295\n\nVersion 2.10.2 - January 05, 2021\n================================================================================\n\nSupport PostgreSQL empty & inf range and OffsetDateTime for Guava ranges #287\n\nVersion 2.10.1 - December 08, 2020\n================================================================================\n\nLog a WARN message if the JSON object does not implement equals and hashCode #281\n\nConvert parsing or processing errors to HibernateException #280\n\nThe NotSerializableException is thrown when mapping a Map<String, List<>> entity attribute to a JSON column #243\n\nAdd MySQL BinaryType #23\n\nVersion 2.10.0 - October 07, 2020\n================================================================================\n\nAdd support for mapping BigDecimal arrays #272\n\nAdd sub-second precision for Range<LocalDateTime> #267\n\nAdd MonthDayType to map a java.time.MonthDay to either a DATE or an INTEGER column type #262\n\nYearMonthTypeDescriptor failed to wrap null value from database in use case of YearMonthIntegerType #113\n\nVersion 2.9.13 - July 28, 2020\n================================================================================\n\nAdd support for mapping Java boolean[] arrays or List<Boolean> on PostgreSQL boolean[] array column types #167\n\nVersion 2.9.12 - June 19, 2020\n================================================================================\n\nAdd jackson-module-jaxb-annotations dependency #247\n\nGuava range mapping does not support infinite bounds #244\n\nAllow JSON Types to handle parameterized entity attribute type variables #237\n\nVersion 2.9.11 - June 02, 2020\n================================================================================\n\nAdd SQLExtractor utility #241\n\nA ClassNotFoundException is thrown when using an Enum List or Array in Kotlin #238\n\nVersion 2.9.10 - May 15, 2020\n================================================================================\n\nAllow the ClassImportIntegrator to include a relative path when registering DTO aliases #231\n\nObjectMapperJsonSerializer#clone throws NullPointerException if the Map key or value are null #227\n\nVersion 2.9.9 - April 26, 2020\n================================================================================\n\nAllow the custom ObjectMapper be used for JSON serialization #220\n\nAllow ArrayType to work on HSQLDB #219\n\nExpose the Hibernate Type for Range elements #215\n\nMake AbstractArrayTypeDescriptor#getArrayObjectClass public #214\n\nVersion 2.9.8 - April 09, 2020\n================================================================================\n\nAdd support for PostgreSQL \"infinity\" String values #211\n\nAdd support for saving null JSON objects when using the JsonStringType #210\n\nAdd support for \"empty\" String values when mapping PostgreSQL range column types #209\n\nVersion 2.9.7 - March 23, 2020\n================================================================================\n\nAdd support for checking if the bounds are open or closed for a given Range #204\n\nRow is always updated when using JSON objects wrapped in POJOs with no explicit equals method duplicate #203\n\nAllow all ArrayType objects to be used in the addScalar Hibernate Query method #190\n\nVersion 2.9.6 - March 21, 2020\n================================================================================\n\nUse byte arrays when cloning JSON objects #198\n\nAdd Iso8601MonthType to save the 1-based value instead of the 0-based Enum ordinal for a java.time.Month entity attribute #56\n\nVersion 2.9.5 - March 07, 2020\n================================================================================\n\nSwitch to using a single Logger instance #197\n\nVersion 2.9.4 - February 26, 2020\n================================================================================\n\nA NullPointerException is thrown when adding a ListArrayType definition to a MappedSuperClass #189\n\nThe ListArrayTypeDescriptor deepCopy method should not convert a List to an Java array #187\n\nAdd support for double arrays #183\n\nImprove logging of array parameters in BasicBinder #182\n\nListArrayType generates an extra UPDATE when persisting an entity #180\n\nVersion 2.9.3 - January 26, 2020\n================================================================================\n\nPostgreSQLEnumType is not compatible with Hibernate 5.2 because of JavaTypeDescriptorRegistry and TypeConfiguration #176\n\nUnexpected Hibernate dirty checking when using Sets #175\n\nGraalVM / Quarkus native build support #173\n\nWhen fetching an entity from the second-level cache, ListArrayType throws UnsupportedOperationException #169\n\nVersion 2.9.2 - January 14, 2020\n================================================================================\n\nMultidimensional Enum arrays are wrapped to String arrays and a ClassCastException is thrown #168\n\nVersion 2.9.1 - January 14, 2020\n================================================================================\n\nWhen fetching a List backed by a NULL PostgreSQL array, a NPE is thrown #164\n\nVersion 2.9.0 - January 06, 2020\n================================================================================\n\nAdd support for MapResultTransformer and ListResultTransformer #163\n\nEmpty multi-dimensional arrays throw ClassCastException #161\n\nAdd support for mapping java.util.Date ARRAY or List to PostgreSQL DATE[] and TIMESTAMP[] #150\n\nAdd support for mapping ARRAY to a java.util.List #97\n\nVersion 2.8.0 - December 08, 2019\n================================================================================\n\nObjectMapperJsonSerializer should inspect the inner Collection element type #158\n\nUpgrade Jackson Databind library to 2.9.10.1 #157\n\nAdd support for ClassImportIntegrator for compact DTOs #151\n\nNPE thrown by AbstractArrayTypeDescriptor#setParameterValues when creating a PostgreSQL ARRAY #142\n\nAdd support for PostgreSQL tx_vector column type #116\n\nVersion 2.7.1 - October 10, 2019\n================================================================================\n\nUnexpected dirty checking behavior on collections of POJOs mapped with JsonBinaryType #138\n\nMapping Enum to a String column uses toString() instead of name() #135\n\nUpgrade Jackson Databind library version to 2.9.10 #134\n\nAdd support for passing the mapping Class to Json Types #133\n\nVersion 2.7.0 - September 14, 2019\n================================================================================\n\nAdd support for JSON column values for Oracle #131\n\nAdd support for mapping a Guava Range object to a PostgreSQL range type #129\n\nAdd support for mapping the Java Period object to a PostgreSQL interval type #128\n\nAdd YearMonthTimestampType #127\n\nAbility to use PostgreSQLEnumType and EnumArrayType with TypedParameterValue #125\n\nVersion 2.6.1 - August 29, 2019\n================================================================================\n\nAdd support for Oracle Interval Day to Second column type #123\n\nVersion 2.6.0 - August 23, 2019\n================================================================================\n\nImmutableType should also implement the Type interface #119\n\nRemove unnecessary null checks and PGobject instantiations #118\n\nAdd support for the PostgreSQL citext type #117\n\nVersion 2.5.1 - August 15, 2019\n================================================================================\n\nAdd support for PostgreSQL Interval column type #53\n\nAdd missing type INSTANCE constants #111\n\nUpgrade Jackson Databind artifact version\n\nVersion 2.5.0 - July 05, 2019\n================================================================================\n\nAllow the Configuration to be accessed by all custom Types #107\n\nAdd handling for null PostgreSQL Range column values #106\n\nAdd PostgreSQL UUID ARRAY support #105\n\nVersion 2.4.4 - June 06, 2019\n================================================================================\n\nUpdate Javadoc to specify which JSON types are suitable for PostgreSQL and MySQL.\n\nAdd ZoneIdType to map the java.time.ZoneId to a VARCHAR-based column #103\n\nIn case the JSON attribute is a java.util.Set, an additional SQL UPDATE is executed when persisting the entity #100\n\nReplace reflection usage in PostgreSQL Types with Driver-specific API calls #99\n\nVersion 2.4.3 - April 07, 2019\n================================================================================\n\nAdjustment in ZoneDateTime pattern for 1-6 nanoseconds digits #90\n\nArray types use a singleton Java descriptors and that prevents them from being\ninitialized separately using dynamic parameters #84\n\nVersion 2.4.2 - February 26, 2019\n================================================================================\n\nAdd a LongArrayType to support long[] array mappings #82\n\nVersion 2.4.1 - February 01, 2019\n================================================================================\n\nChange constructor type args from Class to Type for JSON Types so it's easier to register them dynamically\n\nSupport insertion of String values into JSON columns #80\n\nFix issue with ZonedDateTimeRanges and DST #78\n\nVersion 2.4.0 - January 02, 2019\n================================================================================\n\nAdd support for PostgreSQL range type #63\n\nAdd support for the PostgreSQL hstore type #44\n\nVersion 2.3.5 - December 03, 2018\n================================================================================\n\nAdd EnumArrayType to support mapping database Enums as Java arrays #58\n\nVersion 2.3.4 - November 14, 2018\n================================================================================\n\nAdd CamelCaseToSnakeCaseNamingStrategy so that we can automatically map the cameCase JPA properties\nto snake_case database identifiers.\n\nVersion 2.3.3 - October 23, 2018\n================================================================================\n\nAdd types for java.time.Year and java.time.Month #51\n\nAdd continuous Integer solution for YearMonthType #47\n\nVersion 2.3.2 - October 18, 2018\n================================================================================\n\nAdd the Java 9 automatic module name to the MANIFEST file.\n\nMigrate hibernate-types-52 to Jackson 2.9.7.\n\nVersion 2.3.1 - October 16, 2018\n================================================================================\n\nAdd support for the java.util.YearMonth which can be persisted as a DATE or INTEGER column\n\nVersion 2.3.0 - September 06, 2018\n================================================================================\n\nAdd InetType for PostgreSQL #43\n\nVersion 2.2.3 - September 06, 2018\n================================================================================\n\nString fields on entity as JSONB don't work correctly #39\n\nVersion 2.2.2 - June 03, 2018\n================================================================================\n\nAllow the JSON to be extracted either via the ResultSet#getObject or ResultSet#getString based on the underlying SQL type descriptor.\n\nVersion 2.2.1 - May 12, 2018\n================================================================================\n\nPass the original IOException when throwing the IllegalArgumentException from ObjectMapperWrapper#readValue and ObjectMapperWrapper#writeValueAsString.\n\nVersion 2.2.0 - March 27, 2018\n================================================================================\n\nFix issue which allows you to customize the deep copy mechanism via the JsonSerializer interface supplied by the hibernate.types.json.serializer configuration property #21\n\nVersion 2.1.1 - March 08, 2018\n================================================================================\n\nAllows using the ObjectMapperWrapper in JSON types and pass a custom ObjectMapper via the hibernate.types.jackson.object.mapper configuration property.\n\nRefactor internal PropertyLoader to Configuration and make it work with hibernate.properties as well.\n\nVersion 2.1.0 - March 07, 2018\n================================================================================\n\nAdd support to provide an external ObjectMapper #3\n\nAdd the cause to the IllegalArgumentException thrown by JacksonUtil.\n\nVersion 2.0.0 - February 02, 2018\n================================================================================\n\nRefactor support for List, Set, Map to be saved as JSON using a simplified mechanism which no longer requires the TypeReferenceJsonStringSerializer. For this reason, this version breaks backward compatibility.\n\nOptimize String equality checks in JsonTypeDescriptor.\n\nMigrate hibernate-types-52 to Jackson 2.9.0.\n\nVersion 1.2.0 - November 28, 2017\n================================================================================\n\nSerialization problem when using JsonNodeBinaryType and Hibernate 2nd-level cache #14\n\nAdd support for List, Set, Map to be saved as JSON #11\n\nVersion 1.1.2 - November 11, 2017\n================================================================================\n\nJacksonUtil#clone should support Lists as well #8\n\nAdd an INSTANCE constant to existing Types.\n\nVersion 1.1.1 - October 26, 2017\n================================================================================\n\nUpdate JavaDocs to reference documentation.\n\nVersion 1.1.0 - October 26, 2017\n================================================================================\n\nAdd support for PostgreSQL Enum Type.\n\nUse ObjectMapper#findAndRegisterModules() for the default ObjectMapper.\n\nVersion 1.0.0 - September 25, 2017\n================================================================================\n\nInitial release which adds the JSON, Array, Nullable Character and ImmutableType support.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "fork-jvm-test.bat",
          "type": "blob",
          "size": 0.0400390625,
          "content": "@echo off\n\nmvn -Pfork-jvm-test clean test"
        },
        {
          "name": "hypersistence-utils-hibernate-55",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypersistence-utils-hibernate-60",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypersistence-utils-hibernate-62",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypersistence-utils-hibernate-63",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 6.31640625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven2 Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Migwn, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n  # TODO classpath?\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`which java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\necho $MAVEN_PROJECTBASEDIR\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 4.876953125,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Maven2 Start Up Batch script\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM M2_HOME - location of maven2's installed home dir\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\nif exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\n\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\n%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 16.0517578125,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>7</version>\n    </parent>\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>io.hypersistence</groupId>\n    <artifactId>hypersistence-utils-parent</artifactId>\n    <version>3.9.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <name>Hypersistence Utils</name>\n    <description>\n        Hypersistence Utils adds extra utilities for Spring and Hibernate, like custom Hibernate Types and\n        better Spring Data Repositories.\n    </description>\n\n    <url>https://github.com/vladmihalcea/hypersistence-utils</url>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <id>author</id>\n            <name>Vlad Mihalcea</name>\n            <email>mih_vlad@yahoo.com</email>\n        </developer>\n    </developers>\n\n    <scm>\n        <developerConnection>scm:git:git@github.com:vladmihalcea/hypersistence-utils.git</developerConnection>\n        <url>scm:git:git@github.com:vladmihalcea/hypersistence-utils.git</url>\n        <connection>scm:git:git@github.com:vladmihalcea/hypersistence-utils.git</connection>\n        <tag>HEAD</tag>\n    </scm>\n\n    <repositories>\n        <repository>\n            <id>Spring</id>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <url>https://repo.spring.io/milestone</url>\n        </repository>\n    </repositories>\n\n    <modules>\n        <module>hypersistence-utils-hibernate-63</module>\n        <module>hypersistence-utils-hibernate-62</module>\n        <module>hypersistence-utils-hibernate-60</module>\n        <module>hypersistence-utils-hibernate-55</module>\n    </modules>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.testcontainers</groupId>\n                <artifactId>testcontainers-bom</artifactId>\n                <version>${testcontainers.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n\n        <!-- Required dependencies -->\n        <dependency>\n            <groupId>io.hypersistence</groupId>\n            <artifactId>hypersistence-tsid</artifactId>\n            <version>${hypersistence-tsid.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>${junit.version}</version>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <!-- Test containers -->\n\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>mysql</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>postgresql</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>oracle-xe</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>mssqlserver</artifactId>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <!-- Test dependencies -->\n\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>${mockito.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.hsqldb</groupId>\n            <artifactId>hsqldb</artifactId>\n            <version>${hsqldb.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <version>${h2.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>${postgresql.version}</version>\n            <scope>provided</scope>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.oracle.database.jdbc</groupId>\n            <artifactId>ojdbc8</artifactId>\n            <version>${oracle.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.microsoft.sqlserver</groupId>\n            <artifactId>mssql-jdbc</artifactId>\n            <version>${mssql.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <defaultGoal>test</defaultGoal>\n\n        <testResources>\n            <testResource>\n                <directory>src/test/resources</directory>\n                <filtering>true</filtering>\n            </testResource>\n        </testResources>\n\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-toolchains-plugin</artifactId>\n                <version>${maven-toolchains-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>toolchain</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <toolchains>\n                        <jdk>\n                            <version>${jdk-test.version}</version>\n                        </jdk>\n                    </toolchains>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>${maven-compiler-plugin.version}</version>\n                <configuration>\n                    <showDeprecation>true</showDeprecation>\n                    <showWarnings>true</showWarnings>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <excludes>\n                        <exclude>**/*JvmForkTest.java</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>sonar-maven-plugin</artifactId>\n                <version>${sonar-maven-plugin.version}</version>\n            </plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-site-plugin</artifactId>\n\t\t\t\t<version>${maven-site-plugin.version}</version>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-project-info-reports-plugin</artifactId>\n\t\t\t\t<version>${maven-project-info-reports-plugin.version}</version>\n\t\t\t</plugin>\n        </plugins>\n\n    </build>\n\n    <profiles>\n        <!--\n        mvn -P release -DignoreSnapshots=true release:clean release:prepare\n        mvn -P release release:perform\n        -->\n        <profile>\n            <id>release</id>\n            <activation>\n                <property>\n                    <name>performRelease</name>\n                    <value>true</value>\n                </property>\n            </activation>\n            <properties>\n                <console.log.level>ERROR</console.log.level>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>${maven-source-plugin.version}</version>\n                        <executions>\n                            <execution>\n                                <id>attach-sources</id>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <inherited>true</inherited>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>${maven-javadoc-plugin.version}</version>\n                        <executions>\n                            <execution>\n                                <id>attach-javadocs</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                        <configuration>\n                            <additionalOptions>\n                                <additionalOption>-Xdoclint:none</additionalOption>\n                            </additionalOptions>\n                            <source>8</source>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>${maven-gpg-plugin.version}</version>\n                        <configuration>\n                            <keyname>mih_vlad@yahoo.com</keyname>\n                            <passphrase>${gpg.passphrase}</passphrase>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-release-plugin</artifactId>\n                        <version>${maven-release-plugin.version}</version>\n                        <configuration>\n                            <autoVersionSubmodules>true</autoVersionSubmodules>\n                            <useReleaseProfile>false</useReleaseProfile>\n                            <releaseProfiles>release</releaseProfiles>\n                            <goals>deploy</goals>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-deploy-plugin</artifactId>\n                        <version>${maven-deploy-plugin.version}</version>\n                        <configuration>\n                            <retryFailedDeploymentCount>5</retryFailedDeploymentCount>\n                            <deployAtEnd>true</deployAtEnd>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>test</id>\n            <properties>\n                <console.log.level>ERROR</console.log.level>\n            </properties>\n        </profile>\n        <profile>\n            <id>fork-jvm-test</id>\n            <properties>\n                <console.log.level>DEBUG</console.log.level>\n            </properties>\n\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <version>${maven-surefire-plugin.version}</version>\n                        <configuration>\n                            <reuseForks>false</reuseForks>\n                            <useSystemClassLoader>false</useSystemClassLoader>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <properties>\n        <jdk.version>8</jdk.version>\n        <jdk-test.version>8</jdk-test.version>\n\n        <maven.compiler.source>${jdk.version}</maven.compiler.source>\n        <maven.compiler.target>${jdk.version}</maven.compiler.target>\n        <maven.compiler.testSource>${jdk-test.version}</maven.compiler.testSource>\n        <maven.compiler.testTarget>${jdk-test.version}</maven.compiler.testTarget>\n\n        <console.log.level>DEBUG</console.log.level>\n\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n        <maven-toolchains-plugin.version>1.1</maven-toolchains-plugin.version>\n        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>\n        <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>\n        <sonar-maven-plugin.version>2.2</sonar-maven-plugin.version>\n        <coveralls-maven-plugin.version>3.1.0</coveralls-maven-plugin.version>\n        <jacoco-maven-plugin.version>0.7.5.201505241946</jacoco-maven-plugin.version>\n        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>\n        <maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>\n        <maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>\n        <maven-release-plugin.version>2.5.2</maven-release-plugin.version>\n        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>\n        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>\n        <maven-site-plugin.version>3.7.1</maven-site-plugin.version>\n        <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>\n\n        <hypersistence-tsid.version>2.1.1</hypersistence-tsid.version>\n        <slf4j.version>1.7.25</slf4j.version>\n        <logback.version>1.2.3</logback.version>\n\n        <junit.version>4.13.1</junit.version>\n        <mockito.version>1.8.5</mockito.version>\n        <datasource-proxy.version>1.6</datasource-proxy.version>\n\n        <testcontainers.version>1.17.3</testcontainers.version>\n        <hsqldb.version>2.2.8</hsqldb.version>\n        <h2.version>1.4.200</h2.version>\n        <postgresql.version>42.4.1</postgresql.version>\n        <mysql.version>8.0.30</mysql.version>\n        <oracle.version>21.5.0.0</oracle.version>\n        <mssql.version>11.2.1.jre8</mssql.version>\n\n    </properties>\n\n</project>\n"
        },
        {
          "name": "release-perform.bat",
          "type": "blob",
          "size": 0.1572265625,
          "content": "@echo off\n\nif \"%1\" == \"\" goto usage\n\nSET passphrase=%1\nmvn362 -P release -Dgpg.passphrase=%passphrase% release:perform\ngoto:eof\n\n:usage\necho Usage: %0 passphrase"
        },
        {
          "name": "release-prepare.bat",
          "type": "blob",
          "size": 0.193359375,
          "content": "@echo off\n\nif \"%1\" == \"\" goto usage\n\nSET passphrase=%1\nmvn362 -P release -Dgpg.passphrase=%passphrase% -DignoreSnapshots=true release:clean release:prepare\ngoto:eof\n\n:usage\necho Usage: %0 passphrase"
        },
        {
          "name": "test-hibernate-module.bat",
          "type": "blob",
          "size": 0.0810546875,
          "content": "@echo off\n\nmvn -Ptest clean test -pl hypersistence-utils-hibernate-%* -am\n\ngoto:eof"
        },
        {
          "name": "test.bat",
          "type": "blob",
          "size": 0.0341796875,
          "content": "@echo off\n\nmvn -Ptest clean test %*"
        }
      ]
    }
  ]
}