{
  "metadata": {
    "timestamp": 1736609040428,
    "page": 281,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MovingBlocks/Terasology",
      "stars": 3697,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7900390625,
          "content": "# Force default for all text just in case - commit with LF, check out with OS-specific line endings\n* text=auto\n\n*.bat          text eol=crlf\n*.block        text\n*.command      text eol=lf\n*.glsl         text\n*.gradle       text\n*.groovy       text\n*.html         text diff=html\n*.java         text diff=java\n*.markdown     text\n*.py           text diff=python\n*.properties   text\n*.sh           text eol=lf\n*.shape        text\n*.texinfo      text\n*.txt          text\n*.xml          text diff=html \n\n*.blend        binary\n*.exe          binary\n*.jar          binary\n*.keystore     binary\n*.png          binary\n*.jpeg\t       binary\n*.dll          binary\n*.dylib        binary\n*.pdb          binary\n*.ogg          binary\n*.dbg          binary\n\ngradlew        text eol=lf\nLICENSE        text\nNOTICE         text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5947265625,
          "content": "# Ignore general\n*~\n._*\n*.bak\n/.*\n\n# Except this stuff\n!.gitattributes\n!.gitignore\n!.github\n\n# Ignore generated code\n/engine/src/jmh/generated\n\n# Ignore subdirs with their own Git roots. PC Facade and Core module are bundled with the main repo.\nextensions\n/facades/*\n!/facades/PC\n!/facades/subprojects.gradle\n/modules/*\n!/modules/subprojects.gradle\n/metas/*\n!/metas/subprojects.gradle\n/libs/*\n!/libs/subprojects.gradle\n\n# Ignore Gradle and some transient project config files (template versions available under /templates)\nbuild/\n/gradle.properties\n/override.cfg\n\n# Do share some IntelliJ settings (see .idea/.gitignore for specifics)\n!/.idea\n# But not build outputs, or things it will regenerate when it syncs with gradle.\nout/\n/*.iws\n/projectFilesBackup*\n*.iml\n\n# Ignore Eclipse\n.checkstyle\n.project\n.classpath\n.settings/\nbin/\nfacades/PC/Terasology.launch\n\n# Ignore Linux\n*.directory\n\n#Ignore OSX\nIcon\n.DS_Store\n.DS_Store?\n.Spotlight-V100\n.DocumentRevisions-V100\n.TemporaryItems\n.Trashes\n.dbfseventsd\n.fseventsd\n.VolumeIcon.icns\n\n#Ignore Windows\nehthumbs.db\nThumbs.db\n\n# Ignore Terasology output\n*.log\n/saves/\n/recordings/\n/configs/\n/screenshots/\n/logs/\n/cachedModules/\n/terasology-server/\n/terasology-2ndclient/\n/terasology-3rdclient/\nconfig.cfg\nentityDump.txt\n*entityDump*.json\nnuiEditorAutosave.json\n\n# Historical Output\n/SAVED_WORLDS/\n/worlds/\n/screens/\n/unittesthome/\n\n# Ignore stuff we extract for use with Terasology\n/natives/\nconfig/metrics/\n\n# Ignore API files\nAPI_file.txt\nNew_API_file.txt\n\n# Ignore Whitelist and Blacklist files\nwhitelist.json\nblacklist.json\n\n# Profiling related\nterasology.jfr\nlocal.properties\n*.hprof\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.1806640625,
          "content": "image: \n  file: gitpod.dockerfile\n\ntasks:\n  - init: ./gradlew jar idea\n    command: ./gradlew jar game\n\nports:\n  - port: 5900\n    onOpen: ignore\n  - port: 6080\n    onOpen: open-preview\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 9.453125,
          "content": "// Minor housekeeping logic\nboolean specialBranch = env.BRANCH_NAME.equals(\"master\") || env.BRANCH_NAME.equals(\"develop\")\n\n// String to use in a property that determines artifact pruning (has to be a String not a number)\nString artifactBuildsToKeep = \"1\"\nif (specialBranch) {\n    artifactBuildsToKeep = \"10\"\n}\n\nproperties([\n    // Needed due to the Copy Artifact plugin deciding to implement an obnoxious security feature\n    // that can't simply be turned off\n    copyArtifactPermission('*'),\n    // Flag for Jenkins to discard attached artifacts after x builds\n    buildDiscarder(logRotator(artifactNumToKeepStr: artifactBuildsToKeep)),\n    // configure Jenkins to abort a build if a new one is triggered for the same branch\n    disableConcurrentBuilds(abortPrevious: true)\n])\n\n/**\n * Main pipeline definition for building the engine.\n *\n * It uses the Declarative Pipeline Syntax.\n * See https://www.jenkins.io/doc/book/pipeline/syntax\n *\n * This pipeline uses Jenkins plugins to collect and report additional information about the build.\n *\n *   - Warnings Next Generation Plugin (https://plugins.jenkins.io/warnings-ng/)\n *      To record issues from code scans and static analysis tools, e.g., CheckStyle or Spotbugs.\n *   - Git Forensics Plugin (https://plugins.jenkins.io/git-forensics/)\n *      To compare code scans and static analysis against a reference build from the base branch.\n *   - JUnit Plugin (https://plugins.jenkins.io/junit/)\n *      To record the results of our test suites from JUnit format.\n *\n */\n\npipeline {\n    agent {\n        label 'ts-engine && heavy && java17'\n    }\n    stages {\n        // declarative pipeline does `checkout scm` automatically when hitting first stage\n        stage('Setup') {\n            steps {\n                echo 'Automatically checked out the things!'\n                sh 'chmod +x gradlew'\n                sh './gradlew --version'\n            }\n        }\n\n        stage('Build') {\n            steps {\n                // Jenkins sometimes doesn't run Gradle automatically in plain console mode, so make it explicit\n                sh './gradlew --console=plain clean extractConfig extractNatives distForLauncher testDist'\n                archiveArtifacts '''\n                    gradlew,\n                    gradle/wrapper/*,\n                    templates/build.gradle,\n                    templates/module.logback-test.xml,\n                    config/**,\n                    facades/PC/build/distributions/Terasology.zip,\n                    engine/build/resources/main/org/terasology/engine/version/versionInfo.properties,\n                    natives/**,\n                    build-logic/src/**,\n                    build-logic/*.kts\n                '''\n            }\n        }\n\n        stage('Unit Tests') {\n            steps {\n                sh './gradlew --console=plain unitTest'\n            }\n            post {\n                always {\n                    // Gradle generates both a HTML report of the unit tests to `build/reports/tests/*`\n                    // and XML reports to `build/test-results/*`.\n                    // We need to upload the XML reports for visualization in Jenkins.\n                    //\n                    // See https://docs.gradle.org/current/userguide/java_testing.html#test_reporting\n                    junit testResults: '**/build/test-results/unitTest/*.xml'\n                    // Jenkins truncates large test outputs, so archive it as well.\n                    tar file: 'build/unitTest-results.tgz', archive: true, compress: true, overwrite: true,\n                        glob: '**/build/test-results/unitTest/*.xml'\n                }\n            }\n        }\n\n        stage('Publish') {\n            when {\n                expression {\n                    specialBranch\n                }\n            }\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'artifactory-gooey', \\\n                                                    usernameVariable: 'artifactoryUser', \\\n                                                    passwordVariable: 'artifactoryPass')]) {\n                    sh '''./gradlew \\\\\n                        --console=plain \\\\\n                        -Dorg.gradle.internal.publish.checksums.insecure=true \\\\\n                        publish \\\\\n                        -PmavenUser=${artifactoryUser} \\\\\n                        -PmavenPass=${artifactoryPass}\n                    '''\n                }\n                script {\n                    // Trigger the Omega dist job to repackage a game zip with modules\n                    if (env.JOB_NAME.equals(\"Terasology/engine/develop\")) {\n                        build job: 'Terasology/Omega/develop', wait: false\n                    } else if (env.JOB_NAME.equals(\"Terasology/engine/master\")) {\n                        build job: 'Terasology/Omega/master', wait: false\n                    } else if (env.JOB_NAME.equals(\"Nanoware/Terasology/develop\")) {\n                        build job: 'Nanoware/Omega/develop', wait: false\n                    } else if (env.JOB_NAME.equals(\"Nanoware/Terasology/master\")) {\n                        build job: 'Nanoware/Omega/master', wait: false\n                    }\n                }\n            }\n        }\n\n        stage('Analytics') {\n            steps {\n                sh './gradlew --console=plain check -x test'\n            }\n            post {\n                always {\n                    // the default resolution when omitting `targetBranch` is to `master`\n                    // this is wrong in our case, so explicitly set `develop` as default\n                    // TODO: does this also work for PRs with different base branch?\n                    discoverGitReferenceBuild(targetBranch: 'develop')\n                    recordIssues(skipBlames: true, enabledForFailure: true,\n                        tool: checkStyle(pattern: '**/build/reports/checkstyle/*.xml'),\n                        qualityGates: [\n                            [threshold: 1, type: 'NEW_HIGH', unstable: false],      // mark stage \"failed\" on new high findings\n                            [threshold: 1, type: 'NEW_NORMAL', unstable: false],    // mark stage \"failed\" on new normal findings\n                            [threshold: 1, type: 'TOTAL_HIGH', unstable: true],     // mark stage \"unstable\" on existing high findings\n                            [threshold: 1, type: 'TOTAL_NORMAL', unstable: true]    // mark stage \"unstable\" on existing normal findings\n                        ])\n\n                    recordIssues(skipBlames: true, enabledForFailure: true,\n                        tool: spotBugs(pattern: '**/build/reports/spotbugs/*.xml', useRankAsPriority: true))\n\n                    recordIssues(skipBlames: true, enabledForFailure: true,\n                        tool: pmdParser(pattern: '**/build/reports/pmd/*.xml', useRankAsPriority: true))\n\n                    recordIssues(skipBlames: true, enabledForFailure: true,\n                        tool: taskScanner(includePattern: '**/*.java,**/*.groovy,**/*.gradle', \\\n                                            lowTags: 'WIBNIF', normalTags: 'TODO', highTags: 'ASAP'))\n                }\n            }\n        }\n\n        stage('Documentation') {\n            steps {\n                sh './gradlew --console=plain javadoc'\n                step([$class: 'JavadocArchiver', javadocDir: 'engine/build/docs/javadoc', keepAll: false])\n                recordIssues skipBlames: true, tool: javaDoc()\n            }\n        }\n\n        stage('Integration Tests (without flaky tests)') {\n            steps {\n                sh './gradlew --console=plain integrationTest'\n            }\n            post {\n                always {\n                    // Gradle generates both a HTML report of the unit tests to `build/reports/tests/*`\n                    // and XML reports to `build/test-results/*`.\n                    // We need to upload the XML reports for visualization in Jenkins.\n                    //\n                    // See https://docs.gradle.org/current/userguide/java_testing.html#test_reporting\n                    junit testResults: '**/build/test-results/integrationTest/*.xml', allowEmptyResults: true\n                    // Jenkins truncates large test outputs, so archive it as well.\n                    tar file: 'build/integrationTest-results.tgz', archive: true, compress: true, overwrite: true,\n                        glob: '**/build/test-results/integrationTest/*.xml'\n                }\n            }\n        }\n\n        stage('Integration Tests (flaky tests only)') {\n            steps {\n                warnError(\"Integration Tests Failed\") {  // if this errs, mark the build unstable, not failed.\n                    sh './gradlew --console=plain integrationTestFlaky'\n                }\n            }\n            post {\n                always {\n                    // Gradle generates both a HTML report of the unit tests to `build/reports/tests/*`\n                    // and XML reports to `build/test-results/*`.\n                    // We need to upload the XML reports for visualization in Jenkins.\n                    //\n                    // See https://docs.gradle.org/current/userguide/java_testing.html#test_reporting\n                    junit testResults: '**/build/test-results/integrationTestFlaky/*.xml', allowEmptyResults: true\n                    // Jenkins truncates large test outputs, so archive it as well.\n                    tar file: 'build/integrationTestFlaky-results.tgz', archive: true, compress: true, overwrite: true,\n                        glob: '**/build/test-results/integrationTestFlaky/*.xml'\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 MovingBlocks\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE_ARTWORK",
          "type": "blob",
          "size": 14.1865234375,
          "content": "Creative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  k. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.1357421875,
          "content": "   Terasology\n   Copyright 2011-2016 MovingBlocks\n\n   This product includes software developed by\n   MovingBlocks (http://terasology.org).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9580078125,
          "content": "<p align=\"center\"><img src=\"./docs/images/terasology-logo.png\" height=400px/></>\n<div align=\"center\">\n    <a href=\"https://github.com/MovingBlocks/Terasology/releases/latest\">\n        <img src=\"https://img.shields.io/github/release/MovingBlocks/Terasology.svg\" alt=\"Release\" />\n    </a>\n    <a href=\"https://www.apache.org/licenses/LICENSE-2.0\">\n        <img src=\"https://img.shields.io/badge/license(code)-Apache%202.0-blue.svg\" alt=\"License (Code)\" />\n    </a>\n    <a href=\"https://creativecommons.org/licenses/by/4.0/\">\n        <img src=\"https://img.shields.io/badge/license(art)-CC%20BY%204.0-blue.svg\" alt=\"License (Art)\" />\n    </a>\n    <a href=\"https://codeclimate.com/\" target=\"_blank\" alt=\"Code climate\">\n        <img src=\"https://img.shields.io/codeclimate/maintainability/MovingBlocks/Terasology\" alt=\"Code climate maintainability\" />\n    </a>\n    <a href=\"https://codeclimate.com/\" target=\"_blank\" alt=\"Code climate\" >\n        <img src=\"https://img.shields.io/codeclimate/tech-debt/MovingBlocks/Terasology\" alt=\"Code climate tech debt\" />\n    </a>\n     <a href=\"https://codeclimate.com/\" target=\"_blank\" alt=\"Code climate\">\n        <img src=\"https://img.shields.io/codeclimate/issues/MovingBlocks/Terasology\" alt=\"Code climate issues\" />\n    </a>\n</div>\n\n<h3 align=\"center\"><b>\n    <a href=\"#community\">Community</a> | \n    <a href=\"#installation\">Installation</a> | \n    <a href=\"#development\">Development</a>  | \n    <a href=\"#license\">License</a> |\n    <a href=\"https://terasology.org/Terasology/#/\">Knowledge Base</a>\n</b></h3>\n\nThe _Terasology_ project was born from a Minecraft-inspired tech demo and is becoming a stable platform for various types of gameplay settings in a voxel world.\nThe [creators and maintainers](https://github.com/MovingBlocks/Terasology/graphs/contributors) are a diverse mix of software developers, designers, game testers, graphic artists, and musicians. We encourage others to join!\nWe encourage contributions from anybody and try to keep a warm and friendly community and maintain a [code of conduct](.github/CODE_OF_CONDUCT.md).\n\n## Community\n\nIf you want to get in contact with the **Terasology** community and the whole **MovingBlocks** team, you can easily connect with us, share your ideas, report and solve problems.\nWe are present in nearly the complete round-up of social networks. Follow/friend us wherever you want, chat with us and tell the world.\n\n&nbsp;\n\n<p align=\"center\">\n    <a title=\"Discord\" href=\"https://discord.gg/terasology\">\n        <img src=\"./docs/images/discord.png\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Twitter\" href=\"https://twitter.com/Terasology\">\n    <img src=\"./docs/images/twitter.png\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Facebook\" href=\"https://www.facebook.com/Terasology\">\n        <img src=\"./docs/images/facebook.png\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Reddit\" href=\"https://www.reddit.com/r/Terasology\">\n        <img src=\"./docs/images/reddit.png\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Youtube\" href=\"https://www.youtube.com/user/blockmaniaTV\">\n        <img src=\"./docs/images/youtube.png\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Patreon\" href=\"https://www.patreon.com/Terasology\">\n        <img src=\"./docs/images/patreon.jpg\" width=\"48px\"/>\n    </a>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <a title=\"Terasology Forum\" href=\"https://forum.terasology.org\">\n        <img src=\"./docs/images/forum.png\" width=\"48px\"/>\n    </a>\n</p>\n\n## Installation\n\n<table>\n    <tr>\n        <td></td>\n        <th>Minimum Requirements</th>\n    </tr>\n    <tr>\n        <td>System (OS)</td>\n        <td>Windows, MacOS, Linux (64 bit)</td>\n    </tr>\n    <tr>\n        <td>Processor (CPU)</td>\n        <td>dual-core CPU</td>\n    </tr>\n    <tr>\n        <td>Memory (RAM)</td>\n        <td>4 GB</td>\n    </tr>\n    <tr>\n        <td>Graphics* (GPU)</td>\n        <td style=\"vertical-align:top\">\n            Intel HD Graphics (Gen 7)<br/>\n            GeForce 8xxx series (or higher) or<br/>\n            Radeon HD 2000 series (or higher)<br/>\n            with OpenGL 3.3\n        </td>\n    </tr>\n    <tr>\n        <td>Storage (HDD)</td>\n        <td>1 GB</td>\n    </tr>\n</table>\n\n\\* _Please note, that if you have both integrated (chip) and dedicated (card) graphics, you should make sure that you're actually using your dedicated graphics when running Terasology._\n\nInternet connectivity is required for downloading Terasology via the Launcher, afterwards playing offline is possible.\n\nFor easy game setup (recommended) you can use our launcher - [download it here](https://terasology.org/downloads/).\n\nFor more information about playing, like hot keys or server hosting, see the [dedicated page](docs/Playing.md) or check out the [modules](docs/Modules.md).\n\n\n### Alternative Installation Methods\n\nIf you already have a Java Development Kit (JDK) installed, you may use a direct download release as an alternative to using the [launcher](https://github.com/MovingBlocks/TerasologyLauncher/releases). Java version 17 is required.\n\nßDirect download stable builds are uploaded to [our release section here on GitHub](https://github.com/MovingBlocks/Terasology/releases) while the cutting-edge develop version can be downloaded direct [here from our Jenkins](https://jenkins.terasology.io/job/Terasology/job/Omega/job/develop/lastSuccessfulBuild/artifact/distros/omega/build/distributions/TerasologyOmega.zip).\n\n\n## Development\n\nDevelopment is possible on all common platforms (Windows, Linux, MacOS) as long as the JDK is properly set up.\n\n### Requirements\n\nTechnical Requirements:\n- Java SE Development Kit (JDK) 17. The CI will verify against this baseline version.\n  <br>Using newer Java versions may cause issues (see [#3976](https://github.com/MovingBlocks/Terasology/issues/3976)).\n- Git to clone the repo and commit changes.\n\nNon-Technical Requirements:\n- familiarity with Git. Have a look at https://learngitbranching.js.org/ if you're not familiar with Git yet.\n- familiarity with GitHub, _especially forks_. Have a look at [GitHub's \"Working with Forks\" Guide](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks) if you don't know how to work with forks yet.\n\n### Workspace Setup\n\nTo be able to run **Terasology** from source, you'll need to setup your workspace.\nFollow the [Contributor Quick Start Guide](https://terasology.org/Terasology/#/Contributor-Quick-Start).\nThis guide is designed for [IntelliJ IDEA](https://www.jetbrains.com/idea/) (you can use the free community edition), but alternative setups are possible.\n\n> :warning: _Note, that a Terasology workspace is a **multi-repo workspace**._\n\nWhile your workspace itself is a clone of [MovingBlocks/Terasology](https://github.com/MovingBlocks/Terasology), every subdirectory in your workspace directory `./modules/` is a clone of a [Terasology module repo](https://github.com/Terasology).\n\nAccordingly, if you want to contribute to modules, you'll need to navigate into the respective subdirectory and work with Git from in there.\nAny Git commands executed in your workspace root will target [MovingBlocks/Terasology](https://github.com/MovingBlocks/Terasology).\n\nFor more information, see our wiki entry on [Understanding Terasology's Git Setup](https://terasology.org/Terasology/#/Developing-Modules?id=understanding-terasology39s-git-setup).\n\n\n### Contributing\n\nDetailed information on how to contribute can be found in [CONTRIBUTING.md](.github/CONTRIBUTING.md). Remember, that all submissions must be licensed under [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n\nTerasology has a rather steep learning curve in the beginning.\nTo help you with the learning process, our [Terasology Knowledge Base](https://terasology.org/Terasology/#/), formerly known as the Terasology Engine wiki, helps you find the resources you need according to the field of contribution you're interested in.\nAdditional learning resources can be found in our [tutorial modules](https://github.com/Terasology?q=Tutorial&type=all&language=&sort=).\n\nIf you find errors or issues in any of our resources, please report them using GitHub issues and help fix them.\n\nFor developers that have not worked with complex software systems or dealt with the intricacies of Java yet, we recommend to start with [Good First Issues in Module Land](https://github.com/search?l=&q=org%3ATerasology+label%3A%22Good+First+Issue%22+state%3Aopen&state=open&type=Issues).\n\nDevelopers with previous experience in rendering, physics and other less trivial aspects of game development are welcome to give the [Good First Issues in Engine](https://github.com/MovingBlocks/Terasology/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22Good+First+Issue%22) a go.\n\n## License\n\nTerasology is fully open source and licensed [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) for code and [Creative Commons Attribution License, Version 4.0](https://creativecommons.org/licenses/by/4.0/) for artwork (unless indicated otherwise - see credits for minor exceptions).\n"
        },
        {
          "name": "build-logic",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 12.4453125,
          "content": "// Copyright 2021 The Terasology Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport org.jetbrains.gradle.ext.ActionDelegationConfig\nimport org.jetbrains.gradle.ext.delegateActions\nimport org.jetbrains.gradle.ext.settings\nimport org.terasology.gradology.CopyButNeverOverwrite\n\n// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(\nbuildscript {\n    repositories {\n        mavenCentral()\n        google()\n        gradlePluginPortal()\n\n        // required to provide runtime dependencies to build-logic.\n        maven {\n            val repoViaEnv = System.getenv()[\"RESOLUTION_REPO\"]\n            if (rootProject.hasProperty(\"alternativeResolutionRepo\")) {\n                // If the user supplies an alternative repo via gradle.properties then use that\n                name = \"from alternativeResolutionRepo property\"\n                // Fun Gradle/Kotlin-ism: a general import at the top of a class used in a buildscript block won't help\n                url =  java.net.URI(rootProject.properties[\"alternativeResolutionRepo\"] as String)\n            } else if (repoViaEnv != null && repoViaEnv != \"\") {\n                name = \"from \\$RESOLUTION_REPO\"\n                url = java.net.URI(repoViaEnv)\n            } else {\n                // Our default is the main virtual repo containing everything except repos for testing Artifactory itself\n                name = \"Terasology Artifactory\"\n                url = java.net.URI(\"https://artifactory.terasology.io/artifactory/virtual-repo-live\")\n            }\n        }\n\n        // TODO MYSTERY: As of November 7th 2011 virtual-repo-live could no longer be relied on for latest snapshots - Pro feature?\n        // We've been using it that way for *years* and nothing likewise changed in the area for years as well. This seems to work ....\n        maven {\n            name = \"Terasology snapshot locals\"\n            url = uri(\"https://artifactory.terasology.io/artifactory/terasology-snapshot-local\")\n        }\n    }\n\n    dependencies {\n        // Our locally included /build-logic\n        classpath(\"org.terasology.gradology:build-logic\")\n    }\n}\n\nplugins {\n    // Needed for extending the \"clean\" task to also delete custom stuff defined here like natives\n    id(\"base\")\n\n    // needs for native platform(\"org.lwjgl\") handling.\n    id(\"java-platform\")\n\n    // The root project should not be an eclipse project. It keeps eclipse (4.2) from finding the sub-projects.\n    //apply plugin: \"eclipse\"\n    id(\"idea\")\n    // For the \"Build and run using: Intellij IDEA | Gradle\" switch\n    id(\"org.jetbrains.gradle.plugin.idea-ext\") version \"1.1.7\"\n\n    id(\"com.google.protobuf\") version \"0.9.4\" apply false\n    id(\"terasology-repositories\")\n}\n\n// Test for right version of Java in use for running this script\nassert(org.gradle.api.JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17))\nif (JavaVersion.current() != JavaVersion.VERSION_17) {\n    logger.warn(\"\"\"\nWARNING:\nCompiling with a JDK of not version 17. If you encounter oddities try Java 17.\nCurrent detected Java version is ${JavaVersion.current()}\n from vendor ${System.getProperty(\"java.vendor\")}\nlocated at ${System.getProperty(\"java.home\")}\n\"\"\")\n}\n\n// Declare \"extra properties\" (variables) for the project (and subs) - a Gradle thing that makes them special.\nval dirNatives by extra(\"natives\")\nval dirConfigMetrics by extra(\"config/metrics\")\nval templatesDir by extra(file(\"templates\"))\n// Lib dir for use in manifest entries etc (like in :engine). A separate \"libsDir\" exists, auto-created by Gradle\nval subDirLibs by extra(\"libs\")\nval LwjglVersion by extra(\"3.3.3\")\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Natives - Handles pulling in and extracting native libraries for LWJGL                                            //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Define configurations for natives and config\nval natives = configurations.create(\"natives\")\nval codeMetrics = configurations.create(\"codeMetrics\")\n\ndependencies {\n    // For the \"natives\" configuration make it depend on the native files from LWJGL\n    natives(platform(\"org.lwjgl:lwjgl-bom:$LwjglVersion\"))\n    listOf(\"natives-linux\", \"natives-windows\", \"natives-macos\", \"natives-macos-arm64\").forEach {\n        natives(\"org.lwjgl:lwjgl::$it\")\n        natives(\"org.lwjgl:lwjgl-assimp::$it\")\n        natives(\"org.lwjgl:lwjgl-glfw::$it\")\n        natives(\"org.lwjgl:lwjgl-openal::$it\")\n        natives(\"org.lwjgl:lwjgl-opengl::$it\")\n        natives(\"org.lwjgl:lwjgl-stb::$it\")\n    }\n\n\n    // Config for our code analytics lives in a centralized repo: https://github.com/MovingBlocks/TeraConfig\n    codeMetrics(group = \"org.terasology.config\", name = \"codemetrics\", version = \"2.2.0\", ext = \"zip\")\n\n    // Natives for JNLua (Kallisti, KComputers)\n    natives(group = \"org.terasology.jnlua\", name = \"jnlua_natives\", version = \"0.1.0-SNAPSHOT\", ext = \"zip\")\n\n    // Natives for JNBullet\n    natives(group = \"org.terasology.jnbullet\", name = \"JNBullet\", version = \"1.0.4\", ext = \"zip\")\n\n}\n\ntasks.register<Copy>(\"extractWindowsNatives\") {\n    description = \"Extracts the Windows natives from the downloaded zip\"\n    from(configurations[\"natives\"].filter { it.name.contains(\"natives-windows\") }.map { zipTree(it) })\n    into(\"$dirNatives/windows\")\n    exclude(\"META-INF/**\")\n}\n\ntasks.register<Copy>(\"extractMacOSXNatives\") {\n    description = \"Extracts the OSX natives from the downloaded zip\"\n    from(configurations[\"natives\"].filter { it.name.contains(\"natives-macos\") }.map { zipTree(it) })\n    into(\"$dirNatives/macosx\")\n    exclude(\"META-INF/**\")\n}\n\ntasks.register<Copy>(\"extractLinuxNatives\") {\n    description = \"Extracts the Linux natives from the downloaded zip\"\n    from(configurations[\"natives\"].filter { it.name.contains(\"natives-linux\") }.map { zipTree(it) })\n    into(\"$dirNatives/linux\")\n    exclude(\"META-INF/**\")\n}\n\ntasks.register<Copy>(\"extractJNLuaNatives\") {\n    description = \"Extracts the JNLua natives from the downloaded zip\"\n    from(configurations[\"natives\"].filter { it.name.contains(\"jnlua\") }.map { zipTree(it) })\n    into(\"$dirNatives\")\n}\n\ntasks.register<Copy>(\"extractNativeBulletNatives\") {\n    description = \"Extracts the JNBullet natives from the downloaded zip\"\n    from(configurations[\"natives\"].filter { it.name.contains(\"JNBullet\") }.map { zipTree(it) })\n    into(\"$dirNatives\")\n}\n\ntasks.register(\"extractNatives\") {\n    description = \"Extracts all the native lwjgl libraries from the downloaded zip\"\n    dependsOn(\n        \"extractWindowsNatives\",\n        \"extractLinuxNatives\",\n        \"extractMacOSXNatives\",\n        \"extractJNLuaNatives\",\n        \"extractNativeBulletNatives\"\n    )\n    // specifying the outputs directory lets gradle have an up-to-date check, and automatic clean task\n    outputs.dir(\"$dirNatives\")\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Helper tasks                                                                                                      //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\ntasks.register<Copy>(\"extractConfig\") {\n    description = \"Extracts our configuration files from the zip we fetched as a dependency\"\n    from(configurations[\"codeMetrics\"].map { zipTree(it) })\n    into(\"$rootDir/$dirConfigMetrics\")\n}\n\ntasks.named(\"clean\") {\n    // gradle autocreates a clean task for tasks if outputs is specified, just link them to general clean.\n    dependsOn(\"cleanExtractConfig\", \"cleanExtractNatives\")\n    println(\"Cleaned root - don't forget to re-extract stuff! 'gradlew extractNatives extractConfig' will do so\")\n}\n\n// Magic for replace remote dependency on local project (source)\n// for Engine\nallprojects {\n    configurations.all {\n        resolutionStrategy.dependencySubstitution {\n            substitute(module(\"org.terasology.engine:engine\")).using(project(\":engine\")).because(\"we have sources!\")\n            substitute(module(\"org.terasology.engine:engine-tests\")).using(project(\":engine-tests\"))\n                .because(\"we have sources!\")\n        }\n    }\n}\n\n// Magic for replace remote dependency on local project (source)\n// For exists modules\nproject(\":modules\").subprojects.forEach { proj ->\n    project(\":modules\").subprojects {\n        configurations.all {\n            resolutionStrategy.dependencySubstitution {\n                substitute(module(\"org.terasology.modules:${proj.name}\")).using(project(\":modules:${proj.name}\"))\n                    .because(\"we have sources!\")\n            }\n        }\n    }\n}\n\ntasks.withType<Wrapper> {\n    // ALL distributionType because IntelliJ prefers having its sources for analysis and reference.\n    distributionType = Wrapper.DistributionType.ALL\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// General IDE customization                                                                                         //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\ntasks.register<CopyButNeverOverwrite>(\"copyInMissingTemplates\") {\n    description = \"Copies in placeholders from the /templates dir to project root if not present yet\"\n    from(templatesDir)\n    into(rootDir)\n    include(\"gradle.properties\", \"override.cfg\")\n}\n\ntasks.register<CopyButNeverOverwrite>(\"jmxPassword\") {\n    description = \"Create config/jmxremote.password from a template.\"\n\n    filePermissions { unix(\"600\") } // passwords must be accessible only by owner\n\n    // there is a template file in $JAVA_HOME/conf/management\n    from(java.nio.file.Path.of(System.getProperty(\"java.home\"), \"conf\", \"management\"))\n    include(\"jmxremote.password.template\")\n    rename(\"(.*).template\", \"$1\")\n    into(\"config\")\n\n    doLast {\n        logger.warn(\"${this.outputs.files.singleFile}/jmxremote.password:100: Edit this to set your password.\")\n    }\n}\n\n// Make sure the IDE prep includes extraction of natives\ntasks.named(\"ideaModule\") {\n    dependsOn(\"extractNatives\", \"copyInMissingTemplates\")\n}\n\n// For IntelliJ add a bunch of excluded directories\nidea {\n    module {\n        excludeDirs = setOf(\n            // Exclude Eclipse dirs\n            // TODO: Update this as Eclipse bin dirs now generate in several deeper spots rather than at top-level\n            file(\"bin\"),\n            file(\".settings\"),\n            // TODO: Add a single file exclude for facades/PC/Terasology.launch ?\n\n            // Exclude special dirs\n            file(\"natives\"),\n            file(\"protobuf\"),\n\n            // Exclude output dirs\n            file(\"configs\"),\n            file(\"logs\"),\n            file(\"saves\"),\n            file(\"screenshots\"),\n            file(\"terasology-server\"),\n            file(\"terasology-2ndclient\")\n        )\n        isDownloadSources = true\n    }\n\n    project.settings.delegateActions {\n        delegateBuildRunToGradle = false\n        testRunner = ActionDelegationConfig.TestRunner.CHOOSE_PER_TEST\n    }\n}\n\ntasks.register(\"cleanIdeaIws\") {\n    doLast {\n        File(\"Terasology.iws\").delete()\n    }\n}\n\ntasks.named(\"cleanIdea\") {\n    dependsOn(\"cleanIdeaIws\")\n}\n\n// A task to assemble various files into a single zip for distribution as \"build-harness.zip\" for module builds\ntasks.register<Zip>(\"assembleBuildHarness\") {\n    description = \"Assembles a zip of files useful for module development\"\n\n    dependsOn(\"extractNatives\")\n    from(\"natives\") {\n        include(\"**/*\")\n        // TODO: use output of extractNatives?\n        // TODO: which module needs natives to build?\n        into(\"natives\")\n    }\n\n    dependsOn(\"extractConfig\")\n    from(\"config\") {\n        //include \"gradle/**/*\", \"metrics/**/*\"\n        include(\"**/*\")\n        // TODO: depend on output of extractConfig?\n        into(\"config\")\n    }\n\n    from(\"gradle\") {\n        include(\"**/*\") // include all files in \"gradle\"\n        // TODO: exclude groovy jar?\n        into(\"gradle\")\n    }\n\n    from(\"build-logic\") {\n        include(\"src/**\", \"*.kts\")\n        into(\"build-logic\")\n    }\n\n    from(\"templates\") {\n        include(\"build.gradle\")\n    }\n\n    from(\".\") {\n        include(\"gradlew\")\n    }\n\n    // include file \"templates/module.logback-test.xml\" as \"src/test/resources/logback-test.xml\"\n    from(\"templates\") {\n        include(\"module.logback-test.xml\")\n        rename(\"module.logback-test.xml\", \"logback-test.xml\")\n        into(\"src/test/resources\")\n    }\n\n    // set the archive name\n    archiveFileName.set(\"build-harness.zip\")\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs-pre-merge",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "facades",
          "type": "tree",
          "content": null
        },
        {
          "name": "fileTemplates",
          "type": "tree",
          "content": null
        },
        {
          "name": "gitpod.dockerfile",
          "type": "blob",
          "size": 0.28515625,
          "content": "FROM gitpod/workspace-full-vnc\n\nRUN sudo apt-get update && \\\n    sudo env \"DEBIAN_FRONTEND=noninteractive\" apt-get install -y libasound2-plugins libopenal1 zenity libopenal-dev libsndfile1-dev && \\\n    sudo rm -rf /var/lib/apt/lists/* && \\\n    echo \"drivers=pulse\" >> /etc/openal/alsoft.conf\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.3271484375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "groovyw",
          "type": "blob",
          "size": 5.6845703125,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar:$APP_HOME/gradle/wrapper/groovy-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    \n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GroovyWrapperMain config/groovy/util.groovy \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "groovyw.bat",
          "type": "blob",
          "size": 2.9697265625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Groovy Wrapper version of the Gradle Wrapper\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar;%APP_HOME%\\gradle\\wrapper\\groovy-wrapper.jar;\n\n\n@rem Execute Groovy via the Gradle Wrapper\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GroovyWrapperMain config/groovy/util.groovy %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "metas",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvr_natives",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 3.5244140625,
          "content": "rootProject.name = \"Terasology\"\n\ndependencyResolutionManagement {\n    versionCatalogs {\n        create(\"libs\") {\n            // currently not yet for build-logic, see https://github.com/gradle/gradle/issues/15383 , change verisons\n            // here and there please.\n            val gestalt = version(\"gestalt\", \"8.0.0-SNAPSHOT\")\n            library(\"gestalt-core\", \"org.terasology.gestalt\", \"gestalt-asset-core\" ).versionRef(gestalt)\n            library(\"gestalt-entitysystem\", \"org.terasology.gestalt\", \"gestalt-entity-system\" ).versionRef(gestalt)\n            library(\"gestalt-inject\", \"org.terasology.gestalt\", \"gestalt-inject\" ).versionRef(gestalt)\n            library(\"gestalt-injectjava\", \"org.terasology.gestalt\", \"gestalt-inject-java\" ).versionRef(gestalt)\n            library(\"gestalt-java\", \"org.terasology.gestalt\", \"gestalt-java\" ).versionRef(gestalt)\n            library(\"gestalt-module\", \"org.terasology.gestalt\", \"gestalt-module\" ).versionRef(gestalt)\n            library(\"gestalt-util\", \"org.terasology.gestalt\", \"gestalt-util\" ).versionRef(gestalt)\n            library(\"gson\", \"com.google.code.gson:gson:2.8.6\")\n            library(\"guava\", \"com.google.guava:guava:31.1-jre\")\n            library(\"jna-platform\", \"net.java.dev.jna:jna-platform:5.6.0\")\n            val junit5 = version(\"junit5\", \"5.10.1\")\n            library(\"junit-api\", \"org.junit.jupiter\", \"junit-jupiter-api\").versionRef(junit5)\n            library(\"junit-engine\", \"org.junit.jupiter\", \"junit-jupiter-engine\").versionRef(junit5)\n            library(\"junit-params\", \"org.junit.jupiter\", \"junit-jupiter-params\").versionRef(junit5)\n            library(\"logback\", \"ch.qos.logback:logback-classic:1.4.14\")\n            val mockito = version(\"mockito\", \"5.6.0\")\n            library(\"mockito-core\", \"org.mockito\", \"mockito-core\").versionRef(mockito)\n            library(\"mockito-inline\", \"org.mockito:mockito-inline:3.12.4\")\n            library(\"mockito-junit\", \"org.mockito\", \"mockito-junit-jupiter\").versionRef(mockito)\n            // protobuf does not work as the others, see https://github.com/google/protobuf-gradle-plugin/issues/563\n            val protobuf = version(\"protobuf\", \"3.22.5\")\n            val slf4j = version(\"slf4j\", \"2.0.11\")\n            library(\"slf4j-api\", \"org.slf4j\", \"slf4j-api\").versionRef(slf4j)\n            library(\"slf4j-jul\", \"org.slf4j\", \"jul-to-slf4j\").versionRef(slf4j)\n            library(\"slf4j-simple\", \"org.slf4j\", \"slf4j-simple\").versionRef(\"slf4j\")\n            val nui = version(\"nui\", \"4.0.0-SNAPSHOT\")\n            library(\"terasology-nui\", \"org.terasology.nui\", \"nui\").versionRef(nui)\n            library(\"terasology-nuigestalt\", \"org.terasology.nui\", \"nui-gestalt\").versionRef(nui)\n            library(\"terasology-nuireflect\", \"org.terasology.nui\", \"nui-reflect\").versionRef(nui)\n        }\n    }\n}\n\nincludeBuild(\"build-logic\")\ninclude(\"engine\", \"engine-tests\", \"facades\", \"metas\", \"libs\", \"modules\")\n\n// Handy little snippet found online that'll \"fake\" having nested settings.gradle files under /modules, /libs, etc\nrootDir.listFiles()?.forEach { possibleSubprojectDir ->\n    if (possibleSubprojectDir.isDirectory && possibleSubprojectDir.name != \".gradle\") {\n        possibleSubprojectDir.walkTopDown().forEach { it.listFiles { file -> \n            file.isFile && file.name == \"subprojects.settings.gradle.kts\" }?.forEach { subprojectsSpecificationScript ->\n                //println(\"Magic is happening, applying from $subprojectsSpecificationScript\")\n                apply {\n                    from(subprojectsSpecificationScript)\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "subsystems",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}