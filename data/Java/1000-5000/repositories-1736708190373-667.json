{
  "metadata": {
    "timestamp": 1736708190373,
    "page": 667,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aicareles/Android-BLE",
      "stars": 2720,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README-en.md",
          "type": "blob",
          "size": 9.4208984375,
          "content": "\n# Android-BLE\n[![License](https://img.shields.io/badge/license-Apache%202-green.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n[![](https://jitpack.io/v/aicareles/Android-BLE.svg)](https://jitpack.io/#aicareles/Android-BLE)\n\n### [Download APK](https://github.com/aicareles/Android-BLE/blob/master/apk/BLE-v3.3.0.apk)\n\nAndroid-BLE Bluetooth framework, including scanning, connecting, enabling / disabling notifications, sending / reading data, receiving data, reading rssi, setting mtu and other Bluetooth-related operation interfaces, internally optimized connection queue, and fast write queue,\nAnd support multi-service communication, can be extended to configure Bluetooth related operations.\n\n## Android-BLE   API\n* **Ble** - The most important class provides all Bluetooth operation interfaces to the outside world.\n* **BleDevice** - Bluetooth object class, including Bluetooth connection status and basic Bluetooth information.\n* **BleLog** - Internal log class, open in the development environment to view Bluetooth related operation information.\n* **BleStates** - Bluetooth operation abnormal status code information class. (Abnormal status codes such as scan, connection, read and write)\n* **ByteUtils** - Various byte data conversion tools\n\n## Documentation/[中文](https://github.com/aicareles/Android-BLE/wiki/BLE%E5%BA%93%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4)\n### 1. Edit **build.gradle** file and add dependency. [![](https://jitpack.io/v/aicareles/Android-BLE.svg)](https://jitpack.io/#aicareles/Android-BLE)\n``` groovy\nimplementation 'com.github.aicareles:Android-BLE:3.3.0'\n```\n### 2. Init the Bluetooth library in Application.\n```\nprivate void initBle() {\n        Ble ble = Ble.options()//Open configuration\n                .setLogBleEnable(true)//Set whether to print Bluetooth log\n                .setThrowBleException(true)//Set whether to throw Bluetooth exception\n                .setAutoConnect(false)\n                .setIgnoreRepeat(false)//filter the scanned devices\n                .setConnectTimeout(10 * 1000)//connection timeout\n                .setMaxConnectNum(7)//Maximum number of connections\n                .setScanPeriod(12 * 1000)//scan duration\n                .setScanFilter(scanFilter)//scan filter\n               .setUuidService(UUID.fromString(UuidUtils.uuid16To128(\"fd00\")))//uuid of main service (Required)\n                .setUuidWriteCha(UUID.fromString(UuidUtils.uuid16To128(\"fd01\")))//uuid for writable features (Required)\n                .setUuidReadCha(UUID.fromString(UuidUtils.uuid16To128(\"fd02\")))//uuid for readable features (Optional)\n                .setUuidNotifyCha(UUID.fromString(UuidUtils.uuid16To128(\"fd03\")))//uuid for notification feature (Optional)\n               .setFactory(new BleFactory() {\n                    @Override\n                    public MyDevice create(String address, String name) {\n                        return new MyDevice(address, name);\n                    }\n                })\n                .setBleWrapperCallback(new MyBleWrapperCallback())\n                .create(mApplication, new Ble.InitCallback() {\n                    @Override\n                    public void success() {\n                        BleLog.e(\"MainApplication\", \"init success\");\n                    }\n\n                    @Override\n                    public void failed(int failedCode) {\n                        BleLog.e(\"MainApplication\", \"init failed：\" + failedCode);\n                    }\n                });\n     }\n```\n### 3. Start use.\n#### 1.scan\n```\nble.startScan(scanCallback);\n```\n#### scan callback (Note: turn on bluetooth and check bluetooth permissions)\n```\nBleScanCallback<BleDevice> scanCallback = new BleScanCallback<BleDevice>() {\n    @Override\n    public void onLeScan(final BleDevice device, int rssi, byte[] scanRecord) {\n        //Scanned devices\n    }\n\n   @Override\n    public void onStart() {\n        super.onStart();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onScanFailed(int errorCode) {\n        super.onScanFailed(errorCode);\n        Log.e(TAG, \"onScanFailed: \"+errorCode);\n    }\n};\n```\n#### 2.connect/disconnect\n```\n//Connect a device\nble.connect(device, connectCallback);\n\n//Connect multiple devices\nble.connects(devices, connectCallback);\n\n//Cancel the connecting device\nble.cancelConnecting(device);\n\n//Cancel the connecting devices\nble.cancelConnectings(devices);\n\n//disconnect a device\nble.disconnect(device);\n\n//disconnect all devices\nble.disconnectAll();\n```\n#### connect/disconnect callback\n```\nprivate BleConnCallback<BleDevice> connectCallback = new BleConnCallback<BleDevice>() {\n    @Override\n    public void onConnectionChanged(BleDevice device) {\n\n    }\n\n    @Override\n    public void onConnectTimeOut(BleDevice device) {\n        super.onConnectTimeOut(device);\n        Log.e(TAG, \"onConnectTimeOut: \" + device.getBleAddress());\n    }\n\n    @Override\n    public void onConnectCancel(BleDevice device) {\n        super.onConnectCancel(device);\n        Log.e(TAG, \"onConnectCancel: \" + device.getBleName());\n    }\n\n    @Override\n    public void onServicesDiscovered(BleDevice device, BluetoothGatt gatt) {\n        super.onServicesDiscovered(device, gatt);\n    }\n\n    @Override\n    public void onReady(BleDevice device) {\n        super.onReady(device);\n        //connect successful to enable notification\n        ble.enableNotify(...);\n    }\n\n    @Override\n    public void onConnectException(BleDevice device, int errorCode) {\n        super.onConnectException(device, errorCode);\n\n    }\n};\n```\n#### 3.enable/disable notification\n```\nble.enableNotify(device, true, new BleNotifyCallback<BleDevice>() {\n    @Override\n    public void onChanged(BleDevice device, BluetoothGattCharacteristic characteristic) {\n        UUID uuid = characteristic.getUuid();\n        BleLog.e(TAG, \"onChanged==uuid:\" + uuid.toString());\n        BleLog.e(TAG, \"onChanged==data:\" + ByteUtils.toHexString(characteristic.getValue()));\n    }\n\n    @Override\n    public void onNotifySuccess(BleDevice device) {\n        super.onNotifySuccess(device);\n        BleLog.e(TAG, \"onNotifySuccess: \"+device.getBleName());\n    }\n});\n```\n#### 4.read data\n```\nble.read(device, new BleReadCallback<BleRssiDevice>() {\n    @Override\n    public void onReadSuccess(BleRssiDevice dedvice, BluetoothGattCharacteristic characteristic) {\n        super.onReadSuccess(dedvice, characteristic);\n    }\n\n    @Override\n    public void onReadFailed(BleRssiDevice device, int failedCode) {\n        super.onReadFailed(device, failedCode);\n    }\n})\n```\n#### 5.write data\n```\n//write a package payload\nble.write(device, data, new BleWriteCallback<BleRssiDevice>() {\n    @Override\n    public void onWriteSuccess(BleRssiDevice device, BluetoothGattCharacteristic characteristic) {\n\n    }\n\n    @Override\n    public void onWriteFailed(BleRssiDevice device, int failedCode) {\n        super.onWriteFailed(device, failedCode);\n    }\n});\n\n//write large file/payload\nbyte[]data = toByteArray(getAssets().open(\"WhiteChristmas.bin\"));\nble.writeEntity(mBle.getConnectedDevices().get(0), data, 20, 50, new BleWriteEntityCallback<BleDevice>() {\n    @Override\n    public void onWriteSuccess() {\n\n    }\n\n    @Override\n    public void onWriteFailed() {\n\n    }\n\n    override void onWriteProgress(double progress) {\n\n    }\n\n    override void onWriteCancel() {\n\n    }\n});\n\n//write data to the queue (The default interval is 50ms)\nble.writeQueue(RequestTask.newWriteTask(address, data));\n//write data to the queue with delay\nble.writeQueueDelay(delay, RequestTask.newWriteTask(address, data));\n\n//Custom write data by service and characteristic uuid\nble.writeByUuid(device, data, serviceUuid, charUuid, new BleWriteCallback<BleRssiDevice>() {\n    @Override\n    public void onWriteSuccess(BleRssiDevice device, BluetoothGattCharacteristic characteristic) {\n\n    }\n\n    @Override\n    public void onWiteFailed(BleRssiDevice device, int failedCode) {\n        super.onWiteFailed(device, failedCode);\n    }\n});\n```\n#### 6. remove callback (scan、connect)\n```\nble.cancelCallback(connectCallback);\nor\nble.cancelCallback(scanCallback);\n```\n#### 8. release\n```\n ble.released();\n```\n\n## History version introduction：\n[History version](https://github.com/aicareles/Android-BLE/wiki/BLE%E5%BA%93%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D)\n\n## BLE Common problems and solutions\nPlease see this [Wiki BLE Page][Wiki] for more infos.\n\n[Wiki]:https://github.com/aicareles/Android-BLE/wiki#连接常见问题\n\n## Java-Sample Screenshot：\n\n![2](https://github.com/aicareles/Android-BLE/blob/master/screenshots/2.jpeg)\n![3](https://github.com/aicareles/Android-BLE/blob/master/screenshots/3.jpeg)\n![4](https://github.com/aicareles/Android-BLE/blob/master/screenshots/4.jpeg)\n\n## *License*\n```\nCopyright 2016 jerry\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n## Contribute：\n![](https://upload-images.jianshu.io/upload_images/3884117-5d22ae84180a93ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n![](https://upload-images.jianshu.io/upload_images/3884117-1f6c1c0fb5885252.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.564453125,
          "content": "### QQ技术交流群：一群：494309361（已满）  二群：419784672\n\n### [下载APK](https://github.com/aicareles/Android-BLE/blob/master/apk/BLE-v3.3.0.apk)\n\n\n# Android-BLE\n[![License](https://img.shields.io/badge/license-Apache%202-green.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n[![](https://jitpack.io/v/aicareles/Android-BLE.svg)](https://jitpack.io/#aicareles/Android-BLE)\n\nAndroid-BLE蓝牙框架,提供了扫描、连接、使能/除能通知、发送/读取数据、接收数据,读取rssi,设置mtu等蓝牙相关的所有操作接口,内部优化了连接队列,以及快速写入队列,\n并支持多服务通讯,可扩展配置蓝牙相关操作。\n\n## Android-BLE   API\n* **Ble** - 最重要的类,对外提供所有的蓝牙操作接口.\n* **BleDevice** - 封装了蓝牙对象类,包含蓝牙连接状态以及基本蓝牙信息.\n* **BleLog** - 内部日志类,开发环境下打开可查看蓝牙相关操作信息.\n* **BleStates** - 蓝牙操作异常状态码信息类.(扫描、连接、读写等异常状态码).\n* **ByteUtils** - 各种字节数据转换的工具类.\n* **CrcUtils** - 字节校验的crc各种算法的工具类.\n* **UuidUtils** - 蓝牙服务/特征uuid转换工具类.\n\n## 异常状态码\n[BleStates](https://github.com/aicareles/Android-BLE/blob/master/core/src/main/java/cn/com/heaton/blelibrary/ble/BleStates.java)\n\n## 接入前提示\n```\n1. 如果项目中的设备是统一类型(服务,特征uuid相同),则推荐在初始化时把服务,特征的uuid配置完整。\n2. 如果项目中需要兼容多种设备类型(服务,特征uuid不相同),则在通信时需要使用byUuid的方式进行。\n```\n\n## 接入文档\n### 1. 在 **build.gradle** 中添加下面依赖. [![](https://jitpack.io/v/aicareles/Android-BLE.svg)](https://jitpack.io/#aicareles/Android-BLE)\n``` groovy\nimplementation 'com.github.aicareles:Android-BLE:3.3.1'\n\n注意: 项目根build.gradle记得添加：\nmaven { url 'https://www.jitpack.io' }\n```\n\n### android12 权限适配\n``` xml\nList<String> permissions = new ArrayList<>();\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\n    permissions.add(Manifest.permission.BLUETOOTH_SCAN);\n    permissions.add(Manifest.permission.BLUETOOTH_ADVERTISE);\n    permissions.add(Manifest.permission.BLUETOOTH_CONNECT);\n} else {\n    permissions.add(Manifest.permission.ACCESS_COARSE_LOCATION);\n    permissions.add(Manifest.permission.ACCESS_FINE_LOCATION);\n}\nrequestPermission(permissions);\n``` \n### 2. 在Application中初始化.\n```\nprivate void initBle() {\n    Ble.options()//开启配置\n        .setLogBleEnable(true)//设置是否输出打印蓝牙日志（非正式打包请设置为true，以便于调试）\n        .setThrowBleException(true)//设置是否抛出蓝牙异常 （默认true）\n        .setAutoConnect(false)//设置是否自动连接 （默认false）\n        .setIgnoreRepeat(false)//设置是否过滤扫描到的设备(已扫描到的不会再次扫描)\n        .setConnectTimeout(10 * 1000)//设置连接超时时长（默认10*1000 ms）\n        .setMaxConnectNum(7)//最大连接数量\n        .setScanPeriod(12 * 1000)//设置扫描时长（默认10*1000 ms）\n        .setScanFilter(scanFilter)//设置扫描过滤\n        .setUuidService(UUID.fromString(UuidUtils.uuid16To128(\"fd00\")))//设置主服务的uuid（必填）\n        .setUuidWriteCha(UUID.fromString(UuidUtils.uuid16To128(\"fd01\")))//设置可写特征的uuid （必填,否则写入失败）\n        .setUuidReadCha(UUID.fromString(UuidUtils.uuid16To128(\"fd02\")))//设置可读特征的uuid （选填）\n        .setUuidNotifyCha(UUID.fromString(UuidUtils.uuid16To128(\"fd03\")))//设置可通知特征的uuid （选填，库中默认已匹配可通知特征的uuid）\n        .setUuidServicesExtra(new UUID[]{BATTERY_SERVICE_UUID})//设置额外的其他服务组，如电量服务等\n        .setFactory(new BleFactory() {//实现自定义BleDevice时必须设置\n            @Override\n            public MyDevice create(String address, String name) {\n                return new MyDevice(address, name);//自定义BleDevice的子类\n            }\n        })\n        .setBleWrapperCallback(new MyBleWrapperCallback())//设置全部蓝牙相关操作回调（例： OTA升级可以再这里实现,与项目其他功能逻辑完全解耦）\n        .create(mApplication, new Ble.InitCallback() {\n            @Override\n            public void success() {\n                BleLog.e(\"MainApplication\", \"初始化成功\");\n            }\n\n            @Override\n            public void failed(int failedCode) {\n                BleLog.e(\"MainApplication\", \"初始化失败：\" + failedCode);\n            }\n        });\n     }\n```\n### 3. 开始使用.\n#### 1.扫描\n```\nble.startScan(scanCallback);\n```\n#### 扫描回调 (注: 记得打开蓝牙并检查是否授予蓝牙权限)\n```\nBleScanCallback<BleDevice> scanCallback = new BleScanCallback<BleDevice>() {\n    @Override\n    public void onLeScan(final BleDevice device, int rssi, byte[] scanRecord) {\n        //Scanned devices\n    }\n\n   @Override\n    public void onStart() {\n        super.onStart();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onScanFailed(int errorCode) {\n        super.onScanFailed(errorCode);\n        Log.e(TAG, \"onScanFailed: \"+errorCode);\n    }\n};\n```\n#### 2.连接/断开\n```\n//连接设备\nble.connect(device, connectCallback);\n\n//连接多个设备\nble.connects(devices, connectCallback);\n\n//取消正在连接的设备\nble.cancelConnecting(device);\n\n//取消正在连接的多个设备\nble.cancelConnectings(devices);\n\n//断开设备\nble.disconnect(device);\n\n//断开所有设备\nble.disconnectAll();\n```\n#### 连接/断开回调\n```\nprivate BleConnCallback<BleDevice> connectCallback = new BleConnCallback<BleDevice>() {\n    @Override\n    public void onConnectionChanged(BleDevice device) {\n\n    }\n\n    @Override\n    public void onConnectTimeOut(BleDevice device) {\n        super.onConnectTimeOut(device);\n        Log.e(TAG, \"onConnectTimeOut: \" + device.getBleAddress());\n    }\n\n    @Override\n    public void onConnectCancel(BleDevice device) {\n        super.onConnectCancel(device);\n        Log.e(TAG, \"onConnectCancel: \" + device.getBleName());\n    }\n\n    @Override\n    public void onServicesDiscovered(BleDevice device, BluetoothGatt gatt) {\n        super.onServicesDiscovered(device, gatt);\n    }\n\n    @Override\n    public void onReady(BleDevice device) {\n        super.onReady(device);\n        //connect successful to enable notification\n        ble.enableNotify(...);\n    }\n\n    @Override\n    public void onConnectException(BleDevice device, int errorCode) {\n        super.onConnectException(device, errorCode);\n\n    }\n};\n```\n#### 3.使能/除能通知\n```\nble.enableNotify(device, true, new BleNotifyCallback<BleDevice>() {\n    @Override\n    public void onChanged(BleDevice device, BluetoothGattCharacteristic characteristic) {\n        UUID uuid = characteristic.getUuid();\n        BleLog.e(TAG, \"onChanged==uuid:\" + uuid.toString());\n        BleLog.e(TAG, \"onChanged==data:\" + ByteUtils.toHexString(characteristic.getValue()));\n    }\n\n    @Override\n    public void onNotifySuccess(BleDevice device) {\n        super.onNotifySuccess(device);\n        BleLog.e(TAG, \"onNotifySuccess: \"+device.getBleName());\n    }\n});\n```\n#### 4.读取数据\n```\nble.read(device, new BleReadCallback<BleRssiDevice>() {\n    @Override\n    public void onReadSuccess(BleRssiDevice dedvice, BluetoothGattCharacteristic characteristic) {\n        super.onReadSuccess(dedvice, characteristic);\n    }\n\n    @Override\n    public void onReadFailed(BleRssiDevice device, int failedCode) {\n        super.onReadFailed(device, failedCode);\n    }\n})\n```\n#### 5.写入数据\n```\n//写入一包数据\nble.write(device, data, new BleWriteCallback<BleRssiDevice>() {\n    @Override\n    public void onWriteSuccess(BleRssiDevice device, BluetoothGattCharacteristic characteristic) {\n\n    }\n\n    @Override\n    public void onWriteFailed(BleRssiDevice device, int failedCode) {\n        super.onWriteFailed(device, failedCode);\n    }\n});\n\n//写入大数据(文件、图片等)\nbyte[]data = toByteArray(getAssets().open(\"WhiteChristmas.bin\"));\nble.writeEntity(mBle.getConnectedDevices().get(0), data, 20, 50, new BleWriteEntityCallback<BleDevice>() {\n    @Override\n    public void onWriteSuccess() {\n\n    }\n\n    @Override\n    public void onWriteFailed() {\n\n    }\n\n    override void onWriteProgress(double progress) {\n\n    }\n\n    override void onWriteCancel() {\n\n    }\n});\n\n//写入数据到队列中 (默认发送间隔50ms)\nble.writeQueue(RequestTask.newWriteTask(address, data));\n//写入数据到队列中 (自定义间隔时间)\nble.writeQueueDelay(delay, RequestTask.newWriteTask(address, data));\n\n//通过特定服务和特征值uuid写入数据\nble.writeByUuid(device, data, serviceUuid, charUuid, new BleWriteCallback<BleRssiDevice>() {\n    @Override\n    public void onWriteSuccess(BleRssiDevice device, BluetoothGattCharacteristic characteristic) {\n\n    }\n\n    @Override\n    public void onWiteFailed(BleRssiDevice device, int failedCode) {\n        super.onWiteFailed(device, failedCode);\n    }\n});\n```\n#### 6. 移除监听(scan、connect)\n```\nble.cancelCallback(connectCallback);\n或\nble.cancelCallback(scanCallback);\n```\n#### 8. 释放资源\n```\n ble.released();\n```\n\n## 历史版本介绍：\n[历史版本](https://github.com/aicareles/Android-BLE/wiki/BLE%E5%BA%93%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D)\n\n## BLE蓝牙常见问题及解决方案\n请通过该 [Wiki BLE Page][Wiki] 了解更多信息.\n\n[Wiki]:https://github.com/aicareles/Android-BLE/wiki#连接常见问题\n\n## Java-Sample Screenshot：\n\n![2](https://github.com/aicareles/Android-BLE/blob/master/screenshots/2.jpeg)\n![3](https://github.com/aicareles/Android-BLE/blob/master/screenshots/3.jpeg)\n![4](https://github.com/aicareles/Android-BLE/blob/master/screenshots/4.jpeg)\n\n## *License*\n```\nCopyright 2016 jerry\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n## Contribute：\n![](https://upload-images.jianshu.io/upload_images/3884117-5d22ae84180a93ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n![](https://upload-images.jianshu.io/upload_images/3884117-1f6c1c0fb5885252.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "android-ble.jks",
          "type": "blob",
          "size": 2.44140625,
          "content": null
        },
        {
          "name": "apk",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.349609375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nplugins {\n    id 'com.android.application' version '7.2.2' apply false\n    id 'com.android.library' version '7.2.2' apply false\n    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.9658203125,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\nandroid.enableJetifier=true\nandroid.useAndroidX=true\n#PbintrayKey = 65d7654943c19d5348ae6f6fdb115f8315aa8e5c\n#PbintrayUser = liulei\n#./gradlew clean build bintrayUpload -PbintrayUser=liulei -PbintrayKey=65d7654943c19d5348ae6f6fdb115f8315aa8e5c -PdryRun=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "java-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "kotlin-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.4267578125,
          "content": "pluginManagement {\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n        maven { url 'https://jitpack.io' }\n    }\n}\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n}\nrootProject.name = \"Android-BLE\"\ninclude ':java-sample'\ninclude ':core'"
        }
      ]
    }
  ]
}