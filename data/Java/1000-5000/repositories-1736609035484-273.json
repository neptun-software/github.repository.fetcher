{
  "metadata": {
    "timestamp": 1736609035484,
    "page": 273,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "willowtreeapps/spruce-android",
      "stars": 3721,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.484375,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\nout/\n\n# Gradle files\n.gradle/\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\n.navigation/\n\n# Android Studio captures folder\ncaptures/\n\n# Intellij\n*.iml\n.idea/\n\n# Keystore files\n*.jks\nlibs/\nsrc/main/java/\nsrc/main/res/drawable/\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 0.990234375,
          "content": "### Creating the Pull Request\nTo contribute, fork our project on GitHub, then submit a pull request to our `master` branch.\n\n### Before Submitting\n1. Make sure you unit test your changes. ~/lib/src/test/ houses all of the current unit tests.\n2. If you added a `SortFunction` or anything that could have unit tests, please be sure to add them to the main project.\n3. If you update anything that would add breaking changes to older versions of `Spruce` be sure to declare\nthat in your Pull Request description.\n4. Be sure to document your code. This includes adding in javadoc style comments for those methods that\nare publicly accessible and also adding those methods to their respective `README.md` document.\n5. Most importantly, animations are fun! So have fun coding it!!\n\n---\n\nBy submitting a pull request, you represent that you have the right to license\nyour contribution to WillowTree and the community, and agree by submitting the patch\nthat your contributions are licensed under the [MIT License](LICENSE)."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2017 WillowTree, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6923828125,
          "content": "![Spruce Logo](https://github.com/willowtreeapps/spruce-android/blob/master/imgs/header_image.png)\n\n# Spruce Android Animation Library (and [iOS](https://github.com/willowtreeapps/spruce-ios))\n[![CircleCI Build Status](https://circleci.com/gh/willowtreeapps/spruce-android.svg?style=shield)](https://circleci.com/gh/willowtreeapps/spruce-android)\n[![License MIT](https://img.shields.io/badge/License-MIT-blue.svg?style=flat)]()\n[![Public Yes](https://img.shields.io/badge/Public-yes-green.svg?style=flat)]()\n\n## What is it?\nSpruce is a lightweight animation library that helps choreograph the animations on the screen. With so many different animation libraries out there, developers need to make sure that each view is animating at the appropriate time. Spruce can help designers request complex multi-view animations and not have the developers cringe at the prototype.\n\n<p align=\"center\">\n<img src=\"https://github.com/willowtreeapps/spruce-android/blob/master/imgs/recycler-example.gif\" width=25% height=25%/>\n</p>\n\n### Gradle\nAdd the following to your project's root build.gradle file\n```gradle\nrepositories {\n\tmaven {\n\t\turl  \"https://dl.bintray.com/bfears/maven\"\n\t}\n}\n```\nAdd the following to your project's build.gradle file\n\n```gradle\ndependencies {\n    implementation 'com.willowtreeapps.spruce:spruce-android:1.1.0'\n}\n```\n\n## Documentation\nFor javadocs checkout [the documentation](https://willowtreeapps.github.io/spruce-android/) for more information.\n\n## Basic Usage\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new Default(/*interObjectDelay=*/50L))\n        .animateWith(new Animator[] {DefaultAnimations.shrinkAnimator(parentViewGroup, /*duration=*/800)})\n        .start();\n```\n\nCheckout [the builder documentation](https://willowtreeapps.github.io/spruce-android/com/willowtreeapps/spruce/Spruce.SpruceBuilder.html) for more information.\n\n### Preparing for Animation\nSpruce comes packed with `Animator` options within the `DefaultAnimations` class meant to make your life easier when calling an animation. Let's say we want to have your views fade in. For example, we would create an `animators = new Animator[] {}` and add `DefaultAnimations.fadeInAnimator(parentViewGroup, /*duration=*/800)` as an array item.\nIf you want a view to fade in, then you need to make sure that it is already faded out. To do that, we need to set the alpha to `0` on the views or you could first use a fade out animator.\n\n### Running the Animation \n\nUse the following command to run a basic animation on your view.\n\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new DefaultSort(/*interObjectDelay=*/50L))\n        .animateWith(animators)\n        .start();\n```\n\nCheckout [default animation documentation](https://willowtreeapps.github.io/spruce-android/com/willowtreeapps/spruce/animation/DefaultAnimations.html) for more information.\n\n## Using a SortFunction\nLuckily, Spruce comes with 8 `SortFunction` implementations with a wide open possibility to make more! Use the `SortFunction` to change the order in which views animate. Consider the following example:\n\n```java\nLinearSort sort = new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM);\n```\nIn this example we have created a `LinearSort` which will have views animate in from the top to bottom. We can change the look and feel of the animation by using a `RadialSort` instead which will have the views animate in a circular fashion. If we wanted to use this `sort` in an actual Spruce `start()` call then that would look something like:\n\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM))\n        .animateWith(DefaultAnimations.shrinkAnimator(parentViewGroup, /*duration=*/800))\n        .start();\n```\nDefinitely play around with the stock `SortFunction` implementations until you find the one that is perfect for you! Check out the example app if you want to get previews of what each `SortFunction` will look like.\n\n### The Animators\nThe animations used in Spruce are produced by leveraging the `Animator` class. You may provide your own custom animations by creating your own `Animator` and provide it to the as part of an `Animator[]` to `SpruceBuilder.animateWith(Animator... animators)`. For more information on using the `Animator` class please check out https://developer.android.com/reference/android/animation/Animator.html\n\n### Standard Animation\nThe `DefaultAnimation` class provides simple `Animator` methods to apply the change `Animator` to the views. Use this class if you want to have a stock linear movement of the changes.\n\n## Sort Functions\nWith all different types of animations, especially those dealing with subviews, we have to consider a way in which we want to animate them. Some views can have 0 subviews while others may have hundreds. To handle this, we have the notion of a `SortFunction`. What this will do is take each of the subviews in the `ViewGroup`, and apply a mapping from the specific subview to the exact delay that it should wait before animating. Some of these will sort in a radial formation while others may actually sort randomly. One of the cool features of Spruce, is that you can actually define your own `SortFunction` and then the animation will look completely different. Luckily, Spruce also comes jam packed with a ton of default `SortFunction` classes to make everything easier on you as the developer. Take a look at some of the default `SortFunction` classes we have and see if you can use them or branch off of them for your cool and custom animations!\n\n### The SortFunction Interface\nA very simple interface that requires classes to extend the following class\n\n```java\npublic abstract class SortFunction {\n    public abstract List<SpruceTimedView> getViewListWithTimeOffsets(ViewGroup parent, List<View> children);\n}\n```\n\nWhat the above class needs to do is take in a `ViewGroup` parent and a `List` of `View` children or subviews to generate a list of subviews and their animation offsets. Once the list of subviews has been generated, you can define your own sort metric to determine in which order the `View`'s should animate. To do so, you need to create a `List` of `SpruceTimedView`'s. This special class has two properties: (1) `View view` and (2) `long timeOffset`. Your `SortFunction` can define the `timeOffset` however it likes, but the animators will use this to determine how long it should delay the start of that specific view from animating. The best way to learn, is to play around. So why not have some fun and make your own `SortFunction`!\n\n### About Sort Functions\nTo make sure that developers can use Spruce out of the box, we included about 8 stock `SortFunction` implementations. These are some of the main functions we use at WillowTree and are so excited to see what others come up with!\n\n- `DefaultSort`\n- `LinearSort`\n- `CorneredSort`\n- `RadialSort`\n- `RandomSort`\n- `InlineSort`\n- `ContinousSort`\n- `ContinuousWeightedSort`\n\nCheck out the docs [here](https://willowtreeapps.github.io/spruce-android/com/willowtreeapps/spruce/sort/SortFunction.html) for more information\n\n### View Exclusion Feature\n\nSpruce Animate all the views inside the view group. One of the key tips for pulling the best performance out of an Android app is to maintain a flat hierarchy. Spruce is now Introducing a new Exclusion feature.  \nThis work in 2 modes:\n- NORMAL_MODE: This mode should be used when you have view groups like Constraint/Frame/Relative/Linear Layouts. We feed a list of ids to be excluded to the SpruceBuilder.\n- R_L_MODE: This mode is used when we have ListView/RecyclerView. The only difference with the first mode is that we pass in the positions to be excluded instead of Ids.\n\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM))\n        .excludeViews(getExcludedViewIds(), NORMAL_MODE)\n        //or \n       .excludeViews(getExcludedViewPosition(), R_L_MODE)\n        .start();\n```\n\n### Sort Function Interpolators\n\nSpruce now allows the user to control the overall flow of sort function using Interpolators. \n\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM))\n        .addInterpolator(new LinearInterpolator())\n        .start();\n```\n\nSpruce gives you a wide variety of stock interpolators to choose from.\n\n- `SpruceInterpolators.EASE`\n- `SpruceInterpolators.EASE_IN`\n- `SpruceInterpolators.EASE_OUT`\n- `SpruceInterpolators.EASE_IN_OUT`\n- `SpruceInterpolators.EASE_IN_QUAD`\n- `SpruceInterpolators.EASE_IN_CUBIC`\n- `SpruceInterpolators.EASE_IN_QUART`\n- `SpruceInterpolators.EASE_IN_QUINT`\n- `SpruceInterpolators.EASE_IN_SINE`\n- `SpruceInterpolators.EASE_IN_EXPO`\n- ` SpruceInterpolators.EASE_IN_CIRC`\n- ` SpruceInterpolators.EASE_IN_BACK`\n- ` SpruceInterpolators.EASE_OUT_QUAD`\n- ` SpruceInterpolators.EASE_OUT_CUBIC`\n- ` SpruceInterpolators.EASE_OUT_QUART`\n- ` SpruceInterpolators.EASE_OUT_QUINT`\n- ` SpruceInterpolators.EASE_OUT_SINE`\n- ` SpruceInterpolators.EASE_OUT_EXPO`\n- ` SpruceInterpolators.EASE_OUT_CIRC`\n- ` SpruceInterpolators.EASE_OUT_BACK`\n- ` SpruceInterpolators.EASE_IN_OUT_QUAD`\n- ` SpruceInterpolators.EASE_IN_OUT_CUBIC`\n- ` SpruceInterpolators.EASE_IN_OUT_QUART`\n- ` SpruceInterpolators.EASE_IN_OUT_QUINT`\n- ` SpruceInterpolators.EASE_IN_OUT_SINE`\n- ` SpruceInterpolators.EASE_IN_OUT_EXPO`\n- ` SpruceInterpolators.EASE_IN_OUT_CIRC`\n- ` SpruceInterpolators.EASE_IN_OUT_BACK` \n\nCheckout [interpolator documentation](https://developer.android.com/reference/android/view/animation/Interpolator) for more information.\n\n## Spruce Dynamics\n\nSpruce now supports Dynamic Animations. Spruce Dynamics is an extension of the [androidx dynamic animations](https://developer.android.com/jetpack/androidx/releases/dynamicanimation).\n\nThese are the option that SpruceDynamics exposes to the developers:\n- Allows start delay for dynamic animations\n- Animation Property is now exposed (developers can set progress of the animations dynamically) \n\n\nYou can create your own Spring/Fling animations from SpruceDynamics and add them to the '.animateWith' function for\nplaying the animations in the respective ViewGroup\n\n```java\nAnimator spruceAnimator = new Spruce\n        .SpruceBuilder(parentViewGroup)\n        .sortWith(new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM))\n        .animateWith(DefaultAnimations.dynamicTranslationUpwards(parent))\n        .start();\n```\n\nAbove all these, With spruce, you can implement a combination of both Android Animations and Spruce Dynamics at the same time.\n\n ```java\n\n animators = new Object[]{\n         DefaultAnimations.dynamicTranslationUpwards(parent),\n         DefaultAnimations.dynamicFadeIn(parent),\n         DefaultAnimations.shrinkAnimator(parent,800)\n };\n\n\n Animator spruceAnimator = new Spruce\n         .SpruceBuilder(parentViewGroup)\n         .sortWith(new LinearSort(/*interObjectDelay=*/100L, /*reversed=*/false, LinearSort.Direction.TOP_TO_BOTTOM))\n         .animateWith(animators)\n         .start();\n ```\n\n## Stock Animators\nTo make everybody's lives easier, the stock animators perform basic `View` animations that a lot of apps use today. Mix and match these animators to get the core motion you are looking for.\n\n- `DefaultAnimations.growAnimator(View view, long duration)`\n- `DefaultAnimations.shrinkAnimator(View view, long duration)`\n- `DefaultAnimations.fadeAwayAnimator(View view, long duration)`\n- `DefaultAnimations.fadeInAnimator(View view, long duration)`\n- `DefaultAnimations.spinAnimator(View view, long duration)`\n- `DefaultAnimations.dynamicTranslationUpwards(View view)`\n- `DefaultAnimations.dynamicFadeIn(View view, long duration)`\n\nExperiment which ones work for you! If you think of anymore feel free to add them to the library yourself!\n\n# Example App\nUse the [example app](https://github.com/willowtreeapps/spruce-android/tree/master/app) to find the right `SortFunction`. In the app you will be able to see the affects of each `SortFunction`.\n\n## Contributing to Spruce\nContributions are more than welcome! Please see the [Contributing Guidelines](https://github.com/willowtreeapps/spruce-android/blob/master/Contributing.md) and be mindful of our [Code of Conduct](https://github.com/willowtreeapps/spruce-android/blob/master/code-of-conduct.md).\n\n# Issues or Future Ideas\nIf part of Spruce is not working correctly be sure to file a Github issue. In the issue provide as many details as possible. This could include example code or the exact steps that you did so that everyone can reproduce the issue. Sample projects are always the best way :). This makes it easy for our developers or someone from the open-source community to start working!\n\nIf you have a feature idea submit an issue with a feature request or submit a pull request and we will work with you to merge it in!\n\n## Third Party Bindings\n\n### React Native\nYou may now use this library with [React Native](https://github.com/facebook/react-native) via the module [here](https://github.com/prscX/react-native-spruce)\n\n\n# About WillowTree!\n![WillowTree Logo](https://github.com/willowtreeapps/spruce-android/blob/master/imgs/willowtree_logo.png)\n\nWe build apps, responsive sites, bots—any digital product that lives on a screen—for the world’s leading companies. Our elite teams challenge themselves to build extraordinary experiences by bridging the latest strategy and design thinking with enterprise-grade software development.\n\nInterested in working on more unique projects like Spruce? Check out our [careers page](http://willowtreeapps.com/careers?utm_campaign=spruce-gh).\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.806640625,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.3.72'\n\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.5.4'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n// Define versions in a single place\next {\n    // Sdk and Tools\n    min_sdk_version = 16\n    target_sdk_version = 30\n    compile_sdk_version = 30\n\n    //Library data\n    version_name = '1.1.0'\n    version_code = 1\n    group_name = \"com.willowtreeapps.spruce\"\n    lib_name = 'spruce-android'\n    lib_desc = 'lightweight animation library'\n\n    //dev details\n    dev_id = 'willowtreeapps'\n    dev_name = 'WillowTree Inc'\n    dev_email = 'developer@willowtreeapps.com'\n\n    //license\n    license_name  = 'MIT License'\n    license_url = 'https://opensource.org/licenses/MIT'\n\n    //General\n    androidx_appcompact = '1.2.0'\n    kotlin_collections_ktx = '1.1.0'\n    recycler_view = '1.1.0'\n    multidex = '2.0.1'\n    timber = '4.7.1'\n    kotlin_project_version = '1.3.2'\n\n    //Local Test\n    local_junit_version = '4.12'\n    local_mokito_version = '2.19.0'\n    local_robo_electric_version = '4.1'\n\n    //UI Test\n    ui_test_runner_version = '1.3.0'\n    ui_junit_version = '1.1.2'\n    ui_espresso_core_version = '3.1.0'\n    ui_espresso_intent_version = '3.1.0'\n\n}"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.1689453125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at open.source.conduct@willowtreeapps.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7646484375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\nandroid.enableJetifier=true\nandroid.useAndroidX=true\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0224609375,
          "content": "include ':lib', ':app'\n"
        }
      ]
    }
  ]
}