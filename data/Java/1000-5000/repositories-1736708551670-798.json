{
  "metadata": {
    "timestamp": 1736708551670,
    "page": 798,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "igreenwood/SimpleCropView",
      "stars": 2490,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.408203125,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\n.apt_generated/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Eclipse project files\n.settings/\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Intellij project files\n*.iml\n*.ipr\n*.iws\n.idea/\n\n#.DS_Store\n.DS_Store\n\n# Ignore gradle files\n.gradle/\nbuild/\ngradle.properties\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.640625,
          "content": "language: android\n\ninstall:\n    - ./gradlew dependencies --debug\n\njdk:\n    - oraclejdk8\n\ncache:\n directories:\n  â€” $HOME/.gradle\n\nbefore_cache:\n - find $HOME/.gradle -type f -not -name \"*.jar\" -delete\n - find $HOME/.gradle -type f -not -name \"*.pom\" -delete\n - find $HOME/.gradle -type f -not -name \"*.aar\" -delete\n\nandroid:\n  components:\n    - tools\n    - platform-tools\n    - tools\n    - build-tools-28.0.2\n    - android-28\n    - extra-android-support\n    - extra-android-m2repository\n\n  licenses:\n    - 'android-sdk-preview-license-52d11cd2'\n    - 'android-sdk-license-.+'\n    - 'google-gdk-license-.+'\n\nscript:\n   - ./gradlew clean build --stacktrace\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.115234375,
          "content": "Change Log\n=========\n## Version 1.1.8\n* Fix Unchecked call to Long.valueOf(String) may cause an NFE\n* Changed minimum api level 10 to 14\n\n## Version 1.1.7\n* Fix IllegalArgumentException(#121)\n\n## Version 1.1.6\n* Fix UnsupportedOperationException(#113)\n\n## Version 1.1.5\n* Fix EXIF data bug\n* Fix OOM in onSaveInstanceState(CropImageView does not save bitmap internally anymore.)\n* Support RxJava2\n* Add Builder interface(LoadRequest/CropRequest/SaveRequest)\n* Support save/restore frame rect\n* Support thumbnail for image loading(use blurred image for placeholder)\n\n## Version 1.1.4\n* Fix Overlay drawing is lacking when CropMode.CIRCLE\n\n## Version 1.1.3\n* Fix bug can't parcel a recycled bitmap\n* Fix Overlay drawing is lacking when selecting certain photos\n\n## Version 1.1.2\n* Fix bug image ratio collapse with FREE as cropMode\n* Fix bug can't parcel a recycled bitmap\n\n## Version 1.1.1\n* Fix bug EXIF orientation not applied\n\n## Version 1.1.0\n* Support large size image(load/crop)\n* Improve rotation algorithm\n* Drop support for SDK level 9\n* Add CropMode 'CIRCLE_SQUARE'\n* Remove getRectBitmap() (Use 'CIRCLE_SQUARE' mode instead)\n* Shorten CropMode name(ex. RATIO_FIT_IMAGE -> FIT_IMAGE)\n* Add prefix to attrs(ex. cropMode -> scv_crop_mode)\n* Add animation\n* Support maximum output size\n* Support fixed output size(width/height)\n* Add debug display\n\n## Version 1.0.16\n* Fix bug x + width must be <= bitmap.width() (#40)\n\n## Version 1.0.15\n* Add code for preventing java.lang.IllegalArgumentException: bug x + width must be <= bitmap.width()(#40)\n\n## Version 1.0.14\n* remove \"application android:label\" from Manifest of library(#39)\n\n## Version 1.0.13\n* Add setMinFrameSizeInPx(#27,#28)\n\n## Version 1.0.12\n* Fix bugs related to drawable.(#31)\n\n## Version 1.0.11\n* Fix runtime exception when parcelling and add CREATOR(#17,#25)\n* Fix logic for setting image\n* Add setImageURI(#19, #24)\n\n## Version 1.0.10\n* Fix bug caused by float precision.(#20)\n\n## Version 1.0.9\n\n* Add getActualCropRect()(#14)\n* Add setImageDrawable()(#12)\n* Add getRectBitmap()(#16)\n\n## Version 1.0.8\n\n* Add rotateImage()(#2,#10)\n* Add CropMode.Circle(#3,#9)\n* Add setInitialFrameScale()(#4)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Issei Aoki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.2578125,
          "content": "![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/cover-art.png)\n\n# SimpleCropView\n[![build status](https://travis-ci.org/IsseiAoki/SimpleCropView.svg?branch=master)](https://travis-ci.org/IsseiAoki/SimpleCropView.svg?branch=master)\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-SimpleCropView-green.svg?style=flat)](https://android-arsenal.com/details/1/2366)\n[![Android Gems](http://www.android-gems.com/badge/IsseiAoki/SimpleCropView.svg?branch=master)](http://www.android-gems.com/lib/IsseiAoki/SimpleCropView)\n\nThe SimpleCropView is an image cropping library for Android.<br>\nIt simplifies your code for cropping image and provides an easily customizable UI.<br><br>\nSupported on API Level 14 and above.\n\n\n![demo](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.1.0/demo_basic_usage.gif)\n\n\n## Table of Contents\n* [Download](#download) \n* [Example](#example)\n  * [Image Cropping](#image-cropping) \n  * [Image Rotation](#image-rotation)\n* [Load Image](#load-image)\n  * [Apply Thumbnail](#apply-thumbnail) \n* [Crop and Save Image](#crop-and-save-image)\n  * [Compress Format](#compress-format)\n  * [Compress Quality](#compress-quality)\n* [Customization](#customization) \n  * [Maximum Output Size](#maximum-output-size)\n  * [Fixed Output Size](#fixed-output-size)\n  * [CropMode](#cropmode)\n  * [MinimumFrameSize](#minimumframesize)\n  * [InitialFrameScale](#initialframescale)\n  * [Save and Restore FrameRect](#save-and-restore-framerect)\n  * [Color](#color)\n  * [Stroke Weight and Handle Size](#stroke-weight-and-handle-size)\n  * [Handle Touch Padding](#handle-touch-padding)\n  * [Handle and Guide ShowMode](#handle-and-guide-showmode)\n  * [Animation](#animation)\n* [Picasso and Glide Compatibility](#picasso-and-glide-compatibility)\n* [Debug](#debug)\n* [XML Attributes](#xml-attributes) \n* [For Xamarin](#for-xamarin)\n* [Developed By](#developed-by)\n* [Users](#users) \n* [License](#license) \n\n## Download\nInclude the following dependency in your `build.gradle` file. **Please use the latest version available.**\n\n```groovy\nrepositories {\n    jcenter()\n}\ndependencies {\n    compile 'com.isseiaoki:simplecropview:1.1.8'\n}\n```\n\n## Example\n\n### Image Cropping\n\nAdd permission in `AndroidManifest.xml` file.\n\n```xml\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\nAdd the `com.isseiaoki.simplecropview.CropImageView` to your layout XML file.\n\n>**NOTE:** The image is scaled to fit the size of the view by maintaining the aspect ratio. `WRAP_CONTENT` will be ignored.\n\n```xml       \n\n<com.isseiaoki.simplecropview.CropImageView\n    xmlns:custom=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/cropImageView\"\n    android:layout_weight=\"1\"\n    android:paddingTop=\"16dp\"\n    android:paddingBottom=\"16dp\"\n    android:paddingLeft=\"16dp\"\n    android:paddingRight=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    custom:scv_crop_mode=\"fit_image\"\n    custom:scv_background_color=\"@color/windowBackground\"\n    custom:scv_handle_color=\"@color/colorAccent\"\n    custom:scv_guide_color=\"@color/colorAccent\"\n    custom:scv_overlay_color=\"@color/overlay\"\n    custom:scv_frame_color=\"@color/colorAccent\"\n    custom:scv_handle_size=\"14dp\"\n    custom:scv_touch_padding=\"8dp\"\n    custom:scv_handle_show_mode=\"show_always\"\n    custom:scv_guide_show_mode=\"show_always\"\n    custom:scv_min_frame_size=\"50dp\"\n    custom:scv_frame_stroke_weight=\"1dp\"\n    custom:scv_guide_stroke_weight=\"1dp\"/>\n\n```\n\nLoad image from sourceUri.\n\n```java\n\nmCropView = (CropImageView) findViewById(R.id.cropImageView);\n\nmCropView.load(sourceUri).execute(mLoadCallback);\n```\n\nwith RxJava,\n\n```\nmCropView.load(sourceUri).executeAsCompletable();\n```\n\nCrop image and save cropped bitmap in saveUri.\n\n```java\nmCropView.crop(sourceUri)\n    .execute(new CropCallback() {\n  @Override public void onSuccess(Bitmap cropped) {\n    mCropView.save(cropped)\n        .execute(saveUri, mSaveCallback);\n  }\n\n  @Override public void onError(Throwable e) {\n  }\n});\n```\n\nwith RxJava,\n\n```\nmCropView.crop(sourceUri)\n    .executeAsSingle()\n    .flatMap(new Function<Bitmap, SingleSource<Uri>>() {\n      @Override public SingleSource<Uri> apply(@io.reactivex.annotations.NonNull Bitmap bitmap)\n              throws Exception {\n        return mCropView.save(bitmap)\n            .executeAsSingle(saveUri);\n      }\n    })\n    .subscribeOn(Schedulers.newThread())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new Consumer<Uri>() {\n      @Override public void accept(@io.reactivex.annotations.NonNull Uri uri) throws Exception {\n        // on success\n      }\n    }, new Consumer<Throwable>() {\n      @Override public void accept(@io.reactivex.annotations.NonNull Throwable throwable)\n              throws Exception {\n        // on error\n      }\n    });\n```\n\n### Image Rotation\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.1.0/demo_rotation.gif)\n\nSimpleCropView supports rotation by 90 degrees.\n\n```java\n\ncropImageView.rotateImage(CropImageView.RotateDegrees.ROTATE_90D); // rotate clockwise by 90 degrees\ncropImageView.rotateImage(CropImageView.RotateDegrees.ROTATE_M90D); // rotate counter-clockwise by 90 degrees\n\n```\n\n**For a working implementation of this project, see [sample project](https://github.com/IsseiAoki/SimpleCropView/tree/master/simplecropview-sample).**\n\n## Load Image\n\n* `load(sourceUri).execute(mLoadCallback);`\n\nwith RxJava,\n\n* `load(sourceUri).executeAsCompletable();`\n\nThese method load Bitmap in efficient size from sourceUri. \nYou don't have to care for filePath and image size.\nYou can also use `Picasso` or `Glide`.\n\n### Apply Thumbnail\nYou can use blurred image for placeholder.\n\n```\nmCropView.load(result.getData())\n         .useThumbnail(true)\n         .execute(mLoadCallback);\n```\n\n## Crop and Save Image\n\n```java\nmCropView.crop(sourceUri)\n    .execute(new CropCallback() {\n  @Override public void onSuccess(Bitmap cropped) {\n    mCropView.save(cropped)\n        .execute(saveUri, mSaveCallback);\n  }\n\n  @Override public void onError(Throwable e) {\n  }\n});\n```\n\nwith RxJava,\n\n```\nmCropView.crop(sourceUri)\n    .executeAsSingle()\n    .flatMap(new Function<Bitmap, SingleSource<Uri>>() {\n      @Override public SingleSource<Uri> apply(@io.reactivex.annotations.NonNull Bitmap bitmap)\n              throws Exception {\n        return mCropView.save(bitmap)\n                .executeAsSingle(saveUri);\n      }\n    })\n    .subscribeOn(Schedulers.newThread())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(new Consumer<Uri>() {\n      @Override public void accept(@io.reactivex.annotations.NonNull Uri uri) throws Exception {\n        // on success\n      }\n    }, new Consumer<Throwable>() {\n      @Override public void accept(@io.reactivex.annotations.NonNull Throwable throwable)\n              throws Exception {\n        // on error\n      }\n    });\n```\n\nThese cropping method use full size bitmap taken from `sourceUri` for cropping. \nIf `sourceUri` is null, the Uri set in load(Uri) is used.\nAfter cropping, it saves cropped image in `saveUri`.\n\n### Compress Format\n\nYou can use 3 compress format, `PNG`(default),`JPEG`, and `WEBP`.\n\n```java\nsetCompressFormat(Bitmap.CompressFormat.JPEG);\n```\n\n### Compress Quality\nYou can also set compress quality. `0`~`100`(default)\n\n```java\nsetCompressQuality(90);\n```\n\n## Customization\n\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb1.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase1.jpg)\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb3.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase3.jpg)\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb4.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase4.jpg)\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb5.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase5.jpg)\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb6.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase6.jpg)\n[![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/thumbnails/thumb7.jpg)](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/device-art/showcase7.jpg)\n\n### Maximum Output Size\nYou can set max size for output image. The output image will be scaled within given rect.\n\n```java\nsetOutputMaxSize(300, 300);\n```\n\n### Fixed Output Size\nYou can also set fixed output width/height. \n\n```java\nsetOutputWidth(100); // If cropped image size is 400x200, output size is 100x50\n``` \n\n```java\nsetOutputHeight(100); // If cropped image size is 400x200, output size is 200x100\n``` \n\n### CropMode\n\nThe option for the aspect ratio of the image cropping frame.\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setCropMode(CropImageView.CropMode.RATIO_16_9);\n```\n\n#### Values\n```\nFIT_IMAGE, RATIO_4_3, RATIO_3_4, SQUARE(default), RATIO_16_9, RATIO_9_16, FREE, CUSTOM, CIRCLE, CIRCLE_SQUARE\n```\n#### Rect Crop\n`FREE`:  *Non-Fixed aspect ratio mode*\n`RATIO_X_Y`, `SQUARE`:  *Fixed aspect ratio mode*\n`FIT_IMAGE`:  *Fixed aspect ratio mode. The same aspect ratio as the original photo.*\n\nIf you need other aspect ratio, use `setCustomRatio(int ratioX, int ratioY);`\n\n![demo](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.1.0/demo_crop_mode_rect.gif)\n\n\n#### Circle Crop\n\n`CIRCLE`: *Fixed aspect ratio mode. Crop image as circle.*\n`CIRCLE_SQUARE`: *Fixed aspect ratio mode. Show guide circle, but save as square.(`getRectBitmap()` is removed.)*\n\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.1.0/demo_crop_mode_circle.gif)\n\n\n### MinimumFrameSize\nThe minimum size of the image cropping frame in dp.(default:50)\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setMinFrameSizeInDp(100);\n```\n\n![demo](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/gif/demo_minimum_frame_size.gif)\n\n### InitialFrameScale\nThe initial frame size of the image cropping frame. `0.01`~`1.0`(default)\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setInitialFrameScale(1.0f);\n```\n\n| scale | Appearance |\n|:-------------:|:-----:|\n| 0.5 | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.0.8/initial_frame_scale_0.5.jpg\" width=\"100%\"> |\n| 0.75| <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.0.8/initial_frame_scale_0.75.jpg\" width=\"100%\"> |\n| 1.0 (default)| <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.0.8/initial_frame_scale_1.0.jpg\" width=\"100%\"> |\n\n### Save and Restore FrameRect\nYou can save and restore frame rect as follows. See [sample project](https://github.com/IsseiAoki/SimpleCropView/tree/master/simplecropview-sample) for more details.\n\n* Save FrameRect\n\n```\nmCropView.getActualCropRect()\n```\n\n* Restore FrameRect\n\n```\nmCropView.load(result.getData())\n         .initialFrameRect(mFrameRect)\n         .execute(mLoadCallback);\n```\n\n### Color\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setBackgroundColor(0xFFFFFFFB);\ncropImageView.setOverlayColor(0xAA1C1C1C);\ncropImageView.setFrameColor(getResources().getColor(R.color.frame));\ncropImageView.setHandleColor(getResources().getColor(R.color.handle));\ncropImageView.setGuideColor(getResources().getColor(R.color.guide));\n```\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/color-attributes.png)\n\n### Stroke Weight and Handle Size\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setFrameStrokeWeightInDp(1);\ncropImageView.setGuideStrokeWeightInDp(1);\ncropImageView.setHandleSizeInDp(getResources().getDimension(R.dimen.handle_size));\n```\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/size-attributes.png)\n\n### Handle Touch Padding\n\nAdditional touch area for the image cropping frame handle.\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setTouchPadding(16);\n```\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/handle-touch-padding.png)\n\n### Handle and Guide ShowMode\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\ncropImageView.setHandleShowMode(CropImageView.ShowMode.SHOW_ALWAYS);\ncropImageView.setGuideShowMode(CropImageView.ShowMode.SHOW_ON_TOUCH);\n```\n\n#### Values\n```\nSHOW_ALWAYS(default), NOT_SHOW, SHOW_ON_TOUCH\n```\n\n| Handle ShowMode | Guide ShowMode | Appearance |\n|:-------------:|:-------------:|:-----:|\n| SHOW_ALWAYS | SHOW_ALWAYS | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/show_handle_and_guide.jpg\" width=\"100%\"> |\n| NOT_SHOW | NOT_SHOW | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/not_show_handle_and_guide.jpg\" width=\"100%\"> |\n| SHOW_ALWAYS | NOT_SHOW | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/graphic/show_handle_only.jpg\" width=\"100%\"> |\n| SHOW_ALWAYS | SHOW_ON_TOUCH | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/gif/demo_guide_show_on_touch.gif\" width=\"100%\"> |\n| SHOW_ON_TOUCH | NOT_SHOW | <img src=\"https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/gif/demo_handle_show_on_touch.gif\" width=\"100%\"> |\n\n### Animation\nSimpleCropView supports rotate animation and frame change animation.\n\n#### Enabled\nToggle whether to animate. `true` is default.\n\n```java\nsetAnimationEnabled(true);\n```\n\n#### Duration\nSet animation duration in milliseconds. `100` is default.\n\n```java\nsetAnimationDuration(200);\n```\n\n#### Interpolator\nSet interpolator of animation. `DecelerateInterpolator` is default.\nYou can also use your custom interpolator.\n\n```java\nsetInterpolator(new AccelerateDecelerateInterpolator());\n```\n\n## Picasso and Glide Compatibility\n`com.isseiaoki.simplecropview.CropImageView` is a kind of `ImageView`.\nYou can use it with Picasso or Glide as follows:\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\nPicasso.with(context).load(imageUrl).into(cropImageView);\n```\nor\n\n```java\nCropImageView cropImageView = (CropImageView)findViewById(R.id.cropImageView);\nGlide.with(context).load(imageUrl).into(cropImageView);\n```\n\n>Some option does not work correctly because CropImageView does not support ImageView.ScaleType.\n\n## Debug\nYou can use debug display.\n\n![](https://raw.github.com/wiki/IsseiAoki/SimpleCropView/images/1.1.0/demo_debug.gif)\n\n```java\nsetDebug(true);\n```\n\n## XML Attributes\nXML sample here.\n\n```xml\n<com.isseiaoki.simplecropview.CropImageView\n    xmlns:custom=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/cropImageView\"\n    android:layout_weight=\"1\"\n    android:paddingTop=\"16dp\"\n    android:paddingBottom=\"16dp\"\n    android:paddingLeft=\"16dp\"\n    android:paddingRight=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    custom:scv_img_src=\"@drawable/sample5\"\n    custom:scv_crop_mode=\"fit_image\"\n    custom:scv_background_color=\"@color/windowBackground\"\n    custom:scv_overlay_color=\"@color/overlay\"\n    custom:scv_frame_color=\"@color/colorAccent\"\n    custom:scv_handle_color=\"@color/colorAccent\"\n    custom:scv_guide_color=\"@color/colorAccent\"\n    custom:scv_guide_show_mode=\"show_always\"\n    custom:scv_handle_show_mode=\"show_always\"\n    custom:scv_handle_size=\"14dp\"\n    custom:scv_touch_padding=\"8dp\"\n    custom:scv_min_frame_size=\"50dp\"\n    custom:scv_frame_stroke_weight=\"1dp\"\n    custom:scv_guide_stroke_weight=\"1dp\"\n    custom:scv_crop_enabled=\"true\"\n    custom:scv_initial_frame_scale=\"1.0\"\n    custom:scv_animation_enabled=\"true\"\n    custom:scv_animation_duration=\"200\"\n    custom:scv_handle_shadow_enabled=\"true\"/>\n```\n\n| XML Attribute<br>(custom:) | Related Method | Description |\n|:---|:---|:---|\n| scv_img_src | setImageResource(int resId) | Set source image. |\n| scv_crop_mode | setCropMode(CropImageView.CropMode mode) | Set crop mode. |\n| scv_background_color | setBackgroundColor(int bgColor) | Set view background color. |\n| scv_overlay_color | setOverlayColor(int overlayColor) | Set image overlay color. |\n| scv_frame_color | setFrameColor(int frameColor) | Set the image cropping frame color. |\n| scv_handle_color | setHandleColor(int frameColor) | Set the handle color. |\n| scv_guide_color | setGuideColor(int frameColor) | Set the guide color. |\n| scv_guide_show_mode | setGuideShowMode(CropImageView.ShowMode mode) | Set guideline show mode. |\n| scv_handle_show_mode | setHandleShowMode(CropImageView.ShowMode mode) | Set handle show mode. |\n| scv_handle_size | setHandleSizeInDp(int handleDp) | Set handle radius in density-independent pixels. |\n| scv_touch_padding | setTouchPaddingInDp(int paddingDp) | Set the image cropping frame handle touch padding(touch area) in density-independent pixels. |\n| scv_min_frame_size | setMinFrameSizeInDp(int minDp) | Set the image cropping frame minimum size in density-independent pixels. |\n| scv_frame_stroke_weight | setFrameStrokeWeightInDp(int weightDp) | Set frame stroke weight in density-independent pixels. |\n| scv_guide_stroke_weight | setGuideStrokeWeightInDp(int weightDp) | Set guideline stroke weight in density-independent pixels. |\n| scv_crop_enabled | setCropEnabled(boolean enabled) | Set whether to show the image cropping frame. |\n| scv_initial_frame_scale | setInitialFrameScale(float initialScale) | Set Set initial scale of the frame.(0.01 ~ 1.0) |\n| scv_animation_enabled | setAnimationEnabled(boolean enabled) | Set whether to animate. |\n| scv_animation_duration | setAnimationDuration(int durationMillis) | Set animation duration. |\n| scv_handle_shadow_enabled | setHandleShadowEnabled(boolean handleShadowEnabled) | Set whether to show handle shadows. |\n\n## Developed By\nIssei Aoki - <i.greenwood.dev@gmail.com>\n \n## Users\n* [Snipping Tool - Screen Capture](https://play.google.com/store/apps/details?id=com.anhlt.sniptool)\n\nIf you are using my library, please let me know your app name : )\n\n## For Xamarin\n[https://bitbucket.org/markjackmilian/xam.droid.simplecropview](https://bitbucket.org/markjackmilian/xam.droid.simplecropview)\n\nThanks a million to Marco!!!\n\n## License\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015 Issei Aoki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.7939453125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n  repositories {\n    jcenter()\n    google()\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.1.4'\n    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'\n    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'\n    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n  repositories {\n    jcenter()\n    google()\n  }\n}\n\next {\n  permissionsDispatcherVersion = '2.4.0'\n  supportLibraryVersion = '28.0.0-rc02'\n  rxPermissionsVersion = '0.9.4@aar'\n  rxJavaVersion = '2.1.10'\n  rxAndroidVersion = '2.0.2'\n}\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.05078125,
          "content": "include ':simplecropview-sample', ':simplecropview'\n"
        },
        {
          "name": "simplecropview-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "simplecropview",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}