{
  "metadata": {
    "timestamp": 1736609019322,
    "page": 246,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "awaitility/awaitility",
      "stars": 3852,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.125,
          "content": "target\n.idea/\n*.iws\n*.ipr\n*.iml\n.classpath\n.project\n.settings\n.springBeans\n*/dependency-reduced-pom.xml\n\npom.xml.versionsBackup\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1123046875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n \n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n   1. Definitions.\n \n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n \n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n \n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n \n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n \n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n \n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n \n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n \n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n \n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n \n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n \n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n \n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n \n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n \n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n \n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n \n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n \n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n \n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n \n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n \n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n \n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n \n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n \n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n \n   END OF TERMS AND CONDITIONS\n \n   APPENDIX: How to apply the Apache License to your work.\n \n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n \n   Copyright [2018] [Johan Haleby]\n \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n \n       http://www.apache.org/licenses/LICENSE-2.0\n \n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6298828125,
          "content": "![Awaitility](resources/Awaitility_logo_red_small.png) \n\n[![Build Status](https://github.com/awaitility/awaitility/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/awaitility/awaitility/actions/workflows/ci.yml)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.awaitility/awaitility/badge.svg)](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A\"org.awaitility\"%20AND%20a%3A\"awaitility\")\n\nTesting asynchronous systems is hard. Not only does it require handling threads, timeouts, and concurrency issues, but the intent of the test code can be obscured by all these details. Awaitility is a DSL that allows you to express expectations of an asynchronous system in a concise and easy-to-read manner. For example:\n\n```java\n@Test\npublic void updatesCustomerStatus() {\n    // Publish an asynchronous message to a broker (e.g. RabbitMQ):\n    messageBroker.publishMessage(updateCustomerStatusMessage);\n    // Awaitility lets you wait until the asynchronous operation completes:\n    await().atMost(5, SECONDS).until(customerStatusIsUpdated());\n    ...\n}\n```\n\n## News\n* 2024-08-07: Awaitility `4.2.2` is released with support for \"ea\" JVM versions. See [changelog](https://raw.githubusercontent.com/awaitility/awaitility/master/changelog.txt) for details.\n* 2024-03-15: Awaitility `4.2.1` is released. It allows for easier use of logging and some bug fixes and improvements. See [changelog](https://raw.githubusercontent.com/awaitility/awaitility/master/changelog.txt) for details. \n* 2022-03-04: Awaitility `4.2.0` is released. It allows the use of assertion libraries such as Hamcrest or Assertj in [fail-fast conditions](https://github.com/awaitility/awaitility/wiki/Usage#fail-fast-conditions) as well as various improvements and bug fixes. See [changelog](https://raw.githubusercontent.com/awaitility/awaitility/master/changelog.txt) for details.\n\n[Older news](https://github.com/awaitility/awaitility/wiki/OldNews)\n\n## Documentation\n\n* [Getting started](https://github.com/awaitility/awaitility/wiki/Getting_started)\n* [Usage Guide](https://github.com/awaitility/awaitility/wiki/Usage)\n* [Awaitility Javadoc](http://www.javadoc.io/doc/org.awaitility/awaitility/4.2.2)\n\n## Links\n* [Change log](https://github.com/awaitility/awaitility/raw/master/changelog.txt)\n* Awaitility on [Open Hub](https://www.openhub.net/p/awaitility)\n* [Mailing list](http://groups.google.com/group/awaitility) for questions and support\n\n<a href=\"https://www.buymeacoffee.com/johanhaleby\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/arial-blue.png\" alt=\"Buy Me A Coffee\" style=\"height: 42px !important;width: 180px !important;\" height=\"42px\" width=\"180px\"></a>\n"
        },
        {
          "name": "awaitility-groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility-java8-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility-osgi-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility-scala",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility-test-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "awaitility",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 30.548828125,
          "content": "Changelog 4.2.2 (2024-08-07)\n----------------------------\n* Support JDK EA builds in JavaVersionDetector (thanks to Oleg Estekhin for pull request)\n\nChangelog 4.2.1 (2024-03-15)\n----------------------------\n* Upgraded Kotlin to 1.9.22\n* Added extension properties forever, then, and, given to the Kotlin extension. This allows you to do e.g.:\n\n    await.forever until { .. }\n* Added shortcut for enabling logging. Before you had to do e.g.\n\n    await()\n        .with()\n        .conditionEvaluationListener(new ConditionEvaluationLogger(log::info))\n        .pollInterval(ONE_HUNDRED_MILLISECONDS)\n        .until(logs::size, is(4));\n\n    You can now instead use the \"logging\" shortcut:\n\n    await()\n        .with()\n        .logging(log::info)\n        .pollInterval(ONE_HUNDRED_MILLISECONDS)\n        .until(logs::size, is(4));\n\n    or simply \".logging()\" for \"System.out\".\n\n    This shortcut has also been added globally:\n\n    Awaitility.setLogging(log::info);\n\n    or\n\n    Awaitility.setDefaultLogging();\n* Improved lambda detection for Java 17 and Java 21\n* Upgraded Groovy to 4.0.19\n\nChangelog 4.2.0 (2022-03-04)\n----------------------------\n* Fixed a bug in the shutdown behavior of a polling thread. The wrong time unit was used causing executor shutdown to take way more time than expected in cases where it's stuck. Thanks to Claus Näveke for spotting this and for the initial PR.\n* Fixed a bug in which condition was not evaluated correctly with small intervals, such as:\n    await().atMost(Duration.ofMillis(10)).pollInterval(Duration.ofMillis(5)).until(..);\n  (issue 224). Thanks to Robby Decosemaeker for PR.\n* Upgraded the awaitility-kotlin module to use kotlin 1.6.10\n* Fail fast conditions can now be specified with assertions. For example:\n\n    await().failFast(() -> assertThat(state).isNotEqualTo(\"Failed\")).until(..);\n\n  (issue 238)\n\nChangelog 4.1.1 (2021-10-25)\n----------------------------\n* Fixed a bug preventing you to specify \"fib(-1)\" when using the fibonacci poll interval (thanks to Björn Michael for pull request) (issue 201)\n* Avoid memory leak by caching only the original default uncaught exception handler globally (thanks to Oliver Grof for pull request (issue 221)\n* Added \"conditionEvaluationListener\" to Kotlin DSL\n\nChangelog 4.1.0 (2021-05-08)\n----------------------------\n* Upgraded to Scala from 2.13.3 to 2.13.5 (thanks to sullis for pull request)\n* Upgraded Kotlin from 1.3.72 to 1.5.0\n* Added support for fail-fast conditions. This is a special condition that, if fulfilled, will throw a \"org.awaitility.core.TerminalFailureException\" immediately, thus failing the test.\n  This is good when you have a condition that you know beforehand should never be fulfilled. So instead of waiting the full duration of a normal condition evaluation period, the test will fail\n  faster if this (fail fast) condition evaluates to true. For example:\n\n  await().timeout(Duration.ofSeconds(5)).failFast(() -> orders.findById(1234).state == PAID).until(() -> orders.findById(1234).state == CLOSED);\n\n  This will fail-fast if the state of order 1234 is ever equal to \"PAID\" during the 5 second evaluation of the condition specified in \"until\".\n  (Thanks to Antony Stubbs for initial pull request) (issue 178)\n* Upgraded Groovy from version 3.0.4 to 3.0.8\n\nChangelog 4.0.3 (2020-05-19)\n----------------------------\n* Upgraded to Scala 2.13.2 from 2.13.0 (thanks to sullis for pull request)\n* Upgraded Kotlin extension to use Kotlin 1.3.72 (instead of 1.3.61)\n* Improved org.awaitility.core.ConditionEvaluationLogger to accept a consumer that decides how the logs are printed. You can use this to for example log intermediary values using slf4j instead of System.out.println or log to to disk or a data structure such as CopyOnWriteArrayList. For example:\n\n  await().conditionEvaluationListener(new ConditionEvaluationLogger(log::info)).until(<some condition>);\n\n  This will log using a the logger \"log\" instead of printing to the console.\n* Fixed problems with test dependencies in pom.xml\n* Upgraded Groovy from 2.5.7 to 3.0.4\n\nChangelog 4.0.2 (2020-01-03)\n----------------------------\n* Improved formatting of elapsed time (or error and logging) for long time durations\n* Implemented support for \"during\" (issue 124) (big thanks to Pablo Díaz-López for pull request)\n* org.awaitility.core.ConditionEvaluationListener now has two additional hooks, \"beforeEvaluation\" and \"onTimeout\", which you can implement to get notified on these events. They are implemented as default methods to retain backward compatibility. (issue 149) (big thanks to Oliver Grof for pull request)\n* Upgraded Kotlin extension to use Kotlin 1.3.61 (instead of 1.3.50)\n* Added \"handleIgnoredException\" to org.awaitility.core.ConditionEvaluationListener. This is a hook that let's you react to ignored exceptions caught when evaluating a condition (thanks to Oliver Grof for pull request)\n* Avoid hiding exceptions on the same thread (issue 152) (thanks to Oliver Grof for pull request)\n* Fixed condition timeout calculation units (issue 148) (thanks to Anthony Baker for pull request)\n\nChangelog 4.0.1 (2019-09-06)\n----------------------------\n* Removed the dependency to objenesis since it's no longer required after the move to Java 8+\n* Fixed so that calculation of condition evaluation duration cannot be negative (thanks to Anders Asplund for pull request)\n\nChangelog 4.0.0 (2019-08-30)\n---------------------------\n* Added support for Adder's. For example: await().untilAdder(myLongAdder, equalTo(5L))\n* Added support for Accumulators's. For example: await().untilAccumulator(myLongAccumulator, equalTo(5L))\n* Better handling of InterruptedException for Future's by using code from Guava (code from Uninterruptibles)\n* Shutting down cleanup ExecutorService in an uninterruptible fashion\n* Upgraded Kotlin extension to use Kotlin 1.3.50 (instead of 1.3.41)\n\nChangelog 4.0.0-rc1 (2019-07-15)\n--------------------------------\n* Upgraded Kotlin extension to use Kotlin 1.3.41 (instead of 1.3.11)\n* Better handling of InterruptedException using code from Guava (Uninterruptibles#sleepUninterruptibly) (issue 134)\n* Added org.awaitility.core.ConditionEvaluationLogger#conditionEvaluationLogger() methods. This is only useful for syntactic sugar to avoid having to write the \"new\" keyword in Java when using a ConditionEvaluationLogger. For example:\n    await().with().conditionEvaluationListener(conditionEvaluationLogger()). ..\n* Awaitility now requires Java 8+ (i.e. support for Java 6 and Java 7 is dropped).\n* Hamcrest is update from version 1.3 to 2.1.\n* Awaitility now requires Java 8\n* Scala version is updated from 2.11.8 to 2.13.0\n* Upgraded Groovy from 2.4.11 to 2.5.7\n* Removed the awaitility-proxy module since it's no longer required when using Java 8+.\n* Removed the org.awaitility.core.Predicate interface, use java.util.function.Predicate instead.\n* Removed the org.awaitility.core.BiFunction interface, use java.util.function.BiFunction instead.\n* Removed the org.awaitility.core.Supplier interface, use java.util.function.Supplier instead.\n* Replaced IllegalStateException with IllegalArgumentException when constructing erroneous ConditionSettings\n* Removed org.awaitility.Duration, use java.time.Duration instead. Constants such as ONE_SECOND, TWO_HUNDRED_MILLISECONDS have been moved to org.awaitility.Durations.\n\nChangelog 3.1.6 (2019-01-25)\n----------------------------\n* The Kotlin extension function called \"has\" is now null safe\n* The Kotlin extension function called \"has\" now accepts non-null types\n* Upgraded Kotlin extension to use Kotlin 1.3.11 (instead of 1.2.50)\n\nChangelog 3.1.5 (2018-12-06)\n----------------------------\n* Added a new Kotlin extension function called \"has\" that allows writing succinct expressions when testing for properties in e.g. data classes. For example:\n\n  val data = await untilCallTo { fakeObjectRepository.data } has {\n       state == \"Hello\"\n  }\n\n  where \"data\" is defined as:\n\n  data class Data(var state: String)\n\n  I.e. inside the scope of \"has\" the \"Data\" instance is used as \"this\" (see [here](https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver) for more info).\n  This is the same as doing:\n\n  await untilCallTo { fakeObjectRepository.data } matches { data ->\n      data?.state == \"Hello\"\n  }\n* Improved error message for \"untilNotNull\" Kotlin extension function\n* Added \"untilNull\" extension function to the Kotlin DSL: await untilNull { myDataRepository.findById(\"id\") }\n\nChangelog 3.1.4 (2018-12-05)\n----------------------------\n* Added \"untilNotNull\" extension function to the Kotlin DSL: val data = await untilNotNull { myDataRepository.findById(\"id\") }\n\nChangelog 3.1.3 (2018-11-16)\n----------------------------\n* Last exception is included in hierarchy even if ignoreExceptions is set (issue 121) (thanks to Bryn Cooke for pull request)\n* Removed the use of java.beans.Introspector for de-capitalization of String's since it doesn't work on Android (issue 125)\n\nChangelog 3.1.2 (2018-07-24)\n----------------------------\n* Added \"alias\" method to awaitility which allows one to set the alias using a more english-like DSL:\n    await().with().alias(\"my alias\"). ..\n* Added several new Kotlin extension methods. For example you can now do:\n\n    await withPollInterval ONE_HUNDRED_MILLISECONDS ignoreException IllegalArgumentException::class untilAsserted  {\n        assertThat(fakeRepository.value).isEqualTo(1)\n    }\n\n  or:\n\n     await withAlias \"Kotlin Test\" ignoreExceptionsInstanceOf\n            IllegalArgumentException::class withPollDelay ONE_HUNDRED_MILLISECONDS withPollInterval\n            fibonacci().with().offset(1).and().unit(MILLISECONDS) atLeast TWO_HUNDRED_MILLISECONDS atMost\n            ONE_MINUTE untilCallTo { fakeRepository.value } matches { it == 1 }\n\n  All extension functions can be imported from the \"org.awaitility.kotlin\" package (e.g. 'import org.awaitility.kotlin.*')\n\nChangelog 3.1.1 (2018-06-29)\n----------------------------\n* Hamcrest condition evaluation should be safer if called from multiple threads\n* Fixed bug where error message showed in Hamcrest condition could be the same as the expected value when conditional evaluation time exceeded at most time (issue 109).\n* Added org.awaitility.core.ConditionFactory.until(java.util.concurrent.Callable<T>, org.awaitility.core.Predicate<? super T>) that allows you to use a predicate to evaluate a condition like this:\n    await().until(myRepository::count, cnt -> cnt == 2);\n* Added Kotlin module. In maven add:\n\n    <dependency>\n            <groupId>org.awaitility</groupId>\n            <artifactId>awaitility-kotlin</artifactId>\n            <version>3.1.1</version>\n    </dependency>\n\n  This module adds an extension function called \"untilCallTo\" (in org.awaitility.kotlin.AwaitilityKt) that allows you to write conditions as:\n\n     await().untilCallTo { fakeRepository.value } matches { it == 1 }\n\nChangelog 3.1.0 (2018-03-02)\n----------------------------\n* Bumped all identified out of data properties, some of which applied to dependencies, and bumped all plugin versions, tests are all passing (thanks to Andy Glick for pull request)\n* Fixed issue with ConditionAwaiter calculating a negative condition duration (and thus raised an IllegalArgumentException) in cases where System.currentTimeMillis returned a non-monotonic value (issue 95)\n* Throw TimeoutException from executing long-running Callables as ConditionTimeoutException (thanks to James Withers for pull request) (issue 97)\n* Updated Objenesis dependency from 2.5.1 to 2.6.0 (issue 104)\n* Use wall-clock agnostic System.nanoTime instead of System.currentTimeMillis internally (thanks to Ben Barnard for pull request)\n* Improved error messages for assertion conditions when using aliases. Previously aliases could be included twice in the ConditionTimeoutException which obscured the error message somewhat (issue 108).\n* Fixed so that Awaitility doesn't stop working when using custom threading with multiple conditions. This also greatly improves use cases where one supplies a custom ExecutorService to Awaitility.\n  It'll no longer be shutdown after each call to Awaitility. It's up to you as a user to shutdown the ExecutorService that you provide to Awaitility (issue 101).\n\nChangelog 3.0.0 (2017-04-28)\n----------------------------\n* Error messages are improved for Hamcrest lambda expressions whose mismatch description originally is generated as empty by Hamcrest (issue 87)\n\nChangelog 3.0.0-rc3 (2017-04-07)\n--------------------------------\n* Possible non-backward compatible change: You can now ignore throwables and not only exceptions. This shouldn't affect your old code if you previously used Java 8 lamda expressions or method references but if you previously did:\n    await().atMost(1000, MILLISECONDS).with().ignoreExceptionsMatching(new Predicate<Exception>() {\n            public boolean matches(Exception e) {\n                return e instanceof RuntimeException;\n            }\n        }).until(..);\n  then you now have to change the Predicate to use Throwable instead:\n      await().atMost(1000, MILLISECONDS).with().ignoreExceptionsMatching(new Predicate<Throwable>() {\n              public boolean matches(Throwable e) {\n                  return e instanceof RuntimeException;\n              }\n          }).until(..);\n  (issue 85)\n* Uncaught exceptions from other threads now takes \"ignore exceptions\" into account. For example if any thread throws IllegalArgumentException and this exception has been marked as ignored then it won't be treated as an error.\n  Previously this was only applicable to exceptions that were thrown by the polling (condition evaluation) thread.\n* Potential backward-incompatible change: The untilAsserted method no longer takes a \"Runnable\" as argument but rather a \"ThrowingRunnable\" which allows the runnable to throw checked exceptions.\n  This is backward incompatible only if you've supplied an explicit instance of Runnable to the function. If using Java 8 lambda expressions then nothing should change.\n* Removed org.awaitility.Awaitility#matches method since it's no longer needed\n\nChangelog 3.0.0-rc1 (2017-03-31)\n--------------------------------\n* Updated ByteBuddy to version 1.6.11\n* Downgraded Scala version to 2.11.8 again since 2.12.x requires Java 8\n* Removed the need for the Awaitility poll scheduling thread which means that Awaitility only uses one thread by default\n* Non-backward compatible change: Removed most public constructors in org.awaitility.core.ConditionFactory since they shouldn't be used\n* Moved inner class org.awaitility.pollinterval.IterativePollInterval.Function to org.awaitility.core.Function and changed it to use generics for input and output\n* Added ability to specify the executor service or thread to be used to perform condition evaluations (polling) by using ConditionFactory#pollThread or ConditionFactory#pollExecutorService, for example:\n    given().pollThread(Thread::new).await().atMost(1000, MILLISECONDS).until(() -> fakeRepository.getValue() == 1);\n  Awaitility will now use the Thread created by in the \"Thread::new\" supplier when performing evaluation of the \"() -> fakeRepository.getValue() == 1\" lambda expression.\n  It's also possible to configure Awaitility poll in the same thread as the test:\n    given().pollInSameThread().await().atMost(1000, MILLISECONDS).until(() -> fakeRepository.getValue() == 1);\n  This is an advanced feature and you should be careful when combining \"pollInSameThread\" with conditions that wait forever (or a long time)\n  since Awaitility cannot interrupt the thread when it's using the same thread as the test.\n\nChangelog 3.0.0-rc1 (2017-03-17)\n--------------------------------\n* Fixed issue in org.awaitility.Duration which made it depend on Java 7 features (issue 50)\n* Shaded CGLib dependency to avoid conflicts with other libraries and upgraded version to 3.2.4 (thanks to Alejandro Iannucci for pull request) (issue 55)\n* Removed the deprecated value org.awaitility.Duration#SAME_AS_POLL_INTERVAL (thanks to Paweł Chorążyk for pull request).\n* Cleaned up some internal code and reduced some internal boiler-plate (thanks to Mykhailo Kovalskyi for pull request)\n* Migrated from CgLib to ByteBuddy for class proxies (thanks to Marcin Zajączkowski for pull request)\n* Fixed regression of ClassCastException for non-bool Groovy closures (thanks to Piotr Kubowicz for pull request) (issue 72)\n* Named the thread in ConditionAwaiter#pollSchedulingThread to \"awaitility-poll-scheduling\" (thanks to Piotr Kubowicz for pull request) (issue 70)\n* Updated AbstractHamcrestCondition to use the matcher's mismatch message (thanks to chanceVermilion for pull request) (issue 21)\n* Bumped property versions, plugin versions, dependency versions (thanks to Andy Glick for pull request) (issue 21)\n* Waiting for the condition awaiter thread to shutdown after \"shutdownNow\" in order to avoid having a thread left running after a test (issue 69)\n* Catching throwable instead of exception in poll-scheduling thread\n* Added root cause to ConditionTimeoutException when applicable so that one can more easily distinguish find where an error occurred (issue 67)\n* Non-backward compatible change: Moved proxy creation to a new project called \"awaitility-proxy\". This means that if you need to use proxies depend on this project:\n    <dependency>\n    \t<groupId>org.awaitility</groupId>\n    \t<artifactId>awaitility-proxy</artifactId>\n    \t<version>3.0.0-rc1</version>\n    </dependency>\n  You create a proxy when you do:\n    await().untilCall( to(someObject).someMethod(), is(4) );\n  The \"to\" method has been moved to \"org.awaitility.proxy.AwaitilityClassProxy\".\n* Upgraded Scala support module to use Scala 2.12.1 (previous version was 2.11.8)\n* Upgraded Groovy support module to use Groovy 2.4.9 (previous version was 2.4.8)\n* Removed the deprecated classes org.awaitility.groovy.AwaitilitySupport and org.awaitility.groovy.AwaitilityTrait from the Groovy module\n* Fixed an issue where a condition didn't fail until the condition timeout even though an exception was thrown in the condition (issue 78)\n* Non-backward compatible change: Renamed the \"until(Runnable)\" method in org.awaitility.core.ConditionFactory to \"untilAsserted(Runnable)\".\n  The reasons for this are:\n    1. Runnable and Callable are ambiguous in other languages such as Kotlin and Groovy which causes problems when integration with these languages.\n    2. It's not clear (enough) when to use the Callable variant vs the Runnable variant when using plain Java\n  This means that if you previously did:\n    await().until(() -> assertThat(something()).isEqualTo(\"Something\"));\n  you now need to do:\n    await().untilAsserted(() -> assertThat(something()).isEqualTo(\"Something\"));\n\nChangelog 2.0.0 (2016-06-17)\n----------------------------\n* Fixed issue with static fibonacci method that took an offset as argument which was not used\n* Condition awaiter thread does now have a meaningful name based on the await alias (if defined) (thanks to Alex Simkin for pull request)\n* Added atLeast support, for example:\n    await().atLeast(1, SECONDS).and().atMost(2, SECONDS).until(value(), equalTo(1));\n  Big thanks to Oleksii for helping out (issue 38)\n* Awaitility now requires Java 6 (Java 5 was previously required)\n* Updates to the groovy module. org.awaitility.groovy.AwailitySupport, org.awaitility.groovy.AwaitilityGroovyBridge\n  and org.awaitility.groovy.AwaitilityTrait have been deprecated.  The reason is that both AwaitilitySupport and AwaitilityTrait have\n  one big flaws. When not used for one test class, these test cases might or might not fail, depending on execution order. For this\n  reason an AwaitilityExtensionModule has been created which automatically add a new method until(Closure) to the ConditionFactory.\n  So with groovy 2 and above, there is effectively no need any more to use AwaitilitySupport, AwaitilityTrait or AwaitilityGroovyBridge.\n  All you need to do is add awaitility-groovy to your classpath and you are good. Big thanks to Tobias Schulte for pull request.\n* Improved Scala support. Previously only boolean expressions could be passed to \"until\" in Scala but now you can pass any supported type. For example you can now use assertj conditions:\n    await until { assertThat(c1.count() + c2.count(),  is(6)) }\n  (thanks to Grzegorz Ligas for pull request)\n* Changed package name from \"com.jayway.awaitility\" to \"org.awaitility\"\n* Changed groupId from \"com.jayway.awaitility\" to \"org.awaitility\"\n\nChangelog 1.7.0 (2015-11-27)\n----------------------------\n* Deadlock detection is no longer applied on platform that doesn't support it such as Android (issue 30)\n* ConditionEvaluationLogger now logs the poll interval of the evaluated condition\n* Deprecations: Duration.SAME_AS_POLL_INTERVAL is deprecated since it's no longer used. It'll be removed in a future release.\n* Introducing non-fixed poll intervals. PollInterval is now a first-class concept (represented by a com.jayway.awaitility.pollinterval.PollInterval)\n  and it's non possible use non-fixed poll intervals. By default Awaitility uses the FixedPollInterval (default 100 ms just as in previous version)\n  but you can now change another type of poll interval. Awaitility ships with three different PollInterval implementations:\n  Fixed (default), Fibonacci and Iterative. To use the Fibonacci poll interval you can do like this:\n    with().pollInterval(fibonacci()).await().until(..);\n  this will generate a poll interval of 1, 1, 2, 3, 5, 8, 13, .. . Note that Duration.ZERO is used as start value for all non-fixed poll intervals\n  (for fixed poll intervals the poll delay is equal to the duration of the FixedPollInterval for backward compatible reasons). (issue 36)\n* Improvement to Duration (com.jayway.awaitility.Duration). You can invoke make use of the new methods plus, minus, multiply, divide. For example:\n    Duration.of(5, SECONDS).plus(17, MILLISECONDS); // Will return a Duration.of( of 5017 milliseconds.\n* Added Duration.ONE_MILLISECOND\n* Added ability to wait for Runnable (void) conditions that declares check exceptions. For example if we have the following method:\n    public void something() throws Exception { ... }\n  We can't just do:\n    await().until(() -> something());\n  since something might throw a checked exception (and the lambda expression thus can't be treated as a Runnable). To work-around this\n  make use of the \"matches\" method declared in com.jayway.awaitility.Awaitility:\n     await().until(matches(() -> something()));\n  Big thanks to Tomasz Kowalczewski and Marcin Zajączkowski for helping out. (issue 32)\n\nChangelog 1.6.5 (2015-09-27)\n----------------------------\n* Added ability to ignore exceptions while evaluating a condition. This is useful if you're waiting for something that throws exceptions\n  as an intermediate value before the final state is reached. As an example take Spring's SocketUtils class that allows you to find an\n  available TCP port in a given range. It will throw an exception if no port is available in the given range. So let's say we know that the ports\n  in the given range are currently not available but we want to wait for them to be available. In that case we need to ignore the exceptions thrown\n  by SocketUtils.\n  For example:\n    given().ignoreExceptions().await().until(() -> SocketUtils.findAvailableTcpPort(x,y));\n This instruct Awaitility to ignore all caught exceptions during condition evaluation. Exceptions will be treated as evaluating to false.\n The test will not fail upon an exception matching the supplied exception type, unless it times out. You can also ignore specific exceptions:\n   given().ignoreException(IllegalStateException.class).await().until(() -> SocketUtils.findAvailableTcpPort(x,y));\n or use Hamcrest matcher:\n   given().ignoreExceptionsMatching(instanceOf(RuntimeException.class)).await().until(() -> SocketUtils.findAvailableTcpPort(x,y));\n or a predicate:\n   given().ignoreExceptionsMatching(e -> e.getMessage().startsWith(\"Could not find an available\")).await().until(something());\n* Updated the Groovy version to 2.4.4 from 2.3.7 in the Groovy extension.\n* Updated the Scala version to 2.11.3 from 2.11.7 in the Scala extension.\n\nChangelog 1.6.4 (2015-09-14)\n---------------------------\n* Updated to JUnit 4.12\n* Allow parallel test execution with MethodCallRecorder (thanks to Tom Bujok for pull request)\n\nChangelog 1.6.3 (2014-11-28)\n----------------------------\n* Awaitility now gracefully handles cases when findDeadLockedThreads() is not supported on certain JVM:s (thanks to Jeremie Jost for pull request).\n\nChangelog 1.6.2 (2014-10-15)\n----------------------------\n* awaitility-java8 project was renamed to awaitility-java8-test to better describe its purpose.\n* Support for automatic deadlock detection. The awaitility stracktrace will now include deadlock information if a deadlock was found (thanks to Tobias Bieniek for pull request).\n* Condition evaluation listeners now supports non Hamcrest based conditions (thanks to Tomasz Kalkosiński for the help).\n* Condition evaluation listeners now expose condition alias\n* Improved error messages for lambda- and Runnable conditions\n* Upgraded Scala dependency to version 2.11.3.\n* Upgraded Groovy dependency to version 2.3.7.\n* Support for Groovy Traits. Implement com.jayway.awaitility.groovy.AwaitilityTrait instead of using the com.jayway.awaitility.groovy.AwaitilitySupport mixin.\n\nChangelog 1.6.1 (2014-07-03)\n----------------------------\n* Added support for condition evaluation listeners. A listener is called each time a Hamcrest-based condition has been evaluated by Awaitility. For example:\n    with().\n            conditionEvaluationListener(condition -> System.out.printf(\"%s (elapsed time %dms, remaining time %dms)\\n\", condition.getDescription(), condition.getElapsedTimeInMS(), condition.getRemainingTimeInMS())).\n            await().atMost(Duration.TEN_SECONDS).until(new CountDown(5), is(equalTo(0)));\n  will print the following to the console:\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <5> (elapsed time 101ms, remaining time 1899ms)\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <4> (elapsed time 204ms, remaining time 1796ms)\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <3> (elapsed time 306ms, remaining time 1694ms)\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <2> (elapsed time 407ms, remaining time 1593ms)\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown expected (<0> or a value less than <0>) but was <1> (elapsed time 508ms, remaining time 1492ms)\n    com.jayway.awaitility.AwaitilityJava8Test$CountDown reached its end value of (<0> or a value less than <0>) (elapsed time 610ms, remaining time 1390ms)\n  Big thanks to Maciej Gawinecki for the help.\n* Added primitive values to matching check when doing await().untilTrue(..) and await().untilFalse(..) (issue 26)\n* Fixed issue that caused poll interval to be used as poll delay (issue 29).\n\nChangelog 1.6.0 (2014-04-23)\n----------------------------\n* Support for using Fest Assert and AssertJ: await().until(() -> assertThat(fakeRepository.getValue()).isEqualTo(1));\n* Better Java 8 support\n* Updated Groovy module to use Groovy 2.2.2\n* Updated CgLib to version 3.1\n\nChangelog 1.5.0 (2014-01-27)\n----------------------------\n* Updated Objenesis dependency to version 2.1\n* Added support for returning the last polled value from Awaitility when using proxy conditions. For example: int y = await().untilCall(to(x).y(), greaterThan(2)); (issue 13).\n* Updated Groovy dependency to 2.2.1.\n* Non backward-compatible change: Awaitility now throws org.awaitility.core.ConditionTimeoutException instead of java.concurrent.TimeoutException. The reason is that ConditionTimeoutException is a runtime exception and the latter couldn't be caught since \"await\" didn't declare the checked exception. (issue 24)\n* Awaitility now catches all uncaught throwables from each thread and propagates them to the main thread (issue 22).\n* Improved error messages when using aliased await conditions (issue 21).\n\nChangelog 1.4.0 (2013-11-26)\n----------------------------\n* Updated Groovy to version 2.2.0\n* Fixed a bug that sometimes accidentally used poll interval as poll delay\n* Updated to Hamcrest 1.3\n* Updated Scala to version 2.10.3\n\nChangelog 1.3.5 (2013-02-16)\n----------------------------\n* Added untilFalse method to make it easier to wait until an atomic boolean is false: await().untilFalse(myAtomicBoolean);\n* Removed all checked exceptions from Awaitility so that you don't need to catch them (issue 19).\n* Improved error message when trying to proxy final methods (issue 10).\n\nChangelog 1.3.4 (2012-02-13)\n----------------------------\n* Updated Scala module to use Scala 2.9.1\n* Now uses the poll interval as delay _between_ scheduled tasks. This means that if the supplier takes more time to return the value than what's defined by the poll interval the supplier won't be called twice (or more) (issue 12).\n* Now supports usage of more flexible Hamcrest matchers (thanks to Xavier Dury for the patch) (issue 15).\n* Upgraded Hamcrest to version 1.2.1.\n\nChangelog 1.3.3\n---------------\n* Added support for AtomicInteger, AtomicLong, AtomicReference and AtomicBoolean, e.g. await().untilAtomic(atomic, equalTo(2)).\n\nChangelog 1.3.2\n---------------\n* Fixed an issue where poll interval overrode the poll delay.\n* Awaitility now throws IllegalStateException when timeout is less than or equal to the poll interval or poll delay.\n* Improved error messages when using field suppliers (e.g. await().until( fieldIn(object).ofType(int.class), is(2) );) when timeout occurs.\n\nChangelog 1.3.1\n---------------\n* Groovy support! Syntax is: await().until { something() > 5 }\n* Improved error messages in Scala DSL.\n* Add SPI support for extension DSL:s which allows them to provide error messages.\n\nChangelog 1.3\n-------------\n* MethodCallRecorder generates an exception on getLastXXX if no method call have been recorded. \n* MethodCallRecorder is reset after retrieving last calls and on Awaitility.reset \n* Added basic support for Scala functions\n* Added a fieldIn method to Awaitility which allows you to build a supplier using a field, e.g. await().until(fieldIn(object).ofType(int.class), equalTo(1));\n* Backward incompatible refactoring: until(callTo(..)) has been renamed to untilCall(to(..)). This to allow for extension DSL's (such as the Scala DSL) to work appropriately.\n* Fixed a bug that failed to set Awaitility to catch uncaught exceptions on reset\n\nChangelog version 1.2.1\n-----------------------\n* Changed ProxyCreator to use the standard InvocationHandler interface\n* Refactored for even better error messages.\n\nChangelog version 1.2\n---------------------\n* Improved error messages for timeouts to include actual value.\n\nChangelog version 1.1\n---------------------\n* Major internal refactoring to allow for better default error messages when a timeout occurs.\n* Support for using proxy-based conditions (i.e. using Awaitility.callTo) when testing Eclipse applications.\n* Calls to the method Object.finalize should not be recorded as this is part of gc.\n"
        },
        {
          "name": "deploy_bintray.sh",
          "type": "blob",
          "size": 1.318359375,
          "content": "#!/bin/bash\nread -s -p \"Bintray api key: \" api_key\necho\nread -p \"Version to release: \" version\n\ntmpFolderRootName=/tmp/$RANDOM\nmkdir -p \"${tmpFolderRootName}\"\n\nmaven_awaitility_folder=$HOME/.m2/repository/org/awaitility\nproject_names=(awaitility awaitility-groovy awaitility-kotlin awaitility-scala)\n\nfor project in ${project_names[*]} ; do\n    folder=\"${maven_awaitility_folder}/${project}/${version}\"\n    artifact_prefix=\"${project}-${version}\"\n    folder_artifact_prefix=\"${folder}/${artifact_prefix}\"\n    zip -q \"${tmpFolderRootName}/${project}-${version}.zip\" \"${folder_artifact_prefix}.jar\" \"${folder_artifact_prefix}-sources.jar\" \"${folder_artifact_prefix}-javadoc.jar\"\ndone\n\necho \"Files to deploy:\"\n\nfiles_to_deploy=`ls \"${tmpFolderRootName}\"`\nfor zipFile in ${files_to_deploy}; do\n  printf \"${zipFile}:\\n\\t\\t\"\n  unzip -l \"${tmpFolderRootName}/${zipFile}\"\n  printf \"\\n\"\ndone\n\nread -p \"Is this correct? [y/N]\" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]\nthen\n\tfor file in ${files_to_deploy}; do\n        absolute_path=\"${tmpFolderRootName}/${file}\"\n\t\techo \"Uploading ${absolute_path}\"\n\t\tcurl -T \"${absolute_path}\" -ujohanhaleby:\"${api_key}\" https://api.bintray.com/content/johanhaleby/generic/awaitility/\"${version}\"/\n\tdone\necho \"Awaitility $version was deployed to Bintray. Login to Bintray to publish the release.\"\nfi\nrm -rf \"${tmpFolderRootName}\""
        },
        {
          "name": "generate_javadoc.sh",
          "type": "blob",
          "size": 0.3896484375,
          "content": "#!/bin/sh\nread -p \"Version to generate javadoc for: \" version\nproject_names=(awaitility awaitility-groovy awaitility-kotlin awaitility-scala)\n\necho \"Generating Javadoc for version ${version}.\"\n\nfor project_name in ${project_names[*]}\ndo\n    echo \"Generating for ${project_name}\"\n    curl -Ss http://www.javadoc.io/doc/org.awaitility/${project_name}/${version} >/dev/null 2>&1\ndone\necho \"Completed\"\n\n"
        },
        {
          "name": "mvn_release.sh",
          "type": "blob",
          "size": 0.4970703125,
          "content": "#!/bin/sh\nread -p \"Enter the version to release: \" releaseVersion\necho \"Starting to release Awaitility $releaseVersion\"\nmvn versions:set -DnewVersion=\"${releaseVersion}\" && mvn clean install -Prelease -DskipTests=true && \\\ngit reset HEAD --hard && git clean -df && \\\nmvn release:prepare -Prelease -DautoVersionSubmodules=true -Dtag=awaitility-\"${releaseVersion}\" -DreleaseVersion=\"${releaseVersion}\" && \\\nmvn release:perform -Prelease\n\necho \"Maven release of Awaitility $releaseVersion completed successfully\""
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 10.5986328125,
          "content": "<!--\n  ~ Copyright 2015 the original author or authors.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>9</version>\n    </parent>\n\n    <groupId>org.awaitility</groupId>\n    <artifactId>awaitility-parent</artifactId>\n    <packaging>pom</packaging>\n    <version>4.2.3-SNAPSHOT</version>\n\n    <url>http://github.com/awaitility/awaitility</url>\n    <name>Awaitility Parent POM</name>\n    <description>A Java DSL for synchronizing asynchronous operations</description>\n    <inceptionYear>2010</inceptionYear>\n\n    <issueManagement>\n        <system>GitHub Issue Tracking</system>\n        <url />\n    </issueManagement>\n\n    <licenses>\n        <license>\n            <name>Apache 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <name>Johan Haleby</name>\n            <id>johan.haleby</id>\n            <organization>Parkster</organization>\n            <organizationUrl>https://www.parkster.se</organizationUrl>\n            <roles>\n                <role>Developer</role>\n            </roles>\n        </developer>\n    </developers>\n\n    <scm>\n        <url>http://github.com/awaitility/awaitility/tree/${scm.branch}</url>\n        <connection>scm:git:git://github.com/awaitility/awaitility.git</connection>\n        <developerConnection>scm:git:ssh://git@github.com/awaitility/awaitility.git</developerConnection>\n        <tag>HEAD</tag>\n    </scm>\n    <mailingLists>\n        <mailingList>\n            <name>Awaitility mailing-list</name>\n            <archive>http://groups.google.com/group/awaitility/topics</archive>\n        </mailingList>\n    </mailingLists>\n\n    <prerequisites>\n        <maven>${maven.version}</maven>\n    </prerequisites>\n\n    <properties>\n        <hamcrest.version>2.1</hamcrest.version>\n        <java.version>1.8</java.version>\n        <maven.compiler.source>${java.version}</maven.compiler.source>\n        <maven.compiler.target>${java.version}</maven.compiler.target>\n        <maven-javadoc-plugin.version>2.10.4</maven-javadoc-plugin.version>\n        <maven.version>3.5.0</maven.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <scm.branch>master</scm.branch>\n        <slf4j.version>1.8.0-beta4</slf4j.version>\n        <surefire.reportFormat>plain</surefire.reportFormat>\n        <surefire.useFile>false</surefire.useFile>\n        <surefire.version>3.2.5</surefire.version>\n    </properties>\n\n    <modules>\n        <module>awaitility</module>\n        <module>awaitility-scala</module>\n        <module>awaitility-groovy</module>\n        <module>awaitility-test-support</module>\n    </modules>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>3.8.1</version>\n                </plugin>\n                <plugin>\n                    <artifactId>maven-jar-plugin</artifactId>\n                    <version>2.4</version>\n                </plugin>\n                <plugin>\n                    <artifactId>maven-shade-plugin</artifactId>\n                    <version>2.4.3</version>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                    <version>${surefire.version}</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <plugins>\n            <plugin>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>2.5</version>\n                <configuration>\n                    <autoVersionSubmodules>true</autoVersionSubmodules>\n                </configuration>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>${maven-javadoc-plugin.version}</version>\n                <configuration>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <failOnError>false</failOnError>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>animal-sniffer-maven-plugin</artifactId>\n                <version>1.18</version>\n                <configuration>\n                    <signature>\n                        <groupId>org.codehaus.mojo.signature</groupId>\n                        <artifactId>java18</artifactId>\n                        <version>1.0</version>\n                    </signature>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>check-java-compatibility</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <version>3.0.1</version>\n            </plugin>\n            <plugin>\n                <artifactId>maven-help-plugin</artifactId>\n                <version>2.2</version>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.3</version>\n            </plugin>\n\n        </plugins>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>jcl-over-slf4j</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-jdk14</artifactId>\n                <version>${slf4j.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.hamcrest</groupId>\n                <artifactId>hamcrest</artifactId>\n                <version>${hamcrest.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>4.13.2</version>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.hamcrest</groupId>\n                        <artifactId>hamcrest-core</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <groupId>org.awaitility</groupId>\n                <artifactId>awaitility-test-support</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.assertj</groupId>\n                <artifactId>assertj-core</artifactId>\n                <version>3.21.0</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <profiles>\n        <profile>\n            <id>kotlin</id>\n            <modules>\n                <module>awaitility-kotlin</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>osgi-tests</id>\n            <modules>\n                <module>awaitility-osgi-test</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>modern-jvm</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <version>${surefire.version}</version>\n                        <configuration>\n                            <argLine>--add-opens java.base/java.lang=ALL-UNNAMED</argLine>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n\n\n        </profile>\n        <profile>\n            <id>release</id>\n            <modules>\n                <module>awaitility-kotlin</module>\n                <module>awaitility-osgi-test</module>\n            </modules>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <id>attach-sources</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>${maven-javadoc-plugin.version}</version>\n                        <configuration>\n                            <encoding>${project.build.sourceEncoding}</encoding>\n                            <failOnError>false</failOnError>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>attach-javadocs</id>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n\n</project>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_wiki.sh",
          "type": "blob",
          "size": 1.2021484375,
          "content": "#!/bin/bash\nread -p \"Enter the old version: \" oldVersion\nread -p \"Enter the new version: \" newVersion\ntmpFolderRootName=/tmp/$RANDOM\nfolderName=${tmpFolderRootName}/awaitility.wiki\n\nupdateFiles() {\nif [[ -z \"$filesToUpdate\" ]]\n    then\n        echo \"Couldn't find any files to update.\"\n    exit 0\nfi\n\nfor file in ${filesToUpdate}\n    do\n        echo \"Updating $file\" &&\n        sed -i \"\" \"s/${oldVersion}/${newVersion}/g\" \"$file\"\n    done\n}\ngit clone https://github.com/awaitility/awaitility.wiki.git ${folderName} && cd ${folderName} &&\nfilesToUpdate=$(find * ! -name \"ReleaseNotes*.md\" ! -name \"Release-Notes*.md\" ! -name \"OldNews.md\" ! -name \"How_to_release.md\" -name \"*.md\" -type f -print) &&\nupdateFiles &&\nread -p \"Would you like to commit the changes? [y/N]\" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n\techo \"Committing and pushing changes\" && \n\tgit commit -am \"Updating docs for version ${newVersion}\" && git push && echo \"Changes pushed..\" &&\n\techo \"Cleaning up temporary files\" &&\n\trm -rf ${tmpFolderRootName} \nelse\n\techo \"Changes not committed, do \\\"cd ${folderName} && git commit -am \\\"Updating docs for version ${newVersion}\\\" && git push\\\" when ready\"\nfi\necho \"Note that you need to update README.md manually\"\ncd -\n"
        }
      ]
    }
  ]
}