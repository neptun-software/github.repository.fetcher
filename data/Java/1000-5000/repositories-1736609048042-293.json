{
  "metadata": {
    "timestamp": 1736609048042,
    "page": 293,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lisawray/groupie",
      "stars": 3670,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12890625,
          "content": "*.iml\n*.jks\n.DS_Store\n.externalNativeBuild\n.gradle\n.idea/*\n/.idea/libraries\n/.idea/workspace.xml\n/build\n/captures\n/local.properties\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0322265625,
          "content": "MIT License\n\nCopyright (c) 2016 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2607421875,
          "content": "# groupie\n\nGroupie is a simple, flexible library for complex RecyclerView layouts.  \n\nGroupie lets you treat your content as logical groups and handles change notifications for you -- think sections with headers and footers, expandable groups, blocks of vertical columns, and much more.  It makes it easy to handle asynchronous content updates and insertions and user-driven content changes.  At the item level, it abstracts the boilerplate of item view types, item layouts, viewholders, and span sizes.  \n \n<img src=\"http://i.imgur.com/eftOE0v.gif\" width=\"300px\"/>\n\n# Try it out:\n\n```gradle\nimplementation \"com.github.lisawray.groupie:groupie:$groupie_version\"\n```\n\nGroupie also has a support module for Android's [view binding](https://developer.android.com/topic/libraries/view-binding). This module also supports Android [data binding](https://developer.android.com/topic/libraries/data-binding/index.html), so if your project uses both data binding and view binding, you don't have to add the dependency on the data binding support module. [Setup here.](#view-binding)\n\n```gradle\nimplementation \"com.github.lisawray.groupie:groupie:$groupie_version\"\nimplementation \"com.github.lisawray.groupie:groupie-viewbinding:$groupie_version\" \n```\n\n### Note:\nIf using `groupie-viewbinding` in a databinding project is only available when using Android Gradle Plugin 3.6.0 or higher.\n\nIf using an older Gradle Plugin version with databinding the you can use the standalone `groupie-databinding` library to generate view holders. [Setup here.](#data-binding)\n\n```gradle\nimplementation \"com.github.lisawray.groupie:groupie:$groupie_version\"\nimplementation \"com.github.lisawray.groupie:groupie-databinding:$groupie_version\" \n```\n\nYou can also use Groupie with Java and your existing ViewHolders. \n\nWhich one to choose?  It's up to you and what your project already uses. You can even use Kotlin and data binding together.[<sup>*</sup>](#kotlin-and-data-binding) Or all your existing hand-written Java ViewHolders, and one new Kotlin item to try it out. Go crazy!  \n    \n## Get started\n\nUse a `GroupieAdapter` anywhere you would normally use a `RecyclerView.Adapter`, and attach it to your RecyclerView as usual.\n\nKotlin\n```kotlin\nval adapter = GroupieAdapter()\nrecyclerView.adapter = adapter\n```\n\nJava\n```java\nGroupieAdapter adapter = new GroupieAdapter();\nrecyclerView.setAdapter(adapter);\n```\n    \n## Groups\n\nGroups are the building block of Groupie.  An individual `Item` (the unit which an adapter inflates and recycles) is a Group of 1.  You can add Groups and Items interchangeably to the adapter.\n\nKotlin\n```kotlin\ngroupAdapter += HeaderItem()\ngroupAdapter += CommentItem()\n\nval section = Section()\nsection.setHeader(HeaderItem())\nsection.addAll(bodyItems)\ngroupAdapter += section\n```\n\nJava\n```java\ngroupAdapter.add(new HeaderItem());\ngroupAdapter.add(new CommentItem());\n\nSection section = new Section();\nsection.setHeader(new HeaderItem());\nsection.addAll(bodyItems);\ngroupAdapter.add(section);\n```\n    \nModifying the contents of the GroupieAdapter in any way automatically sends change notifications.  Adding an item calls `notifyItemAdded()`; adding a group calls `notifyItemRangeAdded()`, etc.\n\nModifying the contents of a Group automatically notifies its parent.  When notifications reach the GroupieAdapter, it dispatches final change notifications.  There's never a need to manually notify or keep track of indices, no matter how you structure your data.\n\n```java\nsection.removeHeader(); // results in a remove event for 1 item in the adapter, at position 2\n```\n    \nThere are a few simple implementations of Groups within the library:\n- `Section`, a list of body content with an optional header group and footer group.  It supports diffing and animating moves, updates and other changes\n- `ExpandableGroup`, a single parent group with a list of body content that can be toggled hidden or shown.\n    \nGroupie tries not to assume what features your groups require.  Instead, groups are flexible and composable.  They can be combined and nested to arbitrary depth.  \n    \nLife (and mobile design) is complicated, so groups are designed so that making new ones and defining their behavior is easy. You should make many small, simple, custom groups as the need strikes you.\n\nYou can implement the `Group` interface directly if you want.  However, in most cases, you can extend `Section` or the base implementation, `NestedGroup`.  Section supports common RV paradigms like diffing, headers, footers, and placeholders.  NestedGroup provides support for arbitrary nesting of groups, registering/unregistering listeners, and fine-grained change notifications to support animations and updating the adapter.\n    \n## Items\n\nGroupie abstracts away the complexity of multiple item view types.  Each Item declares a view layout id, and gets a callback to `bind` the inflated layout.  That's all you need; you can add your new item directly to a `GroupieAdapter` and call it a day.\n\n### Item with data binding:\n\nThe `Item` class gives you simple callbacks to bind your model object to the generated binding.  Because of data binding, there's no need to write a view holder.  \n\n```java\npublic class SongItem extends BindableItem<SongBinding> {\n\n    public SongItem(Song song) {\n        this(song);\n    }    \n\n    @Override public void bind(SongBinding binding, int position) {\n        binding.setSong(song);\n    }\n\n    @Override public int getLayout() {\n        return R.layout.song;\n    }\n}\n```\n\nIf you're converting existing ViewHolders, you can reference any named views (e.g. `R.id.title`) directly from the binding instead. \n```java\n    @Override public void bind(SongBinding binding, int position) {\n        binding.title.setText(song.getTitle());\n    }\n```\n\nYou can also mix and match `BindableItem` and other `Items` in the adapter, so you can leave legacy viewholders as they are by making an `Item<MyExistingViewHolder>`.  \n\n### Legacy item (your own ViewHolder)\nYou can leave legacy viewholders as they are by converting `MyExistingViewHolder` to extend `GroupieViewHolder` rather than `RecyclerView.ViewHolder`. Make sure to change the imports to `com.xwray.groupie.Item` and `com.xwray.groupie.GroupieViewHolder`.\n\nFinally, in your `Item<MyExistingViewHolder>`, override \n\n```java\n    @Override\n    public MyExistingViewHolder createViewHolder(@NonNull View itemView) {\n        return new MyExistingViewHolder(itemView);\n    }\n```\n\n### Note: \n\nItems can also declare their own column span and whether they are draggable or swipeable.  \n\n# Gradle setup\n\n## Kotlin\n\nIn your project level `build.gradle` file, include:\n\n```\nbuildscript {\n    ext.kotlin_version = '1.6.21'\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n```\n\nIn new projects, the `settings.gradle` file has a `dependencyResolutionManagement` block, which needs to specify the repository as well:\n\n```\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }  // <--\n        jcenter() // Warning: this repository is going to shut down soon\n    }\n}\n```\n\nIn your app `build.gradle` file, include:\n\n```\nimplementation 'com.github.lisawray.groupie:groupie:$groupie_version'\n```\n\n## View binding\n\nAdd to your app module's `build.gradle`:\n\n```gradle\nandroid {\n    buildFeatures {\n        viewBinding true\n    }\n}\n\ndependencies {\n    implementation \"com.github.lisawray.groupie:groupie:$groupie_version\"\n    implementation \"com.github.lisawray.groupie:groupie-viewbinding:$groupie_version\"\n}\n```\n\nThen:\n\n```kotlin\nclass MyLayoutItem: BindableItem<MyLayoutBinding>() {\n    override fun initializeViewBinding(view: View): MyLayoutBinding {\n        return MyLayoutBinding.bind(view)\n    }\n\n    // Other implementations...\n}\n```\n\n### Note:\n\nIf you use `groupie-databinding` with data binding classes and your layouts have some variables or [observable objects](https://developer.android.com/topic/libraries/data-binding/observability), don't forget to run [`executePendingBindings`](https://developer.android.com/topic/libraries/data-binding/generated-binding#immediate_binding) at the last point in `bind`.\n\n## Data binding\n\nAdd to your app module's build.gradle:\n\n```gradle\nandroid {\n    buildFeatures {\n        dataBinding true\n    }\n}\n\ndependencies {\n    implementation \"com.github.lisawray.groupie:groupie:$groupie_version\"\n    implementation \"com.github.lisawray.groupie:groupie-databinding:$groupie_version\"\n}\n```\n\nThen, just wrap each item layout in `<layout>` tags.  (The `<data>` section is optional.)  \n\n`layout/item_song.xml`\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\" \n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <data>\n        <variable name=\"song\" type=\"com.example.Song\" />\n    </data>\n\n    <FrameLayout \n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" >\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:text=\"@{song.title}\"\n            tools:text=\"A Song Title\" />\n\n    </FrameLayout>\n</layout>\n```\n\nBindings are only generated for layouts wrapped with <layout/> tags, so there's no need to convert the rest of your project (unless you want to).\n\nYou can add a `<data>` section to directly bind a model or ViewModel, but you don't have to.  The generated view bindings alone are a huge time saver.\n\n### Kotlin AND data binding / view binding?\nSure, why not?  Follow all the instructions from *both* sections above.\nYou only need to include the `groupie-databinding` or `groupie-viewbinding` dependency.\n\n# Contributing\nContributions you say?  Yes please!\n\n### Bug report? \n- If at all possible, please attach a *minimal* sample project or code which reproduces the bug. \n- Screenshots are also a huge help if the problem is visual.\n### Send a pull request!\n- If you're fixing a bug, please add a failing test or code that can reproduce the issue.\n\n\nIf you try it out, I'd love to know what you think. Please hit up Lisa at [first][last]@gmail.com or on Twitter at [@lisawrayz](https://twitter.com/lisawrayz).\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.9482421875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\ndef lintReportsDir = file(\"${rootProject.buildDir}/lint-reports\")\ndef testReportsDir = \"${rootProject.buildDir}/test-reports\"\ndef testResultsDir = \"${rootProject.buildDir}/test-results\"\n\nbuildscript {\n    ext.kotlin_version = '1.6.21'\n    ext.android_plugin_version = '7.0.4'\n    ext.sdkVersion = 31\n    ext.minimumSdkVersion = 14\n    ext.databinding_version = '7.1.3'\n    ext.viewbinding_version = '7.1.3'\n\n    ext.junit_version = '4.13.2'\n    ext.mockito_version = '3.3.3'\n\n    repositories {\n        google()\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:$android_plugin_version\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18\"\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects { project ->\n    repositories {\n        google()\n        mavenCentral()\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n\n    afterEvaluate {\n        if (project.hasProperty('android')) {\n            android {\n                // use a custom location for the Lint reports so that it's easy to archive them in Circle CI\n                lintOptions {\n                    htmlOutput file(\"$lintReportsDir/${project.name}/lint-report.html\")\n                }\n                // it would be nice to do the same with test results/reports\n                // but it doesn't work: https://issuetracker.google.com/issues/37132023\n                testOptions {\n                    reportDir \"$testReportsDir/${project.name}\"\n                    resultsDir \"$testResultsDir/${project.name}\"\n                }\n            }\n        }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "example-databinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "example-viewbinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.765625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\nandroid.enableJetifier=false\nandroid.useAndroidX=true\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.6982421875,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "jcenter",
          "type": "tree",
          "content": null
        },
        {
          "name": "library-databinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "library-viewbinding",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-bintray.gradle",
          "type": "blob",
          "size": 0.8203125,
          "content": "/**\n * Bintray release configuration\n * */\next {\n    bintrayRepo = 'maven'\n    bintrayName = POM_BINTRAY_NAME\n\n    publishedGroupId = 'com.xwray'\n    libraryName = 'Groupie'\n    artifact = POM_ARTIFACT_ID\n    packagingType = POM_PACKAGING\n\n    libraryDescription = POM_DESCRIPTION\n\n    siteUrl = 'https://github.com/lisawray/groupie'\n    gitUrl = 'https://github.com/lisawray/groupie.git'\n\n    libraryVersion = POM_VERSION\n\n    developerId = 'lisawray'\n    developerName = 'Lisa Wray'\n    developerEmail = 'lisawray@gmail.com'\n\n    licenseName = 'MIT'\n    licenseUrl = 'https://github.com/lisawray/groupie/blob/master/LICENSE.md'\n    allLicenses = [\"MIT\"]\n}\n\n// Set up the Android Maven publication.\napply from: rootProject.file('jcenter/maven-install.gradle')\n\n// Publish on Bintray.\napply from: rootProject.file('jcenter/bintray.gradle')\n"
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.146484375,
          "content": "include(\n  \":example-shared\",\n  \":example-viewbinding\",\n  \":library\",\n  \":library-databinding\",\n  \":library-viewbinding\",\n  \":example-databinding\",\n)\n"
        }
      ]
    }
  ]
}