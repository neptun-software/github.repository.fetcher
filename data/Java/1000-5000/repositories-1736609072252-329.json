{
  "metadata": {
    "timestamp": 1736609072252,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "johncarl81/parceler",
      "stars": 3553,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.109375,
          "content": ".idea\n_site\n*~\n*.iml\ndependency-reduced-pom.xml\nbuild.sh\ntarget\ntmp\nout\n.gradle\nbuild\n.DS_Store\nlocal.properties"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1142578125,
          "content": "language: android\nsudo: false\n\njdk:\n  - oraclejdk8\n\nandroid:\n  components:\n    - build-tools-23.0.1\n    - android-23\n"
        },
        {
          "name": "CHANGELOG.adoc",
          "type": "blob",
          "size": 7.9853515625,
          "content": "= Parceler Changelog\n\n== Upcoming Release\n\n== Release 1.1.13 (2020-02-06)\n\nBuf Fixes::\n  * Fixes memory leak with Transfuse bootstrap injector repository.\n\n== Release 1.1.12 (2018-11-30)\n\nBug Fixes::\n  * Fixes a `StringOutOfBoundsException` when handling method names \"set\", \"get\", and \"is\" without a specific property name. \n\n== Release 1.1.11 (2018-06-28)\n\nEnhancements::\n  * Added gradle specific incremental annotation processing.\n\nBug Fixes::\n  * Fixes issue with Parcels utility class classloader reference.\n\n== Release 1.1.10 (2018-12-30)\n\nBug Fixes::\n  * Fixes issue accessing collections with generics in separate packages via package helpers.\n\n== Release 1.1.9 (2017-06-27)\n\nEnhancements::\n  * Added support for `MutableLiveData`.\n  \nBug Fixes::\n  * Fixed issue unrolling generic collections.\n\n== Release 1.1.8 (2017-05-08)\n\nBug Fixes::\n  * Fixes issue with MapUtil.initialHashMapCapacity accessibility\n\n== Release 1.1.7 (2017-05-07)\n\nEhancements::\n  * Support for Kotlin transient.\n  * Better generic support. \n\n== Release 1.1.6 (2016-10-22)\n\nEnhancements::\n  * Added supported options to annotation processor.\n  * Changed Parcelable implementations use CREATOR directly.\n  * Added describeContents option on `@Parcel` to set generated return value to `describeContents()` method.\n  * Changed CREATOR to anonymous inner class.\n  * Added ObservableField serialization support.\n\nBug Fixes::\n  * Fixes issue reading identical objects within the same bean.\n  * Fixes issue associating read and write property types, now they must be identical.\n\n== Release 1.1.5 (2016-05-25)\n\nBug Fixes::\n  * Fixes issue with using non-local target classes' classloader.\n  * Fixes issue with checking Parcelable inheritance.\n\n== Release 1.1.4 (2016-05-16)\n\nBug Fixes::\n  * Re-implemented implementation parameter.\n  * Fixed identity handling in object graphs by using list instead of map.\n\n== Release 1.1.3 (2016-05-14)\n\nBug Fixes::\n  * Fixed identity handling by using IdentityCollection.\n\nDepreciations::\n  * Removed METHOD serialization strategy.\n  * Removed `parcelsIndex` configuration option on `Parcel` annotation.\n\n== Release 1.1.2 (2016-04-30)\n\nBug Fixes::\n  * Fixed issue generating Parcelable classes from the output of other annotation processors.\n\n== Release 1.1.1 (2016-04-11)\n\nBug Fixes::\n  * Fixed issue handling null associated Parcels.\n  * Fixed classloader used with related classes.\n\n== Release 1.1.0 (2016-04-04)\n\nEnhancements::\n  * Added `@OnWrap` and `@OnUnwrap` callbacks.\n  * Added initial size to relevant collections.\n  * Added instance identity collection during marshalling to avoid instance loops.\n  * Significantly reduced the number of methods generated.\n\nDeprecations::\n  * Removed `NullParcelable` shim from `Parcels` utility class for `null` inputs.\n\nBug Fixes::\n  * Fixed Enum array parceling, previously serialzied as a enum instead of an array.\n\n== Release 1.0.4 (2015-10-27)\n\nEnhancements::\n  * Add validation for factory method parameters.\n  * Changed `@Parcel` `converter` property to `TypeRangeParcelConverter`.\n  * Made Creator inner class public to accommodate testing.\n  * Added validation error to non-static inner classes.\n\n== Release 1.0.3 (2015-07-25)\n\nBug Fixes::\n  * Fixed seralization of null enums.\n\n== Release 1.0.2 (2015-07-20)\n\nEnhancements::\n  * Enabled recognition of `@ParcelPropertyConverter` annotation on getters in addition to setters.\n  * Added enum support.\n  * Added VALUE seralization type.\n\n== Release 1.0.1 (2015-06-11)\n\nBug Fixes::\n  * Fixes issue of reading and caching analysis results when dealing with sub-parcels.\n\n\n== Release 1.0.0 (2015-05-11)\n\nEnhancements::\n  * Added debug logging via `--parcelerDebugLogging` APT option.\n  * Introduced `TypeRangeParcelConverter` for better collection support and other type range solutions for Converters.\n\nBug Fixes::\n  * Added stacktrace printing compiler argument to avoid throwing exceptions when an error occurs.\n\n== Release 0.2.16 (2015-03-17)\n\nEnhancements::\n  * Added addtional factory method validation.\n  * Consolidated ParcelClass configuration with Parcel annotation.\n\nDeprecations::\n  * Depreciated `METHOD` serialziation type for `BEAN`.\n\n== Release 0.2.15 (2014-12-02)\n\nBug Fixes::\n  * Exclude static members from analysis.\n\n== Release 0.2.14 (2014-11-09)\n\nEnhancements::\n  * Added additional collection support.\n  * Added generic collection matching to support better validation.\n  * Added flags parameter to sub-parcel write methods.\n  * Added parcelsIndex to avoid indexing and potentially writing the index (in library cases where it would duplicate the index class).\n\n== Release 0.2.13 (2014-09-24)\n\nEnhancements::\n  * Added functionality to `Parcels` to wrap under a specific type, using the associated factory mapping.\n\n== Release 0.2.12 (2014-08-26)\n\nBug Fixes::\n  * Fixed problem with circular Parcel graph references.\n\n== Release 0.2.11 (2014-08-22)\n\nEnhancements::\n  * Added validation for method seralization case where no read property exists for a constructor parameter.\n  * Replaced jar-with-dependencies assembly plugin with shade plugin to wrap all dependencies into an uber-jar (no more transitive dependency issues!).\n  * Added Boolean ReadWriteGenerator based on int rather than boolean[].\n  * Added performance benchmark application.\n\nBug Fixes::\n  * Fixed classloading issue when loading Bundles (needed to supply classloader).\n\n== Release 0.2.10 (2014-06-02)\n\nBug Fixes::\n  * Converted Android related dependency ASTTypes to ASTStringTypes.  This effectively avoids referencing Android classes directly during annotation processing.\n\n== Release 0.2.9 (2014-04-30)\n\nEnhancements::\n  * Enforced constructor and factory ordering through intermediate variables.\n\n== Release 0.2.8 (2014-04-28)\n\nEnhancements::\n  * Added `@ParcelFactory` implementation.\n  * Added Boolean and Character nullable support.\n  * Added boxed-type null handling.\n\nBug Fixes::\n  * Fixed repository seeding order (before analysis).\n  * Fixed constructor to property in superclass associations and validations.\n\n== Release 0.2.7 (2014-02-26)\n\nEnhancements::\n  * Added `transient` keyword modifier handling.\n  * Added Non-Parcel types and Null Parcelable.\n  * Added package-private and protected specific invocation strategy.\n  * Added class hierarchy scanning for inheritance handling.\n  * Added Collection support to `Parcels` utility class.\n\nBug Fixes::\n  * Fixeed issue around classloading and static CREATOR.\n\n== Release 0.2.6 (2014-02-07)\n\nEnhancements::\n  * Added generic SparseArray marshalling.\n  * Added converter to ParcelProperty annotation.\n  * Introduced `@ParcelPropertyConverter`.\n\nDeprecations::\n  * Removed `@ParcelProperty` `converter` property.\n\nBug Fixes::\n  * Reverted to single thread model to avoid concurrency issues during annotation processing.\n  * Fixed issue with private get/set invocation and added related tests.\n\n== Release 0.2.5 (2014-01-12)\n\nEnhancements::\n  * Reworked map key/value read calls to better handle nested collections.\n\nBug Fixes::\n  * Fixed looping variables and added null safe behavior.\n\n== Release 0.2.4 (2014-01-11)\n\nEnhancements::\n  * Reconfigured List handling to use generators to handle generic elements.\n\n== Release 0.2.3 (2013-12-25)\n\nBug Fixes::\n  * Fixed bug in looking up `@Parcel` annotation (2013-12-25 21:53:56 -0700)\n\n== Release 0.2.2 (2013-12-24)\n\nEnhancements::\n  * Added Parcelable marhalling.\n  * Added support for List and Maps.\n\nBug Fixes::\n  * Moved Android class references to Strings to avoid Android dependencies during compile time.\n\n== Release 0.2.1 (2013-10-18)\n\nEnhancements::\n  * Added `@Parcel` `converter` property to avoid ambiguity in api.\n  * Added Parcels.unwrap().\n\nBug Fixes::\n  * Fixed an issue with `@Parcel` `converter` property fetching.\n\n== Release 0.2.0 (2013-07-24)\n\nEnhancements::\n  * Added ParcelClasses for multiple ParcelClass definitions (along with converters).\n  * Added external configuration of parcels via the ParcelClass annotation.\n\n== Release 0.1.1 (2013-07-14)\n\nEnhancements::\n  * Minor build updates\n\n== Release 0.1.0 (2013-07-13)\n\nEnhancements::\n  * Added Parcel annotation and supporting classes.\n  * Migrated Parcel Annotation Processor from Transfuse.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.5556640625,
          "content": "Copyright ${startYear}-${currentYear} ${name}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.asciidoc",
          "type": "blob",
          "size": 16.783203125,
          "content": "= Parceler\n\nimage:https://badges.gitter.im/johncarl81/parceler.svg[link=\"https://gitter.im/johncarl81/parceler?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"]\nimage:https://travis-ci.org/johncarl81/parceler.png?branch=master[\"Build Status\", link=\"https://travis-ci.org/johncarl81/parceler\"]\nimage:https://maven-badges.herokuapp.com/maven-central/org.parceler/parceler-api/badge.svg[\"Maven Central\", link=\"https://maven-badges.herokuapp.com/maven-central/org.parceler/parceler-api\"]\n\nHave a question?  http://stackoverflow.com/questions/ask?tags=parceler[Ask it on StackOverflow.]\n\nFound an issue?  https://github.com/johncarl81/parceler/issues/new[Please report it.]\n\nIn Android, http://developer.android.com/reference/android/os/Parcelable.html[Parcelables] are a great way to serialize Java Objects between Contexts.\nhttp://www.developerphil.com/parcelable-vs-serializable/[Compared] with traditional Serialization, Parcelables take on the order of 10x less time to both serialize and deserialize.\nThere is a major flaw with Parcelables, however.\nParcelables contain a ton of boilerplate code.\nTo implement a Parcelable, you must mirror the `writeToParcel()` and `createFromParcel()` methods such that they read and write to the Parcel in the same order.\nAlso, a Parcelable must define a `public static final Parcelable.Creator CREATOR` in order for the Android infrastructure to be able to leverage the serialization code.\n\nParceler is a code generation library that generates the Android Parcelable boilerplate source code.\nNo longer do you have to implement the Parcelable interface, the `writeToParcel()` or `createFromParcel()` or the `public static final CREATOR`.\nYou simply annotate a POJO with `@Parcel` and Parceler does the rest.\nBecause Parceler uses the Java JSR-269 Annotation Processor, there is no need to run a tool manually to generate the Parcelable code.\nJust annotate your Java Bean, compile and you are finished.\nBy default, Parceler will serialize the fields of your instance directly:\n\n[source,java]\n----\n@Parcel\npublic class Example {\n    String name;\n    int age;\n\n    public Example() {}\n\n    public Example(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    public String getName() { return name; }\n\n    public int getAge() { return age; }\n}\n----\n\nBe careful not to use private fields when using the default field serialization strategy as it will incur a performance penalty due to reflection.\n\nTo use the generated code, you may reference the generated class directly, or via the `Parcels` utility class:\n\n[source,java]\n----\nParcelable wrapped = Parcels.wrap(new Example(\"Andy\", 42));\n----\n\nTo dereference the `@Parcel`, just call the `Parcels.unwrap()` method:\n\n[source,java]\n----\nExample example = Parcels.unwrap(wrapped);\nexample.getName(); // Andy\nexample.getAge(); // 42\n----\n\nOf course, the wrapped `Parcelable` can be added to an Android Bundle to transfer from Activity to Activity:\n\n[source,java]\n----\nBundle bundle = new Bundle();\nbundle.putParcelable(\"example\", Parcels.wrap(example));\n----\n\nAnd dereferenced in the `onCreate()` method:\n\n[source,java]\n----\nExample example = Parcels.unwrap(getIntent().getParcelableExtra(\"example\"));\n----\n\nThis wrapping and unwrapping technique plays well with the Intent Factory pattern.\nIn addition, Parceler is supported by the following libraries:\n\n * http://androidtransfuse.org/documentation.html#parcel[Transfuse] - Allows `@Parcel` annotated beans to be used with the `@Extra` injection.\n * https://github.com/sockeqwe/fragmentargs#argsbundler[FragmentArgs] - Uses the `ParcelerArgsBundler` adapter to wrap and unwrap `@Parcel` annotated beans with fragment parameters.\n * https://github.com/f2prateek/dart[Dart] - Autodetects `@Parcel` annotated beans and automatically unwraps them when using `@InjectExtra`.\n * http://androidannotations.org/[AndroidAnnotations] - Autodetects `@Parcel` annotated beans and https://github.com/excilys/androidannotations/wiki/ParcelerIntegration[automatically wraps/unwraps] them when using `@Extra`, `@FragmentArg`, `@InstanceState` and other `Bundle` related annotations.\n * https://github.com/MarcinMoskala/ActivityStarter/wiki/Parceler-Arg-Converter-usage[ActivityStarter] - Supports natively Parceler objects as arguments to Activities, Fragments, Services, etc.\n * https://josesamuel.com/remoter/[Remoter] - Supports natively Parceler objects as arguments in @Remoter interfaces. \n\n=== Parcel attribute types\nOnly a select number of types may be used as attributes of a `@Parcel` class.\nThe following list includes the mapped types:\n\n * `byte`\n * `double`\n * `float`\n * `int`\n * `long`\n * `char`\n * `boolean`\n * `String`\n * `IBinder`\n * `Bundle`\n * `SparseArray` of any of the mapped types*\n * `SparseBooleanArray`\n * `ObservableField`\n * `List`, `ArrayList` and `LinkedList` of any of the mapped types*\n * `Map`, `HashMap`, `LinkedHashMap`, `SortedMap`, and `TreeMap` of any of the mapped types*\n * `Set`, `HashSet`, `SortedSet`, `TreeSet`, `LinkedHashSet` of any of the mapped types*\n * `Parcelable`\n * `Serializable`\n * Array of any of the mapped types\n * Any other class annotated with `@Parcel`\n\n*Parcel will error if the generic parameter is not mapped.\n\nParceler also supports any of the above types directly.\nThis is especially useful when dealing with collections of classes annotated with `@Parcel`:\n\n[source,java]\n----\nParcelable listParcelable = Parcels.wrap(new ArrayList<Example>());\nParcelable mapParcelable = Parcels.wrap(new HashMap<String, Example>());\n----\n\n==== Polymorphism\nNote that Parceler does not unwrap inheritance hierarchies, so any polymorphic fields will be unwrapped as instances of the base class.\nThis is because Parceler opts for performance rather than checking `.getClass()` for every piece of data.\n\n[source,java]\n----\n@Parcel\npublic class Example {\n    public Parent p;\n    @ParcelConstructor Example(Parent p) { this.p = p; }\n}\n\n@Parcel public class Parent {}\n@Parcel public class Child extends Parent {}\n----\n\n[source,java]\n----\nExample example = new Example(new Child());\nSystem.out.println(\"%b\", example.p instanceof Child); // true\nexample = Parcels.unwrap(Parcels.wrap(example));\nSystem.out.println(\"%b\", example.p instanceof Child); // false\n----\n\nRefer to the <<custom-serialization,Custom Serialization>> section for an example of working with polymorphic fields.\n\n=== Serialization techniques\n\nParceler offers several choices for how to serialize and deserialize an object in addition to the field-based serialization seen above.\n\n==== Getter/setter serialization\nParceler may be configured to serialize using getter and setter methods and a non-empty constructor.\nIn addition, fields, methods and constructor parameters may be associated using the `@ParcelProperty` annotation.\nThis supports a number of bean strategies including immutability and traditional getter/setter beans.\n\nTo configure default method serialization, simply configure the `@Parcel` annotation with `Serialization.BEAN`:\n\n[source,java]\n----\n@Parcel(Serialization.BEAN)\npublic class Example {\n    private String name;\n    private int age;\n    private boolean enabled;\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public int getAge() { return age; }\n    public void setAge(int age) { this.age = age; }\n    \n    public boolean isEnabled() { return enabled; }\n    public void setEnabled(boolean enabled) { this.enabled = enabled; }\n}\n----\n\nTo use a constructor with serialization, annotate the desired constructor with the `@ParcelConstructor` annotation:\n\n[source,java]\n----\n@Parcel(Serialization.BEAN)\npublic class Example {\n    private final String name;\n    private final int age;\n    private boolean enabled;\n\n    @ParcelConstructor\n    public Example(int age, String name, boolean enabled) {\n        this.age = age;\n        this.name = name;\n        this.enabled = enabled;\n    }\n\n    public String getName() { return name; }\n\n    public int getAge() { return age; }\n    \n    public boolean isEnabled() { return enabled; }\n}\n----\n\nIf an empty constructor is present, Parceler will use that constructor unless another constructor is annotated.\n\n==== Mixing getters/setters and fields\nYou may also mix and match serialization techniques using the `@ParcelProperty` annotation.\nIn the following example, `firstName` and `lastName` are written to the bean using the constructor while `firstName` is read from the bean using the field and `lastName` is read using the `getLastName()` method.\nThe parameters `firstName` and `lastName` are coordinated by the parameter names `\"first\"` and `\"last\"` respectfully.\n\n[source,java]\n----\n@Parcel\npublic class Example {\n    @ParcelProperty(\"first\")\n    String firstName;\n    String lastName;\n\n    @ParcelConstructor\n    public Example(@ParcelProperty(\"first\") String firstName, @ParcelProperty(\"last\") String lastName){\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() { return firstName; }\n\n    @ParcelProperty(\"last\")\n    public String getLastName() { return lastName; }\n}\n----\n\nFor attributes that should not be serialized with Parceler, the attribute field, getter or setter may be annotated by `@Transient`.\n\nParceler supports many different styles centering around the POJO.\nThis allows `@Parcel` annotated classes to be used with other POJO based libraries, including the following:\n\n * https://code.google.com/p/google-gson/[GSON]\n * https://realm.io/docs/java/latest/#parceler[Realm]\n * https://bitbucket.org/littlerobots/cupboard[Cupboard]\n * http://simple.sourceforge.net/[Simple XML]\n * https://github.com/Raizlabs/DBFlow[DBFlow]\n\n==== Static Factory support\nAs an alternative to using a constructor directly, Parceler supports using an annotated Static Factory to build an instance of the given class.\nThis style supports Google's https://github.com/google/auto/tree/master/value[AutoValue] annotation processor / code generation library for generating immutable beans.\nParceler interfaces with AutoValue via the `@ParcelFactory` annotation, which maps a static factory method into the annotated `@Parcel` serialization:\n\n[source,java]\n----\n@AutoValue\n@Parcel\npublic abstract class AutoValueParcel {\n\n    @ParcelProperty(\"value\") public abstract String value();\n\n    @ParcelFactory\n    public static AutoValueParcel create(String value) {\n        return new AutoValue_AutoValueParcel(value);\n    }\n}\n----\n\nAutoValue generates a different class than the annotated `@Parcel`, therefore, you need to specify which class Parceler should build in the `Parcels` utility class:\n\n[source,java]\n----\nParcelable wrappedAutoValue = Parcels.wrap(AutoValueParcel.class, AutoValueParcel.create(\"example\"));\n----\nAnd to deserialize:\n[source,java]\n----\nAutoValueParcel autoValueParcel = Parcels.unwrap(wrappedAutoValue);\n----\n\n==== Custom serialization\n`@Parcel` includes an optional parameter to include a manual serializer `ParcelConverter` for the case where special serialization is necessary.\nThis provides a still cleaner option for using Parcelable classes than implementing them by hand.\n\nThe following code demonstrates using a `ParcelConverter` to unwrap the inheritance hierarchy during deserialization.\n\n[source,java]\n----\n@Parcel\npublic class Item {\n    @ParcelPropertyConverter(ItemListParcelConverter.class)\n    public List<Item> itemList;\n}\n@Parcel public class SubItem1 extends Item {}\n@Parcel public class SubItem2 extends Item {}\n\npublic class ItemListParcelConverter implements ParcelConverter<List<Item>> {\n    @Override\n    public void toParcel(List<Item> input, Parcel parcel) {\n        if (input == null) {\n            parcel.writeInt(-1);\n        }\n        else {\n            parcel.writeInt(input.size());\n            for (Item item : input) {\n                parcel.writeParcelable(Parcels.wrap(item), 0);\n            }\n        }\n    }\n\n    @Override\n    public List<Item> fromParcel(Parcel parcel) {\n        int size = parcel.readInt();\n        if (size < 0) return null;\n        List<Item> items = new ArrayList<Item>();\n        for (int i = 0; i < size; ++i) {\n            items.add((Item) Parcels.unwrap(parcel.readParcelable(Item.class.getClassLoader())));\n        }\n        return items;\n    }\n}\n----\n\nParceler is also packaged with a series of base classes to make Collection conversion easier located under the `org.parceler.converter` package of the api.\nThese base classes take care of a variety of difficult or verbose jobs dealing with Collections including null checks and collectin iteration.\nFor instance, the above `ParcelConverter` could be written using the `ArrayListParcelConverter':\n\n[source,java]\n----\npublic class ItemListParcelConverter extends ArrayListParcelConverter<Item> {\n    @Override\n    public void itemToParcel(Item item, Parcel parcel) {\n        parcel.writeParcelable(Parcels.wrap(item), 0);\n    }\n\n    @Override\n    public Item itemFromParcel(Parcel parcel) {\n        return Parcels.unwrap(parcel.readParcelable(Item.class.getClassLoader()));\n    }\n}\n----\n\n=== Classes without Java source\nFor classes whose corresponding Java source is not available, one may include the class as a Parcel by using the `@ParcelClass` annotation.\nThis annotation may be declared anywhere in the compiled source that is convenient.\nFor instance, one could include the `@ParcelClass` along with the Android Application:\n\n[source,java]\n----\n@ParcelClass(LibraryParcel.class)\npublic class AndroidApplication extends Application{\n    //...\n}\n----\n\nMultiple `@ParcelClass` annotations may be declared using the `@ParcelClasses` annotation.\n\nIn addition, classes referenced by `@ParcelClass` may be configured using the `@Parcel` annotation.\nThis allows the serialization configuration through any parameter available on the `@Parcel` annotation including the serialization technique or classes to analyze.\n\nOne useful technique is the ability to define global custom converters for a type:\n[source,java]\n----\n@ParcelClass(\n    value = LibraryParcel.class,\n    annotation = @Parcel(converter = LibraryParcelConverter.class))\nclass SomeClass{}\n----\nThis allows for fine grained control over a class that isn't available for direct modification.\n\n=== Advanced configuration\n\n==== Skipping analysis\nIt is a common practice for some libraries to require a bean to extend a base class.\nAlthough it is not the most optimal case, Parceler supports this practice by allowing the configuration of what classes in the inheritance hierarchy to analyze via the analyze parameter:\n\n[source, java]\n----\n@Parcel(analyze = {One.class, Three.class})\nclass One extends Two {}\nclass Two extends Three {}\nclass Three extends BaseClass {}\n----\n\nIn this example, only fields of the `One` and `Three` classes will be serialized, avoiding both the `BaseClass` and `Two` class parameters.\n\n==== Specific wrapping\n\nThe Parcels utility class looks up the given class for wrapping by class.\nFor performance reasons this ignores inheritance, both super and base classes.\nThere are two solutions to this problem.\nFirst, one may specify additional types to associate to the given type via the `implementations` parameter:\n\n[source, java]\n----\nclass ExampleProxy extends Example {}\n@Parcel(implementations = {ExampleProxy.class})\nclass Example {}\n\nExampleProxy proxy = new ExampleProxy();\nParcels.wrap(proxy);  // ExampleProxy will be serialized as a Example\n----\n\nSecond, one may also specify the class type when using the `Parcels.wrap()` method:\n\n[source, java]\n----\nExampleProxy proxy = new ExampleProxy();\nParcels.wrap(Example.class, proxy);\n----\n\n==== Configuring Proguard\n\nTo configure Proguard, add the following lines to your proguard configuration file.  These will keep files related to the `Parcels` utilty class and the `Parcelable` `CREATOR` instance:\ner\n----\n# Parceler library\n-keep interface org.parceler.Parcel\n-keep @org.parceler.Parcel class * { *; }\n-keep class **$$Parcelable { *; }\n----\n\n== Getting Parceler\n\nYou may download Parceler as a Maven dependency:\n\n[source,xml]\n----\n<dependency>\n    <groupId>org.parceler</groupId>\n    <artifactId>parceler</artifactId>\n    <version>1.1.12</version>\n    <scope>provided</scope>\n</dependency>\n<dependency>\n    <groupId>org.parceler</groupId>\n    <artifactId>parceler-api</artifactId>\n    <version>1.1.12</version>\n</dependency>\n----\n\nor Gradle:\n[source,groovy]\n----\nimplementation 'org.parceler:parceler-api:1.1.12'\nannotationProcessor 'org.parceler:parceler:1.1.12'\n----\n\nOr from http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.parceler%22[Maven Central].\n\n== License\n----\nCopyright 2011-2015 John Ericksen\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n----\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "parceler-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "parceler",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.5751953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.parceler</groupId>\n    <artifactId>parceler-project</artifactId>\n    <version>1.1.14-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <name>Parceler Project</name>\n\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>7</version>\n    </parent>\n\n    <url>http://parceler.org</url>\n    <description>An automatic Android Parcelable generator.</description>\n\n    <licenses>\n        <license>\n            <name>Apache 2.0</name>\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n\n    <scm>\n        <url>http://github.com/johncarl81/parceler</url>\n        <connection>scm:git:git@github.com:johncarl81/parceler.git</connection>\n        <developerConnection>scm:git:git@github.com:johncarl81/parceler.git</developerConnection>\n    </scm>\n\n    <developers>\n        <developer>\n            <id>johncarl81</id>\n            <name>John Ericksen</name>\n            <email>johncarl81@gmail.com</email>\n        </developer>\n    </developers>\n\n    <modules>\n        <module>parceler-api</module>\n        <module>parceler</module>\n        <!--<module>examples</module>-->\n    </modules>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.mycila.maven-license-plugin</groupId>\n                <artifactId>maven-license-plugin</artifactId>\n                <version>1.9.0</version>\n                <configuration>\n                    <header>NOTICE</header>\n                    <includes>\n                        <include>**/*.java</include>\n                        <include>**/*.xml</include>\n                    </includes>\n                    <excludes>\n                        <exclude>**/.*/**</exclude>\n                        <exclude>target/**</exclude>\n                        <exclude>**/AndroidManifest.xml</exclude>\n                    </excludes>\n                    <properties>\n                        <startYear>2011</startYear>\n                        <currentYear>2015</currentYear>\n                        <name>John Ericksen</name>\n                    </properties>\n                    <useDefaultExcludes>true</useDefaultExcludes>\n                    <strictCheck>true</strictCheck>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n"
        }
      ]
    }
  ]
}