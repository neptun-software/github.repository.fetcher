{
  "metadata": {
    "timestamp": 1736708178565,
    "page": 645,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/dockerfile-maven",
      "stars": 2755,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0703125,
          "content": ".*\n!.git*\n!.travis.yml\ntarget/\npom.xml.releaseBackup\nrelease.properties\n"
        },
        {
          "name": ".grenrc.yml",
          "type": "blob",
          "size": 0.15234375,
          "content": "---\n  dataSource: \"prs\"\n  prefix: \"\"\n  ignoreLabels: []\n  ignoreIssuesWith: []\n  onlyMilestones: false\n  groupBy: false\n  changelogFilename: \"CHANGELOG.md\"\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.44140625,
          "content": "language: java\n\njdk:\n  - openjdk11\n  - openjdk10\n  - openjdk9\n  - openjdk8\n\nsudo: required\n\nservices:\n  - docker\n\ninstall: true # This runs the \"true\" command in the install phase; thus skipping install\nscript:\n  - |\n    if [[ \"$TRAVIS_BRANCH\" == master && \"$TRAVIS_PULL_REQUEST\" == false && \"$TRAVIS_JDK_VERSION\" == \"openjdk8\" ]]\n    then mvn deploy -s travis-settings.xml\n    else mvn verify\n    fi\n\ncache:\n  directories:\n    - $HOME/.m2/repository/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.078125,
          "content": "# Changelog\n\n## v1.4.13 (October 15 2019)\n- [**closed**] #308 Extend repository validation by allowing port number. [#309](https://github.com/spotify/dockerfile-maven/pull/309)\n- [**closed**] doc [#318](https://github.com/spotify/dockerfile-maven/pull/318)\n\n## v1.4.12 (July 29 2019)\n- [**closed**] Upgrade docker-client dep from 8.14.5 to 8.16.0 [#307](https://github.com/spotify/dockerfile-maven/pull/307)\n\n## v1.4.11 (July 29 2019)\n- [**closed**] Validation of docker repository names [#275](https://github.com/spotify/dockerfile-maven/pull/275)\n- [**closed**] Update docker-client version to 8.14.5 [#280](https://github.com/spotify/dockerfile-maven/pull/280)\n\n## 1.4.10 (released January 15 2019)\n- Add support for --squash experimental build option ([248][])\n- Add support for specifying a custom Dockerfile location ([89][])\n\n[248]: https://github.com/spotify/dockerfile-maven/pull/248\n[89]: https://github.com/spotify/dockerfile-maven/pull/89\n\n## 1.4.9 (released October 25 2018)\n- Upgrade docker-client dep from 8.14.2 to 8.14.3 to fix spotify/docker-client#1100\n\n## 1.4.8 (released October 23 2018)\n- Upgrade docker-client dep from 8.14.0 to 8.14.2\n- Upgrade com.sparkjava:spark-core to fix CVE-2018-9159\n- Improve documentation on referencing build artifacts\n\n## 1.4.7 (released October 8 2018)\n- Fix an ExceptionInInitializerError when plugin is used on Java 11 ([230][])\n- change source/target version for compiler from 1.7 to 1.8. This means that\n  the plugin will only run on Java 8 and above. ([231])\n\n[230]: https://github.com/spotify/dockerfile-maven/pull/230\n[231]: https://github.com/spotify/dockerfile-maven/pull/231\n\n## 1.4.6 (released October 5 2018)\n\n- Support for Java 9 and 10\n\n## 1.3.6 (released September 13 2017)\n\n- Add support for using maven settings.xml file to provide docker authorization ([65][])\n\n[65]: https://github.com/spotify/dockerfile-maven/pull/65\n\n## 1.3.3 (released July 11 2017)\n\n- Add support for supplying build-args (`ARG` in Dockerfile) in pom.xml with\n  `<buildArgs>` [41][]\n\n- Allow disabling of Google Container Registry credential checks with\n  `-Ddockerfile.googleContainerRegistryEnabled` or\n  `<googleContainerRegistryEnabled>false</googleContainerRegistryEnabled>`([43][])\n\n\n[41]: https://github.com/spotify/dockerfile-maven/pull/41\n[43]: https://github.com/spotify/dockerfile-maven/pull/43\n\n\n## 1.3.2 (released July 10 2017)\n\n- Upgrade to docker-client 8.8.0 ([38][])\n\n- Improved fix for NullPointerException in LoggingProgressHandler ([36][])\n\n[36]: https://github.com/spotify/dockerfile-maven/pull/36\n[38]: https://github.com/spotify/dockerfile-maven/pull/38\n\n\n## 1.3.1 (released June 30 2017)\n\n- Fix NullPointerException in LoggingProgressHandler ([30][])\n\n[30]: https://github.com/spotify/dockerfile-maven/pull/30\n\n\n## 1.3.0 (released June 5 2017)\n\n- Support for authentication to Google Container Registry ([13][], [17][])\n\n[13]: https://github.com/spotify/dockerfile-maven/pull/13\n[17]: https://github.com/spotify/dockerfile-maven/pull/17\n\n## Earlier releases\n\nPlease check the [list of commits on Github][commits].\n\n[commits]: https://github.com/spotify/dockerfile-maven/commits/master\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.734375,
          "content": "# Dockerfile Maven\n\n[![Build Status](https://travis-ci.com/spotify/dockerfile-maven.svg?branch=master)](https://travis-ci.com/spotify/dockerfile-maven)\n[![Maven Central](https://img.shields.io/maven-central/v/com.spotify/dockerfile-maven.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.spotify%22%20dockerfile-maven)\n[![License](https://img.shields.io/github/license/spotify/dockerfile-maven.svg)](LICENSE)\n\n## Status: mature\n\n**At this point, we're not developing or accepting new features or even fixing non-critical bugs.**\n\nThis Maven plugin integrates Maven with Docker.\n\nThe design goals are:\n\n  - Don't do anything fancy.  `Dockerfile`s are how you build\n    Docker projects; that's what this plugin uses.  They are\n    mandatory.\n  - Make the Docker build process integrate with the Maven build\n    process.  If you bind the default phases, when you type `mvn\n    package`, you get a Docker image.  When you type `mvn deploy`,\n    your image gets pushed.\n  - Make the goals remember what you are doing.  You can type `mvn\n    dockerfile:build` and later `mvn dockerfile:tag` and later `mvn\n    dockerfile:push` without problems.  This also eliminates the need\n    for something like `mvn dockerfile:build -DalsoPush`; instead you\n    can just say `mvn dockerfile:build dockerfile:push`.\n  - Integrate with the Maven build reactor.  You can depend on the\n    Docker image of one project in another project, and Maven will\n    build the projects in the correct order.  This is useful when you\n    want to run integration tests involving multiple services.\n\nThis project adheres to the [Open Code of Conduct][code-of-conduct].\nBy participating, you are expected to honor this code.\n\nSee the [changelog for a list of releases][changelog]\n\n[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md\n[changelog]: CHANGELOG.md\n\n## Set-up\n\nThis plugin requires Java 7 or later and Apache Maven 3 or later (dockerfile-maven-plugin <=1.4.6 needs\nMaven >= 3, and for other cases, Maven >= 3.5.2). To run the integration tests or to use the plugin in practice, a working\nDocker set-up is needed.\n\n## Example\n\nFor more examples, see the [integration test](./plugin/src/it) directory.\n\nIn particular, the [advanced](./plugin/src/it/advanced) test showcases a\nfull service consisting of two micro-services that are integration\ntested using `helios-testing`.\n\nThis configures the actual plugin to build your image with `mvn\npackage` and push it with `mvn deploy`.  Of course you can also say\n`mvn dockerfile:build` explicitly.\n\n```xml\n<plugin>\n  <groupId>com.spotify</groupId>\n  <artifactId>dockerfile-maven-plugin</artifactId>\n  <version>${dockerfile-maven-version}</version>\n  <executions>\n    <execution>\n      <id>default</id>\n      <goals>\n        <goal>build</goal>\n        <goal>push</goal>\n      </goals>\n    </execution>\n  </executions>\n  <configuration>\n    <repository>spotify/foobar</repository>\n    <tag>${project.version}</tag>\n    <buildArgs>\n      <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n    </buildArgs>\n  </configuration>\n</plugin>\n```\n\nA corresponding `Dockerfile` could look like:\n\n```\nFROM openjdk:8-jre\nMAINTAINER David Flemström <dflemstr@spotify.com>\n\nENTRYPOINT [\"/usr/bin/java\", \"-jar\", \"/usr/share/myservice/myservice.jar\"]\n\n# Add Maven dependencies (not shaded into the artifact; Docker-cached)\nADD target/lib           /usr/share/myservice/lib\n# Add the service itself\nARG JAR_FILE\nADD target/${JAR_FILE} /usr/share/myservice/myservice.jar\n```\n\n**Important note**\n\nThe most Maven-ish way to reference the build artifact would probably\nbe to use the `project.build.directory` variable for referencing the\n'target'-directory. However, this results in an absolute path, which\nis not supported by the ADD command in the Dockerfile. Any such source\nmust be inside the *context* of the Docker build and therefor must be\nreferenced by a *relative path*. See https://github.com/spotify/dockerfile-maven/issues/101\n\n*Do **not** use `${project.build.directory}` as a way to reference your\nbuild directory.*\n\n## What does it give me?\n\nThere are many advantages to using this plugin for your builds.\n\n### Faster build times\n\nThis plugin lets you leverage Docker cache more consistently, vastly\nspeeding up your builds by letting you cache Maven dependencies in\nyour image.  It also encourages avoiding the `maven-shade-plugin`,\nwhich also greatly speeds up builds.\n\n### Consistent build lifecycle\n\nYou no longer have to say something like:\n\n    mvn package\n    mvn dockerfile:build\n    mvn verify\n    mvn dockerfile:push\n    mvn deploy\n\nInstead, it is simply enough to say:\n\n    mvn deploy\n\nWith the basic configuration, this will make sure that the image is\nbuilt and pushed at the correct times.\n\n### Depend on Docker images of other services\n\nYou can depend on the Docker information of another project, because\nthis plugin attaches project metadata when it builds Docker images.\nSimply add this information to any project:\n\n```xml\n<dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>foobar</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <type>docker-info</type>\n</dependency>\n```\n\nNow, you can read information about the Docker image of the project\nthat you depended on:\n\n```java\nString imageName = getResource(\"META-INF/docker/com.spotify/foobar/image-name\");\n```\n\nThis is great for an integration test where you want the latest\nversion of another project's Docker image.\n\nNote that you have to register a Maven extension in your POM (or a\nparent POM) in order for the `docker-info` type to be supported:\n\n```xml\n<build>\n  <extensions>\n    <extension>\n      <groupId>com.spotify</groupId>\n      <artifactId>dockerfile-maven-extension</artifactId>\n      <version>${version}</version>\n    </extension>\n  </extensions>\n</build>\n```\n\n## Use other Docker tools that rely on Dockerfiles\n\nYour project(s) look like so:\n\n```\na/\n  Dockerfile\n  pom.xml\nb/\n  Dockerfile\n  pom.xml\n```\n\nYou can now use these projects with Fig or docker-compose or some\nother system that works with Dockerfiles.  For example, a\n`docker-compose.yml` might look like:\n\n```yaml\nservice-a:\n  build: a/\n  ports:\n  - '80'\n\nservice-b:\n  build: b/\n  links:\n  - service-a\n```\n\nNow, `docker-compose up` and `docker-compose build` will work as\nexpected.\n\n## Usage\n\nSee [usage docs](https://github.com/spotify/dockerfile-maven/blob/master/docs/usage.md).\n\n## Authentication\n\nSee [authentication docs](https://github.com/spotify/dockerfile-maven/blob/master/docs/authentication.md).\n\n## Releasing\n\nTo cut the Maven release:\n\n```\nmvn clean [-B -Dinvoker.skip -DskipTests -Darguments='-Dinvoker.skip -DskipTests'] \\\n  -Dgpg.keyname=<key ID used for signing artifacts> \\\n  release:clean release:prepare release:perform\n```\n\nWe use [`gren`](https://github.com/github-tools/github-release-notes#installation) to create Releases in Github:\n\n```\ngren release\n```"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 2.3134765625,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>com.spotify</groupId>\n    <artifactId>foss-root</artifactId>\n    <version>6</version>\n  </parent>\n\n  <artifactId>dockerfile-maven</artifactId>\n  <version>1.4.14-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>Dockerfile Maven Support</name>\n  <description>A set of Maven tools for dealing with Dockerfiles</description>\n  <url>https://github.com/spotify/dockerfile-maven</url>\n\n  <modules>\n    <module>extension</module>\n    <module>plugin</module>\n  </modules>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <scm>\n    <connection>scm:git:ssh://git@github.com/spotify/dockerfile-maven.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/spotify/dockerfile-maven.git</developerConnection>\n    <tag>HEAD</tag>\n    <url>https://github.com/spotify/dockerfile-maven</url>\n  </scm>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-checkstyle-plugin</artifactId>\n          <configuration>\n            <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>\n            <testSourceDirectory>${project.build.testSourceDirectory}</testSourceDirectory>\n            <includeTestSourceDirectory>true</includeTestSourceDirectory>\n            <violationSeverity>warning</violationSeverity>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <artifactId>maven-deploy-plugin</artifactId>\n        <version>2.8.2</version>\n        <configuration>\n          <updateReleaseInfo>true</updateReleaseInfo>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <developers>\n    <developer>\n      <id>dflemstr</id>\n      <email>dflemstr@spotify.com</email>\n      <name>David Flemström</name>\n    </developer>\n    <developer>\n      <id>davidxia</id>\n      <email>dxia@spotify.com</email>\n      <name>David Xia</name>\n    </developer>\n    <developer>\n      <id>mattnworb</id>\n      <email>mattbrown@spotify.com</email>\n      <name>Matt Brown</name>\n    </developer>\n  </developers>\n\n</project>\n"
        },
        {
          "name": "travis-settings.xml",
          "type": "blob",
          "size": 0.4248046875,
          "content": "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n  <servers>\n    <server>\n      <id>ossrh</id>\n      <username>${env.SONATYPE_USERNAME}</username>\n      <password>${env.SONATYPE_PASSWORD}</password>\n    </server>\n  </servers>\n</settings>\n"
        }
      ]
    }
  ]
}