{
  "metadata": {
    "timestamp": 1736708595768,
    "page": 897,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openzipkin/brave",
      "stars": 2366,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21875,
          "content": "#\n# Copyright The OpenZipkin Authors\n# SPDX-License-Identifier: Apache-2.0\n#\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "*.class\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.war\n*.ear\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# Maven\ntarget/\n\n# IntelliJ\n.idea/\n*.iml\n\n# macOS\n.DS_Store\n\n# Eclipse\n.classpath\n.project\n.settings/\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".settings.xml",
          "type": "blob",
          "size": 0.7880859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright The OpenZipkin Authors\n    SPDX-License-Identifier: Apache-2.0\n\n-->\n<settings xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n    xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                          http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <servers>\n    <server>\n      <id>gpg.passphrase</id>\n      <passphrase>${env.GPG_PASSPHRASE}</passphrase>\n    </server>\n    <server>\n      <id>ossrh</id>\n      <username>${env.SONATYPE_USER}</username>\n      <password>${env.SONATYPE_PASSWORD}</password>\n    </server>\n    <server>\n      <id>github.com</id>\n      <username>zipkinci</username>\n      <password>${env.GH_TOKEN}</password>\n    </server>\n  </servers>\n</settings>\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 3.2763671875,
          "content": "# Hacking Brave\nBrave is optimized for maintenance vs flexibility. It prefers small\nfeatures that have been asked for repeated times, that are insured with\ntests, and have clear use cases. This limits the lines of code and count\nof modules in Brave's repo.\n\nCode design is opinionated including below:\n\n* Classes and methods default to package, not public visibility.\n* Changing certain implementation classes may be unsupported.\n* 3rd-party dependencies, and gnarly apis like java.beans are avoided.\n\n## How to request change\nThe best way to approach something not yet supported is to ask on\n[gitter](https://gitter.im/openzipkin/zipkin).\nAsking for the feature you need (like how to trace a lambda)\nvs a specific implementation (like making a private type public) will\ngive you more options to accomplish your goal.\n\nAdvice usually comes in two parts: advice and workaround. Advice may be \nto change Brave's code, or to fork until the feature is more widely\nrequested.\n\n## How change works\nHigh quality pull requests that have clear scope and tests that reflect\nthe intent of the feature are often merged and released in days. If a\nmerged change isn't immediately released and it is of priority to you,\nnag (make a comment) on your merged pull request until it is released.\n\nIt is best to review rationale documents such as [brave/RATIONALE.md]\nprior to raising a pull request.\n\n## How to experiment\nChanges to Brave's code are best addressed by the feature requestor in a\npull request *after* discussing in an issue or on gitter. By discussing\nfirst, there's less chance of a mutually disappointing experience where\na pull request is rejected. Moreover, the feature may be already present!\n\nAlbeit rare, some features will be deferred or rejected for inclusion in\nBrave's main repository. In these cases, the choices are typically to\neither fork the repository, or make your own repository containing the\nchange.\n\n### Forks are welcome!\nForking isn't bad. It is a natural place to experiment and vet a feature\nbefore it ends up in Brave's main repository. Large features or those\nwhich haven't satisfied diverse need are often deferred to forks or\nseparate repositories (see [Rule of Three](http://blog.codinghorror.com/rule-of-three/)).\n\n### Large integrations -> separate repositories\nIf you look carefully, you'll notice Brave integrations are often less\nthan 1000 lines of code including tests. Some features are rejected for\ninclusion solely due to the amount of maintenance. For example, adding\nsome features might imply tying up maintainers for several days or weeks\nand resulting in a large percentage increase in the size of Brave.\n\nLarge integrations aren't bad, but to be sustainable, they need to be\nisolated where the maintenance of that feature doesn't endanger the\nmaintainability of Brave itself. Brave has been going since 2013, without\nthe need of full-time attention. This is largely because maintenance is\nlow and approachable.\n\nA good example of an external integration is [dropwizard-zipkin](https://github.com/smoketurner/dropwizard-zipkin).\nDropwizard Zipkin is better off in its own repo, not just because of feature\ndepth. It is also, better off because it is run by a core contributor to\nDropwizard. This reduces the framework-specific knowledge needed by core Brave\nmaintainers, and ensures the highest quality integration.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.8115234375,
          "content": "Brave\n\nCopyright The OpenZipkin Authors\nSPDX-License-Identifier: Apache-2.0\n\n-------------------------------------------------------------------------------\n\nThis product contains a modified portion of 'InetAddresses', distributed\nby Google in the Guava Library:\n\n  * Copyright (C) 2008 The Guava Authors\n  * License: Apache License v2.0\n  * Homepage: https://github.com/google/guava\n\nThis product contains a modified portion of 'JsonUtf8Writer', distributed\nby Square, Inc in the Moshi Library:\n\n  * Copyright (C) 2010 Google Inc.\n  * License: Apache License v2.0\n  * Homepage: https://github.com/square/moshi\n\nThis product contains a modified portion of 'WeakConcurrentMap', distributed\nby Rafael Winterhalter in the weak-lock-free Library:\n\n  * License: Apache License v2.0\n  * Homepage: https://github.com/raphw/weak-lock-free\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2001953125,
          "content": "[![Gitter chat](http://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/openzipkin/zipkin)\n[![Build Status](https://github.com/openzipkin/brave/workflows/test/badge.svg)](https://github.com/openzipkin/brave/actions?query=workflow%3Atest)\n[![Maven Central](https://img.shields.io/maven-central/v/io.zipkin.brave/brave.svg)](https://search.maven.org/search?q=g:io.zipkin.brave%20AND%20a:brave)\n\n# Brave\n\nBrave is a distributed tracing instrumentation library. Brave typically\nintercepts production requests to gather timing data, correlate and\npropagate trace contexts. While typically trace data is sent to\n[Zipkin server](https://github.com/openzipkin/zipkin/tree/master/zipkin-server),\nthird-party plugins are available to send to alternate services such as\n[Amazon X-Ray](https://github.com/openzipkin/zipkin-aws/tree/master/storage/xray-udp).\n\nThis repository includes dependency-free Java libraries and\ninstrumentation for common components used in production services. For\nexample, this includes trace filters for Servlet and log correlation for\nApache Log4J.\n\nYou can look at our [example project](https://github.com/openzipkin/brave-webmvc-example)\nfor how to trace a simple web application.\n\n## What's included\n\nBrave's dependency-free [tracer library](brave/) works against JRE6+.\nThis is the underlying api that instrumentation use to time operations\nand add tags that describe them. This library also includes code that\nparses `X-B3-TraceId` headers.\n\nMost users won't write tracing code directly. Rather, they reuse\ninstrumentation others have written. Check our\n[instrumentation](instrumentation/) and\n[Zipkin's list](https://zipkin.io/pages/tracers_instrumentation.html)\nbefore rolling your own. Common tracing libraries like JDBC, Servlet\nand Spring already exist. Instrumentation written here are tested and\nbenchmarked.\n\nIf you are trying to trace legacy applications, you may be interested in\n[Spring XML Configuration](spring-beans/). This allows you to set up\ntracing without any custom code.\n\nYou may want to put trace IDs into your log files, or change thread local\nbehavior. Look at our [context libraries](context/), for integration with\ntools such as SLF4J.\n\n## Version Compatibility policy\nAll Brave libraries match the minimum Java version of what's being\ntraced or integrated with, and adds no 3rd party dependencies. The goal\nis to neither impact your projects' choices, nor subject your project\nto dependency decisions made by others.\n\nFor example, even including a basic reporting library,\n[zipkin-sender-urlconnection](https://github.com/openzipkin/zipkin-reporter-java),\nBrave transitively includes no json,\nlogging, protobuf or thrift dependency. This means zero concern if your\napplication chooses a specific version of SLF4J, Gson or Guava.\nMoreover, the entire dependency tree including basic reporting in json,\nthrift or protobuf is less than 512KiB of jars.\n\nThere is a floor Java version of 1.6, which allows older JREs and older\nAndroid runtimes, yet may limit some applications. For example, Servlet\n2.5 works with Java 1.5, but due to Brave being 1.6, you will not be\nable to trace Servlet 2.5 applications until you use at least JRE 1.6.\n\nAll integrations set their associated library to \"provided\" scope. This\nensures Brave doesn't interfere with the versions you choose.\n\nSome libraries update often which leads to api drift. In some cases, we\ntest versions ranges to reduce the impact of this. For example, we test\n[gRPC](instrumentation/grpc) and [Kafka](instrumentation/kafka-clients)\nagainst multiple library versions.\n\n## Artifacts\nAll artifacts publish to the group ID \"io.zipkin.brave\". We use a common\nrelease version for all components.\n\n### Library Releases\nSnapshots are uploaded to\n[Sonatype](https://oss.sonatype.org/content/repositories/releases) which\nsynchronizes with\n[Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.zipkin.brave%22)\n\n### Library Snapshots\nSnapshots are uploaded to\n[Sonatype](https://oss.sonatype.org/content/repositories/snapshots) after\ncommits to master.\n\n### Version alignments\nWhen using multiple brave components, you'll want to align versions in\none place. This allows you to more safely upgrade, with less worry about\nconflicts.\n\nYou can use our Maven instrumentation BOM (Bill of Materials) for this:\n\nEx. in your dependencies section, import the BOM like this:\n```xml\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>io.zipkin.brave</groupId>\n        <artifactId>brave-bom</artifactId>\n        <version>${brave.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n```\n\nNow, you can leave off the version when choosing any supported\ninstrumentation. Also, any indirect use will have versions aligned:\n```xml\n<dependency>\n  <groupId>io.zipkin.brave</groupId>\n  <artifactId>brave-instrumentation-okhttp3</artifactId>\n</dependency>\n```\n\nWith the above in place, you can use the property `brave.version` to\noverride dependency versions coherently. This is most commonly to test a\nnew feature or fix.\n\nNote: If you override a version, always double check that your version\nis valid (equal to or later) than what you are updating. This will avoid\nclass conflicts.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 3.564453125,
          "content": "# OpenZipkin Release Process\n\nThis repo uses semantic versions. Please keep this in mind when choosing version numbers.\n\n1. **Verify all dependencies are up-to-date**\n\n   Before you start a release, make sure all dependencies are up-to-date, or are documented why not.\n   Pay special attention to the [security workflow](.github/workflows/security.yml), which should\n   run clean.\n\n1. **Alert others you are releasing**\n\n   There should be no commits made to master while the release is in progress (about 10 minutes). Before you start\n   a release, alert others on [gitter](https://gitter.im/openzipkin/zipkin) so that they don't accidentally merge\n   anything. If they do, and the build fails because of that, you'll have to recreate the release tag described below.\n\n1. **Push a git tag**\n\n   The trigger format is `release-MAJOR.MINOR.PATCH`, ex `git tag release-1.18.1 && git push origin release-1.18.1`.\n\n1. **Wait for CI**\n\n   The `release-MAJOR.MINOR.PATCH` tag triggers [`build-bin/maven/maven_release`](build-bin/maven/maven_release),\n   which creates commits, `MAJOR.MINOR.PATCH` tag, and increments the version (maven-release-plugin).\n\n   The `MAJOR.MINOR.PATCH` tag triggers [`build-bin/deploy`](build-bin/deploy), which does the following:\n     * Publishes jars to https://oss.sonatype.org/content/repositories/releases [`build-bin/maven/maven_deploy`](build-bin/maven/maven_deploy)\n       * Later, the same jars synchronize to Maven Central\n     * Publishes Javadoc to https://zipkin.io/brave into a versioned subdirectory\n\n   Notes:\n     * https://search.maven.org/ index will take longer than direct links like https://repo1.maven.org/maven2/io/zipkin\n\n## Credentials\n\nThe release process uses various credentials. If you notice something failing due to unauthorized,\nlook at the notes in [.github/workflows/deploy.yml] and check the [org secrets](https://github.com/organizations/openzipkin/settings/secrets/actions).\n\n### Troubleshooting invalid credentials\n\nIf you receive a '401 unauthorized' failure from OSSRH, it is likely\n`SONATYPE_USER` or `SONATYPE_PASSWORD` entries are invalid, or possibly the\nuser associated with them does not have rights to upload.\n\nThe least destructive test is to try to publish a snapshot manually. By passing\nthe values CI would use, you can kick off a snapshot from your laptop. This\nis a good way to validate that your unencrypted credentials are authorized.\n\nHere's an example of a snapshot deploy with specified credentials.\n```bash\n$ export GPG_TTY=$(tty) && GPG_PASSPHRASE=whackamole SONATYPE_USER=adrianmole SONATYPE_PASSWORD=ed6f20bde9123bbb2312b221 build-bin/build-bin/maven/maven_deploy\n```\n\n## Manually releasing\n\nIf for some reason, you lost access to CI or otherwise cannot get automation to work, bear in mind\nthis is a normal maven project, and can be released accordingly.\n\n*Note:* If [Sonatype is down](https://status.sonatype.com/), the below will not work.\n\n```bash\n# First, set variable according to your personal credentials. These would normally be assigned as\n# org secrets: https://github.com/organizations/openzipkin/settings/secrets/actions\nexport GPG_TTY=$(tty)\nexport GPG_PASSPHRASE=your_gpg_passphrase\nexport SONATYPE_USER=your_sonatype_account\nexport SONATYPE_PASSWORD=your_sonatype_password\nrelease_version=xx-version-to-release-xx\n\n# now from latest master, create the release. This creates and pushes the MAJOR.MINOR.PATCH tag\n./build-bin/maven/maven_release release-${release_version}\n\n# once this works, deploy the release\ngit checkout ${release_version}\n./build-bin/deploy\n\n# Finally, clean up\n./mvnw release:clean\ngit checkout master\ngit reset HEAD --hard\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6806640625,
          "content": "# OpenZipkin Security Process\n\nThis document outlines the process for handling security concerns in OpenZipkin projects.\n\nAny vulnerability or misconfiguration detected in our [security workflow](.github/workflows/security.yml)\nshould be addressed as a normal pull request.\n\nOpenZipkin is a volunteer community and does not have a dedicated security team. There may be\nperiods where no volunteer is able to address a security concern. There is no SLA or warranty\noffered by volunteers. If you are a security researcher, please consider this before escalating.\n\nFor security concerns that are sensitive or otherwise outside the scope of public issues, please\ncontact zipkin-admin@googlegroups.com.\n"
        },
        {
          "name": "brave-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "brave-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "brave",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "context",
          "type": "tree",
          "content": null
        },
        {
          "name": "instrumentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 11.0244140625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.2.0\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"$(uname)\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        JAVA_HOME=\"$(/usr/libexec/java_home)\"; export JAVA_HOME\n      else\n        JAVA_HOME=\"/Library/Java/Home\"; export JAVA_HOME\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=$(java-config --jre-home)\n  fi\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=$(cygpath --unix \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=$(cygpath --path --unix \"$CLASSPATH\")\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$JAVA_HOME\" ] && [ -d \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"$(cd \"$JAVA_HOME\" || (echo \"cannot cd into $JAVA_HOME.\"; exit 1); pwd)\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"$(which javac)\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"$(expr \"\\\"$javaExecutable\\\"\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=$(which readlink)\n    if [ ! \"$(expr \"$readLink\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"$(dirname \"\\\"$javaExecutable\\\"\")\"\n        javaExecutable=\"$(cd \"\\\"$javaHome\\\"\" && pwd -P)/javac\"\n      else\n        javaExecutable=\"$(readlink -f \"\\\"$javaExecutable\\\"\")\"\n      fi\n      javaHome=\"$(dirname \"\\\"$javaExecutable\\\"\")\"\n      javaHome=$(expr \"$javaHome\" : '\\(.*\\)/bin')\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"$(\\unset -f command 2>/dev/null; \\command -v java)\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=$(cd \"$wdir/..\" || exit 1; pwd)\n    fi\n    # end of workaround\n  done\n  printf '%s' \"$(cd \"$basedir\" || exit 1; pwd)\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    # Remove \\r in case we run on Windows within Git Bash\n    # and check out the repository with auto CRLF management\n    # enabled. Otherwise, we may read lines that are delimited with\n    # \\r\\n and produce $'-Xarg\\r' rather than -Xarg due to word\n    # splitting rules.\n    tr -s '\\r\\n' ' ' < \"$1\"\n  fi\n}\n\nlog() {\n  if [ \"$MVNW_VERBOSE\" = true ]; then\n    printf '%s\\n' \"$1\"\n  fi\n}\n\nBASE_DIR=$(find_maven_basedir \"$(dirname \"$0\")\")\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\nMAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}; export MAVEN_PROJECTBASEDIR\nlog \"$MAVEN_PROJECTBASEDIR\"\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nwrapperJarPath=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\"\nif [ -r \"$wrapperJarPath\" ]; then\n    log \"Found $wrapperJarPath\"\nelse\n    log \"Couldn't find $wrapperJarPath, downloading it ...\"\n\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      wrapperUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n    else\n      wrapperUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n    fi\n    while IFS=\"=\" read -r key value; do\n      # Remove '\\r' from value to allow usage on windows as IFS does not consider '\\r' as a separator ( considers space, tab, new line ('\\n'), and custom '=' )\n      safeValue=$(echo \"$value\" | tr -d '\\r')\n      case \"$key\" in (wrapperUrl) wrapperUrl=\"$safeValue\"; break ;;\n      esac\n    done < \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\n    log \"Downloading from: $wrapperUrl\"\n\n    if $cygwin; then\n      wrapperJarPath=$(cygpath --path --windows \"$wrapperJarPath\")\n    fi\n\n    if command -v wget > /dev/null; then\n        log \"Found wget ... using wget\"\n        [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--quiet\"\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget $QUIET \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget $QUIET --http-user=\"$MVNW_USERNAME\" --http-password=\"$MVNW_PASSWORD\" \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        log \"Found curl ... using curl\"\n        [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--silent\"\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl $QUIET -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n        else\n            curl $QUIET --user \"$MVNW_USERNAME:$MVNW_PASSWORD\" -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n        fi\n    else\n        log \"Falling back to using Java to download\"\n        javaSource=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        javaClass=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaSource=$(cygpath --path --windows \"$javaSource\")\n          javaClass=$(cygpath --path --windows \"$javaClass\")\n        fi\n        if [ -e \"$javaSource\" ]; then\n            if [ ! -e \"$javaClass\" ]; then\n                log \" - Compiling MavenWrapperDownloader.java ...\"\n                (\"$JAVA_HOME/bin/javac\" \"$javaSource\")\n            fi\n            if [ -e \"$javaClass\" ]; then\n                log \" - Running MavenWrapperDownloader.java ...\"\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$wrapperUrl\" \"$wrapperJarPath\") || rm -f \"$wrapperJarPath\"\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\n# If specified, validate the SHA-256 sum of the Maven wrapper jar file\nwrapperSha256Sum=\"\"\nwhile IFS=\"=\" read -r key value; do\n  case \"$key\" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;\n  esac\ndone < \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\nif [ -n \"$wrapperSha256Sum\" ]; then\n  wrapperSha256Result=false\n  if command -v sha256sum > /dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | sha256sum -c > /dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  elif command -v shasum > /dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | shasum -a 256 -c > /dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\"\n    echo \"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\"\n    exit 1\n  fi\n  if [ $wrapperSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\" >&2\n    echo \"Investigate or delete $wrapperJarPath to attempt a clean download.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=$(cygpath --path --windows \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=$(cygpath --path --windows \"$CLASSPATH\")\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\")\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $*\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\n# shellcheck disable=SC2086 # safe args\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 7.61328125,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.2.0\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho.\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho.\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho.\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset WRAPPER_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET WRAPPER_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET WRAPPER_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %WRAPPER_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file\r\nSET WRAPPER_SHA_256_SUM=\"\"\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperSha256Sum\" SET WRAPPER_SHA_256_SUM=%%B\r\n)\r\nIF NOT %WRAPPER_SHA_256_SUM%==\"\" (\r\n    powershell -Command \"&{\"^\r\n       \"$hash = (Get-FileHash \\\"%WRAPPER_JAR%\\\" -Algorithm SHA256).Hash.ToLower();\"^\r\n       \"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\"^\r\n       \"  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\"^\r\n       \"  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\"^\r\n       \"  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\"^\r\n       \"  exit 1;\"^\r\n       \"}\"^\r\n       \"}\"\r\n    if ERRORLEVEL 1 goto error\r\n)\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 30.5078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright The OpenZipkin Authors\n    SPDX-License-Identifier: Apache-2.0\n\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>io.zipkin.brave</groupId>\n  <artifactId>brave-parent</artifactId>\n  <version>6.0.4-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>Brave (parent)</name>\n  <description>\n    Java distributed tracing implementation compatible with Zipkin backend services.\n  </description>\n  <url>https://github.com/openzipkin/brave</url>\n  <inceptionYear>2013</inceptionYear>\n\n  <organization>\n    <name>OpenZipkin</name>\n    <url>https://zipkin.io/</url>\n  </organization>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <scm>\n    <url>https://github.com/openzipkin/brave</url>\n    <connection>scm:git:https://github.com/openzipkin/brave.git</connection>\n    <developerConnection>scm:git:https://github.com/openzipkin/brave.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n\n  <!-- Developer section is needed for Maven Central, but doesn't need to include each person -->\n  <developers>\n    <developer>\n      <id>openzipkin</id>\n      <name>OpenZipkin Gitter</name>\n      <url>https://gitter.im/openzipkin/zipkin</url>\n    </developer>\n  </developers>\n\n  <properties>\n    <main.basedir>${project.basedir}</main.basedir>\n\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>\n    <project.build.outputEncoding>UTF-8</project.build.outputEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\n    <!-- default bytecode version for src/main -->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n    <!-- We don't use animal-sniffer anymore as release obviates it.\n         See https://github.com/mojohaus/animal-sniffer/issues/62 -->\n    <maven.compiler.release>8</maven.compiler.release>\n\n    <!-- Tests use the floor Java version (used in release) -->\n    <maven.compiler.testSource>11</maven.compiler.testSource>\n    <maven.compiler.testTarget>11</maven.compiler.testTarget>\n    <maven.compiler.testRelease>11</maven.compiler.testRelease>\n\n    <!-- override to set exclusions per-project -->\n    <errorprone.args />\n    <errorprone.version>2.29.2</errorprone.version>\n\n    <!-- Used for Generated annotations -->\n    <javax-annotation-api.version>1.3.2</javax-annotation-api.version>\n    <!-- to test @Inject annotations. Note 7.x is for jakarta annotations! -->\n    <guice.version>6.0.0</guice.version>\n\n    <!-- Note: Spring 6 is JDK 17 bytecode, so we can't update to it until we\n         stop supporting Java 6 compilation target, or change our release to\n         use multiple tool chains. -->\n    <spring5.version>5.3.39</spring5.version>\n    <!-- Ensure older versions of spring still work -->\n    <spring25.version>2.5.6</spring25.version>\n    <spring3.version>3.2.18.RELEASE</spring3.version>\n\n    <!-- Apis used, but not in Jetty 7.6* imply duplication in servlet25 test fixtures -->\n    <jetty.version>9.4.56.v20240826</jetty.version>\n    <jetty-servlet25.version>7.6.21.v20160908</jetty-servlet25.version>\n    <resteasy.version>3.15.6.Final</resteasy.version>\n\n    <!-- Jakarta -->\n    <jetty11.version>11.0.24</jetty11.version>\n    <jakarta.servlet>5.0.0</jakarta.servlet>\n\n    <kafka.version>3.8.0</kafka.version>\n    <activemq.version>5.18.3</activemq.version>\n    <activemq.artemis.version>2.33.0</activemq.artemis.version>\n    <!-- TODO: reflection drift after this version. Make changes as necessary\n         and add an invoker test that 2.3.6 still works. -->\n    <spring-rabbit.version>2.3.6</spring-rabbit.version>\n\n    <!-- TODO: update and fix drift or remove the FinagleContextInteropTest -->\n    <finagle.version>20.12.0</finagle.version>\n    <log4j.version>2.24.1</log4j.version>\n    <log4j12.version>1.2.17</log4j12.version>\n    <okhttp.version>4.12.0</okhttp.version>\n    <httpclient.version>4.5.14</httpclient.version>\n\n    <!-- TODO: grpc removed code we use in tests saying is wasn't used.\n         Port the attachHeaders code from here.\n         https://github.com/grpc/grpc-java/commit/a589eacc8f83c80bb44c8fae0b0b173b5ff51e61 -->\n    <grpc.version>1.57.2</grpc.version>\n    <protobuf.version>3.25.5</protobuf.version>\n    <!-- latest netty 4.1 that works with our version of grpc -->\n    <netty.version>4.1.114.Final</netty.version>\n\n    <httpasyncclient.version>4.1.5</httpasyncclient.version>\n\n    <!-- Test only dependencies -->\n    <junit-jupiter.version>5.11.1</junit-jupiter.version>\n    <assertj.version>3.26.3</assertj.version>\n    <mockito.version>5.14.1</mockito.version>\n    <jersey.version>2.42</jersey.version>\n    <testcontainers.version>1.20.2</testcontainers.version>\n\n    <license.skip>${skipTests}</license.skip>\n    <maven-surefire-plugin.argLine />\n    <maven-failsafe-plugin.argLine />\n\n    <go-offline-maven-plugin.version>1.2.8</go-offline-maven-plugin.version>\n    <!-- TODO: cleanup any redundant ignores now also in the 4.0 release (once final) -->\n    <license-maven-plugin.version>4.5</license-maven-plugin.version>\n    <maven-assembly-plugin.version>3.7.1</maven-assembly-plugin.version>\n    <maven-bundle-plugin.version>5.1.9</maven-bundle-plugin.version>\n    <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n    <!-- Use same version as https://github.com/openzipkin/docker-java -->\n    <maven-dependency-plugin.version>3.7.1</maven-dependency-plugin.version>\n    <maven-deploy-plugin.version>3.1.2</maven-deploy-plugin.version>\n    <maven-enforcer-plugin.version>3.4.1</maven-enforcer-plugin.version>\n    <!-- Use same version as https://github.com/openzipkin/docker-java -->\n    <maven-help-plugin.version>3.4.1</maven-help-plugin.version>\n    <maven-install-plugin.version>3.1.2</maven-install-plugin.version>\n    <maven-invoker-plugin.version>3.6.0</maven-invoker-plugin.version>\n    <maven-javadoc-plugin.version>3.6.3</maven-javadoc-plugin.version>\n    <maven-jar-plugin.version>3.4.1</maven-jar-plugin.version>\n    <maven-release-plugin.version>3.0.1</maven-release-plugin.version>\n    <maven-source-plugin.version>3.3.1</maven-source-plugin.version>\n    <maven-surefire-plugin.version>3.5.0</maven-surefire-plugin.version>\n    <nexus-staging-maven-plugin.version>1.6.13</nexus-staging-maven-plugin.version>\n  </properties>\n\n  <modules>\n    <module>brave</module>\n    <module>brave-bom</module>\n    <module>brave-tests</module>\n    <module>context</module>\n    <module>instrumentation</module>\n    <module>spring-beans</module>\n  </modules>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n\n  <issueManagement>\n    <system>Github</system>\n    <url>https://github.com/openzipkin/brave/issues</url>\n  </issueManagement>\n\n  <dependencyManagement>\n    <!-- Be careful here, especially to not import BOMs as io.zipkin.brave:brave has this parent.\n\n         For example, if you imported Netty's BOM here, using Brave would also download that BOM. As\n         Brave is indirectly used, this can be extremely confusing when people are troubleshooting\n         library version assignments. -->\n  </dependencyManagement>\n\n  <dependencies>\n    <!-- Do not add compile dependencies here. This can cause problems for libraries that depend on\n         io.zipkin.brave:brave difficult to unravel. -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <version>${junit-jupiter.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <version>${assertj.version}</version>\n      <exclusions>\n        <!-- Use newer bytebuddy from mockito, which is JRE 21 compatible.\n             TODO: remove when assertj releases a new version -->\n        <exclusion>\n          <groupId>net.bytebuddy</groupId>\n          <artifactId>*</artifactId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <!-- Main code uses jul and tests log with log4j -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-core</artifactId>\n      <version>${log4j.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- route jul over log4j2 during integration tests -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-jul</artifactId>\n      <version>${log4j.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- route log4j over log4j2 during integration tests -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-1.2-api</artifactId>\n      <version>${log4j.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- route slf4j over log4j2 during integration tests -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-slf4j-impl</artifactId>\n      <version>${log4j.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-junit-jupiter</artifactId>\n      <version>${mockito.version}</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <!-- mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -->\n        <plugin>\n          <groupId>de.qaware.maven</groupId>\n          <artifactId>go-offline-maven-plugin</artifactId>\n          <version>${go-offline-maven-plugin.version}</version>\n          <configuration>\n            <!-- Add dependencies indirectly referenced by build plugins -->\n            <dynamicDependencies>\n              <DynamicDependency>\n                <groupId>com.mycila</groupId>\n                <artifactId>license-maven-plugin-git</artifactId>\n                <version>${license-maven-plugin.version}</version>\n                <repositoryType>MAIN</repositoryType>\n              </DynamicDependency>\n              <DynamicDependency>\n                <groupId>com.google.errorprone</groupId>\n                <artifactId>error_prone_core</artifactId>\n                <version>${errorprone.version}</version>\n                <repositoryType>MAIN</repositoryType>\n                <type>jar</type>\n              </DynamicDependency>\n              <DynamicDependency>\n                <groupId>org.apache.maven.surefire</groupId>\n                <artifactId>surefire-junit-platform</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <repositoryType>PLUGIN</repositoryType>\n              </DynamicDependency>\n            </dynamicDependencies>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin.version}</version>\n          <inherited>true</inherited>\n          <configuration>\n            <fork>true</fork>\n            <showWarnings>true</showWarnings>\n          </configuration>\n        </plugin>\n\n        <!-- Uploads occur as a last step (which also adds checksums) -->\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>${maven-deploy-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>${maven-install-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${maven-jar-plugin.version}</version>\n          <configuration>\n            <archive>\n              <!-- prevents huge pom file from also being added to the jar under META-INF/maven -->\n              <addMavenDescriptor>false</addMavenDescriptor>\n            </archive>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>${maven-release-plugin.version}</version>\n          <configuration>\n            <useReleaseProfile>false</useReleaseProfile>\n            <releaseProfiles>release</releaseProfiles>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n            <tagNameFormat>@{project.version}</tagNameFormat>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.sonatype.plugins</groupId>\n          <artifactId>nexus-staging-maven-plugin</artifactId>\n          <version>${nexus-staging-maven-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.eclipse.m2e</groupId>\n          <artifactId>lifecycle-mapping</artifactId>\n          <version>1.0.0</version>\n          <configuration>\n            <lifecycleMappingMetadata>\n              <pluginExecutions>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <versionRange>[3.7,)</versionRange>\n                    <goals>\n                      <goal>compile</goal>\n                      <goal>testCompile</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <configurator>\n                      <id>org.eclipse.m2e.jdt.javaConfigurator</id>\n                    </configurator>\n                  </action>\n                </pluginExecution>\n              </pluginExecutions>\n            </lifecycleMappingMetadata>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>maven-eclipse-plugin</artifactId>\n          <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-invoker-plugin</artifactId>\n          <version>${maven-invoker-plugin.version}</version>\n          <configuration>\n            <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>\n            <settingsFile>${main.basedir}/src/it/settings.xml</settingsFile>\n            <profiles>\n              <profile>!release</profile>\n            </profiles>\n            <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>\n            <!--- Don't use addTestClassPath as it interferes with the classpath -->\n            <postBuildHookScript>verify</postBuildHookScript>\n            <skipInvocation>${skipTests}</skipInvocation>\n            <streamLogs>true</streamLogs>\n            <!-- Silences repetitive \"downloading\" logs from the local repo.\n                 Note: this also silences logs about integration test runs! -->\n            <mavenOpts>-Dorg.slf4j.simpleLogger.defaultLogLevel=WARN</mavenOpts>\n          </configuration>\n          <executions>\n            <execution>\n              <goals>\n                <goal>install</goal>\n                <goal>run</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <!-- Ensure common utility commands use coherent versions (avoid lazy downloads) -->\n      <plugin>\n        <artifactId>maven-dependency-plugin</artifactId>\n        <version>${maven-dependency-plugin.version}</version>\n      </plugin>\n      <plugin>\n        <artifactId>maven-help-plugin</artifactId>\n        <version>${maven-help-plugin.version}</version>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>${maven-surefire-plugin.version}</version>\n        <configuration>\n          <!-- Ensure scope leak cause ends up in the console -->\n          <trimStackTrace>false</trimStackTrace>\n          <!-- Don't add org.apache.logging.log4j.jul.LogManager here as it conflicts with\n               classloading, causing brave.test.propagation.PropagationTest to flake. -->\n          <classpathDependencyExcludes>\n            <classpathDependencyExclude>org.apache.logging.log4j:log4j-jul</classpathDependencyExclude>\n          </classpathDependencyExcludes>\n          <argLine>${maven-surefire-plugin.argLine}</argLine>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-failsafe-plugin</artifactId>\n        <version>${maven-surefire-plugin.version}</version>\n        <executions>\n          <execution>\n            <id>integration-test</id>\n            <phase>verify</phase>\n            <goals>\n              <goal>integration-test</goal>\n              <goal>verify</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <!-- Try to prevent flakes in CI -->\n          <reuseForks>false</reuseForks>\n          <!-- workaround to SUREFIRE-1831 -->\n          <useModulePath>false</useModulePath>\n          <!-- Ensure scope leak cause ends up in the console -->\n          <trimStackTrace>false</trimStackTrace>\n          <argLine>${maven-failsafe-plugin.argLine}</argLine>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <version>${maven-enforcer-plugin.version}</version>\n        <executions>\n          <execution>\n            <id>enforce-java</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireJavaVersion>\n                  <!-- Change this to control LTS JDK versions allowed to build\n                       the project. Keep in sync with .github/workflows -->\n                  <version>[11,12),[17,18),[21,22)</version>\n                </requireJavaVersion>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>com.mycila</groupId>\n        <artifactId>license-maven-plugin</artifactId>\n        <version>${license-maven-plugin.version}</version>\n        <configuration>\n          <skip>${license.skip}</skip>\n          <!-- session.executionRootDirectory resolves properly even with nested modules -->\n          <header>${main.basedir}/src/etc/header.txt</header>\n          <mapping>\n            <!-- Don't use javadoc style as this makes code formatters break it by adding tags! -->\n            <java>SLASHSTAR_STYLE</java>\n            <bnd>SCRIPT_STYLE</bnd>\n            <!-- build-bin/docker -->\n            <configure_docker>SCRIPT_STYLE</configure_docker>\n            <!-- build-bin/git -->\n            <login_git>SCRIPT_STYLE</login_git>\n            <version_from_trigger_tag>SCRIPT_STYLE</version_from_trigger_tag>\n            <!-- build-bin/gpg -->\n            <configure_gpg>SCRIPT_STYLE</configure_gpg>\n            <!-- build-bin/maven -->\n            <maven_deploy>SCRIPT_STYLE</maven_deploy>\n            <maven_go_offline>SCRIPT_STYLE</maven_go_offline>\n            <maven_opts>SCRIPT_STYLE</maven_opts>\n            <maven_release>SCRIPT_STYLE</maven_release>\n          </mapping>\n          <excludes>\n            <exclude>**/jetty-logging.properties</exclude>\n            <exclude>**/log4j2.properties</exclude>\n            <exclude>**/log4j.properties</exclude>\n            <exclude>.editorconfig</exclude>\n            <exclude>.gitattributes</exclude>\n            <exclude>.gitignore</exclude>\n            <exclude>.mailmap</exclude>\n            <exclude>.mvn/**</exclude>\n            <exclude>mvnw*</exclude>\n            <exclude>etc/header.txt</exclude>\n            <exclude>**/.idea/**</exclude>\n            <exclude>**/.editorconfig</exclude>\n            <exclude>LICENSE</exclude>\n            <exclude>NOTICE</exclude>\n            <exclude>**/*.md</exclude>\n            <exclude>**/*.bnd</exclude>\n            <exclude>src/test/resources/**</exclude>\n            <exclude>.github/**</exclude>\n            <exclude>build-bin/*</exclude>\n            <!-- instrumentation/dubbo -->\n            <exclude>**/com.alibaba.dubbo.rpc.Filter</exclude>\n            <!-- instrumentation/grpc -->\n            <exclude>src/test/proto/**</exclude>\n            <!-- generated grpc 1.2 test sources -->\n            <exclude>**/Hello*.java</exclude>\n            <exclude>**/GreeterGrpc*.java</exclude>\n            <exclude>**/GraterGrpc*.java</exclude>\n          </excludes>\n          <strictCheck>true</strictCheck>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>com.mycila</groupId>\n            <artifactId>license-maven-plugin-git</artifactId>\n            <version>${license-maven-plugin.version}</version>\n          </dependency>\n        </dependencies>\n        <executions>\n          <execution>\n            <goals>\n              <goal>check</goal>\n            </goals>\n            <phase>compile</phase>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n\n    <resources>\n      <resource>\n        <filtering>false</filtering>\n        <directory>src/main/resources</directory>\n      </resource>\n      <resource>\n        <filtering>false</filtering>\n        <directory>src/main/java</directory>\n        <includes>\n          <include>**</include>\n        </includes>\n        <excludes>\n          <exclude>**/*.java</exclude>\n        </excludes>\n      </resource>\n      <!-- This adds the LICENSE and NOTICE file to the jar and -sources jar of each module -->\n      <resource>\n        <filtering>false</filtering>\n        <directory>${main.basedir}</directory>\n        <targetPath>META-INF/</targetPath>\n        <includes>\n          <include>LICENSE</include>\n          <include>NOTICE</include>\n        </includes>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <filtering>false</filtering>\n        <directory>src/test/java</directory>\n        <includes>\n          <include>**</include>\n        </includes>\n        <excludes>\n          <exclude>**/*.java</exclude>\n        </excludes>\n      </testResource>\n      <testResource>\n        <filtering>false</filtering>\n        <directory>src/test/resources</directory>\n      </testResource>\n    </testResources>\n  </build>\n\n  <profiles>\n    <!-- -DskipTests ensures benchmarks don't end up in javadocs or in Maven Central -->\n    <profile>\n      <id>include-benchmarks</id>\n      <activation>\n        <property>\n          <name>!skipTests</name>\n        </property>\n      </activation>\n      <modules>\n        <module>instrumentation/benchmarks</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>error-prone-11+</id>\n      <activation>\n        <!-- Only LTS versions -->\n        <jdk>[11,12),[17,18),[21,22)</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>${maven-compiler-plugin.version}</version>\n            <inherited>true</inherited>\n            <configuration>\n              <fork>true</fork>\n              <showWarnings>true</showWarnings>\n            </configuration>\n            <executions>\n              <execution>\n                <!-- only use errorprone on main source tree -->\n                <id>default-compile</id>\n                <phase>compile</phase>\n                <goals>\n                  <goal>compile</goal>\n                </goals>\n                <configuration>\n                  <forceJavacCompilerUse>true</forceJavacCompilerUse>\n                  <compilerArgs>\n                    <arg>-XDcompilePolicy=simple</arg>\n                    <arg>-Xplugin:ErrorProne ${errorprone.args}</arg>\n                    <!-- below needed for JDK16+ per https://errorprone.info/docs/installation -->\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>\n                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>\n                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>\n                  </compilerArgs>\n                  <annotationProcessorPaths>\n                    <processorPath>\n                      <groupId>com.google.errorprone</groupId>\n                      <artifactId>error_prone_core</artifactId>\n                      <version>${errorprone.version}</version>\n                    </processorPath>\n                  </annotationProcessorPaths>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <extensions>true</extensions>\n            <configuration>\n              <serverId>ossrh</serverId>\n              <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n              <!-- Increase timeouts due to recent load related failures described in OSSRH-76308:\n\n                   A message body reader for Java class com.sonatype.nexus.staging.api.dto.StagingProfileRepositoryDTO,\n                   and Java type class com.sonatype.nexus.staging.api.dto.StagingProfileRepositoryDTO,\n                   and MIME media type text/html was not found -> [Help 1]\n              -->\n              <stagingProgressPauseDurationSeconds>20</stagingProgressPauseDurationSeconds>\n              <stagingProgressTimeoutMinutes>30</stagingProgressTimeoutMinutes>\n              <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n          </plugin>\n\n          <plugin>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>3.2.2</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n                <configuration>\n                  <gpgArguments>\n                    <arg>--pinentry-mode</arg>\n                    <arg>loopback</arg>\n                  </gpgArguments>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n\n          <!-- Creates source jar -->\n          <plugin>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>${maven-source-plugin.version}</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n\n          <!-- Creates javadoc jar, skipping internal classes -->\n          <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>${maven-javadoc-plugin.version}</version>\n            <configuration>\n              <sourceFileExcludes>\n                <exclude>**/internal/*.java</exclude>\n                <exclude>**/Internal*.java</exclude>\n              </sourceFileExcludes>\n              <excludePackageNames>*.internal.*</excludePackageNames>\n              <failOnError>false</failOnError>\n              <!-- hush pedantic warnings: we don't put param and return on everything! -->\n              <doclint>none</doclint>\n              <!-- While we publish modules, our source is pre-Java9 so tell javadoc that. -->\n              <source>8</source>\n            </configuration>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n                <phase>package</phase>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>module-info</id>\n      <!-- Build profiles can only consider static properties, such as files or ENV variables.\n           To conditionally add module information, we use existence of bnd.bnd. This allows\n           irrelevant packages such as tests and benchmarks to quietly opt-out.\n           http://maven.apache.org/guides/introduction/introduction-to-profiles.html -->\n      <activation>\n        <file>\n          <exists>bnd.bnd</exists>\n        </file>\n      </activation>\n      <build>\n        <plugins>\n          <!-- OSGi and Java Modules configuration -->\n          <plugin>\n            <groupId>org.apache.felix</groupId>\n            <artifactId>maven-bundle-plugin</artifactId>\n            <version>${maven-bundle-plugin.version}</version>\n            <configuration>\n              <obrRepository>NONE</obrRepository>\n              <instructions>\n                <_include>-bnd.bnd</_include>\n              </instructions>\n            </configuration>\n            <executions>\n              <execution>\n                <phase>process-classes</phase>\n                <goals>\n                  <goal>manifest</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <artifactId>maven-jar-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>default-jar</id>\n                <configuration>\n                  <archive>\n                    <!-- Include the MANIFEST.MF maven-bundle-plugin generates from bnd.bnd -->\n                    <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n                    <manifestEntries>\n                      <Automatic-Module-Name>${module.name}</Automatic-Module-Name>\n                    </manifestEntries>\n                  </archive>\n                </configuration>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "spring-beans",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}