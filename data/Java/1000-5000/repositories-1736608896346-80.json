{
  "metadata": {
    "timestamp": 1736608896346,
    "page": 80,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wdullaer/MaterialDateTimePicker",
      "stars": 4665,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.283203125,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# IntelliJ IDEA\n.idea/\n*.iml\n*.iws\n*.ipr\n\n# Gradle\n.gradle\nbuild/\n\n# System files\n.DS_Store\n.directory\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.58203125,
          "content": "language: android\njdk:\n    - oraclejdk8\nandroid:\n    components:\n        - tools\n        - platform-tools\n        - build-tools-28.0.3\n        - tools\n        - android-28\n        - android-14\n        - extra-android-m2repository\n\nbefore_cache:\n  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock\n  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/\ncache:\n  directories:\n    - $HOME/.gradle/caches/\n    - $HOME/.gradle/wrapper/\n    - $HOME/.android/build-cache\n\nbefore_script:\n  - mkdir \"$ANDROID_HOME/licenses\" || true\n  - cp ./licenses/* \"$ANDROID_HOME/licenses/\"\nscript: ./gradlew check\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2014] Wouter Dullaert\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.9140625,
          "content": "# Material DateTime Picker - Select a time/date in style\n\n[![Join the chat at https://gitter.im/wdullaer/MaterialDateTimePicker](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/wdullaer/MaterialDateTimePicker?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n![Maven Central](https://img.shields.io/maven-central/v/com.wdullaer/materialdatetimepicker.svg)\n![Build Status](https://travis-ci.org/wdullaer/MaterialDateTimePicker.svg?branch=master)\n\n\nMaterial DateTime Picker tries to offer you the date and time pickers as shown in [the Material Design spec](http://www.google.com/design/spec/components/pickers.html), with an\neasy themable API.\nThe library uses [the code from the Android frameworks](https://android.googlesource.com/platform/frameworks/opt/datetimepicker/) as a base and tweaked it to be as close as possible to Material Design example.\n\nSupport for Android 4.1 and up. (Android 4.0 was supported until 3.6.4)\n\nFeel free to fork or issue pull requests on github. Issues can be reported on the github issue tracker.\n\n**Version 2 Layout**\n\nDate Picker | Time Picker\n--- | ---\n![Date Picker](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/date_picker_v2.png) | ![Time Picker](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/time_picker_v2.png)\n\n**Version 1 Layout**\n\nDate Picker | Time Picker\n---- | ----\n![Date Picker](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/date_picker.png) | ![Time Picker](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/time_picker.png)\n\n\n## Table of Contents\n1. [Setup](#setup)\n2. [Using Material Date/Time Pickers](#using-material-datetime-pickers)\n1. [Implement Listeners](#implement-an-ontimesetlistenerondatesetlistener)\n2. [Create Pickers](#create-a-timepickerdialogdatepickerdialog-using-the-supplied-factory)\n3. [Theme the Pickers](#theme-the-pickers)\n3. [Additional Options](#additional-options)\n4. [FAQ](#faq)\n5. [Potential Improvements](#potential-improvements)\n6. [License](#license)\n\n\n## Setup\n The easiest way to add the Material DateTime Picker library to your project is by adding it as a dependency to your `build.gradle`\n```groovy\ndependencies {\n    implementation 'com.wdullaer:materialdatetimepicker:4.2.3'\n}\n```\n\nYou may also add the library as an Android Library to your project. All the library files live in ```library```.\n\nThe library also uses some Java 8 features, which Android Studio will need to transpile. This requires the following stanza in your app's `build.gradle`.\nSee https://developer.android.com/studio/write/java8-support.html for more information on Java 8 support in Android.\n```groovy\nandroid {\n  ...\n  // Configure only for each module that uses Java 8\n  // language features (either in its source code or\n  // through dependencies).\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n```\n\n## Using Material Date/Time Pickers\nThe library follows the same API as other pickers in the Android framework.\nFor a basic implementation, you'll need to\n\n1. Implement an `OnTimeSetListener`/`OnDateSetListener`\n2. Create a `TimePickerDialog`/`DatePickerDialog` using the supplied factory\n3. Theme the pickers\n\n### Implement an `OnTimeSetListener`/`OnDateSetListener`\nIn order to receive the date or time set in the picker, you will need to implement the `OnTimeSetListener` or\n`OnDateSetListener` interfaces. Typically this will be the `Activity` or `Fragment` that creates the Pickers. The callbacks use the same API as the standard Android pickers.\n```java\n@Override\npublic void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute, int second) {\n  String time = \"You picked the following time: \"+hourOfDay+\"h\"+minute+\"m\"+second;\n  timeTextView.setText(time);\n}\n\n@Override\npublic void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {\n  String date = \"You picked the following date: \"+dayOfMonth+\"/\"+(monthOfYear+1)+\"/\"+year;\n  dateTextView.setText(date);\n}\n```\n\n### Create a `TimePickerDialog`/`DatePickerDialog` using the supplied factory\nYou will need to create a new instance of `TimePickerDialog` or `DatePickerDialog` using the static `newInstance()` method, supplying proper default values and a callback. Once the dialogs are configured, you can call `show()`.\n```java\nCalendar now = Calendar.getInstance();\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n  MainActivity.this,\n  now.get(Calendar.YEAR), // Initial year selection\n  now.get(Calendar.MONTH), // Initial month selection\n  now.get(Calendar.DAY_OF_MONTH) // Inital day selection\n);\n// If you're calling this from a support Fragment\ndpd.show(getFragmentManager(), \"Datepickerdialog\");\n// If you're calling this from an AppCompatActivity\n// dpd.show(getSupportFragmentManager(), \"Datepickerdialog\");\n```\n\n### Theme the pickers\nThe library contains 2 layout versions for each picker.\n\n* Version 1: this is the original layout. It is based on the layout google used in the kitkat and early material design era\n* Version 2: this layout is based on the guidelines google posted when launching android marshmallow. This is the default and still the most current design.\n\nYou can set the layout version using the factory\n```java\ndpd.setVersion(DatePickerDialog.Version.VERSION_2);\n```\n\nThe pickers will be themed automatically based on the current theme where they are created, based on the current `colorAccent`. You can also theme the dialogs via the `setAccentColor(int color)` method. Alternatively, you can theme the pickers by overwriting the color resources `mdtp_accent_color` and `mdtp_accent_color_dark` in your project.\n```xml\n<color name=\"mdtp_accent_color\">#009688</color>\n<color name=\"mdtp_accent_color_dark\">#00796b</color>\n```\n\nThe exact order in which colors are selected is as follows:\n\n1. `setAccentColor(int color)` in java code\n2. `android.R.attr.colorAccent` (if android 5.0+)\n3. `R.attr.colorAccent` (eg. when using AppCompat)\n4. `R.color.mdtp_accent_color` and `R.color.mdtp_accent_color_dark` if none of the others are set in your project\n\nThe pickers also have a dark theme. This can be specified globablly using the `mdtp_theme_dark` attribute in your theme or the `setThemeDark(boolean themeDark)` functions. The function calls overwrite the XML setting.\n```xml\n<item name=\"mdtp_theme_dark\">true</item>\n```\n\n\n## Additional Options\n### [All] `setThemeDark(boolean themeDark)`\nThe dialogs have a dark theme that can be set by calling\n```java\ndialog.setThemeDark(true);\n```\n\n### [All] `setAccentColor(String color)` and `setAccentColor(int color)`\nSet the accentColor to be used by the Dialog. The String version parses the color out using `Color.parseColor()`. The int version requires a ColorInt bytestring. It will explicitly set the color to fully opaque.\n\n### [All] `setOkColor()` and `setCancelColor()`\nSet the text color for the OK or Cancel button. Behaves similar to `setAccentColor()`\n\n### [TimePickerDialog] `setTitle(String title)`  \nShows a title at the top of the `TimePickerDialog`\n\n### [DatePickerDialog] `setTitle(String title)`\nShows a title at the top of the `DatePickerDialog` instead of the day of the week\n\n### [All] `setOkText()` and `setCancelText()`  \nSet a custom text for the dialog Ok and Cancel labels. Can take a resourceId of a String. Works in both the DatePickerDialog and TimePickerDialog\n\n### [DatePickerDialog] `setMinDate(Calendar day)`\nSet the minimum valid date to be selected. Date values before this date will be deactivated\n\n### [DatePickerDialog] `setMaxDate(Calendar day)`\nSet the maximum valid date to be selected. Date values after this date will be deactivated\n\n### [TimePickerDialog] `setMinTime(Timepoint time)`  \nSet the minimum valid time to be selected. Time values earlier in the day will be deactivated\n\n### [TimePickerDialog] `setMaxTime(Timepoint time)`  \nSet the maximum valid time to be selected. Time values later in the day will be deactivated\n\n### [TimePickerDialog] `setSelectableTimes(Timepoint[] times)`  \nYou can pass in an array of `Timepoints`. These values are the only valid selections in the picker. `setMinTime(Timepoint time)`, `setMaxTime(Timepoint time)` and `setDisabledTimes(Timepoint[] times)` will further trim this list down. Try to specify Timepoints only up to the resolution of your picker (i.e. do not add seconds if the resolution of the picker is minutes).\n\n### [TimePickerDialog] `setDisabledTimes(Timepoint[] times)`  \nYou can pass in an array of `Timepoints`. These values will not be available for selection. These take precedence over `setSelectableTimes` and `setTimeInterval`. Be careful when using this without selectableTimes: rounding to a valid Timepoint is a very expensive operation if a lot of consecutive Timepoints are disabled. Try to specify Timepoints only up to the resolution of your picker (i.e. do not add seconds if the resolution of the picker is minutes).\n\n### [TimePickerDialog] `setTimeInterval(int hourInterval, int minuteInterval, int secondInterval)`  \nSet the interval for selectable times in the TimePickerDialog. This is a convenience wrapper around `setSelectableTimes`. The interval for all three time components can be set independently. If you are not using the seconds / minutes picker, set the respective item to 60 for better performance.\n\n### [TimePickerDialog] `setTimepointLimiter(TimepointLimiter limiter)`  \nPass in a custom implementation of `TimeLimiter`\nDisables `setSelectableTimes`, `setDisabledTimes`, `setTimeInterval`, `setMinTime` and `setMaxTime`\n\n### [DatePickerDialog] `setSelectableDays(Calendar[] days)`  \nYou can pass a `Calendar[]` to the `DatePickerDialog`. The values in this list are the only acceptable dates for the picker. It takes precedence over `setMinDate(Calendar day)` and `setMaxDate(Calendar day)`\n\n### [DatePickerDialog] `setDisabledDays(Calendar[] days)`  \nThe values in this `Calendar[]` are explicitly disabled (not selectable). This option can be used together with `setSelectableDays(Calendar[] days)`: in case there is a clash `setDisabledDays(Calendar[] days)` will take precedence over `setSelectableDays(Calendar[] days)`\n\n### [DatePickerDialog] `setHighlightedDays(Calendar[] days)`  \nYou can pass a `Calendar[]` of days to highlight. They will be rendered in bold. You can tweak the color of the highlighted days by overwriting `mdtp_date_picker_text_highlighted`\n\n### [DatePickerDialog] `showYearPickerFirst(boolean yearPicker)`  \nShow the year picker first, rather than the month and day picker.\n\n### [All] `OnDismissListener` and `OnCancelListener`  \nBoth pickers can be passed a `DialogInterface.OnDismissLisener` or `DialogInterface.OnCancelListener` which allows you to run code when either of these events occur.\n```java\ntpd.setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialogInterface) {\n      Log.d(\"TimePicker\", \"Dialog was cancelled\");\n    }\n});\n```\n\n### [All] `vibrate(boolean vibrate)`  \nSet whether the dialogs should vibrate the device when a selection is made. This defaults to `true`.\n\n### [All] `dismissOnPause(boolean dismissOnPause)`  \nSet whether the picker dismisses itself when the parent Activity is paused or whether it recreates itself when the Activity is resumed.\n\n### [All] `setLocale(Locale locale)`  \nAllows the client to set a custom locale that will be used when generating various strings in the pickers. By default the current locale of the device will be used. Because the pickers will adapt to the Locale of the device by default you should only have to use this in very rare circumstances.\n\n### [DatePickerDialog] `autoDismiss(boolean autoDismiss)`\nIf set to `true` will dismiss the picker when the user selects a date. This defaults to `false`.\n\n### [TimepickerDialog] `enableSeconds(boolean enableSconds)` and `enableMinutes(boolean enableMinutes)`\nAllows you to enable or disable a seconds and minutes picker on the `TimepickerDialog`. Enabling the seconds picker, implies enabling the minutes picker. Disabling the minute picker will disable the seconds picker. The last applied setting will be used. By default `enableSeconds = false` and `enableMinutes = true`.\n\n### [DatePickerDialog] `setTimeZone(Timezone timezone)` *deprecated*  \nSets the `Timezone` used to represent time internally in the picker. Defaults to the current default Timezone of the device.\nThis method has been deprecated: you should use the `newInstance()` method which takes a Calendar set to the appropriate TimeZone.\n\n### [DatePickerDialog] `setDateRangeLimiter(DateRangeLimiter limiter)`\nProvide a custom implementation of DateRangeLimiter, giving you full control over which days are available for selection. This disables all of the other options that limit date selection.\n\n### `getOnTimeSetListener()` and `getOnDateSetListener()`  \nGetters that allow the retrieval of a reference to the callbacks currently associated with the pickers\n\n### [DatePickerDialog] `setScrollOrientation(ScrollOrientation scrollOrientation)` and `getScrollOrientationi()`\nDetermines whether months scroll `Horizontal` or `Vertical`. Defaults to `Horizontal` for the v2 layout and `Vertical` for the v1 layout\n\n## FAQ\n\n### Why does the `DatePickerDialog` return the selected month -1?\nIn the java `Calendar` class months use 0 based indexing: January is month 0, December is month 11. This convention is widely used in the java world, for example the native Android DatePicker.\n\n### How do I use a different version of a support library in my app?\nThis library depends on some androidx support libraries. Because the jvm allows only one version of a fully namespaced class to be loaded, you will run into issues if your app depends on a different version of a library than the one used in this app. Gradle is generally quite good at resolving version conflicts (by default it will retain the latest version of a library), but should you run into problems (eg because you disabled conflict resolution), you can disable loading a specific library for MaterialDateTimePicker.\n\nUsing the following snippet in your apps `build.gradle` file you can exclude this library's transitive appcompat library dependency from being installed.\n\n```groovy\nimplementation ('com.wdullaer:materialdatetimepicker:4.2.3') {\n        exclude group: 'androidx.appcompat'\n        exclude group: 'androidx.recyclerview'\n}\n```\n\nMaterialDateTimepicker uses the following androidx libraries:\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.0.2'\nimplementation 'androidx.recyclerview:recyclerview:1.0.0'\n```\n\nExcluding a dependency will work fine as long as the version your app depends on is recent enough and google doesn't release a version in the future that contains breaking changes. (If/When this happens I will try hard to document this). See issue [#338](https://github.com/wdullaer/MaterialDateTimePicker/issues/338) for more information.\n\n### How do I turn this into a year and month picker?\nThis DatePickerDialog focuses on selecting dates, which means that it's central design element is the day picker. As this calendar like view is the center of the design it makes no sense to try and disable it. As such selecting just years and months, without a day, is not in scope for this library and will not be added.\n\n### How do I select multiple days?\nThe goal of this library is to implement the Material Design Date picker. This design is focused on picking exactly 1 date (with a large textual representation at the top). It would require quite a bit of redesigning to make it useful to select multiple days. As such this feature is currently out of scope for this library and will not be added. If you happen to make a library that implements this, based on this code or not, drop me a line and I'll happily link to it.\n\n### How do I use my custom logic to enable/disable dates?\n`DatePickerDialog` exposes some utility methods to enable / disable dates for common scenario's. If your needs are not covered by these, you can supply a custom implementation of the `DateRangeLimiter` interface.\nBecause the `DateRangeLimiter` is preserved when the `Dialog` pauzes, your implementation must also implement `Parcelable`.\n\n```java\nclass MyDateRangeLimiter implements DateRangeLimiter {\n  public MyDateRangeLimiter(Parcel in) {\n\n  }\n\n  @Override\n  public int getMinYear() {\n    return 1900;\n  }\n\n  @Override\n  public int getMaxYear() {\n    return 2100;\n  }\n\n  @Override\n  public Calendar getStartDate() {\n    Calendar output = Calendar.newInstance();\n    output.set(Calendar.YEAR, 1900);\n    output.set(Calendar.DAY_OF_MONTH, 1);\n    output.set(Calendar.MONTH, Calendar.JANUARY);\n    return output;\n  }\n\n  @Override\n  public Calendar getEndDate() {\n    Calendar output = Calendar.newInstance();\n    output.set(Calendar.YEAR, 2100);\n    output.set(Calendar.DAY_OF_MONTH, 1);\n    output.set(Calendar.MONTH, Calendar.JANUARY);\n    return output;\n  }\n\n  @Override\n  public boolean isOutOfRange(int year, int month, int day) {\n    return false;\n  }\n\n  @Override\n  public Calendar setToNearestDate(Calendar day) {\n      return day;\n  }\n\n  @Override\n  public void writeToParcel(Parcel out) {\n\n  }\n\n  @Override\n  public int describeContents() {\n    return 0;\n  }\n\n  public static final Parcelable.Creator<MyDateRangeLimiter> CREATOR\n        = new Parcelable.Creator<MyDateRangeLimiter>() {\n    public MyDateRangeLimiter createFromParcel(Parcel in) {\n        return new MyDateRangeLimiter(in);\n    }\n\n    public MyDateRangeLimiter[] newArray(int size) {\n        return new MyDateRangeLimiter[size];\n    }\n  };\n}\n```\n\nWhen you provide a custom `DateRangeLimiter` the built-in methods for setting the enabled / disabled dates will no longer work. It will need to be completely handled by your implementation.\n\n### Why do the OK and Cancel buttons have the accent color as a background when combined with the Material Components library\n[Material Components](https://github.com/material-components/material-components-android) replaces all instances of `Button` with an instance of `MaterialButton` when using one of its regular themes: https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md#material-components-themes  \nThe default version of `MaterialButton` uses `colorPrimary` as the background color. Because Material Components replaces the View replacer with their own implementation there is not much I can do to fix this from this library.\n\nThere are a few workarounds:\n* Use one of the bridge themes, which do not replace the View Inflater\n* Overwrite the style of the mdtp buttons with one that inherits from Material Components text buttons, as described [here](https://github.com/wdullaer/MaterialDateTimePicker/issues/523#issuecomment-477349333):\n    ```xml\n    <style name=\"mdtp_ActionButton.Text\" parent=\"Widget.MaterialComponents.Button.TextButton.Dialog\"/>\n    ```\n* Overwrite the View inflater again in your application theme by adding the following statement in your application theme:\n    ```xml\n  <item name=\"viewInflaterClass\">androidx.appcompat.app.AppCompatViewInflater</item>\n    ```\n  You will then need to explicitly use `MaterialButton` in your application rather than `Button`\n\n### Why are my callbacks lost when the device changes orientation?\nThe simple solution is to dismiss the pickers when your activity is paused.\n\n```java\ntpd.dismissOnPause(true);\n```\n\nIf you do wish to retain the pickers when an orientation change occurs, things become a bit more tricky.\n\nBy default, when an orientation changes occurs android will destroy and recreate your entire `Activity`. Wherever possible this library will retain its state on an orientation change. The only notable exceptions are the different callbacks and listeners. These interfaces are often implemented on `Activities` or `Fragments`. Naively trying to retain them would cause memory leaks. Apart from explicitly requiring that the callback interfaces are implemented on an `Activity`, there is no safe way to properly retain the callbacks, that I'm aware off.\n\nThis means that it is your responsibility to set the listeners in your `Activity`'s `onResume()` callback.\n\n```java\n@Override\npublic void onResume() {\n  super.onResume();\n\n  DatePickerDialog dpd = (DatePickerDialog) getFragmentManager().findFragmentByTag(\"Datepickerdialog\");\n  TimePickerDialog tpd = (TimePickerDialog) getFragmentManager().findFragmentByTag(\"TimepickerDialog\");\n\n  if(tpd != null) tpd.setOnTimeSetListener(this);\n  if(dpd != null) dpd.setOnDateSetListener(this);\n}\n```\n\n\n## Potential Improvements\n* Landscape timepicker can use some improvement\n* Code cleanup: there is a bit too much spit and ductape in the tweaks I've done.\n* Document all options on both pickers\n\n\n## License\n    Copyright (c) 2015 Wouter Dullaert\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "README_ES.md",
          "type": "blob",
          "size": 23.0498046875,
          "content": "# Material DateTime Picker - Seleccione una hora/fecha con estilo\n\n[![Únete al chat en https://gitter.im/wdullaer/MaterialDateTimePicker](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/wdullaer/MaterialDateTimePicker?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n![Maven Central](https://img.shields.io/maven-central/v/com.wdullaer/materialdatetimepicker.svg)\n![estado de compilación](https://travis-ci.org/wdullaer/MaterialDateTimePicker.svg?branch=master)\n\n\nMaterial DateTime Picker intenta ofrecerle los selectores de fecha y hora como se muestra en [Especificación de diseño de materiales](http://www.google.com/design/spec/components/pickers.html), con una API\nfácil de usar.\nLa biblioteca utiliza [el código de los marcos de Android](https://android.googlesource.com/platform/frameworks/opt/datetimepicker/) La biblioteca utiliza [el código de los marcos de Android] como base y lo ajusta para que esté lo más idéntico posible al ejemplo de los diseños de materiales.\n\nSoporte para Android 4.1 y superior.\n\nSiéntase libre de crear un _fork_ o emitir solicitudes de _pull request_ en github. Los problemas se pueden informar en el rastreador de problemas github.\n\n**Diseño de la versión #2**\n\nSelector de fecha | Selector de tiempo\n--- | ---\n![Selector de fechas](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/date_picker_v2.png) | ![Selector de tiempo](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/time_picker_v2.png)\n\n**Diseño de la versión #1**\n\nSelector de fecha | Selector de tiempo\n---- | ----\n![Selector de fechas](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/date_picker.png) | ![Selector de tiempo](https://raw.github.com/wdullaer/MaterialDateTimePicker/gh-pages/images/time_picker.png)\n\n\n## Tabla de contenido\n    1. [Ajustar](#setup)\n    2. [Usar selectores de fecha/hora de material](#using-material-datetime-pickers)\n    1. [Implementar oyentes](#implement-an-ontimesetlistenerondatesetlistener)\n    2. [Crear selectores](#create-a-timepickerdialogdatepickerdialog-using-the-supplied-factory)\n    3. [Elección de tema para los Pickers](#theme-the-pickers)\n    3. [Opciones adicionales](#additional-options)\n    4. [Preguntas más frecuentes](#faq)\n    5. [Mejoras potenciales](#potential-improvements)\n6. [Licencia](#license)\n\n\n## Ajustes\n    La forma más fácil de agregar a la Biblioteca la _Material DateTime Picker_ a su proyecto es agregarla como una dependencia `build.gradle`\n    ```groovy\n    a sus dependencias{\n        implementation 'com.wdullaer:materialdatetimepicker:4.2.3'\n}\n```\n\nTambién puede agregar la biblioteca como una biblioteca de Android a su proyecto. Todos los archivos de la biblioteca están en `library`\n\nThe library also uses some Java 8 features, which Android Studio will need to transpile. This requires the following stanza in your app's `build.gradle`.\nSee https://developer.android.com/studio/write/java8-support.html for more information on Java 8 support in Android.\n ```groovy\n android {\n   ...\n   // Configure only for each module that uses Java 8\n   // language features (either in its source code or\n   // through dependencies).\n   compileOptions {\n     sourceCompatibility JavaVersion.VERSION_1_8\n     targetCompatibility JavaVersion.VERSION_1_8\n   }\n }\n ```\n\n\n## Usar Material DateTime Picker <tt>selectores de fecha/hora</tt>\nLa biblioteca sigue la misma API que otros selectores en el marco de Android.\nPara una implementación básica, necesitarás\n\n1. Implementar un `OnTimeSetListener`/`OnDateSetListener` <tt>Oyente en tiempo establecido/Oyente en la fecha establecida</tt>\n2. Crear un `TimePickerDialog`/`DatePickerDialog` <tt>Diagrama de selector de tiempo/Diagrama selector de fecha</tt> usando la fabricaciones previas suministradas\n3. Dale un tema a los selectores\n\n### Implementa la opción `OnTimeSetListener`/`OnDateSetListener` <tt>En oyente tiempo establecido/Oyente en la fecha establecida</tt>\nPara recibir la fecha u hora configurada en el selector, deberá implementar las interfaces `OnTimeSetListener` <tt>En oyente tiempo establecido</tt> o \n `OnDateSetListener` <tt>Oyente en la fecha establecida</tt>. Normalmente, esta será la `Activity` <tt>Actividad</tt> o `Fragment` <tt>Fragmentos</tt> que crearan los Selectores. Las devoluciones de llamada utilizan la misma API que los buscadores estándar de Android.\n```java\n@Override\npublic void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute, int second) {\n  String time = \"You picked the following time: \"+hourOfDay+\"h\"+minute+\"m\"+second;\n  timeTextView.setText(time);\n}\n\n@Override\npublic void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {\n  String date = \"You picked the following date: \"+dayOfMonth+\"/\"+(monthOfYear+1)+\"/\"+year;\n  dateTextView.setText(date);\n}\n```\n\n### Crea un `TimePickerDialog`/`DatePickerDialog` <tt>diálogo de selector de tiempo/diálogo selector de fecha</tt> usando las fabricaciones suministradas\nDeberá crear una nueva instancia de `TimePickerDialog` o `DatePickerDialog` <tt>diálogo de selector de tiempo/diálogo selector de fecha</tt> utilizando el método estático `newInstance()` <tt>Nueva instancia()</tt>, suministrando los valores predeterminados correctos y una devolución de llamada. Una vez que los diálogos están configurados, puede escribir `show()` <tt>mostrar()</tt>.\n```java\nCalendar now = Calendar.getInstance();\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n  MainActivity.this,\n  now.get(Calendar.YEAR),\n  now.get(Calendar.MONTH),\n  now.get(Calendar.DAY_OF_MONTH)\n);\n// If you are calling this from a support Fragment\ndpd.show(getFragmentManager(), \"Datepickerdialog\");\n// If you are calling this from an AppCompatActivity\n// dpd.show(getSupportFragmentManager(), \"Datepickerdialog\");\n```\n\n### Darle un tema a los selectores\nLa biblioteca contiene 2 versiones de diseño para cada selector.\n\n* Versión 1: este es el diseño original. Se basa en el diseño que Google utilizó en el kitkat y en la era inicial del diseño de materiales.\n* Versión 2: este diseño se basa en las directrices que Google publicó al ejecutar Android marshmallow. Este es el diseño predeterminado y aún el más actual.\n\nPuede configurar la versión de diseño usando la fábrica\n```java\ndpd.setVersion(DatePickerDialog.Version.VERSION_2);\n```\n\nLos selectores serán temáticos de forma automática en función del tema actual en el que se crean, en función del `ColorAccent` <tt>Acentuar color</tt> actual. También puede tema los cuadros de diálogo a través del método `setAccentColor(int color)`. Alternativamente, puedes darle un tema a los selectores sobrescribiendo los recursos de color `mdtp_accent_color` y `mdtp_accent_color_dark` en el proyecto.\n```xml\n<color name=\"mdtp_accent_color\">#009688</color>\n<color name=\"mdtp_accent_color_dark\">#00796b</color>\n```\n\nEl orden exacto en que se seleccionan los colores es el siguiente:\n\n1. `setAccentColor(int color)` en código java\n2. `android.R.attr.colorAccent` (si es Android 5.0+)\n3. `R.attr.colorAccent` (p.ej. cuando se usa AppCompat)\n4. `R.color.mdtp_accent_color` y `R.color.mdtp_accent_color_dark` si ninguno de los otros está configurado en su proyecto\n\nLos selectores también tienen un tema oscuro. Esto se puede especificar de forma global utilizando el atributo `mdtp_theme_dark` <tt>tema oscuro</tt> en su tema o las funciones `setThemeDark(boolean themeDark)` <tt>establecer el tema oscuro</tt>. La función llama a sobrescribir la configuración XML.\n```xml\n<item name=\"mdtp_theme_dark\">true</item>\n```\n\n\n## Opciones adicionales\n### [All] `setThemeDark(boolean themeDark)`\nEl diálogo tiene un tema oscuro que se puede establecer tipeando\n```java\ndialog.setThemeDark(true);\n```\n\n### [All] `setAccentColor(String color)` <tt>establecer el color (color de la cadena)</tt> y `setAccentColor(int color)`\nAjuste el color de acento que utilizará el cuadro de diálogo. La versión String analiza el color usando `Color.parseColor()`. La versión int requiere una cadena de bytes ColorInt. Establecerá explícitamente el color a totalmente opaco.\n\n### [All] `setOkColor()` <tt>ajustar color()</tt> y `setCancelColor()`<tt>cancelar ajuste de color()</tt>\nAjuste el color del texto para el botón Aceptar o Cancelar. Se comporta de manera similar a `setAccentColor()` <tt>establecer color de acento</tt>\n\n### [TimePickerDialog] `setTitle(String title)` <tt>selector de tiempo diálogo, establecer título (título de la cadena)</tt> \nMuestra un título en la parte superior del `TimePickerDialog` <tt>diálogo de selector de tiempo</tt>\n\n### [DatePickerDialog] `setTitle(String title)`\nMuestra un título en la parte superior del `DatePickerDialog` en lugar del día de la semana\n\n### [All] `setOkText()` y `setCancelText()`  \nAjuste el texto personalizado para el diálogo en Aceptar y cancelar etiquetas. Puede tomar recursos de una Cadena. Funciona tanto en DatePickerDialog como en TimePickerDialog\n\n### [DatePickerDialog] `setMinDate(Calendar day)`\nSet the minimum valid date to be selected. Date values before this date will be deactivated\n\n### [DatePickerDialog] `setMaxDate(Calendar day)`\nSet the maximum valid date to be selected. Date values after this date will be deactivated\n\n### [TimePickerDialog] `setMinTime(Timepoint time)`  \nAjuste el tiempo mínimo válido para ser seleccionados. Los valores de tiempo más temprano en el día serán desactivados\n\n### [TimePickerDialog] `setMaxTime(Timepoint time)`  \nAjuste el tiempo válido máximo para ser seleccionado. Los valores de tiempo más tarde en el día serán desactivados\n\n### [TimePickerDialog] `setSelectableTimes(Timepoint[] times)`  \nPuede pasar una serie de `Timepoints`. Estos valores son las únicas selecciones válidas en el selector. `setMinTime(Timepoint time)`, `setMaxTime(Timepoint time)` y `setDisabledTimes(Timepoint [] times)` recortarán aún más esta lista. Intente especificar puntos de tiempo solo hasta la resolución de su selector (es decir, no agregue segundos si la resolución del selector es de minutos).\n\n### [TimePickerDialog] `setDisabledTimes(Timepoint[] times)`  \nPuede pasar una serie de `Timepoints`. Estos valores no estarán disponibles para la selección. Estos tienen prioridad sobre `setSelectableTimes` y `setTimeInterval`. Tenga cuidado al usar esto sin tiempos seleccionables: el redondeo a un punto de tiempo válido es una operación muy costosa si se inhabilitan muchos puntos de tiempo consecutivos. Intente especificar Puntos de tiempo solo hasta la resolución de su selector (es decir, no agregue segundos si la resolución del selector es de minutos).\n\n### [TimePickerDialog] `setTimeInterval(int hourInterval, int minuteInterval, int secondInterval)`  \nEstablezca el intervalo de tiempos seleccionables en TimePickerDialog. Este es un contenedor de conveniencia alrededor de `setSelectableTimes`. El intervalo para los tres componentes de tiempo se puede establecer de forma independiente. Si no está utilizando el selector de segundos/minutos, configure el elemento respectivo en 60 para un mejor rendimiento.\n\n### [TimePickerDialog] `setTimepointLimiter(TimepointLimiter limiter)`  \nPase en una implementación personalizada de`TimeLimiter`\nDesactive `setSelectableTimes`, `setDisabledTimes`, `setTimeInterval`, `setMinTime` y `setMaxTime`\n\n### [DatePickerDialog] `setSelectableDays(Calendar[] days)`  \nYou can pass a `Calendar[]` to the `DatePickerDialog`. The values in this list are the only acceptable dates for the picker. It takes precedence over `setMinDate(Calendar day)` and `setMaxDate(Calendar day)`\n\n### [DatePickerDialog] `setDisabledDays(Calendar[] days)`  \nLos valores en este `Calendario []` están explícitamente deshabilitados (no seleccionables). Esta opción se puede usar junto con `setSelectableDays(Calendar [] days)`: en caso de que haya un conflicto `setDisabledDays(Calendar [] days)` tendrá prioridad sobre `setSelectableDays(Calendar [] days)`\n\n### [DatePickerDialog] `setHighlightedDays(Calendar[] days)`  \nPuede pasar un `Calendario []` de días para resaltar. Se presentarán en negrita. Puede modificar el color de los días resaltados sobrescribiendo `mdtp_date_picker_text_highlighted`\n\n### [DatePickerDialog] `showYearPickerFirst(boolean yearPicker)`  \nMuestre primero el selector de año, en lugar del selector de mes y día.\n\n### [All] `OnDismissListener` y `OnCancelListener`  \nAmbos selectores pueden pasar un `DialogInterface.OnDismissLisener` o` DialogInterface.OnCancelListener` que le permite ejecutar el código cuando se produce cualquiera de estos eventos.\n```java\ntpd.setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialogInterface) {\n      Log.d(\"TimePicker\", \"Dialog was cancelled\");\n    }\n});\n```\n\n### [All] `vibrate(boolean vibrate)` <tt>vibrar</tt> \nEstablezca si los cuadros de diálogo deben hacer vibrar el dispositivo cuando se realiza una selección. Esta predeterminación es `true`.\n\n## [All] `dismissOnPause(boolean dismissOnPause)` <tt>desactivado en pausa</tt> \nAjuste si el seleccionador se descarta cuando la Actividad principal está en pausa o si se recrea cuando se reanuda la Actividad.\n\n# [All] `setLocale(Locale locale)` <tt>establecer local</tt> \nPermite al cliente establecer una configuración regional personalizada que se utilizará al generar varias cadenas en los selectores. Por defecto, se usará la configuración regional actual del dispositivo. Debido a que los selectores se adaptarán a la configuración regional del dispositivo de forma predeterminada, solo debería tener que usar esto en circunstancias muy excepcionales.\n\n### [All] `autoDismiss(boolean autoDismiss)` <tt>descarte automático</tt>\nSi se establece en `true` <tt>cierto</tt>, se cerrará el selector cuando el usuario seleccione una fecha. Esta predeterminación es `false` <tt>falso</tt>.\n\n### [TimepickerDialog] <tt>Diagrama de selector de tiempo</tt> `enableSeconds(boolean enableSconds)` <tt>habilitar segundos</tt> and `enableMinutes(boolean enableMinutes)` <tt>habilitar minutos</tt>\nLe permite habilitar o deshabilitar un selector de segundos y minutos en el `TimepickerDialog`. Habilitar el selector de segundos implica habilitar el selector de minutos. Deshabilitar el selector de minutos desactivará el selector de segundos. Se usará la última configuración aplicada. Por defecto `enableSeconds = false` y `enableMinutes = true`.\n\n### [DatePickerDialog] <tt>Diagrama selector de fecha</tt> `setTimeZone(Timezone timezone)` <tt>establecer zona horaria</tt> *obsoleto*  \nEstablece la `Timezone` utilizada para representar el tiempo internamente en el selector. El valor predeterminado es la zona horaria predeterminada actual del dispositivo.\nEste método ha quedadoobsoleto: debe usar el método `newInstance()` que toma un calendario configurado en la TimeZone adecuada.\n\n### [DatePickerDialog] <tt>Diagrama selector de fecha</tt> `setDateRangeLimiter(DateRangeLimiter limiter)` <tt>ajuste el limitador de rango de fecha (limitador de límite de rango de fecha)</tt>\nProporcione una implementación personalizada de DateRangeLimiter, que le brinda control total sobre los días disponibles para la selección. Esto desactiva todas las demás opciones que limitan la selección de fecha.\n\n### [DatePickerDialog] `setScrollOrientation(ScrollOrientation scrollOrientation)` y `getScrollOrientationi()`\n\n### [TimePickerDialog] getOnTimeSetListener()` <tt>ponte a tiempo al oyente</tt> y `getOnDateSetListener()` <tt>ponerse al día con el oyente configurado</tt> \nRecibidores que permiten la recuperación de una referencia a las devoluciones de llamada actualmente asociadas con los recolectores\n\n## Preguntas más frecuentes\n\n### ¿Por qué el `DatePickerDialog` <tt>diálogo de selección de fechas</tt> devuelve el mes -1 seleccionado?\nEn la clase `Calendar` <tt>Calendario</tt> de Java, los meses usan indexación basada en 0: enero es el mes 0, diciembre es el mes 11. Esta convención es ampliamente utilizada en el mundo java, por ejemplo, el _native Android DatePicker_.\n\n### ¿Cómo uso una versión diferente de la biblioteca de soporte en mi aplicación?\nEsta biblioteca depende de la biblioteca del soporte de Android. Debido a que jvm solo permite cargar una versión de una clase con espacio de nombres completo, se encontrará con problemas si su aplicación depende de una versión diferente de la biblioteca de soporte que la utilizada en esta aplicación. Gradle es generalmente bueno resolviendo conflictos de versiones (por defecto conservará la última versión de una biblioteca), pero si tiene problemas (por ejemplo, porque ha desactivado la resolución de conflictos), \npuede desactivar la carga de la biblioteca de soporte para MaterialDateTimePicker <tt>material de selección de tiempo y fecha</tt>.\n\nUsando el siguiente fragmento en el archivo `build.gradle` de su aplicación, puede excluir la posibilidad de que se instale la biblioteca de soporte transitivo de esta biblioteca.\n\n```groovy\nimplementation ('com.wdullaer:materialdatetimepicker:4.2.3') {\n        exclude group: 'androidx.appcompat'\n        exclude group: 'androidx.recyclerview'\n}\n```\n\nSu aplicación deberá depender al menos de las siguientes piezas de la biblioteca de soporte\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.0.2'\nimplementation 'androidx.recyclerview:recyclerview:1.0.0'\n```\n\nEsto funcionará bien, siempre y cuando la versión de la biblioteca de soporte de la que depende su aplicación sea lo suficientemente reciente (admite `RecyclerView` <tt>Vista al reciclador</tt>) y google no lance una versión en el futuro que contenga cambios de última hora. (Si/Cuando esto ocurra, intentaré documentarlo). Vea el documento [#338](https://github.com/wdullaer/MaterialDateTimePicker/issues/338) para más información.\n\n### ¿Cómo puedo convertir esto en un selector de año y mes?\nEste DatePickerDialog <tt>Selector de fecha</tt> se enfoca en seleccionar fechas, lo que significa que su elemento de diseño central es el selector de días. Como esta vista de calendario es el centro del diseño, no tiene sentido intentar deshabilitarlo. Como tal, la selección de solo años y meses, sin un día, no está dentro del alcance de esta biblioteca y no se agregará.\n\n### How do I select multiple days? (TODO: find a translator for this)\nThe goal of this library is to implement the Material Design Date picker. This design is focused on picking exactly 1 date (with a large textual representation at the top). It would require quite a bit of redesigning to make it useful to select multiple days. As such this feature is currently out of scope for this library and will not be added. If you happen to make a library that implements this, based on this code or not, drop me a line and I'll happily link to it.\n\n### ¿Cómo uso mi lógica personalizada para habilitar/deshabilitar las fechas?\n`DatePickerDialog` <tt>Limitador de rango de fechas</tt> expone algunos métodos de utilidad para habilitar/deshabilitar fechas para escenarios comunes. Si sus necesidades no están cubiertas por estas, puede suministrar una implementación personalizada de la interfaz `DateRangeLimiter` <tt>Limitador de rango de fechas</tt>.\nDebido a que `DateRangeLimiter`<tt>Limitador de rango de fechas</tt> se conserva cuando el `Dialog` <tt>Dialogo</tt> hace una pausa, su implementación también debe implementar `Parcelable`.\n\n```java\nclass MyDateRangeLimiter implements DateRangeLimiter {\n  public MyDateRangeLimiter(Parcel in) {\n\n  }\n\n  @Override\n  public int getMinYear() {\n    return 1900;\n  }\n\n  @Override\n  public int getMaxYear() {\n    return 2100;\n  }\n\n  @Override\n  public Calendar getStartDate() {\n    Calendar output = Calendar.newInstance();\n    output.set(Calendar.YEAR, 1900);\n    output.set(Calendar.DAY_OF_MONTH, 1);\n    output.set(Calendar.MONTH, Calendar.JANUARY);\n    return output;\n  }\n\n  @Override\n  public Calendar getEndDate() {\n    Calendar output = Calendar.newInstance();\n    output.set(Calendar.YEAR, 2100);\n    output.set(Calendar.DAY_OF_MONTH, 1);\n    output.set(Calendar.MONTH, Calendar.JANUARY);\n    return output;\n  }\n\n  @Override\n  public boolean isOutOfRange(int year, int month, int day) {\n    return false;\n  }\n\n  @Override\n  public Calendar setToNearestDate(Calendar day) {\n      return day;\n  }\n\n  @Override\n  public void writeToParcel(Parcel out) {\n\n  }\n\n  @Override\n  public int describeContents() {\n    return 0;\n  }\n\n  public static final Parcelable.Creator<MyDateRangeLimiter> CREATOR\n        = new Parcelable.Creator<MyDateRangeLimiter>() {\n    public MyDateRangeLimiter createFromParcel(Parcel in) {\n        return new MyDateRangeLimiter(in);\n    }\n\n    public MyDateRangeLimiter[] newArray(int size) {\n        return new MyDateRangeLimiter[size];\n    }\n  };\n}\n```\n\nCuando proporcione un `DateRangeLimiter` <tt>Limitador de rango de fechas</tt> personalizado, los métodos integrados para configurar las fechas activadas/desactivadas ya no funcionarán. Tendrá que ser completamente manejado por tu implementación.\n\n### ¿Por qué se pierden mis devoluciones de llamada cuando el dispositivo cambia de orientación?\nLa solución simple es desactivar a los selectores cuando su actividad está en pausa.\n\n```java\ntpd.dismissOnPause(true);\n```\n\nSi desea retener a los selectores cuando ocurre un cambio de orientación, las cosas se vuelven un poco más complicadas.\n\nPor defecto, cuando se produce una orientación, Android destruye y recrea toda su `Activity` <tt>Actividad</tt>. Siempre que sea posible, esta biblioteca conservará su estado en un cambio de orientación. Las únicas excepciones notables son las diferentes devoluciones de llamada y oyentes. Estas interfaces a menudo se implementan en `Activities` <tt>Actividades</tt> o `Fragments` <tt>fragmentos</tt>. Tratar de retenerlos ingenuamente causaría pérdidas de memoria. Además de requerir explícitamente que las interfaces de devolución de llamada se implementen en una `Activity` <tt>Actividad</tt>, no hay una manera segura de retener las devoluciones de llamada de manera adecuada, que yo sepa.\n\nEsto significa que es su responsabilidad configurar a los oyentes en la `Activity`'s <tt>Actividad</tt> `onResume()` <tt>en espera</tt> de la devolución de llamadas.\n\n```java\n@Override\npublic void onResume() {\n  super.onResume();\n\n  DatePickerDialog dpd = (DatePickerDialog) getFragmentManager().findFragmentByTag(\"Datepickerdialog\");\n  TimePickerDialog tpd = (TimePickerDialog) getFragmentManager().findFragmentByTag(\"TimepickerDialog\");\n\n  if(tpd != null) tpd.setOnTimeSetListener(this);\n  if(dpd != null) dpd.setOnDateSetListener(this);\n}\n```\n\n\n## Mejoras potenciales\n* Landscape timepicker puede usar alguna mejora\n* Limpieza de código: hay un poco de saliva y cinta adhesiva en los ajustes que he hecho.\n* Documente todas las opciones en ambos selectores\n\n\n## Licencia\n    Copyright (c) 2015 Wouter Dullaert\n\n    Licencia bajo la Licencia Apache, Versión 2.0 (la \"Licencia\");\n    no puede usar este archivo excepto en conformidad con la licencia.\n    Ypuede obtener una copia de la licencia en\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    A menos que lo exija la ley aplicable o se acuerde por escrito, el software \n    distribuido bajo la Licencia se distribuye \"TAL CUAL\", SIN GARANTÍAS\n    O CONDICIONES DE NINGÚN TIPO, ya sea expresa o implícita.\n   Consulte la Licencia para conocer el idioma específico que rige los permisos y\n   limitaciones bajo la Licencia.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.458984375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.6.3'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.4306640625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\nVERSION_NAME=4.2.3\nVERSION_CODE=54\nGROUP=com.wdullaer\n\nANDROID_BUILD_MIN_SDK_VERSION=16\nANDROID_BUILD_TARGET_SDK_VERSION=28\nANDROID_BUILD_SDK_VERSION=28\nANDROID_BUILD_TOOLS_VERSION=28.0.3\n\nPOM_DESCRIPTION=Material DateTimepicker\nPOM_URL=https://github.com/wdullaer/MaterialDateTimePicker\nPOM_SCM_URL=https://github.com/wdullaer/MaterialDateTimePicker\nPOM_SCM_CONNECTION=scm:git@github.com:wdullaer/MaterialDateTimePicker.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:wdullaer/MaterialDateTimePicker.git\nPOM_LICENCE_NAME=Apache v2 License\nPOM_LICENCE_URL=https://github.com/wdullaer/MaterialDateTimePicker/blob/master/LICENSE\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=wdullaer\nPOM_DEVELOPER_NAME=Wouter Dullaert\n\nandroid.useAndroidX=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.77734375,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8720703125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      http://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.029296875,
          "content": "include ':library', ':sample'\n"
        },
        {
          "name": "supported_languages.txt",
          "type": "blob",
          "size": 0.3876953125,
          "content": "{\"af\", \"am\", \"ar\", \"bg\", \"bn\", \"ca\", \"cs\", \"da\", \"de\", \"el\", \"en\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fr\", \"gl\", \"hi\", \"hr\", \"hu\", \"hy\", \"in\", \"is\", \"it\", \"iw\", \"ja\", \"ka\", \"kk\", \"km\", \"kn\", \"ko\", \"ky\", \"lo\", \"lt\", \"lv\", \"mk\", \"ml\", \"mn\", \"mr\", \"ms\", \"my\", \"nb\", \"ne\", \"nl\", \"pl\", \"pt\", \"ro\", \"ru\", \"si\", \"sk\", \"sl\", \"sr\", \"sv\", \"sw\", \"ta\", \"te\", \"th\", \"tl\", \"tr\", \"uk\", \"ur\", \"uz\", \"vi\", \"zh\", \"zu\"}\n"
        }
      ]
    }
  ]
}