{
  "metadata": {
    "timestamp": 1736609017274,
    "page": 242,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jMonkeyEngine/jmonkeyengine",
      "stars": 3875,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0390625,
          "content": "**/nbproject/private/\n**/.classpath\n**/.settings\n**/.project\n**/.vscode/**\n**/out/\n/.gradle/\n/.nb-gradle/\n/.idea/\n/dist/\n/build/\n/bin/\n/netbeans/\n/.classpath\n/.project\n/.settings\n/local.properties\n*.dll\n*.so\n*.jnilib\n*.dylib\n*.iml\n*.class\n*.jtxt\n.gradletasknamecache\n.DS_Store\n/jme3-core/src/main/resources/com/jme3/system/version.properties\n/jme3-*/build/\n/jme3-*/bin/\n/jme3-bullet-native/bullet3.zip\n/jme3-bullet-native/bullet3-*/\n/jme3-bullet-native/src/native/cpp/com_jme3_bullet_*.h\n/jme3-android-native/openal-soft/\n/jme3-android-native/OpenALSoft.zip\n/jme3-android-native/src/native/jme_decode/STBI/\n/jme3-android-native/src/native/jme_decode/Tremor/\n/jme3-android-native/stb_image.h\n/jme3-examples/private/\n!/jme3-vr/src/main/resources/**/*.dylib\n!/jme3-vr/src/main/resources/**/*.so\n!/jme3-vr/src/main/resources/**/*.so.dbg\n!/jme3-vr/src/main/resources/**/*.dll\n!/jme3-vr/src/main/resources/**/*.pdb\n/buildMaven.bat\n/private\n.travis.yml\nappveyor.yml\njavadoc_deploy\njavadoc_deploy.pub\n!.vscode/settings.json\n!.vscode/JME_style.xml\n!.vscode/extensions.json\n"
        },
        {
          "name": ".nb-gradle-properties",
          "type": "blob",
          "size": 0.35546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<gradle-project-properties>\n  <!--DO NOT EDIT THIS FILE! - Used by the Gradle plugin of NetBeans.-->\n  <license-header>\n    <name>New BSD (3-clause) License</name>\n    <template>license.txt</template>\n    <property name=\"organization\">jMonkeyEngine</property>\n  </license-header>\n</gradle-project-properties>\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.662109375,
          "content": "# How to contribute to jMonkeyEngine\n\nFirst and foremost, you have to familiarize yourself with Git & GitHub. Dig through \n[help.github.com](https://help.github.com/), [try.github.io](http://try.github.io/) and the [gh cheat sheet](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md) if these are new topics for you. If you'd like to contribute with something other than code, just tell us about it on the forum.\n\n## Communication\n\nCommunication always comes first. **All** code changes and other contributions should start with the [forum](http://hub.jmonkeyengine.org/). Make a thread to explain your change and show us the important bits of your code. If the code is too long to be posted within the forum’s code tags, please paste your code in a Gist or pastebin and link to the submission in your thread. You are required to register on our website in order to create threads. (We do support login via GitHub though).\n\n### New Contributors\n\nCheck out the [Projects](https://github.com/jMonkeyEngine/jmonkeyengine/projects/1) tab, where the team has prioritized issues that you as a new contributor can undertake that will familiarize you to the workflow of contributing. This highlights some issues the team thinks would be a good start for new contributors but you are free to contribute on any other issues or integration you wish.\n\nWhen you're ready to submit your code, just make a [pull request](https://help.github.com/articles/using-pull-requests).\n\n- In your commit log message, please refer back to the originating forum thread (example) for a ‘full circle’ reference. Also please [reference related issues](https://help.github.com/articles/closing-issues-via-commit-messages) by typing the issue hashtag.\n- When committing, always be sure to run an update before you commit. If there is a conflict between the latest revision and your patch after the update, then it is your responsibility to track down the update that caused the conflict and determine the issue (and fix it). In the case where the breaking commit has no thread linked (and one cannot be found in the forum), then the contributor should contact an administrator and wait for feedback before committing.\n- If your code is committed and it introduces new functionality, please edit the wiki accordingly. We can easily roll back to previous revisions, so just do your best; point us to it and we’ll see if it sticks!\n\np.s. We will try hold ourselves to a [certain standard](http://www.defmacro.org/2013/04/03/issue-etiquette.html) when it comes to GitHub etiquette. If at any point we fail to uphold this standard, let us know.\n\nThere are many ways\nto submit a pull request (PR) to the \"jmonkeyengine\" project repository,\ndepending on your knowledge of Git and which tools you prefer.\n\n<details>\n    <summary>\n        <b>Click to view step-by-step instructions for a reusable setup\n        using a web browser and a command-line tool such as Bash.</b>\n    </summary>\n\nThe setup described here allows you to reuse the same local repo for many PRs.\n\n#### Prerequisites\n\nThese steps need only be done once...\n\n1. You'll need a personal account on https://github.com/ .\n   The \"Sign up\" and \"Sign in\" buttons are in the upper-right corner.\n2. Create a GitHub access token, if you don't already have one:\n  + Browse to https://github.com/settings/tokens\n  + Click on the \"Generate new token\" button in the upper right.\n  + Follow the instructions.\n  + When specifying the scope of the token, check the box labeled \"repo\".\n  + Copy the generated token to a secure location from which you can\n    easily paste it into your command-line tool.\n3. Create your personal fork of the \"jmonkeyengine\" repository at GitHub,\n   if you don't already have one:\n  + Browse to https://github.com/jMonkeyEngine/jmonkeyengine\n  + Click on the \"Fork\" button (upper right)\n  + Follow the instructions.\n  + If offered a choice of locations, choose your personal account.\n4. Clone the fork to your development system:\n  + `git clone https://github.com/` ***yourGitHubUserName*** `/jmonkeyengine.git`\n  + As of 2021, this step consumes about 1.3 GBytes of filesystem storage.\n5. Create a local branch for tracking the project repository:\n  + `cd jmonkeyengine`\n  + `git remote add project https://github.com/jMonkeyEngine/jmonkeyengine.git`\n  + `git fetch project`\n  + `git checkout -b project-master project/master`\n\n#### PR process\n\n1. Create a temporary, up-to-date, local branch for your PR changes:\n  + `git checkout project-master`\n  + `git pull`\n  + `git checkout -b tmpBranch` (replace \"tmpBranch\" with a descriptive name)\n2. Make your changes in the working tree.\n3. Test your changes.\n   Testing should, at a minimum, include building the Engine from scratch:\n  + `./gradlew clean build`\n4. Add and commit your changes to your temporary local branch.\n5. Push the PR commits to your fork at GitHub:\n  + `git push --set-upstream origin ` ***tmpBranchName***\n  + Type your GitHub user name at the \"Username\" prompt.\n  + Paste your access token (from prerequisite step 2) at the \"Password\" prompt.\n6. Initiate the pull request:\n  + Browse to [https://github.com/ ***yourGitHubUserName*** /jmonkeyengine]()\n  + Click on the \"Compare & pull request\" button at the top.\n  + The \"base repository:\" should be \"jMonkeyEngine/jmonkeyengine\".\n  + The \"base:\" should be \"master\".\n  + The \"head repository:\" should be your personal fork at GitHub.\n  + The \"compare:\" should be the name of your temporary branch.\n7. Fill in the textboxes for the PR name and PR description, and\n    click on the \"Create pull request\" button.\n\nTo amend an existing PR:\n  + `git checkout tmpBranch`\n  + Repeat steps 2 through 5.\n\nTo submit another PR using the existing local repository,\nrepeat the PR process using a new temporary branch with a different name.\n\nIf you have an integrated development environment (IDE),\nit may provide an interface to Git that's more intuitive than a command line.\n</details>\n\nGeneric instructions for creating GitHub pull requests can be found at\nhttps://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request\n\n### Core Contributors\n\nDevelopers in the Contributors team can push directly to Main instead of submitting pull requests, however for new features it is often a good idea to do a pull request as a means to get a last code review.\n\n## Customs around integration, branching, tagging, and releases\n\n- Most pull requests are integrated directly into the master branch of the repository.\n- Integrators should note, unless the history of the pull request is important, it should be integrated to a single commit using “squash and merge”. If the history is important, favor “rebase and merge”. Don’t create a merge commit unless GitHub cannot rebase the PR.\n- For each major release (such as v3.0 or v3.3), an appropriately named release branch is created in the repository.\n- For each minor (or “dot-dot”) release (such as v3.2.3), an appropriately named tag is created in the repository.\n- In general, library changes that plausibly might break existing apps appear only in major releases, not minor ones.\n\n\n## How to build the Engine from source\n\n### Prerequisites\n\nThese steps need only be done once...\n\n1. Install a Java Development Kit (JDK), if you don't already have one.\n2. Set the JAVA_HOME environment variable:\n  + using Bash: `export JAVA_HOME=\"` *path to your JDK* `\"`\n  + using PowerShell: `$env:JAVA_HOME = '` *path to your JDK* `'`\n  + using Windows Command Prompt: `set JAVA_HOME=\"` *path to your JDK* `\"`\n  + Tip: The path names a directory containing \"bin\" and \"lib\" subdirectories.\n    On Linux it might be something like \"/usr/lib/jvm/java-17-openjdk-amd64\"\n  + Tip: You may be able to skip this step\n    if the JDK binaries are in your system path.\n3. Clone the project repository from GitHub:\n  + `git clone https://github.com/jmonkeyengine/jmonkeyengine.git`\n  + `cd jmonkeyengine`\n  + As of 2021, this step consumes about 1.3 GBytes of filesystem storage.\n\n### Build command\n\nRun the Gradle wrapper:\n+ using Bash or PowerShell: `./gradlew build`\n+ using Windows Command Prompt: `.\\gradlew build`\n\nAfter a successful build,\nsnapshot jars will be found in the \"*/build/libs\" subfolders.\n\n### Related Gradle tasks\n\nYou can install the Maven artifacts to your local repository:\n + using Bash or PowerShell:  `./gradlew install`\n + using Windows Command Prompt:  `.\\gradlew install`\n\nYou can restore the project to a pristine state:\n + using Bash or PowerShell: `./gradlew clean`\n + using Windows Command Prompt: `.\\gradlew clean`\n\n## Best Practices\n\n### Git essentials\n\n- [Creating good pull requests](http://seesparkbox.com/foundry/creating_good_pull_requests)\n- [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request?utm_content=buffer0eb16&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n\n### Testing\n\ngeneral testing tips? WIP\n\n### Coding Style\n\n+ Our preferred style for Java source code is\n  [Google style](https://google.github.io/styleguide/javaguide.html) with the following 8 modifications:\n  1. No blank line before a `package` statement. (Section 3)\n  2. Logical ordering of class contents is encouraged but not required. (Section 3.4.2)\n  3. Block indentation of +4 spaces instead of +2. (Section 4.2)\n  4. Column limit of 110 instead of 100. (Section 4.4)\n  5. Continuation line indentation of +8 spaces instead of +4. (Section 4.5.2)\n  6. Commented-out code need not be indented at the same level as surrounding code. (Section 4.8.6.1)\n  7. The names of test classes need not end in \"Test\". (Section 5.2.2)\n  8. No trailing whitespace.\n+ Any pull request that adds new Java source files shall apply our preferred style to those files.\n+ Any pull request that has style improvement as its primary purpose\n  shall apply our preferred style, or specific aspect(s) thereof, to every file it modifies.\n+ Any pull request that modifies a pre-existing source file AND\n  doesn't have style improvement as it's primary purpose shall either:\n  1. conform to the prevailing style of that file OR\n  2. apply our preferred style, but only to the portions modified for the PR's primary purpose.\n\n### Code Quality\n\nMake an effort to write elegant code:\n\n 1. Handles errors gracefully\n 2. Only reinvents the wheel when there is a measurable benefit in doing so.\n 3. Has consistent naming conventions.\n 4. Has comments around ugly code explaining why it is ugly.\n 5. Compiles (or runs if interpreted) without warnings.\n\n## Reporting bugs\n\n 1. Start by searching the [forum](http://hub.jmonkeyengine.org) and GH issue tracker for duplicates.\n 2. Create a new issue, explaining the problem in proper detail (templates pending).\n\n## Documentation\n\n- How to edit the [wiki](https://github.com/jMonkeyEngine/wiki).\n- How to edit JavaDocs - WIP\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.4501953125,
          "content": "Copyright (c) 2009-2024 jMonkeyEngine.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.5546875,
          "content": "jMonkeyEngine\n=============\n\n[![Build Status](https://github.com/jMonkeyEngine/jmonkeyengine/workflows/Build%20jMonkeyEngine/badge.svg)](https://github.com/jMonkeyEngine/jmonkeyengine/actions)\n\njMonkeyEngine is a 3-D game engine for adventurous Java developers. It’s open-source, cross-platform, and cutting-edge.\nv3.7.0 is the latest stable version of the engine.\n\nThe engine is used by several commercial game studios and computer-science courses. Here's a taste:\n\n![jME3 Games Mashup](https://i.imgur.com/nF8WOW6.jpg)\n\n - [jME powered games on IndieDB](https://www.indiedb.com/engines/jmonkeyengine/games)\n - [Boardtastic 2](https://boardtastic-2.fileplanet.com/apk)\n - [Attack of the Gelatinous Blob](https://attack-gelatinous-blob.softwareandgames.com/)\n - [Mythruna](https://mythruna.com/)\n - [PirateHell (on Steam)](https://store.steampowered.com/app/321080/Pirate_Hell/)\n - [3089 (on Steam)](https://store.steampowered.com/app/263360/3089__Futuristic_Action_RPG/)\n - [3079 (on Steam)](https://store.steampowered.com/app/259620/3079__Block_Action_RPG/)\n - [Lightspeed Frontier (on Steam)](https://store.steampowered.com/app/548650/Lightspeed_Frontier/)\n - [Skullstone](http://www.skullstonegame.com/)\n - [Spoxel (on Steam)](https://store.steampowered.com/app/746880/Spoxel/)\n - [Nine Circles of Hell (on Steam)](https://store.steampowered.com/app/1200600/Nine_Circles_of_Hell/)\n - [Leap](https://gamejolt.com/games/leap/313308)\n - [Jumping Jack Flag](http://timealias.bplaced.net/jack/)\n - [PapaSpace Flight Simulation](https://www.papaspace.at/)\n - [Cubic Nightmare (on Itch)](https://jaredbgreat.itch.io/cubic-nightmare)\n - [Chatter Games](https://chatter-games.com)\n - [Exotic Matter](https://exoticmatter.io)\n - [Demon Lord (on Google Play)](https://play.google.com/store/apps/details?id=com.dreiInitiative.demonLord&pli=1)\n - [Marvelous Marbles (on Steam)](https://store.steampowered.com/app/2244540/Marvelous_Marbles/)\n - [Boxer (on Google Play)](https://play.google.com/store/apps/details?id=com.tharg.boxer)\n - [Depthris (on Itch)](https://codewalker.itch.io/depthris)\n - [Stranded (on Itch)](https://tgiant.itch.io/stranded)\n - [The Afflicted Forests (Coming Soon to Steam)](https://www.indiedb.com/games/the-afflicted-forests)\n - [Star Colony: Beyond Horizons (on Google Play)](https://play.google.com/store/apps/details?id=game.colony.ColonyBuilder)\n - [High Impact (on Steam)](https://store.steampowered.com/app/3059050/High_Impact/)\n\n## Getting Started\n\nGo to https://github.com/jMonkeyEngine/sdk/releases to download the jMonkeyEngine SDK.\nRead [the wiki](https://jmonkeyengine.github.io/wiki) for the installation guide and tutorials.\nJoin [the discussion forum](https://hub.jmonkeyengine.org/) to participate in our community,\nget your questions answered, and share your projects.\n\nNote: The master branch on GitHub is a development version of the engine and is NOT MEANT TO BE USED IN PRODUCTION.\n\n### Technology Stack\n\n - windowed, multi-platform IDE derived from NetBeans\n - libraries for GUI, networking, physics, SFX, terrain, importing assets, etc.\n - platform-neutral core library for scene graph, animation, rendering, math, etc.\n - LWJGL v2/v3 (to access GLFW, OpenAL, OpenGL, and OpenVR) or Android or iOS\n - Java Virtual Machine (v8 or higher)\n\n### Documentation\n\nDid you miss it? Don't sweat it, [here it is again](https://jmonkeyengine.github.io/wiki).\n\n### Contributing\n\nRead our [contribution guide](https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/CONTRIBUTING.md).\n\n### License\n\n[New BSD (3-clause) License](https://github.com/jMonkeyEngine/jmonkeyengine/blob/master/LICENSE.md)\n\n### How to Build the Engine from Source\n\n1. Install a Java Development Kit (JDK),\n   if you don't already have one.\n2. Point the `JAVA_HOME` environment variable to your JDK installation:\n   (In other words, set it to the path of a directory/folder\n   containing a \"bin\" that contains a Java executable.\n   That path might look something like\n   \"C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.3.7-hotspot\"\n   or \"/usr/lib/jvm/java-17-openjdk-amd64/\" or\n   \"/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\" .)\n  + using Bash or Zsh: `export JAVA_HOME=\"` *path to installation* `\"`\n  + using Fish: `set -g JAVA_HOME \"` *path to installation* `\"`\n  + using Windows Command Prompt: `set JAVA_HOME=\"` *path to installation* `\"`\n  + using PowerShell: `$env:JAVA_HOME = '` *path to installation* `'`\n3. Download and extract the engine source code from GitHub:\n  + using Git:\n    + `git clone https://github.com/jMonkeyEngine/jmonkeyengine.git`\n    + `cd jmonkeyengine`\n    + `git checkout -b latest v3.7.0-stable` (unless you plan to do development)\n  + using a web browser:\n    + browse to [the latest release](https://github.com/jMonkeyEngine/jmonkeyengine/releases/latest)\n    + follow the \"Source code (zip)\" link at the bottom of the page\n    + save the ZIP file\n    + extract the contents of the saved ZIP file\n    + `cd` to the extracted directory/folder\n4. Run the Gradle wrapper:\n  + using Bash or Fish or PowerShell or Zsh: `./gradlew build`\n  + using Windows Command Prompt: `.\\gradlew build`\n\nAfter a successful build,\nfresh JARs will be found in \"*/build/libs\".\n\nYou can install the JARs to your local Maven repository:\n+ using Bash or Fish or PowerShell or Zsh: `./gradlew install`\n+ using Windows Command Prompt: `.\\gradlew install`\n\nYou can run the \"jme3-examples\" app:\n+ using Bash or Fish or PowerShell or Zsh: `./gradlew run`\n+ using Windows Command Prompt: `.\\gradlew run`\n\nYou can restore the project to a pristine state:\n+ using Bash or Fish or PowerShell or Zsh: `./gradlew clean`\n+ using Windows Command Prompt: `.\\gradlew clean`\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 8.1962890625,
          "content": "import java.nio.file.Files;\nimport java.nio.file.StandardCopyOption;\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        google()\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath libs.android.build.gradle\n        classpath libs.gradle.retrolambda\n        classpath libs.spotbugs.gradle.plugin\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        google()\n    }\n    tasks.withType(Jar) {\n        duplicatesStrategy = 'include'\n    }\n}\n\n// Set the license for IDEs that understand this\next.license = file(\"$rootDir/source-file-header-template.txt\")\n\napply plugin: 'base'\napply plugin: 'com.github.spotbugs'\napply from: file('version.gradle')\n\napply plugin: 'me.tatarka.retrolambda'\n\n// This is applied to all sub projects\nsubprojects {\n    if(!project.name.equals('jme3-android-examples')) {\n        apply from: rootProject.file('common.gradle')\n    } else {\n        apply from: rootProject.file('common-android-app.gradle')\n    }\n\n    if (!project.name.endsWith(\"-native\") && enableSpotBugs != \"false\" ) {\n        apply plugin: 'com.github.spotbugs'\n\n        // Currently we only warn about issues and try to fix them as we go, but those aren't mission critical.\n        spotbugs {\n            ignoreFailures = true\n            toolVersion = '4.8.6'\n        }\n\n        tasks.withType(com.github.spotbugs.snom.SpotBugsTask ) {\n            reports {\n                html.enabled = !project.hasProperty(\"xml-reports\")\n                xml.enabled = project.hasProperty(\"xml-reports\")\n            }\n        }\n    }\n}\n\ntask run(dependsOn: ':jme3-examples:run') {\n    description = 'Run the jME3 examples'\n}\n\ndefaultTasks 'run'\n\ntask libDist(dependsOn: subprojects.build, description: 'Builds and copies the engine binaries, sources and javadoc to build/libDist') {\n    doLast {\n        File libFolder = mkdir(\"$buildDir/libDist/lib\")\n        File sourceFolder = mkdir(\"$buildDir/libDist/sources\")\n        File javadocFolder = mkdir(\"$buildDir/libDist/javadoc\")\n        subprojects.each {project ->\n            if(!project.hasProperty('mainClassName')){\n                project.tasks.withType(Jar).each {archiveTask ->\n                    String classifier = archiveTask.archiveClassifier.get()\n                    String ext = archiveTask.archiveExtension.get()\n                    if (classifier == \"sources\") {\n                        copy {\n                            from archiveTask.archivePath\n                                into sourceFolder\n                                rename {project.name + '-' + classifier + '.' + ext}\n                        }\n                    } else if (classifier == \"javadoc\") {\n                        copy {\n                            from archiveTask.archivePath\n                                into javadocFolder\n                                rename {project.name + '-' + classifier + '.' + ext}\n                        }\n                    } else{\n                        copy {\n                            from archiveTask.archivePath\n                                into libFolder\n                                rename {project.name + '.' + ext}\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\ntask createZipDistribution(type:Zip,dependsOn:[\"dist\",\"libDist\"], description:\"Package the nightly zip distribution\"){\n    archiveFileName = provider {\n        \"jME\" + jmeFullVersion + \".zip\"\n    }\n    into(\"/\") {\n         from {\"./dist\"}\n    }\n    into(\"/sources\") {\n        from {\"$buildDir/libDist/sources\"}\n    }\n}\n\ntask copyLibs(type: Copy){\n//    description 'Copies the engine dependencies to build/libDist'\n    from {\n        subprojects*.configurations*.implementation*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()\n    }\n\n    into \"$buildDir/libDist/lib-ext\" //buildDir.path + '/' + libsDirName + '/lib'\n}\n\ntask dist(dependsOn: [':jme3-examples:dist', 'mergedJavadoc']){\n    description 'Creates a jME3 examples distribution with all jme3 binaries, sources, javadoc and external libraries under ./dist'\n}\n\ndef mergedJavadocSubprojects = [\n        \":jme3-android\",\n        \":jme3-core\",\n        \":jme3-desktop\",\n        \":jme3-effects\",\n        \":jme3-ios\",\n        \":jme3-jbullet\",\n        \":jme3-jogg\",\n        \":jme3-lwjgl\",\n        \":jme3-lwjgl3\",\n        \":jme3-networking\",\n        \":jme3-niftygui\",\n        \":jme3-plugins\",\n        \":jme3-terrain\",\n        \":jme3-vr\"\n]\ntask mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {\n    title = 'jMonkeyEngine3'\n    destinationDir = mkdir(\"dist/javadoc\")\n\n    options.encoding = 'UTF-8'\n\n    // Allows Javadoc to be generated on Java 8 despite doclint errors.\n    if (JavaVersion.current().isJava8Compatible()) {\n        options.addStringOption('Xdoclint:none', '-quiet')\n    }\n\n    options.overview = file(\"javadoc-overview.html\")\n    source = mergedJavadocSubprojects.collect { project(it).sourceSets.main.allJava }\n    classpath = files(mergedJavadocSubprojects.collect { project(it).sourceSets.main.compileClasspath })\n}\n\nclean.dependsOn('cleanMergedJavadoc')\ntask cleanMergedJavadoc(type: Delete) {\n    delete file('dist/javadoc')\n}\n\ntask mergedSource(type: Copy){\n\n}\n\next {\n    ndkCommandPath  = \"\"\n    ndkExists       = false\n}\n\ntask configureAndroidNDK {\n    def ndkBuildFile = \"ndk-build\"\n    // if windows, use ndk-build.cmd instead\n    if (System.properties['os.name'].toLowerCase().contains('windows')) {\n        ndkBuildFile = \"ndk-build.cmd\"\n    }\n\n    // ndkPath is defined in the root project gradle.properties file\n    String ndkBuildPath = ndkPath + File.separator + ndkBuildFile\n    //Use the environment variable for the NDK location if defined\n    if (System.env.ANDROID_NDK != null) {\n        ndkBuildPath = System.env.ANDROID_NDK + File.separator + ndkBuildFile\n    }\n\n    if (new File(ndkBuildPath).exists()) {\n        ndkExists = true\n        ndkCommandPath = ndkBuildPath\n    }\n}\n\ngradle.rootProject.ext.set(\"usePrebuildNatives\", buildNativeProjects!=\"true\");\n\nif (skipPrebuildLibraries != \"true\" && buildNativeProjects != \"true\") {\n    String rootPath = rootProject.projectDir.absolutePath\n\n    Properties nativesSnapshotProp = new Properties()\n    File nativesSnapshotPropF = new File(\"${rootPath}/natives-snapshot.properties\");\n\n    if (nativesSnapshotPropF.exists()) {\n\n        nativesSnapshotPropF.withInputStream { nativesSnapshotProp.load(it) }\n\n        String nativesSnapshot = nativesSnapshotProp.getProperty(\"natives.snapshot\");\n        String nativesUrl = PREBUILD_NATIVES_URL.replace('${natives.snapshot}', nativesSnapshot)\n        println \"Use natives snapshot: \" + nativesUrl\n\n        String nativesZipFile = \"${rootPath}\" + File.separator + \"build\" + File.separator + nativesSnapshot + \"-natives.zip\"\n        String nativesPath = \"${rootPath}\" + File.separator + \"build\" + File.separator + \"native\"\n\n\n        task getNativesZipFile {\n            outputs.file nativesZipFile\n            doFirst {\n                File target = file(nativesZipFile);\n                println(\"Download natives from \" + nativesUrl + \" to \" + nativesZipFile);\n                target.getParentFile().mkdirs();\n                ant.get(src: nativesUrl, dest: target);\n            }\n        }\n\n        task extractPrebuiltNatives {\n            inputs.file nativesZipFile\n            outputs.dir nativesPath\n            dependsOn getNativesZipFile\n\n            doFirst {\n                for (File src : zipTree(nativesZipFile)) {\n                    String srcRel = src.getAbsolutePath().substring((int) (nativesZipFile.length() + 1));\n                    srcRel = srcRel.substring(srcRel.indexOf(File.separator) + 1);\n\n                    File dest = new File(nativesPath + File.separator + srcRel);\n                    boolean doCopy = !(dest.exists() && dest.lastModified() > src.lastModified())\n                    if (doCopy) {\n                        println(\"Copy \" + src + \" \" + dest);\n                        dest.getParentFile().mkdirs();\n                        Files.copy(src.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);\n                    }\n                }\n            }\n        }\n\n        assemble.dependsOn extractPrebuiltNatives\n    }\n}\n\nretrolambda {\n  javaVersion JavaVersion.VERSION_1_7\n  incremental true\n    jvmArgs '-noverify'\n}\n"
        },
        {
          "name": "common-android-app.gradle",
          "type": "blob",
          "size": 0.23828125,
          "content": "apply plugin: 'com.android.application'\n\ngroup   = 'org.jmonkeyengine'\nversion = jmeFullVersion\n\nsourceCompatibility = '1.6'\n\nrepositories {\n    mavenCentral()\n    maven {\n        url \"http://nifty-gui.sourceforge.net/nifty-maven-repo\"\n    }\n}\n"
        },
        {
          "name": "common.gradle",
          "type": "blob",
          "size": 6.0615234375,
          "content": "//\n// This file is to be applied to every subproject.\n//\n\napply plugin: 'java-library'\napply plugin: 'groovy'\napply plugin: 'maven-publish'\napply plugin: 'signing'\napply plugin: 'eclipse'\napply plugin: 'checkstyle'\n\neclipse.jdt.file.withProperties { props ->\n    props.setProperty \"org.eclipse.jdt.core.circularClasspath\", \"warning\"\n}\ngroup = 'org.jmonkeyengine'\nversion = jmeFullVersion\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n}\n\ntasks.withType(JavaCompile) { // compile-time options:\n    //options.compilerArgs << '-Xlint:deprecation' // to show deprecation warnings\n    options.compilerArgs << '-Xlint:unchecked'\n    options.encoding = 'UTF-8'\n    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {\n        options.release = 8\n    }\n}\n\nrepositories {\n    mavenCentral()\n    flatDir {\n        dirs rootProject.file('lib')\n    }\n}\n\ndependencies {\n    // Adding dependencies here will add the dependencies to each subproject.\n    testImplementation libs.junit4\n    testImplementation libs.mokito.core\n    testImplementation libs.groovy.test\n}\n\n// Uncomment if you want to see the status of every test that is run and\n// the test output.\n/*\ntest {\n    testLogging {\n        events \"passed\", \"skipped\", \"failed\", \"standardOut\", \"standardError\"\n    }\n}\n*/\n\njar {\n    manifest {\n        attributes 'Implementation-Title': 'jMonkeyEngine',\n                   'Implementation-Version': jmeFullVersion,\n                   'Automatic-Module-Name': \"${project.name.replace(\"-\", \".\")}\",\n                   'Created-By': \"${JavaVersion.current()} (${System.getProperty(\"java.vendor\")})\"\n    }\n}\n\njavadoc {\n    failOnError = false\n    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED\n    options.docTitle = \"jMonkeyEngine ${jmeFullVersion} ${project.name} Javadoc\"\n    options.windowTitle = \"jMonkeyEngine ${jmeFullVersion} ${project.name} Javadoc\"\n    options.header = \"<b>jMonkeyEngine ${jmeFullVersion} ${project.name}</b>\"\n    options.author = \"true\"\n    options.use = \"true\"\n    options.charSet = \"UTF-8\"\n    options.encoding = \"UTF-8\"\n    source = sourceSets.main.allJava // main only, exclude tests\n}\n\ntest {\n    testLogging {\n        exceptionFormat = 'full'\n    }\n}\n\ntask sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {\n    archiveClassifier = 'sources'\n    from sourceSets*.allSource\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc, description: 'Creates a jar from the javadoc files.') {\n    archiveClassifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\next.pomConfig = {\n    name POM_NAME\n    description POM_DESCRIPTION\n    url POM_URL\n    inceptionYear POM_INCEPTION_YEAR\n    scm {\n        url POM_SCM_URL\n        connection POM_SCM_CONNECTION\n        developerConnection POM_SCM_DEVELOPER_CONNECTION\n    }\n    licenses {\n        license {\n            name POM_LICENSE_NAME\n            url POM_LICENSE_URL\n            distribution POM_LICENSE_DISTRIBUTION\n        }\n    }\n    developers {\n        developer {\n            name 'jMonkeyEngine Team'\n            id 'jMonkeyEngine'\n        }\n    }\n}\n\nartifacts {\n    archives jar\n    archives sourcesJar\n    if (buildJavaDoc == \"true\") {\n        archives javadocJar\n    }\n}\n\npublishing {\n    publications {\n        maven(MavenPublication) {\n            artifact javadocJar\n            artifact sourcesJar\n            from components.java\n            pom {\n                description = POM_DESCRIPTION\n                developers {\n                    developer {\n                        id = 'jMonkeyEngine'\n                        name = 'jMonkeyEngine Team'\n                    }\n                }\n                inceptionYear = POM_INCEPTION_YEAR\n                licenses {\n                    license {\n                        distribution = POM_LICENSE_DISTRIBUTION\n                        name = POM_LICENSE_NAME\n                        url = POM_LICENSE_URL\n                    }\n                }\n                name = POM_NAME\n                scm {\n                    connection = POM_SCM_CONNECTION\n                    developerConnection = POM_SCM_DEVELOPER_CONNECTION\n                    url = POM_SCM_URL\n                }\n                url = POM_URL\n            }\n            version project.version\n        }\n    }\n    repositories {\n        maven {\n            name = 'Dist'\n            url = gradle.rootProject.projectDir.absolutePath + '/dist/maven'\n        }\n        maven {\n            credentials {\n                username = gradle.rootProject.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'\n                password = gradle.rootProject.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'\n            }\n            name = 'OSSRH'\n            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'\n        }\n\tmaven {\n\t    credentials {\n                username = gradle.rootProject.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'\n                password = gradle.rootProject.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'\n\t    }\n\t    name = 'SNAPSHOT'\n\t    url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'\n\t}\n    }\n}\n\npublishToMavenLocal.doLast {\n    println 'published ' + project.getName() + \"-${jmeFullVersion} to mavenLocal\"\n}\ntask('install') {\n    dependsOn 'publishToMavenLocal'\n}\n\nsigning {\n    def signingKey = gradle.rootProject.findProperty('signingKey')\n    def signingPassword = gradle.rootProject.findProperty('signingPassword')\n    useInMemoryPgpKeys(signingKey, signingPassword)\n\n    sign configurations.archives\n    sign publishing.publications.maven\n}\ntasks.withType(Sign) {\n    onlyIf { gradle.rootProject.hasProperty('signingKey') }\n}\n\ncheckstyle {\n    toolVersion libs.versions.checkstyle.get()\n    configFile file(\"${gradle.rootProject.rootDir}/config/checkstyle/checkstyle.xml\")\n}\n\ncheckstyleMain {\n    source ='src/main/java'\n}\n\ncheckstyleTest {\n    source ='src/test/java'\n}\n\ntasks.withType(Checkstyle) {\n    reports {\n        xml.required.set(false)\n        html.required.set(true)\n    }\n    include(\"**/com/jme3/renderer/**/*.java\")\n}"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.5693359375,
          "content": "# Version number: Major.Minor.SubMinor (e.g. 3.3.0)\r\njmeVersion = 3.8.0\r\n\r\n# Leave empty to autogenerate\r\n# (use -PjmeVersionName=\"myVersion\" from commandline to specify a custom version name )\r\njmeVersionName =\r\n\r\n# If true, the version name will contain the commit hash\r\nuseCommitHashAsVersionName = false\r\n\r\n# Set to true if a non-master branch name should be included in the automatically\r\n# generated version.\r\nincludeBranchInVersion = false\r\n\r\n# specify if JavaDoc should be built\r\nbuildJavaDoc = true\r\n\r\n# specify if SDK and Native libraries get built\r\nbuildNativeProjects = false\r\nbuildAndroidExamples = false\r\n\r\nbuildForPlatforms = Linux64,Linux32,Windows64,Windows32,Mac64\r\n# Forcefully ignore prebuilt libraries\r\nskipPrebuildLibraries=false\r\n\r\n# Enable spotbugs\r\nenableSpotBugs=false\r\n\r\n# Path to android NDK for building native libraries\r\n#ndkPath=/Users/normenhansen/Documents/Code-Import/android-ndk-r7\r\nndkPath = /opt/android-ndk-r16b\r\n\r\n# POM settings\r\nPOM_NAME=jMonkeyEngine\r\nPOM_DESCRIPTION=jMonkeyEngine is a 3-D game engine for adventurous Java developers\r\nPOM_URL=http://jmonkeyengine.org\r\nPOM_SCM_URL=https://github.com/jMonkeyEngine/jmonkeyengine\r\nPOM_SCM_CONNECTION=scm:git:git://github.com/jMonkeyEngine/jmonkeyengine.git\r\nPOM_SCM_DEVELOPER_CONNECTION=scm:git:git@github.com:jMonkeyEngine/jmonkeyengine.git\r\nPOM_LICENSE_NAME=New BSD (3-clause) License\r\nPOM_LICENSE_URL=http://opensource.org/licenses/BSD-3-Clause\r\nPOM_LICENSE_DISTRIBUTION=repo\r\nPOM_INCEPTION_YEAR=2009\r\n\r\nPREBUILD_NATIVES_URL=https://objects.jmonkeyengine.org/native-snapshots/${natives.snapshot}/jme3-natives.zip\r\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.501953125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.849609375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "javadoc-overview.html",
          "type": "blob",
          "size": 1.19921875,
          "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n\n<head>\n<title></title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n</head>\n<body>\n\njMonkeyEngine is a game engine made for developers who want to create 3D games \nfollowing modern technology standards. The framework is programmed entirely \nin Java aimed at wide accessibility and quick deployment to desktop, \nweb, and mobile platforms.\n\n<h3>Key Features</h3>\n<ul>\n<li>Free, open-source software (under the New BSD license) – Use our free engine for commercial, educational, or hobby game development</li>\n<li>Minimal adaptations for cross-compatibility – Create games that run on any OpenGL 2 and 3-ready device with the Java Virtual Machine – web, desktop, or mobile.</li>\n<li>Built around a shader-based architecture – Compliant with current and next generation graphics standards.</li>\n<li>jMonkeyEngine SDK – A complete development environment (IDE) with visual editors, integrated tools, and unique plugins.</li>\n<li>Complete and modular – The developer remains in power while getting all game development essentials straight out of the box.</li>\n</ul>\n    \n</body>\n</html>\n\n"
        },
        {
          "name": "jme3-android-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-android-native",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-android",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-awt-dialogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-desktop",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-effects",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-jbullet",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-jogg",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-lwjgl",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-lwjgl3",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-niftygui",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-plugins-json-gson",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-plugins-json",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-screenshot-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-terrain",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "jme3-vr",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "natives-snapshot.properties",
          "type": "blob",
          "size": 0.056640625,
          "content": "natives.snapshot=89000af21c0dabaad04815086c9b42e543e3a4dd\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.9541015625,
          "content": "/**\r\n * This is the global settings file used by all subprojects.\r\n **/\r\nrootProject.name = 'jmonkeyengine'\r\n\r\n// Core classes, should work on all java platforms\r\ninclude 'jme3-core'\r\ninclude 'jme3-effects'\r\ninclude 'jme3-networking'\r\ninclude 'jme3-plugins'\r\ninclude 'jme3-plugins-json'\r\ninclude 'jme3-plugins-json-gson'\r\n\r\ninclude 'jme3-terrain'\r\n\r\n// Desktop dependent java classes\r\ninclude 'jme3-desktop'\r\ninclude 'jme3-lwjgl'\r\nif (JavaVersion.current().isJava8Compatible()) {\r\n    include 'jme3-lwjgl3'\r\n    include 'jme3-vr'\r\n}\r\n\r\n// Other external dependencies\r\ninclude 'jme3-jbullet'\r\ninclude 'jme3-niftygui'\r\ninclude 'jme3-jogg'\r\ninclude 'jme3-android'\r\ninclude 'jme3-ios'\r\n\r\n//native builds\r\ninclude 'jme3-android-native' //cpp\r\n\r\n// Test Data project\r\ninclude 'jme3-testdata'\r\n\r\n// Example projects\r\ninclude 'jme3-examples'\r\ninclude 'jme3-awt-dialogs'\r\n\r\nif(buildAndroidExamples == \"true\"){\r\n    include 'jme3-android-examples'\r\n}\r\ninclude 'jme3-screenshot-tests'\r\n\r\n"
        },
        {
          "name": "source-file-header-template.txt",
          "type": "blob",
          "size": 2.1298828125,
          "content": "<#if licenseFirst??>\n${licenseFirst}\n</#if>\n${licensePrefix}Copyright (c) 2009-${date?date?string(\"yyyy\")} jMonkeyEngine\n${licensePrefix}All rights reserved.\n${licensePrefix?replace(\" +$\", \"\", \"r\")}\n${licensePrefix}Redistribution and use in source and binary forms, with or without\n${licensePrefix}modification, are permitted provided that the following conditions are\n${licensePrefix}met:\n${licensePrefix?replace(\" +$\", \"\", \"r\")}\n${licensePrefix}* Redistributions of source code must retain the above copyright\n${licensePrefix}  notice, this list of conditions and the following disclaimer.\n${licensePrefix?replace(\" +$\", \"\", \"r\")}\n${licensePrefix}* Redistributions in binary form must reproduce the above copyright\n${licensePrefix}  notice, this list of conditions and the following disclaimer in the\n${licensePrefix}  documentation and/or other materials provided with the distribution.\n${licensePrefix?replace(\" +$\", \"\", \"r\")}\n${licensePrefix}* Neither the name of 'jMonkeyEngine' nor the names of its contributors\n${licensePrefix}  may be used to endorse or promote products derived from this software\n${licensePrefix}  without specific prior written permission.\n${licensePrefix?replace(\" +$\", \"\", \"r\")}\n${licensePrefix}THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n${licensePrefix}\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n${licensePrefix}TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n${licensePrefix}PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n${licensePrefix}CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n${licensePrefix}EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n${licensePrefix}PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n${licensePrefix}PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n${licensePrefix}LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n${licensePrefix}NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n${licensePrefix}SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n<#if licenseLast??>\n${licenseLast}\n</#if>"
        },
        {
          "name": "version.gradle",
          "type": "blob",
          "size": 5.9248046875,
          "content": "\nimport java.text.SimpleDateFormat\nimport org.ajoberstar.grgit.*\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath libs.gradle.git\n    }\n}\n\next {\n    jmeRevision     = 0\n    jmeGitHash      = \"\"\n    jmeGitTag       = \"\"\n    jmeShortGitHash = \"\"\n    jmeBuildDate    = new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())\n    jmeBranchName   = \"unknown\"\n    jmeFullVersion  = \"${jmeVersion}-SNAPSHOT\"\n    jmeVersionTag=\"SNAPSHOT\"\n}\n\ntask configureVersionInfo {\n    try {\n        // Users can configure behavior by setting properties on the command\n        // line:\n        //\n        // jmeVersionName:\n        // If set this will override all automatic version detection.\n        //\n        // useCommitHashAsVersionName:\n        // If there is no jmeVersionName set and the current commit has no\n        // specific tag then setting this to 'true' will cause the version to\n        // be the full commit ID.\n        //\n        // includeBranchInVersion:\n        // Set to true if a non-master branch name should be included in the automatically\n        // generated version.\n\n        def grgit = Grgit.open(project.file('.'))\n        def head = grgit.head()\n        jmeRevision = grgit.log(includes: [head]).size()\n        jmeGitHash = head.id\n        jmeShortGitHash = head.abbreviatedId\n        jmeBranchName = grgit.branch.current.name\n\n        // This code will find an exact-match tag if the current\n        // commit is the same as the tag commit.\n        jmeGitTag = grgit.tag.list().find { it.commit == head }\n        def latestTag;\n        if( jmeGitTag ) {\n            // Just use the name.  We keep jmeGitTag separate because there\n            // is some logic that wants to know if this specific commit has\n            // a tag versus 'whatever tag we are a child of'... which is what\n            // 'latestTag' will be.\n            jmeGitTag = jmeGitTag.name\n            latestTag = jmeGitTag;\n        } else {\n            // Use describe to find the most recent tag.  Unfortunately,\n            // in this version of grgit, we don't have the 'always' options\n            // so we can't make as many assumptions about the format of the\n            // string.\n            // If the commit is an exact match then it will return just the\n            // tag name... else it will be tagName-commitCount-abbreviatedId\n            // We'll use some groovy regex magic to get the tag either way.\n            def describe = grgit.describe()\n            def fullDescribe = (describe =~/(.*?)-(\\d+)-g$jmeShortGitHash/)\n            latestTag = fullDescribe ? fullDescribe[0][1] : describe\n            println \"Latest tag:\" + latestTag\n        }\n\n        // We could enhance this with some more regex if we wanted to sanity\n        // check that it was formatted like our versions.\n        def tagVersion = (latestTag =~/v?(.*)/)[0][1];\n        // If the branch is not master then use the tag.\n        if( jmeBranchName != \"master\" ) {\n            jmeVersion = tagVersion\n        }\n\n        // Parse out just the base version part.  -SNAPSHOT versions\n        // shouldn't really include our release suffixes\n        def baseVersion = (jmeVersion =~/(\\d+\\.\\d+.\\d+)/)\n        baseVersion = baseVersion.size() > 0 ? baseVersion[0][0] : jmeVersion\n\n        if( !jmeVersionName ) {\n            // If there is a specific tag for the top commit then we always\n            // use that.\n            if( jmeGitTag ) {\n                println \"Using GIT tag as version\"\n                jmeFullVersion = tagVersion; // already cleaned up\n                jmeVersionTag = \"\"  // and no SNAPSHOT suffix for an exact version tag\n\n                // Note: this will not automatically add SNAPSHOT if the user has\n                // local changes that they haven't committed.  Technically, only\n                // real CI builds should be using non-SNAPSHOT versions so we may\n                // eventually want to change the script to always use -SNAPSHOT with\n                // a CI option to turn it off.\n                // We could also check the grgit.status for unstaged modified/removed files.\n                //     def unstaged = grgit.status().unstaged;\n                //     def modCount = unstaged.modified.size() + unstaged.removed.size()\n                // ...but that seems like a wasteful check considering only official\n                // version builds should not have a -SNAPSHOT.\n\n            } else if( useCommitHashAsVersionName == \"true\" && jmeGitHash ) {\n                // The user has opted to use the hash... and we actually have\n                // a hash.\n                println \"Using commit ID as version\"\n                jmeFullVersion = jmeGitHash;\n                jmeVersionTag = \"\"\n            } else {\n                println \"Auto-detecting version\"\n                jmeVersionTag = \"SNAPSHOT\"\n\n                if( includeBranchInVersion == \"true\" && jmeBranchName != \"master\" ) {\n                    jmeFullVersion = baseVersion + \"-\" + jmeBranchName + \"-\" + jmeVersionTag;\n                } else {\n                    jmeFullVersion = baseVersion + \"-\" + jmeVersionTag;\n                }\n            }\n        } else {\n            // Just use defaults\n            println \"Using user-defined version\"\n            jmeFullVersion=jmeVersionName\n            jmeVersionTag = \"SNAPSHOT\"\n        }\n\n        println(\"Revision: ${jmeRevision}\")\n        println(\"Hash: ${jmeGitHash}\")\n        println(\"Short Hash: ${jmeShortGitHash}\")\n        println(\"Tag: ${jmeGitTag}\")\n        println(\"Build Date: ${jmeBuildDate}\")\n        println(\"Build Branch: ${jmeBranchName}\")\n        println(\"Use commit hash as version ${useCommitHashAsVersionName}\")\n        println(\"Base Version: ${baseVersion}\")\n        println(\"Build Suffix: ${jmeVersionTag}\")\n        println(\"Build Version: ${jmeFullVersion}\")\n\n    } catch (ex) {\n        // Failed to get repo info\n        logger.warn(\"Failed to get repository info: \" + ex.message + \". \" + \\\n                    \"Only partial build info will be generated.\")\n    }\n}\n"
        }
      ]
    }
  ]
}