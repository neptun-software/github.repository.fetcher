{
  "metadata": {
    "timestamp": 1736708156982,
    "page": 600,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thymeleaf/thymeleaf",
      "stars": 2832,
      "defaultBranch": "3.1-master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.8271484375,
          "content": "# Auto detect text files and perform LF normalization\n*            text=auto\n\n*.java       text diff=java\n*.properties text\n*.js         text\n*.css        text\n*.less       text\n*.html       text diff=html\n*.jsp        text diff=html\n*.jspx       text diff=html\n*.tag        text diff=html\n*.tagx       text diff=html\n*.tld        text\n*.xml        text\n*.gradle     text\n\n*.sql        text\n\n*.xsd        text\n*.dtd        text\n*.mod        text\n*.ent        text\n\n*.txt        text\n*.md         text\n*.markdown   text\n\n*.thtest     text\n*.thindex    text\n*.common     text\n\n*.odt        binary\n*.pdf        binary\n\n*.sh         text eol=lf\n*.bat        text eol=crlf\n\n*.ico        binary\n*.png        binary\n*.svg        binary\n*.woff       binary\n\n*.rar        binary\n*.zargo      binary\n*.zip        binary\n\nCNAME        text\n*.MF         text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".classpath\n.project\ntarget/\nbin/\n.settings/\n.idea/\n*.iml\n\n"
        },
        {
          "name": "BUILD.txt",
          "type": "blob",
          "size": 0.3837890625,
          "content": "\n Building thymeleaf\n ------------------\n \n In order to build thymeleaf you will need Maven 3. You can get it at:\n \n     http://maven.apache.org\n\n Build and install the project executing, from the thymeleaf\n project root folder:\n \n     mvn clean package\n\n Besides all the binary, javadoc and sources artifacts, this will generate\n a Thymeleaf distribution archive in the \"dist/target\" folder.\n"
        },
        {
          "name": "CONTRIBUTING.markdown",
          "type": "blob",
          "size": 4.6572265625,
          "content": "# Contributing to Thymeleaf\n\nThymeleaf is released under the Apache 2.0 license. If you would like to\ncontribute something, or want to hack on the code this document should help you\nget started.\n\n\n## Code of Conduct\n\nThis project adheres to the Contributor Covenant\n[code of conduct][code-of-coduct].\nBy participating, you are expected to uphold this code. Please report\nunacceptable behavior to [the project leads][thymeleaf-team].\n\n\n## Using GitHub Issues\n\nWe use GitHub issues to track bugs and enhancements.\nIf you have a general usage question please ask on\n[Stack Overflow][stackoverflow].\nThe Thymeleaf team and the broader community monitor the \n[`thymeleaf`][stackoverflow-thymeleaf] tag.\n\nIf you are reporting a bug, please help to speed up problem diagnosis by\nproviding as much information as possible.\nIdeally, that would include a small sample project that reproduces the problem.\n\n\n## Before submitting a Contribution\n\nBefore submitting a contribution that is not an obvious or trivial fix, \nget in contact with the [the project leads][thymeleaf-team] about your\nideas (an email should do). Let us discuss the possibilities with you so that\nwe make sure your contribution goes in the right direction and aligns with the\nproject's standards, intentions and roadmap.\n\nPlease understand that *not all contributions will be accepted and merged into\nthe project's repositories*. Talking about your planned contributions with the\nproject maintainers before creating pull requests can maximize the possibility\nof your contributions being accepted.\n\n\n\n## Signing the Contributor License Agreement\n\nBefore we accept a non-trivial patch or pull request we will need you to\nsign a **Contributor License Agreement**.\n\nThere are two versions of the CLA:\n\n   * **Individual CLA**: For individuals acting on their own behalf, i.e. not\n     being backed by any company or government, and not making their\n     contributions potentially under the effect of any contracts, agreements or\n     laws that could cause their employeer (or any other entities) claim\n     any rights on their contribution.\n   * **Corporate CLA**: For corporate entities allowing some of their employees\n     to contribute to Thymeleaf on the entity's behalf.\n\nFor more information on the CLA and the (very easy) process involving this\nstep, please have a look at the [Thymeleaf CLA repository][cla].\n\n\n\n## Conventions and Housekeeping\n\n### General Guidelines:\n\n  - Obviously, **your code must both compile and work correctly**.\n  - All your code should be easy to read and understand by a human. The same\n    requirement applies to documentation.\n  - Unless for specific artifacts such as documentation translations, all\n    code, comments, documentation, names of classes and variables,\n    log messages, etc. must be **in English**.\n  - All contribured files must include the standard Thymeleaf copyright header.\n  - Maximum recommended line length is 120 characters. This is not strictly\n    enforced.\n  - Indentation should be made with 4 spaces, not tabs. Line feeds should be\n    UNIX-like (`\\n`).\n  - All source files should be pure ASCII, except `.properties` files which\n    should be ISO-8859-1.\n  - You shall add yourself as _author_ (e.g. Javadoc `@author`) to any files\n    that you create or modify substantially (more than cosmetic changes).\n\n### Specific Java Code Gudelines:\n\n  - All your code should compile and run in the current minimum Java version\n    of the project.\n  - All your code should follow the Java Code Conventions regarding\n    variable/method/class naming.\n  - Number autoboxing and/or autounboxing is forbidden.\n  - Every class should define a constructor, even if it is the no-argument\n    constructor, and include a call to `super()`.\n  - All method parameters should be declared as `final` so that they cannot be\n    changed or reassigned in the method.\n  - All non-nullable parameters in public methods should be first validated for\n    non-nullity inside the code.\n  - Existing Javadoc must be maintained along with performed changes. Addition\n    of new Javadoc for public methods or code comments for any non-trivial\n    algorithms is always welcome.\n  - Writing unit tests for new, existing and modified code is always welcome\n    too. For any new algorithms or functionality contributed, or substantial\n    modifications made to existing ones, the team might consider these a\n    requirement.\n\n\n\n\n[cla]: https://github.com/thymeleaf/thymeleaf-org/blob/CLA_CURRENT/CLA/\n[code-of-coduct]: https://github.com/thymeleaf/thymeleaf-org/blob/CoC_CURRENT/CoC/THYMELEAF_CODE_OF_CONDUCT.markdown\n[thymeleaf-team]: https://www.thymeleaf.org/team.html\n[stackoverflow]: https://stackoverflow.com\n[stackoverflow-thymeleaf]: https://stackoverflow.com/tags/thymeleaf\n"
        },
        {
          "name": "ChangeLog.txt",
          "type": "blob",
          "size": 51.828125,
          "content": "3.1.3\n=====\n- Allow java.util.atomic.concurrent.* classes in expressions.\n- Allow java.util.Deque in expressions.\n- Allow java.util.Currency in expressions.\n- Further restricted methods that can be called on Class objects in expressions.\n\n\n\n3.1.2\n=====\n- Allow java.sql.* types in expressions.\n- Allow OptionalInt, OptionalLong or OptionalDouble in expressions.\n- Allow java.util.UUID in expressions.\n- Allow direct use of java.util.Iterator.next() in expressions.\n- Forbid static access to org.springframework.util.* in expressions.\n- Fix support for <script type=\"module\"> in parser.\n- Upgrade AttoParser to 2.0.7.\n\n\n\n3.1.1\n=====\n- Fixed issue with mapping servlet context to requests when reverse proxies or multiple context\n  paths are being used.\n- Allow method calls on proxied instances while keeping instantiation of proxies still forbidden.\n\n\n\n3.1.0\n=====\n- Refactor project structure (new \"thymeleaf/thymeleaf\" repository).\n- Allowed example applications to be executed from command line.\n- Make Thymeleaf distribution package include all relevant project artifacts.\n\n\n\n3.1.0.RC2\n=========\n- Added java.util.Optional to the list of allowed classes in expressions.\n- Added the possibility to set a custom IMessageResolver in SpringTemplateEngine instances.\n- Improved rendering of time / date using formatstyle with temporals that are not complete datetimes.\n- Improved exception message when a method called in expressions does not exist.\n- Made JakartaServletWebApplication and JavaxServletWebApplication non-final so that they can be proxied.\n- Allowed the execution of methods in java.util.stream.Stream from expressions.\n\n\n\n3.1.0.RC1\n=========\n- Added support for iterating (th:each) on Java 8 streams.\n- Deprecation: Removed \"th:substituteby\".\n- Deprecation: Removed \"execInfo\" as a context variable.\n- Deprecation: Deprecated \"th:include\" and made it issue deprecation warnings.\n- Deprecation: Deprecated unwrapped fragment expression syntax and made it issue deprecation warnings.\n\n\n\n3.1.0.M3\n========\n- Integrated module \"thymeleaf-extras-java8time\" into Thymeleaf core.\n- Additional refactoring of project structure: merged thymeleaf-tests into the main \"thymeleaf\" repository.\n- Adapted and added all example applications from the \"thymeleaf-examples-*\" and \"thymeleaf-sandbox-*\" repositories\n  into the main \"thymeleaf\" repository.\n- Applied configuration of the \"cargo\" Maven plugin to war-based example applications to make them executable from\n  Maven command line.\n- Added example applications to Thymeleaf distribution artifacts in both binary form (Maven cargo / Spring Boot jar)\n  and source code form (buildable and executable from command line).\n\n\n\n3.1.0.M2\n========\n- Refactored project structure: merged thymeleaf-spring, thymeleaf-testing and thymeleaf-dist\n  into the main \"thymeleaf\" repository.\n- Added Maven multiproject infrastructure: added thymeleaf-parent, thymeleaf-lib and thymeleaf-testing-lib\n  pom artifacts.\n- Added project-wide BOM (thymeleaf-parent) for the unified management of dependency and plugin versions.\n- Removed website content from \"dist\" (thymeleaf-dist) in favour of the thymeleaf.github.com repository.\n- Refactored build and release procedure: replaced use of maven-release-plugin with maven-deploy-plugin.\n- Fixed missing null checks in web interfaces causing NPEs.\n- Fixed explanatory error message for removed expression utility objects.\n- Fixed type/member restriction application in order to avoid being too restrictive on valid interfaces.\n\n\n\n3.1.0.M1\n========\n- Support Servlet 5.0 (jakarta.*) namespace besides Servlet < 5 (javax.*).\n- Support Spring 6.0 (6.0.0-SNAPSHOT): new lib module thymeleaf-spring6.\n- Removed support for Spring 3.x and Spring 4.x.\n- Removed web-API based expression security objects (#request, #response, #session, #servletContext).\n- Set minimum JDK compatibility level to JDK 8 project-wide (JDK 17 for thymeleaf-spring6).\n- Seggregated Spring support in thymeleaf-testing into specific modules: thymeleaf-testing-spring5\n  and thymeleaf-testing-spring6.\n\n\n\n3.0.15\n======\n- Fix expression parsing inconsistency provoked by empty literal substitutions.\n- Block calling methods of blocked classes in expressions.\n- Block static and constructor access to certain classes.\n\n\n\n3.0.14\n======\n- Fixed inconsistent restricted variable access check due to caching.\n- Improved detection of restricted expression execution scenarios.\n- Improved detection of restricted usages of view names in direct request input.\n\n\n\n3.0.13\n======\n- Fixed CVE-2021-43466: Specific scenarios in template injection may lead to remote code execution.\n- Fixed incorrect double-unescaping of request parameters breaking processing of forms during restricted mode checks.\n- Fixed SpringStandardDialect not allowing the use of a custom IStandardConversionService.\n\n\n\n3.0.12\n======\n- Fixed #numbers.format*() expression utility methods not producing numbers using the correct digit symbols for\n  locales that use them, in JDK versions where NumberFormat does this (currently >= JDK15).\n- Fixed \"package-list\" not being produced for JavaDoc since JDK 11 started being used for compiling the project.\n- Added instantiation of new objects and calls to static classes as forbidden operations in restricted mode.\n- Updated OGNL dependency to 3.1.26.\n- Updated jackson-databind to 2.11.3 and jackson-datatype to 2.11.3 (due to vulnerabilities in previous versions).\n---\n- Fixed memory leak at ThymeleafViewResolver when redirects were being performed to dynamically built URLs.\n- Forbidden execution of view names as a fragment expressions if such view name is contained in the URL path\n  or query parameters.\n- Added instantiation of new objects and calls to static classes as forbidden operations in restricted mode.\n- Added encode() method to the #mvc expression utility object.\n- Adapted Spring WebFlow support to Spring WebFlow 2.5 after changes in API (WebFlow 2.5.0+ is now required).\n\n\n\n3.0.11\n======\n- Updated jackson-databind dependency to 2.9.7 (due to vulnerabilities in previous jackson version).\n---\n- Fixed non-blocking resolution of variables assuming a mutable model map and causing exception when adding\n  reactive variables for resolution using the WebFlux.Fn framework.\n- Fixed JPMS \"Automatic-Module-Name\" entry in MANIFEST.MF: Was \"thymeleaf-spring5\" but hyphen is a forbidden\n  character. New value is \"thymeleaf.spring5\".\n\n\n\n3.0.10\n======\n- Fixed StackOverflowError when inserting content before first element of model in a model processor.\n- Improved restricted expression evaluation mode to forbid output of textual data from context variables inside\n  JavaScript event handlers in HTML templates.\n- Improved HTML event handler attributes (th:on*) in order to allow processing of their values as fragments\n  of inlined JavaScript (using JAVASCRIPT template mode).\n- Improved use of template name abbreviation in logs and exceptions.\n- Added \"Automatic-Module-Name: thymeleaf\" to MANIFEST.MF for Java 9+ JPMS.\n- Updated AttoParser dependency to 2.0.5.RELEASE\n- Updated Unbescape dependency to 1.1.6.RELEASE\n---\n- Fixed th:field executing before th:remove and therefore potentially executing the ConversionService and the\n  RequestDataValueProcessor for values that are not meant to be displayed in the HTML result, which could lead\n  to unnecessary exceptions.\n- Fixed bean validation path not correctly binding expressions with brackets ([...]) when BindStatus was being\n  obtained with optional = true.\n- Added support for non-blocking resolution (before View rendering) of reactive variables specified by dialects\n  as execution attributes.\n- Avoided blocking in the (reactive) resolution of the WebSession returned by the SeverWebExchange in WebFlux apps.\n- Added a \"renderHiddenMarkersBeforeCheckboxes\" flag to SpringStandardDialect (also configurable from\n  SpringTemplateEngine) in order to instruct th:field to render the <input type=\"hidden\" ...> associated with\n  checkbox fields before the checkbox itself and not after, in order to improve compatibility with several CSS-based\n  frameworks.\n- Added a \"producePartialOutputWhileProcessing\" flag (default: true) to ThymeleafView and ThymeleafViewResolver in\n  order to be able to specify whether Thymeleaf should start producing output as soon as possible during template\n  processing (as is default) or on the contrary it should only start sending results to the web server's\n  output buffers when processing of the template has completely finished and output is rendered in memory.\n- Added \"Automatic-Module-Name: thymeleaf-spring5\" to MANIFEST.MF for Java 9+ JPMS.\n\n\n\n3.0.9\n=====\n- Fixed hit ratio in StandardCache not being correctly computed (always 1 or 0).\n- Improve restricted expression evaluation mode to restrict access to some request features\n  (#request.getParameter(), #request.getParameterValues(), #request.getParameterMap(), #request.getQueryString()).\n- Added new scenarios for restricted expression evaluation: th:on*, th:attr, th:src, th:href, default attribute\n  processor, fragment expressions, link expressions (only for URL bases), inlined output expression in TEXT mode.\n---\n- Fixed bean validation mechanism trying to create BindStatus for unbound objects because of an improper use of\n  a Spring 5 validation API.\n- Fixed RequestDataValueProcessor not being applied in Spring WebFlux applications.\n- Adapted Spring-based tag processors to new scenarios for restricted expression evaluation.\n\n\n\n3.0.8\n=====\n- Fixed WebEngineContext returning wrong boolean values for ServletContextAttributesMap#isEmpty() and\n  SessionAttributesMap#isEmpty().\n- Fixed DateFormat implementation being used for Jackson-based serialization of dates not implementing\n  clone() properly, which could result in thread-safety issues on the underlying SimpleDateFormat instance.\n- Fixed JavaScript parser failing on parsing JS regexp or JS template literals that contained unbalanced quotes.\n- Improved behaviour when parser-level or prototype-only comment block is not closed at the end of template. An\n  exception is now thrown.\n- Updated SLF4j dependency to 1.7.25.\n---\n- Fixed RequestDataValueProcessor being called without a default \"action\" attribute (with GET value) for\n  forms that included th:action, which resulted in CSRF token being added as a request parameter to the URL\n  in some scenarios.\n- Added \"th:uerrors\" attribute in order to easily output all selected errors without escaping the error messages.\n- Added \"fullModeViewNames\" and \"chunkedModeViewNames\" properties to ThymeleafReactiveViewResolver so that\n  the way the \"maxResponseChunkSize\" property is applied to templates can be fine-tuned. Templates can now be forced\n  to be executed in FULL mode, or specific sets of templates can be selected to be the only ones executed as CHUNKED.\n- Improved DATA-DRIVEN mode behaviour so that it now causes a flush of the server's output channels for every\n  output chunk produced (even if no max response chunk size has been set).\n- Added the SpringWebFluxContext class as a base implementation of ISpringWebFluxContext, useful for calling the\n  SpringWebFluxTemplateEngine cleanly from outside a ThymeleafReactiveView.\n- Added the capability to set a prefix to the names and IDs of SSE events, so that HTML events coming from different\n  executions of Thymeleaf in DATA-DRIVEN mode can be combined at the controller for UI composition in a single\n  event stream and then easily discriminated at the JavaScript side by the corresponding EventSource objects.\n- Removed the ReactiveLazyContextVariable context variable wrapper in order to avoid confusion with the way\n  lazy evaluation of non-data-driven reactive variables worked.\n- Set the default size of the buffers of elements generated by the data driver in DATA-DRIVEN mode to 10.\n- Updated Spring Framework dependencies to 5.0.0.RELEASE.\n- Updated SLF4j dependency to 1.7.25.\n\n\n\n3.0.7\n=====\n- Fixed JavaScript line comment (//) parsing breaks when EOF comes before \\n (script ends in the comment line).\n- Improved escaping of attributes in XML template mode: \\t, \\n and \\r now being always escaped in order to prevent\n  them being normalised into white spaces by XML parsers when reading (which would be according to the spec).\n- Improved #numbers.sequence(...) behaviour so that zero-element sequences are now returned when it is not possible\n  to get from the initial to the final values using the specified step (was returning an error).\n- Updated Unbescape dependency to 1.1.5.RELEASE.\n---\n- Fixed exception being thrown when more than one ConversionService is available at the application context\n  (e.g. in scenarios where Spring Cloud Stream is present).\n\n\n\n3.0.6\n=====\n- Fixed unclosed quote in JavaScript/CSS comments breaking parsing (wrongly considered literal starts).\n- Fixed bad parsing of '/content()' selector (AttoParser) in some scenarios, leading to suboptimal execution of\n  this type of fragment selection.\n- Fixed prevent fragments without a signature being called with unnamed parameters.\n- Added allowing template suffix to be applied only if template name doesn't already have a known file extension.\n- Added application of template mode depending on template resource extension during resolution.\n- Improved the way output content type and template mode relate to each other (made exclusive) in TemplateSpec.\n- Improved instances of dynamic class loading by making references package-relative for better resilience\n  to package renaming.\n- Updated AttoParser dependency to 2.0.4.RELEASE.\n---\n- Added automatic negotiation of ContentType at the ViewResolver depending on view name (file extension).\n- Improved instances of dynamic class loading by making references package-relative for better resilience\n  to package renaming.\n\n\n\n3.0.5\n=====\n- Fixed bad interaction of literal parsing in javascript inlining introduced in 3.0.4, causing inlined expressions\n  containing literals ('...') to not be adequately parsed, and therefore not executed at all.\n\n\n3.0.4\n=====\n- Fixed possible bad parsing of comment start/end delimiters in JavaScript and CSS inlining when the 2K buffer\n  used at the Text Parser happened to end in the middle of a JavaScript/CSS text literal.\n- Fixed bad behaviour of th:remove=\"all-but-first\" in combination with a th:each on a zero-element collection.\n- Fixed custom HTML5 elements with no suffix in their names (\"<tag->\", which are allowed by the Custom\n  Element spec) provoking an exception.\n- Improved startup times at the template engine by means of lazy initialization of dialect artifacts.\n- Added '/content()' selector to Markup Selector syntax so that the whole contents of a fragment can be\n  selected, excluding the matched tag.\n- Updated AttoParser dependency to 2.0.3.RELEASE.\n---\n- Improved startup times at the template engine by means of lazy initialization of dialect artifacts.\n- Improve behaviour of SpringContextUtils.getApplicationContext(): avoided cast exception when ApplicationContext\n  is not available.\n- Added support for rendering Server-Sent Events (SSE) with content-type \"text/event-stream\" in Spring 5 WebFlux\n  when Thymeleaf is executing in reactive-friendly data-driven mode.\n- Updated Spring Framework dependency to 5.0.0.M5.\n\n\n\n3.0.3\n=====\n- Fixed empty comments (<!---->) not being properly parsed and recognised (AttoParser).\n- Fixed text parser wrongly recognizing comment start prefixes ('/*') even if inside JavaScript/CSS literals.\n- Fixed #numbers.sequence(from,to) throwing an exception if from > to (bad computation of 'step' argument).\n- Fixed OGNL expressions calling the 'hashCode()' method instead of accessing a public 'code' property.\n- Improved JavaScript serialization: allow Jackson to (optionally) serialise JSR310 dates as ISO8601\n- Improved cache monitoring: published counters and added hit/miss ratios.\n- Updated AttoParser dependency to 2.0.2.RELEASE.\n- Updated OGNL dependency to 3.1.12.\n---\n- First release of thymeleaf-spring5, includes\n  * Support for Spring 5 Web MVC\n  * Support for Spring 5 Web Reactive\n\n\n\n3.0.2\n=====\n- Fixed <head> being aggressively auto-closed by block tags inside <script> or <template> tags, which\n  caused JavaScript template fragments to be incorrectly inserted from other templates.\n- Fixed Jackson not escaping '</' in JavaScript/JSON literals, which could allow code injection that\n  prematurely closed </script> tags when browsers display pages in HTML mode.\n- Fixed JavaScript/JSON literals not escaping amperand (&), which could allow code injection that\n  prematurely closed </script> tags when browsers display pages in XHTML (application/xhtml+xml) mode.\n- Improved error handling during Jackson initialization.\n- Updated AttoParser dependency to 2.0.1.RELEASE.\n- Updated Unbescape dependency to 1.1.4.RELEASE.\n- Updated OGNL dependency to 3.1.10, removed direct dependency on javassist.\n\n\n3.0.1\n=====\n- Fixed bad results of integer division in some scenarios due to BigDecimal conversion.\n- Fixed th:switch not correctly working with variable of type Byte.\n- Fixed Java version compatibility issue when calling StandardCache.keySet() from Java 7.\n- Improved error handling during initialisation of Jackson-based JavaScript serializer objects.\n\n\n3.0.0\n=====\nSee: http://forum.thymeleaf.org/Thymeleaf-3-0-is-here-td4029676.html\n     http://www.thymeleaf.org/doc/articles/thymeleaf3migration.html\n- New event-based template processing engine\n- Full HTML5 support, new parsing infrastructure\n- Thymeleaf 3.0 Template Mode set\n- Inlined output expressions\n- New syntax for textual template modes\n- Refactoring of the inlining mechanism\n- New Processor API\n- New Pre-Processor and Post-Processor APIs\n- New Dialect API\n- Refactoring of the Template Resolution API\n- Refactoring of the Context API\n- Refactoring of the Message Resolution API\n- Fragment Expressions\n- The NO-OP token\n- Decoupled Template Logic\n- New extension point: Link Builders\n- Throttled template execution\n\n\n2.1.4\n=====\n- Fixed expression execution exceptions being silently ignored in javascript/dart inlining.\n- Fixed second-level th:object being ignored when combined with th:remove=\"tag\".\n- Fixed bad merging of non-element processors in dialects.\n- Fixed bad output of java.util.Date and java.sql.Date in JavaScript inlining. Now all objects of classes\n  java.util.Calendar, java.util.Date and java.sql.Date are inlined as ISO8601 date string literals\n  (e.g. '2013-01-01T14:30:00.000+02:00').\n- Fixed StandardCache not dealing with SoftReferences correctly under specific get/put sequence scenarios.\n- Added new \"#uris\" expression utility object for performing escape operations for URI/URLs (paths,\n  path segments, query parameters and fragment identifiers).\n- Added StandardCache.keySet() method in order to obtain the names of all the entries currently present\n  in a cache (e.g. template or expression caches).\n- Improved performance of WebVariablesMap by avoiding calls to HttpServletRequest.getAttributeNames(), very slow\n  and memory-inefficient in Tomcat implementations.\n- Improved performance of DOM tree processing during template execution.\n- Improved MANIFEST jar metadata.\n- Modified URI/URL escaping artifacts: now they are based on the Unbescape library [ http://www.unbescape.org ].\n- Updated dependencies (OGNL 3.0.6 -> 3.0.8; nekohtml 1.9.15 -> 1.9.21; slf4j 1.6.1 -> 1.6.6)\n\n\n2.1.3\n=====\n- Added support for variable templates in Link Expressions: @{/order/details/{id}/{action}(id=3,action='show_all')}\n- Added new th:styleappend attribute for adding content to the existing 'style' attribute value in a tag.\n- Added #strings.defaultString(str,default) as an alias for ${str == null || str.isEmpty()} ? ${default} : ${str}\n- Improved representation of java.util.Date and java.sql.Date objects in JavaScript inlining operations.\n- Fixed several escaping issues by implementing a new markup escape/unescape mechanism based on the Unbescape\n  library [ http://www.unbescape.org ]. Deprecated old escaping artifacts in the DOMUtils class.\n- Fixed parameter names not being URL-encoded in Link Expressions: @{/order/details('one parameter'='one value')}\n- Fixed parentheses inside literals in link parameters break Link Expression parsing.\n- Fixed XHTML 1.1 DTDs not being valid (DTD parsing error).\n- Fixed bad relative URLs in XHTML 1.0 Frameset DTDs.\n- Fixed arithmetic exception in #aggregates.avg() if result has a non-terminating decimal expansion.\n- Fixed JavaScript inlining not closing expressions properly when they appear between parentheses.\n\n\n2.1.2\n=====\n- Fixed pipe character (|) causing expression parsing exceptions when used inside text literals.\n- Fixed required dependency on OGNL in Spring environments being re-introduced in 2.1 due to\n  reference to OgnlVariableExpressionEvaluator in StandardDialect's initialization.\n- Fixed StackOverflowError when parsing expression tokens with the '--' string.\n- Fixed local variables for fragment arguments being completely replaced on NestableNode.extractChild(...),\n  causing e.g. th:replace to not apply fragment arguments correctly in double-nested fragments.\n\n\n2.1.1\n=====\n- Fixed th:remove attribute not being removed from output when expression evaluated as 'none'.\n- Fixed flags for processing text and comment nodes not being correctly propagated to children\n  when they were added.\n\n\n2.1.0 (from 2.0.19)\n===================\n(See What's New in Thymeleaf 2.1 at http://www.thymeleaf.org/whatsnew21.html)\n- New feature: Same-template fragments\n- New feature: Parameterizable fragment signatures\n- New feature: More powerful DOM selector syntax\n- New feature: Literal tokens\n- New feature: Boolean and null literals\n- New feature: Literal substitutions\n- New feature: Protocol-relative URLs\n- New feature: Parser-level comment blocks\n- New feature: Prototype-only comment blocks\n- New feature: Improved th:remove attribute\n- New feature: Synthetic th:block tag\n- New feature: Support for HTML5-friendly attribute and element names\n- New feature: New th:assert for in-template assertions\n- New feature: New th:replace as a synonym of th:substituteby\n- New feature: Reuse variables in th:with\n\n\n2.0.19\n======\n- Added support for URLs without query string like @{''(p1)}.\n- Fixed nekoHTML introducing too many HTML wrapper tags around markup fragments in LEGACYHTML5 mode.\n- Fixed bad replacing of inlined javascript variables in text containing '//'.\n- Fixed potential issues parsing UTF-8 templates including BOM (Byte Order Mark) symbols.\n\n\n2.0.18\n======\n- Fixed EnumMap's (and maybe other implementations of Map) not iterating correctly (always repeating the\n  same element) because of their internal iterators reusing the same Map.Entry object.\n- Fixed th:attr not correctly rendering fixed-value conditional attributes like \"multiple\", \"selected\",etc.\n- Fixed th:attrappend, th:attrprepend and th:classappend not correctly render results when the \n  appended attribute already exists and is empty before processing the template.\n- Fixed fixed-value conditional attributes not removing the target attribute on false evaluation if \n  it this target attribute already existed before processing.\n- Fixed multiple execution of \"th:case\" inside \"th:switch\" possible when th:case=\"*\" appeared before\n  non-default case blocks.\n- Fixed bad removal of prototyping JS code in lines not ended with \";\" or \",\" (like the last lines of\n  an array or object definition).\n- Added th:replace as a synonym for th:substituteby.\n- Added literal synonyms for operators in standard expressions: \"ne\" (!=), \"div\" (/), \"mod\" (%), \"not\" (!).\n- Minor fix on DOM Selectors when first level is '/' and not '//'.\n\n\n2.0.17\n======\n- Fixed resource bundle messages not being processed as such when message parameters were empty.\n- Fixed link expressions not correctly handling #{...} expressions as base URL.\n- Fixed link expressions with parenthesized base URLs and no parameters (\"@{(${base})}\") not being \n  correctly parsed.\n- Added a way to escape \"__\" string in attributes (\"\\_\\_\") without being parsed as a preprocessing mark.\n- Fixed handling of local variables map in Node class so that variables added directly with\n  node.setNodeLocalVariable(...) are immediately available for next processors being executed and children\n  nodes.\n- Fixed behaviour of th:remove=\"all-but-first\". Non-element nodes were not being copied if more than\n  one child element existed.\n- Fixed ArithmeticException in number literal division if result has a non-terminating decimal expansion.\n- Fixed whitespace around comments dissappearing after template processing. \n- Fixed JavaScript/Dart inlining not correctly adding a final semicolon if a comment is present after \n  the \";\" sign.\n- Updated OGNL dependency from version 3.0.5 to 3.0.6.\n- Fixed equality comparison between Strings and Characters.\n- Added \"shouldRemoveAttribute()\" protected method to AbstractAttributeModifierAttrProcessor so that\n  subclasses can avoid this removal if necessary.\n\n\n2.0.16\n======\n- Added method to retrieve all names of specific caches from ICacheManager implementations.\n- Added method to clear all caches in ICacheManager implementations.\n- Added StringUtils.randomAlphanumeric(...) utility method.\n- Added to ElementNameProcessorMatcher the possibility not to apply dialect prefix to element name \n  when matching.\n- Forbidden the inclusion of request parameter variables ('param.*') in preprocessing expressions\n  and th:utext attribute values.\n- Added null-safe #strings.equals(...) and #strings.equalsIgnoreCase(...) utility methods.\n- Added null-safe #strings.concat(...) and #strings.concatReplaceNulls(...) utility methods.\n- Modified JavaScript escaping so that '/' is only escaped if appears after '<'.\n  \n\n2.0.15\n======\n- Modified Link URL generation in @{...} expressions in order to use response.encodeURL(...) instead\n  of always adding jsessionid, for better web container integration.\n- Divide \"processOnlyElementNodes\" flag in Arguments into two different flags (processTextNodes\n  and processCommentNodes) in order to allow activation of text/comment processing separately.\n- Fixed: Added close operation on template Readers in case a parsing exception occurs.\n- Fixed: Removed case-sensitivity resolving element processors.\n  \n\n2.0.14\n======\n- Make \"and\" and \"or\" operators in Standard Expressions short circuit (second operand is never\n  evaluated if first operand gives enough information). \n- Added \"additionalProcessors\" property to StandardDialect in order to being able to easily add\n  a set of custom processors to the Standard or SpringStandard dialects.\n- Added #vars expression utility object as a synonym to #root.  \n- Fixed flags recomputeProcessorsImmediately and recomputeProcessorsAfterEachExecution not\n  being able to trigger a true re-computation of an element.\n- Fixed null dialect prefixes causing an exception.\n- Added future-parser support for non-XML-well-formed template code.\n\n\n2.0.13\n======\n- Fixed selection target not being correctly applied to Node as a local variable, and \n  this resulting in *{...} not working OK when th:object was specified in an element\n  with th:remove=\"tag\".\n- Fixed thread indexes and other thread-local-maintained information not being\n  correctly updated with nested executions.\n- Added \"setProcessable(...)\" to DOM nodes in order to differentiate between skippability\n  (apparently having no applicable processors) and processability (allowance or\n  prohibition on a node's execution).\n- Created org.thymeleaf.processor.document package for easily creating processors for\n  Document nodes.\n- Created org.thymeleaf.processor.document.ProcessAllNodesDocumentProcessor for\n  setting the \"processOnlyElementNodes\" flag to false at the beginning of template\n  execution.\n\n\n2.0.12\n======\n- Avoid \"jsessionid\" fragment being output in links when Google is indexing a site that\n  creates anonymous sessions (checks for User-Agent containing \"Googlebot\").\n- Fixed XML Prolog breaking parsing when the synthetic root element is inserted.\n- Fixed \"]]>\" not being escaped inside text literals in JavaScript and Dart inlining.\n- Added new null-safe \"#strings.toString(obj)\" utility method for expression evaluation.\n- Added dialect capability to specify new expression evaluation objects (#xyz) by \n  implementing the new org.thymeleaf.dialect.IExpressionEnhancingDialect interface.\n- Fixed DateUtils.formatDate(...) using non-thread-safe DateFormat instances without\n  synchronizing.\n- Fixed whole-template inclusions not correctly working in fragment templates with no\n  element root.\n\n\n2.0.11\n======\n- Fixed THYMELEAF_ROOT element tag appearing in output in LEGACYHTML5 mode.\n- Fixed VALIDXHTML and VALIDXML modes not correctly parsing templates due to the inclusion of\n  the THYMELEAF_ROOT element.\n- Add catch for NoClassDefFoundError to checks for knowing whether nekoHTML is in classpath\n  in LEGACYHTML5 mode.\n- Added \"escape/unescapeJavaScript\" and \"escape/unescapeJava\" methods to StringUtils class\n  and to #strings expression utility object.\n- Added ChainedFragmentSpec in order to be able to apply a fragment spec on the results of\n  another one.\n- Fixed THYMELEAF_ROOT element tag provoking parser error when text or comments are present\n  before DOCTYPE clause.\n\n\n2.0.10\n======\n- Fixed selection expressions (*{...}) always evaluating on the root context.\n\n\n2.0.9\n=====\n- Added #strings.escapeXml(...) utility method.\n- Added HttpServletResponse argument to WebContext constructors in order to be able to access to the\n  response object from Processors.\n- Modified parsing system to allow parsing templates without a root element (with several elements / \n  no elements at all).\n- Fixed URL parameter names not allowing brackets ([,],{,})\n- Fixed URL parameter names not being repeatable.\n- Added support for server-based URLs in non-servlet-based environments.\n- Added \"setAdditionalDialects()\" method to TemplateEngine for being able to specify the dialects\n  to be used besides the \"standard\" ones.\n- Created new org.thymeleaf.fragment and org.thymeleaf.standard.fragment packages as a refactoring \n  of the several fragment inclusion options available for Thymeleaf dialects.\n- Added to TemplateEngine the possibility of filtering parsed templates using an IFragmentSpec in\n  order to process only fragments of templates.\n- Created IProcessorContext as the interface defining the minimum amount of information required to\n  execute expressions, and created the \"ProcessorContext\" class as the most basic implementation of\n  this interface.\n- Added #numbers.sequence(from,to,step) utility method (step didn't exist in previous versions).\n- Modified Arguments to be an implementation of IProcessorContext.\n- Modified the StandardExpressionProcessor infrastructure to allow the specification of an\n  IProcessorContext for executing expressions instead of a full --and heavier-- Arguments object. This\n  allows the execution of expressions outside templates.\n- Refactored whole hierarchy of \"include\" and \"substituteby\" attribute processors in order to use\n  the new structures in the org.thymeleaf.fragment package.\n- Modified \"TemplateEngine.getConfiguration()\" visibility to public.\n- Modified \"TemplateEngine.isInitialized()\" visibility to public.\n- Added DOMSelector.select(Node) method for easier calling of DOM selectors on single nodes.\n- Modified extraction of fragments from element and/or attribute name so that a list might be\n  returned instead of a single Node.\n- Removed initialization requirement from DialectConfiguration.getPrefix()\n- Fixed JavaScript/Dart/Text inlining in order to output text between [[...]] exactly as it was\n  originally output when the contained expression is not a valid Standard Expression.\n\n\n2.0.8\n=====\n- Fixed \"Root element name cannot be null\" exception when processing non-complete documents (fragments).\n- Modified Arguments constructor to public for testing purposes.\n- Modified TemplateRepository constructor to public for testing purposes.\n- Fixed \"get{outputType}For(node)\" methods in DOMUtils, which were outputting exceptions due to\n  new restrictions at the DOM model.\n- Added new utility getHTML5/Xhtml/XmlDOMFor(Reader) methods for obtaining the DOM Document resulting\n  from parsing (with an on-purpose created parser) a fragment of markup code, for testing purposes.\n- Fixed bad re-escaping of XML entities in entity attributes. The \"&\" was always being escaped, even\n  when it was in fact the beginning of an already-escaped entity. Now this situation is detected and\n  re-escaping avoided.\n\n\n\n2.0.7\n=====\n- Fixed letter case in DOCTYPE clause not being respected. Upper-case was required, which was against the HTML5\n  spec (which specifies the DOCTYPE clause to be case-insensitive).\n- Fixed DOCTYPE clause being output by LEGACYHTML5 parser. Output included an unwanted PUBLIC clause with\n  empty-string public and system ids.\n- Modified ResourcePool so that it allows to discard and re-create pooled instances by the specification\n  of object factories during construction.\n- Fixed error raising when default SAX, DOM or HTML parser implementations did not implement the 'reset'\n  operation (as in, for example, some old versions of xerces: 2.6.2 and older). Now Thymeleaf detects this,\n  outputs a warning in the logs, avoids calling reset and forces the parser resource pool to re-create the\n  parser each time, substituting the old parser objects.\n- Fixed correct positioning of URL fragments when parameters are present. Expressions like \n  '@{base#frag(p1='par',p2='par)}' will now be rendered 'base?p1=par&p2=par#frag' instead of the previous\n  incorrect form 'base#frag?p1=par&p2=par'.\n\n\n2.0.6\n=====\n- Fixed \"Message Resolver has not been initialized\" error when more than one message resolver was configured\n  for the same template engine.\n- Fixed ClassCastException executing #{...} expressions in XML and VALIDXML template modes, because of a\n  wrong construction of parsable code fragments (NestableNode was expected where there was a Text).\n- Updated OGNL dependency to 3.0.5 and javassist dependency to 3.16.1-GA.\n- Created org.thymeleaf.util.ClassLoaderUtils with utility methods for obtaining a valid class loader\n  to operate with, using priority order 1. Thread context class loader, 2. Current class class loader, \n  3. System class loader.\n- Substituted all Thread.currentThread().getContextClassLoader() calls with calls to ClassLoaderUtils\n  in order to avoid NullPointerExceptions when the context or current class loaders are null.\n- Modified org.thymeleaf.standard.expression.OgnlExpressionEvaluator so that it applies a fix on OGNL's\n  expression processor. This fix makes OGNL evaluate Strings as booleans in a way consistent with that\n  of Thymeleaf ('false', 'off' and 'no' are considered \"false\" in Thymeleaf expressions, but OGNL\n  evaluates them as \"true\"). This fix does not affect Spring EL, as it already evaluates those values\n  in the same way as Thymeleaf.\n- Fixed null-safety in \"isEmpty\" methods in #arrays, #lists, #maps and #sets.\n- Fixed th:each so that a null iterable equals no-iteration instead of 1 iteration of a null object. \n  This imitates the behaviour of JSTL's <c:forEach>\n- Added logging of exceptions when resolving resources at UrlResourceResolver and FileResourceResolver.  \n  \n\n2.0.5\n=====\n- Added template name, line number and column to SAXParseExceptions in AbstractNonValidatingSAXTemplateParser.\n- Fixed attribute escaping in builtin DOM parser.\n- Fixed XML-escaping of ' (apos) in element attributes. \"&apos;\" is not a recognized HTML entity (only an XML one)\n  and IE <= 8 does not recognize it. &#39; will be used for escaping ' instead.\n- Fixed unescaping of XML entities in element attributes, so that those specified with codes (&#XX;) are also\n  correctly unescaped.\n- Added to link expressions (@{...}) the ability to create server-root-relative (instead of context-root-relative)\n  URLs in order to link to different contexts in the same server. These URLs will be specified like \n  @{~/path/to/something}\n- Fixed javascript/dart expression inlining in order to work inside JSON objects. \n\n\n2.0.4\n=====\n- Fixed element attributes not being XML-unescaped at SAX parser.\n\n\n2.0.3\n=====\n- Fixed selection target not being correctly processed when th:object and th:remove=\"tag\" appeared\n  at the same host tag.\n- Allow parameters in @{...} expressions to specify no value, and even no '=' sign. As per the HTTP\n  specification, these parameters are valid and completely equivalent to specifying the empty string\n  as value.\n- Fixed excessive size of parser pools being created at Google App Engine for the standard template \n  mode handler set (availableProcessors is set to 1377 in that environment).\n- Fixed attribute values resulting from the execution of processors in the Standard Dialects not being\n  correctly XML-escaped.\n\n\n2.0.2\n=====\n- Fixed NullPointerException when getting message for class.\n- Worked around ArrayIndexOutOfBounds when executing #messages.* functions in OGNL (not SpringEL)\n  due to bug in OGNL implementation.\n\n\n2.0.1\n=====\n- Fixed exception at SAX parser when comments appear at document-root level.\n- Fixed template name at exception reports when including fragments (the top-level template name\n  was appearing instead of the fragment's).\n- Fixed attribute management so that null-valued attributes are allowed and output as \"\".\n- Fixed Java6-specific code which disallowed Thymeleaf to compile and run correctly in Java 5.\n- Modified the \"display if null\" flag of th:value from false to true, in order to avoid problems with\n  parts of the framework (esp. form-binding relative) that require a \"value\" attribute in\n  <option> tags.\n- Fixed incorrect exception messages.\n\n\n2.0.0\n=====\n- Added th:switch/th:case attributes to the standard dialects, working in a way equivalent\n  to that of the Java \"switch\" structure (default --> th:case=\"*\").\n- Created version \"3\" of the standard DTDs for XHTML template validation, including the\n  new th:switch and th:case attributes. \n- Substituted the Java standard DOM API (org.w3c.dom.*) by Thymeleaf's own tailor-made\n  DOM representation (org.thymeleaf.dom)\n- Created a DOM precomputation system that allows caching some information about the processors\n  that are applicable to each node in the tree, so that this information does not always\n  have to be computed during cached template execution.\n- Renamed \"Tag Processors\" as \"Element Processors\" in order to keep coherence with DOM.\n- Refactored Processor system: generalized \"Attribute Processors\" and \"Element Processors\"\n  by creating the IProcessor interface, This interface will be implemented by any processor \n  object of any kind (which can now apply of any type of DOM node, and not only Elements). \n  \"Attribute Processors\" and \"Element Processors\" are now specializations of IProcessors.\n- Redefined ITextInliner objects (text, javascript, dart inliners) as Processors for\n  Text and CDATASection nodes. Inlining is now a Standard-Dialect feature and not a Thymeleaf\n  core engine one.\n- Template modes have been generalized, along with template parsers and output creation \n  infrastructure. Instead of the previous fixed set of template modes (XML, VALIDXML, XHTML, \n  VALIDXML, HTML5 and LEGACYHTML5), now any number of template modes can be configured at the\n  Template Engine as long as an implementation of ITemplateModeHandler is provided for each of\n  them (by default, the old ones are provided out-of-the-box). This \"Template Mode Handlers\" specify \n  the parser (implementation of ITemplateParser) to be used for templates using this mode \n  (template -> DOM) and also the writer (implementation of ITemplateWriter) to be used for writing \n  the results of processing (DOM -> result). This effectively allows Thymeleaf to process any kind \n  of template --and not only XML/XHTML/HTML-- as long as these templates can be somehow converted \n  to and from a DOM representation.\n- Created a new SAX parser implementation of ITemplateParser, now used by default for reading templates\n  in all template modes except LEGACYHTML5 (which requires previous tag balancing by nekoHTML).\n- Added position information to DOM nodes, so that template execution errors now display along with\n  the number of the line in the template where they occur.\n- Cache infrastructure has been generalized. The ICacheManager interface now allows the specification\n  of tailor-made implementations for template, fragment, message and expression caches. All of these\n  caches now implement a new interface called ICache.\n- Reimplemented the standard (default) cache strategies for templates, fragments, messages and \n  expressions based on ConcurrentHashMaps.\n- Adapted the parsing and DOM handling infrastructure in order to enable Thymeleaf to process fragmentary\n  templates instead of complete documents. For example, no DOCTYPE or document root is now required\n  (template could be just a '<div>' block, for instance).\n- Removed the old IApplicability class hierarchy and substituted by a much simpler\n  IProcessorMatcher interface and a set of simple implementations for matching a processor\n  by element name, attribute name, etc.\n- Created the TemplateProcessingParameters class containing all the info available for the\n  processing of the template before its resolution and parsing.\n- Made Arguments objects include the corresponding TemplateResolution object created after\n  resolving and parsing the template. Arguments is still immutable, so this means that\n  the Arguments object used at the Processors is now created after template resolution and\n  parsing. \n- Modified IResourceResolver interface so that Resource Resolver objects now receive a\n  TemplateProcessingParameters object instead of an Arguments one.\n- Modified ITemplateResolver interface so that Template Resolver objects now receive a\n  TemplateProcessingParameters object instead of an Arguments one.\n- Created org.thymeleaf.TemplateRepository for processing obtention of the parsed templates and \n  parsable fragments by applying the cache (if it exists).\n- Added a new \"all-but-first\" value to \"th:remove\" that removes all children tags\n  except the first one.\n- Downgraded the XPath support in th:include attributes by substituting full XPath support by more \n  efficient DOMSelector objects that can be created by using a subset of the XPath syntax: '//', \n  '/', indexes and attribute specification.\n- Optimized use of Collections and Maps wherever possible.\n- Updated documentation and example applications\n  \n  \n1.1.5\n=====\n- Fixed bug related to template reading through the entity-substitution filter\n  (ArrayIndexOutOfBounds).\n- Modified javascript inlining of Enums so that no properties other than \"$type\" and \"$name\"\n  are output. This avoids problems with typical static and member fields containing\n  all the values of an enum and thus provoking stack overflow errors when performing inlining.\n- Modified TIMER logger for outputting execution times in nanoseconds and milliseconds (instead \n  of only milliseconds).  \n  \n  \n1.1.4\n=====\n- Solved bug regarding the initialization of expression utility objects that prevented\n  the \"#object\" variable to change accordingly when a th:object attribute was specified,\n  thus raising an exception when executing valid expressions on it.\n\n\n1.1.3\n=====\n- Modified WebContext constructors so that they require now the ServletContext \n  object. This enables Thymeleaf to operate without depending at all\n  on creating an HTTP session object for the user executing the template.\n- Modified TemplateProcessingException exception hierarchy in order to include\n  template information and (future) location data.\n- Created org.thymeleaf.util.CacheMap generic cache class and refactored all other\n  caches throughout the library to use this class. Also, a new logger called\n  org.thymeleaf.TemplateEngine.CACHE has been declared for this class.\n- Refactored Parsed Template Cache as an org.thymeleaf.util.CacheMap object, and\n  removed \"org.thymeleaf.TemplateEngine.PARSERCACHE\" specific logger \n  (org.thymeleaf.TemplateEngine.CACHE should be used instead).\n\n\n1.1.2\n=====\n- Minor fixing in StandardTextInliner for empty Text nodes.\n- Fixed DOMDocumentProcessor and Tag/Attribute applicabilities so that execution of\n  a Thymeleaf template is now case-insensitive.\n- Modifications to the LEGACYHTML5 parsing system. Substituted HtmlCleaner by\n  nekoHTML as a tag-balancing library.\n- Fixed bug in HTMLTemplateReader provoking incomplete reads of templates resolved\n  from a remote URL.\n- Minor fixes to HTMLTemplateReader to avoid parsing exceptions in some uncommon\n  scenarios.\n- Class org.thymeleaf.utils.FragmentUtils renamed as org.thymeleaf.utils.DOMUtils\n- Added utility method #numbers.sequence(x,y) returning an array with a sequence\n  of integer numbers going from x to y, useful for creating th:each expressions for\n  a fixed number of iterations.\n- Added #httpServletRequest and #httpSession objects to expression evaluations,\n  representing the HttpServletRequest and HttpSession objects related to a WebContext,\n  respectively.\n- Added javascript representation for enums in javascript inlining, and fixed\n  infinite loop happening when inlining them. Enums are now represented in\n  javascript as objects with at least two properties called \"$type\" and \"$name\" \n  (respectively, the enum class name --without package-- and the enum constant name).\n- Solved bug that raised an IllegalArgumentException when an internationalization\n  message was not found (only when used without Spring).\n- Added \"dart\" inlining method for Dart language.\n- Added \"create*\" methods to Calendars (#calendars) and Dates (#dates) for creating \n  Calendar or Date objects from its components: year, month, day, hour, minute, etc.\n- Added \"create*\" methods to Calendars (#calendars) and Dates (#dates) for creating \n  Calendar or Date objects for the current date (\"today\") and the current date+time\n  (\"now\").\n- Modified equality (==) and inequality (!=) expression operators so that they first\n  query the \"compareTo(...)\" method if both objects being compared implement Comparable.\n- Added new methods to expression utility class \"Strings\" (#strings): \"capitalize\",\n  \"capitalizeWords\", \"unCapitalize\"\n\n\n\n1.1.1\n=====\n- Fixed: avoid non-minimizable tags like <script>, <textarea>, <div>, etc. to be\n  minimized (appear as <script />, <textarea />, div /> without an end tag).\n\n\n1.1.0\n=====\n- Modified condition evaluation: now the Strings \"false\", \"no\" and \"off\" return false.\n- Deprecated IValueProcessor interface and related all infrastructure.\n- New Standard Expression evaluation system, based on static methods from the \n  org.thymeleaf.standard.expression.StandardExpressionProcessor class instead of the\n  StandardValueProcessor from Thymeleaf 1.0.x.\n- Added new features to Standard Expression syntax:\n    * Numeric literals: 1, 32, 42.3, 11.34, etc.\n    * Unary operators: ! (boolean negation), - (numeric minus sign)\n    * String operators: + (String concatenation)\n    * Numeric binary operators and comparators: +, -, *, /, %, >, <, >=,<=  \n    * Boolean binary operators: and, or\n    * Equality checks: ==, !=\n- Added \"hour\", \"minute\", \"second\" and \"millisecond\" functions to expression utility\n  objects \"#dates\" and \"#calendars\".\n- Created new \"th:substituteby\" attribute, equivalent to \"th:include\" but actually \n  substituting its host tag by the fragment's.\n- Created new versions (v2) of the set of thymeleaf-specific XHTML DTDs, including the new\n  \"th:substituteby\" attribute:\n    * http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-2.dtd\n    * http://www.thymeleaf.org/dtd/xhtml1-transitional-thymeleaf-2.dtd\n    * http://www.thymeleaf.org/dtd/xhtml1-frameset-thymeleaf-2.dtd\n    * http://www.thymeleaf.org/dtd/xhtml11-thymeleaf-2.dtd\n- Fixed: children nodes not being correctly removed from th:text and th:utext.\n- Modified input parsing system to avoid substitution of XML/XHTML/HTML5 entities\n  like \"&nbsp;\", \"&euro;\", \"&pound;\", etc. by their corresponding characters. Now\n  these entities are transmitted to the template engine output directly without\n  substitution.\n- Substituted the TemplateEngine.THYMELEAF_NON_EXECUTABLE_NODE constant (used as\n  user data in DOM Nodes for avoiding their execution) by static methods for controlling\n  node execution in the org.thymeleaf.DOMExecution class.\n- Performance optimization: added a scanning step prior to storing a template into \n  the cache that will detect all DOM nodes (and entire node trees) that should not \n  be executed (because there is no processor applicable to them) and mark these \n  nodes so that they are not queried at all during normal template execution.\n- Fixed: allow comments between DOCTYPE and root element node.\n    \n\n1.0.1\n=====\n- Fixed: URLs containing a fragment selector (http://url#fragment) were not correctly recognized\n  by link expressions in standard syntax (@{...}).\n- Modification on parsed template cache system: now based on SoftReferences, making it memory-sensitive.\n  Before throwing an OutOfMemoryException, the garbage collector is now allowed to avoid it by cleaning\n  any existing cache entries. In such case, a warning will be issued via the log system noticing a \n  possible bad configuration in cache size and/or JVM heap size. \n- Fixed: \"last\" property in iteration status variables returned always true.\n\n\n1.0.0\n=====\n- Modified th:attr so that attributes resulting in empty values are removed (removeIfEmpty = true).\n\n\n1.0.0-beta5\n===========\n- Fixed bug regarding case-sensitivity of dialect and attribute names/processors.\n- Added hierarchy of abstract classes for tag processors.\n- Added \"msgOrNull\", \"arrayMsgOrNull\", \"listMsgOrNull\" and \"setMsgOrNull\" methods to the\n  #messages expression utility object, so that a null can be returned if the desired message\n  is not found (instead of a default message).\n- Refactored org.thymeleaf.templateresolver.TemplateResolver and created abstract class\n  org.thymeleaf.templateresolver.AbstractTemplateResolver.\n- Substituted \"cacheable\" flag and \"cacheTTLMs\" property in TemplateResolution by\n  ITemplateResolutionValidity objects, which can implement more complex strategies for defining\n  when a template must be considered cacheable, and when its cache entry can still be considered\n  valid.\n\n\n1.0.0-beta4\n===========\n- Added support for externalized \"processor messages\", messages that will be accompanying\n  not the template/s, but the tag/attribute processors themselves, so that they can be\n  referred wherever those processors are used (and packaged along with them into a .jar\n  file in order to create \"UI components\").\n- Added the \"getMessageForTemplate(...)\" method to AbstractAttrProcessor and\n  AbstractTagProcessor for easier resolution of template messages from tag/attribute\n  processors.\n- Added the \"getMessageForProcessor(...)\" method to AbstractAttrProcessor and\n  AbstractTagProcessor for easier resolution of processor messages from tag/attribute\n  processors.\n- Added the \"getMessage(...)\" method to AbstractAttrProcessor and AbstractTagProcessor\n  for trying to resolve messages as \"template messages\" first and then (if not found) as\n  \"processor messages\".\n\n\n1.0.0-beta3\n===========\n- ADDED MULTI-DIALECT SUPPORT. TemplateEngines can now be specified several dialects to \n  be applied at the same time for template processing. Each of these dialects can have \n  different prefix (it is also allowed that several dialects can have the same prefix).\n- Added the possibility of including expressions in \"th:include\" attributes.\n- Added cache TTL configuration to TemplateResolver (templateResolver.setCacheTTLMs(Long)).\n- Refactored pattern system in TemplateResolver and subclasses.\n- Avoid URLs with \"jsessionid\" to be cached to avoid the possibility of filling the cache\n  with the same template resolved for many session IDs. \n- Add \"resolvable patterns\" to TemplateResolver so that template resolvers can \n  quickly determine that a template is not resolvable by them (without needing resource\n  resolution).\n- Added \"execInfo\" bean to expression evaluation, containing the current timestamp and\n  the template name.\n- Cache parsed values in Standard syntax for better template execution performance.\n- Improved JAVADOC documentation. \n\n\n1.0.0-beta2\n===========\n- Added UrlResourceResolver for resolving resources as URLs (including remote URLs)\n- Added UrlTemplateResolver for resolving templates as URLs (including remote URLs)\n- Modified th:include syntax from \"fragment@template\" to \"template::fragment\"\n- Added the possibility to include complete templates as fragments with th:include when\n  a fragment is not specified\n- Added the possibility to include the result of executing XPath expressions on templates as \n  fragments with th:include with the \"template::[xpathexpr]\" syntax\n- Added methods in TemplateEngine to clear the template cache (selectively or not):\n  templateEngine.clearParsedTemplateCache() and templateEngine.clearParsedTemplateCacheFor(templateName)\n\n\n1.0.0-beta1\n===========\n- First release of thymeleaf\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.6064453125,
          "content": "\n   Copyright (c) 2011-2025 Thymeleaf (http://www.thymeleaf.org)\n \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n \n       http://www.apache.org/licenses/LICENSE-2.0\n \n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 0.1181640625,
          "content": "\n thymeleaf\n ---------\n \n In order to learn more and download the latest version:\n \n     http://www.thymeleaf.org\n\n\n     "
        },
        {
          "name": "RELEASING.markdown",
          "type": "blob",
          "size": 2.07421875,
          "content": "# Releasing Thymeleaf\n\n## 1. Configuration\n\nConfigure access to the snapshots and staging servers in `settings.xml`:\n\n```xml\n  <servers>\n    <server>\n      <id>sonatype-nexus-snapshots</id>\n      <username>[USER IN SONATYPE NEXUS]</username>\n      <password>[ENCODED PASSWORD IN SONATYPE NEXUS]</password>\n    </server>\n    <server>\n      <id>sonatype-nexus-staging</id>\n      <username>[USER IN SONATYPE NEXUS]</username>\n      <password>[ENCODED PASSWORD IN SONATYPE NEXUS]</password>\n    </server>\n  </servers>\n```\n\n## 2. Check dependency snapshots\n\nIf this is an GA or RC version of Thymeleaf being published, check that no\ndependencies are in SNAPSHOT version (thymeleaf-parent's pom.xml).\n\n(Make sure the Spring Boot parent dependencies in Spring Boot-based example\napplication pom.xml's are also checked for SNAPSHOTs).\n\nIf any SNAPSHOTs exist, set to a fixed version and commit.\n\n## 3. Set the new version\n\n```shell\nmvn versions:set -DprocessAllModules=true -DnewVersion=X.Y.Z\nmvn versions:commit\ngit add .\ngit commit -m \"Prepare release thymeleaf-X.Y.Z\"\ngit push\n```\n\n## 4. Create and deploy the release into the staging repositories\n\n```shell\nmvn clean compile deploy\n```\n\n## 5. Create tag and set to new development version\n\n```shell\nmvn scm:tag -Dtag=thymeleaf-X.Y.Z\nmvn versions:set -DprocessAllModules=true -DnewVersion=X.Y.[Z+1]-SNAPSHOT\nmvn versions:commit\ngit add .;\ngit commit -m \"Prepare for next development iteration\"\ngit push\n```\n\n## 6. Create tag and set to new development version\n\nIf any SNAPSHOT dependencies had to have their versions fixed before building, go\nback to SNAPSHOT versions wherever needed and commit.\n\n## 7. Manage staging repository in Central\n\nFollow instructions at https://central.sonatype.org/publish/publish-guide/\n\n## 8. Releasing distribution artifacts\n\nOnce jar artifacts have been published in Maven Central, the .zip distribution release\ngenerated in dist/target should be uploaded to the GitHub repository as a new release\nalong with a gpg signature (.asc) generated with:\n\n```shell\ngpg -ab --default-key key_ID_for_releases@thymeleaf.org thymeleaf-X.Y.Z-dist.zip\n```\n\n\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.8955078125,
          "content": "# Security Policy\n\n## Reporting Vulnerabilities\n\nThank you for your collaboration keeping Thymeleaf safe and secure. If you believe you have found a security\nissue in Thymeleaf, please notify us so that we can work with you in its prompt resolution.\n\n### Disclosure Policy\n\n* Let us know as soon as possible by sending an email to [security@thymeleaf.org][security-email].\n* Provide us a reasonable amount of time to resolve the issue before any disclosure to the public or a\n  third-party. Especially, **do not** create a GitHub issue ticket yourself talking about the\n  vulnerability. We may publicly disclose the issue _before_ resolving it, but only if appropriate.\n\n### Credit\n\nWe will credit the reporter of a confirmed vulnerability in the GitHub ticket created for publishing it (typically\nonce it is fixed).\n\n### Exclusions\n\nWe reserve the right to consider out of the scope of Thymeleaf's security:\n\n* Developer bad practices and inadequate uses of Thymeleaf that effectively _create_ the vulnerability in\n  the applications being developed with Thymeleaf.\n* Attacks requiring physical access to the machine Thymeleaf is running on.\n* Issues in Thymeleaf's software dependencies which should be reported to these dependencies' maintainers.\n\n\n# Supported Versions\n\nVersions of Thymeleaf look like X.Y.Z, meaning X = Major, Y = Minor and Z = patch. We recommend \nkeeping Thymeleaf dependencies in applications upgraded to the latest patch version.\n\nAlso please note that, in general, only the latest minor version will be considered supported\nand will receive timely updates and security patches.\n\n\n# Artifact Signatures\n\nPublished artifacts for Thymeleaf, such as JARs released on Maven Central, are signed with GPG keys that\ncan be verified at the [Thymeleaf Organization Repository][gpg-keys]\n\n[security-email]: mailto:security@thymeleaf.org\n[gpg-keys]: https://github.com/thymeleaf/thymeleaf-org/blob/main/GPG-KEYS-thymeleaf.txt\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 21.251953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  ~ =============================================================================\n  ~\n  ~   Copyright (c) 2011-2025 Thymeleaf (http://www.thymeleaf.org)\n  ~\n  ~   Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~   you may not use this file except in compliance with the License.\n  ~   You may obtain a copy of the License at\n  ~\n  ~       http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~   Unless required by applicable law or agreed to in writing, software\n  ~   distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~   See the License for the specific language governing permissions and\n  ~   limitations under the License.\n  ~\n  ~ =============================================================================\n  -->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.thymeleaf</groupId>\n  <artifactId>thymeleaf-parent</artifactId>\n  <packaging>pom</packaging>\n  <version>3.1.4-SNAPSHOT</version>\n  <name>thymeleaf parent</name>\n  <description>Modern server-side Java template engine for both web and standalone environments</description>\n  <url>http://www.thymeleaf.org</url>\n\n  <organization>\n    <name>Thymeleaf</name>\n    <url>https://www.thymeleaf.org</url>\n  </organization>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <developers>\n    <developer>\n      <name>Thymeleaf</name>\n      <organization>Thymeleaf</organization>\n      <organizationUrl>https://www.thymeleaf.org</organizationUrl>\n    </developer>\n  </developers>\n\n  <scm>\n    <url>https://github.com/thymeleaf/thymeleaf</url>\n    <developerConnection>scm:git:git@github.com:thymeleaf/thymeleaf</developerConnection>\n  </scm>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n      <id>sonatype-nexus-staging</id>\n      <name>Sonatype Nexus Staging</name>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>\n    </repository>\n  </distributionManagement>\n\n  <repositories>\n    <repository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n    <repository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n    <repository>\n      <id>springio-snapshots</id>\n      <name>Spring Snapshots</name>\n      <url>https://repo.spring.io/snapshot</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </pluginRepository>\n  </pluginRepositories>\n\n  <properties>\n    <java.version>8</java.version>\n    <maven.compiler.source>${java.version}</maven.compiler.source>\n    <maven.compiler.target>${java.version}</maven.compiler.target>\n    <maven.compiler.release>${java.version}</maven.compiler.release>\n    <project.build.sourceEncoding>US-ASCII</project.build.sourceEncoding>\n    <project.build.propertiesEncoding>ISO-8859-1</project.build.propertiesEncoding>\n    <resource.delimiter>@</resource.delimiter>\n    <!-- These are needed for showing the build timestamp correctly at thymeleaf.properties.    -->\n    <timestamp>${maven.build.timestamp}</timestamp>\n    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>\n    <!-- ======================     -->\n    <!-- DEPENDENCY versions        -->\n    <!-- ======================     -->\n    <thymeleaf.version>${project.version}</thymeleaf.version>\n    <jakarta-servlet-api.version>6.1.0</jakarta-servlet-api.version>\n    <jakarta-servlet-jsp-api.version>4.0.0</jakarta-servlet-jsp-api.version>\n    <jakarta-servlet-jsp-jstl-api.version>3.0.2</jakarta-servlet-jsp-jstl-api.version>\n    <jakarta-validation-api.version>3.1.0</jakarta-validation-api.version>\n    <jakarta-mail-api.version>2.0.1</jakarta-mail-api.version>\n    <javax-servlet-api.version>4.0.1</javax-servlet-api.version>\n    <javax-servlet-jsp-api.version>2.3.3</javax-servlet-jsp-api.version>\n    <javax-servlet-jsp-jstl-api.version>1.2.2</javax-servlet-jsp-jstl-api.version>\n    <javax-validation-api.version>2.0.1.Final</javax-validation-api.version>\n    <javax-mail-api.version>1.6.2</javax-mail-api.version>\n    <apache-taglibs-standard.version>1.2.5</apache-taglibs-standard.version>\n    <ognl.version>3.3.4</ognl.version>\n    <glassfish-jakarta-servlet-jsp-jstl.version>3.0.1</glassfish-jakarta-servlet-jsp-jstl.version>\n    <attoparser.version>2.0.7.RELEASE</attoparser.version>\n    <unbescape.version>1.1.6.RELEASE</unbescape.version>\n    <spring-framework5.version>5.3.39</spring-framework5.version>\n    <spring-framework6.version>6.2.0</spring-framework6.version>\n    <spring-security5.version>5.8.16</spring-security5.version>\n    <spring-security6.version>6.4.1</spring-security6.version>\n    <spring-webflow2.version>2.5.1.RELEASE</spring-webflow2.version>\n    <spring-webflow3.version>3.0.1</spring-webflow3.version>\n    <jackson.version>2.18.2</jackson.version>\n    <reactor.version>2024.0.0</reactor.version>\n    <commons-lang3.version>3.17.0</commons-lang3.version>\n    <commons-io.version>2.18.0</commons-io.version>\n    <commons-fileupload.version>1.5</commons-fileupload.version>\n    <hibernate-validator-jakarta.version>8.0.1.Final</hibernate-validator-jakarta.version>\n    <hibernate-validator-javax.version>6.2.5.Final</hibernate-validator-javax.version>\n    <mockito.version>5.14.2</mockito.version>\n    <slf4j.version>2.0.16</slf4j.version>\n    <log4j.version>2.24.2</log4j.version>\n    <junit.version>5.11.3</junit.version>\n    <!-- ======================     -->\n    <!-- MAVEN PLUGIN versions      -->\n    <!-- ======================     -->\n    <maven-clean-plugin.version>3.4.0</maven-clean-plugin.version>\n    <maven-dependency-plugin.version>3.8.1</maven-dependency-plugin.version>\n    <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n    <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>\n    <maven-surefire-plugin.version>3.5.2</maven-surefire-plugin.version>\n    <maven-failsafe-plugin.version>3.5.2</maven-failsafe-plugin.version>\n    <maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>\n    <maven-war-plugin.version>3.4.0</maven-war-plugin.version>\n    <maven-javadoc-plugin.version>3.11.1</maven-javadoc-plugin.version>\n    <maven-source-plugin.version>3.3.1</maven-source-plugin.version>\n    <maven-gpg-plugin.version>3.2.7</maven-gpg-plugin.version>\n    <maven-deploy-plugin.version>3.1.3</maven-deploy-plugin.version>\n    <maven-scm-plugin.version>2.1.0</maven-scm-plugin.version>\n    <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>\n    <maven-assembly-plugin.version>3.7.1</maven-assembly-plugin.version>\n    <maven-versions-plugin.version>2.18.0</maven-versions-plugin.version>\n    <maven-cargo-plugin.version>1.10.15</maven-cargo-plugin.version>\n  </properties>\n\n\n  <dependencyManagement>\n    <dependencies>\n\n      <dependency>\n        <groupId>org.thymeleaf</groupId>\n        <artifactId>thymeleaf</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf</groupId>\n        <artifactId>thymeleaf-spring5</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf</groupId>\n        <artifactId>thymeleaf-spring6</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.extras</groupId>\n        <artifactId>thymeleaf-extras-springsecurity5</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.extras</groupId>\n        <artifactId>thymeleaf-extras-springsecurity6</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.testing</groupId>\n        <artifactId>thymeleaf-testing</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.testing</groupId>\n        <artifactId>thymeleaf-testing-spring5</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.testing</groupId>\n        <artifactId>thymeleaf-testing-spring6</artifactId>\n        <version>${thymeleaf.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.thymeleaf.examples</groupId>\n        <artifactId>thymeleaf-examples</artifactId>\n        <version>${thymeleaf.version}</version>\n        <type>pom</type>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.servlet</groupId>\n        <artifactId>jakarta.servlet-api</artifactId>\n        <version>${jakarta-servlet-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.servlet.jsp</groupId>\n        <artifactId>jakarta.servlet.jsp-api</artifactId>\n        <version>${jakarta-servlet-jsp-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.servlet.jsp.jstl</groupId>\n        <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>\n        <version>${jakarta-servlet-jsp-jstl-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.validation</groupId>\n        <artifactId>jakarta.validation-api</artifactId>\n        <version>${jakarta-validation-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.mail</groupId>\n        <artifactId>jakarta.mail-api</artifactId>\n        <version>${jakarta-mail-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.sun.mail</groupId>\n        <artifactId>jakarta.mail</artifactId>\n        <version>${jakarta-mail-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>${javax-servlet-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>javax.servlet.jsp</groupId>\n        <artifactId>javax.servlet.jsp-api</artifactId>\n        <version>${javax-servlet-jsp-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>javax.servlet.jsp.jstl</groupId>\n        <artifactId>javax.servlet.jsp.jstl-api</artifactId>\n        <version>${javax-servlet-jsp-jstl-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>javax.validation</groupId>\n        <artifactId>validation-api</artifactId>\n        <version>${javax-validation-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>javax.mail</groupId>\n        <artifactId>javax.mail-api</artifactId>\n        <version>${javax-mail-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.sun.mail</groupId>\n        <artifactId>javax.mail</artifactId>\n        <version>${javax-mail-api.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.taglibs</groupId>\n        <artifactId>taglibs-standard-impl</artifactId>\n        <version>${apache-taglibs-standard.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.glassfish.web</groupId>\n        <artifactId>jakarta.servlet.jsp.jstl</artifactId>\n        <version>${glassfish-jakarta-servlet-jsp-jstl.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>ognl</groupId>\n        <artifactId>ognl</artifactId>\n        <version>${ognl.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.attoparser</groupId>\n        <artifactId>attoparser</artifactId>\n        <version>${attoparser.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.unbescape</groupId>\n        <artifactId>unbescape</artifactId>\n        <version>${unbescape.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-lang3</artifactId>\n        <version>${commons-lang3.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>${commons-io.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-fileupload</groupId>\n        <artifactId>commons-fileupload</artifactId>\n        <version>${commons-fileupload.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>${mockito.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>${slf4j.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson</groupId>\n        <artifactId>jackson-bom</artifactId>\n        <version>${jackson.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>io.projectreactor</groupId>\n        <artifactId>reactor-bom</artifactId>\n        <version>${reactor.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-bom</artifactId>\n        <version>${log4j.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.junit</groupId>\n        <artifactId>junit-bom</artifactId>\n        <version>${junit.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n    </dependencies>\n  </dependencyManagement>\n\n\n  <build>\n\n    <pluginManagement>\n      <plugins>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>${maven-clean-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>${maven-dependency-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin.version}</version>\n          <configuration>\n            <!-- This will generate metadata for reflection on method parameters (JDK8+)        -->\n            <parameters>true</parameters>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>${maven-resources-plugin.version}</version>\n          <configuration>\n            <encoding>${project.build.sourceEncoding}</encoding>\n            <propertiesEncoding>${project.build.propertiesEncoding}</propertiesEncoding>\n            <delimiters>\n              <!-- We set the resource delimiters to only @*@ in order to avoid the ${*} syntax -->\n              <!-- colliding with properties meant to be resolved by Spring.                    -->\n              <delimiter>${resource.delimiter}</delimiter>\n            </delimiters>\n            <useDefaultDelimiters>false</useDefaultDelimiters>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>${maven-surefire-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <version>${maven-failsafe-plugin.version}</version>\n          <executions>\n            <execution>\n              <goals>\n                <goal>integration-test</goal>\n                <goal>verify</goal>\n              </goals>\n            </execution>\n          </executions>\n          <configuration>\n            <classesDirectory>${project.build.outputDirectory}</classesDirectory>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${maven-jar-plugin.version}</version>\n          <configuration>\n            <archive>\n              <addMavenDescriptor>false</addMavenDescriptor>\n              <manifest>\n                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>\n                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n              </manifest>\n              <manifestEntries>\n                <!-- These two entries are non-standard, specified by the Apache Software       -->\n                <!-- Foundation in their release preparation procedures as a way to pass this   -->\n                <!-- information on to the library users. See:                                  -->\n                <!-- http://commons.apache.org/releases/prepare.html                            -->\n                <X-Compile-Source-JDK>${maven.compiler.source}</X-Compile-Source-JDK>\n                <X-Compile-Target-JDK>${maven.compiler.target}</X-Compile-Target-JDK>\n                <!-- Set the Built-By attribute to avoid displaying specific usernames.         -->\n                <Built-By>thymeleaf</Built-By>\n              </manifestEntries>\n            </archive>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>${maven-war-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n          <version>${maven-javadoc-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-source-plugin</artifactId>\n          <version>${maven-source-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-gpg-plugin</artifactId>\n          <version>${maven-gpg-plugin.version}</version>\n          <executions>\n            <execution>\n              <id>gpg-sign</id>\n              <phase>verify</phase>\n              <goals>\n                <goal>sign</goal>\n              </goals>\n              <configuration>\n                <keyname>releases@thymeleaf.org</keyname>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n\n        <!-- NOTE releases will be performed by means of maven-deploy-plugin. This means that   -->\n        <!-- the maven-releases-plugin will not be needed as a part of the release cycle.       -->\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>${maven-deploy-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-scm-plugin</artifactId>\n          <version>${maven-scm-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>${maven-antrun-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>${maven-assembly-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>versions-maven-plugin</artifactId>\n          <version>${maven-versions-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.codehaus.cargo</groupId>\n          <artifactId>cargo-maven3-plugin</artifactId>\n          <version>${maven-cargo-plugin.version}</version>\n        </plugin>\n\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n\n      <!-- NOTE maven-gpg-plugin needs to be set for execution at this point because the pom    -->\n      <!-- artifact generated for thymeleaf-parent also needs to be signed for deployment.      -->\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-gpg-plugin</artifactId>\n      </plugin>\n\n    </plugins>\n\n  </build>\n\n  <modules>\n    <module>lib</module>\n    <module>tests</module>\n    <module>examples</module>\n    <module>dist</module>\n  </modules>\n\n</project>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}