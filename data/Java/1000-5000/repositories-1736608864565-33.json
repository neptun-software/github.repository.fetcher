{
  "metadata": {
    "timestamp": 1736608864565,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LWJGL/lwjgl3",
      "stars": 4880,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0078125,
          "content": "*\t-text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1875,
          "content": "/.idea/workspace.xml\n/.idea/usage.statistics.xml\n/nbproject/private/\n/bin\n/wiki\n.gradle\n.DS_Store\n*.bat\n*.conf\n*.dll\n*.dylib\n*.jar\n*.jpg\n*.mhr\n*.obj\n*.ogg\n*.sh\n*.so\n*.ttf\n*.wav\n*.zip\ntouch.txt"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.4716796875,
          "content": "## Contributors\n\nThank you to all the people who have contributed to LWJGL! [[Contribute](https://github.com/LWJGL/lwjgl3/blob/master/.github/CONTRIBUTING.md)]\n<a href=\"https://github.com/LWJGL/lwjgl3/graphs/contributors\"><img src=\"https://opencollective.com/lwjgl/contributors.svg?width=825\"/></a>\n\n## Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/lwjgl#section-contribute)]\n\n![Backers](https://opencollective.com/lwjgl/backers.svg?width=825)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.482421875,
          "content": "Copyright (c) 2012-present Lightweight Java Game Library\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n- Neither the name Lightweight Java Game Library nor the names of\n  its contributors may be used to endorse or promote products derived\n  from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.783203125,
          "content": "[![Maven Central](https://img.shields.io/maven-central/v/org.lwjgl/lwjgl.svg?label=maven%20central)](https://search.maven.org/search?q=g:org.lwjgl)\n[![API Javadoc](https://img.shields.io/badge/API-docs-blue.svg)](https://javadoc.lwjgl.org/)\n[![License](https://img.shields.io/badge/license-BSD-blue.svg?colorB=lightgray)](https://github.com/LWJGL/lwjgl3/blob/master/LICENSE.md)\n\n![Size](https://img.shields.io/github/repo-size/LWJGL/lwjgl3.svg?label=size&colorB=lightgray)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/LWJGL-CI/lwjgl3/CI.yml?branch=master)](https://github.com/LWJGL-CI/lwjgl3/actions/workflows/CI.yml)\n\n## LWJGL - Lightweight Java Game Library 3\n\nLWJGL (https://www.lwjgl.org) is a Java library that enables cross-platform\naccess to popular native APIs useful in the development of graphics\n(OpenGL/Vulkan), audio (OpenAL) and parallel computing (OpenCL) applications.\nThis access is direct and high-performance, yet also wrapped in a type-safe\nand user-friendly layer, appropriate for the Java ecosystem.\n\nLWJGL is an enabling technology and provides low-level access. It is not a\nframework and does not provide higher-level utilities than what the native\nlibraries expose. As such, novice programmers are encouraged to try one of\nthe frameworks or game engines that make use of LWJGL, before working\ndirectly with the library.\n\nLWJGL is open source software and freely available at no charge.\n\nUseful links:\n\n- [Wiki](https://github.com/LWJGL/lwjgl3-wiki/wiki)\n- [Release Notes](https://github.com/LWJGL/lwjgl3/tree/master/doc/notes)  \n- [JavaDoc](https://javadoc.lwjgl.org)\n- [Blog](https://blog.lwjgl.org)\n\nContact:\n\n- [![Twitter Follow](https://img.shields.io/twitter/follow/LWJGL?style=social)](https://twitter.com/LWJGL)\n- [Discord](https://discord.gg/6CywMCs)\n- [Forum](http://forum.lwjgl.org)\n\nIf you'd like to contribute, see [doc/README](https://github.com/LWJGL/lwjgl3/tree/master/doc)\nfor a quick overview of the project structure, installation instructions and\nconfiguration options.\n\n### Getting Started\n\nAs of version `3.1.0`, LWJGL is distributed as a set of modules. Only the\ncore module is required and all bindings are optional (but some bindings\ndepend on other bindings). The easiest way to download LWJGL is to use the\n[build configurator](https://www.lwjgl.org/customize) on the website.\n\nThe build configurator generates **Maven & Gradle** declarations that can be\nadded to existing projects. This is the easiest way to use LWJGL while\ndeveloping.\n\nLWJGL can also be downloaded as a simple set of JAR files. Each module\nconsists of the following files:\n\n* lwjgl-&lt;module&gt;.jar\n* lwjgl-&lt;module&gt;-sources.jar\n* lwjgl-&lt;module&gt;-javadoc.jar\n* lwjgl-&lt;module&gt;-natives-&lt;platform&gt;.jar (for some bindings)\n\nTo compile and run an LWJGL application, the base and natives JAR files of\nthe core module and each binding used should be added to the classpath. LWJGL\nextracts the natives to a temporary folder and loads them automatically, so\nno further configuration is necessary. If more customization is required\n(e.g. when creating a platform-specific installer) the natives may be\nextracted manually and loaded via `java.library.path`. See the [Configuration](https://github.com/LWJGL/lwjgl3/blob/master/modules/lwjgl/core/src/main/java/org/lwjgl/system/Configuration.java)\nclass for more options.\n\nLWJGL 3 requires Java 8 or later to build and run and currently supports the\nfollowing platforms/architectures:\n\n- FreeBSD x64\n- Linux x64\n- Linux arm64 (ARMv8/AArch64)\n- Linux arm32 (ARMv7/armhf)\n- Linux ppc64le\n- Linux riscv64\n- macOS x64\n- macOS arm64\n- Windows x64\n- Windows x86\n- Windows arm64\n\nExample code:\n\n- [Samples](https://github.com/LWJGL/lwjgl3/tree/master/modules/samples/src/test/java/org/lwjgl/demo) (simple samples covering basic usage of LWJGL bindings)\n- [Demo suite](https://github.com/LWJGL/lwjgl3-demos) (includes advanced OpenGL and Vulkan demos)\n- [Wiki tutorials](https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.-Tutorial-Index)\n\nFor migrating LWJGL 2 code to LWJGL 3, see the [Migration Guide](https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.6-LWJGL3-migration).\n\n### Troubleshooting\n\nMost common issues faced by LWJGL users are trivially addressed with the\nfollowing:\n\n- [Installation guide](https://github.com/LWJGL/lwjgl3-wiki/wiki/1.2.-Install) (lwjgl3-wiki)\n- [Troubleshooting guide](https://github.com/LWJGL/lwjgl3-wiki/wiki/2.5.-Troubleshooting) (lwjgl3-wiki)\n- [Memory FAQ](https://github.com/LWJGL/lwjgl3-wiki/wiki/1.3.-Memory-FAQ) (lwjgl3-wiki)\n\n[LWJGLX/debug](https://github.com/LWJGLX/debug) is a Java Agent that will\nautomatically detect a lot of these issues. It can also generate a trace log\nthat's useful when reporting issues to LWJGL.\n\nWhen asking for help or when you suspect a bug in LWJGL, preparing an [MVCE](https://stackoverflow.com/help/mcve)\n(Minimal, Complete, and Verifiable example) that reproduces the issue will\nimprove the chances of a quick and useful response.\n\n## List of Supported Bindings\n\n#### Khronos APIs\n\n| Library| Description|\n|--------|------------|\n| [EGL](https://www.khronos.org/egl)| An interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system.|\n| [KTX (Khronos Texture)](https://www.khronos.org/ktx/)| A lightweight container for textures for OpenGL®, Vulkan® and other GPU APIs.|\n| [OpenCL](https://www.khronos.org/opencl/)| An open, royalty-free standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms.|\n| [OpenGL](https://www.khronos.org/opengl/)| The most widely adopted 2D and 3D graphics API in the industry, bringing thousands of applications to a wide variety of computer platforms.|\n| [OpenGL ES](https://www.khronos.org/opengles/)| A royalty-free, cross-platform API for full-function 2D and 3D graphics on embedded systems - including consoles, phones, appliances and vehicles.|\n| [OpenXR](https://www.khronos.org/openxr/)| A royalty-free, open standard that provides high-performance access to Augmented Reality (AR) and Virtual Reality (VR)—collectively known as XR—platforms and devices.|\n| [Vulkan](https://www.khronos.org/vulkan/)| A new generation graphics and compute API that provides high-efficiency, cross-platform access to modern GPUs used in a wide variety of devices from PCs and consoles to mobile phones and embedded platforms.|\n\n#### Display and Input\n\n| Library| Description|\n|--------|------------|\n| [GLFW](https://www.glfw.org/)| Create multiple windows, handle user input (keyboard, mouse, gaming peripherals) and manage contexts. Also features multi-monitor support, clipboard access, file drag-n-drop, and [much more](http://www.glfw.org/docs/latest/news.html).|\n| [JAWT](http://docs.oracle.com/javase/8/docs/technotes/guides/awt/AWT_Native_Interface.html)| The AWT native interface.|\n| [Native File Dialog Extended](https://github.com/btzy/nativefiledialog-extended)| A small C library that portably invokes native file open, folder select and file save dialogs.|\n| [tinyfd](https://sourceforge.net/projects/tinyfiledialogs/)| A native dialog library.|\n\n#### Audio\n\n| Library| Description|\n|--------|------------|\n| [FMOD](https://www.fmod.com)| An end-to-end solution for adding sound and music to any game.|\n| [OpenAL](https://www.openal.org/)| A cross-platform 3D audio API appropriate for use with gaming applications and many other types of audio applications.|\n| [OpenAL Soft](https://openal-soft.org/)| An LGPL-licensed, cross-platform, software implementation of the OpenAL 3D audio API.|\n| [Opus](https://opus-codec.org/)| A totally open, royalty-free, highly versatile audio codec.|\n\n#### Graphics\n\n| Library| Description|\n|--------|------------|\n| [Assimp](https://www.assimp.org/)| A portable Open Source library to import various well-known 3D model formats in a uniform manner.|\n| [bgfx](https://bkaradzic.github.io/bgfx/)| Cross-platform, graphics API agnostic, “Bring Your Own Engine/Framework” style rendering library, licensed under permissive BSD-2 clause open source license.|\n| [FreeType](https://freetype.org/)| A freely available software library to render fonts.|\n| [HarfBuzz](https://harfbuzz.github.io/)| A text shaping library that allows programs to convert a sequence of Unicode input into properly formatted and positioned glyph output — for any writing system and language.|\n| [meshoptimizer](https://github.com/zeux/meshoptimizer)| A mesh optimization library that makes meshes smaller and faster to render.|\n| [msdfgen](https://github.com/Chlumsky/msdfgen)| A multi-channel signed distance field generator.|\n| [NanoSVG](https://github.com/memononen/nanosvg)| A simple stupid SVG parser.|\n| [NanoVG](https://github.com/memononen/nanovg)| A small antialiased vector graphics rendering library for OpenGL.|\n| [Nuklear](https://github.com/vurtun/nuklear)| A minimal state immediate mode graphical user interface toolkit written in ANSI C and licensed under public domain.|\n| [par_octasphere](https://prideout.net/blog/octasphere)| Generates triangle meshes for spheres, rounded boxes, and capsules.|\n| [par_shapes](https://prideout.net/shapes)| Generate parametric surfaces and other simple shapes.|\n| [par_streamlines](https://prideout.net/blog/par_streamlines/)| Triangulate wide lines and curves.|\n| [Shaderc](https://github.com/google/shaderc)| A collection of libraries for shader compilation.|\n| [SPIRV-Cross](https://github.com/KhronosGroup/SPIRV-Cross)| A library for performing reflection on SPIR-V and disassembling SPIR-V back to high level languages.|\n| [Tiny OpenEXR](https://github.com/syoyo/tinyexr)| A small, single header-only library to load and save OpenEXR(.exr) images.|\n| [Tootle (AMD)](https://github.com/GPUOpen-Tools/amd-tootle)| A 3D triangle mesh optimization library that improves on existing mesh preprocessing techniques.|\n| [Vulkan Memory Allocator](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)| An easy to integrate Vulkan memory allocation library.|\n| [Yoga](https://facebook.github.io/yoga/)| An open-source, cross-platform layout library that implements Flexbox.|\n\n#### AR/VR\n\n| Library| Description|\n|--------|------------|\n| [LibOVR](https://developer.oculus.com/documentation/)| The API of the Oculus SDK.|\n| [OpenVR](https://github.com/ValveSoftware/openvr)| An API and runtime that allows access to VR hardware from multiple vendors without requiring that applications have specific knowledge of the hardware they are targeting.|\n\n#### [stb](https://github.com/nothings/stb) - single-file public domain libraries for C/C++\n\n| Library| Description|\n|--------|------------|\n| stb_easy_font| Quick-and-dirty easy-to-deploy bitmap font for printing frame rate, etc.|\n| stb_image| Image loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC|\n| stb_image_resize| Resize images larger/smaller with good quality.|\n| stb_image_write| Image writing to disk: PNG, TGA, BMP|\n| stb_perlin| Revised Perlin noise (3D input, 1D output).|\n| stb_rect_pack| Simple 2D rectangle packer with decent quality.|\n| stb_truetype| Parse, decode, and rasterize characters from truetype fonts.|\n| stb_vorbis| Decode ogg vorbis files from file/memory to float/16-bit signed output.|\n\n#### Other\n\n| Library| Description|\n|--------|------------|\n| [CUDA](https://developer.nvidia.com/cuda-zone/)| A parallel computing platform and programming model developed by NVIDIA for general computing on GPUs.|\n| [hwloc](https://www.open-mpi.org/projects/hwloc/)| A portable abstraction of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading.|\n| [jemalloc](https://jemalloc.net/)| A general purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support.|\n| [libffi](https://sourceware.org)| A portable, high level programming interface to various calling conventions.|\n| [libdivide](https://libdivide.com/)| A library that replaces expensive integer divides with comparatively cheap multiplication and bitshifts.|\n| [LLVM](https://llvm.org/)| A collection of modular and reusable compiler and toolchain technologies.|\n| [LMDB](https://www.symas.com/lmdb)| An extraordinarily fast, memory-efficient database. With memory-mapped files, it has the read performance of a pure in-memory database while retaining the persistence of standard disk-based databases.|\n| [LZ4](https://lz4.org/)| A lossless data compression algorithm that is focused on compression and decompression speed.|\n| [Meow hash](https://github.com/cmuratori/meow_hash)| An extremely fast non-cryptographic hash.|\n| [ODBC](https://docs.microsoft.com/en-us/sql/odbc/microsoft-open-database-connectivity-odbc)| A C programming language interface that makes it possible for applications to access data from a variety of database management systems (DBMSs).|\n| [Remotery](https://github.com/Celtoys/Remotery)| A realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser.|\n| [rpmalloc](https://github.com/mjansson/rpmalloc)| A public domain cross platform lock free thread caching 16-byte aligned memory allocator implemented in C.|\n| [xxHash](https://github.com/Cyan4973/xxHash)| An Extremely fast Hash algorithm, running at RAM speed limits.|\n| [Zstandard](http://facebook.github.io/zstd/) (zstd)| A fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios.|\n\nUse of a binding is subject to the terms of the [corresponding license](https://github.com/LWJGL/lwjgl3/tree/master/doc/3rdparty).\n\n## Supporting this project\n\nLWJGL exists thanks to [all the people](https://github.com/LWJGL/lwjgl3/blob/master/BACKERS.md) who [contribute](https://github.com/LWJGL/lwjgl3/blob/master/.github/CONTRIBUTING.md) and donate to our collective.\n\n<a href=\"https://opencollective.com/lwjgl/donate\" target=\"_blank\">\n    <img src=\"https://opencollective.com/lwjgl/donate/button@2x.png?color=white\" width=300 />\n</a>"
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 19.9228515625,
          "content": "/*\n * Copyright LWJGL. All rights reserved.\n * License terms: https://www.lwjgl.org/license\n */\nimport java.net.*\n\nplugins {\n    `java-platform`\n    `maven-publish`\n    signing\n}\n\nval lwjglVersion: String by project\nval signingKeyId: String by project\nval signingKey: String by project\nval signingPassword: String by project\nval sonatypeUsername: String by project\nval sonatypePassword: String by project\n\ndefaultTasks = mutableListOf(\"publish\")\nbuildDir = file(\"bin/MAVEN\")\ngroup = \"org.lwjgl\"\nversion = lwjglVersion\n\nenum class BuildType {\n    LOCAL,\n    SNAPSHOT,\n    RELEASE\n}\n\ndata class Deployment(\n    val type: BuildType,\n    val repo: URI\n)\n\nval deployment = when {\n    hasProperty(\"release\") -> Deployment(\n        type = BuildType.RELEASE,\n        repo = uri(\"https://oss.sonatype.org/service/local/staging/deploy/maven2/\")\n    )\n    hasProperty(\"snapshot\") -> {\n        version = \"$version-SNAPSHOT\"\n        Deployment(\n            type = BuildType.SNAPSHOT,\n            repo = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n        )\n    }\n    else -> {\n        version = \"$version-SNAPSHOT\"\n        Deployment(\n            type = BuildType.LOCAL,\n            repo = repositories.mavenLocal().url\n        )\n    }\n}\nprintln(\"${deployment.type.name} BUILD\")\n\nenum class Platforms(val classifier: String) {\n    FREEBSD(\"freebsd\"),\n    LINUX(\"linux\"),\n    LINUX_ARM64(\"linux-arm64\"),\n    LINUX_ARM32(\"linux-arm32\"),\n    LINUX_PPC64LE(\"linux-ppc64le\"),\n    LINUX_RISCV64(\"linux-riscv64\"),\n    MACOS(\"macos\"),\n    MACOS_ARM64(\"macos-arm64\"),\n    WINDOWS(\"windows\"),\n    WINDOWS_X86(\"windows-x86\"),\n    WINDOWS_ARM64(\"windows-arm64\");\n\n    companion object {\n        val ALL = values()\n    }\n}\n\nenum class Artifacts(\n    val artifact: String,\n    val projectName: String,\n    val projectDescription: String,\n    vararg val platforms: Platforms\n) {\n    CORE(\"lwjgl\", \"LWJGL\", \"The LWJGL core library.\", *Platforms.ALL),\n    ASSIMP(\n        \"lwjgl-assimp\", \"LWJGL - Assimp bindings\",\n        \"A portable Open Source library to import various well-known 3D model formats in a uniform manner.\",\n        *Platforms.ALL\n    ),\n    BGFX(\n        \"lwjgl-bgfx\", \"LWJGL - bgfx bindings\",\n        \"A cross-platform, graphics API agnostic rendering library. It provides a high performance, low level abstraction for common platform graphics APIs like OpenGL, Direct3D and Apple Metal.\",\n        Platforms.FREEBSD,\n        Platforms.LINUX, Platforms.LINUX_ARM64, Platforms.LINUX_ARM32, Platforms.LINUX_PPC64LE, Platforms.LINUX_RISCV64,\n        Platforms.MACOS, Platforms.MACOS_ARM64,\n        Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    CUDA(\n        \"lwjgl-cuda\", \"LWJGL - CUDA bindings\",\n        \"A parallel computing platform and programming model developed by NVIDIA for general computing on GPUs.\"\n    ),\n    EGL(\n        \"lwjgl-egl\", \"LWJGL - EGL bindings\",\n        \"An interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system.\"\n    ),\n    FMOD(\n        \"lwjgl-fmod\", \"LWJGL - FMOD bindings\",\n        \"An end-to-end solution for adding sound and music to any game.\"\n    ),\n    FREETYPE(\n        \"lwjgl-freetype\", \"LWJGL - FreeType bindings\",\n        \"A freely available software library to render fonts.\",\n        *Platforms.ALL\n    ),\n    GLFW(\n        \"lwjgl-glfw\", \"LWJGL - GLFW bindings\",\n        \"A multi-platform library for OpenGL, OpenGL ES and Vulkan development on the desktop. It provides a simple API for creating windows, contexts and surfaces, receiving input and events.\",\n        *Platforms.ALL\n    ),\n    HARFBUZZ(\n        \"lwjgl-harfbuzz\", \"LWJGL - HarfBuzz bindings\",\n        \"A text shaping library that allows programs to convert a sequence of Unicode input into properly formatted and positioned glyph output — for any writing system and language.\",\n        *Platforms.ALL\n    ),\n    HWLOC(\n        \"lwjgl-hwloc\", \"LWJGL - hwloc bindings\",\n        \"A portable abstraction of the hierarchical topology of modern architectures, including NUMA memory nodes, sockets, shared caches, cores and simultaneous multithreading.\",\n        *Platforms.ALL\n    ),\n    JAWT(\n        \"lwjgl-jawt\", \"LWJGL - JAWT bindings\",\n        \"The AWT native interface.\"\n    ),\n    JEMALLOC(\n        \"lwjgl-jemalloc\", \"LWJGL - jemalloc bindings\",\n        \"A general purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support.\",\n        *Platforms.ALL\n    ),\n    KTX(\n        \"lwjgl-ktx\", \"LWJGL - KTX (Khronos Texture) bindings\",\n        \"A lightweight container for textures for OpenGL®, Vulkan® and other GPU APIs.\",\n        Platforms.FREEBSD,\n        Platforms.LINUX, Platforms.LINUX_ARM64, Platforms.LINUX_ARM32, Platforms.LINUX_PPC64LE, Platforms.LINUX_RISCV64,\n        Platforms.MACOS, Platforms.MACOS_ARM64,\n        Platforms.WINDOWS, Platforms.WINDOWS_ARM64\n    ),\n    LIBDIVIDE(\n        \"lwjgl-libdivide\", \"LWJGL - libdivide bindings\",\n        \"A library that replaces expensive integer divides with comparatively cheap multiplication and bitshifts.\",\n        *Platforms.ALL\n    ),\n    LLVM(\n        \"lwjgl-llvm\", \"LWJGL - LLVM/Clang bindings\",\n        \"A collection of modular and reusable compiler and toolchain technologies.\",\n        *Platforms.ALL\n    ),\n    LMDB(\n        \"lwjgl-lmdb\", \"LWJGL - LMDB bindings\",\n        \"A compact, fast, powerful, and robust database that implements a simplified variant of the BerkeleyDB (BDB) API.\",\n        *Platforms.ALL\n    ),\n    LZ4(\n        \"lwjgl-lz4\", \"LWJGL - LZ4 bindings\",\n        \"A lossless data compression algorithm that is focused on compression and decompression speed.\",\n        *Platforms.ALL\n    ),\n    MEOW(\n        \"lwjgl-meow\", \"LWJGL - Meow hash bindings\",\n        \"An extremely fast non-cryptographic hash.\",\n        Platforms.FREEBSD,\n        Platforms.LINUX, Platforms.LINUX_ARM64,\n        Platforms.MACOS, Platforms.MACOS_ARM64,\n        Platforms.WINDOWS, Platforms.WINDOWS_X86, Platforms.WINDOWS_ARM64\n    ),\n    MESHOPTIMIZER(\n        \"lwjgl-meshoptimizer\", \"LWJGL - meshoptimizer bindings\",\n        \"A library that provides algorithms to help optimize meshes.\",\n        *Platforms.ALL\n    ),\n    MSDFGEN(\n        \"lwjgl-msdfgen\", \"LWJGL - msdfgen bindings\",\n        \"Multi-channel signed distance field generator.\",\n        *Platforms.ALL\n    ),\n    NANOVG(\n        \"lwjgl-nanovg\", \"LWJGL - NanoVG & NanoSVG bindings\",\n        \"A small antialiased vector graphics rendering library for OpenGL. Also includes NanoSVG, a simple SVG parser.\",\n        *Platforms.ALL\n    ),\n    NFD(\n        \"lwjgl-nfd\", \"LWJGL - Native File Dialog bindings\",\n        \"A small C library that portably invokes native file open, folder select and file save dialogs.\",\n        *Platforms.ALL\n    ),\n    NUKLEAR(\n        \"lwjgl-nuklear\", \"LWJGL - Nuklear bindings\",\n        \"A minimal state immediate mode graphical user interface toolkit.\",\n        *Platforms.ALL\n    ),\n    ODBC(\n        \"lwjgl-odbc\", \"LWJGL - ODBC bindings\",\n        \"A C programming language interface that makes it possible for applications to access data from a variety of database management systems (DBMSs).\"\n    ),\n    OPENAL(\n        \"lwjgl-openal\", \"LWJGL - OpenAL bindings\",\n        \"A cross-platform 3D audio API appropriate for use with gaming applications and many other types of audio applications.\",\n        *Platforms.ALL\n    ),\n    OPENCL(\n        \"lwjgl-opencl\", \"LWJGL - OpenCL bindings\",\n        \"An open, royalty-free standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms.\"\n    ),\n    OPENGL(\n        \"lwjgl-opengl\", \"LWJGL - OpenGL bindings\",\n        \"The most widely adopted 2D and 3D graphics API in the industry, bringing thousands of applications to a wide variety of computer platforms.\",\n        *Platforms.ALL\n    ),\n    OPENGLES(\n        \"lwjgl-opengles\", \"LWJGL - OpenGL ES bindings\",\n        \"A royalty-free, cross-platform API for full-function 2D and 3D graphics on embedded systems - including consoles, phones, appliances and vehicles.\",\n        *Platforms.ALL\n    ),\n    OPENVR(\n        \"lwjgl-openvr\", \"LWJGL - OpenVR bindings\",\n        \"An API and runtime that allows access to VR hardware from multiple vendors without requiring that applications have specific knowledge of the hardware they are targeting.\",\n        Platforms.LINUX, Platforms.LINUX_ARM64, Platforms.MACOS, Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    OPENXR(\n        \"lwjgl-openxr\", \"LWJGL - OpenXR bindings\",\n        \"A royalty-free, open standard that provides high-performance access to Augmented Reality (AR) and Virtual Reality (VR)—collectively known as XR—platforms and devices.\",\n        Platforms.FREEBSD,\n        Platforms.LINUX, Platforms.LINUX_ARM64, Platforms.LINUX_ARM32, Platforms.LINUX_PPC64LE, Platforms.LINUX_RISCV64,\n        Platforms.WINDOWS, Platforms.WINDOWS_X86, Platforms.WINDOWS_ARM64\n    ),\n    OPUS(\n        \"lwjgl-opus\", \"LWJGL - Opus bindings\",\n        \"A totally open, royalty-free, highly versatile audio codec.\",\n        *Platforms.ALL\n    ),\n    OVR(\n        \"lwjgl-ovr\", \"LWJGL - OVR bindings\",\n        \"The API of the Oculus SDK.\",\n        Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    PAR(\n        \"lwjgl-par\", \"LWJGL - par_shapes bindings\",\n        \"Generate parametric surfaces and other simple shapes.\",\n        *Platforms.ALL\n    ),\n    REMOTERY(\n        \"lwjgl-remotery\", \"LWJGL - Remotery bindings\",\n        \"A realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser.\",\n        Platforms.FREEBSD,\n        Platforms.LINUX, Platforms.LINUX_ARM64, Platforms.LINUX_ARM32, Platforms.LINUX_PPC64LE, Platforms.LINUX_RISCV64,\n        Platforms.MACOS, Platforms.MACOS_ARM64,\n        Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    RPMALLOC(\n        \"lwjgl-rpmalloc\", \"LWJGL - rpmalloc bindings\",\n        \"A public domain cross platform lock free thread caching 16-byte aligned memory allocator implemented in C.\",\n        *Platforms.ALL\n    ),\n    SHADERC(\n        \"lwjgl-shaderc\", \"LWJGL - Shaderc bindings\",\n        \"A collection of libraries for shader compilation.\",\n        *Platforms.ALL\n    ),\n    SPVC(\n        \"lwjgl-spvc\", \"LWJGL - SPIRV-Cross bindings\",\n        \"A library for performing reflection on SPIR-V and disassembling SPIR-V back to high level languages.\",\n        *Platforms.ALL\n    ),\n    SSE(\n        \"lwjgl-sse\", \"LWJGL - SSE bindings\",\n        \"Simple SSE intrinsics.\",\n        Platforms.FREEBSD, Platforms.LINUX, Platforms.MACOS, Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    STB(\n        \"lwjgl-stb\", \"LWJGL - stb bindings\",\n        \"Single-file public domain libraries for fonts, images, ogg vorbis files and more.\",\n        *Platforms.ALL\n    ),\n    TINYEXR(\n        \"lwjgl-tinyexr\", \"LWJGL - Tiny OpenEXR bindings\",\n        \"A small library to load and save OpenEXR(.exr) images.\",\n        *Platforms.ALL\n    ),\n    TINYFD(\n        \"lwjgl-tinyfd\", \"LWJGL - Tiny File Dialogs bindings\",\n        \"Provides basic modal dialogs.\",\n        *Platforms.ALL\n    ),\n    TOOTLE(\n        \"lwjgl-tootle\", \"LWJGL - AMD Tootle bindings\",\n        \"A 3D triangle mesh optimization library that improves on existing mesh preprocessing techniques.\",\n        Platforms.FREEBSD, Platforms.LINUX, Platforms.MACOS, Platforms.WINDOWS, Platforms.WINDOWS_X86\n    ),\n    VMA(\n        \"lwjgl-vma\", \"LWJGL - Vulkan Memory Allocator bindings\",\n        \"An easy to integrate Vulkan memory allocation library.\",\n        *Platforms.ALL\n    ),\n    VULKAN(\n        \"lwjgl-vulkan\", \"LWJGL - Vulkan bindings\",\n        \"A new generation graphics and compute API that provides high-efficiency, cross-platform access to modern GPUs used in a wide variety of devices from PCs and consoles to mobile phones and embedded platforms.\",\n        Platforms.MACOS, Platforms.MACOS_ARM64\n    ),\n    XXHASH(\n        \"lwjgl-xxhash\", \"LWJGL - xxHash bindings\",\n        \"An extremely fast hash algorithm, running at RAM speed limits.\",\n        *Platforms.ALL\n    ),\n    YOGA(\n        \"lwjgl-yoga\", \"LWJGL - Yoga bindings\",\n        \"An open-source, cross-platform layout library that implements Flexbox.\",\n        *Platforms.ALL\n    ),\n    ZSTD(\n        \"lwjgl-zstd\", \"LWJGL - Zstandard bindings\",\n        \"A fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios.\",\n        *Platforms.ALL\n    );\n\n    fun directory(buildDir: String) = \"$buildDir/$artifact\"\n\n    private fun path() = \"${directory(\"bin/MAVEN\")}/$artifact\"\n\n    val isActive get() = File(directory(\"bin/RELEASE\")).exists()\n\n    fun hasArtifact(classifier: String) = File(\"${directory(\"bin/RELEASE\")}/${artifact}-${classifier}.jar\").exists()\n\n    fun artifact(classifier: String? = null) =\n        if (classifier === null)\n            File(\"${path()}.jar\")\n        else\n            File(\"${path()}-$classifier.jar\")\n\n}\n\npublishing {\n    repositories {\n        maven {\n            url = deployment.repo\n\n            if (deployment.type !== BuildType.LOCAL) {\n                credentials {\n                    username = sonatypeUsername\n                    password = sonatypePassword\n                }\n            }\n        }\n    }\n    publications {\n        /*\n        Ideally, we'd have the following structure:\n        -------------------------------------------\n        lwjgl\n            lwjgl-windows (depends on lwjgl)\n        glfw (depends on lwjgl)\n            glfw-windows (depends on glfw & lwjgl-windows)\n        stb (depends on lwjgl)\n            stb-windows (depends on stb & lwjgl-windows)\n        -------------------------------------------\n        If a user wanted to use GLFW + stb in their project, running on\n        the Windows platform, they'd only have to define glfw-windows\n        and stb-windows as dependencies. This would automatically\n        resolve stb, glfw, lwjgl and lwjgl-windows as transitive\n        dependencies. Unfortunately, it is not possible to define such\n        a relationship between Maven artifacts when using classifiers.\n        A method to make this work is make the natives-<arch> classified\n        JARs separate artifacts. We do not do it for aesthetic reasons.\n        Instead, we assume that a tool is available (on the LWJGL website)\n        that automatically generates POM/Gradle dependency structures for\n        projects wanting to use LWJGL. The output is going to be verbose;\n        the above example is going to look like this in Gradle:\n        -------------------------------------------\n        compile 'org.lwjgl:lwjgl:$lwjglVersion' // NOTE: this is optional, all binding artifacts have a dependency on lwjgl\n            compile 'org.lwjgl:lwjgl:$lwjglVersion:natives-$lwjglArch'\n        compile 'org.lwjgl:lwjgl-glfw:$lwjglVersion'\n            compile 'org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-$lwjglArch'\n        compile 'org.lwjgl:lwjgl-stb:$lwjglVersion'\n            compile 'org.lwjgl:lwjgl-stb:$lwjglVersion:natives-$lwjglArch'\n        -------------------------------------------\n        and a whole lot more verbose in Maven. Hopefully, the automation\n        is going to alleviate the pain.\n         */\n        fun org.gradle.api.publish.maven.MavenPom.setupPom(pomName: String, pomDescription: String, pomPackaging: String) {\n            name.set(pomName)\n            description.set(pomDescription)\n            url.set(\"https://www.lwjgl.org\")\n            packaging = pomPackaging\n\n            scm {\n                connection.set(\"scm:git:https://github.com/LWJGL/lwjgl3.git\")\n                developerConnection.set(\"scm:git:https://github.com/LWJGL/lwjgl3.git\")\n                url.set(\"https://github.com/LWJGL/lwjgl3.git\")\n            }\n\n            licenses {\n                license {\n                    name.set(\"BSD-3-Clause\")\n                    url.set(\"https://www.lwjgl.org/license\")\n                    distribution.set(\"repo\")\n                }\n            }\n\n            developers {\n                developer {\n                    id.set(\"spasi\")\n                    name.set(\"Ioannis Tsakpinis\")\n                    email.set(\"iotsakp@gmail.com\")\n                    url.set(\"https://github.com/Spasi\")\n                }\n            }\n        }\n\n        Artifacts.values().forEach { module ->\n            if (module.isActive) {\n                create<MavenPublication>(\"maven${module.name}\") {\n                    artifactId = module.artifact\n                    artifact(module.artifact())\n                    if (deployment.type !== BuildType.LOCAL || module.hasArtifact(\"sources\")) {\n                        artifact(module.artifact(\"sources\")) {\n                            classifier = \"sources\"\n                        }\n                    }\n                    if (deployment.type !== BuildType.LOCAL || module.hasArtifact(\"javadoc\")) {\n                        artifact(module.artifact(\"javadoc\")) {\n                            classifier = \"javadoc\"\n                        }\n                    }\n                    module.platforms.forEach {\n                        if (deployment.type !== BuildType.LOCAL || module.hasArtifact(\"natives-${it.classifier}\")) {\n                            artifact(module.artifact(\"natives-${it.classifier}\")) {\n                                classifier = \"natives-${it.classifier}\"\n                            }\n                        }\n                    }\n\n                    pom {\n                        setupPom(module.projectName, module.projectDescription, \"jar\")\n\n                        if (module != Artifacts.CORE) {\n                            withXml {\n                                asNode().appendNode(\"dependencies\").apply {\n                                    appendNode(\"dependency\").apply {\n                                        appendNode(\"groupId\", \"org.lwjgl\")\n                                        appendNode(\"artifactId\", \"lwjgl\")\n                                        appendNode(\"version\", project.version)\n                                        appendNode(\"scope\", \"compile\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        create<MavenPublication>(\"lwjglBOM\") {\n            from(components[\"javaPlatform\"])\n            artifactId = \"lwjgl-bom\"\n\n            pom {\n                setupPom(\"LWJGL BOM\", \"LWJGL 3 Bill of Materials.\", \"pom\")\n\n                withXml {\n                    asElement().getElementsByTagName(\"dependencyManagement\").item(0).apply {\n                        asElement().getElementsByTagName(\"dependencies\").item(0).apply {\n                            Artifacts.values().forEach { module ->\n                                module.platforms.forEach {\n                                    ownerDocument.createElement(\"dependency\").also(::appendChild).apply {\n                                        appendChild(ownerDocument.createElement(\"groupId\").also(::appendChild).apply { textContent = \"org.lwjgl\" })\n                                        appendChild(ownerDocument.createElement(\"artifactId\").also(::appendChild).apply { textContent = module.artifact })\n                                        appendChild(ownerDocument.createElement(\"version\").also(::appendChild).apply { textContent = project.version as String })\n                                        appendChild(ownerDocument.createElement(\"classifier\").also(::appendChild).apply { textContent = \"natives-${it.classifier}\" })\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // Workaround for https://github.com/gradle/gradle/issues/7529\n                    asNode()\n                }\n            }\n        }\n    }\n}\n\nsigning {\n    useInMemoryPgpKeys(\n        signingKeyId,\n        signingKey,\n        signingPassword\n    )\n    sign(publishing.publications)\n}\n\nval copyArchives = tasks.create<Copy>(\"copyArchives\") {\n    from(\"bin/RELEASE\")\n    include(\"**\")\n    destinationDir = buildDir\n}\n\ntasks.withType<Sign> {\n    dependsOn(copyArchives)\n}\n\ndependencies {\n    constraints {\n        Artifacts.values().forEach { module ->\n            api(\"org.lwjgl:${module.artifact}:$version\")\n        }\n    }\n}"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 91.818359375,
          "content": "<!--\n  ~ Copyright LWJGL. All rights reserved.\n  ~ License terms: https://www.lwjgl.org/license\n  -->\n<project name=\"LWJGL\" basedir=\".\" default=\"all\" xmlns:if=\"ant:if\" xmlns:unless=\"ant:unless\">\n\n    <property name=\"build.sysclasspath\" value=\"ignore\"/>\n\n    <property name=\"config\" location=\"config\" relative=\"true\"/>\n\n    <import file=\"${config}/build-definitions.xml\"/>\n    <import file=\"${config}/build-assets.xml\"/>\n    <import file=\"${config}/${platform}/build.xml\"/>\n\n    <!-- Initialize build -->\n    <target name=\"init\" description=\"Initializes the directories required by the build process\">\n        <fail message=\"LWJGL requires Ant version 1.9.3 or higher.\">\n            <condition>\n                <not><antversion atleast=\"1.9.3\"/></not>\n            </condition>\n        </fail>\n\n        <echo taskname=\"override\" message=\"Build type: ${build.type}\" if:set=\"env.LWJGL_BUILD_TYPE\"/>\n        <echo taskname=\"override\" message=\"Build output: ${build.output}\" if:set=\"env.LWJGL_BUILD_OUTPUT\"/>\n        <echo taskname=\"override\" message=\"Build architecture: ${build.arch}\" if:set=\"env.LWJGL_BUILD_ARCH\"/>\n        <echo taskname=\"override\" message=\"Build offline: ${build.offline}\" if:set=\"env.LWJGL_BUILD_OFFLINE\"/>\n\n        <mkdir-symlink dir=\"bin\"/>\n\n        <ant antfile=\"update-dependencies.xml\" target=\"check-dependencies\" inheritAll=\"false\"/>\n\n        <taskdef resource=\"org/jetbrains/kotlin/ant/antlib.xml\" classpath=\"${kotlinc}/lib/kotlin-ant.jar\"/>\n        <taskdef resource=\"testngtasks\" classpath=\"${lib}/java/testng.jar;${lib}/java/slf4j-api.jar;${lib}/java/slf4j-jdk14.jar\"/>\n    </target>\n\n    <target name=\"init-wiki\" description=\"Initializes the lwjgl3-wiki git repository in /wiki. [Optional]\">\n        <confirm-replace dir=\"wiki\" msg=\"The wiki directory contents will be replaced with a fresh clone of the lwjgl3-wiki repository. Continue?\"/>\n\n        <delete dir=\"wiki\"/>\n        <exec executable=\"git\" failonerror=\"true\">\n            <arg value=\"clone\"/>\n            <arg value=\"https://github.com/LWJGL/lwjgl3-wiki.wiki.git\"/>\n            <arg value=\"wiki\"/>\n        </exec>\n    </target>\n\n    <target name=\"reset\" description=\"Resets the repository to its initial state.\">\n        <local name=\"input\"/>\n        <input\n            message=\"This action will clean everything and also remove libraries and sub-repositories. Continue?\"\n            validargs=\"y,n\"\n            defaultvalue=\"n\"\n            addproperty=\"input\"\n        />\n        <fail message=\"Cancelled.\">\n            <condition>\n                <equals arg1=\"n\" arg2=\"${input}\"/>\n            </condition>\n        </fail>\n\n        <antcall target=\"clean\"/>\n\n        <delete-symlink dir=\"bin\"/>\n\n        <delete dir=\".gradle\"/>\n        <delete dir=\"wiki\"/>\n\n        <echo message=\"Reset successful.\"/>\n    </target>\n\n    <target name=\"clean\" description=\"Cleans all directories controlled by this script\">\n        <delete includeemptydirs=\"true\">\n            <fileset dir=\"bin\">\n                <include name=\"**/*\"/>\n                <exclude name=\"libs/**\"/>\n            </fileset>\n        </delete>\n\n        <forEachModule>\n            <delete-symlink dir=\"${module.lwjgl}/${module}/src/generated\"/>\n        </forEachModule>\n        <!-- Do not delete /wiki, it may contain the lwjgl3-wiki git repo -->\n\n        <echo message=\"Cleanup successful.\"/>\n    </target>\n\n    <target name=\"clean-kotlin\" description=\"Deletes Kotlin binary files produced by this script\">\n        <delete dir=\"${bin.generator}\"/>\n        <delete dir=\"${bin.templates}\"/>\n    </target>\n\n    <target name=\"clean-java\" description=\"Deletes Java binary files produced by this script\">\n        <delete dir=\"${bin.lwjgl}\"/>\n        <delete dir=\"${bin.samples}\"/>\n        <delete dir=\"${bin.test}\"/>\n    </target>\n\n    <target name=\"clean-native\" description=\"Deletes native binary files produced by this script\">\n        <delete dir=\"${bin.native}\" unless:set=\"module\"/>\n        <delete dir=\"${bin.native}/${module}\" if:set=\"module\"/>\n    </target>\n\n    <target name=\"clean-generated\" description=\"Deletes sources, test results and documentation generated by this script\" depends=\"clean-generated-java,clean-generated-native\">\n        <delete dir=\"${bin.test.html}\"/>\n        <delete dir=\"${bin.javadoc}\"/>\n    </target>\n\n    <target name=\"clean-generated-java\" description=\"Deletes Java sources generated by this script\">\n        <delete file=\"${bin.generator}/generated-touch.txt\" quiet=\"true\"/>\n        <forEachModule unless:set=\"module\">\n            <delete dir=\"${module.lwjgl}/${module}/src/generated/java\"/>\n        </forEachModule>\n        <delete dir=\"${module.lwjgl}/${module}/src/generated/java\" if:set=\"module\"/>\n    </target>\n\n    <target name=\"clean-generated-native\" description=\"Deletes native sources generated by this script\">\n        <delete file=\"${bin.generator}/generated-touch.txt\" quiet=\"true\"/>\n        <forEachModule unless:set=\"module\">\n            <delete dir=\"${module.lwjgl}/${module}/src/generated/c\" quiet=\"true\"/>\n        </forEachModule>\n        <delete dir=\"${module.lwjgl}/${module}/src/generated/c\" quiet=\"true\" if:set=\"module\"/>\n    </target>\n\n    <target name=\"all\" description=\"Builds LWJGL and runs the tests\" depends=\"compile-templates, tests\"/>\n\n    <target name=\"-compile-generator\" depends=\"init\">\n        <local name=\"generator-uptodate\"/>\n        <uptodate targetfile=\"${bin.generator}/touch.txt\" property=\"generator-uptodate\">\n            <srcfiles dir=\"${src.generator}/kotlin\" includes=\"**\"/>\n        </uptodate>\n\n        <echo message=\"Compiling Kotlin generator...\" level=\"info\" taskname=\"Generator\" unless:set=\"generator-uptodate\"/>\n        <mkdir dir=\"${bin.generator}\"/>\n        <kotlinc moduleName=\"generator\" output=\"${bin.generator}\" printVersion=\"true\" unless:set=\"generator-uptodate\">\n            <compilerarg line=\"-language-version 2.1\"/>\n            <compilerarg line=\"-api-version 2.1\"/>\n            <compilerarg value=\"-progressive\"/>\n            <compilerarg value=\"-Xno-call-assertions\"/>\n            <compilerarg value=\"-Xno-param-assertions\"/>\n            <compilerarg value=\"-Xlambdas=indy\"/>\n            <compilerarg value=\"-Xreport-perf\"/>\n            <compilerarg value=\"-Xbackend-threads=${backend-threads}\" if:set=\"backend-threads\"/>\n            <compilerarg line=\"-jvm-target 1.8\"/>\n\n            <src path=\"${src.generator}/kotlin\"/>\n        </kotlinc>\n        <touch file=\"${bin.generator}/touch.txt\" unless:set=\"generator-uptodate\"/>\n\n        <lwjgl.javac\n            destdir=\"${bin.generator}\"\n\n            srcdir=\"${src.generator}/java\"\n            includes=\"org/lwjgl/**\"\n\n            taskname=\"javac: Generator Tools\"\n        />\n    </target>\n\n    <target name=\"compile-templates\" description=\"Compiles the Templates module\" depends=\"-compile-generator\">\n        <local name=\"templates-uptodate\"/>\n        <uptodate targetfile=\"${bin.templates}/touch.txt\" property=\"templates-uptodate\">\n            <srcfiles dir=\"${module.lwjgl}\" includes=\"**/kotlin/**/*.kt\"/>\n            <srcfiles dir=\"${bin.generator}\" includes=\"touch.txt\"/>\n        </uptodate>\n\n        <local name=\"egl_types\"/>\n        <condition property=\"egl_types\">\n            <and>\n                <isfalse value=\"${binding.egl}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.openxr}\"/>\n            </and>\n        </condition>\n\n        <local name=\"opengl_types\"/>\n        <condition property=\"opengl_types\">\n            <and>\n                <isfalse value=\"${binding.opengl}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.openxr}\"/>\n            </and>\n        </condition>\n\n        <local name=\"vulkan_types\"/>\n        <condition property=\"vulkan_types\">\n            <and>\n                <isfalse value=\"${binding.vulkan}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.openxr}\"/>\n            </and>\n        </condition>\n\n        <local name=\"core.kotlin.path\"/>\n        <property name=\"core.kotlin.path\" value=\"${module.lwjgl}/core/src/templates/kotlin/core\"/>\n\n        <echo message=\"Compiling Kotlin templates. This will take 1-2 minutes...\" level=\"info\" taskname=\"Templates\" unless:set=\"templates-uptodate\"/>\n        <mkdir dir=\"${bin.templates}\"/>\n        <kotlinc moduleName=\"templates\" output=\"${bin.templates}\" printVersion=\"true\" unless:set=\"templates-uptodate\">\n            <classpath>\n                <pathelement location=\"${bin.generator}\"/>\n            </classpath>\n\n            <compilerarg line=\"-language-version 2.1\"/>\n            <compilerarg line=\"-api-version 2.1\"/>\n            <compilerarg value=\"-progressive\"/>\n            <compilerarg value=\"-Xno-call-assertions\"/>\n            <compilerarg value=\"-Xno-param-assertions\"/>\n            <compilerarg value=\"-Xlambdas=indy\"/>\n            <compilerarg value=\"-Xreport-perf\"/>\n            <compilerarg value=\"-Xbackend-threads=${backend-threads}\" if:set=\"backend-threads\"/>\n            <compilerarg line=\"-jvm-target 1.8\"/>\n\n            <src path=\"${module.templatepath}\"/>\n\n            <src path=\"${module.lwjgl}/egl/src/templates/kotlin/egl/EGLTypes.kt\" if:set=\"egl_types\"/>\n            <src path=\"${module.lwjgl}/opengl/src/templates/kotlin/opengl/GLTypes.kt\" if:set=\"opengl_types\"/>\n            <src path=\"${module.lwjgl}/opengl/src/templates/kotlin/opengl/GLXTypes.kt\" if:set=\"opengl_types\"/>\n            <src path=\"${module.lwjgl}/opengl/src/templates/kotlin/opengl/WGLTypes.kt\" if:set=\"opengl_types\"/>\n            <src path=\"${module.lwjgl}/vulkan/src/templates/kotlin/vulkan/VKBase.kt\" if:set=\"vulkan_types\"/>\n            <src path=\"${module.lwjgl}/vulkan/src/templates/kotlin/vulkan/VKTypes.kt\" if:set=\"vulkan_types\"/>\n            <src path=\"${module.lwjgl}/vulkan/src/templates/kotlin/vulkan/ExtensionTypes.kt\" if:set=\"vulkan_types\"/>\n            <src path=\"${module.lwjgl}/vulkan/src/templates/kotlin/vulkan/VkVideoTypes.kt\" if:set=\"vulkan_types\"/>\n        </kotlinc>\n        <touch file=\"${bin.templates}/touch.txt\" unless:set=\"templates-uptodate\"/>\n    </target>\n\n    <target name=\"touch-kotlinc\" description=\"Used for touching from an IDE\">\n        <touch file=\"${bin.generator}/touch.txt\"/>\n        <touch file=\"${bin.templates}/touch.txt\"/>\n    </target>\n\n    <target name=\"cache-kotlinc\" description=\"Uploads the compiled Kotlin templates to build.lwjgl.org\" depends=\"init\">\n        <antcall target=\"clean-kotlin\" unless:set=\"quick\"/>\n        <antcall target=\"compile-templates\" unless:set=\"quick\"/>\n\n        <local name=\"commit\"/>\n        <exec executable=\"git\" failonerror=\"true\" outputproperty=\"commit\" taskname=\"Git revision\">\n            <arg value=\"log\"/>\n            <arg value=\"--first-parent\"/>\n            <arg value=\"--pretty=format:%H\"/>\n            <arg value=\"${revision}\" if:set=\"revision\"/>\n            <arg value=\"HEAD~1..HEAD\" unless:set=\"revision\"/>\n        </exec>\n\n        <jar destfile=\"templates.jar\" level=\"9\" taskname=\"Building templates.jar\">\n            <manifest>\n                <attribute name=\"Specification-Title\" value=\"LWJGL Kotlin Template Cache\"/>\n                <attribute name=\"Specification-Vendor\" value=\"lwjgl.org\"/>\n                <attribute name=\"Implementation-Version\" value=\"${commit}\"/>\n            </manifest>\n            <fileset dir=\".\">\n                <include name=\"${bin.generator}/**\"/>\n                <include name=\"${bin.templates}/**\"/>\n                <exclude name=\"**/*.txt\"/>\n            </fileset>\n        </jar>\n\n        <apply executable=\"aws\" failonerror=\"true\" relative=\"true\" taskname=\"S3 upload\">\n            <arg value=\"s3\"/>\n            <arg value=\"mv\"/>\n\n            <srcfile/>\n\n            <arg value=\"s3://lwjgl-build/ci/\"/>\n            <arg line='--cache-control \"public, must-revalidate, proxy-revalidate, max-age=0\"'/>\n\n            <fileset file=\"templates.jar\"/>\n        </apply>\n    </target>\n\n    <target name=\"hydrate-kotlinc\" description=\"Downloads the compiled Kotlin templates to build.lwjgl.org\" depends=\"init\">\n        <!-- Download cache -->\n        <get taskname=\"Downloading templates.jar\" src=\"https://build.lwjgl.org/ci/templates.jar\" dest=\".\"/>\n\n        <!-- Validate commit -->\n        <local name=\"Implementation-Version\"/>\n        <loadproperties taskname=\"Cache revision\">\n            <zipentry zipfile=\"templates.jar\" name=\"META-INF/MANIFEST.MF\"/>\n            <filterchain>\n                <linecontains>\n                    <contains value=\"Implementation-Version\"/>\n                </linecontains>\n            </filterchain>\n        </loadproperties>\n\n        <local name=\"commit_message\"/>\n        <exec executable=\"git\" failonerror=\"true\" outputproperty=\"commit_message\" taskname=\"Git message\">\n            <arg value=\"log\"/>\n            <arg value=\"--first-parent\"/>\n            <arg value=\"--pretty=format:%s\"/>\n            <arg value=\"HEAD~1..HEAD\"/>\n        </exec>\n\n        <local name=\"commit_CI\"/>\n        <condition property=\"commit_CI\" value=\"true\" else=\"false\">\n            <equals arg1=\"${commit_message}\" arg2=\"CI configuration\"/>\n        </condition>\n\n        <local name=\"commit\"/>\n        <exec executable=\"git\" failonerror=\"true\" outputproperty=\"commit\" taskname=\"Git revision\">\n            <arg value=\"log\"/>\n            <arg value=\"--first-parent\"/>\n            <arg value=\"--pretty=format:%H\"/>\n            <arg value=\"HEAD~2..HEAD~1\" if:true=\"${commit_CI}\"/>\n            <arg value=\"HEAD~1..HEAD\" unless:true=\"${commit_CI}\"/>\n        </exec>\n\n        <local name=\"commit_mismatch\"/>\n        <local name=\"fail_on_mismatch\"/>\n        <condition property=\"commit_mismatch\" value=\"true\">\n            <not><equals arg1=\"${Implementation-Version}\" arg2=\"${commit}\"/></not>\n        </condition>\n        <condition property=\"fail_on_mismatch\" value=\"true\">\n            <and>\n                <isset property=\"commit_mismatch\"/>\n                <not><isset property=\"hydrate-kotlinc.force\"/></not>\n            </and>\n        </condition>\n        <delete file=\"templates.jar\" taskname=\"Deleting the compiled Kotlin templates cache\" if:set=\"fail_on_mismatch\"/>\n        <fail message=\"The current commit does not match the Kotlin template cache's commit.\" if=\"fail_on_mismatch\"/>\n        <echo message=\"The current commit does not match the Kotlin template cache's commit, but hydration has been forced.\" taskname=\"WARNING\" if:set=\"commit_mismatch\"/>\n\n        <!-- Hydrate -->\n        <antcall target=\"clean-kotlin\"/>\n        <unzip src=\"templates.jar\" dest=\".\" taskname=\"Hydrating the compiled Kotlin templates\">\n            <patternset>\n                <include name=\"**/*\"/>\n                <exclude name=\"META-INF\"/>\n                <exclude name=\"META-INF/MANIFEST.MF\"/>\n            </patternset>\n        </unzip>\n        <antcall target=\"touch-kotlinc\"/>\n\n        <!-- Cleanup -->\n        <delete file=\"templates.jar\" taskname=\"Deleting the compiled Kotlin templates cache\"/>\n    </target>\n\n    <target name=\"formatter\" description=\"Runs the template formatter tool\" depends=\"-compile-generator\">\n        <java\n            classname=\"org.lwjgl.generator.util.TemplateFormatter\"\n            fork=\"true\"\n            spawn=\"true\"\n        >\n            <classpath>\n                <pathelement path=\"${bin.generator}\"/>\n                <pathelement path=\"${test.resources}\"/>\n            </classpath>\n        </java>\n    </target>\n\n    <target name=\"urlValidator\" description=\"Runs the URL validator tool\" depends=\"-compile-generator\">\n        <java\n            classname=\"org.lwjgl.generator.util.URLValidator\"\n            fork=\"true\"\n        >\n            <classpath>\n                <pathelement path=\"${bin.generator}\"/>\n                <pathelement path=\"${test.resources}\"/>\n            </classpath>\n            <arg line=\"${args}\" if:set=\"args\"/>\n        </java>\n    </target>\n\n    <target name=\"generate\" description=\"Runs the Generator\" depends=\"init\">\n        <local name=\"has-compiled-templates\"/>\n        <available file=\"${bin.templates}/META-INF\" type=\"dir\" property=\"has-compiled-templates\"/>\n        <fail unless=\"has-compiled-templates\" message=\"Please invoke the compile-templates target first.\"/>\n\n        <local name=\"generated-uptodate\"/>\n        <uptodate property=\"generated-uptodate\" targetfile=\"${bin.generator}/generated-touch.txt\">\n            <srcfiles dir=\"${config}\" includes=\"build-bindings.xml\"/>\n            <srcfiles dir=\"${bin.generator}\" includes=\"touch.txt\"/>\n            <srcfiles dir=\"${bin.templates}\" includes=\"touch.txt\"/>\n        </uptodate>\n\n        <forEachModule unless:set=\"generated-uptodate\">\n            <local name=\"linkPath\"/>\n            <property name=\"linkPath\" location=\"${module.lwjgl}/${module}/src/generated\" relative=\"true\"/>\n            <mkdir-symlink dir=\"${linkPath}\"/>\n        </forEachModule>\n\n        <java\n            classname=\"org.lwjgl.generator.GeneratorKt\"\n            fork=\"true\"\n            failonerror=\"true\"\n            taskname=\"Generator\"\n            unless:set=\"generated-uptodate\"\n        >\n            <classpath>\n                <pathelement path=\"${bin.generator}\"/>\n                <pathelement path=\"${bin.templates}\"/>\n                <pathelement path=\"${kotlinc}/lib/kotlin-stdlib.jar\"/>\n            </classpath>\n\n            <jvmarg line=\"${generator.bindings}\"/>\n            <jvmarg line=\"-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8 -Dline.separator=&#10;\"/>\n\n            <arg value=\"${module.lwjgl}\"/>\n        </java>\n        <touch file=\"${bin.generator}/generated-touch.txt\" verbose=\"false\" unless:set=\"generated-uptodate\"/>\n    </target>\n\n    <macrodef name=\"compileBinding\">\n        <attribute name=\"binding\"/>\n        <element name=\"body\" implicit=\"yes\" optional=\"yes\"/>\n        <sequential>\n            <!-- cleanup in case there was an earlier \"release\" failure -->\n            <delete dir=\"${module.lwjgl}/@{binding}/src/generated/java/META-INF\" quiet=\"true\"/>\n\n            <local name=\"hasMain\"/>\n            <available file=\"${module.lwjgl}/@{binding}/src/main/java\" type=\"dir\" property=\"hasMain\"/>\n\n            <mkdir dir=\"${bin.lwjgl}/@{binding}\"/>\n            <lwjgl.javac destdir=\"${bin.lwjgl}/@{binding}\" taskname=\"javac: @{binding}\" if:true=\"${binding.@{binding}}\">\n                <classpath>\n                    <pathelement path=\"${bin.lwjgl}/core\"/>\n                    <pathelement path=\"${lib}/java/jspecify.jar\"/>\n                </classpath>\n\n                <src>\n                    <pathelement path=\"${module.lwjgl}/@{binding}/src/main/java\" if:set=\"hasMain\"/>\n                    <pathelement path=\"${module.lwjgl}/@{binding}/src/generated/java\"/>\n                </src>\n                <include name=\"**\"/>\n\n                <body/>\n            </lwjgl.javac>\n        </sequential>\n    </macrodef>\n\n    <target name=\"compile\" description=\"Compiles the Java source code\" depends=\"generate\">\n        <!--\n        The @NullMarked annotation includes MODULE as a @Target, which is not compatible\n        with JDK 8 and produces a warning multiple times when building the LWJGL modules.\n\n        Compile a copy here without the module target and update jspecify.jar with it.\n        -->\n        <lwjgl.javac\n            destdir=\"bin/classes/ant\"\n\n            srcdir=\"modules/ant/src/main/java\"\n            includes=\"org/jspecify/annotations/**\"\n\n            taskname=\"javac: compile @NullMarked\"\n        />\n        <jar\n            destfile=\"${lib}/java/jspecify.jar\"\n            update=\"true\"\n\n            basedir=\"bin/classes/ant\"\n            includes=\"org/jspecify/annotations/NullMarked.class\"\n\n            taskname=\"jar: update JSpecify\"\n        />\n\n        <mkdir dir=\"${bin.lwjgl}/core\"/>\n\n        <!-- cleanup in case there was an earlier \"release\" failure -->\n        <delete dir=\"${module.lwjgl}/core/src/generated/java/META-INF\" quiet=\"true\"/>\n\n        <lwjgl.javac destdir=\"${bin.lwjgl}/core\" taskname=\"javac: core\">\n            <classpath><pathelement path=\"${lib}/java/jspecify.jar\"/></classpath>\n            <src>\n                <pathelement path=\"${module.lwjgl}/core/src/main/java/\"/>\n                <pathelement path=\"${module.lwjgl}/core/src/generated/java/\"/>\n            </src>\n            <include name=\"**\"/>\n        </lwjgl.javac>\n\n        <mkdir dir=\"${bin.lwjgl}/core/META-INF/versions/11\" if:set=\"jdk11\"/>\n        <delete file=\"${bin.lwjgl}/core/META-INF/versions/11/module-info.class\" quiet=\"true\" if:set=\"jdk11\"/>\n        <lwjgl.javac11 destdir=\"${bin.lwjgl}/core/META-INF/versions/11\" taskname=\"javac: Core - Java 11\" if:set=\"jdk11\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core\"/>\n                <pathelement path=\"${lib}/java/jspecify.jar\"/>\n            </classpath>\n            <src>\n                <pathelement path=\"${module.lwjgl}/core11/src/main/java\"/>\n            </src>\n            <include name=\"**\"/>\n        </lwjgl.javac11>\n\n        <mkdir dir=\"${bin.lwjgl}/core/META-INF/versions/17\" if:set=\"jdk17\"/>\n        <lwjgl.javac17 destdir=\"${bin.lwjgl}/core/META-INF/versions/17\" taskname=\"javac: Core - Java 17\" if:set=\"jdk17\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core\"/>\n            </classpath>\n            <src>\n                <pathelement path=\"${module.lwjgl}/core17/src/main/java\"/>\n            </src>\n            <include name=\"**\"/>\n        </lwjgl.javac17>\n\n        <mkdir dir=\"${bin.lwjgl}/core/META-INF/versions/21\" if:set=\"jdk21\"/>\n        <lwjgl.javac21 destdir=\"${bin.lwjgl}/core/META-INF/versions/21\" taskname=\"javac: Core - Java 21\" if:set=\"jdk21\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core\"/>\n            </classpath>\n            <src>\n                <pathelement path=\"${module.lwjgl}/core21/src/main/java\"/>\n            </src>\n            <include name=\"**\"/>\n        </lwjgl.javac21>\n\n        <parallel threadsPerProcessor=\"1\">\n            <compileBinding binding=\"assimp\"/>\n            <compileBinding binding=\"bgfx\"/>\n            <compileBinding binding=\"cuda\"/>\n            <compileBinding binding=\"egl\"/>\n            <compileBinding binding=\"fmod\"/>\n            <compileBinding binding=\"freetype\"/>\n            <compileBinding binding=\"harfbuzz\"/>\n            <compileBinding binding=\"hwloc\"/>\n            <compileBinding binding=\"jawt\"/>\n            <compileBinding binding=\"jemalloc\"/>\n            <compileBinding binding=\"libdivide\"/>\n            <compileBinding binding=\"llvm\"/>\n            <compileBinding binding=\"lmdb\"/>\n            <compileBinding binding=\"lz4\"/>\n            <compileBinding binding=\"meow\"/>\n            <compileBinding binding=\"meshoptimizer\"/>\n            <compileBinding binding=\"msdfgen\"/>\n            <compileBinding binding=\"nanovg\"/>\n            <compileBinding binding=\"nfd\"/>\n            <compileBinding binding=\"nuklear\"/>\n            <compileBinding binding=\"odbc\"/>\n            <compileBinding binding=\"openal\"/>\n            <compileBinding binding=\"opencl\"/>\n            <compileBinding binding=\"opengles\"/>\n            <compileBinding binding=\"openvr\"/>\n            <compileBinding binding=\"opus\"/>\n            <compileBinding binding=\"par\"/>\n            <compileBinding binding=\"remotery\"/>\n            <compileBinding binding=\"rpmalloc\"/>\n            <compileBinding binding=\"shaderc\"/>\n            <compileBinding binding=\"spvc\"/>\n            <compileBinding binding=\"sse\"/>\n            <compileBinding binding=\"stb\"/>\n            <compileBinding binding=\"tinyexr\"/>\n            <compileBinding binding=\"tinyfd\"/>\n            <compileBinding binding=\"tootle\"/>\n            <compileBinding binding=\"vulkan\"/>\n            <compileBinding binding=\"xxhash\"/>\n            <compileBinding binding=\"yoga\"/>\n            <compileBinding binding=\"zstd\"/>\n        </parallel>\n\n        <parallel threadsPerProcessor=\"1\">\n            <compileBinding binding=\"opengl\">\n                <classpath><pathelement path=\"${bin.lwjgl}/opencl\"/></classpath>\n            </compileBinding>\n            <compileBinding binding=\"ovr\">\n                <classpath><pathelement path=\"${bin.lwjgl}/vulkan\"/></classpath>\n            </compileBinding>\n            <compileBinding binding=\"vma\">\n                <classpath><pathelement path=\"${bin.lwjgl}/vulkan\"/></classpath>\n            </compileBinding>\n        </parallel>\n\n        <compileBinding binding=\"glfw\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/egl\"/>\n                <pathelement path=\"${bin.lwjgl}/opengl\"/>\n                <pathelement path=\"${bin.lwjgl}/opengles\"/>\n                <pathelement path=\"${bin.lwjgl}/vulkan\"/>\n            </classpath>\n            <exclude name=\"org/lwjgl/glfw/GLFWNativeEGL.java\" unless:true=\"${binding.egl}\"/>\n            <exclude name=\"org/lwjgl/glfw/GLFWNativeGLX.java\" unless:true=\"${binding.opengl}\"/>\n            <exclude name=\"org/lwjgl/glfw/GLFWNativeNSGL.java\" unless:true=\"${binding.opengl}\"/>\n            <exclude name=\"org/lwjgl/glfw/GLFWNativeWGL.java\" unless:true=\"${binding.opengl}\"/>\n            <exclude name=\"org/lwjgl/glfw/GLFWVulkan.java\" unless:true=\"${binding.vulkan}\"/>\n        </compileBinding>\n\n        <compileBinding binding=\"ktx\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/vulkan\"/>\n            </classpath>\n        </compileBinding>\n\n        <compileBinding binding=\"openxr\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/egl\"/>\n                <pathelement path=\"${bin.lwjgl}/opengl\"/>\n                <pathelement path=\"${bin.lwjgl}/vulkan\"/>\n            </classpath>\n        </compileBinding>\n    </target>\n\n    <target name=\"compile-native\" description=\"Compiles the native source code\" depends=\"init, compile\">\n        <mkdir dir=\"${bin.native}\"/>\n        <antcall target=\"compile-native-platform\"/>\n    </target>\n\n    <target name=\"-compile-extract\">\n        <local name=\"extract-uptodate\"/>\n        <uptodate targetfile=\"${bin.extract}/touch.txt\" property=\"extract-uptodate\">\n            <srcfiles dir=\"${src.extract}/kotlin\" includes=\"**\"/>\n        </uptodate>\n\n        <echo message=\"Compiling LWJGL Template Extraction Tool...\" level=\"info\" taskname=\"extract compilation\" unless:set=\"extract-uptodate\"/>\n        <mkdir dir=\"${bin.extract}\"/>\n        <kotlinc moduleName=\"extract\" output=\"${bin.extract}\" printVersion=\"true\" unless:set=\"extract-uptodate\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/21\" if:set=\"core.java21\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/17\" if:set=\"core.java17\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/11\" if:set=\"core.java11\"/>\n                <pathelement path=\"${module.classpath}\"/>\n                <pathelement path=\"${kotlinc}/lib/kotlin-stdlib.jar\"/>\n            </classpath>\n\n            <compilerarg line=\"-jvm-target 1.8\"/>\n            <compilerarg value=\"-Xno-call-assertions\"/>\n            <compilerarg value=\"-Xno-param-assertions\"/>\n            <compilerarg value=\"-Xreport-perf\"/>\n            <compilerarg value=\"-progressive\"/>\n            <compilerarg value=\"-Xuse-experimental=kotlin.Experimental\"/>\n            <compilerarg value=\"-Xuse-experimental=kotlin.contracts.ExperimentalContracts\"/>\n\n            <src path=\"${src.extract}/kotlin\"/>\n        </kotlinc>\n        <touch file=\"${bin.extract}/touch.txt\" unless:set=\"extract-uptodate\"/>\n    </target>\n\n    <target name=\"touch-extract\" description=\"Used for touching from an IDE\">\n        <touch file=\"${bin.extract}/touch.txt\"/>\n    </target>\n\n    <target name=\"extract\" description=\"Runs the LWJGL Template Extraction tool\" depends=\"compile-native, -compile-extract\">\n        <java classname=\"org.lwjgl.extract.MainKt\" fork=\"true\" spawn=\"true\" taskname=\"LWJGL Template Extraction Tool\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/21\" if:set=\"core.java21\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/17\" if:set=\"core.java17\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/11\" if:set=\"core.java11\"/>\n                <pathelement path=\"${module.classpath}\"/>\n                <pathelement path=\"${bin.extract}\"/>\n                <pathelement path=\"${test.resources}\"/>\n                <pathelement path=\"${kotlinc}/lib/kotlin-stdlib.jar\"/>\n                <pathelement path=\"${lib}/native\"/>\n            </classpath>\n\n            <jvmarg line=\"-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8\"/>\n            <jvmarg line=\"${jvmargs}\" if:set=\"jvmargs\"/>\n            <arg line=\"${args}\" if:set=\"args\"/>\n        </java>\n    </target>\n\n    <target name=\"compile-tests\" description=\"Compiles the LWJGL test suite\" depends=\"compile\">\n        <mkdir dir=\"${bin.test}\"/>\n        <forEachModule>\n            <local name=\"hasTests\"/>\n            <available property=\"hasTests\" file=\"${module.lwjgl}/${module}/src/test/java\" type=\"dir\"/>\n\n            <lwjgl.javac\n                destdir=\"${bin.test}\"\n                srcdir=\"${module.lwjgl}/${module}/src/test/java\"\n                includes=\"**\"\n                taskname=\"javac: ${module} tests\"\n                if:set=\"hasTests\"\n            >\n                <classpath>\n                    <pathelement path=\"${bin.lwjgl}/core\"/>\n                    <pathelement path=\"${bin.lwjgl}/${module}\"/>\n                    <pathelement path=\"${lib}/java/jspecify.jar\"/>\n                    <pathelement path=\"${lib}/java/testng.jar\"/>\n                </classpath>\n            </lwjgl.javac>\n        </forEachModule>\n\n        <local name=\"test.bgfx\"/>\n        <condition property=\"test.bgfx\">\n            <and>\n                <istrue value=\"${binding.bgfx}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.egl\"/>\n        <condition property=\"test.egl\">\n            <and>\n                <istrue value=\"${binding.egl}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.opengles}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.glfw\"/>\n        <condition property=\"test.glfw\">\n            <and>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.opengl}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.jawt\"/>\n        <condition property=\"test.jawt\">\n            <and>\n                <istrue value=\"${binding.jawt}\"/>\n                <istrue value=\"${binding.opengl}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.msdfgen\"/>\n        <condition property=\"test.msdfgen\">\n            <and>\n                <istrue value=\"${binding.freetype}\"/>\n                <istrue value=\"${binding.msdfgen}\"/>\n                <istrue value=\"${binding.stb}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.nanovg\"/>\n        <condition property=\"test.nanovg\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.nanovg}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.nuklear\"/>\n        <condition property=\"test.nuklear\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.nuklear}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.nfd\"/>\n        <condition property=\"test.nfd\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.nfd}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.openal\"/>\n        <condition property=\"test.openal\">\n            <and>\n                <istrue value=\"${binding.openal}\"/>\n                <istrue value=\"${binding.stb}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.opencl\"/>\n        <condition property=\"test.opencl\">\n            <and>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.opencl}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.openxr\"/>\n        <condition property=\"test.openxr\">\n            <and>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.opengl}\"/>\n                <istrue value=\"${binding.vulkan}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.par\"/>\n        <condition property=\"test.par\">\n            <and>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.nfd}\"/>\n                <istrue value=\"${binding.par}\"/>\n                <istrue value=\"${binding.stb}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.stb\"/>\n        <condition property=\"test.stb\">\n            <and>\n                <istrue value=\"${binding.stb}\"/>\n                <istrue value=\"${binding.glfw}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.tinyexr\"/>\n        <condition property=\"test.tinyexr\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.tinyexr}\"/>\n                <istrue value=\"${binding.tinyfd}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.tinyfd\"/>\n        <condition property=\"test.tinyfd\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.tinyfd}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.tootle\"/>\n        <condition property=\"test.tootle\">\n            <and>\n                <istrue value=\"${binding.assimp}\"/>\n                <istrue value=\"${binding.par}\"/>\n                <istrue value=\"${binding.tootle}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.vulkan\"/>\n        <condition property=\"test.vulkan\">\n            <and>\n                <istrue value=\"${binding.glfw}\"/>\n                <istrue value=\"${binding.vulkan}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.yoga\"/>\n        <condition property=\"test.yoga\">\n            <and>\n                <istrue value=\"${test.glfw}\"/>\n                <istrue value=\"${binding.stb}\"/>\n                <istrue value=\"${binding.yoga}\"/>\n            </and>\n        </condition>\n\n        <local name=\"test.hashing\"/>\n        <condition property=\"test.hashing\">\n            <and>\n                <istrue value=\"${binding.xxhash}\"/>\n                <istrue value=\"${binding.meow}\"/>\n            </and>\n        </condition>\n\n        <mkdir dir=\"${bin.samples}\"/>\n        <lwjgl.javac srcdir=\"modules/samples/src/test/java\" destdir=\"${bin.samples}\" taskname=\"javac: Samples\">\n            <classpath>\n                <pathelement path=\"${module.classpath}\"/>\n                <pathelement path=\"${bin.test}\"/>\n                <pathelement path=\"${lib}/java/jspecify.jar\"/>\n                <pathelement path=\"${lib}/java/jmh-core.jar\"/>\n                <pathelement path=\"${lib}/java/jmh-generator-annprocess.jar\"/>\n                <pathelement path=\"${lib}/java/joml.jar\"/>\n                <pathelement path=\"${lib}/java/testng.jar\"/>\n            </classpath>\n\n            <!-- Demos -->\n            <include name=\"org/lwjgl/demo/assimp/**\" if:true=\"${binding.assimp}\"/>\n            <include name=\"org/lwjgl/demo/bgfx/**\" if:set=\"test.bgfx\"/>\n            <include name=\"org/lwjgl/demo/cuda/**\" if:true=\"${binding.cuda}\"/>\n            <include name=\"org/lwjgl/demo/egl/**\" if:set=\"test.egl\"/>\n            <include name=\"org/lwjgl/demo/fmod/**\" if:true=\"${binding.fmod}\"/>\n            <include name=\"org/lwjgl/demo/glfw/**\" if:set=\"test.glfw\"/>\n            <include name=\"org/lwjgl/demo/llvm/**\" if:true=\"${binding.llvm}\"/>\n            <include name=\"org/lwjgl/demo/nanovg/**\" if:set=\"test.nanovg\"/>\n            <include name=\"org/lwjgl/demo/nuklear/**\" if:set=\"test.nuklear\"/>\n\n            <include name=\"org/lwjgl/demo/openal/**\" if:true=\"${binding.openal}\"/>\n            <exclude name=\"org/lwjgl/demo/openal/ALCDemo.java\" unless:set=\"test.openal\"/>\n            <exclude name=\"org/lwjgl/demo/openal/EFXTest.java\" unless:set=\"test.openal\"/>\n            <exclude name=\"org/lwjgl/demo/openal/HRTFDemo.java\" unless:set=\"test.openal\"/>\n\n            <include name=\"org/lwjgl/demo/opencl/**\" if:set=\"test.opencl\"/>\n            <include name=\"org/lwjgl/demo/opencl/CLDemo.java\" if:true=\"${binding.opencl}\"/>\n\n            <include name=\"org/lwjgl/demo/opengl/**\" if:true=\"${binding.opengl}\"/>\n\n            <include name=\"org/lwjgl/demo/openvr/**\" if:true=\"${binding.openvr}\"/>\n            <include name=\"org/lwjgl/demo/openxr/**\" if:set=\"test.openxr\"/>\n            <include name=\"org/lwjgl/demo/ovr/**\" if:true=\"${binding.ovr}\"/>\n            <include name=\"org/lwjgl/demo/stb/**\" if:set=\"test.stb\"/>\n\n            <include name=\"org/lwjgl/demo/system/jawt/**\" if:set=\"test.jawt\"/>\n            <include name=\"org/lwjgl/demo/system/linux/liburing/**\"/>\n\n            <include name=\"org/lwjgl/demo/util/*.java\"/>\n            <include name=\"org/lwjgl/demo/util/freetype/**\" if:true=\"${binding.freetype}\"/>\n            <include name=\"org/lwjgl/demo/util/harfbuzz/**\" if:true=\"${binding.harfbuzz}\"/>\n            <include name=\"org/lwjgl/demo/util/hwloc/**\" if:true=\"${binding.hwloc}\"/>\n            <include name=\"org/lwjgl/demo/util/ktx/**\" if:true=\"${binding.ktx}\"/>\n            <include name=\"org/lwjgl/demo/util/lmdb/**\" if:true=\"${binding.lmdb}\"/>\n            <include name=\"org/lwjgl/demo/util/lz4/**\" if:true=\"${binding.lz4}\"/>\n            <include name=\"org/lwjgl/demo/util/meow/**\" if:true=\"${binding.meow}\"/>\n            <include name=\"org/lwjgl/demo/util/meshoptimizer/**\" if:true=\"${binding.meshoptimizer}\"/>\n            <include name=\"org/lwjgl/demo/util/msdfgen/**\" if:set=\"test.msdfgen\"/>\n            <include name=\"org/lwjgl/demo/util/nfd/**\" if:set=\"test.nfd\"/>\n            <include name=\"org/lwjgl/demo/util/par/**\" if:set=\"test.par\"/>\n            <include name=\"org/lwjgl/demo/util/remotery/**\" if:true=\"${binding.remotery}\"/>\n            <include name=\"org/lwjgl/demo/util/tinyexr/**\" if:set=\"test.tinyexr\"/>\n            <include name=\"org/lwjgl/demo/util/tinyfd/**\" if:set=\"test.tinyfd\"/>\n            <include name=\"org/lwjgl/demo/util/tootle/**\" if:set=\"test.tootle\"/>\n            <include name=\"org/lwjgl/demo/util/xxhash/**\" if:true=\"${binding.xxhash}\"/>\n            <include name=\"org/lwjgl/demo/util/yoga/**\" if:set=\"test.yoga\"/>\n            <include name=\"org/lwjgl/demo/util/zstd/**\" if:true=\"${binding.zstd}\"/>\n\n            <include name=\"org/lwjgl/demo/vulkan/**\" if:set=\"test.vulkan\"/>\n\n            <!-- Benchmarks -->\n            <include name=\"org/lwjgl/jmh/**\"/>\n            <exclude name=\"org/lwjgl/jmh/Hashing*\" unless:true=\"${test.hashing}\"/>\n            <exclude name=\"org/lwjgl/jmh/VarHandle*\" unless:set=\"jdk11\"/>\n        </lwjgl.javac>\n    </target>\n\n    <target name=\"tests\" description=\"Runs the LWJGL test suite\" depends=\"compile-tests, compile-native\">\n        <testng haltonfailure=\"true\" outputDir=\"${bin.test.html}\" taskname=\"Tests\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/21\" if:set=\"core.java21\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/17\" if:set=\"core.java17\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/11\" if:set=\"core.java11\"/>\n                <pathelement path=\"${module.classpath}\"/>\n                <pathelement path=\"${bin.test}\"/>\n                <pathelement path=\"${lib}/java/jcommander.jar\"/>\n                <pathelement path=\"${lib}/java/jquery.jar\"/>\n                <pathelement path=\"${lib}/java/slf4j-api.jar\"/>\n                <pathelement path=\"${lib}/java/slf4j-jdk14.jar\"/>\n                <pathelement path=\"${lib}/native\"/>\n            </classpath>\n\n            <!--<jvmarg value=\"-Xcheck:jni\"/>--> <!-- SIMD fails with this (see -XX:+RestoreMXCSROnJNICall) -->\n            <jvmarg value=\"-server\"/>\n            <jvmarg value=\"-ea\"/>\n            <jvmarg line=\"-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8\"/>\n            <jvmarg value=\"-Dorg.lwjgl.util.Debug=true\"/>\n            <jvmarg value=\"-Dorg.lwjgl.util.DebugAllocator=true\"/>\n            <jvmarg value=\"-XstartOnFirstThread\" if:set=\"platform.macos\"/>\n            <jvmarg value=\"-Xss256k\" if:set=\"build.arch.x64|x86\"/> <!-- for StackTest::testSOE -->\n            <jvmarg line=\"${jvmargs}\" if:set=\"jvmargs\"/>\n\n            <xmlfileset dir=\"${config}\" includes=\"tests.xml,tests_${platform}.xml\"/>\n        </testng>\n    </target>\n\n    <target name=\"demo\" description=\"Runs an LWJGL demo\" depends=\"compile-tests, compile-native, -update-assets\">\n        <fail message=\"Please use -Dclass=&lt;class&gt; to specify the demo main class to run.\" unless=\"class\"/>\n\n        <local name=\"spawn\"/>\n        <condition property=\"spawn\" value=\"true\" else=\"false\">\n            <isset property=\"jitwatch\"/>\n        </condition>\n\n        <local name=\"failonerror\"/>\n        <condition property=\"failonerror\" value=\"false\" else=\"true\">\n            <istrue value=\"${spawn}\"/>\n        </condition>\n\n        <java classname=\"${class}\" fork=\"true\" failonerror=\"${failonerror}\" spawn=\"${spawn}\" taskname=\"Demo\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/21\" if:set=\"core.java21\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/17\" if:set=\"core.java17\"/>\n                <pathelement path=\"${bin.lwjgl}/core/META-INF/versions/11\" if:set=\"core.java11\"/>\n                <pathelement path=\"${module.classpath}\"/>\n                <pathelement path=\"${bin.test}\"/>\n                <pathelement path=\"${bin.samples}\"/>\n                <pathelement path=\"${test.resources}\"/>\n                <pathelement path=\"${lib}/java/testng.jar\"/>\n                <pathelement path=\"${lib}/java/joml.jar\"/>\n                <pathelement path=\"${lib}/java/jmh-core.jar\"/>\n                <pathelement path=\"${lib}/java/commons-math3.jar\"/>\n                <pathelement path=\"${lib}/java/jopt-simple.jar\"/>\n                <pathelement path=\"${lib}/native\"/>\n            </classpath>\n\n            <jvmarg value=\"-server\"/>\n            <jvmarg line=\"-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8\"/>\n            <jvmarg value=\"-XstartOnFirstThread\" if:set=\"platform.macos\"/>\n            <!--<jvmarg value=\"-Xcheck:jni\"/>-->\n\n            <jvmarg line=\"-XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation\" if:set=\"jitwatch\"/>\n            <jvmarg line=\"-XX:+PrintAssembly -XX:PrintAssemblyOptions=intel -XX:-TieredCompilation -XX:-UseCompressedOops\" if:set=\"jitwatch\"/>\n            <jvmarg line=\"-XX:LogFile=${jitwatch}\" if:set=\"jitwatch\"/>\n\n            <!--<jvmarg line=\"-agentlib:native-image-agent=config-output-dir=META-INF/native-image\"/>-->\n\n            <jvmarg line=\"${jvmargs}\" if:set=\"jvmargs\"/>\n\n            <arg line=\"${args}\" if:set=\"args\"/>\n        </java>\n    </target>\n\n    <target name=\"-build-version\" depends=\"compile\">\n        <!-- -Dbuild.version is manually specified only when building a release -->\n        <condition property=\"build.release\" value=\"true\" else=\"false\">\n            <isset property=\"build.version\"/>\n        </condition>\n\n        <java classname=\"org.lwjgl.Version\" fork=\"true\" failonerror=\"true\" outputproperty=\"build.version\" errorproperty=\"build.version.plain\" unless:set=\"build.version\">\n            <classpath>\n                <pathelement path=\"${bin.lwjgl}/core\"/>\n                <pathelement path=\"${lib}/native\"/>\n            </classpath>\n            <jvmarg line=\"-Dfile.encoding=UTF-8 -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8\"/>\n        </java>\n    </target>\n\n    <target name=\"-check-AWS-credentials\">\n        <fail message=\"AWS credentials not configured.\">\n            <condition>\n                <not>\n                    <or>\n                        <and>\n                            <isset property=\"env.AWS_ACCESS_KEY_ID\"/>\n                            <isset property=\"env.AWS_SECRET_ACCESS_KEY\"/>\n                        </and>\n                        <isset property=\"env.AWS_CONFIG_FILE\"/>\n                    </or>\n                </not>\n            </condition>\n        </fail>\n    </target>\n\n    <!-- Includes all modules for javadoc.lwjgl.org -->\n    <target name=\"javadoc\" description=\"Generates the LWJGL JavaDoc\" depends=\"-compile-generator,-build-version\">\n        <echo message=\"It is recommended to generate JavaDoc on JDK 17 or higher.\" unless:set=\"jdk17\" taskname=\"Warning\"/>\n        <delete dir=\"${bin.javadoc}\"/>\n\n        <path id=\"javadoc.sources\">\n            <pathelement path=\"${module.javadocsourcepath}\"/>\n        </path>\n\n        <javadoc\n            destdir=\"${bin.javadoc}\"\n            sourcepathref=\"javadoc.sources\"\n            source=\"9\"\n            windowtitle=\"LWJGL ${build.version}\"\n            encoding=\"UTF-8\"\n            docencoding=\"UTF-8\"\n            charset=\"UTF-8\"\n            useexternalfile=\"true\"\n            nohelp=\"true\"\n            notree=\"true\"\n            public=\"true\"\n            Splitindex=\"true\"\n            failonerror=\"true\"\n            verbose=\"true\"\n        >\n            <doctitle><![CDATA[<h1>Lightweight Java Game Library</h1>]]></doctitle>\n            <bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href=\"https://www.lwjgl.org/license\">License terms</a>.</i>]]></bottom>\n\n            <classpath>\n                <pathelement path=\"${lib}/java/jspecify.jar\"/>\n            </classpath>\n\n            <arg value=\"-XDignore.symbol.file\"/> <!-- Suppresses internal API (e.g. Unsafe) usage warnings -->\n\n            <arg line=\"-Xdoclint:none\" if:set=\"nodoclint\"/>\n            <arg line=\"-Xdoclint:html,reference,syntax\" unless:set=\"nodoclint\"/>\n            <arg line=\"-Xmaxerrs 1000 -Xmaxwarns 1000\"/>\n            <arg line=\"-notimestamp\"/>\n            <arg value=\"-html5\" if:set=\"jdk11\"/>\n            <arg line=\"-J-Dfile.encoding=UTF-8 -J-Dstdout.encoding=UTF-8 -J-Dstderr.encoding=UTF-8 -J-Dline.separator=&#10;\"/>\n            <arg line=\"--add-exports jdk.javadoc/com.sun.tools.doclets=ALL-UNNAMED\" if:set=\"jdk11\"/>\n        </javadoc>\n        <get-quiet name=\"favicon\" url=\"https://www.lwjgl.org/favicon.ico\" dest=\"${bin.javadoc}\"/>\n    </target>\n\n    <target name=\"upload-native\" description=\"Uploads native build artifacts to build.lwjgl.org\" depends=\"compile-native,-check-AWS-credentials\">\n        <local name=\"revision\"/>\n        <property name=\"revision\" value=\"liblwjgl.so.git\" if:set=\"platform.freebsd\"/>\n        <property name=\"revision\" value=\"liblwjgl.so.git\" if:set=\"platform.linux\"/>\n        <property name=\"revision\" value=\"liblwjgl.dylib.git\" if:set=\"platform.macos\"/>\n        <property name=\"revision\" value=\"lwjgl.dll.git\" if:set=\"platform.windows\"/>\n\n        <exec executable=\"git\" failonerror=\"true\" output=\"${lib.native}/org/lwjgl/${revision}\" taskname=\"Git revision\">\n            <arg value=\"log\"/>\n            <arg value=\"--first-parent\"/>\n            <arg value=\"--pretty=format:%H\"/>\n            <arg value=\"HEAD~2..HEAD~1\"/> <!-- Skip the CI commit -->\n        </exec>\n\n        <apply executable=\"aws\" failonerror=\"true\" relative=\"true\" taskname=\"S3 upload\">\n            <arg value=\"s3\"/>\n            <arg value=\"cp\"/>\n\n            <srcfile/>\n\n            <arg value=\"s3://lwjgl-build/${build.type}/${platform.remote}/${build.arch}/\"/>\n            <arg line='--cache-control \"public, must-revalidate, proxy-revalidate, max-age=0\"'/>\n\n            <fileset dir=\".\">\n                <and>\n                    <filename name=\"${lib.native}/**\"/>\n                    <filename regex=\"\\${file.separator}(?:lib)?lwjgl.*?\\.(?:dll|dylib|so)(?:\\.git)?$\"/>\n                </and>\n            </fileset>\n        </apply>\n    </target>\n\n    <macrodef name=\"get-release\">\n        <attribute name=\"platform\"/>\n        <attribute name=\"arch\"/>\n        <attribute name=\"file\"/>\n\n        <sequential>\n            <!-- Skip .git files in offline mode -->\n            <local name=\"skip.git\"/>\n            <condition property=\"skip.git\">\n                <and>\n                    <istrue value=\"${build.offline}\"/>\n                    <matches string=\"@{file}\" pattern=\"^.+\\.git$\"/>\n                </and>\n            </condition>\n\n            <sequential unless:set=\"skip.git\">\n                <local name=\"destination\"/>\n                <condition property=\"destination\"\n                   value=\"${release}/${module}/META-INF/@{platform}/@{arch}/${module.path}\"\n                    else=\"${release}/${module}/native/@{platform}/@{arch}/${module.path}\"\n                >\n                    <matches string=\"@{file}\" pattern=\"^.+\\.git$\"/>\n                </condition>\n\n                <!-- Online build -->\n                <sequential unless:true=\"${build.offline}\">\n                    <local name=\"platform.remote.s3\"/>\n                    <condition property=\"platform.remote.s3\" value=\"macosx\" else=\"@{platform}\">\n                        <equals arg1=\"@{platform}\" arg2=\"macos\"/>\n                    </condition>\n                    <quiet>\n                        <mkdir dir=\"${destination}\"/>\n                    </quiet>\n                    <get\n                        src=\"https://build.lwjgl.org/${build.type}/${platform.remote.s3}/@{arch}/@{file}\"\n                        dest=\"${destination}\"\n                        usetimestamp=\"true\"\n                    />\n                </sequential>\n\n                <!-- Offline build -->\n                <sequential if:true=\"${build.offline}\">\n                    <local name=\"source\"/>\n                    <property name=\"source\" value=\"${lib}/native/@{platform}/@{arch}/${module.path}/@{file}\"/>\n\n                    <local name=\"available\"/>\n                    <available file=\"${source}\" property=\"available\"/>\n\n                    <echo message=\"Missing offline artifact: ${source}\" level=\"warning\" unless:set=\"available\"/>\n                    <quiet if:set=\"available\">\n                        <mkdir dir=\"${destination}\"/>\n                        <copy file=\"${source}\" todir=\"${destination}\"/>\n                    </quiet>\n                </sequential>\n            </sequential>\n        </sequential>\n    </macrodef>\n\n    <macrodef name=\"lwjgl-jar\">\n        <attribute name=\"destfile\"/>\n        <attribute name=\"title\"/>\n        <attribute name=\"platform\" default=\"\"/>\n        <element name=\"content\" optional=\"true\" implicit=\"true\"/>\n        <sequential>\n            <local name=\"platform-attrib\"/>\n            <condition property=\"platform-attrib\" value=\"true\" else=\"false\"><not><length string=\"@{platform}\" length=\"0\"/></not></condition>\n\n            <jar destfile=\"@{destfile}\" level=\"9\" index=\"true\" indexmetainf=\"true\" whenmanifestonly=\"skip\">\n                <manifest>\n                    <attribute name=\"Specification-Title\" value=\"Lightweight Java Game Library - @{title}\"/>\n                    <attribute name=\"Specification-Version\" value=\"${build.version}\"/>\n                    <attribute name=\"Specification-Vendor\" value=\"lwjgl.org\"/>\n                    <attribute name=\"Implementation-Title\" value=\"${module}\"/>\n                    <attribute name=\"Implementation-Version\" value=\"${revision}\"/>\n                    <attribute name=\"Implementation-Vendor\" value=\"lwjgl.org\"/>\n                    <attribute name=\"LWJGL-Platform\" value=\"@{platform}\" if:true=\"${platform-attrib}\"/>\n                    <attribute name=\"Multi-Release\" value=\"true\" if:set=\"jdk11\"/>\n                </manifest>\n                <content/>\n            </jar>\n        </sequential>\n    </macrodef>\n\n    <macrodef name=\"natives-jar\">\n        <attribute name=\"name\"/>\n        <attribute name=\"title\"/>\n        <attribute name=\"platform\"/>\n        <attribute name=\"path\"/>\n        <attribute name=\"type\"/>\n        <element name=\"content\" optional=\"true\" implicit=\"true\"/>\n        <sequential>\n            <local name=\"platform.skip\"/>\n            <condition property=\"platform.skip\">\n                <resourcecount when=\"eq\" count=\"0\">\n                    <fileset dir=\"${release}/${module}\" includes=\"native/@{path}/${module.path}/*.@{type}\"/>\n                </resourcecount>\n            </condition>\n\n            <lwjgl-jar destfile=\"${release}/${module}/${module}-natives-@{platform}.jar\" platform=\"@{path}\" title=\"@{title}\" unless:set=\"platform.skip\">\n                <fileset dir=\"${release}/${module}\" includes=\"META-INF/@{path}/${module.path}/*.@{type}*\"/>\n                <fileset dir=\"${release}/${module}/native\" includes=\"@{path}/${module.path}/*.@{type}*\"/>\n                <fileset dir=\"${release}/${module}/native/@{path}\" includes=\"META-INF/versions/11/module-info.class\" if:set=\"jdk11\"/>\n                <content/>\n            </lwjgl-jar>\n        </sequential>\n    </macrodef>\n\n    <macrodef name=\"release-natives\">\n        <attribute name=\"name\"/>\n        <attribute name=\"title\"/>\n        <attribute name=\"native-library\"/>\n        <element name=\"content\" optional=\"true\"/>\n        <element name=\"freebsd-content\" optional=\"true\"/>\n        <element name=\"linux-content\" optional=\"true\"/>\n        <element name=\"linux-arm64-content\" optional=\"true\"/>\n        <element name=\"linux-arm32-content\" optional=\"true\"/>\n        <element name=\"linux-ppc64le-content\" optional=\"true\"/>\n        <element name=\"linux-riscv64-content\" optional=\"true\"/>\n        <element name=\"macos-content\" optional=\"true\"/>\n        <element name=\"macos-arm64-content\" optional=\"true\"/>\n        <element name=\"windows-content\" optional=\"true\"/>\n        <element name=\"windows-x86-content\" optional=\"true\"/>\n        <element name=\"windows-arm64-content\" optional=\"true\"/>\n        <sequential>\n            <local name=\"auto-natives\"/>\n            <condition property=\"auto-natives\">\n                <not>\n                    <length string=\"@{native-library}\" length=\"0\"/>\n                </not>\n            </condition>\n\n            <local name=\"git-revision\"/>\n            <condition property=\"git-revision\" if:set=\"auto-natives\">\n                <not>\n                    <matches pattern=\"^lwjgl_.+\" string=\"@{native-library}\"/>\n                </not>\n            </condition>\n\n            <parallel threadsPerProcessor=\"4\" failonany=\"true\">\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"lib@{native-library}.so\" if:set=\"auto-natives\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"lib@{native-library}.so.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"lib@{native-library}.dylib\" if:set=\"auto-natives\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"lib@{native-library}.dylib.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"lib@{native-library}.dylib\" if:set=\"auto-natives\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"lib@{native-library}.dylib.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"@{native-library}.dll\" if:set=\"auto-natives\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"@{native-library}.dll.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"@{native-library}.dll\" if:set=\"auto-natives\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"@{native-library}.dll.git\" if:set=\"git-revision\"/>\n\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"@{native-library}.dll\" if:set=\"auto-natives\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"@{native-library}.dll.git\" if:set=\"git-revision\"/>\n\n                <content/>\n            </parallel>\n\n            <local name=\"missing-natives\"/>\n            <condition property=\"missing-natives\">\n                <and>\n                    <istrue value=\"${build.offline}\"/>\n                    <resourcecount when=\"eq\" count=\"0\">\n                        <fileset dir=\"${release}/${module}\">\n                            <include name=\"native/**/*.dll\"/>\n                            <include name=\"native/**/*.dylib\"/>\n                            <include name=\"native/**/*.so\"/>\n                        </fileset>\n                    </resourcecount>\n                </and>\n            </condition>\n\n            <sequential unless:set=\"missing-natives\">\n                <mkdir dir=\"${release}/${module}/META-INF\"/>\n                <checksum algorithm=\"SHA-1\" fileext=\".sha1\" todir=\"${release}/${module}/META-INF\">\n                    <fileset dir=\"${release}/${module}/native\">\n                        <include name=\"**/*.dll\"/>\n                        <include name=\"**/*.dylib\"/>\n                        <include name=\"**/*.so\"/>\n                    </fileset>\n                </checksum>\n\n                <!-- Generate module-info classes -->\n                <java\n                    classpath=\"bin/classes/generator\"\n                    classname=\"org.lwjgl.generator.util.ModuleInfoGen\"\n                    fork=\"true\"\n                    failonerror=\"true\"\n                    taskname=\"module-info-gen :: native :: ${module}\"\n                    if:set=\"jdk11\"\n                >\n                    <jvmarg value=\"-Dmodule.name.source=${module.name}\"/>\n                    <jvmarg value=\"-Dmodule.name.release=${module}\"/>\n                    <jvmarg value=\"-Dmodule.version=${module.version}\"/>\n                </java>\n\n                <!-- Create native jar files -->\n                <parallel threadsPerProcessor=\"1\" failonany=\"true\">\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"freebsd\" path=\"freebsd/x64\" type=\"so\">\n                        <freebsd-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"linux\" path=\"linux/x64\" type=\"so\">\n                        <linux-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"linux-arm64\" path=\"linux/arm64\" type=\"so\">\n                        <linux-arm64-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"linux-arm32\" path=\"linux/arm32\" type=\"so\">\n                        <linux-arm32-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"linux-ppc64le\" path=\"linux/ppc64le\" type=\"so\">\n                        <linux-ppc64le-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"linux-riscv64\" path=\"linux/riscv64\" type=\"so\">\n                        <linux-riscv64-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"macos\" path=\"macos/x64\" type=\"dylib\">\n                        <macos-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"macos-arm64\" path=\"macos/arm64\" type=\"dylib\">\n                        <macos-arm64-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"windows\" path=\"windows/x64\" type=\"dll\">\n                        <windows-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"windows-x86\" path=\"windows/x86\" type=\"dll\">\n                        <windows-x86-content/>\n                    </natives-jar>\n                    <natives-jar name=\"@{name}\" title=\"@{title}\" platform=\"windows-arm64\" path=\"windows/arm64\" type=\"dll\">\n                        <windows-arm64-content/>\n                    </natives-jar>\n                </parallel>\n            </sequential>\n        </sequential>\n    </macrodef>\n\n    <macrodef name=\"release-module\">\n        <attribute name=\"name\"/>\n        <attribute name=\"title\"/>\n        <attribute name=\"native-library\" default=\"\"/>\n        <element name=\"natives\" optional=\"true\"/>\n        <element name=\"freebsd\" optional=\"true\"/>\n        <element name=\"linux\" optional=\"true\"/>\n        <element name=\"linux-arm64\" optional=\"true\"/>\n        <element name=\"linux-arm32\" optional=\"true\"/>\n        <element name=\"linux-ppc64le\" optional=\"true\"/>\n        <element name=\"linux-riscv64\" optional=\"true\"/>\n        <element name=\"macos\" optional=\"true\"/>\n        <element name=\"macos-arm64\" optional=\"true\"/>\n        <element name=\"windows\" optional=\"true\"/>\n        <element name=\"windows-x86\" optional=\"true\"/>\n        <element name=\"windows-arm64\" optional=\"true\"/>\n        <sequential>\n            <local name=\"module.name\"/>\n            <property name=\"module.name\" value=\"@{name}\"/>\n\n            <local name=\"module\"/>\n            <condition property=\"module\" value=\"lwjgl\" else=\"lwjgl-@{name}\">\n                <equals arg1=\"@{name}\" arg2=\"core\"/>\n            </condition>\n\n            <local name=\"module.path\"/>\n            <property name=\"module.path\" value=\"${module.@{name}.path}\"/>\n\n            <quiet>\n                <mkdir dir=\"${release}/${module}\"/>\n            </quiet>\n\n            <!-- Bundle natives -->\n            <release-natives name=\"@{name}\" title=\"@{title}\" native-library=\"@{native-library}\" unless:set=\"java-only.binding.@{name}\">\n                <content><natives/></content>\n                <freebsd-content><freebsd/></freebsd-content>\n                <linux-content><linux/></linux-content>\n                <linux-arm64-content><linux-arm64/></linux-arm64-content>\n                <linux-arm32-content><linux-arm32/></linux-arm32-content>\n                <linux-ppc64le-content><linux-ppc64le/></linux-ppc64le-content>\n                <linux-riscv64-content><linux-riscv64/></linux-riscv64-content>\n                <macos-content><macos/></macos-content>\n                <macos-arm64-content><macos-arm64/></macos-arm64-content>\n                <windows-content><windows/></windows-content>\n                <windows-x86-content><windows-x86/></windows-x86-content>\n                <windows-arm64-content><windows-arm64/></windows-arm64-content>\n            </release-natives>\n\n            <!-- Bundle classes -->\n            <lwjgl-jar destfile=\"${release}/${module}/${module}.jar\" title=\"@{title}\">\n                <fileset dir=\"${release}/${module}\" includes=\"META-INF/**/*.sha1\" unless:set=\"java-only.binding.@{name}\"/>\n                <fileset dir=\"${bin.lwjgl}/@{name}\" includes=\"**\"/>\n            </lwjgl-jar>\n            <quiet>\n                <delete dir=\"${release}/${module}/native\" unless:set=\"java-only.binding.@{name}\"/>\n                <delete dir=\"${release}/${module}/META-INF\" unless:set=\"java-only.binding.@{name}\"/>\n            </quiet>\n\n            <local name=\"hasMain\"/>\n            <available file=\"${module.lwjgl}/@{name}/src/main/java\" type=\"dir\" property=\"hasMain\"/>\n            <local name=\"hasMain.javadoc\"/>\n            <available file=\"${module.lwjgl}/@{name}/src/main/java/org/lwjgl\" type=\"dir\" property=\"hasMain\"/>\n\n            <!-- Bundle javadoc -->\n            <!-- This is slow, use -Djavadoc.skip=true for fast local builds -->\n            <mkdir dir=\"${release}/${module}/javadoc\" unless:set=\"javadoc.skip\"/>\n            <javadoc\n                destdir=\"${release}/${module}/javadoc\"\n                source=\"9\"\n                windowtitle=\"LWJGL ${build.version} - @{title}\"\n                encoding=\"UTF-8\"\n                docencoding=\"UTF-8\"\n                charset=\"UTF-8\"\n                useexternalfile=\"true\"\n                nohelp=\"true\"\n                notree=\"true\"\n                public=\"true\"\n                failonerror=\"true\"\n                unless:set=\"javadoc.skip\"\n            >\n                <doctitle><![CDATA[<h1>LWJGL - @{title}</h1>]]></doctitle>\n                <bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href=\"https://www.lwjgl.org/license\">License terms</a>.</i>]]></bottom>\n\n                <classpath>\n                    <pathelement path=\"${module.classpath}\"/>\n                    <pathelement path=\"${lib}/java/jspecify.jar\"/>\n                </classpath>\n\n                <fileset dir=\"${module.lwjgl}/@{name}/src/main/java/org/lwjgl\" includes=\"**\" if:set=\"hasMain.javadoc\"/>\n                <fileset dir=\"${module.lwjgl}/@{name}/src/generated/java\" includes=\"**\"/>\n\n                <arg value=\"-XDignore.symbol.file\"/> <!-- Suppresses internal API (e.g. Unsafe) usage warnings -->\n\n                <arg line=\"-Xdoclint:html,reference,syntax\"/>\n                <arg line=\"-Xmaxerrs 1000 -Xmaxwarns 1000\"/>\n                <arg line=\"-notimestamp\"/>\n                <arg value=\"-html5\" if:set=\"jdk11\"/>\n                <arg line=\"-J-Dfile.encoding=UTF-8 -J-Dstdout.encoding=UTF-8 -J-Dstderr.encoding=UTF-8 -J-Dline.separator=&#10;\"/>\n                <arg line=\"--add-exports jdk.javadoc/com.sun.tools.doclets=ALL-UNNAMED\" if:set=\"jdk11\"/>\n            </javadoc>\n            <get-quiet name=\"favicon\" url=\"https://www.lwjgl.org/favicon.ico\" dest=\"${release}/${module}/javadoc\" unless:set=\"javadoc.skip\"/>\n\n            <zip destfile=\"${release}/${module}/${module}-javadoc.jar\" basedir=\"${release}/${module}/javadoc\" includes=\"**\" level=\"9\" unless:set=\"javadoc.skip\"/>\n            <delete dir=\"${release}/${module}/javadoc\" unless:set=\"javadoc.skip\"/>\n\n            <!-- Bundle source -->\n            <quiet>\n                <copy\n                    file =\"${module.lwjgl}/@{name}/src/main/resources/module-info.java\"\n                    todir=\"${module.lwjgl}/@{name}/src/generated/java/META-INF/versions/11\"\n                    quiet=\"true\"\n                    if:set=\"jdk11\"\n                />\n            </quiet>\n            <jar destfile=\"${release}/${module}/${module}-sources.jar\" level=\"9\">\n                <fileset dir=\"${module.lwjgl}/@{name}/src/main/java\" includes=\"**\" if:set=\"hasMain\"/>\n                <fileset dir=\"${module.lwjgl}/@{name}/src/generated/java\" includes=\"**\"/>\n            </jar>\n            <quiet>\n                <delete dir=\"${module.lwjgl}/@{name}/src/generated/java/META-INF\" quiet=\"true\"/>\n            </quiet>\n\n            <!-- Copy license -->\n            <quiet>\n                <copy todir=\"${release}/${module}\">\n                    <fileset dir=\"${module.lwjgl}/@{name}\" includes=\"*_license.txt\"/>\n                </copy>\n            </quiet>\n        </sequential>\n    </macrodef>\n\n    <target name=\"-check-release-jdk\">\n        <fail message=\"The JAVA8_HOME environment variable is not set.\" if:set=\"jdk11\">\n            <condition>\n                <not><isset property=\"env.JAVA8_HOME\"/></not>\n            </condition>\n        </fail>\n\n        <local name=\"input\"/>\n        <input\n            message=\"It is recommended to build LWJGL releases on JDK 17 or higher. Continue with current JDK?\"\n            validargs=\"y,n\"\n            defaultvalue=\"n\"\n            addproperty=\"input\"\n            unless:set=\"jdk17\"\n        />\n        <fail message=\"Cancelled\" unless:set=\"jdk17\">\n            <condition>\n                <equals arg1=\"n\" arg2=\"${input}\"/>\n            </condition>\n        </fail>\n    </target>\n\n    <!-- Set the LWJGL_BUILD_OFFLINE=true environment variable for local builds. -->\n    <target name=\"release\" depends=\"-check-release-jdk,compile,-compile-generator,-build-version\">\n        <!--\n        CUSTOM BUILD (LOCAL):\n            * build.version=\"M.m.r SNAPSHOT\"\n            * build.revision=\n            * revision=\"SNAPSHOT\"\n            * module.version=\"M.m.r-snapshot\"\n        SNAPSHOT BUILD (CI): -Dbuild.revision=R\n            * build.version=\"M.m.r SNAPSHOT\"\n            * build.revision=\"R\"\n            * revision=\"build R\"\n            * module.version=\"M.m.r-snapshot+R\"\n        RELEASE BUILD (LOCAL): -Dbuild.version=M.m.r -Dbuild.revision=R\n            * build.version=\"M.m.r\"\n            * build.revision=\"R\"\n            * revision=\"build R\"\n            * module.version=\"M.m.r+R\"\n        -->\n        <local name=\"revision\"/>\n        <condition property=\"revision\" value=\"build ${build.revision}\" else=\"SNAPSHOT\">\n            <isset property=\"build.revision\"/>\n        </condition>\n\n        <property name=\"module.version\" value=\"${build.version}+${build.revision}\" if:true=\"${build.release}\"/>\n        <condition property=\"module.version\" value=\"${build.version.plain}-snapshot+${build.revision}\" else=\"${build.version.plain}-snapshot\" unless:true=\"${build.release}\">\n            <isset property=\"build.revision\"/>\n        </condition>\n\n        <delete dir=\"${release}\"/>\n        <mkdir dir=\"${release}\"/>\n\n        <!-- Copy license -->\n        <quiet>\n            <copy file=\"LICENSE.md\" tofile=\"${release}/LICENSE\"/>\n        </quiet>\n\n        <!-- Generate build.txt -->\n        <echo file=\"${release}/build.txt\" if:set=\"build.revision\">LWJGL ${build.version} ${revision}</echo>\n        <echo file=\"${release}/build.txt\" unless:set=\"build.revision\">LWJGL ${build.version}</echo>\n\n        <!-- Generate module-info classes -->\n        <java\n            classpath=\"bin/classes/generator\"\n            classname=\"org.lwjgl.generator.util.ModuleInfoGen\"\n            fork=\"true\"\n            failonerror=\"true\"\n            taskname=\"module-info-gen :: java\"\n            if:set=\"jdk11\"\n        >\n            <jvmarg value=\"-Dmodule.name.list=${module.list}\"/>\n            <jvmarg value=\"-Dmodule.version=${module.version}\"/>\n        </java>\n\n        <parallel threadcount=\"4\" failonany=\"true\">\n\n        <!-- CORE -->\n        <sequential>\n            <quiet>\n                <copy todir=\"${module.lwjgl}/core/src/generated/java/META-INF/versions/11\" if:set=\"jdk11\">\n                    <fileset dir=\"${module.lwjgl}/core11/src/main/java\" includes=\"**\"/>\n                </copy>\n                <copy todir=\"${module.lwjgl}/core/src/generated/java/META-INF/versions/17\" if:set=\"jdk17\">\n                    <fileset dir=\"${module.lwjgl}/core17/src/main/java\" includes=\"**\"/>\n                </copy>\n                <copy todir=\"${module.lwjgl}/core/src/generated/java/META-INF/versions/21\" if:set=\"jdk21\">\n                    <fileset dir=\"${module.lwjgl}/core21/src/main/java\" includes=\"**\"/>\n                </copy>\n                <copy todir=\"${bin.lwjgl}/core/META-INF/native-image/org.lwjgl/lwjgl\">\n                    <fileset dir=\"config/native-image/META-INF/native-image\" includes=\"**\" excludes=\"resource-config.json\"/>\n                </copy>\n            </quiet>\n\n            <release-module name=\"core\" native-library=\"lwjgl\" title=\"Core\"/>\n\n            <delete dir=\"${bin.lwjgl}/core/META-INF/native-image\" quiet=\"true\"/>\n        </sequential>\n\n        <!-- Assimp -->\n        <release-module name=\"assimp\" title=\"assimp\" if:true=\"${binding.assimp}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libassimp.so\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libassimp.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libassimp.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libassimp.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libassimp.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libassimp.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libassimp.so.git\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libdraco.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libassimp.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libassimp.dylib.git\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libdraco.dylib\"/>\n\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libassimp.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libassimp.dylib.git\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libdraco.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"assimp.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"assimp.dll.git\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"draco.dll\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"assimp.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"assimp.dll.git\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"draco.dll\"/>\n\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"assimp.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"assimp.dll.git\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"draco.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- bgfx -->\n        <release-module name=\"bgfx\" title=\"bgfx\" if:true=\"${binding.bgfx}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libbgfx.so\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libbgfx.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libbgfx.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libbgfx.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libbgfx.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libbgfx.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libbgfx.so.git\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libbgfx.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libbgfx.dylib.git\"/>\n\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libbgfx.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libbgfx.dylib.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"bgfx.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"bgfx.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"bgfx.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"bgfx.dll.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- CUDA -->\n        <release-module name=\"cuda\" title=\"CUDA\" if:true=\"${binding.cuda}\"/>\n\n        <!-- EGL -->\n        <release-module name=\"egl\" title=\"EGL\" if:true=\"${binding.egl}\"/>\n\n        <!-- FMOD -->\n        <release-module name=\"fmod\" title=\"FMOD\" if:true=\"${binding.fmod}\"/>\n\n        <!-- FreeType -->\n        <release-module name=\"freetype\" native-library=\"freetype\" title=\"FreeType\" if:true=\"${binding.freetype}\"/>\n\n        <!-- GLFW -->\n        <release-module name=\"glfw\" title=\"GLFW\" if:true=\"${binding.glfw}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libglfw.so\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libglfw.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libglfw.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libglfw.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libglfw.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libglfw.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libglfw.so.git\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libglfw.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libglfw.dylib.git\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libglfw_async.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libglfw_async.dylib.git\"/>\n\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libglfw.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libglfw.dylib.git\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libglfw_async.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libglfw_async.dylib.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"glfw.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"glfw.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"glfw.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"glfw.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"glfw.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"glfw.dll.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- HarfBuzz -->\n        <release-module name=\"harfbuzz\" native-library=\"harfbuzz\" title=\"HarfBuzz\" if:true=\"${binding.harfbuzz}\"/>\n\n        <!-- hwloc -->\n        <release-module name=\"hwloc\" native-library=\"hwloc\" title=\"hwloc\" if:true=\"${binding.hwloc}\"/>\n\n        <!-- JAWT -->\n        <release-module name=\"jawt\" title=\"JAWT\" if:true=\"${binding.jawt}\"/>\n\n        <!-- jemalloc -->\n        <release-module name=\"jemalloc\" native-library=\"jemalloc\" title=\"jemalloc\" if:true=\"${binding.jemalloc}\"/>\n\n        <!-- KTX -->\n        <release-module name=\"ktx\" title=\"KTX\" if:true=\"${binding.ktx}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libktx.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libktx.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libktx.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libktx.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libktx.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libktx.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libktx.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libktx.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"ktx.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"ktx.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- libdivide -->\n        <release-module name=\"libdivide\" native-library=\"lwjgl_libdivide\" title=\"libdivide\" if:true=\"${binding.libdivide}\"/>\n\n        <!-- LLVM -->\n        <release-module name=\"llvm\" native-library=\"lwjgl_llvm\" title=\"LLVM/Clang\" if:true=\"${binding.llvm}\"/>\n\n        <!-- LMDB -->\n        <release-module name=\"lmdb\" native-library=\"lwjgl_lmdb\" title=\"LMDB\" if:true=\"${binding.lmdb}\"/>\n\n        <!-- lz4 -->\n        <release-module name=\"lz4\" native-library=\"lwjgl_lz4\" title=\"lz4\" if:true=\"${binding.lz4}\"/>\n\n        <!-- Meow hash -->\n        <release-module name=\"meow\" title=\"Meow hash\" if:true=\"${binding.meow}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"liblwjgl_meow.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_meow.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"liblwjgl_meow.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"liblwjgl_meow.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"liblwjgl_meow.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_meow.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_meow.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"lwjgl_meow.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- meshoptimizer -->\n        <release-module name=\"meshoptimizer\" native-library=\"lwjgl_meshoptimizer\" title=\"meshoptimizer\" if:true=\"${binding.meshoptimizer}\"/>\n\n        <!-- msdfgen -->\n        <release-module name=\"msdfgen\" native-library=\"lwjgl_msdfgen\" title=\"msdfgen\" if:true=\"${binding.msdfgen}\"/>\n\n        <!-- NanoVG -->\n        <release-module name=\"nanovg\" native-library=\"lwjgl_nanovg\" title=\"NanoVG\" if:true=\"${binding.nanovg}\"/>\n\n        <!-- Native File Dialog -->\n        <release-module name=\"nfd\" native-library=\"lwjgl_nfd\" title=\"Native File Dialog\" if:true=\"${binding.nfd}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"liblwjgl_nfd_portal.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_nfd_portal.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"liblwjgl_nfd_portal.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"liblwjgl_nfd_portal.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"liblwjgl_nfd_portal.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"liblwjgl_nfd_portal.so\"/>\n            </natives>\n        </release-module>\n\n        <!-- Nuklear -->\n        <release-module name=\"nuklear\" native-library=\"lwjgl_nuklear\" title=\"Nuklear\" if:true=\"${binding.nuklear}\"/>\n\n        <!-- ODBC -->\n        <release-module name=\"odbc\" title=\"ODBC\" if:true=\"${binding.odbc}\"/>\n\n        <!-- OpenAL -->\n        <release-module name=\"openal\" title=\"OpenAL\" if:true=\"${binding.openal}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libopenal.so\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenal.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenal.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libopenal.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libopenal.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libopenal.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libopenal.so.git\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libopenal.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libopenal.dylib.git\"/>\n\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libopenal.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libopenal.dylib.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"OpenAL.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"OpenAL.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"OpenAL.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"OpenAL.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"OpenAL.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"OpenAL.dll.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- OpenCL -->\n        <release-module name=\"opencl\" title=\"OpenCL\" if:true=\"${binding.opencl}\"/>\n\n        <!-- OpenGL -->\n        <release-module name=\"opengl\" native-library=\"lwjgl_opengl\" title=\"OpenGL\" if:true=\"${binding.opengl}\"/>\n\n        <!-- OpenGL ES -->\n        <release-module name=\"opengles\" native-library=\"lwjgl_opengles\" title=\"OpenGL ES\" if:true=\"${binding.opengles}\"/>\n\n        <!-- OpenVR -->\n        <release-module name=\"openvr\" title=\"OpenVR\" if:true=\"${binding.openvr}\">\n            <natives>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_openvr.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenvr_api.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenvr_api.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"liblwjgl_openvr.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenvr_api.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenvr_api.so.git\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"liblwjgl_openvr.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libopenvr_api.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libopenvr_api.dylib.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_openvr.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"openvr_api.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"openvr_api.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_openvr.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"openvr_api.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"openvr_api.dll.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- OpenXR -->\n        <release-module name=\"openxr\" title=\"OpenXR\" if:true=\"${binding.openxr}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"linux\" arch=\"x64\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libopenxr_loader.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"libopenxr_loader.so.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"openxr-loader.dll\"/>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"openxr-loader.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"x86\" file=\"openxr-loader.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"openxr-loader.dll.git\"/>\n\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"openxr-loader.dll\"/>\n                <get-release platform=\"windows\" arch=\"arm64\" file=\"openxr-loader.dll.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- Opus -->\n        <release-module name=\"opus\" native-library=\"opus\" title=\"Opus\" if:true=\"${binding.opus}\"/>\n\n        <!-- LibOVR -->\n        <release-module name=\"ovr\" title=\"LibOVR\" if:true=\"${binding.ovr}\">\n            <natives>\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_ovr.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_ovr.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- Par -->\n        <release-module name=\"par\" native-library=\"lwjgl_par\" title=\"par\" if:true=\"${binding.par}\"/>\n\n        <!-- Remotery -->\n        <release-module name=\"remotery\" title=\"remotery\" if:true=\"${binding.remotery}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"liblwjgl_remotery.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_remotery.so\"/>\n                <get-release platform=\"linux\" arch=\"arm64\" file=\"liblwjgl_remotery.so\"/>\n                <get-release platform=\"linux\" arch=\"arm32\" file=\"liblwjgl_remotery.so\"/>\n                <get-release platform=\"linux\" arch=\"ppc64le\" file=\"liblwjgl_remotery.so\"/>\n                <get-release platform=\"linux\" arch=\"riscv64\" file=\"liblwjgl_remotery.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"liblwjgl_remotery.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"liblwjgl_remotery.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_remotery.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_remotery.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- rpmalloc -->\n        <release-module name=\"rpmalloc\" native-library=\"lwjgl_rpmalloc\" title=\"rpmalloc\" if:true=\"${binding.rpmalloc}\"/>\n\n        <!-- shaderc -->\n        <release-module name=\"shaderc\" native-library=\"shaderc\" title=\"Shaderc\" if:true=\"${binding.shaderc}\"/>\n\n        <!-- SPIRV-Cross -->\n        <release-module name=\"spvc\" native-library=\"spirv-cross\" title=\"SPIRV-Cross\" if:true=\"${binding.spvc}\"/>\n\n        <!-- SSE -->\n        <release-module name=\"sse\" title=\"SSE\" if:true=\"${binding.sse}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"liblwjgl_sse.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_sse.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"liblwjgl_sse.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_sse.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_sse.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- stb -->\n        <release-module name=\"stb\" native-library=\"lwjgl_stb\" title=\"stb\" if:true=\"${binding.stb}\"/>\n\n        <!-- Tiny OpenEXR -->\n        <release-module name=\"tinyexr\" native-library=\"lwjgl_tinyexr\" title=\"Tiny OpenEXR\" if:true=\"${binding.tinyexr}\"/>\n\n        <!-- tiny file dialogs -->\n        <release-module name=\"tinyfd\" native-library=\"lwjgl_tinyfd\" title=\"tiny file dialogs\" if:true=\"${binding.tinyfd}\"/>\n\n        <!-- AMD Tootle -->\n        <release-module name=\"tootle\" title=\"tootle\" if:true=\"${binding.tootle}\">\n            <natives>\n                <get-release platform=\"freebsd\" arch=\"x64\" file=\"liblwjgl_tootle.so\"/>\n\n                <get-release platform=\"linux\" arch=\"x64\" file=\"liblwjgl_tootle.so\"/>\n\n                <get-release platform=\"macos\" arch=\"x64\" file=\"liblwjgl_tootle.dylib\"/>\n\n                <get-release platform=\"windows\" arch=\"x64\" file=\"lwjgl_tootle.dll\"/>\n                <get-release platform=\"windows\" arch=\"x86\" file=\"lwjgl_tootle.dll\"/>\n            </natives>\n        </release-module>\n\n        <!-- Vulkan Memory Allocator -->\n        <release-module name=\"vma\" native-library=\"lwjgl_vma\" title=\"vma\" if:true=\"${binding.vma}\"/>\n\n        <!-- Vulkan -->\n        <release-module name=\"vulkan\" title=\"Vulkan\" if:true=\"${binding.vulkan}\">\n            <natives>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libMoltenVK.dylib\"/>\n                <get-release platform=\"macos\" arch=\"x64\" file=\"libMoltenVK.dylib.git\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libMoltenVK.dylib\"/>\n                <get-release platform=\"macos\" arch=\"arm64\" file=\"libMoltenVK.dylib.git\"/>\n            </natives>\n        </release-module>\n\n        <!-- xxHash -->\n        <release-module name=\"xxhash\" native-library=\"lwjgl_xxhash\" title=\"xxHash\" if:true=\"${binding.xxhash}\"/>\n\n        <!-- yoga -->\n        <release-module name=\"yoga\" native-library=\"lwjgl_yoga\" title=\"yoga\" if:true=\"${binding.yoga}\"/>\n\n        <!-- zstd -->\n        <release-module name=\"zstd\" native-library=\"lwjgl_zstd\" title=\"zstd\" if:true=\"${binding.zstd}\"/>\n\n        </parallel>\n    </target>\n</project>\n"
        },
        {
          "name": "build_native_image.bat",
          "type": "blob",
          "size": 0.2958984375,
          "content": "@REM Step 1: point JAVA_HOME to a GraalVM JDK w/ Native Image\n@REM jdk x64 graalvm-17\n\n@REM Step 2: make sure everything is up-to-date\ncall ant compile-native compile-tests\n\n@REM Step 3: build the native image\ncall \"%JAVA_HOME%\\bin\\native-image\" @config/cli/classpath.win.args %1 --verbose --no-fallback"
        },
        {
          "name": "build_native_image.sh",
          "type": "blob",
          "size": 0.2841796875,
          "content": "#!/usr/bin/env bash\n\n# Step 1: point JAVA_HOME to a GraalVM JDK w/ Native Image\n# jdk graalvm-17\n\n# Step 2: make sure everything is up-to-date\nant compile-native compile-tests\n\n# Step 3: build the native image\n$JAVA_HOME/bin/native-image @config/cli/classpath.args $1 --verbose --no-fallback"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1533203125,
          "content": "#\n# Copyright LWJGL. All rights reserved.\n# License terms: https://www.lwjgl.org/license\n#\n\n# MAJOR.MINOR.REVISION [0-9].[0-9].[0-9]+[ab]?\nlwjglVersion=3.4.0"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.2958984375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.80078125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 1.3369140625,
          "content": "<!--\n  ~ Copyright LWJGL. All rights reserved.\n  ~ License terms: https://www.lwjgl.org/license\n\n  This file is only useful for tracking GitHub projects that depend on LWJGL.\n  -->\n<project\n        xmlns=\"http://maven.apache.org/POM/4.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n>\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.lwjgl</groupId>\n    <artifactId>lwjgl</artifactId>\n    <version>3.3.3</version>\n\n    <name>LWJGL</name>\n    <description>The LWJGL core library.</description>\n    <url>https://www.lwjgl.org</url>\n\n    <licenses>\n        <license>\n            <name>BSD-3-Clause</name>\n            <url>https://www.lwjgl.org/license</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <id>spasi</id>\n            <name>Ioannis Tsakpinis</name>\n            <email>iotsakp@gmail.com</email>\n            <url>https://github.com/Spasi</url>\n        </developer>\n    </developers>\n\n    <scm>\n        <connection>scm:git:https://github.com/LWJGL/lwjgl3.git</connection>\n        <developerConnection>scm:git:https://github.com/LWJGL/lwjgl3.git</developerConnection>\n        <url>https://github.com/LWJGL/lwjgl3.git</url>\n    </scm>\n</project>"
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.1181640625,
          "content": "/*\n * Copyright LWJGL. All rights reserved.\n * License terms: https://www.lwjgl.org/license\n */\nrootProject.name = \"Root\""
        },
        {
          "name": "update-dependencies.xml",
          "type": "blob",
          "size": 4.994140625,
          "content": "<!--\n  ~ Copyright LWJGL. All rights reserved.\n  ~ License terms: https://www.lwjgl.org/license\n  -->\n\n<!-- Downloads LWJGL's library dependencies. -->\n<project name=\"LWJGL\" basedir=\".\" default=\"update-dependencies\" xmlns:if=\"ant:if\" xmlns:unless=\"ant:unless\">\n\n    <property name=\"config\" location=\"config\" relative=\"true\"/>\n    <import file=\"${config}/build-definitions.xml\" id=\"defs\"/>\n\n    <!-- *********************************** -->\n    <property name=\"jspecify\" value=\"1.0.0\"/>\n    <property name=\"testng\" value=\"7.5\"/>\n        <property name=\"jcommander\" value=\"1.78\"/>\n        <property name=\"jquery\" value=\"3.5.1\"/>\n        <property name=\"slf4j\" value=\"1.7.36\"/>\n    <property name=\"joml\" value=\"1.10.8\"/>\n    <property name=\"kotlinc-version\" value=\"2.1.0\"/>\n    <property name=\"kotlinc-build\" value=\"2.1.0-release-394\"/>\n    <property name=\"jmh-core\" value=\"1.37\"/>\n        <property name=\"jmh-generator-annprocess\" value=\"1.37\"/>\n        <property name=\"jopt-simple\" value=\"5.0.4\"/>\n        <property name=\"commons-math3\" value=\"3.6.1\"/>\n    <!-- *********************************** -->\n\n    <target name=\"check-dependencies\" description=\"Updates LWJGL dependencies, if required\" unless=\"${build.offline}\">\n        <!-- Checks if the Kotlin compiler must be updated -->\n        <local name=\"kotlinc-build-current\"/>\n        <loadfile property=\"kotlinc-build-current\" srcfile=\"${kotlinc}/build.txt\" quiet=\"true\" taskname=\"kotlinc\"/>\n        <condition property=\"kotlinc-uptodate\">\n            <and>\n                <isset property=\"kotlinc-build-current\"/>\n                <equals arg1=\"${kotlinc-build-current}\" arg2=\"${kotlinc-build}\"/>\n            </and>\n        </condition>\n\n        <uptodate property=\"lib-uptodate\" srcfile=\"update-dependencies.xml\" targetfile=\"${lib}/touch.txt\"/>\n\n        <local name=\"dependencies-uptodate\"/>\n        <condition property=\"dependencies-uptodate\">\n            <and>\n                <isset property=\"kotlinc-uptodate\"/>\n                <isset property=\"lib-uptodate\"/>\n            </and>\n        </condition>\n\n        <antcall target=\"update-dependencies\" unless:set=\"dependencies-uptodate\"/>\n    </target>\n\n    <target name=\"update-dependencies\" description=\"Updates LWJGL dependencies\" unless=\"${build.offline}\">\n        <taskdef name=\"logLevel\" classname=\"org.lwjgl.SetLogLevel\" classpath=\"${bin.ant}\"/>\n\n        <mkdir dir=\"${lib}\"/>\n        <mkdir dir=\"${lib}/java\"/>\n        <antcall target=\"-lib-download\"/>\n        <antcall target=\"-kotlinc-download\"/>\n    </target>\n\n    <!-- Downloads and extracts the Kotlin compiler. -->\n    <target name=\"-kotlinc-download\" unless=\"kotlinc-uptodate\">\n        <local name=\"kotlinc-archive\"/>\n        <property name=\"kotlinc-archive\" value=\"kotlin-compiler-${kotlinc-version}.zip\"/>\n\n        <!-- Download new build -->\n        <get taskname=\"kotlinc\" src=\"https://github.com/JetBrains/kotlin/releases/download/v${kotlinc-version}/${kotlinc-archive}\" dest=\"${lib}\" verbose=\"true\"/>\n\n        <!-- Delete current build -->\n        <delete dir=\"${kotlinc}\" taskname=\"kotlinc\"/>\n        <!-- Extract build -->\n        <unzip src=\"${lib}/${kotlinc-archive}\" dest=\"${lib}\" taskname=\"kotlinc\"/>\n        <!-- Delete build archive -->\n        <delete file=\"${lib}/${kotlinc-archive}\" taskname=\"kotlinc\"/>\n\n        <echo message=\"The Kotlin compiler was updated to build: ${kotlinc-version}\" taskname=\"kotlinc\"/>\n    </target>\n\n    <!-- Downloads the Java dependencies. -->\n    <target name=\"-lib-download\" unless=\"lib-uptodate\">\n        <update-mvn name=\"JSpecify\" group=\"org/jspecify\" artifact=\"jspecify\" version=\"${jspecify}\"/>\n        <update-mvn name=\"TestNG\" group=\"org/testng\" artifact=\"testng\" version=\"${testng}\"/>\n        <update-mvn name=\"JCommander\" group=\"com/beust\" artifact=\"jcommander\" version=\"${jcommander}\" sources=\"false\"/>\n        <update-mvn name=\"WebJars - jquery\" group=\"org/webjars\" artifact=\"jquery\" version=\"${jquery}\" sources=\"false\"/>\n        <update-mvn name=\"SLF4J API\" group=\"org/slf4j\" artifact=\"slf4j-api\" version=\"${slf4j}\" sources=\"false\"/>\n        <update-mvn name=\"SLF4J JDK14\" group=\"org/slf4j\" artifact=\"slf4j-jdk14\" version=\"${slf4j}\" sources=\"false\"/>\n        <update-mvn name=\"JOML\" group=\"org/joml\" artifact=\"joml\" version=\"${joml}\"/>\n        <update-mvn name=\"JMH Core\" group=\"org/openjdk/jmh\" artifact=\"jmh-core\" version=\"${jmh-core}\"/>\n        <update-mvn name=\"JMH Generators: Annotation Processing\" group=\"org/openjdk/jmh\" artifact=\"jmh-generator-annprocess\" version=\"${jmh-generator-annprocess}\" sources=\"false\"/>\n        <update-mvn name=\"JOpt Simple\" group=\"net/sf/jopt-simple\" artifact=\"jopt-simple\" version=\"${jopt-simple}\" sources=\"false\"/>\n        <update-mvn name=\"Apache Commons Math\" group=\"org/apache/commons\" artifact=\"commons-math3\" version=\"${commons-math3}\" sources=\"false\"/>\n\n        <touch file=\"${lib}/touch.txt\" verbose=\"false\"/>\n    </target>\n\n    <target name=\"clean\" description=\"Deletes LWJGL dependencies\">\n        <delete taskname=\"kotlinc\" dir=\"${lib}/kotlinc\"/>\n        <delete taskname=\"Java dependencies\" dir=\"${lib}/java\"/>\n    </target>\n\n</project>\n"
        }
      ]
    }
  ]
}