{
  "metadata": {
    "timestamp": 1736609070141,
    "page": 325,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grpc-ecosystem/grpc-spring",
      "stars": 3557,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.056640625,
          "content": "# Handle line endings automatically for files detected as text\n# and leave all files detected as binary untouched.\n*               text=auto\n\n#\n# The above will handle all files NOT found below\n#\n# These files are text and should be normalized (Convert crlf => lf)\n*.bash          text eol=lf\n*.bat           text eol=crlf\n*.df            text\n*.java          text diff=java\n*.js            text\n*.json          text\n*.properties    text\n# ensure that sh files can be run using git-bash or wsl even if pulled on Windows from the repo\n*.sh            text eol=lf\n*.txt           text\n*.xml           text\n*.yml           text\n*.yaml          text\n*.md            text\n\n# These files are binary and should be left untouched\n# (binary is a macro for -text -diff)\n*.gz            binary\n*.class         binary\n*.dll           binary\n*.ear           binary\n*.gif           binary\n*.ico           binary\n*.jar           binary\n*.jpg           binary\n*.jpeg          binary\n*.png           binary\n*.so            binary\n*.war           binary\n*.p12           binary\n*.zip           binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "build\n**/generated\nclasses\n.gradle\n\n.DS_Store\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n**/out\n\n### Eclipse ###\ntarget/\nbin/\n.classpath\n.project\n.settings/\n.factorypath\n.checkstyle\n\n## VSCode\n.vscode/\n.devcontainer/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to contribute\n\nWe definitely welcome your patches and contributions to gRPC-Spring-Boot-Starter!\n\nIf you are new to github, please start by reading [Pull Request howto](https://help.github.com/articles/about-pull-requests/)\n\n## Code Formatting\n\nCode formatting is enforced using the [Spotless](https://github.com/diffplug/spotless) Gradle plugin.\nYou can use `gradle spotlessJavaApply` (java only) or `gradle spotlessApply` (all files)\nto format new code. Please run this task before submitting your pull request.\n\n### Eclipse\n\nFor the eclipse IDE we use the following formatter files:\n\n* [extra/eclipse-formatter.xml](extra/eclipse/eclipse-formatter.xml)\n* [extra/eclipse.importorder](extra/eclipse/eclipse.importorder)\n\nThese will help you maintaing the files order, if you run the formatter from eclipse.\nThere are slight differences to the `spotless` plugin so please run it before submitting your PR anyway.\n\n### IntelliJ IDEA\n\nFor IntelliJ IDEA there's a [Eclipse Code Formatter plugin](https://plugins.jetbrains.com/plugin/6546) you can use in\nconjunction with the Eclipse setting files.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README-zh-CN.md",
          "type": "blob",
          "size": 8.892578125,
          "content": "# gRPC Spring Boot Starter\n\n[![Build master branch](https://github.com/grpc-ecosystem/grpc-spring/workflows/Build%20master%20branch/badge.svg)](https://github.com/grpc-ecosystem/grpc-spring/actions) [![Maven Central with version prefix filter](https://img.shields.io/maven-central/v/net.devh/grpc-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22net.devh%22%20grpc) [![License](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE) [![Crowdin](https://badges.crowdin.net/grpc-spring-boot-starter/localized.svg)](https://crowdin.com/project/grpc-spring-boot-starter)\n\n[![Client-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-client-spring-boot-starter.svg?label=Client-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-client-spring-boot-starter) [![Server-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-server-spring-boot-starter.svg?label=Server-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-server-spring-boot-starter) [![Common-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-common-spring-boot.svg?label=Common-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-common-spring-boot)\n\nREADME: [English](README.md) | [中文](README-zh-CN.md)\n\n**文档：** [English](https://yidongnan.github.io/grpc-spring-boot-starter/en/) | [中文](https://yidongnan.github.io/grpc-spring-boot-starter/zh-CN/)\n\n## 特性\n\n* 使用 `@GrpcService` 注解可以实现自动配置和运行 gRPC Server 端\n\n* 使用 `@GrpcClient` 注解可以实现自动创建和管理您的 gRPC Channels 和 stubs\n\n* 支持其他 grpc-java 的变种 (例如： [Reactive gRPC (RxJava)](https://github.com/salesforce/reactive-grpc/tree/master/rx-java), [grpc-kotlin](https://github.com/grpc/grpc-kotlin), ...)\n  * Server 端：适用于所有 grpc-java 的变种 ( 基于 `io.grpc.BindableService`)\n  * Client 端：需要自定义 `StubFactory` 当前内置支持：\n    * grpc-java\n    * (请告知我们不支持的组件，我们可以添加对它们的支持)\n\n* 支持 [Spring-Security](https://github.com/spring-projects/spring-security)\n\n* 支持 [Spring Cloud](https://spring.io/projects/spring-cloud)\n  * 服务端：向服务注册详情中添加 gRPC 端口信息。 目前原生支持：\n    * [Consul](https://github.com/spring-cloud/spring-cloud-consul)\n    * [Eureka](https://github.com/spring-cloud/spring-cloud-netflix)\n    * [Nacos](https://github.com/spring-cloud-incubator/spring-cloud-alibaba)\n    * (请告诉我们不支持的组件，我们可以添加对它们的支持)\n  * 客户端：从 Spring 的 `DiscoveryClient` (所有变种) 读取服务的目标地址\n\n* 支持[Spring Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth)作为分布式链路跟踪解决方案(如果[brave-instrument-grpc](https://mvnrepository.com/artifact/io.zipkin.brave/brave-instrumentation-grpc)存在)\n\n* 支持全局和自定义的 gRPC 服务端/客户端拦截器\n\n* 支持metric (基于[micrometer](https://micrometer.io/)/[actuator](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-actuator) )\n\n* 也适用于 (non-shaded) grpc-netty\n\n## 版本\n\n最新版本是 `3.1.0.RELEASE` 它能跟 Spring-Boot `3.2.4` 和 Spring-Cloud `2023.0.0` 搭配使用。 但它也与各种其他版本兼容。 我们的 [文档](https://yidongnan.github.io/grpc-spring-boot-starter/en/versions.html) 中可以找到所有版本及其相应的库版本的概览。\n\n**注意:** 该项目也可以在没有 Spring-Boot 的情况下使用，但是您需要手动配置一些 bean。\n\n## 用法\n\n### gRPC 服务端 + 客户端\n\n使用以下命令添加 Maven 依赖项：\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\n使用 Gradle 添加依赖：\n\n````gradle\ndependencies {\n  implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\n### gRPC 服务端\n\n使用以下命令添加 Maven 依赖项：\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-server-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\n使用 Gradle 添加依赖项：\n\n````gradle\ndependencies {\n  implementation 'net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\n在服务端接口实现类上添加 `@GrpcService` 注解。\n\n````java\n@GrpcService\npublic class GrpcServerService extends GreeterGrpc.GreeterImplBase {\n\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello ==> \" + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n\n}\n````\n\n默认情况下，gRPC 服务器将监听端口 `9090`。 端口的配置和其他的 [设置](grpc-server-spring-boot-starter/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java) 可以通过 Spring 的属性机制进行更改。 服务端的配置使用 `grpc.server.` 前缀。\n\n详情请参阅我们的[文档](https://yidongnan.github.io/grpc-spring-boot-starter/)。\n\n### gRPC 客户端\n\n使用一下命令添加 Maven 依赖项：\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-client-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\n使用 Gradle 添加依赖项：\n\n````gradle\ndependencies {\n  compile 'net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\n在 grpc 客户端的的 stub 字段上添加 `@GrpcClient(serverName)` 注解。\n\n* 请不要将 @GrpcClient 与 `@Autowireed` 或 `@Inject` 一起使用。\n\n  ````java\n  @GrpcClient(\"gRPC server name\")\n  private GreeterGrpc.GreeterBlockingStub greeterStub;\n  ````\n\n**注意:** 你可以将相同的 grpc 服务端名称用于多个 channel， 也可以使用不同的 stub （甚至使用不同的 stub 拦截器）\n\n然后您可以向您的服务器发送查询，就像这样：\n\n````java\nHelloReply response = stub.sayHello(HelloRequest.newBuilder().setName(name).build());\n````\n\n可以单独配置每个客户端的目标地址。 但在某些情况下，您可以仅依靠默认配置。 您可以通过 `NameResolver.Factory` Bean 类自定义默认的 url 映射。 如果您没有配置那个Bean，那么默认的 uri 将使用默认方案和名称(如：`dns:<name>`)：\n\n这些配置和其他的 [设置](grpc-client-spring-boot-starter/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java) 可以通过 Spring 的属性机制进行更改。 客户端使用`grpc.client.(serverName)。` 前缀。\n\n详情请参阅我们的[文档](https://yidongnan.github.io/grpc-spring-boot-starter/)。\n\n## 使用 (non-shaded) grpc-netty 运行\n\n这个库支持`grpc-netty`和`grpc-nety-shaded`。 后一种可能会防止与不兼容的 gRPC 版本冲突或不同 netty 版本之间的冲突。\n\n**注意:** 如果在classpath 中存在 shaded netty， 则 shaded netty 将使用有线与 non-shaded grpc-netty。\n\n您可以在 Maven 中这样使用。\n\n````xml\n<dependency>\n    <groupId>io.grpc</groupId>\n    <artifactId>grpc-netty</artifactId>\n    <version>${grpcVersion}</version>\n</dependency>\n\n<!-- For both -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the server (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-server-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the client (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-client-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n````\n\n类似，使用 Gradle 的如下\n\n````groovy\nimplementation \"io.grpc:grpc-netty:${grpcVersion}\"\n\nimplementation 'net.devh:grpc-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For both\nimplementation 'net.devh:grpc-client-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For the client (only)\nimplementation 'net.devh:grpc-server-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For the server (only)\n````\n\n## 示例项目\n\n在 [这里](examples)可以查看更多关于该项目的示例。\n\n## 排除故障\n\n请参阅我们的[文档](https://yidongnan.github.io/grpc-spring-boot-starter/en/trouble-shooting)寻求帮助。\n\n## 参与贡献\n\n欢迎您对项目作出任何贡献。 详见[CONTRIBUTING.md](CONTRIBUTING.md)。\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.455078125,
          "content": "# Survey - gRPC/Spring\n\nDear gRPC/Spring users, in order to enhance the user experience of\ngrpc-ecosystem/grpc-spring, we have developed [this survey](https://docs.google.com/forms/d/e/1FAIpQLSfHgvh_Z0_wwX7JQLERanJ-AAXjiKh23_kSI3Rl5mnKVQ8Bpw/viewform?resourcekey=0-mEilI6lFvIfVXiUniEyCog) as a means of\nestablishing a direct line of communication. Your feedback is highly appreciated.\n\n# gRPC Spring Boot Starter\n\n[![Build master branch](https://github.com/grpc-ecosystem/grpc-spring/workflows/Build%20master%20branch/badge.svg)](https://github.com/grpc-ecosystem/grpc-spring/actions)\n[![Maven Central with version prefix filter](https://img.shields.io/maven-central/v/net.devh/grpc-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22net.devh%22%20grpc)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE)\n[![Crowdin](https://badges.crowdin.net/grpc-spring-boot-starter/localized.svg)](https://crowdin.com/project/grpc-spring-boot-starter)\n\n[![Client-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-client-spring-boot-starter.svg?label=Client-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-client-spring-boot-starter)\n[![Server-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-server-spring-boot-starter.svg?label=Server-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-server-spring-boot-starter)\n[![Common-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-common-spring-boot.svg?label=Common-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-common-spring-boot)\n\nREADME: [English](README.md) | [中文](README-zh-CN.md)\n\n**Documentation:** [English](https://grpc-ecosystem.github.io/grpc-spring/en/) | [中文](https://grpc-ecosystem.github.io/grpc-spring/zh-CN/)\n\n## Features\n\n* Automatically configures and runs the gRPC server with your `@GrpcService` implementations\n\n* Automatically creates and manages your grpc channels and stubs with `@GrpcClient`\n\n* Supports other grpc-java flavors (e.g.\n  [Reactive gRPC (RxJava)](https://github.com/salesforce/reactive-grpc/tree/master/rx-java),\n  [grpc-kotlin](https://github.com/grpc/grpc-kotlin), ...)\n  * Server-side: Should work for all grpc-java flavors (`io.grpc.BindableService` based)\n  * Client-side: Requires custom `StubFactory`s\\\n    Currently build-in support:\n    * grpc-java\n    * (Please report missing ones, so we can add support for them)\n\n* Supports [Spring-Security](https://github.com/spring-projects/spring-security)\n\n* Supports [Spring Cloud](https://spring.io/projects/spring-cloud)\n  * Server-side: Adds grpc-port information to the service registration details\\\n    Currently natively supported:\n    * [Consul](https://github.com/spring-cloud/spring-cloud-consul)\n    * [Eureka](https://github.com/spring-cloud/spring-cloud-netflix)\n    * [Nacos](https://github.com/spring-cloud-incubator/spring-cloud-alibaba)\n    * (Please report missing ones, so we can add support for them)\n  * Client-side: Reads the service's target addresses from spring's `DiscoveryClient` (all flavors)\n\n* Supports [Spring Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth) as distributed tracing solution\\\n  (If [brave-instrumentation-grpc](https://mvnrepository.com/artifact/io.zipkin.brave/brave-instrumentation-grpc) is present)\n\n* Supports global and custom gRPC server/client interceptors\n\n* Automatic metric support ([micrometer](https://micrometer.io/)/[actuator](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-actuator) based)\n\n* Also works with (non-shaded) grpc-netty\n\n## Versions\n\nThe latest version is `3.1.0.RELEASE` it was compiled with spring-boot `3.2.4` and spring-cloud `2023.0.0`\nbut it is also compatible with a large variety of other versions.\nAn overview of all versions and their respective library versions can be found in our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/en/versions.html).\n\n**Note:** This project can also be used without Spring-Boot, however that requires some manual bean configuration.\n\n## Usage\n\n### gRPC Server + Client\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\n### gRPC Server\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-server-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  implementation 'net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\nAnnotate your server interface implementation(s) with ``@GrpcService``\n\n````java\n@GrpcService\npublic class GrpcServerService extends GreeterGrpc.GreeterImplBase {\n\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello ==> \" + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n\n}\n````\n\nBy default, the grpc server will listen to port `9090`. These and other\n[settings](grpc-server-spring-boot-starter/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java)\ncan be changed via Spring's property mechanism. The server uses the `grpc.server.` prefix.\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/) for more details.\n\n### gRPC Client\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-client-spring-boot-starter</artifactId>\n  <version>3.1.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  compile 'net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE'\n}\n````\n\nAnnotate a field of your grpc client stub with `@GrpcClient(serverName)`\n\n* Do not use in conjunction with `@Autowired` or `@Inject`\n\n  ````java\n  @GrpcClient(\"gRPC server name\")\n  private GreeterGrpc.GreeterBlockingStub greeterStub;\n  ````\n\n**Note:** You can use the same grpc server name for multiple channels and also different stubs (even with different\ninterceptors).\n\nThen you can send queries to your server just like this:\n\n````java\nHelloReply response = stub.sayHello(HelloRequest.newBuilder().setName(name).build());\n````\n\nIt is possible to configure the target address for each client individually.\nHowever in some cases, you can just rely on the default configuration.\nYou can customize the default url mapping via `NameResolver.Factory` beans. If you don't configure that bean,\nthen the default uri will be guessed using the default scheme and the name (e.g.: `dns:/<name>`):\n\nThese and other\n[settings](grpc-client-spring-boot-starter/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java)\ncan be changed via Spring's property mechanism. The clients use the `grpc.client.(serverName).` prefix.\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/) for more details.\n\n## Running with (non-shaded) grpc-netty\n\nThis library supports both `grpc-netty` and `grpc-netty-shaded`.\nThe later one might prevent conflicts with incompatible grpc-versions or conflicts between libraries that require different versions of netty.\n\n**Note:** If the shaded netty is present on the classpath, then this library will always favor it over the non-shaded grpc-netty one.\n\nYou can use it with Maven like this:\n\n````xml\n<dependency>\n    <groupId>io.grpc</groupId>\n    <artifactId>grpc-netty</artifactId>\n    <version>${grpcVersion}</version>\n</dependency>\n\n<!-- For both -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the server (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-server-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the client (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-client-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n````\n\nand like this when using Gradle:\n\n````groovy\nimplementation \"io.grpc:grpc-netty:${grpcVersion}\"\n\nimplementation 'net.devh:grpc-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For both\nimplementation 'net.devh:grpc-client-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For the client (only)\nimplementation 'net.devh:grpc-server-spring-boot-starter:...' exclude group: 'io.grpc', module: 'grpc-netty-shaded' // For the server (only)\n````\n\n## Example-Projects\n\nRead more about our example projects [here](examples).\n\n## Troubleshooting\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/en/trouble-shooting) for help.\n\n## Contributing\n\nContributions are always welcomed! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 9.6201171875,
          "content": "import java.time.OffsetDateTime\nimport java.time.format.DateTimeFormatter\n\nbuildscript {\n    repositories {\n        maven {\n            url 'https://plugins.gradle.org/m2/'\n        }\n    }\n    ext {\n        projectVersion = '3.2.0-SNAPSHOT'\n\n        // https://github.com/grpc/grpc-java/releases\n        grpcVersion = '1.63.0'\n\n        // https://github.com/google/guava/releases\n        guavaVersion = '33.2.1-jre'\n        // https://github.com/protocolbuffers/protobuf/releases\n        protobufVersion = '3.25.3'\n        protobufGradlePluginVersion = '0.9.4'\n\n        // https://github.com/spring-projects/spring-boot/releases\n        springBootVersion = '3.2.5'\n        // https://github.com/spring-cloud/spring-cloud-release/releases\n        springCloudVersion = '2023.0.1'\n        // https://github.com/alibaba/spring-cloud-alibaba/releases\n        springCloudAlibabaNacosVersion = '2023.0.1.0'\n\n        lombokPluginVersion = '8.6'\n        versioningPluginVersion = '3.1.0'\n        versionsPluginVersion = '0.51.0'\n\n        // https://github.com/JetBrains/kotlin/releases\n        kotlinVersion = \"1.9.23\"\n    }\n}\n\nplugins {\n    id 'java'\n    id 'java-library'\n    id 'org.springframework.boot' version \"${springBootVersion}\" apply false\n    id 'io.spring.dependency-management' version '1.1.6'\n    id 'net.nemerosa.versioning' version \"${versioningPluginVersion}\"\n    id 'com.google.protobuf' version \"${protobufGradlePluginVersion}\"\n    id 'io.freefair.lombok' version \"${lombokPluginVersion}\" apply false\n    id 'com.github.ben-manes.versions' version \"${versionsPluginVersion}\" // gradle dependencyUpdates\n    id 'com.diffplug.spotless' version '6.25.0'\n    id 'org.jetbrains.kotlin.jvm' version \"${kotlinVersion}\" apply false\n}\n\n// If you attempt to build without the `--scan` parameter in `gradle 6.0+` it will cause a build error that it can't find\n// a buildScan property to change. This avoids that problem.\nif (hasProperty('buildScan')) {\n    buildScan {\n        termsOfServiceUrl = 'https://gradle.com/terms-of-service'\n        termsOfServiceAgree = 'yes'\n    }\n}\n\n// you may use IntelliJ's project configuration to make it use the gradle version defined in the gradle script's wrapper section\nwrapper {\n    // Update using:\n    // ./gradlew wrapper --gradle-version=8.4 --distribution-type=bin\n    gradleVersion = '8.7'\n}\n\ndef buildTimeAndDate = OffsetDateTime.now()\n\next {\n    buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)\n    buildTime = DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ').format(buildTimeAndDate)\n    buildRevision = versioning.info.commit\n}\n\nallprojects {\n    apply plugin: 'java'\n    apply plugin: 'idea'\n    apply plugin: 'eclipse'\n    apply plugin: 'io.spring.dependency-management'\n    apply plugin: 'com.diffplug.spotless'\n    apply plugin: 'io.freefair.lombok'\n\n    java {\n        toolchain {\n            languageVersion = JavaLanguageVersion.of(17)\n        }\n    }\n\n    compileJava {\n        sourceCompatibility = JavaVersion.VERSION_17\n        targetCompatibility = JavaVersion.VERSION_17\n        options.encoding = 'UTF-8'\n    }\n\n    compileJava.options*.compilerArgs = [\n        '-Xlint:all', '-Xlint:-processing', '-parameters'\n    ]\n\n    eclipse {\n        classpath {\n            downloadJavadoc = true\n            downloadSources = true\n        }\n    }\n\n    spotless {\n        java {\n            target('src/main/**/*.java', 'src/test/**/*.java')\n            targetExclude('**/SocketUtils.java')\n            licenseHeaderFile rootProject.file('extra/spotless/license.java')\n            removeUnusedImports()\n            importOrderFile rootProject.file('extra/eclipse/eclipse.importorder')\n            eclipse().configFile rootProject.file('extra/eclipse/eclipse-formatter.xml')\n        }\n        format('misc') {\n            target('**/*.gradle', '**/*.md', '**/*.yml')\n            targetExclude('**/build/**/*.*')\n            trimTrailingWhitespace()\n            endWithNewline()\n        }\n    }\n\n    normalization {\n        runtimeClasspath {\n            metaInf{\n                ignoreAttribute('Build-Time')\n            }\n        }\n    }\n\n    // Copy LICENSE\n    tasks.withType(Jar) {\n        from(project.rootDir) {\n            include 'LICENSE'\n            into 'META-INF'\n        }\n    }\n\n    // Generate MANIFEST.MF\n    jar {\n        manifest {\n            attributes(\n                'Created-By': \"${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})\".toString(),\n                'Built-By': 'travis',\n                'Build-Date': buildDate,\n                'Build-Time': buildTime,\n                'Built-OS': \"${System.properties['os.name']}\",\n                'Build-Revision': buildRevision,\n                'Specification-Title': project.name,\n                'Specification-Version': projectVersion,\n                'Specification-Vendor': 'Michael Zhang',\n                'Implementation-Title': project.name,\n                'Implementation-Version': projectVersion,\n                'Implementation-Vendor': 'Michael Zhang'\n            )\n        }\n    }\n\n    repositories {\n        mavenCentral()\n    }\n\n    buildscript {\n        repositories {\n            maven { url 'https://plugins.gradle.org/m2/' }\n        }\n    }\n}\n\nProject commonProject = project(':grpc-common-spring-boot')\n\nString javaAPIdoc =  'https://docs.oracle.com/en/java/javase/17/docs/api'\n\nallprojects { project ->\n    buildscript {\n        dependencyManagement {\n            imports {\n                mavenBom \"org.springframework.boot:spring-boot-starter-parent:${springBootVersion}\"\n                mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n                mavenBom \"com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaNacosVersion}\"\n                mavenBom \"com.google.protobuf:protobuf-bom:${protobufVersion}\"\n                mavenBom \"com.google.guava:guava-bom:${guavaVersion}\"\n                mavenBom \"io.grpc:grpc-bom:${grpcVersion}\"\n                mavenBom \"org.junit:junit-bom:5.10.2\"\n                mavenBom \"org.jetbrains.kotlin:kotlin-bom:${kotlinVersion}\"\n            }\n        }\n\n        ext {\n            // not explicitly needed in subprojects, as the BOM for Spring Boot sets this version\n            micrometerVersion = dependencyManagement.importedProperties['micrometer.version']\n            springFrameworkVersion = dependencyManagement.importedProperties['spring-framework.version']\n            springSecurityVersion = dependencyManagement.importedProperties['spring-security.version']\n            springCloudCommonsVersion = dependencyManagement.importedProperties['spring-cloud-commons.version']\n            braveInstrumentationGrpc = dependencyManagement.importedProperties['brave.version']\n        }\n    }\n\n    test {\n        useJUnitPlatform()\n        testLogging {\n            // failFast = true\n            // showStandardStreams = true\n            exceptionFormat = 'full'\n            showCauses = true\n            showExceptions = true\n            showStackTraces = true\n            // prints out individual test progress by hooking into junit engine events\n            // it.events('passed', 'skipped', 'failed', 'standard_out')\n            it.events('passed', 'skipped', 'failed')\n\n            it.debug { dbg ->\n                // prints out individual test progress when run under the debugger\n                // dbg.events('started', 'failed', 'passed', 'skipped', 'standard_error', 'standard_out')\n                dbg.events('started', 'failed', 'passed', 'skipped')\n            }\n        }\n    }\n\n    if (project.name == 'grpc-common-spring-boot' || project.name == 'grpc-client-spring-boot-starter' || project.name == 'grpc-server-spring-boot-starter') {\n        java {\n            registerFeature('optionalSupport') {\n                usingSourceSet(sourceSets.main)\n            }\n        }\n\n        // Javadoc Task\n        javadoc {\n            dependsOn delombok\n            if (project.name != 'grpc-common-spring-boot') {\n                dependsOn(\":grpc-common-spring-boot:javadoc\")\n            }\n            source = delombok\n            failOnError = false\n            options.locale = 'en_US'\n            options.encoding = 'UTF-8'\n            options.jFlags('-Dhttp.agent=gradle-javadoc') // Required for javadoc.io\n            if (project.name != 'grpc-common-spring-boot') {\n                options.linksOffline('https://static.javadoc.io/net.devh/grpc-common-spring-boot/' + projectVersion, commonProject.buildDir.getPath() + '/docs/javadoc')\n            }\n            options.links = [\n                    javaAPIdoc,\n                    'https://grpc.io/grpc-java/javadoc/',\n                    'https://static.javadoc.io/io.micrometer/micrometer-core/' + micrometerVersion + '/',\n                    'https://docs.spring.io/spring-framework/docs/' + springFrameworkVersion + '/javadoc-api/',\n                    'https://docs.spring.io/spring-security/site/docs/' + springSecurityVersion + '/api/',\n                    'https://docs.spring.io/spring-boot/docs/' + springBootVersion + '/api/',\n                    'https://static.javadoc.io/org.springframework.cloud/spring-cloud-commons/' + springCloudCommonsVersion + '/',\n                    'https://static.javadoc.io/io.zipkin.brave/brave/' + braveInstrumentationGrpc + '/',\n                    'https://static.javadoc.io/io.zipkin.brave/brave-instrumentation-grpc/' + braveInstrumentationGrpc + '/',\n                    'https://google.github.io/guava/releases/29.0-android/api/docs/'\n            ]\n        }\n    }\n}\n\napply from: './deploy.gradle'\n\ngroup = 'net.devh'\nversion = projectVersion\n\ndependencies {\n    api project(':grpc-server-spring-boot-starter')\n    api project(':grpc-client-spring-boot-starter')\n\n    testImplementation project(':tests')\n}\n"
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.314453125,
          "content": "files:\n  - source: /docs/en/client\n    translation: /docs/%locale%/client/%original_file_name%\n  - source: /README.md\n    translation: /README-%locale%.md\n  - source: /docs/en/server\n    translation: /docs/%locale%/server/%original_file_name%\n  - source: /docs/en/*.md\n    translation: /docs/%locale%/%original_file_name%\n"
        },
        {
          "name": "deploy.gradle",
          "type": "blob",
          "size": 2.880859375,
          "content": "apply plugin: 'maven-publish'\napply plugin: 'signing'\n\next {\n    isReleaseVersion = !(projectVersion =~ /-SNAPSHOT$/)\n    isNeedSign = project.hasProperty('signing.gnupg.keyName') && isReleaseVersion\n}\n\ntask sourcesJar(type: Jar) {\n    from sourceSets.main.allJava\n    archiveClassifier.set('sources')\n}\n\ntask javadocJar(type: Jar) {\n    from javadoc\n    archiveClassifier.set('javadoc')\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n\n            from components.java\n            artifact sourcesJar\n            artifact javadocJar\n\n            pom {\n                name = 'gRPC Spring Boot Starter'\n                description = 'gRPC Spring Boot Starter'\n                url = 'https://github.com/grpc-ecosystem/grpc-spring'\n                licenses {\n                    license {\n                        name = 'Apache 2.0'\n                        url = 'https://opensource.org/licenses/Apache-2.0'\n                        distribution = 'repo'\n                    }\n                }\n                developers {\n                    developer {\n                        id = 'yidongnan'\n                        name = 'Michael Zhang'\n                        email = 'yidongnan@gmail.com'\n                    }\n                    developer {\n                        id = 'ST-DDT'\n                        name = 'Daniel Theuke'\n                        email = 'daniel.theuke@aequitas-software.de'\n                        organization = 'Aequitas Software GmbH & Co. KG'\n                        organizationUrl = 'https://aequitas-software.de/'\n                    }\n                }\n                scm {\n                    connection = 'scm:git:git://github.com/grpc-ecosystem/grpc-spring.git'\n                    developerConnection = 'scm:git:ssh@github.com/grpc-ecosystem/grpc-spring.git'\n                    url = 'https://github.com/grpc-ecosystem/grpc-spring'\n                }\n            }\n\n            versionMapping {\n                usage('java-api') {\n                    fromResolutionOf('runtimeClasspath')\n                }\n                usage('java-runtime') {\n                    fromResolutionResult()\n                }\n            }\n        }\n    }\n    repositories {\n        maven {\n            credentials {\n                username System.getenv('OSSRH_USER')\n                password System.getenv('OSSRH_PASS')\n            }\n            if (project.ext.isReleaseVersion) {\n                url \"https://oss.sonatype.org/service/local/staging/deploy/maven2\"\n            } else {\n                url \"https://oss.sonatype.org/content/repositories/snapshots\"\n            }\n        }\n    }\n\n    tasks.withType(Sign) {\n        onlyIf { project.ext.isNeedSign }\n    }\n\n    signing {\n        useGpgCmd()\n        sign publishing.publications.mavenJava\n    }\n\n    javadoc {\n        if(JavaVersion.current().isJava9Compatible()) {\n            options.addBooleanOption('html5', true)\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1923828125,
          "content": "org.gradle.caching=true\n# It is not possible to use parallel,\n# because tests in multiple modules require the same ports\n#org.gradle.parallel=true\norg.gradle.vfs.watch=true\norg.gradle.daemon=true\n\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.759765625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "grpc-client-spring-boot-starter",
          "type": "tree",
          "content": null
        },
        {
          "name": "grpc-common-spring-boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "grpc-server-spring-boot-starter",
          "type": "tree",
          "content": null
        },
        {
          "name": "private.key.enc",
          "type": "blob",
          "size": 3.515625,
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.6123046875,
          "content": "rootProject.name = 'grpc-spring-boot-starter'\n\ninclude \"grpc-common-spring-boot\"\ninclude \"grpc-client-spring-boot-starter\"\ninclude \"grpc-server-spring-boot-starter\"\n\ninclude \"tests\"\n\n// examples\ninclude \"examples:grpc-lib\"\ninclude \"examples:local-grpc-client\"\ninclude \"examples:local-grpc-server\"\ninclude \"examples:cloud-eureka-server\"\ninclude \"examples:cloud-grpc-client\"\ninclude \"examples:cloud-grpc-server\"\ninclude \"examples:security-grpc-client\"\ninclude \"examples:security-grpc-server\"\ninclude \"examples:grpc-observability:backend\"\ninclude \"examples:grpc-observability:frontend\"\ninclude \"examples:grpc-observability:proto\"\n"
        },
        {
          "name": "testExamples.sh",
          "type": "blob",
          "size": 6.515625,
          "content": "#!/bin/bash\nset -e # Fail on error\ntrap \"trap - SIGTERM && kill -- -$$\" SIGINT SIGTERM EXIT # Kill subprocesses on exit\n\nhighlight() { grep --color -E \"\\S|$\" \"${@:1}\" ; }\necho \"Comments and Results => Black\"\nhighlightServer () { export GREP_COLORS='ms=0;32'; highlight ; }\necho \"Server => Green\" | highlightServer\nhighlightClient () { export GREP_COLORS='ms=0;34'; highlight ; }\necho \"Client => Blue\" | highlightClient\nhighlightSupport () { export GREP_COLORS='ms=0;33'; highlight ; }\necho \"Support => Yellow\" | highlightSupport\nhighlightGradle () { export GREP_COLORS='ms=0;36'; highlight ; }\necho \"Gradle => Cyan\" | highlightGradle\nlastStartedPid () { jobs -p  | tail -n 1; }\n\nbuild() {\n\techo \"Building project\"\n\t./gradlew clean --console=plain |& highlightGradle\n\t./gradlew build --console=plain |& highlightGradle\n\tsleep 2s\n}\n\n## Local\nlocalTest() {\n\techo \"Starting Local test\"\n\n\t# Run environment\n\t./gradlew :example:local-grpc-server:bootRun -x jar -x classes --console=plain |& highlightServer &\n\tLOCAL_SERVER=`lastStartedPid`\n\tsleep 10s # Wait for the server to start\n\t./gradlew :example:local-grpc-client:bootRun -x jar -x classes --console=plain |& highlightClient &\n\tLOCAL_CLIENT=`lastStartedPid`\n\tsleep 30s # Wait for the client to start and the server to be ready\n\n\t# Test\n\tRESPONSE=$(curl -s localhost:8080/)\n\techo \"Response:\"\n\techo \"$RESPONSE\"\n\tEXPECTED=$(echo -e \"Hello ==> Michael\")\n\techo \"Expected:\"\n\techo \"$EXPECTED\"\n\tsleep 1s # Give the user a chance to look at the result\n\n\t# Shutdown\n\techo \"Triggering shutdown\"\n\tkill -s TERM $LOCAL_SERVER\n\tkill -s TERM $LOCAL_CLIENT\n\tsleep 1s # Wait for the shutdown logs to pass \n\n\t# Verify\n\tif [ \"$RESPONSE\" = \"$EXPECTED\" ]; then\n\t\techo \"#----------------------#\"\n\t\techo \"| Local example works! |\"\n\t\techo \"#----------------------#\"\n\telse\n\t\techo \"#-----------------------#\"\n\t\techo \"| Local example failed! |\"\n\t\techo \"#-----------------------#\"\n\t\texit 1\n\tfi\n}\n\n## Cloud-Eureka\ncloudTest() {\n\techo \"Starting Cloud $1 test\"\n\n\t# Run environment\n\tif [[ \"$1\" = \"consul\" ]]; then\n\t\tCONSUL=`docker run --name=consul -d --rm -p 8500:8500 consul`\n\t\tdocker logs -f $CONSUL |& highlightSupport &\n\t\tstopCloudEnv() {\n\t\t\techo \"Stopping consul server\"\n\t\t\tdocker stop $CONSUL\n\t\t}\n\telif [[ \"$1\" == \"eureka\" ]]; then\n\t\t./gradlew :example:cloud-eureka-server:bootRun -x jar -x classes --console=plain |& highlightSupport &\n\t\tEUREKA=`lastStartedPid`\n\t\tstopCloudEnv() {\n\t\t\techo \"Stopping eureka server\"\n\t\t\tkill -s TERM $EUREKA\n\t\t}\n\telif [[ \"$1\" = \"nacos\" ]]; then\n\t\tNACOS=`docker run --env MODE=standalone --name nacos -d --rm -p 8848:8848 nacos/nacos-server`\n\t\tdocker logs -f $NACOS |& highlightSupport &\n\t\tstopCloudEnv() {\n\t\t\techo \"Stopping nacos server\"\n\t\t\tdocker stop $NACOS\n\t\t}\n\tfi\n\tsleep 10s # Wait for the server to start\n\n#\tmkdir -p zipkin\n#\tcd zipkin\n#\techo \"*\" > .gitignore\n#\tif [ ! -f zipkin.jar ]; then\n#\t\tcurl -sSL https://zipkin.io/quickstart.sh | bash -s\n#\tfi\n#\tjava -jar zipkin.jar &\n#\tZIPKIN=`lastStartedPid`\n#\tsleep 10s # Wait for the server to start\n#\tcd ..\n\n\t./gradlew -Pdiscovery=$1 :example:cloud-grpc-server:bootRun -x jar -x classes --console=plain |& highlightServer &\n\tCLOUD_SERVER=`lastStartedPid`\n\tsleep 10s # Wait for the server to start\n\n\t./gradlew -Pdiscovery=$1 :example:cloud-grpc-client:bootRun -x jar -x classes --console=plain |& highlightClient &\n\tCLOUD_CLIENT=`lastStartedPid`\n\tsleep 30s # Wait for the client to start and the server to be ready\n\tsleep 60s # Wait for the discovery service to refresh\n\n\t# Test\n\tRESPONSE=$(curl -s localhost:8080/)\n\techo \"Response:\"\n\techo \"$RESPONSE\"\n\tEXPECTED=$(echo -e \"Hello ==> Michael\")\n\techo \"Expected:\"\n\techo \"$EXPECTED\"\n\tsleep 1s # Give the user a chance to look at the result\n\n\t# Crash server\n\tkill -s TERM $CLOUD_SERVER\n\techo \"The server crashed (expected)\"\n\tsleep 1s # Wait for the shutdown logs to pass\n\n\t# and restart server\n\t./gradlew -Pdiscovery=$1 :example:cloud-grpc-server:bootRun -x jar -x classes --console=plain |& highlightServer &\n\tCLOUD_SERVER=`lastStartedPid`\n\tsleep 30s # Wait for the server to start\n\tsleep 60s # Wait for the discovery service to refresh\n\t\n\t# Test again\n\tRESPONSE2=$(curl -s localhost:8080/)\n\techo \"Response:\"\n\techo \"$RESPONSE2\"\n\tEXPECTED=$(echo -e \"Hello ==> Michael\")\n\techo \"Expected:\"\n\techo \"$EXPECTED\"\n\tsleep 1s # Give the user a chance to look at the result\n\n\t# Shutdown\n\techo \"Triggering shutdown\"\n\tstopCloudEnv\n\t# kill -s TERM $ZIPKIN\n\tkill -s TERM $CLOUD_SERVER\n\tkill -s TERM $CLOUD_CLIENT\n\tsleep 1s # Wait for the shutdown logs to pass\n\n\t# Verify part 1\n\tif [ \"$RESPONSE\" = \"$EXPECTED\" ]; then\n\t\techo \"#------------------------------------#\"\n\t\techo \"| Cloud $1 example part 1 works! |\"\n\t\techo \"#------------------------------------#\"\n\telse\n\t\techo \"#-------------------------------------#\"\n\t\techo \"| Cloud $1 example part 1 failed! |\"\n\t\techo \"#-------------------------------------#\"\n\t\texit 1\n\tfi\n\n\t# Verify part 2\n\tif [ \"$RESPONSE2\" = \"$EXPECTED\" ]; then\n\t\techo \"#------------------------------------#\"\n\t\techo \"| Cloud $1 example part 2 works! |\"\n\t\techo \"#------------------------------------#\"\n\telse\n\t\techo \"#-------------------------------------#\"\n\t\techo \"| Cloud $1 example part 2 failed! |\"\n\t\techo \"#-------------------------------------#\"\n\t\texit 1\n\tfi\n}\n\n## Security Basic Auth\nsecurityBasicAuthTest() {\n\techo \"Starting Security Basic Auth test\"\n\n\t# Run environment\n\t./gradlew :example:security-grpc-server:bootRun -x jar -x classes --console=plain |& highlightServer &\n\tLOCAL_SERVER=`lastStartedPid`\n\tsleep 10s # Wait for the server to start\n\t./gradlew :example:security-grpc-client:bootRun -x jar -x classes --console=plain |& highlightClient &\n\tLOCAL_CLIENT=`lastStartedPid`\n\tsleep 30s # Wait for the client to start and the server to be ready\n\n\t# Test\n\tRESPONSE=$(curl -s localhost:8080/)\n\techo \"Response:\"\n\techo \"$RESPONSE\"\n\tEXPECTED=$(echo -e \"Input:\\n- name: Michael (Changeable via URL param ?name=X)\\nRequest-Context:\\n- auth user: user (Configure via application.yml)\\nResponse:\\nHello ==> Michael\")\n\techo \"Expected:\"\n\techo \"$EXPECTED\"\n\tsleep 1s # Give the user a chance to look at the result\n\n\t# Shutdown\n\techo \"Triggering shutdown\"\n\tkill -s TERM $LOCAL_SERVER\n\tkill -s TERM $LOCAL_CLIENT\n\tsleep 1s # Wait for the shutdown logs to pass\n\n\t# Verify\n\tif [ \"$RESPONSE\" = \"$EXPECTED\" ]; then\n\t\techo \"#------------------------------------#\"\n\t\techo \"| Security Basic Auth example works! |\"\n\t\techo \"#------------------------------------#\"\n\telse\n\t\techo \"#-------------------------------------#\"\n\t\techo \"| Security Basic Auth example failed! |\"\n\t\techo \"#-------------------------------------#\"\n\t\texit 1\n\tfi\n}\n\n## Tests\nbuild\nlocalTest\ncloudTest consul\ncloudTest eureka\ncloudTest nacos\nsecurityBasicAuthTest\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}