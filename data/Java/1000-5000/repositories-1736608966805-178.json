{
  "metadata": {
    "timestamp": 1736608966805,
    "page": 178,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linhaojun857/aurora",
      "stars": 4170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1123046875,
          "content": "*.js linguist-language=Java\n*.ts linguist-language=Java\n*.css linguist-language=Java\n*.scss linguist-language=Java\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1865234375,
          "content": ".DS_Store\nnode_modules\ndist\n\n.env.local\n.env.*.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n.idea\n.vscode\n*.iml\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\ntarget\ntest\napplication-dev.yml\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8720703125,
          "content": "# Aurora---前后端分离博客\n\n### 轻量版后端: https://github.com/zhouyqxy/aurora_Lite\n\n## 前言\n\n- 开源不易，希望大家star支持一下\n- 由于本人还在上学，主语言并不是Java，所以项目更新频率较慢，但是本项目会长期维护，有问题可以提issue，\n  同时也欢迎大家来共建此项目，包括但不限于：bug 修复、代码优化、功能开发等等\n\n## 在线地址\n\n- 前台链接：[www.linhaojun.top](https://www.linhaojun.top)\n- 后台链接：[admin.linhaojun.top](https://admin.linhaojun.top)\n- 演示账号：test@163.com，密码：123456\n\n## 效果图\n\n### 图片1：\n![图片1](https://s3.bmp.ovh/imgs/2023/06/25/8a6ad38dfb27bb3a.png)\n\n### 图片2：\n![图片2](https://s3.bmp.ovh/imgs/2023/06/25/7036a13dc0a0488a.png)\n\n## 相关技术\n\n### 前端：\n\n- 样式来自于：[hexo的aurora主题](https://github.com/auroral-ui/hexo-theme-aurora)\n- 基础框架：vue3(前台) vue2(后台)\n- 状态管理：pinia(前台) vuex(后台)\n- 路由组件：vue-router\n- 网络请求：axios\n- 其他技术：详见前端项目的package.json\n\n### 后端：\n\n- 基础框架：springboot\n- ORM框架：mybatisplus\n- 权限框架：springsecurity\n- 缓存中间件：redis\n- 消息中间件：rabbitmq\n- 搜索引擎：elasticsearch\n- 对象存储：minio\n- 定时任务：quartz\n- 其他技术：详见后端项目的pom.xml\n\n## 后续计划\n\n- [ ] 前台代码优化\n- [ ] 后台vue3重构\n- [ ] 后端提供轻量化选择\n\n## 快速开始\n\n一键安装\n\n执行如下命令一键安装 Aurora 博客：\n\n```shell\ncurl -sSL https://kangxianghui.top/api/Util/OnlineView/aurora_shell/aurora_install.sh -o aurora_install.sh && sh aurora_install.sh\n```\n\n此命令适用于：CentOS 操作系统\n\n## 部署\n\n- 详见项目部署文档\n\n## 交流群\n\n- QQ群：338371628\n\n## 鸣谢\n\n- 感谢[jetbrains](https://www.jetbrains.com/)提供的开源开发许可证\n"
        },
        {
          "name": "aurora-springboot",
          "type": "tree",
          "content": null
        },
        {
          "name": "aurora-vue",
          "type": "tree",
          "content": null
        },
        {
          "name": "aurora_start.sh",
          "type": "blob",
          "size": 9.6396484375,
          "content": "#!/bin/bash\n\necho \"Start installing aurora blog\"\necho \"installing yum-utils...\"\nsudo yum install -y yum-utils\nif [ $? -ne 0 ]; then\n  echo \"yum-utils install failed\"\n  exit 1\nfi\necho \"Configuring docker Alibaba Cloud image... \"\nsudo yum-config-manager \\\n  --add-repo \\\n  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nif [ $? -ne 0 ]; then\n  echo \"Docker image warehouse configuration failed\"\n  exit 1\nfi\necho \"Updating yum package index...\"\nsudo yum makecache fast\nif [ $? -ne 0 ]; then\n  echo \"yum package index update failed\"\n  exit 1\nfi\necho \"Installing docker...\"\nsudo yum install docker-ce docker-ce-cli containerd.io\nif [ $? -ne 0 ]; then\n  echo \"Docker installation failed\"\n  exit 1\nfi\necho \"Starting docker...\"\nsudo systemctl start docker\nif [ $? -ne 0 ]; then\n  echo \"Docker failed to start \"\n  exit 1\nelse\n  echo \"Docker launched successfully\"\nfi\necho \"Setting docker to boot automatically...\"\nsudo systemctl enable docker\nif [ $? -ne 0 ]; then\n  echo \"Docker failed to set up self-boot\"\n  exit 1\nfi\nsudo mkdir -p /etc/docker\nif [ $? -ne 0 ]; then\n  echo \"mkdir -p /etc/docker failed\"\n  exit 1\nfi\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n    \"registry-mirrors\": [\n        \"https://registry.docker-cn.com\",\n        \"http://hub-mirror.c.163.com\",\n        \"https://dockerhub.azk8s.cn\",\n        \"https://mirror.ccs.tencentyun.com\",\n        \"https://registry.cn-hangzhou.aliyuncs.com\",\n        \"https://docker.mirrors.ustc.edu.cn\",\n        \"https://docker.m.daocloud.io\",\n        \"https://noohub.ru\",\n        \"https://huecker.io\",\n        \"https://dockerhub.timeweb.cloud\",\n        \"https://hub.atomgit.com/repos\",\n        \"https://docker.1panel.live\",\n        \"https://hub.rat.dev\"\n    ]\n}\nEOF\nif [ $? -ne 0 ]; then\n  echo \"tee /etc/docker/daemon.json failed\"\n  exit 1\nfi\nsudo systemctl daemon-reload\nif [ $? -ne 0 ]; then\n  echo \"systemctl daemon-reload failed\"\n  exit 1\nfi\nsudo systemctl restart docker\nif [ $? -ne 0 ]; then\n  echo \"systemctl restart docker failed\"\n  exit 1\nfi\necho \"Creating docker network bridge...\"\nsudo docker network create aurora\nif [ $? -ne 0 ]; then\n  echo \"Docker network bridge creation failed\"\n  exit 1\nfi\nmysql_version=\"8.0.39-debian\"\necho \"Installing mysql...\"\nsudo docker pull mysql:$mysql_version\nif [ $? -ne 0 ]; then\n  echo \"MySQL image download failed\"\n  exit 1\nfi\nsudo mkdir -p /opt/data/mysql/data\nif [ $? -ne 0 ]; then\n  echo \"mkdir -p /opt/data/mysql/data failed\"\n  exit 1\nfi\nsudo mkdir -p /opt/data/mysql/conf\nif [ $? -ne 0 ]; then\n  echo \"mkdir -p /opt/data/mysql/conf failed\"\n  exit 1\nfi\nsudo mkdir -p /opt/data/mysql/mysqld\nif [ $? -ne 0 ]; then\n  echo \"mkdir -p /opt/data/mysql/mysqld failed\"\n  exit 1\nfi\nsudo chmod 777 /opt/data/mysql/data\nif [ $? -ne 0 ]; then\n  echo \"chmod 777 /opt/data/mysql/data failed\"\n  exit 1\nfi\nsudo chmod 777 /opt/data/mysql/conf\nif [ $? -ne 0 ]; then\n  echo \"chmod 777 /opt/data/mysql/conf failed\"\n  exit 1\nfi\nsudo chmod 777 /opt/data/mysql/mysqld\nif [ $? -ne 0 ]; then\n  echo \"chmod 777 /opt/data/mysql/mysqld failed\"\n  exit 1\nfi\nconfig_file=\"my.cnf\"\nsudo cp $config_file /opt/data/mysql/conf/\nif [ $? -eq 0 ]; then\n  echo \"mysql configuration file copied successfully\"\nelse\n  echo \"Copying mysql configuration file failed\"\n  exit 1\nfi\nMYSQL_PASSWORD=\"Aurora_123456\"\necho \"Starting mysql...\"\nsudo docker run \\\n  --name mysql \\\n  --restart=always \\\n  -p 3306:3306 \\\n  -v /opt/data/mysql/mysqld:/var/run/mysqld -v /opt/data/mysql/data:/var/lib/mysql -v /opt/data/mysql/conf:/etc/mysql/conf.d \\\n  -e MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD -d mysql:$mysql_version\nif [ $? -ne 0 ]; then\n  echo \"mysql failed to start\"\n  exit 1\nelse\n  echo \"mysql started successfully\"\nfi\nsudo docker network connect aurora mysql\nif [ $? -ne 0 ]; then\n  echo \"mysql failed to join docker network\"\n  exit 1\nelse\n  echo \"mysql successfully joined docker network\"\nfi\nmachine_physics_net=$(ls /sys/class/net/ | grep -v \"$(ls /sys/devices/virtual/net/)\")\nlocal_ip=$(ip addr | grep \"$machine_physics_net\" | awk '/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}')\npublic_ip=$(curl ifconfig.me)\necho \"Creating database...\"\nsleep 20\nsudo docker exec -i mysql mysql -h $local_ip -uroot -p$MYSQL_PASSWORD -e \"CREATE DATABASE aurora CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\"\nif [ $? -ne 0 ]; then\n  echo \"Database creation failed\"\n  exit 1\nelse\n  echo \"Database created successfully\"\nfi\necho \"Initializing database...\"\nsudo docker exec -i mysql mysql -h $local_ip -uroot -p$MYSQL_PASSWORD aurora <$(pwd)/aurora.sql\nif [ $? -ne 0 ]; then\n  echo \"Database initialization failed\"\n  exit 1\nelse\n  echo \"Database initialization successful\"\nfi\nredis_version=\"7.0.13\"\necho \"Installing redis...\"\nsudo docker pull redis:$redis_version\nif [ $? -ne 0 ]; then\n  echo \"Redis image download failed\"\n  exit 1\nfi\nREDIS_PASSWORD=\"123456\"\necho \"Starting redis...\"\nsudo docker run --name redis \\\n  --restart=always \\\n  -p 6379:6379 -d redis:$redis_version \\\n  --requirepass $REDIS_PASSWORD\nif [ $? -ne 0 ]; then\n  echo \"redis failed to start\"\n  exit 1\nelse\n  echo \"redis launched successfully\"\nfi\nsudo docker network connect aurora redis\nif [ $? -ne 0 ]; then\n  echo \"redis failed to join docker network\"\n  exit 1\nelse\n  echo \"redis successfully joined docker network\"\nfi\nrabbitmq_version=\"3.12.14\"\necho \"Installing rabbitmq...\"\nsudo docker pull rabbitmq:$rabbitmq_version-management\nif [ $? -ne 0 ]; then\n  echo \"rabbitmq image download failed\"\n  exit 1\nfi\necho \"Starting rabbitmq...\"\nsudo docker run --name rabbitmq \\\n  --restart=always -p 5672:5672 -p 15672:15672 \\\n  -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest \\\n  -d rabbitmq:$rabbitmq_version-management\nif [ $? -ne 0 ]; then\n  echo \"rabbitmq failed to start\"\n  exit 1\nelse\n  echo \"rabbitmq launched successfully\"\nfi\nsudo docker network connect aurora rabbitmq\nif [ $? -ne 0 ]; then\n  echo \"rabbitmq failed to join docker network\"\n  exit 1\nelse\n  echo \"rabbitmq successfully joined docker network\"\nfi\necho \"Installing minio...\"\nsudo docker pull minio/minio\nif [ $? -ne 0 ]; then\n  echo \"Minio image download failed\"\n  exit 1\nfi\nsudo mkdir -p /opt/data/minio/config\nif [ $? -ne 0 ]; then\n  echo \"minio profile directory creation failed\"\n  exit 1\nfi\nsudo mkdir -p /opt/data/minio/data\nif [ $? -ne 0 ]; then\n  echo \"minio data directory creation failed\"\n  exit 1\nfi\necho \"Starting minio...\"\nsudo docker run \\\n  -p 9000:9000 \\\n  -p 9090:9090 \\\n  --name minio \\\n  -d --restart=always \\\n  -e \"MINIO_ACCESS_KEY=minioadmin\" \\\n  -e \"MINIO_SECRET_KEY=minioadmin\" \\\n  -v /opt/data/minio/data:/data \\\n  -v /opt/data/minio/config:/root/.minio \\\n  minio/minio server \\\n  /data --console-address \":9090\" -address \":9000\"\nif [ $? -ne 0 ]; then\n  echo \"minio failed to start\"\n  exit 1\nelse\n  echo \"Minio launched successfully\"\nfi\nsudo docker network connect aurora minio\nif [ $? -ne 0 ]; then\n  echo \"Minio failed to join docker network\"\n  exit 1\nelse\n  echo \"Minio joins docker network successfully\"\nfi\necho \"Creating minio default bucket...\"\nminio_bucket=\"aurora\"\nminio_myname=\"myminio\"\nsudo docker exec -it minio mc alias set $minio_myname http://minio:9000 minioadmin minioadmin\nif [ $? -ne 0 ]; then\n  echo \"minio alias setting failed\"\n  exit 1\nfi\nsudo docker exec -it minio mc mb $minio_myname/$minio_bucket\nif [ $? -ne 0 ]; then\n  echo \"minio default bucket creation failed\"\n  exit 1\nelse\n  echo \"minio default bucket created successfully\"\nfi\nsudo docker exec -it minio mc anonymous set public $minio_myname/$minio_bucket\nif [ $? -ne 0 ]; then\n  echo \"Minio default bucket permissions setting failed\"\n  exit 1\nfi\necho \"Installing openjdk 8...\"\nsudo docker pull openjdk:8-jdk\nif [ $? -ne 0 ]; then\n  echo \"Openjdk 8 image download failed\"\n  exit 1\nfi\necho \"Starting backend services...\"\nminio_url=http://$public_ip:8066/minio/\nsudo docker run -d \\\n  -p 8080:8080 \\\n  --name aurora_server --restart=always \\\n  -v $(pwd):$(pwd) \\\n  openjdk:8-jdk java -jar -Dupload.minio.bucketName=$minio_bucket -Dupload.minio.url=$minio_url $(pwd)/aurora-springboot-0.0.1.jar\nif [ $? -ne 0 ]; then\n  echo \"Back-end service startup failed\"\n  exit 1\nelse\n  echo \"Back-end service started successfully\"\nfi\nsudo docker network connect aurora aurora_server\nif [ $? -ne 0 ]; then\n  echo \"Back-end service failed to join docker network\"\n  exit 1\nelse\n  echo \"Back-end service successfully joined docker network\"\nfi\necho \"Restarting backend services...\"\nsudo docker restart aurora_server\nif [ $? -ne 0 ]; then\n  echo \"Back-end service restart failed\"\n  exit 1\nelse\n  echo \"Back-end service restarted successfully\"\nfi\necho \"Installing nginx...\"\nsudo docker pull nginx\nif [ $? -ne 0 ]; then\n  echo \"nginx image download failed\"\n  exit 1\nfi\necho \"Starting nginx...\"\nsudo docker run -d \\\n  --name aurora_nginx \\\n  --restart=always \\\n  -p 8066:8066 \\\n  -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf \\\n  -v $(pwd)/blog_web:/usr/local/aurora-vue/blog \\\n  -v $(pwd)/admin_web:/usr/local/aurora-vue/admin \\\n  nginx\nif [ $? -ne 0 ]; then\n  echo \"nginx failed to start\"\n  exit 1\nelse\n  echo \"nginx started successfully\"\nfi\nsudo docker network connect aurora aurora_nginx\nif [ $? -ne 0 ]; then\n  echo \"nginx failed to join docker network\"\n  exit 1\nelse\n  echo \"nginx successfully joins docker network\"\nfi\necho \"Restarting nginx...\"\nsudo docker restart aurora_nginx\nif [ $? -ne 0 ]; then\n  echo \"nginx restart failed\"\n  exit 1\nelse\n  echo \"nginx restarted successfully\"\nfi\necho \"All services started successfully\"\necho \"服务器安全组需要开放：8066端口，才能访问博客\"\necho 访问 http://$public_ip:8066/ 即可访问博客\necho 访问 http://$public_ip:8066/admin/ 即可访问后台管理\necho \"后台管理默认账号密码为：admin@163.com / 123456\"\necho \"作者：花未眠（http://www.linhaojun.top/）\"\necho \"部署脚本作者：karl（https://kangxianghui.top/）\"\necho \"感谢您选择使用Aurora博客系统，祝您使用愉快！\"\n"
        },
        {
          "name": "项目部署文档.md",
          "type": "blob",
          "size": 16.4267578125,
          "content": "## 1.服务器要求\n\n> 下面的建议不包含minio的内存占用，如需使用minio，请另外考虑\n\n1. 核心数和内存大小有两种方案：\n   - 2核4G（使用ES搜索策略）\n   - 2核2G（使用MySQL搜素策略）\n\n2. 带宽大小有两种方案：\n   - 使用oss对带宽没有要求（本人亲测：1M带宽+oss 访问速度很快）\n   - 使用minio需要大一点的带宽（小带宽也可以，但需要使用cdn加速）\n\n## 2.docker的安装\n\n> 以下命令基于CentOS环境。\n\n1. 下载工具\n\n   ```shell\n   yum install -y yum-utils\n   ```\n\n2. 设置镜像的仓库\n\n   ```shell\n   yum-config-manager \\\n       --add-repo \\\n       https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  #配置阿里云的镜像\n   ```\n\n3. 更新yum软件包索引\n\n   ```shell\n   yum makecache fast\n   ```\n\n4. 安装docker相关配置\n\n   ```shell\n   yum install docker-ce docker-ce-cli containerd.io\n   ```\n\n5. 启动docker\n\n   ```shell\n   systemctl start docker\n   # 查看当前版本号，是否启动成功\n   docker version\n   # 设置开机自启动\n   systemctl enable docker\n   ```\n\n****\n\n## 3.安装mysql\n\n### 方式1: 无挂载模式\n\n> 这种方式直接运行mysql之后，所有关于mysql的内容都在容器中，后续如果需要修改mysql的内容，需要手动进入容器内进行操作。且在宿主机上无备份，一旦容器被删除，数据也会被删除。\n\n```shell\ndocker pull mysql //下载MySQL镜像\ndocker run --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 -d mysql //启动MySQL\n```\n\n### 方式2: 数据卷挂载模式\n\n> 和**无挂载模式相对**，通过数据卷挂载的方式运行容器，将容器内的部分重要文件映射到宿主机上。直接操作宿主机对应的映射文件就能和容器内作同步，方便操作的同时还能保证容器内的数据在宿主机上有一个备份。\n>\n> 下面的命令分别对mysql的日志文件、配置文件、数据文件进行了映射，你也可以自己修改。\n\n```shell\ndocker run --name mysql --restart=always -p 3306:3306 -v /mnt/aurora/mysql/log:/var/log/mysql -v /mnt/aurora/mysql/data:/var/lib/mysql -v /mnt/aurora/mysql/conf:/etc/mysql/conf.d  -e MYSQL_ROOT_PASSWORD=密码 -d mysql\n```\n\n****\n\n## 4.安装redis\n\n```shell\ndocker pull redis # 下载Redis镜像\ndocker run --name redis  --restart=always -p 6379:6379 -d redis --requirepass \"密码\" # 启动Redis\n```\n\n可能出现的问题：\n\nRedis 容器一直重启，并且使用`docker logs 容器ID`查看容器日志发现有如下报错：\n\n```\nFatal: Can't initialize Background Jobs. Error message: Operation not permitted\n```\n\n有可能是因为当前服务器环境与Redis最新版本不兼容，此时可以换成7.0.10版本，命令如下：\n\n```shell\ndocker pull redis:7.0.10 # 下载Redis镜像\ndocker run --name redis  --restart=always -p 6379:6379 -d redis:7.0.10 --requirepass \"密码\" # 启动Redis，执行这条命令之前记得先删除旧的Redis容器，否则会造成容器名称冲突\n```\n\n## 5.安装rabbitmq\n\n```shell\ndocker pull rabbitmq:management //下载RabbitMQ镜像\ndocker run --name rabbit --restart=always -p 15672:15672 -p 5672:5672  -d  rabbitmq:management   //启动RabbitMQ,默认guest用户，密码也是guest。\n```\n\n## 6.安装elasticsearch\n\n```shell\ndocker pull elasticsearch:7.9.2\n```\n\n```shell\nmkdir -p  /home/elasticsearch/data/ \nmkdir -p  /home/elasticsearch/config/\n```\n\n1. 编写配置文件\n\n   ```shell\n   echo 'http.host: 0.0.0.0\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\" '>>/home/elasticsearch/config/elasticsearch.yml\n   ```\n\n2. 修改文件夹权限\n\n   ```shell\n   chmod -R 777 /home/elasticsearch/\n   ls -l # 查看文件权限\n   ```\n\n3. 启动elasticseach镜像\n\n   ```shell\n   docker run --name elasticsearch -p 9200:9200 \\\n    -p 9300:9300 \\\n    -e \"discovery.type=single-node\" \\\n    -e ES_JAVA_OPTS=\"-Xms64m -Xmx128m\" \\\n     -v /home/elasticsearch/config/elasticsearch.yml:/usr/shellare/elasticsearch/config/elasticsearch.yml \\\n    -v /home/elasticsearch/data:/usr/shellare/elasticsearch/data \\\n    -v /home/elasticsearch/plugins:/usr/shellare/elasticsearch/plugins \\\n    -d elasticsearch:7.9.2\n   ```\n\n接下来我们就是拿浏览器访问啦。\n\n在浏览器上输入：服务器IP地址:9200\n\n可能出现的问题：\n\n1. 启动成功，但是访问失败的话，查看一下安全组中映射端口是否已经打开。如果是本地虚拟机，可能与防火墙相关（我用的云服务器，没有测试，如果有问题，还是需要大家自行去百度||谷歌一下）。\n\n2. -e ES_JAVA_OPTS=\"-Xms64m -Xmx128m\"：配置内存大小出现了问题。\n\n3. 最后就还有可能是配置文件中出现了问题。\n\n   ```shell\n   echo 'http.host: 0.0.0.0\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\" '>>/home/elasticsearch/config/elasticsearch.yml\n   ```\n\n   `http.host: 0.0.0.0` 在冒号后面有一个空格的，这里的配置文件是`yml`格式,所以一定要严格按照`yml`格式来书写。\n\n安装ik分词器\n\n进入已经启动成功的elasticsearch容器。\n\n```shell\ndocker exec -it elasticsearch /bin/bash\n```\n\n```shell\n./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.2/elasticsearch-analysis-ik-7.9.2.zip\n```\n\nps: `安装的ik分词器的版本一定要与elasticsearch的版本保持一致`\n\n下载过程中如果遇到选择，直接输入 y回车就可以了。\n\n下载完成之后，退出去，重新启动elasticsearch容器。\n\n```shell\ndocker restart elasticsearch\n```\n\n测试ik分词器是否安装成功\n\n安装完成后，我们再来进行测试遍，看看有什么样的变化。\n\npostman post请求分词测试：`http://服务器IP地址:9200/_analyze`\n\n```json\n{\n\t\"tokenizer\":\"ik_smart\",\n\t\"text\":\"我爱技术\"\n}\n```\n\n结果\n\n```shell\n{\n    \"tokens\": [\n        {\n            \"token\": \"我\",\n            \"start_offset\": 0,\n            \"end_offset\": 1,\n            \"type\": \"CN_CHAR\",\n            \"position\": 0\n        },\n        {\n            \"token\": \"爱\",\n            \"start_offset\": 1,\n            \"end_offset\": 2,\n            \"type\": \"CN_CHAR\",\n            \"position\": 1\n        },\n        {\n            \"token\": \"技术\",\n            \"start_offset\": 2,\n            \"end_offset\": 4,\n            \"type\": \"CN_WORD\",\n            \"position\": 2\n        }\n    ]\n}\n```\n\n## 7.安装MaxWell\n\n```sh\ndocker pull zendesk/maxwell //下载MaxWell镜像\ndocker run --name maxwell --restart=always  -d  zendesk/maxwell bin/maxwell  --user='数据库用户名' --password='数据库密码'  --host='IP地址'  --producer=rabbitmq --rabbitmq_user='MQ用户名' --rabbitmq_pass='MQ密码' --rabbitmq_host='IP地址' --rabbitmq_port='5672' --rabbitmq_exchange='maxwell_exchange'  --rabbitmq_exchange_type='fanout' --rabbitmq_exchange_durable='true' --filter='exclude: *.*, include: aurora.t_article.article_title = *, include: aurora.t_article.article_content = *, include: aurora.t_article.is_delete = *, include: aurora.t_article.status = *' //运行MaxWell\n```\n\n注意：上述命令中aurora为数据库名称。\n\n****\n\n## 8.填写aurora-springboot中的yml文件\n\n此处省略，操作比较简单，就是配置一些简单的ip+端口+用户名+密码，前提是服务器上对应的端口已经打开\n\n阿里云oss具体情况详见百度\n\nQQ互联具体情况详见百度\n\n这里就不赘述了\n\n## 9.打包运行后端项目\n\n1. 使用idea右侧Maven的package命令\n\n2. 在服务器的/usr/local/下面创建名为aurora-springboot的文件夹\n\n3. 将打包好的jar包传到服务器上面的/usr/local/aurora-springboot下面\n\n4. 编写Dockerfile,同时将编写好的Dockerfile传输到服务器的/usr/local/aurora-springboot下面\n\n```dockerfile\nFROM openjdk:8\nVOLUME /tmp\nADD aurora-springboot-0.0.1.jar blog.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/blog.jar\"]\n```\n\n> 注意：Dockerfile文件只需要上传到指定目录下即可，不需要手动执行其他操作。\n\n5. 编写aurora-start.sh,同时将编写好的aurora-start.sh上传到服务器的/usr/local/docker下面\n\n```shell\nSOURCE_PATH=/usr/local/aurora-springboot\nSERVER_NAME=aurora-springboot-0.0.1.jar\nTAG=latest\nSERVER_PORT=8080\nCID=$(docker ps | grep \"$SERVER_NAME\" | awk '{print $1}')\nIID=$(docker images | grep \"$SERVER_NAME\" | awk '{print $3}')\nif [ -n \"$CID\" ]; then\n  echo \"存在容器$SERVER_NAME,CID-$CID\"\n  docker stop $CID\n  echo \"成功停止容器$SERVER_NAME,CID-$CID\"\n  docker rm $CID\n  echo \"成功删除容器$SERVER_NAME,CID-$CID\"\nfi\nif [ -n \"$IID\" ]; then\n  echo \"存在镜像$SERVER_NAME:$TAG,IID=$IID\"\n  docker rmi $IID\n  echo \"成功删除镜像$SERVER_NAME:$TAG,IID=$IID\"\nfi\necho \"开始构建镜像$SERVER_NAME:$TAG\"\ncd $SOURCE_PATH\ndocker build -t $SERVER_NAME:$TAG .\necho \"成功构建镜像$SERVER_NAME:$TAG\"\ndocker run --restart=always --name aurora-springboot-0.0.1.jar -d -p 8080:8080 aurora-springboot-0.0.1.jar:latest\necho \"成功创建并运行容器$SERVER_NAME\"\n```\n\n**注意事项：sh文件需要用notepad++转为Unix格式**\n\n具体操作：点开notepad++中的编辑 ---> 文档格式转换 --->转为Unix \n\n6. cd到/usr/local/docker下面 ，执行如下命令打包docker镜像文件\n\n```shell\nsh aurora-start.sh\n```\n\n7. 启动容器\n\n```sh\ndocker run  --name aurora-springboot-0.0.1.jar -d -p 8080:8080 aurora-springboot-0.0.1.jar:latest\n```\n\n8. 这样后端项目就可以在服务器上跑起来了\n\n9. 访问测试(浏览器上访问)\n\n   ```shell\n   ip:8080\n   ```\n\n****\n\n## 10.打包运行前端项目\n\n1. aurora-blog项目中，更改src/config/config.ts\n\n   ```typescript\n     captcha: {\n       TENCENT_CAPTCHA: '你自己的天御验证码'\n     },\n     qqLogin: {\n       QQ_APP_ID: '你自己的APP_ID',\n       QQ_REDIRECT_URI: 'https://你的前台域名/oauth/login/qq'\n     },\n   ```\n\n2. aurora-blog项目中，更改public/index.html\n\n   ```html\n   <script\n         src=\"http://connect.qq.com/qc_jssdk.js\"\n         data-appid=\"你自己的APP_ID\"\n         data-redirecturi=\"https://你的前台域名/oauth/login/qq\"></script>\n   ```\n\n3. 如果你的网站没有打算使用https,将aurora-blog/public/index.html和aurora-admin/public/index.html中下面这一行代码给注释掉\n\n   ```html\n   <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\" />\n   ```\n\n4. 分别到aurora-blog和aurora-admin下面执行如下命令 (推荐关闭vscode的Eslint,本项目没有遵循Eslint的规范)\n\n   如果下列命令执行报错，可以尝试替换版本\n\n   参考版本：npm版本为：8.3.1    vue-cli的版本为：5.0.6\n\n   ```shell\n   npm install\n   npm run build\n   ```\n\n   如果想在本地 debug，可以执行下面这个命令：\n\n   ```shell\n   npm run serve\n   ```\n\n5. 在服务器的/usr/local/下面创建名为aurora-vue的文件夹，\n\n6. 将打包好的前台代码重命名为blog, 并传输到服务器的/usr/local/aurora-vue下面\n\n7. 将打包好的后台代码重命名为admin, 并传输到服务器的/usr/local/aurora-vue下面\n\n后台管理系统的初始用户名密码分别是：\n\n```\n用户名：admin@163.com\n密码：123456\n```\n\n==第一次登录后一定要修改密码！！！==\n\n## 11.安装并启动nginx\n\n### 方式1: http\n\n1. 拉取nginx镜像\n\n   ```shell\n   docker pull nginx\n   ```\n\n2. 在/usr/local/nginx下创建nginx.conf文件，格式如下\n\n   ```shell\n   events {\n       worker_connections  1024;\n   }\n   \n   http {\n       include       mime.types;\n       default_type  application/octet-stream;\n       sendfile        on;\n       keepalive_timeout  65;\n   \n       client_max_body_size     50m;\n       client_body_buffer_size  10m; \n       client_header_timeout    1m;\n       client_body_timeout      1m;\n   \n       gzip on;\n       gzip_min_length  1k;\n       gzip_buffers     4 16k;\n       gzip_comp_level  4;\n       gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n       gzip_vary on;\n   \n   server {\n           listen       80;\n           server_name  前台域名;\n        \n           location / {\t\t\n               root   /usr/local/aurora-vue/blog;\n               index  index.html index.htm; \n               try_files $uri $uri/ /index.html;\t\n           }\n   \t\t\t\n   \tlocation ^~ /api/ {\t\t\n               proxy_pass http://服务器ip:8080/;\n   \t       proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\t\t\t\t\t\t\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\t\n       }\n   \t\n   server {\n           listen       80;\n           server_name  后台子域名;\n        \n           location / {\t\t\n               root   /usr/local/aurora-vue/admin;\n               index  index.html index.htm; \n               try_files $uri $uri/ /index.html;\t\n           }\n   \t\t\t\n   \tlocation ^~ /api/ {\t\t\n               proxy_pass http://服务器ip:8080/;\n   \t    proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\t\t\t\t\t\t\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\t\n       }\n    }\n   ```\n\n3. 启动nginx\n\n   ```shell\n   docker run --name nginx --restart=always -p 80:80 -d -v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/aurora-vue:/usr/local/aurora-vue nginx \n   ```\n\n### 方式2: https\n\n1. 拉取nginx镜像\n\n   ```shell\n   docker pull nginx\n   ```\n\n2. 修改配置文件\n\n   ```shell\n   events {\n       worker_connections  1024;\n   }\n   \n   http {\n       include       mime.types;\n       default_type  application/octet-stream;\n       sendfile        on;\n       keepalive_timeout  65;\n   \n       client_max_body_size     50m;\n       client_body_buffer_size  10m; \t  \n       client_header_timeout    1m;\n       client_body_timeout      1m;\n   \n       gzip on;\n       gzip_min_length  1k;\n       gzip_buffers     4 16k;\n       gzip_comp_level  4;\n       gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n       gzip_vary on;\n   \t\n   server {\n   \n           listen  443 ssl;\n           server_name  前台域名;\n   \n           ssl on;\n           ssl_certificate ssl证书文件位置; \n   \t   ssl_certificate_key ssl证书文件位置; \n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n   \n          location / {\n               root   /usr/local/vue/blog;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n   \t\t\n           location ^~ /api/ {\n               proxy_pass http://服务器ip:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \n       }\n   \n   server {\n   \n           listen  443 ssl;\n           server_name 后台域名;\n   \n           ssl on;\n           ssl_certificate ssl证书文件位置; \n           ssl_certificate_key ssl文件位置; \n           ssl_session_timeout 5m;\n           ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n           ssl_prefer_server_ciphers on;\n   \n          location / {\n               root   /usr/local/vue/admin;\n               index  index.html index.htm;\n               try_files $uri $uri/ /index.html;\n           }\n   \t\t\n           location ^~ /api/ {\n               proxy_pass http://服务器ip:8080/;\n               proxy_set_header   Host             $host;\n               proxy_set_header   X-Real-IP        $remote_addr;\n               proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n           }\n   \t\n       }\n   \n   \n   \n   server {\n           listen       80;\n           server_name  前台域名;\n           rewrite ^(.*)$\thttps://$host$1\tpermanent;\n   \t\t\n       }\n   \t\n   server {\n           listen       80;\n           server_name  后台域名;\n           rewrite ^(.*)$\thttps://$host$1\tpermanent;\n   \t\t\n       }\t\n   }\n   ```\n\n3. 启动nginx\n\n   ```shell\n   docker run --name nginx --restart=always -p 443:443 -p 80:80 -d -v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/nginx/cert:/etc/nginx/cert -v /usr/local/aurora-vue:/usr/local/aurora-vue --privileged=true nginx\n   ```\n\n\n## 12. 如何修改网站基本信息\n打开后台管理系统，找到【系统管理-->网站管理】，在此修改。\n"
        }
      ]
    }
  ]
}