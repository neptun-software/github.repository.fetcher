{
  "metadata": {
    "timestamp": 1736708599401,
    "page": 904,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tlaplus/tlaplus",
      "stars": 2358,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9208984375,
          "content": "bin/\nclass/\ntest-class/\n.apt_generated/\ndist/\ntest-bin/\n*/screenshots\ntoolbox/*/target/\ntlatools/*/target\n*.jar\ntoolbox/*/farsite/*.pdf\nexamples/DieHard/*.toolbox\norg.lamport.tla.toolbox.uitest/farsite/DistributedSystemModule.toolbox/\ntlatools/org.lamport.tlatools/TLA+ Tools\ntlatools/org.lamport.tlatools/test-reports\ntlatools/org.lamport.tlatools/ByteUtilsTest*.bin\ntlatools/org.lamport.tlatools/states/\n*.csv\ntoolbox/org.lamport.tla.toolbox.product.product/plugin_customization.ini\nexamples/*/states/\ngeneral/performance/states/\ntoolbox/org.lamport.tla.toolbox.jnlp/files/dist-tlc.zip\nworkspace/\nstates/\nstates\ntlatools/states\n.DS_Store\nscreenshots/\najcore.*.txt\ntlatools/org.lamport.tlatools/test-model/CodePlexBug08/checkpoint/\ntlatools/org.lamport.tlatools/test-model/CallGotoUnlabeledTest.old\njunit[0-9]*.properties\njunitvmwatcher[0-9]*.properties\ntest.jfr\n*.jfr\ntlatools/org.lamport.tlatools/test-model/test.out\n.tlacache/\n.Rproj.user\n"
        },
        {
          "name": ".jenkins.groovy",
          "type": "blob",
          "size": 13.1298828125,
          "content": "//def labels = ['windows', 'master', 'macos'] // labels for Jenkins node types we will build on\ndef labels = ['master', 'macos']\ndef branch = \"master\"\ndef builders = [:]\nfor (x in labels) {\n    def label = x // Need to bind the label variable before the closure - can't do 'for (label in labels)'\n\n    // Create a map to pass in to the 'parallel' step so we can fire all the builds at once\n    builders[label] = {\n      node(label) {\n\t   stage('Preparation') { // for display purposes\n\t      // Get some code from a GitHub repository\n\t      git branch: branch, url: 'https://github.com/tlaplus/tlaplus.git'\n\t   }\n\t   stage('Tools') {\n\t\twithAnt(installation: 'apache ant', jdk: 'Java11') {\n\t\t\tif (isUnix()) {\n\t\t\t    sh \"ant -f tlatools/org.lamport.tlatools/customBuild.xml info compile compile-test dist test-dist\"\n\t\t\t} else {\n\t\t\t    bat \"ant -f tlatools\\\\org.lamport.tlatools\\\\customBuild.xml info compile compile-test dist test-dist\"\n\t\t\t}\n\t\t}\n\t   }\n\n\t   stage ('RecordTestAndCoverageTools') {\n\t       junit 'tlatools/org.lamport.tlatools/target/surefire-reports/onJar/*.xml'\n\t      // collect jacoco results for TLC\n\t      jacoco classPattern: 'tlatools/org.lamport.tlatools/class', exclusionPattern: '**/*Test*.class', execPattern: 'tlatools/org.lamport.tlatools/target/code-coverage.exec', sourcePattern: 'tlatools/org.lamport.tlatools/src'\n\t   }\n\n\t   stage('Toolbox') {\n\t      // Run the maven build\n\t\t   if (label == 'master') {\n\t\t      wrap([$class: 'Xvnc', takeScreenshot: false, useXauthority: true]) {\n\t\t\t  withMaven(\n\t\t\t    // Maven installation declared in the Jenkins \"Global Tool Configuration\"\n\t\t\t    maven: '3.5.4',\n\t\t\t    jdk: 'Java11',\n\t\t\t    mavenLocalRepo: '.repository',\n\t\t\t    options: [jacocoPublisher(disabled: true)]) {\n\n\t\t\t    // Run the maven build\n\t\t\t    sh \"mvn -Pcodesigning -U clean verify -Dmaven.test.failure.ignore=true -Dtest.skip=true\"\n\n\t\t\t  } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe & FindBugs reports...\n\t\t      }\n\t   \t      // the macosx zip on the master node to have it signed with the Apple certificate on macosx.  However, only master\n\t\t      // has the lamport certificate to sign the individual toolbox bundles.\n\t\t      stash includes: 'toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip', name: 'toolbox'\n                    } else {\n\t\t\t  withMaven(\n\t\t\t    // Maven installation declared in the Jenkins \"Global Tool Configuration\"\n\t\t\t    maven: '3.5.4',\n\t\t\t    jdk: 'Java11',\n\t\t\t    mavenLocalRepo: '.repository',\n\t\t\t    options: [jacocoPublisher(disabled: true)]) {\n\n\t\t\t    // Run the maven build\n\t\t\t    if (isUnix()) {\n\t\t\t\t    sh \"mvn -U clean verify -Dmaven.test.failure.ignore=true -Dtest.skip=true\"\n\t\t\t    } else {\n\t\t\t\t    bat \"mvn -U clean verify -Dmaven.test.failure.ignore=true -Dtest.skip=true\"\n\t\t\t    }\n\n\t\t\t  } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe & FindBugs reports...\n                    }\n\t   }\n\n\t   stage ('RecordTestToolbox') {\n\t       junit '**/target/surefire-reports/*.xml'\n\t   }\n      }\n    }\n}\nparallel builders\n\n// Rest runs on master node alone\n\nnode ('master') {\n\t\n   stage ('ReportSonarQube') {\n       withSonarQubeEnv {\n            withMaven(\n                // Maven installation declared in the Jenkins \"Global Tool Configuration\"\n                maven: '3.5.4',\n                jdk: 'Java11') {\n                sh \"mvn $SONAR_MAVEN_GOAL -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.branch=master\"\n            }\n       }\n   }\n   \n   stage('p2Tests') {\n      wrap([$class: 'Xvnc', takeScreenshot: false, useXauthority: true]) {\n       sh '''\n          rm -rf TLAToolbox-?.?.?-linux.gtk.x86_64.zip\n\t\trm -rf p2test/\n\n\t\t## copy currently released Toolbox and extract it (We want to make sure that we can update from it to this build)\n\t\twget http://dl.tlapl.us/tlatoolbox/products/TLAToolbox-1.6.0-linux.gtk.x86_64.zip\n\t\tunzip -qq TLAToolbox*.zip -d p2test/\n\n\t\tcd p2test/toolbox/\n\t\t\n\t\t## Update current Toolbox release to this version\n\t\t./toolbox -nosplash -application org.eclipse.equinox.p2.director \\\n\t\t-repository file://${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/repository \\\n\t\t-uninstallIU org.lamport.tla.toolbox.product.product \\\n\t\t-installIU org.lamport.tla.toolbox.product.product \\\n\t\t-profileProperties org.eclipse.update.install.features=true\n\n\t\t## Use Toolbox's p2 director to install the test feature into the previuos toolbox release to verify the update above worked and didn't trash anything.\n\t\t./toolbox -nosplash -application org.eclipse.equinox.p2.director \\\n\t\t-repository file://${WORKSPACE}/toolbox/org.lamport.tla.toolbox.p2repository/target/repository/ \\\n\t\t-installIU org.lamport.tla.toolbox.feature.uitest.feature.group\n\n\t\t## Run the SWTBot smoke tests to check product zips\n\t\t./toolbox -nosplash -application org.eclipse.swtbot.eclipse.junit.headless.swtbottestapplication \\\n\t\t-testApplication org.lamport.tla.toolbox.application \\\n\t\t-product org.lamport.tla.toolbox.product.standalone.product \\\n\t\t-nouithread \\\n\t\t-testPluginName org.lamport.tla.toolbox.tool.tlc.ui.uitest \\\n\t\tformatter=org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter \\\n\t\tformatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,org.lamport.tla.toolbox.tool.tlc.ui.uitest.SmokeTests.xml \\\n\t\t-className org.lamport.tla.toolbox.SmokeTests \\\n\t\t-data workspace$(date +%s) \\\n\t\t-clean\n\n\t\tcp *.xml ${WORKSPACE}/\n       '''\n      }\n   }\n\n   stage ('RecordTestP2UpdateManager') {\n       // Collect junit output for p2 smoke tests\n       junit 'p2test/toolbox/org.lamport.tla.toolbox.tool.tlc.ui.uitest.SmokeTests.xml'\n   }\n   \n   stage('CreateRPMFile') {\n       sh '''\n        cd toolbox/org.lamport.tla.toolbox.product.product/target/\n        fakeroot alien --to-rpm --scripts TLAToolbox-?.?.?-linux.gtk.amd64.deb\n        cp TLA*.rpm products/\n       '''\n   }\n   \n   stage('CreateAPTRepo') {\n       sh '''\n        chmod -x toolbox/org.lamport.tla.toolbox.product.product/createAptRepo.sh\n        cp toolbox/org.lamport.tla.toolbox.product.product/target/*.deb toolbox/org.lamport.tla.toolbox.product.product/target/repository/\n        cd toolbox/org.lamport.tla.toolbox.product.product/target/repository/\n        bash -x ../../createAptRepo.sh .\n       '''\n   }\n   \n   stage('RenderChangelog') { // Render the github flavord markdown to html\n       sh 'grip --context=tlaplus/tlaplus --export ${WORKSPACE}/general/docs/changelogs/ch1_7_1.md ${WORKSPACE}/general/docs/changelogs/changelog.html'\n   }\n}\n\nnode ('macos') {\n    stage('SignToolbox') {\n        sh 'rm -rf *'\n        unstash 'toolbox'\n        sh 'ls -lah'\n        sh 'unzip toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip'\n        sh 'codesign -f -s \"Developer ID Application: M K (3PCM4M3RWK)\" -v \"TLA+ Toolbox.app\" --deep'\n        sh 'ditto -ck --sequesterRsrc --keepParent \"TLA+ Toolbox.app\" TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip'\n        sh 'mv TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip toolbox/org.lamport.tla.toolbox.product.product/target/products/'\n        stash includes: 'toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip', name: 'signed'\n    }\n}\n\nnode ('master') {\n   stage('Archive') {\n      unstash 'signed'\n      fingerprint '**/org.lamport.tla.toolbox.product.product/target/repository/, **/org.lamport.tla.toolbox.product.product/target/products/*.zip, **/org.lamport.tla.toolbox.product.product/target/products/*.deb, **/tlatools/org.lamport.tlatools/dist/, **/org.lamport.tla.toolbox.doc/html/'\n\n      archiveArtifacts '**/general/docs/changelogs/changelog.html, **/org.lamport.tla.toolbox.product.product/target/org.lamport.tla.toolbox.product.product-1.4.0-SNAPSHOT.zip, **/org.lamport.tla.toolbox.p2repository/target/repository/, **/org.lamport.tla.toolbox.product.product/target/repository/, **/org.lamport.tla.toolbox.product.product/target/products/*.zip, **/org.lamport.tla.toolbox.product.product/target/products/*.deb, **/org.lamport.tla.toolbox.product.product/target/products/*.rpm, **/org.lamport.tla.toolbox.product.product/target/products/32bit_x86/*, **/tlatools/org.lamport.tlatools/dist/, **/org.lamport.tla.toolbox.doc/html/'\n   }\n}\n\nnode ('master') {\n   stage ('DraftGithubRelease') {\n\tif (env.JOB_NAME == 'Release-HEAD-master-Toolbox') {\n         sh '''\n           #!/bin/bash\n\n           cd ${WORKSPACE}/general/docs/changelogs\n\n           ## Append sha1 sum to changelog (last line of changelog has the table header).\n           echo \"$(sha1sum ${WORKSPACE}/tlatools/org.lamport.tlatools/dist/tla2tools.jar | cut -f 1 -d \" \")|tla2tools.jar\"  >> ch1_7_1.md\n           echo \"$(sha1sum ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-win32.win32.x86_64.zip | cut -f 1 -d \" \")|TLAToolbox-1.7.1-win32.win32.x86_64.zip\" >> ch1_7_1.md\n           echo \"$(sha1sum ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip | cut -f 1 -d \" \")|TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip\" >> ch1_7_1.md     \n           echo \"$(sha1sum ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-linux.gtk.x86_64.zip | cut -f 1 -d \" \")|TLAToolbox-1.7.1-linux.gtk.x86_64.zip\" >> ch1_7_1.md\n           \n           ## Two above as one-liner without intermediate file.\n           $(jq -n --argjson changelog \"$(cat ch1_7_1.md | jq  --raw-input --slurp .)\" -f gh-1_7_1.jq > gh-1_7_1.json)\n\n           ## Get id of existing draft release with given name.\n           DRAFT_RELEASE=$(curl -sS -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/tlaplus/tlaplus/releases --header \"Content-Type: application/json\" | jq '.[]| select(.draft==true and .name==\"The Brontinus release\") | .id')\n           echo $DRAFT_RELEASE\n\n           ## Update draft release with latest changelog in case it changed.\n           ## https://developer.github.com/v3/repos/releases/#edit-a-release\n           curl -sS -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE -d @gh-1_7_1.json -X PATCH --header \"Content-Type: application/json\"\n\n           ## Remove old assets otherwise upload below will error.\n           ASSETS=$(curl -sS -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets --header \"Content-Type: application/json\" | jq '.[]| .id')\n           for id in $(echo \"$ASSETS\"); do\n              ## DELETE /repos/:owner/:repo/releases/assets/:asset_id\n              curl -sS -X DELETE -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/tlaplus/tlaplus/releases/assets/$id\n           done\n           \n            ## p2 repository\n            #curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=repository.zip --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.p2repository/target/repository/repository.zip\n            ## tla2tools.jar\n            curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=tla2tools.jar --upload-file ${WORKSPACE}/tlatools/org.lamport.tlatools/dist/tla2tools.jar\n            ## macOS\n            curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-macosx.cocoa.x86_64.zip\n            ## win32\n            curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=TLAToolbox-1.7.1-win32.win32.x86_64.zip --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-win32.win32.x86_64.zip\n            ## Linux\n            curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=TLAToolbox-1.7.1-linux.gtk.x86_64.zip --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLAToolbox-1.7.1-linux.gtk.x86_64.zip\n            ## deb\n            #curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=TLAToolbox-1.7.1-linux.gtk.amd64.deb --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/repository/TLAToolbox-1.7.1-linux.gtk.amd64.deb\n            ## RPM\n            #curl -s -X POST -H \"Content-Type: application/zip\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://uploads.github.com/repos/tlaplus/tlaplus/releases/$DRAFT_RELEASE/assets?name=TLAToolbox-1.7.1-linux.gtk.amd64.rpm --upload-file ${WORKSPACE}/toolbox/org.lamport.tla.toolbox.product.product/target/products/TLA\\\\+Toolbox-1.7.1~*.x86_64.rpm\n         '''\n        }\n   }\n}\n\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.447265625,
          "content": "Contributing to TLA⁺\n--------------------\n\nTL;DR: engage maintainers early & often, be surgical in your changes, and write lots of tests.\n\nWe welcome contributions to this open source project!\nBefore beginning work, please take some time to familiarize yourself with our development processes and expectations.\nThe TLA⁺ tools are used to validate safety-critical systems, so maintaining quality is paramount.\nThe existing code can also be quite complicated to modify and it is difficult to review changes effectively.\nSo, there are several practices that are necessary for having a good contribution experience.\nThe last thing anybody wants is for you to feel as though you have wasted your time!\nIf you open a massive pull request (PR) out of nowhere it is **very unlikely to be merged**.\nFollow this guide to ensure your effort is put to the best possible use.\n\nAlways remember that we are all volunteers here.\nBe kind to everybody!\nYou can review our Code of Conduct [here](.github/CODE_OF_CONDUCT.md).\n\nThe Contribution Process & Style\n--------------------------------\n\nThe most important step is to engage with existing developers & maintainers before beginning work.\nThe best way to do this is to comment on an issue you want to fix, or open a new issue if a suitable candidate does not exist.\nIt is also very helpful to join the [monthly online community meeting](https://groups.google.com/g/tlaplus/c/CpAEnrf-DHQ/m/YrORpIfSBwAJ) to introduce yourself and speak with people directly.\nThe development team will help you better understand the scope & difficulty of the proposed changes, along with what parts of the codebase they'll touch and what additional tests are required to safely merge them.\nBuilding & maintaining consensus around these aspects will ensure a smooth review & merge process.\n\nTo begin work on your change, fork this repository then create an appropriately-named branch to track your work.\nYou will eventually submit a PR between your feature branch and the master branch of this repository, at which point developers & maintainers will review your changes.\nAfter integrating this feedback your PR will then hopefully be merged.\n\nWhen creating and submitting your changes, closely follow these guidelines:\n * **Be surgical:** What is the smallest diff you can make that still accomplishes your goal?\n Avoid the urge to fix unrelated stylistic issues in a file you are changing.\n * **Write tests first:** If you're changing a specific part of the codebase, first ensure it has good test coverage; if it does, write a few more tests yourself anyway!\n Writing tests is a great way to learn how the code functions.\n If possible, submit your tests in a separate PR so their benefits can be realized immediately.\n We don't fully subscribe to Test-Driven Development (TDD) but having good existing test coverage of a changed area is a prerequisite to changes being merged.\n * **Split up your changes:** If parts of your changes provide some benefit by themselves - like additional tests - split them into a separate PR.\n It is preferable to have several small PRs merged quickly than one large PR that takes longer to review.\n * **Craft your commits well:** This can require advanced git knowledge (see [DEVELOPING.md](DEVELOPING.md)).\n Treat your commits as forms of communication, not a way to bludgeon the codebase into shape.\n You don't need to check this, but ideally the build & tests should pass on every commit.\n This means you will often be amending commits as you work instead of adding new ones.\n\nWhen you open a PR against this repo, the continuous integration (CI) checks will run.\nThese ensure your changes do not break the build & tests.\nWhile you can run most of these checks locally, if you'd like to run the CI at any time you can open a PR between your feature branch and the master branch of *your own* fork of this repo.\n\nContribution Possibilities\n--------------------------\n\nThese tools have a large number existing issues to fix, which you can see on the repo's [issues tab](https://github.com/tlaplus/tlaplus/issues).\nIn particular, consider looking at issues [tagged with \"help wanted\"](https://github.com/tlaplus/tlaplus/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).\nFor new developers, there are issues [tagged \"good first issue\"](https://github.com/tlaplus/tlaplus/labels/good%20first%20issue).\n\nFor new features, there are a number of [substantial improvements we'd like to see implemented](general/docs/contributions.md).\nIf you have an idea for a new feature, open an issue in this repository to start a discussion.\nFor more fundamental proposals that involve changes to the TLA⁺ language itself, you can [open a RFC](https://github.com/tlaplus/rfcs/issues).\nOften it will be necessary to build community support for your idea; for this you can use the [mailing list](https://groups.google.com/g/tlaplus) and especially the [monthly online community meeting](https://groups.google.com/g/tlaplus/c/CpAEnrf-DHQ/m/YrORpIfSBwAJ).\nExpressions of goodwill like volunteering labor to review pending PRs is also appreciated!\n\nNon-code contributions are also welcome!\nThere is ample work available in expanding developer documentation (like this very document) or user-facing TLA⁺ documentation.\nWe also collect [quality metrics](https://sonarcloud.io/organizations/tlaplus/projects), and the reports indicate several low-hanging fruits to pick.\n\nGetting Started\n---------------\n\nTake the time to set up your local development environment.\nSee [DEVELOPING.md](DEVELOPING.md) for details.\nGood luck, and have fun!\n\n"
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 12.328125,
          "content": "Overview\n--------\nThis file summarizes basic development knowledge & practices for this project.\nYou will learn the repository structure, how to build & test the software it contains from your command line interface (CLI), how to set up your interactive development environment (IDE), and several other tidbits.\nThis project is written entirely in Java.\n\nRepository Layout\n-----------------\nHere is a diagram of the repository layout.\nThere are other files and directories beyond these, but these are the most important:\n```\n/\n├── LICENSE                     # The project license\n├── README.md                   # Basic info about the project\n├── CONTRIBUTING.md             # Info on contributing to the project\n├── DEVELOPING.md               # This document\n├── pom.xml                     # The Maven build system definition file\n├── toolbox/                    # All files related to the TLA⁺ Toolbox IDE\n├── tlatools/\n│   └── org.lamport.tlatools/   # All files related to the TLA⁺ Tools\n│       ├── .classpath          # The Eclipse IDE classpath file\n│       ├── .project            # The Eclipse IDE project file\n│       ├── customBuild.xml     # The Ant build system definition file\n│       ├── pom.xml             # A Maven build file wrapping the Ant file\n│       ├── src/                # The TLA⁺ Tools source code dir\n│       ├── test/               # Unit tests for the TLA⁺ Tools\n│       ├── test-model/         # TLA⁺ modules and models for use in tests\n│       ├── lib/                # Vendored dependencies; checked-in jar files\n│       └── javacc/             # Source files for the TLA⁺ parser generator\n└───.github/\n    ├── CODE_OF_CONDUCT.md      # The code of conduct\n    └── workflows/              # GitHub CI workflow definition files\n        ├── pr.yml              # The CI workflow that validates PRs\n        └── main.yml            # Build & publish master branch to pre-release\n```\n\nBuild & Test TLA⁺ Tools\n----------------------\nInstall the following dependencies to your path:\n * [Java Development Kit](https://adoptium.net/) version 11+\n * [Apache Ant](https://ant.apache.org/) version 1.9.8+\n\nClone this repo & open a shell in its root, then run:\n```bash\ncd tlatools/org.lamport.tlatools\nant -f customBuild.xml info compile compile-test dist # Builds tla2tools.jar\njava -cp dist/tla2tools.jar tlc2.TLC test-model/pcal/Bakery.tla # Runs an example\nant -f customBuild.xml test # Runs unit tests\n```\n\nThe unit tests should all succeed.\nThe compiled `tla2tools.jar` will be output to `tlatools/org.lamport.tlatools/dist/tla2tools.jar`, and can be used the same as any `tla2tools.jar` you download from the releases.\n\nBuild & Test Toolbox IDE\n------------------------\nInstall the following dependencies to your path:\n * [Java Development Kit](https://adoptium.net/) version 11+\n * [Apache Ant](https://ant.apache.org/) version 1.9.8+\n * [Apache Maven](https://maven.apache.org/) version 3.9.7+\n\nClone this repo & open a shell in its root, then run:\n```bash\nmvn install -Dmaven.test.skip=true # Builds Toolbox\nmvn verify # Runs tests\n```\n\nThe Toolbox distributables will be output in the `toolbox/org.lamport.tla.toolbox.product.product/target/products` directory.\n\nDeveloping with the Eclipse IDE\n-------------------------------\nYou are free to use your own editor, but this project is largely developed in the [Eclipse](https://www.eclipse.org/) integrated development environment (IDE).\n\n### Developing the TLA⁺ Tools in Eclipse\n\nDeveloping the TLA⁺ Tools in Eclipse requires the [Eclipse IDE for RCP and RAP Developers](https://www.eclipse.org/downloads/packages/release/2024-06/r/eclipse-ide-rcp-and-rap-developers) edition, or any other edition that comes with the OSGi Plugin Development Extension.\nAfter you have installed Eclipse, use it open the `tlatools/org.lamport.tlatools` project directory.\nYou should then be able to build, run, test, and debug the TLA⁺ Tools.\n\nNote that running build or test operations with Ant can occasionally interfere with Eclipse's build system and cause Eclipse to report nonexistent compilation errors in the UI.\nFor this reason you should run Ant from within Eclipse by opening Window > Show View > Other > Ant > Ant, then adding the `customBuild.xml` file and running selected targets.\nThis will also add the `RunAllTLCTests` target to the external tools runner menu.\n\nIf you ran Ant from your CLI for whatever reason and are encountering issues with nonexistent compilation errors in Eclipse, you can resolve them by right-clicking the project in the Workspace pane then selecting \"Refresh\".\nThis can also be set to refresh automatically in the Eclipse settings; open them by clicking Eclipse > Settings on macOS or Window > Preferences on Linux, then check the box at General > Workspace > \"Refresh using native hooks or polling\".\nNote, however, that enabling this setting may cause compilation failures when running Ant from your CLI while Eclipse is open; you should only enable it if you are running Ant solely from within Eclipse.\nThe setting also helps Eclipse pick up changes as you switch between git branches.\n\n### Developing the Toolbox in Eclipse\n\nFor instructions on how to set up Eclipse to develop the Toolbox IDE, read [this](general/ide/README.md).\n\nUsing Git Effectively\n---------------------\n\nGit was designed to shine in a federated open source development model.\nYou are likely to require use of more of its features than you would in a corporate development environment.\nHere is a brief primer on often-used git functionality when developing for this project.\nIt assumes a basic familiarity with common git operations like clone, commit, push, and pull.\nThere are countless free and paid git guides available online; [here](https://www.git-scm.com/doc) are the docs from the git project itself, and [here](https://wizardzines.com/git-cheat-sheet.pdf) is a useful cheat-sheet from Julia Evans.\n\n### Dealing with multiple remotes\n\nYour first step when developing for this project will be to fork it so you have your own copy to work with under your own GitHub account.\nThen, you will clone that fork to your local development machine.\nHowever, you will also want to occasionally synchronize your fork with the original (which we might call *upstream*).\nFor this you will need to define multiple *remotes* that you can push to and pull from.\nTo list all the remotes defined for your local cloned repo, run:\n```bash\ngit remote\n```\nIf you have a remote named `origin`, you can see the repository it is pointing to with:\n```bash\ngit remote get-url origin\n```\nYou want to have at least two remotes, one pointing to upstream and another pointing to your user fork.\nAdd an `upstream` remote with this command:\n```bash\ngit remote add upstream git@github.com:tlaplus/tlaplus.git\n```\nIf you cloned your repo from your user fork, you can also rename `origin` to `user` or something similarly descriptive as follows:\n```bash\ngit remote rename origin user\n```\nIf you want to get the latest changes from upstream, you can then run:\n```bash\ngit checkout master\ngit pull upstream master\n```\nThen, either merge or rebase on those changes to get them into your local development branches.\n\n### Modifying past commits\n\nWhen you're working with others, you don't want to subject them to your raw git commit history.\nOften you accumulate commits that are only periodic check-ins to avoid losing work instead of logically-contained sets of changes.\nGit's `rebase` command is much-feared but powerful, and you should become very familiar with it.\nIf you are developing a feature in a branch, you can enter rebase mode by running:\n```bash\ngit rebase -i master\n```\nThis will take you to a text editor where you can command git to do all kinds of things with your commits!\nYou can:\n * Reorder them\n * Squash several of them into a single commit\n * Select them to be manually edited/amended\n\nThen, git will run through all your commits sequentially and execute whatever manipulations you indicated.\nSquashing is very useful for combining those periodic check-in commits into something meaningful.\nEditing is useful for responding to PR review comments; most people know about using `git --amend` to apply changes to the latest commit, but using the `rebase` edit option lets you apply changes to commits in the past!\n\n### Splitting up commits and PRs\n\nWhile rebasing, you can also use editing to split a single commit up into multiple commits.\nThis is fairly straightforward when the changes are in different files, but if you want some changes within a single file to go in one commit and some to go in another commit, you can accomplish this interactively with:\n```bash\ngit add --patch <filename>\n```\nSometimes you might want to split your commits across multiple branches so they can be in separate PRs.\nFor this, switch to a new branch then use:\n```bash\ngit cherry-pick <commit hash>\n```\nThis will add the specified commit to the head of your new branch.\nYou can then rebase your original feature branch to remove that commit.\n\n### Developer Certificate of Origin (DCO) sign-off\n\nDue to legal disputes in the mid-2000s, all commits to projects under the Linux Foundation are required to contain a [Developer Certificate of Origin (DCO)](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin) sign-off (note this is different from signing commits with a GPG key).\nThis basically says that you (the developer) were entirely responsible for writing the code in the commit and that you are legally permitted to contribute it under a permissive license (it isn't copied from proprietary code, for example).\nIn git this is easily done by adding an extra `-s` flag as you commit:\n```bash\ngit commit -s -am \"Commit message here\"\n```\nDon't worry too much about forgetting this; the CI will catch it and GitHub provides a page with simple instructions to retroactively add DCO sign-off to past commits.\nEventually adding the `-s` flag will become muscle memory.\n\nRelease Channels\n----------------\n\nNightly builds of the [Toolbox](https://nightly.tlapl.us/products/) and [tla2tools](https://nightly.tlapl.us/dist/) are found at https://nightly.tlapl.us/products/ and https://nightly.tlapl.us/dist/.\nThe Toolbox contains the latest version of tla2tools.jar for command-line usage in its root directory.\n\nIt is also possible to configure the Toolbox to [automatically update to nightly (experimental) builds](https://nightly.tlapl.us/doc/update/update-preferences.html).  \n\nNote that it is called nightly for historical reasons, but builds are actually triggered by commits.\n\n### Linux\n\nFor dpkg-based Linux derivates such as Debian and Ubuntu, you can add the Toolbox's nightly package repository to your source list:\n\n```\n$ cat /etc/apt/sources.list.d/tlaplus.list\ndeb https://nightly.tlapl.us/toolboxUpdate/ ./\n$ curl -fsSL https://tla.msr-inria.inria.fr/jenkins.pub | sudo apt-key add -\n```\n\n### macOS\n\nThe Homebrew community makes the Toolbox's nightly builds available as a [cask](https://github.com/Homebrew/homebrew-cask-versions/blob/master/Casks/tla-plus-toolbox-nightly.rb) through [homebrew versions](https://github.com/Homebrew/homebrew-cask-versions#usage):\n\n```bash\n$ brew tap homebrew/cask-versions\n$ brew install tla-plus-toolbox-nightly\n```\n\nCode Formatting and Style\n-------------------------\n\nTLA⁺ has no strict formatting requirements; focus on substance over style.\nThe source code contains a wide variety of styles, and although that can sometimes be distracting, standardizing on one is not a priority for the project.\n\nThat said, it is worth following a few guiding principles:\n\n 1. Modifications should copy the style of nearby code rather than change it.  This helps keep modifications focused so they are easy to review and [bisect](https://git-scm.com/docs/git-bisect).\n 2. New source files should have a consistent style.\n\nFor new Java code we recommend (but do not require):\n\n - Each `public` class and method should have a javadoc description of its purpose and behavior.\n - Use 4 spaces for indentation.  If you choose to use tabs instead, do not mix tabs and spaces.\n - Put opening curly braces (`{`) on the same line as the corresponding declaration or statement.\n - Include braces for single-statement bodies of statements like `if` and `while`, even though they are optional.\n - Avoid lines longer than 120 characters.\n\nNote that all of the project's Java source files are encoded in UTF-8 and may therefore contain mathematical characters.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1220703125,
          "content": "MIT License\n\nCopyright (c) 199? HP Corporation\nCopyright (c) 2003 Microsoft Corporation\nCopyright (c) 2023 Linux Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.884765625,
          "content": "Overview\n--------\n[![](https://github.com/tlaplus/tlaplus/workflows/CI/badge.svg)](https://github.com/tlaplus/tlaplus/actions?query=workflow%3ACI)\n[![Sonatype Nexus (Snapshots)](https://img.shields.io/nexus/s/org.lamport/tla2tools?server=https%3A%2F%2Foss.sonatype.org)](https://oss.sonatype.org/content/repositories/snapshots/org/lamport/tla2tools/)\n\nThis repository hosts the core TLA⁺ command line interface (CLI) Tools and the Toolbox integrated development environment (IDE).\nIts development is managed by the [TLA⁺ Foundation](https://foundation.tlapl.us/).\nSee http://tlapl.us for more information about TLA⁺ itself.\nFor the TLA⁺ proof manager, see http://proofs.tlapl.us.\n\nVersioned releases can be found on the [Releases](https://github.com/tlaplus/tlaplus/releases) page.\nCurrently, every commit to the master branch is built & uploaded to the [1.8.0 Clarke pre-release](https://github.com/tlaplus/tlaplus/releases/tag/v1.8.0).\nIf you want the latest fixes & features you can use that pre-release.\nIf you want to consume the TLA⁺ tools as a Java dependency in your software project, Maven packages are periodically published to [oss.sonatype.org](https://oss.sonatype.org/content/repositories/snapshots/org/lamport/tla2tools/).\n\nUse\n---\nThe TLA⁺ tools require Java 11+ to run.\nThe `tla2tools.jar` file contains multiple TLA⁺ tools.\nThey can be used as follows:\n```bash\njava -cp tla2tools.jar tla2sany.SANY -help  # The TLA⁺ parser\njava -cp tla2tools.jar tlc2.TLC -help       # The TLA⁺ finite model checker\njava -cp tla2tools.jar tlc2.REPL            # Enter the TLA⁺ REPL\njava -cp tla2tools.jar pcal.trans -help     # The PlusCal-to-TLA⁺ translator\njava -cp tla2tools.jar tla2tex.TLA -help    # The TLA⁺-to-LaTeX translator\n```\nIf you add `tla2tools.jar` to your [`CLASSPATH`](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html) environment variable then you can skip the `-cp tla2tools.jar` parameter.\nRunning `java -jar tla2tools.jar` is aliased to `java -cp tla2tools.jar tlc2.TLC`.\n\nDeveloping & Contributing\n-------------------------\nThe TLA⁺ Tools and Toolbox IDE are both written in Java.\nThe TLA⁺ Tools source code is in [tlatools/org.lamport.tlatools](./tlatools/org.lamport.tlatools).\nThe Toolbox IDE is based on [Eclipse Platform](https://github.com/eclipse-platform) and is in the [toolbox](./toolbox) directory.\nFor instructions on building & testing these as well as setting up a development environment, see [DEVELOPING.md](DEVELOPING.md).\n\nWe welcome your contributions to this open source project!\nTLA⁺ is used in safety-critical systems, so we have a contribution process in place to ensure quality is maintained; read [CONTRIBUTING.md](CONTRIBUTING.md) before beginning work.\n\nLicense & Copyright\n-----------------\nCopyright © 199? HP Corporation  \nCopyright © 2003 Microsoft Corporation  \nCopyright © 2023 Linux Foundation\n\nLicensed under the [MIT License](LICENSE).\n\n"
        },
        {
          "name": "general",
          "type": "tree",
          "content": null
        },
        {
          "name": "keystore",
          "type": "blob",
          "size": 1.150390625,
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 12.8525390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n\txmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>tlatoolbox</groupId>\n\t<artifactId>parent</artifactId>\n\t<name>TLA+ Tools and TLA Toolbox</name>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>pom</packaging>\n\n\t<organization>\n\t\t<name>Microsoft Research Inria Joint Centre</name>\n\t\t<url>http://msr-inria.inria.fr/</url>\n\t</organization>\n\n\t<issueManagement>\n\t\t<system>GitHub</system>\n\t\t<url>https://github.com/tlaplus/tlaplus/issues</url>\n\t</issueManagement>\n\n\t<scm>\n\t\t<connection>scm:git:https://github.com/tlaplus/tlaplus</connection>\n\t\t<developerConnection>scm:git:https://github.com/tlaplus/tlaplus</developerConnection>\n\t\t<tag>HEAD</tag>\n\t</scm>\n\n\t<modules>\n\t\t<!-- non-OSGi jars -->\n\t\t<module>tlatools/org.lamport.tlatools</module>\n\n\t\t<!-- OSGi based multi invocation worker (model check > 1 spec in a single runtime -->\n\t\t<module>tlatools/org.lamport.tlatools.api</module>\n\t\t<module>tlatools/org.lamport.tlatools.impl.distributed</module>\n\t\t<module>tlatools/org.lamport.tlatools.consumer.distributed</module>\n\n\t\t<!-- bundles -->\n\t\t<module>toolbox/org.lamport.tla.toolbox.rss</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.jclouds</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.jnlp</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.doc</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.editor.basic</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.prover</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tla2tex</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tlc</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tlc.ui</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.product.standalone</module>\n\n\t\t<!-- Junit tests -->\n\t\t<module>toolbox/org.lamport.tla.toolbox.test</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tlc.test</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tlc.ui.test</module>\n\n\t\t<!-- SWTBot tests -->\n\t\t<module>toolbox/org.lamport.tla.toolbox.uitest</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tla2tex.uitest</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.tool.tlc.ui.uitest</module>\n\n\t\t<!-- features -->\n\t\t<module>tlatools/org.lamport.tlatools.feature</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.base</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.editor</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.jnlp</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.jclouds</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.help</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.prover</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.tla2tex</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.tlc</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.uitest</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.branding</module>\n\t\t<module>toolbox/org.lamport.tla.toolbox.feature.standalone</module>\n\n\t\t<!-- p2 repository for updates -->\n\t\t<module>toolbox/org.lamport.tla.toolbox.p2repository</module>\n\n\t\t<!-- product related -->\n\t\t<module>toolbox/org.lamport.tla.toolbox.product.product</module>\n\n\t\t<!-- Finally run UI tests on fully built product (AUT) -->\n<!--\t\t<module>toolbox/org.lamport.tla.toolbox.product.uitest</module>-->\n\t</modules>\n\n\t<!-- tycho requires maven >= 3.0 -->\n\t<prerequisites>\n\t\t<maven>3.0</maven>\n\t</prerequisites>\n\n\t<!-- Minimum tycho version build work with -->\n\t<properties>\n\t\t<!-- http://maven.apache.org/general.html#encoding-warning  -->\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n\t\t<!-- https://wiki.eclipse.org/Tycho/Release_Notes/1.4 -->\n\t\t<tycho-version>1.5.1</tycho-version>\n\n\t\t<!-- no default here -->\n\t\t<tycho.test.vm.argline>-Xmx500m -Xdebug -Xrunjdwp:transport=dt_socket,address=1044,server=y,suspend=n</tycho.test.vm.argline>\n\t\t<tycho.test.vm.useUiThread>false</tycho.test.vm.useUiThread>\n\n        <!-- These properties define a dummy certificate store that is used unless the developer passes overwrites to maven -->\n        <!-- see http://stackoverflow.com/a/3620575 for how such an overwrite would look like. -->\n  \t    <keystore.path>${project.basedir}/../../keystore</keystore.path>\n\t    <keystore.alias>msr</keystore.alias>\n        <keystore.store.password>secret</keystore.store.password>\n        <keystore.key.password>secret</keystore.key.password>\n        <!--\n          Set to the values below if the signature should include a timestamp. You want this for a release build\n          because a timestamp makes sure the signature remains valid after the certificate expired.\n          If you activate RFC3161, make sure the machine running the build has sufficient entropy available. Otherwise\n          expect to see intermittent hangs when the build attempts to sign a jar. On Linux the haveged and rng-tools\n          can help to collect entropy.\n          <tsa.flag>-tsa</tsa.flag>\n          <tsa.server>http://timestamp.comodoca.com</tsa.server>\n\t\t -->\n        <tsa.flag></tsa.flag>\n        <tsa.server></tsa.server>\n\n\t\t<!-- Report into the tlaplus organization at SonarQube. -->\n\t\t<!-- Organizations support reporting different branches. -->\n\t\t<sonar.organization>tlaplus</sonar.organization>\n\n\t\t<!-- Align toolbox.version with the version in\n\t\t\t org.lamport.tla.toolbox.product.product.product\n\t\t\t product.version. -->\n\t\t<toolbox.version>1.8.0</toolbox.version>\n\n\t\t<!-- This is used in org.lamport.tla.toolbox.product.uitest but\n\t\t\thas been placed at the top level should it need be referenced\n\t\t\tin other POMs. This property is only referenced during the AUT\n\t\t\tunpacking if it is occurring on mac - the AUT unpacks out of\n\t\t\tthe ZIP ok on Linux and Windows-->\n\t\t<jdk-bundle-plugin-version>14.0.1.7</jdk-bundle-plugin-version>\n\t</properties>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<!-- Fail the build early and with a clear error message if the Java 11\n\t\t\t\tdependency isn't satisfied. https://github.com/tlaplus/tlaplus/issues/278 -->\n\t\t    <plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-enforcer-plugin</artifactId>\n\t\t\t\t<version>3.0.0-M2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>enforce-java</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>enforce</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<rules>\n\t\t\t\t\t\t\t\t<requireJavaVersion>\n\t\t\t\t\t\t\t\t\t<version>11</version>\n\t\t\t\t\t\t\t\t</requireJavaVersion>\n\t\t\t\t\t\t\t</rules>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t    </plugin>\n\t\t\t<!-- enable tycho build extension -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.eclipse.tycho</groupId>\n\t\t\t\t<artifactId>tycho-maven-plugin</artifactId>\n\t\t\t\t<version>${tycho-version}</version>\n\t\t\t\t<extensions>true</extensions>\n\t\t\t</plugin>\n\t\t\t<!-- Compress Toolbox plugins -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.eclipse.tycho.extras</groupId>\n\t\t\t\t<artifactId>tycho-pack200a-plugin</artifactId>\n\t\t\t\t<version>${tycho-version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pack200-pack</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>normalize</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t<groupId>org.eclipse.tycho</groupId>\n\t        \t<artifactId>tycho-compiler-plugin</artifactId>\n\t        \t<version>${tycho-version}</version>\n\t\t\t    <configuration>\n\t\t\t    \t<source>1.7</source>\n\t\t\t    \t<target>1.7</target>\n\t\t\t\t\t<encoding>UTF-8</encoding>\n\t\t\t    </configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t        <groupId>org.eclipse.tycho</groupId>\n\t        \t<artifactId>tycho-packaging-plugin</artifactId>\n\t        \t<version>${tycho-version}</version>\n\t\t\t    <configuration>\n\t\t\t\t    <archive>\n\t\t\t\t    \t<addMavenDescriptor>false</addMavenDescriptor>\n\t\t\t\t    </archive>\n\t\t\t    </configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t    <groupId>org.apache.maven.plugins</groupId>\n\t\t\t    <artifactId>maven-jarsigner-plugin</artifactId>\n\t\t\t    <version>1.4</version>\n\t\t\t        <configuration>\n\t\t\t\t        <keystore>${keystore.path}</keystore>\n\t\t\t\t        <alias>${keystore.alias}</alias>\n\t\t\t\t        <storepass>${keystore.store.password}</storepass>\n\t\t\t\t        <keypass>${keystore.key.password}</keypass>\n\t\t\t           \t<verbose>false</verbose>\n\t\t\t           \t<arguments>\n\t\t\t \t\t\t  <!-- Embed a current timestamp in the signed content (file). With this timestamp,\n\t\t\t\t\t\t\tthe signature of the content remains valid *after* the signing certificate\n\t\t\t\t\t\t\texpired. -->\n\t\t\t              <argument>${tsa.flag}</argument>\n\t\t\t              <argument>${tsa.server}</argument>\n\t\t\t            </arguments>\n\t\t\t        </configuration>\n\t\t\t        <executions>\n\t\t\t            <execution>\n\t\t\t                <id>sign</id>\n\t\t\t                <goals>\n\t\t\t                    <goal>sign</goal>\n\t\t\t                    <goal>verify</goal>\n\t\t\t                </goals>\n\t\t\t            </execution>\n\t\t\t         </executions>\n\t\t\t</plugin>\n\t\t\t<!-- Compress Toolbox plugins -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.eclipse.tycho.extras</groupId>\n\t\t\t\t<artifactId>tycho-pack200b-plugin</artifactId>\n\t\t\t\t<version>${tycho-version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pack200-pack</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>pack</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<!-- Then, alter p2-metadata to make the .pack.gz\n\t\t\tartifact visible from other modules -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.eclipse.tycho</groupId>\n\t\t\t\t<artifactId>tycho-p2-plugin</artifactId>\n\t\t\t\t<version>${tycho-version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>p2-metadata</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>p2-metadata</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t\t<configuration>\n\t\t\t\t\t<defaultP2Metadata>false</defaultP2Metadata>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.eclipse.tycho</groupId>\n\t\t\t\t<artifactId>target-platform-configuration</artifactId>\n\t\t\t\t<version>${tycho-version}</version>\n\t\t\t\t<configuration>\n\t\t\t\t    <!-- Some dependencies such as jline referenced by org.lamport.tlatools   -->\n\t\t\t\t    <!-- cannot be found in the Toolbox's target platform (TLAToolbox.target) -->\n\t\t\t\t    <!-- because the dependencies are not made available in p2 repositories.  -->\n\t\t\t\t    <!-- However, sometimes OSGi-fied dependencies are made available on      -->\n\t\t\t\t    <!-- Maven Central.  'pomDependencies' makes this build look there too.    -->\n\t\t\t\t    <!-- https://wiki.eclipse.org/Tycho/Target_Platform#.22POM_dependencies_consider.22 -->\n                    <pomDependencies>consider</pomDependencies>\n\t\t\t\t\t<!-- recommended: use p2-based target platform resolver -->\n\t\t\t\t\t<resolver>p2</resolver>\n\t\t\t\t\t<ignoreTychoRepositories>true</ignoreTychoRepositories>\n\t\t\t\t\t<!-- Include the pack200 artifacts in the p2 repository. This increases\n\t\t\t\t\t\tthe size of the p2 repository (jars + pack.gz), but reduces the load on the\n\t\t\t\t\t\tserver hosting the repository as clients download the compressed pack.gz files. -->\n\t\t\t\t\t<includePackedArtifacts>true</includePackedArtifacts>\n\t\t\t\t\t<!-- use existing target platform definition -->\n\t\t\t\t\t<target>\n\t\t\t\t\t <artifact>\n\t\t\t\t\t    <groupId>tlatoolbox</groupId>\n\t\t\t\t\t    <artifactId>org.lamport.tla.toolbox.product.product</artifactId>\n\t\t\t\t\t    <version>1.4.0-SNAPSHOT</version>\n\t\t\t\t\t    <classifier>TLAToolbox</classifier>\n\t\t\t\t\t </artifact>\n\t\t\t\t\t</target>\n\n\t\t\t\t\t<!-- Need to specify mininum Java version. This defines what\n\t\t\t\t\t     java.* packages are available during dependency resolution.\n\t\t\t\t\t     Java 1.4, e.g. does not come with \"java.security.sasl\", a\n\t\t\t\t\t     package that is indirectly referenced by the toolbox (indirectly via\n\t\t\t\t\t     org.apache.mina.core).\n\t\t\t\t\t     see http://dev.eclipse.org/mhonarc/lists/cbi-dev/msg00166.html -->\n\t\t \t\t\t<executionEnvironment>JavaSE-11</executionEnvironment>\n\n\t\t\t\t\t<!-- configure the p2 target environments for multi-platform build -->\n\t\t\t\t\t<environments>\n\n\t\t\t\t\t\t<!-- Linux -->\n\t\t\t\t\t\t<environment>\n\t\t\t\t\t\t\t<os>linux</os>\n\t\t\t\t\t\t\t<ws>gtk</ws>\n\t\t\t\t\t\t\t<arch>x86_64</arch>\n\t\t\t\t\t\t</environment>\n\n\t\t\t\t\t\t<!-- Windows -->\n\t\t\t\t\t\t<environment>\n\t\t\t\t\t\t\t<os>win32</os>\n\t\t\t\t\t\t\t<ws>win32</ws>\n\t\t\t\t\t\t\t<arch>x86_64</arch>\n\t\t\t\t\t\t</environment>\n\n\t\t\t\t\t\t<!-- Mac -->\n\t\t\t\t\t\t<environment>\n\t\t\t\t\t\t\t<os>macosx</os>\n\t\t\t\t\t\t\t<ws>cocoa</ws>\n\t\t\t\t\t\t\t<arch>x86_64</arch>\n\t\t\t\t\t\t</environment>\n\n\t\t\t\t\t</environments>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n\t<!-- pass mac specific SWT properties on ...drum roll... mac -->\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>macosx</id>\n\t\t\t<activation>\n\t\t\t\t<property>\n\t\t\t\t\t<name>os.name</name>\n\t\t\t\t\t<value>Mac OS X</value>\n\t\t\t\t</property>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<!-- On Mac OS X, /tmp is a symbolic link pointing to /private/tmp. Thus, make sure unit tests -->\n\t\t\t\t<!-- use the /private/tmp to make path comparison work. -->\n\t\t\t\t<!-- See org.lamport.tla.toolbox.spec.SpecTest.testCreateSpecStoreRelativePath() -->\n\t\t\t\t<tycho.test.vm.argline>-Dosgi.ws=cocoa -Djava.io.tmpdir=/private/tmp/ -XstartOnFirstThread</tycho.test.vm.argline>\n\t\t\t\t<tycho.test.vm.useUiThread>false</tycho.test.vm.useUiThread>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n"
        },
        {
          "name": "tlatools",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolbox",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}