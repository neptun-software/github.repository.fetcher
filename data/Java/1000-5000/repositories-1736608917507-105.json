{
  "metadata": {
    "timestamp": 1736608917507,
    "page": 105,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stleary/JSON-java",
      "stars": 4559,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2109375,
          "content": "# ignore eclipse project files\n.project\n.classpath\n# ignore vscode files\n.vscode\n# ignore Intellij Idea project files\n.idea\n*.iml\n/target/\n\n/bin/\nbuild\n.settings/\n/.gradle/\n/gradle/\n/gradlew\n/gradlew.bat\n.gitmodules\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2744140625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at jsonjava060@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.287109375,
          "content": "# Contribution Guidelines\n\nFeel free to work on any open issue, you don't need to ask permission first. This year, the hacktoberfest label will be added to any PR and associated issue during the month of October.\n\nIf you discover an issue you would like to work on, you can add a new issue to the list. If it meets our criteria, it will be available to work on (if not, it will be closed after review).\n\n# Who is allowed to submit pull requests for this project?\n\nAnyone can submit pull requests for code, tests, or documentation.\n\n# How do you decide which pull requests to accept?\n\n* Does it call out a bug that needs to be fixed? If so, it goes to the top of the list.\n* Does it fix a major user inconvenience? These are given high priority as well.\n* Does it align with the specs? If not, it will probably not be accepted. It turns out there are gray areas in the specs. If this is in a gray area, it will likely be given the benefit of the doubt.\n* Does it break the existing behavior of the lib? If so, it will not be accepted, unless it fixes an egregious bug. This is happening less frequently now.\n\n# For more guidance, see these links:\n\n[README.md (includes build instructions)](https://github.com/stleary/JSON-java#readme)\n\n[FAQ - all your questions answered](https://github.com/stleary/JSON-java/wiki/FAQ)\n"
        },
        {
          "name": "Examples.md",
          "type": "blob",
          "size": 11.5595703125,
          "content": "<h1>Examples</h1>\n<p>Imports used in the examples: </p>\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n```\n\n<p>This document's intention is to explain to new-comers the basics of this project</p>\n\n\t\n<h2>Part 1: Creating a JSON document</h2>\n\n<h3>Using JSONArray</h3>\n\n```java\nprivate static void JSONExampleArray1() {\n\t//We create a JSONObject from a String containing an array using JSONArray\n\t//Firstly, we declare an Array in a String\n\n\tString arrayStr = \n\t\t    \"[\"+\"true,\"+\"false,\"+ \"\\\"true\\\",\"+ \"\\\"false\\\",\"+\"\\\"hello\\\",\"+\"23.45e-4,\"+\n\t\t\t\"\\\"23.45\\\",\"+\"42,\"+\"\\\"43\\\",\"+\"[\"+\"\\\"world\\\"\"+\"],\"+\n\t\t\t\t\"{\"+\n\t\t\t    \"\\\"key1\\\":\\\"value1\\\",\"+\n\t\t\t    \"\\\"key2\\\":\\\"value2\\\",\"+\n\t\t\t    \"\\\"key3\\\":\\\"value3\\\",\"+\n\t\t\t    \"\\\"key4\\\":\\\"value4\\\"\"+\n\t\t\t\"},\"+\n\t\t\t\"0,\"+\"\\\"-1\\\"\"+\n\t\t    \"]\";\n\n\t//Then, we initializate the JSONArray thanks to its constructor\n\n\tJSONArray array = new JSONArray(arrayStr);\n\tSystem.out.println(\"Values array: \"+ array);\n\n\t//We convert that array into a JSONObject, but first, we need the labels, so we need another JSONArray with the labels.\n\t//Here we will use an auxiliary function to get one for the example.\n\n\tJSONArray list = listNumberArray(array.length());\n\tSystem.out.println(\"Label Array: \"+ list.toString());\n\t//Now, we construct the JSONObject using both the  value array and the label array.\n\tJSONObject object = array.toJSONObject(list);\n\tSystem.out.println(\"Final JSONOBject: \" + object);\n}\n\n//This method creates an JSONArray of labels in which those are generated by their positions\n\nprivate static JSONArray listNumberArray(int max){\n\tJSONArray res = new JSONArray();\n\tfor (int i=0; i<max;i++) {\n\t\t//The value of the labels must be an String in order to make it work\n\t\tres.put(String.valueOf(i));\n\t}\n\treturn res;\n}\n```\n```java\nprivate static void JSONExampleArray2() {\n\n\t//We can also create an Array without a String by creating an empty array and adding elements to it\n\n\tJSONArray array = new JSONArray();\n\n\t//Adding elements with .put()\n\n\tarray.put(\"value\");\n\tarray.put(5);\n\tarray.put(-23.45e67);\n\tarray.put(true);\n\n\t//We convert it to JSONObject providing a label arrray like last time\n\n\tJSONArray list = listNumberArray(array.length());\n\tJSONObject object = array.toJSONObject(list);\n\tSystem.out.println(\"Final JSONOBject: \" + object);\n}\n```\n\n<h3>Using JSONStringer</h3>\n\n```java\nprivate static void JSONExampleStringer() {\n\n\t//We initializate the JSONStringer\n\n\tJSONStringer jsonStringer = new JSONStringer();\n\n\t//Now we start the process of adding elements with .object()\n\n\tjsonStringer.object();\n\n\t//We can now add elements as keys and values with .values () and .key()\n\n\tjsonStringer.key(\"trueValue\").value(true);\n\tjsonStringer.key(\"falseValue\").value(false);\n\tjsonStringer.key(\"nullValue\").value(null);\n\tjsonStringer.key(\"stringValue\").value(\"hello world!\");\n\tjsonStringer.key(\"complexStringValue\").value(\"h\\be\\tllo w\\u1234orld!\");\n\tjsonStringer.key(\"intValue\").value(42);\n\tjsonStringer.key(\"doubleValue\").value(-23.45e67);\n\n\t//We end this prcedure with .ednObject\n\n\tjsonStringer.endObject();\n\n\t//Once we have a JSONStringer, we convert it to JSONObject generating a String and using JSONObject's contructor.\n\n\tString str = jsonStringer.toString();\n\tJSONObject jsonObject = new JSONObject(str);\n\n\tSystem.out.println(\"Final JSONOBject: \" + jsonObject);\n}\n```\n<h3>Using JSONObject</h3>\n\n```java\nprivate static void JSONExampleObject1() {\n\n\t//We can create a JSONObject from a String with the class builder\n\n\tString string = \"{\\\"0\\\":\\\"value\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":true}\";\n\tJSONObject example = new JSONObject(string);\n\tSystem.out.println(\"Final JSONObject: \" + example);\n\n}\n```\n```java\nprivate static void JSONExampleObject2() {\n\n\t//We can also create a JSONObject directly without messing around with any of the other functions.\n\n\tJSONObject example = new JSONObject();\n\n\n\t//Now we add the keys and values in a similar way as the Stringer method\n\texample.put(\"key\", \"value\");\n\n\t//As you can see, the first entry is the key and the second would be its associeted value.\n\n\texample.put(\"key2\", 5);\n\texample.put(\"key3\", -23.45e67);\n\texample.put(\"trueValue\", true);\n\n\t//We can't add null values thougth\n\n\t//example.put(\"nullValue\", null); //This is not possible\n\n\t System.out.println(\"Final JSONOBject: \" + example);\n}\n```\n```java\nprivate static void JSONExampleObject3() {\n\n\t//We can also create a JSONObject with a Java Map\n\t//YoU will need a Map whose keys are Strings. The values can be whatever you want\n\n\tMap<String,Double> map = new HashMap<String, Double>();\n\n\tmap.put(\"key1\", 1.0);\n\tmap.put(\"key2\", -23.45e67);\n\n\t//We create the JSONObject with the map with its class builder\n\n\tJSONObject example = new JSONObject(map);\n\t System.out.println(\"Final JSONOBject: \" + example);\n}\n```\n<h3>Using JSONWriter</h3>\n\n```java\nprivate static void JSONExamplWriter() {\n\n\t//This method works in a very similar way to Object  and Stringer in the construction of the JSON.\n\t//The difference is that it needs a Java object called \"Appendable\" like StringBuilder\n\n\tStringBuilder write = new StringBuilder();\n\tJSONWriter jsonWriter = new JSONWriter(write);\n\n\t//We behave now the same way as Stringer\n\n\tjsonWriter.object();\n\n\tjsonWriter.key(\"trueValue\").value(true);\n\tjsonWriter.key(\"falseValue\").value(false);\n\tjsonWriter.key(\"nullValue\").value(null);\n\tjsonWriter.key(\"stringValue\").value(\"hello world!\");\n\tjsonWriter.key(\"complexStringValue\").value(\"h\\be\\tllo w\\u1234orld!\");\n\tjsonWriter.key(\"intValue\").value(42);\n\tjsonWriter.key(\"doubleValue\").value(-23.45e67);\n\n\tjsonWriter.endObject();\n\n\t//The resoult should be in the \"write\" object\n\n\tSystem.out.println(\"JSON: \" + write.toString());\n\n\t//The difference is that we don't get a JSONObject in this one.\n\n\n}\n```\n```java\nprivate static void JSONExampleTokener() {\n\n\t//A partir de una String podemos crear un JSONTokener, que lo podemos usar alternativamente para JSONArray,JSONObject\n\n\tString string = \"this is not a valid JSON string\";\n\tJSONTokener token = new JSONTokener(string);\n\n\t//Now you can use the token in JSONObject and Array the same way as a String\n\n\tJSONObject object = new JSONObject(token);\n\tJSONArray array = new JSONArray(token);\n\n}\n```\t\n<h2>Part 2: Conversion methods</h2>\n<p>We don't need to have a JSON document to work. This project also admits conversions from other type of files.</p>\n<p>Secondly, we can also convert from JSON to those type of files.</p>\n\t\n<h3>Extra: Conversion to JSONArray</h3>\n\n```java\nprivate static void JSONObjectToArray() {\n\t//We start with a JSONObject\n\n\tString string = \"{\\\"0\\\":\\\"value\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":true}\";\n\n\tJSONObject example = new JSONObject(string);\n\n\t//We need a list of key strings like the reverse operation\n\n\tJSONArray keyStrings = listNumberArray(example.length());\n\n\t//Then we convert to the Array using both elelements\n\n\tJSONArray array = example.toJSONArray(keyStrings);\n\n\tSystem.out.println(\"Final JSONArray: \" + array);\n}\n```\n<h3>XML Conversions</h3>\n\n```java\nprivate static void XMLToExampleConversion() {\n\n\t//We start with a JSONObject\n\n\tString string = \"{\\\"0\\\":\\\"value\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":true}\";\n\tJSONObject example = new JSONObject(string);\n\n\t//We obtain a String with XML format with toString()\n\n\tString output = XML.toString(example);\n\tSystem.out.println(\"Final XML: \" + output);\n}\n```\n```java\nprivate static void XMLFromExampleConversion() {\n\n\t//We start with a string with  the XML format\n\n\tString string = \"<0>value</0><1>5</1><2>-2.345E+68</2><3>true</3>\";\n\n\t//We obtain a JSONObject with toJSONOBject()\n\n\tJSONObject output = XML.toJSONObject(string);\n\n\tSystem.out.println(\"Final JSONObject: \" + output);\n}\n```\n<h3>Cookie Conversions</h3>\n\n```java\nprivate static void CookieToExampleConversion() {\n\n\t//We start with a JSONObject\n\t//The JSONOBject needs to entries that gives the cookie a name and gives the field \"name\" a name too.\n\t//The Cokkie format doesn't support booleans\n\n\tString string = \"{\\\"name\\\":\\\"Cookie-Name\\\",\\\"value\\\":\\\"name\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":'true'}\";\n\tJSONObject example = new JSONObject(string);\n\n\t//We obtain a String with Cookie format with toString()\n\n\tString output = Cookie.toString(example);\n\tSystem.out.println(\"Final Cookie: \" + output);\n}\n```\n```java\nprivate static void CookieFromExampleConversion() {\n\n\t//We start with a string with  the Cookie format\n\n\tString string = \"Cookie-Name=name;1=5;2=-2.345E%2b68;3=true\";\n\n\t//We obtain a JSONObject with toJSONOBject()\n\n\tJSONObject output = Cookie.toJSONObject(string);\n\tSystem.out.println(\"Final JSONObject: \" + output);\n}\n```\n\n<h3>HTTP Conversions</h3>\n\n```java\nprivate static void HTTPToExampleConversion() {\n\n\t//We start with a JSONObject\n\t//The JSONObject must have the minimun header for a HTTP request or header\n\n\tString string = \"{\\\"Method\\\":\\\"POST\\\",\\\"Request-URI\\\":'/',\\\"HTTP-Version\\\":'HTTP/1.1',\\\"Value1\\\":true,\\\"Value2\\\":2,\\\"Value3\\\":-2.345E68}\";\n\n\tJSONObject example = new JSONObject(string);\n\n\t//We obtain a String with HTTP format with toString()\n\n\tString output = HTTP.toString(example);\n\tSystem.out.println(\"Final HTTP: \" + output);\n}\n```\n```java\nprivate static void HTTPFromExampleConversion() {\n\n\t//We start with a string with  the HTTP format\n\n\tString string = \"Final HTTP: POST '/' HTTP/1.1 Value3: -2.345E+68 Value1: true Value2: 2\";\n\n\t//We obtain a JSONObject with toJSONOBject()\n\n\tJSONObject output = HTTP.toJSONObject(string);\n\tSystem.out.println(\"Final JSONObject: \" + output);\n}\n```\n<h3>CDL Conversions</h3>\n\n```java\nprivate static void CDLToExampleConversion() {\n\n\t//We start with some JSONObjects with the same values in the keys but different values in the \"values\"\n\n\tString string = \"{\\\"0\\\":\\\"value\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":true}\";\n\tJSONObject example = new JSONObject(string);\n\n\tString string2 = \"{\\\"0\\\":\\\"value2\\\",\\\"1\\\":6,\\\"2\\\":-8.345E68,\\\"3\\\":false}\";\n\tJSONObject example2 = new JSONObject(string2);\n\n\t//We need now a JSONArray with those JSONObjects\n\n\tJSONArray array = new JSONArray();\n\tarray.put(example);\n\tarray.put(example2);\n\n\t//We obtain a String with XML format with toString()\n\n\tString output = CDL.toString(array);\n\tSystem.out.println(\"Final CDL: \\r\\n\" + output);\n}\n```\t\n```java\nprivate static void CDLFromExampleConversion() {\n\n\t//We start wtih a String with the CDL format\n\n\tString string = \"0,1,2,3\\n\"\n\t\t\t+ \"value,5,-2.345E+68,true\\n\"\n\t\t\t+ \"value2,6,-8.345E+68,false\";\n\n\t//We obtain a JSONArray with toJSONOBject()\n\n\tJSONArray output = CDL.toJSONArray(string);\n\tSystem.out.println(\"Final JSONArray: \" + output);\n}\n```\n<h3>Properties Conversions</h3>\n\n```java\nprivate static Properties PropertyToExampleConversion() {\n\n\t//We start with a JSONObject\n\n\tString string = \"{\\\"0\\\":\\\"value\\\",\\\"1\\\":5,\\\"2\\\":-2.345E68,\\\"3\\\":true}\";\n\tJSONObject example = new JSONObject(string);\n\n\t//We obtain a String with Properties format with toString()\n\n\tProperties output = Property.toProperties(example);\n\tSystem.out.println(\"Final Properties: \" + output);\n\n\treturn output;\n}\n```\n```java\nprivate static void PropertyFromExampleConversion() {\n\n\t//We start with a Properties object\n\n\tProperties input = PropertyToExampleConversion();\n\n\t//We obtain a JSONObject with toJSONOBject()\n\n\tJSONObject output = Property.toJSONObject(input);\n\tSystem.out.println(\"Final JSONObject: \" + output);\n}\n```\n <h2>List of all examples methods</h2>\n\n```java\npublic static void main(String[] args) {\n\t//JSONObjectToArray();\n\t//JSONExampleArray1();\n\t//JSONExampleArray2();\n\t//JSONExampleStringer();\n\t//JSONExampleObject1();\n\t//JSONExampleObject2();\n\t//JSONExampleObject3();\n\t//JSONExamplWriter();\n\t//XMLToExampleConversion();\n\t//XMLFromExampleConversion();\n\t//CookieToExampleConversion();\n\t//CookieFromExampleConversion(); \n\t//HTTPToExampleConversion();\n\t//HTTPFromExampleConversion();\n\t//CDLToExampleConversion();\n\t//CDLFromExampleConversion();\n\t//PropertyToExampleConversion();\n\t//PropertyFromExampleConversion();\n}\n```\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.015625,
          "content": "Public Domain.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.568359375,
          "content": "![Json-Java logo](https://github.com/stleary/JSON-java/blob/master/images/JsonJava.png?raw=true)\n\n<sub><sup>image credit: Ismael Pérez Ortiz</sup></sub>\n\n\nJSON in Java [package org.json]\n===============================\n\n[![Maven Central](https://img.shields.io/maven-central/v/org.json/json.svg)](https://mvnrepository.com/artifact/org.json/json)\n[![Java CI with Maven](https://github.com/stleary/JSON-java/actions/workflows/pipeline.yml/badge.svg)](https://github.com/stleary/JSON-java/actions/workflows/pipeline.yml)\n[![CodeQL](https://github.com/stleary/JSON-java/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/stleary/JSON-java/actions/workflows/codeql-analysis.yml)\n\n**[Click here if you just want the latest release jar file.](https://search.maven.org/remotecontent?filepath=org/json/json/20250107/json-20250107.jar)**\n\n\n# Overview\n\n[JSON](http://www.JSON.org/) is a light-weight language-independent data interchange format.\n\nThe JSON-Java package is a reference implementation that demonstrates how to parse JSON documents into Java objects and how to generate new JSON documents from the Java classes.\n\nProject goals include:\n* Reliable and consistent results\n* Adherence to the JSON specification \n* Easy to build, use, and include in other projects\n* No external dependencies\n* Fast execution and low memory footprint\n* Maintain backward compatibility\n* Designed and tested to use on Java versions 1.6 - 21\n\n\nThe files in this package implement JSON encoders and decoders. The package can also convert between JSON and XML, HTTP headers, Cookies, and CDL.\n\n# If you would like to contribute to this project\n\nFor more information on contributions, please see [CONTRIBUTING.md](https://github.com/stleary/JSON-java/blob/master/docs/CONTRIBUTING.md)\n\nBug fixes, code improvements, and unit test coverage changes are welcome! Because this project is currently in the maintenance phase, the kinds of changes that can be accepted are limited. For more information, please read the [FAQ](https://github.com/stleary/JSON-java/wiki/FAQ).\n\n# Build Instructions\n\nThe org.json package can be built from the command line, Maven, and Gradle. The unit tests can be executed from Maven, Gradle, or individually in an IDE e.g. Eclipse.\n \n**Building from the command line**\n\n*Build the class files from the package root directory src/main/java*\n```shell\njavac org/json/*.java\n```\n\n*Create the jar file in the current directory*\n```shell\njar cf json-java.jar org/json/*.class\n```\n\n*Compile a program that uses the jar (see example code below)*\n```shell\njavac -cp .;json-java.jar Test.java (Windows)\njavac -cp .:json-java.jar Test.java (Unix Systems)\n```\n\n*Test file contents*\n\n```java\nimport org.json.JSONObject;\npublic class Test {\n    public static void main(String args[]){\n       JSONObject jo = new JSONObject(\"{ \\\"abc\\\" : \\\"def\\\" }\");\n       System.out.println(jo);\n    }\n}\n```\n\n*Execute the Test file*\n```shell \njava -cp .;json-java.jar Test (Windows)\njava -cp .:json-java.jar Test (Unix Systems)\n```\n\n*Expected output*\n\n```json\n{\"abc\":\"def\"}\n```\n\n \n**Tools to build the package and execute the unit tests**\n\nExecute the test suite with Maven:\n```shell\nmvn clean test\n```\n\nExecute the test suite with Gradlew:\n\n```shell\ngradlew clean build test\n```\n\n# Notes\n\nFor more information, please see [NOTES.md](https://github.com/stleary/JSON-java/blob/master/docs/NOTES.md)\n\n# Files\n\nFor more information on files, please see [FILES.md](https://github.com/stleary/JSON-java/blob/master/docs/FILES.md)\n\n# Release history:\n\nFor the release history, please see [RELEASES.md](https://github.com/stleary/JSON-java/blob/master/docs/RELEASES.md)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2431640625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease follow the instructions in the [\"How are vulnerabilities and exploits handled?\"](https://github.com/stleary/JSON-java/wiki/FAQ#how-are-vulnerabilities-and-exploits-handled) section in the FAQ.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.0166015625,
          "content": "/*\r\n * This file was generated by the Gradle 'init' task.\r\n */\r\napply plugin: 'java'\r\napply plugin: 'eclipse'\r\n// apply plugin: 'jacoco'\r\napply plugin: 'maven-publish'\r\n\r\n//plugins {\r\n    // id 'java'\r\n    //id 'maven-publish'\r\n// }\r\n\r\nrepositories {\r\n    mavenLocal()\r\n    mavenCentral()\r\n    maven {\r\n        url = uri('https://oss.sonatype.org/content/repositories/snapshots')\r\n    }\r\n}\r\n\r\ndependencies {\r\n    testImplementation 'junit:junit:4.13.2'\r\n    testImplementation 'com.jayway.jsonpath:json-path:2.9.0'\r\n    testImplementation 'org.mockito:mockito-core:4.2.0'\r\n}\r\n\r\nsubprojects {\r\n    tasks.withType(Javadoc).all { enabled = false }\r\n}\r\n\r\ngroup = 'org.json'\r\nversion = 'v20250107-SNAPSHOT'\r\ndescription = 'JSON in Java'\r\nsourceCompatibility = '1.8'\r\n\r\nconfigurations.all {\r\n}\r\n\r\njava {\r\n    withSourcesJar()\r\n    withJavadocJar()\r\n}\r\n\r\npublishing {\r\n    publications {\r\n        maven(MavenPublication) {\r\n            from(components.java)\r\n        }\r\n    }\r\n}\r\n\r\ntasks.withType(JavaCompile) {\r\n    options.encoding = 'UTF-8'\r\n}\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.984375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 8.49609375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.json</groupId>\n    <artifactId>json</artifactId>\n    <version>20250107</version>\n    <packaging>bundle</packaging>\n\n    <name>JSON in Java</name>\n    <description>\n        JSON is a light-weight, language independent, data interchange format.\n        See http://www.JSON.org/\n\n        The files in this package implement JSON encoders/decoders in Java.\n        It also includes the capability to convert between JSON and XML, HTTP\n        headers, Cookies, and CDL.\n\n        This is a reference implementation. There are a large number of JSON packages\n        in Java. Perhaps someday the Java community will standardize on one. Until\n        then, choose carefully.\n    </description>\n    <url>https://github.com/douglascrockford/JSON-java</url>\n\n    <scm>\n        <url>https://github.com/douglascrockford/JSON-java.git</url>\n        <connection>scm:git:git://github.com/douglascrockford/JSON-java.git</connection>\n        <developerConnection>scm:git:git@github.com:douglascrockford/JSON-java.git</developerConnection>\n    </scm>\n\n    <licenses>\n        <license>\n            <name>Public Domain</name>\n            <url>https://github.com/stleary/JSON-java/blob/master/LICENSE</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <name>Douglas Crockford</name>\n            <email>douglas@crockford.com</email>\n        </developer>\n    </developers>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n\n    <distributionManagement>\n        <repository>\n            <id>ossrh</id>\n            <name>Central Repository OSSRH</name>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.jayway.jsonpath</groupId>\n            <artifactId>json-path</artifactId>\n            <version>2.9.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>4.2.0</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.felix</groupId>\n                <artifactId>maven-bundle-plugin</artifactId>\n                <version>5.1.9</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <instructions>\n                        <Export-Package>\n                            org.json\n                        </Export-Package>\n                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n                    </instructions>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <compilerArgs>\n                        <arg>-Xlint:unchecked</arg>\n                    </compilerArgs>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.3.0</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.5.0</version>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                        <configuration>\n                            <additionalparam>-Xdoclint:none</additionalparam>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>1.6</version>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                        <configuration>\n                            <gpgArguments>\n                                <arg>--pinentry-mode</arg>\n                                <arg>loopback</arg>\n                            </gpgArguments>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.3</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>false</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.moditect</groupId>\n                <artifactId>moditect-maven-plugin</artifactId>\n                <version>1.0.0.Final</version>\n                <executions>\n                    <execution>\n                        <id>add-module-infos</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>add-module-info</goal>\n                        </goals>\n                        <configuration>\n                            <jvmVersion>9</jvmVersion>\n                            <module>\n                                <moduleInfoSource>\n                                    module org.json {\n                                        exports org.json;\n                                    }\n                                </moduleInfoSource>\n                            </module>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.moditect</groupId>\n                <artifactId>moditect-maven-plugin</artifactId>\n                <version>1.0.0.Final</version>\n                <executions>\n                    <execution>\n                        <id>add-module-infos</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>add-module-info</goal>\n                        </goals>\n                        <configuration>\n                            <jvmVersion>9</jvmVersion>\n                            <module>\n                                <moduleInfoSource>\n                                    module org.json {\n                                    exports org.json;\n                                    }\n                                </moduleInfoSource>\n                            </module>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.3.0</version>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}