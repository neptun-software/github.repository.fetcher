{
  "metadata": {
    "timestamp": 1736609049311,
    "page": 295,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KunMinX/Linkage-RecyclerView",
      "stars": 3650,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1982421875,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/caches\n/.idea/libraries\n/.idea/modules.xml\n/.idea/workspace.xml\n/.idea/navEditor.xml\n/.idea/assetWizardSettings.xml\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4658203125,
          "content": "## 真香警告：即使不用饿了么订餐，也请务必收藏好该库！\n\n## 由来\n\nLinkage-RecyclerView 是一款基于 “MVP 架构(依赖倒置原则)” 开发的二级联动列表控件。它是因 [“RxJava 魔法师”](https://github.com/KunMinX/RxJava2-Operators-Sample) 项目需求而存在。\n\n最初寻遍 GitHub 也未找到合适开源库，于是决定另起炉灶，编写 **高度解耦、轻松配置、可通过 Maven 仓库远程依赖** 的真正第三方库。\n\nLinkage-RecyclerView 个性化配置十分简单，依托于 MVP “配置解耦” 特性，使用者无需研究内部逻辑，仅通过实现 Config 类即可完成功能定制和扩展。\n\n此外，在不设置自定义配置情况下，Linkage-RecyclerView 最少只需 **一行代码即可运行**。\n\n|                       RxJava Magician                        |                         Eleme Linear                         |                          Eleme Grid                          |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n| ![7.gif](https://upload-images.jianshu.io/upload_images/57036-b4d61e70b43a07bb.gif) | ![2.gif](https://upload-images.jianshu.io/upload_images/57036-04b42bddcdd6cf39.gif) | ![3.gif](https://upload-images.jianshu.io/upload_images/57036-ada31ea077f0144d.gif) |\n\n&nbsp;\n\n## 目标\n\nLinkage-RecyclerView 目标是：**一行代码即可接入二级联动列表**。\n\n除一键接入省去 99% 不必要复杂重复工作外，您还可从该项目获得内容包括：\n\n1. 整洁代码风格和标准资源命名规范。\n2. **MVP 架构在编写第三方库的最佳实践：使用者无需了解内部逻辑，简单配置即可使用**。\n3. 优秀代码分层和封装思想，在不做任何个性化配置情况下，一行代码即可接入。\n4. 主体工程基于前沿 Jetpack 组件。\n5. AndroidX 和 Material Design 2 全面使用。\n6. ConstraintLayout 约束布局最佳实践。\n7. 绝不使用 Dagger，绝不使用奇技淫巧、编写艰深晦涩代码。\n\n如果您正考虑 [**如何为项目挑选合适架构**](https://juejin.cn/post/7106042518457810952)，这项目值得你参考！\n\n&nbsp;\n\n## 简单使用：\n\n1.在 build.gradle 添加依赖。\n\n```groovy\nimplementation 'com.kunminx.linkage:linkage-recyclerview:2.7.0'\n```\n\n提示：本库托管于 Maven Central，请自行在根目录 build.gradle 添加 `mavenCentral()`。\n\n2.依据默认分组实体类 `DefaultGroupedItem` 结构准备一串数据。此处以 JSON 为例：\n\n```java\n// DefaultGroupedItem.ItemInfo 包含三个字段：\nString title //（必填）二级选项的标题\nString group //（必填）二级选项所在分组的名称，要和对应的一级选项的标题相同\nString content //（选填）二级选项的内容\n```\n\n```json\n[\n  {\n    \"header\": \"优惠\",\n    \"isHeader\": true\n  },\n  {\n    \"isHeader\": false,\n    \"info\": {\n      \"content\": \"好吃的食物，增肥神器，有求必应\",\n      \"group\": \"优惠\",\n      \"title\": \"全家桶\"\n    }\n  },\n  {\n    \"header\": \"热卖\",\n    \"isHeader\": true\n  },\n  {\n    \"isHeader\": false,\n    \"info\": {\n      \"content\": \"爆款热卖，月销超过 999 件\",\n      \"group\": \"热卖\",\n      \"title\": \"烤全翅\"\n    }\n  }\n]\n```\n\n3.布局中引入 LinkageRecyclerView.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <com.kunminx.linkage.LinkageRecyclerView\n        android:id=\"@+id/linkage\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```\n\n4.得到数据后，最少只需一行代码即可完成初始化。\n\n```java\nlinkage.init(items);\n```\n\n&nbsp;\n\n**温馨提示：**\n\n1.实际开发中，项目数据或与本库数据 “结构上存在差异”，故通常做法是，从后端拿到和解析项目 JSON 数据，并对该数据进行遍历。在遍历过程中，实例化并装载 “本库实体类对象” 到列表中，以获本库所能使用的列表数据。（具体可参见 CustomJsonSampleFragment 示例）\n\n2.注意：如后端直接使用本库实体类读写 JSON 数据，请在 ProGuard Rules 中为该实体类配置混淆白名单：\n\n```java\n-keep class com.kunminx.linkage.bean.** {*;}\n```\n\n&nbsp;\n\n## 更多\n\n更多自定义操作详见 [Wiki 解析](https://github.com/KunMinX/Linkage-RecyclerView/wiki/1.%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8)\n\n&nbsp;\n\n## Thanks to\n\n[material-components-android](https://github.com/material-components/material-components-android)\n\n[AndroidX](https://developer.android.google.cn/jetpack/androidx)\n\n&nbsp;\n\n## My Pages\n\nEmail：[kunminx@gmail.com](mailto:kunminx@gmail.com)\n\nJuejin：[KunMinX 在掘金](https://juejin.cn/post/6882949076267057166)\n\n\n&nbsp;\n\n## License\n\n```\nCopyright 2018-present KunMinX\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.03125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\napply plugin: 'io.codearte.nexus-staging'\n\nbuildscript {\n    ext {\n        appTargetSdk = 31\n        appMinSdk = 20\n        appVersionCode = 20700\n        appVersionName = '2.7.0'\n    }\n\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.2.0'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'\n    }\n\n    tasks.withType(Javadoc) {\n        options.addStringOption('Xdoclint:none', '-quiet')\n        options.addStringOption('encoding', 'UTF-8')\n        options.addStringOption('charSet', 'UTF-8')\n        options.encoding = 'UTF-8'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.240234375,
          "content": "android.databinding.incremental=true\nandroid.enableDesugar=true\nandroid.enableJetifier=true\nandroid.lifecycleProcessor.incremental=true\nandroid.useAndroidX=true\nandroid.injected.testonly=false\norg.gradle.caching=true\norg.gradle.jvmargs=-Xmx2048m\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "linkage-recyclerview",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish-mavencentral.gradle",
          "type": "blob",
          "size": 6.8447265625,
          "content": "apply plugin: 'maven-publish'\napply plugin: 'signing'\n\ntask androidSourcesJar(type: Jar) {\n    archiveClassifier.set('sources')\n    if (project.plugins.findPlugin(\"com.android.library\")) {\n        from android.sourceSets.main.java.srcDirs\n        from android.sourceSets.main.kotlin.srcDirs\n    } else {\n        from sourceSets.main.java.srcDirs\n        from sourceSets.main.kotlin.srcDirs\n    }\n}\n\nartifacts {\n    if (uploadJavadocs) {\n        archives javadocJar\n    }\n    if (uploadSources) {\n        archives sourcesJar\n    }\n}\n\ngroup = PUBLISH_GROUP_ID\nversion = PUBLISH_VERSION\n\n// leave them empty to allow compilation\next[\"signing.keyId\"] = '' // GPG Id\next[\"signing.password\"] = '' // gpg key pass\next[\"signing.secretKeyRingFile\"] = '' // location of key :|\next[\"ossrhUsername\"] = ''\next[\"ossrhPassword\"] = ''\next[\"sonatypeStagingProfileId\"] = ''\n\nFile secretPropsFile = project.rootProject.file('local.properties')\nif (secretPropsFile.exists()) {\n    Properties p = new Properties()\n    p.load(new FileInputStream(secretPropsFile))\n    p.each { name, value ->\n        ext[name] = value\n    }\n} else {\n    ext[\"signing.keyId\"] = System.getenv('SIGNING_KEY_ID')\n    ext[\"signing.password\"] = System.getenv('SIGNING_PASSWORD')\n    ext[\"signing.secretKeyRingFile\"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')\n    ext[\"ossrhUsername\"] = System.getenv('OSSRH_USERNAME')\n    ext[\"ossrhPassword\"] = System.getenv('OSSRH_PASSWORD')\n    ext[\"sonatypeStagingProfileId\"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')\n}\n\npublishing {\n    publications {\n        release(MavenPublication) {\n            groupId group\n            artifactId PUBLISH_ARTIFACT_ID\n            version PUBLISH_VERSION\n            if (project.plugins.findPlugin(\"com.android.library\")) {\n                artifact(\"$buildDir/outputs/aar/${project.getName()}-release.aar\")\n            } else {\n                artifact(\"$buildDir/libs/${project.getName()}-${version}.jar\")\n            }\n\n            pom {\n                name = PUBLISH_ARTIFACT_ID\n                description = ARTIFACT_DESCRIPTION\n                url = POM_URL\n                licenses {\n                    license {\n                        name = LICENSE_NAME\n                        url = LICENSE_URL\n                    }\n                }\n                developers {\n                    developer {\n                        id = POM_DEVELOPER_ID\n                        name = POM_DEVELOPER_NAME\n                        email = POM_DEVELOPER_EMAIL\n                    }\n                }\n                scm {\n                    connection = POM_SCM_CONNECTION\n                    developerConnection = POM_SCM_DEV_CONNECTION\n                    url = POM_SCM_URL\n                }\n                withXml {\n                    final dependenciesNode = asNode().appendNode('dependencies')\n\n                    ext.addDependency = { Dependency dep, String scope ->\n                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == \"unspecified\")\n                            return // invalid dependencies should be ignored\n\n                        final dependencyNode = dependenciesNode.appendNode('dependency')\n                        dependencyNode.appendNode('artifactId', dep.name)\n\n                        if (dep.version == 'unspecified') {\n                            dependencyNode.appendNode('groupId', project.ext.pomGroupID)\n                            dependencyNode.appendNode('version', project.ext.pomVersion)\n                            System.println(\"${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}\")\n                        } else {\n                            dependencyNode.appendNode('groupId', dep.group)\n                            dependencyNode.appendNode('version', dep.version)\n                            System.println(\"${dep.group} ${dep.name} ${dep.version}\")\n                        }\n\n                        dependencyNode.appendNode('scope', scope)\n                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file\n                        def artifactsList = dep.properties['artifacts']\n                        if (artifactsList != null && artifactsList.size() > 0) {\n                            final artifact = artifactsList[0]\n                            dependencyNode.appendNode('type', artifact.getType())\n                        }\n\n                        if (!dep.transitive) {\n                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file\n                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')\n                            exclusionNode.appendNode('groupId', '*')\n                            exclusionNode.appendNode('artifactId', '*')\n                        } else if (!dep.properties.excludeRules.empty) {\n                            // For transitive with exclusions, all exclude rules should be added to the POM file\n                            final exclusions = dependencyNode.appendNode('exclusions')\n                            dep.properties.excludeRules.each { ExcludeRule rule ->\n                                final exclusionNode = exclusions.appendNode('exclusion')\n                                exclusionNode.appendNode('groupId', rule.group ?: '*')\n                                exclusionNode.appendNode('artifactId', rule.module ?: '*')\n                            }\n                        }\n                    }\n\n                    configurations.api.getDependencies().each { dep -> addDependency(dep, \"compile\") }\n                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, \"runtime\") }\n                }\n            }\n        }\n    }\n    repositories {\n        maven {\n            name = \"SonaType\"\n\n            def releasesRepoUrl = \"https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/\"\n            def snapshotsRepoUrl = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\"\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n\n            credentials {\n                username ossrhUsername\n                password ossrhPassword\n            }\n        }\n    }\n}\n\nnexusStaging {\n    packageGroup = PUBLISH_GROUP_ID\n    stagingProfileId = sonatypeStagingProfileId\n    username = ossrhUsername\n    password = ossrhPassword\n    serverUrl = \"https://s01.oss.sonatype.org/service/local/\"\n}\n\nsigning {\n    sign publishing.publications\n}\n\n\ntask assembleAndPublishLocally(dependsOn: ['assembleRelease']) {\n    finalizedBy('publishToMavenLocal')\n}\ntask assembleAndPublish(dependsOn: ['assembleRelease']) {\n    finalizedBy('publish')\n}\n\nconfigure(assembleAndPublishLocally) {\n    group = 'Publishing'\n    description = 'Publish the output locally'\n}\nconfigure(assembleAndPublish) {\n    group = 'Publishing'\n    description = 'Publish the output to mavenCentral'\n}\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0390625,
          "content": "include ':app', ':linkage-recyclerview'\n"
        }
      ]
    }
  ]
}