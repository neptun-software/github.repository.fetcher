{
  "metadata": {
    "timestamp": 1736609152822,
    "page": 452,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "elvishew/xLog",
      "stars": 3180,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buildscript",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "*.iml\n.gradle\n/local.properties\n.idea\n.DS_Store\nbuild\n/captures\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.26171875,
          "content": "language: android\nandroid:\n  components:\n    - tools\n    - platform-tools\n    - build-tools-29.0.3\n    - android-29\n    - extra-android-m2repository\n\njdk:\n  - oraclejdk8\n\nafter_success:\n  - .buildscript/deploy.sh\n\nsudo: false\n\ncache:\n  directories:\n    - $HOME/.gradle"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.322265625,
          "content": "# XLog\n\n![](https://travis-ci.org/elvishew/xLog.svg?branch=master)\n\n[简体中文](https://github.com/elvishew/xLog/blob/master/README_ZH.md)\n\nLightweight and pretty, powerful and flexible logger for android and java, can print the log to Logcat, Console and Files, or anywhere if you like.\n\n## Logcat Output\n\n![](https://github.com/elvishew/XLog/blob/master/images/logcat-output.png)\n\n## Quick Start\n\nDependency\n\n```groovy\nimplementation 'com.elvishew:xlog:1.11.1'\n```\n\nInitialization\n\n```java\nXLog.init(LogLevel.ALL);\n```\n\nLogging\n\n```java\nXLog.d(\"hello xlog\");\n```\n\n## Logging\n\nLog simple message.\n\n```java\nXLog.d(message);\n```\n\nLog a message with throwable, usually use when exception is thrown.\n\n```java\nXLog.e(message, throwable);\n```\n\nFormat string is also supported, so you don't have to append so many strings and variables by `+`.\n\n```java\nXLog.d(\"Hello %s, I am %d\", \"Elvis\", 20);\n```\n\nUnformatted JSON and XML string will be formatted automatically.\n\n```java\nXLog.json(JSON_CONTENT);\nXLog.xml(XML_CONTENT);\n```\n\nAll `Collection`s and `Map`s data are supported.\n\n```java\nXLog.d(array);\nXLog.d(list);\nXLog.d(map);\n```\n\nIf needed, you can also dump `Intent` and `Bundle` object directly.\n\n```java\nXLog.d(intent);\nXLog.d(bundle);\n```\n\nIn fact, you can dump any type of object if you want. You can specify an `ObjectFormatter` for specific type, otherwise `toString()` will be used when converting the object to a string.\n\n```java\nXLog.d(object);\n```\n\nNote: `v/d/i/w/e` are optional, `v` for `VERBOSE`, `d` for `DEBUG`, `i` for `INFO`, `w` for `WARNING` and `e` for `ERROR`.\n\n## Config\n\n`xLog` is very flexible, almost every component is configurable.\n\nWhen initialization, there are a simple way\n\n```java\nXLog.init(LogLevel.ALL);\n```\n\nand advance way.\n\n```java\nLogConfiguration config = new LogConfiguration.Builder()\n    .logLevel(BuildConfig.DEBUG ? LogLevel.ALL             // Specify log level, logs below this level won't be printed, default: LogLevel.ALL\n        : LogLevel.NONE)\n    .tag(\"MY_TAG\")                                         // Specify TAG, default: \"X-LOG\"\n    .enableThreadInfo()                                    // Enable thread info, disabled by default\n    .enableStackTrace(2)                                   // Enable stack trace info with depth 2, disabled by default\n    .enableBorder()                                        // Enable border, disabled by default\n    .jsonFormatter(new MyJsonFormatter())                  // Default: DefaultJsonFormatter\n    .xmlFormatter(new MyXmlFormatter())                    // Default: DefaultXmlFormatter\n    .throwableFormatter(new MyThrowableFormatter())        // Default: DefaultThrowableFormatter\n    .threadFormatter(new MyThreadFormatter())              // Default: DefaultThreadFormatter\n    .stackTraceFormatter(new MyStackTraceFormatter())      // Default: DefaultStackTraceFormatter\n    .borderFormatter(new MyBoardFormatter())               // Default: DefaultBorderFormatter\n    .addObjectFormatter(AnyClass.class,                    // Add formatter for specific class of object\n        new AnyClassObjectFormatter())                     // Use Object.toString() by default\n    .addInterceptor(new BlacklistTagsFilterInterceptor(    // Add blacklist tags filter\n        \"blacklist1\", \"blacklist2\", \"blacklist3\"))\n    .addInterceptor(new MyInterceptor())                   // Add other log interceptor\n    .build();\n\nPrinter androidPrinter = new AndroidPrinter(true);         // Printer that print the log using android.util.Log\nPrinter consolePrinter = new ConsolePrinter();             // Printer that print the log to console using System.out\nPrinter filePrinter = new FilePrinter                      // Printer that print(save) the log to file\n    .Builder(\"<path-to-logs-dir>\")                         // Specify the directory path of log file(s)\n    .fileNameGenerator(new DateFileNameGenerator())        // Default: ChangelessFileNameGenerator(\"log\")\n    .backupStrategy(new NeverBackupStrategy())             // Default: FileSizeBackupStrategy(1024 * 1024)\n    .cleanStrategy(new FileLastModifiedCleanStrategy(MAX_TIME))     // Default: NeverCleanStrategy()\n    .flattener(new MyFlattener())                          // Default: DefaultFlattener\n    .writer(new MyWriter())                                // Default: SimpleWriter\n    .build();\n\nXLog.init(                                                 // Initialize XLog\n    config,                                                // Specify the log configuration, if not specified, will use new LogConfiguration.Builder().build()\n    androidPrinter,                                        // Specify printers, if no printer is specified, AndroidPrinter(for Android)/ConsolePrinter(for java) will be used.\n    consolePrinter,\n    filePrinter);\n```\n\nAfter initialization, a global `Logger` with the global config is created, all logging via `XLog` will pass to this global `Logger`.\n\nBesides, you can create unlimmited number of `Logger` with different configs:\n\n* Base on global `Logger`, change tag to `\"TAG-A\"`.\n\n```java\nLogger logger = XLog.tag(\"TAG-A\")\n                    ... // other overrides\n                    .build();\nlogger.d(\"Message with custom tag\");\n```\n\n* Base on global `Logger`, enable border and thread info.\n\n```java\nLogger logger = XLog.enableBorder()\n                    .enableThread()\n                    ... // other overrides\n                    .build();\nlogger.d(\"Message with thread info and border\");\n```\n\nyou can also log with one-time-use config:\n\n```java\nXLog.tag(\"TAG-A\").d(\"Message with custom tag\");\nXLog.enableBorder().enableThread().d(\"Message with thread info and border\");\n```\n\n## Print to anywhere\n\nWith one logging statement\n\n```java\nXLog.d(\"hello xlog\");\n```\nyou can print the `\"hello xlog\"` to\n\n* Logcat (with `AndroidPrinter`)\n\n* File (with `FilePrinter`)\n\nand anywhere you like.\n\nJust implement the `Printer` interface, and specify it when initializing\n\n```java\nXLog.init(config, printer1, printer2...printerN);\n```\n\nor when creating a non-global `Logger`\n\n```java\nLogger logger = XLog.printer(printer1, printer2...printerN)\n                    .build();\n```\n\nor when one-time-use logging\n\n```java\nXLog.printer(printer1, printer2...printerN).d(\"Message with one-time-use printers\");\n```\n\n## Save logs to file\n\nTo save logs to file, you need to create a `FilePrinter`\n\n```java\nPrinter filePrinter = new FilePrinter                      // Printer that print(save) the log to file\n    .Builder(\"<path-to-logs-dir>\")                         // Specify the directory path of log file(s)\n    .fileNameGenerator(new DateFileNameGenerator())        // Default: ChangelessFileNameGenerator(\"log\")\n    .backupStrategy(new NeverBackupStrategy())             // Default: FileSizeBackupStrategy(1024 * 1024)\n    .cleanStrategy(new FileLastModifiedCleanStrategy(MAX_TIME))     // Default: NeverCleanStrategy()\n    .flattener(new MyFlattener())                          // Default: DefaultFlattener\n    .build();\n```\n\nand add the `FilePrinter` to XLog when initializing\n\n```java\nXLog.init(config, filePrinter);\n```\n\nor when creating an non-global `Logger`\n\n```java\nLogger logger = XLog.printer(filePrinter)\n                    ... // other overrides\n                    .build();\n```\n\nor when one-time-use logging\n\n```java\nXLog.printer(filePrinter).d(\"Message with one-time-use printers\");\n```\n\n### Save third party logs\n\nYou can config `LibCat` after initializing `XLog`.\n\n```java\nLibCat.config(true, filePrinter);\n```\n\nThen, the logs logged by third party modules/libraries(within same app) will be saved to file too.\n\nGo to [LibCat] for more details.\n\n### Custom file name\n\nYou can specify the file name directly, or categorize the logs to different files by some rules.\n\n* Use `ChangelessFileNameGenerator`, you can specify a changeless file name.\n\n```\nlogs-dir\n└──log\n```\n\n* Use `LevelFileNameGenerator`, it will categorize logs by levels automatically.\n\n```\nlogs-dir\n├──VERBOSE\n├──DEBUG\n├──INFO\n├──WARN\n└──ERROR\n```\n\n* Use `DateFileNameGenerator`, it will categorize logs by date automatically.\n\n```\nlogs-dir\n├──2020-01-01\n├──2020-01-02\n├──2020-01-03\n└──2020-01-04\n```\n\n* Implement `FileNameGenerator` directly, make the file name generating rules by yourself.\n\n```\nlogs-dir\n├──2020-01-01-<hash1>.log\n├──2020-01-01-<hash2>.log\n├──2020-01-03-<hash>.log\n└──2020-01-05-<hash>.log\n```\n\nBy default, a `ChangelessFileNameGenerator` with log file name `log` is used.\n\n\n### Custom log format\n\nLog elements(date, time, level and message) should be flattened to a single string before being printed to the file, you need a `Flattener` to do that.\n\nWe have defined a `PatternFlattener`, which may satisfy most of you. All you need to do is just passing a pattern with parameters to the flattener.\n\nSupported parameters:\n\n|Parameter|Represents|\n|:---:|---|\n|{d}|Date in default date format \"yyyy-MM-dd HH:mm:ss.SSS\"|\n|{d format}|Date in specific date format|\n|{l}|Short name of log level. e.g: V/D/I|\n|{L}|Long name of log level. e.g: VERBOSE/DEBUG/INFO|\n|{t}|Tag of log|\n|{m}|Message of log|\n\nImagine there is a log, with `DEBUG` level, `\"my_tag\"` tag and `\"Simple message\"` message, the flattened log would be as below.\n\n|Pattern|Flattened log|\n|:---:|---|\n|{d} {l}/{t}: {m}|2016-11-30 13:00:00.000 D/my_tag: Simple message|\n|{d yyyy-MM-dd HH:mm:ss.SSS} {l}/{t}: {m}|2016-11-30 13:00:00.000 D/my_tag: Simple message|\n|{d yyyy/MM/dd HH:mm:ss} {l}\\|{t}: {m}|2016/11/30 13:00:00 D\\|my_tag: Simple message|\n|{d yy/MM/dd HH:mm:ss} {l}\\|{t}: {m}|16/11/30 13:00:00 D\\|my_tag: Simple message|\n|{d MM/dd HH:mm} {l}-{t}-{m}|11/30 13:00 D-my_tag-Simple message|\n\nIf you don't even want to construct a pattern, `ClassicFlattener` is for you. It is a `PatternFlattener` with a default pattern `{d} {l}/{t}: {m}`.\n\nBy default, `FilePrinter` use a `DefaultFlattener`, which just simply concat the timestamp and message together. You may don't like it, so please remember to specify your own `Flattener`, maybe a `ClassicFlattener`.\n\n### Auto backup\n\nEvery single log file may grow to an unexpected size, a `AbstractBackupStrategy2` allow you to start a new file at some point, and change the old file name with `.bak.n`(n is the backup index) suffix.\n\n```\nlogs-dir\n├──log\n├──log.bak.1\n├──log.bak.2\n├──log.bak.3\n├──...\n└──log.bak.n\n```\n\nIf you don't like the `.bak.n` suffix, you can use `BackupStrategy2` directly to specify the backup file name.\n\nMostly, you just want to start a new file when the log file reach a specified max-size, so `FileSizeBackupStrategy2` is presented for you.\n\nBy default, `FileSizeBackupStrategy(1024*1024)` is used, which will auto backup the log file when it reach a size of 1M. Besides, there will only be one logging file and one backup file in the same time, that means you can save at most only 2M logs.\n\nSo, if you want to save more logs, and more backup files, please use `FileSizeBackupStrategy2` instead, this allow you keeping multiple backup files in the same time.\n\n### Auto clean\n\nIf you use a changeable `FileNameGenerator`, there would be more than one log files in the logs folder, and gets more and more as time goes on. Besides, if you use a backup strategy not limiting the max backup index, that would also make numbers of log files out of control. To prevent running out of disk space, you need a `CleanStrategy`.\n\nTypically, you can use a `FileLastModifiedCleanStrategy`, which will delete log files that have not been modified for a period of time(e.g., a week) during initialization.\n\nBy default, `NeverCleanStrategy` is used, which will never do any cleaning.\n\n### Compress log files\n\nJust call\n\n```java\nLogUtil.compress(\"<path-to-logs-dir>\", \"<path-to-zip-file>\");\n```\n\na zip file will be created and the entire log folder will be compressed and written to it, so you can easily collect the user logs for issue-debug.\n\nNote: the origianl log files will not be deleted.\n\n## Intercept and filter log\n\nBefore each log being printed, you have a chance to modify or filter out the log, by using an `Interceptor`.\n\nWe have already predefined some `Interceptor` for you, e.g. `WhitelistTagsFilterInterceptor` only allows the logs of specified tags to be printed, and `BlacklistTagsFilterInterceptor` is used to filter out(not print) logs of specified tags.\n\nYou can specify multiple `Interceptor`s for a single `Logger`, these `Interceptor`s will be given the opportunity to modify or filter out logs in the order in which they were added. Once a log is filtered out by an `Interceptor`, subsequent `Interceptor`s will no longer get this log.\n\n## Format object\n\nWhen logging an object\n\n```java\nXLog.d(object);\n```\n\nthe `toString` of the object will be called by default.\n\nSometimes, the `toString` implementation of the object is not quite what you want, so you need an `ObjectFormatter` to define how this type of object should be converted to a string when logging.\n\nOn the android platform, we predefine `IntentFormatter` and `BundleFormatter` for `Intent` and `Bundle` class.\n\nYou can implement and add your own `ObjectFormatter` for any class.\n\nPlease note, `ObjectFormatter`s only work when logging an object.\n\n## Similar libraries\n\n* [logger](https://github.com/orhanobut/logger)\n* [KLog](https://github.com/ZhaoKaiQiang/KLog)\n\nCompare with other logger libraries:\n\n* Well documented\n* So flexible that you can easily customize or enhance it\n\n## Compatibility\n\nIn order to be compatible with [Android Log], all the methods of [Android Log] are supported here.\n\nSee the Log class defined in [XLog].\n\n```java\nLog.v(String, String);\nLog.v(String, String, Throwable);\nLog.d(String, String);\nLog.d(String, String, Throwable);\nLog.i(String, String);\nLog.i(String, String, Throwable);\nLog.w(String, String);\nLog.w(String, String, Throwable);\nLog.wtf(String, String);\nLog.wtf(String, String, Throwable);\nLog.e(String, String);\nLog.e(String, String, Throwable);\nLog.println(int, String, String);\nLog.isLoggable(String, int);\nLog.getStackTraceString(Throwable);\n```\n\n### Migration\n\nIf you have a big project using the [Android Log], and it is a hard work to change all usage of [Android Log] to [XLog], then you can use the compatible API, simply replace all 'android.util.Log' to 'com.elvishew.xlog.XLog.Log'.  \n(**For a better performance, you should think about not using the compatible API.**)\n\n#### Linux/Cygwin\n\n```shell\ngrep -rl \"android.util.Log\" <your-source-directory> | xargs sed -i \"s/android.util.Log/com.elvishew.xlog.XLog.Log/g\"\n```\n\n#### Mac\n\n```shell\ngrep -rl \"android.util.Log\" <your-source-directory> | xargs sed -i \"\" \"s/android.util.Log/com.elvishew.xlog.XLog.Log/g\"\n```\n\n#### Android Studio\n\n1. In 'Project' pane, switch to the 'Project Files' tab, then right-click on the your source directory.\n2. In the menu, click the 'Replace in Path...' option.\n3. In the dialog, fill the 'Text to find' with 'android.util.Log', and 'Replace with' with 'com.elvishew.xlog.XLog.Log', and click 'Find'.\n\nOptionally, instead of replacing all 'android.util.Log', you can just use [LibCat] to intercept all logs logged by `android.util.Log` and redirect them to `XLog`'s `Printer`.\n\n## [Issues](https://github.com/elvishew/xLog/issues)\n\nIf you meet any problem when using XLog, or have any suggestion, please feel free to create an issue.  \nBefore creating an issue, please check if there is an existed one.\n\n## Thanks\n\nThanks to [Orhan Obut](https://github.com/orhanobut)'s [logger](https://github.com/orhanobut/logger), it give us many ideas of what a logger can do.\n\nThanks to [Serge Zaitsev](https://github.com/zserge)'s [log](https://github.com/zserge/log), it give us the thought of making `xLog` compatible with [Android Log].\n\n## License\n\n<pre>\nCopyright 2015-2021 Elvis Hew\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>\n\n[Android Log]: http://developer.android.com/reference/android/util/Log.html\n[XLog]: https://github.com/elvishew/xLog/blob/master/xlog/src/main/java/com/elvishew/xlog/XLog.java\n[Logger]: https://github.com/elvishew/xLog/blob/master/xlog/src/main/java/com/elvishew/xlog/Logger.java\n[LibCat]: https://github.com/elvishew/xLog/blob/master/xlog-libcat/README.md\n"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 17.53125,
          "content": "# XLog\n\n![](https://travis-ci.org/elvishew/xLog.svg?branch=master)\n\n[English](https://github.com/elvishew/xLog/blob/master/README.md)\n\n轻量、美观强大、可扩展的 Android 和 Java 日志库，可同时将日志打印在如 Logcat、Console 和文件中。如果你愿意，你可以将日志打印到任何地方。\n\n## Logcat 输出\n\n![](https://github.com/elvishew/XLog/blob/master/images/logcat-output.png)\n\n## 快速开始\n\n依赖\n\n```groovy\nimplementation 'com.elvishew:xlog:1.11.1'\n```\n\n初始化\n\n```java\nXLog.init(LogLevel.ALL);\n```\n\n打印日志\n\n```java\nXLog.d(\"你好 xlog\");\n```\n\n## 打印日志\n\n打印简单消息。\n\n```java\nXLog.d(message);\n```\n\n打印带 `throwable` 的消息，通常用于有异常被抛出时。\n\n```java\nXLog.e(message, throwable);\n```\n\n支持格式化字符串，这样你就不需要去使用 `+` 拼接一大串的字符串和变量。\n\n```java\nXLog.d(\"你好%s，我今年 %d 岁\", \"Elvis\", 20);\n```\n\n未格式化的 JSON 和 XML 字符串会被自动格式化。\n\n```java\nXLog.json(JSON_CONTENT);\nXLog.xml(XML_CONTENT);\n```\n\n支持所有的 `Collection` 和 `Map` 类型的数据。\n\n```java\nXLog.d(array);\nXLog.d(list);\nXLog.d(map);\n```\n\n如需要，你也可以直接打印 `Intent` 和 `Bundle` 对象。\n\n```java\nXLog.d(intent);\nXLog.d(bundle);\n```\n\n事实上，你可以打印任何类型的对象。你甚至可以为不同类型指定不同的 `ObjectFormatter`，如不指定，在对象转换为字符串时，会直接调用对象类型的 `toString()`。\n\n```java\nXLog.d(object);\n```\n\n注意：以上内容中的 `v/d/i/w/e` 是可以相互替换的，`v` 表示 `VERBOSE`，`d` 表示 `DEBUG`，`i` for `INFO`，`w` 表示 `WARNING`，`e` 表示 `ERROR`。\n\n## 配置\n\n`xLog` 具有高度可扩展性，几乎任何一个组件都是可配置的。\n\n当初始化时，可以用最简单的方式，\n\n```java\nXLog.init(LogLevel.ALL);\n```\n\n也可以用高级的方式。\n\n```java\nLogConfiguration config = new LogConfiguration.Builder()\n    .logLevel(BuildConfig.DEBUG ? LogLevel.ALL             // 指定日志级别，低于该级别的日志将不会被打印，默认为 LogLevel.ALL\n        : LogLevel.NONE)\n    .tag(\"MY_TAG\")                                         // 指定 TAG，默认为 \"X-LOG\"\n    .enableThreadInfo()                                    // 允许打印线程信息，默认禁止\n    .enableStackTrace(2)                                   // 允许打印深度为 2 的调用栈信息，默认禁止\n    .enableBorder()                                        // 允许打印日志边框，默认禁止\n    .jsonFormatter(new MyJsonFormatter())                  // 指定 JSON 格式化器，默认为 DefaultJsonFormatter\n    .xmlFormatter(new MyXmlFormatter())                    // 指定 XML 格式化器，默认为 DefaultXmlFormatter\n    .throwableFormatter(new MyThrowableFormatter())        // 指定可抛出异常格式化器，默认为 DefaultThrowableFormatter\n    .threadFormatter(new MyThreadFormatter())              // 指定线程信息格式化器，默认为 DefaultThreadFormatter\n    .stackTraceFormatter(new MyStackTraceFormatter())      // 指定调用栈信息格式化器，默认为 DefaultStackTraceFormatter\n    .borderFormatter(new MyBoardFormatter())               // 指定边框格式化器，默认为 DefaultBorderFormatter\n    .addObjectFormatter(AnyClass.class,                    // 为指定类型添加对象格式化器\n        new AnyClassObjectFormatter())                     // 默认使用 Object.toString()\n    .addInterceptor(new BlacklistTagsFilterInterceptor(    // 添加黑名单 TAG 过滤器\n        \"blacklist1\", \"blacklist2\", \"blacklist3\"))\n    .addInterceptor(new MyInterceptor())                   // 添加一个日志拦截器\n    .build();\n\nPrinter androidPrinter = new AndroidPrinter(true);         // 通过 android.util.Log 打印日志的打印器\nPrinter consolePrinter = new ConsolePrinter();             // 通过 System.out 打印日志到控制台的打印器\nPrinter filePrinter = new FilePrinter                      // 打印日志到文件的打印器\n    .Builder(\"<日志目录全路径>\")                             // 指定保存日志文件的路径\n    .fileNameGenerator(new DateFileNameGenerator())        // 指定日志文件名生成器，默认为 ChangelessFileNameGenerator(\"log\")\n    .backupStrategy(new NeverBackupStrategy())             // 指定日志文件备份策略，默认为 FileSizeBackupStrategy(1024 * 1024)\n    .cleanStrategy(new FileLastModifiedCleanStrategy(MAX_TIME))     // 指定日志文件清除策略，默认为 NeverCleanStrategy()\n    .flattener(new MyFlattener())                          // 指定日志平铺器，默认为 DefaultFlattener\n    .writer(new MyWriter())                                // 指定日志写入器，默认为 SimpleWriter\n    .build();\n\nXLog.init(                                                 // 初始化 XLog\n    config,                                                // 指定日志配置，如果不指定，会默认使用 new LogConfiguration.Builder().build()\n    androidPrinter,                                        // 添加任意多的打印器。如果没有添加任何打印器，会默认使用 AndroidPrinter(Android)/ConsolePrinter(java)\n    consolePrinter,\n    filePrinter);\n```\n\n初始化后，一个拥有全局配置的全局 `Logger` 将被创建，所有对 `XLog` 的打印函数的调用都会被传递到这个全局 `Logger` 来进行打印。\n\n另外，你可以创建不限个数的、不同配置的 `Logger`：\n\n* 基于全局 `Logger`将 TAG 改为 `\"TAG-A\"`。\n\n```java\nLogger logger = XLog.tag(\"TAG-A\")\n                    ... // 其他配置的覆盖\n                    .build();\nlogger.d(\"定制了 TAG 的消息\");\n```\n\n* 基于全局 `Logger`，允许打印日志边框和线程信息。\n\n```java\nLogger logger = XLog.enableBorder()\n                    .enableThread()\n                    ... // 其他配置的覆盖\n                    .build();\nlogger.d(\"带有线程信息和日志边框的消息\");\n```\n\n你还可以使用一次性配置来打印日志。\n\n```java\nXLog.tag(\"TAG-A\").d(\"定制了 TAG 的消息\");\nXLog.enableBorder().enableThread().d(\"带有线程信息和日志边框的消息\");\n```\n\n## 打印到任何地方\n\n只需一句调用\n\n```java\nXLog.d(\"你好 xlog\");\n```\n你就可以将 `\"你好 xlog\"` 打印到\n\n* Logcat（使用 `AndroidPrinter`）\n\n* 文件（使用 `FilePrinter`）\n\n以及任何你想打印到的其他地方。\n\n打印到其他地方，你只需自己实现个 `Printer` 接口，并在初始化过程中指定它\n\n```java\nXLog.init(config, printer1, printer2...printerN);\n```\n\n或者在创建非全局 `Logger` 时指定它\n\n```java\nLogger logger = XLog.printer(printer1, printer2...printerN)\n                    .build();\n```\n\n或者在一次性打印时指定它\n\n```java\nXLog.printer(printer1, printer2...printerN).d(\"用一次性配置打印的消息\");\n```\n\n## 保存日志到文件\n\n要保存日志到文件，你需要创建一个 `FilePrinter`\n\n```java\nPrinter filePrinter = new FilePrinter                      // 打印日志到文件的打印器\n    .Builder(\"<日志目录全路径>\")                             // 指定保存日志文件的路径\n    .fileNameGenerator(new DateFileNameGenerator())        // 指定日志文件名生成器，默认为 ChangelessFileNameGenerator(\"log\")\n    .backupStrategy(new NeverBackupStrategy())             // 指定日志文件备份策略，默认为 FileSizeBackupStrategy(1024 * 1024)\n    .cleanStrategy(new FileLastModifiedCleanStrategy(MAX_TIME))     // 指定日志文件清除策略，默认为 NeverCleanStrategy()\n    .flattener(new MyFlattener())                          // 指定日志平铺器，默认为 DefaultFlattener\n    .build();\n```\n\n并在初始化时添加它\n\n```java\nXLog.init(config, filePrinter);\n```\n\n或者在创建非全局 `Logger` 时添加它\n\n```java\nLogger logger = XLog.printer(filePrinter)\n                    ... // other overrides\n                    .build();\n```\n\n或者在一次性打印时添加它\n\n```java\nXLog.printer(filePrinter).d(\"用一次性配置打印的消息\");\n```\n\n### 保存第三方库打印的日志到文件\n\n你可以在初始化 `XLog` 后配置 `LibCat`。\n\n```java\nLibCat.config(true, filePrinter);\n```\n\n然后，由第三方库/模块（在同一个 app 里）打印的日志也将会被保存到文件中。\n\n点击 [LibCat] 了解更多细节。\n\n### 自定义日志文件名\n\n你可以直接指定一个文件名，也可以根据一些规则将日志保存到不同文件中。\n\n* 使用 `ChangelessFileNameGenerator`，你可以指定一个不变的文件名。\n\n```\n日志目录\n└──log\n```\n\n* 使用 `LevelFileNameGenerator`，根据级别将日志保存到不同文件中。\n\n```\n日志目录\n├──VERBOSE\n├──DEBUG\n├──INFO\n├──WARN\n└──ERROR\n```\n\n* 使用 `DateFileNameGenerator`，根据日期将日志保存到不同文件中。\n\n```\n日志目录\n├──2020-01-01\n├──2020-01-02\n├──2020-01-03\n└──2020-01-04\n```\n\n* 直接实现一个 `FileNameGenerator`，根据自定义的文件名生成规则来保存日志。\n\n```\n日志目录\n├──2020-01-01-<hash1>.log\n├──2020-01-01-<hash2>.log\n├──2020-01-03-<hash>.log\n└──2020-01-05-<hash>.log\n```\n\n默认情况下，会使用 `ChangelessFileNameGenerator` 将日志保存到一个名叫 `log` 的文件中。\n\n### 自定义日志格式\n\n各日志元素（日期，时间，日志级别和消息） 在被保存到日志文件前，需要被“平铺”成一个单独的字符串，你可以使用 `Flattener` 来做这件事。\n\n我们已经定义了一个 `PatternFlattener`，足以满足你的大部分需求。你所需要做的只是，传入一个带参的 `pattern`。\n\n支持的参数：\n\n|参数|含义|\n|:---:|---|\n|{d}|日期时间。使用默认的日期时间格式 \"yyyy-MM-dd HH:mm:ss.SSS\"|\n|{d format}|日期时间。使用自定义的日期时间格式|\n|{l}|日志级别的缩写。例如：V/D/I|\n|{L}|日志级别的全称。例如：VERBOSE/DEBUG/INFO|\n|{t}|日志的 TAG|\n|{m}|日志的消息|\n\n想象有这么一个日志，级别为 `DEBUG`，TAG 为 `\"my_tag\"`，消息为 `\"简单消息\"`，使用不同的 `pattern`，平铺后的日志为：\n\n|Pattern|平铺后的日志|\n|:---:|---|\n|{d} {l}/{t}: {m}|2016-11-30 13:00:00.000 D/my_tag: 简单消息|\n|{d yyyy-MM-dd HH:mm:ss.SSS} {l}/{t}: {m}|2016-11-30 13:00:00.000 D/my_tag: 简单消息|\n|{d yyyy/MM/dd HH:mm:ss} {l}\\|{t}: {m}|2016/11/30 13:00:00 D\\|my_tag: 简单消息|\n|{d yy/MM/dd HH:mm:ss} {l}\\|{t}: {m}|16/11/30 13:00:00 D\\|my_tag: 简单消息|\n|{d MM/dd HH:mm} {l}-{t}-{m}|11/30 13:00 D-my_tag-简单消息|\n\n如果你不想自己指定所谓的 `pattern`，可以使用 `ClassicFlattener`。它实际上是一个使用 `{d} {l}/{t}: {m}` `pattern` 的 `PatternFlattener`。\n\n默认情况下，`FilePrinter` 会使用 `DefaultFlattener`，这个平铺器只会简单地将时间戳和消息连接起来，你应该不会喜欢它，所以你得记得自己指定 `Flattener`，推荐使用 `ClassicFlattener`。\n\n### 自动备份\n\n随着时间推移，日志文件可能会变得很大，大到我们不希望的程度。使用 `AbstractBackupStrategy2` 可以帮助我们在特定条件下创建一个全新的同名日志文件，并继续写入，而旧日志文件会被加上 `.bak.n`（n 是备份序号）的文件名后缀。以上过程即为“日志备份”\n\n```\n日志目录\n├──log\n├──log.bak.1\n├──log.bak.2\n├──log.bak.3\n├──...\n└──log.bak.n\n```\n\n如果你不喜欢 `.bak.n` 后缀，你可以直接使用 `BackupStrategy2` 指定备份文件名。\n\n大部分时候，你只是想在日志文件达到一定大小时，触发备份。 `FileSizeBackupStrategy2` 刚好可以满足这个要求。\n\n默认情况下，`xLog` 会使用 `FileSizeBackupStrategy(1024*1024)`，在日志文件大小达到 1M 时触发备份，且同时最多只会有一个正在写入的文件，以及一个备份文件，这意味着你最多只能保存 2M 的日志。\n\n所以，如果你想要保存更多的日志，以及允许更多的备份数量（而不仅仅是默认的一个），请使用 `FileSizeBackupStrategy2`，它允许多个备份文件同时存在。\n\n### 自动清理\n\n如果你使用会生成可变名字的 `FileNameGenerator`，那日志文件夹里就很可能会有不止一个日志，并且可能会越来越多。此外，如果你还使用了不限数量的备份策略，那也可能会让日志数量失控。为了防止占满磁盘，你需要一个 `CleanStrategy`。\n\n通常，你可以使用 `FileLastModifiedCleanStrategy`，它会在初始化期间自动删掉那些一段时间（如：一周）以来都未被修改的日志文件。\n\n默认情况下，会使用 `NeverCleanStrategy`，它不会做任何自动清理的工作。\n\n### 压缩日志文件\n\n仅需调用\n\n```java\nLogUtil.compress(\"<日志目录全路径>\", \"<要保存的压缩文件全路径>\");\n```\n\n一个 zip 文件将会被创建，整个日志文件夹都将被压缩并被写入其中，这样你可以轻松收集到用户日志用于问题调试。\n\n注意：原始的日志文件不会被删除。\n\n## 拦截和过滤日志\n\n使用 `Interceptor`，在每条日志被打印之前，你都会有一个机会去修改或过滤掉该日志。\n\n你可以使用一些预定义的 `Interceptor`，比如 `WhitelistTagsFilterInterceptor` 只允许带特定 TAG 的日志被打印，`BlacklistTagsFilterInterceptor` 被用来过滤掉带特定 TAG 的日志。\n\n你可以为单个 `Logger` 指定多个 `Interceptor`，这些 `Interceptor` 将会按被添加的顺序依次获得修改或过滤掉日志的机会。当一条日志被某 `Interceptor` 过滤掉，后续的 `Interceptor` 将不再获得处理该日志的机会。\n\n## 格式化任意类型的对象\n\n当我们直接打印对象时\n\n```java\nXLog.d(object);\n```\n\n默认情况下，该对象类型的 `toString` 将会被调用。\n\n有时候，对象类型的 `toString` 实现并不是你想要的，所以你需要 `ObjectFormatter` 来定义这种类型的对象在打印时该如何转化成字符串。\n\n在 Android 平台上，我们为 `Intent` 和 `Bundle` 类型预定义了 `IntentFormatter` 和 `BundleFormatter`。\n\n你可以为任意类型实现和添加你自己的 `ObjectFormatter`。\n\n请注意，`ObjectFormatter` 仅在直接打印一个对象时有效。\n\n## 类似的库\n\n* [logger](https://github.com/orhanobut/logger)\n* [KLog](https://github.com/ZhaoKaiQiang/KLog)\n\n与其他日志库对比：\n\n* 很好的文档化\n* 扩展性强，可轻松实现定制和功能增强\n\n## 兼容性\n\n为了与 [Android Log] 兼容，xLog 支持 [Android Log] 的所有方法。\n\n请看 [XLog] 中定义的 `Log` 类.\n\n```java\nLog.v(String, String);\nLog.v(String, String, Throwable);\nLog.d(String, String);\nLog.d(String, String, Throwable);\nLog.i(String, String);\nLog.i(String, String, Throwable);\nLog.w(String, String);\nLog.w(String, String, Throwable);\nLog.wtf(String, String);\nLog.wtf(String, String, Throwable);\nLog.e(String, String);\nLog.e(String, String, Throwable);\nLog.println(int, String, String);\nLog.isLoggable(String, int);\nLog.getStackTraceString(Throwable);\n```\n\n### 迁移\n\n如果你有一个大型项目正在使用 [Android Log], 并且很难将所有对 [Android Log] 的使用都换成 [XLog]，那么你可以使用兼容 API，简单地把所有 'android.util.Log' 替换成 'com.elvishew.xlog.XLog.Log'。\n(**为了更好的性能，尽量不要使用兼容 API。**)\n\n#### Linux/Cygwin\n\n```shell\ngrep -rl \"android.util.Log\" <your-source-directory> | xargs sed -i \"s/android.util.Log/com.elvishew.xlog.XLog.Log/g\"\n```\n\n#### Mac\n\n```shell\ngrep -rl \"android.util.Log\" <your-source-directory> | xargs sed -i \"\" \"s/android.util.Log/com.elvishew.xlog.XLog.Log/g\"\n```\n\n#### Android Studio\n\n1. 在 'Project' 窗口中，切换到 'Project Files' 标签，然后右键点击你的源码目录。\n2. 在出现的菜单中，点击 'Replace in Path...' 选项。\n3. 在弹出的对话框中，在 'Text to find' 区域填上 'android.util.Log'，'Replace with' 区域填上 'com.elvishew.xlog.XLog.Log' 然后点击 'Find'。\n\n相比替换掉所有 'android.util.Log'，还有另一种方式。你可以使用 [LibCat] 拦截所有通过 `android.util.Log` 打印的日志，将他们重定向到 `XLog` 的 `Printer`。\n\n## [Issues](https://github.com/elvishew/xLog/issues)\n\n如果你在使用过程中遇到任何问题或者有任何建议，请创建一个 Issue。\n在创建 Issue 前，请检查类似 Issue 是否已经存在.\n\n## 第三方详解\n\n* [XLog 详解及源码分析](https://www.jianshu.com/p/15ff181cc2f8)\n\n## QQ 交流互助群\n\n![](https://github.com/elvishew/XLog/blob/master/images/qq_group.jpg)\n\n如果你在阅读完文档后仍有用法上的疑问，可加入此 QQ 群进行提问。进群答案为 `elvishew`\n\n## License\n\n<pre>\nCopyright 2015-2021 Elvis Hew\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>\n\n[Android Log]: http://developer.android.com/reference/android/util/Log.html\n[XLog]: https://github.com/elvishew/xLog/blob/master/xlog/src/main/java/com/elvishew/xlog/XLog.java\n[Logger]: https://github.com/elvishew/xLog/blob/master/xlog/src/main/java/com/elvishew/xlog/Logger.java\n[LibCat]: https://github.com/elvishew/xLog/blob/master/xlog-libcat/README_ZH.md\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.51953125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.0.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.2978515625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\nGROUP=com.elvishew\n\nPOM_URL=https://github.com/elvishew/XLog\nPOM_SCM_URL=https://github.com/elvishew/XLog\nPOM_SCM_CONNECTION=scm:git@github.com:elvishew/XLog.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:elvishew/XLog.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=elvishew\nPOM_DEVELOPER_NAME=Elvis Hew\n\nandroid.useAndroidX=true\nandroid.enableJetifier=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven-push.gradle",
          "type": "blob",
          "size": 3.90625,
          "content": "/*\n * Copyright 2013 Chris Banes\n * Copyright 2021 Elvis Hew\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\napply plugin: 'maven'\napply plugin: 'signing'\n\ndef isReleaseBuild() {\n    return VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : \"\"\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : \"\"\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                repository(url: getReleaseRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n                snapshotRepository(url: getSnapshotRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    task androidJavadocs(type: Javadoc) {\n        source = android.sourceSets.main.java.srcDirs\n        android.libraryVariants.all { variant ->\n            if (variant.name == 'release') {\n                owner.classpath += variant.javaCompiler.classpath\n                if (JavaVersion.current().isJava8Compatible()) {\n                    options.addStringOption('Xdoclint:none', '-quiet')\n                }\n            }\n        }\n        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    }\n\n    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {\n        classifier = 'javadoc'\n        from androidJavadocs.destinationDir\n    }\n\n    task androidSourcesJar(type: Jar) {\n        classifier = 'sources'\n        from android.sourceSets.main.java.sourceFiles\n    }\n\n    artifacts {\n        archives androidSourcesJar\n        archives androidJavadocsJar\n    }\n}"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.046875,
          "content": "include ':xlog', ':xlog-libcat', ':xlog-sample'\n"
        },
        {
          "name": "xlog-libcat",
          "type": "tree",
          "content": null
        },
        {
          "name": "xlog-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "xlog",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}