{
  "metadata": {
    "timestamp": 1736609026149,
    "page": 258,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wendux/DSBridge-Android",
      "stars": 3796,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.48828125,
          "content": "language: android\njdk: oraclejdk8\nandroid:\n  components:\n    - platform-tools\n    - tools\n\n    # The BuildTools version used by your project\n    - build-tools-25.0.0\n\n\n    # The SDK version used to compile your project\n    - android-23\n\n    # Support library\n    - extra-android-support\n    - extra-android-m2repository\n    - sys-img-x86_64-android-22\n  licenses:\n    - 'android-sdk-preview-license-52d11cd2'\n    - 'android-sdk-license-.+'\n    - 'google-gdk-license-.+'\n\nscript:\n  - ./gradlew build\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.484375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.2'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "changelist.md",
          "type": "blob",
          "size": 2.0205078125,
          "content": "# DSBridge v3.0 change list\n\nDSBridge v3.0 is a milestone, Compared with v2.0.X, we have made a lot of changes. Note that V3.0 is **incompatible** with V2.0, but v2.0 will continue to maintain. If you are a new user, use >=v3.0\n\n#### In Java\n\n1. **Deprecated**：~~setJavascriptInterface~~ , use `addJavascriptObject` instead.\n\n2. **Deprecated**：~~setJavascriptContextInitedListener~~ ,`callHandler` can be called at any time.\n\n3. **Deprecated**：~~DUIWebView~~ , `UIWebView` will not be supported ever.\n\n4. **New**: `addJavascriptObject:(id) object namespace:(NSString *) namespace`  \n\n5. **New**: `removeJavascriptObject:NSString * namespace`\n\n6. **New**: `disableJavascriptDialogBlock:(bool) disable`\n\n7. **New**: `hasJavascriptMethod:(NSString *) handlerName methodExistCallback:(void(^ )(bool exist))callback`\n\n8. **New**: ` setJavascriptCloseWindowListener:(void(^)(void))callback`\n\n9. **New**: `setDebugMode:(bool) debug`\n\n10. **New feature**: Support  namespace\n\n11. **New feature**: Can add multiple  API object\n\n12. **Changed**: Object-c API signature changed\n\n13. **Changed**: `callHandler` can be called at any time.\n\n    ​\n\n\n#### In Javascript\n\n1. **New**: `hasNativeMethod(handlerName,[type])`\n2. **New**: `disableJavascriptDialogBlock(disable)`\n3. **New**: `registerAsyn(methodName|namespace,function|asyApiObject)`\n4. **Changed**: `register(methodName|namespace,function|synApiObject)`\n5. **New feature**: Support  namespace\n\n# Why Only Support WKWebView?\n\n### Advantages of WKWebView\n\nIt is well known that **WKWebView loads web pages faster and more efficiently than UIWebView**, and also **doesn't have as much memory overhead** for you.\n\nUnder the current timeline, most iOS apps only support iOS 9.0+.\n\n### UIWebView Cross-Domain Access Vulnerability\n\nThe reason for the iOS platform cross-domain access vulnerability is due to UIWebView turning on the WebKitAllowUniversalAccessFromFileURLs and WebKitAllowFileAccessFromFileURLs options.\n\n**WKWebView default allowFileAccessFromFileURLs and allowUniversalAccessFromFileURLs option is false.**"
        },
        {
          "name": "dsbridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "readme-chs.md",
          "type": "blob",
          "size": 16.8134765625,
          "content": "# DSBridge for Android\n\n![dsBridge](https://github.com/wendux/DSBridge-IOS/raw/master/img/dsbridge.png)\n\n[![](https://jitpack.io/v/wendux/DSBridge-Android.svg)](https://jitpack.io/#wendux/DSBridge-Android)\n![language](https://img.shields.io/badge/language-Java-yellow.svg)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/mit-license.php)\n[![](https://travis-ci.org/wendux/DSBridge-Android.svg?branch=master)](https://travis-ci.org/wendux/DSBridge-Android)\n[![GitHub last commit](https://img.shields.io/github/last-commit/wendux/DSBridge-Android.svg?color=blue)](https://github.com/wendux/DSBridge-Android/tree/master)\n![](https://img.shields.io/badge/minSdkVersion-11-yellow.svg)\n[![x5](https://img.shields.io/badge/support%20x5-yes-blue.svg)](https://github.com/wendux/DSBridge-Android/tree/x5-3.0)\n\n> 三端易用的现代跨平台 Javascript bridge， 通过它，你可以在Javascript和原生之间同步或异步的调用彼此的函数.\n\n\n### 注意\n\nDSBridge v3.0 是一个里程碑版本，和v2.0相比，有许多变化，需要注意的是v3.0**不兼容**之前版本，但是我们也会继续维护v2.0分支，所以，如果你是v2.0的使用者，请放心继续使用v2.0，如果你是新用户，请使用>=v3.0.\n\n[DSBridge v3.0.0 更新列表](https://github.com/wendux/DSBridge-Android/issues/31)  \n腾讯X5内核支持：https://github.com/wendux/DSBridge-Android/tree/x5-3.0\n\n\n## 特性\n\n1. Android、IOS、Javascript 三端易用，轻量且强大、安全且健壮。\n\n2. 同时支持同步调用和异步调用\n\n3. 支持以类的方式集中统一管理API\n\n4. 支持API命名空间\n\n5. 支持调试模式\n\n6. 支持API存在性检测\n\n7. 支持进度回调：一次调用，多次返回\n\n8. 支持Javascript关闭页面事件回调\n\n9. 支持Javascript 模态/非模态对话框\n\n10. 支持腾讯X5内核\n\n  ​\n\n## 安装\n\n1. 添加 JitPack repository 到gradle脚本中\n\n   ```groovy\n   allprojects {\n     repositories {\n      ...\n      maven { url 'https://jitpack.io' }\n     }\n   }\n   ```\n\n2. 添加依赖\n\n   ```groovy\n   dependencies {\n   \t//compile 'com.github.wendux:DSBridge-Android:3.0-SNAPSHOT'\n   \t//support the x5 browser core of tencent\n   \t//compile 'com.github.wendux:DSBridge-Android:x5-3.0-SNAPSHOT'\n   }\n   ```\n\n## 示例\n\n请参考工程目录下的 `wendu.jsbdemo/` 包。运行 `app` 工程并查看示例交互。\n\n如果要在你自己的项目中使用 dsBridge :\n\n## 使用\n\n1.  新建一个Java类，实现API\n\n   ```java\n   public class JsApi{\n       //同步API\n       @JavascriptInterface\n       public String testSyn(Object msg)  {\n           return msg + \"［syn call］\";\n       }\n\n       //异步API\n       @JavascriptInterface\n       public void testAsyn(Object msg, CompletionHandler<String> handler) {\n           handler.complete(msg+\" [ asyn call]\");\n       }\n   }\n   ```\n\n   可以看到，DSBridge正式通过类的方式集中、统一地管理API。由于安全原因，所有Java API 必须有\"@JavascriptInterface\" 标注。\n\n2. 添加API类实例到 DWebView .\n\n   ```javascript\n   import wendu.dsbridge.DWebView\n   ...\n   DWebView dwebView= (DWebView) findViewById(R.id.dwebview);\n   dwebView.addJavascriptObject(new JsApi(), null);\n   ```\n\n3. 在Javascript中调用原生 (Java/Object-c/swift) API ,并注册一个 javascript API供原生调用.\n\n   - 初始化 dsBridge\n\n     ```javascript\n     //cdn方式引入初始化代码(中国地区慢，建议下载到本地工程)\n     //<script src=\"https://unpkg.com/dsbridge@3.1.3/dist/dsbridge.js\"> </script>\n     //npm方式安装初始化代码\n     //npm install dsbridge@3.1.3\n     var dsBridge=require(\"dsbridge\")\n     ```\n\n   - 调用原生API ,并注册一个 javascript API供原生调用.\n\n     ```javascript\n\n     //同步调用\n     var str=dsBridge.call(\"testSyn\",\"testSyn\");\n\n     //异步调用\n     dsBridge.call(\"testAsyn\",\"testAsyn\", function (v) {\n       alert(v);\n     })\n\n     //注册 javascript API \n      dsBridge.register('addValue',function(l,r){\n          return l+r;\n      })\n     ```\n\n4. 在Java中调用 Javascript API \n\n   ```java\n   dwebView.callHandler(\"addValue\",new Object[]{3,4},new OnReturnValue<Integer>(){\n        @Override\n        public void onValue(Integer retValue) {\n           Log.d(\"jsbridge\",\"call succeed,return value is \"+retValue);\n        }\n   });\n   ```\n\n\n\n\n## Java API 签名\n\n为了兼容IOS，我们约定 Java API 签名，**注意，如果API签名不合法，则不会被调用**！签名如下：\n\n1. 同步API.\n\n   **` public any handler(Object msg) `**\n\n   参数必须是 `Object` 类型，**并且必须申明**（如果不需要参数，申明后不适用即可）。返回值类型没有限制，可以是任意类型。\n\n2. 异步 API.\n\n   **`public void handler(Object arg, CompletionHandler handler)`**\n\n\n\n## 命名空间\n\n命名空间可以帮助你更好的管理API，这在API数量多的时候非常实用，比如在混合应用中。DSBridge (>= v3.0.0) 支持你通过命名空间将API分类管理，并且命名空间支持多级的，不同级之间只需用'.' 分隔即可。\n\n\n\n## 调试模式\n\n在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式，可以通过如下代码开启调试模式\n\n```java\nDWebView.setWebContentsDebuggingEnabled(true)\n```\n\n\n\n## 进度回调\n\n通常情况下，调用一个方法结束后会返回一个结果，是一一对应的。但是有时会遇到一次调用需要多次返回的场景，比如在javascript钟调用端上的一个下载文件功能，端上在下载过程中会多次通知javascript进度, 然后javascript将进度信息展示在h5页面上，这是一个典型的一次调用，多次返回的场景，如果使用其它Javascript bridge,  你将会发现要实现这个功能会比较麻烦，而DSBridge本省支持进度回调，你可以非常简单方便的实现一次调用需要多次返回的场景，下面我们实现一个倒计时的例子：\n\nIn Java \n\n```java\n@JavascriptInterface\npublic void callProgress(Object args, final CompletionHandler<Integer> handler) {\n    new CountDownTimer(11000, 1000) {\n        int i=10;\n        @Override\n        public void onTick(long millisUntilFinished) {\n            //setProgressData can be called many times util complete be called.\n            handler.setProgressData((i--));\n        }\n        @Override\n        public void onFinish() {\n           //complete the js invocation with data; \n           //handler will invalid when complete is called\n            handler.complete(0);\n        }\n    }.start();\n}\n```\n\nIn Javascript\n\n```javascript\ndsBridge.call(\"callProgress\", function (value) {\n    document.getElementById(\"progress\").innerText = value\n})\n```\n\n完整的示例代码请参考demo工程。\n\n\n\n## Javascript 弹出框\n\nDSBridge已经实现了 Javascript的弹出框函数(alert/confirm/prompt)，如果你想自定义它们，通过`WebChromeClient`重写相关函数即可。DSBridge实现的对话框默认设置是模态的，这会挂起UI线程，如果你需要非模态对话框，请参考`dwebview.disableJavascriptDialogBlock(bool disable)` 。\n\n\n\n## 安全\n\n在Android 4.2(API17)之前 `webview.addJavascriptInterface` 存在安全漏洞，DSBridge内部在4.2以下的设备上不会使用` webview.addJavascriptInterface`，而是通过其它方式通信，在4.2之后会使用 `webview.addJavascriptInterface` 。同时，为了防止Javascript调用未授权的原生函数，所有Java API 必须有\"@JavascriptInterface\" 标注，所以在任何版本的Android系统下，您可以放心使用DSBridge！\n\n\n\n## DWebView\n\nDWebView中，如果在非主线程调用下列方法时，它们内部会自动分发到主线程中执行，你再也无需手动切换。\n\n```java\nvoid loadUrl( String url) \nvoid loadUrl( String url, Map<String, String> additionalHttpHeaders)\nvoid evaluateJavascript(String script) \n```\n\n\n\n## API 列表\n\n### Java API\n\n在Java中我们把实现了供 javascript调用的 API类的实例 成为 **Java API object**.\n\n##### `dwebview.addJavascriptObject(Object object, String namespace)`\n\n添加一个Java API object到DWebView ，并为它指定一个命名空间。然后，在 javascript 中就可以通过`bridge.call(\"namespace.api\",...)`来调用Java API object中的原生API了。\n\n如果命名空间是空(null或空字符串）, 那么这个添加的  Java API object就没有命名空间。在 javascript 通过 `bridge.call(\"api\",...)`调用。\n\n**示例**:\n\nIn Java\n\n```javascript\npublic class JsEchoApi {\n    @JavascriptInterface\n    public Object syn(Object args) throws JSONException {\n        return  args;\n    }\n\n    @JavascriptInterface\n    public void asyn(Object args,CompletionHandler handler){\n        handler.complete(args);\n    }\n}\n//namespace is \"echo\"\ndwebView.addJavascriptObject(new JsEchoApi(),\"echo\");\n```\n\nIn Javascript\n\n```javascript\n// call echo.syn\nvar ret=dsBridge.call(\"echo.syn\",{msg:\" I am echoSyn call\", tag:1})\nalert(JSON.stringify(ret))  \n// call echo.asyn\ndsBridge.call(\"echo.asyn\",{msg:\" I am echoAsyn call\",tag:2},function (ret) {\n      alert(JSON.stringify(ret));\n})\n```\n\n\n\n##### `dwebview.removeJavascriptObject(String namespace)`\n\n通过命名空间名称移除相应的Java API object 。\n\n\n\n##### `dwebview.callHandler(String handlerName, Object[] args)`\n\n##### `dwebview.callHandler(String handlerName, OnReturnValue handler)`\n\n##### `dwebview.callHandler(String handlerName, Object[] args,OnReturnValue handler)`\n\n调用 javascript API。`handlerName`  为javascript API 的名称，可以包含命名空间；参数以数组传递，`args`数组中的元素依次对应javascript API的形参； `handler` 用于接收javascript API的返回值，**注意：handler将在主线程中被执行**。\n\n示例:\n\n```java\n\ndWebView.callHandler(\"append\",new Object[]{\"I\",\"love\",\"you\"},new OnReturnValue<String>((){\n    @Override\n    public void onValue(String retValue) {\n        Log.d(\"jsbridge\",\"call succeed, append string is: \"+retValue);\n    }\n});\n// call with namespace 'syn', More details to see the Demo project                    \ndWebView.callHandler(\"syn.getInfo\", new OnReturnValue<JSONObject>() {\n    @Override\n    public void onValue(JSONObject retValue) {\n      showToast(retValue);\n    }\n});\n```\n\n\n\n##### `dwebview.disableJavascriptDialogBlock(bool disable)`\n\n**小心使用**. 如果你在javascript中调用弹窗函数(`alert`,` confirm`, 或 `prompt`)， 那么APP将会挂起，因为这些弹窗都是**模态**的，会阻塞APP主线程，此时javascript执行流也会阻塞。如果你想避免阻塞，可以通过此API禁止，禁止后，一旦 javascript中调用了这些弹窗函数，APP将弹出**非模态**对话框，并立即返回，(  `confirm` 会返回 `true`,  `prompt` 返回空字符串)。\n\n禁止Javascript对话框阻塞:\n\n```javascript\ndwebview.disableJavascriptDialogBlock(true);\n```\n\n如果你想恢复**模态**对话框，传 `false` 调用即可.\n\n\n\n##### `dwebview.setJavascriptCloseWindowListener(JavascriptCloseWindowListener listener)`\n\n当 Javascript中调用`window.close`时，DWebView会触发此监听器，如果未设置，DWebView默认会关闭掉当前Activity. \n\nExample:\n\n```java\ndwebview.setJavascriptCloseWindowListener(new DWebView.JavascriptCloseWindowListener() {\n    @Override\n    public boolean onClose() {\n        Log.d(\"jsbridge\",\"window.close is called in Javascript\");\n        //如果返回false,则阻止DWebView默认处理. \n        return false;\n    }\n});\n```\n\n\n\n##### `dwebview.hasJavascriptMethod(String handlerName, OnReturnValue<Boolean> existCallback)`\n\n检测是否存在指定的 javascript API，`handlerName`可以包含命名空间. \n\n示例:\n\n```java\n dWebView.hasJavascriptMethod(\"addValue\", new OnReturnValue<Boolean>() {\n    @Override\n    public void onValue(Boolean retValue) {\n     showToast(retValue);\n    }\n });\n```\n\n\n\n##### `DWebView.setWebContentsDebuggingEnabled(boolean enabled)`\n\n设置调试模式。在调试模式时，发生一些错误时，将会以弹窗形式提示，并且原生API如果触发异常将不会被自动捕获，因为在调试阶段应该将问题暴露出来。如果调试模式关闭，错误将不会弹窗，并且会自动捕获API触发的异常，防止crash。强烈建议在开发阶段开启调试模式。\n\n\n\n### Javascript API\n\n##### dsBridge \n\n\"dsBridge\" 在初始化之后可用 .\n\n##### `dsBridge.call(method,[arg,callback])`\n\n同步或异步的调用Java API。\n\n`method`: Java API 名称， 可以包含命名空间。\n\n`arg`:传递给Java API 的参数。只能传一个，如果需要多个参数时，可以合并成一个json对象参数。\n\n`callback(String returnValue)`: 处理Java API的返回结果. 可选参数，**只有异步调用时才需要提供**.\n\n\n\n##### `dsBridge.register(methodName|namespace,function|synApiObject)`\n\n##### `dsBridge.registerAsyn(methodName|namespace,function|asynApiObject)`\n\n注册同步/异步的Javascript API. 这两个方法都有两种调用形式：\n\n1. 注册一个普通的方法，如:\n\n   In Javascript\n\n   ```javascript\n   dsBridge.register('addValue',function(l,r){\n        return l+r;\n   })\n   dsBridge.registerAsyn('append',function(arg1,arg2,arg3,responseCallback){\n        responseCallback(arg1+\" \"+arg2+\" \"+arg3);\n   })\n   ```\n\n   In Java\n\n   ```java\n   webView.callHandler(\"addValue\",new Object[]{1,6},new OnReturnValue<String>(){\n     @Override\n     public void onValue(String retValue) {\n       Log.d(\"jsbridge\",\"call succeed,return value is: \"+retValue);\n     }\n   });\n\n   webView.callHandler(\"append\",new Object[]{\"I\",\"love\",\"you\"},new OnReturnValue<String>(){\n      @Override\n      public void onValue(String retValue) {\n        Log.d(\"jsbridge\",\"call succeed, append string is: \"+retValue);\n      }\n   });\n   ```\n\n   ​\n\n2. 注册一个对象，指定一个命名空间:\n\n   **In Javascript**\n\n   ```javascript\n   //namespace test for synchronous calls\n   dsBridge.register(\"test\",{\n     tag:\"test\",\n     test1:function(){\n   \treturn this.tag+\"1\"\n     },\n     test2:function(){\n   \treturn this.tag+\"2\"\n     }\n   })\n     \n   //namespace test1 for asynchronous calls  \n   dsBridge.registerAsyn(\"test1\",{\n     tag:\"test1\",\n     test1:function(responseCallback){\n   \treturn responseCallback(this.tag+\"1\")\n     },\n     test2:function(responseCallback){\n   \treturn responseCallback(this.tag+\"2\")\n     }\n   })\n   ```\n\n   > 因为Javascript并不支持函数重载，所以不能在同一个Javascript对象中定义同名的同步函数和异步函数\n\n   **In Java**\n\n   ```java\n   webView.callHandler(\"test.test1\",new OnReturnValue<String>(){\n       @Override\n       public void onValue(String retValue) {\n           Log.d(\"jsbridge\",\"Namespace test.test1: \"+retValue);\n       }\n   });\n\n   webView.callHandler(\"test1.test1\",new OnReturnValue<String>(){\n       @Override\n       public void onValue(String retValue) {\n           Log.d(\"jsbridge\",\"Namespace test.test1: \"+retValue);\n       }\n   });\n   ```\n\n\n\n\n##### `dsBridge.hasNativeMethod(handlerName,[type])`\n\n检测Java中是否存在名为`handlerName`的API, `handlerName` 可以包含命名空间. \n\n`type`: 可选参数，`[\"all\"|\"syn\"|\"asyn\" ]`, 默认是 \"all\".\n\n```javascript\n//检测是否存在一个名为'testAsyn'的API(无论同步还是异步)\ndsBridge.hasNativeMethod('testAsyn') \n//检测test命名空间下是否存在一个’testAsyn’的API\ndsBridge.hasNativeMethod('test.testAsyn')\n// 检测是否存在一个名为\"testSyn\"的异步API\ndsBridge.hasNativeMethod('testSyn','asyn') //false\n```\n\n\n\n##### `dsBridge.disableJavascriptDialogBlock(disable)`\n\n调用 `dsBridge.disableJavascriptDialogBlock(...)` 和在Java中调用 `dwebview.disableJavascriptDialogBlock(...)` 作用一样.\n\n示例:\n\n```javascript\n//disable\ndsBridge.disableJavascriptDialogBlock()\n//enable\ndsBridge.disableJavascriptDialogBlock(false)\n```\n\n\n\n## 和 fly.js一起使用\n\n当dsBridge遇见  [Fly.js](https://github.com/wendux/fly)  时，将会打开一个新的世界。[fly.js传送门](https://github.com/wendux/fly)\n\n正如我们所知，在浏览器中，ajax请求受同源策略限制，不能跨域请求资源。然而，  [Fly.js](https://github.com/wendux/fly) 有一个强大的功能就是支持请求重定向：将ajax请求通过任何Javascript bridge重定向到端上，并且 [Fly.js](https://github.com/wendux/fly) 官方已经提供的 dsBridge 的 adapter, 可以非常方便的协同dsBridge一起使用。由于端上没有同源策略的限制，所以 fly.js可以请求任何域的资源。\n\n另一个典型的使用场景是在混合APP中，由于[Fly.js](https://github.com/wendux/fly) 可以将所有ajax请求转发到端上，所以，开发者就可以在端上进行统一的请求管理、证书校验、cookie管理、访问控制等。\n\n具体的示例请查看demo.\n\n## 最后\n\n如果你喜欢DSBridge, 欢迎star，以便更多的人知道它, 谢谢 !\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 16.056640625,
          "content": "\n# DSBridge for Android\n\n![dsBridge](https://github.com/wendux/DSBridge-IOS/raw/master/img/dsbridge.png)\n\n[![](https://jitpack.io/v/wendux/DSBridge-Android.svg)](https://jitpack.io/#wendux/DSBridge-Android)\n![language](https://img.shields.io/badge/language-Java-yellow.svg)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/mit-license.php)\n[![](https://travis-ci.org/wendux/DSBridge-Android.svg?branch=master)](https://travis-ci.org/wendux/DSBridge-Android)\n[![GitHub last commit](https://img.shields.io/github/last-commit/wendux/DSBridge-Android.svg?color=blue)](https://github.com/wendux/DSBridge-Android/tree/master)\n![](https://img.shields.io/badge/minSdkVersion-11-yellow.svg)\n[![x5](https://img.shields.io/badge/support%20x5-yes-blue.svg)](https://github.com/wendux/DSBridge-Android/tree/x5-3.0)\n\n>Modern cross-platform JavaScript bridge, through which you can invoke each other's functions synchronously or asynchronously between JavaScript and native applications.\n\nChinese documentation [中文文档](https://github.com/wendux/DSBridge-Android/blob/master/readme-chs.md)       \nDSBridge-IOS：https://github.com/wendux/DSBridge-IOS       \n[Tencent x5 webcore support](https://github.com/wendux/DSBridge-Android/tree/x5-3.0)\n\n### Notice\n\nDSBridge v3.0 is a milestone version. Compared with v2.0, we have made a lot of changes. Note that v3.0 is **incompatible** with v2.0, but v2.0 will continue to maintain. If you are a new user, use >=v3.0.\n\n[DSBridge v3.0.0 change list](https://github.com/wendux/DSBridge-Android/issues/31)  \n\n## Features\n\n1. The three ends of Android, IOS and Javascript are easy to use, light and powerful, secure and strong\n2. Both synchronous and asynchronous calls are supported\n3. Support **API Object**, which centrally implements  APIs in a Java Class or a Javascript object \n4. Support API namespace\n5. Support debug mode\n6. Support the test of whether API exists\n7. Support **Progress Callback**: one call, multiple returns\n8. Support event listener for Javascript to close the page\n9. Support Modal and Modeless popup box for javascript\n10. Support the X5 webcore of Tencent\n\n## Installation\n\n1. Add the JitPack repository to your build file\n\n   ```groovy\n   allprojects {\n     repositories {\n      ...\n      maven { url 'https://jitpack.io' }\n     }\n   }\n   ```\n\n2. Add the dependency\n\n   ```groovy\n   dependencies {\n    //compile 'com.github.wendux:DSBridge-Android:3.0-SNAPSHOT'\n    //support the x5 browser core of Tencent\n    //compile 'com.github.wendux:DSBridge-Android:x5-3.0-SNAPSHOT'\n   }\n   ```\n\n## Examples\n\nSee the `wendu.jsbdemo/` package. run the `app` project and to see it in action.\n\nTo use  dsBridge in your own project:\n\n## Usage\n\n1. Implement APIs in a Java class \n\n   ```java\n   public class JsApi{\n       //for synchronous invocation\n       @JavascriptInterface\n       public String testSyn(Object msg)  {\n           return msg + \"［syn call］\";\n       }\n\n       //for asynchronous invocation\n       @JavascriptInterface\n       public void testAsyn(Object msg, CompletionHandler handler) {\n           handler.complete(msg+\" [ asyn call]\");\n       }\n   }\n   ```\n\n   For security reason, Java APIs must be with \"@JavascriptInterface\" annotation .\n\n2. Add API object to DWebView .\n\n   ```javascript\n   import wendu.dsbridge.DWebView\n   ...\n   DWebView dwebView= (DWebView) findViewById(R.id.dwebview);\n   dwebView.addJavascriptObject(new JsApi(), null);\n   ```\n\n3. Call Native (Java/Object-c/swift) API in Javascript, and register javascript API.\n\n   - Init dsBridge\n\n     ```javascript\n     //cdn\n     //<script src=\"https://unpkg.com/dsbridge@3.1.3/dist/dsbridge.js\"> </script>\n     //npm\n     //npm install dsbridge@3.1.3\n     var dsBridge=require(\"dsbridge\")\n     ```\n\n   - Call Native API and register a javascript API for Native invocation.\n\n     ```javascript\n\n     //Call synchronously \n     var str=dsBridge.call(\"testSyn\",\"testSyn\");\n\n     //Call asynchronously\n     dsBridge.call(\"testAsyn\",\"testAsyn\", function (v) {\n       alert(v);\n     })\n\n     //Register javascript API for Native\n      dsBridge.register('addValue',function(l,r){\n          return l+r;\n      })\n     ```\n\n4. Call Javascript API in java\n\n   ```java\n   dwebView.callHandler(\"addValue\",new Object[]{3,4},new OnReturnValue<Integer>(){\n        @Override\n        public void onValue(Integer retValue) {\n           Log.d(\"jsbridge\",\"call succeed,return value is \"+retValue);\n        }\n   });\n   ```\n\n\n\n## Java API signature\n\nIn order to be compatible with IOS , we make the following convention  on Java API signature:\n\n1. For synchronous API.\n\n   **` public any handler(Object msg) `**\n\n   The argument type must be Object and must be declared even if not need)，and the type of return value  is not limited.\n\n2. For asynchronous API.\n\n   **`public void handler(Object arg, CompletionHandler handler)`**\n\n## Namespace\n\nNamespaces can help you better manage your APIs, which is very useful in   hybrid applications, because these applications have a large number of APIs. DSBridge (>= v3.0.0) allows you to classify API with namespace. And the namespace can be multilevel, between different levels with '.' division.\n\n## Debug mode\n\nIn debug mode, some errors will be prompted by a popup dialog , and the exception caused by the native APIs will not be captured to expose problems. We recommend that the debug mode be opened at the development stage.  You can open debug mode :\n\n```java\nDWebView.setWebContentsDebuggingEnabled(true)\n```\n\n\n\n## Progress Callback\n\nNormally, when a API is called to end, it returns a result, which corresponds one by one. But sometimes a call need to repeatedly return multipule times,  Suppose that on the Native side, there is  a API to download the file, in the process of downloading, it will send the progress information to  Javascript  many times, then Javascript will  display  the progress information on the H5 page. Oh...You will find it is difficult to achieve this function. Fortunately, DSBridge supports **Progress Callback**. You can be very simple and convenient to implement a call that needs to be returned many times. Here's an example of a countdown：\n\nIn Java \n\n```java\n@JavascriptInterface\npublic void callProgress(Object args, final CompletionHandler<Integer> handler) {\n    new CountDownTimer(11000, 1000) {\n        int i=10;\n        @Override\n        public void onTick(long millisUntilFinished) {\n            //setProgressData can be called many times util complete be called.\n            handler.setProgressData((i--));\n        }\n        @Override\n        public void onFinish() {\n           //complete the js invocation with data; \n           //handler will be invalid when complete is called\n            handler.complete(0);\n        }\n    }.start();\n}\n```\n\nIn Javascript\n\n```javascript\ndsBridge.call(\"callProgress\", function (value) {\n    document.getElementById(\"progress\").innerText = value\n})\n```\n\nFor the complete sample code, please refer to the demo project.\n\n\n\n## Javascript popup box\n\nFor Javascript popup box functions (alert/confirm/prompt), DSBridge has implemented them  all  by default, if you want to custom them, override the corresponding  callback in WebChromeClient . The default dialog box  implemented by DSBridge is modal. This will block the UI thread. If you need modeless, please refer to `dwebview.disableJavascriptDialogBlock (bool disable)`.\n\n\n\n## Security\n\nBefore Android 4.2 (API 17), `webview.addJavascriptInterface` has security vulnerabilities, and DSBridge doesn't use it  under 4.2 of the devices. Meanwhile, in order to prevent Javascript from calling unauthorized native functions, all Java APIs must be annotated with \"@JavascriptInterface\" , so you can use DSBridge safely.\n\n## DWebView\n\nIn DWebview, the following functions will execute in main thread automatically, you need not to switch thread by yourself.\n\n```java\nvoid loadUrl( String url) \nvoid loadUrl(final String url, Map<String, String> additionalHttpHeaders)\nvoid evaluateJavascript(String script) \n```\n\n\n\n## API Reference\n\n### Java API\n\nIn Java, the object that implements the javascript interfaces is called **Java API object**.\n\n##### `dwebview.addJavascriptObject(Object object, String namespace)`\n\nAdd the Java API object with supplied namespace into DWebView. The javascript can then call  Java APIs  with `bridge.call(\"namespace.api\",...)`. \n\nIf the namespace is empty, the  Java API object have no namespace. The javascript can  call  Java APIs with `bridge.call(\"api\",...)`. \n\nExample:\n\nIn Java\n\n```javascript\npublic class JsEchoApi {\n    @JavascriptInterface\n    public Object syn(Object args) throws JSONException {\n        return  args;\n    }\n\n    @JavascriptInterface\n    public void asyn(Object args,CompletionHandler handler){\n        handler.complete(args);\n    }\n}\n//namespace is \"echo\"\ndwebView.addJavascriptObject(new JsEchoApi(),\"echo\");\n```\n\nIn Javascript\n\n```javascript\n// call echo.syn\nvar ret=dsBridge.call(\"echo.syn\",{msg:\" I am echoSyn call\", tag:1})\nalert(JSON.stringify(ret))  \n// call echo.asyn\ndsBridge.call(\"echo.asyn\",{msg:\" I am echoAsyn call\",tag:2},function (ret) {\n      alert(JSON.stringify(ret));\n})\n```\n\n\n\n##### `dwebview.removeJavascriptObject(String namespace)`\n\nRemove the  Java API object with supplied namespace.\n\n\n\n##### `dwebview.callHandler(String handlerName, Object[] args)`\n\n##### `dwebview.callHandler(String handlerName, OnReturnValue handler)`\n\n##### `dwebview.callHandler(String handlerName, Object[] args,OnReturnValue handler)`\n\nCall the javascript API. If a `handler` is given, the javascript handler can respond. the `handlerName` can contain the namespace.  **The handler will be called in main thread**.\n\nExample:\n\n```java\n\ndWebView.callHandler(\"append\",new Object[]{\"I\",\"love\",\"you\"},new OnReturnValue<String>((){\n    @Override\n    public void onValue(String retValue) {\n        Log.d(\"jsbridge\",\"call succeed, append string is: \"+retValue);\n    }\n});\n// call with namespace 'syn', More details to see the Demo project                    \ndWebView.callHandler(\"syn.getInfo\", new OnReturnValue<JSONObject>() {\n    @Override\n    public void onValue(JSONObject retValue) {\n      showToast(retValue);\n    }\n});\n```\n\n\n\n##### `dwebview.disableJavascriptDialogBlock(bool disable)`\n\nBE CAREFUL to use. if you call any of the javascript popup box functions (`alert`,` confirm`, and `prompt`), the app will hang, and the javascript execution flow will be blocked. if you don't want to block the javascript execution flow, call this method, the  popup box functions will return  immediately(  `confirm` return `true`, and the `prompt` return empty string).\n\nExample:\n\n```javascript\ndwebview.disableJavascriptDialogBlock(true);\n```\n\nif you want to  enable the block,  just calling this method with the argument value `false` .\n\n\n\n##### `dwebview.setJavascriptCloseWindowListener(JavascriptCloseWindowListener listener)`\n\nDWebView calls `listener.onClose` when Javascript calls `window.close`. the default handler is closing the current active activity.  you can provide a listener to add your hanlder .\n\nExample:\n\n```java\ndwebview.setJavascriptCloseWindowListener(new DWebView.JavascriptCloseWindowListener() {\n    @Override\n    public boolean onClose() {\n        Log.d(\"jsbridge\",\"window.close is called in Javascript\");\n        //If return false,the default handler will be prevented. \n        return false;\n    }\n});\n```\n\n\n\n##### `dwebview.hasJavascriptMethod(String handlerName, OnReturnValue<Boolean> existCallback)`\n\nTest whether the handler exist in javascript. \n\nExample:\n\n```java\n dWebView.hasJavascriptMethod(\"addValue\", new OnReturnValue<Boolean>() {\n    @Override\n    public void onValue(Boolean retValue) {\n     showToast(retValue);\n    }\n });\n```\n\n\n\n##### `DWebView.setWebContentsDebuggingEnabled(boolean enabled)`\n\nSet debug mode. if in debug mode, some errors will be prompted by a popup dialog , and the exception caused by the native APIs will not be captured to expose problems. We recommend that the debug mode be opened at the development stage. \n\n\n\n### Javascript API\n\n##### dsBridge \n\n\"dsBridge\" is accessed after dsBridge Initialization .\n\n\n\n##### `dsBridge.call(method,[arg,callback])`\n\nCall Java api synchronously and asynchronously。\n\n`method`: Java API name， can contain the namespace。\n\n`arg`: argument, Only one  allowed,  if you expect multiple  parameters,  you can pass them with a json object.\n\n`callback(String returnValue)`: callback to handle the result. **only asynchronous invocation required**.\n\n\n\n##### `dsBridge.register(methodName|namespace,function|synApiObject)`\n\n##### `dsBridge.registerAsyn(methodName|namespace,function|asyApiObject)`\n\nRegister javascript synchronous and asynchronous  API for Native invocation. There are two types of invocation\n\n1. Just register a method. For example:\n\n   In Javascript\n\n   ```javascript\n   dsBridge.register('addValue',function(l,r){\n        return l+r;\n   })\n   dsBridge.registerAsyn('append',function(arg1,arg2,arg3,responseCallback){\n        responseCallback(arg1+\" \"+arg2+\" \"+arg3);\n   })\n   ```\n\n   In Java\n\n   ```java\n   webView.callHandler(\"addValue\",new Object[]{1,6},new OnReturnValue(){\n     @Override\n     public void onValue(String retValue) {\n       Log.d(\"jsbridge\",\"call succeed,return value is: \"+retValue);\n     }\n   });\n\n    webView.callHandler(\"append\",new Object[]{\"I\",\"love\",\"you\"},new OnReturnValue(){\n      @Override\n      public void onValue(String retValue) {\n        Log.d(\"jsbridge\",\"call succeed, append string is: \"+retValue);\n      }\n    });\n   ```\n\n   ​\n\n2. Register a Javascript API object with supplied namespace. For example:\n\n   **In Javascript**\n\n   ```java\n   //namespace test for synchronous\n   dsBridge.register(\"test\",{\n     tag:\"test\",\n     test1:function(){\n   \treturn this.tag+\"1\"\n     },\n     test2:function(){\n   \treturn this.tag+\"2\"\n     }\n   })\n     \n   //namespace test1 for asynchronous calls  \n   dsBridge.registerAsyn(\"test1\",{\n     tag:\"test1\",\n     test1:function(responseCallback){\n   \treturn responseCallback(this.tag+\"1\")\n     },\n     test2:function(responseCallback){\n   \treturn responseCallback(this.tag+\"2\")\n     }\n   })\n   ```\n\n   > Because JavaScript does not support function overloading, it is not possible to define asynchronous function and sync function of the same name。\n   >\n\n   **In Java**\n\n   ```java\n   webView.callHandler(\"test.test1\",new OnReturnValue<String>(){\n       @Override\n       public void onValue(String retValue) {\n           Log.d(\"jsbridge\",\"Namespace test.test1: \"+retValue);\n       }\n   });\n\n   webView.callHandler(\"test1.test1\",new OnReturnValue<String>(){\n       @Override\n       public void onValue(String retValue) {\n           Log.d(\"jsbridge\",\"Namespace test.test1: \"+retValue);\n       }\n   });\n   ```\n\n\n\n\n##### `dsBridge.hasNativeMethod(handlerName,[type])`\n\nTest whether the handler exist in Java, the `handlerName` can contain the namespace. \n\n`type`: optional`[\"all\"|\"syn\"|\"asyn\" ]`, default is \"all\".\n\n```javascript\ndsBridge.hasNativeMethod('testAsyn') \n//test namespace method\ndsBridge.hasNativeMethod('test.testAsyn')\n// test if exist a asynchronous function that named \"testSyn\"\ndsBridge.hasNativeMethod('testSyn','asyn') //false\n```\n\n\n\n##### `dsBridge.disableJavascriptDialogBlock(disable)`\n\nCalling `dsBridge.disableJavascriptDialogBlock(...)` has the same effect as calling `dwebview.disableJavascriptDialogBlock(...)` in Java.\n\nExample:\n\n```javascript\n//disable\ndsBridge.disableJavascriptDialogBlock()\n//enable\ndsBridge.disableJavascriptDialogBlock(false)\n```\n\n\n\n## Work with fly.js\n\nAs we all know, In  browser, AJax request are restricted by same-origin policy, so the request cannot be initiated across the domain.  However,    [Fly.js](https://github.com/wendux/fly) supports forwarding the http request  to Native through any Javascript bridge, And fly.js has already provide the dsBridge adapter.Because the  Native side has no the same-origin policy restriction, fly.js can request any resource from any domain. \n\nAnother typical scene is in the hybrid App, [Fly.js](https://github.com/wendux/fly)  will forward all requests to Native, then, the unified request management, cookie management, certificate verification, request filtering and so on are carried out on Native. \n\nFor the complete sample code, please refer to the demo project.\n\n## Finally\n\nIf you like DSBridge, please star to let more people know it , Thank you !\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.02734375,
          "content": "include ':app', ':dsbridge'\n"
        }
      ]
    }
  ]
}