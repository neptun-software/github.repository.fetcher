{
  "metadata": {
    "timestamp": 1736708523745,
    "page": 742,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "liangfeidotme/MasteringAndroidDataBinding",
      "stars": 2585,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3681640625,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\nbuild/\n/*/build/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n.gradle\n/local.properties\n.idea/\n.DS_Store\n/build\n/captures\n/infer-out\n*.iml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6640625,
          "content": "language: android\nandroid:\n  components:\n    # Uncomment the lines below if you want to\n    # use the latest revision of Android SDK Tools\n    - platform-tools\n    - tools\n\n    # The BuildTools version used by your project\n    - build-tools-23.0.1\n\n    # The SDK version used to compile your project\n    - android-23\n\n    # Additional components\n    - extra-google-google_play_services\n    - extra-google-m2repository\n    - extra-android-m2repository\n    - addon-google_apis-google-19\n\n    # Specify at least one system image,\n    # if you need to run emulator(s) during your tests\n    - sys-img-armeabi-v7a-android-19\n    - sys-img-x86-android-17\nscript: ./gradlew assembleDebug\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 liangfei\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.4814453125,
          "content": "# 精通 Android Data Binding\n\n[![Build Status](https://travis-ci.org/LyndonChin/MasteringAndroidDataBinding.svg)](https://travis-ci.org/LyndonChin/MasteringAndroidDataBinding)\n\n* 更多干货可移步至[个人主页](http://liangfei.me)\n* QQ 交流群：**324112728** ，或者[点击链接加入QQ群](http://jq.qq.com/?_wv=1027&k=2CokoRt)\n\n<img width=\"400px\" src=\"https://cdn.nlark.com/yuque/0/2019/png/124977/1559045910714-8948c8b2-2b86-44a3-a600-a4415db3c01f.png\"/>\n\n---\n\n官方虽然已经给出了教程 - [Data Binding Guide](https://developer.android.com/tools/data-binding/guide.html) [（中文版 - Data Binding（数据绑定）用户指南）](http://www.jianshu.com/p/b1df61a4df77) ，但是实践之后发现槽点实在太多，于是就有了这个教程，针对每个知识点给出更详实的例子同时也总结了遇到的一些坑，希望对你有所帮助：）\n\n> 我现在转行做纯前端开发了，写了几个月 React/Vue 之后发现，DataBinding 真是一个伟大的 MVVM 框架，它缩小了 Native 开发和前端开发之间的距离，技术会过时，理念恒久远。\n\n## 准备\n\n新建一个 Project，建议使用[新版本的 Gradle 插件](build.gradle#L16)（至少要保证插件版本不低于 **1.5.0**）：\n\n```groovy\nclasspath 'com.android.tools.build:gradle:3.2.1'\n```\n\n然后修改对应模块（Module）的 [build.gradle](app/build.gradle#L6-L8)：\n\n```groovy\ndataBinding {\n    enabled true\n}\n```\n\n## 基础\n\n工程创建完成后，我们通过一个最简单的例子来说明 Data Binding 的基本用法。\n\n### 布局文件\n\n使用 Data Binding 之后，xml 的布局文件就不再用于单纯地展示 UI 元素，还需要定义 UI 元素用到的变量。所以，它的根节点不再是一个 `ViewGroup`，而是变成了 `layout`，并且新增了一个节点 `data`。\n\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n    </data>\n    <!--原先的根节点（Root Element）-->\n    <LinearLayout>\n    ....\n    </LinearLayout>\n</layout>\n```\n\n要实现 MVVM 的 `ViewModel` 就需要把数据（Model）与 UI（View） 进行绑定，`data` 节点的作用就像一个桥梁，搭建了 View 和 Model 之间的通路。\n\n我们先在 xml 布局文件的 `data` 节点中声明一个 `variable`，这个变量会为 UI 元素提供数据（例如 `TextView` 的 `android:text`），然后在 Java 代码中把『后台』数据与这个 `variable` 进行绑定。\n\n下面我们使用 Data Binding 创建一个展示用户信息的表格。\n\n### 数据对象\n\n添加一个 POJO 类 - [`User`](app/src/main/java/com/liangfeizc/databinding/model/User.java)，非常简单，两个属性以及他们的 getter 和 setter。\n\n```java\npublic class User {\n    private final String firstName;\n    private final String lastName;\n\n    public User(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n```\n\n稍后，我们会新建一个 `User` 类型的变量，然后把它跟布局文件中声明的变量进行绑定。\n\n### 定义 Variable\n\n回到布局文件，在 `data` 节点中声明一个 `User` 类型的变量 `user`。\n\n```xml\n<data>\n\t<variable name=\"user\" type=\"com.liangfeizc.databindingsamples.basic.User\" />\n</data>\n```\n\n其中 `type` 属性就是我们在 Java 文件中定义的 `User` 类。\n\n当然，`data` 节点也支持 `import`，所以上面的代码可以换一种形式来写。\n\n```xml\n<data>\n    <import type=\"com.liangfeizc.databindingsamples.basic.User\" />\n    <variable name=\"user\" type=\"User\" />\n</data>\n```\n\n然后我们刚才在 build.gradle 中添加的那个插件 - `com.android.databinding` 会根据 xml 文件的名称 **Generate** 一个继承自 `ViewDataBinding` 的类。 当然，IDE 中看不到这个文件，需要手动去 build 目录下找。\n\n例如，这里 xml 的文件名叫 `activity_basic.xml`，那么生成的类就是 `ActivityBasicBinding`。\n\n**注意**\n\n`java.lang.*` 包中的类会被自动导入，可以直接使用，例如要定义一个 `String` 类型的变量：\n\n```xml\n<variable name=\"firstName\" type=\"String\" />\n```\n\n### 绑定 Variable\n\n修改 [`BasicActivity`](app/src/main/java/com/liangfeizc/databinding/sample/basic/BasicActivity.java#L17-L20) 的 `onCreate` 方法，用 `DatabindingUtil.setContentView()` 来替换掉 `setContentView()`，然后创建一个 `user` 对象，通过 `binding.setUser(user)` 与 `variable` 进行绑定。\n\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    ActivityBasicBinding binding = DataBindingUtil.setContentView(\n            this, R.layout.activity_basic);\n    User user = new User(\"fei\", \"Liang\");\n    binding.setUser(user);\n}\n```\n\n除了使用框架自动生成的 `ActivityBasicBinding`，我们也可以通过如下方式自定义类名。\n\n```xml\n<data class=\"com.example.CustomBinding\">\n</data>\n```\n\n**注意**\n\n`ActivityBasicBinding` 类是自动生成的，所有的 `set` 方法也是根据 `variable` 名称生成的。例如，我们定义了两个变量。\n\n```xml\n<data>\n    <variable name=\"firstName\" type=\"String\" />\n    <variable name=\"lastName\" type=\"String\" />\n</data>\n```\n\n那么就会生成对应的两个 set 方法。\n\n```java\nsetFirstName(String firstName);\nsetLastName(String lastName);\n```\n\n\n### 使用 Variable\n\n数据与 Variable 绑定之后，xml 的 UI 元素就可以直接使用了。\n\n```xml\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{user.lastName}\" />\n```\n\n至此，一个简单的数据绑定就完成了，可参考[完整代码](app/src/main/java/com/liangfeizc/databinding/sample/basic/)\n\n## 高级用法\n\n### 使用类方法\n\n首先定义一个静态方法\n\n```java\npublic class MyStringUtils {\n    public static String capitalize(final String word) {\n        if (word.length() > 1) {\n            return String.valueOf(word.charAt(0)).toUpperCase() + word.substring(1);\n        }\n        return word;\n    }\n}\n```\n\n然后在 xml 的 `data` 节点中导入：\n\n```xml\n<import type=\"com.liangfeizc.databindingsamples.utils.MyStringUtils\" />\n```\n\n使用方法与 Java 语法一样：\n\n```java\n<TextView\n\tandroid:layout_width=\"wrap_content\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:text=\"@{MyStringUtils.capitalize(user.firstName)}\" />\n```\n\n### 类型别名\n\n如果我们在 `data` 节点了导入了两个同名的类怎么办？\n\n```xml\n<import type=\"com.example.home.data.User\" />\n<import type=\"com.examle.detail.data.User\" />\n<variable name=\"user\" type=\"User\" />\n```\n\n这样一来出现了两个 `User` 类，那 `user` 变量要用哪一个呢？不用担心，`import` 还有一个 `alias` 属性。\n\n```xml\n<import type=\"com.example.home.data.User\" />\n<import type=\"com.examle.detail.data.User\" alias=\"DetailUser\" />\n<variable name=\"user\" type=\"DetailUser\" />\n```\n\n### Null Coalescing 运算符\n\n```java\nandroid:text=\"@{user.displayName ?? user.lastName}\"\n```\n\n就等价于\n\n```java\nandroid:text=\"@{user.displayName != null ? user.displayName : user.lastName}\"\n```\n\n### 属性值\n\n通过 `@{}` 可以直接把 Java 中定义的属性值赋值给 xml 属性。\n\n```xml\n<TextView\n   android:text=\"@{user.lastName}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\n```\n\n### 使用资源数据\n\n这个例子，官方教程有错误，可以参考[Android Data Binder 的一个bug](http://blog.csdn.net/feelang/article/details/46342699)，[完整代码在此](app/src/main/res/layout/activity_resource.xml)\n\n```xml\n<TextView\n    android:padding=\"@{large? (int)@dimen/largePadding : (int)@dimen/smallPadding}\"\n    android:background=\"@android:color/black\"\n    android:textColor=\"@android:color/white\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/hello_world\" />\n```\n\n## Observable Binding\n\n本来这一节的标题应该叫**双向绑定**，但是很遗憾，现在的 **Data Binding** 暂时支持单向绑定，还没有达到 **Angular.js** 的威力。\n\n要实现 Observable Binding，首先得有一个 `implement` 了接口 `android.databinding.Observable` 的类，为了方便，Android 原生提供了已经封装好的一个类 - `BaseObservable`，并且实现了监听器的注册机制。\n\n我们可以直接继承 `BaseObservable`。\n\n```java\npublic class ObservableUser extends BaseObservable {\n    private String firstName;\n    private String lastName;\n\n    @Bindable\n    public String getFirstName() {\n        return firstName;\n    }\n\n    @Bindable\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n        notifyPropertyChanged(BR.firstName);\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n        notifyPropertyChanged(BR.lastName);\n    }\n}\n```\n\n`BR` 是编译阶段生成的一个类，功能与 `R.java` 类似，用 `@Bindable` 标记过 `getter` 方法会在 `BR` 中生成一个 *entry*。\n\n通过代码可以看出，当数据发生变化时还是需要手动发出通知。 通过调用 `notifyPropertyChanged(BR.firstName)` 可以通知系统 `BR.firstName` 这个 `entry` 的数据已经发生变化，需要更新 UI。\n\n除此之外，还有一种更细粒度的绑定方式，可以具体到成员变量，这种方式无需继承 `BaseObservable`，一个简单的 **POJO** 就可以实现。\n\n```java\npublic class PlainUser {\n    public final ObservableField<String> firstName = new ObservableField<>();\n    public final ObservableField<String> lastName = new ObservableField<>();\n    public final ObservableInt age = new ObservableInt();\n}\n```\n\n系统为我们提供了所有的 **primitive type** 所对应的 **Observable**类，例如 `ObservableInt`、`ObservableFloat`、`ObservableBoolean` 等等，还有一个 `ObservableField` 对应着 **reference type**。\n\n剩下的数据绑定与前面介绍的方式一样，具体可参考[ObservableActivity](app/src/main/java/com/liangfeizc/databinding/sample/observable/ObservableActivity.java)。\n\n## 带 ID 的 View\n\n**Data Binding** 有效降低了代码的冗余性，甚至完全没有必要再去获取一个 View 实例，但是情况不是绝对的，万一我们真的就需要了呢？不用担心，只要给 View 定义一个 ID，**Data Binding** 就会为我们生成一个对应的 `final` 变量。\n\n```xml\n<TextView\n    android:id=\"@+id/firstName\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" />\n```\n\n上面代码中定义了一个 ID 为 *firstName** 的 `TextView`，那么它对应的变量就是\n\n```java\npublic final TextView firstName;\n```\n\n具体代码可参考 [ViewWithIDsActivity.java](app/src/main/java/com/liangfeizc/databinding/sample/viewid/ViewWithIDsActivity.java)\n\n## ViewStubs\n\nxml 中的 `ViewStub` 经过 binding 之后会转换成 `ViewStubProxy`, 具体代码可参考 [ViewStubActivity.java](app/src/main/java/com/liangfeizc/databinding/sample/viewstub/ViewStubActivity.java)\n\n简单用代码说明一下，xml 文件与之前的代码一样，根节点改为 `layout`，在 `LinearLayout` 中添加一个 `ViewStub`，添加 **ID**。\n\n```xml\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <LinearLayout\n        ...>\n        <ViewStub\n            android:id=\"@+id/view_stub\"\n            android:layout=\"@layout/view_stub\"\n            ... />\n    </LinearLayout>\n</layout>\n```\n\n在 Java 代码中获取 `binding` 实例，为 `ViewStubProy` 注册 `ViewStub.OnInflateListener` 事件：\n\n```java\nbinding = DataBindingUtil.setContentView(this, R.layout.activity_view_stub);\nbinding.viewStub.setOnInflateListener(new ViewStub.OnInflateListener() {\n\t@Override\n\tpublic void onInflate(ViewStub stub, View inflated) {\n\t\tViewStubBinding binding = DataBindingUtil.bind(inflated);\n\t\tUser user = new User(\"fee\", \"lang\");\n\t\tbinding.setUser(user);\n\t}\n});\n```\n\n## Dynamic Variables\n\n完整代码可以参考 [dynamic](app/src/main/java/com/liangfeizc/databinding/sample/dynamic)\n\n以 `RecyclerView` 为例，`Adapter` 的 **DataBinding** 需要动态生成，因此我们可以在 `onCreateViewHolder` 的时候创建这个 **DataBinding**，然后在 `onBindViewHolder` 中获取这个 **DataBinding**。\n\n```java\npublic static class BindingHolder extends RecyclerView.ViewHolder {\n    private ViewDataBinding binding;\n\n    public BindingHolder(View itemView) {\n        super(itemView);\n    }\n\n    public ViewDataBinding getBinding() {\n        return binding;\n    }\n\n    public void setBinding(ViewDataBinding binding) {\n        this.binding = binding;\n    }\n}\n\n@Override\npublic BindingHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n    ViewDataBinding binding = DataBindingUtil.inflate(\n            LayoutInflater.from(viewGroup.getContext()),\n            R.layout.list_item,\n            viewGroup,\n            false);\n    BindingHolder holder = new BindingHolder(binding.getRoot());\n    holder.setBinding(binding);\n    return holder;\n}\n\n@Override\npublic void onBindViewHolder(BindingHolder holder, int position) {\n    User user = users.get(position);\n    holder.getBinding().setVariable(BR.user, user);\n    holder.getBinding().executePendingBindings();\n}\n```\n\n注意此处 `DataBindingUtil` 的用法：\n\n```java\nViewDataBinding binding = DataBindingUtil.inflate(\n\tLayoutInflater.from(viewGroup.getContext()),\n\tR.layout.list_item,\n\tviewGroup,\n\tfalse);\n```\n\n---\n\n还有另外一种比较简洁的方式，直接在构造 Holder 时把 `View` 与自动生成的 `XXXBinding` 进行绑定。\n\n```java\npublic class UserAdapter extends RecyclerView.Adapter<UserAdapter.UserHolder> {\n    private static final int USER_COUNT = 10;\n\n    @NonNull\n    private List<User> mUsers;\n\n    public UserAdapter() {\n        mUsers = new ArrayList<>(10);\n        for (int i = 0; i < USER_COUNT; i ++) {\n            User user = new User(RandomNames.nextFirstName(), RandomNames.nextLastName());\n            mUsers.add(user);\n        }\n    }\n\n    public static class UserHolder extends RecyclerView.ViewHolder {\n        private UserItemBinding mBinding;\n\n        public UserHolder(View itemView) {\n            super(itemView);\n            mBinding = DataBindingUtil.bind(itemView);\n        }\n\n        public void bind(@NonNull User user) {\n            mBinding.setUser(user);\n        }\n    }\n\n    @Override\n    public UserHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View itemView = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.user_item, viewGroup, false);\n        return new UserHolder(itemView);\n    }\n\n    @Override\n    public void onBindViewHolder(UserHolder holder, int position) {\n        holder.bind(mUsers.get(position));\n    }\n\n    @Override\n    public int getItemCount() {\n        return mUsers.size();\n    }\n}\n```\n\n## Attribute setters\n\n有了 **Data Binding**，即使属性没有在 `declare-styleable` 中定义，我们也可以通过 xml 进行赋值操作。\n为了演示这个功能，我自定义了一个 View - [NameCard](app/src/main/java/com/liangfeizc/databinding/view/NameCard.java)，属性资源 [R.styleable.NameCard](app/src/main/res/values/styles.xml#L8-L10) 中只定义了一个 `age` 属性，其中 `firstName` 和 `lastName` 只有对应的两个 `setter` 方法。\n\n只要有 `setter` 方法就可以像下面代码一样赋值：\n\n```xml\n<com.liangfeizc.databindingsamples.attributesetters.UserView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:paddingLeft=\"@dimen/largePadding\"\n    app:onClickListener=\"@{activity.clickListener}\"\n    app:firstName=\"@{@string/firstName}\"\n    app:lastName=\"@{@string/lastName}\"\n    app:age=\"27\" />\n```\n\n`onClickListener` 也是同样道理，只不过我们是在 `Activity` 中定义了一个 `Listener`。\n\n## 转换器 (Converters)\n\n> **非常重要**\n\n> 使用 **Converter** 一定要保证它不会影响到其他的属性，例如这个 `@BindingConversion`- [convertColorToString](app/src/main/java/com/liangfeizc/databinding/sample/converter/ConversionsActivity.java#L50-L63) 就会影响到[android:visibility](app/src/main/res/layout/activity_basic.xml#L76), 因为他们都是都符合从 int 到 int 的转换。\n\n\n在 xml 中为属性赋值时，如果变量的类型与属性不一致，通过 **DataBinding** 可以进行转换。\n\n例如，下面代码中如果要为属性 `android:background` 赋值一个 `int` 型的 color 变量：\n\n```xml\n<View\n    android:background=\"@{isError.get() ? @color/red : @color/white}\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    app:layout_height=\"@{height}\" />\n```\n\n只需要定义一个标记了 `@BindingConversion` 的静态方法即可（*方法的定义位置可以随意*）：\n\n```java\n@BindingConversion\npublic static ColorDrawable convertColorToDrawable(int color) {\n    return new ColorDrawable(color);\n}\n```\n\n具体代码可参考 [ConversionsActivity.java](app/src/main/java/com/liangfeizc/databinding/sample/converter/ConversionsActivity.java)。\n\n## include\n\n用法可以参考代码 [IncludeActivity.java](/app/src/main/java/com/liangfeizc/databinding/sample/include/IncludeActivity.java)\n\n如果在非根节点的 ViewGroup 中使用 `include` 会导致 crash，已经在 StackOverflow 上提了一个问题[Android Data Binding makes app crash when using include tag in a non-root ViewGroup](http://stackoverflow.com/questions/30887906/android-data-binding-makes-app-crash-when-using-include-tag-in-a-non-root-viewgr)，直されたそうですけど。\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.0908203125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n\n    ext {\n        gradleVersion = '3.3.1'\n        kotlinVersion = '1.3.21'\n        supportLibraryVersion = '28.0.0'\n        appCompatVersion = '1.1.0-alpha02'\n        cardViewVersion = '1.0.0'\n        recyclerViewVersion = '1.1.0-alpha02'\n        materialVersion = '1.0.0'\n        roomVersion = '2.1.0-alpha04'\n        workVersion = '1.0.1'\n        gsonVersion = '2.8.2'\n        navigationVersion = '1.0.0'\n        constraintLayoutVersion = '2.0.0-alpha3'\n        glideVersion = '4.9.0'\n        viewPagerVersion = '1.0.0-rc02'\n    }\n\n    repositories {\n        google()\n        jcenter()\n    }\n\n    dependencies {\n        classpath \"com.android.tools.build:gradle:$gradleVersion\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n        classpath \"android.arch.navigation:navigation-safe-args-gradle-plugin:$navigationVersion\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8876953125,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\nandroid.enableJetifier=true\nandroid.useAndroidX=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0146484375,
          "content": "include ':app'\n"
        }
      ]
    }
  ]
}