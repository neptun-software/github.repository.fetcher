{
  "metadata": {
    "timestamp": 1736609036440,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lukas-krecan/ShedLock",
      "stars": 3713,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 15.0869140625,
          "content": "[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\nmax_line_length = 120\ntab_width = 4\ntrim_trailing_whitespace = true\nij_continuation_indent_size = 8\nij_formatter_off_tag = @formatter:off\nij_formatter_on_tag = @formatter:on\nij_formatter_tags_enabled = false\nij_smart_tabs = false\nij_wrap_on_typing = false\n\n\n[*.java]\nij_continuation_indent_size = 4\nij_java_align_consecutive_assignments = false\nij_java_align_consecutive_variable_declarations = false\nij_java_align_group_field_declarations = false\nij_java_align_multiline_annotation_parameters = false\nij_java_align_multiline_array_initializer_expression = false\nij_java_align_multiline_assignment = false\nij_java_align_multiline_binary_operation = false\nij_java_align_multiline_chained_methods = false\nij_java_align_multiline_extends_list = false\nij_java_align_multiline_for = true\nij_java_align_multiline_method_parentheses = false\nij_java_align_multiline_parameters = true\nij_java_align_multiline_parameters_in_calls = false\nij_java_align_multiline_parenthesized_expression = false\nij_java_align_multiline_resources = true\nij_java_align_multiline_ternary_operation = false\nij_java_align_multiline_text_blocks = false\nij_java_align_multiline_throws_list = false\nij_java_align_subsequent_simple_methods = false\nij_java_align_throws_keyword = false\nij_java_annotation_parameter_wrap = off\nij_java_array_initializer_new_line_after_left_brace = false\nij_java_array_initializer_right_brace_on_new_line = false\nij_java_array_initializer_wrap = off\nij_java_assert_statement_colon_on_next_line = false\nij_java_assert_statement_wrap = off\nij_java_assignment_wrap = off\nij_java_binary_operation_sign_on_next_line = false\nij_java_binary_operation_wrap = off\nij_java_blank_lines_after_anonymous_class_header = 0\nij_java_blank_lines_after_class_header = 0\nij_java_blank_lines_after_imports = 1\nij_java_blank_lines_after_package = 1\nij_java_blank_lines_around_class = 1\nij_java_blank_lines_around_field = 0\nij_java_blank_lines_around_field_in_interface = 0\nij_java_blank_lines_around_initializer = 1\nij_java_blank_lines_around_method = 1\nij_java_blank_lines_around_method_in_interface = 1\nij_java_blank_lines_before_class_end = 0\nij_java_blank_lines_before_imports = 1\nij_java_blank_lines_before_method_body = 0\nij_java_blank_lines_before_package = 0\nij_java_block_brace_style = end_of_line\nij_java_block_comment_at_first_column = true\nij_java_call_parameters_new_line_after_left_paren = false\nij_java_call_parameters_right_paren_on_new_line = false\nij_java_call_parameters_wrap = off\nij_java_case_statement_on_separate_line = true\nij_java_catch_on_new_line = false\nij_java_class_annotation_wrap = split_into_lines\nij_java_class_brace_style = end_of_line\nij_java_class_count_to_use_import_on_demand = 1000\nij_java_class_names_in_javadoc = 1\nij_java_do_not_indent_top_level_class_members = false\nij_java_do_not_wrap_after_single_annotation = false\nij_java_do_while_brace_force = never\nij_java_doc_add_blank_line_after_description = true\nij_java_doc_add_blank_line_after_param_comments = false\nij_java_doc_add_blank_line_after_return = false\nij_java_doc_add_p_tag_on_empty_lines = true\nij_java_doc_align_exception_comments = true\nij_java_doc_align_param_comments = true\nij_java_doc_do_not_wrap_if_one_line = false\nij_java_doc_enable_formatting = true\nij_java_doc_enable_leading_asterisks = true\nij_java_doc_indent_on_continuation = false\nij_java_doc_keep_empty_lines = true\nij_java_doc_keep_empty_parameter_tag = true\nij_java_doc_keep_empty_return_tag = true\nij_java_doc_keep_empty_throws_tag = true\nij_java_doc_keep_invalid_tags = true\nij_java_doc_param_description_on_new_line = false\nij_java_doc_preserve_line_breaks = false\nij_java_doc_use_throws_not_exception_tag = true\nij_java_else_on_new_line = false\nij_java_entity_dd_suffix = EJB\nij_java_entity_eb_suffix = Bean\nij_java_entity_hi_suffix = Home\nij_java_entity_lhi_prefix = Local\nij_java_entity_lhi_suffix = Home\nij_java_entity_li_prefix = Local\nij_java_entity_pk_class = java.lang.String\nij_java_entity_vo_suffix = VO\nij_java_enum_constants_wrap = off\nij_java_extends_keyword_wrap = off\nij_java_extends_list_wrap = off\nij_java_field_annotation_wrap = split_into_lines\nij_java_finally_on_new_line = false\nij_java_for_brace_force = never\nij_java_for_statement_new_line_after_left_paren = false\nij_java_for_statement_right_paren_on_new_line = false\nij_java_for_statement_wrap = off\nij_java_generate_final_locals = false\nij_java_generate_final_parameters = false\nij_java_if_brace_force = never\nij_java_imports_layout = $*,|,*\nij_java_indent_case_from_switch = true\nij_java_insert_inner_class_imports = false\nij_java_insert_override_annotation = true\nij_java_keep_blank_lines_before_right_brace = 2\nij_java_keep_blank_lines_between_package_declaration_and_header = 2\nij_java_keep_blank_lines_in_code = 2\nij_java_keep_blank_lines_in_declarations = 2\nij_java_keep_control_statement_in_one_line = true\nij_java_keep_first_column_comment = true\nij_java_keep_indents_on_empty_lines = false\nij_java_keep_line_breaks = true\nij_java_keep_multiple_expressions_in_one_line = false\nij_java_keep_simple_blocks_in_one_line = false\nij_java_keep_simple_classes_in_one_line = false\nij_java_keep_simple_lambdas_in_one_line = false\nij_java_keep_simple_methods_in_one_line = false\nij_java_label_indent_absolute = false\nij_java_label_indent_size = 0\nij_java_lambda_brace_style = end_of_line\nij_java_layout_static_imports_separately = true\nij_java_line_comment_add_space = false\nij_java_line_comment_at_first_column = true\nij_java_message_dd_suffix = EJB\nij_java_message_eb_suffix = Bean\nij_java_method_annotation_wrap = split_into_lines\nij_java_method_brace_style = end_of_line\nij_java_method_call_chain_wrap = off\nij_java_method_parameters_new_line_after_left_paren = false\nij_java_method_parameters_right_paren_on_new_line = false\nij_java_method_parameters_wrap = off\nij_java_modifier_list_wrap = false\nij_java_names_count_to_use_import_on_demand = 1000\nij_java_packages_to_use_import_on_demand = java.awt.*,javax.swing.*\nij_java_parameter_annotation_wrap = off\nij_java_parentheses_expression_new_line_after_left_paren = false\nij_java_parentheses_expression_right_paren_on_new_line = false\nij_java_place_assignment_sign_on_next_line = false\nij_java_prefer_longer_names = true\nij_java_prefer_parameters_wrap = false\nij_java_repeat_synchronized = true\nij_java_replace_instanceof_and_cast = false\nij_java_replace_null_check = true\nij_java_replace_sum_lambda_with_method_ref = true\nij_java_resource_list_new_line_after_left_paren = false\nij_java_resource_list_right_paren_on_new_line = false\nij_java_resource_list_wrap = off\nij_java_session_dd_suffix = EJB\nij_java_session_eb_suffix = Bean\nij_java_session_hi_suffix = Home\nij_java_session_lhi_prefix = Local\nij_java_session_lhi_suffix = Home\nij_java_session_li_prefix = Local\nij_java_session_si_suffix = Service\nij_java_space_after_closing_angle_bracket_in_type_argument = false\nij_java_space_after_colon = true\nij_java_space_after_comma = true\nij_java_space_after_comma_in_type_arguments = true\nij_java_space_after_for_semicolon = true\nij_java_space_after_quest = true\nij_java_space_after_type_cast = true\nij_java_space_before_annotation_array_initializer_left_brace = false\nij_java_space_before_annotation_parameter_list = false\nij_java_space_before_array_initializer_left_brace = false\nij_java_space_before_catch_keyword = true\nij_java_space_before_catch_left_brace = true\nij_java_space_before_catch_parentheses = true\nij_java_space_before_class_left_brace = true\nij_java_space_before_colon = true\nij_java_space_before_colon_in_foreach = true\nij_java_space_before_comma = false\nij_java_space_before_do_left_brace = true\nij_java_space_before_else_keyword = true\nij_java_space_before_else_left_brace = true\nij_java_space_before_finally_keyword = true\nij_java_space_before_finally_left_brace = true\nij_java_space_before_for_left_brace = true\nij_java_space_before_for_parentheses = true\nij_java_space_before_for_semicolon = false\nij_java_space_before_if_left_brace = true\nij_java_space_before_if_parentheses = true\nij_java_space_before_method_call_parentheses = false\nij_java_space_before_method_left_brace = true\nij_java_space_before_method_parentheses = false\nij_java_space_before_opening_angle_bracket_in_type_parameter = false\nij_java_space_before_quest = true\nij_java_space_before_switch_left_brace = true\nij_java_space_before_switch_parentheses = true\nij_java_space_before_synchronized_left_brace = true\nij_java_space_before_synchronized_parentheses = true\nij_java_space_before_try_left_brace = true\nij_java_space_before_try_parentheses = true\nij_java_space_before_type_parameter_list = false\nij_java_space_before_while_keyword = true\nij_java_space_before_while_left_brace = true\nij_java_space_before_while_parentheses = true\nij_java_space_inside_one_line_enum_braces = false\nij_java_space_within_empty_array_initializer_braces = false\nij_java_space_within_empty_method_call_parentheses = false\nij_java_space_within_empty_method_parentheses = false\nij_java_spaces_around_additive_operators = true\nij_java_spaces_around_assignment_operators = true\nij_java_spaces_around_bitwise_operators = true\nij_java_spaces_around_equality_operators = true\nij_java_spaces_around_lambda_arrow = true\nij_java_spaces_around_logical_operators = true\nij_java_spaces_around_method_ref_dbl_colon = false\nij_java_spaces_around_multiplicative_operators = true\nij_java_spaces_around_relational_operators = true\nij_java_spaces_around_shift_operators = true\nij_java_spaces_around_type_bounds_in_type_parameters = true\nij_java_spaces_around_unary_operator = false\nij_java_spaces_within_angle_brackets = false\nij_java_spaces_within_annotation_parentheses = false\nij_java_spaces_within_array_initializer_braces = false\nij_java_spaces_within_braces = false\nij_java_spaces_within_brackets = false\nij_java_spaces_within_cast_parentheses = false\nij_java_spaces_within_catch_parentheses = false\nij_java_spaces_within_for_parentheses = false\nij_java_spaces_within_if_parentheses = false\nij_java_spaces_within_method_call_parentheses = false\nij_java_spaces_within_method_parentheses = false\nij_java_spaces_within_parentheses = false\nij_java_spaces_within_switch_parentheses = false\nij_java_spaces_within_synchronized_parentheses = false\nij_java_spaces_within_try_parentheses = false\nij_java_spaces_within_while_parentheses = false\nij_java_special_else_if_treatment = true\nij_java_subclass_name_suffix = Impl\nij_java_ternary_operation_signs_on_next_line = false\nij_java_ternary_operation_wrap = off\nij_java_test_name_suffix = Test\nij_java_throws_keyword_wrap = off\nij_java_throws_list_wrap = off\nij_java_use_external_annotations = false\nij_java_use_fq_class_names = false\nij_java_use_relative_indents = false\nij_java_use_single_class_imports = true\nij_java_variable_annotation_wrap = off\nij_java_visibility = public\nij_java_while_brace_force = never\nij_java_while_on_new_line = false\nij_java_wrap_comments = false\nij_java_wrap_first_method_in_call_chain = false\nij_java_wrap_long_lines = false\n\n\n[.editorconfig]\nij_editorconfig_align_group_field_declarations = false\nij_editorconfig_space_after_colon = false\nij_editorconfig_space_after_comma = true\nij_editorconfig_space_before_colon = false\nij_editorconfig_space_before_comma = false\nij_editorconfig_spaces_around_assignment_operators = true\n\n[{*.kts,*.kt}]\nij_kotlin_align_in_columns_case_branch = false\nij_kotlin_align_multiline_binary_operation = false\nij_kotlin_align_multiline_extends_list = false\nij_kotlin_align_multiline_method_parentheses = false\nij_kotlin_align_multiline_parameters = true\nij_kotlin_align_multiline_parameters_in_calls = false\nij_kotlin_assignment_wrap = off\nij_kotlin_blank_lines_after_class_header = 0\nij_kotlin_blank_lines_around_block_when_branches = 0\nij_kotlin_block_comment_at_first_column = true\nij_kotlin_call_parameters_new_line_after_left_paren = false\nij_kotlin_call_parameters_right_paren_on_new_line = false\nij_kotlin_call_parameters_wrap = off\nij_kotlin_catch_on_new_line = false\nij_kotlin_class_annotation_wrap = split_into_lines\nij_kotlin_continuation_indent_for_chained_calls = true\nij_kotlin_continuation_indent_for_expression_bodies = true\nij_kotlin_continuation_indent_in_argument_lists = true\nij_kotlin_continuation_indent_in_elvis = true\nij_kotlin_continuation_indent_in_if_conditions = true\nij_kotlin_continuation_indent_in_parameter_lists = true\nij_kotlin_continuation_indent_in_supertype_lists = true\nij_kotlin_else_on_new_line = false\nij_kotlin_enum_constants_wrap = off\nij_kotlin_extends_list_wrap = off\nij_kotlin_field_annotation_wrap = split_into_lines\nij_kotlin_finally_on_new_line = false\nij_kotlin_if_rparen_on_new_line = false\nij_kotlin_import_nested_classes = false\nij_kotlin_insert_whitespaces_in_simple_one_line_method = true\nij_kotlin_keep_blank_lines_before_right_brace = 2\nij_kotlin_keep_blank_lines_in_code = 2\nij_kotlin_keep_blank_lines_in_declarations = 2\nij_kotlin_keep_first_column_comment = true\nij_kotlin_keep_indents_on_empty_lines = false\nij_kotlin_keep_line_breaks = true\nij_kotlin_lbrace_on_next_line = false\nij_kotlin_line_comment_add_space = false\nij_kotlin_line_comment_at_first_column = true\nij_kotlin_method_annotation_wrap = split_into_lines\nij_kotlin_method_call_chain_wrap = off\nij_kotlin_method_parameters_new_line_after_left_paren = false\nij_kotlin_method_parameters_right_paren_on_new_line = false\nij_kotlin_method_parameters_wrap = off\nij_kotlin_name_count_to_use_star_import = 2147483647\nij_kotlin_name_count_to_use_star_import_for_members = 2147483647\nij_kotlin_parameter_annotation_wrap = off\nij_kotlin_space_after_comma = true\nij_kotlin_space_after_extend_colon = true\nij_kotlin_space_after_type_colon = true\nij_kotlin_space_before_catch_parentheses = true\nij_kotlin_space_before_comma = false\nij_kotlin_space_before_extend_colon = true\nij_kotlin_space_before_for_parentheses = true\nij_kotlin_space_before_if_parentheses = true\nij_kotlin_space_before_lambda_arrow = true\nij_kotlin_space_before_type_colon = false\nij_kotlin_space_before_when_parentheses = true\nij_kotlin_space_before_while_parentheses = true\nij_kotlin_spaces_around_additive_operators = true\nij_kotlin_spaces_around_assignment_operators = true\nij_kotlin_spaces_around_equality_operators = true\nij_kotlin_spaces_around_function_type_arrow = true\nij_kotlin_spaces_around_logical_operators = true\nij_kotlin_spaces_around_multiplicative_operators = true\nij_kotlin_spaces_around_range = false\nij_kotlin_spaces_around_relational_operators = true\nij_kotlin_spaces_around_unary_operator = false\nij_kotlin_spaces_around_when_arrow = true\nij_kotlin_variable_annotation_wrap = off\nij_kotlin_while_on_new_line = false\nij_kotlin_wrap_elvis_expressions = 1\nij_kotlin_wrap_expression_body_functions = 0\nij_kotlin_wrap_first_method_in_call_chain = false\n\n\n[{*.yml,*.yaml}]\nindent_size = 2\nij_yaml_keep_indents_on_empty_lines = false\nij_yaml_keep_line_breaks = true\n\n[{.eslintrc,bowerrc,.babelrc,jest.config,.stylelintrc,*.jsb3,*.jsb2,*.json}]\nindent_size = 2\nij_json_keep_blank_lines_in_code = 0\nij_json_keep_indents_on_empty_lines = false\nij_json_keep_line_breaks = true\nij_json_space_after_colon = true\nij_json_space_after_comma = true\nij_json_space_before_colon = true\nij_json_space_before_comma = false\nij_json_spaces_within_braces = false\nij_json_spaces_within_brackets = false\nij_json_wrap_long_lines = false\n\n[{spring.schemas,spring.handlers,*.properties}]\nij_properties_align_group_field_declarations = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "target/\n.classpath\n.idea\n*.iml\n.project\n.settings/\n.gradle/\nbuild/\n.attach_pid*\nmicronaut/micronaut-test/dependency-reduced-pom.xml\ndependency-reduced-pom.xml\n.vscode/settings.json\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.546875,
          "content": "ShedLock\n========\n[![Apache License 2](https://img.shields.io/badge/license-ASF2-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0.txt) [![Build Status](https://github.com/lukas-krecan/ShedLock/workflows/CI/badge.svg)](https://github.com/lukas-krecan/ShedLock/actions) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/net.javacrumbs.shedlock/shedlock-parent/badge.svg)](https://maven-badges.herokuapp.com/maven-central/net.javacrumbs.shedlock/shedlock-parent)\n\nShedLock makes sure that your scheduled tasks are executed at most once at the same time.\nIf a task is being executed on one node, it acquires a lock which prevents execution of the same task from another node (or thread).\nPlease note, that **if one task is already being executed on one node, execution on other nodes does not wait, it is simply skipped**.\n\nShedLock uses an external store like Mongo, JDBC database, Redis, Hazelcast, ZooKeeper or others for coordination.\n\nFeedback and pull-requests welcome!\n\n#### ShedLock is not a distributed scheduler\nPlease note that ShedLock is not and will never be full-fledged scheduler, it's just a lock. If you need a distributed\nscheduler, please use another project ([db-scheduler](https://github.com/kagkarlsson/db-scheduler), [JobRunr](https://www.jobrunr.io/en/)).\nShedLock is designed to be used in situations where you have scheduled tasks that are not ready to be executed in parallel, but can be safely\nexecuted repeatedly. Moreover, the locks are time-based and ShedLock assumes that clocks on the nodes are synchronized.\n\n+ [Components](#components)\n+ [Usage](#usage)\n+ [Lock Providers](#configure-lockprovider)\n  - [JdbcTemplate](#jdbctemplate)\n  - [R2DBC](#r2dbc)\n  - [jOOQ](#jooq-lock-provider)\n  - [Micronaut Data Jdbc](#micronaut-data-jdbc)\n  - [Mongo](#mongo)\n  - [DynamoDB 2](#dynamodb-2)\n  - [ZooKeeper (using Curator)](#zookeeper-using-curator)\n  - [Redis (using Spring RedisConnectionFactory)](#redis-using-spring-redisconnectionfactory)\n  - [Redis (using Spring ReactiveRedisConnectionFactory)](#redis-using-spring-reactiveredisconnectionfactory)\n  - [Redis (using Jedis)](#redis-using-jedis)\n  - [Hazelcast](#hazelcast)\n  - [Couchbase](#couchbase)\n  - [ElasticSearch](#elasticsearch)\n  - [OpenSearch](#opensearch)\n  - [CosmosDB](#cosmosdb)\n  - [Cassandra](#cassandra)\n  - [Consul](#consul)\n  - [ArangoDB](#arangodb)\n  - [Neo4j](#neo4j)\n  - [Etcd](#etcd)\n  - [Apache Ignite](#apache-ignite)\n  - [In-Memory](#in-memory)\n  - [Memcached](#memcached-using-spymemcached)\n  - [Datastore](#datastore)\n  - [S3](#s3)\n+ [Multi-tenancy](#multi-tenancy)\n+ [Customization](#customization)\n+ [Duration specification](#duration-specification)\n+ [Extending the lock](#extending-the-lock)\n+ [Micronaut integration](#micronaut-integration)\n+ [CDI integration](#cdi-integration)\n+ [Locking without a framework](#locking-without-a-framework)\n+ [Troubleshooting](#troubleshooting)\n+ [Modes of Spring integration](#modes-of-spring-integration)\n  - [Scheduled method proxy](#scheduled-method-proxy)\n  - [TaskScheduler proxy](#taskscheduler-proxy)\n+ [Compatibility matrix](#compatibility-matrix)\n+ [Release notes](#release-notes)\n\n\n## Components\nShedlock consists of three parts\n* Core - The locking mechanism\n* Integration - integration with your application, using Spring AOP, Micronaut AOP or manual code\n* Lock provider - provides the lock using an external process like SQL database, Mongo, Redis and others\n\n## Usage\nTo use ShedLock, you do the following\n1) Enable and configure Scheduled locking\n2) Annotate your scheduled tasks\n3) Configure a Lock Provider\n\n\n### Enable and configure Scheduled locking (Spring)\nFirst of all, we have to import the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-spring</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nNow we need to integrate the library with Spring. In order to enable schedule locking use `@EnableSchedulerLock` annotation\n\n```java\n@Configuration\n@EnableScheduling\n@EnableSchedulerLock(defaultLockAtMostFor = \"10m\")\nclass MySpringConfiguration {\n    ...\n}\n```\n\n### Annotate your scheduled tasks\n\n```java\nimport net.javacrumbs.shedlock.spring.annotation.SchedulerLock;\n\n...\n\n@Scheduled(...)\n@SchedulerLock(name = \"scheduledTaskName\")\npublic void scheduledTask() {\n    // To assert that the lock is held (prevents misconfiguration errors)\n    LockAssert.assertLocked();\n    // do something\n}\n```\n### Behavior\n1. Only methods annotated by `@SchedulerLock` are locked, the library ignores all other scheduled tasks. By default, the lock will be applied\neven if the method is called directly, not only thorough the scheduler.\n2. Only one task with the same name can be executed at the same time.\n3. The lock is released as soon as the task is finished (unless `lockAtLeastFor` is specified, see below)\n4. If the JVM crashes before the task finishes, `lockAtMostFor` attribute comes to play. The lock is always released after\n`lockAtMostFor`. **You have to set `lockAtMostFor` to a value which is much longer than normal execution time.** If the task takes longer than\n`lockAtMostFor` the resulting behavior may be unpredictable (more than one process will effectively hold the lock).\n5. If you don't specify `lockAtMostFor` in `@SchedulerLock`, the default value from `@EnableSchedulerLock` will be used.\n6. You can set `lockAtLeastFor` attribute which specifies minimum amount of time for which the lock should be kept.\nIts main purpose is to prevent execution from multiple nodes in case of really short tasks and clock difference between the nodes.\n7. All the annotations support Spring Expression Language (SpEL).\n\n#### Example\nLet's say you have a task which you execute every 15 minutes and which usually takes few minutes to run.\nMoreover, you want to execute it at most once per 15 minutes. In that case, you can configure it like this:\n\n```java\nimport net.javacrumbs.shedlock.core.SchedulerLock;\n\n\n@Scheduled(cron = \"0 */15 * * * *\")\n@SchedulerLock(name = \"scheduledTaskName\", lockAtMostFor = \"14m\", lockAtLeastFor = \"14m\")\npublic void scheduledTask() {\n    // do something\n}\n\n```\nBy setting `lockAtMostFor` we make sure that the lock is released even if the node dies. By setting `lockAtLeastFor`\nwe make sure it's not executed more than once in fifteen minutes.\nPlease note that **`lockAtMostFor` is just a safety net in case that the node executing the task dies, so set it to\na time that is significantly larger than maximum estimated execution time.**  If the task takes longer than `lockAtMostFor`,\nit may be executed again and the results will be unpredictable (more processes will hold the lock).\n\n### Configure LockProvider\nThere are several implementations of LockProvider.\n\n#### JdbcTemplate\nFirst, create lock table (**please note that `name` has to be primary key**)\n\n```sql\n# MySQL, MariaDB\nCREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP(3) NOT NULL,\n    locked_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3), locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));\n\n# Postgres\nCREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP NOT NULL,\n    locked_at TIMESTAMP NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));\n\n# Oracle\nCREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP(3) NOT NULL,\n    locked_at TIMESTAMP(3) NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));\n\n# MS SQL\nCREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until datetime2 NOT NULL,\n    locked_at datetime2 NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name));\n\n# DB2\nCREATE TABLE shedlock(name VARCHAR(64) NOT NULL PRIMARY KEY, lock_until TIMESTAMP NOT NULL,\n    locked_at TIMESTAMP NOT NULL, locked_by VARCHAR(255) NOT NULL);\n```\n\nOr use [this](micronaut/test/micronaut4-jdbc/src/main/resources/db/liquibase-changelog.xml) liquibase change-set.\n\nAdd dependency\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-jdbc-template</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.jdbctemplate.JdbcTemplateLockProvider;\n\n...\n@Bean\npublic LockProvider lockProvider(DataSource dataSource) {\n            return new JdbcTemplateLockProvider(\n                JdbcTemplateLockProvider.Configuration.builder()\n                .withJdbcTemplate(new JdbcTemplate(dataSource))\n                .usingDbTime() // Works on Postgres, MySQL, MariaDb, MS SQL, Oracle, DB2, HSQL and H2\n                .build()\n            );\n}\n```\nBy specifying `usingDbTime()` the lock provider will use UTC time based on the DB server clock.\nIf you do not specify this option, clock from the app server will be used (the clocks on app servers may not be\nsynchronized thus leading to various locking issues).\n\nIt's strongly recommended to use `usingDbTime()` option as it uses DB engine specific SQL that prevents INSERT conflicts.\nSee more details [here](https://stackoverflow.com/a/76774461/277042).\n\nFor more fine-grained configuration use other options of the `Configuration` object\n\n```java\nnew JdbcTemplateLockProvider(builder()\n    .withTableName(\"shdlck\")\n    .withColumnNames(new ColumnNames(\"n\", \"lck_untl\", \"lckd_at\", \"lckd_by\"))\n    .withJdbcTemplate(new JdbcTemplate(getDatasource()))\n    .withLockedByValue(\"my-value\")\n    .withDbUpperCase(true)\n    .build())\n```\n\nIf you need to specify a schema, you can set it in the table name using the usual dot notation\n`new JdbcTemplateLockProvider(datasource, \"my_schema.shedlock\")`\n\nTo use a database with case-sensitive table and column names, the `.withDbUpperCase(true)` flag can be used.\nDefault is `false` (lowercase).\n\n\n#### Warning\n**Do not manually delete lock row from the DB table.** ShedLock has an in-memory cache of existing lock rows\nso the row will NOT be automatically recreated until application restart. If you need to, you can edit the row/document, risking only\nthat multiple locks will be held.\n\n#### R2DBC\nIf you are really brave, you can try experimental R2DBC support. Please keep in mind that the\ncapabilities of this lock provider are really limited and that the whole ecosystem around R2DBC\nis in flux and may easily break.\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-r2dbc</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand use it.\n\n```java\n@Override\nprotected LockProvider getLockProvider() {\n    return new R2dbcLockProvider(connectionFactory);\n}\n```\nI recommend using [R2DBC connection pool](https://github.com/r2dbc/r2dbc-pool).\n\n#### jOOQ lock provider\nFirst, create lock table as described in the [JdbcTemplate](#jdbctemplate) section above.\n\nAdd dependency\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-jooq</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.jooq;\n\n...\n@Bean\npublic LockProvider getLockProvider(DSLContext dslContext) {\n    return new JooqLockProvider(dslContext);\n}\n```\n\njOOQ provider has a bit different transactional behavior. While the other JDBC lock providers\ncreate new transaction (with REQUIRES_NEW), jOOQ [does not support setting it](https://github.com/jOOQ/jOOQ/issues/4836).\nShedLock tries to create a new transaction, but depending on your set-up, ShedLock DB operations may\nend-up being part of the enclosing transaction.\n\nIf you need to configure the table name, schema or column names, you can use jOOQ render mapping as\ndescribed [here](https://github.com/lukas-krecan/ShedLock/issues/1830#issuecomment-2015820509).\n\n#### Micronaut Data Jdbc\nIf you are using Micronaut data, and you do not want to add dependency on Spring JDBC, you can use\nMicronaut JDBC support. Just be aware that it has just a basic functionality when compared to\nthe JdbcTemplate provider.\n\nFirst, create lock table as described in the [JdbcTemplate](#jdbctemplate) section above.\n\nAdd dependency\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-jdbc-micronaut</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.jdbc.micronaut.MicronautJdbcLockProvider;\n\n...\n@Singleton\npublic LockProvider lockProvider(TransactionOperations<Connection> transactionManager) {\n    return new MicronautJdbcLockProvider(transactionManager);\n}\n```\n\n#### Mongo\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-mongo</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.mongo.MongoLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(MongoClient mongo) {\n    return new MongoLockProvider(mongo.getDatabase(databaseName))\n}\n```\n\nPlease note that MongoDB integration requires Mongo >= 2.4 and mongo-java-driver >= 3.7.0\n\n\n#### Reactive Mongo\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-mongo-reactivestreams</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.mongo.reactivestreams.ReactiveStreamsMongoLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(MongoClient mongo) {\n    return new ReactiveStreamsMongoLockProvider(mongo.getDatabase(databaseName))\n}\n```\n\nPlease note that MongoDB integration requires Mongo >= 4.x and mongodb-driver-reactivestreams 1.x\n\n\n#### DynamoDB 2\nDepends on AWS SDK v2.\n\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-dynamodb2</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.dynamodb2.DynamoDBLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(software.amazon.awssdk.services.dynamodb.DynamoDbClient dynamoDB) {\n    return new DynamoDBLockProvider(dynamoDB, \"Shedlock\");\n}\n```\n\n> Please note that the lock table must be created externally with `_id` as a partition key.\n> `DynamoDBUtils#createLockTable` may be used for creating it programmatically.\n> A table definition is available from `DynamoDBLockProvider`'s Javadoc.\n\n#### ZooKeeper (using Curator)\nImport\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-zookeeper-curator</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n\n```java\nimport net.javacrumbs.shedlock.provider.zookeeper.curator.ZookeeperCuratorLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(org.apache.curator.framework.CuratorFramework client) {\n    return new ZookeeperCuratorLockProvider(client);\n}\n```\nBy default, nodes for locks will be created under `/shedlock` node.\n\n#### Redis (using Spring RedisConnectionFactory)\nImport\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-redis-spring</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n\n```java\nimport net.javacrumbs.shedlock.provider.redis.spring.RedisLockProvider;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\n\n...\n\n@Bean\npublic LockProvider lockProvider(RedisConnectionFactory connectionFactory) {\n    return new RedisLockProvider(connectionFactory, ENV);\n}\n```\n\n#### Redis (using Spring ReactiveRedisConnectionFactory)\nImport\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-redis-spring</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n\n```java\nimport net.javacrumbs.shedlock.provider.redis.spring.ReactiveRedisLockProvider;\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n\n...\n\n@Bean\npublic LockProvider lockProvider(ReactiveRedisConnectionFactory connectionFactory) {\n    return new ReactiveRedisLockProvider.Builder(connectionFactory)\n        .environment(ENV)\n        .build();\n}\n```\n\nRedis lock provider uses classical lock mechanism as described [here](https://redis.io/commands/setnx#design-pattern-locking-with-codesetnxcode)\nwhich may not be reliable in case of Redis master failure.\n\n#### Redis (using Jedis)\nImport\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-redis-jedis4</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n\n```java\nimport net.javacrumbs.shedlock.provider.redis.jedis.JedisLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(JedisPool jedisPool) {\n    return new JedisLockProvider(jedisPool, ENV);\n}\n```\n\n#### Hazelcast\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-hazelcast4</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.hazelcast4.HazelcastLockProvider;\n\n...\n\n@Bean\npublic HazelcastLockProvider lockProvider(HazelcastInstance hazelcastInstance) {\n    return new HazelcastLockProvider(hazelcastInstance);\n}\n```\n\n#### Couchbase\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-couchbase-javaclient3</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.couchbase.javaclient.CouchbaseLockProvider;\n\n...\n\n@Bean\npublic CouchbaseLockProvider lockProvider(Bucket bucket) {\n    return new CouchbaseLockProvider(bucket);\n}\n```\n\nFor Couchbase 3 use `shedlock-provider-couchbase-javaclient3` module and `net.javacrumbs.shedlock.provider.couchbase3` package.\n\n#### Elasticsearch\nI am really not sure if it's a good idea to use Elasticsearch as a lock provider. But if you have no other choice, you can. Import the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-elasticsearch8</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport static net.javacrumbs.shedlock.provider.elasticsearch8.ElasticsearchLockProvider;\n\n...\n\n@Bean\npublic ElasticsearchLockProvider lockProvider(ElasticsearchClient client) {\n    return new ElasticsearchLockProvider(client);\n}\n```\n\n#### OpenSearch\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <!-- Use shedlock-provider-opensearch if you are still using RestHighLevelClient -->\n    <artifactId>shedlock-provider-opensearch-java</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport static net.javacrumbs.shedlock.provider.opensearch.java.OpenSearchLockProvider;\n\n...\n\n@Bean\npublic OpenSearchLockProvider lockProvider(OpenSearchClient openSearchClient) {\n    return new OpenSearchLockProvider(openSearchClient);\n}\n```\n\n#### CosmosDB\nCosmosDB support is provided by a third-party module available [here](https://github.com/jesty/shedlock-provider-cosmosdb)\n\n\n#### Cassandra\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-cassandra</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.cassandra.CassandraLockProvider;\nimport net.javacrumbs.shedlock.provider.cassandra.CassandraLockProvider.Configuration;\n\n...\n\n@Bean\npublic CassandraLockProvider lockProvider(CqlSession cqlSession) {\n    return new CassandraLockProvider(Configuration.builder().withCqlSession(cqlSession).withTableName(\"lock\").build());\n}\n```\n\nExample for creating default keyspace and table in local Cassandra instance:\n```sql\nCREATE KEYSPACE shedlock with replication={'class':'SimpleStrategy', 'replication_factor':1} and durable_writes=true;\nCREATE TABLE shedlock.lock (name text PRIMARY KEY, lockUntil timestamp, lockedAt timestamp, lockedBy text);\n```\n\nPlease, note that CassandraLockProvider uses Cassandra driver v4, which is part of Spring Boot since 2.3.\n\n#### Consul\nConsulLockProvider has one limitation: lockAtMostFor setting will have a minimum value of 10 seconds. It is dictated by consul's session limitations.\n\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-consul</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.consul.ConsulLockProvider;\n\n...\n\n@Bean // for micronaut please define preDestroy property @Bean(preDestroy=\"close\")\npublic ConsulLockProvider lockProvider(com.ecwid.consul.v1.ConsulClient consulClient) {\n    return new ConsulLockProvider(consulClient);\n}\n```\n\nPlease, note that Consul lock provider uses [ecwid consul-api client](https://github.com/Ecwid/consul-api), which is part of spring cloud consul integration (the `spring-cloud-starter-consul-discovery` package).\n\n#### ArangoDB\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-arangodb</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.arangodb.ArangoLockProvider;\n\n...\n\n@Bean\npublic ArangoLockProvider lockProvider(final ArangoOperations arangoTemplate) {\n    return new ArangoLockProvider(arangoTemplate.driver().db(DB_NAME));\n}\n```\n\nPlease, note that ArangoDB lock provider uses ArangoDB driver v6.7, which is part of [arango-spring-data](https://github.com/arangodb/spring-data) in version 3.3.0.\n\n#### Neo4j\nImport the project\n\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-neo4j</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n```java\nimport net.javacrumbs.shedlock.core.LockConfiguration;\n\n...\n\n@Bean\nNeo4jLockProvider lockProvider(org.neo4j.driver.Driver driver) {\n    return new Neo4jLockProvider(driver);\n}\n```\n\nPlease make sure that ```neo4j-java-driver``` version used by ```shedlock-provider-neo4j``` matches the driver version used in your\nproject (if you use `spring-boot-starter-data-neo4j`, it is probably provided transitively).\n\n#### Etcd\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-etcd-jetcd</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.etcd.jetcd.EtcdLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(Client client) {\n    return new EtcdLockProvider(client);\n}\n```\n\n\n#### Apache Ignite\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-ignite</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure:\n\n```java\nimport net.javacrumbs.shedlock.provider.ignite.IgniteLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(Ignite ignite) {\n    return new IgniteLockProvider(ignite);\n}\n```\n\n#### In-Memory\nIf you want to use a lock provider in tests there is an in-Memory implementation.\n\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-inmemory</artifactId>\n    <version>6.2.0</version>\n    <scope>test</scope>\n</dependency>\n```\n\n```java\nimport net.javacrumbs.shedlock.provider.inmemory.InMemoryLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider() {\n    return new InMemoryLockProvider();\n}\n```\n\n#### Memcached (using spymemcached)\nPlease, be aware that memcached is not a database but a cache. It means that if the cache is full,\n[the lock may be released prematurely](https://stackoverflow.com/questions/6868256/memcached-eviction-prior-to-key-expiry/10456364#10456364)\n**Use only if you know what you are doing.**\n\nImport\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-memcached-spy</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n\n```java\nimport net.javacrumbs.shedlock.provider.memcached.spy.MemcachedLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(net.spy.memcached.MemcachedClient client) {\n    return new MemcachedLockProvider(client, ENV);\n}\n```\n\nP.S.:\n\nMemcached Standard Protocol:\n- A key (arbitrary string up to 250 bytes in length. No space or newlines for ASCII mode)\n- An expiration time, in `seconds`. '0' means never expire. Can be up to 30 days. After 30 days, is treated as a unix timestamp of an exact date. (support `seconds`、`minutes`、`days`, and less than `30` days)\n\n\n#### Datastore\n\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-datastore</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n```java\nimport net.javacrumbs.shedlock.provider.datastore.DatastoreLockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(com.google.cloud.datastore.Datastore datastore) {\n    return new DatastoreLockProvider(datastore);\n}\n\n```\n#### Spanner\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-spanner</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\nConfigure\n```java\nimport net.javacrumbs.shedlock.provider.spanner.SpannerLockProvider;\n\n...\n\n// Basic\n@Bean\npublic LockProvider lockProvider(DatabaseClient databaseClient) {\n    return new SpannerLockProvider(databaseClientSupplier);\n}\n\n// Custom host, table and column names\n@Bean\npublic LockProvider lockProvider(DatabaseClient databaseClient) {\n    var config = SpannerLockProvider.Configuration.builder()\n        .withDatabaseClient(databaseClientSupplier)\n        .withTableConfiguration(SpannerLockProvider.TableConfiguration.builder()\n            ...\n            // Custom table and column names\n            .build())\n        .withHostName(\"customHostName\")\n        .build();\n\n    return new SpannerLockProvider(config);\n}\n```\n\n#### S3\n\nImport the project\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-provider-s3</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nand configure\n```java\nimport net.javacrumbs.shedlock.provider.s3.S3LockProvider;\n\n...\n\n@Bean\npublic LockProvider lockProvider(com.amazonaws.services.s3.AmazonS3 amazonS3) {\n    return new S3LockProvider(amazonS3, \"BUCKET_NAME\");\n}\n```\n\n## Multi-tenancy\nIf you have multi-tenancy use-case you can use a lock provider similar to this one\n(see the full [example](https://github.com/lukas-krecan/ShedLock/blob/master/providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MultiTenancyLockProviderIntegrationTest.java#L87))\n```java\nprivate static abstract class MultiTenancyLockProvider implements LockProvider {\n    private final ConcurrentHashMap<String, LockProvider> providers = new ConcurrentHashMap<>();\n\n    @Override\n    public @NonNull Optional<SimpleLock> lock(@NonNull LockConfiguration lockConfiguration) {\n        String tenantName = getTenantName(lockConfiguration);\n        return providers.computeIfAbsent(tenantName, this::createLockProvider).lock(lockConfiguration);\n    }\n\n    protected abstract LockProvider createLockProvider(String tenantName) ;\n\n    protected abstract String getTenantName(LockConfiguration lockConfiguration);\n}\n```\n\n## Customization\nYou can customize the behavior of the library by implementing `LockProvider` interface. Let's say you want to implement\na special behavior after a lock is obtained. You can do it like this:\n\n```java\npublic class MyLockProvider implements LockProvider {\n    private final LockProvider delegate;\n\n    public MyLockProvider(LockProvider delegate) {\n        this.delegate = delegate;\n    }\n\n    @Override\n    public Optional<SimpleLock> lock(LockConfiguration lockConfiguration) {\n        Optional<SimpleLock> lock = delegate.lock(lockConfiguration);\n        if (lock.isPresent()) {\n            // do something\n        }\n        return lock;\n    }\n}\n```\n\nYou can see a full example in [TrackingLockProviderWrapper](https://github.com/lukas-krecan/ShedLock/blob/master/shedlock-core/src/main/java/net/javacrumbs/shedlock/util/TrackingLockProviderWrapper.java)\n\n## Duration specification\nAll the annotations where you need to specify a duration support the following formats\n\n* duration+unit - `1s`, `5ms`, `5m`, `1d` (Since 4.0.0)\n* duration in ms - `100` (only Spring integration)\n* ISO-8601 - `PT15M` (see [Duration.parse()](https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-) documentation)\n\n## Extending the lock\nThere are some use-cases which require to extend currently held lock. You can use LockExtender in the\nfollowing way:\n\n```java\nLockExtender.extendActiveLock(Duration.ofMinutes(5), ZERO);\n```\n\nPlease note that not all lock provider implementations support lock extension.\n\n## KeepAliveLockProvider\nThere is also KeepAliveLockProvider that is able to keep the lock alive by periodically extending it. It can be\nused by wrapping the original lock provider. My personal opinion is that it should be used only in special cases,\nit adds more complexity to the library and the flow is harder to reason about so please use moderately.\n\n```java\n@Bean\npublic LockProvider lockProvider(...) {\n    return new  KeepAliveLockProvider(new XyzProvider(...), scheduler);\n}\n```\nKeepAliveLockProvider extends the lock in the middle of the lockAtMostFor interval. For example, if the lockAtMostFor\nis 10 minutes the lock is extended every 5 minutes for 10 minutes until the lock is released. Please note that the minimal\nlockAtMostFor time supported by this provider is 30s. The scheduler is used only for the lock extension, single thread\nshould be enough.\n\n## Micronaut integration\nSince version 4.0.0, it's possible to use Micronaut framework for integration\n\nImport the project:\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <!-- Micronaut 3 -->\n    <artifactId>shedlock-micronaut</artifactId>\n    <!-- For Micronaut 4 use -->\n    <!-- <artifactId>shedlock-micronaut4</artifactId> -->\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure default lockAtMostFor value (application.yml):\n```yaml\nshedlock:\n  defaults:\n    lock-at-most-for: 1m\n```\n\nConfigure lock provider:\n```java\n@Singleton\npublic LockProvider lockProvider() {\n    ... select and configure your lock provider\n}\n```\n\nConfigure the scheduled task:\n```java\n@Scheduled(fixedDelay = \"1s\")\n@SchedulerLock(name = \"myTask\")\npublic void myTask() {\n    assertLocked();\n    ...\n}\n```\n\n## CDI integration\nSince version 5.0.0, it's possible to use CDI for integration (tested only with Quarkus)\n\nImport the project:\n```xml\n<dependency>\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-cdi</artifactId>\n    <version>6.2.0</version>\n</dependency>\n```\n\nConfigure default lockAtMostFor value (application.properties):\n```properties\nshedlock.defaults.lock-at-most-for=PT30S\n```\n\nConfigure lock provider:\n```java\n@Produces\n@Singleton\npublic LockProvider lockProvider() {\n        ...\n}\n```\n\nConfigure the scheduled task:\n```java\n@Scheduled(every = \"1s\")\n@SchedulerLock(name = \"myTask\")\npublic void myTask() {\n    assertLocked();\n    ...\n}\n```\n\nThe implementation only depends on `jakarta.enterprise.cdi-api` and `microprofile-config-api` so it should be\nusable in other CDI compatible frameworks, but it has not been tested with anything else than Quarkus. It's\nbuilt on top of javax annotation as Quarkus has not moved to Jakarta EE namespace yet.\n\nThe support is minimalistic, for example there is no support for expressions in the annotation parameters yet,\nif you need it, feel free to send a PR.\n\n## Locking without a framework\nIt is possible to use ShedLock without a framework\n\n```java\nLockingTaskExecutor executor = new DefaultLockingTaskExecutor(lockProvider);\n\n...\nInstant createdAt = Instant.now();\nDuration lockAtMostFor = Duration.ofSeconds(60);\nDuration lockAtLeastFor = Duration.ZERO;\nexecutor.executeWithLock(runnable, new LockConfiguration(createdAt, \"lockName\", lockAtMostFor, lockAtLeastFor));\n\n```\n\n## Extending the lock\nSome lock providers support extension of the lock. For the time being, it requires manual lock manipulation,\ndirectly using `LockProvider` and calling `extend` method on the `SimpleLock`.\n\n## Multiple LockProvider support in Spring\nSince version 6.0.0 you can use multiple lock provider implementations. Just define them in your application context\nand disambiguate them using `@LockProviderToUse(\"lockProviderBeanName\")` annotation on method, class or package.\nIf the annotation is not found, the execution fails in the runtime, not in startup-time. If you need more dynamic resolution\nof LockProviders, use a LockProvider wrapper as described in [Multi-tenancy](#multi-tenancy).\n\n## Modes of Spring integration\nShedLock supports two modes of Spring integration. One that uses an AOP proxy around scheduled method (PROXY_METHOD)\nand one that proxies TaskScheduler (PROXY_SCHEDULER)\n\n#### Scheduled Method proxy\nSince version 4.0.0, the default mode of Spring integration is an AOP proxy around the annotated method.\n\nThe main advantage of this mode is that it plays well with other frameworks that want to somehow alter the default Spring scheduling mechanism.\nIt also means that *the lock is applied even if you call the method directly*. If the method returns a value and the lock is held\nby another process, null or an empty Optional will be returned (primitive return types are not supported).\n\nFinal and non-public methods are not proxied so either you have to make your scheduled methods public and non-final or use TaskScheduler proxy.\n\n![Method proxy sequenceDiagram](https://github.com/lukas-krecan/ShedLock/raw/master/documentation/method_proxy.png)\n\n#### TaskScheduler proxy (deprecated)\nThis mode wraps Spring `TaskScheduler` in an AOP proxy. **This mode does not play well with instrumentation libraries**\nlike opentelementry that also wrap TaskScheduler. Please only use it if you know what you are doing.\nIt can be switched-on like this (PROXY_SCHEDULER was the default method before 4.0.0):\n\n```java\n@EnableSchedulerLock(interceptMode = PROXY_SCHEDULER)\n```\n\nIf you do not specify your task scheduler, a default one is created for you. If you have special needs, just create a bean implementing `TaskScheduler`\ninterface, and it will get wrapped into the AOP proxy automatically.\n\n```java\n@Bean\npublic TaskScheduler taskScheduler() {\n    return new MySpecialTaskScheduler();\n}\n```\n\nAlternatively, you can define a bean of type `ScheduledExecutorService` and it will automatically get used by the tasks\nscheduling mechanism.\n\n![TaskScheduler proxy sequence diagram](https://github.com/lukas-krecan/ShedLock/raw/master/documentation/scheduler_proxy.png)\n\n### Spring XML configuration\nSpring XML configuration is not supported as of version 3.0.0. If you need it, please use version 2.6.0 or file an issue explaining why it is needed.\n\n## Lock assert\nTo prevent misconfiguration errors, like AOP misconfiguration, missing annotation etc., you can assert that the lock\nworks by using LockAssert:\n\n```java\n@Scheduled(...)\n@SchedulerLock(..)\npublic void scheduledTask() {\n    // To assert that the lock is held (prevents misconfiguration errors)\n    LockAssert.assertLocked();\n    // do something\n}\n```\n\nIn unit tests you can switch-off the assertion by calling `LockAssert.TestHelper.makeAllAssertsPass(true)` on given thread (as in this [example](https://github.com/lukas-krecan/ShedLock/commit/e8d63b7c56644c4189e0a8b420d8581d6eae1443)).\n\n## Kotlin gotchas\nThe library is tested with Kotlin and works fine. The only issue is Spring AOP which does not work on final method. If you use `@SchedulerLock` with `@Component`\nannotation, everything should work since Kotlin Spring compiler plugin will automatically 'open' the method for you. If `@Component` annotation is not present, you\nhave to open the method by yourself. (see [this issue](https://github.com/lukas-krecan/ShedLock/issues/1268) for more details)\n\n## Caveats\nLocks in ShedLock have an expiration time which leads to the following possible issues.\n1. If the task runs longer than `lockAtMostFor`, the task can be executed more than once\n2. If the clock difference between two nodes is more than `lockAtLeastFor` or minimal execution time the task can be\nexecuted more than once.\n\n## Troubleshooting\nHelp, ShedLock does not do what it's supposed to do!\n\n1. Upgrade to the newest version\n2. Use [LockAssert](https://github.com/lukas-krecan/ShedLock#lock-assert) to ensure that AOP is correctly configured.\n   - If it does not work, please read about Spring AOP internals (for example [here](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-proxying))\n3. Check the storage. If you are using JDBC, check the ShedLock table. If it's empty, ShedLock is not properly configured.\nIf there is more than one record with the same name, you are missing a primary key.\n4. Use ShedLock debug log. ShedLock logs interesting information on DEBUG level with logger name `net.javacrumbs.shedlock`.\nIt should help you to see what's going on.\n5. For short-running tasks consider using `lockAtLeastFor`. If the tasks are short-running, they could be executed one\nafter another, `lockAtLeastFor` can prevent it.\n\n# Compatibility matrix\n\n| ShedLock Version | Minimal JVM version | Tested with                                                        |\n|------------------|---------------------|--------------------------------------------------------------------|\n| 6.x.x            | 17                  | Spring 6.2, 6.1 <br/>Spring Boot 3.4, 3.3 <br/>Micronaut 4         |\n| 5.x.x            | 17                  | Spring 6.1, 6.0 <br/>Spring Boot 3.4, 3.3, 3.2 <br/>Micronaut 3, 4 |\n| 4.x.x            | 8                   | Spring 6.0, 5.3 <br/>Spring Boot 3.0, 2.7, 2.6                     |\n| 3.x.x            | 8                   | Spring 5.2, 5.1 <br/>Spring Boot 2.2, 2.1                          |\n| 2.x.x            | 8                   | Spring 5.1, 5.0 <br/>Spring Boot 2.1                               |\n| 1.x.x            | 8                   | Spring 5.0 <br/>Spring Boot 2.0                                    |\n\nShedLock may work with additional versions of the Spring, this table just depicts what it was tested with.\n\n\n# Release notes\nSee [here](RELEASES.md)\n"
        },
        {
          "name": "RELEASES.md",
          "type": "blob",
          "size": 13.4921875,
          "content": "# Release notes\n\n## 6.2.0 (2025-01-08)\n* Support OpenSearch Java client (thanks @harisonde)\n* Dependency updates\n\n## 6.1.0 (2025-01-06)\n* Support for S3 lock provider (thanks @caiooliveiraeti)\n* Dependency updates\n\n## 6.0.2\n* #2272 Don't fail on startup if LockProvider not found\n* Dependency updates\n\n## 6.0.1\n* Support for multiple LockProviders\n* cdi-vintage module removed\n* Micronaut 3 support removed\n* micronaut-jdbc built on top of Micronaut 4\n* PROXY_SCHEDULER mode deprecated\n* Cassandra lock provider stated to use the org.apache.cassandra driver\n* Dependency updates\n\n## 5.16.0 (2024-09-06)\n* Support for custome partition key for Dynamo #2128 (thanks @kumar-himans)\n* Upgrade OpenSearch rest-high-level-client #2115 - Breaking change due to rest-high-level-client backward incompatibility\n* Dependency updates\n\n## 5.15.1 (2024-08-27)\n* Fix for Neo4j Enterprise #2099 (thanks @tle130475c)\n* Dependency updates\n\n## 5.15.0 (2024-08-15)\n* Dependency updates\n* ElasticSearch updated to 8.15.0 containing backward incompatible change (thanks @mputz86)\n\n## 5.14.0 + 4.48.0 (2024-07-24)\n* RedisLockProvider made extensible (thanks @shubhajyoti-bagchi-groww)\n* Dependency updates\n\n## 5.13.0 (2024-04-05)\n* #1779 Ability to rethrow unexpected exception in JdbcTemplateStorageAccessor\n* Dependency updates\n\n## 5.12.0 (2024-02-29)\n* #1800 Enable lower case for database type when using usingDbTime()\n* #1804 Startup error with Neo4j 5.17.0\n* Dependency updates\n\n## 4.47.0 (2024-03-01)\n* #1800 Enable lower case for database type when using usingDbTime() (thanks @yuagu1)\n\n## 5.11.0 (2024-02-13)\n* #1753 Fix SpEL for methods with parameters\n* Dependency updates\n\n## 5.10.2 (2023-12-07)\n* #1635 fix makeAllAssertsPass locks only once\n* Dependency updates\n\n## 5.10.1 (2023-12-06)\n* #1635 fix makeAllAssertsPass(false) throws NoSuchElementException\n* Dependency updates\n\n## 5.10.0 (2023-11-07)\n* SpannerLockProvider added (thanks @pXius)\n* Dependency updates\n\n## 5.9.1 (2023-10-19)\n* QuarkusRedisLockProvider supports Redis 6.2 (thanks  @ricardojlrufino)\n\n## 5.9.0 (2023-10-15)\n* Support Quarkus 2 Redis client (thanks  @ricardojlrufino)\n* Better handling of timeouts in ReactiveStreamsMongoLockProvider\n* Dependency updates\n\n## 5.8.0 (2023-09-15)\n* Support for Micronaut 4\n* Use Merge instead of Insert for Oracle #1528 (thanks @xmojsic)\n* Dependency updates\n\n## 5.7.0 (2023-08-25)\n* JedisLockProvider supports extending (thanks @shotmk)\n* Better behavior when locks are nested #1493\n\n## 4.46.0 (2023-09-05)\n* JedisLockProvider (version 3) supports extending (thanks @shotmk)\n\n## 4.45.0 (2023-09-04)\n* JedisLockProvider supports extending (thanks @shotmk)\n\n## 5.6.0\n* Ability to explicitly set database product in JdbTemplateLockProvider (thanks @metron2)\n* Removed forgotten versions from BOM\n* Dependency updates\n\n## 5.5.0 (2023-06-19)\n* Datastore support (thanks @mmastika)\n* Dependency updates\n\n## 5.4.0 (2023-06-06)\n* Handle [uncategorized SQL exceptions](https://github.com/lukas-krecan/ShedLock/pull/1442) (thanks @jaam)\n* Dependency updates\n\n## 5.3.0 (2023-05-13)\n* Added shedlock-cdi module (supports newest CDI version)\n* Dependency updates\n\n## 5.2.0 (2023-03-06)\n* Uppercase in JdbcTemplateProvider (thanks @Ragin-LundF)\n* Dependency updates\n\n## 5.1.0 (2023-01-07)\n* Added SpEL support to @SchedulerLock name attribute (thanks @ipalbeniz)\n* Dependency updates\n\n## 5.0.1 (2022-12-10)\n* Work around broken Spring 6 exception translation https://github.com/lukas-krecan/ShedLock/issues/1272\n\n## 4.44.0 (2022-12-29)\n* Insert ignore for MySQL https://github.com/lukas-krecan/ShedLock/commit/8a4ae7ad8103bb47f55d43bccf043ca261c24d7a\n\n## 5.0.0 (2022-12-10)\n* Requires JDK 17\n* Tested with Spring 6 (Spring Boot 3)\n* Micronaut updated to 3.x.x\n* R2DBC 1.x.x (still sucks)\n* Spring Data 3.x.x\n* Rudimentary support for CDI (tested with quarkus)\n* New jOOQ lock provider\n* SLF4j 2\n* Deleted all deprecated code and support for old versions of libraries\n\n## 4.43.0 (2022-12-04)\n* Better logging in JdbcTemplateProvider\n* Dependency updates\n\n## 4.42.0 (2022-09-16)\n* Deprecate old Couchbase lock provider\n* Dependency updates\n\n## 4.41.0 (2022-08-17)\n* Couchbase collection support (thanks @mesuutt)\n* Dependency updates\n\n## 4.40.0 (2022-08-11)\n* Fixed caching issues when the app is started by the DB does not exist yet (#1129)\n* Dependency updates\n\n## 4.39.0 (2022-07-26)\n* Introduced elasticsearch8 LockProvider and deperecated the orignal one (thanks @MarAra)\n* Dependency updates\n\n## 4.38.0 (2022-07-02)\n* ReactiveRedisLockProvider added (thanks @ericwcc)\n* Dependency updates\n\n## 4.37.0 (2022-06-14)\n* OpenSearch provider (thanks @Pinny3)\n* Fix wrong reference to reactive Mongo in BOM #1048\n* Dependency updates\n\n## 4.36.0 (2022-05-28)\n* shedlock-bom module added\n* Dependency updates\n\n## 4.35.0 (2022-05-16)\n* Neo4j allows to specify database thanks @SergeyPlatonov\n* Dependency updates\n\n## 4.34.0 (2022-04-09)\n* Dropped support for Hazelcast <= 3 as it has unfixed vulnerability\n* Dropped support for Spring Data Redis 1 as it is not supported\n* Dependency updates\n\n## 4.33.0\n* memcached provider added (thanks @pinkhello)\n* Dependency updates\n\n## 4.32.0\n* JDBC provider does not change autocommit attribute\n* Dependency updates\n\n## 4.31.0\n* Jedis 4 lock provider\n* Dependency updates\n\n## 4.30.0\n* In-memory lock provider added (thanks @kkocel)\n* Dependency updates\n\n## 4.29.0\n* R2DBC support added (thanks @sokomishalov)\n* Library upgrades\n\n## 4.28.0\n* Neo4j lock provider added (thanks @thimmwork)\n* Library upgrades\n\n## 4.27.0\n* Ability to set transaction isolation in JdbcTemplateLockProvider\n* Library upgrades\n\n## 4.26.0\n* KeepAliveLockProvider introduced\n* Library upgrades\n\n## 4.25.0\n* LockExtender added\n\n## 4.24.0\n* Support for Apache Ignite (thanks @wirtsleg)\n* Library upgrades\n\n## 4.23.0\n* Ability to set serialConsistencyLevel in Cassandra (thanks @DebajitKumarPhukan)\n* Introduced shedlock-provider-jdbc-micronaut module (thanks @drmaas)\n\n## 4.22.1\n* Catching and logging Cassandra exception\n\n## 4.22.0\n* Support for custom keyspace in Cassandra provider\n\n## 4.21.0\n* Elastic unlock using IMMEDIATE refresh policy #422\n* DB2 JDBC lock provider uses microseconds in DB time\n* Various library upgrades\n\n## 4.20.1\n* Fixed DB JDBC server time #378\n\n## 4.20.0\n* Support for etcd (thanks grofoli)\n\n## 4.19.1\n* Fixed devtools compatibility #368\n\n## 4.19.0\n* Support for enhanced configuration in Cassandra provider (thanks DebajitKumarPhukan)\n* LockConfigurationExtractor exposed as a Spring bean #359\n* Handle CannotSerializeTransactionException #364\n\n## 4.18.0\n* Fixed Consul support for tokens and added enhanced Consul configuration (thanks DrWifey)\n\n## 4.17.0\n* Consul support for tokens\n\n## 4.16.0\n* Spring - EnableSchedulerLock.order param added to specify AOP proxy order\n* JDBC - Log unexpected exceptions at ERROR level\n* Hazelcast upgraded to 4.1\n\n## 4.15.1\n* Fix session leak in Consul provider #340 (thanks @haraldpusch)\n\n## 4.15.0\n* ArangoDB lock provider added (thanks @patrick-birkle)\n\n## 4.14.0\n* Support for Couchbase 3 driver (thanks @blitzenzzz)\n* Removed forgotten configuration files form micronaut package (thanks @drmaas)\n* Shutdown hook for Consul (thanks @kaliy)\n\n## 4.13.0\n* Support for Consul (thanks @kaliy)\n* Various dependencies updated\n* Deprecated default LockConfiguration constructor\n\n## 4.12.0\n* Lazy initialization of SqlStatementsSource #258\n\n## 4.11.1\n* MongoLockProvider uses mongodb-driver-sync\n* Removed deprecated constructors from MongoLockProvider\n\n## 4.10.1\n* New Mongo reactive streams driver (thanks @codependent)\n\n## 4.9.3\n* Fixed JdbcTemplateLockProvider useDbTime() locking #244 thanks @gjorgievskivlatko\n\n## 4.9.2\n* Do not fail on DB type determining code if DB connection is not available\n\n## 4.9.1\n* Support for server time in DB2\n* removed shedlock-provider-jdbc-internal module\n\n## 4.9.0\n* Support for server time in JdbcTemplateLockProvider\n* Using custom non-null annotations\n* Trimming time precision to milliseconds\n* Micronaut upgraded to 1.3.4\n* Add automatic DB tests for Oracle, MariaDB and MS SQL.\n\n## 4.8.0\n* DynamoDB 2 module introduced (thanks Mark Egan)\n* JDBC template code refactored to not log error on failed insert in Postgres\n    * INSERT .. ON CONFLICT UPDATE is used for Postgres\n\n## 4.7.1\n* Make LockAssert.TestHelper public\n\n## 4.7.0\n* New module for Hazelcasts 4\n* Ability to switch-off LockAssert in unit tests\n\n## 4.6.0\n* Support for Meta annotations and annotation inheritance in Spring\n\n## 4.5.2\n* Made compatible with PostgreSQL JDBC Driver 42.2.11\n\n## 4.5.1\n* Inject redis template\n\n## 4.5.0\n* ClockProvider introduced\n* MongoLockProvider(MongoDatabase) introduced\n\n## 4.4.0\n* Support for non-void returning methods when PROXY_METHOD interception is used\n\n## 4.3.1\n* Introduced shedlock-provider-redis-spring-1 to make it work around Spring Data Redis 1 issue #105 (thanks @rygh4775)\n\n## 4.3.0\n* Jedis dependency upgraded to 3.2.0\n* Support for JedisCluster\n* Tests upgraded to JUnit 5\n\n## 4.2.0\n* Cassandra provider (thanks @mitjag)\n\n## 4.1.0\n* More configuration option for JdbcTemplateProvider\n\n## 4.0.4\n* Allow configuration of key prefix in RedisLockProvider #181 (thanks @krm1312)\n\n## 4.0.3\n* Fixed junit dependency scope #179\n\n## 4.0.2\n* Fix NPE caused by Redisson #178\n## 4.0.1\n* DefaultLockingTaskExecutor made reentrant #175\n## 4.0.0\nVersion 4.0.0 is a major release changing quite a lot of stuff\n* `net.javacrumbs.shedlock.core.SchedulerLock` has been replaced by `net.javacrumbs.shedlock.spring.annotation.SchedulerLock`. The original annotation has been in wrong module and\n  was too complex. Please use the new annotation, the old one still works, but in few years it will be removed.\n* Default intercept mode changed from `PROXY_SCHEDULER` to `PROXY_METHOD`. The reason is that there were a lot of issues with  `PROXY_SCHEDULER` (for example #168). You can still\n  use `PROXY_SCHEDULER` mode if you specify it manually.\n* Support for more readable [duration strings](#duration-specification)\n* Support for lock assertion `LockAssert.assertLocked()`\n* [Support for Micronaut](#micronaut-integration) added\n\n## 3.0.1\n* Fixed bean definition configuration #171\n\n## 3.0.0\n* `EnableSchedulerLock.mode` renamed to `interceptMode`\n* Use standard Spring AOP configuration to honor Spring Boot config (supports `proxyTargetClass` flag)\n* Removed deprecated SpringLockableTaskSchedulerFactoryBean and related classes\n* Removed support for XML configuration\n\n## 2.6.0\n* Updated dependency to Spring 2.1.9\n* Support for lock extensions (beta)\n\n## 2.5.0\n* Zookeeper supports *lockAtMostFor* and *lockAtLeastFor* params\n* Better debug logging\n\n## 2.4.0\n* Fixed potential deadlock in Hazelcast (thanks @HubertTatar)\n* Finding class level annotation in proxy method mode (thanks @volkovs)\n* ScheduledLockConfigurationBuilder deprecated\n\n## 2.3.0\n* LockProvides is initialized lazilly so it does not change DataSource initialization order\n\n## 2.2.1\n* MongoLockProvider accepts MongoCollection as a constructor param\n\n## 2.2.0\n* DynamoDBLockProvider added\n\n## 2.1.0\n* MongoLockProvider rewritten to use upsert\n* ElasticsearchLockProvider added\n\n## 2.0.1\n* AOP proxy and annotation configuration support\n\n## 1.3.0\n* Can set Timezone to JdbcTemplateLock provider\n\n## 1.2.0\n* Support for Couchbase (thanks to @MoranVaisberg)\n\n## 1.1.1\n* Spring RedisLockProvider refactored to use RedisTemplate\n\n## 1.1.0\n* Support for transaction manager in JdbcTemplateLockProvider (thanks to @grmblfrz)\n\n## 1.0.0\n* Upgraded dependencies to Spring 5 and Spring Data 2\n* Removed deprecated net.javacrumbs.shedlock.provider.jedis.JedisLockProvider (use  net.javacrumbs.shedlock.provider.redis.jedis.JedisLockProvide instead)\n* Removed deprecated SpringLockableTaskSchedulerFactory (use ScheduledLockConfigurationBuilder instead)\n\n## 0.18.2\n* ablility to clean lock cache\n\n## 0.18.1\n* shedlock-provider-redis-spring made compatible with spring-data-redis 1.x.x\n\n## 0.18.0\n* Added shedlock-provider-redis-spring (thanks to @siposr)\n* shedlock-provider-jedis moved to shedlock-provider-redis-jedis\n\n## 0.17.0\n* Support for SPEL in lock name annotation\n\n## 0.16.1\n* Automatically closing TaskExecutor on Spring shutdown\n\n## 0.16.0\n* Removed spring-test from shedlock-spring compile time dependencies\n* Added Automatic-Module-Names\n\n## 0.15.1\n* Hazelcast works with remote cluster\n\n## 0.15.0\n* Fixed ScheduledLockConfigurationBuilder interfaces #32\n* Hazelcast code refactoring\n\n## 0.14.0\n* Support for Hazelcast (thanks to @peyo)\n\n## 0.13.0\n* Jedis constructor made more generic (thanks to @mgrzeszczak)\n\n## 0.12.0\n* Support for property placeholders in annotation lockAtMostForString/lockAtLeastForString\n* Support for composed annotations\n* ScheduledLockConfigurationBuilder introduced (deprecating SpringLockableTaskSchedulerFactory)\n\n## 0.11.0\n* Support for Redis (thanks to @clamey)\n* Checking that lockAtMostFor is in the future\n* Checking that lockAtMostFor is larger than lockAtLeastFor\n\n\n## 0.10.0\n* jdbc-template-provider does not participate in task transaction\n\n## 0.9.0\n* Support for @SchedulerLock annotations on proxied classes\n\n## 0.8.0\n* LockableTaskScheduler made AutoClosable so it's closed upon Spring shutdown\n\n## 0.7.0\n* Support for lockAtLeastFor\n\n## 0.6.0\n* Possible to configure defaultLockFor time so it does not have to be repeated in every annotation\n\n## 0.5.0\n* ZooKeeper nodes created under /shedlock by default\n\n## 0.4.1\n* JdbcLockProvider insert does not fail on DataIntegrityViolationException\n\n## 0.4.0\n* Extracted LockingTaskExecutor\n* LockManager.executeIfNotLocked renamed to executeWithLock\n* Default table name in JDBC lock providers\n\n## 0.3.0\n* `@ShedlulerLock.name` made obligatory\n* `@ShedlulerLock.lockForMillis` renamed to lockAtMostFor\n* Adding plain JDBC LockProvider\n* Adding ZooKeepr LockProvider\n"
        },
        {
          "name": "cdi",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "header.txt",
          "type": "blob",
          "size": 0.5595703125,
          "content": "Copyright 2009 the original author or authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "micronaut",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 9.4912109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.sonatype.oss</groupId>\n        <artifactId>oss-parent</artifactId>\n        <version>9</version>\n    </parent>\n\n    <developers>\n        <developer>\n            <id>lukas</id>\n            <name>Lukas Krecan</name>\n            <email>lukas@krecan.net</email>\n        </developer>\n    </developers>\n\n    <groupId>net.javacrumbs.shedlock</groupId>\n    <artifactId>shedlock-parent</artifactId>\n    <packaging>pom</packaging>\n    <version>6.2.1-SNAPSHOT</version>\n    <modules>\n        <module>shedlock-bom</module>\n        <module>shedlock-core</module>\n        <module>cdi/shedlock-cdi</module>\n        <module>cdi/test/quarkus-test</module>\n        <module>micronaut/shedlock-micronaut4</module>\n        <module>micronaut/test/micronaut4-jdbc</module>\n        <module>micronaut/test/micronaut4-jdbc-template</module>\n        <module>spring/shedlock-spring</module>\n        <module>spring/test/shedlock-springboot-old-test</module>\n        <module>spring/test/shedlock-springboot-test</module>\n        <module>spring/test/shedlock-springboot-future-test</module>\n        <module>spring/test/shedlock-springboot-sleuth-test</module>\n        <module>spring/test/shedlock-springboot-kotlin-test</module>\n        <module>spring/test/shedlock-testng-test</module>\n        <module>shedlock-test-support</module>\n        <module>providers/etcd/shedlock-provider-etcd-jetcd</module>\n        <module>providers/hazelcast/shedlock-provider-hazelcast4</module>\n        <module>providers/jdbc/shedlock-test-support-jdbc</module>\n        <module>providers/jdbc/shedlock-provider-jdbc-internal</module>\n        <module>providers/jdbc/shedlock-provider-jdbc</module>\n        <module>providers/jdbc/shedlock-provider-jooq</module>\n        <module>providers/jdbc/shedlock-provider-jdbc-template</module>\n        <module>providers/jdbc/shedlock-provider-jdbc-micronaut</module>\n        <module>providers/r2dbc/shedlock-provider-r2dbc</module>\n        <module>providers/mongo/shedlock-provider-mongo</module>\n        <module>providers/mongo/shedlock-provider-mongo-reactivestreams</module>\n        <module>providers/elasticsearch/shedlock-provider-elasticsearch8</module>\n        <module>providers/opensearch/shedlock-provider-opensearch</module>\n        <module>providers/opensearch/shedlock-provider-opensearch-java</module>\n        <module>providers/couchbase/shedlock-provider-couchbase-javaclient3</module>\n        <module>providers/zookeeper/shedlock-provider-zookeeper-curator</module>\n        <module>providers/redis/shedlock-provider-redis-jedis4</module>\n        <module>providers/redis/shedlock-provider-redis-spring</module>\n        <module>providers/dynamodb/shedlock-provider-dynamodb2</module>\n        <module>providers/cassandra/shedlock-provider-cassandra</module>\n        <module>providers/consul/shedlock-provider-consul</module>\n        <module>providers/arangodb/shedlock-provider-arangodb</module>\n        <module>providers/ignite/shedlock-provider-ignite</module>\n        <module>providers/inmemory/shedlock-provider-inmemory</module>\n        <module>providers/memcached/shedlock-provider-memcached-spy</module>\n        <module>providers/datastore/shedlock-provider-datastore</module>\n        <module>providers/spanner/shedlock-provider-spanner</module>\n        <module>providers/neo4j/shedlock-provider-neo4j</module>\n        <module>providers/s3/shedlock-provider-s3</module>\n    </modules>\n\n    <properties>\n        <spring.version>6.2.1</spring.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <jdk.version>17</jdk.version>\n        <spring-boot-current.version>3.4.1</spring-boot-current.version>\n        <junit.ver>5.11.4</junit.ver>\n        <test-containers.ver>1.20.4</test-containers.ver>\n        <kotlin.ver>2.1.0</kotlin.ver>\n        <micronaut4.version>4.7.4</micronaut4.version>\n        <micronaut4.validation.version>4.8.0</micronaut4.validation.version>\n        <micronaut4-data.version>4.8.1</micronaut4-data.version>\n        <logback.ver>1.5.16</logback.ver>\n        <awaitility.ver>4.2.2</awaitility.ver>\n        <assertj.ver>3.27.2</assertj.ver>\n        <mockito.ver>5.15.2</mockito.ver>\n        <slf4j.ver>2.0.16</slf4j.ver>\n        <fork.count>1</fork.count>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <version>2.44.1</version>\n                <configuration>\n                    <java>\n                        <palantirJavaFormat><version>2.38.0</version></palantirJavaFormat>\n                        <removeUnusedImports />\n                    </java>\n                    <kotlin>\n                        <ktfmt>\n                            <maxWidth>120</maxWidth>\n                            <style>KOTLINLANG</style>\n                        </ktfmt>\n                    </kotlin>\n                </configuration>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n                <configuration>\n                    <release>${jdk.version}</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>com.mycila</groupId>\n                <artifactId>license-maven-plugin</artifactId>\n                <version>4.6</version>\n                <configuration>\n                    <header>header.txt</header>\n                    <excludes>\n                        <exclude>LICENSE.txt</exclude>\n                        <exclude>*.xml</exclude>\n                        <exclude>*.properties</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.5.2</version>\n                <configuration>\n                    <forkCount>${fork.count}</forkCount>\n                    <argLine>-Xmx512m</argLine>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.4.2</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.11.2</version>\n                <configuration>\n                    <failOnError>false</failOnError>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <version>3.1.3</version>\n            </plugin>\n        </plugins>\n    </build>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n\n    <profiles>\n        <profile>\n            <id>release-sign-artifacts</id>\n            <activation>\n                <property>\n                    <name>performRelease</name>\n                    <value>true</value>\n                </property>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>3.2.7</version>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.codehaus.mojo</groupId>\n                        <artifactId>versions-maven-plugin</artifactId>\n                        <version>2.18.0</version>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>permit-illegal-access</id>\n            <activation>\n                <jdk>[16,)</jdk>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-surefire-plugin</artifactId>\n                        <configuration>\n                            <argLine>--illegal-access=permit</argLine>\n                            <forkCount>${fork.count}</forkCount>\n                            <argLine>-Xmx512m</argLine>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n    <scm>\n        <connection>scm:git:git@github.com:lukas-krecan/ShedLock.git</connection>\n        <developerConnection>scm:git:git@github.com:lukas-krecan/ShedLock.git</developerConnection>\n        <url>scm:git:git@github.com:lukas-krecan/ShedLock.git</url>\n    </scm>\n</project>\n"
        },
        {
          "name": "providers",
          "type": "tree",
          "content": null
        },
        {
          "name": "shedlock-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "shedlock-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "shedlock-test-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}