{
  "metadata": {
    "timestamp": 1736708133858,
    "page": 558,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xiaojinzi123/Component",
      "stars": 2901,
      "defaultBranch": "1.x/develop",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.216796875,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/\n/.idea/caches/build_file_checksums.ser\n/.idea/libraries\n/.idea/modules.xml\n/.idea/workspace.xml\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n.idea/sonarlint\n/repo\n./buildSrc/build"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentApi",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentCompiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentImpl",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentKtImpl",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentPlugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ComponentRxImpl",
          "type": "tree",
          "content": null
        },
        {
          "name": "Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.3291015625,
          "content": "**`Component` 一定以最快的速度解决您的 `issue`, 提供解决方案.**\n\n[KComponent](https://github.com/xiaojinzi123/KComponent) 纯 Kotlin 版本已经发布很久啦, 欢迎大家使用 ！！！！！！！！！！！！！\n\n可以说到目前为止, 基于 `URI` 方面的所有路由框架中(`ARouter`、`WMRouter`、`ActivityRouter` ...) `Component` 是最强大和完善的组件化框架.\n\n选择一个更好、更全面的、更稳定、更有发展前景的框架更是你们技术团队或者技术负责人要做的事情!\n\n[Component VS ARouter](https://github.com/xiaojinzi123/Component/wiki/Component-%E5%92%8C-ARouter-%E6%AF%94%E8%BE%83)\n\n**[点击查看 Component 解决了哪些开发中的痛点](https://github.com/xiaojinzi123/Component/wiki/Component-%E7%9B%B4%E5%87%BB%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%97%9B%E7%82%B9)**\n\n# Component\n\n![](./imgs/logo1.png)\n\n**一个功能强大的组件化框架,极度注重用户体验,带给你使用上不一样的享受.欢迎大家使用,在使用的过程中发现任何问题,欢迎下方的 `QQ群` 里问或者提 `issue` 给我**\n\n[![](https://img.shields.io/github/release/xiaojinzi123/Component.svg?label=JitPack&color=%233fcd12)](https://jitpack.io/#xiaojinzi123/Component)\n[![](https://img.shields.io/github/release/xiaojinzi123/Component.svg?label=JitPack-AndroidX&color=%233fcd12)](https://jitpack.io/#xiaojinzi123/Component)\n[![](https://img.shields.io/github/release/xiaojinzi123/Component.svg?label=Release)](https://github.com/xiaojinzi123/Component/releases)\n[![](https://img.shields.io/github/tag/xiaojinzi123/Component.svg?label=Tag)](https://github.com/xiaojinzi123/Component/releases)\n![](https://img.shields.io/github/last-commit/xiaojinzi123/Component/develop.svg?label=Last%20Commit)\n![](https://img.shields.io/github/repo-size/xiaojinzi123/Component.svg)\n![](https://img.shields.io/github/languages/code-size/xiaojinzi123/Component.svg)\n![](https://img.shields.io/github/license/xiaojinzi123/Component.svg)\n<a href=\"https://gitee.com/xiaojinziCoder/Component\" >\n    <img height=20 src=\"https://gitee.com/logo-black.svg\" />\n</a>\n<a href=\"https://github.com/xiaojinzi123/Component\">\n    <img height=22 src=\"https://xiaojinzi.oss-cn-shanghai.aliyuncs.com/blogImages/fluidicon.png\" />\n</a>\n\n## 1. Demo体验\n\n扫码或者点击图片即可下载\n\n<a href=\"https://github.com/xiaojinzi123/Component/releases/download/v1.7.6.1/app-release.apk\">\n    <img height=180 src=\"./imgs/demoApk.png\" />\n</a>\n\n## 2. Hello World 文档\n\n[最简单的 Hello World 文档](https://github.com/xiaojinzi123/Component/wiki/%E4%B8%BB%E9%A1%B5)\n\n## 3. 完整文档\n\n- [依赖和配置](https://github.com/xiaojinzi123/Component/wiki/%E4%BE%9D%E8%B5%96%E5%92%8C%E9%85%8D%E7%BD%AE)\n- [Activity注解使用](https://github.com/xiaojinzi123/Component/wiki/RouterAnno-%E6%B3%A8%E8%A7%A3)\n- [组件生命周期](https://github.com/xiaojinzi123/Component/wiki/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F)\n- 跳转\n  - [跳转 Fragment](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%B3%E8%BD%AC-Fragment)\n  - [跳转-接口路由的方式](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%B3%E8%BD%AC-%E6%8E%A5%E5%8F%A3%E8%B7%AF%E7%94%B1%E7%9A%84%E6%96%B9%E5%BC%8F)\n  - [跳转-使用代码跳转](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%B3%E8%BD%AC-%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E8%B7%B3%E8%BD%AC)\n- [拦截器](https://github.com/xiaojinzi123/Component/wiki/%E6%8B%A6%E6%88%AA%E5%99%A8)\n- [服务发现实现跨模块调用](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%A8%E6%A8%A1%E5%9D%97%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8)\n- [ProxyIntent](https://github.com/xiaojinzi123/Component/wiki/ProxyIntent) 在需要使用 `Intent` 的地方使用\n- [生成文档](https://github.com/xiaojinzi123/Component/wiki/%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90)\n- [单独运行](https://github.com/xiaojinzi123/Component/wiki/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%E5%8D%95%E7%8B%AC%E8%BF%90%E8%A1%8C)\n- [名词解释](https://github.com/xiaojinzi123/Component/wiki/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A)\n- [基本介绍](https://github.com/xiaojinzi123/Component/wiki/%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D)\n- [更新日志](./changelog.md)\n\n**了解更多请看 [wiki](https://github.com/xiaojinzi123/Component/wiki/) 更多功能等你来发现**\n**有关的文章 [到底什么是组件化](https://blog.csdn.net/u011692041/article/details/92572758) **\n\n## 4. Component 功能介绍\n\n组件化方案真的有很多,那么这个组件化方案优秀在哪里？相比于 `ARouter`、`WMRouter`、`ActivityRouter`、`CC`、`DDComponent`\n等开源的组件化框架, 有哪些一样或者更加优秀的点\n\n- [x] 支持多 `Module`\n\n- [x] 支持 `Google App Bundle 架构` \n\n- [x] 支持 `Flutter`, `H5` 等混合项目\n\n- [x] 支持 `androidx`, 几乎没有其他组件化框架支持 `androidx` 的\n\n- [x] 整个设计贴近原生,对原生的代码入侵极少,尽最大的可能保留原生的代码\n\n- [x] 支持依赖注入、支持目标界面的路由参数\n\n- [x] 跨模块调用\n\n- [x] 支持业务组件[生命周期](https://github.com/xiaojinzi123/Component/wiki/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F)(被加载和被卸载)\n\n- [x] 配套的 `Idea Plugin` 方便快速浏览,持续会更新此 [插件](https://github.com/xiaojinzi123/RouterGoPlugin)\n\n- [x] 完美支持 `RxJava2`(使用`rx`库)\n\n- [x] 服务发现(跨模块调用)和路由分开设计\n      - 其实这两块本来就是两个方面,我不清楚为什么很多方案中都柔和在一块\n\n- [x] [服务发现装饰增强](https://github.com/xiaojinzi123/Component/wiki/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0-%E8%A3%85%E9%A5%B0%E5%A2%9E%E5%BC%BA)\n\n- [x] [业务模块单独运行]([https://github.com/xiaojinzi123/Component/wiki/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%E5%8D%95%E7%8B%AC%E8%BF%90%E8%A1%8C](https://github.com/xiaojinzi123/Component/wiki/业务组件单独运行))\n\n- [x] 路由跳转功能\n\n  - [x] 支持[生成文档](https://github.com/xiaojinzi123/Component/wiki/%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90)\n\n  - [x] 支持获取目标的 [ProxyIntent](https://github.com/xiaojinzi123/Component/wiki/ProxyIntent)\n\n  - [x] 支持标准 `URI` 的使用\n\n  - [x] 无缝对接 `H5`\n\n    - [x] `H5` 只需利用 `URL` 即可任意路由到任何界面(只需下面一段统一的跳转. 完全不需要关心目标界面是否需要登陆、定位、权限等.)\n\n      ```\n      @JavascriptInterface\n      public void openUrl(final String url) {\n          Router.with(this).url(url).forward();\n      }\n      ```\n\n    - [x] `H5` 发起路由不需要关心目标界面需要做的先决条件(框架的[页面拦截器](https://github.com/xiaojinzi123/Component/wiki/%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A#%E9%A1%B5%E9%9D%A2%E6%8B%A6%E6%88%AA%E5%99%A8)已经帮您做完) \n\n  - [x] [外部链接跳转](https://github.com/xiaojinzi123/Component/wiki/App-%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC)\n\n  - [x] 支持原生的[跳转动画](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%B3%E8%BD%AC-%E5%8A%A8%E7%94%BB)\n\n  - [x] 支持跳转 `Fragment`(也就是跨组件获取`Fragment`)\n\n  - [x] 支持[单 Activity 多 Fragment 架构](https://github.com/xiaojinzi123/Component/wiki/%E5%8D%95-Activity-%E5%A4%9A-Fragment)\n\n  - [x] 路由拦截器执行线程设计是主线程, 整体是异步的(这点很多人不理解, 没有关系. 先用起来之后在慢慢理解)\n\n    - 在路由拦截器的执行线程的设计上,考虑到用户平时书写的 `90%` 代码都是在主线程的,<br/>所以路由拦截器的执行线程也设计为主线程执行,可以让您放心的操作 `UI`、弹框等操作.<br/>同时提供 `Callback` 机制可以在拦截器中做任何耗时的任务<br/>这点绝对是压倒性的优势,不仅整体是 `异步` 的,而且拦截器中能像平常一样写实现的代码\n\n  - [x] 路由的取消,基本上没有路由框架支持路由的取消,这也是一个很大的优势!\n\n    - [x] 手动用代码取消某次路由\n    - [x] 路由自动取消, 当发起路由的 `Fragment` 或者 `Activity` 销毁的时候会取消\n\n  - [x] 路由拦截器,足矣满足所有业务情况(具体看 [拦截器wiki]([https://github.com/xiaojinzi123/Component/wiki/%E6%8B%A6%E6%88%AA%E5%99%A8](https://github.com/xiaojinzi123/Component/wiki/拦截器)))\n\n    - [x] 全局拦截器(针对全部路由)\n    - [x] 局部路由拦截器\n      - [x] [页面拦截器](https://github.com/xiaojinzi123/Component/wiki/%E6%8B%A6%E6%88%AA%E5%99%A8#%E7%BB%99%E4%BD%A0%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8%E8%B5%B7%E4%B8%80%E4%B8%AA%E5%88%AB%E5%90%8D)(针对所有跳转到某一个界面的路由)\n      - [x] 拦截器别名,支持跨模块使用(可以让每一个拦截器都放在自个的模块)\n\n  - [x] 跳转\n\n    - [x] 持标准 `URI`\n    - [x] 支持自定义 `Intent`, 你可以给任意一个 `Intent` 标记路由, 这个功能很强大!\n    - [x] 支持类似 `Retrofit` 接口编程式跳转\n    - [x] `Idea Plugin` 强势支持跳转代码和目标界面的来回导航,也支持拦截器的代码使用和声明处的来回导航\n\n  - [x] **0** 配置拿到目标界面返回的 `ActivityResult`, 很多框架不支持或者需要入侵 `BaseActivity`. 绝对的优势\n\n    - [ ] 和系统的行为一样,当 `Context` 是 `Application` 或者 `Service 的 Context` 或者 `ContentProvider 的 Context `的时候, **不支持获取ActivityResult**, 如果真的有需要, 你可以使用栈顶的 `Activity` 来充当 `Context`\n    - [x] 除第一点说的几个 `Context`, 其他的情况都是支持的,包括 `Dialog` 中获取到的 `Context`.\n    - [x] 如果你想单独使用这个功能, 也可以单独依赖使用, [链接是这里](https://github.com/xiaojinzi123/ActivityResultHelper)\n\n- [ ] `注解驱动器` 不支持增量更新, 暂时不知道怎么去做\n\n## 5. 配套的 `Idea Plugin`\n\n`Android Studio` 中搜索插件名称：RouterGo, 即可下载对应的插件\n\n[RouterGo 源码地址：帮助你快速导航到目标界面或者目标拦截器,你值得拥有!](https://github.com/xiaojinzi123/RouterGoPlugin)\n\n## 6. `Component` 项目结构(Demo + 库源码)\n\n- `demo` 示例代码\n  - `app`                 --> 壳工程\n  - `Module1`             --> `Java` 业务模块\n  - `Module1run`          --> `Module1` 业务模块单独运行的 `Application` 应用\n  - `Module2`             --> `Kotlin` 业务模块\n  - `ModuleHelp`          --> `Help` 业务模块, 一些有关通用的或者系统相关的放这里\n  - `ModuleUser`          --> `User` 业务模块\n  - `ModuleBase`          --> 各个业务模块的基础模块, 上述的没一个业务模块都需要依赖\n- 实现库源码\n  - `ComponentApi`        --> `Api` 库\n  - `ComponentCompiler`   --> 注解驱动器库\n  - `ComponentImpl`       --> 实现库\n  - `ComponentRxImpl`     --> 实现库 `RxJava` 的扩展\n  - `ComponentPlugin`     --> 配套的 `Gradle`, 功能有两个\n    - 优化初始化的方式, 优化反射加载模块为正常的 `new` 对象的方式, 利用字节码修改技术\n    - 生成路由文档\n\n\n## 7. 扫码进群\n\n<div>\n    <img src=\"./imgs/qq_group1.JPG\" width=\"210px\" height=\"300px\" />\n    <img src=\"./imgs/qq_group2.JPG\" width=\"210px\" height=\"300px\" />\n</div>\n\n\n## 8. 如果你觉得项目不错, 就请我喝杯咖啡吧! 一块钱也是爱!\n\n<img height=200 src=\"./imgs/collectQRCode.png\" />\n\n## 9. License\n"
        },
        {
          "name": "RepoComponent",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.5185546875,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n\n    ext.kotlin_version = \"1.9.0\"\n    ext.kotlin_coroutines_version = '1.7.3'\n\n    apply from: \"dependencies.gradle\"\n\n    ext.component_group_id = \"com.xiaojinzi\"\n    ext.isDependMavenOnline = false\n    // ext.component_asm_util_class_output_path = \"./Temp/ASMUtil.class\"\n    ext.component_asm_disable = false\n    // 注解生成器生成的文件 json 信息都\n    ext.component_router_doc_folder = \"./Doc\"\n    ext.component_router_doc_enable = false\n    ext.component_isMergeOutputFile = true\n\n    repositories {\n        google()\n        maven {\n            url './RepoComponent'\n        }\n        maven { url 'https://jitpack.io' }\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:8.2.2'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        if (rootProject.ext.isDependMavenOnline) {\n            classpath \"com.github.xiaojinzi123.Component:component-plugin:${versions.component_version}\"\n        } else {\n            classpath \"com.xiaojinzi.component:component-plugin:${versions.component_version}\"\n        }\n    }\n}\n\nplugins {\n    id 'com.android.application' version '8.2.2' apply false\n    id 'com.android.library' version '8.2.2' apply false\n    id 'org.jetbrains.kotlin.jvm' version \"$kotlin_version\" apply false\n    id 'org.jetbrains.kotlin.android' version \"$kotlin_version\" apply false\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 18.99609375,
          "content": "#### [v1.9.2.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.2.1)\n- 优化 Gradle Plugin 引起的 defined multiple times 的问题\n\n#### [v1.9.2](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.2)\n- 统一 Kotlin 相关的版本\n- 修复 v1.9.1-beta1 版本支持 scheme 改出来页面拦截器失效的问题\n\n#### [v1.9.1-beta1](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.1-beta1)\n- 修复 @ServiceAnno 的 autoInit 属性不支持填写了 name 的类\n- uri 中的 scheme 正式开始起作用, 升级之后, 兼容之前的版本, 只不过如果用之前版本发布的业务 module 需要更新版本并且重新发布\n- RouterAnno 支持正则表达式, 用来支持 http://xxx/xxx 之类的跳转会更加的方便\n- 不再推荐用户手动调用 Component.check() 方法, 在 Config 中新增一个属性, errorCheck, 打开的话会在 debug 的时候检查用户使用的是否有重复\n\n#### [v1.9.0-Stable2](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.0-Stable2)\n- 自动注入对 Kotlin 文件的支持完善\n- RouterApi 支持了 Kotlin 的 suspend 挂起方式\n\n#### [v1.9.0-Stable1](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.0-Stable1)\n- 模块注册支持优先级\n\n#### [v1.9.0](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.0)\n- befor 相关的方法和名称命名错误的全部更正为 before\n- Call 发起跳转的方法支持了更多的 Kotlin 扩展来方便调用\n\n#### [v1.9.0-beta2](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.0-beta2)\n- 自动注入支持了 Kotlin 文件的属性了. 不必再使用 @JvmField 注解标记了\n- @ServiceAnno 增加了 autoInit 属性, 这个属性可以让 Service 自动初始化在模块加载之后. 每一个模块加载/卸载都会触发\n\n#### [v1.9.0-beta1](https://github.com/xiaojinzi123/Component/releases/tag/v1.9.0-beta1)\n- 支持了 Service 的装饰功能. 使用 @ServiceDecoratorAnno 注解标记一个类.\n- Service 装饰功能支持 Condition.\n- 修复之前的版本卸载模块但是路由卸载不掉的问题\n\n#### [v1.8.8](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.8)\n- kotlin 的协程模块上线啦\n- 这个版本及其之前的版本. 会有模块卸载的时候, 路由表卸载不了的问题\n    - 由于真实项目中不会有模块卸载的情况. 所以这个版本暂时未修复. 之前的版本会修复\n    - 至于为什么真实项目中不会卸载. 原因是：卸载之后会有无法预期的问题. 正确的做法是在启动的时候只加载你需要加载的模块. 而不是后续去卸载!\n- 修复 Utils 中的 isCauseBy 方法的 bug\n\n#### [v1.8.6](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.6)\n- Service 支持了多实现. 一个接口. 可以有问个实现类. 但是需要用 name 区分\n\n#### [v1.8.3.6](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.5)\n- [#79](https://github.com/xiaojinzi123/Component/issues/79) 为了解决死锁. 放弃了 Fragment 和 服务发现的创建一定保证主线程的逻辑. 避免死锁发生. \n- host 的配置支持了任意的字符串, 比如: www.baidu.com, www.module.user. 没有任何限制了\n\n#### [v1.8.3.5](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.5)\n- 增加当发生死锁的时候, 错误信息的报错, 方便用户排查. 具体可以看 [#79](https://github.com/xiaojinzi123/Component/issues/79) 这个 issue\n\n#### [v1.8.3.4](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.4)\n- 增加一个可选的 IModuleNotifyChanged 接口, 用来接收模块加载的变化\n\n#### [v1.8.3.3](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.3)\n- 删除 1.8.3.1 增加的 Service 生命周期的功能. 实践得知, 这功能并不正确\n- ServiceManager 的反注册方法改为没有返回值.\n- @MainThread 注解全都改为 @UiThread\n- afterAction 的执行用的 request 修复为 finalRequest, 而不是 originRequest\n- 增加一些方法的 @NonNull 注解\n- 修复 RouterRequest的bundle变为RouterRequest.Builder.Bundle 地址传递的问题, 应该为值传递\n- 增加模块加载失败时候的 url 链接, 可以帮助排查错误\n- 调整 Logo 输出的位置\n- 修复生成的路由表的 ArrayList 的泛型警告问题\n- 修改 componnet 拼写错误的问题.\n- 增加 component_asm_disable 配置, 可以让 Gradle 插件禁用 ASM 的功能. 因为有些人就只用 RouterDoc 的功能\n\n#### [v1.8.3.2](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.2)\n- 修复 void method(Context context, Callback callback); 这中 Api 接口方法生成代码失败的问题\n\n#### [v1.8.3.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.3.1)\n- 增加 java8 的发布维度\n- 支持属性注入多个属性. 主要用于兼容如果想变动 key 的问题.\n- ~~支持 @ServiceAnno 标记的服务实现类, 可以可选的实现 IServiceLifecycle 接口来接受模块的生命周期的回调~~ 此功能将被删除.\n- 用户自定义的模块生命周期类, 需要实现 IApplicationLifecycle 接口, 而不是老的 IComponentApplication 接口, 虽说老的目前也支持, 但是若干版本之后会删除\n- 内部优化类结构. 需要更新新的[混淆配置](https://github.com/xiaojinzi123/Component/wiki/%E4%BE%9D%E8%B5%96%E5%92%8C%E9%85%8D%E7%BD%AE-AndroidX#%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE)\n\n#### [v1.8.2.3](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.2.3)\n- 优化了 Host 名称中不可以配置 _ 的问题. 但是一定不是开头哦\n- 修复 ServiceManager.get() 或者 FragmentManager.get() 方法在子线程中调用的时候, 如果没有实现类就会死循环的问题\n\n#### [v1.8.2.2](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.2.2)\n- 当不使用框架的 ActivityResult, 可以填写 requestCode 使用普通的 startActivityResult\n\n#### [v1.8.2.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.2.1)\n\n- 修复之前修改 `impl` 模块的包名引起的 `ProxtActivity` 失效的问题\n- `router` 文档增加控制是否生成文档的 `boolean` 的开关. `component_router_doc_enable`\n    - 配置方式和 `componnet_router_doc_folder` 一致. 比如 ext.component_router_doc_enable = true\n- 同时注解驱动器的 `RouterDoc` 属性配置改为 `RouterDocFolder`\n- 注解驱动器也增加一个文档是否生成的开关 `RouterDocEable`, 一般 `RouterDocEable` 这个值随着 `component_router_doc_enable` 变化即可\n\n#### [v1.8.2](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.2)\n\n- 增加 Androidx 配置和 非Androidx 选择错误的时候的提示\n- 当页面拦截器更改 `Uri` 的 `host` 和 `path` 这部分信息之后重新加载新的目标的页面拦截器\n  - 因为页面拦截器是和目标 `Uri` 绑定的. 如果在页面拦截器中更改了 `Uri`. 那么最终跳转的 `Intent` 可能和页面拦截器不是一对的\n- 增加页面拦截器的执行优先级 `interceptorPriorities` 和 `interceptorNamePriorities`\n- 修复一个界面同时使用两个跳转拿 `ActivityResult` 出现的其中一个回调问题.\n  - 原因是 `commitAllowingStateLoss` 不是立马提交的, 需要使用 `commitNowAllowingStateLoss`. 基本只在测试情况出现, 线上使用基本没有同一个界面同时跳转拿 `ActivityResult` 的\n- 优化获取 `ActivityResult` 的时候因为 `requestCode` 重复导致的日志输出一个取消和错误的情况.\n\n#### [v1.8.1.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.1.1)\n\n- 修复之前更新版本出现的 `Uri` 中的 `Query` 同步到 `Bundle` 中的问题\n  - 之前版本表现为拦截器中没法从 `Bundle` 中获取到 `Query` 中的参数\n\n#### [v1.8.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.1)\n\n- beforJumpAction 全部更名为 beforAction\n- afterJumpAction 全部更名为 afterAction\n- 增加 beforStartAction, 此 Action 和 startActivity 方法是紧紧连着的代码\n- 增加 afterStartAction, 此 Action 和 startActivity 方法是紧紧连着的代码\n  - 可用来转场动画\n\n#### [v1.8.0.2](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.0.2)\n\n- 对路由 `Fragment` 支持了常用的 `putXXX` 方法\n\n#### [v1.8.0.1](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.0.1)\n\n- 类型 ArrayList<? extends Serializable> RouterApi 中的支持和 Autowire 的支持. 此类型判断为 Serializable 类型\n- 修复生成文档的 `componnet_router_doc_folder` 拼写错误的错误. 改为 `component_router_doc_folder`\n\n#### [v1.8.0](https://github.com/xiaojinzi123/Component/releases/tag/v1.8.0)\n\n- 修复 `Uri` 中的 `userInfo` 为空的时候的处理\n- 增加针对单个路由是否启用重复检查的拦截器的方法. Navigator.useRouteRepeatCheck(boolean) 默认是全局设置的值. 全局设置的值默认是 `true`\n- 增加了 [生成文档](https://github.com/xiaojinzi123/Component/wiki/%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90) 的功能, 对应 [issue](https://github.com/xiaojinzi123/Component/issues/15)\n\n#### [v1.7.9](https://github.com/xiaojinzi123/Component/releases/tag/v1.7.9)\n\n- `ModuleManager` 类中增加 `autoRegister()` 方法, 可以自动加载所有的模块\n    - 前提是你使用 Gradle 插件, 并且配置中 optimizeInit 开关已经打开\n- 配置中增加开关, 控制是否在初始化的时候自动加载所有模块. 这样子可以进一步省略配置的代码量\n- 上面两个描述不支持 `Google` 的 `App Bundle`. 还请特别留意\n- `ParameterSupport` 增加对 `Uri` 的获取. \n- 跳转支持 `Uri` 中的 `UserInfo`. 接口的路由跳转中同样也支持了, 使用 `@UserInfoAnno` 即可\n- 修复 `@FragmentAnno` 标记在类上的时候的传值问题, 详见 `issue` [#51](https://github.com/xiaojinzi123/Component/issues/51)\n- Router 中的方法 `haveProxyIntent` 改名为 `isProxyIntentExist`\n- 修复自动注入 ArrayList<T extends Parcelable> 类型的参数错误的问题\n- 支持注入 Uri 中的数组的值\n- 自动注入支持 SparseArray<? extends Parcelable> 类型\n- ParameterSupport 增加 getSparseParcelableArray 方法\n\n#### v1.7.8(不兼容版本更新)\n\n- 所有的配置整改. 统一使用 `Config` 类来配置. 初始化方式改变了. `Component.init(boolean, Config);`\n    - 配置中增加 tipWhenUseApplication(boolean) 方法, 用来提醒使用者当使用者使用了 Application 作为 Context, 默认为 true\n    - 配置中增加 useRouteRepeatCheckInterceptor(boolean) 让使用者来控制是否使用内置的放抖动的跳转重复检查, 默认为 true\n    - Config 类为建造者模式, 整理了以前几个配置, 同时也为以后的配置增多提供了很好的扩展\n- `Router.with(Context).withProxyBundle` 更名为 `Router.with(Context).proxyBundle`\n- OnRouterCancel 和 OnRouterError 的包名更改为 com.xiaojinzi.component.support\n- com.xiaojinzi.component.condition.Condition 更名为 com.xiaojinzi.component.support.Condition\n- com.xiaojinzi.component.bean.CustomerIntentCall 更名为 com.xiaojinzi.component.support.CustomerIntentCall\n- 注入属性和 `Service` 不兼容优化. 目的是注入属性的值和注入 Service 两个功能更加的明确. 并且提供聚合和分开的方法供用户自由选择\n    - Component.inject(Object) 功能不变\n    - Component.injectFromIntent(Object, Intent) 更名为 injectAttrValueFromIntent(Object, Intent). 内部去除了注入 `Service` 的功能\n    - Component.injectFromBundle(Object, Intent) 更名为 injectAttrValueFromBundle(Object, Intent). 内部去除了注入 `Service` 的功能\n    - 新增方法 Component.injectService(Object), 用来注入 `Service`\n- 注解 @FieldValueAutowiredAnno 更名为 @AttrValueAutowiredAnno. 不兼容的更新\n- 更新若干库到最新\n    - RxJava 版本升级到 2.2.17\n\n#### v1.7.7.3(功能+优化)\n\n- 为了满足有些场景是需要先拿到 `Intent` 的, 特别设计了创建代理 `Intent` 的功能. 具体[点击查看](https://github.com/xiaojinzi123/Component/wiki/ProxyIntent)\n- 修复 `Router` 跳转拿 `ActivityResult` 和 `Router` 跳转只填写 `requestCode` 产生的 `requestCode` 混乱的问题.ps: 之前的版本你们别混用就不会出问题\n- 修复 `FieldAutowiredAnno` 正确拼写, 之前为：`FiledAutowiredAnno`\n- 修复 `Gradle` 插件中复制 `Jar` 的 `bug`\n\n#### v1.7.7.2(优化)\n\n- 计划取消 `FragmentAnno` 注解中的 `singleTon` 属性. 考虑到平常使用 `Fragment` 都是创建一个新的然后使用.\n- 框架永远不会帮你隐式调用 `requestCodeRandom()` 的. 有多人反馈当跳转获取 `ActivityResult` 的时候, 既然可以调用 `requestCodeRandom()` 方法表示随机生成一个 `requestCode`, 那么为何不直接当用户是这种行为的时候, 框架自动生成一个, 不用用户手动调用. 下面几点是我的说明.\n    - 其实是这样的, 跳转获取 `ActivityResult` 对应着 `startActivityForResult()` 方法和 `onActivityResult` 方法的一整个过程. \n    - 那么作为框架的设计, 我当然可以做到上述的操作. 但是我希望的是用户能明白本质上这是一个 `startActivityForResult()`, 需要 `requestCode`. 所以我这边需要用户关心一下\n    - `requestCodeRandom()` 是一个便捷的方式, 但是不能省略, 因为我想让用户知道其实这里是需要 `requestCode` 的. 显示的一个标志\n    - 所以总结就是, 框架设计上不会默认帮你调用 `requestCodeRandom()` 方法. 大家不要想了.\n- 当跳转使用 `Application` 的时候, 新增日志的提醒使用用户, 告知他们使用的是 `Application`, 并且告知不推荐使用 `Application`\n    - 增加 `Component.closeLogWhenUseApplication();` 方法来关闭警告的日志\n- 优化 `ServiceManager.get(Class)` 内部的获取 `Service` 对象的代码. 让用户自定义的对象肯定在主线程中被创建. 贯彻初期的设计(用户接触的所有地方都是主线程)\n- 优化拦截器可能在其他线程初始化的问题\n    - 当你在第一次在子线程中执行跳转的时候, 会有可能让拦截器的创建在子线程\n- 内部所有方法都添加线程的注解, 标记方法的线程范围.\n- 增加对 `Fragment` 的名称的全局唯一性的检测. 当你全局有同名的, 启动的时候调用 `Component.check()` 会报错. 帮助你检查出重名问题.\n\n#### v1.7.7.1\n\n- 所有生成的类上都增加 @Keep 注解\n- 错误回调整理(优化如下的问题)\n    - 当获取目标界面 `ActiivtyResult` 的时候, 如果前置或者后置方法出错了, 那么错误信息不会被打印 \n\n#### v1.7.7\n- `Component` 的配置类中增加一个方法 `optimizeInit(boolean)`, 默认是 `false`, 如果设置为 `true`, 初始化的实现就会变成使用 `ASM` 技术实现的, 反之使用反射\n    - 其实两者性能几乎无差别, 不是极致优化的情况下, 我建议还是别用\n- `Gradle Plugin`\n    - 在之前版本的基础上, 增加一个 `Gradle Plugin`, 用来加快启动的速度. 具体问题请看 [issue](https://github.com/xiaojinzi123/Component/issues/26)\n    - `Component` 默认采用反射进行初始化, 但是优化后和优化前的时间相差的很小, 只有几毫秒. 所以并不推荐使用 `Gradle Plugin` \n    - 当然了使用 `Gradle` 插件也会带来一定的未知的风险, 当有任何问题产生的时候, 请第一时间禁用此插件来排查是否是此插件引起的. \n    - 如果是插件引起的问题, 请您禁用此插件, 请放心, 不会对你代码造成任何的影响. 可以的话把问题反馈给我. 谢谢\n- `Idea Plugin` 修复对 `RxRouter` 的图标显示问题\n- `Idea Plugin` 不在支持 `AS3.4`, 最低支持 `AS3.5`\n\n#### v1.7.6.2\n- 全部的 `navigate` 方法都增加了 `@CheckResult` 注解, 提示使用者此方法是有返回值的, 不要返回值你可以使用对应的 `forward` 方法\n\n#### v1.7.6.1\n- 增加全套的 `forward` 方法, 没有 `NavigationDisposable` 返回值\n\n#### v1.7.6\n- 增加\"路由\" `Fragment` 的功能(其实就是针对`Fragment`做的一个更简单的获取方式)\n    - 任意一个 `Fragment` 使用 `@FragmentAnno` 标记即可\n    - 如何使用请看, 路由的 `wiki` [跳转 Fragment](https://github.com/xiaojinzi123/Component/wiki/%E8%B7%B3%E8%BD%AC-Fragment)\n- 增加 `RxRouter` 对路由 `Fragment` 的支持, 返回的是 `Single<Fragment>`\n- 重命名 `RxService` 为 `RxServiceManager`\n- 重命名 `Service` 为 `ServiceManager`\n\n#### v1.7.5.1 \n- 属性注入增加方法 `Component.inject(Object target, Intent intent)` 以便在 `onNewIntent` 方法中使用\n- 升级 `RxJava` 版本到 `2.2.13`\n- 升级其他库的版本至最新\n\n#### v1.7.5`\n- 纠正接口 `IComponentApplication` 中 `onDestory` 方法的拼写错误, 正确为 `onDestroy`\n- 新增 `afterEventAction`, 表示跳转成功或者失败之后的回调, 不允许抛出异常, 会导致奔溃\n- 新增 `afterErrorAction`, 表示跳转失败之后的回调, 不允许抛出异常, 会导致奔溃\n- 修改内置的同样的路由请求在一秒内只能启动一次的错误日志的输出形式\n- 重构几个 `Action` 这块用户自定义的这块的执行顺序\n- 路由 `Api` 增加 `AfterErrorActionAnno` 和 `AfterEventActionAnno` 注解\n\n#### v1.7.4\n- `Router.with()` 方法支持空参数的形式了, 这种形式默认会使用 `Application` 作为 `Context`, 作者虽然支持了这种形式, 但是不建议平时使用的时候故意使用 `Application`. 因为当你没有用路由框架的之前, 你通常也会使用当前 `Activity Context` 的, 所以作者呼吁大家, 在有 `Activity Context` 的时候, 建议传入 `Activity` 的 `Context`\n\n#### v1.7.3.2\n- 路由跳转的进阶版路由 `Api` 支持返回 `RxJava` 的 `Observable` 啦, 支持 `Single`, `Completeable`\n\n#### v1.7.3.1\n- 修复 `Fragment` 无法自动注入的 `Bug`\n- 类 `ComponentConfig` 重命名为 `Component`\n- 源码中增加单独运行模块 `Module1` 的范例,通过新建了一个 `Module1Run` 的 `Module` 去运行\n\n#### v1.7.3.0\n- 支持属性的注入, 使用 `@FieldAutowiredAnno` 注解\n- 支持 `Service` 的注入, 使用 `@ServiceAutowireAnno` 注解\n- 使用 `Component.inject(this)` 注入属性和 `Service`\n\n#### v1.7.2.3\n- 支持每一个业务 `Module` 可选的创建生命周期的实现类, 有些模块可能不需要, 那么这个对于用户来说又可以少一个配置\n\n#### v1.7.2.2\n- 增加 `@RouterAnno` 注解的 `hostAndPath` 的属性\n\n#### v1.7.2.1\n- 仓库变为 `jitpack`,一个可以提供更加稳定的依赖仓库\n\n#### v1.7.2\n- 支持路由 Api 中 `Activity Options` 的使用, 使用 `@OptionsAnno` 标记参数即可\n\n#### v1.7.1\n- 完善支持路由 `api` 的使用方式\n- 删除自定义跳转返回 `void` 的功能\n- 跳转增加支持 `flag` 和 `category` 的支持\n\n#### v1.7.0\n- 取消支持自定义跳转的时候方法的参数可以自定义的功能\n- 支持了全部属性的界面注入功能,通过 `Component.inject(this)` 即可完成注入\n\n#### v1.6.1\n- 修复无法支持 `requestCode` 的问题\n\n#### v1.6.0\n- 支持了类似 `Retrofit` 的路由接口 `Api`, 详细的请看源码中的示例代码. 全局搜索 `@RouterApiAnno` 注解标记的类, 那些都是范例\n\n#### v1.6.0 之前的版本\n之前的版本就不再追溯了, 之后的每次更新我都会详细记录更新的日志"
        },
        {
          "name": "dependencies.gradle",
          "type": "blob",
          "size": 1.955078125,
          "content": "ext.versions = [\n        // 系统级别的版本号\n        android_compile_sdk                 : 34,\n        android_min_sdk                     : 21,\n        android_target_sdk                  : 34,\n        version_code                        : 1000,\n        version_name                        : \"1.0\",\n        support_lib                         : \"28.0.0\",\n        constraintLayout                    : \"2.0.4\",\n        appcompat                           : \"1.6.1\",\n        // 第三方控件的版本号\n        rxjava                              : '2.2.21',\n        rxandroid                           : \"2.1.1\",\n        component_version                   : \"1.9.5-rc1\",\n        component_plugin_upload_version     : \"1.9.5-rc1\"\n]\n\next.libs = [\n\n        kt_coroutines_core      : \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version\",\n        // Google 提供的\n        commons_codec           : \"commons-codec:commons-codec:1.11\",\n        rxjava                  : \"io.reactivex.rxjava2:rxjava:$versions.rxjava\",\n        rxandroid               : \"io.reactivex.rxjava2:rxandroid:$versions.rxandroid\",\n        gson                    : \"com.google.code.gson:gson:2.8.6\",\n\n        appcompat               : \"androidx.appcompat:appcompat:${versions.appcompat}\",\n        constraintLayout        : \"androidx.constraintlayout:constraintlayout:${versions.constraintLayout}\",\n\n        component_annotation    : \"com.github.xiaojinzi123.Component:component-annotation:${versions.component_version}\",\n        component_compiler      : \"com.github.xiaojinzi123.Component:component-compiler:${versions.component_version}\",\n        component_impl          : \"com.github.xiaojinzi123.Component:component-impl:${versions.component_version}\",\n        component_impl_rx       : \"com.github.xiaojinzi123.Component:component-impl-rx:${versions.component_version}\",\n        component_impl_ktx      : \"com.github.xiaojinzi123.Component:component-impl-ktx:${versions.component_version}\"\n\n]"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.2314453125,
          "content": "# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n# AndroidX package structure to make it clearer which packages are bundled with the\n# Android operating system, and which are packaged with your app\"s APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\n# Kotlin code style for this project: \"official\" or \"obsolete\":\nandroid.useAndroidX=true\nandroid.enableJetifier=true\nkotlin.code.style=official\nandroid.debug.obsoleteApi=true\norg.gradle.caching=true\norg.gradle.configuration-cache=true\nandroid.defaults.buildfeatures.buildconfig=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "note.txt",
          "type": "blob",
          "size": 3.4033203125,
          "content": "signature 是签名文件, 文件的密码都是 123456, 或者 xiaojinzi\n\njava8 的支持修改点：\n- 注解驱动器上的 @SupportedSourceVersion 注解 RELEASE_7 更换为 RELEASE_17\n- ComponentCompiler 模块的 sourceCompatibility = \"8\" 和 targetCompatibility = \"8\" 修改\n- 各个模块添加如下代码：\n```\ncompileOptions {\n        sourceCompatibility = JavaVersion.VERSION_17\n        targetCompatibility = JavaVersion.VERSION_17\n}\n```\n\n发布的时候分支合并操作流程\ndevelop -> master\nmaster -> master-java8\nmaster -> master-androidx\nmaster-androidx-java8\nmaster -> develop\n\n每次发布的流程\n\n- 简单走一下各个跳转的流程\n- 走完全部的测试用例\n- 修改 dependencies.gradle 中 gradle plugin 的版本号\n- 生成一个 gradle plugin 插件.\n- 修改 dependencies.gradle 中 Component 的版本号\n- 合并代码到 Master 分支\n- 打上 Tag, 比如：v1.7.5.1\n- 推送 master 到远程\n- 合并 master 代码到 master-androidx\n- 解决冲突并且修复代码中运行的错误并提交\n- 简单走一下各个跳转的流程\n- 走完全部的测试用例\n- 打上 Tag, 比如 v1.7.5.1-androidx\n- 推送代码到远程\n\n整个项目中, 可能需要利用 Context 进行初始化的地方有：\n- 用户自定义的拦截器\n- 用户自定义的路由降级\n\n整个项目中, 需要用户自定义的组件有：\n- 自定义拦截器\n    - 全局拦截器\n    - 局部拦截器\n- 自定义路由降级\n- 自定义条件\n\n每次开发完毕后都必须检查的几个项目,demo 中的所有测试情况都应该涵盖下面的情况\n1.全局拦截器和自定义拦截器和页面拦截器执行是否正常\n2.跨组件拦截器不存在的时候执行是否正常\n3.query 传递参数是否正常\n4.默认的bundle 携带参数是否正常\n5.自定义跳转和自定义Intent 是否正常\n6.当Activity销毁路由请求是否自动取消\n7.当Fragment销毁路由请求是否自动取消\n8.RxRouter 的错误默认忽略是否全部正常\n9.RxRouter 获取 Intent 是否正常\n\n开发的库哪些地方如果有改动需要注意的：\n1.业务组件加载和卸载的时候,几个模块需要各自注意几点：\n1.1 中央路由表中有全部的路由对应的关系,当业务组件加载和卸载的时候,会把业务组件的那部分子路由表的对应关系给删除\n1.2 ServiceCenter 倒是不会有全部的 Service\n当加载业务组件的时候,每一个业务组件的 HostServiceImpl 会注册自己的 Service 到 Service 容器中\n当卸载业务组件的时候,每一个业务组件的 HostServiceImpl 会删除自己的 Service 从 Service 容器中\n1.3 InterceptorCenter 当加载或者卸载业务组件的时候会感知到,并且记录下已经发生模块的变化\n当用到全部的全局拦截器的时候,会根据是否变化选择是否去重新加载每一个子模块的全局拦截器\n而 InterceptorCenter 也会从总表里面删除或者加载业务模块的拦截器\n一个特殊的例外：ModuleBase 是一个模块,理论上是不可能卸载的,也可以不当成一个业务模块\n这个模块会被所有业务模块引用,如果业务模块是使用了 ModuleBase 的拦截器,通过 class 的方式引用,那你就算卸载 ModuleBase\n模块也是没用的,还是能引用到.但是操作上是不允许出现卸载 ModuleBase 模块的\n1.4 生命周期的管理中,当有业务模块加载的时候,缓存的部分不动,如果有业务模块卸载,会清空缓存模块的所有缓存!"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.7587890625,
          "content": "pluginManagement {\n    repositories {\n        maven { url 'https://jitpack.io' }\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        maven { url 'https://jitpack.io' }\n        google()\n        mavenCentral()\n        jcenter()\n    }\n}\nrootProject.name = \"Component\"\ninclude ':ComponentApi',\n        ':ComponentCompiler',\n        ':ComponentPlugin',\n        ':ComponentImpl',\n        ':ComponentKtImpl',\n        ':ComponentRxImpl'\ninclude ':Demo',\n        ':Demo:app',\n        ':Demo:Module1run',\n        ':Demo:ModuleHelp',\n        ':Demo:Module1',\n        ':Demo:Module2',\n        ':Demo:ModuleUser',\n        ':Demo:ModuleBase'"
        },
        {
          "name": "signature",
          "type": "blob",
          "size": 2.177734375,
          "content": null
        }
      ]
    }
  ]
}