{
  "metadata": {
    "timestamp": 1736708172889,
    "page": 633,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andpor/react-native-sqlite-storage",
      "stars": 2774,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3291015625,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git\nnode_modules\n\n# OSX\n#\n.DS_Store\n\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\nbuild/\nDerivedData\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n\n## Other\n*.xccheckout\n*.moved-aside\n*.xcuserstate\n*.xcscmblueprint\n*.xcscheme\n.vscode\n\nandroid/.gradle/\n# node.js\n#\nnode_modules/\nnpm-debug.log\n*.iml\n.idea\nlocal.properties\n\n# Created by https://www.gitignore.io/api/rade,gradle\n\n#!! ERROR: rade is undefined. Use list command to see defined gitignore types !!#\n\n### Gradle ###\n.gradle\ngradle\ngradlew\ngradlew.bat\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 1.3349609375,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git\nnode_modules\n\n# OSX\n#\n.DS_Store\n\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\nbuild/\nDerivedData\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n\n## Other\n*.xccheckout\n*.moved-aside\n*.xcuserstate\n*.xcscmblueprint\n*.xcscheme\n\nandroid/.gradle/\n# node.js\n#\nnode_modules/\nnpm-debug.log\n*.iml\n.idea\nlocal.properties\n\n# Created by https://www.gitignore.io/api/rade,gradle\n\n#!! ERROR: rade is undefined. Use list command to see defined gitignore types !!#\n\n### Gradle ###\n.gradle\ngradle\ngradlew\ngradlew.bat\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\ninstructions/"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.5234375,
          "content": "# Version History\n\nv6.0.1\n 1. Add missing error function to plugin.\n\nv6.0.0\n 1. Added RNW>=0.62 WinRT CPP implementation thanks to tsytsarkin (https://github.com/andpor/react-native-sqlite-storage/pull/461)\n 2. Fix xcode 12 compatibility (https://github.com/andpor/react-native-sqlite-storage/pull/447)\n 3. Add warn method to the plugin (https://github.com/andpor/react-native-sqlite-storage/issues/402)\n\nv5.0.0\n 1. Change RN to Google Maven (https://github.com/andpor/react-native-sqlite-storage/pull/405)\n 2. Native Android with JSON1 support (https://github.com/andpor/react-native-sqlite-storage/pull/392)\n 3. Resolve errors linking library via CocoaPods in iOS (https://github.com/andpor/react-native-sqlite-storage/pull/396)\n 4. Documentation enhancements for Android native (https://github.com/andpor/react-native-sqlite-storage/pull/393)\n 5. Documentation enhancements (https://github.com/andpor/react-native-sqlite-storage/pull/385)\n \nv4.1.0\n 1. New native SQLite libraries for Android. Dropping support for armeabi.\n \nv4.0.0\n 1. RN 0.60 compatibility (https://github.com/andpor/react-native-sqlite-storage/pull/361)\n \nv3.3.10\n 1. Fix package org.pgsqlite not found error for RN 0.58.4 (https://github.com/andpor/react-native-sqlite-storage/pull/324)\n \nv3.3.9\n 1. Gradle upgrade to 3.1.4 and addition of google repo (https://github.com/andpor/react-native-sqlite-storage/issues/294)\n \nv3.3.8\n 1. UWP implementation for SqliteStorage (https://github.com/andpor/react-native-sqlite-storage/pull/302)\n 2. Fix the window is not defined (https://github.com/andpor/react-native-sqlite-storage/pull/295)\n \nv3.3.7\n 1. Remove rnpm-postlink (#292)\n 2. Use correct parameters for SQLite.openDatabase (#291)\n 3. Pulling SDK versions from root project (#287) - Android only\n \nv3.3.6\n 1. Fix INTEGER column value overflow.\n \nv3.3.5\n 1. All JSON conversions in Android modules have been eliminated in favor of direct React Native interfaces. This should provide siginificant performance improvement.\n 2. Main Queue Warning issue fixed in iOS.\n 3. Exception handling in logic processing asset imports have been fixed and error codes are properly propagated to JS callabcks.\n 4. Examples have been revamped and library was tested with XCode 9 and Android Studio 3.1.1 (Gradle 2.2)\n \nv3.3.4\n 1. New version of native binaries compile with latest sqlite version 3.20.1 supporting pcre extension to enable REGEXP function for Android. (https://github.com/andpor/react-native-sqlite-storage/pull/205)\n 2. Fixes Xcode warning for potentially insecure string. (https://github.com/andpor/react-native-sqlite-storage/pull/199)\n 3. Remove createJSModules @ovveride marker - RN 0.47 compatibility. (https://github.com/andpor/react-native-sqlite-storage/pull/188)\n 4. Podfile add macOS support (https://github.com/andpor/react-native-sqlite-storage/pull/179)\n 5. instructions directory added on npmignore. (https://github.com/andpor/react-native-sqlite-storage/pull/174)\n \nv3.3.3\n 1. Fix for the db location string [Issue #172] (https://github.com/andpor/react-native-sqlite-storage/issues/172)\n 2. #define in iOS casebase for SQLCIPHER. If you include this #define in your main project settings, this library will pick up appropriate key handling code automatically.\n \nv3.3.2\n 1. Yoga import fix\n \nv3.3.1\n 1. Comment of SQLCipher code in iOS implementation as a quick fix. [Issue #155] (https://github.com/andpor/react-native-sqlite-storage/issues/155)\n \nv3.3.0 (Extended thanks to dryganets for his significant contributions to this release)\n 1. Access to MutableDictonary openDBs properly synchronized [PR #130] (https://github.com/andpor/react-native-sqlite-storage/pull/130)\n 2. Database attach flow fixed. Threading model fix in order to have all queries executed in the same order [PR #131] (https://github.com/andpor/react-native-sqlite-storage/pull/131)\n 3. All statements and queries are closed in finally statements in order to fix SQLiteCipher corner case crashes [PR #132] (https://github.com/andpor/react-native-sqlite-storage/pull/132)\n 4. Minor style fix\tin index.ios.callback.js and index.ios.promise.js [PR #136] (https://github.com/andpor/react-native-sqlite-storage/pull/136)\n 5. Fix determination logic for opened db [PR #139] (https://github.com/andpor/react-native-sqlite-storage/pull/139)\n 6. Clean up in lib/sqlite.core.js [PR #138] (https://github.com/andpor/react-native-sqlite-storage/pull/138)\n 7. Production grade logging for the Android plugin [PR #137] (https://github.com/andpor/react-native-sqlite-storage/pull/137)\n 8. Remove pre-honeycomb workaround code in Android that was causing issues in SQL Cipher [PR #147] (https://github.com/andpor/react-native-sqlite-storage/pull/147)\n 9. Fix broken Markdown headings [PR #153] (https://github.com/andpor/react-native-sqlite-storage/pull/153)\n 10. Drop usage of the dead rnpm repository [PR #148] (https://github.com/andpor/react-native-sqlite-storage/pull/148)\n\nv3.2.2\n 1. Corrects the CocoaPods based development set-up instructions and includes sample Podfile. [Issue #125] (https://github.com/andpor/react-native-sqlite-storage/issues/125)\n \nv3.2.1\n 1. Sample apps in test directory adjusted for React Native 0.41 and plugability in AwesomeProject. [Issue #120] (https://github.com/andpor/react-native-sqlite-storage/issues/120)\n \nv3.2.0 \n 1. This is a backward incompatible release with baseline React Native 0.40 support.\n 2. [React Native 0.40 compatibility fixes] (https://github.com/andpor/react-native-sqlite-storage/pull/110) - thanks K-Leon for this contribution\n \nv3.1.3\n 1. Add support for ATTACH (thanks to itinance for this contribution)\n 2. Example applications are now hosted in separate repo [react-native-sqlite-examples] (https://github.com/andpor/react-native-sqlite-storage-examples)\n\n\nv3.1.2\n 1. Add support for CocoaPods (thanks to JAStanton for this contribution)\n 2. Set base iOS build to 8.0\n\nv3.1.1\n 1.  Fix for Cordova issue #517: reject ALTER, REINDEX and REPLACE operations in readTransactions\n 2.  Stop remaining transaction callback in case of an error with no error handler returning false\n\nv3.1.0\n 1. Backward incompatible change. Boolean params will now be converted and stored as int type, 0 and 1, in compliance with SQLite specifications. Issue [#63] (https://github.com/andpor/react-native-sqlite-storage/issues/63)\n 2. Database decoupled from the Activity lifecycle on Android. With this change, the database will not be closed without explicit instructions to close it. SQLitePluginPackage constructor change. Pull Request [#62] (https://github.com/andpor/react-native-sqlite-storage/pull/62)\n 3. Correct handling for executeSql with object as sql value (solves a possible crash on iOS)\n 4. Backfill cordova-sqlite-storage fix - readTransaction allows modification in case of extra semicolon before SQL. Issue [#460] (https://github.com/litehelpers/Cordova-sqlite-storage/issues/460)\n\nv3.0.0\n 1. Default location changes for iOS for App Store iCloud compliance - backward incompatible release. Default now is no-sync location instead of docs.\n 2. Ability to point to read-only db file in app bundle directly without requiring it to be copied elsewhere.\n 2. Check if db is open before throwing an exception (triggered in android lock workaround)\n 3. Fix for issue #57. Can't find variable: Blob\n\nv2.1.6\n 1. rnpm linking for iOS - contributed by @clozr\n 2. Backfill Cordova read transaction bug fix.\n\nv2.1.5\n 1. Allow retrieval of pre-populated db files from user defined locations in application bundle as well as the sandbox.\n 2. Implement Activity lifecycle mgmt in Android native\n 3. Fix issue [#37] (https://github.com/andpor/react-native-sqlite-storage/issues/37) - Int Column type value overflow\n 4. Fix issue [#38] (https://github.com/andpor/react-native-sqlite-storage/issues/38) - Transactions not aborted with Promise runtime\n 5. Backfill fixes from Cordova SQLite Storage\n    - add sqlBatch to facilitate batch exec of simple SQL statements (Android + iOS)\n    - add echoTest for plugin integrity test\n\nv2.1.4 - tested with React 0.21.0\n 1. Expose a bulk data retrieval interface from JS\n 2. Fix JS 'strict' mode execution errors\n\nv2.1.3\n 1. Fix the runtime error in reflection.\n\nv2.1.2\n 1. Android Native SQLite connectivity\n 2. Change how React parameters are processed to map a Number to Java Double\n 3. Implement hooks for activity lifecycle and automatic db closing on destroy\n 4. Fix How To Get Started instructions for Android\n\nv2.1.1 - Fixes issues with XCode path and React Native version compatibility\n\nv2.1 - Android support\n\nv2.0 - Full support for Promise API. Backward compatible with Callbacks.\n\nv1.0 - Initial release for iOS with full support of all operations based on plan JavaScript callbacks.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 andpor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Podfile",
          "type": "blob",
          "size": 0.263671875,
          "content": "platform :ios, '8.0'\ntarget 'AwesomeProject' do\n  pod 'yoga', :path => '../node_modules/react-native/ReactCommon/yoga'\n  pod 'React', :path => '../node_modules/react-native'\n  pod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'\nend\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.9599609375,
          "content": "# react-native-sqlite-storage\nSQLite3 Native Plugin for React Native for both Android (Classic and Native), iOS and Windows\n\nFoundation of this library is based on Chris Brody's Cordova SQLite plugin.\n\nFeatures:\n  1. iOS and Android supported via identical JavaScript API.\n  2. Android in pure Java and Native modes\n  3. SQL transactions\n  4. JavaScript interface via plain callbacks or Promises.\n  5. Pre-populated SQLite database import from application bundle and sandbox\n  6. Windows supports callback API, identical to iOS and Android\n\nThere are sample apps provided in test directory that can be used in with the AwesomeProject generated by React Native. All you have to do is to copy one of those files into your AwesomeProject replacing index.ios.js.\n\nPlease let me know your projects that use these SQLite React Native modules. I will list them in the reference section. If there are any features that you think would benefit this library please post them.\n\nThe library has been tested with React 16.2 (and earlier) and XCode 7,8,9 - it works fine out of the box without any need for tweaks or code changes. For XCode 7,8 vs. XCode 6 the only difference is that sqlite ios library name suffix is tbd instead of dylib.\n\nVersion 3.2 is the first version compatible with RN 0.40.\n\n# Installation\n```\n  npm install --save react-native-sqlite-storage\n```\nThen follow the instructions for your platform to link react-native-sqlite-storage into your project\n\n## Promises\nTo enable promises, run \n```javascript\nSQLite.enablePromise(true);\n```\n\n## iOS\n#### Standard Method\n** React Native 0.60 and above **\nRun `cd ios && pod install && cd ..`. Linking is not required in React Native 0.60 and above\n\n** React Native 0.59 and below **\n\n#### Step 1. Install Dependencies\n\n##### With CocoaPods:\n\nAdd this to your Podfile which should be located inside the ios project subdirectory\n```ruby\npod 'React', :path => '../node_modules/react-native'\npod 'react-native-sqlite-storage', :path => '../node_modules/react-native-sqlite-storage'\n```\nOr use the sample Podfile included in the package by copying it over to ios subdirectory and replacing AwesomeProject inside of it with the name of your RN project.\n\nRefresh the Pods installation\n```ruby\npod install\n```\nOR\n```ruby\npod update\n```\n\nDone, skip to Step 2.\n\n##### Without CocoaPods:\n\nThis command should be executed in the root directory of your RN project\n```shell\nreact-native link\n```\n\nrnpm and xcode are dependencies of this project and should get installed with the module but in case there are issue running rnpm link and rnpm/xcode are not already installed you can try to install it globally as follows:\n```shell\nnpm -g install rnpm xcode\n```\nAfter linking project should like this:\n\n![alt tag](instructions/after-rnpm.png)\n\n#### Step 1a. If rnpm link does not work for you you can try manually linking according to the instructions below:\n\n\n##### Drag the SQLite Xcode project as a dependency project into your React Native XCode project\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/libs.png)\n\n##### XCode SQLite libraries dependency set up\n\nAdd libSQLite.a (from Workspace location) to the required Libraries and Frameworks. Also add sqlite3.0.tbd (XCode 7) or libsqlite3.0.dylib (XCode 6 and earlier) in the same fashion using Required Libraries view (Do not just add them manually as the build paths will not be properly set)\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addlibs.png)\n\n#### Step 2. Application JavaScript require\n\nAdd var SQLite = require('react-native-sqlite-storage') to your index.ios.js\n\n![alt tag](instructions/require.png)\n\n#### Step 3. Write application JavaScript code using the SQLite plugin\n\nAdd JS application code to use SQLite API in your index.ios.js etc. Here is some sample code. For full working example see test/index.ios.callback.js. Please note that Promise based API is now supported as well with full examples in the working React Native app under test/index.ios.promise.js\n\n```javascript\nerrorCB(err) {\n  console.log(\"SQL Error: \" + err);\n},\n\nsuccessCB() {\n  console.log(\"SQL executed fine\");\n},\n\nopenCB() {\n  console.log(\"Database OPENED\");\n},\n\nvar db = SQLite.openDatabase(\"test.db\", \"1.0\", \"Test Database\", 200000, openCB, errorCB);\ndb.transaction((tx) => {\n  tx.executeSql('SELECT * FROM Employees a, Departments b WHERE a.department = b.department_id', [], (tx, results) => {\n      console.log(\"Query completed\");\n\n      // Get rows with Web SQL Database spec compliance.\n\n      var len = results.rows.length;\n      for (let i = 0; i < len; i++) {\n        let row = results.rows.item(i);\n        console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`);\n      }\n\n      // Alternatively, you can use the non-standard raw method.\n\n      /*\n        let rows = results.rows.raw(); // shallow copy of rows Array\n\n        rows.map(row => console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`));\n      */\n    });\n});\n```\n\n# How to use (Android):\n\n** React Native 0.60 and above **\nIf you would like to use the devices SQLite there are no extra steps.\nHowever, if you would like to use the SQLite bundled with this library (includes support for FTS5), add the following to your `react-native.config.js`\n\n```js\nmodule.exports = {\n  ...,\n  dependencies: {\n    ...,\n    \"react-native-sqlite-storage\": {\n      platforms: {\n        android: {\n          sourceDir:\n            \"../node_modules/react-native-sqlite-storage/platforms/android-native\",\n          packageImportPath: \"import io.liteglue.SQLitePluginPackage;\",\n          packageInstance: \"new SQLitePluginPackage()\"\n        }\n      }\n    }\n    ...\n  }\n  ...\n};\n```\n\n** React Native 0.59 and below **\n\n#### Step 1 - Update Gradle Settings (located under Gradle Settings in Project Panel)\n\n```gradle\n// file: android/settings.gradle\n...\n\ninclude ':react-native-sqlite-storage'\nproject(':react-native-sqlite-storage').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-sqlite-storage/platforms/android') // react-native-sqlite-storage >= 4.0.0\n// IMPORTANT: if you are working with a version less than 4.0.0 the project directory is '../node_modules/react-native-sqlite-storage/src/android'\n```\n\n#### Step 2 - Update app module Gradle Build script (located under Gradle Settings in Project Panel)\n\n```gradle\n// file: android/app/build.gradle\n...\n\ndependencies {\n    ...\n    implementation project(':react-native-sqlite-storage')\n}\n```\n\n#### Step 3 - Register React Package (this should work on React version but if it does not , try the ReactActivity based approach. Note: for version 3.0.0 and below you would have to pass in the instance of your Activity to the SQLitePluginPackage constructor\n\n```java\n...\nimport org.pgsqlite.SQLitePluginPackage;\n\npublic class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {\n\n    private ReactInstanceManager mReactInstanceManager;\n    private ReactRootView mReactRootView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mReactRootView = new ReactRootView(this);\n        mReactInstanceManager = ReactInstanceManager.builder()\n                .setApplication(getApplication())\n                .setBundleAssetName(\"index.android.bundle\")  // this is dependant on how you name you JS files, example assumes index.android.js\n                .setJSMainModuleName(\"index.android\")        // this is dependant on how you name you JS files, example assumes index.android.js\n                .addPackage(new MainReactPackage())\n                .addPackage(new SQLitePluginPackage())       // register SQLite Plugin here\n                .setUseDeveloperSupport(BuildConfig.DEBUG)\n                .setInitialLifecycleState(LifecycleState.RESUMED)\n                .build();\n        mReactRootView.startReactApplication(mReactInstanceManager, \"AwesomeProject\", null); //change \"AwesomeProject\" to name of your app\n        setContentView(mReactRootView);\n    }\n...\n\n```\n\nAlternative approach on newer versions of React Native (0.18+). Note: for version 3.0.0 and below you would have to pass in the instance of your Activity to the SQLitePluginPackage constructor\n\n```java\nimport org.pgsqlite.SQLitePluginPackage;\n\npublic class MainApplication extends Application implements ReactApplication {\n  ......\n\n  /**\n   * A list of packages used by the app. If the app uses additional views\n   * or modules besides the default ones, add more packages here.\n   */\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n        new SQLitePluginPackage(),   // register SQLite Plugin here\n        new MainReactPackage());\n    }\n}\n```\n\n#### Step 4 - Require and use in Javascript - see full examples (callbacks and Promise) in test directory.\n\n```js\n// file: index.android.js\n\nvar React = require('react-native');\nvar SQLite = require('react-native-sqlite-storage')\n...\n```\n\n## Windows\n** RNW 0.63 with Autolinking and above **\n\nNo manual steps required\n\n** React Native 0.62 **\n### Step 1: Update the solution file\n\nAdd the `SQLitePlugin` project to your solution.\n\n1. Open the solution in Visual Studio 2019\n2. Right-click Solution icon in Solution Explorer > Add > Existing Project\n3. Select `node_modules\\react-native-sqlite-storage\\platforms\\windows\\SQLitePlugin\\SQLitePlugin.vcxproj`\n\n### Step 2: Update the .vcxproj file\n\nAdd a reference to `SQLitePlugin` to your main application project. From Visual Studio 2019:\n\n1. Right-click main application project > Add > Reference... \n2. Check `SQLitePlugin` from Solution Projects\n\n\n### Step 3: Update the `pch.h` file\n\nAdd `#include \"winrt/SQLitePlugin.h\"`.\n\n### Step 4: Register the package in `App.cpp`\n\nAdd `PackageProviders().Append(winrt::SQLitePlugin::ReactPackageProvider());` before `InitializeComponent();`.\n\nRefer to this guide for more details: https://microsoft.github.io/react-native-windows/docs/next/native-modules-using\n\n\n## Setting up your project to import a pre-populated SQLite database from application for iOS\n\n#### Step 1 - Create 'www' folder.\n\nCreate a folder called 'www' (yes must be called precisely that else things won't work) in the project folder via Finder\n\n#### Step 2 - Create the database file\n\nCopy/paste your pre-populated database file into the 'www' folder. Give it the same name you are going to use in openDatabase call in your application\n\n#### Step 3 - Add file to project\n\nin XCode, right click on the main folder and select Add Files to 'your project name'\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addFilesToProject.png)\n\n#### Step 4 - Choose files to add\n\nIn the Add Files dialog, navigate to the 'www' directory you created in Step 1, select it, make sure you check the option to Create Folder Reference\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/addFilesToProjectSelect.png)\n\n#### Step 5 - Verify project structure\n\nEnsure your project structure after previous steps are executed looks like this\n\n![alt tag](https://raw.github.com/andpor/react-native-sqlite-storage/master/instructions/projectStructureAfter.png)\n\n### Step 6 - Adjust openDatabase call\n\nModify you openDatabase call in your application adding createFromLocation param. If you named your database file in step 2 'testDB' the openDatabase call should look like something like this:\n```js\n\n  ...\n  1.SQLite.openDatabase({name : \"testDB\", createFromLocation : 1}, okCallback,errorCallback);\n  // default - if your folder is called www and data file is named the same as the dbName - testDB in this example\n  2.SQLite.openDatabase({name : \"testDB\", createFromLocation : \"~data/mydbfile.sqlite\"}, okCallback,errorCallback);\n  // if your folder is called data rather than www or your filename does not match the name of the db\n  3.SQLite.openDatabase({name : \"testDB\", createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n  // if your folder is not in app bundle but in app sandbox i.e. downloaded from some remote location.\n  ...\n\n```\nFor Android, the www directory is always relative to the assets directory for the app: src/main/assets\n\nEnjoy!\n\n## Opening a database\n\nOpening a database is slightly different between iOS and Android. Where as on Android the location of the database file is fixed, there are three choices of where the database file can be located on iOS. The 'location' parameter you provide to openDatabase call indicated where you would like the file to be created. This parameter is neglected on Android.\n\nWARNING: the default location on iOS has changed in version 3.0.0 - it is now a no-sync location as mandated by Apple so the release is backward incompatible.\n\n\nTo open a database in default no-sync location (affects iOS *only*)::\n\n```js\nSQLite.openDatabase({name: 'my.db', location: 'default'}, successcb, errorcb);\n```\n\nTo specify a different location (affects iOS *only*):\n\n```js\nSQLite.openDatabase({name: 'my.db', location: 'Library'}, successcb, errorcb);\n```\n\nwhere the `location` option may be set to one of the following choices:\n- `default`: `Library/LocalDatabase` subdirectory - *NOT* visible to iTunes and *NOT* backed up by iCloud\n- `Library`: `Library` subdirectory - backed up by iCloud, *NOT* visible to iTunes\n- `Documents`: `Documents` subdirectory - visible to iTunes and backed up by iCloud\n- `Shared`:  app group's shared container - *see next section*\n\nThe original webSql style openDatabase still works and the location will implicitly default to 'default' option:\n\n```js\nSQLite.openDatabase(\"myDatabase.db\", \"1.0\", \"Demo\", -1);\n```\n\n## Opening a database in an App Group's Shared Container (iOS)\n\nIf you have an iOS app extension which needs to share access to the same DB instance as your main app, you must use the shared container of a registered app group.\n\nAssuming you have already set up an app group and turned on the \"App Groups\" entitlement of both the main app and app extension, setting them to the same app group name, the following extra steps must be taken:\n\n#### Step 1 - supply your app group name in all needed `Info.plist`s\n\nIn both `ios/MY_APP_NAME/Info.plist` and `ios/MY_APP_EXT_NAME/Info.plist` (along with any other app extensions you may have), you simply need to add the `AppGroupName` key to the main dictionary with your app group name as the string value:\n\n```xml\n<plist version=\"1.0\">\n<dict>\n  <!-- ... -->\n  <key>AppGroupName</key>\n  <string>MY_APP_GROUP_NAME</string>\n  <!-- ... -->\n</dict>\n</plist>\n```\n\n#### Step 2 - set shared database location\n\nWhen calling `SQLite.openDatabase` in your React Native code, you need to set the `location` param to `'Shared'`:\n\n```js\nSQLite.openDatabase({name: 'my.db', location: 'Shared'}, successcb, errorcb);\n```\n\n## Importing a pre-populated database.\n\nYou can import an existing - prepopulated database file into your application. Depending on your instructions in openDatabase call, the sqlite-storage will look at different places to locate you pre-populated database file.\n\n\nUse this flavor of openDatabase call, if your folder is called www and data file is named the same as the dbName - testDB in this example\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : 1}, okCallback,errorCallback);\n```\n\nUse this flavor of openDatabase call if your folder is called data rather than www or your filename does not match the name of the db. In this case db is named testDB but the file is mydbfile.sqlite which is located in a data subdirectory of www\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : \"~data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\nUse this flavor of openDatabase call if your folder is not in application bundle but in app sandbox i.e. downloaded from some remote location. In this case the source file is located in data subdirectory of Documents location (iOS) or FilesDir (Android).\n\n```js\nSQLite.openDatabase({name : \"testDB\", createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\n## Additional options for pre-populated database file\n\nYou can provide additional instructions to sqlite-storage to tell it how to handle your pre-populated database file. By default, the source file is copied over to the internal location which works in most cases but sometimes this is not really an option particularly when the source db file is large. In such situations you can tell sqlite-storage you do not want to copy the file but rather use it in read-only fashion via direct access. You accomplish this by providing an additional optional readOnly parameter to openDatabase call\n\n```js\nSQLite.openDatabase({name : \"testDB\", readOnly: true, createFromLocation : \"/data/mydbfile.sqlite\"}, okCallback,errorCallback);\n```\n\nNote that in this case, the source db file will be open in read-only mode and no updates will be allowed. You cannot delete a database that was open with readOnly option. For Android, the read only option works with pre-populated db files located in FilesDir directory because all other assets are never physically located on the file system but rather read directly from the app bundle.\n\n## Attaching another database\n\nSqlite3 offers the capability to attach another database to an existing database-instance, i.e. for making cross database JOINs available.\nThis feature allows to SELECT and JOIN tables over multiple databases with only one statement and only one database connection.\nTo archieve this, you need to open both databases and to call the attach()-method of the destination (or master) -database to the other ones.\n\n```js\nlet dbMaster, dbSecond;\n\ndbSecond = SQLite.openDatabase({name: 'second'},\n  (db) => {\n    dbMaster = SQLite.openDatabase({name: 'master'},\n      (db) => {\n        dbMaster.attach( \"second\", \"second\", () => console.log(\"Database attached successfully\"), () => console.log(\"ERROR\"))\n      },\n      (err) => console.log(\"Error on opening database 'master'\", err)\n    );\n  },\n  (err) => console.log(\"Error on opening database 'second'\", err)\n);\n```\n\nThe first argument of attach() is the name of the database, which is used in SQLite.openDatabase(). The second argument is the alias, that is used to query on tables of the attached database.\n\nThe following statement would select data from the master database and include the \"second\"-database within a simple SELECT/JOIN-statement:\n\n```sql\nSELECT * FROM user INNER JOIN second.subscriptions s ON s.user_id = user.id\n```\n\nTo detach a database, just use the detach()-method:\n\n```js\ndbMaster.detach( 'second', successCallback, errorCallback );\n```\n\nFor sure, their is also Promise-support available for attach() and detach(), as shown in the example-application under the\ndirectory \"examples\".\n\n# Original Cordova SQLite Bindings from Chris Brody and Davide Bertola\nhttps://github.com/litehelpers/Cordova-sqlite-storage\n\nThe issues and limitations for the actual SQLite can be found on this site.\n\n## Issues\n\n1. Android binds all numeric SQL input values to double. This is due to the underlying React Native limitation where only a Numeric type is available on the interface point making it ambiguous to distinguish integers from doubles. Once I figure out the proper way to do this I will update the codebase [(Issue #4141)] (https://github.com/facebook/react-native/issues/4141).\n"
        },
        {
          "name": "instructions",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.9697265625,
          "content": "{\n  \"name\": \"react-native-sqlite-storage\",\n  \"version\": \"6.0.1\",\n  \"description\": \"SQLite3 bindings for React Native (Android & iOS)\",\n  \"main\": \"sqlite.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified yet\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/andpor/react-native-sqlite-storage.git\"\n  },\n  \"keywords\": [\n    \"react-native-sqlite-storage\",\n    \"react-native-sqlite\",\n    \"react-component\",\n    \"reactnative\",\n    \"react-native\",\n    \"sqlite\",\n    \"sqlite3\",\n    \"ios\",\n    \"android\",\n    \"promise\",\n    \"cordova-sqlite-storage\"\n  ],\n  \"author\": \"Andrzej Porebski\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/andpor/react-native-sqlite-storage/issues\"\n  },\n  \"homepage\": \"https://github.com/andpor/react-native-sqlite-storage\",\n  \"peerDependencies\": {\n    \"react-native\": \">=0.14.0\"\n  },\n  \"devDependencies\": {\n    \"react\": \"16.13.1\",\n    \"react-native\": \"^0.63.2\",\n    \"react-native-windows\": \"^0.63.6\"\n  }\n}\n"
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "react-native-sqlite-storage.podspec",
          "type": "blob",
          "size": 0.7021484375,
          "content": "require 'json'\n\npackage = JSON.parse(File.read(File.join(__dir__, 'package.json')))\n\nPod::Spec.new do |s|\n  s.name     = \"react-native-sqlite-storage\"\n  s.version  = package['version']\n  s.summary  = package['description']\n  s.homepage = \"https://github.com/andpor/react-native-sqlite-storage\"\n  s.license  = package['license']\n  s.author   = package['author']\n  s.source   = { :git => \"https://github.com/andpor/react-native-sqlite-storage.git\", :tag => \"#{s.version}\" }\n\n  s.ios.deployment_target = '8.0'\n  s.osx.deployment_target = '10.10'\n\n  s.preserve_paths = 'README.md', 'LICENSE', 'package.json', 'sqlite.js'\n  s.source_files   = \"platforms/ios/*.{h,m}\"\n\n  s.dependency 'React-Core'\n  s.library = 'sqlite3'\nend\n"
        },
        {
          "name": "react-native.config.js",
          "type": "blob",
          "size": 0.3876953125,
          "content": "module.exports = {\n\tdependency: {\n\t\tplatforms: {\n\t\t\tios: {\n\t\t\t\tproject: './platforms/ios/SQLite.xcodeproj'\n\t\t\t},\n\t\t\tandroid: {\n\t\t\t\tsourceDir: './platforms/android'\n\t\t\t},\n\t\t\twindows: {\n\t\t\t\tsourceDir: './platforms/windows',\n\t\t\t\tsolutionFile: 'SQLitePlugin.sln',\n\t\t\t\tprojects: [\n\t\t\t\t  {\n\t\t\t\t\tprojectFile: 'SQLitePlugin/SQLitePlugin.vcxproj',\n\t\t\t\t\tdirectDependency: true,\n\t\t\t\t  }\n\t\t\t\t],\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "sqlite.js",
          "type": "blob",
          "size": 2.748046875,
          "content": "/*\n * sqlite.js\n *\n * Created by Andrzej Porebski on 10/29/15.\n * Copyright (c) 2015-16 Andrzej Porebski.\n *\n * This library is available under the terms of the MIT License (2008).\n * See http://opensource.org/licenses/alphabetical for full text.\n */\nvar plugin = require('./lib/sqlite.core.js');\nvar {SQLiteFactory} = plugin;\n\nvar config = [\n\n  // meaning: [returnValueExpected,prototype,fn,argsNeedPadding,reverseCallbacks,rejectOnError]\n\n  [false,\"SQLitePlugin\",\"transaction\",false,true,true],\n  [false,\"SQLitePlugin\",\"readTransaction\",false,true,true],\n  [false,\"SQLitePlugin\",\"close\",false,false,true],\n  [false,\"SQLitePlugin\",\"executeSql\",true,false,true],\n  [false,\"SQLitePlugin\",\"sqlBatch\",false,false,true],\n  [false,\"SQLitePlugin\",\"attach\",true,false,true],\n  [false,\"SQLitePlugin\",\"detach\",false,false,true],\n  [false,\"SQLitePluginTransaction\",\"executeSql\",true,false,false],\n  [false,\"SQLiteFactory\",\"deleteDatabase\",false,false,true],\n  [true, \"SQLiteFactory\",\"openDatabase\",false,false,true],\n  [false,\"SQLiteFactory\",\"echoTest\",false,false,true]\n];\n\nvar originalFns = {};\nconfig.forEach(entry => {\n  let [returnValueExpected,prototype,fn]= entry;\n  let originalFn = plugin[prototype].prototype[fn];\n  originalFns[prototype + \".\" + fn] = originalFn;\n});\n\nfunction enablePromiseRuntime(enable){\n  if (enable){\n    createPromiseRuntime();\n  } else {\n    createCallbackRuntime();\n  }\n}\nfunction createCallbackRuntime() {\n  config.forEach(entry => {\n    let [returnValueExpected,prototype,fn,argsNeedPadding,reverseCallbacks,rejectOnError]= entry;\n    plugin[prototype].prototype[fn] = originalFns[prototype + \".\" + fn];\n  });\n  plugin.log(\"Callback based runtime ready\");\n}\nfunction createPromiseRuntime() {\n  config.forEach(entry => {\n    let [returnValueExpected,prototype,fn,argsNeedPadding,reverseCallbacks,rejectOnError]= entry;\n    let originalFn = plugin[prototype].prototype[fn];\n    plugin[prototype].prototype[fn] = function(...args){\n      if (argsNeedPadding && args.length == 1){\n        args.push([]);\n      }\n      var promise = new Promise((resolve,reject) => {\n        let success = function(...args){\n          if (!returnValueExpected) {\n           return resolve(args);\n          }\n        };\n        let error = function(err){\n          plugin.log('error: ',fn,...args,arguments);\n          if (rejectOnError) {\n            reject(err);\n          }\n          return false;\n        };\n        var retValue = originalFn.call(this,...args,reverseCallbacks ? error : success, reverseCallbacks ? success : error);\n        if (returnValueExpected){\n          return resolve(retValue);\n        }\n      });\n\n      return promise;\n    }\n  });\n  plugin.log(\"Promise based runtime ready\");\n}\nSQLiteFactory.prototype.enablePromise = enablePromiseRuntime;\n\nmodule.exports = new SQLiteFactory();\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}