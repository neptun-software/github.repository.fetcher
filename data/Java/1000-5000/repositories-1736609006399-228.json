{
  "metadata": {
    "timestamp": 1736609006399,
    "page": 228,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JoanZapata/android-iconify",
      "stars": 3935,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "build/\n.idea\n.gradle\n*.iml\n"
        },
        {
          "name": "ADD_FONT.md",
          "type": "blob",
          "size": 0.8359375,
          "content": "# Add support for a new font `XXX`\n\n**1** Go to [Icomoon](https://icomoon.io) and generate a font.\n\n**2** Copy `./android-iconify-fontawesome` to `./android-iconify-XXX`\n\n**3** Update `./settings.gradle` with the new module.\n\n**4** Rename class `FontAwesomeIcons` -> `XXXIcons`\n\n**5** Rename class `FontAwesomeModule` -> `XXXModule`\n\n**6** Replace the font in `src/main/assets` with `XXX.ttf` from Icomoon.\n\n**7** Update `XXXModule` as appropriate.\n\n**8** Update `XXXIcons` with the mappings.\n\n> If you generated from Icomoon, you can quickly generate the mappings using find `\\.(.*?):before \\{\\n.*?: \"\\\\(.*?)\";\\n}` replace `$1('\\\\u$2'),` on the generated `styles.css` file.\n\n**9** Add the dependency in `android-iconify-sample` and update the sample with the new font.\n\n**10** Compile and test the sample app on your device and make sure everything's ok.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.7451171875,
          "content": "Copyright 2015 Joan Zapata\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nIt uses FontAwesome font, licensed under OFL 1.1, which is compatible\nwith this library's license.\n\n    http://scripts.sil.org/cms/scripts/render_download.php?format=file&media_id=OFL_plaintext&filename=OFL.txt"
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Migration from 1.X.X\n\nIconify 2.X.X introduces breaking changes, here's the full list:\n\n**In build file**\n\n- `compile 'com.joanzapata.android:android-iconify:1.X.X'` -> `compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.X.X'`\n\n**In layouts**\n\n- `android.widget.IconButton` -> `com.joanzapata.iconify.widget.IconButton`\n- `android.widget.IconTextView` -> `com.joanzapata.iconify.widget.IconTextView`\n- `android.widget.IconToggleButton` -> `com.joanzapata.iconify.widget.IconToggleButton`\n\n**In code**\n\n- `com.joanzapata.android.iconify...` -> `com.joanzapata.iconify...`\n- `Iconify.IconValue.fa_something` -> `FontAwesomeIcons.fa_something`\n- Nothing in `Application` class -> `Iconify.with(new FontAwesomeModule())`\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4072265625,
          "content": "# Note: Due to lack of time, Iconify is no longer maintained and icon packs are outdated. I'd be very happy to welcome a new contributor, please reach me on twitter [@JoanZap](https://twitter.com/joanzap) if by any chance you're interested. ðŸ™‚\n\n<img src=\"graphics/logo.jpg\" height=\"154\" align=\"center\">\n\n[<img src=\"https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png\" width=\"121\">](https://play.google.com/store/apps/details?id=com.joanzapata.android.icons.sample)\n\n**Iconify** offers you a **huge collection of vector icons** to choose from, and an intuitive way to **add and customize them in your Android app**. It has been introduced in [**this blog post**](http://blog.joanzapata.com/iconify-just-got-a-lot-better/) which is a good place to get started. \n\n-----\n\n### Install\n\nPick any number of modules and declare them in your `Application`.\n\n```gradle\ndependencies {\n    compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.2.2' // (v4.5)\n    compile 'com.joanzapata.iconify:android-iconify-entypo:2.2.2' // (v3,2015)\n    compile 'com.joanzapata.iconify:android-iconify-typicons:2.2.2' // (v2.0.7)\n    compile 'com.joanzapata.iconify:android-iconify-material:2.2.2' // (v2.0.0)\n    compile 'com.joanzapata.iconify:android-iconify-material-community:2.2.2' // (v1.4.57)\n    compile 'com.joanzapata.iconify:android-iconify-meteocons:2.2.2' // (latest)\n    compile 'com.joanzapata.iconify:android-iconify-weathericons:2.2.2' // (v2.0)\n    compile 'com.joanzapata.iconify:android-iconify-simplelineicons:2.2.2' // (v1.0.0)\n    compile 'com.joanzapata.iconify:android-iconify-ionicons:2.2.2' // (v2.0.1)\n}\n```\n\n```java\npublic class MyApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Iconify\n            .with(new FontAwesomeModule())\n            .with(new EntypoModule())\n            .with(new TypiconsModule())\n            .with(new MaterialModule())\n            .with(new MaterialCommunityModule())\n            .with(new MeteoconsModule())\n            .with(new WeathericonsModule())\n            .with(new SimpleLineIconsModule())\n            .with(new IoniconsModule());\n    }\n}\n```\n\n### Show icons in text widgets\n\nIf you need to put an icon on a ```TextView``` or a ```Button```, use the ```{ }``` syntax. The icons act exactly like the text, so you can apply shadow, size and color on them!\n\n```xml\n<com.joanzapata.iconify.widget.IconTextView\n    android:text=\"I {fa-heart-o} to {fa-code} on {fa-android}\"\n    android:shadowColor=\"#22000000\"\n    android:shadowDx=\"3\"\n    android:shadowDy=\"3\"\n    android:shadowRadius=\"1\"\n    android:textSize=\"40sp\"\n    android:textColor=\"#FF...\"\n    ... />\n```\n\n<img src=\"graphics/androids.png\" height=\"347\">\n\n### Icon options\n\n* Shall you need to override the text size of a particular icon, the following syntax is supported `{fa-code 12px}`, `{fa-code 12dp}`, `{fa-code 12sp}`, `{fa-code @dimen/my_text_size}`, and also `{fa-code 120%}`.\n* In the same way you can override the icon color using `{fa-code #RRGGBB}`, `{fa-code #AARRGGBB}`, or `{fa-code @color/my_color}`.\n* You can even easily spin an icon like so `{fa-cog spin}`.\n\n<img src=\"graphics/spinning.gif\" height=\"37\">\n\n### Show an icon where you need a `Drawable`\n\nIf you need an icon in an ```ImageView``` or in your ```ActionBar``` menu item, then you should use ```IconDrawable```. Again, icons are infinitely scalable and will never get fuzzy!\n\n```java\n// Set an icon in the ActionBar\nmenu.findItem(R.id.share).setIcon(\n   new IconDrawable(this, FontAwesomeIcons.fa_share)\n   .colorRes(R.color.ab_icon)\n   .actionBarSize());\n```\n\n## Extensibility\n\nIn case you can't find the icon you want, you can extend the available icon directly from your app. All you need to do is to implement `IconFontDescriptor` with a `.ttf` file in your assets and provide the mapping between keys and special characters, then give it to `Iconify.with()`. You can use the  [FontAwesomeModule](https://github.com/JoanZapata/android-iconify/blob/master/android-iconify-fontawesome/src/main/java/com/joanzapata/iconify/fonts/FontAwesomeModule.java) as an example.\n\nThere are no constraints on the icon keys, but I strongly suggest you use a unique prefix like `my-` or anything, to avoid conflicts with other modules. FYI, if there **is** a conflict, the first module declared with `Iconify.with()` has priority.\n\nThe only dependency you need if you want to use a custom icon is Iconify core.\n\n```gradle\ncompile 'com.joanzapata.iconify:android-iconify:2.2.2'\n```\n\n-----\n\n## Contributions\n\n* Joan Zapata [@JoanZapata](https://github.com/JoanZapata)\n* Damien Villeneuve [@DayS](https://github.com/DayS)\n* Mike Penz [@mikepenz](https://github.com/mikepenz)\n\n## License\n\n```\nCopyright 2015 Joan Zapata\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nIt uses FontAwesome font by Dave Gandy, licensed under OFL 1.1, which is compatible\nwith this library's license.\n\n    http://scripts.sil.org/cms/scripts/render_download.php?format=file&media_id=OFL_plaintext&filename=OFL.txt\n    \n```\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.3173828125,
          "content": "# Publish to Play Store\n\nSetup `ICONIFY_SAMPLE_KEYSTORE_PASSWORD` in your `~/.gradle/gradle.properties` then\n\n```\ngradle assembleRelease\n```\n\n# Publish to Maven central\n\n```\ngradle uploadArchives\n```\n\nPromote release in [central](https://oss.sonatype.org/)\n\n```\nStaging Repositories > Choose the release > Close > Release\n```"
        },
        {
          "name": "android-iconify-entypo",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-fontawesome",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-ionicons",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-material-community",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-material",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-meteocons",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-simplelineicons",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-typicons",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify-weathericons",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-iconify",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.2841796875,
          "content": "subprojects {\n    buildscript {\n        repositories {\n            jcenter()\n        }\n    }\n\n    group = GROUP\n    version = VERSION_NAME\n\n}\n\next {\n    androidPlugin = 'com.android.tools.build:gradle:1.3.0'\n    minSdkVersion = 4\n    compileSdkVersion = 22\n    buildToolsVersion = '23.0.1'\n}"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.6005859375,
          "content": "GROUP=com.joanzapata.iconify\nVERSION_NAME=2.2.2\nVERSION_CODE=20202\nPOM_DESCRIPTION=Evolutive integration of popular icon fonts for Android\n\nPOM_URL=https://github.com/JoanZapata/android-iconify/\nPOM_SCM_URL=https://github.com/JoanZapata/android-iconify/\nPOM_SCM_CONNECTION=scm:git:git://github.com/JoanZapata/android-iconify/.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/JoanZapata/android-iconify/.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=JoanZapata\nPOM_DEVELOPER_NAME=Joan Zapata"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "graphics",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.408203125,
          "content": "include ':android-iconify',\n        ':android-iconify-typicons',\n        ':android-iconify-fontawesome',\n        ':android-iconify-entypo',\n        ':android-iconify-material',\n        ':android-iconify-material-community',\n        ':android-iconify-meteocons',\n        ':android-iconify-weathericons',\n        ':android-iconify-simplelineicons',\n        ':android-iconify-ionicons',\n        ':android-iconify-sample'\n"
        }
      ]
    }
  ]
}