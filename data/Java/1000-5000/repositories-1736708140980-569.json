{
  "metadata": {
    "timestamp": 1736708140980,
    "page": 569,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/binnavi",
      "stars": 2879,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.62890625,
          "content": "# Exclude the downloaded dependencies\ntarget/**\nthird_party/java/yfiles/**\n\n# Various artifacts we don't want to push\n*.class\n*.pyc\n*.pyo\n\n# Editor backup files\n*~\n.*.swp\n.*.swo\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n# Generated files\nbin/\ngen/\n**/build-data.properties\nbinnavi.map\n\n# Eclipse project files\n.classpath\n.project\n.settings\n\n# Intellij project files\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Gradle\n.gradletasknamecache\n.gradle/\nbuild/\nbin/\n\n# BinExport plugins that should be copied over\nsrc/main/java/com/google/security/zynamics/binnavi/exporters/BinExport/zynamics_binexport_*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.107421875,
          "content": "dist: bionic\n\njdk:\n  - openjdk11\n\nscript:\n  - mvn dependency:copy-dependencies\n  - ant build-binnavi-fat-jar\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.416015625,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other thingsâ€”for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.587890625,
          "content": "# BinNavi [![Build Status](https://api.travis-ci.org/google/binnavi.svg?branch=master)](https://travis-ci.org/google/binnavi)\n\nCopyright 2011-2020 Google LLC\n\n## Introduction\n\nBinNavi is a binary analysis IDE - an environment that allows users to inspect,\nnavigate, edit, and annotate control-flow-graphs of disassembled code, do the\nsame for the callgraph of the executable, collect and combine execution traces,\nand generally keep track of analysis results among a group of analysts.\n\n**Note: The BinNavi project is no longer under active development.**\n\n\n## Commercial third-party dependency\n\nBinNavi uses a commercial third-party graph visualisation library (yFiles) for\ndisplaying and laying out graphs. This library is immensely powerful, and not\neasily replaceable.\n\nIn order to perform direct development using yFiles, you need a developer\nlicense for it. At the same time, we want the community to be able to contribute to\nBinNavi without needing a commercial yFiles license. In order to do this and\nconform to the yFiles license, all interfaces to yFiles need to be properly\nobfuscated.\n\nIn order to achieve this, we did the following:\n\n1) BinNavi and all the libraries have been split into two: The parts of the\nproject that directly depend on yFiles were split into subpackages called\n\"yfileswrap\":\n\n*   `com.google.security.zynamics.binnavi`\n*   `com.google.security.zynamics.binnavi.yfileswrap`\n*   `com.google.security.zynamics.zylib`\n*   `com.google.security.zynamics.zylib.yfileswrap`\n*   `com.google.security.zynamics.reil`\n*   `com.google.security.zynamics.reil.yfileswrap`\n\nWe are distributing a pre-built JAR file with all the code in the ``yfileswrap``\nsubpackages - pre-linked and obfuscated against yFiles. If you wish to change\nor add code in BinNavi and do not have a yFiles license, you can freely do \npretty much  whatever you want in the non-yfileswrap packages - you can simply\nput the ``lib/yfileswrap-obfuscated.jar`` into your classpath to test and see\nthe results.\n\nIf you wish to make changes to the ``yfileswrap`` subdirectories, please be aware\nthat you will need a valid yFiles license - and any contribution that you make\nto the BinNavi project has to honor their license agreement. This means that\nyou can't simply expose their inner APIs under different names etc.\n\nWe will enforce this - we're very happy to have found a way to open-source\nBinNavi with the yFiles dependency, and we will make sure that any code we pull\nin respects the yFiles license.\n\n### Note for maintainers/yFiles license holders\n\nTo rebuild the yFiles wrapper library, first copy `y.jar` and `ysvg.jar` to\n`third_party/java/yfiles`. Then rebuild with:\n\n```\nmvn dependency:copy-dependencies\nant build-yfiles-wrapper-jar\nmvn install:install-file \\\n    -Dfile=target/yfileswrap-obfuscated.jar \\\n    -DgroupId=com.google.security.zynamics.binnavi \\\n    -DartifactId=yfileswrap-obfuscated \\\n    -Dversion=6.1 \\\n    -Dpackaging=jar \\\n    -DlocalRepositoryPath=lib\n```\n\n## Building BinNavi from scratch\n\nBinNavi uses Maven for its dependency management, but not for the actual build.\nJava 11 is the minimum supported version.\n\nTo build from scratch use these commands:\n\n```\nmvn dependency:copy-dependencies\nant build-binnavi-fat-jar\n```\n\n## Running BinNavi for the first time\n\nPlease be aware that BinNavi makes use of a central PostgreSQL database for\nstoring disassemblies/comments/traces - so you need to have such an instance\nrunning somewhere accessible to you. You can launch BinNavi as follows:\n\n```\njava -jar target/binnavi-all.jar\n```\n\n## Importing the project into Eclipse\n\nLoading the code into Eclipse for further development requires a little bit of\nconfiguration.\n\n1. Install the dependencies (as described above) and make sure you have a\n   Java SDK with 1.8 language compliance installed.\n2. Create a new \"Java Project From Existing Ant Buildfile\" and use the file ``build.xml``\n3. Select the \"javac\" task found in target \"build-binnavi-jar\"\n4. Open the \"Project Properties\" dialog and choose \"Java build Path\" showing the \"Source\" tab.\n5. Remove all but one source folder and edit it to have the following properties:\n   * Linked Folder Location: ``PROJECT_LOC/src/main/java``\n   * Folder Name: ``java``\n   * Click on \"Next\"\n6. Add ``**/yfileswrap/**`` to the list of directories to exclude.\n7. Go to \"Run->Run As\", select \"Java Application\" and then search for ``CMain``.\n\nYou should be ready to go from here.\n\n## Exporting disassemblies from IDA\n\nAs part of this project, we are distributing an IDA Pro plugin that exports\ndisassemblies from IDA into the PostgreSQL database format that BinNavi\nrequires. When running BinNavi, simply configure the right path for IDA,\nclick on the \"install plugin\" button if necessary -- you should now be able to\nimport disassemblies.\n\n## Using other disassemblers than IDA\n\nRight now, we only have the IDA export plugin - but we are hoping very much\nthat someone will help us build export functionality for other disassemblers\nin the near future.\n\n## Building BinNavi with Gradle\n\n*Please note that at current the Maven build is the authoritative build system for BinNavi. \nGradle is purely experimental and is likely to change.*\n\nYou can build BinNavi with gradle by running the following:\n\nOn Linux / OS X:\n\n```\n$ ./gradlew clean jar \n```\n\nOn Windows:\n\n```\n/gradlew.bat clean jar\n```\n\nThis will produce the jar in the project route under `build/libs/`. \n\n### Loading the project into Eclipse with Gradle\n\nOn Linux / OS X:\n\n```\n$ ./gradlew eclipse \n```\n\nOn Windows:\n\n```\n./gradlew.bat eclipse\n```\n\nAs part of the project creation process it will download the dependencies. Once complete\ndo the following to load into Eclipse:\n\n1. Open Eclipse.\n2. File > Import... from menu bar.\n3. From the window that appears select General > Existing Projects into Workspace.\n4. Ensure the \"Select root directory\" radio button is selected.\n5. Click Browse... and navigate to the project directory. \n6. The projects area should now have \"binnavi\" and a tick next to it.\n7. Press Finish.\n\nYou Eclipse workspace is now setup and complete for BinNavi. \n\n### Loading the project into IntelliJ with Gradle\n\nOn Linux / OS X:\n\n```\n$ ./gradlew idea\n```\n\nOn Windows:\n\n```\n./gradlew.bat idea\n```\n\nAs part of the project creation process it will download the dependencies. Once complete\ndo the following to load into IntelliJ:\n\n1. Open IntelliJ.\n2. Select \"Open\" from main window.\n3. Navigate to the project folder and should see the IntelliJ icon. This signifies its a project.\n4. Press Ok and wait for it to import and load. \n5. IntelliJ might not recognise it as a gradle project. Select enable from the popup window and use local gradle. \n\nYour IntelliJ environment is now setup and complete for IntelliJ.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.634765625,
          "content": "apply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'maven'\n\n\ndef gradle_version = '2.6'\n\n\nsourceCompatibility = 1.8\nversion = '6.0-SNAPSHOT'\n\n\nrepositories {\n    mavenCentral()\n    maven {\n        url \"lib\"\n    }\n}\n\n\ndependencies {\n    compile group: 'org.antlr', name: 'antlr', version: '3.2'\n    compile group: 'org.apache.xmlgraphics', name: 'batik-awt-util', version: '1.8'\n    compile group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.8'\n    compile group: 'org.apache.xmlgraphics', name: 'batik-svggen', version: '1.8'\n    compile group: 'org.apache.xmlgraphics', name: 'batik-util', version: '1.8'\n    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n    compile group: 'com.jidesoft', name: 'jide-oss', version: '3.6.9'\n    compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1201-jdbc41'\n    compile group: 'javax.inject', name: 'javax.inject', version: '1'\n    compile group: 'org.python', name: 'jython-standalone', version: '2.5.3'\n    compile group: 'org.w3c.css', name: 'sac', version: '1.3'\n    compile group: 'xml-apis', name: 'xml-apis', version: '1.4.01'\n    compile group: 'xml-apis', name: 'xml-apis-ext', version: '1.3.04'\n    compile group: 'net.sf.proguard', name: 'proguard-base', version: '5.2.1'\n    compile group: 'com.google.security.zynamics.binnavi', name: 'yfileswrap-obfuscated', version: '6.1'\n\n    compile group: 'junit', name: 'junit', version: '4+'\n}\n\n\nsourceSets {\n    main {\n        java {\n            srcDir 'src/main/java'\n\n            exclude '**/yfileswrap/**'\n            exclude 'com/google/security/zynamics/zylib/yfileswrap/**'\n            exclude 'com/google/security/zynamics/reil/yfileswrap/**'\n        }\n        resources {\n            srcDir 'src/main/java'\n            include 'com/google/security/zynamics/binnavi/data/**'\n        }\n    }\n}\n\n\neclipse {\n    project {\n        name = 'binnavi'\n    }\n}\n\n\njar {\n\n    dependsOn 'versionInfo'\n    manifest {\n        attributes (\n            \"Main-Class\": \"com.google.security.zynamics.binnavi.CMain\", \n            \"SplashScreen-Image\": \"com/google/security/zynamics/binnavi/data/splash.jpg\"\n        )\n    }\n\n    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }\n}\n\n\njavadoc {\n    failOnError = false\n}\n\n\ntask versionInfo(type:Exec){\n    commandLine 'git describe --always HEAD'.split()\n    ext.versionfile = new File('src/main/java/com/google/security/zynamics/binnavi/data/build-data.properties')\n    standardOutput = new ByteArrayOutputStream()\n\n    doLast {\n        def theDate = '#' + new Date() + '\\n\\n'\n        versionfile.text = theDate + 'build.revision=' + standardOutput.toString()\n    }\n}\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 9.3291015625,
          "content": "<!--\n  Ant build file for building zylib, reil, binnavi.\n-->\n\n<project name=\"binnavi\" default=\"build-binnavi-fat-jar\" basedir=\"./\">\n\n  <property name=\"project.dir\" location=\"\"/>\n  <property name=\"out.dir\" location=\"${project.dir}/target\"/>\n  <property name=\"build.dir\" location=\"${out.dir}/classes\"/>\n  <property name=\"staging.dir\" location=\"${out.dir}/staging\"/>\n  <property name=\"resources.dir\" location=\"${build.dir}/com/google/security/zynamics/binnavi/data\"/>\n  <property name=\"zynamics.dir\" location=\"${project.dir}/src/main/java/com/google/security/zynamics\"/>\n  <property name=\"ant.build.javac.source\" value=\"11\"/>\n  <property name=\"ant.build.javac.target\" value=\"11\"/>\n\n  <!-- Path and fileset definitions needed for the targets below -->\n  <path id=\"binnavi.class.path\">\n    <fileset id=\"binnavi.build.jars\" dir=\"${project.dir}/target/dependency\">\n      <include name=\"antlr-runtime-3.2.jar\"/>\n      <include name=\"batik-awt-util-1.12.jar\"/>\n      <include name=\"batik-css-1.12.jar\"/>\n      <include name=\"batik-dom-1.12.jar\"/>\n      <include name=\"batik-ext-1.12.jar\"/>\n      <include name=\"batik-svggen-1.12.jar\"/>\n      <include name=\"batik-util-1.12.jar\"/>\n      <include name=\"batik-xml-1.12.jar\"/>\n      <include name=\"javax.inject-1.jar\"/>\n      <include name=\"jide-oss-3.6.9.jar\"/>\n      <include name=\"jython-standalone-2.5.3.jar\"/>\n      <include name=\"postgresql-9.4-1201-jdbc41.jar\"/>\n    </fileset>\n  </path>\n  <path id=\"yfiles.class.path\">\n    <fileset id=\"yfiles.build.jars\" dir=\"${project.dir}/third_party/java/yfiles\">\n      <include name=\"y.jar\"/>\n      <include name=\"ysvg.jar\"/>\n    </fileset>\n  </path>\n  <path id=\"guava.class.path\">\n    <fileset id=\"guava.build.jars\" dir=\"${project.dir}/target/dependency\">\n      <include name=\"guava-18.0.jar\"/>\n    </fileset>\n  </path>\n  <path id=\"yfileswrap.class.path\">\n    <fileset id=\"yfileswrap.build.jars\" dir=\"${project.dir}/target/dependency\">\n      <include name=\"yfileswrap-obfuscated-6.1.jar\"/>\n    </fileset>\n  </path>\n  <path id=\"zylib.class.path\">\n    <fileset id=\"zylib.jar\" dir=\"${out.dir}/\">\n      <include name=\"zylib.jar\"/>\n    </fileset>\n  </path>\n  <path id=\"reil.class.path\">\n    <fileset id=\"reil.jar\" dir=\"${out.dir}/\">\n      <include name=\"reil.jar\"/>\n    </fileset>\n  </path>\n\n  <available file=\"${project.dir}/.git\" type=\"dir\" property=\"git.present\"/>\n  <target name=\"build-revision\" if=\"git.present\">\n    <exec executable=\"git\" outputproperty=\"git.revision\" failifexecutionfails=\"false\" errorproperty=\"\">\n      <arg value=\"describe\"/>\n      <arg value=\"--always\"/>\n      <arg value=\"HEAD\"/>\n    </exec>\n   <condition property=\"repository.version\" value=\"${git.revision}\" else=\"&lt;unknown&gt;\">\n      <and>\n        <isset property=\"git.revision\"/>\n        <length string=\"${git.revision}\" trim=\"yes\" length=\"0\" when=\"greater\"/>\n      </and>\n    </condition>\n    <mkdir dir=\"${resources.dir}\"/>\n    <propertyfile file=\"${resources.dir}/build-data.properties\">\n      <entry key=\"build.revision\" value=\"${git.revision}\"/>\n    </propertyfile>\n  </target>\n\n  <target name=\"clean\">\n    <!-- Make sure no leftover class files from creating zylib are floating around. -->\n    <delete dir=\"${build.dir}\"/>\n  </target>\n\n  <!-- The target to build everything (provided yfiles is present), and throw the\n       components that interact with yfiles into a separate jar file that is then\n       obfuscated -->\n  <target name=\"build-yfiles-wrapper-jar\">\n    <mkdir dir=\"${out.dir}\"/>\n    <mkdir dir=\"${build.dir}\"/>\n    <mkdir dir=\"${staging.dir}\"/>\n    <!-- Compile everything in the entire source tree, the following steps then take only\n         the parts that fall into the yfileswrap subpackages -->\n    <javac destdir=\"${build.dir}\" sourcepath=\"\" includeAntRuntime=\"false\" debug=\"true\">\n      <src path=\"${zynamics.dir}/binnavi/\"/>\n      <src path=\"${zynamics.dir}/zylib/\"/>\n      <src path=\"${zynamics.dir}/reil/\"/>\n      <src path=\"${zynamics.dir}/common/\"/>\n      <classpath refid=\"binnavi.class.path\"/>\n      <classpath refid=\"yfiles.class.path\"/>\n      <classpath refid=\"guava.class.path\"/>\n    </javac>\n\n    <!-- Now take only the files in the yfileswrap subdirectories, the yfiles jars,\n         and throw them into the .jar -->\n    <jar destfile=\"${staging.dir}/yfileswrap.jar\" >\n      <fileset dir=\"${build.dir}\">\n        <include name=\"com/google/security/zynamics/binnavi/yfileswrap/**/*.class\" />\n        <include name=\"com/google/security/zynamics/zylib/yfileswrap/**/*.class\" />\n        <include name=\"com/google/security/zynamics/reil/yfileswrap/**/*.class\" />\n      </fileset>\n      <zipgroupfileset refid=\"yfiles.build.jars\"/>\n    </jar>\n\n    <!-- In the next step run the obfuscator -->\n    <taskdef resource=\"proguard/ant/task.properties\" classpath=\"${project.dir}/target/dependency/proguard-anttask-5.2.1.jar\"/>\n    <proguard optimize=\"false\">\n      <!-- Specify JAR options in Ant syntax to be able to use refid. -->\n      <injar file=\"${staging.dir}/yfileswrap.jar\"/>\n      <outjar file=\"${out.dir}/yfileswrap-obfuscated.jar\"/>\n      <libraryjar file=\"${java.home}/lib/rt.jar\"/>\n\n      <!-- Specify obfuscation options in ProGuard syntax. -->\n      -dontnote\n      -dontwarn\n      -printmapping binnavi.map\n      -keep class !y.**,!yext.** { *; }\n      -keep class y.x.** { *; }\n      -renamesourcefileattribute SourceFile\n      -keepattributes Exception,InnerClasses,Signature,Deprecated,*Annotation*,SourceFile,LineNumberTable,EnclosingMethod\n    </proguard>\n  </target>\n\n  <!-- Build the zylib files and make a jar out of them. -->\n  <target name=\"build-zylib-jar\">\n    <mkdir dir=\"${build.dir}\"/>\n    <javac destdir=\"${build.dir}\" sourcepath=\"\" includeAntRuntime=\"false\" debug=\"true\">\n      <src path=\"${zynamics.dir}/zylib\"/>\n      <include name=\"**/*.java\"/>\n      <exclude name=\"yfileswrap/**/*.java\"/>\n      <classpath refid=\"binnavi.class.path\"/>\n      <classpath refid=\"guava.class.path\"/>\n      <classpath refid=\"yfileswrap.class.path\"/>\n    </javac>\n\n    <!-- Copy resources to the appropriate packages. -->\n    <copy todir=\"${build.dir}/com/google/security/zynamics/zylib/resources\">\n      <fileset dir=\"${zynamics.dir}/zylib/resources\">\n        <exclude name=\"**/*.java\"/>\n      </fileset>\n    </copy>\n\n    <jar destfile=\"${out.dir}/zylib.jar\" >\n      <fileset dir=\"${build.dir}\">\n        <include name=\"**/*\" />\n      </fileset>\n    </jar>\n  </target>\n\n  <!-- Build the REIL files and make a jar out of them. -->\n  <target name=\"build-reil-jar\" depends=\"build-zylib-jar\">\n    <mkdir dir=\"${build.dir}\"/>\n    <javac destdir=\"${build.dir}\" sourcepath=\"\" includeAntRuntime=\"false\" debug=\"true\">\n      <src path=\"${zynamics.dir}/reil\"/>\n      <include name=\"**/*.java\"/>\n      <exclude name=\"yfileswrap/**/*.java\"/>\n      <classpath refid=\"binnavi.class.path\"/>\n      <classpath refid=\"guava.class.path\"/>\n      <classpath refid=\"yfileswrap.class.path\"/>\n      <classpath refid=\"zylib.class.path\"/>\n    </javac>\n\n    <jar destfile=\"${out.dir}/reil.jar\" >\n      <fileset dir=\"${build.dir}\">\n        <include name=\"**/*.class\" />\n      </fileset>\n    </jar>\n  </target>\n\n  <!-- Build the full BinNavi jar file - including the necessary data files. -->\n  <target name=\"build-binnavi-jar\" depends=\"clean,build-revision,build-reil-jar\">\n    <mkdir dir=\"${build.dir}\"/>\n    <javac destdir=\"${build.dir}\" sourcepath=\"\" includeAntRuntime=\"false\" debug=\"true\">\n      <src path=\"${zynamics.dir}/binnavi/\"/>\n      <src path=\"${zynamics.dir}/common/\"/>\n      <include name=\"**/*.java\"/>\n      <exclude name=\"yfileswrap/**/*.java\"/>\n      <classpath refid=\"binnavi.class.path\"/>\n      <classpath refid=\"guava.class.path\"/>\n      <classpath refid=\"yfileswrap.class.path\"/>\n      <classpath refid=\"zylib.class.path\"/>\n      <classpath refid=\"reil.class.path\"/>\n    </javac>\n\n    <!-- Copy resources to the appropriate packages. -->\n    <copy todir=\"${resources.dir}\">\n      <fileset dir=\"${zynamics.dir}/binnavi/data\">\n        <exclude name=\"**/*.java\"/>\n      </fileset>\n    </copy>\n\n    <!-- Copy the exporters. -->\n    <copy todir=\"${build.dir}/com/google/security/zynamics/binnavi/exporters\">\n      <fileset dir=\"${zynamics.dir}/binnavi/exporters\"/>\n    </copy>\n\n    <!-- Copy pathfinder plugin resources to its appropriate place. -->\n    <copy todir=\"${build.dir}/com/google/security/zynamics/binnavi/standardplugins/pathfinder/resources\">\n      <fileset dir=\"${zynamics.dir}/binnavi/standardplugins/pathfinder/resources\">\n        <exclude name=\"**/*.java\"/>\n      </fileset>\n    </copy>\n\n    <!-- Wrap everything, including the data files, into the binnavi.jar -->\n    <jar destfile=\"${out.dir}/binnavi.jar\" >\n      <fileset dir=\"${build.dir}\">\n        <include name=\"**/*\" />\n      </fileset>\n    </jar>\n  </target>\n\n  <!-- Build the full fat BinNavi jar file - includes all dependencies. -->\n  <target name=\"build-binnavi-fat-jar\" depends=\"build-binnavi-jar\">\n    <mkdir dir=\"${staging.dir}\"/>\n\n    <jar destfile=\"${out.dir}/binnavi-all.jar\" basedir=\"${build.dir}\">\n      <zipgroupfileset refid=\"binnavi.build.jars\"/>\n      <zipgroupfileset refid=\"guava.build.jars\"/>\n      <zipgroupfileset refid=\"yfileswrap.build.jars\"/>\n      <zipgroupfileset refid=\"zylib.jar\"/>\n      <zipgroupfileset refid=\"reil.jar\"/>\n      <zipgroupfileset dir=\"${out.dir}\" includes=\"binnavi.jar\"/>\n      <manifest>\n        <attribute name=\"Main-Class\" value=\"com.google.security.zynamics.binnavi.CMain\"/>\n        <attribute name=\"SplashScreen-Image\" value=\"com/google/security/zynamics/binnavi/data/splash.jpg\"/>\n      </manifest>\n    </jar>\n  </target>\n</project>\n"
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.09375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.google.security.zynamics.binnavi</groupId>\n  <artifactId>binnavi</artifactId>\n  <packaging>jar</packaging>\n  <version>6.1-SNAPSHOT</version>\n  <name>binnavi</name>\n\n  <url>https://github.com/google/binnavi</url>\n\n  <issueManagement>\n    <system>GitHub</system>\n    <url>https://github.com/google/binnavi/issues</url>\n  </issueManagement>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <repositories>\n    <repository>\n      <id>in-project-repo</id>\n      <name>BinNavi In-Project Repository</name>\n      <url>file://${project.basedir}/lib</url>\n    </repository>\n  </repositories>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.13.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.antlr</groupId>\n      <artifactId>antlr</artifactId>\n      <version>3.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.xmlgraphics</groupId>\n      <artifactId>batik-awt-util</artifactId>\n      <version>1.12</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.xmlgraphics</groupId>\n      <artifactId>batik-dom</artifactId>\n      <version>1.12</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.xmlgraphics</groupId>\n      <artifactId>batik-svggen</artifactId>\n      <version>1.12</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.xmlgraphics</groupId>\n      <artifactId>batik-util</artifactId>\n      <version>1.12</version>\n    </dependency>\n    <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>18.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.jidesoft</groupId>\n      <artifactId>jide-oss</artifactId>\n      <version>3.6.9</version>\n    </dependency>\n    <dependency>\n      <groupId>org.postgresql</groupId>\n      <artifactId>postgresql</artifactId>\n      <version>9.4-1201-jdbc41</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.inject</groupId>\n      <artifactId>javax.inject</artifactId>\n      <version>1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.python</groupId>\n      <artifactId>jython-standalone</artifactId>\n      <version>2.5.3</version>\n    </dependency>\n    <dependency>\n      <groupId>org.w3c.css</groupId>\n      <artifactId>sac</artifactId>\n      <version>1.3</version>\n    </dependency>\n    <dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis</artifactId>\n      <version>1.4.01</version>\n    </dependency>\n    <dependency>\n      <groupId>xml-apis</groupId>\n      <artifactId>xml-apis-ext</artifactId>\n      <version>1.3.04</version>\n    </dependency>\n    <dependency>\n      <groupId>net.sf.proguard</groupId>\n      <artifactId>proguard-anttask</artifactId>\n      <version>5.2.1</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.google.security.zynamics.binnavi</groupId>\n      <artifactId>yfileswrap-obfuscated</artifactId>\n      <version>6.1</version>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <configuration>\n            <source>1.7</source>\n            <target>1.7</target>\n            <excludes>\n              <exclude>com/google/security/zynamics/binnavi/yfileswrap/**</exclude>\n              <exclude>com/google/security/zynamics/reil/yfileswrap/**</exclude>\n              <exclude>com/google/security/zynamics/zylib/yfileswrap/**</exclude>\n            </excludes>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "wixsrc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}