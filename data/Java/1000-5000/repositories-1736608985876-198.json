{
  "metadata": {
    "timestamp": 1736608985876,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "code4craft/tiny-spring",
      "stars": 4064,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0595703125,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.7197265625,
          "content": "tiny-spring\n=======\n\n>A tiny IoC container refer to Spring.\n\n## 关于\n\n`tiny-spring`是为了学习Spring的而开发的，可以认为是一个Spring的精简版。Spring的代码很多，层次复杂，阅读起来费劲。我尝试从使用功能的角度出发，参考Spring的实现，一步一步构建，最终完成一个精简版的Spring。有人把程序员与画家做比较，画家有门基本功叫临摹，tiny-spring可以算是一个程序的临摹版本-从自己的需求出发，进行程序设计，同时对著名项目进行参考。\n\n[点此查看](https://www.zybuluo.com/dugu9sword/note/382745)对本项目的类文件结构和逻辑的分析。 (by @dugu9sword)\n\n## 功能\n\n1. 支持singleton类型的bean，包括初始化、属性注入、以及依赖bean注入。\n2. 可从xml中读取配置。\n3. 可以使用Aspectj的方式进行AOP编写，支持接口和类代理。\n\n## 使用\n\n`tiny-spring`是逐步进行构建的，里程碑版本我都使用了git tag来管理。例如，最开始的tag是`step-1-container-register-and-get`，那么可以使用\n\n\tgit checkout step-1-container-register-and-get\n\n来获得这一版本。版本历史见[`changelog.md`](https://github.com/code4craft/tiny-spring/blob/master/changelog.md)。\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/code4craft/tiny-spring/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n## 下面是推广\n\n如果觉得代码理解有难度的，可以报名@方老司 的视频教程：\n\n[60分钟徒手撸出Spring框架:土法造炮篇](https://segmentfault.com/l/1500000013061317?d=be83d672744f2f15b77bb40795505e4b)\n\n[60分钟徒手撸出Spring框架:高仿版](https://segmentfault.com/l/1500000013110630?d=a09ac8198372f552dc68c572b2b38664)\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 13.4443359375,
          "content": "tiny-spring\n=====\n\n# 第一部分：IoC容器\n\n## 1.step1-最基本的容器\n\t\n\tgit checkout step-1-container-register-and-get\n\nIoC最基本的角色有两个：容器(`BeanFactory`)和Bean本身。这里使用`BeanDefinition`来封装了bean对象，这样可以保存一些额外的元信息。测试代码：\n\n```java\n// 1.初始化beanfactory\nBeanFactory beanFactory = new BeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition(new HelloWorldService());\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n## 2.step2-将bean创建放入工厂\n\n\tgit checkout step-2-abstract-beanfactory-and-do-bean-initilizing-in-it\n\nstep1中的bean是初始化好之后再set进去的，实际使用中，我们希望容器来管理bean的创建。于是我们将bean的初始化放入BeanFactory中。为了保证扩展性，我们使用Extract Interface的方法，将`BeanFactory`替换成接口，而使用`AbstractBeanFactory`和`AutowireCapableBeanFactory`作为其实现。\"AutowireCapable\"的意思是“可自动装配的”，为我们后面注入属性做准备。\n\n```java\n // 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.注入bean\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\t\n## 3.step3-为bean注入属性\n\n\tgit checkout step-3-inject-bean-with-property\n\n这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成`PropertyValue`对象，并且保存到`BeanDefinition`中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。\n\t\n```java\n// 1.初始化beanfactory\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\n\n// 2.bean定义\nBeanDefinition beanDefinition = new BeanDefinition();\nbeanDefinition.setBeanClassName(\"us.codecraft.tinyioc.HelloWorldService\");\n\n// 3.设置属性\nPropertyValues propertyValues = new PropertyValues();\npropertyValues.addPropertyValue(new PropertyValue(\"text\", \"Hello World!\"));\nbeanDefinition.setPropertyValues(propertyValues);\n\n// 4.生成bean\nbeanFactory.registerBeanDefinition(\"helloWorldService\", beanDefinition);\n\n// 5.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n\n```\n\n## 4.step4-读取xml配置来初始化bean\n\n\tgit checkout step-4-config-beanfactory-with-xml\n\t\n这么大一坨初始化代码让人心烦。这里的`BeanDefinition`只是一些配置，我们还是用xml来初始化吧。我们定义了`BeanDefinitionReader`初始化bean，它有一个实现是`XmlBeanDefinitionReader`。\n\n```java\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n        beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n## 5.step5-为bean注入bean\n\n\tgit checkout step-5-inject-bean-to-bean\n\t\n使用xml配置之后，似乎里我们熟知的Spring更近了一步！但是现在有一个大问题没有解决：我们无法处理bean之间的依赖，无法将bean注入到bean中，所以它无法称之为完整的IoC容器！如何实现呢？我们定义一个`BeanReference`，来表示这个属性是对另一个bean的引用。这个在读取xml的时候初始化，并在初始化bean的时候，进行解析和真实bean的注入。\n\n```java\nfor (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) {\n    Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());\n    declaredField.setAccessible(true);\n    Object value = propertyValue.getValue();\n    if (value instanceof BeanReference) {\n        BeanReference beanReference = (BeanReference) value;\n        value = getBean(beanReference.getName());\n    }\n    declaredField.set(bean, value);\n}\n```\n\n同时为了解决循环依赖的问题，我们使用lazy-init的方式，将createBean的事情放到`getBean`的时候才执行，是不是一下子方便很多？这样在注入bean的时候，如果该属性对应的bean找不到，那么就先创建！因为总是先创建后注入，所以不会存在两个循环依赖的bean创建死锁的问题。\n\n```java\n// 1.读取配置\nXmlBeanDefinitionReader xmlBeanDefinitionReader = new XmlBeanDefinitionReader(new ResourceLoader());\nxmlBeanDefinitionReader.loadBeanDefinitions(\"tinyioc.xml\");\n\n// 2.初始化BeanFactory并注册bean\nAbstractBeanFactory beanFactory = new AutowireCapableBeanFactory();\nfor (Map.Entry<String, BeanDefinition> beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) {\n    beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());\n}\n\n// 3.初始化bean\nbeanFactory.preInstantiateSingletons();\n\n// 4.获取bean\nHelloWorldService helloWorldService = (HelloWorldService) beanFactory.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n## 6.step6-ApplicationContext登场\n\n\tgit checkout step-6-invite-application-context\n\t\n现在BeanFactory的功能齐全了，但是使用起来有点麻烦。于是我们引入熟悉的`ApplicationContext`接口，并在`AbstractApplicationContext`的`refresh()`方法中进行bean的初始化工作。\n\n```java\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"tinyioc.xml\");\nHelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(\"helloWorldService\");\nhelloWorldService.helloWorld();\n```\n\n是不是非常熟悉？至此为止，我们的tiny-spring的IoC部分可说完工了。这部分的类、方法命名和作用，都是对应Spring中相应的组件。虽然代码量只有400多行，但是已经有了基本的IoC功能！\n\n# 第二部分：AOP及实现\n\nAOP相关概念较多，我不会一一列举，但是会在每一步对概念做一点解释。\n\nAOP分为配置(Pointcut，Advice)，织入(Weave)两部分工作，当然还有一部分是将AOP整合到整个容器的生命周期中。\n\n## 7.step7-使用JDK动态代理实现AOP织入\n\tgit checkout step-7-method-interceptor-by-jdk-dynamic-proxy\n\t\n织入（weave）相对简单，我们先从它开始。Spring AOP的织入点是`AopProxy`，它包含一个方法`Object getProxy()`来获取代理后的对象。\n\n在Spring AOP中，我觉得最重要的两个角色，就是我们熟悉的`MethodInterceptor`和`MethodInvocation`（这两个角色都是AOP联盟的标准），它们分别对应AOP中两个基本角色：`Advice`和`Joinpoint`。Advice定义了在切点指定的逻辑，而Joinpoint则代表切点。\n\n```java\npublic interface MethodInterceptor extends Interceptor {\n\t\n    Object invoke(MethodInvocation invocation) throws Throwable;\n}\n```\n\nSpring的AOP只支持方法级别的调用，所以其实在AopProxy里，我们只需要将MethodInterceptor放入对象的方法调用即可。\n\n我们称被代理对象为`TargetSource`，而`AdvisedSupport`就是保存TargetSource和MethodInterceptor的元数据对象。这一步我们先实现一个基于JDK动态代理的`JdkDynamicAopProxy`，它可以对接口进行代理。于是我们就有了基本的织入功能。\n\n```java\n\t@Test\n\tpublic void testInterceptor() throws Exception {\n\t\t// --------- helloWorldService without AOP\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"tinyioc.xml\");\n\t\tHelloWorldService helloWorldService = (HelloWorldService) applicationContext.getBean(\"helloWorldService\");\n\t\thelloWorldService.helloWorld();\n\n\t\t// --------- helloWorldService with AOP\n\t\t// 1. 设置被代理对象(Joinpoint)\n\t\tAdvisedSupport advisedSupport = new AdvisedSupport();\n\t\tTargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,\n\t\t\t\tHelloWorldService.class);\n\t\tadvisedSupport.setTargetSource(targetSource);\n\n\t\t// 2. 设置拦截器(Advice)\n\t\tTimerInterceptor timerInterceptor = new TimerInterceptor();\n\t\tadvisedSupport.setMethodInterceptor(timerInterceptor);\n\n\t\t// 3. 创建代理(Proxy)\n\t\tJdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);\n\t\tHelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();\n\n\t\t// 4. 基于AOP的调用\n\t\thelloWorldServiceProxy.helloWorld();\n\n\t}\n```\n\n## 8.step8-使用AspectJ管理切面\n\tgit checkout step-8-invite-pointcut-and-aspectj\n\t\n完成了织入之后，我们要考虑另外一个问题：对什么类以及什么方法进行AOP？对于“在哪切”这一问题的定义，我们又叫做“Pointcut”。Spring中关于Pointcut包含两个角色：`ClassFilter`和`MethodMatcher`，分别是对类和方法做匹配。Pointcut有很多种定义方法，例如类名匹配、正则匹配等，但是应用比较广泛的应该是和`AspectJ`表达式的方式。\n\n`AspectJ`是一个“对Java的AOP增强”。它最早是其实是一门语言，我们跟写Java代码一样写它，然后静态编译之后，就有了AOP的功能。下面是一段AspectJ代码：\n\n```java\naspect PointObserving {\n    private Vector Point.observers = new Vector();\n\n    public static void addObserver(Point p, Screen s) {\n        p.observers.add(s);\n    }\n    public static void removeObserver(Point p, Screen s) {\n        p.observers.remove(s);\n    }\n    ...\n}\n```\n\n这种方式无疑太重了，为了AOP，还要适应一种语言？所以现在使用也不多，但是它的`Pointcut`表达式被Spring借鉴了过来。于是我们实现了一个`AspectJExpressionPointcut`：\n\n```java\n    @Test\n    public void testMethodInterceptor() throws Exception {\n        String expression = \"execution(* us.codecraft.tinyioc.*.*(..))\";\n        AspectJExpressionPointcut aspectJExpressionPointcut = new AspectJExpressionPointcut();\n        aspectJExpressionPointcut.setExpression(expression);\n        boolean matches = aspectJExpressionPointcut.getMethodMatcher().matches(HelloWorldServiceImpl.class.getDeclaredMethod(\"helloWorld\"),HelloWorldServiceImpl.class);\n        Assert.assertTrue(matches);\n    }\n```\n\n## 9.step9-将AOP融入Bean的创建过程\n\tgit checkout step-9-auto-create-aop-proxy\n\t\n万事俱备，只欠东风！现在我们有了Pointcut和Weave技术，一个AOP已经算是完成了，但是它还没有结合到Spring中去。怎么进行结合呢？Spring给了一个巧妙的答案：使用`BeanPostProcessor`。\n\nBeanPostProcessor是BeanFactory提供的，在Bean初始化过程中进行扩展的接口。只要你的Bean实现了`BeanPostProcessor`接口，那么Spring在初始化时，会优先找到它们，并且在Bean的初始化过程中，调用这个接口，从而实现对BeanFactory核心无侵入的扩展。\n\n那么我们的AOP是怎么实现的呢？我们知道，在AOP的xml配置中，我们会写这样一句话：\n\n```xml\n<aop:aspectj-autoproxy/>\n```\n\n它其实相当于：\n\n```xml\n<bean id=\"autoProxyCreator\" class=\"org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator\"></bean>\n```\n\n`AspectJAwareAdvisorAutoProxyCreator`就是AspectJ方式实现织入的核心。它其实是一个BeanPostProcessor。在这里它会扫描所有Pointcut，并对bean做织入。\n\n为了简化xml配置，我在tiny-spring中直接使用Bean的方式，而不是用aop前缀进行配置：\n\n```xml\n    <bean id=\"autoProxyCreator\" class=\"us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator\"></bean>\n\n    <bean id=\"timeInterceptor\" class=\"us.codecraft.tinyioc.aop.TimerInterceptor\"></bean>\n\n    <bean id=\"aspectjAspect\" class=\"us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor\">\n        <property name=\"advice\" ref=\"timeInterceptor\"></property>\n        <property name=\"expression\" value=\"execution(* us.codecraft.tinyioc.*.*(..))\"></property>\n    </bean>\n```\n\n`TimerInterceptor`实现了`MethodInterceptor`（实际上Spring中还有`Advice`这样一个角色，为了简单，就直接用MethodInterceptor了）。\n\n至此，一个AOP基本完工。\n\n\n## 10.step10-使用CGLib进行类的织入\n\tgit checkout step-10-invite-cglib-and-aopproxy-factory\n\t\n前面的JDK动态代理只能对接口进行代理，对于类则无能为力。这里我们需要一些字节码操作技术。这方面大概有几种选择：`ASM`，`CGLib`和`javassist`，后两者是对`ASM`的封装。Spring中使用了CGLib。\n\n在这一步，我们还要定义一个工厂类`ProxyFactory`，用于根据TargetSource类型自动创建代理，这样就需要在调用者代码中去进行判断。\n\n另外我们实现了`Cglib2AopProxy`，使用方式和`JdkDynamicAopProxy`是完全相同的。\n\n*有一个细节是CGLib创建的代理是没有注入属性的，\nSpring的解决方式是：CGLib仅作代理，任何属性都保存在TargetSource中，使用MethodInterceptor=>TargetSource的方式进行调用。*\n\n至此，AOP部分完工。"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 3.748046875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <groupId>us.codecraft</groupId>\n    <artifactId>tiny-spring</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>jar</packaging>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <name>tiny-spring</name>\n    <description>\n        A tiny implementation of Spring for study.\n    </description>\n    <url>https://github.com/code4craft/xsoup/</url>\n    <developers>\n        <developer>\n            <id>code4craft</id>\n            <name>Yihua huang</name>\n            <email>code4crafer@gmail.com</email>\n        </developer>\n    </developers>\n   <licenses>\n    <license>\n        <name>The MIT License</name>\n        <distribution>repo</distribution>\n    </license>  \n  </licenses>\n\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>4.7</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>aopalliance</groupId>\n                <artifactId>aopalliance</artifactId>\n                <version>1.0</version>\n            </dependency>\n            <dependency>\n                <groupId>org.aspectj</groupId>\n                <artifactId>aspectjweaver</artifactId>\n                <version>1.6.11</version>\n            </dependency>\n            <dependency>\n                <groupId>cglib</groupId>\n                <artifactId>cglib-nodep</artifactId>\n                <version>2.1_3</version>\n            </dependency>\n        </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.6</source>\n                    <target>1.6</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <version>2.6</version>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.2.1</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>2.9.1</version>\n                <configuration>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n\n\n</project>\n"
        },
        {
          "name": "src+",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}