{
  "metadata": {
    "timestamp": 1736608970381,
    "page": 182,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "camunda/camunda-bpm-platform",
      "stars": 4151,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.33984375,
          "content": ".idea\ntarget\n.classpath\n.project\n.settings\n.editorconfig\nbuild.properties\nbin\n.metadata\ntransaction.log\nnbactions*.xml\nnb-configuration.xml\n/webapps/fox-platform-tasklist/server-work\ndependency-reduced-pom.xml\nfaces-config.NavData\n*.iml\n*.sublime-project\n*.sublime-workspace\n*.h2.db\n*.lock.db\n**/overlays\n**/node_modules\ncamunda-h2-dbs\n\n*.DS_Store\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.84375,
          "content": "# How to contribute\n\n* [Ways to contribute](#ways-to-contribute)\n* [Browse our issues](#browse-our-issues)\n* [Build from source](#build-from-source)\n* [Create a pull request](#create-a-pull-request)\n* [Contribution checklist](#contribution-checklist)\n* [Contributor License Agreement (CLA)](#contributor-license-agreement-cla)\n* [Commit message conventions](#commit-message-conventions)\n* [License headers](#license-headers)\n* [Review process](#review-process)\n\n# Ways to contribute\n\nWe would love you to contribute to this project. You can do so in various ways.\n\n\n## Contribute your knowledge\n\nHelp others by participating in our [forum](https://forum.camunda.org/). Please read the [Forum FAQ](https://forum.camunda.org/faq) before you start.\n\n\n## File bugs or feature requests\n\nFound a bug in the code or have a feature that you would like to see in the future? [Search our open issues](https://github.com/camunda/camunda-bpm-platform/issues) if we have it on the radar already or [create a new issue otherwise](https://github.com/camunda/camunda-bpm-platform/issues/new/choose).\n\nTry to apply our best practices for creating issues:\n\n* Only Raise an issue if your request requires a code change in Camunda Platform 7\n  * If you want to contact the Camunda customer support, please see our [Enterprise Support Guide](https://camunda.com/services/enterprise-support-guide/).\n  * If you have an understanding question or need help building your solution, check out our [user forum](https://forum.camunda.io/).\n* Create a high-quality issue:\n  * Give enough context so that a person who doesn't know your project can understand your request\n  * Be concise, only add what's needed to understand the core of the request\n  * If you raise a bug report, describe the steps to reproduce the problem\n  * Specify your environment (e.g. Camunda version, Camunda modules you use, ...)\n  * Provide code. For a bug report, create a test that reproduces the problem. For feature requests, create mockup code that shows how the feature might look like. Fork our [unit test Github template](https://github.com/camunda/camunda-engine-unittest) to get started quickly.\n\n\n## Write code\n\nYou can contribute code that fixes bugs and/or implements features. Here is how it works:\n\n1. Select a ticket that you would like to implement. Have a look at [our backlog](https://github.com/camunda/camunda-bpm-platform/issues) if you need inspiration. Be aware that some of the issues need good knowledge of the surrounding code.\n1. Tell us in the ticket comments or in the [forum](https://forum.camunda.org/c/contributions/14) (select the *Contributions* category) that you want to work on your ticket. This is also the place where you can ask questions.\n1. Check your code changes against our [contribution checklist](#contribution-checklist)\n1. [Create a pull request](https://github.com/camunda/camunda-bpm-platform/pulls). Note that you can already do this before you have finished your implementation if you would like feedback on your work in progress.\n\n\n# Browse our issues\n\nIn this repository, we manage the [issues](https://github.com/camunda/camunda-bpm-platform/issues) for the following Camunda Platform 7 code repositories and projects:\n\n* https://github.com/camunda/camunda-bpm-platform\n* Camunda Platform 7 Enterprise Edition\n* Camunda Platform 7 RPA Bridge\n* https://github.com/camunda/camunda-spin\n* https://github.com/camunda/camunda-connect\n* https://github.com/camunda/docker-camunda-bpm-platform\n* https://github.com/camunda/camunda-template-engines-jsr223\n* Camunda Platform 7 XSLT Script engine Extension\n* https://github.com/camunda/camunda-commons\n* https://github.com/camunda/camunda-bpm-examples\n* https://github.com/camunda/camunda-docs-manual\n* https://github.com/camunda/camunda-archetypes\n* https://github.com/camunda/camunda-engine-dmn-unittest\n* https://github.com/camunda/camunda-engine-unittest\n* https://github.com/camunda/camunda-external-task-client-js\n\nWe use [labels](https://github.com/camunda/camunda-bpm-platform/labels) to mark and group our issues for easier browsing. We define the following label prefixes:\n\n* `bot:` labels that control a github app, workflow, ...\n* `ci:` labels that control the CI for a pull request\n* `group:` Arbitrary labels that we can define to group tickets. If you create this, please add a DRI to the description to make sure someone has ownership, e.g. to decide if we still need the label\n* `potential:` Issues that we are potentially releasing with the given version. This is not a guarantee and does not express high confidence.\n* `hacktoberfest-` labels for hacktoberfest contributions. This prefix cannot be changed. It is a rule of Hacktoberfest to name it like that.\n* `scope:` The technical scope in which the ticket makes changes.\n* `type:` Issue type. Every issue should have exactly one of these labels. They are automatically added when you create a new issue from a template.\n* `version:` Issues that will be released (with high confidence) with the given version.\n\n\n# Build from source\n\nIn order to build our codebase from source, add the following to your Maven `settings.xml`.\n\n```xml\n<profiles>\n  <profile>\n    <id>camunda-bpm</id>\n    <repositories>\n      <repository>\n        <id>camunda-bpm-nexus</id>\n        <name>camunda-bpm-nexus</name>\n        <releases>\n          <enabled>true</enabled>\n        </releases>\n        <snapshots>\n          <enabled>true</enabled>\n        </snapshots>\n        <url>https://artifacts.camunda.com/artifactory/public/</url>\n      </repository>\n    </repositories>\n  </profile>\n</profiles>\n<activeProfiles>\n  <activeProfile>camunda-bpm</activeProfile>\n</activeProfiles>\n```\n\nAn entire repository can then be built by running `mvn clean install` in the root directory.\nThis will build all sub modules and execute unit tests.\nFurthermore, you can restrict the build to just the module you are changing by running the same command in the corresponding directory.\nCheck the repository's or module's README for additional module-specific instructions.\nThe `webapps` module requires NodeJS.\nYou can exclude building them by running `mvn clean install -pl '!webapps,!webapps/assembly,!webapps/assembly-jakarta'`.\n\nIntegration tests (e.g. tests that run in an actual application server) are usually not part of the default Maven profiles. If you think they are relevant to your contribution, please ask us in the ticket, on the forum or in your pull request for how to run them. Smaller contributions usually do not need this.\n\n# Create a pull request\n\nIn order to show us your code, you can create a pull request on Github. Do this when your contribution is ready for review, or if you have started with your implementation and want some feedback before you continue. It is always easier to help if we can see your work in progress.\n\nA pull request can be submitted as follows: \n\n1. [Fork the Camunda repository](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) you are contributing to\n1. Commit and push your changes to a branch in your fork\n1. [Submit a Pull Request to the Camunda repository](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork). As the *base* branch (the one that you contribute to), select `master`. This should also be the default in the Github UI.\n1. In the pull request description, reference the github issue that your pull request addresses.\n\n# Contribution checklist\n\nBefore submitting your pull request for code review, please go through the following checklist:\n\n1. Is your code formatted according to our code style guidelines?\n    * Java: Please check our [Java Code Style Guidelines](https://github.com/camunda/camunda-bpm-platform/wiki/Coding-Style-Java). You can also import [our template and settings files](https://github.com/camunda/camunda-bpm-platform/tree/master/settings) into your IDE before you start coding.\n    * Javascript: Your code is automatically formatted whenever you commit.\n1. Is your code covered by unit tests?\n    * Ask us if you are not sure where to write the tests or what kind of tests you should write.\n    * Java: Please follow our [testing best practices](https://github.com/camunda/camunda-bpm-platform/wiki/Testing-Best-Practices-Java).\n    * Have a look at other tests in the same module for how it works.\n    * In rare cases, it is not feasible to write an automated test. Please ask us if you think that is the case for your contribution.\n1. Do your commits follow our [commit message conventions](#commit-message-conventions)?\n1. Does your code use the [correct license headers](#license-headers)?\n\n# Contributor License Agreement (CLA)\n\nBefore we can merge your contribution you have to sign our [Contributor License Agreement](https://cla-assistant.io/camunda/) (CLA). The CLA contains the terms and conditions under which the contribution is submitted. You need to do this only once for your first pull request. Keep in mind that without a signed CLA we cannot merge your contribution.\n\n# Commit message conventions\n\nThe messages of all commits must conform to the style:\n\n```\n<type>(<scope>): <subject>\n\n<body>\n\n<footer>\n```\n\nExample:\n\n```\nfeat(engine): Support BPEL\n\n- implements execution for a really old standard\n- BPEL models are mapped to internal ActivityBehavior classes\n\nrelated to #123\n```\n\nHave a look at the [commit history](https://github.com/camunda/camunda-bpm-platform/commits/master) for real-life examples.\n\n\n## \\<type\\>\n\nOne of the following:\n\n* feat (feature)\n* fix (bug fix)\n* docs (documentation)\n* style (formatting, missing semi colons, …)\n* refactor\n* test (when adding missing tests)\n* chore (maintain)\n \n## \\<scope\\>\n\nThe scope is the module that is changed by the commit. E.g. `engine` in the case of https://github.com/camunda/camunda-bpm-platform/tree/master/engine.\n\n## \\<subject\\>\n\nA brief summary of the change. Use imperative form (e.g. *implement* instead of *implemented*).  The entire subject line shall not exceed 70 characters.\n\n## \\<body\\>\n\nA list of bullet points giving a high-level overview of the contribution, e.g. which strategy was used for implementing the feature. Use present tense here (e.g. *implements* instead of *implemented*). A line in the body shall not exceed 80 characters. For small changes, the body can be omitted. \n\n## \\<footer\\>\n\nMust be `related to <ticket>` where ticket is the ticket number, e.g. CAM-1234. If the change is related to multiple \ntickets, list them in a comma-separated list such as `related to CAM-1234, CAM-4321`.\n\nOptionally, you can reference the number of the GitHub PR from which the commit is merged. The message footer can then \nlook like `related to <ticket>, closes #<pr_number>` such as `related to CAM-1234, closes #567`.\n\n# License headers\n\nEvery source file in an open-source repository needs to contain the following license header at  the top, formatted as a code comment:\n\n```\nCopyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\nunder one or more contributor license agreements. See the NOTICE file\ndistributed with this work for additional information regarding copyright\nownership. Camunda licenses this file to you under the Apache License,\nVersion 2.0; you may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\nThe header can be added manually (check other files). If you use our [IDE settings](https://github.com/camunda/camunda-bpm-platform/tree/master/settings), it will be generated automatically when you create new `.java` files. You can also add it by running `mvn clean install -Plicense-header-check` in the module that you have changed. This command also re-formats any incorrectly formatted license header.\n\nContributions that do not contain valid license headers cannot be merged.\n\n# Review process\n\nWe usually check for new community-submitted pull requests once a week. We will then assign a reviewer from our development team and that person will provide feedback as soon as possible. \n\nNote that due to other responsibilities (our own implementation tasks, releases), feedback can sometimes be a bit delayed. Especially for larger contributions, it can take a bit until we have the time to assess your code properly.\n\nDuring review we will provide you with feedback and help to get your contribution merge-ready. However, before requesting a review, please go through our [contribution checklist](#contribution-checklist).\n\nOnce your code is merged, it will be shipped in the next alpha and minor releases. We usually build alpha releases once a month and minor releases once every six months. If you are curious about the exact next minor release date, check our [release announcements](https://docs.camunda.org/enterprise/announcement/) page.\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 23.787109375,
          "content": "// https://github.com/camunda/jenkins-global-shared-library\n// https://github.com/camunda/cambpm-jenkins-shared-library\n@Library(['camunda-ci', 'cambpm-jenkins-shared-library']) _\n\ndef failedStageTypes = []\n\npipeline {\n  agent {\n    node {\n      label 'jenkins-job-runner'\n    }\n  }\n  environment {\n    LOGGER_LOG_LEVEL = 'DEBUG'\n    MAVEN_VERSION = 'maven-3.8-latest'\n    DEF_JDK_VERSION = 'jdk-11-latest'\n  }\n  options {\n    buildDiscarder(logRotator(numToKeepStr: '5'))\n    copyArtifactPermission('*')\n    disableConcurrentBuilds(abortPrevious: true)\n   }\n  parameters {\n    string name: 'EE_DOWNSTREAM', defaultValue: 'cambpm-ee-main-pr/' + cambpmDefaultBranch(), description: 'The name of the EE branch/PR to run the EE pipeline on, e.g. cambpm-ee-main/PR-333'\n  }\n  stages {\n    stage('ASSEMBLY') {\n      when {\n        expression {\n          env.BRANCH_NAME == cambpmDefaultBranch() || (env.CHANGE_ID != null && !pullRequest.labels.contains('ci:no-build'))\n        }\n      }\n      environment {\n        NEXUS_SNAPSHOT_REPOSITORY = cambpmConfig.nexusSnapshotRepository()\n        NEXUS_SNAPSHOT_REPOSITORY_ID = cambpmConfig.nexusSnapshotRepositoryId()\n      }\n      steps {\n        cambpmConditionalRetry([\n          podSpec: [\n            cpu: 32,\n            images: ['maven:3.9.7-eclipse-temurin-17']\n            ],\n          suppressErrors: false,\n          runSteps: {\n            sh(label: 'GIT: Mark current directory as safe', script: \"git config --global --add safe.directory \\$PWD\")\n            skipTests = \"\"\n\n            if (env.CHANGE_ID != null && pullRequest.labels.contains('ci:skipTests')) {\n               skipTests = \"-DskipTests \"\n            }\n\n            withVault([vaultSecrets: [\n                [\n                    path        : 'secret/products/cambpm/ci/hero-devs',\n                    secretValues: [\n                        [envVar: 'HERODEVS_REGISTRY', vaultKey: 'registry'],\n                        [envVar: 'HERODEVS_AUTH_TOKEN', vaultKey: 'authToken']]\n                ]]]) {\n              cambpmRunMaven('.',\n                  'clean source:jar deploy source:test-jar com.mycila:license-maven-plugin:check -Pdistro,distro-ce,distro-wildfly,distro-webjar,h2-in-memory -DaltStagingDirectory=${WORKSPACE}/staging -DskipRemoteStaging=true '+ skipTests,\n                  withCatch: false,\n                  withNpm: true,\n                  // we use JDK 17 to build the artifacts, as it is required for supporting Spring Boot 3\n                  // the compiler source and target is set to JDK 11 in the release parents\n                  jdkVersion: 'jdk-17-latest')\n            }\n\n            // archive all .jar, .pom, .xml, .txt runtime artifacts + required .war/.zip/.tar.gz for EE pipeline\n            // add a new line for each group of artifacts\n            cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war',\n                                  '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war')\n\n            if (env.CHANGE_ID != null && pullRequest.labels.contains('ci:distro')) {\n              cambpmArchiveArtifacts(\n                     '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-bpm-*.zip',\n                     '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-bpm-*.tar.gz')\n            }\n\n            cambpmStash(\"platform-stash-runtime\",\n                        \".m2/org/camunda/**/*-SNAPSHOT/**\",\n                        \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\")\n            cambpmStash(\"platform-stash-archives\",\n                        \".m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.zip,.m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.tar.gz\")\n            cambpmStash(\"platform-stash-qa\",\n                      \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\",\n                      \"**/*.zip,**/*.tar.gz\")\n\n            script {\n              if (env.BRANCH_NAME == cambpmDefaultBranch()) {\n                // CE master triggers EE master\n                // otherwise CE PR branch triggers EE PR branch\n                eeMainProjectBranch = \"cambpm-ee-main/\" + cambpmDefaultBranch()\n              } else {\n                eeMainProjectBranch = params.EE_DOWNSTREAM\n              }\n\n              // JOB_NAME, e.g.: '7.15/cambpm-ce/cambpm-main/PR-1373'\n              // keep leading slash for the absolute project path\n              platformVersionDir = \"/\" + env.JOB_NAME.split('/')[0]\n              upstreamProjectName = \"/\" + env.JOB_NAME\n              upstreamBuildNumber = env.BUILD_NUMBER\n\n              if (env.BRANCH_NAME == cambpmDefaultBranch() || cambpmWithLabels('webapp-integration', 'all-as', 'h2', 'websphere', 'weblogic', 'jbosseap', 'run', 'spring-boot', 'e2e')) {\n                cambpmTriggerDownstream(\n                  platformVersionDir + \"/cambpm-ee/\" + eeMainProjectBranch,\n                  [string(name: 'UPSTREAM_PROJECT_NAME', value: upstreamProjectName),\n                  string(name: 'UPSTREAM_BUILD_NUMBER', value: upstreamBuildNumber)],\n                  true, true, true, true\n                )\n              }\n\n              // the sidetrack pipeline should be triggered on daily,\n              // or PR builds only, master builds should be excluded.\n              // The Sidetrack pipeline contains Azure DB stages,\n              // triggered with the sqlserver PR labels.\n              if (env.BRANCH_NAME != cambpmDefaultBranch() && cambpmWithLabels('all-db', 'sqlserver')) {\n                cambpmTriggerDownstream(\n                  platformVersionDir + \"/cambpm-ce/cambpm-sidetrack/${env.BRANCH_NAME}\",\n                  [string(name: 'UPSTREAM_PROJECT_NAME', value: upstreamProjectName),\n                  string(name: 'UPSTREAM_BUILD_NUMBER', value: upstreamBuildNumber)]\n                )\n              }\n\n              // don't trigger the daily pipeline from a master branch build\n              // or if a PR has no relevant labels\n              if (env.BRANCH_NAME != cambpmDefaultBranch() && cambpmWithLabels('default-build', 'jdk', 'rolling-update', 'migration', 'all-db', 'h2', 'db2', 'mysql', 'oracle', 'mariadb', 'sqlserver', 'postgresql')) {\n                cambpmTriggerDownstream(\n                  platformVersionDir + \"/cambpm-ce/cambpm-daily/${env.BRANCH_NAME}\",\n                  [string(name: 'UPSTREAM_PROJECT_NAME', value: upstreamProjectName),\n                  string(name: 'UPSTREAM_BUILD_NUMBER', value: upstreamBuildNumber)]\n                )\n              }\n\n              // only execute on version (default) branch (e.g. master, 7.15)\n              if (env.BRANCH_NAME == cambpmDefaultBranch()) {\n                cambpmRunMaven('.',\n                    'org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DaltStagingDirectory=${WORKSPACE}/staging -DskipStaging=true',\n                    withCatch: false,\n                    withNpm: true)\n              }\n            }\n          },\n          postFailure: {\n            cambpmPublishTestResult()\n            // archive any heap dumps generated in the target folder\n            cambpmArchiveArtifacts(false, '**/target/*.hprof')\n          }\n        ])\n\n      }\n    }\n    stage('h2 UNIT, engine IT, webapp IT') {\n      parallel {\n        stage('db-UNIT-h2') {\n          when {\n            expression {\n              cambpmWithLabels('h2', 'rolling-update', 'migration', 'all-db', 'default-build')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMavenByStageType('db-unit', 'h2')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmAddFailedStageType(failedStageTypes, 'db-unit')\n              }\n            ])\n          }\n        }\n        stage('engine-UNIT-historylevel-audit') {\n          when {\n            expression {\n              cambpmWithLabels('default-build')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('engine/', 'verify -Pcfghistoryaudit', runtimeStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              },\n            ])\n          }\n        }\n        stage('engine-UNIT-historylevel-activity') {\n          when {\n            expression {\n              cambpmWithLabels('default-build')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('engine/', 'verify -Pcfghistoryactivity', runtimeStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('quarkus-UNIT') {\n          when {\n            expression {\n              cambpmWithLabels('h2', 'default-build')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('quarkus-extension/', 'clean install -Pquarkus-tests', jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-tomcat-9-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('all-as', 'tomcat')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Ptomcat9,postgresql,engine-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-tomcat-10-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('all-as', 'tomcat')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Ptomcat,postgresql,engine-integration-jakarta', runtimeStash: true, archiveStash: true, jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/tomcat-runtime/target/**/standalone/log/**')\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('all-as', 'wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', \n                  'clean install -Pwildfly,postgresql,engine-integration-jakarta', \n                  runtimeStash: true, \n                  archiveStash: true,\n                  // we need to use JDK 17 for Spring 6\n                  jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmAddFailedStageType(failedStageTypes, 'engine-IT-wildfly')\n                cambpmArchiveArtifacts('qa/wildfly-runtime/target/**/standalone/log/server.log')\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly26-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('all-as', 'wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Pwildfly26,postgresql,engine-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmAddFailedStageType(failedStageTypes, 'engine-IT-wildfly26')\n                cambpmArchiveArtifacts('qa/wildfly26-runtime/target/**/standalone/log/server.log')\n              }\n            ])\n          }\n        }\n        stage('engine-IT-XA-wildfly-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', \n                  'clean install -Pwildfly,postgresql,postgresql-xa,engine-integration-jakarta', \n                  runtimeStash: true, \n                  archiveStash: true,\n                  // we need to use JDK 17 for Spring 6\n                  jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/wildfly-runtime/target/**/standalone/log/server.log')\n              }\n            ])\n          }\n        }\n        stage('engine-IT-XA-wildfly26-postgresql-142') {\n          when {\n            expression {\n              cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'postgresql_142',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Pwildfly26,postgresql,postgresql-xa,engine-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/wildfly26-runtime/target/**/standalone/log/server.log')\n              }\n            ])\n          }\n        }\n        stage('webapp-IT-tomcat-9-h2') {\n          when {\n            expression {\n              cambpmWithLabels('webapp-integration', 'h2')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Ptomcat9,h2,webapps-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/integration-tests-webapps/shared-engine/target/selenium-screenshots/*')\n              }\n            ])\n          }\n        }\n        stage('webapp-IT-tomcat-10-h2') {\n          when {\n            expression {\n              cambpmWithLabels('webapp-integration', 'h2')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Ptomcat,h2,webapps-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/integration-tests-webapps/shared-engine/target/selenium-screenshots/*')\n                cambpmArchiveArtifacts('qa/integration-tests-webapps/shared-engine/target/*')\n              }\n            ])\n          }\n        }\n        stage('webapp-IT-wildfly-h2') {\n          when {\n            expression {\n              cambpmWithLabels('webapp-integration', 'h2', 'wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('qa/',\n                  'clean install -Pwildfly,h2,webapps-integration',\n                  runtimeStash: true,\n                  archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/integration-tests-webapps/shared-engine/target/selenium-screenshots/*')\n              }\n            ])\n          }\n        }\n        stage('webapp-IT-wildfly26-h2') {\n          when {\n            expression {\n              cambpmWithLabels('webapp-integration', 'h2', 'wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Pwildfly26,h2,webapps-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('qa/integration-tests-webapps/shared-engine/target/selenium-screenshots/*')\n              }\n            ])\n          }\n        }\n        stage('camunda-run-IT') {\n          when {\n            expression {\n              cambpmWithLabels('run', 'spring-boot', 'tomcat', 'all-as')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('distro/run/', 'clean install -Pintegration-test-camunda-run', runtimeStash: true, archiveStash: true, qaStash: true,\n                    jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n                cambpmArchiveArtifacts('distro/run/qa/runtime/target/selenium-screenshots/*')\n              }\n            ])\n          }\n        }\n        stage('spring-boot-starter-IT') {\n          when {\n            expression {\n              cambpmWithLabels('spring-boot', 'tomcat', 'all-as')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'chrome_112',\n              runSteps: {\n                cambpmRunMaven('spring-boot-starter/', 'clean install -Pintegration-test-spring-boot-starter', runtimeStash: true, archiveStash: true, qaStash: true,\n                    jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n      }\n    }\n    stage('Engine Rest UNIT tests') {\n      steps {\n        script {\n          // see the .ci/config/matrices.yaml for the stage generation values\n          // see .ci/config/stage-types.yaml for the stage configurations\n          parallel(cambpmGetMatrixStages('engine-rest', failedStageTypes, { stageInfo ->\n            return cambpmWithLabels(stageInfo.allowedLabels)\n          }))\n        }\n      }\n    }\n    stage('UNIT DB tests') {\n      steps {\n        script {\n          // see the .ci/config/matrices.yaml for the stage generation values\n          // see .ci/config/stage-types.yaml for the stage configurations\n          parallel(cambpmGetMatrixStages('engine-webapp-unit', failedStageTypes, { stageInfo ->\n            List allowedStageLabels = stageInfo.allowedLabels\n            String dbLabel = stageInfo.nodeType\n            return cambpmWithLabels(allowedStageLabels, cambpmGetDbType(dbLabel))\n          }))\n        }\n      }\n    }\n    stage('MISC tests') {\n      parallel {\n        stage('engine-api-compatibility') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-unit') && cambpmWithLabels('default-build')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('engine/', 'clean verify -Pcheck-api-compatibility', runtimeStash: true)\n              }\n            ])\n          }\n        }\n        stage('engine-UNIT-database-table-prefix') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-unit') && cambpmWithLabels('all-db','h2','db2','mysql','oracle','mariadb','sqlserver','postgresql')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('engine/', 'clean test -Pdb-table-prefix', runtimeStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('webapp-UNIT-database-table-prefix') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'webapp-unit') && cambpmWithLabels()\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('webapps/assembly', 'clean test -Pdb-table-prefix -Dskip.frontend.build=true', runtimeStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly-domain') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-IT-wildfly') && cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('qa/', \n                  'clean install -Pwildfly-domain,h2,engine-integration-jakarta',\n                  runtimeStash: true,\n                  archiveStash: true,\n                  // we need to use JDK 17 for Spring 6\n                  jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly-servlet') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-IT-wildfly') && cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('qa/',\n                  'clean install -Pwildfly,wildfly-servlet,h2,engine-integration-jakarta',\n                  runtimeStash: true,\n                  archiveStash: true,\n                  // we need to use JDK 17 for Spring 6\n                  jdkVersion: 'jdk-17-latest')\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly26-domain') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-IT-wildfly26') && cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Pwildfly26-domain,h2,engine-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n        stage('engine-IT-wildfly26-servlet') {\n          when {\n            expression {\n              cambpmIsNotFailedStageType(failedStageTypes, 'engine-IT-wildfly26') && cambpmWithLabels('wildfly')\n            }\n          }\n          steps {\n            cambpmConditionalRetry([\n              agentLabel: 'h2',\n              runSteps: {\n                cambpmRunMaven('qa/', 'clean install -Pwildfly26,wildfly26-servlet,h2,engine-integration', runtimeStash: true, archiveStash: true)\n              },\n              postFailure: {\n                cambpmPublishTestResult()\n              }\n            ])\n          }\n        }\n      }\n    }\n  }\n  post {\n    changed {\n      script {\n        if (!agentDisconnected()){\n          cambpmSendEmailNotification()\n        }\n      }\n    }\n    always {\n      cambpmWithSpanAttributes()\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.5673828125,
          "content": "Camunda\r\nCopyright 2013-2024 Camunda Services GmbH\r\n\r\nThis product includes software developed by The Apache Software\r\nFoundation (http://www.apache.org/).\r\n\r\nThis product includes software developed by Odysseus Software GmbH\r\n(http://www.odysseus.de/).\r\n\r\nThis product includes software developed by Quartz \r\n(http://www.quartz-scheduler.org/)\r\n\r\n========================================================\r\n\r\nThird Party Libraries contained within this distribution\r\ncan be reviewed in the License Book (LicenseBook.txt)\r\n\r\n========================================================\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4501953125,
          "content": "# Camunda Platform 7 - The open source BPMN platform\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.camunda.bpm/camunda-parent/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.camunda.bpm/camunda-parent) [![camunda manual latest](https://img.shields.io/badge/manual-latest-brown.svg)](https://docs.camunda.org/manual/latest/) [![License](https://img.shields.io/github/license/camunda/camunda-bpm-platform?color=blue&logo=apache)](https://github.com/camunda/camunda-bpm-platform/blob/master/LICENSE) [![Forum](https://img.shields.io/badge/forum-camunda-green)](https://forum.camunda.org/)\n\n> [!Caution]  \n> Camunda 7 Community Edition will reach its **end of life by October 2025** and the Enterprise Edition will move into maintenance mode, receiving only maintenance improvements as well as bug and security fixes from that point forward. Looking ahead, [Camunda 8](https://github.com/camunda/camunda) is the successor to this project, so we strongly encourage you to explore it and contribute there instead.\n\nCamunda Platform 7 is a flexible framework for workflow and process automation. Its core is a native BPMN 2.0 process engine that runs inside the Java Virtual Machine. It can be embedded inside any Java application and any Runtime Container. It integrates with Java EE 6 and is a perfect match for the Spring Framework. On top of the process engine, you can choose from a stack of tools for human workflow management, operations and monitoring.\n\n- Web Site: https://www.camunda.org/\n- Getting Started: https://docs.camunda.org/get-started/\n- User Forum: https://forum.camunda.org/\n- Issue Tracker: https://github.com/camunda/camunda-bpm-platform/issues\n- Contribution Guidelines: https://camunda.org/contribute/\n\n## Components\n\nCamunda Platform 7 provides a rich set of components centered around the BPM lifecycle.\n\n#### Process Implementation and Execution\n\n- Camunda Engine - The core component responsible for executing BPMN 2.0 processes.\n- REST API - The REST API provides remote access to running processes.\n- Spring, CDI Integration - Programming model integration that allows developers to write Java Applications that interact with running processes.\n\n#### Process Design\n\n- Camunda Modeler - A [standalone desktop application](https://github.com/camunda/camunda-modeler) that allows business users and developers to design & configure processes.\n\n#### Process Operations\n\n- Camunda Engine - JMX and advanced Runtime Container Integration for process engine monitoring.\n- Camunda Cockpit - Web application tool for process operations.\n- Camunda Admin - Web application for managing users, groups, and their access permissions.\n\n#### Human Task Management\n\n- Camunda Tasklist - Web application for managing and completing user tasks in the context of processes.\n\n#### And there's more...\n\n- [bpmn.io](https://bpmn.io/) - Toolkits for BPMN, CMMN, and DMN in JavaScript (rendering, modeling)\n- [Community Extensions](https://docs.camunda.org/manual/7.5/introduction/extensions/) - Extensions on top of Camunda Platform 7 provided and maintained by our great open source community\n\n## A Framework\n\nIn contrast to other vendor BPM platforms, Camunda Platform 7 strives to be highly integrable and embeddable. We seek to deliver a great experience to developers that want to use BPM technology in their projects.\n\n### Highly Integrable\n\nOut of the box, Camunda Platform 7 provides infrastructure-level integration with Java EE Application Servers and Servlet Containers.\n\n### Embeddable\n\nMost of the components that make up the platform can even be completely embedded inside an application. For instance, you can add the process engine and the REST API as a library to your application and assemble your custom BPM platform configuration.\n\n## Contributing\n\nPlease see our [contribution guidelines](CONTRIBUTING.md) for how to raise issues and how to contribute code to our project.\n\n## Tests\n\nTo run the tests in this repository, please see our [testing tips and tricks](TESTING.md).\n\n\n## License\n\nThe source files in this repository are made available under the [Apache License Version 2.0](./LICENSE).\n\nCamunda Platform 7 uses and includes third-party dependencies published under various licenses. By downloading and using Camunda Platform 7 artifacts, you agree to their terms and conditions. Refer to https://docs.camunda.org/manual/latest/introduction/third-party-libraries/ for an overview of third-party libraries and particularly important third-party licenses we want to make you aware of.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2373046875,
          "content": "# Security Policy\n\nSee https://docs.camunda.org/security/ for our Security Guide and [https://camunda.com/trust-center/reporting-vulnerabilities/](https://camunda.com/trust-center/reporting-vulnerabilities/) for how to report a vulnerability.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 10.4921875,
          "content": "# Testing Guidelines\n\n* [Best Practices for Writing Test Cases](#best-practices-for-writing-test-cases)\n* [Running Integration Tests](#running-integration-tests)\n* [Limiting the Number of Engine Unit Tests](#limiting-the-number-of-engine-unit-tests)\n\n# Best Practices for Writing Test Cases\n\n* write JUnit4-style tests, not JUnit3\n* Project `camunda-engine`: If you need a process engine object, use the JUnit rule `org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule`. It ensures that the process engine object is reused across test cases and that certain integrity checks are performed after every test. For example:\n  ```\n  public ProcessEngineRule engineRule = new ProvidedProcessEngineRule();\n\n  @Test\n  public void testThings() {\n    ProcessEngine engine = engineRule.getProcessEngine();\n\n    ...\n  }\n  ```\n* Project `camunda-engine`: As an alternative to the above, you can extend extend the `org.camunda.bpm.engine.test.util.PluggableProcessEngineTest` class.\n  The class already provides an instance of the `ProvidedProcessEngineRule`, as well as the `ProcessEngineTestRule` that\n  provides some additional custom assertions and helper methods.\n  * However, if you need to make modifications to the `ProcessEngineConfiguration`, then please use the `ProcessEngineBootstrapRule`\n    as described below. \n* Project `camunda-engine`: If you need a process engine with custom configuration, use the JUnit rule `org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule` and chain it with `org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule` like so:\n  ```\n  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(configuration -> {\n      // apply configuration options here\n  });\n  protected ProvidedProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);\n\n  @Rule\n  public RuleChain ruleChain = RuleChain.outerRule(bootstrapRule).around(engineRule);\n  ```\n  \n# Running Integration Tests\n\nThe integration test suites are located under `qa/`. There you'll find a folder named XX-runtime for \neach server runtime we support. These projects are responsible for taking a runtime container \ndistribution (ie. Apache Tomcat, WildFly AS ...) and configuring it for integration testing. The \nactual integration tests are located in the `qa/integration-tests-engine` and `qa/integration-tests-webapps` modules.\n * *integration-tests-engine*: This module contains an extensive testsuite that test the integration of the process engine within a particular runtime container. For example, such tests will ensure that if you use the Job Executor Service inside a Java EE Container, you get a proper CDI request context spanning multiple EJB invocations or that EE resource injection works as expected. These integration tests are executed in-container, using [JBoss Arquillian](http://arquillian.org/).\n * *integration-tests-webapps*: This module tests the Camunda Platform webapplications inside the runtime containers. These integration tests run inside a client / server setting: the webapplication is deployed to the runtime container, the runtime container is started and the tests running inside a client VM perform requests against the deployed applications.\n\nIn order to run the integration tests, first perform a full install build. Then navigate to the `qa` folder.\n\nWe have different maven profiles for selecting\n* *Runtime containers & environments*: tomcat, wildfly\n* *The testsuite*: engine-integration, webapps-integration\n* *The database*: h2,h2-xa,db2,sqlserver,oracle,postgresql,postgresql-xa,mysql (Only h2 and \n  postgresql are supported in engine-integration tests)\n\nIn order to configure the build, compose the profiles for runtime container, testsuite, database. Example:\n\n```\nmvn clean install -Pengine-integration,wildfly,h2\n```\n\nIf you want to test against an XA database, just add the corresponding XA database profile to the mvn cmdline above. Example:\n\n```\nmvn clean install -Pengine-integration,wildfly,postgresql,postgresql-xa\n```\n\nYou can select multiple testsuites but only a single database and a single runtime container. This is valid:\n\n```\nmvn clean install -Pengine-integration,webapps-integration,tomcat,postgresql\n```\n\nThere is a special profile for the WildFly Application Servers:\n\n* WildFly Domain mode: `mvn clean install -Pengine-integration,h2,wildfly-domain`\n\n# Testing a Given Database\n\nCamunda supports all database technologies listed on [Supported Database Products](https://docs.camunda.org/manual/latest/introduction/supported-environments/#supported-database-products), and in all environments, they are operating in as specified. Support means we guarantee the Camunda Platform integrates well with the database technology’s JDBC behavior (there are some [documented](https://docs.camunda.org/manual/latest/user-guide/process-engine/database/) limitations, e.g., isolation level `READ_COMMITTED` is required for all databases). We test a database technology with a specific database, i.e., we test it in one environment, not all possible environments that you can imagine (e.g., we test Postgres on local Docker containers, but not as hosted databases on AWS or Azure).\n\n# No Maven? No problem!\n\nThis project provides a [Maven Wrapper](https://github.com/takari/maven-wrapper). This feature is useful for developers\nto build and test the project with the same version that Camunda uses. It's also useful for developers that don't want\nto install Maven at all. By executing the `mvnw` script (Unix), or `mvnw.cmd` script (Windows), a Maven distro will be \ndownloaded and installed in the `$USER_HOME/.m2/wrapper/dists` folder of the system. You can check the download URL in\nthe [.mvn/wrapper/maven-wrapper.properties](.mvn/wrapper/maven-wrapper.properties) file.\n\nThe Maven Wrapper requires Maven commands to be executed from the root of the project. As the Camunda Platform project\nis a multi-module (Maven Reactor) project, this is also a good best practice to apply.\n\nTo build the whole project, or just a module, one of the following commands may be executed:\n\n```shell\n# build the whole project\n./mvnw clean install\n\n# build the engine module\n./mvnw clean install -f engine/pom.xml\n\n# run the rolling-update IT tests with the H2 database\n./mvnw verify -f qa/test-db-rolling-update/pom.xml -Prolling-update,h2\n```\n\n> Note: Above the `mvn -f` command line option is recommended over the `mvn -pl` option. The reason is that `-pl` will\nbuild only the specified module, and will ignore any sub-modules that it might contain (unless the `-amd` option is also\nadded). As the Camunda Platform project has a multi-tiered module hierarchy (e.g. the [qa](qa/) module has modules of \nit's own), the `mvn -f` command option is simpler. \n\n## What about database technology X in environment Y?\n\nTo make a statement regarding Camunda Platform support, we need to understand if technology X is one of the technologies we already support or different technology. Several databases may share the same or a similar name, but they can still be different technologies: For example, IBM DB2 z/OS behaves quite differently from IBM DB2 on Linux, Unix, Windows. Amazon Aurora Postgres is different from a standard Postgres.\n\nIf you want to make sure that a given database works well with the Camunda Platform, you can run the test suite against this database.\n\nIn the `pom.xml` file located in the `./database` folder, several database profiles are defined with a matching database driver.\n\nTo run the test suite against a given database, select the `database` profile and your desired database profile and provide the connection parameters:\n\n```\nmvn test -Pdatabase,postgresql -Ddatabase.url=jdbc:postgresql:pgdb -Ddatabase.username=pguser -Ddatabase.password=pgpassword\n```\n\n## Testing a Camunda-supported Database with Testcontainers\n\nIt is also possible to use Testcontainers to run the test suite agains a given database. To ensure that your database \nDocker image can be used this way, please perform the following steps:\n\n1. Ensure that your Docker image is compatible with Testcontainers;\n1. Provide the repository name of your Docker image in the [testcontainers.properties](./engine/src/test/resources/testcontainers.properties) file;\n   * If you use a private Docker repository, please include it in the Docker image name (e.g. private.registry.org/postgres)\n1. In the `pom.xml` file located in the `./database` folder, check out the `database.tc.url` property to ensure that \n   the Docker tags match.\n1. Make sure that the `testcontainers` profile is added to your Maven `settings.xml` (you can find it [here](settings/maven/nexus-settings.xml)).\n\nAt the moment, Testcontainers can be used with the Camunda-supported versions of the following databases. Please make \nsure that the database image is configured according to [this guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/database/database-configuration/#isolation-level-configuration):\n* PostgreSQL\n* MariaDB\n* MySQL\n* MS-SQL 2017/2019 ([MSSQL-specific configuraion guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/database/mssql-configuration/))\n\nTo execute the process engine test suite with a certain database (e.g. PostgreSQL), you should call Maven in the \nengine directory with\n```shell\nmvn clean test -Ppostgresql,testcontainers\n```\n\n# Limiting the Number of Engine Unit Tests\n\nDue to the fact that the number of unit tests in the camunda engine increases daily and that you might just want to test a certain subset of tests the maven-surefire-plugin is configured in a way that you can include/exclude certain packages in your tests.\n\nThere are two properties that can be used for that: ``test.includes`` and ``test.excludes``\n\nWhen using the includes only the packages listed will be include and with excludes the other way around.\nFor example calling Maven in the engine directory with\n```\nmvn clean test -Dtest.includes=bpmn\n```\nwill test all packages that contain \"bpmn\". This will include e.g. ``*test.bpmn*`` and ``*api.bpmn*``. If you want to limit this further you have to get more concrete. Additionally, you can combine certain packages with a pipe:\n```\nmvn clean test -Dtest.includes=bpmn|cmmn\n```\nwill execute all bpmn and cmmn tests.\n\nThe same works for excludes. Also, you can combine both:\n```\nmvn clean test -Dtest.includes=bpmn -Dtest.excludes=bpmn.async\n```\nPlease note that excludes take precedence over includes.\n\nTo make it easier for you we created some profiles with predefined in- and excludes:\n- testBpmn\n- testCmmn\n- testBpmnCmmn\n- testExceptBpmn\n- testExceptCmmn\n- testExceptBpmnCmmn\n\nSo simply call\n```\nmvn clean test -PtestExceptBpmn\n```\nand all the bpmn testcases won't bother you any longer.\n"
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "clients",
          "type": "tree",
          "content": null
        },
        {
          "name": "commons",
          "type": "tree",
          "content": null
        },
        {
          "name": "connect",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "distro",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-cdi",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-dmn",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-rest",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine-spring",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "freemarker-template-engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal-dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "javaee",
          "type": "tree",
          "content": null
        },
        {
          "name": "juel",
          "type": "tree",
          "content": null
        },
        {
          "name": "model-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 11.0244140625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.2.0\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /usr/local/etc/mavenrc ] ; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"$(uname)\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        JAVA_HOME=\"$(/usr/libexec/java_home)\"; export JAVA_HOME\n      else\n        JAVA_HOME=\"/Library/Java/Home\"; export JAVA_HOME\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=$(java-config --jre-home)\n  fi\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=$(cygpath --unix \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=$(cygpath --path --unix \"$CLASSPATH\")\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$JAVA_HOME\" ] && [ -d \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"$(cd \"$JAVA_HOME\" || (echo \"cannot cd into $JAVA_HOME.\"; exit 1); pwd)\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"$(which javac)\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"$(expr \"\\\"$javaExecutable\\\"\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=$(which readlink)\n    if [ ! \"$(expr \"$readLink\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"$(dirname \"\\\"$javaExecutable\\\"\")\"\n        javaExecutable=\"$(cd \"\\\"$javaHome\\\"\" && pwd -P)/javac\"\n      else\n        javaExecutable=\"$(readlink -f \"\\\"$javaExecutable\\\"\")\"\n      fi\n      javaHome=\"$(dirname \"\\\"$javaExecutable\\\"\")\"\n      javaHome=$(expr \"$javaHome\" : '\\(.*\\)/bin')\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"$(\\unset -f command 2>/dev/null; \\command -v java)\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=$(cd \"$wdir/..\" || exit 1; pwd)\n    fi\n    # end of workaround\n  done\n  printf '%s' \"$(cd \"$basedir\" || exit 1; pwd)\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    # Remove \\r in case we run on Windows within Git Bash\n    # and check out the repository with auto CRLF management\n    # enabled. Otherwise, we may read lines that are delimited with\n    # \\r\\n and produce $'-Xarg\\r' rather than -Xarg due to word\n    # splitting rules.\n    tr -s '\\r\\n' ' ' < \"$1\"\n  fi\n}\n\nlog() {\n  if [ \"$MVNW_VERBOSE\" = true ]; then\n    printf '%s\\n' \"$1\"\n  fi\n}\n\nBASE_DIR=$(find_maven_basedir \"$(dirname \"$0\")\")\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\nMAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}; export MAVEN_PROJECTBASEDIR\nlog \"$MAVEN_PROJECTBASEDIR\"\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nwrapperJarPath=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\"\nif [ -r \"$wrapperJarPath\" ]; then\n    log \"Found $wrapperJarPath\"\nelse\n    log \"Couldn't find $wrapperJarPath, downloading it ...\"\n\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      wrapperUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n    else\n      wrapperUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n    fi\n    while IFS=\"=\" read -r key value; do\n      # Remove '\\r' from value to allow usage on windows as IFS does not consider '\\r' as a separator ( considers space, tab, new line ('\\n'), and custom '=' )\n      safeValue=$(echo \"$value\" | tr -d '\\r')\n      case \"$key\" in (wrapperUrl) wrapperUrl=\"$safeValue\"; break ;;\n      esac\n    done < \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\n    log \"Downloading from: $wrapperUrl\"\n\n    if $cygwin; then\n      wrapperJarPath=$(cygpath --path --windows \"$wrapperJarPath\")\n    fi\n\n    if command -v wget > /dev/null; then\n        log \"Found wget ... using wget\"\n        [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--quiet\"\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget $QUIET \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        else\n            wget $QUIET --http-user=\"$MVNW_USERNAME\" --http-password=\"$MVNW_PASSWORD\" \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        log \"Found curl ... using curl\"\n        [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--silent\"\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl $QUIET -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n        else\n            curl $QUIET --user \"$MVNW_USERNAME:$MVNW_PASSWORD\" -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n        fi\n    else\n        log \"Falling back to using Java to download\"\n        javaSource=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        javaClass=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaSource=$(cygpath --path --windows \"$javaSource\")\n          javaClass=$(cygpath --path --windows \"$javaClass\")\n        fi\n        if [ -e \"$javaSource\" ]; then\n            if [ ! -e \"$javaClass\" ]; then\n                log \" - Compiling MavenWrapperDownloader.java ...\"\n                (\"$JAVA_HOME/bin/javac\" \"$javaSource\")\n            fi\n            if [ -e \"$javaClass\" ]; then\n                log \" - Running MavenWrapperDownloader.java ...\"\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$wrapperUrl\" \"$wrapperJarPath\") || rm -f \"$wrapperJarPath\"\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\n# If specified, validate the SHA-256 sum of the Maven wrapper jar file\nwrapperSha256Sum=\"\"\nwhile IFS=\"=\" read -r key value; do\n  case \"$key\" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;\n  esac\ndone < \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\nif [ -n \"$wrapperSha256Sum\" ]; then\n  wrapperSha256Result=false\n  if command -v sha256sum > /dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | sha256sum -c > /dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  elif command -v shasum > /dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | shasum -a 256 -c > /dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\"\n    echo \"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\"\n    exit 1\n  fi\n  if [ $wrapperSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\" >&2\n    echo \"Investigate or delete $wrapperJarPath to attempt a clean download.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=$(cygpath --path --windows \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=$(cygpath --path --windows \"$CLASSPATH\")\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\")\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $*\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\n# shellcheck disable=SC2086 # safe args\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 7.4130859375,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Apache Maven Wrapper startup batch script, version 3.2.0\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM set title of command window\ntitle %0\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nset WRAPPER_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n    IF \"%%A\"==\"wrapperUrl\" SET WRAPPER_URL=%%B\n)\n\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\nif exist %WRAPPER_JAR% (\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Found %WRAPPER_JAR%\n    )\n) else (\n    if not \"%MVNW_REPOURL%\" == \"\" (\n        SET WRAPPER_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar\"\n    )\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n        echo Downloading from: %WRAPPER_URL%\n    )\n\n    powershell -Command \"&{\"^\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n\t\t\"}\"^\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\"^\n\t\t\"}\"\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Finished downloading %WRAPPER_JAR%\n    )\n)\n@REM End of extension\n\n@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file\nSET WRAPPER_SHA_256_SUM=\"\"\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n    IF \"%%A\"==\"wrapperSha256Sum\" SET WRAPPER_SHA_256_SUM=%%B\n)\nIF NOT %WRAPPER_SHA_256_SUM%==\"\" (\n    powershell -Command \"&{\"^\n       \"$hash = (Get-FileHash \\\"%WRAPPER_JAR%\\\" -Algorithm SHA256).Hash.ToLower();\"^\n       \"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\"^\n       \"  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\"^\n       \"  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\"^\n       \"  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\"^\n       \"  exit 1;\"^\n       \"}\"^\n       \"}\"\n    if ERRORLEVEL 1 goto error\n)\n\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\n@REM work with both Windows and non-Windows executions.\nset MAVEN_CMD_LINE_ARGS=%*\n\n%MAVEN_JAVA_EXE% ^\n  %JVM_CONFIG_MAVEN_PROPS% ^\n  %MAVEN_OPTS% ^\n  %MAVEN_DEBUG_OPTS% ^\n  -classpath %WRAPPER_JAR% ^\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\n\ncmd /C exit /B %ERROR_CODE%\n"
        },
        {
          "name": "parent",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 11.32421875,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.camunda</groupId>\n    <artifactId>camunda-bpm-release-parent</artifactId>\n    <version>2.3.0</version>\n    <!-- do not remove empty tag - http://jira.codehaus.org/browse/MNG-4687 -->\n    <relativePath />\n  </parent>\n\n  <groupId>org.camunda.bpm</groupId>\n  <artifactId>camunda-root</artifactId>\n  <version>7.23.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>Camunda Platform - Root Pom</name>\n  <inceptionYear>2013</inceptionYear>\n\n  <description>\n    This pom defines the modules that make up the build.\n    The parent pom for all Camunda Platform projects can be found in the parent directory relative to this file.\n  </description>\n\n  <properties>\n    <license.includeTransitiveDependencies>false</license.includeTransitiveDependencies>\n\n    <!-- These properties are used in both the BOM as well as camunda-parent and subprojects -->\n    <version.mybatis>3.5.15</version.mybatis>\n    <version.joda-time>2.12.5</version.joda-time>\n    <version.uuid-generator>4.3.0</version.uuid-generator>\n    <version.feel-scala>1.18.1</version.feel-scala>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>license-maven-plugin</artifactId>\n        <version>1.14</version>\n        <configuration>\n          <acceptPomPackaging>true</acceptPomPackaging>\n          <excludedScopes>test</excludedScopes>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <!-- distro profile is default and builds the complete distribution.\n         Does not run integration tests. -->\n    <profile>\n      <id>distro</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <!-- This profile is run in the CI as the first step (platform-ASSEMBLY); It must not activate\n          any modules that have a dependency to the webapps. See also the referenced POMs,\n          they usually define which modules are covered by the distro profile -->\n        <module>spring-boot-starter</module>\n\n        <module>quarkus-extension</module>\n\n        <module>qa</module>\n\n        <module>javaee/ejb-service</module>\n        <module>javaee/ejb-client</module>\n        <module>javaee/ejb-client-jakarta</module>\n        <module>javaee/jobexecutor-ra</module>\n        <module>javaee/jobexecutor-rar</module>\n\n        <module>model-api</module>\n        <module>engine-dmn</module>\n        <module>connect</module>\n        <module>juel</module>\n        <module>spin</module>\n        <module>commons</module>\n        <module>freemarker-template-engine</module>\n\n        <module>test-utils/testcontainers</module>\n        <module>test-utils/junit5-extension</module>\n        <module>test-utils/junit5-extension-dmn</module>\n        <module>test-utils/assert</module>\n        <module>test-utils/archunit</module>\n\n        <module>engine</module>\n        <module>engine-cdi</module>\n        <module>engine-spring</module>\n        <module>engine-rest</module>\n\n        <module>webapps</module>\n\n        <module>examples</module>\n\n        <module>engine-plugins</module>\n\n        <module>distro/license-book</module>\n        <module>distro/jboss</module>\n        <module>distro/tomcat</module>\n        <module>distro/sql-script</module>\n        <module>distro/run</module>\n\n        <module>clients/java</module>\n\n        <module>internal-dependencies</module>\n        <module>database</module>\n        <module>parent</module>\n        <module>bom</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-ce</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <!-- This profile is run in the CI after the webapps were built (platform-ASSEMBLY);\n          It should activate any module that has a dependency to the webapps -->\n        <module>spring-boot-starter</module>\n\n        <module>distro/license-book</module>\n        <module>distro/jboss</module>\n        <module>distro/tomcat</module>\n        <module>distro/run</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>javadocs</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <configuration>\n              <top><![CDATA[\n                <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n                  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n                  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n                  'https://ssgtm.camunda.org/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n                  })(window,document,'script','dataLayer','GTM-PP9MHKW');</script>\n              ]]></top>\n              <failOnError>false</failOnError>\n              <additionalJOptions>\n                <additionalJOption>-Xdoclint:none</additionalJOption>\n                <additionalJOption>--ignore-source-errors</additionalJOption>\n                <additionalJOption>--allow-script-in-comments</additionalJOption>\n              </additionalJOptions>\n              <doctitle>Camunda Platform Javadocs ${project.version}</doctitle>\n              <windowtitle>Camunda Platform Javadocs ${project.version}</windowtitle>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>distro-serverless</id>\n      <modules>\n        <module>qa</module>\n\n        <module>engine</module>\n        <module>engine-cdi</module>\n        <module>engine-spring</module>\n        <module>engine-rest</module>\n\n        <module>webapps</module>\n\n        <module>examples</module>\n\n        <module>engine-plugins</module>\n\n        <module>distro/sql-script</module>\n\n        <module>internal-dependencies</module>\n        <module>database</module>\n        <module>parent</module>\n        <module>bom</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-tomcat</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <module>distro/license-book</module>\n        <module>distro/tomcat</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-wildfly</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <module>javaee/ejb-client</module>\n        <module>javaee/ejb-client-jakarta</module>\n        <module>distro/license-book</module>\n        <module>distro/wildfly</module>\n        <module>distro/wildfly26</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-webjar</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <module>distro/webjar</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-run</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <modules>\n        <module>distro/run</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>distro-starter</id>\n      <!-- This profile is run in the release CI for building the enterprise artifacts\n          It can be removed if the distro job is merged with the assembly job and\n          distro-ce is not used for building the spring boot starter -->\n      <modules>\n        <module>spring-boot-starter</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <!-- profile for running process-engine unit tests in QA -->\n      <id>check-engine</id>\n      <modules>\n        <module>engine</module>\n        <module>engine-cdi</module>\n        <module>engine-spring</module>\n        <module>engine-rest</module>\n\n        <module>internal-dependencies</module>\n        <module>database</module>\n        <module>parent</module>\n        <module>bom</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <!-- profile for running webapp unit tests in QA -->\n      <id>check-webapps</id>\n      <modules>\n        <module>internal-dependencies</module>\n        <module>parent</module>\n        <module>bom</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>sonatype-oss-release</id>\n      <modules>\n        <module>spring-boot-starter</module>\n        <module>quarkus-extension</module>\n        <module>model-api</module>\n\n        <module>engine</module>\n        <module>engine-cdi</module>\n        <module>engine-spring</module>\n        <module>engine-rest</module>\n\n        <module>engine-dmn</module>\n        <module>connect</module>\n        <module>juel</module>\n        <module>spin</module>\n        <module>commons</module>\n        <module>freemarker-template-engine</module>\n\n        <module>javaee/ejb-client</module>\n        <module>javaee/ejb-client-jakarta</module>\n\n        <module>webapps</module>\n\n        <module>engine-plugins</module>\n\n        <module>distro/webjar</module>\n\n        <module>clients/java</module>\n\n        <module>test-utils/junit5-extension</module>\n        <module>test-utils/junit5-extension-dmn</module>\n        <module>test-utils/assert</module>\n\n        <module>internal-dependencies</module>\n        <module>database</module>\n        <module>parent</module>\n        <module>bom</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>license-header-check</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>com.mycila</groupId>\n            <artifactId>license-maven-plugin</artifactId>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n  </profiles>\n\n  <repositories>\n    <repository>\n      <id>maven-central</id>\n      <name>Maven Central</name>\n      <url>https://repo1.maven.org/maven2</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n    <repository>\n      <!-- Required for local builds by community users on master branch -->\n      <id>camunda-public-repository</id>\n      <name>Camunda Platform Maven Repository</name>\n      <url>https://artifacts.camunda.com/artifactory/public/</url>\n    </repository>\n    <repository>\n      <!-- Required for local builds by developers on maintainance branches -->\n      <id>camunda-nexus</id>\n      <name>Camunda Nexus</name>\n      <url>https://artifacts.camunda.com/artifactory/internal</url>\n    </repository>\n  </repositories>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n  </licenses>\n\n  <organization>\n    <name>camunda services GmbH</name>\n    <url>http://www.camunda.com</url>\n  </organization>\n\n  <url>http://www.camunda.org</url>\n\n  <developers>\n    <developer>\n      <id>camunda.org</id>\n      <name>Camunda Platform Community</name>\n      <organization>camunda.org</organization>\n      <organizationUrl>http://camunda.org</organizationUrl>\n    </developer>\n  </developers>\n\n  <scm>\n    <url>https://github.com/camunda/camunda-bpm-platform</url>\n    <connection>scm:git:git@github.com:camunda/camunda-bpm-platform.git</connection>\n    <developerConnection>scm:git:git@github.com:camunda/camunda-bpm-platform.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n\n  <issueManagement>\n    <system>Jira</system>\n    <url>https://app.camunda.com/jira/browse/CAM/</url>\n  </issueManagement>\n\n</project>\n"
        },
        {
          "name": "qa",
          "type": "tree",
          "content": null
        },
        {
          "name": "quarkus-extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "spin",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-boot-starter",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "webapps",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}