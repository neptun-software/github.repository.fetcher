{
  "metadata": {
    "timestamp": 1736708538823,
    "page": 774,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pwittchen/ReactiveNetwork",
      "stars": 2532,
      "defaultBranch": "RxJava2.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.43359375,
          "content": "[*.{kt,kts}]\n# possible values: number (e.g. 2), \"unset\" (makes ktlint ignore indentation completely)\nindent_size=2\n# possible values: number (e.g. 2), \"unset\"\ncontinuation_indent_size=2\n# true (recommended) / false\ninsert_final_newline=unset\n# possible values: number (e.g. 120) (package name, imports & comments are ignored), \"off\"\n# it's automatically set to 100 on `ktlint --android ...` (per Android Kotlin Style Guide)\nmax_line_length=off"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/.gradle\n/local.properties\n/.idea\n/.DS_Store\n/build\n*.iml\n.gradletasknamecach\n*.exec\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6005859375,
          "content": "language: android\n\nandroid:\n  components:\n    - tools\n    - platform-tools\n    - build-tools-28\n    - android-28\n    - extra-android-support\n    - extra-android-m2repository\n  licenses:\n    - android-sdk-license-5be876d5\n    - android-sdk-license-c81a61d9\n    - 'android-sdk-preview-license-.+'\n    - 'android-sdk-license-.+'\n    - 'google-gdk-license-.+'\n\njdk: oraclejdk8\n\nbefore_install:\n  - yes | sdkmanager \"platforms;android-27\"\n\ninstall:\n  - true\n\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)\n\nscript:\n  - ./gradlew clean build test jacocoTestReport check\n\ncache:\n  directories:\n    - $HOME/.m2\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 20.607421875,
          "content": "CHANGELOG\n=========\n\nv. 3.0.8\n--------\n*02 Apr 2020*\n\n- updated project dependencies\n- update gradle version\n- fixed bug #422 and #415 (changed port for default host for checking internet connectivity from https to http)\n\nv. 3.0.7\n--------\n*12 Mar 2020*\n\n- updated project dependencies\n- fixed bug #379 (changed default host protocol to https in `InternetObservingSettings)\n\nv. 3.0.6\n--------\n*25 Aug 2019*\n\n- added new method for creating `HttpsUrlConnection` (`HttpsURLConnection createHttpsUrlConnection(final String host, final int port, final int timeoutInMs)`) in `WalledGardenInternetObservingStrategy`, appropriate method is chosen automatically basing on the protocol (`http` or `https`) - solves #323\n- note: version 3.0.5 was skipped due to sonatype issues\n\nv. 3.0.4\n--------\n*7 Aug 2019*\n- fixed bug #330 - State CONNECTED sometimes is not returned when wifi is turned off while having mobile internet connection (Android 9)\n- fixed bug #307 - Mobile data connection is not active\n- switched default protocol from `http` to `https` in `WalledGardenInternetObservingStrategy` - solves #323\n- added nopen for static code analysis - solves #322\n- bumped project dependencies\n- updated docs\n\nv. 3.0.3\n--------\n*13 May 2019*\n- migrated: `com.android.support:support-annotations:28.0.0` -> `androidx.annotation:annotation:1.0.2` - PR #332\n- migrated `com.android.support:appcompat-v7:28.0.0` -> `androidx.appcompat:appcompat:1.0.2` - PR #332\n- updated Kotlin to `1.3.31` - PR #332\n- updated RxJava to `2.2.8` - PR #332\n- updated RxAndroid `2.1.1` - PR #332\n- added `release.sh` script to make release process more automated\n\nv. 3.0.2\n--------\n*27 Dec 2018*\n- bumped project dependencies: https://github.com/pwittchen/ReactiveNetwork/commit/d486f80459c2d52f8012af0c707528ebc972b4a2\n\nv. 3.0.1\n--------\n*1 Dec 2018*\n\n- Fixed unserialized access to subject on Marshmallow - https://github.com/pwittchen/ReactiveNetwork/commit/91b676e726071b2d77b1e26a35dbcafa0fac7b32 by @aperfilyev\n\nv. 3.0.0\n--------\n*24 Sep 2018*\n\n- updated project dependencies\n- updated target SDK\n- simplified codecov.io configuration\n- documented usage of `usesClearTextTraffic` setting and added it to the sample apps\n- added possibility to configure HTTP response code via `httpResponse(int)` method in `InternetObservingSettings` class (API-breaking changes - a few method signatures were changed) - it works for `WalledGardenInternetObservingStrategy` only\n- updated builder in `InternetObservingSettings` - removed unused methods\n\nv. 2.1.0\n--------\n*5 Aug 2018*\n\n- bumped project dependencies - PR #292, Commit: https://github.com/pwittchen/ReactiveNetwork/commit/7e4cd4b7e39931d6cceeb0b674ccb506d38f91e4\n  - RxJava: 2.1.16 -> 2.2.0\n  - Mockito Core: 2.19.1 -> 2.21.0\n  - NullAway: 0.4.7 -> 0.5.1\n  - Robolectric: 3.1.2 -> 4.0-alpha-3\n\nv. 2.0.0\n--------\n*20 Jul 2018*\n\n- bumped project dependencies -> RxJava: https://github.com/pwittchen/ReactiveNetwork/commit/1d1a301a72d0128548ccf4b9b2cef24c07d38118, others: https://github.com/pwittchen/ReactiveNetwork/commit/597dc03c1c18fb73849c7b0bc4a52d46524bd02b\n- refactored `Connectivity` class to better builder pattern to improve code consistency (breaking API of the `Connectivity` class) - PR #283\n- improved unit tests coverage - PR #287\n\nv. 1.0.0\n--------\n*24 Jun 2018*\n\n- fixed docs in https://github.com/pwittchen/ReactiveNetwork/commit/76ab2b23210207d83250da5d8fd0cd6e275e3f08 after reporting problem in #276 (returning false-positive connectivity results in one edge-case)\n- updated project dependencies - PR #269, commit 02449af2f38ac463e1aa8824beee46ea823fd83b\n- refactored `ReactiveNetwork` class with Builder pattern - PR #279\n- removed the following methods from the `ReactiveNetwork` class:\n\n```java\nObservable<Boolean> observeInternetConnectivity(int interval, String host, int port, int timeout)\nObservable<Boolean> observeInternetConnectivity(int initialIntervalInMs, int intervalInMs, String host, int port, int timeout)\nObservable<Boolean> observeInternetConnectivity(final int initialIntervalInMs, final int intervalInMs, final String host, final int port, final int timeoutInMs, final ErrorHandler errorHandler)\nObservable<Boolean> observeInternetConnectivity(final InternetObservingStrategy strategy)\nObservable<Boolean> observeInternetConnectivity(final InternetObservingStrategy strategy, final String host)\n\nSingle<Boolean> checkInternetConnectivity(InternetObservingStrategy strategy)\nSingle<Boolean> checkInternetConnectivity(String host,int port, int timeoutInMs)\nSingle<Boolean> checkInternetConnectivity(String host, int port, int timeoutInMs, ErrorHandler errorHandler)\nSingle<Boolean> checkInternetConnectivity(final InternetObservingStrategy strategy, final String host)\n```\n\n- added `InternetObservingSettings` class\n- added the following methods to the `ReactiveNetwork` class:\n\n```java\nObservable<Boolean> observeInternetConnectivity(InternetObservingSettings settings)\nSingle<Boolean> checkInternetConnectivity(InternetObservingSettings settings)\n```\n\nv. 0.12.3\n--------\n*03 Jan 2018*\n\n- updated project dependencies -> see: https://github.com/pwittchen/ReactiveNetwork/commit/abc1fd5e7f18e3fa504e071f000ae5067946c68f\n- updated gradle configuration in `config/quality.gradle` (replaced deprecated invocations with new ones)\n\nv. 0.12.2\n--------\n*11 Nov 2017*\n\n- updated API of `MarshmallowNetworkObservingStrategy`\n  - made `void registerIdleReceiver(context)` `protected`\n  - made `boolean isIdleMode(context)` `protected`\n  - made `tryToUnregisterCallback(ConnectivityManager)` `protected`\n  - made `tryToUnregisterReceiver(context)` `protected`\n  - made `NetworkCallback createNetworkCallback(context)` `protected`\n  - added `BroadcastReceiver createIdleBroadcastReceiver()`\n  - added `onNext(Connectivity connectivity)`\n  - added `MarshmallowNetworkObservingStrategy()` constructor\n  - extracted `String` messages into `protected static final` fields\n- set min sdk version for sample apps to 14\n- updated Gradle v. 3.0.0.\n- updated compile sdk version: 25 -> 26\n- updated build tools version: 25.0.2 - > 26.0.2\n- updated kotlin version: 1.1.3-2 -> 1.1.51\n- updated project dependencies\n  - RxJava 2.1.2 -> 2.1.6\n  - support-annotations: 25.3.0 -> 27.0.1\n  - appcompat-v7: 25.3.0 -> 27.0.1\n  - truth: 0.34 -> 0.36\n  - mockito-core: 2.8.47 -> 2.12.0\n- added ErrorProne for static code analysis\n- added NullAway for static code analysis\n\nv. 0.12.1\n--------\n*02 Sep 2017*\n\nFixed memory leak in `PreLollipopNetworkObservingStrategy` during disposing of an `Observable` - issue #219.\n\nv. 0.12.0\n--------\n*30 Aug 2017*\n\n- Fixed NPE occuring when `ConnectivityManager` is `null` in `ReactiveNetwork.observeNetworkConnectivity()` method - issue #209\n- Added new methods to the API for checking Internet connectivity - issue #205\n  - `Observable<Boolean> observeInternetConnectivity(strategy, host)`\n  - `Single<Boolean> checkInternetConnectivity(strategy, host)`\n- Added to documentation comment about monitoring Internet connectivity with custom host - issue #204\n- Classes which implement InternetObservingStrategy handle custom hosts with and without `http://` or `https://` prefix gracefully - issue #206\n- organized packages with unit tests\n- made the library more hermetic\n- changed visibility of `SocketInternetObservingStrategy#isConnected(String host, int port, int timeoutInMs, ErrorHandler handler)` method from `public` to `protected`\n- changed visibility of `SocketInternetObservingStrategy#isConnected(Socket socket, String host, int port, int timeoutInMs, ErrorHandler errorHandler)` method from `public` to `protected`\n- changed visibility of `Connectivity#create(Context, ConnectivityManager)` method from `public` to `protected`\n- changed visibility of `WalledGardenInternetObservingStrategy#isConnected(String host, int port, int timeoutInMs, ErrorHandler errorHandler)` method from `public` to `protected`\n- changed visibility of `WalledGardenInternetObservingStrategy#createHttpUrlConnection(String host, int port, int timeoutInMs)` method from `public` to `protected`\n\nv. 0.11.0\n--------\n*05 Aug 2017*\n\n- added `WalledGardenInternetObservingStrategy` - fixes #116\n- made `WalledGardenInternetObservingStrategy` a default strategy for checking Internet connectivity\n- added documentation for NetworkObservingStrategy - solves #197\n- added documentation for InternetObservingStrategy - solves #198\n- fixed package name in `AndroidManifest.xml` file - solves #195\n- bumped RxJava2 version to 2.1.2\n- bumped Kotlin version to 1.1.3-2\n- bumped Gradle Android Tools version to 2.3.3\n- bumped Retrolambda to 3.7.0\n- increased code coverage with unit tests\n\nv. 0.10.0\n--------\n*18 Jul 2017*\n\n- bumped RxJava2 version to 2.1.1\n- bumped test dependencies\n- created Code of Conduct\n- updated unit tests\n- updated Kotlin version in sample apps\n- added retrolambda to the sample Java app - issue #163\n- fixed behavior of network observing in disconnected state - issue #159\n- added the following methods to `ReactiveNetwork` class:\n  - `Single<Boolean> checkInternetConnectivity()`\n  - `Single<Boolean> checkInternetConnectivity(InternetObservingStrategy strategy)`\n  - `Single<Boolean> checkInternetConnectivity(String host, int port, int timeoutInMs)`\n  - `Single<Boolean> checkInternetConnectivity(String host, int port, int timeoutInMs, ErrorHandler errorHandler)`\n  - `Single<Boolean> checkInternetConnectivity(InternetObservingStrategy strategy, String host, int port, int timeoutInMs, ErrorHandler errorHandler)`\n\n\nv. 0.9.1\n--------\n*30 Apr 2017*\n\n- updated `ConnectivityPredicate` and replaced `io.reactivex.functions.Function` with `io.reactivex.functions.Predicate` to make it compatible with RxJava2 filtering methods #168\n- bumped RxJava2.x version to 2.1.0\n\nv. 0.9.0\n--------\n*11 Apr 2017*\n\n- **migrated library to RxJava2.x** on RxJava2.x branch and released it as `reactivenetwork-rx2` artifact\n- updated dependencies\n- updated documentation\n- updated sample apps\n\nv. 0.8.0\n--------\n*12 Feb 2017*\n\n- renamed `DefaultInternetObservingStrategy` to `SocketInternetObservingStrategy` class\n- added `observeInternetConnectivity(InternetObservingStrategy)` method to `ReactiveNetwork` class\n- removed `DefaultInternetObservingStrategy#ON_CLOSE_SOCKET_ERROR_MSG` static field\n- added permission annotations\n- updated `Connectivity` class. Now it contains the following fields with getters: `state, detailedState, type, subType, available, failover, roaming, typeName, subTypeName, reason, extraInfo` (it's wrapped data of `NetworkInfo` class from Android SDK)\n- added `Builder` to the `Connectivity` class\n- created `ConnectivityPredicate` class\n- methods `Func1<Connectivity, Boolean> hasState(final NetworkInfo.State... states)` and `Func1<Connectivity, Boolean> hasType(final int... types)` were moved from `Connectivity` class to `ConnectivityPredicate` class\n- updated Gradle and Travis configuration\n- updated project dependencies\n\nv. 0.7.0\n--------\n*11 Dec 2016*\n\n- added `isConnected(final String host, final int port, final int timeoutInMs,\n    ErrorHandler errorHandler)` method to `DefaultInternetObservingStrategy` class\n- added `isConnected(final Socket socket, final String host, final int port, final int timeoutInMs,\n    final ErrorHandler errorHandler)` method to `DefaultInternetObservingStrategy` class\n- renamed `SocketErrorHandler` to `ErrorHandler` and updated its API\n- renamed `DefaultSocketErrorHandler` to `DefaultErrorHandler`\n- updated API of the `InternetObservingStrategy`\n- updated packages organization\n- migrated unit tests to Robolectric (now tests can be executed without an emulator or a device)\n- enabled test coverage reports with codecov.io and Jacoco\n- test coverage was increased from 54% to 74%\n- unit tests are now executed on Travis CI\n- test coverage report is generated by Travis CI with codecov.io\n- added `MarshmallowNetworkObservingStrategy` and handling Doze mode\n- bumped RxJava to v. 1.2.3\n- updated build tools to v. 2.0.3\n- updated Gradle configuration\n- updated Travis CI configurati\n\nv. 0.6.0\n--------\n*20 Oct 2016*\n\n- fixed bug with the crash during unregister receiver for Pre-Lollipop devices #87\n- extended `NetworkObservingStrategy` with `void onError(String message, Exception exception)` method, which allows handling errors in network observing strategies\n- closed the socket in the Internet connection check #91\n- added `SocketErrorHandler` with a default implementation in `DefaultSocketErrorHandler` class, which allows handling errors during closing socket connection\n- delegated observing Internet connectivity functionality to separate class hidden behind `InternetObservingStrategy` interface\n- added an `InternetObservingStrategy` interface with the default implementation in `DefaultInternetObservingStrategy` class, which allows to customize Internet observing strategy\n- added `Observable<Boolean> observeInternetConnectivity(int initialIntervalInMs, int intervalInMs, String host, int port, int timeout)` method to `ReactiveNetwork` class\n- added `Observable<Boolean> observeInternetConnectivity(final int initialIntervalInMs, final int intervalInMs, final String host, final int port, final int timeoutInMs, final SocketErrorHandler socketErrorHandler)` method to `ReactiveNetwork` class\n- added `Observable<Boolean> observeInternetConnectivity(final InternetObservingStrategy strategy, final int initialIntervalInMs, final int intervalInMs, final String host, final int port, final int timeoutInMs, final SocketErrorHandler socketErrorHandler)` method to `ReactiveNetwork` class\n- bumped RxJava version to 1.2.1\n\nv. 0.5.2\n--------\n*03 Sep 2016*\n\n- bumped RxJava to 1.1.9\n- bumped Gradle Build Tools to 2.1.3\n\nv. 0.5.1\n--------\n*30 Jul 2016*\n\n- bumped RxJava to v. 1.1.8\n\nv. 0.5.0\n--------\n*24 Jul 2016*\n\n- handled all connection types (including Ethernet) (issue #71)\n- removed `ConnectivityStatus` enum and replaced it with `Connectivity` class.\n- replaced `Observable<ConnectivityStatus> observeNetworkConnectivity(final Context context)` method with `Observable<Connectivity> observeNetworkConnectivity(final Context context)`\n- introduced a new way of network monitoring with [NetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html) available from Android N (API 21) (issue #62)\n- added `NetworkObservingStrategy`, which allows applying different network monitoring strategies\n- added `PreLollipopNetworkObservingStrategy` with old network monitoring implementation\n- added `LollipopNetworkObservingStrategy` with new network monitoring implementation\n- added `Observable<Connectivity> observeNetworkConnectivity(final Context context, final NetworkObservingStrategy strategy)` method to ReactiveNetwork class\n- made method for creating Observables static like in original RxJava library\n- added `create()` method to `ReactiveNetwork` class\n- made constructor of `ReactiveNetwork` class protected\n- added `Preconditions` class verifying correctness of the input parameters\n- added more unit tests\n\nv. 0.4.0\n--------\n*11 Jun 2016*\n\n**Removed deprecated methods from the public API**:\n- removed depreacted `Observable<ConnectivityStatus> observeConnectivity(final Context context)` method in favor of `Observable<ConnectivityStatus> observeNetworkConnectivity(final Context context)` method\n- removed depreacted `Observable<List<ScanResult>> observeWifiAccessPoints(final Context context)` method in favor of [ReactiveWiFi](https://github.com/pwittchen/ReactiveWiFi) library\n- removed depreacted `Observable<WifiSignalLevel> observeWifiSignalLevel(final Context context)` method in favor of [ReactiveWiFi](https://github.com/pwittchen/ReactiveWiFi) library\n- removed depreacted `Observable<Integer> observeWifiSignalLevel(final Context context,final int numLevels)` method in favor of [ReactiveWiFi](https://github.com/pwittchen/ReactiveWiFi) library\n\n**Removed permissions in AndroidManifest.xml**:\n- removed `android.permission.ACCESS_WIFI_STATE` permission from `AndroidManifest.xml`\n- removed `android.permission.CHANGE_WIFI_STATE` permission from `AndroidManifest.xml`\n- removed `android.permission.ACCESS_COARSE_LOCATION` permission from `AndroidManifest.xml`\n\nv. 0.3.0\n--------\n*07 Jun 2016*\n\n- removed `enableInternetCheck()` method\n- removed  `ConnectivityStatus.WIFI_CONNECTED_HAS_INTERNET` enum value\n- removed `ConnectivityStatus.WIFI_CONNECTED_HAS_NO_INTERNET` enum value\n- changed method name from `Observable<ConnectivityStatus> observeConnectivity(final Context context)` to `Observable<ConnectivityStatus> observeNetworkConnectivity(final Context context)`\n- deprecated `Observable<ConnectivityStatus> observeConnectivity(final Context context)` method\n- deprecated `Observable<List<ScanResult>> observeWifiAccessPoints(final Context context)` method\n- depreceated `Observable<WifiSignalLevel> observeWifiSignalLevel(final Context context)` method\n- deprecated `Observable<Integer> observeWifiSignalLevel(final Context context, final int numLevels)` method\n- changed method signature from `ConnectivityStatus getConnectivityStatus(final Context context, final boolean checkInternet)` to `ConnectivityStatus getConnectivityStatus(final Context context)`\n- updated `ConnectivityStatus getConnectivityStatus(final Context context)` method and added JavaDoc for it\n- added `Observable<Boolean> observeInternetConnectivity(final int interval, final String host, final int port, final int timeout)` method\n- added `Observable<Boolean> observeInternetConnectivity()` method\n- added `android.permission.INTERNET` to the `AndroidManifest.xml`\n- updated JavaDoc\n- updated sample apps\n- updated documentation in `README.md`\n- bumped RxJava version to 1.1.5\n- bumped RxAndroid version to 1.2.0\n- bumped Google Truth version to 0.28 (test dependency)\n\nv. 0.2.0\n--------\n*10 Feb 2016*\n\n- added possibility to observe WiFi signal level with `observeWifiSignalLevel(context, numLevels)`  and `observeWifiSignalLevel(context)` method\n- created `WifiSignalLevel` enum\n- added internet check to parameters of `getConnectivityStatus(context, checkInternet)` method\n- made `getConnectivityStatus(context, checkInternet)` method public\n- changed String variable `status` in `ConnectivityStatus` enum to `description` and made it public\n- changed output of the `toString()` method in `ConnectivityStatus` to keep consistency with another enum\n- made `ReactiveNetwork` class non-final\n- bumped Kotlin version in sample app to 1.0.0-rc-1036\n- increased immutability of code of the library\n- updated sample apps and documentation\n\nv. 0.1.5\n--------\n*10 Jan 2016*\n\n- Due to memory leak in WifiManager reported in issue [43945](https://code.google.com/p/android/issues/detail?id=43945) in Android issue tracker replaced Activity Context with Application Context in sample apps and added appropriate note in `README.md`\n- added `ACCESS_COARSE_LOCATION` permission to `AndroidManifest.xml` to be able to scan WiFi access points on Android 6\n\nv. 0.1.4\n--------\n*13 Dec 2015*\n\n- bumped RxJava dependency to v. 1.1.0\n- bumped RxAndroid dependency to v. 1.1.0\n- bumped Google Truth test dependency to v. 0.27\n\nv. 0.1.3\n--------\n*06 Nov 2015*\n\n- fixed bug with incorrect status after going back from background inside the sample app reported in issue #31\n- fixed RxJava usage in sample app\n- fixed RxJava usage in code snippets in `README.md`\n- added static code analysis\n- updated code formatting\n- added sample sample app in Kotlin\n\nv. 0.1.2\n--------\n*01 Oct 2015*\n\n- now library is emitting `OFFLINE` status at subscription time, when device is not connected to any network\n- bumped target SDK version to 23\n- bumped buildToolsVersion to 23.0.1\n- removed `CHANGE_NETWORK_STATE` and `INTERNET` permissions from `AndroidManifest.xml`, because they're no longer required\n\nv. 0.1.1\n--------\n*27 Sep 2015*\n\n- bumped RxJava to v. 1.0.14\n- bumped Gradle Build Tools to v. 1.3.1\n\nv. 0.1.0\n--------\n*13 Sep 2015*\n\n- changed `UNDEFINED` status to `UNKNOWN`\n- added `WIFI_CONNECTED_HAS_INTERNET` and `WIFI_CONNECTED_HAS_NO_INTERNET` statuses\n- added `enableInternetCheck()` method to `ReactiveNetwork` object. When it's called, `WIFI_CONNECTED_HAS_INTERNET` and `WIFI_CONNECTED_HAS_NO_INTERNET` statuses can occur. Otherwise, only `WIFI_CONNECTED` can occur.\n\nv. 0.0.4\n--------\n*02 Sep 2015*\n\n- added `WifiManager.SCAN_RESULTS_AVAILABLE_ACTION` to BroadcastReceiver responsible for receiving WiFi access points scan results\n- fixed bug connected with improper work of `observeWifiAccessPoints()` method reported in issue #8\n- updated sample app\n\nv. 0.0.3\n--------\n*01 Sep 2015*\n\n- removed `WifiManager.WIFI_STATE_CHANGED_ACTION` filter from BroadcastReceiver for observing connectivity (now we're observing only situation when device connects to the network or disconnects from the network - not situation when user turns WiFi on or off)\n- added `UNDEFINED` element for `ConnectivityStatus`\n- fixed bug causing emission of the same `ConnectivityStatus` twice\n\nv. 0.0.2\n--------\n*20 Aug 2015*\n\n- improved WiFi Access Points scanning\n- updated documentation\n\nv. 0.0.1\n--------\n*10 Aug 2015*\n\nFirst release of the library.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at piotr@wittchen.biz.pl. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.75390625,
          "content": "Contributing guidelines\n=======================\n\nLooking for help?\n-----------------\n\nYou have the following options:\n- Check out documentation in `README.md` file and read it carefully. It covers almost everything what is important.\n- Browse JavaDoc at http://pwittchen.github.io/ReactiveNetwork/\n- [Ask the question on StackOverlow](http://stackoverflow.com/questions/ask?tags=reactivenetwork).\n- Provide detailed information about your problem and environment and then ask the question in the new GitHub issue here.\n\nFound a bug?\n------------\n\nProvide detailed steps to reproduce and make sure this bug is not related to your custom project or environment.\nIdeally, create Pull Request with failing unit test (or more tests).\n\nWant a few feature or improvement?\n----------------------------------\n\nThis is tiny library, so I would avoid overcomplicating it, but if you think a new feature\nwould be useful and make this project better, then create a new issue.\nAfter that, we can discuss it and work on a Pull Request.\n\nWant to create a Pull Request?\n------------------------------\n\nBefore creating new Pull Request, please create a new issue and discuss the problem.\nIf we agree that PR will be reasonable solution, then fork repository, create a separate branch\nand work on a feature or bug-fix on this branch. When you're done, make sure that project passes\nstatic code analysis verification with `./gradlew check` command. Moreover, format your code according to\n[SquareAndroid](https://github.com/square/java-code-styles) Java Code Styles.\nWhen you performed more commits than one, squash them into one within a single PR (you can use http://rebaseandsqua.sh/ website).\nMake sure that your commit message is descriptive enough. If not, then use `git commit --amend` command and change it.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.1376953125,
          "content": "This PR introduces the following update:\n\n[briefly describe your update, e.g. closes specified issue, fixes a bug, adds new unit test, etc.]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.25390625,
          "content": "# ReactiveNetwork\n\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-ReactiveNetwork-brightgreen.svg?style=flat-square)](https://android-arsenal.com/details/1/2290)\n\nview website with documentation: [RxJava1.x](http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x/), [**RxJava2.x**](http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x/)\n\nReactiveNetwork is an Android library listening **network connection state** and **Internet connectivity** with RxJava Observables. It's a successor of [Network Events](https://github.com/pwittchen/NetworkEvents) library rewritten with Reactive Programming approach. Library supports both new and legacy network monitoring strategies. Min sdk version = 9.\n\n| Current Branch | Branch  | Artifact Id | Build Status  | Coverage | Maven Central |\n|:--------------:|:-------:|:-----------:|:-------------:|:--------:|:-------------:|\n| | [`RxJava1.x`](https://github.com/pwittchen/ReactiveNetwork/tree/RxJava1.x) | `reactivenetwork` | [![Build Status for RxJava1.x](https://img.shields.io/travis/pwittchen/ReactiveNetwork/RxJava1.x.svg?style=flat-square)](https://travis-ci.org/pwittchen/ReactiveNetwork) | [![codecov](https://img.shields.io/codecov/c/github/pwittchen/ReactiveNetwork/RxJava1.x.svg?style=flat-square&label=coverage)](https://codecov.io/gh/pwittchen/ReactiveNetwork/branch/RxJava1.x) | ![Maven Central](https://img.shields.io/maven-central/v/com.github.pwittchen/reactivenetwork.svg?style=flat-square) |\n| :ballot_box_with_check: | [`RxJava2.x`](https://github.com/pwittchen/ReactiveNetwork/tree/RxJava2.x) | `reactivenetwork-rx2` | [![Build Status for RxJava2.x](https://img.shields.io/travis/pwittchen/ReactiveNetwork/RxJava2.x.svg?style=flat-square)](https://travis-ci.org/pwittchen/ReactiveNetwork) | [![codecov](https://img.shields.io/codecov/c/github/pwittchen/ReactiveNetwork/RxJava2.x.svg?style=flat-square&label=coverage)](https://codecov.io/gh/pwittchen/ReactiveNetwork/branch/RxJava2.x) | ![Maven Central](https://img.shields.io/maven-central/v/com.github.pwittchen/reactivenetwork-rx2.svg?style=flat-square) |\n\nContents\n--------\n\n- [Usage](#usage)\n  - [Observing network connectivity](#observing-network-connectivity)\n    - [Connectivity class](#connectivity-class)\n    - [Network Observing Strategies](#network-observing-strategies)\n  - [Observing Internet connectivity](#observing-internet-connectivity)\n    - [Observing Internet connectivity continuously](#observing-internet-connectivity-continuously)\n    - [Checking Internet connectivity once](#checking-internet-connectivity-once)\n    - [Internet Observing Strategies](#internet-observing-strategies)\n    - [Custom host](#custom-host)\n  - [Chaining network and Internet connectivity streams](#chaining-network-and-internet-connectivity-streams)\n  - [ClearText traffic](#cleartext-traffic)\n- [Integration with other libraries](#integration-with-other-libraries)\n    - [Integration with OkHttp](#integration-with-okhttp)\n    - [Integration with Retrofit](#integration-with-retrofit)\n  - [ProGuard configuration](#proguard-configuration)\n- [Examples](#examples)\n- [Download](#download)\n- [Tests](#tests)\n- [Code style](#code-style)\n- [Static code analysis](#static-code-analysis)\n- [Who is using this library?](#who-is-using-this-library)\n- [Getting help](#getting-help)\n  - [Tutorials](#tutorials)\n- [Caveats](#caveats)\n- [Changelog](#changelog)\n- [JavaDoc](#javadoc)\n- [Documentation](#documentation)\n- [Releasing](#releasing)\n- [Contributors](#contributors)\n- [References](#references)\n  - [Mentions](#mentions)\n- [Supporters](#supporters)\n- [License](#license)\n\nUsage\n-----\n\n**Please note**: Due to memory leak in `WifiManager` reported\nin [issue 43945](https://code.google.com/p/android/issues/detail?id=43945) in Android issue tracker\nit's recommended to use Application Context instead of Activity Context.\n\n### Observing network connectivity\n\nWe can observe `Connectivity` with `observeNetworkConnectivity(context)` method in the following way:\n\n```java\nReactiveNetwork\n  .observeNetworkConnectivity(context)\n  .subscribeOn(Schedulers.io())\n  ... // anything else what you can do with RxJava\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(connectivity -> {\n      // do something with connectivity\n      // you can call connectivity.state();\n      // connectivity.type(); or connectivity.toString();\n  });\n```\n\nWhen `Connectivity` changes, subscriber will be notified. `Connectivity` can change its state or type.\n\n**Errors** can be handled in the same manner as in all RxJava observables. For example:\n\n```java\nReactiveNetwork\n  .observeNetworkConnectivity(context)\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(\n       connectivity -> /* handle connectivity here */,\n       throwable    -> /* handle error here */\n   );\n```\n\nWe can react on a concrete state, states, type or types changes with the `filter(...)` method from RxJava, `hasState(NetworkInfo.State... states)` and `hasType(int... types)` methods located in `ConnectivityPredicate` class.\n\n```java\nReactiveNetwork\n  .observeNetworkConnectivity(context)\n  .subscribeOn(Schedulers.io())\n  .filter(ConnectivityPredicate.hasState(NetworkInfo.State.CONNECTED))\n  .filter(ConnectivityPredicate.hasType(ConnectivityManager.TYPE_WIFI))\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(connectivity -> {\n      // do something\n  });\n```\n\n`observeNetworkConnectivity(context)` checks only connectivity with the network (not Internet) as it's based on `BroadcastReceiver` for API 20 and lower and uses `NetworkCallback` for API 21 and higher.\n Concrete WiFi or mobile network may be connected to the Internet (and usually is), but it doesn't have to.\n\nYou can also use method:\n\n```java\nObservable<Connectivity> observeNetworkConnectivity(Context context, NetworkObservingStrategy strategy)\n```\n\nThis method allows you to apply your own network observing strategy and is used by the library under the hood to determine appropriate strategy depending on the version of Android system.\n\n#### Connectivity class\n\n`Connectivity` class is used by `observeNetworkConnectivity(context)` and `observeNetworkConnectivity(context, networkObservingStrategy)` methods. It has the following API:\n\n```java\nConnectivity create()\nConnectivity create(Context context)\n\nNetworkInfo.State state()\nNetworkInfo.DetailedState detailedState()\nint type()\nint subType()\nboolean available()\nboolean failover()\nboolean roaming()\nString typeName()\nString subTypeName()\nString reason()\nString extraInfo()\n\n// and respective setters\n\nclass Builder\n```\n\n#### Network Observing Strategies\n\nRight now, we have the following strategies for different Android versions:\n- `LollipopNetworkObservingStrategy`\n- `MarshmallowNetworkObservingStrategy`\n- `PreLollipopNetworkObservingStrategy`\n\nAll of them implements `NetworkObservingStrategy` interface.\nConcrete strategy is chosen automatically depending on the Android version installed on the device.\nWith `observeNetworkConnectivity(context, strategy)` method we can use one of these strategies explicitly.\n\n### Observing Internet connectivity\n\n#### Observing Internet connectivity continuously\n\nWe can observe connectivity with the Internet continuously in the following way:\n\n```java\nReactiveNetwork\n  .observeInternetConnectivity()\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnectedToInternet -> {\n      // do something with isConnectedToInternet value\n  });\n```\n\nAn `Observable` will return `true` to the subscription (disposable) if device is connected to the Internet and `false` if not.\n\nInternet connectivity will be checked _as soon as possible_.\n\n**Please note**: This method is less efficient than `observeNetworkConnectivity(context)` method, because in default observing strategy, it opens socket connection with remote host (default is www.google.com) every two seconds with two seconds of timeout and consumes data transfer. Use this method if you really need it. Optionally, you can dispose subscription (disposable) right after you get notification that Internet is available and do the work you want in order to decrease network calls.\n\nMethods in this section should be used if they are really needed due to specific use cases.\n\nIf you want to customize observing of the Internet connectivity, you can use `InternetObservingSettings` class and its builder.\nThey allow to customize monitoring interval in milliseconds, host, port, timeout, initial monitoring interval, timeout, expected HTTP response code, error handler or whole observing strategy.\n\n```java\nInternetObservingSettings settings = InternetObservingSettings.builder()\n  .initialInterval(initialInterval)\n  .interval(interval)\n  .host(host)\n  .port(port)\n  .timeout(timeout)\n  .httpResponse(httpResponse)\n  .errorHandler(testErrorHandler)\n  .strategy(strategy)\n  .build();\n\nReactiveNetwork\n  .observeInternetConnectivity(settings)\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnectedToInternet -> {\n      // do something with isConnectedToInternet value\n  });\n```\n\nThese methods are created to allow the users to fully customize the library and give them more control.\n\nPlease note, not all parameters are relevant for all strategies.\n\nFor more details check JavaDoc at: http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x\n\n#### Checking Internet Connectivity once\n\nIf we don't want to observe Internet connectivity in the interval with `Observable<Boolean> observeInternetConnectivity(...)` method,\nwe can use `Single<Boolean> checkInternetConnectivity()`, which does the same thing, but **only once**.\nIt may be helpful in the specific use cases.\n\n```java\nSingle<Boolean> single = ReactiveNetwork.checkInternetConnectivity();\n\nsingle\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnectedToInternet -> {\n      // do something with isConnectedToTheInternet\n  });\n```\n\nAs in the previous case, you can customize this feature with the `InternetObservingSettings` class and its builder.\n\n```java\nInternetObservingSettings settings = InternetObservingSettings.builder()\n  .initialInterval(initialInterval)\n  .interval(interval)\n  .host(host)\n  .port(port)\n  .timeout(timeout)\n  .httpResponse(httpResponse)\n  .errorHandler(testErrorHandler)\n  .strategy(strategy)\n  .build();\n\nSingle<Boolean> single = ReactiveNetwork.checkInternetConnectivity(settings);\n\nsingle\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnectedToInternet -> {\n      // do something with isConnectedToTheInternet\n  });\n```\n\nBasic idea is the same. With just have `Single<Boolean>` return type instead of `Observable<Boolean>`\nand we don't have `int initialIntervalInMs` and `int intervalInMs` parameters.\n\nAs previously, these methods are created to allow the users to fully customize the library and give them more control.\n\nFor more details check JavaDoc at: http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x\n\n#### Internet Observing Strategies\n\nRight now, we have the following strategies for observing Internet connectivity:\n- `SocketInternetObservingStrategy` -  monitors Internet connectivity via opening socket connection with the remote host\n- `WalledGardenInternetObservingStrategy` - opens connection with a remote host and respects countries in the Walled Garden (e.g. China)\n\nAll of these strategies implements `NetworkObservingStrategy` interface. Default strategy used right now is `WalledGardenInternetObservingStrategy`,\nbut with `checkInternetConnectivity(strategy)` and `observeInternetConnectivity(strategy)` method we can use one of these strategies explicitly.\n\n#### Custom host\n\nIf you want to ping custom host during checking Internet connectivity, it's recommended to use `SocketInternetObservingStrategy`.\nYou can do it as follows:\n\n```java\nInternetObservingSettings settings = InternetObservingSettings.builder()\n  .host(\"www.yourhost.com\")\n  .strategy(new SocketInternetObservingStrategy())\n  .build();\n\nReactiveNetwork\n  .observeInternetConnectivity(settings)\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnectedToHost -> {\n      // do something with isConnectedToHost\n  });\n```\n\nIf you want to use `WalledGardenInternetObservingStrategy`, please update HTTP response code via `InternetObservingSettings`. E.g set it to `200` because default is `204`.\n\nThe same operation can be done with `checkInternetConnectivity(strategy, host)` method, which returns `Single` instead of `Observable`.\n\n### Chaining network and Internet connectivity streams\n\nLet's say we want to react on each network connectivity change and if we get connected to the network, then we want to check if that network is connected to the Internet. We can do it in the following way:\n\n```java\nReactiveNetwork\n  .observeNetworkConnectivity(getApplicationContext())\n  .flatMapSingle(connectivity -> ReactiveNetwork.checkInternetConnectivity())\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(isConnected -> {\n    // isConnected can be true or false\n});\n```\n\nIn case we're getting too many events related to the network changes or we want to discard previous observables (there's only one in the code snippet above) after subscribing them, we can use `switchMapSingle` operator instead of `flatMapSingle` in order to get the updates from the latest observable only. In this case, it will be observable created by `checkInternetConnectivity` method.\n\n### ClearText Traffic\n\nSometies, while trying to connect to the remote server we may encounter the following message:\n\n```\nClearText HTTP traffic not permitted\n```\n\nDue to this fact, observing Internet feature won't work properly.\n\nIt's related to [Network Security Configuration](https://developer.android.com/training/articles/security-config#CleartextTrafficPermitted). Starting with Android 9.0 (API level 28), cleartext support is disabled by default.\n\nYou have a few options to solve this issue.\n\n**Option #1**\n\nCreate `res/xml/network_security_config.xml` file:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <domain-config cleartextTrafficPermitted=\"true\">\n        <domain includeSubdomains=\"true\">Your URL(ex: 127.0.0.1)</domain>\n    </domain-config>\n</network-security-config>\n```\n\nLink it in your `AndroidManifest.xml` file:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest ...>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application\n        ...\n        android:networkSecurityConfig=\"@xml/network_security_config\"\n        ...>\n        ...\n    </application>\n</manifest>\n```\n\n**Option #2**\n\nSet `usesCleartextTraffic` parameter in `<application>` tag in `AndroidManifest.xml` file to `true`.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest ...>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application\n        ...\n        android:usesCleartextTraffic=\"true\"\n        ...>\n        ...\n    </application>\n</manifest>\n```\n\nFor more details, check Android documentation linked above or this StackOverflow thread: https://stackoverflow.com/a/50834600/1150795.\n\n### Integration with other libraries\n\nWe can integrate ReactiveNetwork with other libraries. Especially those, which support RxJava2. In this section, we can find examples showing how to integrate this library with the OkHttp and Retrofit.\n\n#### Integration with OkHttp\n\nIn order to integrate library with OkHttp, we need to wrap HTTP request with reactive type (e.g. `Observable`)\n\n```java\nprivate Observable<Response> getResponse(String url) {\n  OkHttpClient client = new OkHttpClient();\n  Request request = new Request.Builder().url(url).build();\n\n  return Observable.create(emitter -> {\n    try {\n        Response response = client.newCall(request).execute();\n        emitter.onNext(response);\n    } catch (IOException exception) {\n        emitter.onError(exception);\n    } finally {\n        emitter.onComplete();\n    }\n  });\n}\n```\n\nNext, we can chain two streams:\n\n```java\nReactiveNetwork\n   .observeNetworkConnectivity(getApplicationContext())\n   .flatMap(connectivity -> {\n     if (connectivity.state() == NetworkInfo.State.CONNECTED) {\n       return getResponse(\"http://github.com\");\n     }\n     return Observable.error(() -> new RuntimeException(\"not connected\"));\n   })\n   .subscribeOn(Schedulers.io())\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe(\n       response  -> /* handle response here */,\n       throwable -> /* handle error here */)\n   );\n```\n\nIn the example above, whenever we get connected to the network, then request will be performed.\n\nFor more details regarding OkHttp, please visit its official website: http://square.github.io/okhttp/.\n\n#### Integration with Retrofit\n\nWe can integrate ReactiveNetwork with the Retrofit.\n\nFirst, we need to configure Retrofit:\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n   .baseUrl(\"https://api.github.com/\")\n   .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n   .addConverterFactory(GsonConverterFactory.create())\n   .build();\n```\n\nAs you see, we need `RxJava2CallAdapterFactory` here.\n\nNext, we need to define appropriate interface with RxJava `Single` types:\n\n```java\npublic interface GitHubService {\n @GET(\"users/{user}/repos\")\n Single<List<Repo>> listRepos(@Path(\"user\") String user);\n}\n```\n\nand instantiate the service:\n\n```java\nGitHubService service = retrofit.create(GitHubService.class);\n```\n\nNext, we want to call endpoint defined with the Retrofit whenever we get connected to the network. We can do it as follows:\n\n```java\nReactiveNetwork\n   .observeNetworkConnectivity(getApplicationContext())\n   .flatMapSingle(connectivity -> service.listRepos(\"pwittchen\"))\n   .subscribeOn(Schedulers.io())\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe(\n       repos     -> /* handle repos here */,\n       throwable -> /* handle error here */\n   );\n```\n\nFor more details regarding Retrofit, please visit its official website: http://square.github.io/retrofit/\n\n### ProGuard configuration\n\n```\n-dontwarn com.github.pwittchen.reactivenetwork.library.rx2.ReactiveNetwork\n-dontwarn io.reactivex.functions.Function\n-dontwarn rx.internal.util.**\n-dontwarn sun.misc.Unsafe\n```\n\nExamples\n--------\n\nExemplary application is located in `app` directory of this repository.\n\nIf you want to know, how to use this library with Kotlin, check `app-kotlin` directory.\n\nDownload\n--------\n\nYou can depend on the library through Maven:\n\n```xml\n<dependency>\n    <groupId>com.github.pwittchen</groupId>\n    <artifactId>reactivenetwork-rx2</artifactId>\n    <version>x.y.z</version>\n</dependency>\n```\n\nor through Gradle:\n\n```groovy\ndependencies {\n  implementation 'com.github.pwittchen:reactivenetwork-rx2:x.y.z'\n}\n```\n\n**Note #1**: Please, replace `x.y.z` with the **latest version number**, which is ![Maven Central](https://img.shields.io/maven-central/v/com.github.pwittchen/reactivenetwork-rx2.svg?style=flat-square)\n\n**Note #2**: If you are using Gradle version lower than 3.0, replace `implementation` with `compile`\n\nTests\n-----\n\nTests are available in `library/src/test/java/` directory and can be executed on JVM without any emulator or Android device from Android Studio or CLI with the following command:\n\n```\n./gradlew test\n```\n\nTo generate test coverage report, run the following command:\n\n```\n./gradlew test jacocoTestReport\n```\n\nCode style\n----------\n\nCode style used in the project is called `SquareAndroid` from Java Code Styles repository by Square available at: https://github.com/square/java-code-styles.\n\nStatic code analysis\n--------------------\n\nStatic code analysis runs Checkstyle, PMD, Lint, ErrorProne and NullAway. It can be executed with command:\n\n ```\n ./gradlew check\n ```\n\nReports from analysis are generated in `library/build/reports/` directory.\n\nWho is using this library?\n--------------------------\n\nThese apps are using (or used) ReactiveNetwork library:\n- [SkyScanner Android app](https://play.google.com/store/apps/details?id=net.skyscanner.android.main)\n- [Slack Android app](https://play.google.com/store/apps/details?id=com.Slack)\n- [NextBike](https://play.google.com/store/apps/details?id=de.nextbike)\n- [PAT Track - realtime Tracker for the public transit in Pittsburgh, PA](https://play.google.com/store/apps/details?id=rectangledbmi.com.pittsburghrealtimetracker)\n- [Eero - Home WiFi System (acquired by Amazon)](https://play.google.com/store/apps/details?id=com.eero.android)\n- [ACN Android Framework](https://github.com/ugurcany/ACN-Android-Framework)\n- [Spatial Connect Android SDK](https://github.com/boundlessgeo/spatialconnect-android-sdk)\n- [Qiscus SDK for Android](https://github.com/qiscus/qiscus-sdk-android)\n- [Internet Radio](https://play.google.com/store/apps/details?id=com.stc.radio.player)\n- [Tachiyomi](https://github.com/inorichi/tachiyomi)\n- [Actinium - V2Ray client for Android](https://github.com/V2Ray-Android/Actinium)\n- [Project Bass - Android app](http://projectbass.org/)\n- [Movie Lovers](https://play.google.com/store/apps/details?id=com.mediaclient.movielovers.mobile)\n- [Waves Wallet](https://play.google.com/store/apps/details?id=com.wavesplatform.wallet)\n- [Fieldsight](https://github.com/fieldsight/fieldsight-mobile)\n- and more...\n\nAre you using this library in your app and want to be listed here? Send me a Pull Request or an e-mail to piotr@wittchen.io\n\nGetting help\n------------\n\nDo you need help related to using or configuring this library?\n\nYou can do the following things:\n- [Ask the question on StackOverflow](http://stackoverflow.com/questions/ask?tags=reactivenetwork)\n- [Create new GitHub issue](https://github.com/pwittchen/ReactiveNetwork/issues/new)\n\nDon't worry. Someone should help you with solving your problems.\n\n### Tutorials\n\nIf you speak Spanish (Español), check out this tutorial: [ReactiveNetwork - Como funciona y como se integra en una app](https://www.youtube.com/watch?v=H7xGmQaKPsI) made by [Video Tutorials Android](https://www.youtube.com/channel/UC2q5P9JVoA6N8mE622gRP7w).\n\nCaveats\n-------\n\nSince version **0.4.0**, functionality releated to **observing WiFi Access Points** and **WiFi signal strength (level)** is removed in favor of [ReactiveWiFi](https://github.com/pwittchen/ReactiveWiFi) library.\nIf you want to use this functionality, check [**ReactiveWiFi**](https://github.com/pwittchen/ReactiveWiFi) project.\n\nChangelog\n---------\n\nSee [CHANGELOG.md](https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/CHANGELOG.md) file.\n\nJavaDoc\n-------\n\nJavaDoc is available at: http://pwittchen.github.io/ReactiveNetwork/javadoc/RxJava2.x\n\nIt can be generated as follows:\n\n```\n./gradlew androidJavadocs\n```\n\nIn order to update JavaDoc on GitHub pages, use the following bash script:\n\n```\n./update_javadocs.sh\n```\n\nThen commit and push your changes to `gh-pages` branch.\n\nDocumentation\n--------------------------\n\nview website with documentation: [RxJava1.x](http://pwittchen.github.io/ReactiveNetwork/docs/RxJava1.x/), [**RxJava2.x**](http://pwittchen.github.io/ReactiveNetwork/docs/RxJava2.x/)\n\nIt can be generated as follows:\n\nCopy the latest `README.md` file from `RxJava1.x` or `RxJava2.x` branch. Then checkout to `gh-pages` branch and put it into appropriate directory inside `docs/` directory.\n\nYou can do it as follows via bash script:\n\n```\n./update_docs.sh\ngit push\n```\n\nInstall docsify with the following command:\n\n```\nnpm i docsify-cli -g\n```\n\nGo into appropriate directory and type:\n\n```\ndocsify init .\n```\n\nRight now it's already generated, so we can just update the `README.md` file and adjust generated files manually.\n\nNext, we can just save changes, commit and push them to remote repository.\n\n\nReleasing\n---------\n\nSee [RELEASING.md](https://github.com/pwittchen/ReactiveNetwork/blob/RxJava2.x/RELEASING.md) file.\n\nContributors\n------------\n\n- [Piotr Wittchen](https://github.com/pwittchen) - project lead\n- [Tushar Acharya](https://github.com/tushar-acharya)\n- [Timothy Kist](https://github.com/Kisty)\n- [@dilongl](https://github.com/dilongl)\n- [@llp](https://github.com/llp)\n- [Adam Gabryś](https://github.com/agabrys)\n- [@lion4ik](https://github.com/lion4ik)\n- [@futtetennista](https://github.com/futtetennista)\n- [Manu Sridharan](https://github.com/msridhar)\n- [Alexander Perfilyev](https://github.com/aperfilyev)\n- [Vishesh Vadhera](https://github.com/VisheshVadhera)\n- [@ychescale9](https://github.com/ychescale9)\n\nReferences\n----------\n- [Android Documentation - Detect network changes, then change app behavior](https://developer.android.com/develop/quality-guidelines/building-for-billions-connectivity.html#network-behavior)\n- [Android Documentation - Provide onboarding experiences for users' network choices](https://developer.android.com/develop/quality-guidelines/building-for-billions-data-cost.html#configurablenetwork-onboarding)\n- [Android Documentation - Managing Network Usage](https://developer.android.com/training/basics/network-ops/managing.html)\n- [DroidCon Poland 2017 presentation slides - Is your app really connected?](https://speakerdeck.com/pwittchen/is-your-app-really-connected-1)\n- [Mobilization 2018 video recording - Is your app really connected?](https://www.youtube.com/watch?v=LDZjQ1dXgU4)\n- [RxJava](https://github.com/ReactiveX/RxJava)\n\n### Mentions\n- [Android Weekly #166](http://androidweekly.net/issues/issue-166)\n- [Android Weekly #289](http://androidweekly.net/issues/issue-289)\n- [Android Weekly China #44](http://www.androidweekly.cn/android-dev-weekly-issue44/)\n- [Android Arsenal #2290](https://android-arsenal.com/details/1/2290)\n- [GitHub Trending, 14th of Aug 2015](https://twitter.com/TrendingGithub/status/632117206801891328)\n- [TL DEV TECH - Best Android Libraries in 2017](http://www.tldevtech.com/best-android-libraries-2017/)\n- [TL DEV TECH - 30+ Best Android Libraries (2018)](https://www.tldevtech.com/best-android-libraries/)\n\nSupporters\n----------\n\nThanks for [JetBrains](https://www.jetbrains.com/?from=ReactiveNetwork) for sponsoring IntelliJ IDEA license for open-source development\n\n[![jetbrains logos](https://raw.githubusercontent.com/pwittchen/ReactiveNetwork/RxJava2.x/jetbrains_logo.png)](https://www.jetbrains.com/?from=ReactiveNetwork)\n\nLicense\n-------\n\n    Copyright 2016 Piotr Wittchen\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.9130859375,
          "content": "Releasing Guidelines\n====================\n\nIn order to release new version of the library, we need to perform the following operations:\n- create new release issue on GitHub\n- prepare release notes and put them to the issue\n- update javaDocs by running `./update_javadocs.sh` script\n- verify, commit and push changes to `gh-pages` branch\n- checkout to the appropriate branch (`RxJava1.x` or `RxJava2.x`)\n- bump library version (`VERSION_NAME` and `VERSION_CODE`) in `gradle.properties` file\n- commit and push the changes\n- run command: `./release.sh`\n- wait for the Maven Sync (up to 48 hours)\n- when sync is done, checkout to the `RxJava2.x` branch\n- update `CHANGELOG.md` file with new release version, current date and release notes\n- update website with docs by running `./update_docs.sh` script and push the changes\n- create new tagged GitHub release with name the same as `VERSION_NAME` from `gradle.properties` and release notes\n"
        },
        {
          "name": "app-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 2.630859375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\napply plugin: 'io.codearte.nexus-staging'\n\next {\n  minSdkVersion = 14\n  minSdkVersionApps = 23\n  compileSdkVersion = 29\n  buildToolsVersion = '28.0.3'\n  gradleVersion = '4.6'\n  kotlinVersion = '1.4.0'\n  detektVersion = '1.0.0.RC6-1'\n}\n\next.deps = [rxjava2           : 'io.reactivex.rxjava2:rxjava:2.2.21',\n            rxandroid2        : 'io.reactivex.rxjava2:rxandroid:2.1.1',\n            annotation        : 'androidx.annotation:annotation:1.1.0',\n            appcompat         : 'androidx.appcompat:appcompat:1.2.0',\n            junit             : 'junit:junit:4.13',\n            truth             : 'com.google.truth:truth:1.0.1',\n            robolectric       : 'org.robolectric:robolectric:4.9',\n            mockitocore       : 'org.mockito:mockito-core:3.5.2',\n            nullaway          : 'com.uber.nullaway:nullaway:0.8.0',\n            errorprone        : 'com.google.errorprone:error_prone_core:2.3.4',\n            nopen             : 'com.jakewharton.nopen:nopen-annotations:1.0.1',\n            nopenchecker      : 'com.jakewharton.nopen:nopen-checker:1.0.1',\n            kotlinstdlib      : \"org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion\",\n            kotlingradleplugin: \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\",\n            detekt            : \"gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion\"]\n\nbuildscript {\n  repositories {\n    google()\n    mavenCentral()\n    maven {\n      url 'https://plugins.gradle.org/m2/'\n    }\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.6.4'\n    classpath('com.hiya:jacoco-android:0.2') {\n      exclude group: 'org.codehaus.groovy', module: 'groovy-all'\n    }\n\n    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'\n    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'\n    classpath \"io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0\"\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n  }\n}\n\nallprojects {\n  repositories {\n    google()\n    mavenCentral()\n    maven {\n      url 'https://plugins.gradle.org/m2/'\n    }\n  }\n}\n\ndef getRepositoryUsername() {\n  return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : \"\"\n}\n\ndef getRepositoryPassword() {\n  return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : \"\"\n}\n\nnexusStaging {\n  packageGroup = GROUP //optional if packageGroup == project.getGroup()\n  stagingProfileId = \"9add401d06ecc9\" //when not defined will be got from server using \"packageGroup\"\n  username = getRepositoryUsername()\n  password = getRepositoryPassword()\n}"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.173828125,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 80%\n        threshold: 10%\n\n    patch:\n      default:\n        target: 80%\n        threshold: 10%\n\n    changes: no\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.94921875,
          "content": "VERSION_NAME=3.0.8\nVERSION_CODE=39\nGROUP=com.github.pwittchen\n\nPOM_DESCRIPTION=Android library listening network connection state and Internet connectivity with RxJava Observables\nPOM_URL=https://github.com/pwittchen/ReactiveNetwork\nPOM_SCM_URL=https://github.com/pwittchen/ReactiveNetwork\nPOM_SCM_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:pwittchen/ReactiveNetwork.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=pwittchen\nPOM_DEVELOPER_NAME=Piotr Wittchen\n\norg.gradle.daemon=true\norg.gradle.jvmargs=-XX:MaxPermSize=1024m -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError -Xmx4096m -XX:MaxHeapSize=4048 -Xms1024m\n\nandroid.useAndroidX=true\nandroid.enableJetifier=true\nandroid.jetifier.blacklist=bcprov-jdk15on\nandroid.enableR8.fullMode=false\nandroid.enableUnitTestBinaryResources=true"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.984375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "jetbrains_logo.png",
          "type": "blob",
          "size": 23.2529296875,
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven_push.gradle",
          "type": "blob",
          "size": 3.576171875,
          "content": "/*\n * Copyright 2013 Chris Banes\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\napply plugin: 'maven'\napply plugin: 'signing'\n\ndef isReleaseBuild() {\n    return VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : \"\"\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : \"\"\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                repository(url: getReleaseRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n                snapshotRepository(url: getSnapshotRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    task androidJavadocs(type: Javadoc) {\n        source = android.sourceSets.main.java.srcDirs\n        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n        failOnError = false\n    }\n\n    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {\n        classifier = 'javadoc'\n        from androidJavadocs.destinationDir\n    }\n\n    task androidSourcesJar(type: Jar) {\n        classifier = 'sources'\n        from android.sourceSets.main.java.sourceFiles\n    }\n\n    artifacts {\n        archives androidSourcesJar\n        archives androidJavadocsJar\n    }\n}"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.091796875,
          "content": "#!/usr/bin/env bash\n./gradlew clean build test check uploadArchives closeAndReleaseRepository\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.041015625,
          "content": "include ':app', ':library', ':app-kotlin'\n"
        },
        {
          "name": "update_docs.sh",
          "type": "blob",
          "size": 0.1845703125,
          "content": "#!/usr/bin/env bash\ngit checkout gh-pages\ngit show RxJava2.x:README.md >docs/RxJava2.x/README.md\ngit add -A\ngit commit -m \"updating docs\"\necho \"docs updated, now you can push your changes\"\n"
        },
        {
          "name": "update_javadocs.sh",
          "type": "blob",
          "size": 0.416015625,
          "content": "#!/usr/bin/env bash\n\n# update javadocs for RxJava2.x\ngit checkout RxJava2.x\n./gradlew clean androidJavadocs\ngit checkout gh-pages\nrm -rf javadoc/RxJava2.x/*\ncp -avr library/build/docs/javadoc/* ./javadoc/RxJava2.x\ngit add -A\ngit commit -m \"updating JavaDoc for RxJava2.x\"\nrm -rf library/build/docs\necho \"javadocs for RxJava2.x updated\"\n\necho \"javadocs for both RxJava1.x and RxJava2.x updated - now you can push your changes\"\n"
        }
      ]
    }
  ]
}