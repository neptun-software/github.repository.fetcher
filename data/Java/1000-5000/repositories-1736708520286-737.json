{
  "metadata": {
    "timestamp": 1736708520286,
    "page": 737,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Catfriend1/syncthing-android",
      "stars": 2592,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.cmd text eol=crlf\n*.bat text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.560546875,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbuild/\n.gradle/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\nproject.properties\n\n# Intellij project files\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Gradle wrapper\ngradle/wrapper/gradle/\ngradle/wrapper/gradlew*\n\n# Go modules\nsyncthing/pkg/mod/\n\n# External build artifacts\next/\n\n# files generated by the debug scripts\ndebug_scripts/*.xml\n\n# Unsupported translations\napp/src/main/play/listings/nb\napp/src/main/play/listings/nl-BE\napp/src/main/play/listings/nn\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1240234375,
          "content": "[submodule \"syncthing\"]\n\tpath = syncthing/src/github.com/syncthing/syncthing\n\turl = https://github.com/syncthing/syncthing.git\n"
        },
        {
          "name": "App_build_and_release.cmd",
          "type": "blob",
          "size": 6.234375,
          "content": "@echo off\nsetlocal enabledelayedexpansion\nSET SCRIPT_PATH=%~dps0\ncd /d \"%SCRIPT_PATH%\"\ncls\nREM\nREM Script Consts.\nSET CLEANUP_BEFORE_BUILD=1\nREM\nREM Runtime Variables.\nIF EXIST \"%LocalAppData%\\Android\\Sdk\" SET \"ANDROID_SDK_ROOT=%LocalAppData%\\Android\\Sdk\"\nIF NOT DEFINED ANDROID_SDK_ROOT SET \"ANDROID_SDK_ROOT=%SCRIPT_PATH%..\\syncthing-android-prereq\"\nREM\nREM SET ANDROID_PUBLISHER_CREDENTIALS=%userprofile%\\.android\\play_key.json\"\nREM SET SYNCTHING_RELEASE_STORE_FILE=\"%userprofile%\\.android\\signing_key.jks\"\nSET SYNCTHING_RELEASE_KEY_ALIAS=Syncthing-Fork\nSET BUILD_FLAVOUR_RELEASE=release\nSET BUILD_FLAVOUR_GPLAY=gplay\ntitle %SYNCTHING_RELEASE_KEY_ALIAS% - Build APK\nREM\nSET GIT_INSTALL_DIR=%ProgramFiles%\\Git\nSET GIT_BIN=\"%GIT_INSTALL_DIR%\\bin\\git.exe\"\nREM\nSET JAVA_HOME=%ProgramFiles%\\Android\\Android Studio\\jbr\nSET PATH=%JAVA_HOME%\\bin;\"%GIT_INSTALL_DIR%\\bin\";%PATH%\nREM\n:checkPrerequisites\necho [INFO] Checking prerequisites ...\nREM\nwhere java 2>&1 >NUL: || (echo [ERROR] Java is missing. Check env. & goto :eof)\nREM\nIF NOT EXIST \"%ANDROID_SDK_ROOT%\\.knownPackages\" (echo [WARN] Android SDK missing. Trying to run 'python install_minimum_android_sdk_prerequisites.py' ... & call python install_minimum_android_sdk_prerequisites.py)\nREM\necho [INFO] Checking if SyncthingNative was built before starting this script ...\nSET LIBCOUNT=\nfor /f \"tokens=*\" %%A IN ('dir /s /a \"%SCRIPT_PATH%app\\src\\main\\jniLibs\\*\" 2^>NUL: ^| find /C \"libsyncthingnative.so\"') DO SET LIBCOUNT=%%A\nIF NOT \"%LIBCOUNT%\" == \"4\" echo [ERROR] SyncthingNative[s] \"libsyncthingnative.so\" are missing. Please run \"gradlew buildNative\" first. & goto :eos\nREM\necho [INFO] Let's prepare a new \"%SYNCTHING_RELEASE_KEY_ALIAS%\" release.\nREM\necho [INFO] Checking release prerequisites ...\nIF NOT EXIST \"%ANDROID_PUBLISHER_CREDENTIALS%\" echo [ERROR] ANDROID_PUBLISHER_CREDENTIALS file not found. Please retry. & pause & goto :checkPrerequisites\nFOR /F \"tokens=*\" %%i in ('type \"%ANDROID_PUBLISHER_CREDENTIALS%\" 2^>NUL:') DO SET ANDROID_PUBLISHER_CREDENTIALS=%%i\nREM\nREM User has to enter the signing password if it is not filled in here.\nREM SET SIGNING_PASSWORD=\nIF DEFINED SIGNING_PASSWORD goto :absLint\n:enterSigningPassword\nsetlocal DisableDelayedExpansion\nset \"psCommand=powershell -Command \"$pword = read-host 'Enter signing password' -AsSecureString ; ^\n\t$BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pword); ^\n\t\t[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\"\"\nfor /f \"usebackq delims=\" %%p in (`%psCommand%`) do SET SIGNING_PASSWORD=%%p\nsetlocal EnableDelayedExpansion\nIF NOT DEFINED SIGNING_PASSWORD echo [ERROR] Signing password is required. Please retry. & goto :enterSigningPassword\nREM\n:absLint\nREM\ncopy /y \"%SCRIPT_PATH%app\\src\\main\\play\\release-notes\\en-GB\\beta.txt\" \"%SCRIPT_PATH%app\\src\\main\\play\\release-notes\\en-GB\\default.txt\" \nREM\necho [INFO] Running lint before building ...\nREM\ncall gradlew lint%BUILD_FLAVOUR_RELEASE% & SET RESULT=%ERRORLEVEL%\nREM IF NOT \"!RESULT!\" == \"0\" echo [ERROR] \"gradlew lint%BUILD_FLAVOUR_RELEASE%\" exited with code #%RESULT%. & goto :eos\nREM\ncall gradlew lint%BUILD_FLAVOUR_GPLAY% & SET RESULT=%ERRORLEVEL%\nIF NOT \"!RESULT!\" == \"0\" echo [ERROR] \"gradlew lint%BUILD_FLAVOUR_GPLAY%\" exited with code #%RESULT%. & goto :eos\nREM\nREM Building APK\nREM\ncall :buildApk %BUILD_FLAVOUR_RELEASE%\ncall :buildApk %BUILD_FLAVOUR_GPLAY%\nREM\nIF \"%CLEANUP_BEFORE_BUILD%\" == \"1\" del /f \"%SCRIPT_PATH%app\\build\\outputs\\bundle\\%BUILD_FLAVOUR_GPLAY%\\app-%BUILD_FLAVOUR_GPLAY%.aab\" 2> NUL:\necho [INFO] Building Android BUNDLE variant \"%BUILD_FLAVOUR_GPLAY%\" ...\ncall gradlew --quiet bundle%BUILD_FLAVOUR_GPLAY%\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew bundle%BUILD_FLAVOUR_GPLAY%\" exited with code #%RESULT%. & goto :eos\nREM\n:absPostBuildScript\nREM\necho [INFO] Running OPTIONAL post build script ...\ncall gradlew --quiet postBuildScript\nREM\necho [INFO] Deleting unsupported play translations ...\ncall gradlew --quiet deleteUnsupportedPlayTranslations\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew deleteUnsupportedPlayTranslations\" exited with code #%RESULT%. & goto :eos\nREM\nREM Copy build artifacts with correct file name to upload folder.\ncall \"%SCRIPT_PATH%postbuild_copy_apk.cmd\"\nREM\n:askUserReadyToPublish\nSET UI_ANSWER=\nSET /p UI_ANSWER=Are you ready to publish this release to GPlay? [y/n]\nIF NOT \"%UI_ANSWER%\" == \"y\" goto :askUserReadyToPublish\nREM\nREM Workaround for play-publisher issue, see https://github.com/Triple-T/gradle-play-publisher/issues/597\n:clearPlayPublisherCache\nIF EXIST \"app\\build\\generated\\gpp\" rd /s /q \"app\\build\\generated\\gpp\"\nIF EXIST \"app\\build\\generated\\gpp\" TASKKILL /F /IM java.exe & sleep 1 & goto :clearPlayPublisherCache\nREM\nREM Publish text and image resources to GPlay\necho [INFO] Publishing descriptive resources to GPlay ...\ncall gradlew --quiet publish%BUILD_FLAVOUR_GPLAY%Listing\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew publish%BUILD_FLAVOUR_GPLAY%Listing\" exited with code #%RESULT%. & pause & goto :clearPlayPublisherCache\nREM\nREM Publish APK to GPlay\necho [INFO] Publishing APK to GPlay ...\nREM call gradlew --quiet publish%BUILD_FLAVOUR_GPLAY%\nREM SET RESULT=%ERRORLEVEL%\nREM IF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew publish%BUILD_FLAVOUR_GPLAY%\" exited with code #%RESULT%. & goto :eos\ncall gradlew --quiet publish%BUILD_FLAVOUR_GPLAY%Bundle\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew publishBundle\" exited with code #%RESULT%. & pause & goto :clearPlayPublisherCache\nREM\ngoto :eos\n:eos\nREM\necho [INFO] End of Script.\nREM\npause\ngoto :eof\n\n\n:buildApk\nREM\nREM Syntax:\nREM \tcall :buildApk [BUILD_TYPE]\nREM\nREM Variables.\nSET \"BA_BUILD_TYPE=%1\"\nIF NOT DEFINED BA_BUILD_TYPE echo [ERROR] buildApk: Parameter 1 BUILD_TYPE missing. & pause & goto :eof\nREM\nIF \"%CLEANUP_BEFORE_BUILD%\" == \"1\" del /f \"%SCRIPT_PATH%app\\build\\outputs\\apk\\%BA_BUILD_TYPE%\\app-%BA_BUILD_TYPE%.apk\" 2> NUL:\necho [INFO] Building Android APK variant \"%BA_BUILD_TYPE%\" ...\ncall gradlew --quiet assemble%BA_BUILD_TYPE%\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] \"gradlew assemble%BA_BUILD_TYPE%\" exited with code #%RESULT%. & goto :eos\ntype \"app\\build\\intermediates\\merged_manifests\\%BA_BUILD_TYPE%\\process%BA_BUILD_TYPE%Manifest\\AndroidManifest.xml\" | findstr /i \"android:version\"\nREM\ngoto :eof\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4140625,
          "content": "## Reporting Bugs\n\nPlease file bugs in the [GitHub Issue\nTracker](https://github.com/Catfriend1/syncthing-android/issues). Bugs that\nare not specific to the Syncthing-Fork wrapper should be reported to the\n[upstream project](https://github.com/syncthing/syncthing/issues) instead.\nInclude at least the following in your issue report:\n\n - What happened\n\n - What did you expect to happen instead of what *did* happen, if it's\n   not crazy obvious\n\n - What version of Android, Syncthing and Syncthing-Android you are\n   running\n\n - Screenshot if the issue concerns something visible in the GUI\n\n - Console log entries, where possible and relevant\n\nYou can get logs in various ways:\n\n - Log window in the app: Settings -> Open Log -> Android Log\n\n - Install [adb](http://www.howtogeek.com/125769/how-to-install-and-use-abd-the-android-debug-bridge-utility/), \n   and run `adb logcat`. To see only info about crashes, run `adb logcat -s *:E`.\n\n - Using one of the various \"logcat apps\" on Google Play and F-Droid\n\n## Contributing Code\n\nEvery contribution is welcome. If you want to contribute but are unsure\nwhere to start, any open issues are fair game!\n\nCode should follow the\n[Android Code Style Guidelines](https://source.android.com/source/code-style.html#java-language-rules),\nwhich are used by default in Android Studio.\n\nUnit tests are available, and can be executed from Android Studio, or from\nthe terminal with `gradle connectedAndroidTest`.\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.6396484375,
          "content": "<!-- If you have issues with this fork, feel free to post them. I'll look into them if a good reproducer or log is provided. -->\n\n### Description of the issue\n\n### Reproduction Steps\n\n### Version Information\n- App Version: 1.x.y.z\n- App installed from: GitHub (signed apk), F-Droid, G-Play\n- Android Version: Android x.y <!-- / LineAgeOS x.y / ... -->\n- Device manufacturer: <!--  Huawei / LG / Samsung / Xiaomi / ... -->\n- Device model: <!-- I9100 / H815 / MI8 / ... -->\n\n### Device platform info\n<!-- adb shell \"getprop | grep ro.product\" -->\n```sh\n\n```\n\n\n### Android Log\n<!-- output of \n    adb logcat v\n    or MatLog (search on GitHub) -->\n```sh\n\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.48828125,
          "content": "# Syncthing-Fork - A Syncthing Wrapper for Android\n\n[![License: MPLv2](https://img.shields.io/badge/License-MPLv2-blue.svg)](https://opensource.org/licenses/MPL-2.0)\n<a href=\"https://github.com/Catfriend1/syncthing-android/releases\" alt=\"GitHub release\"><img src=\"https://img.shields.io/github/release/Catfriend1/syncthing-android/all.svg\" /></a>\n<a href=\"https://f-droid.org/packages/com.github.catfriend1.syncthingandroid\" alt=\"F-Droid release\"><img src=\"https://img.shields.io/f-droid/v/com.github.catfriend1.syncthingandroid.svg\" /></a>\n<a href=\"https://tooomm.github.io/github-release-stats/?username=Catfriend1&repository=syncthing-android\" alt=\"GitHub Stats\"><img src=\"https://img.shields.io/github/downloads/Catfriend1/syncthing-android/total.svg\" /></a>\n<a href=\"https://hosted.weblate.org/projects/syncthing/android/catfriend1/\"><img src=\"https://hosted.weblate.org/widget/syncthing/android/catfriend1/svg-badge.svg\" alt=\"Translation status\" /></a>\n\nA wrapper of [Syncthing](https://github.com/syncthing/syncthing) for Android. Head to the \"releases\" section or F-Droid for builds. Please open an issue under this fork if you need help. Important: Please don't file bugs at the upstream repository \"syncthing-android\" if you are using this fork.\n\n<img src=\"app/src/main/play/listings/en-US/graphics/phone-screenshots/1.png\" alt=\"screenshot 1\" width=\"200\" />\n\n<img src=\"app/src/main/play/listings/en-US/graphics/phone-screenshots/2.png\" alt=\"screenshot 2\" width=\"200\" />\n\n<img src=\"app/src/main/play/listings/en-US/graphics/phone-screenshots/4.png\" alt=\"screenshot 3\" width=\"200\" />\n\n## Major enhancements in this fork are\n\n- Folder, device and overall sync progress can easily be read off the UI.\n- \"Syncthing Camera\" - an optional feature (with optional permission to use the camera) where you can take pictures with your friend, partner, ... on two phones into one shared and private Syncthing folder. No cloud involved. (deprecated)\n- \"Sync every hour\" to save even more battery\n- Individual sync conditions can be applied per device and per folder (for expert users).\n- Recent changes UI, click to open files.\n- Changes to folder and device config can be made regardless if syncthing is running or not.\n- UI explains why syncthing is running or not.\n- \"Battery eater\" problem is fixed.\n- Discover other Syncthing devices on the same network and easily add them.\n- Supports two-way synchronization on external sd cards since Android 11.\n- Supports encrypted folders on untrusted devices.\n- Partial Android 15+ support regarding the run condition monitor due to Android restrictions. Feel free to PR and help here :-).\n\n## Switching from the (now deprecated) official version\n\nSwitching is easier than you may think!\n\n- On Syncthing on the official app, go into the settings and create a backup.\n- Confirm you can see that backup in your files.\n- Now stop the official app entirely using the system app settings for Syncthing (force stop the app basically - we need to ensure it's not running).\n- Now start Syncthing-Fork.\n- In the Syncthing-Fork settings, restore the backup you created earlier.\n- Like magic, everything should be as it was in Syncthing official.\n- Confirm everything looks good.\n- Uninstall the official Syncthing app.\n- Delete the syncthing configuration backup from `backups/syncthing`.\n\n## About Play Store releases\n\n- Planning to close my Google Play Developer Account. Please say hi if you are interested in obtaining the latest gplay release files from me to help in publishing this app.\n\n## Privacy Policy\n\nSee our document on privacy: [privacy-policy.md](https://github.com/Catfriend1/syncthing-android/blob/main/privacy-policy.md).\n\n## Goal of the forked version\n\n- Develop and try out enhancements together\n- Release the wrapper more frequently to identify and fix bugs together caused by changes in the syncthing submodule\n- Make enhancements configurable in the settings UI, e.g. users should be able to turn them on and off\n- Let's get ready for newer Android versions that put limits on background syncing tools. We need your bug reports as detailed as possible\n\n## Building\n\n### Prerequisites\n\nIf you miss any prerequisite, the shell scripts will abort with an error and tell you what you need to do. In case you like to dive into building directly, you can skip this section and jump directly to \"Build instructions\".\n\n- Android SDK\n\n```bash\n# This command will help you install the minimum Android SDK components to build this project in case you don't use Android Studio.\npython install_minimum_android_sdk_prerequisites.py\n```\n\n- Android NDK r26b\n\n```log\n$ANDROID_NDK_HOME environment variable should point at the root directory of your NDK. If the variable is not set, build-syncthing.py will automatically try to download and setup the NDK.\n```\n\n- Go 1.21.4\n\n```log\nMake sure, Go is installed and available on the PATH environment variable. If Go is not found on the PATH environment variable, build-syncthing.py will automatically try to download and setup GO on the PATH.\n```\n\n- Python 3.9.6 64-Bit\n\n```log\nMake sure, Python is installed and available on the PATH environment variable. Download 'https://www.python.org/ftp/python/3.9.6/python-3.9.6-amd64.exe' and run 'python-3.9.6-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0'\n```\n\n- Git (for Linux) or Git for Windows\n\n```log\nMake sure, git (or git.exe) is installed and available on the PATH environment variable. If Git is not found on the PATH environment variable, build-syncthing.py will automatically try to download and setup MinGit 2.19.0-x64 on the PATH.\n```\n\n- Java Development Version 17\n\n```log\n\"java\" should be on the PATH environment variable. Download from Oracle and run the installer. Log off and back on to let the new PATH variable take effect.\n```\n\n### Build instructions\n\nEdit \"App_build_and_release.cmd\" and set \"SKIP_RELEASE_BUILD=1\" if you don't need to upload signed releases to Google Play. This will simplify things for you.\n\n#### Build on Linux\n\nA Linux VM, for example running Debian, is recommended to build this.\n\nBuild SyncthingNative and the Syncthing-Android wrapper using the following commands:\n\n```bash\napt-get -y install git openjdk-17-jdk python\nmkdir -p /root/work\ncd /root/work\ngit clone https://github.com/Catfriend1/syncthing-android.git --recursive\ncd /root/work/syncthing-android\n./gradlew buildNative\n./gradlew lint assembleDebug\n```\n\nYou can also use Android Studio to build the apk after you manually ran the `./gradlew buildNative` command in the repository root.\n\nTo clean up all files generated during build, use the following commands:\n\n```bash\n./gradlew cleanNative\n./gradlew clean\n```\n\n#### Build on Windows\n\n```bash\ngit clone https://github.com/Catfriend1/syncthing-android.git --recursive\ncd /d \"YOUR_CLONED_GIT_ROOT\"\nSyncthingNative_update_and_build\nApp_build_and_release\n```\n\n## Development Notes\n\nIt is recommended to change the GUI and Listen Address ports for the debug app, e.g. to `8385` and `22001` respectively.\n\nThe Syncthing native used for this android application provides a web interface by default. It can be accessed via the Settings menu -> 'Web GUI'. It is quite helpful to access this web interface from your development machine. Read android documentation on how to access the network of your emulator. Or use the following command to connect to the single currently running emulator/AVD.\n\n```bash\nadb forward tcp:18384 tcp:8384\n```\n\nStart Syncthing app on your emulator and access the web interface from you favorite browser of your development machine via [`127.0.0.1:18384`](https://127.0.0.1:18384)\n\n## License\n\nThe project is licensed under [MPLv2](LICENSE).\n"
        },
        {
          "name": "SyncthingNative_update_and_build.cmd",
          "type": "blob",
          "size": 5.22265625,
          "content": "@echo off\nsetlocal enabledelayedexpansion\nSET SCRIPT_PATH=%~dps0\ncd /d \"%SCRIPT_PATH%\"\ntitle Update and Build SyncthingNative \"libsyncthingnative.so\"\ncls\nREM\nREM Script Consts.\nSET CLEAN_BEFORE_BUILD=1\nSET SKIP_CHECKOUT_SRC=0\nSET SYNCTHING_NATIVE_REQUIRED_VERSION=\nSET GRADLEW_PARAMS=-q\nREM\nREM Runtime Variables.\nIF EXIST \"%LocalAppData%\\Android\\Sdk\" SET \"ANDROID_SDK_ROOT=%LocalAppData%\\Android\\Sdk\"\nIF NOT DEFINED ANDROID_SDK_ROOT SET \"ANDROID_SDK_ROOT=%SCRIPT_PATH%..\\syncthing-android-prereq\"\nIF NOT DEFINED JAVA_HOME SET JAVA_HOME=%ProgramFiles%\\Android\\Android Studio\\jbr\nREM\n:checkPrerequisites\necho [INFO] Checking prerequisites ...\nREM\nSET GIT_BIN=\nFOR /F \"tokens=*\" %%A IN ('where git 2^> NUL:') DO SET GIT_BIN=\"%%A\"\nIF NOT DEFINED GIT_BIN echo [ERROR] git not found. Install \"Git for Windows\" first and put it to the PATH env var. & pause & goto :checkPrerequisites\nIF NOT EXIST %GIT_BIN% echo [ERROR] git not found. Install \"Git for Windows\" first and put it to the PATH env var. & pause & goto :checkPrerequisites\nREM\nwhere /q java\nIF NOT \"%ERRORLEVEL%\" == \"0\" SET PATH=%PATH%;%JAVA_HOME%\\bin\nwhere /q java\nIF NOT \"%ERRORLEVEL%\" == \"0\" echo [ERROR] java.exe not found on PATH env var. Download 'https://www.oracle.com/java/technologies/downloads/#java17' and run the installer & pause & goto :checkPrerequisites\nREM\nwhere /q python\nIF NOT \"%ERRORLEVEL%\" == \"0\" echo [ERROR] python.exe not found on PATH env var. Download 'https://www.python.org/ftp/python/3.9.6/python-3.9.6-amd64.exe' and run 'python-3.9.6-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0' & pause & goto :checkPrerequisites\nREM\ngradlew 2>&1 | find \"ANDROID_SDK_ROOT\" >NUL: && (echo [WARN] gradlew FAILED: Env var ANDROID_SDK_ROOT not set. Trying to run 'python install_minimum_android_sdk_prerequisites.py' ... & call python install_minimum_android_sdk_prerequisites.py)\ngradlew 2>&1 | find \"ANDROID_SDK_ROOT\" >NUL: && (echo [ERROR] gradlew FAILED: Env var ANDROID_SDK_ROOT not set, run 'python install_minimum_android_sdk_prerequisites.py' first. & pause & goto :checkPrerequisites)\nREM\nIF \"%CLEAN_BEFORE_BUILD%\" == \"1\" call :cleanBeforeBuild\nREM\nIF \"%SKIP_CHECKOUT_SRC%\" == \"1\" goto :afterCheckoutSrc\nREM\necho [INFO] Fetching submodule \"Syncthing\" 1/2 ...\nmd \"%SCRIPT_PATH%syncthing\\src\\github.com\\syncthing\\syncthing\" 2> NUL:\ngit submodule init\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git submodule init FAILED. & goto :eos\nREM\necho [INFO] Fetching submodule \"Syncthing\" 2/2 ...\ngit submodule update --init --recursive --quiet\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git submodule update FAILED. & goto :eos\nREM\ncd /d \"%SCRIPT_PATH%syncthing\\src\\github.com\\syncthing\\syncthing\"\necho [INFO] Fetching GitHub tags ...\ngit fetch --quiet --all\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git fetch FAILED. & goto :eos\nREM\necho [INFO] Reading required SyncthingNative from build.gradle.kts ...\nIF NOT DEFINED SYNCTHING_NATIVE_REQUIRED_VERSION call :getRequiredSynchtingNativeVersion\nREM\necho [INFO] Checking out syncthing_%SYNCTHING_NATIVE_REQUIRED_VERSION% ...\ngit checkout %SYNCTHING_NATIVE_REQUIRED_VERSION% 2>&1 | find /i \"HEAD is now at\"\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git checkout FAILED. & goto :eos\nREM\n:afterCheckoutSrc\ncd /d \"%SCRIPT_PATH%\"\nREM\necho [INFO] Building submodule syncthing_%SYNCTHING_NATIVE_REQUIRED_VERSION% ...\ncall gradlew %GRADLEW_PARAMS% buildNative\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] gradlew buildNative FAILED. & goto :eos\nREM\necho [INFO] Reverting \"go.mod\", \"go.sum\" to checkout state ...\ncd /d \"%SCRIPT_PATH%syncthing\\src\\github.com\\syncthing\\syncthing\"\ngit checkout -- go.mod\ngit checkout -- go.sum\ncd /d \"%SCRIPT_PATH%\"\nREM\necho [INFO] Checking if SyncthingNative was built successfully ...\nREM\nSET LIBCOUNT=\nfor /f \"tokens=*\" %%A IN ('dir /s /a \"%SCRIPT_PATH%app\\src\\main\\jniLibs\\*\" 2^>NUL: ^| find /C \"libsyncthingnative.so\"') DO SET LIBCOUNT=%%A\nIF NOT \"%LIBCOUNT%\" == \"4\" echo [ERROR] SyncthingNative[s] \"libsyncthingnative.so\" are missing. You should fix that first. & goto :eos\nREM\ngoto :eos\n\n\n:cleanBeforeBuild\nREM\nREM Syntax:\nREM \tcall :cleanBeforeBuild\nREM\necho [INFO] Performing cleanup ...\nrd /s /q \"app\\src\\main\\jniLibs\" 2> NUL:\nIF NOT \"%SKIP_CHECKOUT_SRC%\" == \"1\" rd /s /q \"syncthing\\src\\github.com\\syncthing\\syncthing\" 2> NUL:\nREM\ngoto :eof\n\n\n:getRequiredSynchtingNativeVersion\nREM \nREM Get \"versionMajor\"\nSET VERSION_MAJOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMajor\"') DO SET VERSION_MAJOR=%%A\nSET VERSION_MAJOR=%VERSION_MAJOR:\"=%\nREM \nREM Get \"versionMinor\"\nSET VERSION_MINOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMinor\"') DO SET VERSION_MINOR=%%A\nSET VERSION_MINOR=%VERSION_MINOR:\"=%\nREM \nREM Get \"versionPatch\"\nSET VERSION_PATCH=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionPatch\"') DO SET VERSION_PATCH=%%A\nSET VERSION_PATCH=%VERSION_PATCH:\"=%\nREM\nSET \"SYNCTHING_NATIVE_REQUIRED_VERSION=v%VERSION_MAJOR%.%VERSION_MINOR%.%VERSION_PATCH%\"\necho [INFO] SYNCTHING_NATIVE_REQUIRED_VERSION=[%SYNCTHING_NATIVE_REQUIRED_VERSION%]\"\nREM\ngoto :eof\n\n\n:eos\nREM\necho [INFO] End of Script.\nREM\npause\ngoto :eof\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.02734375,
          "content": "theme: jekyll-theme-leap-day"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 0.90234375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    extra.apply {\n        // Cannot be called \"ndkVersion\" as that leads to naming collision\n        // Changes to this value must be reflected in `./docker/Dockerfile`\n        set(\"ndkVersionShared\", \"27.0.12077973\")\n        set(\"versionMajor\", 1)\n        set(\"versionMinor\", 29)\n        set(\"versionPatch\", 0)\n        set(\"versionWrapper\", 0)\n    }\n\n    repositories {\n        gradlePluginPortal()\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:8.6.1\")\n        classpath(\"com.github.ben-manes:gradle-versions-plugin:0.51.0\")\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\ntasks.register<Delete>(\"clean\") {\n    delete(layout.buildDirectory)\n}\n"
        },
        {
          "name": "debug_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "fdroiddata",
          "type": "tree",
          "content": null
        },
        {
          "name": "ga.cmd",
          "type": "blob",
          "size": 0.029296875,
          "content": "@echo off\ngit add .\ngoto :eof\n"
        },
        {
          "name": "git-log.cmd",
          "type": "blob",
          "size": 0.0537109375,
          "content": "@echo off\ngit log > \"X:\\git.log\"\nstart \"\" \"X:\\git.log\"\n"
        },
        {
          "name": "git_diff_main.cmd",
          "type": "blob",
          "size": 0.8828125,
          "content": "@echo off\nsetlocal enabledelayedexpansion\nmode con lines=70 cols=150\npowershell.exe -command \"& {$pshost = Get-Host;$pswindow = $pshost.UI.RawUI;$newsize = $pswindow.BufferSize;$newsize.height = 2000;$pswindow.buffersize = $newsize;}\ncls\nSET SCRIPT_PATH=%~dps0\ncd /d \"%SCRIPT_PATH%\"\nREM \nREM Script Consts.\necho [INFO] Checking prerequisites ...\nSET GIT_BIN=\nFOR /F \"tokens=*\" %%A IN ('where git 2^> NUL:') DO SET GIT_BIN=\"%%A\"\nIF NOT EXIST %GIT_BIN% echo [ERROR] GIT_BIN not found. & goto :pauseExit\nREM \ncall :runGit --no-pager diff main\nREM \npause\ngoto :eof\n\n\nREM ====================\nREM FUNCTION BLOCK START\nREM ====================\n:runGit\necho [INFO] git %*\n%GIT_BIN% %*\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git FAILED with error code #%RESULT%. & goto :pauseExit\ngoto :eof\n\n\n:pauseExit\npause\ngoto :eof\nREM ==================\nREM FUNCTION BLOCK END\nREM ==================\n"
        },
        {
          "name": "git_fetch_branch.cmd",
          "type": "blob",
          "size": 0.13671875,
          "content": "@echo off\nREM\nREM Syntax:\nREM \tgit_fetch_branch.cmd [BRANCH_NAME_TO_FETCH]\nREM\ngit fetch --all\ngit fetch origin \"%1\":\"%1\"\ngit checkout \"%1\"\n"
        },
        {
          "name": "git_fetch_branch.sh",
          "type": "blob",
          "size": 0.1337890625,
          "content": "#!/bin/sh\n#\n# Syntax:\n# \tgit_fetch_branch.sh [BRANCH_NAME_TO_FETCH]\n#\ngit fetch --all\ngit fetch origin \"${1}\":\"${1}\"\ngit checkout \"${1}\"\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1142578125,
          "content": "android.enableJetifier=false\nandroid.nonFinalResIds=false\nandroid.nonTransitiveRClass=false\nandroid.useAndroidX=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.630859375,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "graphics",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_minimum_android_sdk_prerequisites.py",
          "type": "blob",
          "size": 6.4658203125,
          "content": "from __future__ import print_function\nimport os\nimport os.path\nimport shutil\nimport subprocess\nimport sys\nimport platform\n#\n# Script Compatibility:\n# - Python 3.9.6\n#\n# Run script from command line with:\n#   python install_minimum_android_sdk_prerequisites.py\n#\n\nSUPPORTED_PYTHON_PLATFORMS = ['Windows', 'Linux', 'Darwin']\n\n# Version numbers, SHA256 and URLs taken from\n## https://developer.android.com/studio\nANDROID_SDK_TOOLS_VERSION = '11076708'\nANDROID_SDK_TOOLS_SHASUM_LINUX = '2d2d50857e4eb553af5a6dc3ad507a17adf43d115264b1afc116f95c92e5e258'\nANDROID_SDK_TOOLS_SHASUM_WINDOWS = '4d6931209eebb1bfb7c7e8b240a6a3cb3ab24479ea294f3539429574b1eec862'\nANDROID_SDK_VERSION = '35'\n\ndef fail(message, *args, **kwargs):\n    print((message % args).format(**kwargs))\n    sys.exit(1)\n\ndef which_raw(program):\n    import os\n    def is_exe(fpath):\n        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n\n    fpath, fname = os.path.split(program)\n    if fpath:\n        if is_exe(program):\n            return program\n    else:\n        for path in os.environ[\"PATH\"].split(os.pathsep):\n            exe_file = os.path.join(path, program)\n            if is_exe(exe_file):\n                return exe_file\n\n    return None\n\ndef which(program):\n    if (sys.platform == 'win32'):\n        which_result = which_raw(program + \".bat\")\n        if not which_result:\n            which_result = which_raw(program + \".cmd\")\n            if not which_result:\n                which_result = which_raw(program + \".exe\")\n        return which_result\n    else:\n        return which_raw(program)\n\ndef change_permissions_recursive(path, mode):\n    import os\n    for root, dirs, files in os.walk(path, topdown=False):\n        for dir in [os.path.join(root,d) for d in dirs]:\n            os.chmod(dir, mode)\n        for file in [os.path.join(root, f) for f in files]:\n            os.chmod(file, mode)\n\ndef install_sdk_tools():\n    import os\n    import tarfile\n    import zipfile\n    import hashlib\n\n    if sys.version_info[0] >= 3:\n        from urllib.request import urlretrieve\n    else:\n        from urllib import urlretrieve\n\n    if not os.path.isdir(prerequisite_tools_dir):\n        os.makedirs(prerequisite_tools_dir)\n\n    zip_fullfn = prerequisite_tools_dir + os.path.sep + 'sdk-tools.zip';\n    if sys.platform == 'win32':\n        url =               'https://dl.google.com/android/repository/commandlinetools-win-' + ANDROID_SDK_TOOLS_VERSION + '_latest.zip'\n        expected_shasum =   ANDROID_SDK_TOOLS_SHASUM_WINDOWS\n    else:\n        url =               'https://dl.google.com/android/repository/commandlinetools-linux-' + ANDROID_SDK_TOOLS_VERSION + '_latest.zip'\n        expected_shasum =   ANDROID_SDK_TOOLS_SHASUM_LINUX\n\n    # Download sdk-tools.\n    url_base_name = os.path.basename(url)\n    if not os.path.isfile(zip_fullfn):\n        print('Downloading sdk-tools to:', zip_fullfn)\n        zip_fullfn = urlretrieve(url, zip_fullfn)[0]\n    print('Downloaded sdk-tools to:', zip_fullfn)\n\n    # Verify SHA-1 checksum of downloaded files.\n    with open(zip_fullfn, 'rb') as f:\n        contents = f.read()\n        found_shasum = hashlib.sha256(contents).hexdigest()\n        print(\"SHA-256:\", zip_fullfn, \"%s\" % found_shasum)\n    if found_shasum != expected_shasum:\n        fail('Error: SHA-256 checksum ' + found_shasum + ' of downloaded file does not match expected checksum ' + expected_shasum)\n    print(\"[ok] Checksum of\", zip_fullfn, \"matches expected value.\")\n\n    # Proceed with extraction of the NDK if necessary.\n    sdk_tools_path = prerequisite_tools_dir + os.path.sep + 'cmdline-tools'\n    if not os.path.isfile(sdk_tools_path + os.path.sep + \"source.properties\"):\n        print(\"Extracting sdk-tools ...\")\n        # This will go to a subfolder \"tools\" in the current path.\n        file_name, file_extension = os.path.splitext(url_base_name)\n        zip = zipfile.ZipFile(zip_fullfn, 'r')\n        zip.extractall(prerequisite_tools_dir)\n        zip.close()\n\n    # Move contents of cmdline-tools one level deeper into cmdline-tools/latest\n    sdk_tools_latest_path = sdk_tools_path + os.path.sep + 'latest'\n    if os.path.isdir(sdk_tools_latest_path):\n        shutil.rmtree(sdk_tools_latest_path)\n    os.makedirs(sdk_tools_latest_path)\n    shutil.move(sdk_tools_path + os.path.sep + 'NOTICE.txt', sdk_tools_latest_path)\n    shutil.move(sdk_tools_path + os.path.sep + 'source.properties', sdk_tools_latest_path)\n    shutil.move(sdk_tools_path + os.path.sep + 'bin', sdk_tools_latest_path)\n    shutil.move(sdk_tools_path + os.path.sep + 'lib', sdk_tools_latest_path)\n\n    # Linux only - Set executable permission on files.\n    if platform.system() == 'Linux':\n        print(\"Setting permissions on sdk-tools executables ...\")\n        change_permissions_recursive(sdk_tools_path, 0o755);\n\n    # Add tools/bin to PATH.\n    sdk_tools_bin_path = sdk_tools_latest_path + os.path.sep + 'bin'\n    print('Adding to PATH:', sdk_tools_bin_path)\n    os.environ[\"PATH\"] += os.pathsep + sdk_tools_bin_path\n    os.environ[\"ANDROID_HOME\"] = os.path.realpath(prerequisite_tools_dir)\n    os.environ[\"ANDROID_SDK_ROOT\"] = os.path.realpath(prerequisite_tools_dir)\n\n\n\n#\n# SCRIPT MAIN.\n#\nif platform.system() not in SUPPORTED_PYTHON_PLATFORMS:\n    fail('Unsupported python platform %s. Supported platforms: %s', platform.system(),\n         ', '.join(SUPPORTED_PYTHON_PLATFORMS))\n\nif not sys.platform == 'win32':\n    fail ('Script is currently supported to run under Windows only.')\n\nprerequisite_tools_dir = os.path.dirname(os.path.realpath(__file__)) + os.path.sep + \"..\" + os.path.sep + \"syncthing-android-prereq\"\n\n# Check if \"sdk-manager\" of sdk-tools package is available.\nsdk_manager_bin = which(\"sdkmanager\")\nif not sdk_manager_bin:\n        print('Warning: sdkmanager from sdk-tools package is not available on PATH.')\n        install_sdk_tools();\n        # Retry.\n        sdk_manager_bin = which(\"sdkmanager\")\n        if not sdk_manager_bin:\n            fail('Error: sdkmanager from sdk-tools package is not available on PATH.')\nprint('sdk_manager_bin=\\'' + sdk_manager_bin + '\\'')\n\n# Windows only - Auto accept all sdkmanager licenses.\nif sys.platform == 'win32':\n    subprocess.check_call([sdk_manager_bin, '--update'])\n    powershell_bin = which('powershell')\n    subprocess.check_call([powershell_bin, 'for($i=0;$i -lt ' + ANDROID_SDK_VERSION + ';$i++) { $response += \\\"y`n\\\"}; $response | sdkmanager --licenses'], stdout=subprocess.DEVNULL)\n    subprocess.check_call([sdk_manager_bin, 'platforms;android-' + ANDROID_SDK_VERSION])\n    subprocess.check_call([sdk_manager_bin, 'build-tools;' + ANDROID_SDK_VERSION + '.0.0'])\n\nprint('Done.')\n"
        },
        {
          "name": "merge-squash.cmd",
          "type": "blob",
          "size": 0.9990234375,
          "content": "@echo off\nsetlocal enabledelayedexpansion\ncls\nSET SCRIPT_PATH=%~dps0\ncd /d \"%SCRIPT_PATH%\"\nREM \nREM Script Consts.\nSET GITPATH=%ProgramFiles%\\Git\\cmd\nSET GIT_BIN=\"%GITPATH%\\git.exe\"\nREM \necho [INFO] Checking prerequisites ...\nSET GIT_BIN=\nFOR /F \"tokens=*\" %%A IN ('where git 2^> NUL:') DO SET GIT_BIN=\"%%A\"\nIF NOT EXIST %GIT_BIN% echo [ERROR] GIT_BIN not found. & goto :pauseExit\nREM \nREM Script parameters.\nSET BRANCH_TO_MERGE=%1\nIF NOT DEFINED BRANCH_TO_MERGE echo [ERROR] Parameter #1 BRANCH_TO_MERGE is missing. & goto :pauseExit\nREM \ncall :runGit merge --squash --no-commit \"%BRANCH_TO_MERGE%\"\nREM call :runGit commit -m \"Merged branch \\\"%BRANCH_TO_MERGE%\\\"\"\nREM \ngoto :eof\n\n\nREM ====================\nREM FUNCTION BLOCK START\nREM ====================\n:runGit\necho [INFO] git %*\n%GIT_BIN% %*\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git FAILED with error code #%RESULT%. & goto :pauseExit\ngoto :eof\n\n\n:pauseExit\npause\ngoto :eof\nREM ==================\nREM FUNCTION BLOCK END\nREM ==================\n"
        },
        {
          "name": "postbuild_copy_apk.cmd",
          "type": "blob",
          "size": 5.998046875,
          "content": "@echo off\nREM \nREM Purpose:\nREM \tCopy built APK's to match this style:\nREM \t\t[APPLICATION_ID]_v[VERSION_NAME]_[COMMIT_SHORT_HASH].apk\nREM \tExample:\nREM \t\tcom.github.catfriend1.syncthingandroid_v1.0.0.1_7d59e75.apk\nREM \ntitle %~nx0\nsetlocal enabledelayedexpansion\nREM \nREM Runtime variables.\nSET SCRIPT_PATH=%~dps0\nSET PACKAGE_SOURCE_CODE=1\nSET TEMP_OUTPUT_FOLDER=X:\nREM \nREM SET GIT_INSTALL_DIR=%ProgramFiles%\\Git\nREM SET GIT_BIN=\"%GIT_INSTALL_DIR%\\bin\\git.exe\"\nREM SET PATH=%PATH%;\"%GIT_INSTALL_DIR%\\bin\"\nREM \necho [INFO] *** postbuild_copy_apk BEGIN ***\nREM \nIF NOT DEFINED BUILD_FLAVOUR_GPLAY echo [ERROR] Env var BUILD_FLAVOUR_GPLAY not defined. & SET \"BUILD_FLAVOUR_GPLAY=release\"\nREM \nREM Get \"applicationId\"\nSET APPLICATION_ID=\nFOR /F \"tokens=3 delims= \" %%A IN ('type \"%SCRIPT_PATH%app\\build.gradle.kts\" 2^>^&1 ^| findstr /c:\"applicationId \"') DO SET APPLICATION_ID=%%A\nSET APPLICATION_ID=%APPLICATION_ID:\"=%\necho [INFO] applicationId=\"%APPLICATION_ID%\"\nREM \nREM Get \"versionMajor\"\nSET VERSION_MAJOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMajor\"') DO SET VERSION_MAJOR=%%A\nSET VERSION_MAJOR=%VERSION_MAJOR:\"=%\nREM echo [INFO] versionMajor=\"%VERSION_MAJOR%\"\nREM \nREM Get \"versionMinor\"\nSET VERSION_MINOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMinor\"') DO SET VERSION_MINOR=%%A\nSET VERSION_MINOR=%VERSION_MINOR:\"=%\nREM echo [INFO] versionMinor=\"%VERSION_MINOR%\"\nREM \nREM Get \"versionPatch\"\nSET VERSION_PATCH=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionPatch\"') DO SET VERSION_PATCH=%%A\nSET VERSION_PATCH=%VERSION_PATCH:\"=%\nREM echo [INFO] versionPatch=\"%VERSION_PATCH%\"\nREM \nREM Get \"versionWrapper\"\nSET VERSION_WRAPPER=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionWrapper\"') DO SET VERSION_WRAPPER=%%A\nSET VERSION_WRAPPER=%VERSION_WRAPPER:\"=%\nREM echo [INFO] versionWrapper=\"%VERSION_WRAPPER%\"\nREM\nSET VERSION_NAME=%VERSION_MAJOR%.%VERSION_MINOR%.%VERSION_PATCH%.%VERSION_WRAPPER%\nREM \nREM Get short hash of last commit.\nREM IF NOT EXIST %GIT_BIN% echo [ERROR] git.exe not found. & pause & goto :eof\npushd %SCRIPT_PATH%\nSET COMMIT_LONG_HASH=\nFOR /F \"tokens=1\" %%A IN ('git rev-parse --verify HEAD 2^>NUL:') DO SET COMMIT_LONG_HASH=%%A\nREM \nSET COMMIT_SHORT_HASH=\nFOR /F \"tokens=1\" %%A IN ('git rev-parse --short --verify HEAD 2^>NUL:') DO SET COMMIT_SHORT_HASH=%%A\npopd\necho [INFO] VERSION_NAME=[%VERSION_NAME%], commit=[%COMMIT_SHORT_HASH%]=[%COMMIT_LONG_HASH%].\necho [INFO] Copying APK to same directory ...\nREM \nREM Copy APK to be ready for upload to the GitHub release page.\nSET APK_RELEASE_NEW_FILENAME=%APPLICATION_ID%_github_v%VERSION_NAME%_%COMMIT_SHORT_HASH%.apk\ncall :copyIfExist %SCRIPT_PATH%app\\build\\outputs\\apk\\release\\app-release.apk %SCRIPT_PATH%app\\build\\outputs\\apk\\release\\%APK_RELEASE_NEW_FILENAME%\nREM \nSET APK_GPLAY_NEW_FILENAME=%APPLICATION_ID%_gplay_v%VERSION_NAME%_%COMMIT_SHORT_HASH%.apk\nIF NOT \"%SKIP_RELEASE_BUILD%\" == \"1\" call :copyIfExist %SCRIPT_PATH%app\\build\\outputs\\apk\\%BUILD_FLAVOUR_GPLAY%\\app-%BUILD_FLAVOUR_GPLAY%.apk %SCRIPT_PATH%app\\build\\outputs\\apk\\%BUILD_FLAVOUR_GPLAY%\\%APK_GPLAY_NEW_FILENAME%\nREM \nREM Copy both APK to temporary storage location if the storage is available.\nIF EXIST %TEMP_OUTPUT_FOLDER%\\ (\n\techo [INFO] Copying APK to [%TEMP_OUTPUT_FOLDER%] ...\n\tcopy /y %SCRIPT_PATH%app\\build\\outputs\\apk\\release\\%APK_RELEASE_NEW_FILENAME% %TEMP_OUTPUT_FOLDER%\\ 2> NUL:\n\tIF NOT \"%SKIP_RELEASE_BUILD%\" == \"1\" copy /y %SCRIPT_PATH%app\\build\\outputs\\apk\\%BUILD_FLAVOUR_GPLAY%\\%APK_GPLAY_NEW_FILENAME% %TEMP_OUTPUT_FOLDER%\\ 2> NUL:\n)\nREM \nIF \"%PACKAGE_SOURCE_CODE%\" == \"1\" call :packageSourceCode\nREM \necho [INFO] *** postbuild_copy_apk END ***\nREM timeout 3\ngoto :eof\n\n\n:copyIfExist\nREM \nREM Syntax:\nREM \tcall :copyIfExist [FULL_FN_ORIGINAL] [FILENAME_COPY_TARGET]\nREM IF EXIST %1 REN %1 %2 & goto :eof\nIF EXIST %1 copy /y %1 %2 & goto :eof\necho [INFO] File not found: %1\nREM \ngoto :eof\n\n\n:getFileSize\nREM \nREM Get file size to variable defined in parameter #2.\nSET %~2=%~z1\nREM \ngoto :eof\n\n\n:packageSourceCode\nREM \nREM Syntax:\nREM \tcall :packageSourceCode\nREM \nREM Global variables.\nREM \t[IN] COMMIT_LONG_HASH\nREM \t[IN] COMMIT_SHORT_HASH\nREM \t[IN] TEMP_OUTPUT_FOLDER\nREM \t[IN] VERSION_NAME\nREM \nREM Variables.\nSET TMP_DSC_ZIPFILE_FULLFN=\"%TEMP_OUTPUT_FOLDER%\\%DATE:~-4%-%DATE:~-7,-5%-%DATE:~-10,-8%_com.github.catfriend1.syncthingandroid_v%VERSION_NAME%_%COMMIT_SHORT_HASH%.zip\"\nSET TMP_DSC_SEVENZIP_EXE=\"%ProgramFiles%\\7-Zip\\7z.exe\"\nREM \nREM Check prerequisites.\nwhere curl 1> NUL: 2>&1 || (echo [ERROR] curl not found on PATH. & goto :eof)\nIF NOT EXIST %TEMP_OUTPUT_FOLDER%\\ echo [ERROR] TEMP_OUTPUT_FOLDER=[%TEMP_OUTPUT_FOLDER%] not found. & goto :eof\nIF NOT EXIST %TMP_DSC_SEVENZIP_EXE% echo [ERROR] TMP_DSC_SEVENZIP_EXE=[%TMP_DSC_SEVENZIP_EXE%] not found. & goto :eof\nREM \nREM Download source code for current build commit as ZIP.\n:packageSourceCodeRetry\necho [INFO] Downloading source code ZIP from GitHub ...\ncurl -s -k -L -o %TMP_DSC_ZIPFILE_FULLFN% \"https://github.com/Catfriend1/syncthing-android/archive/%COMMIT_LONG_HASH%.zip\"\nIF NOT EXIST %TMP_DSC_ZIPFILE_FULLFN% echo [ERROR] Download source code FAILED #1. & pause & goto :eof\ncall :getFileSize %TMP_DSC_ZIPFILE_FULLFN% FILE_SIZE\nIF \"%FILE_SIZE%\" == \"\" echo [ERROR] Download source code FAILED #2. & pause & goto :eof\nIF %FILE_SIZE% LSS 23 echo [ERROR] Download source code FAILED #3. & DEL /F %TMP_DSC_ZIPFILE_FULLFN% & pause & goto :packageSourceCodeRetry\nREM \nREM Package built APKs into ZIP.\necho [INFO] Adding built APKs to source code ZIP ...\n%TMP_DSC_SEVENZIP_EXE% -y -bso0 a %TMP_DSC_ZIPFILE_FULLFN% %TEMP_OUTPUT_FOLDER%\\%APK_RELEASE_NEW_FILENAME%\nIF NOT \"%SKIP_RELEASE_BUILD%\" == \"1\" %TMP_DSC_SEVENZIP_EXE% -y -bso0 a %TMP_DSC_ZIPFILE_FULLFN% %TEMP_OUTPUT_FOLDER%\\%APK_GPLAY_NEW_FILENAME%\nREM \ngoto :eof\n\n\n:renIfExist\nREM \nREM Syntax:\nREM \tcall :renIfExist [FULL_FN_ORIGINAL] [FILENAME_RENAMED]\nIF EXIST %1 REN %1 %2 & goto :eof\necho [INFO] File not found: %1\nREM \ngoto :eof\n"
        },
        {
          "name": "prepare-release.bash",
          "type": "blob",
          "size": 2.826171875,
          "content": "#!/bin/bash\n\nset -e\n\nNEW_VERSION_NAME=$1\nOLD_VERSION_NAME=$(grep \"versionName\" \"app/build.gradle\" | awk '{print $2}')\nif [[ -z ${NEW_VERSION_NAME} ]]\nthen\n    echo \"New version name is empty. Please set a new version. Current version: $OLD_VERSION_NAME\"\n    exit\nfi\n\necho \"\n\nChecking for Syncthing Update\n-----------------------------\n\"\nPROJECT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\ncd \"syncthing/src/github.com/syncthing/syncthing/\"\ngit fetch\nCURRENT_TAG=$(git describe)\n# Also consider Syncthing rc releases if we are building beta or rc.\nif [[ \"$NEW_VERSION_NAME\" == *beta* ]] || [[ \"$NEW_VERSION_NAME\" == *rc* ]]; then\n    LATEST_TAG=$(git tag --sort=taggerdate | tail -1)\nelse\n    LATEST_TAG=$(git tag --sort=taggerdate | awk '!/rc/' | tail -1)\nfi\n\nif [ ${CURRENT_TAG} != ${LATEST_TAG} ]; then\n    git checkout -f ${LATEST_TAG}\n    cd ${PROJECT_DIR}\n    git add \"syncthing/src/github.com/syncthing/syncthing/\"\n    git commit -m \"Updated Syncthing to $LATEST_TAG\"\n    ./gradlew cleanNative buildNative\nfi\ncd ${PROJECT_DIR}\n\n\necho \"\n\nUpdating Translations\n-----------------------------\n\"\ntx push -s\n# Force push/pull to make sure this is executed. Apparently tx only compares timestamps, not file\n# contents. So if a file was `touch`ed, it won't be updated by default.\n# Use multiple transifex instances for pulling to speed things up.\n#\n# tx pull -a --mode reviewed -r \"syncthing-android-1.stringsxml\"\n# tx pull -l de --mode reviewed -r \"syncthing-android-1.stringsxml\"\n#\ntx pull -a --mode reviewed -r \"syncthing-android-1.stringsxml\" &\ntx pull -a --mode reviewed -r \"syncthing-android-1.description_fulltxt\" &\ntx pull -a --mode reviewed -r \"syncthing-android-1.description_shorttxt\" &\ntx pull -a --mode reviewed -r \"syncthing-android-1.titletxt\" &\nwait\n./gradlew deleteUnsupportedPlayTranslations\ngit add -A \"app/src/main/play/\"\ngit add -A \"app/src/main/res/values-*/strings.xml\"\nif ! git diff --cached --exit-code;\nthen\n    git commit -m \"Imported translations\"\nfi\n\n\necho \"\n\nRunning Lint\n-----------------------------\n\"\n./gradlew clean lintVitalRelease\n\necho \"\n\nEnter Changelog for $NEW_VERSION_NAME\n-----------------------------\n\"\nchangelog_file=\"build/changelog.tmp\"\ntouch ${changelog_file}\nnano ${changelog_file}\n\ncat ${changelog_file}\nmv ${changelog_file} \"app/src/main/play/en-GB/whatsnew\"\n\necho \"\n\nUpdating Version\n-----------------------------\n\"\nOLD_VERSION_CODE=$(grep \"versionCode\" \"app/build.gradle\" -m 1 | awk '{print $2}')\nNEW_VERSION_CODE=$(($OLD_VERSION_CODE + 1))\nsed -i \"s/versionCode $OLD_VERSION_CODE/versionCode $NEW_VERSION_CODE/\" \"app/build.gradle\"\n\nOLD_VERSION_NAME=$(grep \"versionName\" \"app/build.gradle\" | awk '{print $2}')\nsed -i \"s/$OLD_VERSION_NAME/\\\"$1\\\"/\" \"app/build.gradle\"\ngit add \"app/build.gradle\" \"app/src/main/play/en-GB/whatsnew\"\ngit commit -m \"Bumped version to $NEW_VERSION_NAME\"\ngit tag ${NEW_VERSION_NAME}\n\necho \"\nUpdate ready.\n\"\n"
        },
        {
          "name": "privacy-policy.md",
          "type": "blob",
          "size": 5.6201171875,
          "content": "# Syncthing-Fork Privacy Policy\n\n## Introduction\nA Privacy Policy is a legitimate articulation that determines what the developer does with the individual information gathered from users of the application, alongside how the data is collected and for what purposes.\nThis privacy policy document is to state and gives data on what, how and why individual information or data is gathered, utilized when Syncthing-Fork is used. And to help users decide on what information they choose to share. After reading this document and, you decide to continue using this software, it implies you accept all terms and conditions stated by the developer in this policy.\n\nThis Privacy Policy implies that the developer would not be held responsible for the content or privacy practices on any third party app not operated by the developer to which this software links or that links to this software. Subsequently, it is fitting to read up the policies of third-party applications that might be connected or associated with this software.\n\n\n## Access and Permission\n\n### Camera permission\nThe permission to access camera is used to scan QR codes in order to provide an easy method for entering device IDs. The app does not save any pictures or video in the process. The app will still work if the user denies the permission and enters the device ID manually.\n\nThe permission to access camera is used to shoot photos with the \"Syncthing Camera\" feature. This is an optional feature, the app will still work if the user denies the permission and moves pictures into folders manually.\n\n### Location permission\nYou can choose if Syncthing-Fork is allowed to use Android's \"location\" permission. This is completely optional and not required to use the app. For location data includes very sensitive personal information related to user privacy, the app does not store any location data. The permission to access location in the background is used only to check for an SSID of the currently active Wi-Fi. The sole purpose of this information is to limit synchronisation to user-configured Wi-Fi connections. At no point is this information used to determine the user's actual location nor is it ever shared with any 3rd party entities.\n\n\n## Information Collection and Use\n**The developer of the Syncthing-Fork Wrapper doesn't have access to or gather any form of data from users of the application.** \"data\" for example refers to personal data, configuration files, unique IDs, files synchronized by Syncthing. As the Syncthing-Fork Android app is a wrapper and graphical user interface for Syncthing, it contains and uses the \"third party\" Syncthing module built from the official source code at [https://github.com/syncthing/syncthing/releases](https://github.com/syncthing/syncthing/releases). Syncthing as the \"synchronization functionality core\" may gather data from users, for example, it generates unique ID's for usage reporting and it may upload usage reports.\n\n**To state this clearly:**\n\n**[Syncthing](https://www.syncthing.net) is a different project and you should look up their privacy policy at [https://www.syncthing.net](https://www.syncthing.net).**\n\n\n## Personal Data\nThe developer doesn't collect personally identifiable data while the software is being utilized.\n\n\n## Security Of Data\nThe security of your information is imperative, however, recall that no strategy for transmission over the internet, or technique for electronic capacity is 100% secure. Therefore the developer doesn't ensure its supreme security. Syncthing-Fork is a wrapper and graphical interface for Syncthing. It does not transmit your files over the network as this is handled by the previously mentioned [Syncthing module](https://github.com/syncthing/syncthing/releases). If you believe you've found a Syncthing-related security vulnerability, please contact the Syncthing team at [https://syncthing.net/security.html](https://syncthing.net/security.html).\n\n\n## Age Restrictions\nSyncthing-Fork is a general utility application with functionalities that does not constrain its use from being utilized by any age review, asides from generally expressed in an arrangement or law controlling that district.\n\n\n## Changes To This Policy\nThe developer maintains all authority to change this privacy policy and its terms whenever. The changes are probably going to happen as the improvement of the application advances and with more functionalities included, which would repudiate a few explanations contained in this privacy policy. You are encouraged to check this privacy policy document for updates and changes intermittently.\n\n\n## Disclaimer\nSyncthing-Fork is developed to provide an Android graphical user interface assisting users in configuring and running Syncthing [https://www.syncthing.net](https://www.syncthing.net) on their mobile devices. The developer will not be held accountable for how you decide to use this software and will not be liable for any losses and damages in connection with the use of the software.\n\n\n## Contact Us\nFor further request in regards to this privacy protection arrangement or some other issue identifying with the improvement or inside the circuit of Syncthing-Fork programming, if it's not too much trouble contact the developer by opening an issue on the application's authentic repository [https://github.com/Catfriend1/syncthing-android/issues](https://github.com/Catfriend1/syncthing-android/issues) on GitHub. It will be ideal if you likewise check if the point you need to open hasn't just been opened. Syncthing-Fork will be enhanced with contributions from the open source network. Don't hesitate to make a pull request of the suggestions and improvements. We welcome every contribution, for example, in form of code or translations.\n"
        },
        {
          "name": "psreplace.cmd",
          "type": "blob",
          "size": 0.8857421875,
          "content": "@echo off\nREM\nREM Version 1.0\nREM\nSET TMP_PSR_SEARCH=%1\nIF DEFINED TMP_PSR_SEARCH SET \"TMP_PSR_SEARCH=%TMP_PSR_SEARCH:\"=%\"\nIF DEFINED TMP_PSR_SEARCH SET \"TMP_PSR_SEARCH=%TMP_PSR_SEARCH:`=\"\"%\"\nREM \nSET TMP_PSR_REPLACE=%2\nIF DEFINED TMP_PSR_REPLACE SET \"TMP_PSR_REPLACE=%TMP_PSR_REPLACE:\"=%\"\nIF DEFINED TMP_PSR_REPLACE SET \"TMP_PSR_REPLACE=%TMP_PSR_REPLACE:`=\\\"%\"\nREM \nSET TMP_PSR_TARGET_FULLFN=%3\nIF NOT DEFINED TMP_PSR_TARGET_FULLFN powershell -NoLogo -NoProfile -ExecutionPolicy ByPass -Command \"Write-Host -NoNewLine ((($Input | Out-String) -Replace '%TMP_PSR_SEARCH%', '%TMP_PSR_REPLACE%') -Replace '§n', \\\"`n\\\" -Replace '§r', \\\"`r\\\")\" 2> NUL: & goto :eof\nREM\npowershell -NoLogo -NoProfile -ExecutionPolicy ByPass -Command \"Set-Content -Path '%3' -NoNewLine -Value ((($Input | Out-String) -Replace '%TMP_PSR_SEARCH%', '%TMP_PSR_REPLACE%') -Replace '§n', \\\"`n\\\" -Replace '§r', \\\"`r\\\")\"\nREM \ngoto :eof\n"
        },
        {
          "name": "roboscript",
          "type": "tree",
          "content": null
        },
        {
          "name": "setenv.cmd",
          "type": "blob",
          "size": 0.505859375,
          "content": "@echo off\nREM\nREM Runtime Variables.\nIF NOT DEFINED JAVA_HOME SET JAVA_HOME=%ProgramFiles%\\Android\\Android Studio\\jbr\nIF EXIST \"%LocalAppData%\\Android\\Sdk\" SET \"ANDROID_SDK_ROOT=%LocalAppData%\\Android\\Sdk\"\nREM\nwhere /q java\nIF NOT \"%ERRORLEVEL%\" == \"0\" SET PATH=%PATH%;%JAVA_HOME%\\bin\nwhere /q java\nIF NOT \"%ERRORLEVEL%\" == \"0\" echo [ERROR] java.exe not found on PATH env var. Download 'https://www.oracle.com/java/technologies/downloads/#java17' and run the installer & pause & goto :checkPrerequisites\nREM\ngoto :eof\n"
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.3720703125,
          "content": "pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        google()\n        mavenCentral()\n    }\n}\n\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven { url = java.net.URI(\"https://jitpack.io\") }\n    }\n}\n\ninclude(\n    \":app\",\n    \":syncthing\"\n)\n"
        },
        {
          "name": "syncthing",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_fdroid_mirror_repo_from_main.cmd",
          "type": "blob",
          "size": 3.2802734375,
          "content": "@echo off\nsetlocal enabledelayedexpansion\nSET SCRIPT_PATH=%~dps0\ncd /d \"%SCRIPT_PATH%\"\ncls\ntitle Syncthing-Fork - Update F-Droid Mirror Repo from main\nREM\nREM Runtime Variables.\nSET APP_BUILD_GRADLE=%~dps0app\\build.gradle.kts\nREM\ncall :runGit fetch --all\nREM\ngit remote remove upstream 2>NUL:\ncall :runGit remote add upstream https://github.com/Catfriend1/syncthing-android.git\ncall :runGit pull upstream main\nREM :runGit merge {commit_id}\nREM :runGit reset --hard head~1\nREM\ncall :readVersionFromVersionsGradle\necho [INFO] applicationId=\"%APPLICATION_ID%\"\necho [INFO] VERSION_NAME=[%VERSION_NAME%]\necho [INFO] VERSION_CODE=[%VERSION_CODE%]\nREM\nREM Write \"versionName\" and \"versionCode\" to \"build.gradle\".\nTYPE \"%APP_BUILD_GRADLE%\" 2>NUL: | psreplace \"\\sversionCode = .*\" \" versionCode = %VERSION_CODE%\" | psreplace \"\\sversionName = .*\" \" versionName = `%VERSION_NAME%`\" \"%APP_BUILD_GRADLE%\"\nREM\ngoto :eof\n\n\n\n\n\n\n\n\n\n\nREM ====================\nREM FUNCTION BLOCK START\nREM ====================\n:readVersionFromVersionsGradle\nREM\nREM Get \"applicationId\"\nSET APPLICATION_ID=\nFOR /F \"tokens=3 delims=) \" %%A IN ('type \"%SCRIPT_PATH%app\\build.gradle.kts\" 2^>^&1 ^| findstr \"applicationId\"') DO SET APPLICATION_ID=%%A\nSET APPLICATION_ID=%APPLICATION_ID:\"=%\nREM\nREM Get \"versionMajor\"\nSET VERSION_MAJOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMajor\"') DO SET VERSION_MAJOR=%%A\nSET VERSION_MAJOR=%VERSION_MAJOR:\"=%\nREM echo [INFO] versionMajor=\"%VERSION_MAJOR%\"\nREM\nREM Get \"versionMinor\"\nSET VERSION_MINOR=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionMinor\"') DO SET VERSION_MINOR=%%A\nSET VERSION_MINOR=%VERSION_MINOR:\"=%\nREM echo [INFO] versionMinor=\"%VERSION_MINOR%\"\nREM\nREM Get \"versionPatch\"\nSET VERSION_PATCH=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionPatch\"') DO SET VERSION_PATCH=%%A\nSET VERSION_PATCH=%VERSION_PATCH:\"=%\nREM echo [INFO] versionPatch=\"%VERSION_PATCH%\"\nREM\nREM Get \"versionWrapper\"\nSET VERSION_WRAPPER=\nFOR /F \"tokens=2 delims==) \" %%A IN ('type \"%SCRIPT_PATH%build.gradle.kts\" 2^>^&1 ^| findstr \"versionWrapper\"') DO SET VERSION_WRAPPER=%%A\nSET VERSION_WRAPPER=%VERSION_WRAPPER:\"=%\nREM echo [INFO] versionWrapper=\"%VERSION_WRAPPER%\"\nREM\nSET VERSION_NAME=%VERSION_MAJOR%.%VERSION_MINOR%.%VERSION_PATCH%.%VERSION_WRAPPER%\nREM\nREM Calculate \"versionCode\".\nSET VERSION_CODE_MAJOR=%VERSION_MAJOR%\nREM \ncall :addTrailingZerosToVar %VERSION_MINOR%\nSET VERSION_CODE_MINOR=%ATZTV_PADDED%\nREM\ncall :addTrailingZerosToVar %VERSION_MINOR%\nSET VERSION_CODE_MINOR=%ATZTV_PADDED%\nREM\ncall :addTrailingZerosToVar %VERSION_PATCH%\nSET VERSION_CODE_PATCH=%ATZTV_PADDED%\nREM\ncall :addTrailingZerosToVar %VERSION_WRAPPER%\nSET VERSION_CODE_WRAPPER=%ATZTV_PADDED%\nREM\nSET VERSION_CODE=%VERSION_CODE_MAJOR%%VERSION_CODE_MINOR%%VERSION_CODE_PATCH%%VERSION_CODE_WRAPPER%\nREM\ngoto :eof\n\n\n:runGit\necho [INFO] git %1 %2 %3 %4 %5 %6 %7 %8 %9\ngit %1 %2 %3 %4 %5 %6 %7 %8 %9\nSET RESULT=%ERRORLEVEL%\nIF NOT \"%RESULT%\" == \"0\" echo [ERROR] git FAILED with error code #%RESULT%. & goto :pauseExit\ngoto :eof\n\n\n:addTrailingZerosToVar\nSET ATZTV_P1=0000000000000%1\nSET \"ATZTV_PADDED=!ATZTV_P1:~-2!\"\ngoto :eof\n\n\n:pauseExit\npause\ngoto :eof\nREM ==================\nREM FUNCTION BLOCK END\nREM ==================\n"
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}