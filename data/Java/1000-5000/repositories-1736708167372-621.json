{
  "metadata": {
    "timestamp": 1736708167372,
    "page": 621,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "classgraph/classgraph",
      "stars": 2784,
      "defaultBranch": "latest",
      "files": [
        {
          "name": ".classpath",
          "type": "blob",
          "size": 2.5244140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classpath>\n\t<classpathentry exported=\"true\" kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" output=\"target/classes\" path=\"src/main/java\">\n\t\t<attributes>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" output=\"target/test-classes\" path=\"src/test/java\">\n\t\t<attributes>\n\t\t\t<attribute name=\"test\" value=\"true\"/>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry excluding=\"**\" kind=\"src\" output=\"target/test-classes\" path=\"src/test/resources\">\n\t\t<attributes>\n\t\t\t<attribute name=\"test\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" output=\"target/test-classes\" path=\"src/test/perf\">\n\t\t<attributes>\n\t\t\t<attribute name=\"test\" value=\"true\"/>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry excluding=\"**\" kind=\"src\" output=\"target/classes\" path=\"src/main/resources\">\n\t\t<attributes>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" path=\"target/generated-sources/annotations\">\n\t\t<attributes>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t\t<attribute name=\"ignore_optional_problems\" value=\"true\"/>\n\t\t\t<attribute name=\"m2e-apt\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"src\" output=\"target/test-classes\" path=\"target/generated-test-sources/test-annotations\">\n\t\t<attributes>\n\t\t\t<attribute name=\"optional\" value=\"true\"/>\n\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>\n\t\t\t<attribute name=\"ignore_optional_problems\" value=\"true\"/>\n\t\t\t<attribute name=\"m2e-apt\" value=\"true\"/>\n\t\t\t<attribute name=\"test\" value=\"true\"/>\n\t\t</attributes>\n\t</classpathentry>\n\t<classpathentry kind=\"output\" path=\"target/classes\"/>\n</classpath>\n"
        },
        {
          "name": ".codacy.yaml",
          "type": "blob",
          "size": 0.033203125,
          "content": "exclude_paths:\n  - 'src/test/**'\n\n"
        },
        {
          "name": ".eclipse",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.248046875,
          "content": "!.gitignore\n\npom.xml.releaseBackup\nrelease.properties\n\n*.class\n!CompiledWithJDK8.class\n!module-info.class\n\n/target/\nbin/\ntmp/\nlib/\n*.tmp\n*.bak\n*~\nhs_err_pid*\n\n*.iml\n.metadata\n.settings/\n.loadpath\n.externalToolBuilders/\n*.launch\n.idea\n.cache*\n\nTODO-local\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 0.8154296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>ClassGraph</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.m2e.core.maven2Builder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.m2e.core.maven2Nature</nature>\n\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n\t</natures>\n\t<filteredResources>\n\t\t<filter>\n\t\t\t<id>1700088758021</id>\n\t\t\t<name></name>\n\t\t\t<type>30</type>\n\t\t\t<matcher>\n\t\t\t\t<id>org.eclipse.core.resources.regexFilterMatcher</id>\n\t\t\t\t<arguments>node_modules|\\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>\n\t\t\t</matcher>\n\t\t</filter>\n\t</filteredResources>\n</projectDescription>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1962890625,
          "content": "language: java\njdk:\n  - openjdk8\n  - openjdk11\n  - openjdk12\n  - openjdk13\n  #- openjdk-ea\n\n#ignore default install step\ninstall: true\n\ncache:\n  directories:\n  - $HOME/.m2\n\nscript: ./mvnw clean verify\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE-ClassGraph.txt",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Luke Hutchison\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.2998046875,
          "content": "# ClassGraph\n\n<img alt=\"ClassGraph Logo\" height=\"320\" width = \"320\" src=\"https://github.com/classgraph/classgraph/wiki/ClassGraphLogo.png\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt=\"Duke Award logo\" height=\"320\" src=\"https://github.com/classgraph/classgraph/wiki/Duke-noborder.png\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://github.com/classgraph/classgraph/wiki/OSPB-award-letter.pdf\"><img alt=\"Google Open Source Peer Bonus logo\" height=\"320\" src=\"https://github.com/classgraph/classgraph/wiki/OSPB-logo.png\"></a>\n\nClassGraph is an uber-fast parallelized classpath scanner and module scanner for Java, Scala, Kotlin and other JVM languages.\n\n| _ClassGraph won a Duke's Choice Award (a recognition of the most useful and/or innovative software in the Java ecosystem) at Oracle Code One 2018, and a Google Open Source Peer Bonus award in 2022._ Thanks to all the users who have reported bugs, requested features, offered suggestions, and submitted pull requests to help get ClassGraph to where it is today. |\n|-----------------------------|\n\n[![Platforms: Windows, Mac OS X, Linux, Android (build-time)](https://img.shields.io/badge/platforms-Windows,_Mac_OS_X,_Linux,_Android_(build--time)-blue.svg)](#)\n[![Languages: Java, Scala, Kotlin, etc.](https://img.shields.io/badge/languages-Java,_Scala,_Kotlin,_etc.-blue.svg)](#)\n[![JDK compatibility: 7, 8, 9+ (JPMS)](https://img.shields.io/badge/JDK_compatibility-7,_8,_9+_(JPMS)-blue.svg)](#)\n<br>\n[![Build Status](https://travis-ci.org/classgraph/classgraph.png?branch=master)](https://travis-ci.org/classgraph/classgraph)\n[![GitHub issues](https://img.shields.io/github/issues/classgraph/classgraph.svg)](https://github.com/classgraph/classgraph/issues/)\n[![lgtm alerts](https://img.shields.io/lgtm/alerts/g/classgraph/classgraph.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/classgraph/classgraph/alerts/)\n[![lgtm code quality](https://img.shields.io/lgtm/grade/java/g/classgraph/classgraph.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/classgraph/classgraph/context:java)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/ebc65f685d504cfcb379533d28d6353c)](https://www.codacy.com/gh/classgraph/classgraph/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=classgraph/classgraph&amp;utm_campaign=Badge_Grade)\n<br>\n[![Dependencies: none](https://img.shields.io/badge/dependencies-none-blue.svg)](#)\n[![Dependents](https://badgen.net/github/dependents-repo/classgraph/classgraph)](https://github.com/classgraph/classgraph/network/dependents?package_id=UGFja2FnZS0xODcxNTE4NTM%3D)\n[![GitHub stars chart](https://img.shields.io/badge/github%20stars-chart-blue.svg)](https://seladb.github.io/StarTrack-js/#/preload?r=classgraph,classgraph)\n<br>\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.github.classgraph/classgraph/badge.svg)](https://mvnrepository.com/artifact/io.github.classgraph/classgraph)\n[![Javadocs](http://www.javadoc.io/badge/io.github.classgraph/classgraph.svg)](https://javadoc.io/doc/io.github.classgraph/classgraph)\n<br>\n[![Gitter chat](https://img.shields.io/badge/gitter-join%20chat-blue.svg)](https://gitter.im/classgraph/Lobby)\n<br>\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/classgraph/classgraph/blob/master/LICENSE)\n\n| ClassGraph is stable and mature, and has a low bug report rate, despite being used by hundreds of projects. |\n|-----------------------------|\n\n### ClassGraph vs. Java Introspection\n\nClassGraph has the ability to \"invert\" the Java class and/or reflection API, or has the ability to index classes and resources. For example, the Java class and reflection API can tell you the superclass of a given class, or the interfaces implemented by a given class, or can give you the list of annotations on a class; ClassGraph can find **all classes that extend a given class** (all subclasses of a given class), or **all classes that implement a given interface**, or **all classes that are annotated with a given annotation**. The Java API can load the content of a resource file with a specific path in a specific ClassLoader, but ClassGraph can find and load **all resources in all classloaders with paths matching a given pattern**.\n\n### Examples\n\nThe following code prints the name of all classes in the package `com.xyz` or its subpackages, anywhere on the classpath or module path, that are annotated with an annotation of the form `@com.xyz.Route(\"/pages/home.html\")`, along with the annotation parameter value. This is accomplished without loading or initializing any of the scanned classes.\n\n```java\nString pkg = \"com.xyz\";\nString routeAnnotation = pkg + \".Route\";\ntry (ScanResult scanResult =\n        new ClassGraph()\n            .verbose()               // Log to stderr\n            .enableAllInfo()         // Scan classes, methods, fields, annotations\n            .acceptPackages(pkg)     // Scan com.xyz and subpackages (omit to scan all packages)\n            .scan()) {               // Start the scan\n    for (ClassInfo routeClassInfo : scanResult.getClassesWithAnnotation(routeAnnotation)) {\n        AnnotationInfo routeAnnotationInfo = routeClassInfo.getAnnotationInfo(routeAnnotation);\n        List<AnnotationParameterValue> routeParamVals = routeAnnotationInfo.getParameterValues();\n        // @com.xyz.Route has one required parameter\n        String route = (String) routeParamVals.get(0).getValue();\n        System.out.println(routeClassInfo.getName() + \" is annotated with route \" + route);\n    }\n}\n```\n\nThe following code finds all JSON files in `META-INF/config` in all ClassLoaders or modules, and calls the method `readJson(String path, String content)` with the path and content of each file.\n\n```java\ntry (ScanResult scanResult = new ClassGraph().acceptPathsNonRecursive(\"META-INF/config\").scan()) {\n    scanResult.getResourcesWithExtension(\"json\")\n              .forEachByteArray((Resource res, byte[] content) -> {\n                  readJson(res.getPath(), new String(content, StandardCharsets.UTF_8));\n              });\n}\n```\n\nSee the [code examples](https://github.com/classgraph/classgraph/wiki/Code-examples) page for more examples of how to use the ClassGraph API.\n\n### Capabilities\n\nClassGraph provides a number of important capabilities to the JVM ecosystem:\n\n* ClassGraph has the ability to build a model in memory of the entire relatedness graph of all classes, annotations, interfaces, methods and fields that are visible to the JVM, and can even read [type annotations](https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html). This graph of class metadata can be [queried in a wide range of ways](https://github.com/classgraph/classgraph/wiki/Code-examples), enabling some degree of *metaprogramming* in JVM languages -- the ability to write code that analyzes or responds to the properties of other code.\n* ClassGraph reads the classfile bytecode format directly, so it can read all information about classes without loading or initializing them.\n* ClassGraph is fully compatible with the new JPMS module system (Project Jigsaw / JDK 9+), i.e. it can scan both the traditional classpath and the module path. However, the code is also fully backwards compatible with JDK 7 and JDK 8 (i.e. the code is compiled in Java 7 compatibility mode, and all interaction with the module system is implemented via reflection for backwards compatibility).\n* ClassGraph scans the classpath or module path using [carefully optimized multithreaded code](https://github.com/classgraph/classgraph/wiki/How-fast-is-ClassGraph) for the shortest possible scan times, and it runs as close as possible to I/O bandwidth limits, even on a fast SSD.\n* ClassGraph handles more [classpath specification mechanisms](https://github.com/classgraph/classgraph/wiki/Classpath-specification-mechanisms) found in the wild than any other classpath scanner, making code that depends upon ClassGraph maximally portable.\n* ClassGraph can scan the classpath and module path either at runtime or [at build time](https://github.com/classgraph/classgraph/wiki/Build-Time-Scanning) (e.g. to implement annotation processing for Android).\n* ClassGraph can [find classes that are duplicated or defined more than once in the classpath or module path](https://github.com/classgraph/classgraph/wiki/Code-examples#find-all-duplicate-class-definitions-in-the-classpath-or-module-path), which can help find the cause of strange class resolution behaviors.\n* ClassGraph can [create GraphViz visualizations of the class graph structure](https://github.com/classgraph/classgraph/wiki/ClassInfo-API#generating-a-graphviz-dot-file-for-class-graph-visualization), which can help with code understanding: (click to enlarge; [see graph legend here](https://github.com/classgraph/classgraph/blob/master/src/test/java/com/xyz/classgraph-fig-legend.png))\n\n<p align=\"center\">\n  <a href=\"https://raw.githubusercontent.com/classgraph/classgraph/master/src/test/java/com/xyz/classgraph-fig.png\"><img src=\"https://raw.githubusercontent.com/classgraph/classgraph/master/src/test/java/com/xyz/classgraph-fig.png\" width=\"898\" height=\"685\" alt=\"Class graph visualization\"/></a>\n</p>\n\n## Downloading\n\n### Maven dependency\n\nReplace `X.Y.Z` below with the latest [release number](https://github.com/classgraph/classgraph/releases). (Alternatively, you could use `LATEST` in place of `X.Y.Z` instead if you just want to grab the latest version -- although be aware that that may lead to non-reproducible builds, since the ClassGraph version number could increase at any time. You could use [dependency locking](https://docs.gradle.org/current/userguide/dependency_locking.html) to address this.)\n\n```xml\n<dependency>\n    <groupId>io.github.classgraph</groupId>\n    <artifactId>classgraph</artifactId>\n    <version>X.Y.Z</version>\n</dependency>\n```\n\nSee instructions for [use as a module](https://github.com/classgraph/classgraph/wiki#use-as-a-module).\n\n### Running on JDK 16+\n\nThe JDK team decided to start enforcing strong encapsulation in JDK 16+. That will means that by default, ClassGraph will not be able to find the classpath of your project, if all of the following are true:\n\n* You are running on JDK 16+\n* You are using a legacy classloader (rather than the module system)\n* Your classloader does not expose its classpath via a public field or method (i.e. the full classpath can only be determined by reflection of private fields or methods).\n\nIf your ClassGraph code works in JDK versions less than 16 but breaks in JDK 16+ (meaning that ClassGraph can no longer find your classes), you have probably run into this problem.\n\nClassGraph can use either of the following libraries to silently circumvent all of Java's security mechanisms (visibility/access checks, security manager restrictions, and strong encapsulation), in order to read the classpath from private fields and methods of classloaders.\n\n* Narcissus by Luke Hutchison (@lukehutch), author of ClassGraph\n* JVM-Driver by Roberto Gentili (@burningwave), author of [Burningwave Core](https://github.com/burningwave/core).\n\n**To clarify, you do *only* need to use Narcissus or JVM-driver if ClassGraph cannot find the classpath elements from your classloader, due to the enforcement of strong encapsulation, or if it is problematic that you are getting reflection access warnings on the console.**\n\nTo use one of these libraries:\n\n* Upgrade ClassGraph to the latest version\n* Either:\n  1. Add the [Narcissus](https://github.com/toolfactory/narcissus) library to your project as an extra dependency (this includes a native library, and only Linux x86/x64, Windows x86/x64, and Mac OS X x64 are currently supported -- feel free to contribute native code builds for other platforms or architectures).\n  2. Set `ClassGraph.CIRCUMVENT_ENCAPSULATION = CircumventEncapsulationMethod.NARCISSUS;` before interacting with ClassGraph in any other way (this will load the Narcissus library as ClassGraph's reflection driver).\n* Or:\n  1. Add the [JVM-Driver](https://github.com/toolfactory/jvm-driver) library to your project as an extra dependency (this uses only Java code and works to bypass encapsulation without native code for all JDK versions between 8 and 18).\n  2. Set `ClassGraph.CIRCUMVENT_ENCAPSULATION = CircumventEncapsulationMethod.JVM_DRIVER;` before interacting with ClassGraph in any other way (this will load the JVM-Driver library as ClassGraph's reflection driver).\n\nJDK 16's strong encapsulation is just the first step of trying to lock down Java's internals, so further restrictions are possible (e.g. it is likely that `setAccessible(true)` will fail in future JDK releases, even within a module, and probably the JNI API will be locked down soon, making Narcissus require a commandline flag to work). Therefore, **please convince your upstream runtime environment maintainers to expose the full classpath from their classloader using a public method or field, otherwise ClassGraph may stop working for your runtime environment in the future.**\n\n### Pre-built JARs\n\nYou can get pre-built JARs (usable on JRE 7 or newer) from [Sonatype](https://oss.sonatype.org/#nexus-search;quick~io.github.classgraph).\n\n### Building from source\n\nClassGraph must be built on JDK 8 or newer (due to the presence of `@FunctionalInterface` annotations on some interfaces), but is built using `-target 1.7` for backwards compatibility with JRE 7.\n\nThe following commands will build the most recent version of ClassGraph from git master. The compiled package will then be in the \"classgraph/target\" directory.\n\n```bash\ngit clone https://github.com/classgraph/classgraph.git\ncd classgraph\nexport JAVA_HOME=/usr/java/default   # Or similar -- Maven needs JAVA_HOME\n./mvnw -Dmaven.test.skip=true package\n```\n\nThis will allow you to build a local SNAPSHOT jar in `target/`. Alternatively, use `./mvnw -Dmaven.test.skip=true install` to build a SNAPSHOT jar and then copy it into your local repository, so that you can use it in your Maven projects. Note that may need to do `./mvnw dependency:resolve` in your project if you overwrite an older snapshot with a newer one.\n\n`./mvnw -U` updates from remote repositories an may overwrite your local artifact. But you can always change the `artifactId` or the `groupId` of your local ClassGraph build to place your local build artifact in another location within your local repository.\n\n## Documentation\n\n[See the wiki for complete documentation and usage information.](https://github.com/classgraph/classgraph/wiki)\n\n**ClassGraph was known as FastClasspathScanner prior to version 4**.  See the [porting notes](https://github.com/classgraph/classgraph/wiki/Porting-FastClasspathScanner-code-to-ClassGraph) for information on porting from the older FastClasspathScanner API.\n\n## Mailing List\n\n* Feel free to subscribe to the [ClassGraph-Users](https://groups.google.com/d/forum/classgraph-users) email list for updates, or to ask questions.\n* There is also a [Gitter room](https://gitter.im/classgraph/Lobby) for discussion of ClassGraph.\n\n## Sponsorship\n\nClassGraph was written by Luke Hutchison ([@LH](http://twitter.com/LH) on Twitter).\n\nIf ClassGraph is critical to your work, you can help fund further development through the [GitHub Sponsors Program](https://github.com/sponsors/lukehutch).\n\n<a href=\"https://github.com/sponsors/lukehutch\"><img src=\"https://github.blog/wp-content/uploads/2019/05/mona-heart-featured.png\" height=\"140\"></a>\n\n## Acknowledgments\n\nClassGraph would not be possible without contributions from numerous users, including in the form of bug reports, feature requests, code contributions, and assistance with testing.\n\n## Alternatives\n\nSome other classpath scanning mechanisms include:\n\n* [Reflections](https://github.com/ronmamo/reflections)\n* [Corn Classpath Scanner](https://sites.google.com/site/javacornproject/corn-cps)\n* [annotation-detector](https://github.com/rmuller/infomas-asl/tree/master/annotation-detector)\n* [Scannotation](http://scannotation.sourceforge.net/)\n* [Sclasner](https://github.com/xitrum-framework/sclasner)\n* [Annovention](https://github.com/ngocdaothanh/annovention)\n* [ClassIndex](https://github.com/atteo/classindex) (compiletime annotation scanner/processor)\n* [Jandex](https://github.com/wildfly/Jandex) (Java annotation indexer, part of Wildfly)\n* [Spring](http://spring.io/) has built-in classpath scanning\n* [Hibernate](http://hibernate.org/) has the class [`org.hibernate.ejb.packaging.Scanner`](https://www.programcreek.com/java-api-examples/index.php?api=org.hibernate.ejb.packaging.Scanner).\n* [extcos -- the Extended Component Scanner](https://sourceforge.net/projects/extcos/)\n* [Javassist](http://jboss-javassist.github.io/javassist/)\n* [ObjectWeb ASM](http://asm.ow2.org/)\n* [QDox](https://github.com/paul-hammant/qdox), a fast Java source parser and indexer\n* [bndtools](https://github.com/bndtools/bnd), which is able to [\"crawl\"/parse the bytecode of class files](https://github.com/bndtools/bnd/blob/master/biz.aQute.bndlib/src/aQute/bnd/osgi/Clazz.java) to find all imports/dependencies, among other things.\n* [coffea](https://github.com/sbilinski/coffea), a command line tool and Python library for analyzing static dependences in Java bytecode\n* [org.clapper.classutil.ClassFinder](https://github.com/bmc/classutil/blob/master/src/main/scala/org/clapper/classutil/ClassFinder.scala)\n* [com.google.common.reflect.ClassPath](https://github.com/google/guava/blob/master/guava/src/com/google/common/reflect/ClassPath.java)\n* [jdependency](https://github.com/tcurdt/jdependency)\n* [Burningwave Core](https://github.com/burningwave/core#burningwave-core-)\n\n## License\n\n**The MIT License (MIT)**\n\n**Copyright (c) 2022 Luke Hutchison**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 9.8330078125,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Maven Start Up Batch script\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   M2_HOME - location of maven2's installed home dir\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ] ; then\n\n  if [ -f /etc/mavenrc ] ; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ] ; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false;\ndarwin=false;\nmingw=false\ncase \"`uname`\" in\n  CYGWIN*) cygwin=true ;;\n  MINGW*) mingw=true;;\n  Darwin*) darwin=true\n    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n    if [ -z \"$JAVA_HOME\" ]; then\n      if [ -x \"/usr/libexec/java_home\" ]; then\n        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n      else\n        export JAVA_HOME=\"/Library/Java/Home\"\n      fi\n    fi\n    ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  if [ -r /etc/gentoo-release ] ; then\n    JAVA_HOME=`java-config --jre-home`\n  fi\nfi\n\nif [ -z \"$M2_HOME\" ] ; then\n  ## resolve links - $0 may be a link to maven's home\n  PRG=\"$0\"\n\n  # need this for relative symlinks\n  while [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n      PRG=\"$link\"\n    else\n      PRG=\"`dirname \"$PRG\"`/$link\"\n    fi\n  done\n\n  saveddir=`pwd`\n\n  M2_HOME=`dirname \"$PRG\"`/..\n\n  # make it fully qualified\n  M2_HOME=`cd \"$M2_HOME\" && pwd`\n\n  cd \"$saveddir\"\n  # echo Using m2 at $M2_HOME\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw ; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"`which javac`\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=`which readlink`\n    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n      if $darwin ; then\n        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n      else\n        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n      fi\n      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"`which java`\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ] ; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\"\nfi\n\nCLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n\n  if [ -z \"$1\" ]\n  then\n    echo \"Path not specified to find_maven_basedir\"\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ] ; do\n    if [ -d \"$wdir\"/.mvn ] ; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=`cd \"$wdir/..\"; pwd`\n    fi\n    # end of workaround\n  done\n  echo \"${basedir}\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n  fi\n}\n\nBASE_DIR=`find_maven_basedir \"$(pwd)\"`\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1;\nfi\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nif [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n    fi\nelse\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n    fi\n    if [ -n \"$MVNW_REPOURL\" ]; then\n      jarUrl=\"$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    else\n      jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    fi\n    while IFS=\"=\" read key value; do\n      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n      esac\n    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n    if [ \"$MVNW_VERBOSE\" = true ]; then\n      echo \"Downloading from: $jarUrl\"\n    fi\n    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n    if $cygwin; then\n      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n    fi\n\n    if command -v wget > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found wget ... using wget\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            wget \"$jarUrl\" -O \"$wrapperJarPath\"\n        else\n            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\"\n        fi\n    elif command -v curl > /dev/null; then\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Found curl ... using curl\"\n        fi\n        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        else\n            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n        fi\n\n    else\n        if [ \"$MVNW_VERBOSE\" = true ]; then\n          echo \"Falling back to using Java to download\"\n        fi\n        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n        # For Cygwin, switch paths to Windows format before running javac\n        if $cygwin; then\n          javaClass=`cygpath --path --windows \"$javaClass\"`\n        fi\n        if [ -e \"$javaClass\" ]; then\n            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n                fi\n                # Compiling the Java class\n                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n            fi\n            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n                # Running the downloader\n                if [ \"$MVNW_VERBOSE\" = true ]; then\n                  echo \" - Running MavenWrapperDownloader.java ...\"\n                fi\n                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n            fi\n        fi\n    fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\nexport MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nif [ \"$MVNW_VERBOSE\" = true ]; then\n  echo $MAVEN_PROJECTBASEDIR\nfi\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$M2_HOME\" ] &&\n    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n  [ -n \"$JAVA_HOME\" ] &&\n    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n  [ -n \"$CLASSPATH\" ] &&\n    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 6.4521484375,
          "content": "@REM ----------------------------------------------------------------------------\n@REM Licensed to the Apache Software Foundation (ASF) under one\n@REM or more contributor license agreements.  See the NOTICE file\n@REM distributed with this work for additional information\n@REM regarding copyright ownership.  The ASF licenses this file\n@REM to you under the Apache License, Version 2.0 (the\n@REM \"License\"); you may not use this file except in compliance\n@REM with the License.  You may obtain a copy of the License at\n@REM\n@REM    http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing,\n@REM software distributed under the License is distributed on an\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@REM KIND, either express or implied.  See the License for the\n@REM specific language governing permissions and limitations\n@REM under the License.\n@REM ----------------------------------------------------------------------------\n\n@REM ----------------------------------------------------------------------------\n@REM Maven Start Up Batch script\n@REM\n@REM Required ENV vars:\n@REM JAVA_HOME - location of a JDK home dir\n@REM\n@REM Optional ENV vars\n@REM M2_HOME - location of maven2's installed home dir\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n@REM     e.g. to debug Maven itself, use\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n@REM ----------------------------------------------------------------------------\n\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n@echo off\n@REM set title of command window\ntitle %0\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n\n@REM set %HOME% to equivalent of $HOME\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n\n@REM Execute a user defined script before this one\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\nif exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n:skipRcPre\n\n@setlocal\n\nset ERROR_CODE=0\n\n@REM To isolate internal variables from possible post scripts, we use another setlocal\n@setlocal\n\n@REM ==== START VALIDATION ====\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\n\necho.\necho Error: JAVA_HOME not found in your environment. >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n:OkJHome\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n\necho.\necho Error: JAVA_HOME is set to an invalid directory. >&2\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\necho Please set the JAVA_HOME variable in your environment to match the >&2\necho location of your Java installation. >&2\necho.\ngoto error\n\n@REM ==== END VALIDATION ====\n\n:init\n\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n@REM Fallback to current working directory if not found.\n\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n\nset EXEC_DIR=%CD%\nset WDIR=%EXEC_DIR%\n:findBaseDir\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\ncd ..\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\nset WDIR=%CD%\ngoto findBaseDir\n\n:baseDirFound\nset MAVEN_PROJECTBASEDIR=%WDIR%\ncd \"%EXEC_DIR%\"\ngoto endDetectBaseDir\n\n:baseDirNotFound\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\ncd \"%EXEC_DIR%\"\n\n:endDetectBaseDir\n\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n\n@setlocal EnableExtensions EnableDelayedExpansion\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n\n:endReadAdditionalConfig\n\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\nset DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n\nFOR /F \"tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\n)\n\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\nif exist %WRAPPER_JAR% (\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Found %WRAPPER_JAR%\n    )\n) else (\n    if not \"%MVNW_REPOURL%\" == \"\" (\n        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n    )\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n        echo Downloading from: %DOWNLOAD_URL%\n    )\n\n    powershell -Command \"&{\"^\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n\t\t\"}\"^\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\n\t\t\"}\"\n    if \"%MVNW_VERBOSE%\" == \"true\" (\n        echo Finished downloading %WRAPPER_JAR%\n    )\n)\n@REM End of extension\n\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\n@REM work with both Windows and non-Windows executions.\nset MAVEN_CMD_LINE_ARGS=%*\n\n%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\nif ERRORLEVEL 1 goto error\ngoto end\n\n:error\nset ERROR_CODE=1\n\n:end\n@endlocal & set ERROR_CODE=%ERROR_CODE%\n\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\nif exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\nif exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n:skipRcPost\n\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\nif \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n\nif \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n\nexit /B %ERROR_CODE%\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 29.7783203125,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>io.github.classgraph</groupId>\n    <artifactId>classgraph</artifactId>\n    <version>4.8.180-SNAPSHOT</version>\n    <name>ClassGraph</name>\n\n    <description>The uber-fast, ultra-lightweight classpath and module scanner for JVM languages.</description>\n\n    <url>https://github.com/classgraph/classgraph</url>\n\n    <licenses>\n        <license>\n            <name>The MIT License (MIT)</name>\n            <url>http://opensource.org/licenses/MIT</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <name>Luke Hutchison</name>\n            <email>luke.hutch@gmail.com</email>\n            <organization>ClassGraph</organization>\n            <organizationUrl>https://github.com/classgraph</organizationUrl>\n        </developer>\n    </developers>\n\n    <scm>\n        <connection>scm:git:git@github.com:classgraph/classgraph.git</connection>\n        <developerConnection>scm:git:git@github.com:classgraph/classgraph.git</developerConnection>\n        <url>https://github.com/classgraph/classgraph</url>\n        <tag>classgraph-4.8.179</tag>\n    </scm>\n\n    <issueManagement>\n        <url>https://github.com/classgraph/classgraph/issues</url>\n    </issueManagement>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <properties>\n        <!-- Set UTF-8 encoding for Maven plugins and output -->\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\n        <!-- Default to generating Javadoc in HTML 4.01 format -->\n        <javadoc.html.version />\n\n        <!-- Warnings are disabled, in order to suppress warning about bootstrap classpath not being set -->\n        <!-- (which arises as a result of building for JDK 7 on JDK8+, allowing for use of @FunctionalInterface) -->\n        <!-- <maven.compiler.showWarnings>true</maven.compiler.showWarnings> -->\n        <!-- <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation> -->\n    </properties>\n\n    <!-- Find dependency updates with: ./mvnw versions:display-dependency-updates -->\n    <dependencies>\n        <!-- Optional runtime dependency: -->\n        <dependency>\n            <groupId>io.github.toolfactory</groupId>\n            <artifactId>narcissus</artifactId>\n            <version>1.0.7</version>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>io.github.toolfactory</groupId>\n            <artifactId>jvm-driver</artifactId>\n            <version>9.7.1</version>\n            <optional>true</optional>\n        </dependency>\n\n        <!-- Test dependencies: -->\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.10.2</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.openjdk.jmh</groupId>\n            <artifactId>jmh-core</artifactId>\n            <version>1.37</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.openjdk.jmh</groupId>\n            <artifactId>jmh-generator-annprocess</artifactId>\n            <version>1.37</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>3.25.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.enterprise</groupId>\n            <artifactId>cdi-api</artifactId>\n            <version>2.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.ops4j.pax.url</groupId>\n            <artifactId>pax-url-aether</artifactId>\n            <version>2.6.14</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>2.0.13</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-jdk14</artifactId>\n            <version>2.0.13</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate.javax.persistence</groupId>\n            <artifactId>hibernate-jpa-2.1-api</artifactId>\n            <version>1.0.2.Final</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.google.jimfs</groupId>\n            <artifactId>jimfs</artifactId>\n            <version>1.3.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.validation</groupId>\n            <artifactId>jakarta.validation-api</artifactId>\n            <version>3.0.2</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- \"provided\" dependencies (soft compile-time dependencies that do not create a runtime dependency): -->\n\n        <dependency>\n            <!-- Needed for Eclipse nullability analysis to work, but use \"provided\" as the scope so that we -->\n            <!-- don't add a hard dependency on the JDT annotations, because we don't use the annotations in -->\n            <!-- any of the ClassGraph code, so these annotations are not needed at runtime. -->\n            <!-- See: https://bugs.eclipse.org/bugs/show_bug.cgi?id=552198 -->\n            <groupId>org.eclipse.jdt</groupId>\n            <artifactId>org.eclipse.jdt.annotation</artifactId>\n            <version>2.3.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!-- Plugins are listed here, but configured in pluginManagement, for compatibility with Eclipse. -->\n            <!-- See: https://stackoverflow.com/a/10483284/3950982 -->\n            <!-- Find plugin updates with: ./mvnw versions:display-plugin-updates -->\n            <!-- List order of plugin execution with: ./mvnw -Prelease fr.jcgay.maven.plugins:buildplan-maven-plugin:list-phase -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-enforcer-plugin</artifactId>\n                <version>3.4.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <version>3.3.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.13.0</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>3.2.5</version>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>build-helper-maven-plugin</artifactId>\n                <version>3.5.0</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.4.0</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <version>3.1.0</version>                <!--$NO-MVN-MAN-VER$ -->\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>3.3.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>3.6.3</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>3.2.3</version>\n            </plugin>\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.13</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-release-plugin</artifactId>\n                <version>3.0.1</version>\n            </plugin>\n\n            <!-- Override versions of the following plugins, inherited from the super-pom, with latest versions -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-clean-plugin</artifactId>\n                <version>3.3.2</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <version>3.1.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-install-plugin</artifactId>\n                <version>3.1.1</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-site-plugin</artifactId>\n                <version>3.12.1</version>\n            </plugin>\n        </plugins>\n\n        <pluginManagement>\n            <plugins>\n                <!-- Enforce minimum Maven version, and JDK 7 API -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-enforcer-plugin</artifactId>\n                    <dependencies>\n                        <dependency>\n                            <groupId>org.codehaus.mojo</groupId>\n                            <artifactId>animal-sniffer-enforcer-rule</artifactId>\n                            <version>1.23</version>\n                        </dependency>\n                    </dependencies>\n                    <executions>\n                        <!-- Require Maven version. -->\n                        <execution>\n                            <id>enforce-versions</id>\n                            <phase>validate</phase>\n                            <goals>\n                                <goal>enforce</goal>\n                            </goals>\n                            <configuration>\n                                <rules>\n                                    <requireMavenVersion>\n                                        <version>[3.6.3,)</version>\n                                    </requireMavenVersion>\n                                </rules>\n                            </configuration>\n                        </execution>\n                        <!-- Check main project for compatibility with JDK 7 API -->\n                        <execution>\n                            <id>check-signatures</id>\n                            <phase>compile</phase>\n                            <goals>\n                                <goal>enforce</goal>\n                            </goals>\n                            <configuration>\n                                <rules>\n                                    <checkSignatureRule implementation=\"org.codehaus.mojo.animal_sniffer.enforcer.CheckSignatureRule\">\n                                        <signature>\n                                            <groupId>org.codehaus.mojo.signature</groupId>\n                                            <artifactId>java17</artifactId>\n                                            <version>1.0</version>\n                                        </signature>\n                                    </checkSignatureRule>\n                                </rules>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-resources-plugin</artifactId>\n                    <executions>\n                        <!-- Copy LICENSE-ClassGraph.txt to build root -->\n                        <execution>\n                            <id>copy-license-to-target</id>\n                            <phase>process-resources</phase>\n                            <goals>\n                                <goal>copy-resources</goal>\n                            </goals>\n                            <configuration>\n                                <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n                                <resources>\n                                    <resource>\n                                        <directory>${basedir}</directory>\n                                        <filtering>false</filtering>\n                                        <includes>\n                                            <include>LICENSE-ClassGraph.txt</include>\n                                        </includes>\n                                    </resource>\n                                </resources>\n                            </configuration>\n                        </execution>\n                        <execution>\n                            <id>copy-license-to-javadocs</id>\n                            <phase>process-resources</phase>\n                            <goals>\n                                <goal>copy-resources</goal>\n                            </goals>\n                            <configuration>\n                                <outputDirectory>${project.build.directory}/apidocs</outputDirectory>\n                                <resources>\n                                    <resource>\n                                        <directory>${basedir}</directory>\n                                        <filtering>false</filtering>\n                                        <includes>\n                                            <include>LICENSE-ClassGraph.txt</include>\n                                        </includes>\n                                    </resource>\n                                </resources>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-antrun-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <!-- Put module-info.class in META-INF/versions/9 to maximize backwards -->\n                            <!-- compatibility. This has to be done after the jar is created, since -->\n                            <!-- module-info.class cannot be copied to the target directory, otherwise -->\n                            <!-- this build or the following incremental build will cause Animal Sniffer -->\n                            <!-- to fail, since it depends upon ASM 5, which balks when it hits -->\n                            <!-- module-info.class with: \"Execution check-signatures of goal -->\n                            <!-- org.apache.maven.plugins:maven-enforcer-plugin:3.0.0-M3:enforce failed: -->\n                            <!-- This feature requires ASM6\". -->\n                            <id>add-module-info-to-jar</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>run</goal>\n                            </goals>\n                            <configuration>\n                                <target>\n                                    <jar update=\"true\" destfile=\"${project.build.directory}/${project.build.finalName}.jar\">\n                                        <zipfileset prefix=\"META-INF/versions/9\" dir=\"${project.basedir}/src/module-info/io.github.classgraph\" includes=\"module-info.class\" />\n                                    </jar>\n                                </target>\n                            </configuration>\n                        </execution>\n                        <execution>\n                            <!-- Make duplicate copy of Javadoc into a subdirectory with the name of the module, -->\n                            <!-- since Eclipse (and possibly other tools) detects the presence of the module -->\n                            <!-- descriptor, and expects the Javadoc files to use modular paths (#583). -->\n                            <!-- Needs to happen before maven-gpg-plugin runs, otherwise signature will be invalid. -->\n                            <id>add-modular-javadoc</id>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>run</goal>\n                            </goals>\n                            <configuration>\n                                <target>\n                                    <jar update=\"true\" destfile=\"${project.build.directory}/${project.build.finalName}-javadoc.jar\">\n                                        <zipfileset prefix=\"io.github.classgraph\" dir=\"${project.build.directory}/apidocs\" includes=\"**/*\" />\n                                    </jar>\n                                </target>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- Compile sources (main for JDK 7, test for JDK 8) -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <configuration>\n                        <encoding>UTF-8</encoding>\n                        <!-- Can't use \"release\" option, because ClassGraph needs to be built in JDK 7 -->\n                        <!-- compatibility mode, and the @FunctionalInterface annotation was not available -->\n                        <!-- in JDK 7. If building with \"source\" and \"target\" switches, unknown annotations -->\n                        <!-- compile fine as long as they exist in the compiling JDK (in this case, JDK 8+). -->\n                        <!-- Missing annotations don't trigger a linkage error or ClassNotFoundException -->\n                        <!-- unless the annotation is actually read. -->\n                        <!-- However, note that not explicitly specifying a JDK 7 rt.jar as the bootstrap -->\n                        <!-- classpath (in order to build on a newer JDK, which does have @FunctionalInterface) -->\n                        <!-- will lead to the following build-time warning, if maven.compiler.showWarnings -->\n                        <!-- is set to true: -->\n                        <!-- \"[WARNING] bootstrap class path not set in conjunction with -source 7\" -->\n                        <!-- TODO: JDK 7 is no longer supported as of JDK 20. -->\n                        <source>7</source>\n                        <target>7</target>\n                        <!-- Tests use recent JDK features -->\n                        <testSource>8</testSource>\n                        <testTarget>8</testTarget>\n                        <useIncrementalCompilation>false</useIncrementalCompilation>\n                        <compilerArgs>\n                            <arg>-Xlint:all</arg>                            <!-- Max lint -->\n                            <arg>-Xlint:-options</arg>                            <!-- Remove warnings about JDK7 being deprecated sometime -->\n                            <arg>-Werror</arg>                            <!-- Stop on warnings -->\n                        </compilerArgs>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>default-testCompile</id>\n                            <phase>test-compile</phase>\n                            <goals>\n                                <goal>testCompile</goal>\n                            </goals>\n                            <configuration>\n                                <encoding>UTF-8</encoding>\n                                <!-- Tests use recent JDK features -->\n                                <source>8</source>\n                                <target>8</target>\n                                <compilerArgs>\n                                    <arg>-parameters</arg>\n                                </compilerArgs>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- Execute unit tests -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                </plugin>\n\n                <!-- Add src/test/perf to test sources -->\n                <plugin>\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>build-helper-maven-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>add-test-source</id>\n                            <phase>generate-test-sources</phase>\n                            <goals>\n                                <goal>add-test-source</goal>\n                            </goals>\n                            <configuration>\n                                <sources>\n                                    <source>src/test/perf</source>\n                                </sources>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- Create binary jar -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-jar-plugin</artifactId>\n                    <configuration>\n                        <forceCreation>true</forceCreation>\n                        <archive>\n                            <forced>true</forced>\n                            <manifest>\n                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>\n                            </manifest>\n                            <manifestEntries>\n                                <!-- Add OSGi bundle attributes to manifest -->\n                                <Bundle-Category>Utilities</Bundle-Category>\n                                <Bundle-License>http://opensource.org/licenses/MIT</Bundle-License>\n                                <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n                                <Bundle-Name>ClassGraph</Bundle-Name>\n                                <Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>\n                                <Bundle-Vendor>Luke Hutchison</Bundle-Vendor>\n                                <Bundle-Description>${project.description}</Bundle-Description>\n                                <Bundle-Version>${project.version}</Bundle-Version>\n                                <Require-Capability>osgi.ee;filter:=\"(&amp;(osgi.ee=JavaSE)(version=1.7))\"</Require-Capability>\n                                <Export-Package>io.github.classgraph;version=\"${project.version}\"</Export-Package>\n                                <!-- Make sure \"requires\" entries in the module descriptor match these imports: -->\n                                <!-- src/main/module-info/io.github.classgraph/module-info.java -->\n                                <Import-Package>javax.xml.xpath,javax.xml.namespace,javax.xml.parsers,org.w3c.dom,sun.misc;resolution:=\"optional\",sun.nio.ch;resolution:=\"optional\",io.github.toolfactory.narcissus;resolution:=\"optional\",io.github.toolfactory.jvm;resolution:=\"optional\"</Import-Package>\n                                <!-- Add the same module dependencies that are specified in module-info.java -->\n                                <Dependencies>java.xml,jdk.unsupported,java.management,java.logging</Dependencies>\n                                <!-- This is a multi-release jar, since module-info.class will be added to -->\n                                <!-- META-INF/versions/9 , so we need to set the Multi-Release entry to true -->\n                                <Multi-Release>true</Multi-Release>\n                            </manifestEntries>\n                        </archive>\n                    </configuration>\n                </plugin>\n\n                <!-- Create source jar -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-source-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>attach-sources</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar-no-fork</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- Create Javadoc jar -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-javadoc-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>attach-javadocs</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>jar</goal>\n                            </goals>\n                            <configuration>\n                                <source>8</source>\n                                <additionalOptions>${javadoc.html.version}</additionalOptions>\n                                <doclint>all</doclint>\n                                <excludePackageNames>nonapi.*</excludePackageNames>\n                                <show>public</show>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <!-- Stage jars on Sonatype Nexus -->\n                <!-- See: http://java.dzone.com/articles/deploy-maven-central -->\n                <!-- and: http://central.sonatype.org/pages/apache-maven.html -->\n                <plugin>\n                    <groupId>org.sonatype.plugins</groupId>\n                    <artifactId>nexus-staging-maven-plugin</artifactId>\n                    <extensions>true</extensions>\n                    <configuration>\n                        <serverId>ossrh</serverId>\n                        <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                        <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                        <stagingProgressTimeoutMinutes>10</stagingProgressTimeoutMinutes>\n                    </configuration>\n                </plugin>\n\n                <!-- Deploy jars -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-release-plugin</artifactId>\n                    <configuration>\n                        <autoVersionSubmodules>true</autoVersionSubmodules>\n                        <!-- Activate release profile -->\n                        <releaseProfiles>release</releaseProfiles>\n                        <!-- Work around bug where releaseProfiles tag doesn't actually work yet -->\n                        <arguments>-Prelease</arguments>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n    <profiles>\n        <!-- Compile Javadoc to HTML5 if building with JDK 9+ -->\n        <profile>\n            <id>jdk9plus</id>\n            <properties>\n                <javadoc.html.version>-html5</javadoc.html.version>\n                <!-- coverall version 4.3.0 does not work with java 9. -->\n                <!-- See: https://github.com/trautonen/coveralls-maven-plugin/issues/112 -->\n                <coveralls.skip>true</coveralls.skip>\n            </properties>\n            <activation>\n                <jdk>[9,)</jdk>\n            </activation>\n        </profile>\n\n        <!-- Sign jars for release (./mvnw clean release:prepare release:perform) -->\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <configuration>\n                            <gpgArguments>\n                                <arg>--pinentry-mode</arg>\n                                <arg>loopback</arg>\n                            </gpgArguments>\n                            <keyname>${gpg.keyname}</keyname>\n                            <passphraseServerId>${gpg.keyname}</passphraseServerId>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>sign-artifacts</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}