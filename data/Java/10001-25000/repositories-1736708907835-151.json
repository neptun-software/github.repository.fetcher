{
  "metadata": {
    "timestamp": 1736708907835,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "square/javapoet",
      "stars": 10843,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": ".classpath\n.project\n.settings\n.checkstyle\neclipsebin\n\nbin\ngen\nbuild\nout\nlib\n\ntarget\npom.xml.*\nrelease.properties\n\n.idea\n*.iml\nclasses\n\nobj\n\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.2578125,
          "content": "Change Log\n==========\n\nJavaPoet 1.13.0 *(2020-06-18)*\n-----------------------------\n\n * New: Add support for explicit receiver parameters.\n * Fix: Don't copy parameter annotations when creating a `ParameterSpec`.\n\n\nJavaPoet 1.12.1 *(2020-01-20)*\n-----------------------------\n\n * Fix: Ignore parameter annotations in `MethodSpec.overriding()`.\n\n\nJavaPoet 1.12.0 *(2020-01-09)*\n-----------------------------\n\n * New: Add `JavaFile.writeToPath()` and `JavaFile.writeToFile()` methods that return paths to the \n   generated file as `Path` and `File` respectively.\n * New: Add `TypeSpec.alwaysQualify()` API to avoid clashes involving nested type names.\n * New: Add overloads accepting `CodeBlock`s to `MethodSpec`'s control flow methods.\n * New: Make list fields of all `Builder` types mutable.\n * New: Add `CodeBlock.clear()`.\n * New: Allow passing a custom `Charset` to `JavaFile.writeTo()`.\n * New: Improved performance of `ClassName.simpleNames()` by memoizing results.\n * New: Significant performance improvements for `CodeWriter.resolve()` as all nested simple names \n   of a `TypeSpec` get pre-computed.\n * New: Add `TypeName.Builder.setName()` to allow overriding names passed in the constructor.\n * New: Add `TypeName.canonicalName()`.\n * Fix: Use `\\\\R` instead of `\\n` as line separator in `CodeWriter.emitAndIndent()`.\n * Fix: Copy originating elements in `TypeSpec.toBuilder()`.\n * Fix: Ensure trailing newlines in Javadocs and method bodies.\n * Fix: Copy annotations when creating a `ParameterSpec` from a `VariableElement`.\n * Fix: Properly handle classes located in empty packages in `ClassName`.\n * Fix: Only allow `final` modifier on a `ParameterSpec`.\n * Fix: Use fully-qualified names for type names that are masked by type variable names.\n\n\nJavaPoet 1.11.1 *(2018-05-16)*\n-----------------------------\n\n * Fix: JavaPoet 1.11 had a regression where `TypeName.get()` would throw on error types, masking\n   other errors in an annotation processing round. This is fixed with a test to prevent future\n   regressions!\n\n\nJavaPoet 1.11.0 *(2018-04-29)*\n-----------------------------\n\n * New: Support `TYPE_USE` annotations on each enclosing `ClassName`.\n * New: Work around a compiler bug in `TypeName.get(TypeElement)`. There was a problem getting an\n   element's kind when building from source ABIs.\n\n\nJavaPoet 1.10.0 *(2018-01-27)*\n-----------------------------\n\n * **JavaPoet now requires Java 8 or newer.**\n * New: `$Z` as an optional newline (zero-width space) if a line may exceed 100 chars.\n * New: `CodeBlock.join()` and `CodeBlock.joining()` let you join codeblocks by delimiters.\n * New: Add `CodeBlock.Builder.isEmpty()`.\n * New: `addStatement(CodeBlock)` overloads for `CodeBlock` and `MethodSpec`.\n * Fix: Include annotations when emitting type variables.\n * Fix: Use the right imports for annotated type parameters.\n * Fix: Don't incorrectly escape classnames that start with `$`.\n\n\nJavaPoet 1.9.0 *(2017-05-13)*\n-----------------------------\n\n * Fix: Don't emit incorrect code when the declared type's signature references another type with\n   the same simple name.\n * Fix: Support anonymous inner classes in `ClassName.get()`.\n * New: `MethodSpec.Builder.addNamedCode()` and `TypeSpec.anonymousClassBuilder(CodeBlock)`.\n\n\nJavaPoet 1.8.0 *(2016-11-09)*\n-----------------------------\n\n * New: Basic support for line wrapping. Use `$W` to insert a Wrappable Whitespace character. It'll\n   emit either a single space or a newline with appropriate indentation.\n * New: Named arguments in `CodeBlock`. These are intended to make larger code snippets easier to\n   read:\n\n   ```\n    Map<String, Object> map = new LinkedHashMap<>();\n    map.put(\"count\", 3);\n    map.put(\"greeting\", \"Hello, \");\n    map.put(\"system\", System.class);\n\n    String template = \"\"\n        + \"for (int i = 0; i < $count:L; i++) {\\n\"\n        + \"  $system:T.out.println($greeting:S + list.get(i));\\n\"\n        + \"}\\n\";\n\n    CodeBlock.Builder builder = CodeBlock.builder();\n    builder.addNamed(template, map);\n   ```\n\n * New: `addJavadoc(CodeBlock)` overloads for TypeSpec, MethodSpec, and FieldSpec.\n * New: `MethodSpec.addComment()` makes it easy to add a `// single-line comment.`\n * New: `ClassName.getReflectionName()` returns a string like `java.util.Map$Entry`.\n * Fix: Always write UTF-8. Previously JavaPoet would use the system default charset which was\n   potentially inconsistent across environments.\n * Fix: Permit (constant) fields to be defined in annotation types.\n\n\nJavaPoet 1.7.0 *(2016-04-26)*\n-----------------------------\n\n * New: Support parameterized types that enclose other types, like `Outer<String>.Inner`.\n * New: `TypeName.isBoxedPrimitive()`.\n\n\nJavaPoet 1.6.1 *(2016-03-21)*\n-----------------------------\n\n * Fix: Double quotes and backslashes in string literals were not properly quoted in 1.6.0. This is\n   now fixed.\n\n\nJavaPoet 1.6.0 *(2016-03-19)*\n-----------------------------\n\n * New: Revive `CodeBlock.of()`, a handy factory method for building code blocks.\n * New: Add `TypeSpec` factory methods that take a `ClassName`.\n * New: `TypeName.annotated()` adds an annotation to a type.\n * New: `TypeVariableName.withBounds()` adds bounds to a type variable.\n * New: `TypeSpec.Builder.addInitializerBlock()` adds an instance initializer.\n * Fix: Make `TypeSpec.Kind` enum public. This can be used to check if a `TypeSpec` is a class,\n   interface, enum, or annotation.\n * Fix: Donâ€™t break import resolution on annotated types.\n * Fix: Forbid unexpected modifiers like `private` on annotation members.\n * Fix: Deduplicate exceptions in `MethodSpec.Builder`.\n * Fix: Treat `ErrorType` like a regular `DeclaredType` in `TypeName.get()`. This should make it\n   easier to write annotation processors.\n\n\nJavaPoet 1.5.1 *(2016-01-10)*\n-----------------------------\n\n * Fix: Annotated `TypeName` instances are only equal if their annotations are equal.\n\nJavaPoet 1.5.0 *(2016-01-10)*\n-----------------------------\n\n * New: `import static`! See `JavaFile.Builder.addStaticImport()` variants.\n * New: Overload `NameAllocator.newName(String)` for creating a one-off name without a tag.\n * Fix: AnnotationSpec escapes character literals properly.\n * Fix: Don't stack overflow when `TypeVariableName` is part of `ParameterizedTypeName`.\n * Fix: Reporting not used indexed arguments in like `add(\"$1S\", \"a\", \"b\")`.\n * Fix: Prevent import of types located in the default package, i.e. have no package name.\n\n\nJavaPoet 1.4.0 *(2015-11-13)*\n-----------------------------\n\n * New: `AnnotationSpec.get(Annotation)`.\n * New: Type annotations! `TypeName.annotated()` can attach annotations like `@Nullable` directly to\n   types. This works for both top-level types and type parameters as in `List<@Nullable String>`.\n * New: `equals()` and `hashCode()` on `AnnotationSpec`, `CodeBlock`, `FieldSpec`, `JavaFile`,\n   `MethodSpec`, `ParameterSpec`, `TypeName`, and `TypeSpec`.\n * New: `NameAllocator.clone()` to refine a NameAllocator for use in an inner scope code block.\n * Fix: Don't stack overflow when `TypeVariableName` gets a self-referential type.\n * Fix: Better handling of name collisions on imports. Previously JavaPoet did the wrong thing when\n   a referenced type and a nested types had the same name.\n\n\nJavaPoet 1.3.0 *(2015-09-20)*\n-----------------------------\n\n * New: `NameAllocator` API makes it easy to declare non-conflicting names.\n * New: Support annotations on enum values.\n * Fix: Avoid infinite recursion in `TypeName.get(TypeMirror)`.\n * Fix: Use qualified name for conflicting simple names in the same file.\n * Fix: Better messages for parameter indexing errors.\n\n\nJavaPoet 1.2.0 *(2015-07-04)*\n-----------------------------\n\n * New: Arguments may have positional indexes like `$1T` and `$2N`. Indexes can be used to refer to\n   the same argument multiple times in a single format string.\n * New: Permit Javadoc on enum constants.\n * New: Class initializer blocks with `addStaticBlock()`.\n * Fix: `MethodSpec.overriding()` retains annotations.\n\n\nJavaPoet 1.1.0 *(2015-05-25)*\n-----------------------------\n\n * New: Eager validation of argument types like `$T` and `$N`.\n * New: `MethodSpec.varargs(boolean)` to generate varags methods.\n * New: `AnnotationSpec.get()` and `MethodSpec.overriding()` to create annotations and methods from\n   the `javax.lang.model` API.\n * New: `JavaFile.toJavaFileObject()`.\n * New: Java 8 `DEFAULT` modifier.\n * New: `toBuilder()` methods to build upon objects already constructed.\n * New: Generate `@interface` annotation types.\n * New: `TypeName.box()` and `TypeName.unbox()` convenience APIs.\n * Fix: `nextControlFlow()` accepts arguments.\n * Fix: Reject duplicate calls to set the superclass.\n * Fix: `WildcardTypeName.get(WildcardType)` no longer throws a `NullPointerException`.\n * Fix: Don't allow double field initialization.\n\nJavaPoet 1.0.0 *(2015-01-28)*\n-----------------------------\n\n * This update is a complete rewrite. The project name is now `javapoet`. We renamed the it so you\n   can simultaneously use the old JavaWriter API and our new builder-based APIs in one project.\n * Immutable value objects and builders. Instead of streaming the `.java` file from top to bottom,\n   you now define members in whatever way is convenient.\n * We now use our own models for type names.\n * Imports are now added automatically.\n\n\nJavaWriter 2.5.1 *(2014-12-03)*\n-------------------------------\n\n * New: `StringLiteral` type which encapsulates the behavior of `stringLiteral`.\n * Fix: Use canonical name when emitting a class import.\n * Fix: Apply type compression to varargs and array types.\n * Fix: Restore binary compatibility with pre-2.5 versions.\n\n\nJavaWriter 2.5.0 *(2014-04-18)*\n-------------------------------\n\n * New: Methods in interfaces will always have no body declaration.\n * New: Control flow begin declaration now supports String format arguments.\n * Fix: Truncate any generic type when emitting constructors.\n * Fix: Do not emit trailing whitespace after '=' at end-of-line.\n\n\nJavaWriter 2.4.0 *(2014-01-10)*\n-------------------------------\n\n * New: Properly indent hanging lines in field initializers.\n * New: `emitEnumValue` variant which exposes a boolean of whether the current value is the last.\n\n\nJavaWriter 2.3.1 *(2013-12-16)*\n-------------------------------\n\n * Fix: Properly handle subpackages of `java.lang` in `compressType`.\n\n\nJavaWriter 2.3.0 *(2013-11-24)*\n-------------------------------\n\n * New: Configurable indent level via `setIndent`.\n * New: `beginConstructor` method is a semantically clearer alternative for constructors.\n * New: `emitEnumValues` method emits a list of values followed by semicolon.\n * `emitImports` now supports `Class` arguments directly.\n * Previously-deprecated, `int`-based modifier methods have been removed.\n\n\nJavaWriter 2.2.1 *(2013-10-23)*\n-------------------------------\n\n * Fix: Do not emit trailing whitespace for empty Javadoc lines.\n\n\nJavaWriter 2.2.0 *(2013-09-25)*\n-------------------------------\n\n * `setCompressingTypes` controls whether types are emitted as fully-qualified or not.\n\n\nJavaWriter 2.1.2 *(2013-08-23)*\n-------------------------------\n\n * Attempt to keep annotations on a single line.\n\n\nJavaWriter 2.1.1 *(2013-07-23)*\n-------------------------------\n\n * Fix: `stringLiteral` now correctly handles escapes and control characters.\n\n\nJavaWriter 2.1.0 *(2013-07-15)*\n-------------------------------\n\n * New: All methods now take a `Set` of `Modifier`s rather than an `int`. The `int` methods are\n   now deprecated for removal in JavaPoet 1.0.\n * Annotations with a single \"value\" attribute will now omit the key.\n\n\nJavaWriter 2.0.1 *(2013-06-17)*\n-------------------------------\n\n * Correct casing of `emitSingleLineComment`.\n\n\nJavaWriter 2.0.0 *(2013-06-06)*\n-------------------------------\n\n * Package name is now `com.squareup.javawriter`.\n * Support declaring `throws` clause on methods.\n\n\nJavaWriter 1.0.5 *(2013-05-08)*\n-------------------------------\n\n * Fix: Fully qualify types whose simple name matches an import.\n\n\nJavaWriter 1.0.4 *(2013-03-15)*\n-------------------------------\n\n * Fix: Static import emit now properly supports method imports.\n\n\nJavaWriter 1.0.3 *(2013-02-21)*\n-------------------------------\n\n * Add support for emitting static imports.\n\n\nJavaWriter 1.0.2 *(2013-02-11)*\n-------------------------------\n\n * Add `type` API for helping build generic types.\n * Minor performance improvements.\n\n\nJavaWriter 1.0.1 *(2013-02-03)*\n-------------------------------\n\n * Expose `compressType` API.\n\n\nJavaWriter 1.0.0 *(2013-02-01)*\n-------------------------------\n\nInitial release.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.208984375,
          "content": "JavaPoet\n========\n\n`JavaPoet` is a Java API for generating `.java` source files.\n\nSource file generation can be useful when doing things such as annotation processing or interacting\nwith metadata files (e.g., database schemas, protocol formats). By generating code, you eliminate\nthe need to write boilerplate while also keeping a single source of truth for the metadata.\n\n\nDeprecated\n----------\n\nAs of 2020-10-10, Square's JavaPoet project is deprecated. We're proud of our work but we haven't\nkept up on maintaining it.\n\nIf you'd like an alternative that supports the latest Java language features, one option is\n[Palantir's JavaPoet](https://github.com/palantir/javapoet).\n\nTo switch to that project, you'll need new Maven coordinates:\n\n```diff\n- javapoet = { module = \"com.squareup:javapoet\", version = \"1.13.0\" }\n+ javapoet = { module = \"com.palantir.javapoet:javapoet\", version = \"0.5.0\" }\n```\n\nAnd new imports:\n\n```\nsed -i \"\" \\\n  's/com.squareup.javapoet.\\([A-Za-z]*\\)/com.palantir.javapoet.\\1/g' \\\n  `find . -name \"*.kt\" -or -name \"*.java\"`\n```\n\nAnd you might need to track some API changes where fields became functions:\n\n```diff\n- javaFile.packageName\n+ javaFile.packageName()\n```\n\n### Example\n\nHere's a (boring) `HelloWorld` class:\n\n```java\npackage com.example.helloworld;\n\npublic final class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, JavaPoet!\");\n  }\n}\n```\n\nAnd this is the (exciting) code to generate it with JavaPoet:\n\n```java\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\n    .returns(void.class)\n    .addParameter(String[].class, \"args\")\n    .addStatement(\"$T.out.println($S)\", System.class, \"Hello, JavaPoet!\")\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n    .addMethod(main)\n    .build();\n\nJavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n    .build();\n\njavaFile.writeTo(System.out);\n```\n\nTo declare the main method, we've created a `MethodSpec` \"main\" configured with modifiers, return\ntype, parameters and code statements. We add the main method to a `HelloWorld` class, and then add\nthat to a `HelloWorld.java` file.\n\nIn this case we write the file to `System.out`, but we could also get it as a string\n(`JavaFile.toString()`) or write it to the file system (`JavaFile.writeTo()`).\n\nThe [Javadoc][javadoc] catalogs the complete JavaPoet API, which we explore below.\n\n### Code & Control Flow\n\nMost of JavaPoet's API uses plain old immutable Java objects. There's also builders, method chaining\nand varargs to make the API friendly. JavaPoet offers models for classes & interfaces (`TypeSpec`),\nfields (`FieldSpec`), methods & constructors (`MethodSpec`), parameters (`ParameterSpec`) and\nannotations (`AnnotationSpec`).\n\nBut the _body_ of methods and constructors is not modeled. There's no expression class, no\nstatement class or syntax tree nodes. Instead, JavaPoet uses strings for code blocks:\n\n```java\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addCode(\"\"\n        + \"int total = 0;\\n\"\n        + \"for (int i = 0; i < 10; i++) {\\n\"\n        + \"  total += i;\\n\"\n        + \"}\\n\")\n    .build();\n```\n\nWhich generates this:\n\n```java\nvoid main() {\n  int total = 0;\n  for (int i = 0; i < 10; i++) {\n    total += i;\n  }\n}\n```\n\nThe manual semicolons, line wrapping, and indentation are tedious and so JavaPoet offers APIs to\nmake it easier. There's `addStatement()` which takes care of semicolons and newline, and\n`beginControlFlow()` + `endControlFlow()` which are used together for braces, newlines, and\nindentation:\n\n```java\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addStatement(\"int total = 0\")\n    .beginControlFlow(\"for (int i = 0; i < 10; i++)\")\n    .addStatement(\"total += i\")\n    .endControlFlow()\n    .build();\n```\n\nThis example is lame because the generated code is constant! Suppose instead of just adding 0 to 10,\nwe want to make the operation and range configurable. Here's a method that generates a method:\n\n```java\nprivate MethodSpec computeRange(String name, int from, int to, String op) {\n  return MethodSpec.methodBuilder(name)\n      .returns(int.class)\n      .addStatement(\"int result = 1\")\n      .beginControlFlow(\"for (int i = \" + from + \"; i < \" + to + \"; i++)\")\n      .addStatement(\"result = result \" + op + \" i\")\n      .endControlFlow()\n      .addStatement(\"return result\")\n      .build();\n}\n```\n\nAnd here's what we get when we call `computeRange(\"multiply10to20\", 10, 20, \"*\")`:\n\n```java\nint multiply10to20() {\n  int result = 1;\n  for (int i = 10; i < 20; i++) {\n    result = result * i;\n  }\n  return result;\n}\n```\n\nMethods generating methods! And since JavaPoet generates source instead of bytecode, you can\nread through it to make sure it's right.\n\nSome control flow statements, such as `if/else`, can have unlimited control flow possibilities.\nYou can handle those options using `nextControlFlow()`:\n\n```java\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addStatement(\"long now = $T.currentTimeMillis()\", System.class)\n    .beginControlFlow(\"if ($T.currentTimeMillis() < now)\", System.class)\n    .addStatement(\"$T.out.println($S)\", System.class, \"Time travelling, woo hoo!\")\n    .nextControlFlow(\"else if ($T.currentTimeMillis() == now)\", System.class)\n    .addStatement(\"$T.out.println($S)\", System.class, \"Time stood still!\")\n    .nextControlFlow(\"else\")\n    .addStatement(\"$T.out.println($S)\", System.class, \"Ok, time still moving forward\")\n    .endControlFlow()\n    .build();\n```\n\nWhich generates:\n\n```java\nvoid main() {\n  long now = System.currentTimeMillis();\n  if (System.currentTimeMillis() < now)  {\n    System.out.println(\"Time travelling, woo hoo!\");\n  } else if (System.currentTimeMillis() == now) {\n    System.out.println(\"Time stood still!\");\n  } else {\n    System.out.println(\"Ok, time still moving forward\");\n  }\n}\n``` \n\nCatching exceptions using `try/catch` is also a use case for `nextControlFlow()`:\n\n```java\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .beginControlFlow(\"try\")\n    .addStatement(\"throw new Exception($S)\", \"Failed\")\n    .nextControlFlow(\"catch ($T e)\", Exception.class)\n    .addStatement(\"throw new $T(e)\", RuntimeException.class)\n    .endControlFlow()\n    .build();\n```\n\nWhich produces:\n\n```java\nvoid main() {\n  try {\n    throw new Exception(\"Failed\");\n  } catch (Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n```\n\n### $L for Literals\n\nThe string-concatenation in calls to `beginControlFlow()` and `addStatement` is distracting. Too\nmany operators. To address this, JavaPoet offers a syntax inspired-by but incompatible-with\n[`String.format()`][formatter]. It accepts **`$L`** to emit a **literal** value in the output. This\nworks just like `Formatter`'s `%s`:\n\n```java\nprivate MethodSpec computeRange(String name, int from, int to, String op) {\n  return MethodSpec.methodBuilder(name)\n      .returns(int.class)\n      .addStatement(\"int result = 0\")\n      .beginControlFlow(\"for (int i = $L; i < $L; i++)\", from, to)\n      .addStatement(\"result = result $L i\", op)\n      .endControlFlow()\n      .addStatement(\"return result\")\n      .build();\n}\n```\n\nLiterals are emitted directly to the output code with no escaping. Arguments for literals may be\nstrings, primitives, and a few JavaPoet types described below.\n\n### $S for Strings\n\nWhen emitting code that includes string literals, we can use **`$S`** to emit a **string**, complete\nwith wrapping quotation marks and escaping. Here's a program that emits 3 methods, each of which\nreturns its own name:\n\n```java\npublic static void main(String[] args) throws Exception {\n  TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n      .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n      .addMethod(whatsMyName(\"slimShady\"))\n      .addMethod(whatsMyName(\"eminem\"))\n      .addMethod(whatsMyName(\"marshallMathers\"))\n      .build();\n\n  JavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n      .build();\n\n  javaFile.writeTo(System.out);\n}\n\nprivate static MethodSpec whatsMyName(String name) {\n  return MethodSpec.methodBuilder(name)\n      .returns(String.class)\n      .addStatement(\"return $S\", name)\n      .build();\n}\n```\n\nIn this case, using `$S` gives us quotation marks:\n\n```java\npublic final class HelloWorld {\n  String slimShady() {\n    return \"slimShady\";\n  }\n\n  String eminem() {\n    return \"eminem\";\n  }\n\n  String marshallMathers() {\n    return \"marshallMathers\";\n  }\n}\n```\n\n### $T for Types\n\nWe Java programmers love our types: they make our code easier to understand. And JavaPoet is on\nboard. It has rich built-in support for types, including automatic generation of `import`\nstatements. Just use **`$T`** to reference **types**:\n\n```java\nMethodSpec today = MethodSpec.methodBuilder(\"today\")\n    .returns(Date.class)\n    .addStatement(\"return new $T()\", Date.class)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n    .addMethod(today)\n    .build();\n\nJavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n    .build();\n\njavaFile.writeTo(System.out);\n```\n\nThat generates the following `.java` file, complete with the necessary `import`:\n\n```java\npackage com.example.helloworld;\n\nimport java.util.Date;\n\npublic final class HelloWorld {\n  Date today() {\n    return new Date();\n  }\n}\n```\n\nWe passed `Date.class` to reference a class that just-so-happens to be available when we're\ngenerating code. This doesn't need to be the case. Here's a similar example, but this one\nreferences a class that doesn't exist (yet):\n\n```java\nClassName hoverboard = ClassName.get(\"com.mattel\", \"Hoverboard\");\n\nMethodSpec today = MethodSpec.methodBuilder(\"tomorrow\")\n    .returns(hoverboard)\n    .addStatement(\"return new $T()\", hoverboard)\n    .build();\n```\n\nAnd that not-yet-existent class is imported as well:\n\n```java\npackage com.example.helloworld;\n\nimport com.mattel.Hoverboard;\n\npublic final class HelloWorld {\n  Hoverboard tomorrow() {\n    return new Hoverboard();\n  }\n}\n```\n\nThe `ClassName` type is very important, and you'll need it frequently when you're using JavaPoet.\nIt can identify any _declared_ class. Declared types are just the beginning of Java's rich type\nsystem: we also have arrays, parameterized types, wildcard types, and type variables. JavaPoet has\nclasses for building each of these:\n\n```java\nClassName hoverboard = ClassName.get(\"com.mattel\", \"Hoverboard\");\nClassName list = ClassName.get(\"java.util\", \"List\");\nClassName arrayList = ClassName.get(\"java.util\", \"ArrayList\");\nTypeName listOfHoverboards = ParameterizedTypeName.get(list, hoverboard);\n\nMethodSpec beyond = MethodSpec.methodBuilder(\"beyond\")\n    .returns(listOfHoverboards)\n    .addStatement(\"$T result = new $T<>()\", listOfHoverboards, arrayList)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"return result\")\n    .build();\n```\n\nJavaPoet will decompose each type and import its components where possible.\n\n```java\npackage com.example.helloworld;\n\nimport com.mattel.Hoverboard;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class HelloWorld {\n  List<Hoverboard> beyond() {\n    List<Hoverboard> result = new ArrayList<>();\n    result.add(new Hoverboard());\n    result.add(new Hoverboard());\n    result.add(new Hoverboard());\n    return result;\n  }\n}\n```\n\n#### Import static\n\nJavaPoet supports `import static`. It does it via explicitly collecting type member names. Let's\nenhance the previous example with some static sugar:\n\n```java\n...\nClassName namedBoards = ClassName.get(\"com.mattel\", \"Hoverboard\", \"Boards\");\n\nMethodSpec beyond = MethodSpec.methodBuilder(\"beyond\")\n    .returns(listOfHoverboards)\n    .addStatement(\"$T result = new $T<>()\", listOfHoverboards, arrayList)\n    .addStatement(\"result.add($T.createNimbus(2000))\", hoverboard)\n    .addStatement(\"result.add($T.createNimbus(\\\"2001\\\"))\", hoverboard)\n    .addStatement(\"result.add($T.createNimbus($T.THUNDERBOLT))\", hoverboard, namedBoards)\n    .addStatement(\"$T.sort(result)\", Collections.class)\n    .addStatement(\"return result.isEmpty() ? $T.emptyList() : result\", Collections.class)\n    .build();\n\nTypeSpec hello = TypeSpec.classBuilder(\"HelloWorld\")\n    .addMethod(beyond)\n    .build();\n\nJavaFile.builder(\"com.example.helloworld\", hello)\n    .addStaticImport(hoverboard, \"createNimbus\")\n    .addStaticImport(namedBoards, \"*\")\n    .addStaticImport(Collections.class, \"*\")\n    .build();\n```\n\nJavaPoet will first add your `import static` block to the file as configured, match and mangle\nall calls accordingly and also import all other types as needed.\n\n```java\npackage com.example.helloworld;\n\nimport static com.mattel.Hoverboard.Boards.*;\nimport static com.mattel.Hoverboard.createNimbus;\nimport static java.util.Collections.*;\n\nimport com.mattel.Hoverboard;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass HelloWorld {\n  List<Hoverboard> beyond() {\n    List<Hoverboard> result = new ArrayList<>();\n    result.add(createNimbus(2000));\n    result.add(createNimbus(\"2001\"));\n    result.add(createNimbus(THUNDERBOLT));\n    sort(result);\n    return result.isEmpty() ? emptyList() : result;\n  }\n}\n```\n\n### $N for Names\n\nGenerated code is often self-referential. Use **`$N`** to refer to another generated declaration by\nits name. Here's a method that calls another:\n\n```java\npublic String byteToHex(int b) {\n  char[] result = new char[2];\n  result[0] = hexDigit((b >>> 4) & 0xf);\n  result[1] = hexDigit(b & 0xf);\n  return new String(result);\n}\n\npublic char hexDigit(int i) {\n  return (char) (i < 10 ? i + '0' : i - 10 + 'a');\n}\n```\n\nWhen generating the code above, we pass the `hexDigit()` method as an argument to the `byteToHex()`\nmethod using `$N`:\n\n```java\nMethodSpec hexDigit = MethodSpec.methodBuilder(\"hexDigit\")\n    .addParameter(int.class, \"i\")\n    .returns(char.class)\n    .addStatement(\"return (char) (i < 10 ? i + '0' : i - 10 + 'a')\")\n    .build();\n\nMethodSpec byteToHex = MethodSpec.methodBuilder(\"byteToHex\")\n    .addParameter(int.class, \"b\")\n    .returns(String.class)\n    .addStatement(\"char[] result = new char[2]\")\n    .addStatement(\"result[0] = $N((b >>> 4) & 0xf)\", hexDigit)\n    .addStatement(\"result[1] = $N(b & 0xf)\", hexDigit)\n    .addStatement(\"return new String(result)\")\n    .build();\n```\n\n### Code block format strings\n\nCode blocks may specify the values for their placeholders in a few ways. Only one style may be used\nfor each operation on a code block.\n\n#### Relative Arguments\n\nPass an argument value for each placeholder in the format string to `CodeBlock.add()`. In each\nexample, we generate code to say \"I ate 3 tacos\"\n\n```java\nCodeBlock.builder().add(\"I ate $L $L\", 3, \"tacos\")\n```\n\n#### Positional Arguments\n\nPlace an integer index (1-based) before the placeholder in the format string to specify which\n argument to use.\n\n```java\nCodeBlock.builder().add(\"I ate $2L $1L\", \"tacos\", 3)\n```\n\n#### Named Arguments\n\nUse the syntax `$argumentName:X` where `X` is the format character and call `CodeBlock.addNamed()`\nwith a map containing all argument keys in the format string. Argument names use characters in\n`a-z`, `A-Z`, `0-9`, and `_`, and must start with a lowercase character.\n\n```java\nMap<String, Object> map = new LinkedHashMap<>();\nmap.put(\"food\", \"tacos\");\nmap.put(\"count\", 3);\nCodeBlock.builder().addNamed(\"I ate $count:L $food:L\", map)\n```\n\n### Methods\n\nAll of the above methods have a code body. Use `Modifiers.ABSTRACT` to get a method without any\nbody. This is only legal if the enclosing class is either abstract or an interface.\n\n```java\nMethodSpec flux = MethodSpec.methodBuilder(\"flux\")\n    .addModifiers(Modifier.ABSTRACT, Modifier.PROTECTED)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addMethod(flux)\n    .build();\n```\n\nWhich generates this:\n\n```java\npublic abstract class HelloWorld {\n  protected abstract void flux();\n}\n```\n\nThe other modifiers work where permitted. Note that when specifying modifiers, JavaPoet uses\n[`javax.lang.model.element.Modifier`][modifier], a class that is not available on Android. This\nlimitation applies to code-generating-code only; the output code runs everywhere: JVMs, Android,\nand GWT.\n\nMethods also have parameters, exceptions, varargs, Javadoc, annotations, type variables, and a\nreturn type. All of these are configured with `MethodSpec.Builder`.\n\n### Constructors\n\n`MethodSpec` is a slight misnomer; it can also be used for constructors:\n\n```java\nMethodSpec flux = MethodSpec.constructorBuilder()\n    .addModifiers(Modifier.PUBLIC)\n    .addParameter(String.class, \"greeting\")\n    .addStatement(\"this.$N = $N\", \"greeting\", \"greeting\")\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(String.class, \"greeting\", Modifier.PRIVATE, Modifier.FINAL)\n    .addMethod(flux)\n    .build();\n```\n\nWhich generates this:\n\n```java\npublic class HelloWorld {\n  private final String greeting;\n\n  public HelloWorld(String greeting) {\n    this.greeting = greeting;\n  }\n}\n```\n\nFor the most part, constructors work just like methods. When emitting code, JavaPoet will place\nconstructors before methods in the output file.\n\n### Parameters\n\nDeclare parameters on methods and constructors with either `ParameterSpec.builder()` or\n`MethodSpec`'s convenient `addParameter()` API:\n\n```java\nParameterSpec android = ParameterSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.FINAL)\n    .build();\n\nMethodSpec welcomeOverlords = MethodSpec.methodBuilder(\"welcomeOverlords\")\n    .addParameter(android)\n    .addParameter(String.class, \"robot\", Modifier.FINAL)\n    .build();\n```\n\nThough the code above to generate `android` and `robot` parameters is different, the output is the\nsame:\n\n```java\nvoid welcomeOverlords(final String android, final String robot) {\n}\n```\n\nThe extended `Builder` form is necessary when the parameter has annotations (such as `@Nullable`).\n\n### Fields\n\nLike parameters, fields can be created either with builders or by using convenient helper methods:\n\n```java\nFieldSpec android = FieldSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.PRIVATE, Modifier.FINAL)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(android)\n    .addField(String.class, \"robot\", Modifier.PRIVATE, Modifier.FINAL)\n    .build();\n```\n\nWhich generates:\n\n```java\npublic class HelloWorld {\n  private final String android;\n\n  private final String robot;\n}\n```\n\nThe extended `Builder` form is necessary when a field has Javadoc, annotations, or a field\ninitializer. Field initializers use the same [`String.format()`][formatter]-like syntax as the code\nblocks above:\n\n```java\nFieldSpec android = FieldSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.PRIVATE, Modifier.FINAL)\n    .initializer(\"$S + $L\", \"Lollipop v.\", 5.0d)\n    .build();\n```\n\nWhich generates:\n\n```java\nprivate final String android = \"Lollipop v.\" + 5.0;\n```\n\n### Interfaces\n\nJavaPoet has no trouble with interfaces. Note that interface methods must always be `PUBLIC\nABSTRACT` and interface fields must always be `PUBLIC STATIC FINAL`. These modifiers are necessary\nwhen defining the interface:\n\n```java\nTypeSpec helloWorld = TypeSpec.interfaceBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(FieldSpec.builder(String.class, \"ONLY_THING_THAT_IS_CONSTANT\")\n        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)\n        .initializer(\"$S\", \"change\")\n        .build())\n    .addMethod(MethodSpec.methodBuilder(\"beep\")\n        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n        .build())\n    .build();\n```\n\nBut these modifiers are omitted when the code is generated. These are the defaults so we don't need\nto include them for `javac`'s benefit!\n\n```java\npublic interface HelloWorld {\n  String ONLY_THING_THAT_IS_CONSTANT = \"change\";\n\n  void beep();\n}\n```\n\n### Enums\n\nUse `enumBuilder` to create the enum type, and `addEnumConstant()` for each value:\n\n```java\nTypeSpec helloWorld = TypeSpec.enumBuilder(\"Roshambo\")\n    .addModifiers(Modifier.PUBLIC)\n    .addEnumConstant(\"ROCK\")\n    .addEnumConstant(\"SCISSORS\")\n    .addEnumConstant(\"PAPER\")\n    .build();\n```\n\nTo generate this:\n\n```java\npublic enum Roshambo {\n  ROCK,\n\n  SCISSORS,\n\n  PAPER\n}\n```\n\nFancy enums are supported, where the enum values override methods or call a superclass constructor.\nHere's a comprehensive example:\n\n```java\nTypeSpec helloWorld = TypeSpec.enumBuilder(\"Roshambo\")\n    .addModifiers(Modifier.PUBLIC)\n    .addEnumConstant(\"ROCK\", TypeSpec.anonymousClassBuilder(\"$S\", \"fist\")\n        .addMethod(MethodSpec.methodBuilder(\"toString\")\n            .addAnnotation(Override.class)\n            .addModifiers(Modifier.PUBLIC)\n            .addStatement(\"return $S\", \"avalanche!\")\n            .returns(String.class)\n            .build())\n        .build())\n    .addEnumConstant(\"SCISSORS\", TypeSpec.anonymousClassBuilder(\"$S\", \"peace\")\n        .build())\n    .addEnumConstant(\"PAPER\", TypeSpec.anonymousClassBuilder(\"$S\", \"flat\")\n        .build())\n    .addField(String.class, \"handsign\", Modifier.PRIVATE, Modifier.FINAL)\n    .addMethod(MethodSpec.constructorBuilder()\n        .addParameter(String.class, \"handsign\")\n        .addStatement(\"this.$N = $N\", \"handsign\", \"handsign\")\n        .build())\n    .build();\n```\n\nWhich generates this:\n\n```java\npublic enum Roshambo {\n  ROCK(\"fist\") {\n    @Override\n    public String toString() {\n      return \"avalanche!\";\n    }\n  },\n\n  SCISSORS(\"peace\"),\n\n  PAPER(\"flat\");\n\n  private final String handsign;\n\n  Roshambo(String handsign) {\n    this.handsign = handsign;\n  }\n}\n```\n\n### Anonymous Inner Classes\n\nIn the enum code, we used `TypeSpec.anonymousInnerClass()`. Anonymous inner classes can also be used in\ncode blocks. They are values that can be referenced with `$L`:\n\n```java\nTypeSpec comparator = TypeSpec.anonymousClassBuilder(\"\")\n    .addSuperinterface(ParameterizedTypeName.get(Comparator.class, String.class))\n    .addMethod(MethodSpec.methodBuilder(\"compare\")\n        .addAnnotation(Override.class)\n        .addModifiers(Modifier.PUBLIC)\n        .addParameter(String.class, \"a\")\n        .addParameter(String.class, \"b\")\n        .returns(int.class)\n        .addStatement(\"return $N.length() - $N.length()\", \"a\", \"b\")\n        .build())\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addMethod(MethodSpec.methodBuilder(\"sortByLength\")\n        .addParameter(ParameterizedTypeName.get(List.class, String.class), \"strings\")\n        .addStatement(\"$T.sort($N, $L)\", Collections.class, \"strings\", comparator)\n        .build())\n    .build();\n```\n\nThis generates a method that contains a class that contains a method:\n\n```java\nvoid sortByLength(List<String> strings) {\n  Collections.sort(strings, new Comparator<String>() {\n    @Override\n    public int compare(String a, String b) {\n      return a.length() - b.length();\n    }\n  });\n}\n```\n\nOne particularly tricky part of defining anonymous inner classes is the arguments to the superclass\nconstructor. In the above code we're passing the empty string for no arguments:\n`TypeSpec.anonymousClassBuilder(\"\")`. To pass different parameters use JavaPoet's code block\nsyntax with commas to separate arguments.\n\n\n### Annotations\n\nSimple annotations are easy:\n\n```java\nMethodSpec toString = MethodSpec.methodBuilder(\"toString\")\n    .addAnnotation(Override.class)\n    .returns(String.class)\n    .addModifiers(Modifier.PUBLIC)\n    .addStatement(\"return $S\", \"Hoverboard\")\n    .build();\n```\n\nWhich generates this method with an `@Override` annotation:\n\n```java\n  @Override\n  public String toString() {\n    return \"Hoverboard\";\n  }\n```\n\nUse `AnnotationSpec.builder()` to set properties on annotations:\n\n```java\nMethodSpec logRecord = MethodSpec.methodBuilder(\"recordEvent\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addAnnotation(AnnotationSpec.builder(Headers.class)\n        .addMember(\"accept\", \"$S\", \"application/json; charset=utf-8\")\n        .addMember(\"userAgent\", \"$S\", \"Square Cash\")\n        .build())\n    .addParameter(LogRecord.class, \"logRecord\")\n    .returns(LogReceipt.class)\n    .build();\n```\n\nWhich generates this annotation with `accept` and `userAgent` properties:\n\n```java\n@Headers(\n    accept = \"application/json; charset=utf-8\",\n    userAgent = \"Square Cash\"\n)\nLogReceipt recordEvent(LogRecord logRecord);\n```\n\nWhen you get fancy, annotation values can be annotations themselves. Use `$L` for embedded\nannotations:\n\n```java\nMethodSpec logRecord = MethodSpec.methodBuilder(\"recordEvent\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addAnnotation(AnnotationSpec.builder(HeaderList.class)\n        .addMember(\"value\", \"$L\", AnnotationSpec.builder(Header.class)\n            .addMember(\"name\", \"$S\", \"Accept\")\n            .addMember(\"value\", \"$S\", \"application/json; charset=utf-8\")\n            .build())\n        .addMember(\"value\", \"$L\", AnnotationSpec.builder(Header.class)\n            .addMember(\"name\", \"$S\", \"User-Agent\")\n            .addMember(\"value\", \"$S\", \"Square Cash\")\n            .build())\n        .build())\n    .addParameter(LogRecord.class, \"logRecord\")\n    .returns(LogReceipt.class)\n    .build();\n```\n\nWhich generates this:\n\n```java\n@HeaderList({\n    @Header(name = \"Accept\", value = \"application/json; charset=utf-8\"),\n    @Header(name = \"User-Agent\", value = \"Square Cash\")\n})\nLogReceipt recordEvent(LogRecord logRecord);\n```\n\nNote that you can call `addMember()` multiple times with the same property name to populate a list\nof values for that property.\n\n### Javadoc\n\nFields, methods and types can be documented with Javadoc:\n\n```java\nMethodSpec dismiss = MethodSpec.methodBuilder(\"dismiss\")\n    .addJavadoc(\"Hides {@code message} from the caller's history. Other\\n\"\n        + \"participants in the conversation will continue to see the\\n\"\n        + \"message in their own history unless they also delete it.\\n\")\n    .addJavadoc(\"\\n\")\n    .addJavadoc(\"<p>Use {@link #delete($T)} to delete the entire\\n\"\n        + \"conversation for all participants.\\n\", Conversation.class)\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addParameter(Message.class, \"message\")\n    .build();\n```\n\nWhich generates this:\n\n```java\n  /**\n   * Hides {@code message} from the caller's history. Other\n   * participants in the conversation will continue to see the\n   * message in their own history unless they also delete it.\n   *\n   * <p>Use {@link #delete(Conversation)} to delete the entire\n   * conversation for all participants.\n   */\n  void dismiss(Message message);\n```\n\nUse `$T` when referencing types in Javadoc to get automatic imports.\n\nDownload\n--------\n\nDownload [the latest .jar][dl] or depend via Maven:\n```xml\n<dependency>\n  <groupId>com.squareup</groupId>\n  <artifactId>javapoet</artifactId>\n  <version>1.13.0</version>\n</dependency>\n```\nor Gradle:\n```groovy\ncompile 'com.squareup:javapoet:1.13.0'\n```\n\nSnapshots of the development version are available in [Sonatype's `snapshots` repository][snap].\n\n\n\nLicense\n-------\n\n    Copyright 2015 Square, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\nJavaWriter\n==========\n\nJavaPoet is the successor to [JavaWriter][javawriter]. New projects should prefer JavaPoet because\nit has a stronger code model: it understands types and can manage imports automatically. JavaPoet is\nalso better suited to composition: rather than streaming the contents of a `.java` file\ntop-to-bottom in a single pass, a file can be assembled as a tree of declarations.\n\nJavaWriter continues to be available in [GitHub][javawriter] and [Maven Central][javawriter_maven].\n\n\n [dl]: https://search.maven.org/remote_content?g=com.squareup&a=javapoet&v=LATEST\n [snap]: https://oss.sonatype.org/content/repositories/snapshots/com/squareup/javapoet/\n [javadoc]: https://square.github.io/javapoet/1.x/javapoet/\n [javawriter]: https://github.com/square/javapoet/tree/javawriter_2\n [javawriter_maven]: https://search.maven.org/#artifactdetails%7Ccom.squareup%7Cjavawriter%7C2.5.1%7Cjar\n [formatter]: https://developer.android.com/reference/java/util/Formatter.html\n [modifier]: https://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/Modifier.html\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.4580078125,
          "content": "Releasing\n=========\n\n1. Update the CHANGELOG.md for the impending release.\n2. Update the README.md with the new version.\n3. `git commit -am \"Update changelog for X.Y.Z.\"` (where X.Y.Z is the new version).\n4. `mvn-release`.\n    * `What is the release version for \"JavaPoet\"? (com.squareup.javapoet) X.Y.Z:` - hit Enter.\n    * `What is SCM release tag or label for \"JavaPoet\"? (com.squareup.javapoet) javapoet-X.Y.Z:` - hit Enter.\n    * `What is the new development version for \"JavaPoet\"? (com.squareup.javapoet) X.Y.(Z + 1)-SNAPSHOT:` - enter `X.(Y + 1).0-SNAPSHOT`.\n    * Enter your GPG Passphrase when prompted.\n5. Visit Sonatype Nexus and promote the artifact.\n\nIf step 4 or 5 fails:\n\n  * Drop the Sonatype repo, \n  * Fix the problem,\n  * Manully revert the version change in `pom.xml` made by `mvn-release`,\n  * Commit,\n  * And start again at step 4.\n\nPrerequisites\n-------------\n\nIn `~/.m2/settings.xml`, set the following:\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>sonatype-nexus-staging</id>\n      <username>your-nexus-username</username>\n      <password>your-nexus-password</password>\n    </server>\n  </servers>\n</settings>\n```\n\nIn your shell's `.rc` file, set the following:\n\n```\nalias mvn-release='mvn clean source:jar javadoc:jar verify && mvn clean release:clean && mvn release:prepare release:perform'\n```\n\nRefer to the [GPG Keys][gpg_keys] guide if you need to set up GPG keys for signing.\n\n [gpg_keys]: https://square.github.io/okio/releasing/#prerequisite-gpg-keys\n"
        },
        {
          "name": "checkstyle.xml",
          "type": "blob",
          "size": 5.361328125,
          "content": "<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n<module name=\"Checker\">\n  <module name=\"SuppressWarningsFilter\"/>\n  <module name=\"NewlineAtEndOfFile\"/>\n  <module name=\"FileLength\"/>\n  <module name=\"FileTabCharacter\"/>\n\n  <!-- Trailing spaces -->\n  <module name=\"RegexpSingleline\">\n    <property name=\"format\" value=\"\\s+$\"/>\n    <property name=\"message\" value=\"Line has trailing spaces.\"/>\n  </module>\n\n  <!-- Space after 'for' and 'if' -->\n  <module name=\"RegexpSingleline\">\n    <property name=\"format\" value=\"^\\s*(for|if)\\b[^ ]\"/>\n    <property name=\"message\" value=\"Space needed before opening parenthesis.\"/>\n  </module>\n\n  <!-- For each spacing -->\n  <module name=\"RegexpSingleline\">\n    <property name=\"format\" value=\"^\\s*for \\(.*?([^ ]:|:[^ ])\"/>\n    <property name=\"message\" value=\"Space needed around ':' character.\"/>\n  </module>\n\n  <module name=\"TreeWalker\">\n    <property name=\"cacheFile\" value=\"${checkstyle.cache.file}\"/>\n\n    <!-- Checks for Javadoc comments.                     -->\n    <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n    <!--module name=\"JavadocMethod\"/-->\n    <!--module name=\"JavadocType\"/-->\n    <!--module name=\"JavadocVariable\"/-->\n    <module name=\"JavadocStyle\"/>\n\n\n    <!-- Checks for Naming Conventions.                  -->\n    <!-- See http://checkstyle.sf.net/config_naming.html -->\n    <module name=\"ConstantName\"/>\n    <module name=\"LocalFinalVariableName\"/>\n    <module name=\"LocalVariableName\"/>\n    <module name=\"MemberName\"/>\n    <module name=\"MethodName\"/>\n    <module name=\"PackageName\"/>\n    <module name=\"ParameterName\"/>\n    <module name=\"StaticVariableName\"/>\n    <module name=\"TypeName\"/>\n\n\n    <!-- Checks for imports                              -->\n    <!-- See http://checkstyle.sf.net/config_import.html -->\n    <module name=\"AvoidStarImport\"/>\n    <module name=\"IllegalImport\"/>\n    <!-- defaults to sun.* packages -->\n    <module name=\"RedundantImport\"/>\n    <module name=\"UnusedImports\">\n      <property name=\"processJavadoc\" value=\"true\"/>\n    </module>\n\n\n    <!-- Checks for Size Violations.                    -->\n    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n    <module name=\"LineLength\">\n      <property name=\"max\" value=\"100\"/>\n    </module>\n    <module name=\"MethodLength\">\n      <property name=\"max\" value=\"160\"/>\n    </module>\n    <module name=\"ParameterNumber\"/>\n\n\n    <!-- Checks for whitespace                               -->\n    <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n    <module name=\"GenericWhitespace\"/>\n    <!--<module name=\"EmptyForIteratorPad\"/>-->\n    <module name=\"MethodParamPad\"/>\n    <module name=\"NoWhitespaceAfter\"/>\n    <module name=\"NoWhitespaceBefore\"/>\n    <module name=\"OperatorWrap\"/>\n    <module name=\"ParenPad\"/>\n    <module name=\"TypecastParenPad\"/>\n    <module name=\"WhitespaceAfter\"/>\n    <module name=\"WhitespaceAround\">\n      <property name=\"tokens\"\n          value=\"ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN,\n          COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH,\n          LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,\n          LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,\n          MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST,\n          SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND\"/>\n    </module>\n\n\n    <!-- Modifier Checks                                    -->\n    <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n    <module name=\"ModifierOrder\"/>\n    <module name=\"RedundantModifier\"/>\n\n\n    <!-- Checks for blocks. You know, those {}'s         -->\n    <!-- See http://checkstyle.sf.net/config_blocks.html -->\n    <module name=\"AvoidNestedBlocks\"/>\n    <!--module name=\"EmptyBlock\"/-->\n    <module name=\"LeftCurly\"/>\n    <!--<module name=\"NeedBraces\"/>-->\n    <module name=\"RightCurly\"/>\n\n\n    <!-- Checks for common coding problems               -->\n    <!-- See http://checkstyle.sf.net/config_coding.html -->\n    <!--module name=\"AvoidInlineConditionals\"/-->\n    <module name=\"CovariantEquals\"/>\n    <module name=\"EmptyStatement\"/>\n    <!--<module name=\"EqualsAvoidNull\"/>-->\n    <module name=\"EqualsHashCode\"/>\n    <!--module name=\"HiddenField\"/-->\n    <module name=\"IllegalInstantiation\"/>\n    <module name=\"InnerAssignment\"/>\n    <!--<module name=\"MagicNumber\"/>-->\n    <module name=\"MissingSwitchDefault\"/>\n    <!--module name=\"RedundantThrows\"/-->\n    <module name=\"SimplifyBooleanExpression\"/>\n    <module name=\"SimplifyBooleanReturn\"/>\n\n    <!-- Checks for class design                         -->\n    <!-- See http://checkstyle.sf.net/config_design.html -->\n    <!--module name=\"DesignForExtension\"/-->\n    <module name=\"FinalClass\"/>\n    <module name=\"HideUtilityClassConstructor\"/>\n    <module name=\"InterfaceIsType\"/>\n    <!--module name=\"VisibilityModifier\"/-->\n\n\n    <!-- Miscellaneous other checks.                   -->\n    <!-- See http://checkstyle.sf.net/config_misc.html -->\n    <module name=\"ArrayTypeStyle\"/>\n    <!--module name=\"FinalParameters\"/-->\n    <module name=\"TodoComment\"/>\n    <module name=\"UpperEll\"/>\n\n    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->\n    <module name=\"SuppressWarningsHolder\"/>\n  </module>\n</module>\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.7529296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.sonatype.oss</groupId>\n    <artifactId>oss-parent</artifactId>\n    <version>7</version>\n  </parent>\n\n  <groupId>com.squareup</groupId>\n  <artifactId>javapoet</artifactId>\n  <version>1.14.0-SNAPSHOT</version>\n\n  <name>JavaPoet</name>\n  <description>Use beautiful Java code to generate beautiful Java code.</description>\n  <url>http://github.com/square/javapoet/</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n    <java.version>1.8</java.version>\n    <junit.version>4.13.2</junit.version>\n    <truth.version>1.4.4</truth.version>\n    <compile-testing.version>0.21.0</compile-testing.version>\n  </properties>\n\n  <scm>\n    <url>http://github.com/square/javapoet/</url>\n    <connection>scm:git:git://github.com/square/javapoet.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/square/javapoet.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n\n  <issueManagement>\n    <system>GitHub Issues</system>\n    <url>http://github.com/square/javapoet/issues</url>\n  </issueManagement>\n\n  <licenses>\n    <license>\n      <name>Apache 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n  </licenses>\n\n  <organization>\n    <name>Square, Inc.</name>\n    <url>http://squareup.com</url>\n  </organization>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.google.truth</groupId>\n      <artifactId>truth</artifactId>\n      <version>${truth.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.testing.compile</groupId>\n      <artifactId>compile-testing</artifactId>\n      <version>${compile-testing.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>${junit.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.jimfs</groupId>\n      <artifactId>jimfs</artifactId>\n      <version>1.3.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <version>4.11.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.eclipse.jdt.core.compiler</groupId>\n      <artifactId>ecj</artifactId>\n      <version>4.6.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.12.1</version>\n        <configuration>\n          <compilerId>javac-with-errorprone</compilerId>\n          <forceJavacCompilerUse>true</forceJavacCompilerUse>\n          <source>${java.version}</source>\n          <target>${java.version}</target>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>org.codehaus.plexus</groupId>\n            <artifactId>plexus-compiler-javac-errorprone</artifactId>\n            <version>2.8.2</version>\n          </dependency>\n          <dependency>\n            <groupId>com.google.errorprone</groupId>\n            <artifactId>error_prone_core</artifactId>\n            <version>2.3.1</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>3.5.0</version>\n        <dependencies>\n          <dependency>\n            <groupId>com.puppycrawl.tools</groupId>\n            <artifactId>checkstyle</artifactId>\n            <version>8.18</version>\n          </dependency>\n        </dependencies>\n        <configuration>\n          <failsOnError>true</failsOnError>\n          <configLocation>checkstyle.xml</configLocation>\n          <consoleOutput>true</consoleOutput>\n        </configuration>\n        <executions>\n          <execution>\n            <phase>verify</phase>\n            <goals>\n              <goal>checkstyle</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.4.2</version>\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <Automatic-Module-Name>com.squareup.javapoet</Automatic-Module-Name>\n            </manifestEntries>\n          </archive>\n        </configuration>\n      </plugin>\n\n    </plugins>\n  </build>\n</project>\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.1044921875,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}