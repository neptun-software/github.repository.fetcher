{
  "metadata": {
    "timestamp": 1736708878851,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lgvalle/Material-Animations",
      "stars": 13523,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3486328125,
          "content": "# built application files\n*.apk\n*.ap_\n\n# files for the dex VM\n*.dex\n\n# Java class files\n*.class\n\n# generated files\nbin/\ngen/\ngen-external-apklibs/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# intellij & maven\n.classpath\n.project\n.settings/\n.idea/\n*.iml\n*.iws\n.DS_Store\nlog/\ntarget/\ntmp/\nout/\n\n# Gradle\n.gradle\nbuild/**\nlibraries/build/**\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Luis G. Valle\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.388671875,
          "content": "# UNMAINTAINED\nNo maintainance is intended. \nThe content is still valid as a reference but it won't contain the latest new stuff\n\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Material--Animations-brightgreen.svg?style=flat)](http://android-arsenal.com/details/3/1880)\n\n[Android Transition Framework][transition-framework] can be used for **three** main things:\n\n1. Animate activity layout content when transitioning from one activity to another.\n2. Animate shared elements (Hero views) in transitions between activities.\n3. Animate view changes within same activity.\n\n\n## 1. Transitions between Activities\n\nAnimate existing activity layout **content**\n\n![A Start B][transition_a_to_b]\n\nWhen transitioning from `Activity A` to `Activity B` content layout is animated according to defined transition. There are three predefined transitions available on `android.transition.Transition` you can use: **Explode**, **Slide** and **Fade**. \nAll these transitions track changes to the visibility of target views in activity layout and animate those views to follow transition rules.\n\n[Explode][explode_link] | [Slide][slide_link] | [Fade][fade_link]\n--- | --- | ---\n![transition_explode] | ![transition_slide] | ![transition_fade]\n\n\nYou can define these transitions **declarative** using XML or **programmatically**. For the Fade Transition sample, it would look like this:\n\n### Declarative\nTransitions are defined on XML files in `res/transition`\n\n> res/transition/activity_fade.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<fade xmlns:android=\"http://schemas.android.com/apk/res/\"\n    android:duration=\"1000\"/>\n\n```\n\n> res/transition/activity_slide.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<slide xmlns:android=\"http://schemas.android.com/apk/res/\"\n    android:duration=\"1000\"/>\n\n```\n\nTo use these transitions you need to inflate them using `TransitionInflater`\n\n> MainActivity.java\n \n```java\n\t@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_transition);\n        setupWindowAnimations();\n    }\n\n    private void setupWindowAnimations() {\n        Slide slide = TransitionInflater.from(this).inflateTransition(R.transition.activity_slide);\n        getWindow().setExitTransition(slide);\n    }\n\n```\n\n> TransitionActivity.java\n \n```java\n\t@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_transition);\n        setupWindowAnimations();\n    }\n\n    private void setupWindowAnimations() {\n        Fade fade = TransitionInflater.from(this).inflateTransition(R.transition.activity_fade);\n        getWindow().setEnterTransition(fade);\n    }\n\n```\n\n### Programmatically \n\n> MainActivity.java\n \n```java\n\t@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_transition);\n        setupWindowAnimations();\n    }\n\n    private void setupWindowAnimations() {\n        Slide slide = new Slide();\n        slide.setDuration(1000);\n        getWindow().setExitTransition(slide);\n    }\n\n```\n\n> TransitionActivity.java\n \n```java\n\t@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_transition);\n        setupWindowAnimations();\n    }\n\n    private void setupWindowAnimations() {\n        Fade fade = new Fade();\n        fade.setDuration(1000);\n        getWindow().setEnterTransition(fade);\n    }\n\n```\n\n#### Any of those produce this result:\n\n![transition_fade]\n\n\n### What is happening step by step:\n\n1. Activity A starts Activity B\n\n2. Transition Framework finds A Exit Transition (slide) and apply it to all visible views.\n3. Transition Framework finds B Enter Transition (fade) and apply it to all visible views.\n4. **On Back Pressed** Transition Framework executes Enter and Exit reverse animations respectively (If we had defined output `returnTransition` and `reenterTransition`, these have been executed instead) \n\n### ReturnTransition & ReenterTransition\n\nReturn and Reenter Transitions are the reverse animations for Enter and Exit respectively.\n\n  * EnterTransition <--> ReturnTransition\n  * ExitTransition <--> ReenterTransition\n\nIf Return or Reenter are not defined, Android will execute a reversed version of Enter and Exit Transitions. But if you do define them, you can have different transitions for entering and exiting an activity.\n\n![b back a][transition_b_to_a]\n\nWe can modify previous Fade sample and define a `ReturnTransition` for `TransitionActivity`, in this case, a **Slide** transition. This way, when returning from B to A, instead of seeing a Fade out (reversed Enter Transition) we will see a **Slide out** transition\n \n> TransitionActivity.java\n \n```java\n\t@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_transition);\n        setupWindowAnimations();\n    }\n\n    private void setupWindowAnimations() {\n        Fade fade = new Fade();\n        fade.setDuration(1000);\n        getWindow().setEnterTransition(fade);\n        \n        Slide slide = new Slide();\n        slide.setDuration(1000);\n        getWindow().setReturnTransition(slide);        \n    }\n\n```\n\n\nObserve that if no Return Transition is defined then a reversed Enter Transition is executed.\nIf a Return Transition is defined that one is executed instead. \n\nWithout Return Transition | With Return Transition \n--- | --- \nEnter: `Fade In` | Enter: `Fade In`\nExit: `Fade Out` | Exit: `Slide out`\n![transition_fade] | ![transition_fade2] \n\n\n## 2. Shared elements between Activities\n\nThe idea behind this is having two different views in two different layouts and link them somehow with an animation.\n\nTransition framework will then do _whatever animations it consider necessary_ to show the user a transition from one view to another.\n\nKeep this always in mind: the view **is not really moving** from one layout to another. They are two independent views.\n\n\n![A Start B with shared][shared_element]\n\n\n### a) Enable Window Content Transition\n\nThis is something you need to set up once on your app `styles.xml`.\n\n> values/styles.xml\n\n```xml\n<style name=\"MaterialAnimations\" parent=\"@style/Theme.AppCompat.Light.NoActionBar\">\n    ...\n    <item name=\"android:windowContentTransitions\">true</item\n    ...\n</style>\n```\n\nHere you can also specify default enter, exit and shared element transitions for the whole app if you want\n\n```xml\n<style name=\"MaterialAnimations\" parent=\"@style/Theme.AppCompat.Light.NoActionBar\">\n    ...\n    <!-- specify enter and exit transitions -->\n    <item name=\"android:windowEnterTransition\">@transition/explode</item>\n    <item name=\"android:windowExitTransition\">@transition/explode</item>\n\n    <!-- specify shared element transitions -->\n    <item name=\"android:windowSharedElementEnterTransition\">@transition/changebounds</item>\n    <item name=\"android:windowSharedElementExitTransition\">@transition/changebounds</item>\n    ...\n</style>\n```\n\n\n\n### b) Define a common transition name\n\nTo make the trick you need to give both, origin and target views, the same **`android:transitionName`**. They may have different ids or properties, but `android:transitionName` must be the same.\n\n> layout/activity_a.xml\n\n```xml\n<ImageView\n        android:id=\"@+id/small_blue_icon\"\n        style=\"@style/MaterialAnimations.Icon.Small\"\n        android:src=\"@drawable/circle\"\n        android:transitionName=\"@string/blue_name\" />\n```\n\n> layout/activity_b.xml\n\n```xml\n<ImageView\n        android:id=\"@+id/big_blue_icon\"\n        style=\"@style/MaterialAnimations.Icon.Big\"\n        android:src=\"@drawable/circle\"\n        android:transitionName=\"@string/blue_name\" />\n```\n\n### c) Start an activity with a shared element \n\nUse the `ActivityOptions.makeSceneTransitionAnimation()` method to define shared element origin view and transition name.\n\n> MainActivity.java\n\n```java\n\nblueIconImageView.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent i = new Intent(MainActivity.this, SharedElementActivity.class);\n\n        View sharedView = blueIconImageView;\n        String transitionName = getString(R.string.blue_name);\n\n        ActivityOptions transitionActivityOptions = ActivityOptions.makeSceneTransitionAnimation(MainActivity.this, sharedView, transitionName);\n        startActivity(i, transitionActivityOptions.toBundle());\n    }\n});\n\n```\n\n\nJust that code will produce this beautiful transition animation:\n\n![a to b with shared element][shared_element_anim]\n\nAs you can see, Transition framework is creating and executing an animation to create the illusion that views are moving and changing shape from one activity to the other\n\n## Shared elements between fragments\n\nShared element transition works with Fragments in a very similar way as it does with activities. \n\nSteps **a)** and **b)** are exactly the **same**. Only **c)** changes\t\t\t\n\n### a) Enable Window Content Transition\n\n> values/styles.xml\n\n```xml\n<style name=\"MaterialAnimations\" parent=\"@style/Theme.AppCompat.Light.NoActionBar\">\n    ...\n    <item name=\"android:windowContentTransitions\">true</item>\n    ...\n</style>\n```\n\n### b) Define a common transition name\n\n> layout/fragment_a.xml\n\n```xml\n<ImageView\n        android:id=\"@+id/small_blue_icon\"\n        style=\"@style/MaterialAnimations.Icon.Small\"\n        android:src=\"@drawable/circle\"\n        android:transitionName=\"@string/blue_name\" />\n```\n\n> layout/fragment_b.xml\n\n```xml\n<ImageView\n        android:id=\"@+id/big_blue_icon\"\n        style=\"@style/MaterialAnimations.Icon.Big\"\n        android:src=\"@drawable/circle\"\n        android:transitionName=\"@string/blue_name\" />\n```\n\n###  c) Start a fragment with a shared element\n\nTo do this you need to include shared element transition information as part of the **`FragmentTransaction`** process.\n\n```java\nFragmentB fragmentB = FragmentB.newInstance(sample);\n\n// Defines enter transition for all fragment views\nSlide slideTransition = new Slide(Gravity.RIGHT);\nslideTransition.setDuration(1000);\nsharedElementFragment2.setEnterTransition(slideTransition);\n\n// Defines enter transition only for shared element\nChangeBounds changeBoundsTransition = TransitionInflater.from(this).inflateTransition(R.transition.change_bounds);\nfragmentB.setSharedElementEnterTransition(changeBoundsTransition);\n\ngetFragmentManager().beginTransaction()\n        .replace(R.id.content, fragmentB)\n        .addSharedElement(blueView, getString(R.string.blue_name))\n        .commit();\n```\n\nAnd this is the final result:\n\n![shared_element_no_overlap]\n\n## Allow Transition Overlap\n\nYou can define if enter and exit transitions can overlap each other. \n\nFrom [Android documentation](http://developer.android.com/intl/ko/reference/android/app/Fragment.html#getAllowEnterTransitionOverlap()):\n> When **true**, the enter transition will start as soon as possible. \n> \n> When **false**, the enter transition will wait until the exit transition completes before starting.\n\nThis works for both Fragments and Activities shared element transitions.\n\n```java\nFragmentB fragmentB = FragmentB.newInstance(sample);\n\n// Defines enter transition for all fragment views\nSlide slideTransition = new Slide(Gravity.RIGHT);\nslideTransition.setDuration(1000);\nsharedElementFragment2.setEnterTransition(slideTransition);\n\n// Defines enter transition only for shared element\nChangeBounds changeBoundsTransition = TransitionInflater.from(this).inflateTransition(R.transition.change_bounds);\nfragmentB.setSharedElementEnterTransition(changeBoundsTransition);\n\n// Prevent transitions for overlapping\nfragmentB.setAllowEnterTransitionOverlap(overlap);\nfragmentB.setAllowReturnTransitionOverlap(overlap);\n\ngetFragmentManager().beginTransaction()\n        .replace(R.id.content, fragmentB)\n        .addSharedElement(blueView, getString(R.string.blue_name))\n        .commit();\n```\n\nIt is very easy to spot the difference in this example:\n\nOverlap True | Overlap False\n--- | --- \nFragment_2 appears on top of Fragment_1 | Fragment_2 waits until Fragment_1 is gone\n![shared_element_overlap] | ![shared_element_no_overlap]\n \n\n\n## 3. Animate view layout elements\n\n### Scenes\nTransition Framework can also be used to animate element changes within current activity layout. \n\nTransitions happen between scenes. A scene is just a regular layout which **defines a static state of our UI**. You can transition from one scene to another and Transition Framework will animate views in between.\n\n```java\nscene1 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene1, this);\nscene2 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene2, this);\nscene3 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene3, this);\nscene4 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene4, this);\n\n(...)\n\n@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\n        case R.id.button1:\n            TransitionManager.go(scene1, new ChangeBounds());\n            break;\n        case R.id.button2:\n            TransitionManager.go(scene2, TransitionInflater.from(this).inflateTransition(R.transition.slide_and_changebounds));\n            break;\n        case R.id.button3:\n            TransitionManager.go(scene3, TransitionInflater.from(this).inflateTransition(R.transition.slide_and_changebounds_sequential));\n            break;\n        case R.id.button4:\n            TransitionManager.go(scene4, TransitionInflater.from(this).inflateTransition(R.transition.slide_and_changebounds_sequential_with_interpolators));\n            break;  \n    }\n}\n```\n\nThat code would produce transition between four scenes in the same activity. Each transition has a different animation defined. \n\nTransition Framework will take all visible views in current scene and calculate whatever necessary animations are needed to arrange those views according to next scene.\n\n![scenes_anim]\n\n\n### Layout changes\n\nTransition Framework can also be used to animate layout property changes in a view. You just need to make whatever changes you want and it will perform necessary animations for you\n\n#### a) Begin Delayed Transition\n\nWith just this line of code we are telling the framework we are going to perform some UI changes that it will need to animate.\n\n```java\nTransitionManager.beginDelayedTransition(sceneRoot);\n```\n#### b) Change view layout properties\n\n\n```java\nViewGroup.LayoutParams params = greenIconView.getLayoutParams();\nparams.width = 200;\ngreenIconView.setLayoutParams(params);\n\n```\n\nChanging view width attribute to make it smaller will trigger a `layoutMeasure`. At that point the Transition framework will record start and ending values and will create an animation to transition from one to another.\n\n    \n![view layout animation][view_layout_anim]\n\n\n## 4. (Bonus) Shared elements + Circular Reveal\nCircular Reveal is just an animation to show or hide a group of UI elements. It is available since API 21 in `ViewAnimationUtils` class. \n\n\nCircular Reveal animation can be used in combination of Shared Element Transition to create meaningful animations that smoothly teach the user what is happening in the app.\n\n![reveal_shared_anim]\n\nWhat is happening in this example step by step is:\n\n* Orange circle is a shared element transitioning from `MainActivity` to `RevealActivity`.\n* On `RevealActivity` there is a listener to listen for shared element transition end. When that happens it does two things:\n  * Execute a Circular Reveal animation for the Toolbar\n  * Execute a scale up animation on `RevealActivity` views using plain old `ViewPropertyAnimator`\n\n\n> Listen to shared element enter transition end\n\n```java\nTransition transition = TransitionInflater.from(this).inflateTransition(R.transition.changebounds_with_arcmotion);\ngetWindow().setSharedElementEnterTransition(transition);\ntransition.addListener(new Transition.TransitionListener() {\n    @Override\n    public void onTransitionEnd(Transition transition) {\n        animateRevealShow(toolbar);\n        animateButtonsIn();\n    }\n    \n    (...)\n\n});\n        \n```\n\n> Reveal Toolbar\n\n```java\nprivate void animateRevealShow(View viewRoot) {\n    int cx = (viewRoot.getLeft() + viewRoot.getRight()) / 2;\n    int cy = (viewRoot.getTop() + viewRoot.getBottom()) / 2;\n    int finalRadius = Math.max(viewRoot.getWidth(), viewRoot.getHeight());\n\n    Animator anim = ViewAnimationUtils.createCircularReveal(viewRoot, cx, cy, 0, finalRadius);\n    viewRoot.setVisibility(View.VISIBLE);\n    anim.setDuration(1000);\n    anim.setInterpolator(new AccelerateInterpolator());\n    anim.start();\n}\n```  \n\n> Scale up activity layout views\n\n```java\nprivate void animateButtonsIn() {\n    for (int i = 0; i < bgViewGroup.getChildCount(); i++) {\n        View child = bgViewGroup.getChildAt(i);\n        child.animate()\n                .setStartDelay(100 + i * DELAY)\n                .setInterpolator(interpolator)\n                .alpha(1)\n                .scaleX(1)\n                .scaleY(1);\n    }\n}\n```\n\n### More circular reveal animations\n\nThere are many different ways you can create a reveal animation. The important thing is to use the animation to help the user understand what is happening in the app.\n\n#### Circular Reveal from the middle of target view\n\n![reveal_green]\n\n```java\nint cx = (viewRoot.getLeft() + viewRoot.getRight()) / 2;\nint cy = viewRoot.getTop();\nint finalRadius = Math.max(viewRoot.getWidth(), viewRoot.getHeight());\n\nAnimator anim = ViewAnimationUtils.createCircularReveal(viewRoot, cx, cy, 0, finalRadius);\nviewRoot.setBackgroundColor(color);\nanim.start();\n```        \n\n#### Circular Reveal from top of target view + animations\n\n![reveal_blue]\n\n```java\nint cx = (viewRoot.getLeft() + viewRoot.getRight()) / 2;\nint cy = (viewRoot.getTop() + viewRoot.getBottom()) / 2;\nint finalRadius = Math.max(viewRoot.getWidth(), viewRoot.getHeight());\n\nAnimator anim = ViewAnimationUtils.createCircularReveal(viewRoot, cx, cy, 0, finalRadius);\nviewRoot.setBackgroundColor(color);\nanim.addListener(new AnimatorListenerAdapter() {\n    @Override\n    public void onAnimationEnd(Animator animation) {\n        animateButtonsIn();\n    }\n});\nanim.start();\n``` \n\n\n#### Circular Reveal from touch point\n\n![reveal_yellow]\n\n```java\n@Override\npublic boolean onTouch(View view, MotionEvent motionEvent) {\n    if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\n        if (view.getId() == R.id.square_yellow) {\n            revealFromCoordinates(motionEvent.getRawX(), motionEvent.getRawY());\n        }\n    }\n    return false;\n}\n```\n\n```java \nprivate Animator animateRevealColorFromCoordinates(int x, int y) {\n    float finalRadius = (float) Math.hypot(viewRoot.getWidth(), viewRoot.getHeight());\n\n    Animator anim = ViewAnimationUtils.createCircularReveal(viewRoot, x, y, 0, finalRadius);\n    viewRoot.setBackgroundColor(color);\n    anim.start();\n}\n```       \n\n#### Animate and Reveal\n\n![reveal_red]\n\n```java\nTransition transition = TransitionInflater.from(this).inflateTransition(R.transition.changebounds_with_arcmotion);\ntransition.addListener(new Transition.TransitionListener() {\n    @Override\n    public void onTransitionEnd(Transition transition) {\n        animateRevealColor(bgViewGroup, R.color.red);\n    }\n    (...)\n   \n});\nTransitionManager.beginDelayedTransition(bgViewGroup, transition);\nRelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\nlayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\nbtnRed.setLayoutParams(layoutParams);\n```         \n  \n\n# Sample source code\n\n**[https://github.com/lgvalle/Material-Animations](https://github.com/lgvalle/Material-Animations/)**\n\n\n# More information\n\n  * Alex Lockwood posts about Transition Framework. A great in deep into this topic: [http://www.androiddesignpatterns.com/2014/12/activity-fragment-transitions-in-android-lollipop-part1.html](http://www.androiddesignpatterns.com/2014/12/activity-fragment-transitions-in-android-lollipop-part1.html)\n  * Amazing repository with lot of Material Design samples by Saul Molinero: [https://github.com/saulmm/Android-Material-Examples](https://github.com/saulmm/Android-Material-Examples)\n  * Chet Hasse video explaining Transition framework: [https://www.youtube.com/watch?v=S3H7nJ4QaD8](https://www.youtube.com/watch?v=S3H7nJ4QaD8)\n\n\n\n[transition-framework]: https://developer.android.com/training/transitions/overview.html\n\n[explode_link]: https://developer.android.com/reference/android/transition/Explode.html\n[fade_link]: https://developer.android.com/reference/android/transition/Fade.html\n[slide_link]: https://developer.android.com/reference/android/transition/Slide.html\n\n[transition_explode]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_explode.gif\n[transition_slide]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_slide.gif\n[transition_fade]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_fade.gif\n[transition_fade2]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_fade2.gif\n[transition_a_to_b]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_A_to_B.png\n[transition_b_to_a]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_B_to_A.png\n\n[shared_element]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/shared_element.png\n[shared_element_anim]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/shared_element_anim.gif\n[shared_element_no_overlap]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/shared_element_no_overlap.gif\n[shared_element_overlap]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/shared_element_overlap.gif\n\n[scenes_anim]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/scenes_anim.gif\n[view_layout_anim]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/view_layout_anim.gif\n\n[reveal_blue]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/reveal_blue.gif\n[reveal_red]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/reveal_red.gif\n[reveal_green]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/reveal_green.gif\n[reveal_yellow]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/reveal_yellow.gif\n[reveal_shared_anim]: https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/shared_reveal_anim.gif\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.42578125,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.5.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0146484375,
          "content": "include ':app'\n"
        }
      ]
    }
  ]
}