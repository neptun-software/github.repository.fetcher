{
  "metadata": {
    "timestamp": 1736708901509,
    "page": 137,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gyf-dev/ImmersionBar",
      "stars": 11345,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.59375,
          "content": "\n# Created by https://www.gitignore.io/api/androidstudio\n\n### AndroidStudio ###\n# Covers files to be ignored for android development using Android Studio.\n\n# Built application files\n*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\nout/\n\n# Gradle files\n.gradle\n.gradle/\nbuild/\n\n# Signing files\n.signing/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio\n/*/build/\n/*/local.properties\n/*/out\n/*/*/build\n/*/*/production\ncaptures/\n.navigation/\n*.ipr\n*~\n*.swp\n\n# Android Patch\ngen-external-apklibs\n\n# External native build folder generated in Android Studio 2.2 and later\n.externalNativeBuild\n\n# NDK\nobj/\n\n# IntelliJ IDEA\n*.iml\n*.iws\n/out/\n\n# User-specific configurations\n.idea\n\n# Keystore files\n*.jks\n\n# OS-specific files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Legacy Eclipse project files\n.classpath\n.project\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n#*.jar\n*.war\n*.ear\n\n# virtual machine crash logs (Reference: http://www.java.com/en/download/help/error_hotspot.xml)\nhs_err_pid*\n\n## Plugin-specific files:\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Mongo Explorer plugin\n.idea/mongoSettings.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# End of https://www.gitignore.io/api/androidstudio\n.idea/copyright/\ngradle/maven-publish.gradle\ngradle/maven-publish.properties\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.6494140625,
          "content": "![logo](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/readme_head.png)\n# ImmersionBar -- android 4.4以上沉浸式实现 \n[![version](https://img.shields.io/badge/version-3.2.2-brightgreen.svg)](https://bintray.com/geyifeng/maven/immersionbar) [![author](https://img.shields.io/badge/author-gyf--dev-orange.svg)](https://github.com/gyf-dev) [![简书](https://img.shields.io/badge/%E7%AE%80%E4%B9%A6-HeLe%E5%B0%8F%E5%AD%90%E6%8B%BD-blue.svg)](https://www.jianshu.com/p/2a884e211a62) [![QQ群](https://img.shields.io/badge/QQ%E7%BE%A4-314360549-red.svg)]()\n\n## 直接看效果图，建议下载demo体验，最下面有各个版本的效果图\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_6.0.gif\"/>\n\n## 使用（gyf替换为geyifeng） \n> 3.1.1以上版本(mavenCentral)\n   ```groovy\n   // 基础依赖包，必须要依赖\n   implementation 'com.geyifeng.immersionbar:immersionbar:3.2.2'\n   // kotlin扩展（可选）\n   implementation 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.2'\n   // fragment快速实现（可选）已废弃\n   implementation 'com.geyifeng.immersionbar:immersionbar-components:3.2.2'\n   ```\n> 3.0.0版本(jcenter)\n   ```groovy\n   // 基础依赖包，必须要依赖\n   implementation 'com.gyf.immersionbar:immersionbar:3.0.0'\n   // kotlin扩展（可选）\n   implementation 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'\n   // fragment快速实现（可选）\n   implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'\n   ```\n\n## 版本说明\n#### [点我查看版本说明](https://github.com/gyf-dev/ImmersionBar/wiki)\n\n## 下载demo \n#### [点我下载immersionBar-3.2.2.apk](https://github.com/gyf-dev/ImmersionBar/blob/master/apk/immersionbar-3.2.2.apk)\n\n## 关于全面屏与刘海\n#### 关于全面屏\n   在manifest加入如下配置，四选其一，或者都写\n\n   ① 升级targetSdkVersion为25以上版本，现在基本都是25以上了，所以以下三个没有必要配置了\n\n   ② 在manifest的Application节点中加入\n   ```xml\n      android:resizeableActivity=\"true\"\n   ```\n   ③ 在manifest的Application节点中加入\n   ```xml\n      android:maxAspectRatio=\"2.4\"\n   ```\n   ④ 在manifest的Application节点下加入\n   ```xml\n      <meta-data \n        android:name=\"android.max_aspect\"\n        android:value=\"2.4\" />\n   ```\n\n#### 关于刘海屏 \n  在manifest的Application节点下加入，vivo和oppo没有找到相关配置信息\n   ```xml\n      <!--适配华为（huawei）刘海屏-->\n      <meta-data \n        android:name=\"android.notch_support\" \n        android:value=\"true\"/>\n      <!--适配小米（xiaomi）刘海屏-->\n      <meta-data\n        android:name=\"notch.config\"\n        android:value=\"portrait|landscape\" />\n   ```\n  \n## Api详解\n- 基础用法\n\n    ```java\n    ImmersionBar.with(this).init();\n    ```\n- 高级用法(每个参数的意义)\n\n    ```java\n     ImmersionBar.with(this)\n                 .transparentStatusBar()  //透明状态栏，不写默认透明色\n                 .transparentNavigationBar()  //透明导航栏，不写默认黑色(设置此方法，fullScreen()方法自动为true)\n                 .transparentBar()             //透明状态栏和导航栏，不写默认状态栏为透明色，导航栏为黑色（设置此方法，fullScreen()方法自动为true）\n                 .statusBarColor(R.color.colorPrimary)     //状态栏颜色，不写默认透明色\n                 .navigationBarColor(R.color.colorPrimary) //导航栏颜色，不写默认黑色\n                 .barColor(R.color.colorPrimary)  //同时自定义状态栏和导航栏颜色，不写默认状态栏为透明色，导航栏为黑色\n                 .statusBarAlpha(0.3f)  //状态栏透明度，不写默认0.0f\n                 .navigationBarAlpha(0.4f)  //导航栏透明度，不写默认0.0F\n                 .barAlpha(0.3f)  //状态栏和导航栏透明度，不写默认0.0f\n                 .statusBarDarkFont(true)   //状态栏字体是深色，不写默认为亮色\n                 .navigationBarDarkIcon(true) //导航栏图标是深色，不写默认为亮色\n                 .autoDarkModeEnable(true) //自动状态栏字体和导航栏图标变色，必须指定状态栏颜色和导航栏颜色才可以自动变色哦\n                 .autoStatusBarDarkModeEnable(true,0.2f) //自动状态栏字体变色，必须指定状态栏颜色才可以自动变色哦\n                 .autoNavigationBarDarkModeEnable(true,0.2f) //自动导航栏图标变色，必须指定导航栏颜色才可以自动变色哦\n                 .flymeOSStatusBarFontColor(R.color.btn3)  //修改flyme OS状态栏字体颜色\n                 .fullScreen(true)      //有导航栏的情况下，activity全屏显示，也就是activity最下面被导航栏覆盖，不写默认非全屏\n                 .hideBar(BarHide.FLAG_HIDE_BAR)  //隐藏状态栏或导航栏或两者，不写默认不隐藏\n                 .addViewSupportTransformColor(toolbar)  //设置支持view变色，可以添加多个view，不指定颜色，默认和状态栏同色，还有两个重载方法\n                 .titleBar(view)    //解决状态栏和布局重叠问题，任选其一\n                 .titleBarMarginTop(view)     //解决状态栏和布局重叠问题，任选其一\n                 .statusBarView(view)  //解决状态栏和布局重叠问题，任选其一\n                 .fitsSystemWindows(true)    //解决状态栏和布局重叠问题，任选其一，默认为false，当为true时一定要指定statusBarColor()，不然状态栏为透明色，还有一些重载方法\n                 .supportActionBar(true) //支持ActionBar使用\n                 .statusBarColorTransform(R.color.orange)  //状态栏变色后的颜色\n                 .navigationBarColorTransform(R.color.orange) //导航栏变色后的颜色\n                 .barColorTransform(R.color.orange)  //状态栏和导航栏变色后的颜色\n                 .removeSupportView(toolbar)  //移除指定view支持\n                 .removeSupportAllView() //移除全部view支持\n                 .navigationBarEnable(true)   //是否可以修改导航栏颜色，默认为true\n                 .navigationBarWithKitkatEnable(true)  //是否可以修改安卓4.4和emui3.x手机导航栏颜色，默认为true\n                 .navigationBarWithEMUI3Enable(true) //是否可以修改emui3.x手机导航栏颜色，默认为true\n                 .keyboardEnable(true)  //解决软键盘与底部输入框冲突问题，默认为false，还有一个重载方法，可以指定软键盘mode\n                 .keyboardMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)  //单独指定软键盘模式\n                 .setOnKeyboardListener(new OnKeyboardListener() {    //软键盘监听回调，keyboardEnable为true才会回调此方法\n                       @Override\n                       public void onKeyboardChange(boolean isPopup, int keyboardHeight) {\n                           LogUtils.e(isPopup);  //isPopup为true，软键盘弹出，为false，软键盘关闭\n                       }\n                  })\n                 .setOnNavigationBarListener(onNavigationBarListener) //导航栏显示隐藏监听，目前只支持华为和小米手机\n                 .setOnBarListener(OnBarListener) //第一次调用和横竖屏切换都会触发，可以用来做刘海屏遮挡布局控件的问题\n                 .addTag(\"tag\")  //给以上设置的参数打标记\n                 .getTag(\"tag\")  //根据tag获得沉浸式参数\n                 .reset()  //重置所以沉浸式参数\n                 .init();  //必须调用方可应用以上所配置的参数\n    ```\n## 在Activity中实现沉浸式\n\n- java用法\n\n   ```java\n    ImmersionBar.with(this).init();\n   ```\n- kotlin用法\n \n   ```kotlin\n    immersionBar {\n        statusBarColor(R.color.colorPrimary) \n        navigationBarColor(R.color.colorPrimary)\n    }\n   ```\n  \n\n## 在Fragment中实现沉浸式\n\n#### 在Fragment使用ImmersionBar\n  - 第一种，fragment如果配合viewpager2使用的话，并且使用了Behavior指定了BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT，直接在fragment的onResume里直接实现沉浸式\n  - 第二种，当使用show()和hide()来控制Fragment显示隐藏的时候，直接在fragment的onResume与onHiddenChanged（参数hidden为false）方法里实现沉浸式\n  - ~~第三种（废弃），你的Fragment直接继承[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/SimpleImmersionFragment.java)或者[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/ImmersionFragment.java)类，在initImmersionBar方法中实现沉浸式代码，只有当immersionBarEnabled返回为true才可以走initImmersionBar方法哦，不过immersionBarEnabled默认返回已经为true了，如果当前Fragment不想走沉浸式方法，请将immersionBarEnabled设置为false~~\n  - ~~第四种（废弃），如果你的Fragment不能继承[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/SimpleImmersionFragment.java)或者[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/ImmersionFragment.java)类，请参考[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/SimpleImmersionFragment.java)实现[SimpleImmersionOwner](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/SimpleImmersionOwner.java)接口，或者参考[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/ImmersionFragment.java)实现[ImmersionOwner](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-components/src/main/java/com/gyf/immersionbar/components/ImmersionOwner.java)接口~~\n    \n#### 在Activity使用ImmersionBar\n  - 第一种，当结合viewpager2使用的时候，请使用viewpager2的registerOnPageChangeCallback的方法监听沉浸式\n  - 第二种，当结合viewpager使用的时候，请使用viewpager的addOnPageChangeListener的方法监听沉浸式，参考demo中[FragmentThreeActivity](https://github.com/gyf-dev/ImmersionBar/tree/master/immersionbar-sample/src/main/java/com/gyf/immersionbar/sample/activity/FragmentThreeActivity.java)这个类\n  - 第三种，当使用show()和hide()来控制Fragment显示隐藏的时候，请在tab切换的时候使用ImmersionBar，参考demo中[FragmentFourActivity](https://github.com/gyf-dev/ImmersionBar/tree/master/immersionbar-sample/src/main/java/com/gyf/immersionbar/sample/activity/FragmentFourActivity.java)这个类\n\n#### 使用Fragment第三方框架[Fragmentation](https://github.com/YoKeyword/Fragmentation)实现沉浸式\n  - 参考demo中[FragmentFiveActivity](https://github.com/gyf-dev/ImmersionBar/blob/master/immersionbar-sample/src/main/java/com/gyf/immersionbar/sample/activity/FragmentFiveActivity.java)和[BaseFiveFragment](https://github.com/gyf-dev/ImmersionBar/tree/master/immersionbar-sample/src/main/java/com/gyf/immersionbar/sample/fragment/five/BaseFiveFragment.java)这个类\n\n## 在Dialog中实现沉浸式，具体实现参考demo\n- ①结合dialogFragment使用，可以参考demo中的[BaseDialogFragment](https://github.com/gyf-dev/ImmersionBar/tree/master/immersionbar-sample/src/main/java/com/gyf/immersionbar/sample/fragment/dialog/BaseDialogFragment.java)这个类\n   ```java\n       ImmersionBar.with(this).init();\n   ```\n- ②其他dialog，关闭dialog的时候必须调用销毁方法\n    ```java\n        ImmersionBar.with(this, dialog).init();\n    ```\n    销毁方法：\n    \n    java中\n    ```java\n        ImmersionBar.destroy(this, dialog);\n    ```\n    kotlin中\n    ```kotlin\n        destroyImmersionBar(dialog)\n    ```\n   \n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_dialog.gif\"/>\n\n## 在PopupWindow中实现沉浸式，具体实现参考demo\n   重点是调用以下方法，但是此方法会导致有导航栏的手机底部布局会被导航栏覆盖，还有底部输入框无法根据软键盘弹出而弹出，具体适配请参考demo。\n   ```java\n       popupWindow.setClippingEnabled(false);\n   ```\n\n## 状态栏与布局顶部重叠解决方案，六种方案根据不同需求任选其一\n- ① 使用dimen自定义状态栏高度，不建议使用，因为设备状态栏高度并不是固定的\n\n    在values-v19/dimens.xml文件下\n    ```xml\n        <dimen name=\"status_bar_height\">25dp</dimen>\n     ```\n    \n    在values/dimens.xml文件下     \n    ```xml\n        <dimen name=\"status_bar_height\">0dp</dimen>\n    ```\n    \n    然后在布局界面添加view标签，高度指定为status_bar_height\n    ```xml\n       <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n           xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:background=\"@color/darker_gray\"\n           android:orientation=\"vertical\">\n       \n           <View\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"@dimen/status_bar_height\"\n               android:background=\"@color/colorPrimary\" />\n       \n           <android.support.v7.widget.Toolbar\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:background=\"@color/colorPrimary\"\n               app:title=\"方法一\"\n               app:titleTextColor=\"@android:color/white\" />\n       </LinearLayout>\n    ```\n  \n- ② 使用系统的fitsSystemWindows属性，使用该属性不会导致输入框与软键盘冲突问题，不要再Fragment使用该属性，只适合纯色状态栏\n\n   ```xml\n       <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:orientation=\"vertical\"\n           android:fitsSystemWindows=\"true\">\n       </LinearLayout>\n   ```\n   然后使用ImmersionBar时候必须指定状态栏颜色\n   ```java\n       ImmersionBar.with(this)\n            .statusBarColor(R.color.colorPrimary)\n            .init();\n   ```\n   - 注意：ImmersionBar一定要在设置完布局以后使用，\n\n- ③ 使用ImmersionBar的fitsSystemWindows(boolean fits)方法，只适合纯色状态栏\n\n    ```java\n        ImmersionBar.with(this)\n            .fitsSystemWindows(true)  //使用该属性,必须指定状态栏颜色\n            .statusBarColor(R.color.colorPrimary)\n            .init();\n    ```\n- ④ 使用ImmersionBar的statusBarView(View view)方法，可以用来适配渐变色状态栏、侧滑返回\n\n    在标题栏的上方增加View标签，高度指定为0dp\n    ```xml\n        <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n               xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:background=\"@color/darker_gray\"\n               android:orientation=\"vertical\">\n           \n               <View\n                   android:layout_width=\"match_parent\"\n                   android:layout_height=\"0dp\"\n                   android:background=\"@color/colorPrimary\" />\n           \n               <android.support.v7.widget.Toolbar\n                   android:layout_width=\"match_parent\"\n                   android:layout_height=\"wrap_content\"\n                   android:background=\"@color/colorPrimary\"\n                   app:title=\"方法四\"\n                   app:titleTextColor=\"@android:color/white\" />\n        </LinearLayout>\n     ```\n      \n    然后使用ImmersionBar的statusBarView方法，指定view就可以啦\n    ```java\n         ImmersionBar.with(this)\n               .statusBarView(view)\n               .init();\n         //或者\n         //ImmersionBar.setStatusBarView(this,view);\n     ```   \n- ⑤ 使用ImmersionBar的titleBar(View view)方法，原理是设置paddingTop，可以用来适配渐变色状态栏、侧滑返回\n    ```java\n             ImmersionBar.with(this)\n                   .titleBar(view) //可以为任意view，如果是自定义xml实现标题栏的话，标题栏根节点不能为RelativeLayout或者ConstraintLayout，以及其子类\n                   .init();\n             //或者\n             //ImmersionBar.setTitleBar(this, view);\n     ```\n- ⑥ 使用ImmersionBar的titleBarMarginTop(View view)方法，原理是设置marginTop，只适合纯色状态栏\n    ```java\n             ImmersionBar.with(this)\n                   .titleBarMarginTop(view)  //可以为任意view\n                   .statusBarColor(R.color.colorPrimary)  //指定状态栏颜色,根据情况是否设置\n                   .init();\n             //或者使用静态方法设置\n             //ImmersionBar.setTitleBarMarginTop(this,view);\n     ```\n       \n## 解决EditText和软键盘的问题\n\n - 第一种方案\n   ```java\n       ImmersionBar.with(this)\n                   .keyboardEnable(true)  //解决软键盘与底部输入框冲突问题\n               //  .keyboardEnable(true, WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE\n               //                        | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)  //软键盘自动弹出\n                   .init();\n   ```\n - 第二种方案\n   不使用keyboardEnable方法，只需要在布局的根节点（最外层节点）加上android:fitsSystemWindows=\"true\"属性即可，只适合纯色状态栏\n    \n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_edit.gif\"/>\n\n## 当白色背景状态栏遇到不能改变状态栏字体为深色的设备时，解决方案\n   ```java\n         ImmersionBar.with(this)\n                     .statusBarDarkFont(true, 0.2f) //原理：如果当前设备支持状态栏字体变色，会设置状态栏字体为黑色，如果当前设备不支持状态栏字体变色，会使当前状态栏加上透明度，否则不执行透明度\n                     .init();\n   ```\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/whiteStatusBar.png\"/>\n    \n## 状态栏和导航栏其它方法\n\t\n- public static boolean hasNavigationBar(Activity activity)\n \n    判断是否存在导航栏\n    \n- public static int getNavigationBarHeight(Activity activity)\n \n    获得导航栏的高度\n \n- public static int getNavigationBarWidth(Activity activity)\n \n    获得导航栏的宽度\n    \n- public static boolean isNavigationAtBottom(Activity activity)\n \n    判断导航栏是否在底部\n    \n- public static int getStatusBarHeight(Activity activity)\n \n    获得状态栏的高度\n    \n- public static int getActionBarHeight(Activity activity)\n \n    获得ActionBar的高度\n\n- public static boolean hasNotchScreen(Activity activity)\n \n    是否是刘海屏\n    \n- public static boolean getNotchHeight(Activity activity)\n \n    获得刘海屏高度\n    \n- public static boolean isSupportStatusBarDarkFont()\n \n    判断当前设备支不支持状态栏字体设置为黑色\n\n- public static boolean isSupportNavigationIconDark()\n \n    判断当前设备支不支持导航栏图标设置为黑色\n\n- public static void hideStatusBar(Window window) \n \n    隐藏状态栏\n    \n    \n## 混淆规则(proguard-rules.pro)\n#### 3.1.1以上版本无需混淆\n#### 3.0.0以下版本混淆规制\n   ```\n    -keep class com.gyf.immersionbar.* {*;} \n    -dontwarn com.gyf.immersionbar.**\n   ```\n   \n## 问题汇总\n#### 点我[问题汇总](https://github.com/gyf-dev/ImmersionBar/wiki/questions)\n    \n\n## 效果图 ##\n#### 说明 ####\n- 这是状态栏\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/StatusBar.png)\n- 这是导航栏（有些手机没有导航栏）\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/NavigationBar.png)\n#### 动态图 ####\n- android 6.0 有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_6.0.gif\"/>\n\n- android 4.4 有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_4.4.gif\"/>\n\n- android 4.4 没有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_4.4_no.gif\"/>\n\n## 特别鸣谢 ##\n* 感谢[zhangzhen92](https://github.com/zhangzhen92)、 [yutouxiansheng](https://github.com/yutouxiansheng) 、[MrWhhh](https://github.com/MrWhhh)提供测试\n\n## 联系我 ##\n- QQ群 314360549（问题交流）"
        },
        {
          "name": "README_1.x.md",
          "type": "blob",
          "size": 4.173828125,
          "content": "# ImmersionBar -- android 4.4以上沉浸式实现 #\n\n## 使用 ##\n该项目已经上传到jCenter仓库中，使用的时候可以直接使用compile依赖，android studio用户用法如下\n\n\tcompile 'com.gyf.barlibrary:barlibrary:1.2.2'\neclipse用户直接下载jar包\n\n[barlibrary-1.2.2.jar](https://github.com/gyf-dev/ImmersionBar/blob/master/jar/barlibrary-1.2.2.jar) \n\n历史版本\n\n[barlibrary-1.2.1.jar](https://github.com/gyf-dev/ImmersionBar/blob/master/jar/barlibrary-1.2.1.jar)\n\n版本说明\n\n>1.2.2\n- 修复当设置BarManager.setBarColor(this, BarType.STATUS_BAR, ContextCompat.getColor(this, R.color.colorPrimary), false)时，导航栏为白色的问题\n- 增加setBarColor(Activity activity, int BarColor, boolean isFullScreen)方法\n- 其他小修小补\n \n## 下载demo ##\n[点我](https://github.com/gyf-dev/ImmersionBar/blob/master/apk/sample-debug.apk) \n  \n## 用法 BarManager.xxx()方法 ##\n#### ① 以下方法是自定义状态栏和导航栏颜色，任选其一使用，style风格使用NoActionBar效果更佳 ####\n\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot3.png)\n\n- public static void setBarColor(Activity activity)\n \n\tActivity非全屏,默认状态栏为透明色，导航栏为黑色\n\n- public static void setBarColor(Activity activity,boolean isFullScreen)\n\n\tisFullScreen为true状态栏和导航栏全为透明色，isFullScreen为false同public static void immersionBar(Activity activity)\n\n- public static void setBarColor(Activity activity, int BarColor, boolean isFullScreen)\n    \n    设置状态栏和导航栏颜色相同\n\n- public static void setBarColor(Activity activity, BarType barType,int BarColor,boolean isFullScreen)\n\n\t自定义状态栏和导航栏其中一个的颜色或者全部为同一种颜色\n\n- public static void setBarColor(Activity activity, int StatusBarColor, int NavigationBarColor,boolean isFullScreen)\n\n\t自定义状态栏和导航栏颜色\n\t\n\t\n> isFullScreen说明：\n> \ntrue--Activity全屏显示，但导航栏不会被隐藏，导航栏依然可见，Activity底部布局部分会被导航栏遮住。\n>\n false--Activity非全屏显示，但导航栏不会被隐藏，导航栏依然可见，Activity底部布局不会被导航栏遮住。\t\n\t\n#### ② 状态栏和导航栏其它方法 ####\n- public static void hideBar(Activity activity, BarHide barHide)\n\n\t隐藏或显示状态栏和导航栏。 状态栏和导航栏的颜色不起作用，都是透明色，以最后一次调用为准\n\t\n- public static boolean hasNavigationBar(Activity activity)\n \n    判断是否存在导航栏\n    \n- public static int getNavigationBarHeight(Activity activity)\n \n    获得导航栏的高度\n \n- public static int getNavigationBarWidth(Activity activity)\n \n    获得导航栏的宽度\n    \n- public static boolean isNavigationAtBottom(Activity activity)\n \n    判断导航栏是否在底部\n    \n- public static int getStatusBarHeight(Activity activity)\n \n    或得状态栏的高度\n    \n- public static int getActionBarHeight(Activity activity)\n \n    或得ActionBar得高度\n\n- public static void setStatusBarDarkFont(Activity activity, boolean dark)\n\n    设置状态栏字体颜色，dark为true为深色，否则为亮色（android6.0以上或者miuiv6以上或者flymeOS）\n\n## 效果图 ##\n#### 说明 ####\n- 这是状态栏\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/StatusBar.png)\n- 这是导航栏（有些手机没有导航栏）\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/NavigationBar.png)\n#### 动态图 ####\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_gif.gif)\n#### 静态图 ####\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot0.png)\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot1.png)\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot2.png)\n## 参考 ##\n- Android 4.4使用的是github上第三方库实现，参考地址：https://github.com/jgilfelt/SystemBarTint\n- Android 5.0以上使用自带Api实现\n\n## 联系我 ##\n- QQ 969565471\n- WeChat(微信)\n \n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/wechat.JPG)"
        },
        {
          "name": "README_2.x.md",
          "type": "blob",
          "size": 21.1484375,
          "content": "![logo](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/readme_head.png)\n# ImmersionBar -- android 4.4以上沉浸式实现 \n\n## 直接看效果图，最下面有各个版本的效果图\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_6.0.gif\"/>\n\n## 使用 \n> android studio\n\n- 2.3.1+版本 (由于之前账户密码忘记，所以只能重新更改依赖路径)\n   ```groovy\n   implementation 'com.gyf.immersionbar:immersionbar:2.3.3'\n   ```\n- 2.3.0以下版本\n   ```groovy\n   implementation 'com.gyf.barlibrary:barlibrary:2.3.0'\n   ```\n\n>eclipse\n\n[immersionbar-2.3.3.aar](https://github.com/gyf-dev/ImmersionBar/blob/master/jar/immersionbar-2.3.3.aar) \n\n## 版本说明\n### [点我查看版本说明](https://github.com/gyf-dev/ImmersionBar/wiki)\n\n## 下载demo \n### [点我下载immersionBar-2.3.3.apk](https://github.com/gyf-dev/ImmersionBar/blob/master/apk/immersionBar-2.3.3.apk) \n\n## 关于使用AndroidX支持库\n- 如果你的项目中使用了AndroidX支持库，请在你的gradle.properties加入如下配置，如果已经配置了，请忽略\n    ```groovy\n       android.useAndroidX=true\n       android.enableJetifier=true\n    ```\n\n## 关于全面屏与刘海\n### 关于全面屏\n   在manifest加入如下配置，四选其一，或者都写\n   \n   ① 在manifest的Application节点下加入\n   ```xml\n      <meta-data \n        android:name=\"android.max_aspect\"\n        android:value=\"2.4\" />\n   ```\n   ② 在manifest的Application节点中加入\n   ```xml\n      android:resizeableActivity=\"true\"\n   ```\n   ③ 在manifest的Application节点中加入\n   ```xml\n      android:maxAspectRatio=\"2.4\"\n   ```\n   ④ 升级targetSdkVersion为25以上版本\n   \n### 关于刘海屏 \n  在manifest的Application节点下加入，vivo和oppo没有找到相关配置信息\n   ```xml\n      <!--适配华为（huawei）刘海屏-->\n      <meta-data \n        android:name=\"android.notch_support\" \n        android:value=\"true\"/>\n      <!--适配小米（xiaomi）刘海屏-->\n      <meta-data\n        android:name=\"notch.config\"\n        android:value=\"portrait|landscape\" />\n   ```\n  \n## 用法\n### 初始化\n- 基础用法（已经可以满足日常沉浸式）\n\n    ```java\n    ImmersionBar.with(this).init();\n    ```\n- 高级用法(每个参数的意义)\n\n    ```java\n     ImmersionBar.with(this)\n                 .transparentStatusBar()  //透明状态栏，不写默认透明色\n                 .transparentNavigationBar()  //透明导航栏，不写默认黑色(设置此方法，fullScreen()方法自动为true)\n                 .transparentBar()             //透明状态栏和导航栏，不写默认状态栏为透明色，导航栏为黑色（设置此方法，fullScreen()方法自动为true）\n                 .statusBarColor(R.color.colorPrimary)     //状态栏颜色，不写默认透明色\n                 .navigationBarColor(R.color.colorPrimary) //导航栏颜色，不写默认黑色\n                 .barColor(R.color.colorPrimary)  //同时自定义状态栏和导航栏颜色，不写默认状态栏为透明色，导航栏为黑色\n                 .statusBarAlpha(0.3f)  //状态栏透明度，不写默认0.0f\n                 .navigationBarAlpha(0.4f)  //导航栏透明度，不写默认0.0F\n                 .barAlpha(0.3f)  //状态栏和导航栏透明度，不写默认0.0f\n                 .statusBarDarkFont(true)   //状态栏字体是深色，不写默认为亮色\n                 .navigationBarDarkIcon(true) //导航栏图标是深色，不写默认为亮色\n                 .autoDarkModeEnable(true) //自动状态栏字体和导航栏图标变色，必须指定状态栏颜色和导航栏颜色才可以自动变色哦\n                 .autoStatusBarDarkModeEnable(true,0.2f) //自动状态栏字体变色，必须指定状态栏颜色才可以自动变色哦\n                 .autoNavigationBarDarkModeEnable(true,0.2f) //自动导航栏图标变色，必须指定导航栏颜色才可以自动变色哦\n                 .flymeOSStatusBarFontColor(R.color.btn3)  //修改flyme OS状态栏字体颜色\n                 .fullScreen(true)      //有导航栏的情况下，activity全屏显示，也就是activity最下面被导航栏覆盖，不写默认非全屏\n                 .hideBar(BarHide.FLAG_HIDE_BAR)  //隐藏状态栏或导航栏或两者，不写默认不隐藏\n                 .addViewSupportTransformColor(toolbar)  //设置支持view变色，可以添加多个view，不指定颜色，默认和状态栏同色，还有两个重载方法\n                 .titleBar(view)    //解决状态栏和布局重叠问题，任选其一\n                 .titleBarMarginTop(view)     //解决状态栏和布局重叠问题，任选其一\n                 .statusBarView(view)  //解决状态栏和布局重叠问题，任选其一\n                 .fitsSystemWindows(true)    //解决状态栏和布局重叠问题，任选其一，默认为false，当为true时一定要指定statusBarColor()，不然状态栏为透明色，还有一些重载方法\n                 .supportActionBar(true) //支持ActionBar使用\n                 .statusBarColorTransform(R.color.orange)  //状态栏变色后的颜色\n                 .navigationBarColorTransform(R.color.orange) //导航栏变色后的颜色\n                 .barColorTransform(R.color.orange)  //状态栏和导航栏变色后的颜色\n                 .removeSupportView(toolbar)  //移除指定view支持\n                 .removeSupportAllView() //移除全部view支持\n                 .navigationBarEnable(true)   //是否可以修改导航栏颜色，默认为true\n                 .navigationBarWithKitkatEnable(true)  //是否可以修改安卓4.4和emui3.1手机导航栏颜色，默认为true\n                 .fixMarginAtBottom(true)   //已过时，当xml里使用android:fitsSystemWindows=\"true\"属性时,解决4.4和emui3.1手机底部有时会出现多余空白的问题，默认为false，非必须\n                 .addTag(\"tag\")  //给以上设置的参数打标记\n                 .getTag(\"tag\")  //根据tag获得沉浸式参数\n                 .reset()  //重置所以沉浸式参数\n                 .keyboardEnable(true)  //解决软键盘与底部输入框冲突问题，默认为false，还有一个重载方法，可以指定软键盘mode\n                 .keyboardMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)  //单独指定软键盘模式\n                 .setOnKeyboardListener(new OnKeyboardListener() {    //软键盘监听回调\n                       @Override\n                       public void onKeyboardChange(boolean isPopup, int keyboardHeight) {\n                           LogUtils.e(isPopup);  //isPopup为true，软键盘弹出，为false，软键盘关闭\n                       }\n                  })\n                 .init();  //必须调用方可沉浸式\n    ```\n    \n### 关闭销毁\n- 在activity的onDestroy方法中执行\n\n    ```java\n    ImmersionBar.with(this).destroy(); //必须调用该方法，防止内存泄漏\n    ```\n\t\n## 建议\n- 建议在BaseActivity中初始化和销毁,可以参看demo中[BaseActivity](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/activity/BaseActivity.java)\n\n    ```java\n    public class BaseActivity extends AppCompatActivity {\n  \n         @Override\n         protected void onCreate(@Nullable Bundle savedInstanceState) {\n             super.onCreate(savedInstanceState);\n             // 所有子类都将继承这些相同的属性,请在设置界面之后设置\n             ImmersionBar.with(this).init();  \n         }\n       \n         @Override\n         protected void onResume() {\n             super.onResume();\n             // 非必加\n             // 如果你的app可以横竖屏切换，适配了华为emui3系列系统手机，并且navigationBarWithEMUI3Enable为true，\n             // 请在onResume方法里添加这句代码（同时满足这三个条件才需要加上代码哦：1、横竖屏可以切换；2、华为emui3系列系统手机；3、navigationBarWithEMUI3Enable为true）\n             // 否则请忽略\n             if (OSUtils.isEMUI3_x()) {\n                 ImmersionBar.with(this).init();   \n             }   \n         }\n     \n         @Override\n         protected void onDestroy() {\n             super.onDestroy();\n             // 必须调用该方法，防止内存泄漏\n             ImmersionBar.with(this).destroy();  \n         }\n       \n        @Override\n         protected void onConfigurationChanged(Configuration newConfig) {\n             super.onConfigurationChanged(newConfig);\n             // 非必加\n             // 如果你的app可以横竖屏切换，适配了4.4或者华为emui3.1系统手机，并且navigationBarWithKitkatEnable为true，\n             // 请务必在onConfigurationChanged方法里添加如下代码（同时满足这三个条件才需要加上代码哦：1、横竖屏可以切换；2、android4.4或者华为emui3.1系统手机；3、navigationBarWithKitkatEnable为true）\n             // 否则请忽略\n             ImmersionBar.with(this).init();   \n         }\n     }\n    ```\n\n## 在Fragment中实现沉浸式\n\n#### 在Fragment使用ImmersionBar\n  - 第一种，你的Fragment直接继承[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/SimpleImmersionFragment.java)或者[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/ImmersionFragment.java)类，在initImmersionBar方法中实现沉浸式代码，只有当immersionBarEnabled返回为true才可以走initImmersionBar方法哦，不过immersionBarEnabled默认返回已经为true了，如果当前Fragment不想走沉浸式方法，请将immersionBarEnabled设置为false\n  - 第二种，如果你的Fragment不能继承[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/SimpleImmersionFragment.java)或者[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/ImmersionFragment.java)类，请参考[SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/SimpleImmersionFragment.java)实现[SimpleImmersionOwner](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/SimpleImmersionOwner.java)接口，或者参考[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/ImmersionFragment.java)实现[ImmersionOwner](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/ImmersionOwner.java)接口\n  \n  > [SimpleImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/SimpleImmersionFragment.java)和[ImmersionFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/barlibrary/src/main/java/com/gyf/barlibrary/ImmersionFragment.java)区别是什么？\n    \n   | 方法名字 | SimpleImmersionFragment | ImmersionFragment |\n   | :------: | :------: | :------: |\n   | initImmersionBar()：沉浸式代码写着这里 | ✅ | ✅ |\n   | immersionBarEnabled()：当前Fragment是否可以走initImmersionBar方法 | ✅ | ✅ |\n   | onLazyBeforeView()：懒加载，在view初始化之前调用 | ❌ | ✅ |\n   | onLazyAfterView()：懒加载，在view初始化之后调用 | ❌ | ✅ |\n   | onVisible()：当前Fragment对用户可见的时候调用 | ❌ | ✅ |\n   | onInvisible()：当前Fragment不可见的时候调用 | ❌ | ✅ |\n    \n#### 在Activity使用ImmersionBar\n  - 第一种，当结合viewpager使用的时候，请使用viewpager的addOnPageChangeListener的方法监听沉浸式，参考demo中[FragmentThreeActivity](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/activity/FragmentThreeActivity.java)这个类\n  - 第二种，当使用show()和hide()来控制Fragment显示隐藏的时候，请在tab切换的时候使用ImmersionBar，参考demo中[FragmentFourActivity](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/activity/FragmentFourActivity.java)这个类\n#### 使用Fragment第三方框架[Fragmentation](https://github.com/YoKeyword/Fragmentation)实现沉浸式\n  - 参考demo中[FragmentFiveActivity](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/activity/FragmentFiveActivity.java)和[BaseFiveFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/fragment/five/BaseFiveFragment.java)这个类\n\n## 在Dialog中实现沉浸式，具体实现参考demo\n- ①结合dialogFragment使用，可以参考demo中的[BaseDialogFragment](https://github.com/gyf-dev/ImmersionBar/blob/master/sample/src/main/java/com/gyf/immersionbar/fragment/dialog/BaseDialogFragment.java)这个类\n\n   ```java\n         ImmersionBar.with(this).init();\n      \n   ```\n- ②其他dialog\n    ```java\n         ImmersionBar.with(this, dialog).init();\n         \n    ```\n    \n   注意：在dialog使用，当销毁dialog同时，别忘了调用ImmersionBar的destroy方法了\n   \n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_dialog.gif\"/>\n\n## 状态栏与布局顶部重叠解决方案，六种方案任选其一\n- ① 使用dimen自定义状态栏高度，不建议使用，因为设备状态栏高度并不是固定的\n\n    在values-v19/dimens.xml文件下\n    ```xml\n        <dimen name=\"status_bar_height\">25dp</dimen>\n     ```\n    \n    在values/dimens.xml文件下     \n    ```xml\n        <dimen name=\"status_bar_height\">0dp</dimen>\n    ```\n    \n    然后在布局界面添加view标签，高度指定为status_bar_height\n    ```xml\n       <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n           xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:background=\"@color/darker_gray\"\n           android:orientation=\"vertical\">\n       \n           <View\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"@dimen/status_bar_height\"\n               android:background=\"@color/colorPrimary\" />\n       \n           <android.support.v7.widget.Toolbar\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"\n               android:background=\"@color/colorPrimary\"\n               app:title=\"方法一\"\n               app:titleTextColor=\"@android:color/white\" />\n       </LinearLayout>\n    ```\n  \n- ② 使用系统的fitsSystemWindows属性，使用该属性不会导致输入框与软键盘冲突问题，不要再Fragment使用该属性\n\n   ```xml\n       <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\"\n           android:orientation=\"vertical\"\n           android:fitsSystemWindows=\"true\">\n       </LinearLayout>\n   ```\n   然后使用ImmersionBar时候必须指定状态栏颜色\n   ```java\n       ImmersionBar.with(this)\n            .statusBarColor(R.color.colorPrimary)\n            .init();\n   ```\n   - 注意：ImmersionBar一定要在设置完布局以后使用，\n\n- ③ 使用ImmersionBar的fitsSystemWindows(boolean fits)方法\n\n    ```java\n        ImmersionBar.with(this)\n            .fitsSystemWindows(true)  //使用该属性,必须指定状态栏颜色\n            .statusBarColor(R.color.colorPrimary)\n            .init();\n    ```\n- ④ 使用ImmersionBar的statusBarView(View view)方法\n\n    在标题栏的上方增加View标签，高度指定为0dp\n    ```xml\n        <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n               xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"match_parent\"\n               android:background=\"@color/darker_gray\"\n               android:orientation=\"vertical\">\n           \n               <View\n                   android:layout_width=\"match_parent\"\n                   android:layout_height=\"0dp\"\n                   android:background=\"@color/colorPrimary\" />\n           \n               <android.support.v7.widget.Toolbar\n                   android:layout_width=\"match_parent\"\n                   android:layout_height=\"wrap_content\"\n                   android:background=\"@color/colorPrimary\"\n                   app:title=\"方法四\"\n                   app:titleTextColor=\"@android:color/white\" />\n        </LinearLayout>\n     ```\n      \n    然后使用ImmersionBar的statusBarView方法，指定view就可以啦\n    ```java\n         ImmersionBar.with(this)\n               .statusBarView(view)\n               .init();\n         //或者\n         //ImmersionBar.setStatusBarView(this,view);\n     ```   \n- ⑤ 使用ImmersionBar的titleBar(View view)方法，原理是设置paddingTop\n    ```java\n             ImmersionBar.with(this)\n                   .titleBar(view) //可以为任意view，如果是自定义xml实现标题栏的话，标题栏根节点不能为RelativeLayout或者ConstraintLayout，以及其子类\n                   .init();\n             //或者\n             //ImmersionBar.setTitleBar(this, view);\n     ```\n- ⑥ 使用ImmersionBar的titleBarMarginTop(View view)方法，原理是设置marginTop\n    ```java\n             ImmersionBar.with(this)\n                   .titleBarMarginTop(view)  //可以为任意view\n                   .statusBarColor(R.color.colorPrimary)  //指定状态栏颜色,根据情况是否设置\n                   .init();\n             //或者使用静态方法设置\n             //ImmersionBar.setTitleBarMarginTop(this,view);\n     ```\n       \n## 解决EditText和软键盘的问题\n\n - 第一种方案\n   ```java\n       ImmersionBar.with(this)\n                   .keyboardEnable(true)  //解决软键盘与底部输入框冲突问题\n               //  .keyboardEnable(true, WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE\n               //                        | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)  //软键盘自动弹出\n                   .init();\n   ```\n - 第二种方案\n   不使用keyboardEnable方法，只需要在布局的根节点（最外层节点）加上android:fitsSystemWindows=\"true\"属性即可，只适合纯色状态栏\n    \n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_edit.gif\"/>\n\n## 当白色背景状态栏遇到不能改变状态栏字体为深色的设备时，解决方案\n   ```java\n         ImmersionBar.with(this)\n                     .statusBarDarkFont(true, 0.2f) //原理：如果当前设备支持状态栏字体变色，会设置状态栏字体为黑色，如果当前设备不支持状态栏字体变色，会使当前状态栏加上透明度，否则不执行透明度\n                     .init();\n   ```\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/whiteStatusBar.png\"/>\n\n## 关于结合今日头条屏幕适配\n- 有些小伙伴使用之后，状态栏与标题栏之间仍然会有白色空隙，请升级为2.3.2-beta02以上版本\n    \n## 状态栏和导航栏其它方法\n\t\n- public static boolean hasNavigationBar(Activity activity)\n \n    判断是否存在导航栏\n    \n- public static int getNavigationBarHeight(Activity activity)\n \n    获得导航栏的高度\n \n- public static int getNavigationBarWidth(Activity activity)\n \n    获得导航栏的宽度\n    \n- public static boolean isNavigationAtBottom(Activity activity)\n \n    判断导航栏是否在底部\n    \n- public static int getStatusBarHeight(Activity activity)\n \n    获得状态栏的高度\n    \n- public static int getActionBarHeight(Activity activity)\n \n    获得ActionBar的高度\n\n- public static boolean hasNotchScreen(Activity activity)\n \n    是否是刘海屏\n    \n- public static boolean isSupportStatusBarDarkFont()\n \n    判断当前设备支不支持状态栏字体设置为黑色\n\n- public static boolean isSupportNavigationIconDark()\n \n    判断当前设备支不支持导航栏图标设置为黑色\n\n- public static void hideStatusBar(Window window) \n \n    隐藏状态栏\n    \n    \n## 混淆规则(proguard-rules.pro)\n   ```\n    -keep class com.gyf.barlibrary.* {*;} \n    -dontwarn com.gyf.barlibrary.**\n   ```\n\n## 效果图 ##\n#### 说明 ####\n- 这是状态栏\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/StatusBar.png)\n- 这是导航栏（有些手机没有导航栏）\n![image](https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/NavigationBar.png)\n#### 动态图 ####\n- android 6.0 有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_6.0.gif\"/>\n\n- android 4.4 有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_4.4.gif\"/>\n\n- android 4.4 没有导航栏效果\n<img width=\"300\"  src=\"https://github.com/gyf-dev/Screenshots/blob/master/ImmersionBar/Screenshot_4.4_no.gif\"/>\n\n## 特别鸣谢 ##\n* 感谢[zhangzhen92](https://github.com/zhangzhen92)、 [yutouxiansheng](https://github.com/yutouxiansheng) 、[MrWhhh](https://github.com/MrWhhh)提供测试\n\n## 联系我 ##\n- QQ群 314360549（问题交流）"
        },
        {
          "name": "apk",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.94921875,
          "content": "import java.util.function.Consumer\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.4.32'\n    ext.immersionbar_version = '3.2.2'\n    repositories {\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        mavenCentral()\n        google()\n        jcenter()\n    }\n    dependencies {\n\n        classpath 'com.android.tools.build:gradle:7.1.2'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        mavenCentral()\n        google()\n        jcenter()\n        maven { url 'https://jitpack.io' }\n    }\n    tasks.withType(Javadoc) {\n        options {\n            encoding \"UTF-8\"\n            charSet 'UTF-8'\n            links \"http://docs.oracle.com/javase/7/docs/api\"\n        }\n        options.addStringOption('Xdoclint:none', '-quiet')\n        options.addStringOption('encoding', 'UTF-8')\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\nsubprojects.forEach(new Consumer<Project>() {\n    @Override\n    void accept(Project project) {\n        [\"com.android.library\"].forEach(new Consumer<String>() {\n            @Override\n            void accept(String s) {\n                project.getPlugins().withId(s) {\n                    project.afterEvaluate {\n                        def file = new File(project.getProjectDir().parent, \"gradle/publish-mavencentral.gradle\")\n                        if (file.exists()) {\n                            project.apply from: file\n                        }\n                    }\n                }\n            }\n        })\n    }\n})\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.79296875,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\nandroid.enableJetifier=true\nandroid.useAndroidX=true\norg.gradle.jvmargs=-Xmx1536m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n# android.enableAapt2= false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.259765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "immersionbar-components",
          "type": "tree",
          "content": null
        },
        {
          "name": "immersionbar-ktx",
          "type": "tree",
          "content": null
        },
        {
          "name": "immersionbar-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "immersionbar",
          "type": "tree",
          "content": null
        },
        {
          "name": "jar",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.0947265625,
          "content": "include ':immersionbar', ':immersionbar-ktx', ':immersionbar-components', ':immersionbar-sample'\n"
        }
      ]
    }
  ]
}