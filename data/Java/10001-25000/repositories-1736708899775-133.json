{
  "metadata": {
    "timestamp": 1736708899775,
    "page": 133,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grpc/grpc-java",
      "stars": 11538,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.126953125,
          "content": "# examples has its own WORKSPACE. Ignore as part of this root WORKSPACE so that\n# we don't need to repeat dependencies.\nexamples/\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.0498046875,
          "content": "build --cxxopt=-std=c++14 --host_cxxopt=-std=c++14\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1328125,
          "content": "TestService.java.txt -text\nTestServiceLite.java.txt -text\nTestDeprecatedService.java.txt -text\nTestDeprecatedServiceLite.java.txt -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4072265625,
          "content": "# Gradle\nbuild\ngradle.properties\n.gradle\nlocal.properties\nout\n\n# Maven (examples)\ntarget\n\n# Bazel\nbazel-bin\nbazel-examples\nbazel-genfiles\nbazel-grpc-java\nbazel-out\nbazel-testlogs\nMODULE.bazel.lock\n\n# IntelliJ IDEA\n.idea\n*.iml\n*.ipr\n*.iws\n.ijwb\n\n# Eclipse\n.classpath\n.project\n.settings\n.gitignore\nbin\n\n# OS X\n.DS_Store\n\n# Emacs\n*~\n\\#*\\#\n\n# ARM tests\nqemu-arm-static\n\n# Temporary output dir for artifacts\nmvn-artifacts\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.01171875,
          "content": "Google Inc.\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 2.1220703125,
          "content": "# Copyright 2017 The gRPC Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nload(\"@rules_jvm_external//:defs.bzl\", \"artifact\")\nload(\":java_grpc_library.bzl\", \"java_grpc_library\")\n\njava_proto_library(\n    name = \"api_proto_java\",\n    deps = [\"@com_google_protobuf//:api_proto\"],\n)\n\njava_grpc_library(\n    name = \"java_grpc_library__external_repo_test\",\n    srcs = [\"@com_google_protobuf//:api_proto\"],\n    deps = [\":api_proto_java\"],\n)\n\njava_library(\n    name = \"java_grpc_library_deps__do_not_reference\",\n    visibility = [\"//visibility:public\"],\n    exports = [\n        \"//api\",\n        \"//protobuf\",\n        \"//stub\",\n        \"//stub:javax_annotation\",\n        \"@com_google_protobuf//:protobuf_java\",\n        artifact(\"com.google.code.findbugs:jsr305\"),\n        artifact(\"com.google.guava:guava\"),\n    ],\n)\n\njava_library(\n    name = \"java_lite_grpc_library_deps__do_not_reference\",\n    visibility = [\"//visibility:public\"],\n    exports = [\n        \"//api\",\n        \"//protobuf-lite\",\n        \"//stub\",\n        \"//stub:javax_annotation\",\n        artifact(\"com.google.code.findbugs:jsr305\"),\n        artifact(\"com.google.guava:guava\"),\n    ],\n)\n\njava_plugin(\n    name = \"auto_value\",\n    generates_api = 1,\n    processor_class = \"com.google.auto.value.processor.AutoValueProcessor\",\n    deps = [artifact(\"com.google.auto.value:auto-value\")],\n)\n\njava_library(\n    name = \"auto_value_annotations\",\n    exported_plugins = [\":auto_value\"],\n    neverlink = 1,\n    visibility = [\"//:__subpackages__\"],\n    exports = [\n        artifact(\"com.google.auto.value:auto-value-annotations\"),\n        artifact(\"org.apache.tomcat:annotations-api\"),  # @Generated for Java 9+\n    ],\n)\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 0.134765625,
          "content": "## Community Code of Conduct\n\ngRPC follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n"
        },
        {
          "name": "COMPILING.md",
          "type": "blob",
          "size": 5.912109375,
          "content": "Building gRPC-Java\n==================\n\nBuilding is only necessary if you are making changes to gRPC-Java or testing/using a non-released\n version (e.g. master HEAD) of gRPC-Java library.\n\nBuilding requires JDK 8, as our tests use TLS.\n\ngrpc-java has a C++ code generation plugin for protoc. Since many Java\ndevelopers don't have C compilers installed and don't need to run or modify the\ncodegen, the build can skip it. To skip, create the file\n`<project-root>/gradle.properties` and add `skipCodegen=true`.\n\nSome parts of grpc-java depend on Android. Since many Java developers don't have\nthe Android SDK installed and don't need to run or modify the Android\ncomponents, the build can skip it. To skip, create the file\n`<project-root>/gradle.properties` and add `skipAndroid=true`.\nOtherwise, create the file `<project-root>/gradle.properties` and add `android.useAndroidX=true`.\n\nThen, to build, run:\n```\n$ ./gradlew build\n```\n\nTo install the artifacts to your Maven local repository for use in your own\nproject, run:\n```\n$ ./gradlew publishToMavenLocal\n```\n\n### Notes for IntelliJ\nBuilding in IntelliJ works best when you import the project as a Gradle project and delegate IDE\nbuild/run actions to Gradle.\n\nYou can find this setting at:\n```Settings -> Build, Execution, Deployment\n      -> Build Tools -> Gradle -> Runner\n      -> Delegate IDE build/run actions to gradle.\n```\n\nHow to Build Code Generation Plugin\n-----------------------------------\nThis section is only necessary if you are making changes to the code\ngeneration. Most users only need to use `skipCodegen=true` as discussed above.\n\n### Build Protobuf\nThe codegen plugin is C++ code and requires protobuf 21.7 or later.\n\nFor Linux, Mac and MinGW:\n```\n$ PROTOBUF_VERSION=21.7\n$ curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-all-$PROTOBUF_VERSION.tar.gz\n$ tar xzf protobuf-all-$PROTOBUF_VERSION.tar.gz\n$ cd protobuf-$PROTOBUF_VERSION\n$ ./configure --disable-shared\n$ make   # You may want to pass -j to make this run faster; see make --help\n$ sudo make install\n```\n\nIf you are comfortable with C++ compilation and autotools, you can specify a\n``--prefix`` for Protobuf and use ``-I`` in ``CXXFLAGS``, ``-L`` in\n``LDFLAGS`` to reference it. The\nenvironment variables will be used when building grpc-java.\n\nProtobuf installs to ``/usr/local`` by default.\n\nFor Visual C++, please refer to the [Protobuf README](https://github.com/google/protobuf/blob/master/cmake/README.md)\nfor how to compile Protobuf. gRPC-java assumes a Release build.\n\n#### Mac\nSome versions of Mac OS X (e.g., 10.10) don't have ``/usr/local`` in the\ndefault search paths for header files and libraries. It will fail the build of\nthe codegen. To work around this, you will need to set environment variables:\n```\n$ export CXXFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\"\n```\n\n### Notes for Visual C++\n\nWhen building on Windows and VC++, you need to specify project properties for\nGradle to find protobuf:\n```\n.\\gradlew publishToMavenLocal ^\n    -PvcProtobufInclude=C:\\path\\to\\protobuf\\src ^\n    -PvcProtobufLibs=C:\\path\\to\\protobuf\\vsprojects\\Release ^\n    -PtargetArch=x86_32\n```\n\nSince specifying those properties every build is bothersome, you can instead\ncreate ``<project-root>\\gradle.properties`` with contents like:\n```\nvcProtobufInclude=C:\\\\path\\\\to\\\\protobuf\\\\src\nvcProtobufLibs=C:\\\\path\\\\to\\\\protobuf\\\\vsprojects\\\\Release\ntargetArch=x86_32\n```\n\nBy default, the build script will build the codegen for the same architecture as\nthe Java runtime installed on your system. If you are using 64-bit JVM, the\ncodegen will be compiled for 64-bit. Since Protobuf is only built for 32-bit by\ndefault, the `targetArch=x86_32` is necessary.\n\n### Notes for MinGW on Windows\nIf you have both MinGW and VC++ installed on Windows, VC++ will be used by\ndefault. To override this default and use MinGW, add ``-PvcDisable=true``\nto your Gradle command line or add ``vcDisable=true`` to your\n``<project-root>\\gradle.properties``.\n\n### Notes for Unsupported Operating Systems\nThe build script pulls pre-compiled ``protoc`` from Maven Central by default.\nWe have built ``protoc`` binaries for popular systems, but they may not work\nfor your system. If ``protoc`` cannot be downloaded or would not run, you can\nuse the one that has been built by your own, by adding this property to\n``<project-root>/gradle.properties``:\n```\nprotoc=/path/to/protoc\n```\n\nHow to install Android SDK\n---------------------------\nThis section is only necessary if you are building modules depending on Android \n(e.g., `cronet`). Non-Android users only need to use `skipAndroid=true` as \ndiscussed above.\n\n### Install via Android Studio (GUI)\nDownload and install Android Studio from [Android Developer site](https://developer.android.com/studio).\nYou can find the configuration for Android SDK at:\n```\nPreferences -> System Settings -> Android SDK\n```\nSelect the version of Android SDK to be installed and click `apply`. The location\nof Android SDK being installed is shown at `Android SDK Location` at the same panel.\nThe default is `$HOME/Library/Android/sdk` for Mac OS and `$HOME/Android/Sdk` for Linux. \nYou can change this to a custom location.\n\n### Install via Command line tools only\nGo to [Android SDK](https://developer.android.com/studio#command-tools) and\ndownload the commandlinetools package for your build machine OS. Decide where\nyou want the Android SDK to be stored. `$HOME/Library/Android/sdk` is typical on\nMac OS and `$HOME/Android/Sdk` for Linux.\n\n```sh\nexport ANDROID_HOME=$HOME/Android/Sdk # Adjust to your liking\nmkdir $HOME/Android\nmkdir $ANDROID_HOME\nmkdir $ANDROID_HOME/cmdline-tools\nunzip -d $ANDROID_HOME/cmdline-tools DOWNLOADS/commandlinetools-*.zip\nmv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest\n# Android SDK is now ready. Now accept licenses so the build can auto-download packages\n$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses\n\n# Add 'export ANDROID_HOME=$HOME/Android/Sdk' to your .bashrc or equivalent\n```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.615234375,
          "content": "# How to contribute\n\nWe definitely welcome your patches and contributions to gRPC! Please read the gRPC\norganization's [governance rules](https://github.com/grpc/grpc-community/blob/master/governance.md)\nand [contribution guidelines](https://github.com/grpc/grpc-community/blob/master/CONTRIBUTING.md) before proceeding.\n\n\nIf you are new to github, please start by reading [Pull Request howto](https://help.github.com/articles/about-pull-requests/)\n\n## Legal requirements\n\nIn order to protect both you and ourselves, you will need to sign the\n[Contributor License Agreement](https://easycla.lfx.linuxfoundation.org/). When\nyou make a PR, a CLA bot will provide a link for the process.\n\n## Compiling\n\nSee [COMPILING.md](COMPILING.md). Specifically, you'll generally want to set\n`skipCodegen=true` so you don't need to deal with the C++ compilation.\n\n## Code style\n\nWe follow the [Google Java Style\nGuide](https://google.github.io/styleguide/javaguide.html). Our\nbuild automatically will provide warnings for style issues.\n[Eclipse](https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml)\nand\n[IntelliJ](https://raw.githubusercontent.com/google/styleguide/gh-pages/intellij-java-google-style.xml)\nstyle configurations are commonly useful. For IntelliJ 14, copy the style to\n`~/.IdeaIC14/config/codestyles/`, start IntelliJ, go to File > Settings > Code\nStyle, and set the Scheme to `GoogleStyle`.\n\n## Guidelines for Pull Requests\nHow to get your contributions merged smoothly and quickly.\n \n- Create **small PRs** that are narrowly focused on **addressing a single concern**. We often times receive PRs that are trying to fix several things at a time, but only one fix is considered acceptable, nothing gets merged and both author's & review's time is wasted. Create more PRs to address different concerns and everyone will be happy.\n \n- For speculative changes, consider opening an issue and discussing it to avoid\n  wasting time on an inappropriate approach. If you are suggesting a behavioral\n  or API change, consider starting with a [gRFC\n  proposal](https://github.com/grpc/proposal).\n\n- Follow [typical Git commit message](https://cbea.ms/git-commit/#seven-rules)\n  structure. Have a good **commit description** as a record of **what** and\n  **why** the change is being made. Link to a GitHub issue if it exists. The\n  commit description makes a good PR description and is auto-copied by GitHub if\n  you have a single commit when creating the PR.\n\n  If your change is mostly for a single module (e.g., other module changes are\n  trivial), prefix your commit summary with the module name changed. Instead of\n  \"Add HTTP/2 faster-than-light support to gRPC Netty\" it is more terse as\n  \"netty: Add faster-than-light support\".\n\n- Don't fix code style and formatting unless you are already changing that line\n  to address an issue. If you do want to fix formatting or style, do that in a\n  separate PR.\n\n- Unless your PR is trivial, you should expect there will be reviewer comments\n  that you'll need to address before merging. Address comments with additional\n  commits so the reviewer can review just the changes; do not squash reviewed\n  commits unless the reviewer agrees. PRs are squashed when merging.\n\n- Keep your PR up to date with upstream/master (if there are merge conflicts, we can't really merge your change).\n\n- **All tests need to be passing** before your change can be merged. We recommend you **run tests locally** before creating your PR to catch breakages early on. Also, `./gradlew build` (`gradlew build` on Windows) **must not introduce any new warnings**.\n \n- Exceptions to the rules can be made if there's a compelling reason for doing so.\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 0.1376953125,
          "content": "This repository is governed by the gRPC organization's [governance rules](https://github.com/grpc/grpc-community/blob/master/governance.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.65234375,
          "content": "This page lists all active maintainers of this repository. If you were a\nmaintainer and would like to add your name to the Emeritus list, please send us a\nPR.\n\nSee [GOVERNANCE.md](https://github.com/grpc/grpc-community/blob/master/governance.md)\nfor governance guidelines and how to become a maintainer.\nSee [CONTRIBUTING.md](https://github.com/grpc/grpc-community/blob/master/CONTRIBUTING.md)\nfor general contribution guidelines.\n\n## Maintainers (in alphabetical order)\n- [ejona86](https://github.com/ejona86), Google LLC\n- [jdcormie](https://github.com/jdcormie), Google LLC\n- [kannanjgithub](https://github.com/kannanjgithub), Google LLC\n- [larry-safran](https://github.com/larry-safran), Google LLC\n- [markb74](https://github.com/markb74), Google LLC\n- [ran-su](https://github.com/ran-su), Google LLC\n- [sergiitk](https://github.com/sergiitk), Google LLC\n- [temawi](https://github.com/temawi), Google LLC\n- [YifeiZhuang](https://github.com/YifeiZhuang), Google LLC\n- [zhangkun83](https://github.com/zhangkun83), Google LLC\n\n## Emeritus Maintainers (in alphabetical order)\n- [carl-mastrangelo](https://github.com/carl-mastrangelo)\n- [creamsoup](https://github.com/creamsoup)\n- [dapengzhang0](https://github.com/dapengzhang0)\n- [ericgribkoff](https://github.com/ericgribkoff)\n- [jiangtaoli2016](https://github.com/jiangtaoli2016)\n- [jtattermusch](https://github.com/jtattermusch)\n- [louiscryan](https://github.com/louiscryan)\n- [nicolasnoble](https://github.com/nicolasnoble)\n- [nmittler](https://github.com/nmittler)\n- [sanjaypujare](https://github.com/sanjaypujare)\n- [srini100](https://github.com/srini100)\n- [voidzcy](https://github.com/voidzcy)\n- [zpencer](https://github.com/zpencer)\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 6.0546875,
          "content": "module(\n    name = \"grpc-java\",\n    compatibility_level = 0,\n    repo_name = \"io_grpc_grpc_java\",\n    version = \"1.71.0-SNAPSHOT\",  # CURRENT_GRPC_VERSION\n)\n\n# GRPC_DEPS_START\nIO_GRPC_GRPC_JAVA_ARTIFACTS = [\n    \"com.google.android:annotations:4.1.1.4\",\n    \"com.google.api.grpc:proto-google-common-protos:2.48.0\",\n    \"com.google.auth:google-auth-library-credentials:1.24.1\",\n    \"com.google.auth:google-auth-library-oauth2-http:1.24.1\",\n    \"com.google.auto.value:auto-value-annotations:1.11.0\",\n    \"com.google.auto.value:auto-value:1.11.0\",\n    \"com.google.code.findbugs:jsr305:3.0.2\",\n    \"com.google.code.gson:gson:2.11.0\",\n    \"com.google.errorprone:error_prone_annotations:2.30.0\",\n    \"com.google.guava:failureaccess:1.0.1\",\n    \"com.google.guava:guava:33.3.1-android\",\n    \"com.google.re2j:re2j:1.7\",\n    \"com.google.truth:truth:1.4.2\",\n    \"com.squareup.okhttp:okhttp:2.7.5\",\n    \"com.squareup.okio:okio:2.10.0\",  # 3.0+ needs swapping to -jvm; need work to avoid flag-day\n    \"io.netty:netty-buffer:4.1.110.Final\",\n    \"io.netty:netty-codec-http2:4.1.110.Final\",\n    \"io.netty:netty-codec-http:4.1.110.Final\",\n    \"io.netty:netty-codec-socks:4.1.110.Final\",\n    \"io.netty:netty-codec:4.1.110.Final\",\n    \"io.netty:netty-common:4.1.110.Final\",\n    \"io.netty:netty-handler-proxy:4.1.110.Final\",\n    \"io.netty:netty-handler:4.1.110.Final\",\n    \"io.netty:netty-resolver:4.1.110.Final\",\n    \"io.netty:netty-tcnative-boringssl-static:2.0.65.Final\",\n    \"io.netty:netty-tcnative-classes:2.0.65.Final\",\n    \"io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.110.Final\",\n    \"io.netty:netty-transport-native-unix-common:4.1.110.Final\",\n    \"io.netty:netty-transport:4.1.110.Final\",\n    \"io.opencensus:opencensus-api:0.31.0\",\n    \"io.opencensus:opencensus-contrib-grpc-metrics:0.31.0\",\n    \"io.perfmark:perfmark-api:0.27.0\",\n    \"junit:junit:4.13.2\",\n    \"org.apache.tomcat:annotations-api:6.0.53\",\n    \"org.checkerframework:checker-qual:3.12.0\",\n    \"org.codehaus.mojo:animal-sniffer-annotations:1.24\",\n]\n# GRPC_DEPS_END\n\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\nbazel_dep(name = \"googleapis\", repo_name = \"com_google_googleapis\", version = \"0.0.0-20240326-1c8d509c5\")\n# CEL Spec may be removed when cncf/xds MODULE is no longer using protobuf 27.x\nbazel_dep(name = \"cel-spec\", repo_name = \"dev_cel\", version = \"0.15.0\")\nbazel_dep(name = \"grpc\", repo_name = \"com_github_grpc_grpc\", version = \"1.56.3.bcr.1\")\nbazel_dep(name = \"grpc-proto\", repo_name = \"io_grpc_grpc_proto\", version = \"0.0.0-20240627-ec30f58\")\nbazel_dep(name = \"protobuf\", repo_name = \"com_google_protobuf\", version = \"23.1\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.9\")\nbazel_dep(name = \"rules_java\", version = \"5.3.5\")\nbazel_dep(name = \"rules_go\", repo_name = \"io_bazel_rules_go\", version = \"0.46.0\")\nbazel_dep(name = \"rules_jvm_external\", version = \"6.0\")\nbazel_dep(name = \"rules_proto\", version = \"5.3.0-21.7\")\n\nnon_module_deps = use_extension(\"//:repositories.bzl\", \"grpc_java_repositories_extension\")\n\nuse_repo(\n    non_module_deps,\n    \"com_github_cncf_xds\",\n    \"envoy_api\",\n)\n\ngrpc_repo_deps_ext = use_extension(\"@com_github_grpc_grpc//bazel:grpc_deps.bzl\", \"grpc_repo_deps_ext\")\n\nuse_repo(\n    grpc_repo_deps_ext,\n    \"com_envoyproxy_protoc_gen_validate\",\n    \"opencensus_proto\",\n)\n\nmaven = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\")\n\nmaven.install(\n    artifacts = IO_GRPC_GRPC_JAVA_ARTIFACTS,\n    repositories = [\n        \"https://repo.maven.apache.org/maven2/\",\n    ],\n    strict_visibility = True,\n)\n\nuse_repo(maven, \"maven\")\n\nmaven.override(\n    coordinates = \"com.google.protobuf:protobuf-java\",\n    target = \"@com_google_protobuf//:protobuf_java\",\n)\n\nmaven.override(\n    coordinates = \"com.google.protobuf:protobuf-java-util\",\n    target = \"@com_google_protobuf//:protobuf_java_util\",\n)\n\nmaven.override(\n    coordinates = \"com.google.protobuf:protobuf-javalite\",\n    target = \"@com_google_protobuf//:protobuf_javalite\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-alts\",\n    target = \"@io_grpc_grpc_java//alts\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-api\",\n    target = \"@io_grpc_grpc_java//api\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-auth\",\n    target = \"@io_grpc_grpc_java//auth\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-census\",\n    target = \"@io_grpc_grpc_java//census\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-context\",\n    target = \"@io_grpc_grpc_java//context\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-core\",\n    target = \"@io_grpc_grpc_java//core:core_maven\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-googleapis\",\n    target = \"@io_grpc_grpc_java//googleapis\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-grpclb\",\n    target = \"@io_grpc_grpc_java//grpclb\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-inprocess\",\n    target = \"@io_grpc_grpc_java//inprocess\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-netty\",\n    target = \"@io_grpc_grpc_java//netty\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-netty-shaded\",\n    target = \"@io_grpc_grpc_java//netty:shaded_maven\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-okhttp\",\n    target = \"@io_grpc_grpc_java//okhttp\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-protobuf\",\n    target = \"@io_grpc_grpc_java//protobuf\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-protobuf-lite\",\n    target = \"@io_grpc_grpc_java//protobuf-lite\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-rls\",\n    target = \"@io_grpc_grpc_java//rls\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-services\",\n    target = \"@io_grpc_grpc_java//services:services_maven\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-stub\",\n    target = \"@io_grpc_grpc_java//stub\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-testing\",\n    target = \"@io_grpc_grpc_java//testing\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-xds\",\n    target = \"@io_grpc_grpc_java//xds:xds_maven\",\n)\n\nmaven.override(\n    coordinates = \"io.grpc:grpc-util\",\n    target = \"@io_grpc_grpc_java//util\",\n)\n\nswitched_rules = use_extension(\"@com_google_googleapis//:extensions.bzl\", \"switched_rules\")\n\nswitched_rules.use_languages(java = True)\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 2.01953125,
          "content": "Copyright 2014 The gRPC Authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n-----------------------------------------------------------------------\n\nThis product contains a modified portion of 'OkHttp', an open source\nHTTP & SPDY client for Android and Java applications, which can be obtained\nat:\n\n  * LICENSE:\n    * okhttp/third_party/okhttp/LICENSE (Apache License 2.0)\n  * HOMEPAGE:\n    * https://github.com/square/okhttp\n  * LOCATION_IN_GRPC:\n    * okhttp/third_party/okhttp\n\nThis product contains a modified portion of 'Envoy', an open source\ncloud-native high-performance edge/middle/service proxy, which can be\nobtained at:\n\n  * LICENSE:\n    * xds/third_party/envoy/LICENSE (Apache License 2.0)\n  * NOTICE:\n    * xds/third_party/envoy/NOTICE\n  * HOMEPAGE:\n    * https://www.envoyproxy.io\n  * LOCATION_IN_GRPC:\n    * xds/third_party/envoy\n\nThis product contains a modified portion of 'protoc-gen-validate (PGV)',\nan open source protoc plugin to generate polyglot message validators,\nwhich can be obtained at:\n\n  * LICENSE:\n    * xds/third_party/protoc-gen-validate/LICENSE (Apache License 2.0)\n  * NOTICE:\n      * xds/third_party/protoc-gen-validate/NOTICE\n  * HOMEPAGE:\n    * https://github.com/envoyproxy/protoc-gen-validate\n  * LOCATION_IN_GRPC:\n    * xds/third_party/protoc-gen-validate\n\nThis product contains a modified portion of 'udpa',\nan open source universal data plane API, which can be obtained at:\n\n  * LICENSE:\n    * xds/third_party/udpa/LICENSE (Apache License 2.0)\n  * HOMEPAGE:\n    * https://github.com/cncf/udpa\n  * LOCATION_IN_GRPC:\n    * xds/third_party/udpa\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.859375,
          "content": "gRPC-Java - An RPC library and framework\n========================================\n\n<table>\n  <tr>\n    <td><b>Homepage:</b></td>\n    <td><a href=\"https://grpc.io/\">grpc.io</a></td>\n  </tr>\n  <tr>\n    <td><b>Mailing List:</b></td>\n    <td><a href=\"https://groups.google.com/forum/#!forum/grpc-io\">grpc-io@googlegroups.com</a></td>\n  </tr>\n</table>\n\n[![Join the chat at https://gitter.im/grpc/grpc](https://badges.gitter.im/grpc/grpc.svg)](https://gitter.im/grpc/grpc?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![GitHub Actions Linux Testing](https://github.com/grpc/grpc-java/actions/workflows/testing.yml/badge.svg?branch=master)](https://github.com/grpc/grpc-java/actions/workflows/testing.yml?branch=master)\n[![Line Coverage Status](https://coveralls.io/repos/grpc/grpc-java/badge.svg?branch=master&service=github)](https://coveralls.io/github/grpc/grpc-java?branch=master)\n[![Branch-adjusted Line Coverage Status](https://codecov.io/gh/grpc/grpc-java/branch/master/graph/badge.svg)](https://codecov.io/gh/grpc/grpc-java)\n\nSupported Platforms\n-------------------\n\ngRPC-Java supports Java 8 and later. Android minSdkVersion 21 (Lollipop) and\nlater are supported with [Java 8 language desugaring][android-java-8].\n\nTLS usage on Android typically requires Play Services Dynamic Security Provider.\nPlease see the [Security Readme](SECURITY.md).\n\nOlder Java versions are not directly supported, but a branch remains available\nfor fixes and releases. See [gRFC P5 JDK Version Support\nPolicy][P5-jdk-version-support].\n\nJava version | gRPC Branch\n------------ | -----------\n7            | 1.41.x\n\n[android-java-8]: https://developer.android.com/studio/write/java8-support#supported_features\n[P5-jdk-version-support]: https://github.com/grpc/proposal/blob/master/P5-jdk-version-support.md#proposal\n\nGetting Started\n---------------\n\nFor a guided tour, take a look at the [quick start\nguide](https://grpc.io/docs/languages/java/quickstart) or the more explanatory [gRPC\nbasics](https://grpc.io/docs/languages/java/basics).\n\nThe [examples](https://github.com/grpc/grpc-java/tree/v1.69.0/examples) and the\n[Android example](https://github.com/grpc/grpc-java/tree/v1.69.0/examples/android)\nare standalone projects that showcase the usage of gRPC.\n\nDownload\n--------\n\nDownload [the JARs][]. Or for Maven with non-Android, add to your `pom.xml`:\n```xml\n<dependency>\n  <groupId>io.grpc</groupId>\n  <artifactId>grpc-netty-shaded</artifactId>\n  <version>1.69.0</version>\n  <scope>runtime</scope>\n</dependency>\n<dependency>\n  <groupId>io.grpc</groupId>\n  <artifactId>grpc-protobuf</artifactId>\n  <version>1.69.0</version>\n</dependency>\n<dependency>\n  <groupId>io.grpc</groupId>\n  <artifactId>grpc-stub</artifactId>\n  <version>1.69.0</version>\n</dependency>\n<dependency> <!-- necessary for Java 9+ -->\n  <groupId>org.apache.tomcat</groupId>\n  <artifactId>annotations-api</artifactId>\n  <version>6.0.53</version>\n  <scope>provided</scope>\n</dependency>\n```\n\nOr for Gradle with non-Android, add to your dependencies:\n```gradle\nruntimeOnly 'io.grpc:grpc-netty-shaded:1.69.0'\nimplementation 'io.grpc:grpc-protobuf:1.69.0'\nimplementation 'io.grpc:grpc-stub:1.69.0'\ncompileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+\n```\n\nFor Android client, use `grpc-okhttp` instead of `grpc-netty-shaded` and\n`grpc-protobuf-lite` instead of `grpc-protobuf`:\n```gradle\nimplementation 'io.grpc:grpc-okhttp:1.69.0'\nimplementation 'io.grpc:grpc-protobuf-lite:1.69.0'\nimplementation 'io.grpc:grpc-stub:1.69.0'\ncompileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+\n```\n\nFor [Bazel](https://bazel.build), you can either\n[use Maven](https://github.com/bazelbuild/rules_jvm_external)\n(with the GAVs from above), or use `@io_grpc_grpc_java//api` et al (see below).\n\n[the JARs]:\nhttps://search.maven.org/search?q=g:io.grpc%20AND%20v:1.69.0\n\nDevelopment snapshots are available in [Sonatypes's snapshot\nrepository](https://oss.sonatype.org/content/repositories/snapshots/).\n\nGenerated Code\n--------------\n\nFor protobuf-based codegen, you can put your proto files in the `src/main/proto`\nand `src/test/proto` directories along with an appropriate plugin.\n\nFor protobuf-based codegen integrated with the Maven build system, you can use\n[protobuf-maven-plugin][] (Eclipse and NetBeans users should also look at\n`os-maven-plugin`'s\n[IDE documentation](https://github.com/trustin/os-maven-plugin#issues-with-eclipse-m2e-or-other-ides)):\n```xml\n<build>\n  <extensions>\n    <extension>\n      <groupId>kr.motd.maven</groupId>\n      <artifactId>os-maven-plugin</artifactId>\n      <version>1.7.1</version>\n    </extension>\n  </extensions>\n  <plugins>\n    <plugin>\n      <groupId>org.xolstice.maven.plugins</groupId>\n      <artifactId>protobuf-maven-plugin</artifactId>\n      <version>0.6.1</version>\n      <configuration>\n        <protocArtifact>com.google.protobuf:protoc:3.25.5:exe:${os.detected.classifier}</protocArtifact>\n        <pluginId>grpc-java</pluginId>\n        <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.69.0:exe:${os.detected.classifier}</pluginArtifact>\n      </configuration>\n      <executions>\n        <execution>\n          <goals>\n            <goal>compile</goal>\n            <goal>compile-custom</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n[protobuf-maven-plugin]: https://www.xolstice.org/protobuf-maven-plugin/\n\nFor non-Android protobuf-based codegen integrated with the Gradle build system,\nyou can use [protobuf-gradle-plugin][]:\n```gradle\nplugins {\n    id 'com.google.protobuf' version '0.9.4'\n}\n\nprotobuf {\n  protoc {\n    artifact = \"com.google.protobuf:protoc:3.25.5\"\n  }\n  plugins {\n    grpc {\n      artifact = 'io.grpc:protoc-gen-grpc-java:1.69.0'\n    }\n  }\n  generateProtoTasks {\n    all()*.plugins {\n      grpc {}\n    }\n  }\n}\n```\n\n[protobuf-gradle-plugin]: https://github.com/google/protobuf-gradle-plugin\n\nThe prebuilt protoc-gen-grpc-java binary uses glibc on Linux. If you are\ncompiling on Alpine Linux, you may want to use the [Alpine grpc-java package][]\nwhich uses musl instead.\n\n[Alpine grpc-java package]: https://pkgs.alpinelinux.org/package/edge/community/x86_64/grpc-java\n\nFor Android protobuf-based codegen integrated with the Gradle build system, also\nuse protobuf-gradle-plugin but specify the 'lite' options:\n\n```gradle\nplugins {\n    id 'com.google.protobuf' version '0.9.4'\n}\n\nprotobuf {\n  protoc {\n    artifact = \"com.google.protobuf:protoc:3.25.5\"\n  }\n  plugins {\n    grpc {\n      artifact = 'io.grpc:protoc-gen-grpc-java:1.69.0'\n    }\n  }\n  generateProtoTasks {\n    all().each { task ->\n      task.builtins {\n        java { option 'lite' }\n      }\n      task.plugins {\n        grpc { option 'lite' }\n      }\n    }\n  }\n}\n\n```\n\nFor [Bazel](https://bazel.build), use the [`proto_library`](https://github.com/bazelbuild/rules_proto)\nand the [`java_proto_library`](https://bazel.build/reference/be/java#java_proto_library) (no `load()` required) \nand `load(\"@io_grpc_grpc_java//:java_grpc_library.bzl\", \"java_grpc_library\")` (from this project), as in\n[this example `BUILD.bazel`](https://github.com/grpc/grpc-java/blob/master/examples/BUILD.bazel).\n\nAPI Stability\n-------------\n\nAPIs annotated with `@Internal` are for internal use by the gRPC library and\nshould not be used by gRPC users. APIs annotated with `@ExperimentalApi` are\nsubject to change in future releases, and library code that other projects\nmay depend on should not use these APIs.\n\nWe recommend using the\n[grpc-java-api-checker](https://github.com/grpc/grpc-java-api-checker)\n(an [Error Prone](https://github.com/google/error-prone) plugin)\nto check for usages of `@ExperimentalApi` and `@Internal` in any library code\nthat depends on gRPC. It may also be used to check for `@Internal` usage or\nunintended `@ExperimentalApi` consumption in non-library code.\n\nHow to Build\n------------\n\nIf you are making changes to gRPC-Java, see the [compiling\ninstructions](COMPILING.md).\n\nHigh-level Components\n---------------------\n\nAt a high level there are three distinct layers to the library: *Stub*,\n*Channel*, and *Transport*.\n\n### Stub\n\nThe Stub layer is what is exposed to most developers and provides type-safe\nbindings to whatever datamodel/IDL/interface you are adapting. gRPC comes with\na [plugin](https://github.com/google/grpc-java/blob/master/compiler) to the\nprotocol-buffers compiler that generates Stub interfaces out of `.proto` files,\nbut bindings to other datamodel/IDL are easy and encouraged.\n\n### Channel\n\nThe Channel layer is an abstraction over Transport handling that is suitable for\ninterception/decoration and exposes more behavior to the application than the\nStub layer. It is intended to be easy for application frameworks to use this\nlayer to address cross-cutting concerns such as logging, monitoring, auth, etc.\n\n### Transport\n\nThe Transport layer does the heavy lifting of putting and taking bytes off the\nwire. The interfaces to it are abstract just enough to allow plugging in of\ndifferent implementations. Note the transport layer API is considered internal\nto gRPC and has weaker API guarantees than the core API under package `io.grpc`.\n\ngRPC comes with multiple Transport implementations:\n\n1. The Netty-based HTTP/2 transport is the main transport implementation based\n   on [Netty](https://netty.io). It is not officially supported on Android.\n   There is a \"grpc-netty-shaded\" version of this transport. It is generally\n   preferred over using the Netty-based transport directly as it requires less\n   dependency management and is easier to upgrade within many applications.\n2. The OkHttp-based HTTP/2 transport is a lightweight transport based on\n   [Okio](https://square.github.io/okio/) and forked low-level parts of\n   [OkHttp](https://square.github.io/okhttp/). It is mainly for use on Android.\n3. The in-process transport is for when a server is in the same process as the\n   client. It is used frequently for testing, while also being safe for\n   production use.\n4. The Binder transport is for Android cross-process communication on a single\n   device.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 10.833984375,
          "content": "How to Create a Release of GRPC Java (for Maintainers Only)\n===============================================================\n\nBuild Environments\n------------------\nWe deploy GRPC to Maven Central under the following systems:\n- Ubuntu 14.04 with Docker 13.03.0 that runs CentOS 7\n- Windows 7 64-bit with Visual Studio\n- Mac OS X 10.14.6\n\nOther systems may also work, but we haven't verified them.\n\nCommon Variables\n----------------\nMany of the following commands expect release-specific variables to be set. Set\nthem before continuing, and set them again when resuming.\n\n```bash\nMAJOR=1 MINOR=7 PATCH=0 # Set appropriately for new release\nVERSION_FILES=(\n  MODULE.bazel\n  build.gradle\n  core/src/main/java/io/grpc/internal/GrpcUtil.java\n  examples/MODULE.bazel\n  examples/build.gradle\n  examples/pom.xml\n  examples/android/clientcache/app/build.gradle\n  examples/android/helloworld/app/build.gradle\n  examples/android/routeguide/app/build.gradle\n  examples/android/strictmode/app/build.gradle\n  examples/example-*/build.gradle\n  examples/example-*/pom.xml\n  )\n```\n\n\nBranching the Release\n---------------------\nThe first step in the release process is to create a release branch and bump\nthe SNAPSHOT version. Our release branches follow the naming\nconvention of `v<major>.<minor>.x`, while the tags include the patch version\n`v<major>.<minor>.<patch>`. For example, the same branch `v1.7.x`\nwould be used to create all `v1.7` tags (e.g. `v1.7.0`, `v1.7.1`).\n\n1. Review the issues in the current release [milestone](https://github.com/grpc/grpc-java/milestones)\n   for issues that won't make the cut. Check if any of them can be\n   closed. Be aware of the issues with the [TODO:release blocker][] label.\n   Consider reaching out to the assignee for the status update.\n2. For `master`, change root build files to the next minor snapshot (e.g.\n   ``1.8.0-SNAPSHOT``).\n\n   ```bash\n   git checkout -b bump-version master\n   # Change version to next minor (and keep -SNAPSHOT)\n   sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_GRPC_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\\n     \"${VERSION_FILES[@]}\"\n   sed -i s/$MAJOR.$MINOR.$PATCH/$MAJOR.$((MINOR+1)).0/ \\\n     compiler/src/test{,Lite}/golden/Test{,Deprecated}Service.java.txt\n   ./gradlew build\n   git commit -a -m \"Start $MAJOR.$((MINOR+1)).0 development cycle\"\n   ```\n3. Go through PR review and submit.\n4. Create the release branch starting just before your commit and push it to GitHub:\n\n   ```bash\n   git fetch upstream\n   git checkout -b v$MAJOR.$MINOR.x \\\n     $(git log --pretty=format:%H --grep \"^Start $MAJOR.$((MINOR+1)).0 development cycle\" upstream/master)^\n   git push upstream v$MAJOR.$MINOR.x\n   ```\n5. Continue with Google-internal steps at go/grpc-java/releasing, but stop\n   before `Auto releasing using kokoro`.\n6. Create a milestone for the next release.\n7. Move items out of the release milestone that didn't make the cut. Issues that\n   may be backported should stay in the release milestone. Treat issues with the\n   'release blocker' label with special care.\n8. Begin compiling release notes. This produces a starting point:\n\n   ```bash\n   echo \"## gRPC Java $MAJOR.$MINOR.0 Release Notes\" && echo && \\\n     git shortlog -e --format='%s (%h)' \"$(git merge-base upstream/v$MAJOR.$((MINOR-1)).x upstream/v$MAJOR.$MINOR.x)\"..upstream/v$MAJOR.$MINOR.x | cat && \\\n     echo && echo && echo \"Backported commits in previous release:\" && \\\n     git log --oneline \"$(git merge-base v$MAJOR.$((MINOR-1)).0 upstream/v$MAJOR.$MINOR.x)\"..v$MAJOR.$((MINOR-1)).0^\n   ```\n\n[TODO:release blocker]: https://github.com/grpc/grpc-java/issues?q=label%3A%22TODO%3Arelease+blocker%22\n[TODO:backport]: https://github.com/grpc/grpc-java/issues?q=label%3ATODO%3Abackport\n\nTagging the Release\n-------------------\n\n1. Verify there are no open issues in the release milestone. Open issues should\n   either be deferred or resolved and the fix backported. Verify there are no\n   [TODO:release blocker][] nor [TODO:backport][] issues (open or closed), or\n   that they are tracking an issue for a different branch.\n2. Ensure that the Google-internal steps  \n   at go/grpc-java/releasing#before-tagging-a-release are completed.\n3. For vMajor.Minor.x branch, change `README.md` to refer to the next release\n   version. _Also_ update the version numbers for protoc if the protobuf library\n   version was updated since the last release.\n\n   ```bash\n   git checkout v$MAJOR.$MINOR.x\n   git pull upstream v$MAJOR.$MINOR.x\n   git checkout -b release-v$MAJOR.$MINOR.$PATCH\n   \n   # Bump documented gRPC versions.\n   # Also update protoc version to match protobuf version in gradle/libs.versions.toml.\n   ${EDITOR:-nano -w} README.md\n   \n   git commit -a -m \"Update README etc to reference $MAJOR.$MINOR.$PATCH\"\n   ```\n4. Change root build files to remove \"-SNAPSHOT\" for the next release version\n   (e.g. `0.7.0`). Commit the result and make a tag:\n\n   ```bash\n   # Change version to remove -SNAPSHOT\n   sed -i 's/-SNAPSHOT\\(.*CURRENT_GRPC_VERSION\\)/\\1/' \"${VERSION_FILES[@]}\"\n   sed -i s/-SNAPSHOT// compiler/src/test{,Lite}/golden/Test{,Deprecated}Service.java.txt\n   ./gradlew build\n   git commit -a -m \"Bump version to $MAJOR.$MINOR.$PATCH\"\n   git tag -a v$MAJOR.$MINOR.$PATCH -m \"Version $MAJOR.$MINOR.$PATCH\"\n   ```\n5. Change root build files to the next snapshot version (e.g. `0.7.1-SNAPSHOT`).\n   Commit the result:\n\n   ```bash\n   # Change version to next patch and add -SNAPSHOT\n   sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_GRPC_VERSION\\)/'$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT'\\1/' \\\n     \"${VERSION_FILES[@]}\"\n   sed -i s/$MAJOR.$MINOR.$PATCH/$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT/ \\\n     compiler/src/test{,Lite}/golden/Test{,Deprecated}Service.java.txt\n   ./gradlew build\n   git commit -a -m \"Bump version to $MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT\"\n   git push -u origin release-v$MAJOR.$MINOR.$PATCH\n   ```\n   Raise a PR and set the base branch of the PR to v$MAJOR.$MINOR.x of the upstream grpc-java repo.\n6. Go through PR review and push the release tag and updated release branch to\n   GitHub (DO NOT click the merge button on the GitHub page):\n\n   ```bash\n   git checkout v$MAJOR.$MINOR.x\n   git merge --ff-only release-v$MAJOR.$MINOR.$PATCH\n   git push upstream v$MAJOR.$MINOR.x\n   git push upstream v$MAJOR.$MINOR.$PATCH\n   ```\n7. Close the release milestone.\n\n8. Trigger build as described in \"Auto releasing using kokoro\" at\n   go/grpc-java/releasing.\n\n    It runs three jobs on Kokoro, one on each platform. See their scripts:\n    `linux_artifacts.sh`, `windows.bat`, and `macos.sh`. The mvn-artifacts/\n    outputs of each script is combined into a single folder and then processed\n    by `upload_artifacts.sh`, which signs the files and uploads to Sonatype.\n\n9. Once all of the artifacts have been pushed to the staging repository, the\n   repository should have been closed by `upload_artifacts.sh`. Closing triggers\n   several sanity checks on the repository. If this completes successfully, the\n   repository can then be `released`, which will begin the process of pushing\n   the new artifacts to Maven Central (the staging repository will be destroyed\n   in the process). You can see the complete process for releasing to Maven\n   Central on the [OSSRH site](https://central.sonatype.org/pages/releasing-the-deployment.html).\n\n10. We have containers for each release to detect compatibility regressions with\n    old releases. Generate one for the new release by following the [GCR image\n    generation instructions][gcr-image]. Summary:\n    ```bash\n    # If you haven't previously configured docker:\n    gcloud auth configure-docker us-docker.pkg.dev\n\n    # In main grpc repo, add the new version to matrix\n    ${EDITOR:-nano -w} tools/interop_matrix/client_matrix.py\n    tools/interop_matrix/create_matrix_images.py --git_checkout --release=v$MAJOR.$MINOR.$PATCH \\\n        --upload_images --language java\n    docker pull us-docker.pkg.dev/grpc-testing/testing-images-public/grpc_interop_java:v$MAJOR.$MINOR.$PATCH\n    docker_image=us-docker.pkg.dev/grpc-testing/testing-images-public/grpc_interop_java:v$MAJOR.$MINOR.$PATCH \\\n        tools/interop_matrix/testcases/java__master\n\n    # Commit the changes\n    git commit --all -m \"[interop] Add grpc-java $MAJOR.$MINOR.$PATCH to client_matrix.py\"\n\n    # Create a PR with the `release notes: no` label and run ad-hoc test against your PR\n    ```\n[gcr-image]: https://github.com/grpc/grpc/blob/master/tools/interop_matrix/README.md#step-by-step-instructions-for-adding-a-gcr-image-for-a-new-release-for-compatibility-test\n\n11. Update gh-pages with the new Javadoc. Generally the file is on repo1\n    15 minutes after publishing:\n\n    ```bash\n    git checkout gh-pages\n    git pull --ff-only upstream gh-pages\n    rm -r javadoc/\n    wget -O grpc-all-javadoc.jar \"https://repo1.maven.org/maven2/io/grpc/grpc-all/$MAJOR.$MINOR.$PATCH/grpc-all-$MAJOR.$MINOR.$PATCH-javadoc.jar\"\n    unzip -d javadoc grpc-all-javadoc.jar\n    patch -p1 < ga.patch\n    rm grpc-all-javadoc.jar\n    rm -r javadoc/META-INF/\n    git add -A javadoc\n    git commit -m \"Javadoc for $MAJOR.$MINOR.$PATCH\"\n    git push upstream gh-pages\n    ```\n\n    Verify the current version is [live on grpc.io](https://grpc.io/grpc-java/javadoc/).\n\n12. Add [Release Notes](https://github.com/grpc/grpc-java/releases) for the new tag.\n    *Make sure that any backports are reflected in the release notes.*\n\n13. Notify the Community. Post a release announcement to\n    [grpc-io](https://groups.google.com/forum/#!forum/grpc-io)\n    (`grpc-io@googlegroups.com`) with the title `gRPC-Java v$MAJOR.$MINOR.$PATCH\n    Released`. The email content should link to the GitHub release notes and\n    include a copy of them.\n\n14. Update README.md. Cherry-pick the commit that updated the README.md into the\n    master branch.\n\n    ```bash\n    git checkout -b bump-readme master\n    git cherry-pick v$MAJOR.$MINOR.$PATCH^\n    git push --set-upstream origin bump-readme\n    ```\n\n    Create a PR and go through the review process\n\n15. Update version referenced by tutorials. Update `params.grpc_vers.java` in\n    [config.yaml](https://github.com/grpc/grpc.io/blob/master/config.yaml) of\n    the grpc.io repository. Create a PR and go through the review process.\n\nPost-release upgrades\n---------------------\nUpgrade dependencies after the release so they can be well-tested before the\nnext release.\n\nUpgrade the Gradle plugins in `settings.gradle` and the Gradle version in\n`gradle/wrapper/gradle-wrapper.properties`. Make sure to read the release notes\nfor each dependency upgraded. Test by doing a regular build.\n\nUpgrade the regular dependencies in `gradle/libs.versions.toml`, except for\nNetty and netty-tcnative. To find available upgrades:\n\n```bash\n./gradlew checkForUpdates\n```\n\nTest by doing a regular build. For each step, if a dependency cannot be\nupgraded, add a comment. Create issues in other projects for breakages, and in\ngRPC for things that will need a migration effort.\n\nWhen happy with the dependency upgrades, update the versions in `MODULE.bazel`,\n`repositories.bzl`, and the various `pom.xml` and `build.gradle` files in\n`examples/`.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 18.58984375,
          "content": "# Security Policy\n\nFor information on gRPC Security Policy and reporting potentional security\nissues, please see [gRPC CVE Process][].\n\n[gRPC CVE Process]: https://github.com/grpc/proposal/blob/master/P4-grpc-cve-process.md\n\n# Authentication\n\ngRPC supports a number of different mechanisms for asserting identity between an\nclient and server. This document provides code samples demonstrating how to\nprovide SSL/TLS encryption support and identity assertions in Java, as well as\npassing OAuth2 tokens to services that support it.\n\n# Transport Security (TLS)\n\nHTTP/2 over TLS mandates the use of [ALPN](https://tools.ietf.org/html/rfc7301)\nto negotiate the use of the h2 protocol and support for the GCM mode of AES.\n\nThere are multiple options available, but on Android we recommend using the\n[Play Services Provider](#tls-on-android) and for non-Android systems we\nrecommend [netty-tcnative with\nBoringSSL](#tls-with-netty-tcnative-on-boringssl).\n\n## TLS on Android\n\nOn Android we recommend the use of the [Play Services Dynamic Security\nProvider][] to ensure your application has an up-to-date OpenSSL library with\nthe necessary cipher-suites and a reliable ALPN implementation. This requires\n[updating the security provider at runtime][config-psdsp].\n\nAlthough ALPN mostly works on newer Android releases (especially since 5.0),\nthere are bugs and discovered security vulnerabilities that are only fixed by\nupgrading the security provider. Thus, we recommend using the Play Service\nDynamic Security Provider for all Android versions.\n\n*Note: The Dynamic Security Provider must be installed **before** creating a\ngRPC OkHttp channel. gRPC statically initializes the security protocol(s)\navailable, which means that changes to the security provider after the first\nchannel is created will not be noticed by gRPC.*\n\n[Play Services Dynamic Security Provider]: https://www.appfoundry.be/blog/2014/11/18/Google-Play-Services-Dynamic-Security-Provider/\n[config-psdsp]: https://developer.android.com/training/articles/security-gms-provider.html\n\n### Bundling Conscrypt\n\nIf depending on Play Services is not an option for your app, then you may bundle\n[Conscrypt](https://conscrypt.org) with your application. Binaries are available\non [Maven Central][conscrypt-maven].\n\nLike the Play Services Dynamic Security Provider, you must still \"install\"\nConscrypt before use.\n\n```java\nimport org.conscrypt.Conscrypt;\nimport java.security.Security;\n...\n\nSecurity.insertProviderAt(Conscrypt.newProvider(), 1);\n```\n\n[conscrypt-maven]: https://search.maven.org/#search%7Cga%7C1%7Cg%3Aorg.conscrypt%20a%3Aconscrypt-android\n\n## TLS on non-Android\n\nOpenJDK versions prior to Java 8u252 do not support ALPN. Java 8 has 10% the\nperformance of OpenSSL.\n\nWe recommend most users use grpc-netty-shaded, which includes netty-tcnative on\nBoringSSL. It includes pre-built libraries for 64 bit Windows, OS X, and 64 bit\nLinux. For 32 bit Windows, Conscrypt is an option. For all other platforms, Java\n9+ is required.\n\nFor users of xDS management protocol, the grpc-netty-shaded transport is\nparticularly appropriate since it is already used internally for the xDS\nprotocol and is a runtime dependency of grpc-xds.\n\nFor users of grpc-netty we recommend [netty-tcnative with\nBoringSSL](#tls-with-netty-tcnative-on-boringssl), although using the built-in\nJDK support in Java 9+, [Conscrypt](#tls-with-conscrypt), and [netty-tcnative\nwith OpenSSL](#tls-with-netty-tcnative-on-openssl) are other valid options.\n\n[Netty TCNative](https://github.com/netty/netty-tcnative) is a fork of\n[Apache Tomcat's tcnative](https://tomcat.apache.org/native-doc/) and is a JNI\nwrapper around OpenSSL/BoringSSL/LibreSSL.\n\nWe recommend BoringSSL for its simplicity and low occurrence of security\nvulnerabilities relative to OpenSSL. BoringSSL is used by Conscrypt as well.\n\n### TLS with netty-tcnative on BoringSSL\n\nNetty-tcnative with BoringSSL includes BoringSSL statically linked in the\nbinary. This means the system's pre-installed TLS libraries will not be used.\nProduction systems that have centralized upgrade agility in the face of\nsecurity vulnerabilities may want to use [netty-tcnative on\nOpenSSL](#tls-with-netty-tcnative-on-openssl) instead.\n\nUsers of grpc-netty-shaded will automatically use netty-tcnative with\nBoringSSL.\n\ngrpc-netty users will need to add the appropriate\n`netty-tcnative-boringssl-static` artifact to the application's classpath.\nArtifacts are available for 64 bit Windows, OS X, and 64 bit Linux.\n\nDepending on netty-tcnative-boringssl-static will include binaries for all\nsupported platforms. For Maven:\n\n```xml\n  <dependencies>\n    <dependency>\n      <groupId>io.netty</groupId>\n      <artifactId>netty-tcnative-boringssl-static</artifactId>\n      <version>2.0.20.Final</version> <!-- See table for correct version -->\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n```\n\nAnd for Gradle:\n\n```gradle\ndependencies {\n  // See table for correct version\n  runtime 'io.netty:netty-tcnative-boringssl-static:2.0.20.Final'\n}\n```\n\nFor projects sensitive to binary size, specify the classifier for the precise\nplatform you need: `windows-x86_64`, `osx-x86_64`, `linux-x86_64`. You can also\nuse [os-maven-plugin](https://github.com/trustin/os-maven-plugin) or\n[osdetector-gradle-plugin](https://github.com/google/osdetector-gradle-plugin),\nto choose the classifier for the platform running the build.\n\n### TLS with netty-tcnative on OpenSSL\n\nUsing OpenSSL can have more initial configuration issues, but can be useful if\nyour OS's OpenSSL version is recent and kept up-to-date with security fixes.\nOpenSSL is not included with tcnative, but instead is dynamically linked using\nyour operating system's OpenSSL.\n\nTo use OpenSSL you will use the `netty-tcnative` artifact. It requires:\n\n1. [OpenSSL](https://www.openssl.org/) version >= 1.0.2 for ALPN support.\n2. [Apache APR library (libapr-1)](https://apr.apache.org/) version >= 1.5.2.\n\nYou must specify a classifier for the correct netty-tcnative binary:\n`windows-x86_64`, `osx-x86_64`, `linux-x86_64`, or `linux-x86_64-fedora`.\nFedora derivatives use a different soname from other Linux distributations, so\nyou must select the \"fedora\" version on those distributions.\n\nIn Maven, you can use the\n[os-maven-plugin](https://github.com/trustin/os-maven-plugin) to help simplify\nthe dependency.\n\n```xml\n<project>\n  <dependencies>\n    <dependency>\n      <groupId>io.netty</groupId>\n      <artifactId>netty-tcnative</artifactId>\n      <version>2.0.20.Final</version> <!-- see table for correct version -->\n      <classifier>${tcnative.classifier}</classifier>\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <extensions>\n      <!-- Use os-maven-plugin to initialize the \"os.detected\" properties -->\n      <extension>\n        <groupId>kr.motd.maven</groupId>\n        <artifactId>os-maven-plugin</artifactId>\n        <version>1.7.1</version>\n      </extension>\n    </extensions>\n    <plugins>\n      <!-- Use Ant to configure the appropriate \"tcnative.classifier\" property -->\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-antrun-plugin</artifactId>\n        <executions>\n          <execution>\n            <phase>initialize</phase>\n            <configuration>\n              <exportAntProperties>true</exportAntProperties>\n              <target>\n                <condition property=\"tcnative.classifier\"\n                           value=\"${os.detected.classifier}-fedora\"\n                           else=\"${os.detected.classifier}\">\n                  <isset property=\"os.detected.release.fedora\"/>\n                </condition>\n              </target>\n            </configuration>\n            <goals>\n              <goal>run</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\nAnd in Gradle you can use the\n[osdetector-gradle-plugin](https://github.com/google/osdetector-gradle-plugin).\n\n```gradle\nbuildscript {\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'\n  }\n}\n\n// Use the osdetector-gradle-plugin\napply plugin: \"com.google.osdetector\"\n\ndef tcnative_classifier = osdetector.classifier;\n// Fedora variants use a different soname for OpenSSL than other linux distributions\n// (see http://netty.io/wiki/forked-tomcat-native.html).\nif (osdetector.os == \"linux\" && osdetector.release.isLike(\"fedora\")) {\n  tcnative_classifier += \"-fedora\";\n}\n\ndependencies {\n    runtime 'io.netty:netty-tcnative:2.0.20.Final:' + tcnative_classifier\n}\n```\n\n### TLS with Conscrypt\n\n[Conscrypt](https://conscrypt.org) provides an implementation of the JSSE\nsecurity APIs based on BoringSSL. Pre-built binaries are available for 32 and\n64 bit Windows, OS X, and 64 bit Linux.\n\nDepend on `conscrypt-openjdk-uber` for binaries of all supported JRE platforms.\nFor projects sensitive to binary size, depend on `conscrypt-openjdk` and\nspecify the appropriate classifier. `os-maven-plugin` and\n`osdetector-gradle-plugin` may also be used. See the documentation for\n[netty-tcnative-boringssl-static](#tls-with-netty-tcnative-on-boringssl) for\nexample usage of the plugins.\n\nGenerally you will \"install\" Conscrypt before use, for gRPC to find.\n\n```java\nimport org.conscrypt.Conscrypt;\nimport java.security.Security;\n...\n\n// Somewhere in main()\nSecurity.insertProviderAt(Conscrypt.newProvider(), 1);\n```\n\n## Enabling TLS on a server\n\nTo use TLS on the server, a certificate chain and private key need to be\nspecified in PEM format. The standard TLS port is 443, but we use 8443 below to\navoid needing extra permissions from the OS.\n\n```java\nServerCredentials creds = TlsServerCredentials.create(certChainFile, privateKeyFile);\nServer server = Grpc.newServerBuilderForPort(8443, creds)\n    .addService(serviceImplementation)\n    .build()\n    .start();\n```\n\nIf the issuing certificate authority is not known to the client then a properly\nconfigured trust manager should be provided to TlsChannelCredentials and used to\nconstruct the channel.\n\n## Mutual TLS\n\n[Mutual authentication][] (or \"client-side authentication\") configuration is similar to the server by providing truststores, a client certificate and private key to the client channel.  The server must also be configured to request a certificate from clients, as well as truststores for which client certificates it should allow.\n\n```java\nServerCredentials creds = TlsServerCredentials.newBuilder()\n    .keyManager(certChainFile, privateKeyFile)\n    .trustManager(clientCAsFile)\n    .clientAuth(TlsServerCredentials.ClientAuth.REQUIRE)\n    .build();\n```\n\nNegotiated client certificates are available in the SSLSession, which is found\nin the `Grpc.TRANSPORT_ATTR_SSL_SESSION` attribute of the call. A server\ninterceptor can provide details in the current Context.\n\n```java\n// The application uses this in its handlers.\npublic static final Context.Key<MySecurityInfo> SECURITY_INFO = Context.key(\"my.security.Info\");\n\n@Override\npublic <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n    Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n    SSLSession sslSession = call.getAttributes().get(Grpc.TRANSPORT_ATTR_SSL_SESSION);\n    if (sslSession == null) {\n        return next.startCall(call, headers);\n    }\n    // This interceptor can provide a centralized policy to process the client's\n    // certificate. Avoid exposing low-level details (like SSLSession) and\n    // instead provide a higher-level concept like \"authenticated user.\"\n    MySecurityInfo info = process(sslSession);\n    return Contexts.interceptCall(\n        Context.current().withValue(SECURITY_INFO, info), call, headers, next);\n}\n```\n\n[Mutual authentication]: http://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake\n\n## Troubleshooting\n\nIf you received an error message \"ALPN is not configured properly\" or \"Jetty ALPN/NPN has not been properly configured\", it most likely means that:\n - ALPN related dependencies are either not present in the classpath\n - or that there is a classpath conflict\n - or that a wrong version is used due to dependency management\n - or you are on an unsupported platform (e.g., 32-bit OS). See [Transport\n   Security](#transport-security-tls) for supported platforms.\n\n### Netty\nIf you aren't using gRPC on Android devices, you are most likely using `grpc-netty` transport.\n\nIf you are developing for Android and have a dependency on `grpc-netty`, you should remove it as `grpc-netty` is unsupported on Android. Use `grpc-okhttp` instead.\n\nIf you are on a 32-bit operating system, using Java 11+ may be the easiest\nsolution, as ALPN was added to Java in Java 9. If on 32-bit Windows, [Conscrypt\nis an option](#tls-with-conscrypt). Otherwise you need to [build your own 32-bit\nversion of\n`netty-tcnative`](https://netty.io/wiki/forked-tomcat-native.html#wiki-h2-6).\n\nIf on Alpine Linux and you see \"Error loading shared library libcrypt.so.1: No\nsuch file or directory\". Run `apk update && apk add libc6-compat` to install the\nnecessary dependency.\n\nIf on Alpine Linux, try to use `grpc-netty-shaded` instead of `grpc-netty` or\n(if you need `grpc-netty`) `netty-tcnative-boringssl-static` instead of\n`netty-tcnative`. If those are not an option, you may consider using\n[netty-tcnative-alpine](https://github.com/pires/netty-tcnative-alpine).\n\nIf on Fedora 30 or later and you see \"libcrypt.so.1: cannot open shared object\nfile: No such file or directory\". Run `dnf -y install libxcrypt-compat` to\ninstall the necessary dependency.\n\nMost dependency versioning problems can be solved by using\n`io.grpc:grpc-netty-shaded` instead of `io.grpc:grpc-netty`, although this also\nlimits your usage of the Netty-specific APIs. `io.grpc:grpc-netty-shaded`\nincludes the proper version of Netty and `netty-tcnative-boringssl-static` in a\nway that won't conflict with other Netty usages.\n\nFind the dependency tree (e.g., `mvn dependency:tree`), and look for versions of:\n - `io.grpc:grpc-netty`\n - `io.netty:netty-handler` (really, make sure all of io.netty except for\n   netty-tcnative has the same version)\n - `io.netty:netty-tcnative-boringssl-static:jar` \n\nIf `netty-tcnative-boringssl-static` is missing, then you either need to add it as a dependency, or use alternative methods of providing ALPN capability by reading the *Transport Security (TLS)* section carefully.\n\nIf you have both `netty-handler` and `netty-tcnative-boringssl-static` dependencies, then check the versions carefully. These versions could've been overridden by dependency management from another BOM. You would receive the \"ALPN is not configured properly\" exception if you are using incompatible versions.\n\nIf you have other `netty` dependencies, such as `netty-all`, that are pulled in from other libraries, then ultimately you should make sure only one `netty` dependency is used to avoid classpath conflict. The easiest way is to exclude transitive Netty dependencies from all the immediate dependencies, e.g., in Maven use `<exclusions>`, and then add an explict Netty dependency in your project along with the corresponding `tcnative` versions. See the versions table below.\n\nIf you are running in a runtime environment that also uses Netty (e.g., Hadoop, Spark, Spring Boot 2) and you have no control over the Netty version at all, then you should use a shaded gRPC Netty dependency to avoid classpath conflicts with other Netty versions in runtime the classpath:\n - Remove `io.grpc:grpc-netty` dependency\n - Add `io.grpc:grpc-netty-shaded` dependency\n\nBelow are known to work version combinations:\n\ngrpc-netty version | netty-handler version | netty-tcnative-boringssl-static version\n------------------ |-----------------------| ---------------------------------------\n1.0.0-1.0.1        | 4.1.3.Final           | 1.1.33.Fork19\n1.0.2-1.0.3        | 4.1.6.Final           | 1.1.33.Fork23\n1.1.x-1.3.x        | 4.1.8.Final           | 1.1.33.Fork26\n1.4.x              | 4.1.11.Final          | 2.0.1.Final\n1.5.x              | 4.1.12.Final          | 2.0.5.Final\n1.6.x              | 4.1.14.Final          | 2.0.5.Final\n1.7.x-1.8.x        | 4.1.16.Final          | 2.0.6.Final\n1.9.x-1.10.x       | 4.1.17.Final          | 2.0.7.Final\n1.11.x-1.12.x      | 4.1.22.Final          | 2.0.7.Final\n1.13.x             | 4.1.25.Final          | 2.0.8.Final\n1.14.x-1.15.x      | 4.1.27.Final          | 2.0.12.Final\n1.16.x-1.17.x      | 4.1.30.Final          | 2.0.17.Final\n1.18.x-1.19.x      | 4.1.32.Final          | 2.0.20.Final\n1.20.x-1.21.x      | 4.1.34.Final          | 2.0.22.Final\n1.22.x             | 4.1.35.Final          | 2.0.25.Final\n1.23.x-1.24.x      | 4.1.38.Final          | 2.0.25.Final\n1.25.x-1.27.x      | 4.1.42.Final          | 2.0.26.Final\n1.28.x             | 4.1.45.Final          | 2.0.28.Final\n1.29.x-1.31.x      | 4.1.48.Final          | 2.0.30.Final\n1.32.x-1.34.x      | 4.1.51.Final          | 2.0.31.Final\n1.35.x-1.41.x      | 4.1.52.Final          | 2.0.34.Final\n1.42.x-1.43.x      | 4.1.63.Final          | 2.0.38.Final\n1.44.x-1.47.x      | 4.1.72.Final          | 2.0.46.Final\n1.48.x-1.49.x      | 4.1.77.Final          | 2.0.53.Final\n1.50.x-1.53.x      | 4.1.79.Final          | 2.0.54.Final\n1.54.x-1.55.x      | 4.1.87.Final          | 2.0.56.Final\n1.56.x             | 4.1.87.Final          | 2.0.61.Final\n1.57.x-1.58.x      | 4.1.93.Final          | 2.0.61.Final\n1.59.x             | 4.1.97.Final          | 2.0.61.Final\n1.60.x-1.66.x      | 4.1.100.Final         | 2.0.61.Final\n1.67.x             | 4.1.110.Final         | 2.0.65.Final\n\n_(grpc-netty-shaded avoids issues with keeping these versions in sync.)_\n\n### OkHttp\nIf you are using gRPC on Android devices, you are most likely using\n`grpc-okhttp` transport.\n\nFind the dependency tree (e.g., `mvn dependency:tree`), and look for\n`io.grpc:grpc-okhttp`. If you don't have `grpc-okhttp`, you should add it as a\ndependency.\n\n# gRPC over plaintext\n\nAn option is provided to use gRPC over plaintext without TLS. While this is convenient for testing environments, users must be aware of the security risks of doing so for real production systems.\n\n# Using OAuth2\n\nThe following code snippet shows how you can call the Google Cloud PubSub API using gRPC with a service account. The credentials are loaded from a key stored in a well-known location or by detecting that the application is running in an environment that can provide one automatically, e.g. Google Compute Engine. While this example is specific to Google and it's services, similar patterns can be followed for other service providers.\n\n```java\n// Use the default credentials from the environment\nChannelCredentials creds = GoogleDefaultChannelCredentials.create();\n// Create a channel to the service\nManagedChannel channel = Grpc.newChannelBuilder(\"dns:///pubsub.googleapis.com\", creds)\n    .build();\n// Create a stub and send an RPC\nPublisherGrpc.PublisherBlockingStub publisherStub = PublisherGrpc.newBlockingStub(channel);\npublisherStub.publish(someMessage);\n```\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.5263671875,
          "content": "workspace(name = \"io_grpc_grpc_java\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"rules_java\",\n    url = \"https://github.com/bazelbuild/rules_java/releases/download/5.3.5/rules_java-5.3.5.tar.gz\",\n    sha256 = \"c73336802d0b4882e40770666ad055212df4ea62cfa6edf9cb0f9d29828a0934\",\n)\n\nhttp_archive(\n    name = \"rules_jvm_external\",\n    sha256 = \"d31e369b854322ca5098ea12c69d7175ded971435e55c18dd9dd5f29cc5249ac\",\n    strip_prefix = \"rules_jvm_external-5.3\",\n    url = \"https://github.com/bazelbuild/rules_jvm_external/releases/download/5.3/rules_jvm_external-5.3.tar.gz\",\n)\n\nload(\"@rules_jvm_external//:defs.bzl\", \"maven_install\")\nload(\"//:repositories.bzl\", \"IO_GRPC_GRPC_JAVA_ARTIFACTS\")\nload(\"//:repositories.bzl\", \"IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS\")\nload(\"//:repositories.bzl\", \"grpc_java_repositories\")\n\ngrpc_java_repositories()\n\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"PROTOBUF_MAVEN_ARTIFACTS\")\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\n\nprotobuf_deps()\n\nload(\"@envoy_api//bazel:repositories.bzl\", \"api_dependencies\")\n\napi_dependencies()\n\nload(\"@com_google_googleapis//:repository_rules.bzl\", \"switched_rules_by_language\")\n\nswitched_rules_by_language(\n    name = \"com_google_googleapis_imports\",\n    java = True,\n)\n\nmaven_install(\n    artifacts = IO_GRPC_GRPC_JAVA_ARTIFACTS + PROTOBUF_MAVEN_ARTIFACTS,\n    override_targets = IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS,\n    repositories = [\n        \"https://repo.maven.apache.org/maven2/\",\n    ],\n    strict_visibility = True,\n)\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0.078125,
          "content": "# When using bzlmod this makes sure nothing from the legacy WORKSPACE is loaded\n"
        },
        {
          "name": "all",
          "type": "tree",
          "content": null
        },
        {
          "name": "alts",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-interop-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "authz",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "binder",
          "type": "tree",
          "content": null
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 19.6513671875,
          "content": "plugins {\n    id 'java' // changes the behavior of TARGET_JVM_VERSION_ATTRIBUTE\n\n    id \"com.google.osdetector\" apply false\n    id \"me.champeau.gradle.japicmp\" apply false\n    id \"net.ltgt.errorprone\" apply false\n    id 'com.google.cloud.tools.jib' apply false\n}\n\nimport io.grpc.gradle.CheckForUpdatesTask\nimport io.grpc.gradle.RequireUpperBoundDepsMatchTask\nimport net.ltgt.gradle.errorprone.CheckSeverity\n\nsubprojects {\n    apply plugin: \"checkstyle\"\n    apply plugin: \"idea\"\n    apply plugin: \"signing\"\n    apply plugin: \"jacoco\"\n\n    apply plugin: \"com.google.osdetector\"\n    apply plugin: \"net.ltgt.errorprone\"\n\n    group = \"io.grpc\"\n    version = \"1.71.0-SNAPSHOT\" // CURRENT_GRPC_VERSION\n\n    repositories {\n        maven { // The google mirror is less flaky than mavenCentral()\n            url \"https://maven-central.storage-download.googleapis.com/maven2/\"\n            metadataSources {\n                mavenPom()\n                ignoreGradleMetadataRedirection()\n            }\n        }\n        mavenCentral() {\n            metadataSources {\n                mavenPom()\n                ignoreGradleMetadataRedirection()\n            }\n        }\n        mavenLocal() {\n            metadataSources {\n                mavenPom()\n                ignoreGradleMetadataRedirection()\n            }\n        }\n    }\n\n    tasks.withType(JavaCompile).configureEach {\n        it.options.compilerArgs += [\n            \"-Xlint:all\",\n            \"-Xlint:-options\",\n            \"-Xlint:-path\",\n            \"-Xlint:-try\"\n        ]\n        it.options.encoding = \"UTF-8\"\n        // Avoid Gradle OOM.\n        // https://docs.gradle.org/current/userguide/performance.html#run_the_compiler_as_a_separate_process\n        it.options.fork = true\n        if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {\n            it.options.compilerArgs += [\"-Werror\"]\n        }\n    }\n\n    tasks.withType(GenerateModuleMetadata).configureEach {\n        // Module metadata, introduced in Gradle 6.0, conflicts with our publishing task for\n        // grpc-alts and grpc-compiler.\n        enabled = false\n    }\n\n    def isAndroid = project.name in [\n            'grpc-android', 'grpc-android-interop-testing', 'grpc-cronet']\n\n    ext {\n        def exeSuffix = osdetector.os == 'windows' ? \".exe\" : \"\"\n        protocPluginBaseName = 'protoc-gen-grpc-java'\n        javaPluginPath = \"$rootDir/compiler/build/exe/java_plugin/$protocPluginBaseName$exeSuffix\"\n\n        configureProtoCompilation = {\n            String generatedSourcePath = \"${projectDir}/src/generated\"\n            project.protobuf {\n                protoc {\n                    if (project.hasProperty('protoc')) {\n                        path = project.protoc\n                    } else {\n                        artifact = libs.protobuf.protoc.get()\n                    }\n                }\n                generateProtoTasks {\n                    all().each { task ->\n                        if (isAndroid) {\n                            task.builtins {\n                                java { option 'lite' }\n                            }\n                        }\n                    }\n                }\n            }\n            if (rootProject.childProjects.containsKey('grpc-compiler')) {\n                // Only when the codegen is built along with the project, will we be able to run\n                // the grpc code generator.\n                def syncGeneratedSources = tasks.register(\"syncGeneratedSources\") { }\n                project.protobuf {\n                    plugins { grpc { path = javaPluginPath } }\n                    generateProtoTasks {\n                        all().each { task ->\n                            String variantOrSourceSet = isAndroid ? task.variant.name : task.sourceSet.name\n                            def syncTask = project.tasks.register(\"syncGeneratedSources${variantOrSourceSet}\", Sync) {\n                                from task\n                                into \"$generatedSourcePath/$variantOrSourceSet\"\n                                include \"grpc/\"\n                            }\n                            syncGeneratedSources.configure {\n                                dependsOn syncTask\n                            }\n\n                            task.configure {\n                                dependsOn ':grpc-compiler:java_pluginExecutable'\n                                // Recompile protos when the codegen has been changed\n                                inputs.file javaPluginPath\n                                plugins { grpc { option 'noversion' } }\n                                if (isAndroid) {\n                                    plugins {\n                                        grpc {\n                                            option 'lite'\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // Re-sync as part of a normal build, to avoid forgetting to run the sync\n                tasks.named(\"assemble\").configure {\n                    dependsOn syncGeneratedSources\n                }\n            } else {\n                // Otherwise, we just use the checked-in generated code.\n                if (isAndroid) {\n                    project.android.sourceSets {\n                        debug { java { srcDir \"${generatedSourcePath}/debug/grpc\" } }\n                        release { java { srcDir \"${generatedSourcePath}/release/grpc\" } }\n                    }\n                } else {\n                    project.sourceSets.each() { sourceSet ->\n                        sourceSet.java { srcDir \"${generatedSourcePath}/${sourceSet.name}/grpc\" }\n                    }\n                }\n            }\n\n            tasks.withType(JavaCompile).configureEach {\n                appendToProperty(\n                    it.options.errorprone.excludedPaths,\n                    \".*/src/generated/[^/]+/java/.*\" +\n                        \"|.*/build/generated/source/proto/[^/]+/java/.*\",\n                    \"|\")\n            }\n        }\n\n        libraries = libs\n\n        appendToProperty = { Property<String> property, String value, String separator ->\n            if (property.present) {\n                property.set(property.get() + separator + value)\n            } else {\n                property.set(value)\n            }\n        }\n    }\n\n    // Disable JavaDoc doclint on Java 8. It's annoying.\n    if (JavaVersion.current().isJava8Compatible()) {\n        allprojects {\n            tasks.withType(Javadoc).configureEach {\n                options.addStringOption('Xdoclint:none', '-quiet')\n            }\n        }\n    }\n\n    checkstyle {\n        configDirectory = file(\"$rootDir/buildscripts\")\n        toolVersion = JavaVersion.current().isJava11Compatible() ? libs.checkstyle.get().version : libs.checkstylejava8.get().version \n\n        ignoreFailures = false\n        if (rootProject.hasProperty(\"checkstyle.ignoreFailures\")) {\n            ignoreFailures = rootProject.properties[\"checkstyle.ignoreFailures\"].toBoolean()\n        }\n    }\n\n    if (!project.hasProperty('errorProne') || errorProne.toBoolean()) {\n        dependencies {\n            errorprone JavaVersion.current().isJava11Compatible() ? libs.errorprone.core : libs.errorprone.corejava8\n        }\n    } else {\n        // Disable Error Prone\n        tasks.withType(JavaCompile).configureEach {\n            options.errorprone.enabled = false\n        }\n    }\n\n    plugins.withId(\"java\") {\n        dependencies {\n            testImplementation libraries.junit,\n                    libraries.mockito.core,\n                    libraries.truth\n        }\n\n        tasks.named(\"compileTestJava\").configure {\n            // serialVersionUID is basically guaranteed to be useless in our tests\n            options.compilerArgs += [\n                \"-Xlint:-serial\"\n            ]\n        }\n\n        tasks.named(\"jar\").configure {\n            manifest {\n                attributes('Implementation-Title': name,\n                        'Implementation-Version': project.version)\n            }\n        }\n\n        tasks.named(\"javadoc\").configure {\n            options {\n                encoding = 'UTF-8'\n                use = true\n                linksOffline 'https://docs.oracle.com/javase/8/docs/api/',\n\t\t    \"${rootProject.projectDir}/gradle/javadoc/docs.oracle.com-javase-8-docs-api/\"\n                source = \"8\"\n            }\n        }\n\n        tasks.named(\"checkstyleMain\").configure {\n            source = fileTree(dir: \"$projectDir/src/main\", include: \"**/*.java\")\n        }\n\n        tasks.named(\"checkstyleTest\").configure {\n            source = fileTree(dir: \"$projectDir/src/test\", include: \"**/*.java\")\n        }\n\n        // At a test failure, log the stack trace to the console so that we don't\n        // have to open the HTML in a browser.\n        tasks.named(\"test\").configure {\n            testLogging {\n                exceptionFormat = 'full'\n                showExceptions true\n                showCauses true\n                showStackTraces true\n            }\n            maxHeapSize = '1500m'\n        }\n\n        if (!project.hasProperty('errorProne') || errorProne.toBoolean()) {\n            dependencies {\n                annotationProcessor libs.guava.betaChecker\n            }\n        }\n\n        tasks.withType(JavaCompile).configureEach {\n            if (JavaVersion.current().isJava9Compatible()) {\n                options.release = 8\n            } else {\n                sourceCompatibility = JavaVersion.VERSION_1_8\n                targetCompatibility = JavaVersion.VERSION_1_8\n            }\n        }\n        tasks.named(\"compileJava\").configure {\n            // This project targets Java 7 (no time.Duration class)\n            options.errorprone.check(\"PreferJavaTimeOverload\", CheckSeverity.OFF)\n            options.errorprone.check(\"JavaUtilDate\", CheckSeverity.OFF)\n            // The warning fails to provide a source location\n            options.errorprone.check(\"MissingSummary\", CheckSeverity.OFF)\n\n            // This check is in libs.errorprone.corejava8 but has been removed\n            // in later versions. It isn't smart enough to realize the field is\n            // actually immutable. And it also doesn't complain about arrays\n            // that are actually mutable.\n            options.errorprone.check(\"MutableConstantField\", CheckSeverity.OFF)\n        }\n        tasks.named(\"compileTestJava\").configure {\n            // LinkedList doesn't hurt much in tests and has lots of usages\n            options.errorprone.check(\"JdkObsolete\", CheckSeverity.OFF)\n            options.errorprone.check(\"PreferJavaTimeOverload\", CheckSeverity.OFF)\n            options.errorprone.check(\"JavaUtilDate\", CheckSeverity.OFF)\n\n            // This check is in libs.errorprone.corejava8 but has been removed\n            // in later versions. It isn't smart enough to realize the field is\n            // actually immutable. And it also doesn't complain about arrays\n            // that are actually mutable.\n            options.errorprone.check(\"MutableConstantField\", CheckSeverity.OFF)\n        }\n\n        plugins.withId(\"ru.vyarus.animalsniffer\") {\n\t    // Only available after java plugin has loaded\n            animalsniffer {\n                toolVersion = libs.animalsniffer.asProvider().get().version\n            }\n        }\n    }\n\n    plugins.withId(\"java-library\") {\n        // Detect Maven Enforcer's dependencyConvergence failures. We only care\n        // for artifacts used as libraries by others with Maven.\n        tasks.register('checkUpperBoundDeps', RequireUpperBoundDepsMatchTask) {\n            configuration = configurations.getByName('runtimeClasspath')\n        }\n        tasks.named('assemble').configure {\n            dependsOn tasks.named('checkUpperBoundDeps')\n        }\n    }\n\n    plugins.withId(\"me.champeau.jmh\") {\n        // invoke jmh on a single benchmark class like so:\n        //   ./gradlew -PjmhIncludeSingleClass=StatsTraceContextBenchmark clean :grpc-core:jmh\n        tasks.named(\"jmh\").configure {\n            warmupIterations = 10\n            iterations = 10\n            fork = 1\n            // None of our benchmarks need the tests, and we have pseudo-circular\n            // dependencies that break when including them. (context's testCompile\n            // depends on core; core's testCompile depends on testing)\n            includeTests = false\n            if (project.hasProperty('jmhIncludeSingleClass')) {\n                includes = [\n                    project.property('jmhIncludeSingleClass')\n                ]\n            }\n        }\n    }\n\n    plugins.withId(\"com.gradleup.shadow\") {\n        tasks.named(\"shadowJar\").configure {\n            // Do a dance to remove Class-Path. This needs to run after the doFirst() from the\n            // shadow plugin that adds Class-Path and before the core jar action. Using doFirst will\n            // have this run before the shadow plugin, and doLast will run after the core jar\n            // action. See #8606.\n            // The shadow plugin adds another doFirst when application is used for setting\n            // Main-Class. Ordering with it doesn't matter.\n            actions.add(plugins.hasPlugin(\"application\") ? 2 : 1, new Action<Task>() {\n                @Override public void execute(Task task) {\n                    if (!task.manifest.attributes.remove(\"Class-Path\")) {\n                        throw new AssertionError(\"Did not find Class-Path to remove from manifest\")\n                    }\n                }\n            })\n        }\n    }\n\n    plugins.withId(\"maven-publish\") {\n        publishing {\n            publications {\n                // do not use mavenJava, as java plugin will modify it via \"magic\"\n                maven(MavenPublication) {\n                    pom {\n                        name = project.group + \":\" + project.name\n                        url = 'https://github.com/grpc/grpc-java'\n                        afterEvaluate {\n                            // description is not available until evaluated.\n                            description = project.description\n                        }\n\n                        scm {\n                            connection = 'scm:git:https://github.com/grpc/grpc-java.git'\n                            developerConnection = 'scm:git:git@github.com:grpc/grpc-java.git'\n                            url = 'https://github.com/grpc/grpc-java'\n                        }\n\n                        licenses {\n                            license {\n                                name = 'Apache 2.0'\n                                url = 'https://opensource.org/licenses/Apache-2.0'\n                            }\n                        }\n\n                        developers {\n                            developer {\n                                id = \"grpc.io\"\n                                name = \"gRPC Contributors\"\n                                email = \"grpc-io@googlegroups.com\"\n                                url = \"https://grpc.io/\"\n                                organization = \"gRPC Authors\"\n                                organizationUrl = \"https://www.google.com\"\n                            }\n                        }\n                    }\n                }\n            }\n            repositories {\n                maven {\n                    if (rootProject.hasProperty('repositoryDir')) {\n                        url = new File(rootProject.repositoryDir).toURI()\n                    } else {\n                        String stagingUrl\n                        if (rootProject.hasProperty('repositoryId')) {\n                            stagingUrl = 'https://oss.sonatype.org/service/local/staging/deployByRepositoryId/' +\n                                    rootProject.repositoryId\n                        } else {\n                            stagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'\n                        }\n                        credentials {\n                            if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {\n                                username = rootProject.ossrhUsername\n                                password = rootProject.ossrhPassword\n                            }\n                        }\n                        def releaseUrl = stagingUrl\n                        def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'\n                        url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl\n                    }\n                }\n            }\n        }\n\n        signing {\n            required false\n            sign publishing.publications.maven\n        }\n\n        plugins.withId(\"java\") {\n            java {\n                withJavadocJar()\n                withSourcesJar()\n            }\n\n            publishing {\n                publications {\n                    maven {\n                        if (project.name != 'grpc-netty-shaded') {\n                            from components.java\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Run with: ./gradlew japicmp --continue\n    plugins.withId(\"me.champeau.gradle.japicmp\") {\n        def baselineGrpcVersion = '1.6.1'\n\n        // Get the baseline version's jar for this subproject\n        configurations {\n            baselineArtifact\n        }\n        // A necessary hack, the intuitive thing does NOT work:\n        // https://discuss.gradle.org/t/is-the-default-configuration-leaking-into-independent-configurations/2088/6\n        def oldGroup = project.group\n        try {\n            project.group = 'virtual_group_for_japicmp'\n            dependencies {\n                baselineArtifact \"io.grpc:${project.name}:${baselineGrpcVersion}@jar\"\n            }\n        } finally {\n            project.group = oldGroup\n        }\n\n        // Add a japicmp task that compares the current .jar with baseline .jar\n        tasks.register(\"japicmp\", me.champeau.gradle.japicmp.JapicmpTask) {\n            oldClasspath.from configurations.baselineArtifact\n            newClasspath.from tasks.named(\"jar\")\n            onlyBinaryIncompatibleModified = false\n            // Be quiet about things that did not change\n            onlyModified = true\n            // This task should fail if there are incompatible changes\n            failOnModification = true\n            ignoreMissingClasses = true\n            htmlOutputFile = file(\"$buildDir/reports/japi.html\")\n\n            packageExcludes = ['io.grpc.internal']\n\n            // Also break on source incompatible changes, not just binary.\n            // Eg adding abstract method to public class.\n            failOnSourceIncompatibility = true\n\n            // Ignore any classes or methods marked @ExperimentalApi\n            annotationExcludes = ['@io.grpc.ExperimentalApi']\n        }\n    }\n}\n\nrepositories {\n    mavenCentral()\n    google()\n}\n\ndef isAcceptableVersion(ModuleComponentIdentifier candidate) {\n    String group = candidate.group\n    String module = candidate.module\n    String version = candidate.version\n    if (group == 'com.google.guava')\n        return true\n    if (group == 'io.netty' && version.contains('Final'))\n        return true\n    if (group == 'io.undertow' && version.contains('Final'))\n        return true\n    if (module == 'android-api-level-19')\n        return true\n    if (module == 'opentelemetry-exporter-prometheus')\n        return true\n    if (module == 'opentelemetry-gcp-resources')\n        return true\n    return version ==~ /^[0-9]+(\\.[0-9]+)+$/\n}\n\nconfigurations {\n    checkForUpdates {\n        attributes.attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)\n        resolutionStrategy {\n            componentSelection {\n                all {\n                    if (!isAcceptableVersion(it.candidate))\n                        it.reject(\"Not stable version\")\n                }\n            }\n        }\n    }\n}\n\ntasks.register('checkForUpdates', CheckForUpdatesTask, project.configurations.checkForUpdates, \"libs\")\n\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "census",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2392578125,
          "content": "coverage:\n  status:\n    patch:\n      default:\n        target: '80'\n    project:\n      default:\n        target: auto\n        threshold: 1\n    changes:\n      default:\n        branches:\n          - nonExistantBranchToDisableTheFeature\ncomment: off\n"
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "context",
          "type": "tree",
          "content": null
        },
        {
          "name": "contextstorage",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "cronet",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gae-interop-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcp-csm-observability",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcp-observability",
          "type": "tree",
          "content": null
        },
        {
          "name": "googleapis",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.4365234375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.80078125,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "grpclb",
          "type": "tree",
          "content": null
        },
        {
          "name": "inprocess",
          "type": "tree",
          "content": null
        },
        {
          "name": "interop-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "istio-interop-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "java_grpc_library.bzl",
          "type": "blob",
          "size": 7.287109375,
          "content": "\"\"\"Build rule for java_grpc_library.\"\"\"\n\nload(\"@rules_java//java:defs.bzl\", \"JavaInfo\", \"JavaPluginInfo\", \"java_common\")\n\n_JavaRpcToolchainInfo = provider(\n    fields = [\n        \"java_toolchain\",\n        \"java_plugins\",\n        \"plugin\",\n        \"plugin_arg\",\n        \"protoc\",\n        \"runtime\",\n    ],\n)\n\ndef _java_rpc_toolchain_impl(ctx):\n    return [\n        _JavaRpcToolchainInfo(\n            java_toolchain = ctx.attr._java_toolchain,\n            java_plugins = ctx.attr.java_plugins,\n            plugin = ctx.attr.plugin,\n            plugin_arg = ctx.attr.plugin_arg,\n            protoc = ctx.attr._protoc,\n            runtime = ctx.attr.runtime,\n        ),\n        platform_common.ToolchainInfo(),  # Magic for b/78647825\n    ]\n\njava_rpc_toolchain = rule(\n    attrs = {\n        # This attribute has a \"magic\" name recognized by the native DexArchiveAspect (b/78647825).\n        \"runtime\": attr.label_list(\n            cfg = \"target\",\n            providers = [JavaInfo],\n        ),\n        \"plugin\": attr.label(\n            cfg = \"exec\",\n            executable = True,\n        ),\n        \"plugin_arg\": attr.string(),\n        \"_protoc\": attr.label(\n            cfg = \"exec\",\n            default = Label(\"@com_google_protobuf//:protoc\"),\n            executable = True,\n        ),\n        \"java_plugins\": attr.label_list(\n            default = [],\n            providers = [JavaPluginInfo],\n        ),\n        \"_java_toolchain\": attr.label(\n            default = Label(\"@bazel_tools//tools/jdk:current_java_toolchain\"),\n        ),\n    },\n    provides = [\n        _JavaRpcToolchainInfo,\n        platform_common.ToolchainInfo,\n    ],\n    implementation = _java_rpc_toolchain_impl,\n)\n\n# \"repository\" here is for Bazel builds that span multiple WORKSPACES.\ndef _path_ignoring_repository(f):\n    # Bazel creates a _virtual_imports directory in case the .proto source files\n    # need to be accessed at a path that's different from their source path:\n    # https://github.com/bazelbuild/bazel/blob/0.27.1/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java#L289\n    #\n    # In that case, the import path of the .proto file is the path relative to\n    # the virtual imports directory of the rule in question.\n    virtual_imports = \"/_virtual_imports/\"\n    if virtual_imports in f.path:\n        return f.path.split(virtual_imports)[1].split(\"/\", 1)[1]\n    elif len(f.owner.workspace_root) == 0:\n        # |f| is in the main repository\n        return f.short_path\n    else:\n        # If |f| is a generated file, it will have \"bazel-out/*/genfiles\" prefix\n        # before \"external/workspace\", so we need to add the starting index of \"external/workspace\"\n        return f.path[f.path.find(f.owner.workspace_root) + len(f.owner.workspace_root) + 1:]\n\ndef _java_rpc_library_impl(ctx):\n    if len(ctx.attr.srcs) != 1:\n        fail(\"Exactly one src value supported\", \"srcs\")\n    if ctx.attr.srcs[0].label.package != ctx.label.package:\n        print((\"in srcs attribute of {0}: Proto source with label {1} should be in \" +\n               \"same package as consuming rule\").format(ctx.label, ctx.attr.srcs[0].label))\n\n    toolchain = ctx.attr._toolchain[_JavaRpcToolchainInfo]\n    srcs = ctx.attr.srcs[0][ProtoInfo].direct_sources\n    descriptor_set_in = ctx.attr.srcs[0][ProtoInfo].transitive_descriptor_sets\n\n    srcjar = ctx.actions.declare_file(\"%s-proto-gensrc.jar\" % ctx.label.name)\n\n    args = ctx.actions.args()\n    args.add(toolchain.plugin.files_to_run.executable, format = \"--plugin=protoc-gen-rpc-plugin=%s\")\n    args.add(\"--rpc-plugin_out={0}:{1}\".format(toolchain.plugin_arg, srcjar.path))\n    args.add_joined(\"--descriptor_set_in\", descriptor_set_in, join_with = ctx.configuration.host_path_separator)\n    args.add_all(srcs, map_each = _path_ignoring_repository)\n\n    ctx.actions.run(\n        inputs = depset(srcs, transitive = [descriptor_set_in, toolchain.plugin.files]),\n        outputs = [srcjar],\n        executable = toolchain.protoc.files_to_run,\n        arguments = [args],\n        use_default_shell_env = True,\n        toolchain = None,\n    )\n\n    deps_java_info = java_common.merge([dep[JavaInfo] for dep in ctx.attr.deps])\n\n    java_info = java_common.compile(\n        ctx,\n        java_toolchain = toolchain.java_toolchain[java_common.JavaToolchainInfo],\n        source_jars = [srcjar],\n        output = ctx.outputs.jar,\n        output_source_jar = ctx.outputs.srcjar,\n        plugins = [plugin[JavaPluginInfo] for plugin in toolchain.java_plugins],\n        deps = [\n            java_common.make_non_strict(deps_java_info),\n        ] + [dep[JavaInfo] for dep in toolchain.runtime],\n    )\n\n    return [java_info]\n\n_java_grpc_library = rule(\n    attrs = {\n        \"srcs\": attr.label_list(\n            mandatory = True,\n            allow_empty = False,\n            providers = [ProtoInfo],\n        ),\n        \"deps\": attr.label_list(\n            mandatory = True,\n            allow_empty = False,\n            providers = [JavaInfo],\n        ),\n        \"_toolchain\": attr.label(\n            default = Label(\"//compiler:java_grpc_library_toolchain\"),\n        ),\n    },\n    toolchains = [\"@bazel_tools//tools/jdk:toolchain_type\"],\n    fragments = [\"java\"],\n    outputs = {\n        \"jar\": \"lib%{name}.jar\",\n        \"srcjar\": \"lib%{name}-src.jar\",\n    },\n    provides = [JavaInfo],\n    implementation = _java_rpc_library_impl,\n)\n\n_java_lite_grpc_library = rule(\n    attrs = {\n        \"srcs\": attr.label_list(\n            mandatory = True,\n            allow_empty = False,\n            providers = [ProtoInfo],\n        ),\n        \"deps\": attr.label_list(\n            mandatory = True,\n            allow_empty = False,\n            providers = [JavaInfo],\n        ),\n        # This attribute has a \"magic\" name recognized by the native DexArchiveAspect (b/78647825).\n        \"_toolchain\": attr.label(\n            default = Label(\"//compiler:java_lite_grpc_library_toolchain\"),\n        ),\n    },\n    toolchains = [\"@bazel_tools//tools/jdk:toolchain_type\"],\n    fragments = [\"java\"],\n    outputs = {\n        \"jar\": \"lib%{name}.jar\",\n        \"srcjar\": \"lib%{name}-src.jar\",\n    },\n    provides = [JavaInfo],\n    implementation = _java_rpc_library_impl,\n)\n\ndef java_grpc_library(\n        name,\n        srcs,\n        deps,\n        flavor = None,\n        **kwargs):\n    \"\"\"Generates gRPC Java code for services in a `proto_library`.\n\n    This rule only generates code for services; it does not generate code for\n    messages. You will need a separate java_proto_library or\n    java_lite_proto_library rule.\n\n    Args:\n      name: A unique name for this rule.\n      srcs: (List of `labels`) a single proto_library target that contains the\n        schema of the service.\n      deps: (List of `labels`) a single java_proto_library or\n        java_lite_proto_library target for the proto_library in srcs.\n      flavor: (str) \"normal\" (default) for normal proto runtime. \"lite\"\n        for the lite runtime.\n      **kwargs: Other common attributes\n    \"\"\"\n\n    if len(deps) > 1:\n        print(\"Multiple values in 'deps' is deprecated in \" + name)\n\n    if flavor == None or flavor == \"normal\":\n        _java_grpc_library(\n            name = name,\n            srcs = srcs,\n            deps = deps,\n            **kwargs\n        )\n    elif flavor == \"lite\":\n        _java_lite_grpc_library(\n            name = name,\n            srcs = srcs,\n            deps = deps,\n            **kwargs\n        )\n    else:\n        fail(\"Flavor must be normal or lite\")\n"
        },
        {
          "name": "netty",
          "type": "tree",
          "content": null
        },
        {
          "name": "okhttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "opentelemetry",
          "type": "tree",
          "content": null
        },
        {
          "name": "protobuf-lite",
          "type": "tree",
          "content": null
        },
        {
          "name": "protobuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "repositories.bzl",
          "type": "blob",
          "size": 7.767578125,
          "content": "\"\"\"External dependencies for grpc-java.\"\"\"\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n# For use with maven_install's artifacts.\n# maven_install(\n#     ...\n#     artifacts = [\n#         # Your own deps\n#     ] + IO_GRPC_GRPC_JAVA_ARTIFACTS,\n# )\n# GRPC_DEPS_START\nIO_GRPC_GRPC_JAVA_ARTIFACTS = [\n    \"com.google.android:annotations:4.1.1.4\",\n    \"com.google.api.grpc:proto-google-common-protos:2.48.0\",\n    \"com.google.auth:google-auth-library-credentials:1.24.1\",\n    \"com.google.auth:google-auth-library-oauth2-http:1.24.1\",\n    \"com.google.auto.value:auto-value-annotations:1.11.0\",\n    \"com.google.auto.value:auto-value:1.11.0\",\n    \"com.google.code.findbugs:jsr305:3.0.2\",\n    \"com.google.code.gson:gson:2.11.0\",\n    \"com.google.errorprone:error_prone_annotations:2.30.0\",\n    \"com.google.guava:failureaccess:1.0.1\",\n    \"com.google.guava:guava:33.3.1-android\",\n    \"com.google.re2j:re2j:1.7\",\n    \"com.google.truth:truth:1.4.2\",\n    \"com.squareup.okhttp:okhttp:2.7.5\",\n    \"com.squareup.okio:okio:2.10.0\",  # 3.0+ needs swapping to -jvm; need work to avoid flag-day\n    \"io.netty:netty-buffer:4.1.110.Final\",\n    \"io.netty:netty-codec-http2:4.1.110.Final\",\n    \"io.netty:netty-codec-http:4.1.110.Final\",\n    \"io.netty:netty-codec-socks:4.1.110.Final\",\n    \"io.netty:netty-codec:4.1.110.Final\",\n    \"io.netty:netty-common:4.1.110.Final\",\n    \"io.netty:netty-handler-proxy:4.1.110.Final\",\n    \"io.netty:netty-handler:4.1.110.Final\",\n    \"io.netty:netty-resolver:4.1.110.Final\",\n    \"io.netty:netty-tcnative-boringssl-static:2.0.65.Final\",\n    \"io.netty:netty-tcnative-classes:2.0.65.Final\",\n    \"io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.110.Final\",\n    \"io.netty:netty-transport-native-unix-common:4.1.110.Final\",\n    \"io.netty:netty-transport:4.1.110.Final\",\n    \"io.opencensus:opencensus-api:0.31.0\",\n    \"io.opencensus:opencensus-contrib-grpc-metrics:0.31.0\",\n    \"io.perfmark:perfmark-api:0.27.0\",\n    \"junit:junit:4.13.2\",\n    \"org.apache.tomcat:annotations-api:6.0.53\",\n    \"org.checkerframework:checker-qual:3.12.0\",\n    \"org.codehaus.mojo:animal-sniffer-annotations:1.24\",\n]\n# GRPC_DEPS_END\n\n# For use with maven_install's override_targets.\n# maven_install(\n#     ...\n#     override_targets = IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS,\n# )\n#\n# If you have your own overrides as well, you can use:\n#     override_targets = {\n#         \"your.target:artifact\": \"@//third_party/artifact\",\n#     } | IO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS,\nIO_GRPC_GRPC_JAVA_OVERRIDE_TARGETS = {\n    \"com.google.protobuf:protobuf-java\": \"@com_google_protobuf//:protobuf_java\",\n    \"com.google.protobuf:protobuf-java-util\": \"@com_google_protobuf//:protobuf_java_util\",\n    \"com.google.protobuf:protobuf-javalite\": \"@com_google_protobuf//:protobuf_javalite\",\n    \"io.grpc:grpc-alts\": \"@io_grpc_grpc_java//alts\",\n    \"io.grpc:grpc-api\": \"@io_grpc_grpc_java//api\",\n    \"io.grpc:grpc-auth\": \"@io_grpc_grpc_java//auth\",\n    \"io.grpc:grpc-census\": \"@io_grpc_grpc_java//census\",\n    \"io.grpc:grpc-context\": \"@io_grpc_grpc_java//context\",\n    \"io.grpc:grpc-core\": \"@io_grpc_grpc_java//core:core_maven\",\n    \"io.grpc:grpc-googleapis\": \"@io_grpc_grpc_java//googleapis\",\n    \"io.grpc:grpc-grpclb\": \"@io_grpc_grpc_java//grpclb\",\n    \"io.grpc:grpc-inprocess\": \"@io_grpc_grpc_java//inprocess\",\n    \"io.grpc:grpc-netty\": \"@io_grpc_grpc_java//netty\",\n    \"io.grpc:grpc-netty-shaded\": \"@io_grpc_grpc_java//netty:shaded_maven\",\n    \"io.grpc:grpc-okhttp\": \"@io_grpc_grpc_java//okhttp\",\n    \"io.grpc:grpc-protobuf\": \"@io_grpc_grpc_java//protobuf\",\n    \"io.grpc:grpc-protobuf-lite\": \"@io_grpc_grpc_java//protobuf-lite\",\n    \"io.grpc:grpc-rls\": \"@io_grpc_grpc_java//rls\",\n    \"io.grpc:grpc-services\": \"@io_grpc_grpc_java//services:services_maven\",\n    \"io.grpc:grpc-stub\": \"@io_grpc_grpc_java//stub\",\n    \"io.grpc:grpc-s2a\": \"@io_grpc_grpc_java//s2a\",\n    \"io.grpc:grpc-testing\": \"@io_grpc_grpc_java//testing\",\n    \"io.grpc:grpc-xds\": \"@io_grpc_grpc_java//xds:xds_maven\",\n    \"io.grpc:grpc-util\": \"@io_grpc_grpc_java//util\",\n}\n\ndef grpc_java_repositories(bzlmod = False):\n    \"\"\"Imports dependencies for grpc-java.\"\"\"\n    if not bzlmod and not native.existing_rule(\"dev_cel\"):\n        http_archive(\n            name = \"dev_cel\",\n            strip_prefix = \"cel-spec-0.15.0\",\n            sha256 = \"3ee09eb69dbe77722e9dee23dc48dc2cd9f765869fcf5ffb1226587c81791a0b\",\n            urls = [\n                \"https://github.com/google/cel-spec/archive/refs/tags/v0.15.0.tar.gz\",\n            ],\n        )\n    if not native.existing_rule(\"com_github_cncf_xds\"):\n        http_archive(\n            name = \"com_github_cncf_xds\",\n            strip_prefix = \"xds-024c85f92f20cab567a83acc50934c7f9711d124\",\n            sha256 = \"5f403aa681711500ca8e62387be3e37d971977db6e88616fc21862a406430649\",\n            urls = [\n                \"https://github.com/cncf/xds/archive/024c85f92f20cab567a83acc50934c7f9711d124.tar.gz\",\n            ],\n        )\n    if not bzlmod and not native.existing_rule(\"com_github_grpc_grpc\"):\n        http_archive(\n            name = \"com_github_grpc_grpc\",\n            strip_prefix = \"grpc-1.46.0\",\n            sha256 = \"67423a4cd706ce16a88d1549297023f0f9f0d695a96dd684adc21e67b021f9bc\",\n            urls = [\n                \"https://github.com/grpc/grpc/archive/v1.46.0.tar.gz\",\n            ],\n        )\n    if not bzlmod and not native.existing_rule(\"com_google_protobuf\"):\n        com_google_protobuf()\n    if not bzlmod and not native.existing_rule(\"com_google_googleapis\"):\n        http_archive(\n            name = \"com_google_googleapis\",\n            sha256 = \"49930468563dd48283e8301e8d4e71436bf6d27ac27c235224cc1a098710835d\",\n            strip_prefix = \"googleapis-ca1372c6d7bcb199638ebfdb40d2b2660bab7b88\",\n            urls = [\n                \"https://github.com/googleapis/googleapis/archive/ca1372c6d7bcb199638ebfdb40d2b2660bab7b88.tar.gz\",\n            ],\n        )\n    if not bzlmod and not native.existing_rule(\"io_bazel_rules_go\"):\n        http_archive(\n            name = \"io_bazel_rules_go\",\n            sha256 = \"ab21448cef298740765f33a7f5acee0607203e4ea321219f2a4c85a6e0fb0a27\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.32.0/rules_go-v0.32.0.zip\",\n                \"https://github.com/bazelbuild/rules_go/releases/download/v0.32.0/rules_go-v0.32.0.zip\",\n            ],\n        )\n    if not native.existing_rule(\"io_grpc_grpc_proto\"):\n        io_grpc_grpc_proto()\n    if not native.existing_rule(\"envoy_api\"):\n        http_archive(\n            name = \"envoy_api\",\n            sha256 = \"f439add0cc01f718d53d6feb4d0972ac0d48b3e145c18b53439a3b5148a0cb6e\",\n            strip_prefix = \"data-plane-api-55f8b2351962d84c84a6534da67da1dd9f671c50\",\n            urls = [\n                \"https://github.com/envoyproxy/data-plane-api/archive/55f8b2351962d84c84a6534da67da1dd9f671c50.tar.gz\",\n            ],\n        )\n\ndef com_google_protobuf():\n    # proto_library rules implicitly depend on @com_google_protobuf//:protoc,\n    # which is the proto-compiler.\n    # This statement defines the @com_google_protobuf repo.\n    http_archive(\n        name = \"com_google_protobuf\",\n        sha256 = \"9bd87b8280ef720d3240514f884e56a712f2218f0d693b48050c836028940a42\",\n        strip_prefix = \"protobuf-25.1\",\n        urls = [\"https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protobuf-25.1.tar.gz\"],\n    )\n\ndef io_grpc_grpc_proto():\n    http_archive(\n        name = \"io_grpc_grpc_proto\",\n        sha256 = \"729ac127a003836d539ed9da72a21e094aac4c4609e0481d6fc9e28a844e11af\",\n        strip_prefix = \"grpc-proto-4f245d272a28a680606c0739753506880cf33b5f\",\n        urls = [\"https://github.com/grpc/grpc-proto/archive/4f245d272a28a680606c0739753506880cf33b5f.zip\"],\n    )\n\ndef _grpc_java_repositories_extension(_):\n    grpc_java_repositories(bzlmod = True)\n\ngrpc_java_repositories_extension = module_extension(implementation = _grpc_java_repositories_extension)\n"
        },
        {
          "name": "rls",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-test-client.sh",
          "type": "blob",
          "size": 0.2880859375,
          "content": "#!/bin/bash -e\ncd \"$(dirname \"$0\")\"\nBIN=\"./interop-testing/build/install/grpc-interop-testing/bin/test-client\"\nif [[ ! -e \"$BIN\" ]]; then\n  cat >&2 <<EOF\nCould not find binary. It can be built with:\n./gradlew :grpc-interop-testing:installDist -PskipCodegen=true\nEOF\n  exit 1\nfi\nexec \"$BIN\" \"$@\"\n"
        },
        {
          "name": "run-test-server.sh",
          "type": "blob",
          "size": 0.2880859375,
          "content": "#!/bin/bash -e\ncd \"$(dirname \"$0\")\"\nBIN=\"./interop-testing/build/install/grpc-interop-testing/bin/test-server\"\nif [[ ! -e \"$BIN\" ]]; then\n  cat >&2 <<EOF\nCould not find binary. It can be built with:\n./gradlew :grpc-interop-testing:installDist -PskipCodegen=true\nEOF\n  exit 1\nfi\nexec \"$BIN\" \"$@\"\n"
        },
        {
          "name": "s2a",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        },
        {
          "name": "servlet",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 6.44140625,
          "content": "pluginManagement {\n    plugins {\n        // https://developer.android.com/build/releases/gradle-plugin\n        // 8+ has many changes: https://github.com/grpc/grpc-java/issues/10152\n        id \"com.android.application\" version \"7.4.1\"\n        id \"com.android.library\" version \"7.4.1\"\n\t// https://github.com/kt3k/coveralls-gradle-plugin/tags\n        id \"com.github.kt3k.coveralls\" version \"2.12.2\"\n\t// https://github.com/GoogleCloudPlatform/appengine-plugins/releases\n        id \"com.google.cloud.tools.appengine\" version \"2.8.0\"\n        // https://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin/CHANGELOG.md\n        id \"com.google.cloud.tools.jib\" version \"3.4.4\"\n\t// https://github.com/google/osdetector-gradle-plugin/tags\n        id \"com.google.osdetector\" version \"1.7.3\"\n        // https://github.com/google/protobuf-gradle-plugin/releases\n        id \"com.google.protobuf\" version \"0.9.4\"\n        // https://github.com/GradleUp/shadow/releases\n        // 8.3.2+ requires Java 11+\n        // 8.3.1 breaks apache imports for netty/shaded, fixed in 8.3.2\n        id \"com.gradleup.shadow\" version \"8.3.0\"\n        // https://github.com/melix/japicmp-gradle-plugin/blob/master/CHANGELOG.txt\n        id \"me.champeau.gradle.japicmp\" version \"0.4.2\"\n        // https://github.com/melix/jmh-gradle-plugin/releases\n        id \"me.champeau.jmh\" version \"0.7.2\"\n        // https://github.com/tbroyer/gradle-errorprone-plugin/releases\n        id \"net.ltgt.errorprone\" version \"4.1.0\"\n        // https://github.com/xvik/gradle-animalsniffer-plugin/releases\n        id \"ru.vyarus.animalsniffer\" version \"1.7.1\"\n    }\n    resolutionStrategy {\n        eachPlugin {\n            if (target.id.namespace == \"com.android\") {\n                useModule(\"com.android.tools.build:gradle:${target.version}\")\n            }\n            if (requested.id.id.startsWith('com.google.cloud.tools.appengine')) {\n                useModule(\"com.google.cloud.tools:appengine-gradle-plugin:${target.version}\")\n            }\n        }\n    }\n    repositories {\n        gradlePluginPortal()\n        google()\n    }\n}\n\nrootProject.name = \"grpc\"\ninclude \":grpc-api\"\ninclude \":grpc-core\"\ninclude \":grpc-context\"\ninclude \":grpc-stub\"\ninclude \":grpc-census\"\ninclude \":grpc-auth\"\ninclude \":grpc-okhttp\"\ninclude \":grpc-protobuf\"\ninclude \":grpc-protobuf-lite\"\ninclude \":grpc-netty\"\ninclude \":grpc-netty-shaded\"\ninclude \":grpc-googleapis\"\ninclude \":grpc-grpclb\"\ninclude \":grpc-testing\"\ninclude \":grpc-testing-proto\"\ninclude \":grpc-interop-testing\"\ninclude \":grpc-gae-interop-testing-jdk8\"\ninclude \":grpc-all\"\ninclude \":grpc-alts\"\ninclude \":grpc-benchmarks\"\ninclude \":grpc-services\"\ninclude \":grpc-servlet\"\ninclude \":grpc-servlet-jakarta\"\ninclude \":grpc-s2a\"\ninclude \":grpc-xds\"\ninclude \":grpc-bom\"\ninclude \":grpc-rls\"\ninclude \":grpc-authz\"\ninclude \":grpc-gcp-csm-observability\"\ninclude \":grpc-gcp-observability\"\ninclude \":grpc-gcp-observability:interop\"\ninclude \":grpc-istio-interop-testing\"\ninclude \":grpc-inprocess\"\ninclude \":grpc-util\"\ninclude \":grpc-opentelemetry\"\ninclude \":grpc-context-override-opentelemetry\"\n\nproject(':grpc-api').projectDir = \"$rootDir/api\" as File\nproject(':grpc-core').projectDir = \"$rootDir/core\" as File\nproject(':grpc-context').projectDir = \"$rootDir/context\" as File\nproject(':grpc-stub').projectDir = \"$rootDir/stub\" as File\nproject(':grpc-census').projectDir = \"$rootDir/census\" as File\nproject(':grpc-auth').projectDir = \"$rootDir/auth\" as File\nproject(':grpc-okhttp').projectDir = \"$rootDir/okhttp\" as File\nproject(':grpc-protobuf').projectDir = \"$rootDir/protobuf\" as File\nproject(':grpc-protobuf-lite').projectDir = \"$rootDir/protobuf-lite\" as File\nproject(':grpc-netty').projectDir = \"$rootDir/netty\" as File\nproject(':grpc-netty-shaded').projectDir = \"$rootDir/netty/shaded\" as File\nproject(':grpc-googleapis').projectDir = \"$rootDir/googleapis\" as File\nproject(':grpc-grpclb').projectDir = \"$rootDir/grpclb\" as File\nproject(':grpc-testing').projectDir = \"$rootDir/testing\" as File\nproject(':grpc-testing-proto').projectDir = \"$rootDir/testing-proto\" as File\nproject(':grpc-interop-testing').projectDir = \"$rootDir/interop-testing\" as File\nproject(':grpc-gae-interop-testing-jdk8').projectDir = \"$rootDir/gae-interop-testing/gae-jdk8\" as File\nproject(':grpc-all').projectDir = \"$rootDir/all\" as File\nproject(':grpc-alts').projectDir = \"$rootDir/alts\" as File\nproject(':grpc-benchmarks').projectDir = \"$rootDir/benchmarks\" as File\nproject(':grpc-services').projectDir = \"$rootDir/services\" as File\nproject(':grpc-servlet').projectDir = \"$rootDir/servlet\" as File\nproject(':grpc-servlet-jakarta').projectDir = \"$rootDir/servlet/jakarta\" as File\nproject(':grpc-s2a').projectDir = \"$rootDir/s2a\" as File\nproject(':grpc-xds').projectDir = \"$rootDir/xds\" as File\nproject(':grpc-bom').projectDir = \"$rootDir/bom\" as File\nproject(':grpc-rls').projectDir = \"$rootDir/rls\" as File\nproject(':grpc-authz').projectDir = \"$rootDir/authz\" as File\nproject(':grpc-gcp-csm-observability').projectDir = \"$rootDir/gcp-csm-observability\" as File\nproject(':grpc-gcp-observability').projectDir = \"$rootDir/gcp-observability\" as File\nproject(':grpc-gcp-observability:interop').projectDir = \"$rootDir/gcp-observability/interop\" as File\nproject(':grpc-istio-interop-testing').projectDir = \"$rootDir/istio-interop-testing\" as File\nproject(':grpc-inprocess').projectDir = \"$rootDir/inprocess\" as File\nproject(':grpc-util').projectDir = \"$rootDir/util\" as File\nproject(':grpc-opentelemetry').projectDir = \"$rootDir/opentelemetry\" as File\nproject(':grpc-context-override-opentelemetry').projectDir = \"$rootDir/contextstorage\" as File\n\nif (settings.hasProperty('skipCodegen') && skipCodegen.toBoolean()) {\n    println '*** Skipping the build of codegen and compilation of proto files because skipCodegen=true'\n} else {\n    include \":grpc-compiler\"\n    project(':grpc-compiler').projectDir = \"$rootDir/compiler\" as File\n}\n\nif (settings.hasProperty('skipAndroid') && skipAndroid.toBoolean()) {\n    println '  * Skipping the build of Android projects because skipAndroid=true'\n} else {\n    println '*** Android SDK is required. To avoid building Android projects, set -PskipAndroid=true'\n    include \":grpc-cronet\"\n    project(':grpc-cronet').projectDir = \"$rootDir/cronet\" as File\n    include \":grpc-android\"\n    project(':grpc-android').projectDir = \"$rootDir/android\" as File\n    include \":grpc-android-interop-testing\"\n    project(':grpc-android-interop-testing').projectDir = \"$rootDir/android-interop-testing\" as File\n    include \":grpc-binder\"\n    project(':grpc-binder').projectDir = \"$rootDir/binder\" as File\n}\n"
        },
        {
          "name": "stub",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing-proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "xds",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}