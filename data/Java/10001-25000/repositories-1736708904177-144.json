{
  "metadata": {
    "timestamp": 1736708904177,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lingochamp/FileDownloader",
      "stars": 11059,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1875,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n/.idea/misc.xml\n/.idea/checkstyle-idea.xml\n/.idea/caches\n.DS_Store\n/build\n/captures\n.classpath\n.project\n.settings\n.vscode\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.634765625,
          "content": "language: android\n\njdk:\n# build-tools 24.0.2 need jdk8 or above.\n- oraclejdk8\nandroid:\n  components:\n    # Ref https://github.com/travis-ci/travis-ci/issues/6260.\n    - tools\n    - platform-tools\n    - build-tools-28.0.3\n    - android-28\n    - extra\n\nscript:\n  - ./gradlew clean check\n\nafter_script:\n    - cat ./demo/build/outputs/lint-results.xml\n    - cat ./library/build/outputs/lint-results.xml\n\nsudo: false\n\nbefore_cache:\n  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock\n  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/\n\ncache:\n  directories:\n    - $HOME/.gradle/caches/\n    - $HOME/.gradle/wrapper/\n    - $HOME/.android/build-cache\n"
        },
        {
          "name": "CHANGELOG-ZH.md",
          "type": "blob",
          "size": 50.876953125,
          "content": "# Change log\n\n> [ Change log in english](https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md)\n\n## Version 1.7.7\n\n- 修复: FileDownloadThreadPool 可能会抛出 ArrayIndexOutOfBoundsException 和 ClassCastException。 closes #1258\n- 修复: 从 1.6.x 升级到 1.7.x 后恢复之前的下载任务时出现 416 错误。\n- 修复: Demo 中下载通知示例无法显示通知。closes #1224\n- 修复: blockComplete 可能会在主线程中回调。closes #1069\n- 修复: NoDatabaseImpl 中 SparseArray 非线程安全问题。closes #1225 \n\n## Version 1.7.6\n\n_2019-02-20_\n\n#### 修复\n\n- 修复: 在Android O以及更高版本手机上，在所有任务结束后自动将前台服务关闭. closes #1096\n- 修复: 修复'Context.startForegroundService() did not then call Service.startForeground()'的问题. closes #1104\n- 修复: 确保在调用停止任务后，运行中的通知被关闭. closes #1136\n- 修复: 修复在重试时小概率NPE. closes #1100\n\n## Version 1.7.5\n\n_2018-08-03_\n\n#### 修复\n\n- 修复: 修复在Android O的系统上，当应用不在前台，并且不在白名单的时候，由于下载服务无法通过`JobScheduler`来执行下载事务，只能通过`startService`，引起 \"Not allowed to start service Intent...\" 的问题。 closes #1078\n\n#### Enhance\n\n- 提升实用性: 支持`Content-Disposition`中的非UTF-8编码。 closes #1057\n- 提高实用性: 处理了阿里云服务错误反馈`416`的情况`。 closes #1050\n\n## Version 1.7.4\n\n_2018-05-19_\n\n#### 修复 \n\n- 修复: 修复在Android 8或更高版本上，当应用在后台时，并且此时正在下载，但是下载服务的链接断开，此时尝试重新绑定的时候发生'IllegalStateException'的问题。closes #1017\n- 修复: 修复响应头带回来的文件名可能存在安全隐患的问题. closes #1028\n\n## Version 1.7.3\n\n_2018-04-20_\n\n#### 修复\n\n修复: 修复由于在下载结束时`fd`没有被主动释放，导致当有大量的任务被不断的发起执行时有可能引发的OOM问题。\n\n## Version 1.7.2\n\n_2018-03-14_\n\n#### 修复\n\n- 修复: 将原本所需要下载的文件大小为`0`的时候，回调错误，修改为直接回调完成。closes #789\n- 修复: 修复当存在另外一个正在下载的相同临时文件路径的任务时，数据库中存在数据未被删除的问题。closes #953\n- 修复: 修复在重试后重试之前下载的进度丢失的问题。closes #949\n- 修复: 修复当试探连接没有提供`Content-Range`字段，但是提供`Content-Length`字段时，计算出的总长度始终是`1`的问题。\n\n#### 性能与提高\n\n- 提高实用性: 当在响应头中不存在`Content-Length`字段时，使用隐藏在`Content-Range`中的内容大小数据。 closes #967\n\n## Version 1.7.1\n\n_2018-02-05_\n\n#### 修复\n\n- 修复: 修复当后端不支持`HEAD`方法的时候，返回`405`响应状态导致下载失败的问题。 close #942\n\n## Version 1.7.0\n\n_2018-02-01_\n\n#### 修复\n\n- 修复: 通过同步处理暂停操作与状态的更新来修复状态不是一个正确向前的流的问题。 close #889\n- 修复: 修复在`pending`状态回调时带回来已经被弃用的`sofar-bytes`。 close #884\n- 修复: 修复当`filename`没有用`\"`包裹时，无法通过`content-dispostion`获取文件名的问题。 close #908\n- 修复: 修正`setCallbackProgressTimes`设置的次数不能正常生效的问题。 close #901\n- 修复: 修复由于试探连接采用`0-infinite`的`Range`导致下载了无用内容到tcp-window的问题。close #933\n- 修复: 在连接`ending`的时候再次主动关闭输入流，防止输入流泄漏特别是对于试探连接来说。\n\n#### 性能与提高\n\n- 提高实用性: 当临时文件重命名为目标文件成功时，不再做一次移除临时文件的操作，防止一些文件系统报错的问题。close #912\n- 提高实用性: 当确定本地提供的`Range`是正确的，但是后端却返回`416`时，将完全弃用`Range`请求头。close #921\n- 提高性能: 为试探连接使用`HEAD`的请求替代`GET`方法，提高试探通信效率。 ref #933\n\n#### 其他\n\n如果你正在使用`filedownloader-okhttp3-connection`，请将其更新到`1.1.0`版本来适配`1.7.0`版本。 \n\n## Version 1.6.9\n\n_2017-12-16_\n\n#### 修复\n\n- 修复(serial-queue): 修复在`FileDownloadSerialQueue`遇到的死锁。 closes #858\n- 修复: 不再在非单元测试环境使用`j-unit`，避免在一些小米手机上发生`no-static-method-found`的问题。 closes #867\n- 修复: 修复每次重试减少两次重试机会的问题。 closes #838\n- 修复: 修复在`pending`的时候暂停任务，而后获取到该任务都是`pending`的状态的问题。 closes #855\n\n#### 性能与提高\n\n- 提高实用性: 开放`SqliteDatabaseImpl`、`RemitDatabase`、`NoDatabaseImpl`，便于上层覆盖他们。\n- 提高实用性: 支持从更高的版本降级到该版本。\n- 提高实用性: 当上层没有主动添加`User-Agent`的时候，内部添加默认的`User-Agent`。 closes #848\n- 提高性能: 修改所有的线程池中线程的存活时间(从5s修改为15s)，避免在高频下载中，各池子频繁的释放与创建线程\n- 提高性能: 使用`RemitDatabase`作为默认的数据库，在很多小任务很快的结束下载(2s内)，其数据库操作将会变得十分冗余，而这部分的数据库操作将被取消\n\n#### RemitDatabase\n\nFileDownloader中大多数数据库长尾问题，是由于有很多很小的任务同时执行：\n\n- 由于很小的任务每次启动、等待、连接、下载进度、结束都会促发入库\n- 一旦任务很小网速很快的时候，一个小任务实际下载耗时可能在1-2s完成\n- 因此整个引擎不得不为该1-2s完成的任务完成一连串的数据库入库、更新到从数据库删除的操作\n- 也就是说单个类似的任务在1-2s内促发了至少5次数据库操作，期间包含入库与最后的删除\n- 一个任务还好，当这样的任务数上升到几百个的层面，这样高频持续的数据库操作，就很容易暴露各种数据库问题（包含文件系统问题）\n- 而现有体系在上层推任务大量任务到下载服务的时候， 会高频持续的3个并行对这些任务做入库处理，在这个点上数据库问题也容易发生（包含文件系统问题）\n\n---\n\n而相比之下写入数据库是为了断点续传，这个短期的频繁数据库操作，实质的作用甚微，早期的提供外接接口来控制下载进度间的入库频率显然无法覆盖该问题。\n\n---\n\n因此，还是为FileDownloader推出新的`RemitDatabase`用于解决该问题，除去期间的多线程安全问题的处理，核心思想如下:\n![][RemitDatabase-png]\n\n- 如果某一个任务的整体数据更新与结束在2s(该值可定制)内，则不再有数据库操作，全程只存内存\n- 如果某一个任务的数据更新与结束操过2s，则分为两部分，2s前只存内存，2s开始同时存内存与数据库\n- 如果某一个任务最终的结束是暂停或错误，则在最后的状态更新中，同时存内存与数据库\n\n## Version 1.6.8\n\n_2017-10-13_\n\n#### 修复\n\n- 修复: 修复断点续传失败, 由于Network线程中的`isAlive`不可靠导致的问题。 this closes #793\n- 修复: 修复断点续传失败，由于多个线程频繁的更新`status`并且`DownloadStatusCallback`的`sendMessage`无法保证有序性，导致下一次启动时最终状态是`process`无法断点续传(具体原因参看[这里](https://github.com/lingochamp/FileDownloader/issues/793#issuecomment-336370126))。 this refs #793, #764, #721, #769, #763, #761, #716\n- 修复: 不再由于任务已经结束依然存在需要派发的信息而让用户程序奔溃，因为这个对用户并不会照成影响。 this closes #562\n- 修复: 修复当用户频繁调用`pause`时，有可能出现`it can't take a snapshot for the task xxx`错误的问题。\n- 修复: 修复由于内部存储的任务对象大小存在问题，导致这样的对象任务每一次启动都必然会`416`的问题。\n\n## Version 1.6.7\n\n_2017-10-12_\n\n#### 修复\n\n- 修复: 避免`error`与`pause`的状态被运行中的状态覆盖导致下次断点续传失败。 closes #769, closes #764, closes #761, closes #763, closes #721, closes #716\n- 修复: 感谢 @hongbiangoal 对问题的定位，修复了当某一个分块的断点进度大于1.99G时，请求的范围出现负数的情况。 closes #791\n\n## Version 1.6.6\n\n_2017-09-29_\n\n#### 修复\n\n- 修复(文件完整性): 只有在确保缓存已经完全固化到本地文件了才更新数据库的进度，防止在该次暂停时固化失败，然后数据库更新了进度，导致下一次断点续传的时候(使用预分配策略的情况下)，本地已经下载的文件的进度与数据库记录的进度实际不一致，导致最后下载完成了文件不完整的问题。 Closes #745\n- 修复(清理): 修复调用`FileDownloader#clearAllTaskData`并没有清理连接表的问题。 Closes #754\n\n#### 性能与提高\n\n- 提高性能: 使用`BufferedOutputStream`来优化默认输出流，现在虚拟机内的缓存大小为8192字节。\n\n## Version 1.6.5\n\n_2017-09-11_\n\n#### 修复\n\n- 修复(crash): 修复因为使用`%d`格式化`AtomicLong`导致`IllegalFormatConversionException`的问题。 Closes #743\n\n## Version 1.6.4\n\n_2017-08-21_\n\n#### 新接口\n\n- 新增 `NoDatabaseImpl`: 为了有些用户需要一个没有数据库的FileDownloader的用户。 Refs #727\n\n#### 性能与提高\n\n- 提高性能: 使用`AtomicLong`代替锁的方式，使得下载进度递增性能更好。\n\n#### 修复\n\n- 修复(分块下载): 修复在断点续传时之前已经下载了分块下载的最后一块，可是在继续下载时重新请求了最后一块给了错误的Range导致416的错误。 Closes #737\n- 修复(npe): 修复极小概率当事件监听已经被其他线程移除时还在分发事件导致NPE的问题。 Closes #723\n\n## Version 1.6.3\n\n_2017-07-29_\n\n#### 修复\n\n- 修复: 修复当正在处理回调结束任务的事务时，调用了`pause`极小概率出现NPE的问题。 Closes #680\n- 修复: 修复当暂停或恢复`FileDownloaderSerialQueue`的时候，其已经完成了该操作，出现`MissingFormatArgumentException`的问题。 Closes #699\n\n## Version 1.6.2\n\n_2017-07-16_\n\n#### 修复\n\n- 修复: 修复当FileDownloader下载文件有一个分块从大于1.99G的地方开始下载，就会发生'offset < 0'异常的问题。 Closes #669\n\n## Version 1.6.1\n\n_2017-07-13_\n\n#### 性能与提高\n\n- 提高实用性: 当返回的`content-length`不等于通过Range计算出来的`content-length`时直接抛回`GiveUpException`而不继续下载。 Closes #636\n\n#### 修复\n\n- 修复: 修复下载出现错误或暂停下载时强制多`sync`了一次的问题。\n- 修复: 修复当从断点中恢复chuncked任务后下载文件被损坏的问题。\n\n## Version 1.6.0\n\n_2017-07-07_\n\n#### 修复\n\n- 修复(no-response): 修复当多线程分块下载同时完成时，有可能会由于线程安全问题导致completed无法得到回调的问题，具体情况参看[这里](https://github.com/lingochamp/FileDownloader/issues/631#issuecomment-313387299)。 Closes #631\n\n## Version 1.5.9\n\n_2017-07-04_\n\n#### 修复\n\n- 修复(duplicate-permission): 修复在Android 5.0或更高版本系统的手机中已经有一个应用引用了1.5.7或更新版本的FileDownloader后，再安装引用1.5.7或更新版本的FileDownloader的应用会报`INSTALL_FAILED_DUPLICATE_PERMISSION`的问题，这个问题是因为在1.5.7版本中我们申明了一个接收结束广播的权限导致，现在我们移除了这个权限申明来修复这个问题。Closes #641\n\n## Version 1.5.8\n\n_2017-06-28_\n\n#### 修复\n\n- 修复(无响应): 修复非常快速的对相同任务启动、暂停来回切换会使得任务到后面没有响应的问题。Closes #625\n\n## Version 1.5.7\n\n_2017-06-25_\n\n#### 新接口\n\n- 支持在`filedownloader.properties`中配置`broadcast.completed`: 决定是否需要在任务下载完成后发送一个完成的广播。 Closes #605\n- 支持接收201的http返回状态码。 Closes #545\n- 为`FileDownloadSerialQueue`支持暂停与继续功能. Closes #547\n- 在FileDownloader内部处理了各类重定向的情况(300、301、302、303、307、308)。 Closes #611\n- 弃用了`FileDownloader#init`取而代之的是`FileDownloader#setup`，现在如果你不需要定制组件，就只需要在使用FileDownloader之前的任意使用调用这个方法就行。 Closes #500\n\n> - 如果你使用`broadcast.completed`并且接收任务完成的广播,你需要在AndroidManifest中注册Action为`filedownloader.intent.action.completed`的广播并且使用`FileDownloadBroadcastHandler`来处理接收到的`Intent`。\n> - 现在, 不再使用`FileDownloader#init`, 取而代之的，如果你需要注册你的定制组件，你需要在`Application#onCreate`中调用`FileDownloader.setupOnApplicationOnCreate(application):InitCustomMaker`, 否则你只需要在使用FileDownloader之前的任意时候调用`FileDownloader.setup(Context)`即可。\n\n#### 修复\n\n- 修复: 修复来`FileDownloadQueueSet`无法处理使wifi-required失效的操作。 感谢 @qtstc\n- 修复(output-stream): 修复当提供的output-stream不支持seek时，FileDownloader无法使用的问题。 Closes #622\n\n#### 性能与提高\n\n- 提高实用性: 覆盖使用不同的Url来复用下载进度的情况（结合`idGenerator`一起使用)。 Closes #617\n\n## Version 1.5.6\n\n_2017-06-18_\n\n#### 修复\n\n- 修复(crash): 修复当调用`findRunningTaskIdBySameTempPath`的同时请求了暂停可能导致NPE奔溃的问题。 Closes #613\n- 修复(crash): 修复返回状态是`206`并且它的ETAG发生变化时导致`IllegalArgumentException`错误奔溃的问题。 Closes #612\n- 修复(crash): 修复当用户请求下载需要Wifi并当前不是Wifi环境时，出现`FileDownloadNetworkPolicyException`未处理导致奔溃的问题。 感谢 @qtstc\n- 修复(crash): 修复当用户直接从`v1.4.3`升级到`v1.5.2`并且在一些其他综合因素下（具体可以参见 #610 ) 初始化数据库时出现`IllegalStateException`错误奔溃的问题。Closes #610\n- 修复(crash): 修复当回调流已经结束当时与此同时刚好出现错误或下载完成或暂停，小概率会出现`IllegalStateException`奔溃的问题。\n- 修复(no-response): 修复在接收到`connected`回调之后，多线程下载建立连接，此时在检验连接与数据获取连接期间服务端数据发生错误或变更导致启动下载后没有响应的问题。\n\n#### 性能与提高\n\n- 提高实用性: 当父级目录创建失败时直接回调`error`。 Closes #542\n- 提高实用性: 处理了返回状态是`416`的情况。 Refs #612\n\n## Version 1.5.5\n\n_2017-06-12_\n\n#### 修复\n\n- 修复(max-network-thread-count): 修复当任务都是多线程下载时，`download.max-network-thread-count`参数没起作用，并同时下载任务无上限的问题。 Closes #607\n\n## Version 1.5.4\n\n_2017-06-11_\n\n#### 新接口\n\n- 通过`IdGenerator`支持了定制下载任务id生成器。 Closes #224\n\n#### 性能与提高\n\n- 提高实用性: 将`FileDownloadModel`的维护从`FileDownloadDatabase`中解藕，让`FileDownloadDatabase`只关心数据库相关操作。\n- 提高实用性: 将数据库初始化的维护工作从默认的数据库实现中解藕出来，让定制的数据库也能够被采用相同机制维护到。\n\n## Version 1.5.3\n\n_2017-06-08_\n\n#### 修复\n\n- 修复(crash): 修复在计算平均速度的过程中`connected`与`completed`几乎同时回调时发生`divide by zero`异常的问题。 Refs #601\n- 修复(crash): 修复触发暂停的同时，`FetchDataTask`已经被创建并请求执行，但是还没有来得及被执行，导致NPE奔溃的问题。 Closes #601\n\n## Version 1.5.2\n\n_2017-06-07_\n\n#### 修复\n\n- 修复(crash): 修复当任务需要回调`error`或者被暂停时，刚好该任务的某个或几个链接完成下载，此时遇到NPE或者是`ConcurrentModificationException`的异常。Closes #598\n- 修复(crash): 修复当任务被暂停时，任务从开始到被暂停还没来得及同步一次数据到文件系统或者数据库，此时遇到NPE的异常。Refs #598\n- 修复(crash): 修复当采用多链接下载一个任务时，非首次建链失败或者是创建`FetchDataTast`失败，此时遇到NPE的异常。Refs #598\n- 修复(speed-calculate): 修复忽略整个下载进度回调，并且只使用`FinishListener`时，此时下载速度始终是`0`的问题。\n- 修复(finish-listener): 修复对于之前已经下载好的任务，并且只监听来`FinishListener`，此时`FinishListener`的`over`方法不会被回调到的问题。\n\n#### 性能与提高\n\n- 提升性能: 开启了默认数据库的WAL，使得读与写可并行操作来提高性能，因为我们的绝大多数场景读写是会在不同线程中同时执行的，开启这个以后会导致内存的增加，但是在大多数情况下极大的提高了数据库的写入速度，并且更加稳定（更少的使用`fsync()`)。\n\n## Version 1.5.1\n\n_2017-06-05_\n\n#### 修复\n\n- 修复(crash): 修复在`FileDownloader.init`中，当没有提供`InitCustomMaker`时出现的NPE奔溃。 Closes #592\n- 修复(callback): 修复当之前有多个链接服务于该任务并且正在从端点恢复时，在`pending`中没有带回其正确的`sofarBytes`的问题。\n- 修复(speed-monitor): 矫正`IDownloadSpeed.Monitor`在断点续传下总平均速度不准确的问题。\n\n#### 性能与提高\n\n- 提高稳定性: 当触发暂停时，主动同步FetchTask中的进度确保其进度得到固化到文件系统。\n- 提高稳定性: 当在`FileDownloader.init`中提供的`context`为空时，抛`IllegalArgumentException`以更早的暴露问题。\n\n## Version 1.5.0\n\n_2017-06-05_\n\n#### 新接口\n\n- 支持对单个任务多连接(多线程)下载。  Closes #102\n- 支持通过`ConnectionCountAdapter`定制对每个任务使用连接(线程)数据的定制(可以通过`FileDownloader#init`设置进去)\n\n#### 性能与提高\n\n- 提高性能: 重构整个下载的逻辑与原始回调逻辑，并删除了1000行左右的`FileDownloadRunnable`。\n\n对于每个任务默认的连接(线程)数目策略，你可以通过`ConnectionCountAdapter`来定制自己的策略:\n\n- 1个连接(线程): 文件大小 [0, 1MB)\n- 2个连接(线程): 文件大小 [1MB, 5MB)\n- 3个连接(线程): 文件大小 [5MB, 50MB)\n- 4个连接(线程): 文件大小 [50MB, 100MB)\n- 5个连接(线程): 文件大小 [100MB, -)\n\n## Version 1.4.3\n\n_2017-05-07_\n\n#### 修复\n\n- 修复: 移除重复的被弃用的方法: `FileDownloader#init(Application)`, 因为`Application`是 `Context`的实现。\n\n## Version 1.4.2\n\n_2017-03-15_\n\n#### 修复\n\n- 修复(Same File Path): 避免多个问题同时对相同的文件写入，一旦存在另外一个正在运行中的任务与当前任务的文件存储路径一致，当前任务将会收到`PathConflictException`来拒绝启动。 Closes #471\n\n#### New Interfaces\n\n-  新增 `FileDownloadSerialQueue#getWaitingTaskCount`: 获取动态串行队列中正在等待启动的任务个数。Refs #345\n\n## Version 1.4.1\n\n_2017-02-03_\n\n#### 修复\n\n- 修复(高并发): 修复由于Messenger在已经收到结束的信息将Task对象赋值为Null以后依然收到其他消息，导致NPE的问题。 Closes #462\n- 修复(`FileDownloadHttpException`): 修复由于在建立连接后无法取到请求头以至于遇到`FileDownloadHttpException`时发生`IllegalStateException`的问题。 Closes #458\n\n## Version 1.4.0\n\n_2017-01-11_\n\n#### 性能与提高\n\n- 提高性能: 优化`FileDownloader#init`中的逻辑, 使其更加的轻量(仅仅做了赋值`context`与`maker`的操作)\n\n#### 修复\n\n- 修复(pause): 修复高并发情况下，当在启动一个任务的时候，很短的时间间隔内去暂停一个任务，可能无法暂停下来任务的问题。 Closes #402\n- 修复(init FileDownloader): 修复在很低概率下在`FileDownloadService`所在进程初始化FileDownloader时出现Crash的问题。 Closes #420  \n- 修复(FileDownloadHttpException): 修复在遇到`FileDownloadHttpException`类型Crash时，由于字符串的formatter无法匹配导致Crash的问题 Closes #438\n\n## Version 1.3.9\n\n_2016-12-18_\n\n### 核心:\n\n- 这个版本开始，你可以定制自己的网络连接组件: [FileDownloadConnection][FileDownloadConnection-java-link]，默认情况下我们使用[这个][FileDownloadUrlConnection-java-link]。\n- 这个版本开始，我们不再默认依赖okhttp，你可以根据自己的需求进行定制。(如果你依然想要使用okhttp，可以考虑集成下这个[仓库](https://github.com/Jacksgong/filedownloader-okhttp3-connection))\n\n> 如果你依然需要配置`timeout`、`proxy`，请不用担心，我已经对默认的网络连接组件实现了这几个接口: [DemoApplication](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/DemoApplication.java#L35)，如果有需要可以看看。\n\n#### 新接口\n\n- 新增 `FileDownloadQueueSet#reuseAndStart`: 添加 '复用并启动'接口，主要用于在启动队列任务之前，先对任务队列中的所有任务进行尽可能的复用。 Ref #383\n- 新增 `FileDownloadConnection`: 支持定制化网络连接组件，不再默认依赖okhttp。 Closes #158\n\n## Version 1.3.0\n\n_2016-10-31_\n\n#### 新接口\n\n- 新增 `FileDownloadSerialQueue`: 便于动态管理串行执行的队列。 Closes #345.\n- 移除 `FileDownloadListener`类中的`callback`方法, 并且新增`FileDownloadListener#isInvalid`方法，用于告知FileDownloader该监听器是否已经无效，不再接收任何消息。\n- 新增 `FileDownloader#clearAllTaskData`: 清空`filedownloader`数据库中的所有数据。 Closes #361.\n\n#### 性能与提高\n\n- 提高实用性(`FileDownloadListener#blackCompleted`): 确保`blockCompleted`回调可以接收任何的`Exception`。 Closes #369.\n- 提高实用性(service-not-connected): 在service-not-connected-helper中输出提示与原因, 这样当你调用有些需要确保下载服务已经连接上的方式，但下载服务没有连接上时，不但在`Logcat`中可以收到原因，还能收到提示。\n\n#### 修复\n\n- 修复(reuse): 修复调用`BaseDownloadTask#pause`之后短时间内调用`BaseDownloadTask#reuse`方法，可能会抛出异常的问题。 Closes #329.\n\n## Version 1.2.2\n\n_2016-10-15_\n\n#### 修复\n\n- 修复(fatal-crash): 修复当任务没有`FileDownloadListener`时，也不能收到该任务`FileDownloadMonitor.IMonitor#onTaskOver`的回调的问题。 Closes #348.\n\n## Version 1.2.1\n\n_2016-10-09_\n\n#### 修复\n\n- <s>修复(fatal-crash): 修复当任务没有`FileDownloadListener`时，也不能收到该任务`FileDownloadMonitor.IMonitor#onTaskOver`的回调的问题。 Closes #348.</s> 十分的抱歉这个问题在1.2.1版本中依然存在，最终在1.2.2中验证修复。\n\n## Version 1.2.0\n\n_2016-10-04_\n\n#### 新接口\n\n- 新增 `FileDownloader#insureServiceBind()`: 便于阻塞当前线程，并且启动下载服务，服务启动之后再执行需要服务的请求。 Refs #324.\n- 新增 `FileDownloader#insureServiceBindAsync()`: 便于启动下载服务，并且在服务启动之后，执行需要下载服务的请求。 Refs #324.\n- 新增 `FileDownloader#bindService(runnable:Runnable)`: 便于启动下载服务，并且在服务启动之后，执行 `runnable`。 Refs #324.\n- 新增 `FileDownloader#init(Context,InitCustomMaker)`: 便于初始化下载引擎的时候可以传入更多的定制化组件。 Refs #157.\n\n#### Enhancement\n\n- 提高实用性(`InitCustomMaker#database`): 支持定制化数据库组件(`FileDownloadDatabase`)，并且实现默认的数据库组件： `DefaultDatabaseImpl`。 Closes #157.\n- 提高实用性(`InitCustomMaker#outputStreamCreator`): 支持定制化输出流组件(`FileDownloadOutputStream`)，并且实现默认的输出流组件： `FileDownloadRandomAccessFile`，与一些可替代的组件： `FileDownloadBufferedOutputStream`、`FileDownloadOkio`。Closes #301.\n\n## Version 1.1.5\n\n_2016-09-29_\n\n#### 新接口\n\n- 支持在`filedownloader.properties`中配置`file.non-pre-allocation`: 是否不需要在开始下载的时候，预申请整个文件的大小(`content-length`), 默认值是`false`。Closes #313 .\n\n#### 修复\n\n- 修复(fatal-crash): 修复由于`ThreadPoolExecutor#getActiveCount()`是一个大概的值，导致在其反回的不是正确值时，thread-pool库中存在`StackOverflowError`Crash的问题。Closes #321 .\n- 修复(minor-crash): 修复在一些小概率情况下出现Crash Message是'No reused downloaded file in this message'的IllegalStateException的问题。 Closes #316 .\n- 修复(minor-crash): 修复当在下载服务还没有连接上时，同时有几个串行队列任务需要执行，在一些小概率的情况下，一些相同的任务会被启动两次导致crash的问题。 Refs #282 .\n\n#### 其他\n\n- 依赖: 取消对thread-pool库的依赖。 Refs #321 .\n- MinSDKVersion: 升级`minSdkVersion` : 8->9。 Refs #321 .\n\n## Version 1.1.0\n\n_2016-09-13_\n\n#### 新接口\n\n- 新增 `BaseDownloadTask#setWifiRequired`: 设置任务是否只允许在Wifi网络环境下进行下载。 默认值 `false`。 Closes #281 .\n\n#### 性能与提高\n\n- 提高性能: 替换所有的线程池为exceed-wait-pool(更多详情参见: `FileDownloadExecutors`) 并且所有线程池中的线程将会在闲置五秒后自动结束。 Refs #303 .\n- 提高实用性: 当有异常从`FileDownloadListener#blockComplete`抛出时，将会被`catch`并且回调到`FileDownloadListener#error`中而非回调`FileDownloadListener#completed`。 Closes #305 .\n\n#### 修复\n\n- 修复(lost-connect): 避免等待服务连接的列表中在一些小概率情况下存在重复任务的问题。\n\n## Version 1.0.2\n\n_2016-09-06_\n\n#### 修复\n\n- 修复: 服务还没有连接上时，启动的'队列任务'被放在等待队列，当服务连接上以后，FileDownloader尝试重启这些等待队列中的任务，但是抛了`IllegalStateException`的Bug。 Closes #307 .\n\n## Version 1.0.1\n\n_2016-09-05_\n\n#### 新接口\n\n> 如果你之前有使用现在已经被申明弃用的方法`BaseDownloadTask#ready()`, 只需要简单的将它迁移为:`BaseDownloadTask#asInQueueTask():InQueueTask`并且调用`InQueueTask#enqueue()`。\n\n- 添加`BaseDownloadTask#asInQueueTask():InQueueTask`并申明弃用`BaseDownloadTask#ready()`: 申明当前任务是队列任务，并且可以通过`InQueueTask#enqueue()`将当前任务放入全局队列以便于启动队列任务的时候，能被队列收编执行。`InQueueTask#enqueue()`中的操作与`BaseDownloadTask#ready()`相同, 我们通过这个方式封装`ready()`是为了让你更加清晰的了解: 只有当前任务是队列任务，才需要调用该方法；如果当前任务不是队列任务，而却调用了这个方法，你将会收到一个异常(具体异常的原因可以移步到`DownloadTask#start`报的异常信息进行了解)。\n\n#### 修复\n\n- 修复: 当有使用相同`listener`对象的多个孤立任务与队列任务在不同的线程中同时被启动时(后)，有可能会遇到IllegalStateException异常的问题。 Closes #282 .\n\n## Version 1.0.0\n\n_2016-08-21_\n\n#### 新接口\n\n- 添加 `BaseDownloadTask#cancel`: 这个方法是为了说明为什么`pause`的操作也可以达到`cancel`的作用。\n\n#### 性能与提高\n\n- 提高性能: 持有`isDownloaderProcess`的结果，防止多次判断。\n- 提高实用性: 重构代码的可见层。Closes #283\n- 提高实用性: 完善Java Doc。Closes #284\n- 提高实用性: 提供Java Doc 站点: http://fd.dreamtobe.cn 。Closes #284\n\n## Version 0.3.5\n\n_2016-08-16_\n\n#### 性能与提高\n\n- 提高实用性: 为FileDownloader中的所有线程添加线程名。\n- 提高性能: 调整`block-completed-thread-pool`中的核心线程数: 5->2，减少资源的浪费。\n\n#### 修复\n\n- 修复(SQLiteFullException): 覆盖了在整个下载过程中可能遇到`SQLiteFullException`的错误，就捕获相关错误并回调回 `FileDownloadListener#error` 。 Closes #243\n- 修复(提供目录的情况): 修复若是提供的是文件夹，并且对应的任务已经下载完成，再次启动的时候，在直接回调`FileDownloadListener#completed`时，获取的`targetFilePath`可能为null的问题。 Closes #237\n\n## Version 0.3.4\n\n_2016-07-31_\n\n#### 新接口\n\n- 添加 `FileDownloader#clear`: 用于强制根据任务ID清理其在filedownloader中的数据。Closes #218\n\n#### 性能与提高\n\n- 提高实用性: 为 `FileDownloader#start(FileDownloader, boolean)` 添加返回值: 是否成功启动任务下载。Closes #215\n- 提高实用性: `FileDownloader#pause` 暂停任务时，不再仅仅是暂停一个任务，而是暂停掉所有ID为指定ID的运行中的任务。\n\n#### 修复\n\n- 修复(初始化-CRASH): 修复初始化FileDownloader时，从`ActivityManager`获取到运行中进程信息为空时发生CRASH。Closes #210\n- 修复(小概率-CRASH): 修复当FileDownloadService已经`onDestroy`后，还接收到`snapshot-message`时发生CRASH的情况。 Closes #213\n- 修复(消息流准确性): 在真正启动下载时删除目标文件，以此保证当有相同任务正在下载时，获取下载状态，不会获取到已经下载完成的错误的状态。Closes #220\n- 修复(启动线性下载): 收集未绑定的任务进行启动而非只是根据FileDownloadListener去收集任务，修复无法启动两个相同`FileDownloadListener`的队列。Closes #233\n- 修复(清理Messenger): 在回调 结束的消息 的回调之前进行清理任务的Messenger，而非在回调之后清理，以此确保在回调方法中可以调用`BaseDownloadTask#reuse`。Closes #229\n\n#### 其他\n\n- 所依赖的okhttp从`3.3.1`升到`3.4.1`。\n\n## Version 0.3.3\n\n_2016-07-10_\n\n#### 新接口\n\n- 添加 `FileDownloadUtils#getTempPath`: 获取用于存储还未下载完成文件的临时存储路径: `filename.temp`。 Refs #172.\n- 添加 `FileDownloadUtils#isFilenameConverted(context:Context)`: 判断是否所有数据库中下载中的任务的文件名都已经从`filename`(在旧架构中)转为`filename.temp`。\n- 添加 `FileDownloader#getStatusIgnoreCompleted(id:int)`:  获取不包含已完成状态的下载状态(如果任务已经下载完成，将收到`INVALID`)。\n- 添加 `FileDownloader#getStatus(id:int, path:String)`:  获取下载状态。\n- 添加 `FileDownloader#getStatus(url:String, path:String)`:  获取下载状态\n- 添加 `FileDownloadUtils#generateId(url:String, path:String, pathAsDirectory:boolean)`: 生成可以被FileDownloader识别的`Download Id`。\n- 添加 `BaseDownloadTask#setPath(path:String, pathAsDirectory:boolean)`: 如果`pathAsDirectory`是`true`,`path`就是存储下载文件的文件目录(而不是路径)，此时默认情况下文件名`filename`将会默认从`response#header`中的`contentDisposition`中获得。\n- 添加 `BaseDownloadTask#isPathAsDirectory`: 判断`BaseDownloadTask#getPath()`返回的路径是文件存储目录(`directory`)，还是文件存储路径(`directory/filename`)。\n- 添加 `BaseDownloadTask#getTargetFilePath`: 获取目标文件的存储路径。\n- 添加 `FileDownloadQueueSet#setDirectory`: 设置队列中所有任务文件存储的目录。\n\n#### 性能与提高\n\n- 提高实用性: 支持将`path`作为目录来存储文件，在这个情况下，文件名默认将从`response#header`中的`contentDisposition`中获得。 Refs #200.\n- 提高实用性: 将还未下载完成的文件存储在临时文件中(`filename.temp`)。 Refs #172.\n- 提高性能: FileDownloader不再将已经完成下载的任务存储在数据库中，判定任务是否已经下载完成，直接通过判断目标文件是否存在。 Refs #176, #172.\n- 提高稳定性: 选用状态是`INVALID`或`progress`优先接收`completed`消息, 以此确保`connected`状态的任务能够留下来接收`progress`状态的消息。 Refs #123\n- 提高稳定性: 扩张 __任务同步锁__ 到 __获取相同ID任务队列__ 的外面，以此修复由于有些状态在 __获取相同ID任务队列__ 与 __等待任务同步锁__ 的过程中已经被改变导致有些消息不能被消耗的问题。\n\n#### 修复\n\n- 修复(DB-维护): 保留状态是`pending`并且已经下载的字节数大于0的Model，因为这些Model可以用于恢复断点续传。 Closes #176.\n- 修复(crash-NPE): FileDownloader 可能遇到NPE当下载监听器被移除，但是对应任务还在FileDownloader中运行。 Closes #171.\n\n## Version 0.3.2\n\n_2016-06-12_\n\n#### 新接口\n\n- 添加 `BaseDownloadTask#setCallbackProgressMinInterval`: 用于设置每个'progress'方法回调的间隔。 Closes #167 .\n- 添加 `FileDownloader#setMaxNetworkThreadCount`: 用于设置最大同时下载的数目（最大同时运行的网络线程）。 Closes #168.\n- 添加 `FileDownloader#init(Context,OkHttpClientCustomMaker,int)`: 在下载服务初始化的时候接受设置最大同时下载数目（最大同时运行的网络线程）。 Closes #168.\n\n#### 性能与提高\n\n- 提高稳定性: 确保每个'progress'回调方法之间的最小间隔是5ms，防止对于一个任务而言'progress'回调太频繁导致'防掉帧队列'极速膨胀导致各类Action响应都延时。 Closes #167.\n- 提高实用性: 在请求的操作需要在下载服务中完成，但是还未连接上下载服务时，输出对应的'warn'级别的日志。\n- 提高性能: 使用`SparseArray`代替`HashMap`用于索引所有的`FileDownloadModel`。\n\n#### 修复\n\n- 修复(crash): 修复在某个下载任务开始下载时，发现任务的状态不正确的情况下，输出日志中提供了错误的参数类型导致的Crash。\n- 修复(强制重新下载): 修复错误逻辑导致设置`BaseDownloadTask#setForceReDownload(true)`并且任务已经下载完成会促发'warn'的回调，却没有进行强制重新下载的Bug。\n- 修复(class-type): 保持`SocketTimeOutException`的Class类型，不再关心`Throwable`的`message`是否为空。\n\n#### 其他\n\n- 所依赖的okhttp从`3.2.0`升到`3.3.1`。\n\n## Version 0.3.1\n\n_2016-05-19_\n\n#### 性能与提高\n\n- 提高稳定性: 在结束下载时确保缓存中的数据都写入文件。\n\n## Version 0.3.0\n\n_2016-05-13_\n\n#### 修复\n\n> 为什么FileDownload服务可以运行在UI进程? 参考 [filedownloader.properties](https://github.com/lingochamp/FileDownloader/wiki/filedownloader.properties).\n\n- 修复(下载服务共享UI进程时): 修复在下载服务不是运行在独立进程的情况下（非默认情况），附加的header没有带上请求的bug。Closes #149.\n\n## Version 0.2.9\n\n_2016-05-10_\n\n#### 新接口\n\n- 添加 `BaseDownloadTask#isUsing():boolean`: 用于判断当前的Task对象是否在引擎中启动过. Closes #137 。\n\n#### 修复\n\n- 修复(高并发情况下的npe): 当任务的状态是一个未预期的状态是，提供一个默认的错误快照，避免出现npe 。\n- 修复(返回错误码-416): 覆盖返回错误码是416或者当出现已下载大小大于等于文件总大小的时候依然断点续传的bug。\n\n## Version 0.2.8\n\n_2016-05-02_\n\n#### 新接口\n\n- 添加 `BaseDownloadTask#getId():int`: 弃用(没有删除该接口) `getDownloadId()`, 建议使用 `getId()` 代替 。\n\n#### 性能与提高\n\n- 提高稳定性: 重构任务启动器，使得启动任务更加可维护，以及标记任务过期更加可靠。\n- 提高稳定性: 重构将事件派发给`FileDownloadListener`的体系，新的体系就如同，派件员与快递驿站的关系，每次都会对事件进行快照，打包为一个消息快件，派发到驿站，转包给 `FileDownloadListener`。\n- 提高稳定性: 覆盖所有的有关暂停的高并发情况，删掉一些符合预期的警告性日志。\n- 提高性能: 减少FileDownloader database I/O 。\n- 提高性能: 减少创建对象(更少的内存分配请求，对于GC友好)对于每次回调, 对于一个下载状态的更新，只创建一个快照，整个通讯架构使用。\n\n#### 修复\n\n- 修复: 提供明确的locale用于格式化字符串，避免一些默认locale是非预期的情况发生。Closes #127\n\n## Version 0.2.7\n\n_2016-04-22_\n\n#### 新接口\n\n- 添加 `FileDownloader#setTaskCompleted(taskAtomList:List<FileDownloadTaskAtom>)`: 用于告诉FileDownloader引擎，指定的一系列的任务都已经通过其他方式(非FileDownloader)下载完成。\n\n#### 性能与提高\n\n- 提高稳定性: 假如在下载进程调用 `bindService` 直接抛异常，防止用户在使用过程中，错误的在下载进程绑定服务，而没有暴露这个根本问题，引发其他一系列的异常。Closes #119。\n\n## Version 0.2.6\n\n_2016-04-20_\n\n#### 新接口\n\n- 调整: 将原本需要在根目录创建的 `filedownloader.properties` ，改为到 模块的 `assets` 目录下， 如 `/demo/src/main/assets/filedownloader.properties`。\n\n#### 修复\n\n- 修复 `filedownloader.properties` 中的参数不起作用的bug。 Closes #117.\n\n## Version 0.2.5\n\n_2016-04-19_\n\n#### 新接口\n\n- 添加 `FileDownloader#setTaskCompleted`: 用于告诉FileDownloader引擎，以指定Url与Path的任务已经通过其他方式(非FileDownloader)下载完成。\n- 支持 新的配置参数`download.max-network-thread-count` 在 `filedownloader.properties`: 同时下载的最大网络线程数，默认值是3。 Closes #116.\n\n## Version 0.2.4\n\n_2016-04-18_\n\n#### 新接口\n\n- 添加 `BaseDownloadTask#getSpeed` 以及 `BaseDownloadTask#setMinIntervalUpdateSpeed`: 获取任务的下载速度, 下载过程中为实时速度，下载结束状态为平均速度。 Closes #95 。\n- 添加 `FileDownloader#startForeground` 以及 `FileDownloader#stopForeground` 用于支持 前台模式([Service#startForeground](http://developer.android.com/intl/zh-cn/reference/android/app/Service.html#startForeground(int, android.app.Notification)))，保证用户从最近应用列表移除应用以后下载服务被杀。 Closes #110 。\n- 支持 新的配置参数 `download.min-progress-step` 以及 `download.min-progress-time`: 最小缓冲大小以及最小缓冲时间，用于判定是否是时候将缓冲区中进度同步到数据库，以及是否是时候要确保下缓存区的数据都已经写文件。这两个值越小，更新会越频繁，下载速度会越慢，但是应对进程被无法预料的情况杀死时会更加安全。默认值是与 `com.android.providers.downloads.Constants`中的一致 65536(最小缓冲大小) 以及 2000(最小缓冲时间)。\n- 支持 新的配置参数 `process.non-separate` 在 `filedownloader.properties` 中 : FileDownloadService 默认是运行在独立进程 `:filedownloader` 上的, 如果你想要FileDownloadService共享并运行在主进程上，以减少不必要的消耗(如IPC的I/O，维护进程的CPU的消耗等), 添加将该配置参数值设置为 `true`。 Closes #106 。\n\n#### 性能与提高\n\n- 提高性能: 提高了下载速度, 优化了同步缓冲区的数据到本地文件以及数据库的架构，很大程度的提高了下载速度。 Closes #112 。\n\n#### 修复\n\n- 修复: 无法重新启动一个已经暂停但是依然存在下载线程池中在pending中的任务。 Closes #111 。\n\n## Version 0.2.3\n\n_2016-04-11_\n\n#### 新接口\n\n- 添加 `FileDownloadOutOfSpaceException`, 当将要下载的文件大小大于剩余磁盘大小时，会抛出这个异常。\n- 在 `FileDownloadListener` 新增 `started` 回调方法: 在结束 `pending` 开始运行当前任务的线程时，回调该方法。\n- 在 `FileDownloadMonitor.IMonitor` 新增 `onTaskStarted` 回调方法，用于监控在结束 `pending` 开始运行当前任务的线程时，回调该方法。这样就可以在监控中通过 `onTaskBegin`到`onTaskStarted`计算出pending的时间，在`onTaskStarted`到`onTaskOver`计算出真正消耗在下载的时间(Connection、Fetching)。\n\n#### 性能与提高\n\n- 提高实用性: 为 `FinishListener` 的 `over` 方法提供所指向的Task，为了有些时候我们为多个任务添加相同的 `FinishListener` 时，需要这个参数来判断当前是哪个任务的回调。 Closes #69 。\n- 提高稳定性: 如果调用一个正在运行中的Task对象的 `start` 方法，直接抛异常；并且为已经结束的Task对象提供 `BaseDownloadTask#reuse` 进行复用。 Closes #91 。\n- 提高性能: 在进入事件队列之前，拦截掉一些原本就没有监听器进行监听的事件。\n\n#### 修复\n\n- 修复: 在一些极端情况下，非结束的回调回调次数不符合预期的情况。\n- 修复: `progress` 方法的回调中包含了对完成( `sofarBytes==totalBytes` )的回调，导致回调间隔不达预期的bug。\n- 修复: 在 `warn` 回调带回 total-bytes，为了覆盖在 主进程被杀，下载进程存在的情况下，主进程重新重启并启动相同任务，total-bytes为0的bug。 Closes #90 。\n- 修复: 如果连续出现失败，连续回调 `retry` 时，`retry` 只被回调一次，其他的次数的 `retry` 都不被回调的bug。 Refs: #91 。\n- 修复: 在无网络状态下，启动下载，如果存在重试的机会，下载的进度被覆盖，导致下次无法断点续传的bug。 Closes #92 。\n- 修复: 有可能在'检测是否可以复用'到'检测是否在下载队列'的这段时间内已经下载完成但是任务还在队列中的极端情况。\n- 修复: 线性任务，在下载进程被杀重新启动被转为并行任务的bug。\n\n## Version 0.2.2\n\n_2016-04-06_\n\n#### 新接口\n\n- 添加 `FileDownloadHttpException` 与 `FileDownloadGiveUpRetryException`, 优化异常回调处理机制. Closes #67 。\n- 初始化 `FileDownloader` 传入参数由原来需要 `Application` 改为 需要 `Context`( `FileDownloader#init(Context)` ), 优化接口，并且便于单元测试。 Closes #54 。\n\n#### 性能与提高\n\n- 提高稳定性: 在开始获取数据之前，先检查是否有足够的空间用于存储下载文件，如果不够直接抛异常，如果足够将锁定对应空间用于正常存储正在下载的文件。 Closes #46 。\n- 提高实用性: 断点续传支持，不再强制要求Etag存在；支持不需要Etag，只要后台支持 `Range` 头部参数就可以支持断点续传。 Close #35 , #66 。\n\n#### 修复\n\n- 修复: 在 `FileDownloadLog.NEED_LOG` 为 `true` 时，并且事件无效的情况下，`EventPool` 出现 `IllegalFormatConversionException` 异常的问题。 Closes #30 。\n- 修复: 在 Filedownloader进程被杀以后， 在 `IFileDownloadIPCService` 出现异常。Closes #38 。\n- 修复: 修复 response-body 可能存在的泄漏: 'WARNING: A connection to https://... was leaked. Did you forget to close a response body?' Closes #68 。\n- 修复: 使用 `internal-string` 作为同步的对象，而非直接用 String对象。\n- 修复: 在一些情况下如果存在重复任务，在高并发下进行中的回调次数可能不对的bug。\n\n#### 其他\n\n- 所依赖的okhttp从`3.1.2`升到`3.2.0`。\n\n## Version 0.2.0\n\n_2016-02-15_\n\n#### 新接口\n\n- `filedownloader.properties-http.lenient`: 添加`http.lenient`用于配置下载引擎中是否需要忽略一些http规范性的错误(如: 忽略 `can't know the size of the download file, and its Transfer-Encoding is not Chunked`), 默认值`false`。\n- `FileDownloadNotificationHelper`: 用于支持在通知栏中的通知对下载引擎中任务下载状态同步的快速集成。\n- `FileDownloader#init(Application,OkHttpClientCustomMaker)`: 用于为下载引擎提供定制的OkHttpClient。\n\n#### 修复\n\n- 修复: 需要重新启动的列表(`FileDownloadTask.NEED_RESTART_LIST`)不为空并且下载服务断开时出现`Concurrent Modification Exception`的异常。\n- 修复: 下载引擎连接丢失以后，重连任务的回调失效的bug。\n- 修复: 在一些高并发下载情况下，对队列进行暂停，部分暂停不生效的bug。\n\n## Version 0.1.9\n\n_2016-01-23_\n\n> 引擎默认会打开 避免掉帧的处理(使得一次回调(FileDownloadListener)不至于太频繁导致手机显示掉帧), 如果你希望关闭这个功能（关闭以后，所有回调会与之前版本一样，所有的回调会立马抛一个消息ui线程(Handler)）: `FileDownloader.getImpl().disableAvoidDropFrame()`.\n\n#### 新接口\n\n\n- `FileDownloadMonitor`: 现在你可以通过这个来添加一个全局的监听器，方便调试或打点\n- `FileDownloader#enableAvoidDropFrame(void)`: 开启 避免掉帧, 原理最多10ms抛一个消息到ui线程，每次在ui线程每次处理5个回调(FileDownloadListener), 默认: 开启。\n- `FileDownloader#disableAvoidDropFrame(void)`: 关闭 避免掉帧，会和之前的版本一样，每个回调(FileDownloadListener)都抛一个消息到ui线程，如果频率非常高（如高并发的文件检测）可以导致ui线程被DDOS。\n- `FileDownloader#isEnabledAvoidDropFrame(void)`: 是否是 开启了避免掉帧，目前如果没有设置默认是开启的。\n- `FileDownloader#setGlobalPost2UIInterval(intervalMillisecond:int)`: 设置最多intervalMillisecond毫秒抛一个消息到ui线程，是 避免掉帧的具体设置。默认: 10ms，如果设置为小于0的数值，会 关闭 避免掉帧。\n- `FileDownloader#setGlobalHandleSubPackageSize(packageSize:int)`: 设置每次在ui线程每次处理packageSize个回调，如果已经关闭了 避免掉帧，那么这个值将没有任何意义，默认: 5个。\n- `BaseDownloadTask#setSyncCallback(syncCallback:boolean)`: 是否同步回调该task中的所有的回调(FileDownloadListener), 如果设为true, 该task的所有回调会直接在下载线程直接回调，不会抛到ui线程, 默认: false。\n- `BaseDownloadTask#isSyncCallback(void):boolean`: 该task是否设置了所有回调(FileDownloadListener)同步调用(直接在下载线程直接调用，而非抛到ui线程)。\n- `FileDownloadUtils#setDefaultSaveRootPath`: 设置全局默认的存储路径(Root Path)，在task没有指定对应的存储路径的时候，会存储在该目录下。\n- `FileDownloadQueueSet`: 用于更方便的指定几个task为一个队列，进行并行/串行下载，并且可以很方便的对整个队列中的所有任务进行统一设置。\n\n#### 性能与提高\n\n- 提高可调试性: 提供了一个全局监听器(`FileDownloadMonitor`)，更方便与调试或打点。\n- 提高性能: 优化内部EventPool的锁机制，不再处理listener的priority。\n- 提高性能: 所有`FileDownloadListener`中的回调将会直接调用，而不再过一层EventPool。\n\n#### 修复\n\n- 修复: `EventPool`中的listener存储器无限制的bug.\n\n## Version 0.1.5\n\n_2016-01-17_\n\n#### 新接口\n\n- `BaseDownloadTask#setTag(key:int, tag:Object)`: 用于存储任意的变量方便回调中使用，以key作为索引。\n- `BaseDownloadTask#getTag(key:int)`: 根据key获取存储在task中的变量。\n- `BaseDownloadTask#addHeader(name:String, value:String)`: 添加自定义的请求头参数，需要注意的是内部为了断点续传，在判断断点续传有效时会自动添加上(`If-Match`与`Range`参数)，请勿重复添加导致400或其他错误。\n- `BaseDownloadTask#addHeader(line:String)`: 添加自定义的请求头参数，需要注意的是内部为了断点续传，在判断断点续传有效时会自动添加上(`If-Match`与`Range`参数)，请勿重复添加导致400或其他错误。\n- `BaseDownloadTask#removeAllHeaders(name:String)`: 删除由自定义添加上去请求参数为`{name}`的所有键对。\n\n#### 性能与提高\n\n- 提高性能: 在未打开Log的情况下，屏蔽了所有Log生成的代码。\n- 提高可调试性: 重新过滤所有的日志级别，减少高级别日志输出，并且默认将会打出`Warn`、`Error`、`Assert`级别的log以便于用户在未打开日志的情况下也可以定位到基本的组件异常。\n\n#### 修复\n\n- 修复: 在一些高并发的情况下，有可能内部队列存在残留任务的bug，此bug可能可能引发回调被旧的任务吞掉的问题。\n- 修复: 出现网络错误，或者其他错误，重新下载无法自动断点续传的bug。\n\n#### 其他\n\n- 所依赖的okhttp从`2.7.1`升到`3.0.1`。\n\n## Version 0.1.4\n\n_2016-01-13_\n\n#### 新接口\n\n- `FileDownloader#unBindServiceIfIdle(void)`: 如果目前下载进程没有任务正在执行，则关停下载进程\n- `FileDownloader#getStatus(downloadId)`: 获取下载Id为downloadId的状态(可参考[任务管理demo](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/TasksManagerDemoActivity.java))\n- `FileDownloader#isServiceConnected(void)`: 是否已经启动并且连接上下载进程(可参考[任务管理demo](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/TasksManagerDemoActivity.java))\n\n#### 性能与提高\n\n- 支持[Chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) 数据下载(建议看一眼[Single Task Test](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/SingleTaskTestActivity.java)).\n- 提高性能: 减少 IPC。\n- 提高性能: 减少线程锁。\n- 提高性能: 在`:filedownloader`进程启动时，对数据库中的数据进行第一级别维护。\n- 提高性能: 忽略数据库中的`callbackProgressTimes`字段。\n\n#### 修复\n\n- 修复: 在低内存情况下，ui进程处于后台进程的情况下被回收，而下载进程(服务进程)还在, 并且还存在在下载中的任务，此时重新启动ui进程`FileDownloader#pauseAll`无法暂停已经在下载进程启动的任务的bug。\n- 修复: 主动调用`FileDownloader#unBinderService`，没有释放连接相关资源的bug。\n- 修复: ui进程被干掉，下载进程健还有活跃的并行任务正在下载，ui进程启动以后启动相同的队列列表，无法收到进度只收到warn的bug。\n\n## Version 0.1.3\n\n_2016-01-04_\n\n- 不再受到1.99G限制;如果是大于1.99G的文件，请使用`FileDownloadLargeFileListener`作为监听器，使用对应的`getLargeFileSoFarBytes()`与`getLargeFileTotalBytes()`接口\n- 性能优化: 部分接口跨进程通信不受binder thread 阻塞。\n- 依赖okhttp，从`2.7.0`升到`2.7.1`\n\n## Version 0.1.2\n\n_2015-12-27_\n\n- 优化线程消化能力\n- 修复大队列任务暂停可能部分无效的问题\n- 修复大队列并行下载时一定概率下载已经完成回调囤积延后回调的问题\n\n## Version 0.1.1\n\n_2015-12-25_\n\n- event线程区分敏捷线程池与其他线程池，减少资源冗余强制、内部稳定性以及消化能力与性能，\n- 添加自动重试接口，新增用户指定如果失败自动重试的次数\n\n## Version 0.1.0\n\n_2015-12-24_\n\n- FileDownloadStatus 由`int`改为`byte`，该参数会频繁的在IPC时被拷贝\n- 优化串行or并行任务时，筛选task在准备数据时就筛选好，减少冗余操作，更加安全\n- 优化串行任务执行保证使用更可靠的方式\n\n## Version 0.0.9\n\n_2015-12-23_\n\n- 将调用start(启动任务)抛独立线程处理，其中的线程是通过共享非下载进程EventPool中的线程池(可并行8个线程)\n\n## Version 0.0.8\n\n_2015-12-22_\n\n- initial release\n\n[RemitDatabase-png]: https://github.com/lingochamp/FileDownloader/raw/master/art/remit-database.png\n[FileDownloadConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadConnection.java\n[FileDownloadUrlConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadUrlConnection.java\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 47.75,
          "content": "# Change log\n\n> [中文迭代日志](https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG-ZH.md)\n\n## Version 1.7.7\n\n- Fix: FileDownloadThreadPool may throw ArrayIndexOutOfBoundsException & ClassCastException. closes #1258\n- Fix: Resume a task may occur 416 problem after upgrading from 1.6.x to 1.7.x.\n- Fix: Cannot show notification in demo. closes #1224\n- Fix: The callback blockComplete may be invoked in main thread.closes #1069\n- Fix: The thread unsafe problem of SparseArray in NoDatabaseImpl. closes #1225 \n\n## Version 1.7.6\n\n_2019-02-20_\n\n#### Fix\n\n- Fix: stop foreground service after all tasks finished in Android O. closes #1096\n- Fix: fix 'Context.startForegroundService() did not then call Service.startForeground()' issue. closes #1104\n- Fix: insure all foreground service running notification is canceled when pause download. closes #1136\n- Fix: fix tiny possibility npe during retry. closes #1100\n\n## Version 1.7.5\n\n_2018-08-03_\n\n#### Fix\n\n- Fix: fix raise \"Not allowed to start service Intent...\" issue when starting DownloadService on Android O and the application isn't on the foreground and also not on the whitelist, because we can't use `JobScheduler` to handle the download affair. closes #1078\n\n#### Enhance\n\n- Improve Practicability: support character set and the launguage encoding for `Content-Disposition`. closes #1057\n- Improve Practicability: cover the error response code 416 from aliyun repo. closes #1050\n\n## Version 1.7.4\n\n_2018-05-19_\n\n#### Fix\n\n- Fix: fix raise 'IllegalStateException' on Android 8+ when FileDownloader try to re-bind service after the connection with the service is lost on downloading state and the app is on the background. closes #1017\n- Fix: fix directory traversal vulnerability security issue. closes #1028\n\n## Version 1.7.3\n\n_2018-04-20_\n\n#### Fix\n\nFix: fix `fd` isn't released manually when download finished which may raise oom when there are a large number of tasks that are continuously initiated.\n\n## Version 1.7.2\n\n_2018-03-14_\n\n#### Fix\n\n- Fix: do not download callback error when the instance length of the task is zero, callback complete directly instead. closes #789\n- Fix: fix the temp duplicate data in the database isn't removed when there is another running task with the same temp file path. closes #953\n- Fix: the data lost when retry. closes #949\n- Fix: fix the instance-length is always 1 when the Content-Range isn't provided but the Content-Length is provided on the trial connection.\n\n#### Enhancement\n\n- Improve Practicability: using the content length value on the Content-Range field when there isn't Content-Length field found in the response header. closes #967\n\n## Version 1.7.1\n\n_2018-02-05_\n\n#### Fix\n\n- Fix: fix download failed with 405 response code when backend can't support `HEAD` method. close #942\n\n## Version 1.7.0\n\n_2018-02-01_\n\n#### Fix\n\n- Fix: fix update status can't keep flow through making updating status synchronized with pause action. close #889\n- Fix: fix the sofar-bytes carry back through pending state callback has already discarded. close #884\n- Fix: fix can't find filename if filename value on content-disposition without around with \". close #908\n- Fix: correct `setCallbackProgressTimes` method make `setCallbackProgressTimes` work correctly. close #901\n- Fix: fix download useless data on tcp-window because of the first trial connection use `0-infinite` range. close #933\n- Fix: close intput stream when connection ending avoid input-stream leak especially for the trial connection.\n\n#### Enhancement\n\n- Improve Practicability: do not remove the temp-file if rename it to the target path success to prevent raise some file-system problem. close #912\n- Improve Practicability: discard range totally if range is right but backend response 416. close #921\n- Improve Performance: using HEAD request method instead of GET method for trial connect. ref #933\n\n#### Other\n\nIf you are using filedownloader-okhttp3-connection, please upgrade it to the `1.1.0` to adapter FileDownloader 1.7.0.\n\n## Version 1.6.9\n\n_2017-12-16_\n\n#### Fix\n\n- Fix(serial-queue): fix deadlock on `FileDownloadSerialQueue`. closes #858\n- Fix: do not use j-unit on library non-unit-test env to fix the `no-static-method-found` issue on some mi-phones. closes #867\n- Fix: fix decrease two times of retry-chance each time of retry. closes #838\n- Fix: fix get status is pending when a task has been paused on pending status. closes #855\n\n#### Enhancement\n\n- Improve Practicability: public `SqliteDatabaseImpl`、`RemitDatabase`、`NoDatabaseImpl`, so you can overwrite them\n- Improve Practicability: support downgrade version from newer version\n- Improve Practicability: add the default `User-Agent` if upper layer does not add. closes #848\n- Improve Performance: change the keepalive second(5s to 15s) for each executor, since when downloading multiple tasks thread release and recreate too frequently\n- Improve Performance: using `RemitDatabase` instead of `DefaultFiledownloadDatabase` to avoid some small task start and finished on the very short time but consume too much time on sync status to database what is useless\n\n![][RemitDatabase-png]\n\n## Version 1.6.8\n\n_2017-10-13_\n\n#### Fix\n\n- Fix: fix resume from breakpoint failed because of `isAlive` not guarantee on Network-thread. this closes #793\n- Fix: fix resume from breakpoint failed, because of multi-thread update status very frequently and Messenger can't guarantee order. this refs #793, #764, #721, #769, #763, #761, #716\n- Fix: do not crash user when a task has finished but the messenger still has messages, because it's fine for the user. this closes #562\n- Fix: fix the callback error of 'it can't take a snapshot for the task xxx' when a user invokes pause very frequently.\n- Fix: fix the case of process on the model is wrong which raise 416 each time when restarting it.\n\n## Version 1.6.7\n\n_2017-10-12_\n\n#### Fix\n\n- Fix: Avoid error/pause status is covered by other processing-status which will cause resume-failed, task-never-end. this closes #769, closes #764, closes #761, closes #763, closes #721, closes #716\n- Fix: Fix request range value turn to negative when resuming a task which has a process more than 1.99G on its one block. Thanks to @hongbiangoal closes #791\n\n## Version 1.6.6\n\n_2017-09-29_\n\n#### Fix\n\n- Fix(file-integrality): update the process to database only if all buffers on output-stream or system has been flush and sync to device successfully to avoid resume on the wrong point raise complete file not integrality. Closes #745\n- Fix(clear): fix `FileDownloader#clearAllTaskData` not clear connection table. Closes #754\n\n#### Enhancement\n\n- Import Performance: optimize the default output-stream with buffered-output-stream, now the VM buffers length is 8192 bytes.\n\n## Version 1.6.5\n\n_2017-09-11_\n\n#### Fix\n\n- Fix: fix `IllegalFormatConversionException` because of format `AtomicLong` with `%d` on `FileDownloadModel.toString`. Closes #743\n\n## Version 1.6.4\n\n_2017-08-21_\n\n#### New Interfaces\n\n- Add `NoDatabaseImpl` for the case of some users need a no-database FileDownloader. Refs #727\n\n#### Enhancement\n\n- Import Performance: Using the `AtomicLong` instead of lock to make better efficiency on increase progressing.\n\n#### Fix\n\n- Fix: Fix response 416 http status because of the last connection range is wrong when resume downloading with the last connection has been downloaded. Closes #737\n- Fix(npe): Fix the small probability NPE crash when publish event with it has been removed on other thread. Closes #723\n\n## Version 1.6.3\n\n_2017-07-29_\n\n#### Fix\n\n- Fix: Fix the small probability occur npe when the task is calling back over status with user invoke pause simultaneously. Closes #680\n- Fix: Fix `MissingFormatArgumentException` when you pause or resume the FileDownloadserialQueue with it has already done it. Closes #699\n\n## Version 1.6.2\n\n_2017-07-16_\n\n#### Fix\n\n- Fix: Fix raise 'offset < 0' exception when FileDownloader downloading file with the one split connection range begin with larger than 1.99G. Closes #669\n\n## Version 1.6.1\n\n_2017-07-13_\n\n#### Enhancement\n\n- Import Practicability: Throw `GiveUpException` directly when the response `content-length` isn't equal to the expect `content-length` calculated from range. Closes #636\n\n#### Fix\n\n- Fix: Fix sync twice when downloading paused/error.\n- Fix: fix file is destroyed when you download chunked file from breakpoint.\n\n## Version 1.6.0\n\n_2017-07-07_\n\n#### Fix\n\n- Fix(no-response): Fix may occur no-respose when multiple connections complete fetch data simultaneously, more detail please move to [here](https://github.com/lingochamp/FileDownloader/issues/631#issuecomment-313451398). Closes #631\n\n## Version 1.5.9\n\n_2017-07-04_\n\n#### Fix\n\n- Fix(duplicate-permission): fix `INSTALL_FAILED_DUPLICATE_PERMISSION` when there are more than one application using FileDownloader lib 1.5.7 or more newer since Android 5.0. This problem is raised since v1.5.7, because of we declared permission for receiving completed status broadcast more secure, now we remove it to fix this problem. Closes #641\n\n## Version 1.5.8\n\n_2017-06-28_\n\n#### Fix\n\n- Fix(no-response): fix no-response when switch between pause and start for the same task very fast frequency. Closes #625\n\n## Version 1.5.7\n\n_2017-06-25_\n\n#### New Interfaces\n\n- Support the configuration `broadcast.completed` in `filedownloader.properties`: determine whether need post a broadcast when task is completed. Closes #605\n- Support accepting 201 http status. Closes #545\n- Support pause and resume for the `FileDownloadSerialQueue`. Closes #547\n- Handle the case of redirect(300、301、302、303、307、308) on FileDownloader self. Closes #611\n- Deprecated the `FileDownloader#init` and add the replacer `FileDownloader#setup` to let user invoke anytime before using `Filedownloader`. Closes #500\n\n> - If you want to using `broadcast.completed` and receive completed broadcast, you also need to register receiver with `filedownloader.intent.action.completed` action name on `AndroidManifest.xml` and please using `FileDownloadBroadcastHandler` class to parse the received `Intent`.\n> - Now, rather than using `FileDownloader#init`, if you want to register your own customize components for FileDownloader please invoking `FileDownloader.setupOnApplicationOnCreate(application):InitCustomMaker` on the `Application#onCreate`, otherwise you just need invoke `FileDownloader.setup(Context)` anytime before using `FileDownloader`.\n\n#### Fix\n\n- Fix: fix `FileDownloadQueueSet` can't handle the case of disable wifi-required. Thanks @qtstc\n- Fix(output-stream): fix broken support for output-stream when it don't support seek. Closes #622\n\n#### Enhancement\n\n- Improve Practicability: Cover the case of reusing the downloaded processing with the different url( using with `idGenerator` ). Closes #617\n\n## Version 1.5.6\n\n_2017-06-18_\n\n#### Fix\n\n- Fix(crash): fix raise NPE crash when require paused a task and invoking `findRunningTaskIdBySameTempPath` at the same time. Closes #613\n- Fix(crash): fix raise `IllegalArgumentException` when response code is 206 and its ETAG is changed. Closes #612\n- Fix(crash): fix raise `FileDownloadNetworkPolicyException` unhandled exception, when user enable wifi-required but no wifi-state. Thanks @qtstc\n- Fix(crash): fix raise `IllegalStateException` when user upgrades from `v1.4.3` or older version to `v1.5.2` or newer version directly and some more conditions, more detail please move to #610\n- Fix(crash): fix some small probability case raise `IllegalStateException` when callback-flow has been final but occurring completed/error at the same time.\n- Fix(no-response): fix no-response after start download and receive connected callback because the resource state has been changed during the connection of verification and connections of fetch data.\n\n#### Enhancement\n\n- Improve Practicability: callback `error` directly when create the parent directory failed. Closes #542\n- Improve Practicability: handle the case of response code is `416`. Closes #612\n\n## Version 1.5.5\n\n_2017-06-12_\n\n#### Fix\n\n- Fix(max-network-thread-count): fix the `download.max-network-thread-count` not work and there are no restrictions on the number of tasks downloaded at the same time since v1.5.0 when tasks runs on the multi-connection Closes #607\n\n## Version 1.5.4\n\n_2017-06-11_\n\n#### New Interfaces\n\n- Support customizing the download task identify generator through `IdGenerator`. Closes #224\n\n#### Enhancement\n\n- Improve Practicability: Decoupling the filedownload-database with filedownload-model, let filedownload-database only care about database operation.\n- Improve Practicability: Decoupling the database initial-maintain from the filedownload-database default implementation to let the customized database can be maintained.\n\n## Version 1.5.3\n\n_2017-06-08_\n\n#### Fix\n\n- Fix(crash): Fix divide by zero on calculating average speed when download completed and connected at the same time. Refs #601\n- Fix(crash): Fix raise NPE crash when you require pause the task between executed the fetch-data-task and fetch-data-task has not yet started. Closes #601\n\n## Version 1.5.2\n\n_2017-06-07_\n\n#### Fix\n\n- Fix(crash): Fix raising NPE crash or ConcurrentModificationException when the Task is paused or error with the connection is completing at the same time. Closes #598\n- Fix(crash): Fix raising NPE crash when pause the `FetchDataTask` and it still without any time to sync data to database or file-system. Refs #598\n- Fix(crash): Fix raising NPE crash when using the multiple connections to download and connect failed or create `FetchDataTast` failed. Refs #598\n- Fix(speed-calculate): Fix the speed result is `0` when ignore all processing callbacks and just using `FinishListener`.\n- Fix(finish-listener): Fix there isn't `over` callback for the `FinishListener` when the file has already been downloaded in the past.\n\n#### Enhancement\n\n- Improve Performance: Enable the WAL for the default sqlite to speed up sql operation because the most of our case is concurrently accessed and modified by multiple threads at the same time.\n\n## Version 1.5.1\n\n_2017-06-05_\n\n#### Fix\n\n- Fix(crash): Fix the NPE crash when don't provided the `InitCustomMaker` on `FileDownloader#init`. Closes #592\n- Fix(callback): Fix on the `pending` callback you can't get the right `sofarBytes` when there are several connections served for the task and the task is resuming from the breakpoint.\n- Fix(speed-monitor): Correct the result of the total average speed when the task resume from a breakpoint on `IDownloadSpeed.Monitor`.\n\n#### Enhancement\n\n- Improve Robust: Sync all process on fetch task manually when it is paused to make the process can be persist.\n- Improve Robust: Raise `IllegalArgumentException` when provide `context` is null on `FileDownloader.init` to expose the problem earlier.\n\n## Version 1.5.0\n\n_2017-06-05_\n\n#### New Interfaces\n\n- Support multiple-connection(multiple threads) for one downloading task.  Closes #102\n- Support `ConnectionCountAdapter` to customize connection count for each task(you can set it through `FileDownloader#init`).\n\n#### Enhancement\n\n- Improve Performance: Refactor whole download logic and origin callback logic and remove 1000 line class `FileDownloadRunnable`.\n\nThe default connection count strategy for each task, you can customize it through `ConnectionCountAdapter`:\n\n- one connection: file length [0, 1MB)\n- two connections: file length [1MB, 5MB)\n- three connections: file length [5MB, 50MB)\n- four connections: file length [50MB, 100MB)\n- five connections: file length [100MB, -]\n\n## Version 1.4.3\n\n_2017-05-07_\n\n#### Fix\n\n- Fix: Remove redundant deprecated method: `FileDownloader#init(Application)`, because `Application` is implement of `Context`.\n\n## Version 1.4.2\n\n_2017-03-15_\n\n#### Fix\n\n- Fix(Same File Path): Avoid two tasks writing to the same file simultaneously, Once there is an another running task with the same target path to the current task's, the current task will receive the `PathConflictException` to refused start downloading. Closes #471\n\n#### New Interfaces\n\n- Add `FileDownloadSerialQueue#getWaitingTaskCount`: Get the count of tasks which is waiting on the serial-queue instance. Refs #345\n\n## Version 1.4.1\n\n_2017-02-03_\n\n#### Fix\n\n- Fix(High concurrency): Fix occurring the NPE crash because of it still receiving message-snapshot in the messenger but the host task has been assigned to null since it has been received over-status message-snapshot. Closes #462\n- Fix(`FileDownloadHttpException`): Fix occurring the `IllegalStateException` because of cannot access request header fields after connection is set when occurring http-exception. Closes #458\n\n## Version 1.4.0\n\n_2017-01-11_\n\n#### Enhancement\n\n- Improve Performance: Optimize the logic in `FileDownloader#init`, let it lighter(just do some action like assign `context` and `maker`)\n\n#### Fix\n\n- Fix(pause): fix can't stop the task when occurring the high concurrency event about pausing task after starting it in very close time. Closes #402\n- Fix(init FileDownloader): fix the very low frequent crash when init FileDownloader on the process the `FileDownloadService` settled on. Closes #420  \n- Fix(FileDownloadHttpException): fix params can't match the `formatter` when occur `FileDownloadHttpException` Closes #438\n\n## Version 1.3.9\n\n_2016-12-18_\n\n### Important:\n\n- Since this version you can customize you own [FileDownloadConnection][FileDownloadConnection-java-link] component, we use [this one][FileDownloadUrlConnection-java-link] as default.\n- Since this version, FileDownloader don't dependency the okhttp as default. (If you still want to use the okhttp as your connection component, you can integrate [this repo](https://github.com/Jacksgong/filedownloader-okhttp3-connection) feel free)\n\n> If you still need configure `timeout`、`proxy` for the connection component, but you don't want to implement your own one, don't worry, I implement it for the default connection component too, just move to : [DemoApplication](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/DemoApplication.java#L35), check the code if you want.\n\n#### New Interfaces\n\n- Add `FileDownloadQueueSet#reuseAndStart`: Add reuseAndStart function to the queue-set to reuse task instances before start them. Ref #383\n- Add `FileDownloadConnection`: Support customize the connection component for FileDownloader and remove the dependency of the okhttp as default. Closes #158\n\n## Version 1.3.0\n\n_2016-10-31_\n\n#### New Interfaces\n\n- Add `FileDownloadSerialQueue`: Easy to dynamically manage tasks and tasks in the queue will automatically start download one by one. Closes #345.\n- Remove the `callback` method in the `FileDownloadListener` class, besides adding the `FileDownloadListener#isInvalid` method to tell the FileDownloader whether the listener has already invalidated, which means it can't receive any messages.\n- Add `FileDownloader#clearAllTaskData`: Clear all data in the `filedownloader` database. Closes #361\n\n#### Enhancement\n\n- Improve Practicability(`FileDownloadListener#blackCompleted`): Ensure the `blockCompleted` callback method can accept any `Exception`. Closes #369.\n- Improve Practicability(service-not-connected): Print the tips with the cause in service-not-connected-helper, in this way, when you invoke some methods need the FileDownload service has already connected but not yet, FileDownloader will not only print causes in the `Logcat` but also print the tips.\n\n#### Fix\n\n- Fix(reuse): fix `BaseDownloadTask#reuse` is called shortly after the call to `BaseDownloadTask#pause` may raise an exception. Closes #329.\n\n## Version 1.2.2\n\n_2016-10-15_\n\n#### Fix\n\n- Fix(fatal-crash): fix when the task doesn't have `FileDownloadListener`, we can't receive the callback of `FileDownloadMonitor.IMonitor#onTaskOver` for it. Closes #348.\n\n## Version 1.2.1\n\n_2016-10-09_\n\n#### Fix\n\n- <s>Fix(fatal-crash): fix when the task doesn't have `FileDownloadListener`, we can't receive the callback of `FileDownloadMonitor.IMonitor#onTaskOver` for it. Closes #348. </s> Sorry for my mistake, this bug is still exist in 1.2.1 and finally fixed in 1.2.2.\n\n## Version 1.2.0\n\n_2016-10-04_\n\n#### New Interfaces\n\n- Add `FileDownloader#insureServiceBind()`: Easy to block the current thread, and start FileDownloader service, after the service started then executes the request which needs the service alive. Refs #324.\n- Add `FileDownloader#insureServiceBindAsync()`: Easy to start FileDownloader service, and after the service started then executes the request which needs the service alive. Refs #324.\n- Add `FileDownloader#bindService(runnable:Runnable)`: Easy to start FileDownloader service, and after the service started then executes the `runnable`. Refs #324.\n- Add `FileDownloader#init(Context,InitCustomMaker)`: Easy to initialize the FileDownloader engine with various kinds of customized components.\n\n#### Enhancement\n\n- Improve Practicability(`InitCustomMaker#database`): Support customize the database component with the implementation of `FileDownloadDatabase`, and implements the default database component: `DefaultDatabaseImpl`.\n- Improve Practicability(`InitCustomMaker#outputStreamCreator`): Support customize the output stream with the implementation of `FileDownloadOutputStream`, and implements the default output stream component `FileDownloadRandomAccessFile`, and some alternative components: `FileDownloadBufferedOutputStream`、`FileDownloadOkio`.\n\n## Version 1.1.5\n\n_2016-09-29_\n\n#### New Interfaces\n\n- Support the configuration `file.non-pre-allocation` in `filedownloader.properties`: Whether doesn't need to pre-allocates the 'content-length' space when to start downloading, default is `false`. Closes #313 .\n\n#### Fix\n\n- Fix(fatal-crash): fix occur the `StackOverflowError` when thread pool getActiveCount is not right because of it just an approximate number. Closes #321 .\n- Fix(minor-crash): fix in some minor cases occur `IllegalStateException` which message is 'No reused downloaded file in this message'. Closes #316 .\n- Fix(minor-crash): fix when there are several serial-queues started in case of the FileDownloader service doesn't connect yet and in minor cases that the same task in the queue will be started twice which lead to crash. Refs #282 .\n\n#### Others\n\n- Dependency: Cancel the dependence of thread-pool library. Refs #321 .\n- MinSDKVersion: Upgrade `minSdkVersion` : 8->9. Refs #321 .\n\n## Version 1.1.0\n\n_2016-09-13_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#setWifiRequired`: Set whether the task only allows downloading on the wifi network type. Default `false`. Closes #281 .\n\n#### Enhancement\n\n- Improve Performance: Alternate all thread pools to exceed-wait-pool(more detail: docs in `FileDownloadExecutors`) and all threads in pools will be terminate after idle 5 second. Refs #303 .\n- Improve Practicability: Handle any `Throwable`s thrown on `FileDownloadListener#blockComplete` method and callback to `FileDownloadListener#error` method instead of `FileDownloadListener#completed`. Closes #305 .\n\n#### Fix\n\n- Fix(lost-connect): Prevent the waiting-connect-list contains duplicate tasks in minor cases.\n\n## Version 1.0.2\n\n_2016-09-06_\n\n#### Fix\n\n- Fix: When the service didn't connected and now it is connected and FileDownloader try to restart the 'queue-task's which in the waiting-service-connect list but occur an `IllegalStateException`. Closes #307 .\n\n## Version 1.0.1\n\n_2016-09-05_\n\n#### New Interfaces\n\n> If you used `BaseDownloadTask#ready()` which is a deprecated method now, just migrate it to `BaseDownloadTask#asInQueueTask():InQueueTask` and `InQueueTask#enqueue()`.\n\n- Add `BaseDownloadTask#asInQueueTask():InQueueTask` and Deprecated `BaseDownloadTask#ready()`: Declare the task is a queue task, what will be assembled by a queue which makes up of the same `listener` task and there is a method `InQueueTask#enqueue()` to enqueue this task to the global queue to ready for being assembled by the queue. The operation of method `InQueueTask#enqueue()` is the same to the Deprecated method `BaseDownloadTask#ready()`, we wrap the `ready()` method in this way just want you to know clearly: Only if the task belongs to a queue, you need to invoke this method otherwise if this task is an isolated task but you invoke this method, it's wrong and you will receive an exception(More detail reason please move to the exception thrown in `DownloadTask#start`).\n\n#### Fix\n\n- Fix: Maybe occur an IllegalStateException when there are several isolated tasks and queues with the same `listener` object, and they are started in the different thread simultaneously. Closes #282 .\n\n## Version 1.0.0\n\n_2016-08-21_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#cancel`: This method is used for explaining why the pause operation is the same as the cancel operation.\n\n#### Enhancement\n\n- Improve Performance: Hold the result of `isDownloaderProcess`.\n- Improve Practicability: Refactor the visible layer of the code. Closes #283\n- Improve Practicability: Perfect the java doc. Closes #284\n- Improve Practicability: Add the java doc website: http://fd.dreamtobe.cn. Closes #285\n\n## Version 0.3.5\n\n_2016-08-16_\n\n#### Enhancement\n\n- Improve Practicability: Add thread name to all threads used in FileDownloader.\n- Improve Performance: Change the count of core thread for block-completed-thread-pool: 5->2, reduce redundant resource waste.\n\n#### Fix\n\n- Fix(SQLiteFullException): Cover the case of SQLiteFullException during the entire downloading process, and ensure the exception can be carried back to `FileDownloadListener#error` . Closes #243\n- Fix(directory-case): Fix in the case of the provided path is a directory, and the task already completed, if you start the task again you will receive `FileDownloadListener#completed` directly, but the `targetFilePath` may be null in the `FileDownloadListener#completed` callback method. Closes #237\n\n## Version 0.3.4\n\n_2016-07-31_\n\n#### New Interfaces\n\n- Add `FileDownloader#clear`: clear the data with the task id in the filedownloader database. Closes #218.\n\n#### Enhancement\n\n- Improve Practicability: Add return value to the method `FileDownloader#start(FileDownloadListener, boolean)` : Whether start tasks successfully. Closes #215.\n- Improve Practicability: Pause tasks with the same download-id rather than just pause one task through there are more than one task in downloading.\n\n#### Fix\n\n- Fix(init-crash): Fix the crash about the list of running-app-process-info from `ActivityManager` is null when to init FileDownloader. Closes #210.\n- Fix(minor-crash): Fix the NPE-crash when to execute receiving snapshot-message after FileDownloadService already onDestroy. Closes #213.\n- Fix(message-keep-flow): Delete the target file before start downloading, ensure can't get the `completed` status when another same task is downloading. Closes #220\n- Fix(start-serial): Assemble non-attached-tasks to start rather than assemble tasks just refer to FileDownloadListener, fix no possibility to start two queues with the same `FileDownloadListener`. Closes #223.\n- Fix(free-messenger): Free the messenger of Task before call back 'over-message' to FileDownloadListener instead of after callback, ensure Task can be reused in FileDownloadListener callback method. Closes #229.\n\n#### Others\n\n- Upgrade dependency okhttp from `3.3.1` to `3.4.1`.\n\n\n## Version 0.3.3\n\n_2016-07-10_\n\n#### New Interfaces\n\n- Add `FileDownloadUtils#getTempPath`: Get the temp path is used for storing the temporary file not completed downloading yet(`filename.temp`). Refs #172.\n- Add `FileDownloader#getStatusIgnoreCompleted(id:int)`:  Get the downloading status without cover the completed status(If completed you will receive `INVALID`).\n- Add `FileDownloader#getStatus(id:int, path:String)`:  Get the downloading status.\n- Add `FileDownloader#getStatus(url:String, path:String)`:  Get the downloading status.\n- Add `FileDownloadUtils#isFilenameConverted(context:Context)`: Whether tasks from FileDownloader Database has converted all files' name from `filename`(in old architecture) to `filename.temp`, if it is not completed downloading yet.\n- Add `FileDownloadUtils#generateId(url:String, path:String, pathAsDirectory:boolean)`: Generate a `Download Id` which can be recognized in FileDownloader.\n- Add `BaseDownloadTask#setPath(path:String, pathAsDirectory:boolean)`: If `pathAsDirectory` is `true`, the `path` would be the absolute directory to store the downloading file, and the `filename` will be found in `contentDisposition` from the `response#header` as default.\n- Add `BaseDownloadTask#isPathAsDirectory`: Whether the result of `BaseDownloadTask#getPath()` is a `directory` path or `directory/filename` path.\n- Add `BaseDownloadTask#getTargetFilePath`: Get the target file path to store the downloading file.\n- Add `FileDownloadQueueSet#setDirectory`: Set the `directory` to store files in this queue.\n\n#### Enhancement\n\n- Improve Practicability: Support the `path` of the task as the directory to store the file, and in this case, the `filename` will be found in `contentDisposition` from the `response#header` as default. Refs #200.\n- Improve Practicability: Using the temp path to store the file not completed downloading yet(`filename.temp`). Refs #172.\n- Improve Performance: FileDownloader doesn't store completed tasks in Database anymore, and check whether the task has completed downloading with `File#exists()` directly. Refs #176, #172.\n- Improve Robust: Choosing the task which status is `INVALID` or `progress` to receive `completed` message preferentially, to ensure the callback of `progress` can be handled. Refs #123\n- Improve Robust: Expanding task-sync-lock to the outside of getting-same-id-downloading-task, to fix some messages can't be consumed because status changed during getting-same-id-downloading-task and waiting for task-sync-lock.\n\n#### Fix\n\n- Fix(DB-maintain): Keeping models, whose status is `pending` and downloaded so far bytes is more than 0 because it can be used for resuming from the breakpoint. Closes #176.\n- Fix(crash-NPE): FileDownloader might occur NPE when the download-listener was removed, but the task is still running in FileDownloader. Closes #171.\n\n## Version 0.3.2\n\n_2016-06-12_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#setCallbackProgressMinInterval`: Set the minimum time interval between each callback of 'progress'. Closes #167.\n- Add `FileDownloader#setMaxNetworkThreadCount`: Change the number of simultaneous downloads(the number of the simultaneously running network threads) at the code side. Closes #168.\n- Add `FileDownloader#init(Context,OkHttpClientCustomMaker,int)`: Accept initializing the number of simultaneous downloads(the number of the simultaneously running network threads) with the FileDownloadService initializes. Closes #168.\n\n#### Enhancement\n\n- Improve Robust: Ensure the minimum time interval between each callback of 'progress' is 5ms, To prevent internal callback of 'progress' too frequent happening. Closes #167.\n- Improve Practicability: Print the 'warn' priority log when a request does something in the FileDownloadService but it isn't connected yet.\n- Improve Performance: Using the `SparseArray` instead of `HashMap` for mapping all `FileDownloadModel`.\n\n#### Fix\n\n- Fix(crash): Fix provided wrong params in formatting character string when to starting download runnable occur the unexpected downloading status.\n- Fix(force-re-download): Fix the wrong logic: In the case of `BaseDownloadTask#setForceReDownload(true)` and the task has already downloaded will trigger 'warn' callback. Closes #169 .\n- Fix(class-type): Keep the class type of `SocketTimeOutException`, and no longer care about whether the message of Throwable is empty, this is very redundant.\n\n#### Others\n\n- Upgrade dependency okhttp from `3.2.0` to `3.3.1`.\n\n## Version 0.3.1\n\n_2016-05-19_\n\n#### Enhancement\n\n- Improve Robust: Ensuring buffer is written out to the device when at the end of fetching data.\n\n## Version 0.3.0\n\n_2016-05-13_\n\n#### Fix\n\n> Why FileDownload can run in UI process? Ref [filedownloader.properties](https://github.com/lingochamp/FileDownloader/wiki/filedownloader.properties).\n\n- Fix(shared-UI-process): fix the addition header does not attach to Http-request when the FileDownload service isn't running in the separate process to UI process. Closes #149.\n\n\n## Version 0.2.9\n\n_2016-05-10_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#isUsing():boolean`: Whether this task object has already started and used in FileDownload Engine. Closes #137 .\n\n#### Fix\n\n- Fix(high-concurrency-npe): Providing the default snapshot when a task's status is unexpected, preventing the npe is occurred in this case.\n- Fix(response-416): Covering the response status code is 416 or still resume from breakpoint when its so far bytes more than or equal to total bytes.\n\n## Version 0.2.8\n\n_2016-05-02_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#getId():int`: deprecate `getDownloadId()`, and using the `getId()` instead, for `BaseDownloadTask`.\n\n#### Enhancement\n\n- Improve Robust: Refactor the launcher for launching tasks more make sense, and expire tasks with listener or expire all waiting-tasks more stable.\n- Improve Robust: Refactor the architecture which is used to handle the event send to `FileDownloadListener`, the new architecture just like a messenger and message-station, each tasks would write snapshot messages to message-station.\n- Improve Robust: Cover all high concurrent situations about pausing a task, remove some expected warn logs about it.\n- Improve Performance: Reduce the FileDownloader database I/O.\n- Improve Performance: Reduce creating object(less allocating memory request, friendly to GC) for each call-back, Taking a message snapshot for a status updating, and through whole communication architecture just use it.\n\n#### Fix\n\n- Fix: Provide the definite locale for formatting strings, prevent unexpected-locale as Default happening. Closes #127\n\n## Version 0.2.7\n\n_2016-04-22_\n\n#### New Interfaces\n\n- Add `FileDownloader#setTaskCompleted(taskAtomList:List<FileDownloadTaskAtom>)`: Used to telling the FileDownloader Engine that a bulk of tasks have already downloaded by other ways.\n\n#### Enhancement\n\n- Improve Robust: Throw the Fatal-Exception directly when request to bind the FileDownloadService in the `:filedownloader` process. Closes #119 .\n\n## Version 0.2.6\n\n_2016-04-20_\n\n#### New Interfaces\n\n- Adjust: Change the location of the `filedownloader.properties` ，no more in the root directory of project, instead below the `assets` of a module, for example `/demo/src/main/assets/filedownloader.properties`.\n\n#### Fix\n\n- Fix: `filedownloader.properties` not work. Closes #117.\n\n## Version 0.2.5\n\n_2016-04-19_\n\n#### New Interfaces\n\n- Add `FileDownloader#setTaskCompleted`: Used to telling the FileDownloader Engine that the task with the url and the path has already completed downloading by other ways(not by FileDownloader Engine).\n- Support the configuration `download.max-network-thread-count` in `filedownloader.properties`: The maximum network thread count for downloading simultaneously, default is 3. Closes #116.\n\n## Version 0.2.4\n\n_2016-04-18_\n\n#### New Interfaces\n\n- Add `BaseDownloadTask#getSpeed` and `BaseDownloadTask#setMinIntervalUpdateSpeed`: Get the download speed for a task. If it is in processing, the speed would be real-time speed; If finished, the speed would be average speed. Closes #95\n- Add the `FileDownloader#startForeground` and `FileDownloader#stopForeground` for supporting the Foreground mode([Service#startForeground](https://github.com/lingochamp/FileDownloader/wiki/filedownloader.properties)); For ensure the FileDownloadService would keep alive when user removed the App from the recent apps. Closes #110 .\n- Support configurations `download.min-progress-step` and `download.min-progress-time`: The min buffered so far bytes and millisecond, used for adjudging whether is time to sync the download so far bytes to database and make sure sync the downloaded buffers to the local file. More small more frequent, then download more slowly, but will safer in the scene of the process is killed unexpectedly. Default 65536(MinProgressStep) and 2000(MinProgressTime), which follow the value in `com.android.providers.downloads.Constants`.\n- Support the configuration `process.non-separate` in `filedownloader.properties`: The FileDownloadService runs in the separate process ':filedownloader' as default, if you want to run the FileDownloadService in the main process, set this configuration as `true`. Closes #106 .\n\n#### Enhancement\n\n- Improve Performance: Download more quickly, Optimize the strategy about sync the buffered datum to database and local file when processing. Closes #112 .\n\n#### Fix\n\n- Fix: Can't restart the task which in paused but is still settling in the download-pool. Closes #111\n\n## Version 0.2.3\n\n_2016-04-11_\n\n#### New Interfaces\n\n- Add `FileDownloadOutOfSpaceException`, Throw this exception, when the file will be downloaded is too large to store.\n- Add new call-back method in `FileDownloadListener`: `started` which will be invoked when finish pending, and start the download runnable.\n- Add new call-back method in `FileDownloadMonitor.IMonitor`: `onTaskStarted` which will be invoked when finish pending, and start the download runnable.\n\n#### Enhancement\n\n- Improve Practicability: Provide the current task to the method `over` in `FinishListener`, for recognizing target task in case of one-FinishListener for more than one task. Closes #69 .\n- Improve Robust: Throw the exception directly when invoke `BaseDownloadTask#start` for a running-task object, add provide 'reuse' method to reuse a used and already finished task object. Closes #91 .\n- Improve Performance: Intercept the enqueue operate for the otiose event which is no listener for handling it.\n\n#### Fix\n\n- Fix: In handful cases the task-call-back flow not follow the expect.\n- Fix: `progress` call-back included the ending frame ( `sofarBytes == totalBytes` ).\n- Fix: Carry back the total bytes in the status of warn, for covering the case of UI-process had killed but has restarted App with restarting the task and download-process is alive still, the total bytes is 0 in UI-process. Closes #90 .\n- Fix: Can't call-back 'retry' in expect, the case of the call-back method 'retry' one-by-one. Refs: #91 .\n- Fix: The wrong sofar bytes will cover the right one, when occur error in no-network and has chance to retry. Closes #92 .\n- Fix: Handle the case of the downloading is finished during the 'check-reuse' to 'check-downloading' in filedownloader-process.\n- Fix: The serial-queue converts to The parallel-queue in restoring from filedownloader-process has killed and restarting.\n\n## Version 0.2.2\n\n_2016-04-06_\n\n#### New Interfaces\n\n- Add `FileDownloadHttpException` and `FileDownloadGiveUpRetryException`, and optimize the mechanism of exception. Closes #67 .\n- Init the `FileDownloader` use `Context` instead of `Application` ( `FileDownloader#init(Context)` ) , for more make sense and unit-test. Closes #54 .\n\n#### Enhancement\n\n- Improve Robust: Check whether free space is enough, and throw IOException directly when not enough; And pre-allocate need-available-space before fetching datum when the free space more than need-available-space. Closes #46 .\n- Improve Practicability: Support resume from breakpoint without ETag. Just need the server support the request-header param 'Range'. Close #35 , #66 .\n\n\n#### Fix\n\n- Fix: The `IllegalFormatConversionException` on `EventPool` when publishing the event which does not in effect and `FileDownloadLog.NEED_LOG` is `true`. Closes #30 .\n- Fix: The non-fatal-crash in `IFileDownloadIPCService.java` , when lost connection from filedownloader process. because the IBinder's hosting process(filedownloader process) has been killed/cancelled. Closes #38 .\n- Fix: The leak of response-body: 'WARNING: A connection to https://... was leaked. Did you forget to close a response body?' Closes #68 .\n- Fix: Using the internal-string as synchronized lock-object instead of string-original.\n- Fix: The number of the Ing-call-back is not correct in some cases.\n\n#### Others\n\n- Upgrade dependency okhttp from `3.1.2` to `3.2.0`.\n\n## Version 0.2.0\n\n_2016-02-15_\n\n#### New Interfaces\n\n- `filedownloader.properties-http.lenient`: Add 'filedownloader.properties' for some special global configs, and add 'http.lenient' keyword to 'filedownloader.properties' to handle the case of want to ignore HTTP response header from download file server isn't legal.\n- `FileDownloadNotificationHelper`: Refashioning NotificationHelper, let handle notifications with FileDownloader more make sense. #25\n- `FileDownloader#init(Application,OkHttpClientCustomMaker)`: Support customize OkHttpClient which will be used for downloading files.\n\n#### Fix\n\n- Fix: Occur 'Concurrent Modification Exception' when Downloader service is unbound or lost connection to service and NeedRestart list not empty. #23\n- Fix: The case of re-connect from lost connection to service but all auto restart tasks' call-back do not effect.\n- Fix: In some cases of high concurrency, the Pause on some tasks is no effect.\n\n## Version 0.1.9\n\n_2016-01-23_\n\n> FileDownloader is enable Avoid Missing Screen Frames as default, if you want to disable it, please invoke `FileDownloader.getImpl().disableAvoidDropFrame()`.\n\n#### New Interfaces\n\n> We default open Avoid Missing Screen Frames, if you want to disable it(will post to ui thread for each FileDownloadListener event achieved as pre version), please invoke: `FileDownloader.getImpl().disableAvoidDropFrame()`.\n\n- `FileDownloadMonitor`: You can add the global monitor for Statistic/Debugging now.\n- `FileDownloader#enableAvoidDropFrame(void)`: Avoid missing screen frames, but this leads to all callbacks of FileDownloadListener do not be invoked at once when it has already achieved.\n- `FileDownloader#disableAvoidDropFrame(void)`: Disable avoid missing screen frames, let all callbacks of FileDownloadListener be invoked at once when it achieve.\n- `FileDownloader#isEnabledAvoidDropFrame(void)`: Has already enabled Avoid Missing Screen Frames. Default: true\n- `FileDownloader#setGlobalPost2UIInterval(intervalMillisecond:int)`: For Avoid Missing Screen Frames. Each intervalMillisecond post 1 message to ui thread at most. if the value is less than 0, each callback will always post a message to ui thread immediately, may will cause missing screen frames and produce great pressure on the ui thread Looper. Default: 10ms.\n- `FileDownloader#setGlobalHandleSubPackageSize(packageSize:int)`: For Avoid Missing Screen Frames. {packageSize}: The number of FileDownloadListener's callback contained in each message. value completely dependent on the intervalMillisecond of setGlobalPost2UIInterval, describe will handle up to {packageSize} callbacks on the each message posted to ui thread. Default: 5.\n- `BaseDownloadTask#setSyncCallback(syncCallback:boolean)`: if true will invoke callbacks of FileDownloadListener directly on the download thread(do not post the message to the ui thread), default false.\n- `BaseDownloadTask#isSyncCallback(void):boolean`: Whether sync invoke callbacks of FileDownloadListener directly on the download thread.\n- `FileDownloadUtils#setDefaultSaveRootPath`: The path is used as Root Path in the case of task without setting path in the entire Download Engine.\n- `FileDownloadQueueSet`: In order to be more convenient to bind multiple tasks to a queue, and to the overall set.\n\n#### Enhancement\n\n- Improve Debugging: Provide the `FileDownloadMonitor` to monitor entire Download Engine.\n- Improve Performance: Optimize EventPool lock & do not handle listener priority any more(no use internal).\n- Improve Performance: Call `FileDownloadListener` methods do not through EventPool, instead, invoke directly.\n\n#### Fix\n\n- Fix: EventPool listener unlimited increased bug.\n\n## Version 0.1.5\n\n_2016-01-17_\n\n#### New Interfaces\n\n- `BaseDownloadTask#setTag(key:int, tag:Object)`: Set a tag associated with this task. If the key already existed, the old tag will be replaced.\n- `BaseDownloadTask#getTag(key:int)`: Get the object stored in the task as a tag, or null if not set.\n- `BaseDownloadTask#addHeader(name:String, values:String)`: Add custom request header to the task. Attention: We have already handled ETag, and will add `If-Match` & `Range` value if it works.\n- `BaseDownloadTask#addHeader(line:String)`: Add custom request header to the task. Attention: We have already handled ETag, and will add `If-Match` & `Range` value if it works.\n- `BaseDownloadTask#removeAllHeaders(name:String)`: Remove all custom request header bind with the `{name}`.\n\n#### Enhancement\n\n- Improve Performance: Reduce the consumption of the generated log.\n- Improve Debugging: To filter all the log level, reduce the high level of log output, and by default, will output `Warn`、`Error`、`Assert` level of log in order to debugging in the case of the value of `FileDownloadLog.NEED_LOG` is false(default).\n\n#### Fix\n\n- Fix can't resume from the break point naturally in case of the download status of the task is Error.\n- Fix the size of the queue may not match the number of actual active tasks in case of high concurrency. This bug may would caused some callbacks to be consumed by the old tasks.\n\n#### Others\n\n- Upgrade dependency okhttp from `2.7.1` to `3.0.1`.\n\n## Version 0.1.4\n\n_2016-01-13_\n\n#### New Interfaces\n\n- `FileDownloader#unBindServiceIfIdle(void)`: If there is no active task in the `:filedownloader` progress currently , then unbind & stop `:filedownloader` process\n- `FileDownloader#getStatus(downloadId)`: Get download status by the downloadId(ps: Please refer to [Tasks Manager demo](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/TasksManagerDemoActivity.java)\n- `FileDownloader#isServiceConnected(void)`: Whether started and connected to the `:filedownloader` progress(ps: Please refer to [Tasks Manager demo](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/TasksManagerDemoActivity.java))\n\n#### Enhancement\n\n- Supported [Chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) data download(Recommend to glance at demo on [Single Task Test](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/SingleTaskTestActivity.java)).\n- Improve Performance: Reduce IPC.\n- Improve Performance: Reduce lock.\n- Improve Performance: Delete invalid datum in db with the `:filedownloader` progress start.\n- Improve Performance: Ignore the `callbackProgressTimes` column in db.\n\n#### Fix\n\n- Fix `FileDownloader#pauseAll` not effect in case of low memory and ui progress is Background Progress situation and the `:filedownloader` progress(Service Progress) alive and still have running tasks in the `filedownloader` progress but ui progress has died and relived.\n- Fix not release connect resources when invoke `FileDownloader#unBinderService` manually.\n- Handle case of ui progress be killed by sys and download progress not be killed, and ui progress relives and re-executes same tasks queue.\n\n\n## Version 0.1.3\n\n_2016-01-04_\n\n- Enhancement: no longer subject to the upper bound of 1.99G, add `FileDownloadLargeFileListener`, `getLargeFileSoFarBytes()`,`getLargeFileTotalBytes()`.\n- Performance optimization: some ipc transaction just need one-way call(async), not block(sync).\n- Upgrade dependency okhttp from `2.7.0` to `2.7.1`.\n\n## Version 0.1.2\n\n_2015-12-27_\n\n- Optimize thread digestion([map](https://github.com/lingochamp/FileDownloader/raw/master/art/filedownload_sample_description.png).\n- Fix: may `pause()` invalid in large queue task.\n- Fix: large queue task parallel download, may download has been completed but the callback\n\n## Version 0.1.1\n\n_2015-12-25_\n\n- Optimization of internal performance, according to the time split thread pool.\n- Add auto retry feature.\n\n## Version 0.1.0\n\n_2015-12-24_\n\n- The `FileDownloadStatus` parameter type is changed from `int` to `byte`, which is frequently copied in IPC.\n- Optimization of multi task queue filtering time.\n- Optimizing serial task execution mechanism.\n\n## Version 0.0.9\n\n_2015-12-23_\n\n- The start operation into independent thread processing, sharing thread pool in EventPool.\n\n## Version 0.0.8\n\n_2015-12-22_\n\n- initial release\n\n[RemitDatabase-png]: https://github.com/lingochamp/FileDownloader/raw/master/art/remit-database.png\n[FileDownloadConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadConnection.java\n[FileDownloadUrlConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadUrlConnection.java\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0634765625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n Copyright (c) 2015 LingoChamp Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 30.361328125,
          "content": "# FileDownloader\nAndroid 文件下载引擎，稳定、高效、灵活、简单易用\n\n[![Gitter][gitter_svg]][gitter_url]\n[![Download][bintray_svg]][bintray_url]\n![][file_downloader_svg]\n[![Build Status][build_status_svg]][build_status_link]\n[![][filedownloader_snapshot_svg]](https://oss.sonatype.org/content/repositories/snapshots/com/liulishuo/filedownloader/)\n\n\n> [README DOC](https://github.com/lingochamp/FileDownloader/blob/master/README.md)\n\n---\n\n#### 版本迭代日志: [Change Log](https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md)\n\n#### 英文文档: [Wiki](https://github.com/lingochamp/FileDownloader/wiki)、[优化建议](https://github.com/lingochamp/FileDownloader/wiki/Optimize-Tutorial)\n\n---\n\n### FileDownloader2 \n\n现在, [FileDownloader2-OkDownload](https://github.com/lingochamp/okdownload) 已经正式发布, okdownload继承了所有FileDownloader的优点，甚至做了更多的优化以及更多的特性。\n\n由于FileDownloader的单元测试覆盖太低，因此所有的进一步的需求以及提高都将会在okdownload上进行实现而非FileDownloader，而FileDownloader本身将只会关注于修复Bug。\n\n---\n\n### 特点\n\n- 简单易用\n- 单任务多线程/多连接/分块下载(并支持通过`ConnectionCountAdapter`定制)\n- 高并发\n- 灵活\n- 可选择性支持: 独立/非独立进程\n- 自动断点续传\n\n#### 需要注意\n\n- 当下载的文件大小可能大于1.99GB(2^31-1`=2_147_483_647 = 1.99GB`)的时候, 请使用`FileDownloadLargeFileListener`而不是`FileDownloadListener`(同理使用`getLargeFileSofarBytes()`与`getLargeFileTotalBytes()`)\n- 暂停: paused, 恢复: 直接调用start，默认就是断点续传\n- 引擎默认会打开避免掉帧的处理(使得在有些情况下回调(FileDownloadListener)不至于太频繁导致ui线程被ddos), 如果你希望关闭这个功能（关闭以后，所有回调会与0.1.9之前的版本一样，所有的回调会立马抛一个消息ui线程(Handler)）\n- 如果没有特殊需要，直接通过配置`filedownloader.properties`将`process.non-separate`置为`true`，可以有效减少每次回调IPC带来的I/O。\n\n---\n\n## Android 系统适配\n\n### 适配 Android 8.0\n\n从 Android 8.0 开发，后台服务的限制增强了，可以参考[这里](https://developer.android.com/about/versions/oreo/background)了解更多信息。\n因此，自 FileDownloader 1.7.6 版本开始， Android 8.0 及之后的系统上，如果在后台启动下载服务，这个服务将会是一个前台服务，同时你会看到一个标题为 \"FileDownloader\" 的通知。\n你可以参考[这里](https://github.com/lingochamp/FileDownloader/wiki/Compatibility-of-Android-O-Servic)去自定义通知的内容。\n\n### 适配 Android 9.0\n\n从 Android 9.0 (API level 28) 开始，明文请求默认被禁止，你可以在[这里](https://stackoverflow.com/questions/45940861/android-8-cleartext-http-traffic-not-permitted)了解详细信息。\nFileDownloader 1.7.6 已经在 demo 中处理了此问题。\n\n根据[迁移笔记](https://developer.android.com/about/versions/pie/android-9.0-migration#tya)，`FOREGROUND_SERVICE` 这个权限已经在 1.7.6 版本添加到 library 的 manifest 里面了。\n\n---\n\n## 欢迎提交 Pull requests\n\n- 尽量多的英文注解。\n- 每个提交尽量的细而精准。\n- Commit message 遵循: [AngularJS's commit message convention](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#-git-commit-guidelines)。\n\n---\n\n## I. 效果\n\n![][single_demo_gif]\n![][chunked_demo_gif]\n![][serial_tasks_demo_gif]\n![][parallel_tasks_demo_gif]\n![][tasks_manager_demo_gif]\n![][mix_tasks_demo_gif]\n![][avoid_drop_frames_1_gif]\n![][avoid_drop_frames_2_gif]\n\n\n## II. 使用\n\n在项目中引用:\n\n```groovy\nimplementation 'com.liulishuo.filedownloader:library:1.7.7'\n```\n\n> 如果是eclipse引入jar包参考: [这里](https://github.com/lingochamp/FileDownloader/issues/212#issuecomment-232240415)\n\n如果需要引入snapshot版本，请添加sonatype的仓库:\n\n```groovy\nrepositories {\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n}\n```\n\n#### 全局初始化\n\n如果你需要注册你的定制组件，你需要在`Application#onCreate`中调用`FileDownloader.setupOnApplicationOnCreate(application):InitCustomMaker`, 否则你只需要在使用FileDownloader之前的任意时候调用`FileDownloader.setup(Context)`即可。\n\n这些初始化方法都十分的简单，不会启动下载服务，一般都是在10ms内完成。\n\n#### 启动单任务下载\n\n```java\nFileDownloader.getImpl().create(url)\n        .setPath(path)\n        .setListener(new FileDownloadListener() {\n            @Override\n            protected void pending(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n            }\n\n            @Override\n            protected void connected(BaseDownloadTask task, String etag, boolean isContinue, int soFarBytes, int totalBytes) {\n            }\n\n            @Override\n            protected void progress(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n            }\n\n            @Override\n            protected void blockComplete(BaseDownloadTask task) {\n            }\n\n            @Override\n            protected void retry(final BaseDownloadTask task, final Throwable ex, final int retryingTimes, final int soFarBytes) {\n            }\n\n            @Override\n            protected void completed(BaseDownloadTask task) {\n            }\n\n            @Override\n            protected void paused(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n            }\n\n            @Override\n            protected void error(BaseDownloadTask task, Throwable e) {\n            }\n\n            @Override\n            protected void warn(BaseDownloadTask task) {\n            }\n        }).start();\n```\n\n#### 启动多任务下载\n\n```java\nfinal FileDownloadListener queueTarget = new FileDownloadListener() {\n    @Override\n    protected void pending(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n    }\n\n    @Override\n    protected void connected(BaseDownloadTask task, String etag, boolean isContinue, int soFarBytes, int totalBytes) {\n    }\n\n    @Override\n    protected void progress(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n    }\n\n    @Override\n    protected void blockComplete(BaseDownloadTask task) {\n    }\n\n    @Override\n    protected void retry(final BaseDownloadTask task, final Throwable ex, final int retryingTimes, final int soFarBytes) {\n    }\n\n    @Override\n    protected void completed(BaseDownloadTask task) {\n    }\n\n    @Override\n    protected void paused(BaseDownloadTask task, int soFarBytes, int totalBytes) {\n    }\n\n    @Override\n    protected void error(BaseDownloadTask task, Throwable e) {\n    }\n\n    @Override\n    protected void warn(BaseDownloadTask task) {\n    }\n};\n\n// 第一种方式 :\n\n//for (String url : URLS) {\n//    FileDownloader.getImpl().create(url)\n//            .setCallbackProgressTimes(0) // 由于是队列任务, 这里是我们假设了现在不需要每个任务都回调`FileDownloadListener#progress`, 我们只关系每个任务是否完成, 所以这里这样设置可以很有效的减少ipc.\n//            .setListener(queueTarget)\n//            .asInQueueTask()\n//            .enqueue();\n//}\n\n//if(serial){\n    // 串行执行该队列\n//    FileDownloader.getImpl().start(queueTarget, true);\n// }\n\n// if(parallel){\n    // 并行执行该队列\n//    FileDownloader.getImpl().start(queueTarget, false);\n//}\n\n// 第二种方式:\n\nfinal FileDownloadQueueSet queueSet = new FileDownloadQueueSet(downloadListener);\n\nfinal List<BaseDownloadTask> tasks = new ArrayList<>();\nfor (int i = 0; i < count; i++) {\n     tasks.add(FileDownloader.getImpl().create(Constant.URLS[i]).setTag(i + 1));\n}\n\nqueueSet.disableCallbackProgressTimes(); // 由于是队列任务, 这里是我们假设了现在不需要每个任务都回调`FileDownloadListener#progress`, 我们只关系每个任务是否完成, 所以这里这样设置可以很有效的减少ipc.\n\n// 所有任务在下载失败的时候都自动重试一次\nqueueSet.setAutoRetryTimes(1);\n\nif (serial) {\n  // 串行执行该任务队列\n     queueSet.downloadSequentially(tasks);\n     // 如果你的任务不是一个List，可以考虑使用下面的方式，可读性更强\n//      queueSet.downloadSequentially(\n//              FileDownloader.getImpl().create(url).setPath(...),\n//              FileDownloader.getImpl().create(url).addHeader(...,...),\n//              FileDownloader.getImpl().create(url).setPath(...)\n//      );\n}\n\nif (parallel) {\n  // 并行执行该任务队列\n   queueSet.downloadTogether(tasks);\n   // 如果你的任务不是一个List，可以考虑使用下面的方式，可读性更强\n//    queueSet.downloadTogether(\n//            FileDownloader.getImpl().create(url).setPath(...),\n//            FileDownloader.getImpl().create(url).setPath(...),\n//            FileDownloader.getImpl().create(url).setSyncCallback(true)\n//    );\n}\n\n// 最后你需要主动调用start方法来启动该Queue\nqueueSet.start()\n\n// 串行任务动态管理也可以使用FileDownloadSerialQueue。\n```\n\n#### 全局接口说明(`FileDownloader`)\n\n> 所有的暂停，就是停止，会释放所有资源并且停到所有相关线程，下次启动的时候默认会断点续传\n\n| 方法名 | 备注\n| --- | ---\n| setup(Context) | 如果不需要注册定制组件，就使用该方法在使用下载引擎前调用，该方法只会缓存Context\n| setupOnApplicationOnCreate(application):InitCustomMaker | 如果需要注册定制组件，就在Application#onCreate中调用该方法来注册定制组件以及初始化下载引擎，该方法不会启动下载服务\n| create(url:String) | 创建一个下载任务\n| start(listener:FileDownloadListener, isSerial:boolean) | 启动是相同监听器的任务，串行/并行启动\n| pause(listener:FileDownloadListener) | 暂停启动相同监听器的任务\n| pauseAll(void) | 暂停所有任务\n| pause(downloadId) | 暂停downloadId的任务\n| clear(downloadId, targetFilePath) | 强制清理ID为downloadId的任务在filedownloader中的数据\n| getSoFar(downloadId) | 获得下载Id为downloadId的soFarBytes\n| getTotal(downloadId) | 获得下载Id为downloadId的totalBytes\n| bindService(void) | 主动启动下载进程(可事先调用该方法(可以不调用)，保证第一次下载的时候没有启动进程的速度消耗)\n| unBindService(void) | 主动关停下载进程\n| unBindServiceIfIdle(void) | 如果目前下载进程没有任务正在执行，则关停下载进程\n| isServiceConnected(void) | 是否已经启动并且连接上下载进程(可参考任务管理demo中的使用)\n| getStatusIgnoreCompleted(downloadId) | 获取不包含已完成状态的下载状态(如果任务已经下载完成，将收到`INVALID`)\n| getStatus(id:int, path:String) | 获取下载状态\n| getStatus(url:String, path:String) | 获取下载状态\n| setGlobalPost2UIInterval(intervalMillisecond:int) | 为了避免掉帧，这里是设置了最多每interval毫秒抛一个消息到ui线程(使用Handler)，防止由于回调的过于频繁导致ui线程被ddos导致掉帧。 默认值: 10ms. 如果设置小于0，将会失效，也就是说每个回调都直接抛一个消息到ui线程\n| setGlobalHandleSubPackageSize(packageSize:int) | 为了避免掉帧, 如果上面的方法设置的间隔是一个小于0的数，这个packageSize将不会生效。packageSize这个值是为了避免在ui线程中一次处理过多回调，结合上面的间隔，就是每个interval毫秒间隔抛一个消息到ui线程，而每个消息在ui线程中处理packageSize个回调。默认值: 5\n| enableAvoidDropFrame(void) | 开启 避免掉帧处理。就是将抛消息到ui线程的间隔设为默认值10ms, 很明显会影响的是回调不会立马通知到监听器(FileDownloadListener)中，默认值是: 最多10ms处理5个回调到监听器中\n| disableAvoidDropFrame(void) | 关闭 避免掉帧处理。就是将抛消息到ui线程的间隔设置-1(无效值)，这个就是让每个回调都会抛一个消息ui线程中，可能引起掉帧\n| isEnabledAvoidDropFrame(void) | 是否开启了 避免掉帧处理。默认是开启的\n| startForeground(id:int, notification:Notification) | 设置FileDownloadService为前台模式，保证用户从最近应用列表移除应用以后下载服务不会被杀\n| stopForeground(removeNotification:boolean) | 取消FileDownloadService的前台模式\n| setTaskCompleted(url:String, path:String, totalBytes:long) | 用于告诉FileDownloader引擎，以指定Url与Path的任务已经通过其他方式(非FileDownloader)下载完成\n| setTaskCompleted(taskAtomList:List<FileDownloadTaskAtom>) | 用于告诉FileDownloader引擎，指定的一系列的任务都已经通过其他方式(非FileDownloader)下载完成\n| setMaxNetworkThreadCount(int) | 设置最大并行下载的数目(网络下载线程数), [1,12]\n| clearAllTaskData() | 清空`filedownloader`数据库中的所有数据\n\n#### 定制化组件接口说明(`InitCustomMaker`)\n\n| 方法名 | 需实现接口 | 已有组件 | 默认组件 | 说明\n| --- | --- | --- | --- | ---\n| database | FileDownloadDatabase | RemitDatabase、SqliteDatabaseImpl、NoDatabaseImpl | RemitDatabase | 传入定制化数据库组件，用于存储用于断点续传的数据\n| connection | FileDownloadConnection | FileDownloadUrlConnection | FileDownloadUrlConnection | 传入定制化的网络连接组件，用于下载时建立网络连接\n| outputStreamCreator | FileDownloadOutputStream | FileDownloadRandomAccessFile | FileDownloadRandomAccessFile | 传入输出流组件，用于下载时写文件使用\n| maxNetworkThreadCount | - | - | 3 | 传入创建下载引擎时，指定可用的下载线程个数\n| ConnectionCountAdapter | ConnectionCountAdapter | DefaultConnectionCountAdapter | DefaultConnectionCountAdapter | 根据任务指定其线程数\n| IdGenerator | IdGenerator | DefaultIdGenerator | DefaultIdGenerator | 自定义任务Id生成器\n\n> - 如果你希望Okhttp作为你的网络连接组件，可以使用[这个库](https://github.com/Jacksgong/filedownloader-okhttp3-connection)。\n> - 如果你不希望FileDownloader用到任何的数据库(是用于存储任务的断点续成信息的)，只需要使用[NoDatabaseImpl.java](https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/services/NoDatabaseImpl.java)即可。\n\n#### Task接口说明\n\n| 方法名 | 备注\n| --- | ---\n| setPath(path:String) | 下载文件的存储绝对路径\n| setPath(path:String, pathAsDirectory:boolean) | 如果`pathAsDirectory`是`true`,`path`就是存储下载文件的文件目录(而不是路径)，此时默认情况下文件名`filename`将会默认从`response#header`中的`contentDisposition`中获得\n| setListener(listener:FileDownloadListener) | 设置监听，可以以相同监听组成队列\n| setCallbackProgressTimes(times:int) | 设置整个下载过程中`FileDownloadListener#progress`最大回调次数\n| setCallbackProgressIgnored() | 忽略所有的`FileDownloadListener#progress`的回调\n| setCallbackProgressMinInterval(minIntervalMillis:int) | 设置每个`FileDownloadListener#progress`之间回调间隔(ms)\n| setTag(tag:Object) | 内部不会使用，在回调的时候用户自己使用\n| setTag(key:int, tag:Object) | 用于存储任意的变量方便回调中使用，以key作为索引\n| setForceReDownload(isForceReDownload:boolean) | 强制重新下载，将会忽略检测文件是否健在\n| setFinishListener(listener:FinishListener) | 结束监听，仅包含结束(over(void))的监听\n| setAutoRetryTimes(autoRetryTimes:int) | 当请求或下载或写文件过程中存在错误时，自动重试次数，默认为0次\n| setSyncCallback(syncCallback:boolean)  | 如果设为true, 所有FileDownloadListener中的回调都会直接在下载线程中回调而不抛到ui线程, 默认为false\n| addHeader(name:String, value:String) | 添加自定义的请求头参数，需要注意的是内部为了断点续传，在判断断点续传有效时会自动添加上(`If-Match`与`Range`参数)，请勿重复添加导致400或其他错误\n| addHeader(line:String) | 添加自定义的请求头参数，需要注意的是内部为了断点续传，在判断断点续传有效时会自动添加上(`If-Match`与`Range`参数)，请勿重复添加导致400或其他错误\n| setMinIntervalUpdateSpeed(minIntervalUpdateSpeedMs:int) | 设置下载中刷新下载速度的最小间隔\n| removeAllHeaders(name:String) | 删除由自定义添加上去请求参数为`{name}`的所有键对\n| setWifiRequired(isWifiRequired:boolean) | 设置任务是否只允许在Wifi网络环境下进行下载。 默认值 `false`\n| asInQueueTask(void):InQueueTask | 申明该任务将会是队列任务中的一个任务，并且转化为`InQueueTask`，之后可以调用`InQueueTask#enqueue`将该任务入队以便于接下来启动队列任务时，可以将该任务收编到队列中\n| start(void) | 启动孤立的下载任务\n| pause(void) | 暂停下载任务(也可以理解为停止下载，但是在start的时候默认会断点续传)\n| getId(void):int | 获取唯一Id(内部通过url与path生成)\n| getUrl(void):String | 获取下载连接\n| getCallbackProgressTimes(void):int | 获得progress最大回调次数\n| getCallbackProgressMinInterval(void):int | 获得每个progress之间的回调间隔(ms)\n| getPath(void):String | 获取文件路径 或 文件目录\n| isPathAsDirectory | 判断`getPath()`返回的路径是文件存储目录(`directory`)，还是文件存储路径(`directory/filename`)\n| getTargetFilePath | 获取目标文件的存储路径\n| getListener(void):FileDownloadListener | 获取监听器\n| getSoFarBytes(void):int | 获取已经下载的字节数\n| getTotalBytes(void):int | 获取下载文件总大小\n| getStatus(void):int | 获取当前的状态\n| isForceReDownload(void):boolean | 是否强制重新下载\n| getEx(void):Throwable | 获取下载过程抛出的Throwable\n| isReusedOldFile(void):boolean | 判断是否是直接使用了旧文件(检测是有效文件)，没有启动下载\n| getTag(void):Object | 获取用户setTag进来的Object\n| getTag(key:int):Object | 根据key获取存储在task中的变量\n| isContinue(void):boolean | 是否成功断点续传\n| getEtag(void):String | 获取当前下载获取到的ETag\n| getAutoRetryTimes(void):int | 自动重试次数\n| getRetryingTimes(void):int | 当前重试次数。将要开始重试的时候，会将接下来是第几次\n| isSyncCallback(void):boolean | 是否是设置了所有FileDownloadListener中的回调都直接在下载线程直接回调而不抛到ui线程\n| getSpeed():int | 获取任务的下载速度, 下载过程中为实时速度，下载结束状态为平均速度\n| isUsing():boolean | 判断当前的Task对象是否在引擎中启动过\n| isWifiRequired():boolean | 获取当前任务是否被设置过只允许在Wifi网络环境下下载\n\n#### 监听器(`FileDownloadListener`)说明\n\n##### 一般的下载回调流程:\n\n```\npending -> started -> connected -> (progress <->progress) -> blockComplete -> completed\n```\n\n##### 可能会遇到以下回调而直接终止整个下载过程:\n\n```\npaused / completed / error / warn\n```\n\n##### 如果检测存在已经下载完成的文件(可以通过`isReusedOldFile`进行决策是否是该情况)(也可以通过`setForceReDownload(true)`来避免该情况):\n\n```\nblockComplete -> completed\n```\n\n##### 方法说明\n\n| 回调方法 | 备注 | 带回数据\n| --- | --- | ---\n| pending | 等待，已经进入下载队列 | 数据库中的soFarBytes与totalBytes\n| started | 结束了pending，并且开始当前任务的Runnable | -\n| connected | 已经连接上 | ETag, 是否断点续传, soFarBytes, totalBytes\n| progress | 下载进度回调 | soFarBytes\n| blockComplete | 在完成前同步调用该方法，此时已经下载完成 | -\n| retry | 重试之前把将要重试是第几次回调回来 | 之所以重试遇到Throwable, 将要重试是第几次, soFarBytes\n| completed | 完成整个下载过程 | -\n| paused | 暂停下载 | soFarBytes\n| error | 下载出现错误 | 抛出的Throwable\n| warn | 在下载队列中(正在等待/正在下载)已经存在相同下载连接与相同存储路径的任务 | -\n\n\n![][file_download_listener_callback_flow_png]\n\n##### 由于`FileDownloadListener`中的方法回调过快，导致掉帧?\n\n> 你有两种方法可以解决这个问题\n\n1. `FileDownloader#enableAvoidDropFrame`, 默认 就是开启的\n2. `BaseDownloadTask#setSyncCallback`, 默认是false, 如果设置为true，所有的回调都会在下载线程直接同步调用而不会抛到ui线程。\n\n#### `FileDownloadMonitor`\n\n> 你可以添加一个全局监听器来进行打点或者是调试\n\n| 方法名 | 备注\n| --- | ---\n| setGlobalMonitor(monitor:IMonitor) | 设置与替换一个全局监听器到下载引擎中\n| releaseGlobalMonitor(void) | 释放已经设置到下载引擎中的全局监听器\n| getMonitor(void) | 获取已经设置到下载引擎中的全局监听器\n\n\n##### `FileDownloadMonitor.IMonitor`\n\n> 监听器接口类\n\n|  接口 | 备注\n| --- | ---\n| onRequestStart(count:int, serial:boolean, lis:FileDownloadListener) | 将会在启动队列任务是回调这个方法\n| onRequestStart(task:BaseDownloadTask) | 将会在启动单一任务时回调这个方法\n| onTaskBegin(task:BaseDownloadTask) | 将会在内部接收并开始task的时候回调这个方法(会在`pending`回调之前)\n| onTaskStarted(task:BaseDownloadTask) | 将会在task结束pending开始task的runnable的时候回调该方法\n| onTaskOver(task:BaseDownloadTask) | 将会在task走完所有生命周期是回调这个方法\n\n#### `FileDownloadUtils`\n\n| 方法名 | 备注\n| --- | ---\n| setDefaultSaveRootPath(path:String) | 在整个引擎中没有设置路径时`BaseDownloadTask#setPath`这个路径将会作为它的Root path\n| getTempPath | 获取用于存储还未下载完成文件的临时存储路径: `filename.temp`\n| isFilenameConverted(context:Context) | 判断是否所有数据库中下载中的任务的文件名都已经从`filename`(在旧架构中)转为`filename.temp`\n\n#### `FileDownloadNotificationHelper`\n\n> 如何快速集成Notification呢? 建议参考[NotificationMinSetActivity](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/NotificationMinSetActivity.java)、[NotificationSampleActivity](https://github.com/lingochamp/FileDownloader/blob/master/demo/src/main/java/com/liulishuo/filedownloader/demo/NotificationSampleActivity.java)。\n\n#### `filedownloader.properties`\n\n> 如果你需要定制化FileDownloader，可以在你的项目模块的`assets` 目录下添加 'filedownloader.properties' 文件(如 `/demo/src/main/assets/filedownloader.properties`)，然后添加以下可选相关配置。\n\n> 格式: `keyword=value`\n\n| 关键字 | 描述 | 默认值\n| --- | --- | ---\n| http.lenient | 如果你遇到了: 'can't know the size of the download file, and its Transfer-Encoding is not Chunked either', 但是你想要忽略类似的返回头不规范的错误，直接将该关键字参数设置为`true`即可，我们将会将其作为`chunck`进行处理 | false\n| process.non-separate | FileDownloadService 默认是运行在独立进程':filedownloader'上的, 如果你想要FileDownloadService共享并运行在主进程上, 将该关键字参数设置为`true`，可以有效减少IPC产生的I/O | false\n| download.min-progress-step | 最小缓冲大小，用于判定是否是时候将缓冲区中进度同步到数据库，以及是否是时候要确保下缓存区的数据都已经写文件。值越小，更新会越频繁，下载速度会越慢，但是应对进程被无法预料的情况杀死时会更加安全 | 65536\n| download.min-progress-time | 最小缓冲时间，用于判定是否是时候将缓冲区中进度同步到数据库，以及是否是时候要确保下缓存区的数据都已经写文件。值越小，更新会越频繁，下载速度会越慢，但是应对进程被无法预料的情况杀死时会更加安全 | 2000\n| download.max-network-thread-count | 用于同时下载的最大网络线程数, 区间[1, 12] | 3\n| file.non-pre-allocation | 是否不需要在开始下载的时候，预申请整个文件的大小(`content-length`) | false\n| broadcast.completed | 是否需要在任务下载完成后发送一个完成的广播 | false\n\n> 如果你使用`broadcast.completed`并且接收任务完成的广播,你需要注册Action为`filedownloader.intent.action.completed`的广播并且使用`FileDownloadBroadcastHandler`来处理接收到的`Intent`。\n\nIII. 异常处理\n\n> 所有的异常，都将在 `FileDownloadListener#error(BaseDownloadTask, Throwable)` 中获知。\n\n| Exception | 原因\n| --- | ---\n| `FileDownloadHttpException`| 在发出请求以后，response-code不是200(HTTP_OK)，也不是206(HTTP_PARTIAL)的情况下会抛出该异常; 在这个异常对象会带上 response-code、response-header、request-header。\n| `FileDownloadGiveUpRetryException` | 在请求返回的 response-header 中没有带有文件大小(content-length)，并且不是流媒体(transfer-encoding)的情况下会抛出该异常；出现这个异常，将会忽略所有重试的机会(`BaseDownloadTask#setAutoRetryTimes`). 你可以通过在 `filedownloader.properties`中添加 `http.lenient=true` 来忽略这个异常，并且在该情况下，直接作为流媒体进行下载。\n| `FileDownloadOutOfSpaceException` | 当将要下载的文件大小大于剩余磁盘大小时，会抛出这个异常。\n| 其他 | 程序错误。\n| `FileDownloadNetworkPolicyException` | 设置了`BaseDownloadTask#setWifiRequired(true)`，在下载过程中，一旦发现网络情况转为非Wifi环境，便会抛回这个异常\n| `PathConflictException` | 当有一个正在下载的任务，它的存储路径与当前任务的存储路径完全一致，为了避免多个任务对同一个文件进行写入，当前任务便会抛回这个异常\n\n\n\n## III. 低内存情况\n\n### 非下载进程(一般是UI进程):\n\n> 这边的数据并不多，只是一些队列数据，用不了多少内存。\n\n#### [前台进程](http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html)数据被回收:\n\n如果在前台的时候这个数据都被回收了, 你的应用应该也挂了。极低概率事件。\n\n#### [后台进程](http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html)数据被回收:\n\n一般事件, 如果是你的下载是UI进程启动的，如果你的UI进程处于`后台进程`(可以理解为应用被退到后台)状态，在内存不足的情况下会被回收(回收优先级高于`服务进程`)，此时分两种情况:\n\n1. 是串行队列任务，在回收掉UI进程内存以后，下载进程会继续下载完已经pending到下载进程的那个任务，而还未pending到下载进程的任务会中断下载(由于任务驱动线性执行的是在UI进程); 有损体验: 下次进入应用重启启动整个队列，会继续上次的下载。\n\n2. 是并行队列任务，在回收掉UI进程内存以后，下载进程会继续下载所有任务(所有已经pending到下载进程的任务，由于这里的pending速度是很快的，因此几乎是点击并行下载，所有任务在很短的时间内都已经pending到下载进程了)，而UI进程由于被回收，将不会收到所有的监听; 有损体验: 下次进入应用重新启动整个队列，就会和正常的下载启动一致，收到所有情况的监听。\n\n### 下载进程:\n\n> 对内存有一定的占用，但是并不多，每次启动进程会根据数据的有效性进行清理冗余数据，被回收是低概率事件\n\n由于下载不断有不同的buffer占用内存，但是由于在下载时，是活跃的`服务进程`，因此被回收是低概率事件(会先回收完所有`空进程`、`后台进程`(后台应用)以后，如果内存还不够，才会回收该进程)。\n\n即使被回收，也不会有任何问题。由于我们使用的是`START_STICKY`(如果不希望被重启可主动调用`FileDownloader#unBindService`/`FileDownloader#unBindServiceIfIdle`)，因此在内存足够的时候，下载进程会尝试重启(系统调度)，非下载进程(一般是UI进程) 接收到下载进程的连接，会继续下载与继续接收回调，下载进程也会断点续传没有下载完的所有任务(无论并行与串行)，不会影响体验。\n\n## IV. LICENSE\n\n```\nCopyright (c) 2015 LingoChamp Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n[gitter_url]: https://gitter.im/lingochamp/FileDownloader?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n[gitter_svg]: https://badges.gitter.im/lingochamp/FileDownloader.svg\n[license_2_svg]: https://img.shields.io/hexpm/l/plug.svg\n[android_platform_svg]: https://img.shields.io/badge/Platform-Android-brightgreen.svg\n[file_downloader_svg]: https://img.shields.io/badge/Android-FileDownloader-orange.svg\n[mix_tasks_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/mix_tasks_demo.gif\n[parallel_tasks_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/parallel_tasks_demo.gif\n[serial_tasks_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/serial_tasks_demo.gif\n[tasks_manager_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/tasks_manager_demo.gif\n[avoid_drop_frames_1_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/avoid_drop_frames1.gif\n[avoid_drop_frames_2_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/avoid_drop_frames2.gif\n[single_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/single_demo.gif\n[chunked_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/chunked_demo.gif\n[bintray_svg]: https://api.bintray.com/packages/jacksgong/maven/FileDownloader/images/download.svg\n[bintray_url]: https://bintray.com/jacksgong/maven/FileDownloader/_latestVersion\n[file_download_listener_callback_flow_png]: https://github.com/lingochamp/FileDownloader/raw/master/art/filedownloadlistener_callback_flow.png\n[build_status_svg]: https://travis-ci.org/lingochamp/FileDownloader.svg?branch=master\n[filedownloader_snapshot_svg]: https://img.shields.io/badge/SnapShot-1.7.8-yellow.svg\n[build_status_link]: https://travis-ci.org/lingochamp/FileDownloader\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4306640625,
          "content": "# FileDownloader\nAndroid multi-task file download engine.\n\n\n[![Download][bintray_svg]][bintray_url]\n![][file_downloader_svg]\n[![Build Status][build_status_svg]][build_status_link]\n[![][filedownloader_snapshot_svg]](https://oss.sonatype.org/content/repositories/snapshots/com/liulishuo/filedownloader/)\n\n> [中文文档](https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md)\n\n## FileDownloader2\n\nNow, [FileDownloader2-OkDownload](https://github.com/lingochamp/okdownload) is released, okdownload will contain all advantage on the FileDownloader and beyond.\n\nBecause of FileDownloader unit-test coverage is very low, so all farther features and enhances will be achieved on the okdownload instead of FileDownloader, and FileDownloader will only focuses on bug fixes.\n\n## DEMO\n\n![][single_demo_gif]\n![][chunked_demo_gif]\n![][serial_tasks_demo_gif]\n![][parallel_tasks_demo_gif]\n![][tasks_manager_demo_gif]\n![][hybrid_test_demo_gif]\n![][avoid_drop_frames_1_gif]\n![][avoid_drop_frames_2_gif]\n\n## Installation\n\nFileDownloader is installed by adding the following dependency to your `build.gradle` file:\n\n```groovy\ndependencies {\n    implementation 'com.liulishuo.filedownloader:library:1.7.7'\n}\n```\n\nSnapshots of the development version are available in [Sonatype's `snapshots` repository](https://oss.sonatype.org/content/repositories/snapshots/), you can include on your gradle project through:\n\n```groovy\nrepositories {\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }\n}\n```\n\n## Open customize component\n\nFrom now on, FileDownloader support following components to be customized by yourself:\n\n| Name | Interface | Default Impl\n| --- | --- | ---\n| Connection | [FileDownloadConnection][FileDownloadConnection-java-link] | [FileDownloadUrlConnection][FileDownloadUrlConnection-java-link]\n| OutputStream | [FileDownloadOutputStream][FileDownloadOutputStream-java-link] | [FileDownloadRandomAccessFile][FileDownloadRandomAccessFile-java-link]\n| Database | [FileDownloadDatabase][FileDownloadDatabase-java-link] | [RemitDatabase][RemitDatabase-java-link]\n| ConnectionCountAdapter | [ConnectionCountAdapter][ConnectionCountAdapter-java-link] | [DefaultConnectionCountAdapter][DefaultConnectionCountAdapter-java-link]\n| IdGenerator | [IdGenerator][IdGenerator-java-link] | [DefaultIdGenerator][DefaultIdGenerator-java-link]\n| ForegroundServiceConfig | [ForegroundServiceConfig][ForegroundServiceConfig-java-link] | [ForegroundServiceConfig][ForegroundServiceConfig-java-link]\n\n> - If you want to use okhttp as your connection component, the simplest way is [this repo](https://github.com/Jacksgong/filedownloader-okhttp3-connection).\n> - If you don't want to use any database on FileDownloader(the database on FileDownloader is used for persist tasks' breakpoint info) just using [NoDatabaseImpl.java](https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/services/NoDatabaseImpl.java)\n\n### How to valid it?\n\nJust create your own `DownloadMgrInitialParams.InitCustomMaker` and put those customized component to it, finally init the FileDownloader with it: [FileDownloader#init](https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/FileDownloader.java#L62)\n\n## Adaptation\n\n### Adapt to Android 8.0\n\nThe restriction of background service has been tightened since Android 8.0, for more details, please refer to [here](https://developer.android.com/about/versions/oreo/background).\nSo, after Android 8.0, the download service will be a foreground service when start downloading during app is in background and you will see a notification with a title named \"FileDownloader\" start from FileDownloader 1.7.6.\nYou can refer to [here](https://github.com/lingochamp/FileDownloader/wiki/Compatibility-of-Android-O-Service) to custom the notification.\n\n### Adapt to Android 9.0\n\nStarting with Android 9.0 (API level 28), cleartext support is disabled by default, you can have a look at [here](https://stackoverflow.com/questions/45940861/android-8-cleartext-http-traffic-not-permitted) to know about more details.\nFileDownloader demo has handled this problem start with 1.7.6.\n\nAccording to the [migration notes](https://developer.android.com/about/versions/pie/android-9.0-migration#tya), the FOREGROUND_SERVICE permission has been added to the library manifest since FileDownloader 1.7.6.\n\n## Welcome PR\n\n> If you can improve the unit test for this project would be great.\n\n- Comments as much as possible.\n- Commit message format follow: [AngularJS's commit message convention](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#-git-commit-guidelines) .\n- The change of each commit as small as possible.\n\n![][structure-img]\n![][message-system-img]\n\n## Usage\n\nBy default, the FileDownloadService runs on the separate process, if you want to run it on the main process, just configure on the [filedownloader.properties](https://github.com/lingochamp/FileDownloader/wiki/filedownloader.properties), and you can use `FileDownloadUtils.isDownloaderProcess(Context)` to check whether the FileDownloadService can run on the current process.\n\nFor more readable, Moved to [Wiki](https://github.com/lingochamp/FileDownloader/wiki).\n\n## LICENSE\n\n```\nCopyright (c) 2015 LingoChamp Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n[license_2_svg]: https://img.shields.io/hexpm/l/plug.svg\n[android_platform_svg]: https://img.shields.io/badge/Platform-Android-brightgreen.svg\n[file_downloader_svg]: https://img.shields.io/badge/Android-FileDownloader-orange.svg\n[structure-img]: https://github.com/lingochamp/FileDownloader/raw/master/art/structure.png\n[message-system-img]: https://github.com/lingochamp/FileDownloader/raw/master/art/message-system.png\n[hybrid_test_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/hybrid_test_demo.gif\n[parallel_tasks_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/parallel_tasks_demo.gif\n[serial_tasks_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/serial_tasks_demo.gif\n[tasks_manager_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/tasks_manager_demo.gif\n[avoid_drop_frames_1_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/avoid_drop_frames1.gif\n[avoid_drop_frames_2_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/avoid_drop_frames2.gif\n[single_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/single_demo.gif\n[chunked_demo_gif]: https://github.com/lingochamp/FileDownloader/raw/master/art/chunked_demo.gif\n[bintray_svg]: https://api.bintray.com/packages/jacksgong/maven/FileDownloader/images/download.svg\n[bintray_url]: https://bintray.com/jacksgong/maven/FileDownloader/_latestVersion\n[file_download_listener_callback_flow_png]: https://github.com/lingochamp/FileDownloader/raw/master/art/filedownloadlistener_callback_flow.png\n[build_status_svg]: https://travis-ci.org/lingochamp/FileDownloader.svg?branch=master\n[filedownloader_snapshot_svg]: https://img.shields.io/badge/SnapShot-1.7.8-yellow.svg\n[build_status_link]: https://travis-ci.org/lingochamp/FileDownloader\n[FileDownloadConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadConnection.java\n[FileDownloadUrlConnection-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/FileDownloadUrlConnection.java\n[FileDownloadDatabase-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/database/RemitDatabase.java\n[RemitDatabase-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/database/RemitDatabase.java\n[FileDownloadOutputStream-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/stream/FileDownloadOutputStream.java\n[FileDownloadRandomAccessFile-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/stream/FileDownloadRandomAccessFile.java\n[ConnectionCountAdapter-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadHelper.java#L100\n[DefaultConnectionCountAdapter-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/connection/DefaultConnectionCountAdapter.java\n[IdGenerator-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/util/FileDownloadHelper.java#L55\n[DefaultIdGenerator-java-link]: https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/services/DefaultIdGenerator.java\n[ForegroundServiceConfig-java-link]:https://github.com/lingochamp/FileDownloader/blob/master/library/src/main/java/com/liulishuo/filedownloader/services/ForegroundServiceConfig.java\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.421875,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.3.1'\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        google()\n    }\n}\n\nsubprojects {\n    group = GROUP\n    version = VERSION_NAME\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "checkstyle.xml",
          "type": "blob",
          "size": 5.9208984375,
          "content": "<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd\">\n\n<module name=\"Checker\">\n\n    <module name=\"SuppressWarningsFilter\" />\n\n    <!--module name=\"NewlineAtEndOfFile\"/-->\n    <module name=\"FileLength\"/>\n    <module name=\"FileTabCharacter\"/>\n\n    <!-- Trailing spaces -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"\\s+$\"/>\n        <property name=\"message\" value=\"Line has trailing spaces.\"/>\n    </module>\n\n    <!-- Space after 'for' and 'if' -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"^\\s*(for|if)[^ ]\\(\"/>\n        <property name=\"message\" value=\"Space needed before opening parenthesis.\"/>\n    </module>\n\n    <!-- For each spacing -->\n    <module name=\"RegexpSingleline\">\n        <property name=\"format\" value=\"^\\s*for \\(.*?([^ ]:|:[^ ])\"/>\n        <property name=\"message\" value=\"Space needed around ':' character.\"/>\n    </module>\n\n    <module name=\"TreeWalker\">\n        <!--<property name=\"cacheFile\" value=\"${checkstyle.cache.file}\"/>-->\n\n        <!-- Checks for Javadoc comments.                     -->\n        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n        <!--module name=\"JavadocMethod\"/-->\n        <!--module name=\"JavadocType\"/-->\n        <!--module name=\"JavadocVariable\"/-->\n        <!--module name=\"JavadocStyle\"/-->\n\n        <module name=\"SuppressWarningsHolder\" />\n\n        <!-- Checks for Naming Conventions.                  -->\n        <!-- See http://checkstyle.sf.net/config_naming.html -->\n        <module name=\"ConstantName\"/>\n        <module name=\"LocalFinalVariableName\"/>\n        <module name=\"LocalVariableName\"/>\n        <module name=\"MemberName\"/>\n        <module name=\"MethodName\">\n            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9_]*$\"/>\n        </module>\n        <module name=\"PackageName\"/>\n        <module name=\"ParameterName\"/>\n        <!--<module name=\"StaticVariableName\"/>-->\n        <module name=\"TypeName\"/>\n\n\n        <!-- Checks for imports                              -->\n        <!-- See http://checkstyle.sf.net/config_import.html -->\n        <module name=\"AvoidStarImport\"/>\n        <module name=\"IllegalImport\"/>\n        <module name=\"RedundantImport\"/>\n        <module name=\"UnusedImports\">\n            <property name=\"processJavadoc\" value=\"true\"/>\n        </module>\n\n\n        <!-- Checks for Size Violations.                    -->\n        <!-- See http://checkstyle.sf.net/config_sizes.html -->\n        <module name=\"LineLength\">\n            <property name=\"max\" value=\"100\"/>\n        </module>\n        <module name=\"MethodLength\">\n            <property name=\"max\" value=\"200\"/>\n        </module>\n        <!--<module name=\"ParameterNumber\">-->\n            <!--<property name=\"max\" value=\"10\"/>-->\n        <!--</module>-->\n\n\n        <!-- Checks for whitespace                               -->\n        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n        <module name=\"GenericWhitespace\"/>\n        <!--<module name=\"EmptyForIteratorPad\"/>-->\n        <module name=\"MethodParamPad\"/>\n        <module name=\"NoWhitespaceAfter\"/>\n        <module name=\"NoWhitespaceBefore\"/>\n        <module name=\"OperatorWrap\"/>\n        <module name=\"ParenPad\"/>\n        <module name=\"TypecastParenPad\"/>\n        <module name=\"WhitespaceAfter\"/>\n        <module name=\"WhitespaceAround\"/>\n\n\n        <!-- Modifier Checks                                    -->\n        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n        <module name=\"ModifierOrder\"/>\n        <module name=\"RedundantModifier\"/>\n\n\n        <!-- Checks for blocks. You know, those {}'s         -->\n        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n        <module name=\"AvoidNestedBlocks\"/>\n        <module name=\"EmptyBlock\"/>\n        <module name=\"EmptyCatchBlock\">\n            <property name=\"exceptionVariableName\" value=\"expected|ignore\"/>\n        </module>\n        <module name=\"LeftCurly\">\n            <!-- No METHOD_DEF, because I think simple method can be one line -->\n            <property name=\"tokens\" value=\"INTERFACE_DEF, CLASS_DEF, ANNOTATION_DEF, ENUM_DEF,\n            CTOR_DEF, ENUM_CONSTANT_DEF, LITERAL_WHILE, LITERAL_TRY, LITERAL_CATCH,\n            LITERAL_FINALLY, LITERAL_SYNCHRONIZED, LITERAL_SWITCH, LITERAL_DO, LITERAL_IF,\n            LITERAL_ELSE, LITERAL_FOR, STATIC_INIT, OBJBLOCK, LAMBDA\"/>\n        </module>\n        <module name=\"NeedBraces\">\n            <property name=\"allowSingleLineStatement\" value=\"true\"/>\n        </module>\n        <module name=\"RightCurly\"/>\n\n\n        <!-- Checks for common coding problems               -->\n        <!-- See http://checkstyle.sf.net/config_coding.html -->\n        <!--module name=\"AvoidInlineConditionals\"/-->\n        <module name=\"CovariantEquals\"/>\n        <module name=\"EmptyStatement\"/>\n        <!--<module name=\"EqualsAvoidNull\"/>-->\n        <module name=\"EqualsHashCode\"/>\n        <!--module name=\"HiddenField\"/-->\n        <module name=\"IllegalInstantiation\"/>\n        <!--<module name=\"InnerAssignment\"/>-->\n        <!--module name=\"MagicNumber\"/-->\n        <module name=\"MissingSwitchDefault\"/>\n        <!--<module name=\"RedundantThrows\"/>-->\n        <module name=\"SimplifyBooleanExpression\"/>\n        <module name=\"SimplifyBooleanReturn\"/>\n\n        <!-- Checks for class design                         -->\n        <!-- See http://checkstyle.sf.net/config_design.html -->\n        <!--module name=\"DesignForExtension\"/-->\n        <!--module name=\"FinalClass\"/-->\n        <!--module name=\"HideUtilityClassConstructor\"/-->\n        <!--module name=\"InterfaceIsType\"/-->\n        <!--module name=\"VisibilityModifier\"/-->\n\n\n        <!-- Miscellaneous other checks.                   -->\n        <!-- See http://checkstyle.sf.net/config_misc.html -->\n        <!--module name=\"ArrayTypeStyle\"/-->\n        <!--module name=\"FinalParameters\"/-->\n        <!--module name=\"TodoComment\"/-->\n        <module name=\"UpperEll\"/>\n    </module>\n</module>"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.62109375,
          "content": "VERSION_NAME=1.7.8-SNAPSHOT\nBUILD_TOOLS_VERSION=28.0.3\nCOMPILE_SDK_VERSION=28\n\nGROUP=com.liulishuo.filedownloader\n\nPOM_URL=https://github.com/lingochamp/FileDownloader\nISSUE_URL=https://github.com/lingochamp/FileDownloader/issues\n\nPOM_SCM_URL=https://github.com/lingochamp/FileDownloader\nPOM_SCM_CONNECTION=scm:git@github.com:lingochamp/FileDownloader.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:lingochamp/FileDownloader.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=lingochamp\nPOM_DEVELOPER_NAME=LingoChamp Inc.\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.2607421875,
          "content": "#!/bin/bash\n\nadb install -r demo/build/outputs/apk/demo-debug.apk\n\nif [ \"$1\" == \"y\" ]; then\n\tadb shell am start -n \"com.liulishuo.filedownloader.demo/com.liulishuo.filedownloader.demo.MainActivity\" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER\nfi\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "okcat.yml",
          "type": "blob",
          "size": 3.169921875,
          "content": "# you can use https://github.com/Jacksgong/okcat for debug filedownloader more gentle\n# we will filter out logs with the provided package (name)\n# this 'package' keyword is just using for android adb logcat\npackage: com.liulishuo.filedownloader.demo\n\n# this 'log-line-regex' is just a regex for one line log\n# now we support keyword: 'data' 'time' 'level' 'tag' 'process' 'thread' 'message'\n# you don't have to provide all keyword, but you have to provide at least the 'message'\n# such as: 'message=\"(\\S*)\"'\n# log-line-regex: 'data,time,level,tag,process,thread,message = \"(.\\S*) (.\\S*) ([A-Z])/([^:[]*):\\[(\\d*):([^] ]*)\\] (.*?)$\"'\n\n# on the case of filter logs from Android adb logcat, we using 'adb logcat -v brief -v threadtime' command to obtain logcat\n# in the normal case you don't need ot provide this config, because there is a perfect one on the okcat internal\n# but if you want to customize the regex log from adb logcat, it's free to define it such below\n# adb-log-line-regex: 'data,time,process,thread,level,tag,message=\"(.\\S*) (.\\S*) (\\d*) (\\d*) ([A-Z]) ([^:]*): (.*?)$\"'\n\n# separator regex list\n# you can provide multiple regex to separate serial logs\nseparator-regex-list: \n  # on this case, if one line log match 'call start Url\\[([^\\]]*)\\]' regex we will separate logs with \\n and output a indie line with the '([^\\]]*)' value as the title of separate\n  - 'call start Url\\[([^\\]]*)\\]'\n\n# tag keyword list\n# this list keyword is using for filter out which log need to be output\n# all provided keyword will be using for compare with each line tag, if a line with tag not contain any keyword on 'tag-keyword-list' it will be ignore to output\ntag-keyword-list:\n  - FileDownloader\n\n# translate message map\n# if a message on a line start with provide keyword on the 'trans-msg-map' we will add the value of the keyword on the start of the message, and the word of value will be corlored to highlight it\ntrans-msg-map:\n  # such as this case:\n  # origin message: 'filedownloader:lifecycle:over xxx'\n  # after translate: '| Task OVER | filedownloader:lifecycle:over xxx'\n  'filedownloader:lifecycle:over': 'Task OVER'\n  'fetch data with': 'Start Fetch'\n\n# translate tag map\n# if a tag on a line contain provide keyword on the 'trans-tag-map' we will add the value of the keyword on the start of the message, and the background of the value word will be corlored to highlight it\ntrans-tag-map:\n  # such as this case:\n  # origin message: 'FileDownloadApplication  xxx'\n  # after translate: 'FileDownloadApplication [Thread Change] xxx'\n  'FileDownloadApplication': '[Thread Change]'\n  'DownloadTaskHunter': '[Status Change]'\n  'ConnectTask': '[Request]'\n\n# hide message list\n# if a message on a line start with provide value on the 'hide-msg-list` and the length of the message is less than 100 word, it would be colored with gray to hide\nhide-msg-list:\n  # here we hide message start with 'notify progress' and '~~~callback' because it is too frequently to output and useless in most case\n  - 'notify progress'\n  - '~~~callback'\n\n# highlight list\n# if any value on the 'hightlist-list' display on any message, the background of the value word would be colored to highlight it\nhighlight-list:\n  - 'Path['\n  - 'Url['\n  - 'Tag['\n  - 'range['\n"
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.02734375,
          "content": "include ':demo', ':library'\n"
        }
      ]
    }
  ]
}