{
  "metadata": {
    "timestamp": 1736708874391,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GoogleContainerTools/jib",
      "stars": 13757,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".allstar",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.029296875,
          "content": "*.bat\teol=crlf\n*.cmd\teol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2568359375,
          "content": "build/\n!jib-gradle-plugin/src/test/resources/gradle/application/build/\ntarget/\nout\nbin/\n*.iml\n*.ipr\n*.iws\n.idea\n.gradle/\n# https://github.com/takari/maven-wrapper#usage-without-binary-jar\n**/.mvn/wrapper/maven-wrapper.jar\n.settings/\n.classpath\n.project\n.DS_Store\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.9345703125,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project,\nand in the interest of fostering an open and welcoming community,\nwe pledge to respect all people who contribute through reporting issues,\nposting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project\na harassment-free experience for everyone,\nregardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance,\nbody size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information,\nsuch as physical or electronic\naddresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct.\nBy adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently\napplying these principles to every aspect of managing this project.\nProject maintainers who do not follow or enforce the Code of Conduct\nmay be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior\nmay be reported by opening an issue\nor contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0,\navailable at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.6748046875,
          "content": "\nThis project is currently stable, and we are primarily focused on critical bug fixes and platform evolution to ensure it continues to work for its supported use cases.\n\n# Contributing to Jib\n\nPlease follow the guidelines below before opening an issue or a PR:\n1. Ensure the issue was not already reported. \n2. Open a new issue if you are unable to find an existing issue addressing your problem. Make sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\n3. Discuss the priority and potential solutions with the maintainers in the issue. The maintainers would review the issue and add a label \"Accepting Contributions\" once the issue is ready for accepting contributions. \n4. Open a PR only if the issue is labeled with \"Accepting Contributions\", ensure the PR description clearly describes the problem and solution. Note that an open PR without an issues labeled with \"Accepting Contributions\" will not be accepted.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\nBefore submitting a pull request, please make sure to:\n\n- Identify an existing [issue](https://github.com/GoogleContainerTools/jib/issues) to associate\n  with your proposed change, or [file a new issue](https://github.com/GoogleContainerTools/jib/issues/new).\n- Describe any implementation plans in the issue and wait for a review from the repository maintainers.\n\n### Typical Contribution Cycle\n\n1. Set your git user.email property to the address used for signing the CLA. E.g.\n   ```\n   git config --global user.email \"janedoe@google.com\"\n   ```\n   If you're a Googler or other corporate contributor,\n   use your corporate email address here, not your personal address.\n2. Fork the repository into your own Github account.\n3. We follow our own [Java style guide](STYLE_GUIDE.md) that extends the [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html).\n3. Please include unit tests (and integration tests if applicable) for all new code.\n4. Make sure all existing tests pass (but see the note below about integration tests).\n   * run `./gradlew clean goJF build integrationTest`\n5. Associate the change with an existing issue or file a [new issue](../../issues).\n6. Create a pull request!\n\n## Building Jib\n\nJib comes as 3 public components:\n\n- `jib-core`: a library for building containers\n- `jib-maven-plugin`: a Maven plugin that uses `jib-core` and `jib-plugins-common`\n- `jib-gradle-plugin`: a Gradle plugin that uses `jib-core` and `jib-plugins-common`\n\nAnd 1 internal component:\n\n- `jib-plugins-common`: a library with helpers for maven/gradle plugins\n\nThe project is configured as a single gradle build. Run `./gradlew build` to build the\nwhole project. Run `./gradlew install` to install all public components into the\nlocal maven repository.\n\n### Integration Tests\n**Note** that in order to run integration tests, you will need to set one of the\nfollowing environment variables:\n\n  - If you are using a GCP project then set `JIB_INTEGRATION_TESTING_PROJECT` to the GCP project to use for testing;\n    the registry tested will be `gcr.io/<JIB_INTEGRATION_TESTING_PROJECT>`.\n    - Configure authentication to Container Registry by following these [steps](https://cloud.google.com/container-registry/docs/advanced-authentication).\n    - Enable the Google Container Registry API [here](https://console.cloud.google.com/apis/library/containerregistry.googleapis.com).\n  - If you're not using a GCP project then set `JIB_INTEGRATION_TESTING_LOCATION` to a specific registry for testing. (For example, you can run `docker run -d -p 9990:5000 registry:2` to set up a local registry and set the variable to `localhost:9990`.)\n\nYou will also need Docker installed with the daemon running. Note that the\nintegration tests will create local registries on ports 5000 and 6000.\n\nTo run select integration tests, use `--tests=<testPattern>`, see [gradle docs](https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/TestFilter.html) for `testPattern` examples.\n\n# Development Tips\n\n## Java version\n\nUse Java 8 or 11 for development. https://sdkman.io/ is a helpful tool to switch between Java versions.\n\n## Configuring Eclipse\n\nAlthough jib is a mix of Gradle and Maven projects, we build everything using one\nunified gradle build. There is special code to include some projects directly as\nsource, but importing your project should be pretty straight forward.\n\n  1. Ensure you have installed the Gradle tooling for Eclipse, called\n     _Buildship_ (available from [the Eclipse\n     Marketplace](https://marketplace.eclipse.org/content/buildship-gradle-integration)).\n  1. **Import the Gradle project:** Buildship does [not yet support\n     Eclipse Smart Import](https://github.com/eclipse/buildship/issues/356).\n     Use _File &rarr; Import &rarr; Gradle &rarr; Existing Gradle Project_\n     and import `jib`.\n\nNote that you will likely need to re-apply these changes whenever\nyou refresh or update these projects.\n\n## Debugging the Jib Maven Plugin (`jib-maven-plugin`)\n\n### Build and use a local snapshot\n\nTo use a local build of the `jib-maven-plugin`:\n\n  1. Build and install `jib-maven-plugin` into your local `~/.m2/repository`\n     with `./gradlew jib-maven-plugin:install`;\n  1. Modify your test project's `pom.xml` to reference the `-SNAPSHOT`\n     version of the `com.google.cloud.tools.jib` plugin.\n\nIf developing from within Eclipse with M2Eclipse (the Maven tooling for Eclipse):\n\n  1. Modify your test project's `pom.xml` to reference the `-SNAPSHOT`\n     version of the `com.google.cloud.tools.jib` plugin.\n  1. Create and launch a _Maven Build_ launch configuration for the\n     test project, and ensure the _Resolve Workspace artifacts_ is checked.\n\n### Attaching a debugger\n\nRun `mvnDebug jib:build` and attach to port 8000.\n\nIf developing with Eclipse and M2Eclipse (the Maven tooling for Eclipse), just launch the _Maven Build_ with _Debug_.\n\n## Debugging the Jib Gradle Plugin (`jib-gradle-plugin`)\n\n### Build and use a local snapshot\n\nTo use a local build of the `jib-gradle-plugin`:\n\n  1. Build and install `jib-gradle-plugin` into your local `~/.m2/repository`\n     with `./gradlew jib-gradle-plugin:install`\n  1. Add a `pluginManagement` block to your test project's `settings.gradle` to enable reading plugins from the local maven repository. It must be the first block in the file before any `include` directives.\n        ```groovy\n        pluginManagement {\n          repositories {\n            mavenLocal()\n            gradlePluginPortal()\n          }\n        }\n        ```\n  1. Modify your test project's `build.gradle` to use the [latest snapshot version](jib-gradle-plugin/gradle.properties)\n        ```groovy\n        plugins {\n          // id 'com.google.cloud.tools.jib' version 'major.minor.patch'\n          id 'com.google.cloud.tools.jib' version 'major.minor.patch-SNAPSHOT'\n        }\n\n        ```\n\n### Attaching a debugger\n\nAttach a debugger to a Gradle instance by running Gradle as follows:\n\n```shell\n./gradlew jib \\\n  --no-daemon \\\n  -Dorg.gradle.jvmargs='-agentlib:jdwp:transport=dt_socket,server=y,address=5005,suspend=y'\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.30078125,
          "content": "![stable](https://img.shields.io/badge/stability-stable-brightgreen.svg)\n[![Maven Central](https://img.shields.io/maven-central/v/com.google.cloud.tools/jib-maven-plugin)](https://maven-badges.herokuapp.com/maven-central/com.google.cloud.tools/jib-maven-plugin)\n[![Gradle Plugin Portal](https://img.shields.io/maven-metadata/v/https/plugins.gradle.org/m2/com/google/cloud/tools/jib/com.google.cloud.tools.jib.gradle.plugin/maven-metadata.xml.svg?colorB=007ec6&label=gradle)](https://plugins.gradle.org/plugin/com.google.cloud.tools.jib)\n![Build Status](https://storage.googleapis.com/cloud-tools-for-java-kokoro-build-badges/jib-ubuntu-master-orb.svg)\n![Build Status](https://storage.googleapis.com/cloud-tools-for-java-kokoro-build-badges/jib-windows-master-orb.svg)\n![Build Status](https://storage.googleapis.com/cloud-tools-for-java-kokoro-build-badges/jib-macos-master-orb.svg)\n[![SLSA 3](https://slsa.dev/images/gh-badge-level3.svg)](https://slsa.dev)\n[![Gitter version](https://img.shields.io/gitter/room/gitterHQ/gitter.svg)](https://gitter.im/google/jib)\n\n# Jib\n\n<image src=\"https://github.com/GoogleContainerTools/jib/raw/master/logo/jib-build-docker-java-container-image.png\" alt=\"Jib - Containerize your Java applications.\" width=\"650px\" />\n\n| ☑️  Jib User Survey |\n| :----- |\n| What do you like best about Jib? What needs to be improved? Please tell us by taking a [one-minute survey](https://forms.gle/YRFeamGj51xmgnx28). Your responses will help us understand Jib usage and allow us to serve our customers (you!) better. |\n\n## What is Jib?\n\nJib builds optimized Docker and [OCI](https://github.com/opencontainers/image-spec) images for your Java applications without a Docker daemon - and without deep mastery of Docker best-practices. It is available as plugins for [Maven](jib-maven-plugin) and [Gradle](jib-gradle-plugin) and as a Java library.\n\n- [Maven](https://maven.apache.org/): See documentation for [jib-maven-plugin](jib-maven-plugin).\n- [Gradle](https://gradle.org/): See documentation for [jib-gradle-plugin](jib-gradle-plugin).\n- [Jib Core](jib-core): A general-purpose container-building library for Java.\n- [Jib CLI](jib-cli): A command-line interface for building images that uses Jib Core.\n\nJib works well with Google Cloud Build. For details, see [how to use Jib on Google Cloud Build](docs/google-cloud-build.md).\n\nFor more information, check out the [official blog post](https://cloudplatform.googleblog.com/2018/07/introducing-jib-build-java-docker-images-better.html) or watch [this talk](https://www.youtube.com/watch?v=H6gR_Cv4yWI) ([slides](https://speakerdeck.com/coollog/build-containers-faster-with-jib-a-google-image-build-tool-for-java-applications)).\n\n## Goals\n\n* **Fast** - Deploy your changes fast. Jib separates your application into multiple layers, splitting dependencies from classes. Now you don’t have to wait for Docker to rebuild your entire Java application - just deploy the layers that changed.\n\n* **Reproducible** - Rebuilding your container image with the same contents always generates the same image. Never trigger an unnecessary update again.\n\n* **Daemonless** - Reduce your CLI dependencies. Build your Docker image from within Maven or Gradle and push to any registry of your choice. *No more writing Dockerfiles and calling docker build/push.*\n\n## Quickstart\n\n* **Maven** - See the jib-maven-plugin [Quickstart](jib-maven-plugin#quickstart).\n\n* **Gradle** - See the jib-gradle-plugin [Quickstart](jib-gradle-plugin#quickstart).\n\n* **Jib Core** - See the Jib Core [Quickstart](jib-core#adding-jib-core-to-your-build).\n\n* **Jib CLI** - See the Jib CLI [doc](jib-cli).\n\n## Examples\n\nThe [examples](examples) directory includes the following examples (and more).\n   * [helloworld](examples/helloworld)\n   * [Spring Boot](examples/spring-boot)\n   * [Micronaut](examples/micronaut)\n   * [Multi-module project](examples/multi-module)\n   * [Spark Java using Java Agent](examples/java-agent)\n\n## How Jib Works\n\nWhereas traditionally a Java application is built as a single image layer with the application JAR, Jib's build strategy separates the Java application into multiple layers for more granular incremental builds. When you change your code, only your changes are rebuilt, not your entire application. These layers, by default, are layered on top of an [OpenJDK base image](docs/default_base_image.md), but you can also configure a custom base image. For more information, check out the [official blog post](https://cloudplatform.googleblog.com/2018/07/introducing-jib-build-java-docker-images-better.html) or watch [this talk](https://www.youtube.com/watch?v=H6gR_Cv4yWI) ([slides](https://speakerdeck.com/coollog/build-containers-faster-with-jib-a-google-image-build-tool-for-java-applications)).\n\nSee also [rules_docker](https://github.com/bazelbuild/rules_docker) for a similar existing container image build tool for the [Bazel build system](https://github.com/bazelbuild/bazel).\n\n## Need Help?\n\nA lot of questions are already answered!\n\n* [Frequently Asked Questions (FAQ)](docs/faq.md)\n* [Stack Overflow](https://stackoverflow.com/questions/tagged/jib)\n* [GitHub issues](https://stackoverflow.com/questions/tagged/jib)\n\n_For usage questions, please ask them on Stack Overflow._\n\n## Privacy\n\nSee the [Privacy page](docs/privacy.md).\n\n## Get involved with the community\n\nWe welcome contributions! Here's how you can contribute:\n\n* [Browse issues](https://github.com/GoogleContainerTools/jib/issues) or [file an issue](https://github.com/GoogleContainerTools/jib/issues/new)\n* Chat with us on [gitter](https://gitter.im/google/jib)\n* Join the [jib-users mailing list](https://groups.google.com/forum/#!forum/jib-users)\n* Contribute:\n  * *Read the [contributing guide](https://github.com/GoogleContainerTools/jib/blob/master/CONTRIBUTING.md) before starting work on an issue*\n  * Try to fix [good first issues](https://github.com/GoogleContainerTools/jib/labels/good%20first%20issue)\n  * Help out on [issues that need help](https://github.com/GoogleContainerTools/jib/labels/kind%2Fquestion)\n  * Join in on [discussion issues](https://github.com/GoogleContainerTools/jib/labels/discuss)\n<!--  * Read the [style guide] -->\n*Make sure to follow the [Code of Conduct](https://github.com/GoogleContainerTools/jib/blob/master/CODE_OF_CONDUCT.md) when contributing so we can foster an open and welcoming community.*\n\n## Disclaimer\n\nThis is not an officially supported Google product.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.767578125,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| jib-maven-plugin v3.x   | :heavy_check_mark: |\n| jib-gradle-plugin v3.x   | :heavy_check_mark:                |\n| jib-core v0.x  | :heavy_check_mark:                |\n| jib-cli v0.x   | :heavy_check_mark:                |\n\n\n## Reporting a Vulnerability\n\nTo report a security issue, please use [https://g.co/vulnz](https://g.co/vulnz).\nWe use g.co/vulnz for our intake, and do coordination and disclosure here on\nGitHub (including using GitHub Security Advisory). The Google Security Team will\nrespond within 5 working days of your report on g.co/vulnz.\n"
        },
        {
          "name": "STYLE_GUIDE.md",
          "type": "blob",
          "size": 2.580078125,
          "content": "# Style guide\n\nThis style guide defines specific coding standards and advice for this Java codebase. The rules here are extensions to the [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html).\n\nPlease see the [contributing guide](CONTRIBUTING.md) for general guidance for contributing to this project.\n\n### Automatic formatting\n\nAutomatic formatting should be performed with `./gradlew goJF` or `./mvnw fmt:format`. Formatting all projects can be done with `./build.sh format`.\n\n### Class member order\n\n*Extends [3.4.2](https://google.github.io/styleguide/javaguide.html#s3.4.2-ordering-class-contents)*\n\nClass members should be in the following order, in decreasing priority:\n\n1. Static before non-static\n1. Nested classes/interfaces before fields before constructors before methods\n1. Public before private\n1. Final before non-final\n\n### Public APIs\n\nUser-facing methods (such as those in Jib Core) should not have types in their signature that are not standard JDK classes. For example, a parameter should take type `List` rather than Guava's `ImmutableList`.\n\nJib Core's formal API should not expose internal Jib types. In other words, public classes in the `com.google.cloud.tools.jib.api` package should not contain any public methods that have internal types (Jib classes outside of the `api` package) in the method signature. This includes return types, parameters, thrown types, and javadoc links on public methods.\n\n### Package hierarchy\n\nPackages should depend on each other without cycles.\n\nThe following is a list of current `jib-core` packages (under `com.google.cloud.tools.jib`) and their immediate dependencies. These can be amended as code changes, but there should not be cyclical dependencies.\n\n- `api`\n- `async`\n- `blob` - `filesystem`, `hash`, `image` (cycle - should fix)\n- `builder` - `async`, `blob`, `builder`, `cache` `configuration`, `docker`, `event`, `filesystem`, `global`, `http`, `image`, `json`, `registry`\n- `cache` - `blob`, `filesystem`, `hash`, `image`, `json`\n- `configuration` - `cache`, `filesystem`, `event`, `image`, `registry`\n- `docker` - `blob`, `cache`, `image`, `json`, `tar`\n- `event`\n- `filesystem`\n- `frontend` - `configuration`, `event`, `filesystem`, `image`, `registry`\n- `global`\n- `hash` - `blob`, `image`\n- `http` - `blob`\n- `image` - `blob`, `configuration` (cycle - should fix - `ImageToJsonTranslator`), `filesystem`, `json`, `tar`\n- `json` - `blob`\n- `registry` - `blob`, `builder` (cycle - should fix - `RegistryClient`), `configuration` (cycle - should fix - `DockerConfigCredentialRetriever`), `event`, `global`, `http`, `image`, `json`\n- `tar` - `blob`\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 15.98046875,
          "content": "// define all versioned plugins here and apply in subprojects as necessary without version\nplugins {\n  id 'com.github.sherter.google-java-format' version '0.9' apply false\n  id 'net.ltgt.errorprone' version '3.1.0' apply false\n  id 'net.researchgate.release' version '2.8.1' apply false\n  id 'com.gradle.plugin-publish' version '1.2.0' apply false\n  id 'io.freefair.maven-plugin' version '5.3.3.3' apply false\n\n  // apply so that we can collect quality metrics at the root project level\n  id 'org.sonarqube' version '4.0.0.2929'\n}\n\n/* PROJECT DEPENDENCY VERSIONS */\n// define all common versioned dependencies here\nproject.ext.dependencyStrings = [\n  // For Google libraries, check the following boms for best compatibility.\n  // - https://github.com/googleapis/java-shared-dependencies\n  // - https://github.com/googleapis/java-cloud-bom\n  GOOGLE_HTTP_CLIENT: 'com.google.http-client:google-http-client:1.42.2',\n  GOOGLE_HTTP_CLIENT_APACHE_V2: 'com.google.http-client:google-http-client-apache-v2:1.42.2',\n  GOOGLE_AUTH_LIBRARY_OAUTH2_HTTP: 'com.google.auth:google-auth-library-oauth2-http:1.10.0',\n  GUAVA: 'com.google.guava:guava:32.1.2-jre',\n  JSR305: 'com.google.code.findbugs:jsr305:3.0.2', // transitively pulled in by GUAVA\n\n  // for Build Plan and Jib Plugins Extension API\n  BUILD_PLAN: 'com.google.cloud.tools:jib-build-plan:0.4.0',\n  EXTENSION_COMMON: 'com.google.cloud.tools:jib-plugins-extension-common:0.2.0',\n  GRADLE_EXTENSION: 'com.google.cloud.tools:jib-gradle-plugin-extension-api:0.4.0',\n  MAVEN_EXTENSION: 'com.google.cloud.tools:jib-maven-plugin-extension-api:0.4.0',\n\n  COMMONS_COMPRESS: 'org.apache.commons:commons-compress:1.26.0',\n  ZSTD_JNI: 'com.github.luben:zstd-jni:1.5.5-5',\n  COMMONS_TEXT: 'org.apache.commons:commons-text:1.10.0',\n  JACKSON_BOM: 'com.fasterxml.jackson:jackson-bom:2.15.2',\n  JACKSON_DATABIND: 'com.fasterxml.jackson.core:jackson-databind',\n  JACKSON_DATAFORMAT_YAML: 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml',\n  JACKSON_DATATYPE_JSR310: 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',\n  ASM: 'org.ow2.asm:asm:9.5',\n  PICOCLI: 'info.picocli:picocli:4.7.4',\n\n  MAVEN_API: 'org.apache.maven:maven-plugin-api:3.9.3',\n  MAVEN_CORE: 'org.apache.maven:maven-core:3.9.3',\n  MAVEN_COMPAT: 'org.apache.maven:maven-compat:3.9.6',\n  MAVEN_PLUGIN_ANNOTATIONS: 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.9.0',\n\n  //test\n  TRUTH: 'com.google.truth:truth:1.1.5',\n  TRUTH8: 'com.google.truth.extensions:truth-java8-extension:1.1.5', // should match TRUTH version\n  JUNIT: 'junit:junit:4.13.2',\n  JUNIT_PARAMS: 'pl.pragmatists:JUnitParams:1.1.1',\n  MAVEN_TESTING_HARNESS: 'org.apache.maven.plugin-testing:maven-plugin-testing-harness:3.3.0',\n  MAVEN_VERIFIER: 'org.apache.maven.shared:maven-verifier:1.8.0',\n  MOCKITO_CORE: 'org.mockito:mockito-core:4.11.0',\n  SISU_PLEXUS: 'org.eclipse.sisu:org.eclipse.sisu.plexus:0.3.5',\n  SLF4J_API: 'org.slf4j:slf4j-api:2.0.7',\n  SLF4J_SIMPLE: 'org.slf4j:slf4j-simple:2.0.9',\n  SYSTEM_RULES:  'com.github.stefanbirkner:system-rules:1.19.0',\n  JBCRYPT: 'org.mindrot:jbcrypt:0.4',\n]\n\nimport net.ltgt.gradle.errorprone.CheckSeverity\n\n// `java-library` must be applied before `java`.\n// java-gradle-plugin (in jib-gradle-plugin) auto applies java-library, so ensure that happens first\n['jib-core', 'jib-gradle-plugin', 'jib-gradle-plugin-extension-api', 'jib-maven-plugin-extension-api'].each { projectName ->\n  project(projectName).apply plugin: 'java-library'\n}\n\nsubprojects {\n  group 'com.google.cloud.tools'\n\n  repositories {\n    mavenCentral()\n  }\n\n  apply plugin: 'java'\n  apply plugin: 'checkstyle'\n  apply plugin: 'com.github.sherter.google-java-format'\n  apply plugin: 'net.ltgt.errorprone'\n  apply plugin: 'jacoco'\n\n  // Guava update breaks unit tests. Workaround mentioned in https://github.com/google/guava/issues/6612#issuecomment-1614992368.\n  sourceSets.all {\n    configurations.getByName(runtimeClasspathConfigurationName) {\n      attributes.attribute(Attribute.of(\"org.gradle.jvm.environment\", String), \"standard-jvm\")\n    }\n    configurations.getByName(compileClasspathConfigurationName) {\n      attributes.attribute(Attribute.of(\"org.gradle.jvm.environment\", String), \"standard-jvm\")\n    }\n  }\n\n  sourceCompatibility = JavaVersion.VERSION_1_8\n  targetCompatibility = JavaVersion.VERSION_1_8\n  compileJava.options.encoding = 'UTF-8'\n  compileJava.options.compilerArgs += [ '-Xlint:deprecation' ]\n  compileTestJava.options.compilerArgs += [ '-Xlint:deprecation' ]\n\n  // Use this to ensure we correctly override transitive dependencies\n  // TODO: There might be a plugin that does this\n  task ensureTransitiveDependencyOverrides {\n    def dependenciesList = [dependencyStrings.GOOGLE_HTTP_CLIENT, dependencyStrings.GOOGLE_HTTP_CLIENT_APACHE_V2]\n    def rules = dependenciesList.collectEntries{[/*name*/ it.split(':')[1], /*version*/ it.split(':')[2]]}\n    doLast {\n      configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->\n        def dependency = artifact.moduleVersion.id\n        if (rules[dependency.name] && rules[dependency.name] != dependency.version) {\n          throw new GradleException(\n              dependency.name + ' version error in ' + project\n              + ', expected:' + rules[dependency.name]\n              + ', found:' + dependency.version);\n        }\n      }\n    }\n  }\n  compileJava.dependsOn ensureTransitiveDependencyOverrides\n  /* PROJECT DEPENDENCY VERSIONS */\n\n  /* ERROR PRONE */\n  dependencies {\n    // NullAway errorprone plugin\n    annotationProcessor 'com.uber.nullaway:nullaway:0.10.7'\n    errorprone 'com.google.errorprone:error_prone_core:2.10.0'\n    // Using github.com/google/error-prone-javac is required when running on\n    // JDK 8. Remove when migrating to JDK 11.\n    if (System.getProperty('java.version').startsWith('1.8.')) {\n      errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')\n    }\n  }\n\n  // Adds NullAway errorprone checks.\n  tasks.withType(JavaCompile) {\n    if (!name.toLowerCase().contains('test')) {\n      options.errorprone {\n        check('NullAway', CheckSeverity.ERROR)\n        option('NullAway:ExcludedFieldAnnotations', 'org.apache.maven.plugins.annotations.Component')\n        option('NullAway:AnnotatedPackages', 'com.google.cloud.tools')\n      }\n    }\n  }\n  /* ERROR PRONE */\n\n  /* GOOGLE JAVA FORMAT */\n  googleJavaFormat {\n    toolVersion = '1.7'\n  }\n  check.dependsOn verifyGoogleJavaFormat\n  /* GOOGLE JAVA FORMAT */\n\n  /* CHECKSTYLE */\n  checkstyle {\n    toolVersion = '8.29'\n\n    // use google checks from the jar\n    def googleChecks = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml').asString()\n\n    // set the location of the suppressions file referenced in google_checks.xml\n    configProperties['org.checkstyle.google.suppressionfilter.config'] = getConfigDirectory().file('checkstyle-suppressions.xml').get().toString()\n\n    // add in copyright header check on only java files (replace the last </module> in file)\n    def copyrightChecks = '''\n        <module name=\"RegexpHeader\">\n            <property name=\"headerFile\" value=\"${config_loc}/copyright-java.header\"/>\n            <property name=\"fileExtensions\" value=\"java\"/>\n            <property name=\"id\" value=\"header\"/>\n        </module>\n    </module>\n    '''\n    googleChecks = googleChecks.substring(0, googleChecks.lastIndexOf('</module>')) + copyrightChecks\n\n    // this is the actual checkstyle config\n    config = resources.text.fromString(googleChecks)\n\n    maxErrors = 0\n    maxWarnings = 0\n  }\n  /* CHECKSTYLE */\n\n  /* TEST CONFIG */\n  tasks.withType(Test).configureEach {\n    reports.html.outputLocation = file(\"${reporting.baseDir}/${name}\")\n  }\n\n  test {\n    testLogging {\n      showStandardStreams = true\n      exceptionFormat = 'full'\n    }\n  }\n  // jar to export tests classes for import in other project by doing:\n  // testCompile project(path:':project-name', configuration:'tests')\n  task testJar(type: Jar) {\n    from sourceSets.test.output.classesDirs\n    archiveClassifier = 'tests'\n  }\n  // to import resources do: sourceSets.test.resources.srcDirs project(':project-name').sourceSets.test.resources\n\n  configurations {\n    tests\n  }\n\n  artifacts {\n    tests testJar\n  }\n  /* TEST CONFIG */\n\n  /* INTEGRATION TESTS */\n  sourceSets {\n    integrationTest {\n      java.srcDir file('src/integration-test/java')\n      resources.srcDir file('src/integration-test/resources')\n      compileClasspath += sourceSets.main.output + sourceSets.test.output\n      runtimeClasspath += sourceSets.main.output + sourceSets.test.output\n    }\n  }\n\n  configurations {\n    integrationTestImplementation.extendsFrom testImplementation\n    integrationTestImplementation.setCanBeResolved(true)\n    integrationTestRuntime.extendsFrom testRuntime\n  }\n\n  // Integration tests must be run explicitly\n  task integrationTest(type: Test) {\n    testClassesDirs = sourceSets.integrationTest.output.classesDirs\n    classpath = sourceSets.integrationTest.runtimeClasspath\n    systemProperty '_JIB_DISABLE_USER_AGENT', true\n  }\n\n\n  task integrationTestJar(type: Jar) {\n    from sourceSets.integrationTest.output.classesDirs\n    archiveClassifier = 'integration-tests'\n  }\n\n  configurations {\n    integrationTests\n  }\n\n  artifacts {\n    integrationTests integrationTestJar\n  }\n\n  integrationTest {\n    testLogging {\n      showStandardStreams = true\n      exceptionFormat = 'full'\n    }\n  }\n  /* INTEGRATION TESTS */\n\n  /* JAVADOC ENFORCEMENT */\n  // Fail build on javadoc warnings\n  tasks.withType(Javadoc) {\n    options.addBooleanOption('Xwerror', true)\n  }\n  assemble.dependsOn javadoc\n  /* JAVADOC ENFORCEMENT */\n\n  /* JAR */\n  jar {\n    manifest {\n      attributes 'Implementation-Title': project.name,\n                 'Implementation-Version': archiveVersion,\n                 'Built-By': System.getProperty('user.name'),\n                 'Built-Date': new Date(),\n                 'Built-JDK': System.getProperty('java.version'),\n                 'Built-Gradle': gradle.gradleVersion\n    }\n  }\n  normalization {\n    runtimeClasspath {\n      metaInf {\n        ignoreAttribute(\"Built-By\")\n        ignoreAttribute(\"Built-Date\")\n      }\n    }\n  }\n  /* JAR */\n\n  /* MAVEN CENTRAL RELEASES */\n  // for projects that release to maven central\n  project.ext.configureMavenRelease = {\n    apply plugin: 'maven-publish'\n    task sourceJar(type: Jar) {\n      from sourceSets.main.allJava\n      archiveClassifier = 'sources'\n    }\n\n    task javadocJar(type: Jar, dependsOn: javadoc) {\n      from javadoc.destinationDir\n      archiveClassifier = 'javadoc'\n    }\n\n    publishing {\n      publications {\n        mavenJava(MavenPublication) {\n          pom {\n            // to be filled by subproject after calling configure configureMavenRelease\n            // name = ''\n            // description = ''\n\n            url = 'https://github.com/GoogleContainerTools/jib'\n            inceptionYear = '2018'\n\n            licenses {\n              license {\n                name = 'The Apache License, Version 2.0'\n                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                distribution = 'repo'\n              }\n            }\n            developers {\n              developer {\n                id = 'chanseokoh'\n                name = 'Chanseok Oh'\n                email = 'chanseok@google.com'\n              }\n              developer {\n                id = 'loosebazooka'\n                name = 'Appu Goundan'\n                email = 'appu@google.com'\n              }\n              developer {\n                id = 'TadCordle'\n                name = 'Tad Cordle'\n                email = 'tcordle@google.com'\n              }\n              developer {\n                id = 'briandealwis'\n                name = 'Brian de Alwis'\n                email = 'bdealwis@google.com'\n              }\n              developer {\n                id = 'coollog'\n                name = 'Qingyang Chen'\n              }\n            }\n            scm {\n              url = 'https://github.com/GoogleContainerTools/jib'\n              connection = 'scm:https://github.com/GoogleContainerTools/jib.git'\n              developerConnection = 'scm:git://github.com/GoogleContainerTools/jib.git'\n            }\n          }\n        }\n      }\n    }\n    generatePomFileForMavenJavaPublication {\n      destination = file(\"${project.buildDir}/pom/${project.name}-${project.version}.pom\")\n    }\n    // define a special install task that handles installing locally for manual testing\n    task install {\n      dependsOn publishToMavenLocal\n    }\n\n    // For kokoro sign and release to maven central\n    task prepareRelease(type: Copy) {\n      from jar\n      from sourceJar\n      from javadocJar\n      from generatePomFileForMavenJavaPublication\n      into \"${project.buildDir}/release-artifacts\"\n      dependsOn build\n      dependsOn cleanPrepareRelease\n    }\n  }\n  /* MAVEN CENTRAL RELEASE */\n\n  /* INCLUDED PROJECT DEPENDENCY HELPER */\n  // to keep track of all source projects\n  project.ext.sourceProjects = []\n  // sourceProject(Project) accepts a project and adds it as a dependency in a special manner:\n  // 1. force evaluation of the project first\n  // 2. add the project classes as \"compileOnly\" and make it available to tests in \"testImplementation\"\n  // 3. add the project's dependencies as \"implementation\"\n  // 4. remove any transitive reference of any sourceProject depenency that may have appeared\n  // 5. add the project's classes to the final jar\n  // Other nice effects (vs shadowJar)\n  // 1. Generated poms will be correct\n  // 2. Configuration is isolated to this single \"sourceProject\" call\n  // 3. These configurations are compliant with IDEs\n  project.ext.sourceProject = { Project dependencyProject ->\n    // make sure those projects are evaluated first so we know their dependencies\n    project.evaluationDependsOn dependencyProject.path\n    // add the sourceProjecect dependency\n    def dependencyProjectClasses = dependencyProject.sourceSets.main.output\n    dependencies {\n      // add the dependencyProject classes as compileOnly, make it available to tests\n      compileOnly(dependencyProject) { transitive = false }\n      testImplementation dependencyProjectClasses\n      // add dependencyProject's dependencies as implementation dependencies\n      implementation dependencyProject.configurations.implementation.dependencies\n      if (dependencyProject.configurations.hasProperty('api')) {\n        implementation dependencyProject.configurations.api.dependencies\n      }\n    }\n    // keep track of all dependencyProjects for removal\n    sourceProjects += dependencyProject\n    // if we find any project dependencies that were brought in transitively, go remove them\n    project.configurations.implementation.dependencies.removeAll { d ->\n      return d instanceof ProjectDependency && sourceProjects.contains(d.dependencyProject)\n    }\n    // adds dependencyProject's classes to jar (fat jar-esque)\n    jar {\n      from dependencyProjectClasses\n    }\n    // also configure the java-gradle-plugin if necessary\n    if (project.hasProperty('gradlePlugin')) {\n      project.tasks.pluginUnderTestMetadata.pluginClasspath.from dependencyProjectClasses\n    }\n  }\n\n  // ensure no dependencies in the implementation group are project dependencies\n  project.ext.ensureNoProjectDependencies = {\n    project.afterEvaluate {\n      project.configurations.implementation.dependencies.each { dependency ->\n        if (dependency instanceof ProjectDependency) {\n          throw new GradleException('disallowed project dependency:' + dependency + ', in project:' + project);\n        }\n      }\n    }\n  }\n\n  /* TEST COVERAGE */\n  jacocoTestReport {\n    reports {\n      xml.required = true\n      html.required = false\n    }\n  }\n  /* TEST COVERAGE */\n\n  /* INCLUDED PROJECT DEPENDENCY HELPER */\n\n  /* LOCAL DEVELOPMENT HELPER TASKS */\n  tasks.register('dev') {\n    classes.dependsOn tasks.googleJavaFormat\n    dependsOn check\n    dependsOn javadoc\n  }\n\n  tasks.register('devFull') {\n    dependsOn dev\n    dependsOn integrationTest\n  }\n  /* LOCAL DEVELOPMENT HELPER TASKS */\n}\n\n/* SONARQUBE */\nsonarqube {\n  properties {\n    property 'sonar.projectName', 'jib'\n    property 'sonar.projectKey', 'GoogleContainerTools_jib'\n    property 'sonar.host.url', 'https://sonarcloud.io'\n    property 'sonar.organization', 'googlecontainertools-1'\n  }\n}\n/* SONARQUBE */\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.0517578125,
          "content": "org.gradle.jvmargs=-Xmx1024m\norg.gradle.caching=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.1806640625,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.1337890625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jib-build-plan",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-gradle-plugin-extension-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-gradle-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-maven-plugin-extension-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-maven-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-plugins-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "jib-plugins-extension-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "kokoro",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "proposals",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.66015625,
          "content": "pluginManagement {\n    repositories {\n        mavenCentral()\n        // Workaround from: https://github.com/gradle/gradle/issues/15406#issuecomment-1020352934\n        gradlePluginPortal {\n            this as MavenArtifactRepository\n            metadataSources {\n                mavenPom()\n                artifact()\n                ignoreGradleMetadataRedirection()\n            }\n        }\n    }\n}\n\ninclude \":jib-build-plan\"\ninclude \":jib-plugins-extension-common\"\ninclude \":jib-gradle-plugin-extension-api\"\ninclude \":jib-maven-plugin-extension-api\"\ninclude \":jib-core\"\ninclude \":jib-plugins-common\"\ninclude \":jib-gradle-plugin\"\ninclude \":jib-maven-plugin\"\ninclude \":jib-cli\"\n"
        }
      ]
    }
  ]
}