{
  "metadata": {
    "timestamp": 1736708849441,
    "page": 49,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openzipkin/zipkin",
      "stars": 17082,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 2.3623046875,
          "content": "# https://docs.docker.com/engine/reference/builder/#dockerignore-file\n**\n\n# Scripts that run within Docker\n!build-bin/maybe_install_npm\n!build-bin/maven/maven_build\n!build-bin/maven/maven_build_or_unjar\n!build-bin/maven/maven_opts\n!build-bin/maven/maven_unjar\n!build-bin/docker/docker-healthcheck\n\n!docker/start-zipkin\n!/zipkin-server/target/zipkin-server-*exec.jar\n!/zipkin-server/target/zipkin-server-*slim.jar\n\n!docker/test-images/zipkin-activemq/start-activemq\n\n!docker/test-images/zipkin-cassandra/install.sh\n!docker/test-images/zipkin-cassandra/start-cassandra\n!zipkin-storage/cassandra/src/main/resources/*.cql\n\n!docker/test-images/zipkin-elasticsearch7/config/\n!docker/test-images/zipkin-elasticsearch7/start-elasticsearch\n!docker/test-images/zipkin-elasticsearch8/config/\n!docker/test-images/zipkin-elasticsearch8/start-elasticsearch\n\n!docker/test-images/zipkin-opensearch2/config/\n!docker/test-images/zipkin-opensearch2/start-opensearch\n\n!docker/test-images/zipkin-eureka/src/\n!docker/test-images/zipkin-eureka/pom.xml\n!docker/test-images/zipkin-eureka/start-eureka\n\n!docker/test-images/zipkin-kafka/install.sh\n!docker/test-images/zipkin-kafka/start-kafka-zookeeper\n\n!docker/test-images/zipkin-mysql/install.sh\n!docker/test-images/zipkin-mysql/start-mysql\n!zipkin-storage/mysql-v1/src/main/resources/mysql.sql\n\n!docker/test-images/zipkin-rabbitmq/config/\n\n!docker/test-images/zipkin-ui/nginx.conf\n!docker/test-images/zipkin-ui/start-nginx\n!zipkin-lens/target/zipkin-lens-*.jar\n\n!docker/test-images/zipkin-uiproxy/nginx.conf\n!docker/test-images/zipkin-uiproxy/start-nginx\n\n# Allow on-demand \"mvn package\". <modules> referenced in pom.xml must be added even if not built\n!zipkin/src/main/**\n!zipkin-collector/src/main/**\n!zipkin-collector/core/src/main/**\n!zipkin-collector/activemq/src/main/**\n!zipkin-collector/kafka/src/main/**\n!zipkin-collector/rabbitmq/src/main/**\n!zipkin-collector/scribe/src/main/**\n!zipkin-junit5/src/main/**\n!zipkin-storage/src/main/**\n!zipkin-storage/cassandra/src/main/**\n!zipkin-storage/mysql-v1/src/main/**\n!zipkin-storage/elasticsearch/src/main/**\n!zipkin-server/src/main/**\n!zipkin-tests/src/main/**\n!zipkin-lens/javadoc/**\n!zipkin-lens/public/**\n!zipkin-lens/src/**\n!zipkin-lens/.linguirc\n!zipkin-lens/.npmrc\n!zipkin-lens/index.html\n!zipkin-lens/package-lock.json\n!zipkin-lens/package.json\n!zipkin-lens/pom.xml\n!zipkin-lens/tsconfig.json\n!zipkin-lens/vite.config.ts\n!**/pom.xml\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4013671875,
          "content": "*.java text=auto eol=lf\n*.bnd text=auto eol=lf\n\n*.sh text=auto eol=lf\n.*_profile text=auto eol=lf\n\n*.md text=auto eol=lf\n*.txt text=auto eol=lf\n\n*.yml text=auto eol=lf\n*.yaml text=auto eol=lf\n*.xml text=auto eol=lf\n*.properties text=auto eol=lf\n\n*.js text=auto eol=lf\n*.jsx text=auto eol=lf\n*.ts text=auto eol=lf\n*.tsx text=auto eol=lf\n*.json text=auto eol=lf\n*.mustache text=auto eol=lf\n*.css text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.591796875,
          "content": "*~\n#*\n*#\n.#*\ndependency-reduced-pom.xml\n.factorypath\n.classpath\n.project\n.settings/\n.springBeans\ntarget/\n_site/\n.idea\n*.iml\n*.swp\n# quickstart or temporary copies of zipkin's jar\n/*.jar\n# temporary directory used by build-bin/javadoc_to_gh_pages for building gh-pages\n/javadoc-builddir\n.DS_Store\n\n# This project does not use Gradle but some developers may use it to e.g., setup a Node environment.\n# It doesn't hurt to just exclude it here.\n.gradle\n\n# This project does not use Yarn but some developers may use it to e.g., start zipkin-lens dev server.\n# It doesn't hurt to just exclude it here.\nyarn.lock\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".settings.xml",
          "type": "blob",
          "size": 0.7880859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright The OpenZipkin Authors\n    SPDX-License-Identifier: Apache-2.0\n\n-->\n<settings xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n    xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                          http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <servers>\n    <server>\n      <id>gpg.passphrase</id>\n      <passphrase>${env.GPG_PASSPHRASE}</passphrase>\n    </server>\n    <server>\n      <id>ossrh</id>\n      <username>${env.SONATYPE_USER}</username>\n      <password>${env.SONATYPE_PASSWORD}</password>\n    </server>\n    <server>\n      <id>github.com</id>\n      <username>zipkinci</username>\n      <password>${env.GH_TOKEN}</password>\n    </server>\n  </servers>\n</settings>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.5322265625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\nThis product contains a modified part of Gson, distributed by Google:\n\n  * License: Apache License v2.0\n  * Homepage: https://github.com/google/gson\n\nThis product contains a modified part of Guava, distributed by Google:\n\n  * License: Apache License v2.0\n  * Homepage: https://github.com/google/guava\n\nThis product contains a modified part of Okio, distributed by Square:\n\n  * License: Apache License v2.0\n  * Homepage: https://github.com/square/okio\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.357421875,
          "content": "# zipkin\n\n[![Gitter chat](http://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg)](https://gitter.im/openzipkin/zipkin)\n[![Build Status](https://github.com/openzipkin/zipkin/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/openzipkin/zipkin/actions?query=workflow%3Atest+branch%3Amaster)\n[![Maven Central](https://img.shields.io/maven-central/v/io.zipkin/zipkin-server.svg)](https://search.maven.org/search?q=g:io.zipkin%20AND%20a:zipkin-server)\n\n[Zipkin](https://zipkin.io) is a distributed tracing system. It helps gather\ntiming data needed to troubleshoot latency problems in service architectures.\nFeatures include both the collection and lookup of this data.\n\nIf you have a trace ID in a log file, you can jump directly to it. Otherwise,\nyou can query based on attributes such as service, operation name, tags and\nduration. Some interesting data will be summarized for you, such as the\npercentage of time spent in a service, and whether operations failed.\n\n<img src=\"https://zipkin.io/public/img/web-screenshot.png\" alt=\"Trace view screenshot\" />\n\nThe Zipkin UI also presents a dependency diagram showing how many traced\nrequests went through each application. This can be helpful for identifying\naggregate behavior including error paths or calls to deprecated services.\n\n<img src=\"https://zipkin.io/public/img/dependency-graph.png\" alt=\"Dependency graph screenshot\" />\n\nApplication’s need to be “instrumented” to report trace data to Zipkin. This\nusually means configuration of a [tracer or instrumentation library](https://zipkin.io/pages/tracers_instrumentation.html). The most\npopular ways to report data to Zipkin are via http or Kafka, though many other\noptions exist, such as Apache ActiveMQ, gRPC and RabbitMQ. The data served to\nthe UI is stored in-memory, or persistently with a supported backend such as\nApache Cassandra or Elasticsearch.\n\n## Quick-start\n\nThe quickest way to get started is to fetch the [latest released server](https://search.maven.org/remote_content?g=io.zipkin&a=zipkin-server&v=LATEST&c=exec) as a self-contained\nexecutable jar. Note that the Zipkin server requires minimum JRE 17+. For example:\n\n```bash\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s\njava -jar zipkin.jar\n```\n\nYou can also start Zipkin via Docker.\n```bash\n# Note: this is mirrored as ghcr.io/openzipkin/zipkin\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\nOnce the server is running, you can view traces with the Zipkin UI at http://localhost:9411/zipkin.\n\nIf your applications aren't sending traces, yet, configure them with [Zipkin instrumentation](https://zipkin.io/pages/tracers_instrumentation) or try one of our [examples](https://github.com/openzipkin?utf8=%E2%9C%93&q=example).\n\nCheck out the [`zipkin-server`](zipkin-server/README.md) documentation for configuration details, or [Docker examples](docker/examples) for how to use docker-compose.\n\n### Zipkin Slim\n\nThe slim build of Zipkin is smaller and starts faster. It supports in-memory and Elasticsearch storage, but doesn't support messaging transports like Kafka or RabbitMQ. If these constraints match your needs, you can try slim like below:\n\nRunning via Java:\n```bash\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s io.zipkin:zipkin-server:LATEST:slim zipkin.jar\njava -jar zipkin.jar\n```\n\nRunning via Docker:\n```bash\n# Note: this is mirrored as ghcr.io/openzipkin/zipkin-slim\ndocker run -d -p 9411:9411 openzipkin/zipkin-slim\n```\n\nRunning via [Homebrew](https://formulae.brew.sh/formula/zipkin):\n```bash\nbrew install zipkin\n# to run in foreground\nzipkin\n# to run in background\nbrew services start zipkin\n```\n\n## Core Library\nThe [core library](zipkin/src/main/java/zipkin2) is used by both Zipkin instrumentation and the Zipkin server.\n\nThis includes built-in codec for Zipkin's v1 and v2 json formats. A direct dependency on gson\n(json library) is avoided by minifying and repackaging classes used. The result is a 155k jar which\nwon't conflict with any library you use.\n\nEx.\n```java\n// All data are recorded against the same endpoint, associated with your service graph\nlocalEndpoint = Endpoint.newBuilder().serviceName(\"tweetie\").ip(\"192.168.0.1\").build()\nspan = Span.newBuilder()\n    .traceId(\"d3d200866a77cc59\")\n    .id(\"d3d200866a77cc59\")\n    .name(\"targz\")\n    .localEndpoint(localEndpoint)\n    .timestamp(epochMicros())\n    .duration(durationInMicros)\n    .putTag(\"compression.level\", \"9\");\n\n// Now, you can encode it as json\nbytes = SpanBytesEncoder.JSON_V2.encode(span);\n```\n\nNote: The above is just an example, most likely you'll want to use an existing tracing library like [Brave](https://github.com/openzipkin/brave)\n\n### Core Library Requires Java 8+\n\nThe minimum Java language level of the core library is 8. This helps support those writing agent\ninstrumentation. Version 2.x was the last to support Java 6.\n\n*Note*: [zipkin-reporter-brave](https://github.com/openzipkin/zipkin-reporter-java/blob/master/brave/README.md)\ndoes not use this library. So, [brave](https://github.com/openzipkin/brave) still supports Java 6.\n\n## Storage Component\nZipkin includes a [StorageComponent](zipkin/src/main/java/zipkin2/storage/StorageComponent.java), used to store and query spans and\ndependency links. This is used by the server and those making collectors, or span reporters.\nFor this reason, storage components have minimal dependencies, though require Java 17+.\n\nEx.\n```java\n// this won't create network connections\nstorage = ElasticsearchStorage.newBuilder()\n                              .hosts(asList(\"http://myelastic:9200\")).build();\n\n// prepare a call\ntraceCall = storage.spanStore().getTrace(\"d3d200866a77cc59\");\n\n// execute it synchronously or asynchronously\ntrace = traceCall.execute();\n\n// clean up any sessions, etc\nstorage.close();\n```\n\n### In-Memory\nThe [InMemoryStorage](zipkin-server#in-memory-storage) component is packaged in zipkin's core library. It\nis neither persistent, nor viable for realistic work loads. Its purpose\nis for testing, for example starting a server on your laptop without any\ndatabase needed.\n\n### Cassandra\nThe [Cassandra](zipkin-server#cassandra-storage) component uses Cassandra\n3.11.3+ features, but is tested against the latest patch of Cassandra 4.1.\n\nThis is the second generation of our Cassandra schema. It stores spans\nusing UDTs, such that they appear like Zipkin v2 json in cqlsh. It is\ndesigned for scale, and uses a combination of SASI and manually\nimplemented indexes to make querying larger data more performant.\n\nNote: This store requires a [job to aggregate](https://github.com/openzipkin/zipkin-dependencies) dependency links.\n\n### Elasticsearch\nThe [Elasticsearch](zipkin-server#elasticsearch-storage) component uses\nElasticsearch 5+ features, but is tested against Elasticsearch 7-8.x and\nOpenSearch 2.x.\n\nIt stores spans as Zipkin v2 json so that integration with other tools is\nstraightforward. To help with scale, this uses a combination of custom\nand manually implemented indexing.\n\nNote: This store requires a [spark job](https://github.com/openzipkin/zipkin-dependencies) to aggregate dependency links.\n\n### Disabling search\nThe following API endpoints provide search features, and are enabled by\ndefault. Search primarily allows the trace list screen of the UI operate.\n* `GET /services` - Distinct Span.localServiceName\n* `GET /remoteServices?serviceName=X` - Distinct Span.remoteServiceName by Span.localServiceName\n* `GET /spans?serviceName=X` - Distinct Span.name by Span.localServiceName\n* `GET /autocompleteKeys` - Distinct keys of Span.tags subject to configurable whitelist\n* `GET /autocompleteValues?key=X` - Distinct values of Span.tags by key\n* `GET /traces` - Traces matching a query possibly including the above criteria\n\n\nWhen search is disabled, traces can only be retrieved by ID\n(`GET /trace/{traceId}`). Disabling search is only viable when there is\nan alternative way to find trace IDs, such as logs. Disabling search can\nreduce storage costs or increase write throughput.\n\n`StorageComponent.Builder.searchEnabled(false)` is implied when a zipkin\nis run with the env variable `SEARCH_ENABLED=false`.\n\n### Legacy (v1) components\nThe following components are no longer encouraged, but exist to help aid\ntransition to supported ones. These are indicated as \"v1\" as they use\ndata layouts based on Zipkin's V1 Thrift model, as opposed to the\nsimpler v2 data model currently used.\n\n#### MySQL\nThe [MySQL v1](zipkin-storage/mysql-v1) component uses MySQL 5.6+\nfeatures, but is tested against MariaDB 10.11.\n\nThe schema was designed to be easy to understand and get started with;\nit was not designed for performance. Ex spans fields are columns, so\nyou can perform ad-hoc queries using SQL. However, this component has\n[known performance issues](https://github.com/openzipkin/zipkin/issues/1233): queries will eventually take seconds to return\nif you put a lot of data into it.\n\nThis store does not require a [job to aggregate](https://github.com/openzipkin/zipkin-dependencies) dependency links.\nHowever, running the job will improve performance of dependencies\nqueries.\n\n## Running the server from source\nThe [Zipkin server](zipkin-server) receives spans via HTTP POST and respond to queries\nfrom its UI. It can also run collectors, such as RabbitMQ or Kafka.\n\nTo run the server from the currently checked out source, enter the\nfollowing. JDK 17+ is required to compile the source.\n```bash\n# Build the server and also make its dependencies\n$ ./mvnw -q --batch-mode -DskipTests --also-make -pl zipkin-server clean install\n# Run the server\n$ java -jar ./zipkin-server/target/zipkin-server-*exec.jar\n```\n\n## Artifacts\nServer artifacts are under the maven group id `io.zipkin`\nLibrary artifacts are under the maven group id `io.zipkin.zipkin2`\n\n### Library Releases\nReleases are at [Sonatype](https://oss.sonatype.org/content/repositories/releases) and [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.zipkin%22)\n\n### Library Snapshots\nSnapshots are uploaded to [Sonatype](https://oss.sonatype.org/content/repositories/snapshots) after\ncommits to master.\n\n### Docker Images\nReleased versions of zipkin-server are published to Docker Hub as `openzipkin/zipkin` and GitHub\nContainer Registry as `ghcr.io/openzipkin/zipkin`. See [docker](docker) for details.\n\n### Helm Charts\nHelm charts are available via `helm repo add zipkin https://zipkin.io/zipkin-helm`.\nSee [zipkin-helm](https://github.com/openzipkin/zipkin-helm) for details.\n\n### Javadocs\nhttps://zipkin.io/zipkin contains versioned folders with JavaDocs published on each (non-PR) build, as well\nas releases.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 3.6533203125,
          "content": "# OpenZipkin Release Process\n\nThis repo uses semantic versions. Please keep this in mind when choosing version numbers.\n\n1. **Verify all dependencies are up-to-date**\n\n   Before you start a release, make sure all dependencies are up-to-date, or are documented why not.\n   Pay special attention to the [security workflow](.github/workflows/security.yml), which should\n   run clean.\n\n1. **Alert others you are releasing**\n\n   There should be no commits made to master while the release is in progress (about 10 minutes). Before you start\n   a release, alert others on [gitter](https://gitter.im/openzipkin/zipkin) so that they don't accidentally merge\n   anything. If they do, and the build fails because of that, you'll have to recreate the release tag described below.\n\n1. **Push a git tag**\n\n   The trigger format is `release-MAJOR.MINOR.PATCH`, ex `git tag release-1.18.1 && git push origin release-1.18.1`.\n\n1. **Wait for CI**\n\n   The `release-MAJOR.MINOR.PATCH` tag triggers [`build-bin/maven/maven_release`](build-bin/maven/maven_release),\n   which creates commits, `MAJOR.MINOR.PATCH` tag, and increments the version (maven-release-plugin).\n\n   The `MAJOR.MINOR.PATCH` tag triggers [`build-bin/deploy`](build-bin/deploy), which does the following:\n     * Publishes jars to https://oss.sonatype.org/content/repositories/releases [`build-bin/maven/maven_deploy`](build-bin/maven/maven_deploy)\n       * Later, the same jars synchronize to Maven Central\n     * Publishes Javadoc to https://zipkin.io/brave into a versioned subdirectory\n     * Pushes images to Docker registries [`build-bin/docker_push`](build-bin/docker_push)\n\n   Notes:\n     * https://search.maven.org/ index will take longer than direct links like https://repo1.maven.org/maven2/io/zipkin\n\n## Credentials\n\nThe release process uses various credentials. If you notice something failing due to unauthorized,\nlook at the notes in [.github/workflows/deploy.yml] and check the [org secrets](https://github.com/organizations/openzipkin/settings/secrets/actions).\n\n### Troubleshooting invalid credentials\n\nIf you receive a '401 unauthorized' failure from OSSRH, it is likely\n`SONATYPE_USER` or `SONATYPE_PASSWORD` entries are invalid, or possibly the\nuser associated with them does not have rights to upload.\n\nThe least destructive test is to try to publish a snapshot manually. By passing\nthe values CI would use, you can kick off a snapshot from your laptop. This\nis a good way to validate that your unencrypted credentials are authorized.\n\nHere's an example of a snapshot deploy with specified credentials.\n```bash\n$ export GPG_TTY=$(tty) && GPG_PASSPHRASE=whackamole SONATYPE_USER=adrianmole SONATYPE_PASSWORD=ed6f20bde9123bbb2312b221 build-bin/build-bin/maven/maven_deploy\n```\n\n## Manually releasing\n\nIf for some reason, you lost access to CI or otherwise cannot get automation to work, bear in mind\nthis is a normal maven project, and can be released accordingly.\n\n*Note:* If [Sonatype is down](https://status.sonatype.com/), the below will not work.\n\n```bash\n# First, set variable according to your personal credentials. These would normally be assigned as\n# org secrets: https://github.com/organizations/openzipkin/settings/secrets/actions\nexport GPG_TTY=$(tty)\nexport GPG_PASSPHRASE=your_gpg_passphrase\nexport SONATYPE_USER=your_sonatype_account\nexport SONATYPE_PASSWORD=your_sonatype_password\nrelease_version=xx-version-to-release-xx\n\n# now from latest master, create the release. This creates and pushes the MAJOR.MINOR.PATCH tag\n./build-bin/maven/maven_release release-${release_version}\n\n# once this works, deploy the release\ngit checkout ${release_version}\n./build-bin/deploy\n\n# Finally, clean up\n./mvnw release:clean\ngit checkout master\ngit reset HEAD --hard\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6806640625,
          "content": "# OpenZipkin Security Process\n\nThis document outlines the process for handling security concerns in OpenZipkin projects.\n\nAny vulnerability or misconfiguration detected in our [security workflow](.github/workflows/security.yml)\nshould be addressed as a normal pull request.\n\nOpenZipkin is a volunteer community and does not have a dedicated security team. There may be\nperiods where no volunteer is able to address a security concern. There is no SLA or warranty\noffered by volunteers. If you are a security researcher, please consider this before escalating.\n\nFor security concerns that are sensitive or otherwise outside the scope of public issues, please\ncontact zipkin-admin@googlegroups.com.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.91015625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.3.2\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ]; then\n\n  if [ -f /usr/local/etc/mavenrc ]; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ]; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ]; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false\ndarwin=false\nmingw=false\ncase \"$(uname)\" in\nCYGWIN*) cygwin=true ;;\nMINGW*) mingw=true ;;\nDarwin*)\n  darwin=true\n  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n  if [ -z \"$JAVA_HOME\" ]; then\n    if [ -x \"/usr/libexec/java_home\" ]; then\n      JAVA_HOME=\"$(/usr/libexec/java_home)\"\n      export JAVA_HOME\n    else\n      JAVA_HOME=\"/Library/Java/Home\"\n      export JAVA_HOME\n    fi\n  fi\n  ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ]; then\n  if [ -r /etc/gentoo-release ]; then\n    JAVA_HOME=$(java-config --jre-home)\n  fi\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=$(cygpath --unix \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] \\\n    && CLASSPATH=$(cygpath --path --unix \"$CLASSPATH\")\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw; then\n  [ -n \"$JAVA_HOME\" ] && [ -d \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=\"$(\n      cd \"$JAVA_HOME\" || (\n        echo \"cannot cd into $JAVA_HOME.\" >&2\n        exit 1\n      )\n      pwd\n    )\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"$(which javac)\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"$(expr \"$javaExecutable\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=$(which readlink)\n    if [ ! \"$(expr \"$readLink\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n      if $darwin; then\n        javaHome=\"$(dirname \"$javaExecutable\")\"\n        javaExecutable=\"$(cd \"$javaHome\" && pwd -P)/javac\"\n      else\n        javaExecutable=\"$(readlink -f \"$javaExecutable\")\"\n      fi\n      javaHome=\"$(dirname \"$javaExecutable\")\"\n      javaHome=$(expr \"$javaHome\" : '\\(.*\\)/bin')\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ]; then\n  if [ -n \"$JAVA_HOME\" ]; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"$(\n      \\unset -f command 2>/dev/null\n      \\command -v java\n    )\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ]; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\" >&2\nfi\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n  if [ -z \"$1\" ]; then\n    echo \"Path not specified to find_maven_basedir\" >&2\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ]; do\n    if [ -d \"$wdir\"/.mvn ]; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=$(\n        cd \"$wdir/..\" || exit 1\n        pwd\n      )\n    fi\n    # end of workaround\n  done\n  printf '%s' \"$(\n    cd \"$basedir\" || exit 1\n    pwd\n  )\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    # Remove \\r in case we run on Windows within Git Bash\n    # and check out the repository with auto CRLF management\n    # enabled. Otherwise, we may read lines that are delimited with\n    # \\r\\n and produce $'-Xarg\\r' rather than -Xarg due to word\n    # splitting rules.\n    tr -s '\\r\\n' ' ' <\"$1\"\n  fi\n}\n\nlog() {\n  if [ \"$MVNW_VERBOSE\" = true ]; then\n    printf '%s\\n' \"$1\"\n  fi\n}\n\nBASE_DIR=$(find_maven_basedir \"$(dirname \"$0\")\")\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1\nfi\n\nMAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nexport MAVEN_PROJECTBASEDIR\nlog \"$MAVEN_PROJECTBASEDIR\"\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nwrapperJarPath=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\"\nif [ -r \"$wrapperJarPath\" ]; then\n  log \"Found $wrapperJarPath\"\nelse\n  log \"Couldn't find $wrapperJarPath, downloading it ...\"\n\n  if [ -n \"$MVNW_REPOURL\" ]; then\n    wrapperUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\n  else\n    wrapperUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\n  fi\n  while IFS=\"=\" read -r key value; do\n    # Remove '\\r' from value to allow usage on windows as IFS does not consider '\\r' as a separator ( considers space, tab, new line ('\\n'), and custom '=' )\n    safeValue=$(echo \"$value\" | tr -d '\\r')\n    case \"$key\" in wrapperUrl)\n      wrapperUrl=\"$safeValue\"\n      break\n      ;;\n    esac\n  done <\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\n  log \"Downloading from: $wrapperUrl\"\n\n  if $cygwin; then\n    wrapperJarPath=$(cygpath --path --windows \"$wrapperJarPath\")\n  fi\n\n  if command -v wget >/dev/null; then\n    log \"Found wget ... using wget\"\n    [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--quiet\"\n    if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n      wget $QUIET \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n    else\n      wget $QUIET --http-user=\"$MVNW_USERNAME\" --http-password=\"$MVNW_PASSWORD\" \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n    fi\n  elif command -v curl >/dev/null; then\n    log \"Found curl ... using curl\"\n    [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--silent\"\n    if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n      curl $QUIET -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n    else\n      curl $QUIET --user \"$MVNW_USERNAME:$MVNW_PASSWORD\" -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n    fi\n  else\n    log \"Falling back to using Java to download\"\n    javaSource=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n    javaClass=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\"\n    # For Cygwin, switch paths to Windows format before running javac\n    if $cygwin; then\n      javaSource=$(cygpath --path --windows \"$javaSource\")\n      javaClass=$(cygpath --path --windows \"$javaClass\")\n    fi\n    if [ -e \"$javaSource\" ]; then\n      if [ ! -e \"$javaClass\" ]; then\n        log \" - Compiling MavenWrapperDownloader.java ...\"\n        (\"$JAVA_HOME/bin/javac\" \"$javaSource\")\n      fi\n      if [ -e \"$javaClass\" ]; then\n        log \" - Running MavenWrapperDownloader.java ...\"\n        (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$wrapperUrl\" \"$wrapperJarPath\") || rm -f \"$wrapperJarPath\"\n      fi\n    fi\n  fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\n# If specified, validate the SHA-256 sum of the Maven wrapper jar file\nwrapperSha256Sum=\"\"\nwhile IFS=\"=\" read -r key value; do\n  case \"$key\" in wrapperSha256Sum)\n    wrapperSha256Sum=$value\n    break\n    ;;\n  esac\ndone <\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\nif [ -n \"$wrapperSha256Sum\" ]; then\n  wrapperSha256Result=false\n  if command -v sha256sum >/dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | sha256sum -c >/dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  elif command -v shasum >/dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | shasum -a 256 -c >/dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\" >&2\n    echo \"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  fi\n  if [ $wrapperSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\" >&2\n    echo \"Investigate or delete $wrapperJarPath to attempt a clean download.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=$(cygpath --path --windows \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] \\\n    && CLASSPATH=$(cygpath --path --windows \"$CLASSPATH\")\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] \\\n    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\")\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $*\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\n# shellcheck disable=SC2086 # safe args\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 7.7177734375,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.3.2\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho. >&2\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho. >&2\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho. >&2\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho. >&2\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset WRAPPER_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET WRAPPER_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET WRAPPER_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %WRAPPER_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file\r\nSET WRAPPER_SHA_256_SUM=\"\"\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperSha256Sum\" SET WRAPPER_SHA_256_SUM=%%B\r\n)\r\nIF NOT %WRAPPER_SHA_256_SUM%==\"\" (\r\n    powershell -Command \"&{\"^\r\n       \"Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash;\"^\r\n       \"$hash = (Get-FileHash \\\"%WRAPPER_JAR%\\\" -Algorithm SHA256).Hash.ToLower();\"^\r\n       \"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\"^\r\n       \"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\"^\r\n       \"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\"^\r\n       \"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\"^\r\n       \"  exit 1;\"^\r\n       \"}\"^\r\n       \"}\"\r\n    if ERRORLEVEL 1 goto error\r\n)\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 32.73828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n\n    Copyright The OpenZipkin Authors\n    SPDX-License-Identifier: Apache-2.0\n\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>io.zipkin</groupId>\n  <artifactId>zipkin-parent</artifactId>\n  <version>3.4.5-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>zipkin</module>\n    <module>zipkin-tests</module>\n    <module>zipkin-junit5</module>\n    <module>zipkin-storage</module>\n    <module>zipkin-collector</module>\n    <module>zipkin-server</module>\n  </modules>\n\n  <properties>\n    <main.basedir>${project.basedir}</main.basedir>\n\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>\n    <project.build.outputEncoding>UTF-8</project.build.outputEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\n    <!-- Except for zipkin core Jar (Java 1.8), everything is 17, as that's\n         the minimum of Spring Boot 3, required for recent JOOQ and works with\n         zipkin-dependencies (Spark 3.4+). -->\n    <maven.compiler.source>17</maven.compiler.source>\n    <maven.compiler.target>17</maven.compiler.target>\n    <maven.compiler.release>17</maven.compiler.release>\n    <maven.compiler.testSource>17</maven.compiler.testSource>\n    <maven.compiler.testTarget>17</maven.compiler.testTarget>\n    <maven.compiler.testRelease>17</maven.compiler.testRelease>\n\n    <!-- override to set exclusions per-project -->\n    <errorprone.args />\n    <errorprone.version>2.29.2</errorprone.version>\n\n    <zipkin-proto3.version>1.0.0</zipkin-proto3.version>\n\n    <armeria.groupId>com.linecorp.armeria</armeria.groupId>\n    <armeria.version>1.31.3</armeria.version>\n    <!-- Match Armeria version to avoid conflicts including running tests in the IDE -->\n    <netty.version>4.1.116.Final</netty.version>\n\n    <!-- It's easy for Jackson dependencies to get misaligned, so we manage it ourselves. -->\n    <jackson.version>2.18.2</jackson.version>\n\n    <java-driver.version>4.18.1</java-driver.version>\n    <micrometer.version>1.14.2</micrometer.version>\n\n    <!-- Used for Generated annotations -->\n    <javax-annotation-api.version>1.3.2</javax-annotation-api.version>\n\n    <!-- update together -->\n    <spring-boot.version>3.4.1</spring-boot.version>\n    <spring.version>6.2.1</spring.version>\n\n    <!-- MySQL connector is GPL, even if it has an OSS exception.\n         https://www.mysql.com/about/legal/licensing/foss-exception/\n\n         MariaDB has a friendlier license, LGPL, which is less scary in audits.\n    -->\n    <mariadb-java-client.version>3.5.1</mariadb-java-client.version>\n    <HikariCP.version>5.1.0</HikariCP.version>\n    <slf4j.version>2.0.16</slf4j.version>\n    <auto-value.version>1.11.0</auto-value.version>\n    <git-commit-id.version>4.9.10</git-commit-id.version>\n\n    <!-- Test only dependencies -->\n    <junit-jupiter.version>5.11.4</junit-jupiter.version>\n    <mockito.version>5.15.2</mockito.version>\n    <assertj.version>3.27.2</assertj.version>\n    <awaitility.version>4.2.2</awaitility.version>\n    <testcontainers.version>1.20.2</testcontainers.version>\n    <okhttp.version>4.12.0</okhttp.version>\n    <kryo.version>5.6.2</kryo.version>\n    <!-- Only used for proto interop testing; wire-maven-plugin is usually behind latest. -->\n    <wire.version>5.1.0</wire.version>\n    <gson.version>2.11.0</gson.version>\n    <unpack-proto.directory>${project.build.directory}/test/proto</unpack-proto.directory>\n\n    <license.skip>${skipTests}</license.skip>\n\n    <build-helper-maven-plugin.version>3.6.0</build-helper-maven-plugin.version>\n    <go-offline-maven-plugin.version>1.2.8</go-offline-maven-plugin.version>\n    <!-- TODO: cleanup any redundant ignores now also in the 4.0 release (once final) -->\n    <license-maven-plugin.version>4.6</license-maven-plugin.version>\n    <maven-assembly-plugin.version>3.7.1</maven-assembly-plugin.version>\n    <maven-bundle-plugin.version>5.1.9</maven-bundle-plugin.version>\n    <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n    <!-- Use same version as https://github.com/openzipkin/docker-java -->\n    <maven-dependency-plugin.version>3.8.1</maven-dependency-plugin.version>\n    <maven-deploy-plugin.version>3.1.2</maven-deploy-plugin.version>\n    <maven-enforcer-plugin.version>3.4.1</maven-enforcer-plugin.version>\n    <!-- Use same version as https://github.com/openzipkin/docker-java -->\n    <maven-help-plugin.version>3.5.1</maven-help-plugin.version>\n    <maven-install-plugin.version>3.1.2</maven-install-plugin.version>\n    <maven-javadoc-plugin.version>3.6.3</maven-javadoc-plugin.version>\n    <maven-jar-plugin.version>3.4.1</maven-jar-plugin.version>\n    <maven-release-plugin.version>3.0.1</maven-release-plugin.version>\n    <maven-shade-plugin.version>3.5.3</maven-shade-plugin.version>\n    <maven-source-plugin.version>3.3.1</maven-source-plugin.version>\n    <maven-surefire-plugin.version>3.5.1</maven-surefire-plugin.version>\n    <nexus-staging-maven-plugin.version>1.6.13</nexus-staging-maven-plugin.version>\n    <wire-maven-plugin.version>1.3</wire-maven-plugin.version>\n  </properties>\n\n  <name>Zipkin (Parent)</name>\n  <description>Zipkin (Parent)</description>\n  <url>https://github.com/openzipkin/zipkin</url>\n  <inceptionYear>2015</inceptionYear>\n\n  <organization>\n    <name>OpenZipkin</name>\n    <url>https://zipkin.io/</url>\n  </organization>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <scm>\n    <url>https://github.com/openzipkin/zipkin</url>\n    <connection>scm:git:https://github.com/openzipkin/zipkin.git</connection>\n    <developerConnection>scm:git:https://github.com/openzipkin/zipkin.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n\n  <!-- Developer section is needed for Maven Central, but doesn't need to include each person -->\n  <developers>\n    <developer>\n      <id>openzipkin</id>\n      <name>OpenZipkin Gitter</name>\n      <url>https://gitter.im/openzipkin/zipkin</url>\n    </developer>\n  </developers>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n      <id>ossrh</id>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n\n  <issueManagement>\n    <system>Github</system>\n    <url>https://github.com/openzipkin/zipkin/issues</url>\n  </issueManagement>\n\n  <dependencyManagement>\n    <!-- Be careful here, especially to not import BOMs as io.zipkin.zipkin2:zipkin has this parent.\n\n         For example, if you imported Netty's BOM here, using Brave would also download that BOM as\n         it depends indirectly on io.zipkin.zipkin2:zipkin. As Brave itself is indirectly used, this\n         can be extremely confusing when people are troubleshooting library version assignments. -->\n  </dependencyManagement>\n\n  <dependencies>\n    <!-- Do not add compile dependencies here. This can cause problems for libraries that depend on\n         io.zipkin.zipkin2:zipkin difficult to unravel. -->\n\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <version>${junit-jupiter.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- needed for surefire.\n         https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-engine</artifactId>\n      <version>${junit-jupiter.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.assertj</groupId>\n      <artifactId>assertj-core</artifactId>\n      <version>${assertj.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-junit-jupiter</artifactId>\n      <version>${mockito.version}</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <!-- mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -->\n        <plugin>\n          <groupId>de.qaware.maven</groupId>\n          <artifactId>go-offline-maven-plugin</artifactId>\n          <version>${go-offline-maven-plugin.version}</version>\n          <configuration>\n            <!-- Add dependencies indirectly referenced by build plugins -->\n            <dynamicDependencies>\n              <DynamicDependency>\n                <groupId>com.mycila</groupId>\n                <artifactId>license-maven-plugin-git</artifactId>\n                <version>${license-maven-plugin.version}</version>\n                <repositoryType>MAIN</repositoryType>\n              </DynamicDependency>\n              <DynamicDependency>\n                <groupId>com.google.errorprone</groupId>\n                <artifactId>error_prone_core</artifactId>\n                <version>${errorprone.version}</version>\n                <repositoryType>MAIN</repositoryType>\n              </DynamicDependency>\n              <DynamicDependency>\n                <groupId>org.apache.maven.surefire</groupId>\n                <artifactId>surefire-junit-platform</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <repositoryType>PLUGIN</repositoryType>\n              </DynamicDependency>\n            </dynamicDependencies>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin.version}</version>\n          <inherited>true</inherited>\n          <configuration>\n            <fork>true</fork>\n            <showWarnings>true</showWarnings>\n          </configuration>\n        </plugin>\n\n        <!-- Uploads occur as a last step (which also adds checksums) -->\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>${maven-deploy-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>${maven-install-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${maven-jar-plugin.version}</version>\n          <configuration>\n            <archive>\n              <!-- prevents huge pom file from also being added to the jar under META-INF/maven -->\n              <addMavenDescriptor>false</addMavenDescriptor>\n            </archive>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>${maven-release-plugin.version}</version>\n          <configuration>\n            <useReleaseProfile>false</useReleaseProfile>\n            <releaseProfiles>release</releaseProfiles>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n            <tagNameFormat>@{project.version}</tagNameFormat>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <groupId>org.sonatype.plugins</groupId>\n          <artifactId>nexus-staging-maven-plugin</artifactId>\n          <version>${nexus-staging-maven-plugin.version}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.eclipse.m2e</groupId>\n          <artifactId>lifecycle-mapping</artifactId>\n          <version>1.0.0</version>\n          <configuration>\n            <lifecycleMappingMetadata>\n              <pluginExecutions>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <versionRange>[3.7,)</versionRange>\n                    <goals>\n                      <goal>compile</goal>\n                      <goal>testCompile</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <configurator>\n                      <id>org.eclipse.m2e.jdt.javaConfigurator</id>\n                    </configurator>\n                  </action>\n                </pluginExecution>\n              </pluginExecutions>\n            </lifecycleMappingMetadata>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>maven-eclipse-plugin</artifactId>\n          <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>\n          </configuration>\n        </plugin>\n\n        <plugin>\n          <artifactId>maven-shade-plugin</artifactId>\n          <version>${maven-shade-plugin.version}</version>\n        </plugin>\n\n        <!-- The below plugins compile protobuf stubs in the indicated source tree -->\n        <plugin>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>${maven-dependency-plugin.version}</version>\n          <executions>\n            <!-- wire-maven-plugin cannot get proto definitions from dependencies: this will -->\n            <execution>\n              <id>unpack-proto</id>\n              <phase>generate-sources</phase>\n              <goals>\n                <goal>unpack-dependencies</goal>\n              </goals>\n              <configuration>\n                <includeArtifactIds>zipkin-proto3</includeArtifactIds>\n                <includes>**/*.proto</includes>\n                <outputDirectory>${unpack-proto.directory}</outputDirectory>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n        <plugin>\n          <!-- com.squareup.wire version was abandoned -->\n          <groupId>de.m3y.maven</groupId>\n          <artifactId>wire-maven-plugin</artifactId>\n          <version>${wire-maven-plugin.version}</version>\n          <executions>\n            <execution>\n              <phase>generate-sources</phase>\n              <goals>\n                <goal>generate-sources</goal>\n              </goals>\n              <configuration>\n                <protoSourceDirectory>${unpack-proto.directory}</protoSourceDirectory>\n                <includes>\n                  <include>zipkin.proto3.*</include>\n                </includes>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <!-- Ensure common utility commands use coherent versions (avoid lazy downloads) -->\n      <plugin>\n        <artifactId>maven-dependency-plugin</artifactId>\n        <version>${maven-dependency-plugin.version}</version>\n      </plugin>\n      <plugin>\n        <artifactId>maven-help-plugin</artifactId>\n        <version>${maven-help-plugin.version}</version>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>${maven-surefire-plugin.version}</version>\n        <configuration>\n          <!-- Ensures root cause ends up in the console -->\n          <trimStackTrace>false</trimStackTrace>\n        </configuration>\n        <dependencies>\n          <!-- needed for surefire.\n            https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html -->\n          <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>${junit-jupiter.version}</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-failsafe-plugin</artifactId>\n        <version>${maven-surefire-plugin.version}</version>\n        <executions>\n          <execution>\n            <id>integration-test</id>\n            <goals>\n              <goal>integration-test</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>verify</id>\n            <goals>\n              <goal>verify</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <systemProperties>\n            <!-- Gives better context when there's an exception such as AbortedStreamException.\n                 Set globally as we have failures sometimes in storage-elasticsearch and sometimes\n                 in zipkin-server tests (same code used two places).\n            -->\n            <com.linecorp.armeria.verboseExceptions>always</com.linecorp.armeria.verboseExceptions>\n          </systemProperties>\n          <!-- workaround to SUREFIRE-1831 -->\n          <useModulePath>false</useModulePath>\n          <!-- Ensures root cause ends up in the console -->\n          <trimStackTrace>false</trimStackTrace>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <version>${maven-enforcer-plugin.version}</version>\n        <executions>\n          <execution>\n            <id>enforce-java</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireJavaVersion>\n                  <!-- Change this to control LTS JDK versions allowed to build\n                       the project. Keep in sync with .github/workflows -->\n                  <version>[17,18),[21,22)</version>\n                </requireJavaVersion>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>com.mycila</groupId>\n        <artifactId>license-maven-plugin</artifactId>\n        <version>${license-maven-plugin.version}</version>\n        <configuration>\n          <skip>${license.skip}</skip>\n          <!-- session.executionRootDirectory resolves properly even with nested modules -->\n          <header>${main.basedir}/src/etc/header.txt</header>\n          <mapping>\n            <!-- Don't use javadoc style as this makes code formatters break it by adding tags! -->\n            <java>SLASHSTAR_STYLE</java>\n            <kt>SLASHSTAR_STYLE</kt>\n            <jsx>SLASHSTAR_STYLE</jsx>\n            <ts>SLASHSTAR_STYLE</ts>\n            <tsx>SLASHSTAR_STYLE</tsx>\n            <bnd>SCRIPT_STYLE</bnd>\n            <ejs>XML_STYLE</ejs>\n            <css>SLASHSTAR_STYLE</css>\n            <!-- build-bin non-trivial scripts -->\n            <javadoc_to_gh_pages>SCRIPT_STYLE</javadoc_to_gh_pages>\n            <maybe_install_npm>SCRIPT_STYLE</maybe_install_npm>\n            <!-- build-bin/docker -->\n            <docker_block_on_health>SCRIPT_STYLE</docker_block_on_health>\n            <configure_docker>SCRIPT_STYLE</configure_docker>\n            <configure_docker_push>SCRIPT_STYLE</configure_docker_push>\n            <docker_arch>SCRIPT_STYLE</docker_arch>\n            <docker_args>SCRIPT_STYLE</docker_args>\n            <docker_build>SCRIPT_STYLE</docker_build>\n            <docker_push>SCRIPT_STYLE</docker_push>\n            <docker_test_image>SCRIPT_STYLE</docker_test_image>\n            <!-- build-bin/git -->\n            <login_git>SCRIPT_STYLE</login_git>\n            <version_from_trigger_tag>SCRIPT_STYLE</version_from_trigger_tag>\n            <!-- build-bin/gpg -->\n            <configure_gpg>SCRIPT_STYLE</configure_gpg>\n            <!-- build-bin/maven -->\n            <maven_build>SCRIPT_STYLE</maven_build>\n            <maven_build_or_unjar>SCRIPT_STYLE</maven_build_or_unjar>\n            <maven_deploy>SCRIPT_STYLE</maven_deploy>\n            <maven_go_offline>SCRIPT_STYLE</maven_go_offline>\n            <maven_opts>SCRIPT_STYLE</maven_opts>\n            <maven_release>SCRIPT_STYLE</maven_release>\n            <maven_unjar>SCRIPT_STYLE</maven_unjar>\n            <!-- docker/**/start-* -->\n            <start-activemq>SCRIPT_STYLE</start-activemq>\n            <start-eureka>SCRIPT_STYLE</start-eureka>\n            <start-cassandra>SCRIPT_STYLE</start-cassandra>\n            <start-elasticsearch>SCRIPT_STYLE</start-elasticsearch>\n            <start-kafka-zookeeper>SCRIPT_STYLE</start-kafka-zookeeper>\n            <start-mysql>SCRIPT_STYLE</start-mysql>\n            <start-nginx>SCRIPT_STYLE</start-nginx>\n            <start-zipkin>SCRIPT_STYLE</start-zipkin>\n            <!-- docker/**/docker-healthcheck -->\n            <docker-healthcheck>SCRIPT_STYLE</docker-healthcheck>\n          </mapping>\n          <excludes>\n            <exclude>**/simplelogger.properties</exclude>\n            <exclude>**/continuous-build.yml</exclude>\n            <exclude>**/*.dockerignore</exclude>\n            <exclude>.editorconfig</exclude>\n            <exclude>.gitattributes</exclude>\n            <exclude>.gitignore</exclude>\n            <exclude>.github/**</exclude>\n            <exclude>.mvn/**</exclude>\n            <exclude>mvnw*</exclude>\n            <exclude>etc/header.txt</exclude>\n            <exclude>**/nginx.conf</exclude>\n            <exclude>**/.idea/**</exclude>\n            <exclude>**/node_modules/**</exclude>\n            <exclude>**/build/**</exclude>\n            <exclude>**/dist/**</exclude>\n            <exclude>**/coverage/**</exclude>\n            <exclude>**/.babelrc</exclude>\n            <exclude>**/.bowerrc</exclude>\n            <exclude>**/.editorconfig</exclude>\n            <exclude>**/.env.development</exclude>\n            <exclude>**/.eslintignore</exclude>\n            <exclude>**/.eslintrc</exclude>\n            <exclude>**/.eslintrc</exclude>\n            <exclude>**/.eslintrc.js</exclude>\n            <exclude>**/.linguirc</exclude>\n            <exclude>**/testdata/**/*.json</exclude>\n            <exclude>**/test/data/**/*.json</exclude>\n            <exclude>**/src/translations/**</exclude>\n            <exclude>LICENSE</exclude>\n            <exclude>**/*.md</exclude>\n            <exclude>**/*.bnd</exclude>\n            <exclude>**/src/main/resources/zipkin.txt</exclude>\n            <exclude>**/src/main/resources/*.yml</exclude>\n            <exclude>**/spring.factories</exclude>\n            <!-- Cassandra integration tests break when license headers are present -->\n            <exclude>**/src/main/resources/*.cql</exclude>\n            <exclude>kafka_*/**</exclude>\n            <exclude>**/nohup.out</exclude>\n            <exclude>src/test/resources/**</exclude>\n            <exclude>**/generated/**</exclude>\n            <exclude>.dockerignore</exclude>\n            <!-- trivial build-bin scripts -->\n            <exclude>build-bin/configure_deploy</exclude>\n            <exclude>build-bin/configure_test</exclude>\n            <exclude>build-bin/deploy</exclude>\n            <exclude>build-bin/test</exclude>\n          </excludes>\n          <strictCheck>true</strictCheck>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>com.mycila</groupId>\n            <artifactId>license-maven-plugin-git</artifactId>\n            <version>${license-maven-plugin.version}</version>\n          </dependency>\n        </dependencies>\n        <executions>\n          <execution>\n            <goals>\n              <goal>check</goal>\n            </goals>\n            <phase>compile</phase>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <profile>\n      <id>include-lens</id>\n      <activation>\n        <property>\n          <name>!skipLens</name>\n        </property>\n      </activation>\n      <modules>\n        <module>zipkin-lens</module>\n      </modules>\n    </profile>\n\n    <!-- -DskipTests ensures benchmarks don't end up in javadocs or in Maven Central -->\n    <profile>\n      <id>include-benchmarks</id>\n      <activation>\n        <property>\n          <name>!skipTests</name>\n        </property>\n      </activation>\n      <modules>\n        <module>benchmarks</module>\n      </modules>\n    </profile>\n\n    <profile>\n      <id>error-prone-17+</id>\n      <activation>\n        <!-- Only LTS versions -->\n        <jdk>[17,18),[21,22)</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>${maven-compiler-plugin.version}</version>\n            <inherited>true</inherited>\n            <configuration>\n              <fork>true</fork>\n              <showWarnings>true</showWarnings>\n            </configuration>\n            <executions>\n              <execution>\n                <!-- only use errorprone on main source tree -->\n                <id>default-compile</id>\n                <phase>compile</phase>\n                <goals>\n                  <goal>compile</goal>\n                </goals>\n                <configuration>\n                  <forceJavacCompilerUse>true</forceJavacCompilerUse>\n                  <compilerArgs>\n                    <arg>-XDcompilePolicy=simple</arg>\n                    <arg>-Xplugin:ErrorProne ${errorprone.args}</arg>\n                    <!-- below needed for JDK16+ per https://errorprone.info/docs/installation -->\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>\n                    <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>\n                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>\n                    <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>\n                  </compilerArgs>\n                  <annotationProcessorPaths>\n                    <processorPath>\n                      <groupId>com.google.errorprone</groupId>\n                      <artifactId>error_prone_core</artifactId>\n                      <version>${errorprone.version}</version>\n                    </processorPath>\n                    <!-- auto-value is placed here eventhough not needed for all projects as\n                         configuring along with errorprone is tricky in subprojects -->\n                    <processorPath>\n                      <groupId>com.google.auto.value</groupId>\n                      <artifactId>auto-value</artifactId>\n                      <version>${auto-value.version}</version>\n                    </processorPath>\n                  </annotationProcessorPaths>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <extensions>true</extensions>\n            <configuration>\n              <serverId>ossrh</serverId>\n              <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n              <!-- Zipkin release is about ~100M mostly from the two server distributions. Default\n                   will timeout after 5 minutes, which can trigger fairly easily with this size. -->\n              <stagingProgressPauseDurationSeconds>20</stagingProgressPauseDurationSeconds>\n              <stagingProgressTimeoutMinutes>30</stagingProgressTimeoutMinutes>\n              <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n          </plugin>\n\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>3.2.3</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n                <configuration>\n                  <gpgArguments>\n                    <arg>--pinentry-mode</arg>\n                    <arg>loopback</arg>\n                  </gpgArguments>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n\n          <!-- Creates source jar -->\n          <plugin>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>${maven-source-plugin.version}</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n\n          <!-- Creates javadoc jar, skipping internal classes -->\n          <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>${maven-javadoc-plugin.version}</version>\n            <configuration>\n              <sourceFileExcludes>\n                <exclude>**/internal/*.java</exclude>\n                <exclude>**/Internal*.java</exclude>\n              </sourceFileExcludes>\n              <excludePackageNames>*.internal.*</excludePackageNames>\n              <failOnError>false</failOnError>\n              <!-- hush pedantic warnings: we don't put param and return on everything! -->\n              <doclint>none</doclint>\n              <!-- While we publish modules, our source is pre-Java9 so tell javadoc that. -->\n              <source>${maven.compiler.release}</source>\n            </configuration>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n                <phase>package</phase>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>netbeans</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <!-- NetBeans -->\n        <org-netbeans-modules-editor-indent.CodeStyle.usedProfile>project</org-netbeans-modules-editor-indent.CodeStyle.usedProfile>\n        <org-netbeans-modules-editor-indent.CodeStyle.project.indent-shift-width>2</org-netbeans-modules-editor-indent.CodeStyle.project.indent-shift-width>\n        <org-netbeans-modules-editor-indent.CodeStyle.project.spaces-per-tab>2</org-netbeans-modules-editor-indent.CodeStyle.project.spaces-per-tab>\n        <org-netbeans-modules-editor-indent.CodeStyle.project.tab-size>2</org-netbeans-modules-editor-indent.CodeStyle.project.tab-size>\n        <org-netbeans-modules-editor-indent.CodeStyle.project.text-limit-width>110</org-netbeans-modules-editor-indent.CodeStyle.project.text-limit-width>\n        <org-netbeans-modules-editor-indent.CodeStyle.project.expand-tabs>true</org-netbeans-modules-editor-indent.CodeStyle.project.expand-tabs>\n      </properties>\n    </profile>\n\n    <profile>\n      <id>module-info</id>\n      <!-- Build profiles can only consider static properties, such as files or ENV variables.\n           To conditionally add module information, we use existence of bnd.bnd. This allows\n           irrelevant packages such as tests and benchmarks to quietly opt-out.\n           http://maven.apache.org/guides/introduction/introduction-to-profiles.html -->\n      <activation>\n        <file>\n          <exists>bnd.bnd</exists>\n        </file>\n      </activation>\n      <build>\n        <plugins>\n          <!-- OSGi and Java Modules configuration -->\n          <plugin>\n            <groupId>org.apache.felix</groupId>\n            <artifactId>maven-bundle-plugin</artifactId>\n            <version>${maven-bundle-plugin.version}</version>\n            <configuration>\n              <obrRepository>NONE</obrRepository>\n              <instructions>\n                <_include>-bnd.bnd</_include>\n              </instructions>\n            </configuration>\n            <executions>\n              <execution>\n                <phase>process-classes</phase>\n                <goals>\n                  <goal>manifest</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <artifactId>maven-jar-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>default-jar</id>\n                <configuration>\n                  <archive>\n                    <!-- Include the MANIFEST.MF maven-bundle-plugin generates from bnd.bnd -->\n                    <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n                    <manifestEntries>\n                      <Automatic-Module-Name>${module.name}</Automatic-Module-Name>\n                    </manifestEntries>\n                  </archive>\n                </configuration>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-collector",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-junit5",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-lens",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipkin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}