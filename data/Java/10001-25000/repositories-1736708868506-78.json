{
  "metadata": {
    "timestamp": 1736708868506,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alibaba/ARouter",
      "stars": 14461,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5068359375,
          "content": "# Built application files\n*.ap_\n\n# Files for the Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\n\n# Gradle files\n.gradle/\nbuild/\n/*/build/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# IDEA Files\n.idea\n*.iml\n/*.ipr\n/*.iws\n.project\n.classpath\n\n# Eclipse Files\n/target\n*.classpath\n*.project\n*.settings\n\napp/src/main/res/values/config.xml\napp/src/main/res/drawable/yw_1222.jpg\n\n# OS X Files\n.DS_Store\n\nmap.txt\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.7998046875,
          "content": "```\n    A framework for assisting in the renovation of Android app componentization\n```\n\n[中文文档](https://github.com/alibaba/ARouter/blob/master/README_CN.md)\n\n##### [![Join the chat at https://gitter.im/alibaba/ARouter](https://badges.gitter.im/alibaba/ARouter.svg)](https://gitter.im/alibaba/ARouter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Hex.pm](https://img.shields.io/hexpm/l/plug.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\n---\n\n#### Lastest version\n\nmodule|arouter-api|arouter-compiler|arouter-register|arouter-idea-plugin\n---|---|---|---|---\nversion|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-api/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-api)|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-compiler/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-compiler)|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-register/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-register)|[![as plugin](https://img.shields.io/jetbrains/plugin/d/11428-arouter-helper.svg)](https://plugins.jetbrains.com/plugin/11428-arouter-helper)\n\n#### Demo\n\n##### [Demo apk](https://github.com/alibaba/ARouter/blob/develop/demo/arouter-demo-1.5.2.apk)、[Demo Gif](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/arouter-demo.gif)\n\n#### I. Feature\n1. **Supports direct parsing of standard URLs for jumps and automatic injection of parameters into target pages**\n2. **Support for multi-module**\n3. **Support for interceptor**\n4. **Support for dependency injection**\n5. **InstantRun support**\n6. **MultiDex support**\n7. Mappings are grouped by group, multi-level management, on-demand initialization\n8. Supports users to specify global demotion and local demotion strategies\n9. Activity, interceptor and service can be automatically registered to the framework\n10. Support multiple ways to configure transition animation\n11. Support for fragment\n12. Full kotlin support (Look at Other#2)\n13. **Generate route doc support**\n14. **Provide IDE plugin for quick navigation to target class**\n15. Support Incremental annotation processing\n16. Support register route meta dynamic.\n\n#### II. Classic Case\n1. Forward from external URLs to internal pages, and parsing parameters\n2. Jump and decoupling between multi-module\n3. Intercept jump process, handle login, statistics and other logic\n4. Cross-module communication, decouple components by IoC\n\n#### III. Configuration\n1. Adding dependencies and configurations\n    ``` gradle\n    android {\n        defaultConfig {\n            ...\n            javaCompileOptions {\n                annotationProcessorOptions {\n                    arguments = [AROUTER_MODULE_NAME: project.getName()]\n                }\n            }\n        }\n    }\n\n    dependencies {\n        // Replace with the latest version\n        compile 'com.alibaba:arouter-api:?'\n        annotationProcessor 'com.alibaba:arouter-compiler:?'\n        ...\n    }\n    // Old version of gradle plugin (< 2.2), You can use apt plugin, look at 'Other#1'\n    // Kotlin configuration reference 'Other#2'\n    ```\n\n2. Add annotations\n    ``` java\n    // Add annotations on pages that support routing (required)\n    // The path here needs to pay attention to need at least two levels : /xx/xx\n    @Route(path = \"/test/activity\")\n    public class YourActivity extend Activity {\n        ...\n    }\n    ```\n\n3. Initialize the SDK\n    ``` java\n    if (isDebug()) {           // These two lines must be written before init, otherwise these configurations will be invalid in the init process\n        ARouter.openLog();     // Print log\n        ARouter.openDebug();   // Turn on debugging mode (If you are running in InstantRun mode, you must turn on debug mode! Online version needs to be closed, otherwise there is a security risk)\n    }\n    ARouter.init(mApplication); // As early as possible, it is recommended to initialize in the Application\n    ```\n\n4. Initiate the routing\n    ``` java\n    // 1. Simple jump within application (Jump via URL in 'Advanced usage')\n    ARouter.getInstance().build(\"/test/activity\").navigation();\n\n    // 2. Jump with parameters\n    ARouter.getInstance().build(\"/test/1\")\n                .withLong(\"key1\", 666L)\n                .withString(\"key3\", \"888\")\n                .withObject(\"key4\", new Test(\"Jack\", \"Rose\"))\n                .navigation();\n    ```\n\n5. Add confusing rules (If Proguard is turn on)\n    ``` \n    -keep public class com.alibaba.android.arouter.routes.**{*;}\n    -keep public class com.alibaba.android.arouter.facade.**{*;}\n    -keep class * implements com.alibaba.android.arouter.facade.template.ISyringe{*;}\n\n    # If you use the byType method to obtain Service, add the following rules to protect the interface:\n    -keep interface * implements com.alibaba.android.arouter.facade.template.IProvider\n\n    # If single-type injection is used, that is, no interface is defined to implement IProvider, the following rules need to be added to protect the implementation\n    # -keep class * implements com.alibaba.android.arouter.facade.template.IProvider\n    ```\n\n6. Using the custom gradle plugin to autoload the routing table\n    ```gradle\n    apply plugin: 'com.alibaba.arouter'\n\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            // Replace with the latest version\n            classpath \"com.alibaba:arouter-register:?\"\n        }\n    }\n    ```\n\n    Optional, use the registration plugin provided by the ARouter to automatically load the routing table(power by [AutoRegister](https://github.com/luckybilly/AutoRegister)). By default, the ARouter will scanned the dex files .\n    Performing an auto-registration via the gradle plugin can shorten the initialization time , it should be noted that the plugin must be used with api above 1.3.0!\n\n7. use ide plugin for quick navigation to target class (Optional)\n\n    Search for `ARouter Helper` in the Android Studio plugin market, or directly download the `arouter-idea-plugin` zip installation package listed in the `Latest version` above the documentation, after installation\n    plugin without any settings, U can find an icon at the beginning of the jump code. (![navigation](https://raw.githubusercontent.com/alibaba/ARouter/develop/arouter-idea-plugin/src/main/resources/icon/outline_my_location_black_18dp.png)) click the icon to jump to the target class that identifies the path in the code.\n\n#### IV. Advanced usage\n1. Jump via URL\n    ``` java\n    // Create a new Activity for monitoring Scheme events, and then directly pass url to ARouter\n    public class SchemeFilterActivity extends Activity {\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n\n            Uri uri = getIntent().getData();\n            ARouter.getInstance().build(uri).navigation();\n            finish();\n        }\n    }\n    ```\n\n    AndroidManifest.xml\n    ``` xml\n    <activity android:name=\".activity.SchemeFilterActivity\">\n        <!-- Scheme -->\n        <intent-filter>\n            <data\n                android:host=\"m.aliyun.com\"\n                android:scheme=\"arouter\"/>\n\n            <action android:name=\"android.intent.action.VIEW\"/>\n\n            <category android:name=\"android.intent.category.DEFAULT\"/>\n            <category android:name=\"android.intent.category.BROWSABLE\"/>\n        </intent-filter>\n    </activity>\n    ```\n\n2. Parse the parameters in the URL\n    ``` java\n    // Declare a field for each parameter and annotate it with @Autowired\n    @Route(path = \"/test/activity\")\n    public class Test1Activity extends Activity {\n        @Autowired\n        public String name;\n        @Autowired\n        int age;\n        @Autowired(name = \"girl\") // Map different parameters in the URL by name\n        boolean boy;\n        @Autowired\n        TestObj obj;    // Support for parsing custom objects, using json pass in URL\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            ARouter.getInstance().inject(this);\n\n            // ARouter will automatically set value of fields\n            Log.d(\"param\", name + age + boy);\n        }\n    }\n\n    // If you need to pass a custom object, Create a new class(Not the custom object class),implement the SerializationService, And use the @Route annotation annotation, E.g:\n    @Route(path = \"/yourservicegroupname/json\")\n    public class JsonServiceImpl implements SerializationService {\n        @Override\n        public void init(Context context) {\n\n        }\n\n        @Override\n        public <T> T json2Object(String text, Class<T> clazz) {\n            return JSON.parseObject(text, clazz);\n        }\n\n        @Override\n        public String object2Json(Object instance) {\n            return JSON.toJSONString(instance);\n        }\n    }\n    ```\n\n3. Declaration Interceptor (Intercept jump process, AOP)\n    ``` java\n    // A more classic application is to handle login events during a jump so that there is no need to repeat the login check on the target page.\n    // Interceptors will be executed between jumps, multiple interceptors will be executed in order of priority\n    @Interceptor(priority = 8, name = \"test interceptor\")\n    public class TestInterceptor implements IInterceptor {\n        @Override\n        public void process(Postcard postcard, InterceptorCallback callback) {\n            ...\n            // No problem! hand over control to the framework\n            callback.onContinue(postcard);  \n            \n            // Interrupt routing process\n            // callback.onInterrupt(new RuntimeException(\"Something exception\"));      \n\n            // The above two types need to call at least one of them, otherwise it will not continue routing\n        }\n\n        @Override\n        public void init(Context context) {\n            // Interceptor initialization, this method will be called when sdk is initialized, it will only be called once\n        }\n    }\n    ```\n\n4. Processing jump results\n    ``` java\n    // U can get the result of a single jump\n    ARouter.getInstance().build(\"/test/1\").navigation(this, new NavigationCallback() {\n        @Override\n        public void onFound(Postcard postcard) {\n        ...\n        }\n\n        @Override\n        public void onLost(Postcard postcard) {\n        ...\n        }\n    });\n    ```\n\n5. Custom global demotion strategy\n    ``` java\n    // Implement the DegradeService interface\n    @Route(path = \"/xxx/xxx\")\n    public class DegradeServiceImpl implements DegradeService {\n        @Override\n        public void onLost(Context context, Postcard postcard) {\n            // do something.\n        }\n\n        @Override\n        public void init(Context context) {\n\n        }\n    }\n    ```\n\n6. Decoupled by dependency injection : Service management -- Exposure services\n    ``` java\n    // Declaration interface, other components get the service instance through the interface\n    public interface HelloService extends IProvider {\n        String sayHello(String name);\n    }\n\n    @Route(path = \"/yourservicegroupname/hello\", name = \"test service\")\n    public class HelloServiceImpl implements HelloService {\n\n        @Override\n        public String sayHello(String name) {\n            return \"hello, \" + name;\n        }\n\n        @Override\n        public void init(Context context) {\n\n        }\n    }\n    ```\n\n7. Decoupled by dependency injection : Service management -- Discovery service\n    ``` java\n    public class Test {\n        @Autowired\n        HelloService helloService;\n\n        @Autowired(name = \"/yourservicegroupname/hello\")\n        HelloService helloService2;\n\n        HelloService helloService3;\n\n        HelloService helloService4;\n\n        public Test() {\n            ARouter.getInstance().inject(this);\n        }\n\n        public void testService() {\n            // 1. Use Dependency Injection to discover services, annotate fields with annotations\n            helloService.sayHello(\"Vergil\");\n            helloService2.sayHello(\"Vergil\");\n\n            // 2. Discovering services using dependency lookup, the following two methods are byName and byType\n            helloService3 = ARouter.getInstance().navigation(HelloService.class);\n            helloService4 = (HelloService) ARouter.getInstance().build(\"/yourservicegroupname/hello\").navigation();\n            helloService3.sayHello(\"Vergil\");\n            helloService4.sayHello(\"Vergil\");\n        }\n    }\n    ```\n  \n8. Pretreatment Service\n    ``` java\n    @Route(path = \"/xxx/xxx\")\n    public class PretreatmentServiceImpl implements PretreatmentService {\n        @Override\n        public boolean onPretreatment(Context context, Postcard postcard) {\n            // Do something before the navigation, if you need to handle the navigation yourself, the method returns false\n        }\n\n        @Override\n        public void init(Context context) {\n    \n        }\n    }\n    ```\n\n9. Dynamic register route meta\nApplicable to apps with plug-in architectures or some scenarios where routing information\nneeds to be dynamically registered，Dynamic registration can be achieved through the\ninterface provided by ARouter, The target page and service need not be marked with @Route\nannotation，**Only the routing information of the same group can be registered in the same batch**\n    ``` java\n        ARouter.getInstance().addRouteGroup(new IRouteGroup() {\n            @Override\n            public void loadInto(Map<String, RouteMeta> atlas) {\n                atlas.put(\"/dynamic/activity\",      // path\n                    RouteMeta.build(\n                        RouteType.ACTIVITY,         // Route type\n                        TestDynamicActivity.class,  // Target class\n                        \"/dynamic/activity\",        // Path\n                        \"dynamic\",                  // Group\n                        0,                          // not need\n                        0                           // Extra tag, Used to mark page feature\n                    )\n                );\n            }\n        });\n    ```\n\n#### V. More features\n\n1. Other settings in initialization\n    ``` java\n    ARouter.openLog(); // Open log\n    ARouter.openDebug(); // When using InstantRun, you need to open this switch and turn it off after going online. Otherwise, there is a security risk.\n    ARouter.printStackTrace(); // Print thread stack when printing logs\n    ```\n\n2. API description\n    ``` java\n    // Build a standard route request\n    ARouter.getInstance().build(\"/home/main\").navigation();\n\n    // Build a standard route request, via URI\n    Uri uri;\n    ARouter.getInstance().build(uri).navigation();\n\n    // Build a standard route request, startActivityForResult\n    // The first parameter must be Activity and the second parameter is RequestCode\n    ARouter.getInstance().build(\"/home/main\", \"ap\").navigation(this, 5);\n\n    // Pass Bundle directly\n    Bundle params = new Bundle();\n    ARouter.getInstance()\n        .build(\"/home/main\")\n        .with(params)\n        .navigation();\n\n    // Set Flag\n    ARouter.getInstance()\n        .build(\"/home/main\")\n        .withFlags();\n        .navigation();\n\n    // For fragment\n    Fragment fragment = (Fragment) ARouter.getInstance().build(\"/test/fragment\").navigation();\n                        \n    // transfer the object \n    ARouter.getInstance()\n        .withObject(\"key\", new TestObj(\"Jack\", \"Rose\"))\n        .navigation();\n\n    // Think the interface is not enough, you can directly set parameter into Bundle\n    ARouter.getInstance()\n            .build(\"/home/main\")\n            .getExtra();\n\n    // Transition animation (regular mode)\n    ARouter.getInstance()\n        .build(\"/test/activity2\")\n        .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)\n        .navigation(this);\n\n    // Transition animation (API16+)\n    ActivityOptionsCompat compat = ActivityOptionsCompat.\n        makeScaleUpAnimation(v, v.getWidth() / 2, v.getHeight() / 2, 0, 0);\n\n    // ps. makeSceneTransitionAnimation, When using shared elements, you need to pass in the current Activity in the navigation method\n\n    ARouter.getInstance()\n        .build(\"/test/activity2\")\n        .withOptionsCompat(compat)\n        .navigation();\n            \n    // Use green channel (skip all interceptors)\n    ARouter.getInstance().build(\"/home/main\").greenChannel().navigation();\n\n    // Use your own log tool to print logs\n    ARouter.setLogger();\n\n    // Use your custom thread pool\n    ARouter.setExecutor();\n    ```\n\n3. Get the original URI\n    ``` java\n    String uriStr = getIntent().getStringExtra(ARouter.RAW_URI);\n    ```\n\n4. Rewrite URL\n    ``` java\n    // Implement the PathReplaceService interface\n    @Route(path = \"/xxx/xxx\")\n    public class PathReplaceServiceImpl implements PathReplaceService {\n        /**\n        * For normal path.\n        *\n        * @param path raw path\n        */\n        String forString(String path) {\n            // Custom logic\n            return path;\n        }\n\n    /**\n        * For uri type.\n        *\n        * @param uri raw uri\n        */\n        Uri forUri(Uri uri) {\n            // Custom logic\n            return url;\n        }\n    }\n    ```\n\n5. Generate router doc\n    ``` gradle\n    // Edit build.gradle, add option 'AROUTER_GENERATE_DOC = enable'\n    // Doc file : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-${moduleName}.json\n    android {\n        defaultConfig {\n            ...\n            javaCompileOptions {\n                annotationProcessorOptions {\n                    arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: \"enable\"]\n                }\n            }\n        }\n    }\n    ```\n\n#### VI. Other\n\n1. Old version of gradle plugin configuration\n    ``` gradle\n    apply plugin: 'com.neenbedankt.android-apt'\n\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\n        }\n    }\n\n    apt {\n        arguments {\n            AROUTER_MODULE_NAME project.getName();\n        }\n    }\n\n    dependencies {\n        compile 'com.alibaba:arouter-api:x.x.x'\n        apt 'com.alibaba:arouter-compiler:x.x.x'\n        ...\n    }\n    ```\n\n2. Kotlin project configuration\n    ```\n    // You can refer to the wording in the \"module-kotlin\" module\n    apply plugin: 'kotlin-kapt'\n\n    kapt {\n        arguments {\n            arg(\"AROUTER_MODULE_NAME\", project.getName())\n        }\n    }\n\n    dependencies {\n        compile 'com.alibaba:arouter-api:x.x.x'\n        kapt 'com.alibaba:arouter-compiler:x.x.x'\n        ...\n    }\n    ```\n\n#### VII. Communication\n\n1. Communication\n\n    1. DingDing group1\n    \n        ![dingding](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/dingding-group-1.png)\n\n    2. QQ group1\n    \n        ![qq](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/qq-group-1.png)\n\n    3. QQ group2\n        \n        ![qq](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/qq-group-2.png)\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 24.51171875,
          "content": "```\n    一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦\n```\n\n[English](https://github.com/alibaba/ARouter/blob/master/README.md)\n\n##### [![Join the chat at https://gitter.im/alibaba/ARouter](https://badges.gitter.im/alibaba/ARouter.svg)](https://gitter.im/alibaba/ARouter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Hex.pm](https://img.shields.io/hexpm/l/plug.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\n---\n\n#### 最新版本\n\n模块|arouter-api|arouter-compiler|arouter-register|arouter-idea-plugin\n---|---|---|---|---\n最新版本|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-api/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-api)|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-compiler/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-compiler)|[![Download](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-register/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.alibaba/arouter-register)|[![as plugin](https://img.shields.io/jetbrains/plugin/d/11428-arouter-helper.svg)](https://plugins.jetbrains.com/plugin/11428-arouter-helper)\n\n#### Demo展示\n\n##### [Demo apk下载](https://github.com/alibaba/ARouter/blob/develop/demo/arouter-demo-1.5.2.apk)、[Demo Gif](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/arouter-demo.gif)\n\n#### 一、功能介绍\n1. **支持直接解析标准URL进行跳转，并自动注入参数到目标页面中**\n2. **支持多模块工程使用**\n3. **支持添加多个拦截器，自定义拦截顺序**\n4. **支持依赖注入，可单独作为依赖注入框架使用**\n5. **支持InstantRun**\n6. **支持MultiDex**(Google方案)\n7. 映射关系按组分类、多级管理，按需初始化\n8. 支持用户指定全局降级与局部降级策略\n9. 页面、拦截器、服务等组件均自动注册到框架\n10. 支持多种方式配置转场动画\n11. 支持获取Fragment\n12. 完全支持Kotlin以及混编(配置见文末 其他#5)\n13. **支持第三方 App 加固**(使用 arouter-register 实现自动注册)\n14. **支持生成路由文档**\n15. **提供 IDE 插件便捷的关联路径和目标类**\n16. 支持增量编译(开启文档生成后无法增量编译)\n17. 支持动态注册路由信息\n\n#### 二、典型应用\n1. 从外部URL映射到内部页面，以及参数传递与解析\n2. 跨模块页面跳转，模块间解耦\n3. 拦截跳转过程，处理登陆、埋点等逻辑\n4. 跨模块API调用，通过控制反转来做组件解耦\n\n#### 三、基础功能\n1. 添加依赖和配置\n    ``` gradle\n    android {\n        defaultConfig {\n            ...\n            javaCompileOptions {\n                annotationProcessorOptions {\n                    arguments = [AROUTER_MODULE_NAME: project.getName()]\n                }\n            }\n        }\n    }\n\n    dependencies {\n        // 替换成最新版本, 需要注意的是api\n        // 要与compiler匹配使用，均使用最新版可以保证兼容\n        compile 'com.alibaba:arouter-api:x.x.x'\n        annotationProcessor 'com.alibaba:arouter-compiler:x.x.x'\n        ...\n    }\n    // 旧版本gradle插件(< 2.2)，可以使用apt插件，配置方法见文末'其他#4'\n    // Kotlin配置参考文末'其他#5'\n    ```\n\n2. 添加注解\n    ``` java\n    // 在支持路由的页面上添加注解(必选)\n    // 这里的路径需要注意的是至少需要有两级，/xx/xx\n    @Route(path = \"/test/activity\")\n    public class YourActivity extend Activity {\n        ...\n    }\n    ```\n\n3. 初始化SDK\n    ``` java\n    if (isDebug()) {           // 这两行必须写在init之前，否则这些配置在init过程中将无效\n        ARouter.openLog();     // 打印日志\n        ARouter.openDebug();   // 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)\n    }\n    ARouter.init(mApplication); // 尽可能早，推荐在Application中初始化\n    ```\n\n4. 发起路由操作\n    ``` java\n    // 1. 应用内简单的跳转(通过URL跳转在'进阶用法'中)\n    ARouter.getInstance().build(\"/test/activity\").navigation();\n\n    // 2. 跳转并携带参数\n    ARouter.getInstance().build(\"/test/1\")\n                .withLong(\"key1\", 666L)\n                .withString(\"key3\", \"888\")\n                .withObject(\"key4\", new Test(\"Jack\", \"Rose\"))\n                .navigation();\n    ```\n\n5. 添加混淆规则(如果使用了Proguard)\n    ``` \n    -keep public class com.alibaba.android.arouter.routes.**{*;}\n    -keep public class com.alibaba.android.arouter.facade.**{*;}\n    -keep class * implements com.alibaba.android.arouter.facade.template.ISyringe{*;}\n\n    # 如果使用了 byType 的方式获取 Service，需添加下面规则，保护接口\n    -keep interface * implements com.alibaba.android.arouter.facade.template.IProvider\n\n    # 如果使用了 单类注入，即不定义接口实现 IProvider，需添加下面规则，保护实现\n    # -keep class * implements com.alibaba.android.arouter.facade.template.IProvider\n    ```\n\n6. 使用 Gradle 插件实现路由表的自动加载 (可选)\n    ```gradle\n    apply plugin: 'com.alibaba.arouter'\n\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            classpath \"com.alibaba:arouter-register:?\"\n        }\n    }\n    ```\n\n    可选使用，通过 ARouter 提供的注册插件进行路由表的自动加载(power by [AutoRegister](https://github.com/luckybilly/AutoRegister))， 默认通过扫描 dex 的方式\n    进行加载通过 gradle 插件进行自动注册可以缩短初始化时间解决应用加固导致无法直接访问\n    dex 文件，初始化失败的问题，需要注意的是，该插件必须搭配 api 1.3.0 以上版本使用！\n\n7. 使用 IDE 插件导航到目标类 (可选)\n\n    在 Android Studio 插件市场中搜索 `ARouter Helper`, 或者直接下载文档上方 `最新版本` 中列出的 `arouter-idea-plugin` zip 安装包手动安装，安装后\n    插件无任何设置，可以在跳转代码的行首找到一个图标 (![navigation](https://raw.githubusercontent.com/alibaba/ARouter/develop/arouter-idea-plugin/src/main/resources/icon/outline_my_location_black_18dp.png))\n    点击该图标，即可跳转到标识了代码中路径的目标类\n\n#### 四、进阶用法\n1. 通过URL跳转\n    ``` java\n    // 新建一个Activity用于监听Scheme事件,之后直接把url传递给ARouter即可\n    public class SchemeFilterActivity extends Activity {\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri = getIntent().getData();\n        ARouter.getInstance().build(uri).navigation();\n        finish();\n        }\n    }\n    ```\n\n    AndroidManifest.xml\n    ``` xml\n    <activity android:name=\".activity.SchemeFilterActivity\">\n        <!-- Scheme -->\n        <intent-filter>\n            <data\n            android:host=\"m.aliyun.com\"\n            android:scheme=\"arouter\"/>\n\n            <action android:name=\"android.intent.action.VIEW\"/>\n\n            <category android:name=\"android.intent.category.DEFAULT\"/>\n            <category android:name=\"android.intent.category.BROWSABLE\"/>\n        </intent-filter>\n    </activity>\n    ```\n\n2. 解析参数\n    ``` java\n    // 为每一个参数声明一个字段，并使用 @Autowired 标注\n    // URL中不能传递Parcelable类型数据，通过ARouter api可以传递Parcelable对象\n    @Route(path = \"/test/activity\")\n    public class Test1Activity extends Activity {\n        @Autowired\n        public String name;\n        @Autowired\n        int age;\n        \n        // 通过name来映射URL中的不同参数\n        @Autowired(name = \"girl\") \n        boolean boy;\n        \n        // 支持解析自定义对象，URL中使用json传递\n        @Autowired\n        TestObj obj;      \n        \n        // 使用 withObject 传递 List 和 Map 的实现了\n        // Serializable 接口的实现类(ArrayList/HashMap)\n        // 的时候，接收该对象的地方不能标注具体的实现类类型\n        // 应仅标注为 List 或 Map，否则会影响序列化中类型\n        // 的判断, 其他类似情况需要同样处理        \n        @Autowired\n        List<TestObj> list;\n        @Autowired\n        Map<String, List<TestObj>> map;\n        \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ARouter.getInstance().inject(this);\n\n        // ARouter会自动对字段进行赋值，无需主动获取\n        Log.d(\"param\", name + age + boy);\n        }\n    }\n\n\n    // 如果需要传递自定义对象，新建一个类（并非自定义对象类），然后实现 SerializationService,并使用@Route注解标注(方便用户自行选择序列化方式)，例如：\n    @Route(path = \"/yourservicegroupname/json\")\n    public class JsonServiceImpl implements SerializationService {\n        @Override\n        public void init(Context context) {\n\n        }\n\n        @Override\n        public <T> T json2Object(String text, Class<T> clazz) {\n            return JSON.parseObject(text, clazz);\n        }\n\n        @Override\n        public String object2Json(Object instance) {\n            return JSON.toJSONString(instance);\n        }\n    }\n    ```\n\n3. 声明拦截器(拦截跳转过程，面向切面编程)\n    ``` java\n    // 比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查\n    // 拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行\n    @Interceptor(priority = 8, name = \"测试用拦截器\")\n    public class TestInterceptor implements IInterceptor {\n        @Override\n        public void process(Postcard postcard, InterceptorCallback callback) {\n        ...\n        callback.onContinue(postcard);  // 处理完成，交还控制权\n        // callback.onInterrupt(new RuntimeException(\"我觉得有点异常\"));      // 觉得有问题，中断路由流程\n\n        // 以上两种至少需要调用其中一种，否则不会继续路由\n        }\n\n        @Override\n        public void init(Context context) {\n        // 拦截器的初始化，会在sdk初始化的时候调用该方法，仅会调用一次\n        }\n    }\n    ```\n\n4. 处理跳转结果\n    ``` java\n    // 使用两个参数的navigation方法，可以获取单次跳转的结果\n    ARouter.getInstance().build(\"/test/1\").navigation(this, new NavigationCallback() {\n        @Override\n        public void onFound(Postcard postcard) {\n        ...\n        }\n\n        @Override\n        public void onLost(Postcard postcard) {\n        ...\n        }\n    });\n    ```\n\n5. 自定义全局降级策略\n    ``` java\n    // 实现DegradeService接口，并加上一个Path内容任意的注解即可\n    @Route(path = \"/xxx/xxx\")\n    public class DegradeServiceImpl implements DegradeService {\n    @Override\n    public void onLost(Context context, Postcard postcard) {\n        // do something.\n    }\n\n    @Override\n    public void init(Context context) {\n\n    }\n    }\n    ```\n\n6. 为目标页面声明更多信息\n    ``` java\n    // 我们经常需要在目标页面中配置一些属性，比方说\"是否需要登陆\"之类的\n    // 可以通过 Route 注解中的 extras 属性进行扩展，这个属性是一个 int值，换句话说，单个int有4字节，也就是32位，可以配置32个开关\n    // 剩下的可以自行发挥，通过字节操作可以标识32个开关，通过开关标记目标页面的一些属性，在拦截器中可以拿到这个标记进行业务逻辑判断\n    @Route(path = \"/test/activity\", extras = Consts.XXXX)\n    ```\n\n7. 通过依赖注入解耦:服务管理(一) 暴露服务\n    ``` java\n    // 声明接口,其他组件通过接口来调用服务\n    public interface HelloService extends IProvider {\n        String sayHello(String name);\n    }\n\n    // 实现接口\n    @Route(path = \"/yourservicegroupname/hello\", name = \"测试服务\")\n    public class HelloServiceImpl implements HelloService {\n\n        @Override\n        public String sayHello(String name) {\n        return \"hello, \" + name;\n        }\n\n        @Override\n        public void init(Context context) {\n\n        }\n    }\n    ```\n\n8. 通过依赖注入解耦:服务管理(二) 发现服务\n    ``` java\n    public class Test {\n        @Autowired\n        HelloService helloService;\n\n        @Autowired(name = \"/yourservicegroupname/hello\")\n        HelloService helloService2;\n\n        HelloService helloService3;\n\n        HelloService helloService4;\n\n        public Test() {\n        ARouter.getInstance().inject(this);\n        }\n\n        public void testService() {\n        // 1. (推荐)使用依赖注入的方式发现服务,通过注解标注字段,即可使用，无需主动获取\n        // Autowired注解中标注name之后，将会使用byName的方式注入对应的字段，不设置name属性，会默认使用byType的方式发现服务(当同一接口有多个实现的时候，必须使用byName的方式发现服务)\n        helloService.sayHello(\"Vergil\");\n        helloService2.sayHello(\"Vergil\");\n\n        // 2. 使用依赖查找的方式发现服务，主动去发现服务并使用，下面两种方式分别是byName和byType\n        helloService3 = ARouter.getInstance().navigation(HelloService.class);\n        helloService4 = (HelloService) ARouter.getInstance().build(\"/yourservicegroupname/hello\").navigation();\n        helloService3.sayHello(\"Vergil\");\n        helloService4.sayHello(\"Vergil\");\n        }\n    }\n    ```\n\n9. 预处理服务\n    ``` java\n    // 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可\n    @Route(path = \"/xxx/xxx\")\n    public class PretreatmentServiceImpl implements PretreatmentService {\n        @Override\n        public boolean onPretreatment(Context context, Postcard postcard) {\n            // 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可\n        }\n\n        @Override\n        public void init(Context context) {\n    \n        }\n    }\n    ```\n\n10. 动态注册路由信息\n适用于部分插件化架构的App以及需要动态注册路由信息的场景，可以通过 ARouter 提供的接口实现动态注册\n路由信息，目标页面和服务可以不标注 @Route 注解，**注意：同一批次仅允许相同 group 的路由信息注册**\n    ``` java\n        ARouter.getInstance().addRouteGroup(new IRouteGroup() {\n            @Override\n            public void loadInto(Map<String, RouteMeta> atlas) {\n                atlas.put(\"/dynamic/activity\",      // path\n                    RouteMeta.build(\n                        RouteType.ACTIVITY,         // 路由信息\n                        TestDynamicActivity.class,  // 目标的 Class\n                        \"/dynamic/activity\",        // Path\n                        \"dynamic\",                  // Group, 尽量保持和 path 的第一段相同\n                        0,                          // 优先级，暂未使用\n                        0                           // Extra，用于给页面打标\n                    )\n                );\n            }\n        });\n    ```\n \n#### 五、更多功能\n\n1. 初始化中的其他设置\n    ``` java\n    ARouter.openLog(); // 开启日志\n    ARouter.openDebug(); // 使用InstantRun的时候，需要打开该开关，上线之后关闭，否则有安全风险\n    ARouter.printStackTrace(); // 打印日志的时候打印线程堆栈\n    ```\n\n2. 详细的API说明\n    ``` java\n    // 构建标准的路由请求\n    ARouter.getInstance().build(\"/home/main\").navigation();\n\n    // 构建标准的路由请求，并指定分组\n    ARouter.getInstance().build(\"/home/main\", \"ap\").navigation();\n\n    // 构建标准的路由请求，通过Uri直接解析\n    Uri uri;\n    ARouter.getInstance().build(uri).navigation();\n\n    // 构建标准的路由请求，startActivityForResult\n    // navigation的第一个参数必须是Activity，第二个参数则是RequestCode\n    ARouter.getInstance().build(\"/home/main\", \"ap\").navigation(this, 5);\n\n    // 直接传递Bundle\n    Bundle params = new Bundle();\n    ARouter.getInstance()\n        .build(\"/home/main\")\n        .with(params)\n        .navigation();\n\n    // 指定Flag\n    ARouter.getInstance()\n        .build(\"/home/main\")\n        .withFlags();\n        .navigation();\n\n    // 获取Fragment\n    Fragment fragment = (Fragment) ARouter.getInstance().build(\"/test/fragment\").navigation();\n                        \n    // 对象传递\n    ARouter.getInstance()\n        .withObject(\"key\", new TestObj(\"Jack\", \"Rose\"))\n        .navigation();\n\n    // 觉得接口不够多，可以直接拿出Bundle赋值\n    ARouter.getInstance()\n            .build(\"/home/main\")\n            .getExtra();\n\n    // 转场动画(常规方式)\n    ARouter.getInstance()\n        .build(\"/test/activity2\")\n        .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)\n        .navigation(this);\n\n    // 转场动画(API16+)\n    ActivityOptionsCompat compat = ActivityOptionsCompat.\n        makeScaleUpAnimation(v, v.getWidth() / 2, v.getHeight() / 2, 0, 0);\n\n    // ps. makeSceneTransitionAnimation 使用共享元素的时候，需要在navigation方法中传入当前Activity\n\n    ARouter.getInstance()\n        .build(\"/test/activity2\")\n        .withOptionsCompat(compat)\n        .navigation();\n            \n    // 使用绿色通道(跳过所有的拦截器)\n    ARouter.getInstance().build(\"/home/main\").greenChannel().navigation();\n\n    // 使用自己的日志工具打印日志\n    ARouter.setLogger();\n\n    // 使用自己提供的线程池\n    ARouter.setExecutor();\n    ```\n\n3. 获取原始的URI\n    ``` java\n    String uriStr = getIntent().getStringExtra(ARouter.RAW_URI);\n    ```\n\n4. 重写跳转URL\n    ``` java\n    // 实现PathReplaceService接口，并加上一个Path内容任意的注解即可\n    @Route(path = \"/xxx/xxx\") // 必须标明注解\n    public class PathReplaceServiceImpl implements PathReplaceService {\n        /**\n        * For normal path.\n        *\n        * @param path raw path\n        */\n        String forString(String path) {\n        return path;    // 按照一定的规则处理之后返回处理后的结果\n        }\n\n    /**\n        * For uri type.\n        *\n        * @param uri raw uri\n        */\n    Uri forUri(Uri uri) {\n        return url;    // 按照一定的规则处理之后返回处理后的结果\n    }\n    }\n    ```\n\n5. 生成路由文档\n    ``` gradle\n    // 更新 build.gradle, 添加参数 AROUTER_GENERATE_DOC = enable\n    // 生成的文档路径 : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-${moduleName}.json\n    android {\n        defaultConfig {\n            ...\n            javaCompileOptions {\n                annotationProcessorOptions {\n                    arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: \"enable\"]\n                }\n            }\n        }\n    }\n    ```\n\n#### 六、其他\n\n1. 路由中的分组概念\n\n\t- SDK中针对所有的路径(/test/1 /test/2)进行分组，分组只有在分组中的某一个路径第一次被访问的时候，该分组才会被初始化\n\t- 可以通过 @Route 注解主动指定分组，否则使用路径中第一段字符串(/*/)作为分组\n\t- 注意：一旦主动指定分组之后，应用内路由需要使用 ARouter.getInstance().build(path, group) 进行跳转，手动指定分组，否则无法找到\n    ``` java\n    @Route(path = \"/test/1\", group = \"app\")\n    ```\n\n2. 拦截器和服务的异同\n\n\t- 拦截器和服务所需要实现的接口不同，但是结构类似，都存在 init(Context context) 方法，但是两者的调用时机不同\n\t- 拦截器因为其特殊性，会被任何一次路由所触发，拦截器会在ARouter初始化的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。\n\t- 服务没有该限制，某一服务可能在App整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作\n\n3. 旧版本gradle插件的配置方式\n    ``` gradle\n    apply plugin: 'com.neenbedankt.android-apt'\n\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n\n        dependencies {\n            classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\n        }\n    }\n\n    apt {\n        arguments {\n            AROUTER_MODULE_NAME project.getName();\n        }\n    }\n\n    dependencies {\n        compile 'com.alibaba:arouter-api:x.x.x'\n        apt 'com.alibaba:arouter-compiler:x.x.x'\n        ...\n    }\n    ```\n\n4. Kotlin项目中的配置方式\n    ```\n    // 可以参考 module-kotlin 模块中的写法\n    apply plugin: 'kotlin-kapt'\n\n    kapt {\n        arguments {\n            arg(\"AROUTER_MODULE_NAME\", project.getName())\n        }\n    }\n\n    dependencies {\n        compile 'com.alibaba:arouter-api:x.x.x'\n        kapt 'com.alibaba:arouter-compiler:x.x.x'\n        ...\n    }\n    ```\n\n#### 七、Q&A\n\n1. \"W/ARouter::: ARouter::No postcard![ ]\"\n\n    这个Log正常的情况下也会打印出来，如果您的代码中没有实现DegradeService和PathReplaceService的话，因为ARouter本身的一些功能也依赖\n    自己提供的Service管理功能，ARouter在跳转的时候会尝试寻找用户实现的PathReplaceService，用于对路径进行重写(可选功能)，所以如果您没有\n    实现这个服务的话，也会抛出这个日志\n\n    推荐在app中实现DegradeService、PathReplaceService\n\n2. \"W/ARouter::: ARouter::There is no route match the path [/xxx/xxx], in group [xxx][ ]\"\n\n    - 通常来说这种情况是没有找到目标页面，目标不存在\n    - 如果这个页面是存在的，那么您可以按照下面的步骤进行排查\n        1. 检查目标页面的注解是否配置正确，正确的注解形式应该是 (@Route(path=\"/test/test\"), 如没有特殊需求，请勿指定group字段，废弃功能)\n        2. 检查目标页面所在的模块的gradle脚本中是否依赖了 arouter-compiler sdk (需要注意的是，要使用apt依赖，而不是compile关键字依赖)\n        3. 检查编译打包日志，是否出现了形如 ARouter::\u0005Compiler >>> xxxxx 的日志，日志中会打印出发现的路由目标\n        4. 启动App的时候，开启debug、log(openDebug/openLog), 查看映射表是否已经被扫描出来，形如 D/ARouter::: LogisticsCenter has already been loaded, GroupIndex[4]，GroupIndex > 0\n\n3. 开启InstantRun之后无法跳转(高版本Gradle插件下无法跳转)？\n        \n     因为开启InstantRun之后，很多类文件不会放在原本的dex中，需要单独去加载，ARouter默认不会去加载这些文件，因为安全原因，只有在开启了openDebug之后\n     ARouter才回去加载InstantRun产生的文件，所以在以上的情况下，需要在init**之前**调用openDebug\n \n4. TransformException:java.util.zip.ZipException: duplicate entry ....\n \n     ARouter有按组加载的机制，关于分组可以参考 6-1 部分，ARouter允许一个module中存在多个分组，但是不允许多个module中存在相同的分组，会导致映射文件冲突\n\n5. Kotlin类中的字段无法注入如何解决？\n    \n    首先，Kotlin中的字段是可以自动注入的，但是注入代码为了减少反射，使用的字段赋值的方式来注入的，Kotlin默认会生成set/get方法，并把属性设置为private\n    所以只要保证Kotlin中字段可见性不是private即可，简单解决可以在字段上添加 @JvmField \n\n6. 通过URL跳转之后，在intent中拿不到参数如何解决？\n    \n    需要注意的是，如果不使用自动注入，那么可以不写 `ARouter.getInstance().inject(this)`，但是需要取值的字段仍然需要标上 `@Autowired` 注解，因为\n    只有标上注解之后，ARouter才能知道以哪一种数据类型提取URL中的参数并放入Intent中，这样您才能在intent中获取到对应的参数\n    \n7. 新增页面之后，无法跳转？\n    \n    ARouter加载Dex中的映射文件会有一定耗时，所以ARouter会缓存映射文件，直到新版本升级(版本号或者versionCode变化)，而如果是开发版本(ARouter.openDebug())，\n    ARouter 每次启动都会重新加载映射文件，开发阶段一定要打开 Debug 功能\n\n#### 八、其他\n\n1. 沟通和交流\n\n    1. 钉钉交流群1\n    \n        ![qq](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/dingding-group-1.png)\n\n    2. QQ 交流群1\n    \n        ![qq](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/qq-group-1.png)\n\n    3. QQ 交流群2\n        \n        ![qq](https://raw.githubusercontent.com/alibaba/ARouter/master/demo/qq-group-2.png)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "arouter-annotation",
          "type": "tree",
          "content": null
        },
        {
          "name": "arouter-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "arouter-compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "arouter-gradle-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "arouter-idea-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.6220703125,
          "content": "buildscript {\n    ext.kotlin_version = '1.4.10'\n    ext.arouter_register_version = '1.0.2'\n\n    repositories {\n        mavenCentral()\n        google()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.1'\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"com.alibaba:arouter-register:$arouter_register_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n        google()\n    }\n}"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.5087890625,
          "content": "## Project-wide Gradle settings.\n#\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n#\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#Fri Oct 09 19:03:24 CST 2015\n\n# JVM\norg.gradle.daemon=true\n#org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n\nCOMPILE_SDK_VERSION=29\nBUILDTOOLS_VERSION=29.0.2\nSUPPORT_LIB_VERSION=28.0.0\nMIN_SDK_VERSION=14\nTARGET_SDK_VERSION=28\n\nGROUP=com.alibaba\n\nPOM_URL=https://github.com/Alibaba/ARouter/\nPOM_SCM_URL=https://github.com/Alibaba/ARouter/\nPOM_SCM_CONNECTION=scm:git:git://github.com/Alibaba/ARouter.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/Alibaba/ARouter.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=zhi1ong\nPOM_DEVELOPER_NAME=ZhiLong Liu\n\narouter_idea_plugin_version=1.0.0\nsupport_idea_version=2016.2.5\narouter_idea_plugin_name=ARouter Road Sign"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.8544921875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "module-java-export",
          "type": "tree",
          "content": null
        },
        {
          "name": "module-java",
          "type": "tree",
          "content": null
        },
        {
          "name": "module-kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.234375,
          "content": "include ':app'\ninclude ':arouter-api'\ninclude ':arouter-compiler'\ninclude ':arouter-annotation'\ninclude ':module-java'\ninclude ':module-java-export'\ninclude ':module-kotlin'\ninclude ':arouter-gradle-plugin'\n//include ':arouter-idea-plugin'\n"
        }
      ]
    }
  ]
}