{
  "metadata": {
    "timestamp": 1736708863666,
    "page": 69,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kestra-io/kestra",
      "stars": 15175,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2724609375,
          "content": "root = true\n\n[*]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=false\ntrim_trailing_whitespace=true\nindent_style=space\nindent_size=4\ncontinuation_indent_size=4\n\n[*.yml]\nindent_size=2\n\n[*.md]\nindent_size=2\n\n[*.yaml]\nindent_size=2\n\n[*.json]\nindent_size=2\n\n[*.css]\nindent_size=2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.154296875,
          "content": "# Match the .editorconfig\n*           text=auto eol=lf\n\n# Scripts\n*.bat       text eol=crlf\n*.sh        text eol=lf\n\n# Gradle wrapper\n/gradlew    text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7236328125,
          "content": "### Java\nThumbs.db\n.DS_Store\n.gradle\nbuild/\ntarget/\nout/\n.idea\n.vscode\nprettierrc.js\n*.iml\n*.ipr\n*.iws\n.project\n.settings\n.classpath\n.attach*\n**/*.class\n**/bin/*\n\n### Configurations\ndocker-compose.override.yml\ncli/src/main/resources/application-*.yml\n/local\n\n### Javascript\nnode\nnode_modules\nyarn-error.log\nyarn.lock\nui/node_modules\nui/.env.local\nui/.env.*.local\nwebserver/src/main/resources/ui\nyarn.lock\nui/coverage\nui/stats.html\nui/.frontend-gradle-plugin\n\n### Docker\n/.env\ndocker-compose*.overide.yml\ndocker/app/plugins/*.jar\ndocker/app/kestra\ndocker/app/confs/*.yml\ndocker/app/secrets/*.yml\n\n### Build\ncore/src/main/resources/gradle.properties\n.plugins.override\n\n# H2 Database\n/data\n\n# Allure Reports\n**/allure-results/*\n\n*storybook.log\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.1376953125,
          "content": "\ntasks:\n  - init: ./gradlew build --priority=normal\n\n\nvscode:\n  extensions:\n    - vscjava.vscode-java-pack\n    - ms-azuretools.vscode-docker\n"
        },
        {
          "name": ".plugins",
          "type": "blob",
          "size": 5.6904296875,
          "content": "#\n# List of plugins to install locally with: $ make install-plugins\n# Format: <RepositoryName>:<GroupId>:<ArtifactId>:<Version>\n#\n# Uncomment the lines corresponding to the plugins to be installed:\n#plugin-airbyte:io.kestra.plugin:plugin-airbyte:LATEST\n#plugin-airflow:io.kestra.plugin:plugin-airflow:LATEST\n#plugin-amqp:io.kestra.plugin:plugin-amqp:LATEST\n#plugin-ansible:io.kestra.plugin:plugin-ansible:LATEST\n#plugin-aws:io.kestra.plugin:plugin-aws:LATEST\n#plugin-azure:io.kestra.plugin:plugin-azure:LATEST\n#plugin-cassandra:io.kestra.plugin:plugin-cassandra:LATEST\n#plugin-cloudquery:io.kestra.plugin:plugin-cloudquery:LATEST\n#plugin-compress:io.kestra.plugin:plugin-compress:LATEST\n#plugin-couchbase:io.kestra.plugin:plugin-couchbase:LATEST\n#plugin-crypto:io.kestra.plugin:plugin-crypto:LATEST\n#plugin-databricks:io.kestra.plugin:plugin-databricks:LATEST\n#plugin-datahub:io.kestra.plugin:plugin-datahub:LATEST\n#plugin-dataform:io.kestra.plugin:plugin-dataform:LATEST\n#plugin-dbt:io.kestra.plugin:plugin-dbt:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-db2:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-mongodb:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-mysql:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-oracle:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-postgres:LATEST\n#plugin-debezium:io.kestra.plugin:plugin-debezium-sqlserver:LATEST\n#plugin-docker:io.kestra.plugin:plugin-docker:LATEST\n#plugin-elasticsearch:io.kestra.plugin:plugin-elasticsearch:LATEST\n#plugin-fivetran:io.kestra.plugin:plugin-fivetran:LATEST\n#plugin-fs:io.kestra.plugin:plugin-fs:LATEST\n#plugin-gcp:io.kestra.plugin:plugin-gcp:LATEST\n#plugin-git:io.kestra.plugin:plugin-git:LATEST\n#plugin-github:io.kestra.plugin:plugin-github:LATEST\n#plugin-googleworkspace:io.kestra.plugin:plugin-googleworkspace:LATEST\n#plugin-hightouch:io.kestra.plugin:plugin-hightouch:LATEST\n#plugin-hubspot:io.kestra.plugin:plugin-hubspot:LATEST\n#plugin-huggingface:io.kestra.plugin:plugin-huggingface:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-as400:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-clickhouse:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-db2:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-duckdb:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-druid:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-mysql:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-oracle:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-pinot:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-postgres:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-redshift:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-snowflake:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-sqlserver:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-trino:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-vectorwise:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-vertica:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-dremio:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-arrow-flight:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-sqlite:LATEST\n#plugin-jdbc:io.kestra.plugin:plugin-jdbc-sybase:LATEST\n#plugin-jira:io.kestra.plugin:plugin-jira:LATEST\n#plugin-kafka:io.kestra.plugin:plugin-kafka:LATEST\n#plugin-kubernetes:io.kestra.plugin:plugin-kubernetes:LATEST\n#plugin-ldap:io.kestra.plugin:plugin-ldap:LATEST\n#plugin-linear:io.kestra.plugin:plugin-linear:LATEST\n#plugin-malloy:io.kestra.plugin:plugin-malloy:LATEST\n#plugin-meilisearch:io.kestra.plugin:plugin-meilisearch:LATEST\n#plugin-minio:io.kestra.plugin:plugin-minio:LATEST\n#plugin-modal:io.kestra.plugin:plugin-modal:LATEST\n#plugin-mongodb:io.kestra.plugin:plugin-mongodb:LATEST\n#plugin-mqtt:io.kestra.plugin:plugin-mqtt:LATEST\n#plugin-nats:io.kestra.plugin:plugin-nats:LATEST\n#plugin-neo4j:io.kestra.plugin:plugin-neo4j:LATEST\n#plugin-notifications:io.kestra.plugin:plugin-notifications:LATEST\n#plugin-openai:io.kestra.plugin:plugin-openai:LATEST\n#plugin-opensearch:io.kestra.plugin:plugin-opensearch:LATEST\n#plugin-powerbi:io.kestra.plugin:plugin-powerbi:LATEST\n#plugin-pulsar:io.kestra.plugin:plugin-pulsar:LATEST\n#plugin-redis:io.kestra.plugin:plugin-redis:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-groovy:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-jbang:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-julia:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-jython:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-nashorn:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-node:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-powershell:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-python:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-r:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-ruby:LATEST\n#plugin-script:io.kestra.plugin:plugin-script-shell:LATEST\n#plugin-serdes:io.kestra.plugin:plugin-serdes:LATEST\n#plugin-servicenow:io.kestra.plugin:plugin-servicenow:LATEST\n#plugin-singer:io.kestra.plugin:plugin-singer:LATEST\n#plugin-soda:io.kestra.plugin:plugin-soda:LATEST\n#plugin-solace:io.kestra.plugin:plugin-solace:LATEST\n#plugin-spark:io.kestra.plugin:plugin-spark:LATEST\n#plugin-sqlmesh:io.kestra.plugin:plugin-sqlmesh:LATEST\n#plugin-surrealdb:io.kestra.plugin:plugin-surrealdb:LATEST\n#plugin-terraform:io.kestra.plugin:plugin-terraform:LATEST\n#plugin-transform:io.kestra.plugin:plugin-transform-grok:LATEST\n#plugin-transform:io.kestra.plugin:plugin-transform-json:LATEST\n#plugin-tika:io.kestra.plugin:plugin-tika:LATEST\n#plugin-weaviate:io.kestra.plugin:plugin-weaviate:LATEST\n#plugin-zendesk:io.kestra.plugin:plugin-zendesk:LATEST\n#plugin-typesense:io.kestra.plugin:plugin-typesense:LATEST\n#storage-azure:io.kestra.storage:storage-azure:LATEST\n#storage-gcs:io.kestra.storage:storage-gcs:LATEST\n#storage-minio:io.kestra.storage:storage-minio:LATEST\n#storage-s3:io.kestra.storage:storage-s3:LATEST"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "**/*.*"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7255859375,
          "content": "FROM eclipse-temurin:21-jre-jammy\n\nARG KESTRA_PLUGINS=\"\"\nARG APT_PACKAGES=\"\"\nARG PYTHON_LIBRARIES=\"\"\n\nWORKDIR /app\n\nRUN groupadd kestra && \\\n    useradd -m -g kestra kestra\n\nCOPY --chown=kestra:kestra docker /\n\nRUN apt-get update -y && \\\n    apt-get upgrade -y && \\\n    if [ -n \"${APT_PACKAGES}\" ]; then apt-get install -y --no-install-recommends ${APT_PACKAGES}; fi && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /var/tmp/* /tmp/* && \\\n    if [ -n \"${KESTRA_PLUGINS}\" ]; then /app/kestra plugins install ${KESTRA_PLUGINS} && rm -rf /tmp/*; fi && \\\n    if [ -n \"${PYTHON_LIBRARIES}\" ]; then pip install ${PYTHON_LIBRARIES}; fi && \\\n    chown -R kestra:kestra /app\n\nUSER kestra\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nCMD [\"--help\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5048828125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2019 Nigh Tech.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.7958984375,
          "content": "#\n# Makefile used to build and deploy Kestra locally.\n# By default Kestra will be installed under: $HOME/.kestra/current. Set $KESTRA_HOME to override default.\n#\n# Usage:\n# make install\n# make install-plugins\n# make start-standalone-postgres\n#\n# NOTE: This file is intended for development purposes only.\n\nSHELL := /bin/bash\n\nKESTRA_BASEDIR := $(shell echo $${KESTRA_HOME:-$$HOME/.kestra/current})\nKESTRA_WORKER_THREAD := $(shell echo $${KESTRA_WORKER_THREAD:-4})\nVERSION := $(shell ./gradlew properties -q | awk '/^version:/ {print $$2}')\nGIT_COMMIT := $(shell git rev-parse --short HEAD)\nGIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)\nDATE := $(shell date --rfc-3339=seconds)\n\nDOCKER_IMAGE = kestra/kestra\nDOCKER_PATH = ./\n\n.SILENT:\n\n.PHONY: clean build build-exec test install\n\nall: clean build-exec install\n\nversion:\n\techo \"${VERSION}\"\n\nclean:\n\t./gradlew clean\n\nbuild: clean\n\t./gradlew build\n\nbuildSkipTests: clean\n\t./gradlew build -x test -x integrationTest -x testCodeCoverageReport --refresh-dependencies\n\ntest: clean\n\t./gradlew test\n\nbuild-exec:\n\t./gradlew -q executableJar --no-daemon --priority=normal\n\ninstall: build-exec\n\techo \"Installing Kestra: ${KESTRA_BASEDIR}\"\n\tmkdir -p ${KESTRA_BASEDIR}/bin ${KESTRA_BASEDIR}/plugins ${KESTRA_BASEDIR}/flows ${KESTRA_BASEDIR}/logs\n\tcp build/executable/* ${KESTRA_BASEDIR}/bin/kestra && chmod +x ${KESTRA_BASEDIR}/bin\n\tVERSION_INSTALLED=$$(${KESTRA_BASEDIR}/bin/kestra --version); \\\n\techo \"Kestra installed successfully (version=$$VERSION_INSTALLED) 🚀\"\n\n# Install plugins for Kestra from (.plugins file).\ninstall-plugins:\n\tif [[ ! -f \".plugins\" && ! -f \".plugins.override\" ]]; then \\\n\t\techo \"[ERROR] file '$$(pwd)/.plugins' and '$$(pwd)/.plugins.override' not found.\"; \\\n\t\texit 1; \\\n\tfi; \\\n\n\tPLUGIN_LIST=\"./.plugins\"; \\\n\tif [[ -f \".plugins.override\" ]]; then \\\n\t\tPLUGIN_LIST=\"./.plugins.override\"; \\\n\tfi; \\\n\twhile IFS= read -r plugin; do \\\n\t\t[[ $$plugin =~ ^#.* ]] && continue; \\\n\t\tPLUGINS_PATH=\"${KESTRA_INSTALL_DIR}/plugins\"; \\\n\t\tCURRENT_PLUGIN=$${plugin/LATEST/\"${VERSION}\"}; \\\n\t\tCURRENT_PLUGIN=$$(echo $$CURRENT_PLUGIN | cut -d':' -f2-); \\\n\t\tPLUGIN_FILE=\"$$PLUGINS_PATH/$$(echo $$CURRENT_PLUGIN | awk -F':' '{print $$2\"-\"$$3}').jar\"; \\\n\t\techo \"Installing Kestra plugin $$CURRENT_PLUGIN > ${KESTRA_INSTALL_DIR}/plugins\"; \\\n\t\tif [ -f \"$$PLUGIN_FILE\" ]; then \\\n\t\t    echo \"Plugin already installed in > $$PLUGIN_FILE\"; \\\n        else \\\n\t\t${KESTRA_BASEDIR}/bin/kestra plugins install $$CURRENT_PLUGIN \\\n\t\t--plugins ${KESTRA_BASEDIR}/plugins \\\n\t\t--repositories=https://s01.oss.sonatype.org/content/repositories/snapshots || exit 1; \\\n\t\tfi \\\n    done < $$PLUGIN_LIST\n\n# Build docker image from Kestra source.\nbuild-docker: build-exec\n\tcp build/executable/* docker/app/kestra && chmod +x docker/app/kestra\n\techo \"${DOCKER_IMAGE}:${VERSION}\"\n\tdocker build \\\n\t\t--compress \\\n\t\t--rm \\\n\t\t-f ./Dockerfile \\\n\t\t--build-arg=\"APT_PACKAGES=python3 python3-venv python-is-python3 python3-pip nodejs npm curl zip unzip\" \\\n\t\t--build-arg=\"PYTHON_LIBRARIES=kestra\" \\\n\t\t-t ${DOCKER_IMAGE}:${VERSION} ${DOCKER_PATH} || exit 1 ;\n\n# Verify whether Kestra is running\nhealth:\n\tPID=$$(ps aux | grep java | grep 'kestra' | grep -v 'grep' | awk '{print $$2}'); \\\n\tif [ ! -z \"$$PID\" ]; then \\\n\t    echo -e \"\\n⏳ Waiting for Kestra server...\"; \\\n        KESTRA_URL=http://localhost:8080; \\\n        while [ $$(curl -s -L -o /dev/null -w %{http_code} $$KESTRA_URL) != 200 ]; do \\\n          echo -e $$(date) \"\\tKestra server HTTP state: \" $$(curl -k -L -s -o /dev/null -w %{http_code} $$KESTRA_URL) \" (waiting for 200)\"; \\\n          sleep 2; \\\n        done; \\\n\t\techo \"Kestra is running (pid=$$PID): $$KESTRA_URL 🚀\"; \\\n\tfi\n\n\n# Kill Kestra running process\nkill:\n\tPID=$$(ps aux | grep java | grep 'kestra' | grep -v 'grep' | awk '{print $$2}'); \\\n\tif [ ! -z \"$$PID\" ]; then \\\n\t\techo \"Killing Kestra process (pid=$$PID).\"; \\\n\t\tkill $$PID; \\\n\telse \\\n\t\techo \"No Kestra process to kill.\"; \\\n\tfi\n\tdocker compose -f ./docker-compose-ci.yml down;\n\n# Default configuration for using Kestra with Postgres as backend.\ndefine KESTRA_POSTGRES_CONFIGURATION =\nmicronaut:\n  server:\n    port: 8080\ndatasources:\n  postgres:\n    url: jdbc:postgresql://localhost:5432/kestra_unit\n    driverClassName: org.postgresql.Driver\n    username: kestra\n    password: k3str4\nkestra:\n  server:\n    basic-auth:\n    enabled: false\n  encryption:\n    secret-key: 3ywuDa/Ec61VHkOX3RlI9gYq7CaD0mv0Pf3DHtAXA6U=\n  repository:\n    type: postgres\n  storage:\n    type: local\n    local:\n      base-path: \"/tmp/kestra/storage\"\n  queue:\n    type: postgres\nendef\nexport KESTRA_POSTGRES_CONFIGURATION\n\n# Build and deploy Kestra in standalone mode (using Postgres backend)\n--private-start-standalone-postgres:\n\tdocker compose -f ./docker-compose-ci.yml up postgres -d;\n\techo \"Waiting for postgres to be running\"\n\tuntil [ \"`docker inspect -f {{.State.Running}} kestra-postgres-1`\"==\"true\" ]; do \\\n\t\tsleep 1; \\\n\tdone; \\\n\trm -rf ${KESTRA_BASEDIR}/bin/confs/ && \\\n\tmkdir -p ${KESTRA_BASEDIR}/bin/confs/ ${KESTRA_BASEDIR}/logs/ && \\\n\ttouch ${KESTRA_BASEDIR}/bin/confs/application.yml\n\techo \"Starting Kestra Standalone server\"\n\tKESTRA_CONFIGURATION=$$KESTRA_POSTGRES_CONFIGURATION ${KESTRA_BASEDIR}/bin/kestra \\\n\tserver standalone \\\n\t--worker-thread ${KESTRA_WORKER_THREAD} \\\n\t--plugins \"${KESTRA_BASEDIR}/plugins\" \\\n\t--flow-path \"${KESTRA_BASEDIR}/flows\" 2>${KESTRA_BASEDIR}/logs/err.log 1>${KESTRA_BASEDIR}/logs/out.log &\n\nstart-standalone-postgres: kill --private-start-standalone-postgres health\n\n# Build and deploy Kestra in standalone mode (using In-Memory backend)\n--private-start-standalone-local:\n\trm -f \"${KESTRA_BASEDIR}/logs/*.log\"; \\\n\t${KESTRA_BASEDIR}/bin/kestra \\\n\tserver local \\\n\t--worker-thread ${KESTRA_WORKER_THREAD} \\\n\t--plugins \"${KESTRA_BASEDIR}/plugins\" \\\n\t--flow-path \"${KESTRA_BASEDIR}/flows\" 2>${KESTRA_BASEDIR}/logs/err.log 1>${KESTRA_BASEDIR}/logs/out.log &\n\nstart-standalone-local: kill --private-start-standalone-local health\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4716796875,
          "content": "<p align=\"center\">\n  <a href=\"https://www.kestra.io\">\n    <img src=\"https://kestra.io/banner.png\"  alt=\"Kestra workflow orchestrator\" />\n  </a>\n</p>\n\n<h1 align=\"center\" style=\"border-bottom: none\">\n    Event-Driven Declarative Orchestration Platform\n</h1>\n\n<div align=\"center\">\n <a href=\"https://github.com/kestra-io/kestra/releases\"><img src=\"https://img.shields.io/github/tag-pre/kestra-io/kestra.svg?color=blueviolet\" alt=\"Last Version\" /></a>\n  <a href=\"https://github.com/kestra-io/kestra/blob/develop/LICENSE\"><img src=\"https://img.shields.io/github/license/kestra-io/kestra?color=blueviolet\" alt=\"License\" /></a>\n  <a href=\"https://github.com/kestra-io/kestra/stargazers\"><img src=\"https://img.shields.io/github/stars/kestra-io/kestra?color=blueviolet&logo=github\" alt=\"Github star\" /></a> <br>\n<a href=\"https://kestra.io\"><img src=\"https://img.shields.io/badge/Website-kestra.io-192A4E?color=blueviolet\" alt=\"Kestra infinitely scalable orchestration and scheduling platform\"></a>\n<a href=\"https://kestra.io/slack\"><img src=\"https://img.shields.io/badge/Slack-Join%20Community-blueviolet?logo=slack\" alt=\"Slack\"></a>\n</div>\n\n<br />\n\n<p align=\"center\">\n    <a href=\"https://x.com/kestra_io\"><img height=\"25\" src=\"https://kestra.io/twitter.svg\" alt=\"X(formerly Twitter)\" /></a> &nbsp;\n    <a href=\"https://www.linkedin.com/company/kestra/\"><img height=\"25\" src=\"https://kestra.io/linkedin.svg\" alt=\"linkedin\" /></a> &nbsp;\n<a href=\"https://www.youtube.com/@kestra-io\"><img height=\"25\" src=\"https://kestra.io/youtube.svg\" alt=\"youtube\" /></a> &nbsp;\n</p>\n\n<p align=\"center\">\n    <a href=\"https://go.kestra.io/video/product-overview\" target=\"_blank\">\n        <img src=\"https://kestra.io/startvideo.png\" alt=\"Get started in 4 minutes with Kestra\" width=\"640px\" />\n    </a>\n</p>\n<p align=\"center\" style=\"color:grey;\"><i>Click on the image to learn how to get started with Kestra in 4 minutes.</i></p>\n\n\n## 🌟 What is Kestra?\n\nKestra is an open-source, event-driven orchestration platform that makes both **scheduled** and **event-driven** workflows easy. By bringing **Infrastructure as Code** best practices to data, process, and microservice orchestration, you can build reliable [workflows](https://kestra.io/docs/getting-started) directly from the UI in just a few lines of YAML.\n\n**Key Features:**\n- **Everything as Code and from the UI:** keep **workflows as code** with a **Git Version Control** integration, even when building them from the UI.\n- **Event-Driven & Scheduled Workflows:** automate both **scheduled** and **real-time** event-driven workflows via a simple `trigger` definition.\n- **Declarative YAML Interface:** define workflows using a simple configuration in the **built-in code editor**.\n- **Rich Plugin Ecosystem:** hundreds of plugins built in to extract data from any database, cloud storage, or API, and **run scripts in any language**.\n- **Intuitive UI & Code Editor:** build and visualize workflows directly from the UI with syntax highlighting, auto-completion and real-time syntax validation.\n- **Scalable:** designed to handle millions of workflows, with high availability and fault tolerance.\n- **Version Control Friendly:** write your workflows from the built-in code Editor and push them to your preferred Git branch directly from Kestra, enabling best practices with CI/CD pipelines and version control systems.\n- **Structure & Resilience**: tame chaos and bring resilience to your workflows with **namespaces**, **labels**, **subflows**, **retries**, **timeout**, **error handling**, **inputs**, **outputs** that generate artifacts in the UI, **variables**, **conditional branching**, **advanced scheduling**, **event triggers**, **backfills**, **dynamic tasks**, **sequential and parallel tasks**, and skip tasks or triggers when needed by setting the flag `disabled` to `true`.\n\n\n🧑‍💻 The YAML definition gets automatically adjusted any time you make changes to a workflow from the UI or via an API call. Therefore, the orchestration logic is **always managed declaratively in code**, even if you modify your workflows in other ways (UI, CI/CD, Terraform, API calls). \n\n\n<p align=\"center\">\n  <img src=\"https://kestra.io/adding-tasks.gif\" alt=\"Adding new tasks in the UI\">\n</p>\n\n---\n\n## 🚀 Quick Start\n\n### Try the Live Demo\n\nTry Kestra with our [**Live Demo**](https://demo.kestra.io/ui/login?auto). No installation required!\n\n### Get Started Locally in 5 Minutes\n\n#### Launch Kestra in Docker\n\nMake sure that Docker is running. Then, start Kestra in a single command:\n\n```bash\ndocker run --pull=always --rm -it -p 8080:8080 --user=root \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /tmp:/tmp kestra/kestra:latest server local\n```\n\nIf you're on Windows and use PowerShell:\n```powershell\ndocker run --pull=always --rm -it -p 8080:8080 --user=root `\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" `\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\nIf you're on Windows and use Command Prompt (CMD):\n```cmd\ndocker run --pull=always --rm -it -p 8080:8080 --user=root ^\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" ^\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\nIf you're on Windows and use WSL (Linux-based environment in Windows):\n```bash\ndocker run --pull=always --rm -it -p 8080:8080 --user=root \\\n    -v \"/var/run/docker.sock:/var/run/docker.sock\" \\\n    -v \"C:/Temp:/tmp\" kestra/kestra:latest server local\n```\n\nCheck our [Installation Guide](https://kestra.io/docs/installation) for other deployment options (Docker Compose, Podman, Kubernetes, AWS, GCP, Azure, and more).\n\nAccess the Kestra UI at [http://localhost:8080](http://localhost:8080) and start building your first flow!\n\n#### Your First Hello World Flow\n\nCreate a new flow with the following content:\n\n```yaml\nid: hello_world\nnamespace: dev\n\ntasks:\n  - id: say_hello\n    type: io.kestra.plugin.core.log.Log\n    message: \"Hello, World!\"\n```\n\n\nRun the flow and see the output in the UI!\n\n---\n\n## 🧩 Plugin Ecosystem\n\nKestra's functionality is extended through a rich [ecosystem of plugins](https://kestra.io/plugins) that empower you to run tasks anywhere and code in any language, including Python, Node.js, R, Go, Shell, and more. Here's how Kestra plugins enhance your workflows:\n\n- **Run Anywhere:**\n  - **Local or Remote Execution:** Execute tasks on your local machine, remote servers via SSH, or scale out to serverless containers using [Task Runners](https://kestra.io/docs/task-runners).\n  - **Docker and Kubernetes Support:** Seamlessly run Docker containers within your workflows or launch Kubernetes jobs to handle compute-intensive workloads.\n\n- **Code in Any Language:**\n  - **Scripting Support:** Write scripts in your preferred programming language. Kestra supports Python, Node.js, R, Go, Shell, and others, allowing you to integrate existing codebases and deployment patterns.\n  - **Flexible Automation:** Execute shell commands, run SQL queries against various databases, and make HTTP requests to interact with APIs.\n\n- **Event-Driven and Real-Time Processing:**\n  - **Real-Time Triggers:** React to events from external systems in real-time, such as file arrivals, new messages in message buses (Kafka, Redis, Pulsar, AMQP, MQTT, NATS, AWS SQS, Google Pub/Sub, Azure Event Hubs), and more.\n  - **Custom Events:** Define custom events to trigger flows based on specific conditions or external signals, enabling highly responsive workflows.\n\n- **Cloud Integrations:**\n  - **AWS, Google Cloud, Azure:** Integrate with a variety of cloud services to interact with storage solutions, messaging systems, compute resources, and more.\n  - **Big Data Processing:** Run big data processing tasks using tools like Apache Spark or interact with analytics platforms like Google BigQuery.\n\n- **Monitoring and Notifications:**\n  - **Stay Informed:** Send messages to Slack channels, email notifications, or trigger alerts in PagerDuty to keep your team updated on workflow statuses.\n\nKestra's plugin ecosystem is continually expanding, allowing you to tailor the platform to your specific needs. Whether you're orchestrating complex data pipelines, automating scripts across multiple environments, or integrating with cloud services, there's likely a plugin to assist. And if not, you can always [build your own plugins](https://kestra.io/docs/plugin-developer-guide/) to extend Kestra's capabilities.\n\n🧑‍💻 **Note:** This is just a glimpse of what Kestra plugins can do. Explore the full list on our [Plugins Page](https://kestra.io/plugins).\n\n---\n\n## 📚 Key Concepts\n\n- **Flows:** the core unit in Kestra, representing a workflow composed of tasks.\n- **Tasks:** individual units of work, such as running a script, moving data, or calling an API.\n- **Namespaces:** logical grouping of flows for organization and isolation.\n- **Triggers:** schedule or events that initiate the execution of flows.\n- **Inputs & Variables:** parameters and dynamic data passed into flows and tasks.\n\n---\n\n## 🎨 Build Workflows Visually\n\nKestra provides an intuitive UI that allows you to interactively build and visualize your workflows:\n\n- **Drag-and-Drop Interface:** add and rearrange tasks from the Topology Editor.\n- **Real-Time Validation:** instant feedback on your workflow's syntax and structure to catch errors early.\n- **Auto-Completion:** smart suggestions as you type to write flow code quickly and without syntax errors.\n- **Live Topology View:** see your workflow as a Directed Acyclic Graph (DAG) that updates in real-time.\n\n---\n\n\n## 🔧 Extensible and Developer-Friendly\n\n### Plugin Development\n\nCreate custom plugins to extend Kestra's capabilities. Check out our [Plugin Developer Guide](https://kestra.io/docs/plugin-developer-guide/) to get started.\n\n### Infrastructure as Code\n\n- **Version Control:** store your flows in Git repositories.\n- **CI/CD Integration:** automate deployment of flows using CI/CD pipelines.\n- **Terraform Provider:** manage Kestra resources with the [official Terraform provider](https://kestra.io/docs/terraform/).\n\n---\n\n## 🌐 Join the Community\n\nStay connected and get support:\n\n- **Slack:** Join our [Slack community](https://kestra.io/slack) to ask questions and share ideas.\n- **LinkedIn:** Follow us on [LinkedIn](https://www.linkedin.com/company/kestra/) — next to Slack and GitHub, this is our main channel to share updates and product announcements.\n- **YouTube:** Subscribe to our [YouTube channel](https://www.youtube.com/@kestra-io) for educational video content. We publish new videos every week!\n- **X:** Follow us on [X](https://x.com/kestra_io) if you're still active there.\n\n---\n\n## 🤝 Contributing\n\nWe welcome contributions of all kinds!\n\n- **Report Issues:** Found a bug or have a feature request? Open an [issue on GitHub](https://github.com/kestra-io/kestra/issues).\n- **Contribute Code:** Check out our [Contributor Guide](https://kestra.io/docs/getting-started/contributing) for initial guidelines, and explore our [good first issues](https://go.kestra.io/contributing) for beginner-friendly tasks to tackle first.\n- **Develop Plugins:** Build and share plugins using our [Plugin Developer Guide](https://kestra.io/docs/plugin-developer-guide/).\n- **Contribute to our Docs:** Contribute edits or updates to keep our [documentation](https://github.com/kestra-io/docs) top-notch.\n\n---\n\n## 📄 License\n\nKestra is licensed under the Apache 2.0 License © [Kestra Technologies](https://kestra.io).\n\n---\n\n## ⭐️ Stay Updated\n\nGive our repository a star to stay informed about the latest features and updates!\n\n[![Star the Repo](https://kestra.io/star.gif)](https://github.com/kestra-io/kestra)\n\n---\n\nThank you for considering Kestra for your workflow orchestration needs. We can't wait to see what you'll build!\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 20.013671875,
          "content": "import net.e175.klaus.zip.ZipPrefixer\nimport org.owasp.dependencycheck.gradle.extension.AnalyzerExtension\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"net.e175.klaus:zip-prefixer:0.3.1\"\n    }\n}\n\nplugins {\n    // micronaut\n    id \"java\"\n    id 'java-library'\n    id \"idea\"\n    id \"com.gradleup.shadow\" version \"8.3.5\"\n    id \"application\"\n\n    // test\n    id \"com.adarshr.test-logger\" version \"4.0.0\"\n    id \"org.sonarqube\" version \"6.0.1.5171\"\n    id 'jacoco-report-aggregation'\n\n    // helper\n    id \"com.github.ben-manes.versions\" version \"0.51.0\"\n\n    // front\n    id 'org.siouan.frontend-jdk21' version '10.0.0' apply false\n\n    // release\n    id \"io.github.gradle-nexus.publish-plugin\" version \"2.0.0\"\n    id 'net.researchgate.release' version '3.0.2'\n    id \"com.gorylenko.gradle-git-properties\" version \"2.4.2\"\n    id 'signing'\n    id 'ru.vyarus.pom' version '3.0.0' apply false\n    id 'ru.vyarus.github-info' version '2.0.0' apply false\n\n    // OWASP dependency check\n    id \"org.owasp.dependencycheck\" version \"11.1.1\" apply false\n}\n\nidea {\n    module {\n        downloadJavadoc = true\n        downloadSources = true\n    }\n}\n\n/**********************************************************************************************************************\\\n * Main\n **********************************************************************************************************************/\nfinal mainClassName = \"io.kestra.cli.App\"\nfinal targetJavaVersion = JavaVersion.VERSION_21\n\napplication {\n    mainClass = mainClassName\n}\n\njava {\n    sourceCompatibility = targetJavaVersion\n    targetCompatibility = targetJavaVersion\n}\n\ndependencies {\n    implementation project(\":cli\")\n    testImplementation project(\":cli\")\n}\n\n/**********************************************************************************************************************\\\n * Dependencies\n **********************************************************************************************************************/\nallprojects {\n    if (it.name != 'platform') {\n        group \"io.kestra\"\n\n        java {\n            sourceCompatibility = targetJavaVersion\n            targetCompatibility = targetJavaVersion\n        }\n\n        repositories {\n            mavenCentral()\n        }\n\n        // micronaut\n        apply plugin: \"java\"\n        apply plugin: \"java-library\"\n        apply plugin: \"idea\"\n        apply plugin: \"jacoco\"\n\n        configurations {\n            developmentOnly // for dependencies that are needed for development only\n            micronaut\n        }\n\n        // dependencies\n        dependencies {\n            // Platform\n            annotationProcessor enforcedPlatform(project(\":platform\"))\n            implementation enforcedPlatform(project(\":platform\"))\n            api enforcedPlatform(project(\":platform\"))\n            micronaut enforcedPlatform(project(\":platform\"))\n\n            // lombok\n            annotationProcessor \"org.projectlombok:lombok\"\n            compileOnly 'org.projectlombok:lombok'\n\n            // micronaut\n            annotationProcessor \"io.micronaut:micronaut-inject-java\"\n            annotationProcessor \"io.micronaut.validation:micronaut-validation-processor\"\n            micronaut \"io.micronaut:micronaut-inject\"\n            micronaut \"io.micronaut.validation:micronaut-validation\"\n            micronaut \"io.micronaut.beanvalidation:micronaut-hibernate-validator\"\n            micronaut \"io.micronaut:micronaut-runtime\"\n            micronaut \"io.micronaut:micronaut-retry\"\n            micronaut \"io.micronaut:micronaut-jackson-databind\"\n            micronaut \"io.micronaut.data:micronaut-data-model\"\n            micronaut \"io.micronaut:micronaut-management\"\n            micronaut \"io.micrometer:micrometer-core\"\n            micronaut \"io.micronaut.micrometer:micronaut-micrometer-registry-prometheus\"\n            micronaut \"io.micronaut:micronaut-http-client\"\n            micronaut \"io.micronaut.reactor:micronaut-reactor-http-client\"\n\n            // logs\n            implementation \"org.slf4j:slf4j-api\"\n            implementation \"ch.qos.logback:logback-classic\"\n            implementation \"org.codehaus.janino:janino\"\n            implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j'\n            implementation group: 'org.slf4j', name: 'jul-to-slf4j'\n            implementation group: 'org.slf4j', name: 'jcl-over-slf4j'\n            implementation group: 'org.fusesource.jansi', name: 'jansi'\n\n            // jackson\n            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'\n            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'\n            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'\n            implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml'\n            implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names'\n            implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava'\n            implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'\n\n            // kestra\n            implementation group: 'com.devskiller.friendly-id', name: 'friendly-id'\n            implementation (group: 'net.thisptr', name: 'jackson-jq') {\n                exclude group: 'com.fasterxml.jackson.core'\n            }\n\n            // exposed utils\n            api group: 'com.google.guava', name: 'guava'\n            api group: 'commons-io', name: 'commons-io'\n            api group: 'org.apache.commons', name: 'commons-lang3'\n            api \"io.swagger.core.v3:swagger-annotations\"\n        }\n    }\n}\n\n/**********************************************************************************************************************\\\n * Test\n **********************************************************************************************************************/\nsubprojects {\n    if (it.name != 'platform') {\n        apply plugin: \"com.adarshr.test-logger\"\n\n        java {\n            sourceCompatibility = targetJavaVersion\n            targetCompatibility = targetJavaVersion\n        }\n\n        dependencies {\n            // Platform\n            testAnnotationProcessor enforcedPlatform(project(\":platform\"))\n            testImplementation enforcedPlatform(project(\":platform\"))\n\n            // lombok\n            testAnnotationProcessor \"org.projectlombok:lombok:\"\n            testCompileOnly 'org.projectlombok:lombok'\n\n            // micronaut\n            testAnnotationProcessor \"io.micronaut:micronaut-inject-java\"\n            testAnnotationProcessor \"io.micronaut.validation:micronaut-validation-processor\"\n            testImplementation \"io.micronaut.test:micronaut-test-junit5\"\n\n            testImplementation \"org.junit.jupiter:junit-jupiter-engine\"\n            testImplementation \"org.junit.jupiter:junit-jupiter-params\"\n            testImplementation \"org.junit-pioneer:junit-pioneer\"\n            testImplementation 'org.mockito:mockito-junit-jupiter'\n\n            // hamcrest\n            testImplementation 'org.hamcrest:hamcrest'\n            testImplementation 'org.hamcrest:hamcrest-library'\n            testImplementation 'org.exparity:hamcrest-date'\n        }\n\n        test {\n            useJUnitPlatform()\n\n            // set Xmx for test workers\n            maxHeapSize = '4g'\n\n            // configure en_US default locale for tests\n            systemProperty 'user.language', 'en'\n            systemProperty 'user.country', 'US'\n\n            environment 'SECRET_MY_SECRET', \"{\\\"secretKey\\\":\\\"secretValue\\\"}\".bytes.encodeBase64().toString()\n            environment 'SECRET_NEW_LINE', \"cGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2\\nZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZl\\neXJsb25n\"\n            environment 'SECRET_WEBHOOK_KEY', \"secretKey\".bytes.encodeBase64().toString()\n            environment 'SECRET_NON_B64_SECRET', \"some secret value\"\n            environment 'SECRET_PASSWORD', \"cGFzc3dvcmQ=\"\n            environment 'KESTRA_TEST1', \"true\"\n            environment 'KESTRA_TEST2', \"Pass by env\"\n        }\n\n        testlogger {\n            theme 'mocha-parallel'\n            showExceptions true\n            showFullStackTraces true\n            showCauses true\n            slowThreshold 2000\n            showStandardStreams true\n            showPassedStandardStreams false\n            showSkippedStandardStreams true\n        }\n    }\n}\n\n/**********************************************************************************************************************\\\n * End-to-End Tests\n **********************************************************************************************************************/\ndef e2eTestsCheck = tasks.register('e2eTestsCheck') {\n    group = 'verification'\n    description = \"Runs the 'check' task for all e2e-tests modules\"\n    doFirst {\n        project.ext.set(\"e2e-tests\", true)\n    }\n}\n\nsubprojects {\n    // Add e2e-tests modules check tasks to e2eTestsCheck\n    if (project.name.startsWith(\"e2e-tests\")) {\n        test {\n            onlyIf {\n                project.hasProperty(\"e2e-tests\")\n            }\n        }\n    }\n\n    afterEvaluate {\n        // Add e2e-tests modules check tasks to e2eTestsCheck\n        if (project.name.startsWith(\"e2e-tests\")) {\n            e2eTestsCheck.configure {\n                finalizedBy(check)\n            }\n        }\n    }\n}\n\n/**********************************************************************************************************************\\\n * Allure Reports\n **********************************************************************************************************************/\nsubprojects {\n    if (it.name != 'platform') {\n        dependencies {\n            testImplementation platform(\"io.qameta.allure:allure-bom\")\n            testImplementation \"io.qameta.allure:allure-junit5\"\n        }\n\n        configurations {\n            agent {\n                canBeResolved = true\n                canBeConsumed = true\n            }\n        }\n\n        dependencies {\n            agent \"org.aspectj:aspectjweaver:1.9.22.1\"\n        }\n\n        test {\n            jvmArgs = [\"-javaagent:${configurations.agent.singleFile}\"]\n        }\n    }\n}\n\n/**********************************************************************************************************************\\\n * Jacoco\n **********************************************************************************************************************/\nsubprojects {\n    if (it.name != 'platform') {\n        apply plugin: 'jacoco'\n\n        test {\n            finalizedBy jacocoTestReport\n        }\n\n        jacocoTestReport {\n            dependsOn test\n        }\n    }\n}\n\ntasks.named('check') {\n    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)\n}\n\ntasks.named('testCodeCoverageReport') {\n    dependsOn ':core:copyGradleProperties'\n    dependsOn ':ui:assembleFrontend'\n}\n\n/**********************************************************************************************************************\\\n * Sonar\n **********************************************************************************************************************/\nsubprojects {\n    sonar {\n        properties {\n            property \"sonar.coverage.jacoco.xmlReportPaths\", \"$projectDir.parentFile.path/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml\"\n        }\n    }\n}\n\nsonar {\n    properties {\n        property \"sonar.projectKey\", \"kestra-io_kestra\"\n        property \"sonar.organization\", \"kestra-io\"\n        property \"sonar.host.url\", \"https://sonarcloud.io\"\n    }\n}\n\n/**********************************************************************************************************************\\\n * OWASP Dependency check\n **********************************************************************************************************************/\napply plugin: 'org.owasp.dependencycheck'\n\ndependencyCheck {\n    // fail only on HIGH and CRITICAL vulnerabilities, we may want to lower to 5 (mid-medium) later\n    failBuildOnCVSS = 7\n\n    // disable the .NET assembly analyzer as otherwise it wants to analyze EXE file\n    analyzers(new Action<AnalyzerExtension>() {\n        @Override\n        void execute(AnalyzerExtension analyzerExtension) {\n            analyzerExtension.assemblyEnabled = false\n        }\n    })\n\n    // configure a suppression file\n    suppressionFile = \"$projectDir/owasp-dependency-suppressions.xml\"\n\n    nvd.apiKey = System.getenv(\"NVD_API_KEY\")\n}\n\n/**********************************************************************************************************************\\\n * Micronaut\n **********************************************************************************************************************/\nallprojects {\n    gradle.projectsEvaluated {\n        tasks.withType(JavaCompile).configureEach {\n            options.encoding = \"UTF-8\"\n            options.compilerArgs.add(\"-parameters\")\n            options.compilerArgs.add(\"-Xlint:all\")\n            options.compilerArgs.add(\"-Xlint:-processing\")\n        }\n    }\n}\n\ntasks.withType(JavaCompile).configureEach {\n    options.encoding = \"UTF-8\"\n    options.compilerArgs.add(\"-parameters\")\n}\n\nrun.classpath += configurations.developmentOnly\ntest.classpath += configurations.developmentOnly\n\nrun.jvmArgs(\n    \"-noverify\",\n    \"-XX:TieredStopAtLevel=1\",\n    \"-Dcom.sun.management.jmxremote\",\n    '-Dmicronaut.environments=dev,override'\n)\n\n/**********************************************************************************************************************\\\n * Jar\n **********************************************************************************************************************/\njar {\n    manifest {\n        attributes(\n            \"Main-Class\": mainClassName,\n            \"X-Kestra-Name\": project.name,\n            \"X-Kestra-Title\": project.name,\n            \"X-Kestra-Group\": project.group,\n            \"X-Kestra-Version\": project.version\n        )\n    }\n}\n\nshadowJar {\n    archiveClassifier.set(null)\n    mergeServiceFiles()\n    zip64 true\n}\n\ndistZip.dependsOn shadowJar\ndistTar.dependsOn shadowJar\nstartScripts.dependsOn shadowJar\nstartShadowScripts.dependsOn jar\nshadowJar.dependsOn 'ui:assembleFrontend'\n\n/**********************************************************************************************************************\\\n * Executable Jar\n **********************************************************************************************************************/\ndef executableDir = layout.buildDirectory.dir(\"executable\")\ndef executable = layout.buildDirectory.file(\"executable/${project.name}-${project.version}\").get().asFile\n\ntasks.register('writeExecutableJar') {\n    group \"build\"\n    description \"Write an executable jar from shadow jar\"\n    dependsOn = [shadowJar]\n\n    final shadowJarFile =  tasks.shadowJar.outputs.files.singleFile\n    inputs.file shadowJarFile\n    outputs.file executable\n    outputs.cacheIf { true }\n\n    doFirst {\n        executableDir.get().asFile.mkdirs()\n    }\n\n    doLast {\n        executable.setBytes(shadowJarFile.readBytes())\n        ByteArrayOutputStream executableBytes = new ByteArrayOutputStream()\n        executableBytes.write(\"\\n: <<END_OF_KESTRA_SELFRUN\\r\\n\".getBytes())\n        executableBytes.write(file(\"gradle/jar/selfrun.bat\").readBytes())\n        executableBytes.write(\"\\r\\n\".getBytes())\n        executableBytes.write(\"END_OF_KESTRA_SELFRUN\\r\\n\\n\".getBytes())\n        executableBytes.write(file(\"gradle/jar/selfrun.sh\").readBytes())\n        ZipPrefixer.applyPrefixBytesToZip(executable.toPath(), executableBytes.toByteArray())\n        executable.setExecutable(true)\n    }\n}\n\ntasks.register('executableJar', Zip) {\n    group \"build\"\n    description \"Zip the executable jar\"\n    dependsOn = [writeExecutableJar]\n\n    archiveFileName = \"${project.name}-${project.version}.zip\"\n    destinationDirectory = layout.buildDirectory.dir('archives')\n\n    from executableDir\n    archiveClassifier.set(null)\n}\n\n/**********************************************************************************************************************\\\n * Standalone\n **********************************************************************************************************************/\ntasks.register('runLocal', JavaExec) {\n    group = \"application\"\n    description = \"Run Kestra as server local\"\n    classpath = project(\":cli\").sourceSets.main.runtimeClasspath\n    mainClass = mainClassName\n    environment 'MICRONAUT_ENVIRONMENTS', 'override'\n    args 'server', 'local', '--plugins', 'local/plugins'\n}\n\n/**********************************************************************************************************************\\\n * Publish\n **********************************************************************************************************************/\nnexusPublishing {\n    repositoryDescription = \"${project.group}:${rootProject.name}:${project.version}\"\n    useStaging = !project.version.endsWith(\"-SNAPSHOT\")\n    repositories {\n        sonatype {\n            nexusUrl.set(uri(\"https://s01.oss.sonatype.org/service/local/\"))\n            snapshotRepositoryUrl.set(uri(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\"))\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: \"maven-publish\"\n    apply plugin: 'signing'\n    apply plugin: 'ru.vyarus.pom'\n    apply plugin: 'ru.vyarus.github-info'\n\n    javadoc {\n        options {\n            locale = 'en_US'\n            encoding = 'UTF-8'\n            addStringOption(\"Xdoclint:none\", \"-quiet\")\n        }\n    }\n\n    tasks.register('sourcesJar', Jar) {\n        dependsOn = [':core:copyGradleProperties']\n        dependsOn = [':ui:assembleFrontend']\n        archiveClassifier.set('sources')\n        from sourceSets.main.allSource\n    }\n    sourcesJar.dependsOn ':core:copyGradleProperties'\n    sourcesJar.dependsOn ':ui:assembleFrontend'\n\n    tasks.register('javadocJar', Jar) {\n        archiveClassifier.set('javadoc')\n        from javadoc\n    }\n\n    tasks.register('testsJar', Jar) {\n        group = 'build'\n        description = 'Build the tests jar'\n\n        archiveClassifier.set('tests')\n        if (sourceSets.matching { it.name == 'test'}) {\n            from sourceSets.named('test').get().output\n        }\n    }\n\n    github {\n        user 'kestra-io'\n        license 'Apache'\n        repository 'kestra'\n        site 'https://kestra.io'\n    }\n\n    maven.pom {\n        description = 'The modern, scalable orchestrator & scheduler open source platform'\n\n        developers {\n            developer {\n                id = \"tchiotludo\"\n                name = \"Ludovic Dehon\"\n            }\n        }\n    }\n\n    publishing {\n        publications {\n            sonatypePublication(MavenPublication) {\n                version project.version\n\n                if (project.name.contains('cli')) {\n                    groupId \"io.kestra\"\n                    artifactId \"kestra\"\n\n                    artifact shadowJar\n                    artifact executableJar\n                } else if (project.name.contains('platform')){\n                    groupId project.group\n                    artifactId project.name\n                } else {\n                    from components.java\n\n                    groupId project.group\n                    artifactId project.name\n\n                    artifact sourcesJar\n                    artifact javadocJar\n                    artifact testsJar\n                }\n            }\n        }\n    }\n\n    signing {\n        // only sign JARs that we publish to Sonatype\n        required { gradle.taskGraph.hasTask(\"publishSonatypePublicationPublicationToSonatypeRepository\") }\n        sign publishing.publications.sonatypePublication\n    }\n\n    tasks.withType(GenerateModuleMetadata).configureEach {\n        // Suppression this validation error as we want to enforce the Kestra platform\n        suppressedValidationErrors.add('enforced-platform')\n    }\n}\n\n\n/**********************************************************************************************************************\\\n * Version\n **********************************************************************************************************************/\nrelease {\n    preCommitText = 'chore(version):'\n    preTagCommitMessage = 'update to version'\n    tagCommitMessage = 'tag version'\n    newVersionCommitMessage = 'update snapshot version'\n    tagTemplate = 'v${version}'\n    buildTasks = ['classes']\n\n    git {\n        requireBranch.set('develop')\n    }\n}\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose-ci.yml",
          "type": "blob",
          "size": 0.51171875,
          "content": "services:\n  mysql:\n    image: mysql\n    environment:\n      MYSQL_DATABASE: kestra_unit\n      MYSQL_USER: kestra\n      MYSQL_PASSWORD: k3str4\n      MYSQL_ROOT_PASSWORD: \"p4ssw0rd\"\n    command:\n      - --log-bin-trust-function-creators=1\n      - --sort-buffer-size=10485760\n    ports:\n      - 3306:3306\n    restart: on-failure\n\n  postgres:\n    image: postgres:14.13\n    environment:\n      POSTGRES_DB: kestra_unit\n      POSTGRES_USER: kestra\n      POSTGRES_PASSWORD: k3str4\n    ports:\n      - 5432:5432\n    restart: on-failure"
        },
        {
          "name": "docker-compose-dind.yml",
          "type": "blob",
          "size": 2.01171875,
          "content": "volumes:\n  postgres-data:\n    driver: local\n  kestra-data:\n    driver: local\n  dind-socket:\n    driver: local\n  tmp-data:\n    driver: local\n\nservices:\n  postgres:\n    image: postgres\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_DB: kestra\n      POSTGRES_USER: kestra\n      POSTGRES_PASSWORD: k3str4\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      interval: 30s\n      timeout: 10s\n      retries: 10\n\n  dind:\n    image: docker:dind-rootless\n    privileged: true\n    user: \"1000\"\n    environment:\n      DOCKER_HOST: unix://dind/docker.sock\n    command:\n      - --log-level=fatal\n      - --group=1000\n    volumes:\n      - dind-socket:/dind\n      - tmp-data:/tmp/kestra-wd\n\n  kestra:\n    image: kestra/kestra:latest\n    pull_policy: always\n    # Note that this is meant for development only. Refer to the documentation for production deployments of Kestra which runs without a root user.\n    user: \"root\"\n    command: server standalone\n    volumes:\n      - kestra-data:/app/storage\n      - dind-socket:/dind\n      - tmp-data:/tmp/kestra-wd\n    environment:\n      KESTRA_CONFIGURATION: |\n        datasources:\n          postgres:\n            url: jdbc:postgresql://postgres:5432/kestra\n            driverClassName: org.postgresql.Driver\n            username: kestra\n            password: k3str4\n        kestra:\n          server:\n            basic-auth:\n              enabled: false\n              username: \"admin@kestra.io\" # it must be a valid email address\n              password: kestra\n          repository:\n            type: postgres\n          storage:\n            type: local\n            local:\n              base-path: \"/app/storage\"\n          queue:\n            type: postgres\n          tasks:\n            tmp-dir:\n              path: /tmp/kestra-wd/tmp\n          url: http://localhost:8080/\n    ports:\n      - \"8080:8080\"\n      - \"8081:8081\"\n    depends_on:\n      postgres:\n        condition: service_started\n      dind:\n        condition: service_started\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.8232421875,
          "content": "volumes:\n  postgres-data:\n    driver: local\n  kestra-data:\n    driver: local\n\nservices:\n  postgres:\n    image: postgres\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_DB: kestra\n      POSTGRES_USER: kestra\n      POSTGRES_PASSWORD: k3str4\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      interval: 30s\n      timeout: 10s\n      retries: 10\n\n  kestra:\n    image: kestra/kestra:latest\n    pull_policy: always\n    # Note that this setup with a root user is intended for development purpose.\n    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket\n    # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose\n    user: \"root\"\n    command: server standalone\n    volumes:\n      - kestra-data:/app/storage\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /tmp/kestra-wd:/tmp/kestra-wd\n    environment:\n      KESTRA_CONFIGURATION: |\n        datasources:\n          postgres:\n            url: jdbc:postgresql://postgres:5432/kestra\n            driverClassName: org.postgresql.Driver\n            username: kestra\n            password: k3str4\n        kestra:\n          server:\n            basicAuth:\n              enabled: false\n              username: \"admin@kestra.io\" # it must be a valid email address\n              password: kestra\n          repository:\n            type: postgres\n          storage:\n            type: local\n            local:\n              basePath: \"/app/storage\"\n          queue:\n            type: postgres\n          tasks:\n            tmpDir:\n              path: /tmp/kestra-wd/tmp\n          url: http://localhost:8080/\n    ports:\n      - \"8080:8080\"\n      - \"8081:8081\"\n    depends_on:\n      postgres:\n        condition: service_started\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.1767578125,
          "content": "version=0.21.0-SNAPSHOT\n\norg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError\norg.gradle.parallel=true\norg.gradle.caching=true\norg.gradle.priority=low"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.759765625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "jdbc-h2",
          "type": "tree",
          "content": null
        },
        {
          "name": "jdbc-mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "jdbc-postgres",
          "type": "tree",
          "content": null
        },
        {
          "name": "jdbc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lombok.config",
          "type": "blob",
          "size": 0.1943359375,
          "content": "config.stopBubbling = true\nlombok.addLombokGeneratedAnnotation = true\nlombok.anyConstructor.addConstructorProperties = true\nlombok.equalsAndHashCode.callSuper = call\nlombok.tostring.callsuper = call\n"
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "owasp-dependency-suppressions.xml",
          "type": "blob",
          "size": 1.173828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd\">\n    <!--\n        This is a CPE/CVE suppression file for the Gradle dependency check plugin.\n        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using it's GAV.\n        If a CVE is disputed or cannot be fixed, it needs to be suppressed by it's CVE identifier.\n        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n     -->\n    <suppress>\n        <notes>\n            <![CDATA[\n                Suppress the false positive CPE for Kestra jdbc-mysql to mysql itself\n            ]]>\n        </notes>\n        <gav regex=\"true\">io\\.kestra:jdbc-mysql.*</gav>\n        <cpe>cpe:/a:mysql:mysql</cpe>\n    </suppress>\n    <suppress>\n        <notes>\n            <![CDATA[\n                Suppress the false positive CPE for plexus-component-annotations, plexus-interpolation and plexus-utils to codehaus-plexus\n            ]]>\n        </notes>\n        <gav regex=\"true\">org\\.codehaus\\.plexus:plexus.*</gav>\n        <cpe>cpe:/a:codehaus-plexus_project:codehaus-plexus</cpe>\n    </suppress>\n</suppressions>"
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-plugins.sh",
          "type": "blob",
          "size": 5.265625,
          "content": "#!/bin/bash \n#===============================================================================\n# SCRIPT: release-plugins.sh\n#\n# DESCRIPTION:\n#   This script can be used to run a ./gradlew release command on each kestra plugin repository.\n#   By default, if no `GITHUB_PAT` environment variable exist, the script will attempt to clone GitHub repositories using SSH_KEY.\n#\n# USAGE: ./release-plugins.sh [options]\n# OPTIONS:\n#   --release-version <version>  Specify the release version (required)\n#   --next-version    <version>  Specify the next version (required)\n#   --dry-un                     Specify to run in DRY_RUN.\n#   -y, --yes                    Automatically confirm prompts (non-interactive).\n#   -h, --help                   Show the help message and exit\n\n# EXAMPLES:\n# To release all plugins:\n#   ./release-plugins.sh --release-version=0.20.0 --next-version=0.21.0-SNAPSHOT\n# To release a specific plugin:\n#   ./release-plugins.sh --release-version=0.20.0 --next-version=0.21.0-SNAPSHOT plugin-kubernetes\n\n#===============================================================================\n\nset -e;\n\n###############################################################\n# Global vars\n###############################################################\nBASEDIR=$(dirname \"$(readlink -f $0)\")\nWORKING_DIR=/tmp/kestra-release-plugins-$(date +%s);\nPLUGIN_FILE=\"$BASEDIR/.plugins\"\nGIT_BRANCH=master\n\n###############################################################\n# Functions\n###############################################################\n\n# Function to display the help message\nusage() {\n    echo \"Usage: $0 --release-version <version> --next-version [plugin-repositories...]\"\n    echo\n    echo \"Options:\"\n    echo \"  --release-version <version>  Specify the release version (required).\"\n    echo \"  --next-version    <version>  Specify the next version (required).\"\n    echo \"  --dry-run                    Specify to run in DRY_RUN.\"\n    echo \"  -y, --yes                    Automatically confirm prompts (non-interactive).\"\n    echo \"  -h, --help                   Show this help message and exit.\"\n    exit 1\n}\n\n# Function to ask to continue\nfunction askToContinue() {\n  read -p \"Are you sure you want to continue? [y/N] \" confirm\n  [[ \"$confirm\" =~ ^[Yy]$ ]] || { echo \"Operation cancelled.\"; exit 1; }\n}\n\n###############################################################\n# Options\n###############################################################\n\nPLUGINS_ARGS=()\nAUTO_YES=false\nDRY_RUN=false\n# Get the options\nwhile [[ \"$#\" -gt 0 ]]; do\n    case \"$1\" in\n        --release-version)\n            RELEASE_VERSION=\"$2\"\n            shift 2\n            ;;\n        --release-version=*)\n            RELEASE_VERSION=\"${1#*=}\"\n            shift\n            ;;\n        --next-version)\n            NEXT_VERSION=\"$2\"\n            shift 2\n            ;;\n        --next-version=*)\n            NEXT_VERSION=\"${1#*=}\"\n            shift\n            ;;\n        --dry-run)\n            DRY_RUN=true\n            shift\n            ;;\n        -y|--yes)\n            AUTO_YES=true\n            shift\n            ;;\n        -h|--help)\n            usage\n            ;;\n        *)\n            PLUGINS_ARGS+=(\"$1\")\n            shift\n            ;;\n    esac\ndone\n\n## Check options\nif [[ -z \"$RELEASE_VERSION\" ]]; then\n   echo -e \"Missing required argument: --release-version\\n\";\n   usage\nfi\n\nif [[ -z \"$NEXT_VERSION\" ]]; then\n    echo -e \"Missing required argument: --next-version\\n\";\n    usage\nfi\n\n## Get plugin list\nif [[ \"${#PLUGINS_ARGS[@]}\" -eq 0 ]]; then\n  if [ -f \"$PLUGIN_FILE\" ]; then\n  \tPLUGINS=$(cat \"$PLUGIN_FILE\" | grep \"io\\\\.kestra\\\\.\" | sed -e '/#/s/^.//' | cut -d':' -f1 | uniq | sort);\n  \tPLUGINS_COUNT=$(echo \"$PLUGINS\" | wc -l);\n  \tPLUGINS_ARRAY=$(echo \"$PLUGINS\" | xargs || echo '');\n  \tPLUGINS_ARRAY=($PLUGINS_ARRAY);\n  fi\nelse\n  PLUGINS_ARRAY=(\"${PLUGINS_ARGS[@]}\")\n  PLUGINS_COUNT=\"${#PLUGINS_ARGS[@]}\"\nfi\n\n## Get plugin list\necho \"RELEASE_VERSION=$RELEASE_VERSION\"\necho \"NEXT_VERSION=$NEXT_VERSION\"\necho \"GIT_BRANCH=$GIT_BRANCH\"\necho \"DRY_RUN=$DRY_RUN\"\necho \"Found ($PLUGINS_COUNT) plugin repositories:\";\n\nfor PLUGIN in \"${PLUGINS_ARRAY[@]}\"; do\n    echo \"$PLUGIN\"\ndone\n\nif [[ \"$AUTO_YES\" == false ]]; then\n  askToContinue\nfi\n\n###############################################################\n# Main\n###############################################################\nmkdir -p $WORKING_DIR\ncd $WORKING_DIR;\n\nCOUNTER=1;\nfor PLUGIN in \"${PLUGINS_ARRAY[@]}\"\ndo\n  echo \"---------------------------------------------------------------------------------------\"\n  echo \"[$COUNTER/$PLUGINS_COUNT]Release Plugin: $PLUGIN\"\n  echo \"---------------------------------------------------------------------------------------\"\n  if [[ -z \"${GITHUB_PAT}\" ]]; then\n    git clone git@github.com:kestra-io/$PLUGIN\n  else\n    echo \"Clone git repository using GITHUB PAT\"\n    git clone https://${GITHUB_PAT}@github.com/kestra-io/$PLUGIN.git\n  fi\n  cd \"$PLUGIN\";\n  git checkout \"$GIT_BRANCH\";\n\n  if [[ \"$DRY_RUN\" == false ]]; then\n    echo \"Run gradle release\"\n    echo \"Branch: $(git rev-parse --abbrev-ref HEAD)\";\n    ./gradlew release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=\"${RELEASE_VERSION}\" -Prelease.newVersion=\"${NEXT_VERSION}\"\n    git push\n  else\n    echo \"Skip gradle release [DRY_RUN=false]\"\n  fi\n  COUNTER=$(( COUNTER + 1 ));\n  sleep 5 #  add a short delay to not spam Maven Central\ndone;\n\nexit 0;"
        },
        {
          "name": "repository-memory",
          "type": "tree",
          "content": null
        },
        {
          "name": "runner-memory",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.349609375,
          "content": "rootProject.name=\"kestra\"\n\ninclude 'platform'\n\ninclude 'cli'\ninclude 'core'\ninclude 'tests'\n\ninclude 'runner-memory'\n\ninclude 'storage-local'\n\ninclude 'repository-memory'\n\ninclude 'jdbc'\ninclude 'jdbc-h2'\ninclude 'jdbc-mysql'\ninclude 'jdbc-postgres'\n\ninclude 'webserver'\ninclude 'ui'\ninclude 'model'\ninclude 'processor'\ninclude 'script'\ninclude 'e2e-tests'\n\n"
        },
        {
          "name": "storage-local",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "webserver",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}