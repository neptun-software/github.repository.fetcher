{
  "metadata": {
    "timestamp": 1736708847767,
    "page": 46,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/APIJSON",
      "stars": 17376,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3779296875,
          "content": ".DS_Store\n.gradle\nyarn.lock\n*.project\n\nHELP.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**\n!**/src/test/**\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n\n### VS Code ###\n.vscode/\nAPIJSONORM/bin\n"
        },
        {
          "name": "APIJSONORM",
          "type": "tree",
          "content": null
        },
        {
          "name": "APIJSON初期构思及实现.docx",
          "type": "blob",
          "size": 21.0205078125,
          "content": null
        },
        {
          "name": "APIJSON初期构思及实现.pages",
          "type": "blob",
          "size": 164.013671875,
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.4990234375,
          "content": "# Contributing\n\n我们提倡您通过提 Issue 和 Pull Request 方式来促进 APIJSON 的发展。\n\n\n## Acknowledgements\n\n非常感谢以下贡献者们对于 APIJSON 本项目做出的贡献：\n\n- [TommyLemon](https://github.com/TommyLemon)(腾讯工程师，还开源了 APIJSON-Demo, apijson-framework, apijson-column, apijson-router 等)\n- [ruoranw](https://github.com/ruoranw)(现居美国洛杉矶，还开源了 APIJSONdocs)\n- [zhoulingfengofcd](https://github.com/zhoulingfengofcd)\n- [Zerounary](https://github.com/Zerounary)(还开源了 APIJSONParser)\n- [fineday009](https://github.com/fineday009)(腾讯工程师，还贡献了 apijson-framework, APIJSON-Demo)\n- [vincentCheng](https://github.com/vincentCheng)(还开源了 apijson-doc)\n- [justinfengchen](https://github.com/justinfengchen)\n- [linlwqq](https://github.com/linlwqq)\n- [redcatmiss](https://github.com/redcatmiss)(社保科技工程师)\n- [linbren](https://github.com/linbren)\n- [jinzhongjian](https://github.com/jinzhongjian)\n- [CoolGeo2016](https://github.com/CoolGeo2016)\n- [1906522096](https://github.com/1906522096)\n- [github-ganyu](https://github.com/github-ganyu)\n- [sunxiaoguang](https://github.com/sunxiaoguang)(知乎基础研发架构师)\n- [403f](https://github.com/403f)\n- [gujiachun](https://github.com/gujiachun)\n- [gdjs2](https://github.com/gdjs2)(University of California, Riverside)\n- [Rkyzzy](https://github.com/Rkyzzy)(SUSTech, University of California, Berkeley)\n- [kxlv2000](https://github.com/kxlv2000)(SUSTech)\n- [caohao-go](https://github.com/caohao-go)(腾讯工程师，曾在华为、恒生担任C/C++开发工程师，在wps担任项目经理，在360担任技术专家)\n- [Wscats](https://github.com/Wscats)(腾讯工程师、腾讯 AlloyTeam 成员、Tencent Creation Camp 成员、知名技术博主)\n- [jun0315](https://github.com/jun0315)(腾讯工程师)\n- [JieJo](https://github.com/JieJo)\n- [yeyuezhishou](https://github.com/yeyuezhishou)(圆通工程师)\n- [kenlig](https://github.com/kenlig)(还开源了 apijsondocs)\n- [andream7](https://github.com/andream7)(微软工程师，还开源了 apijson-db2)\n- [qiujunlin](https://github.com/qiujunlin)(字节跳动工程师，还开源了 APIJSONDemo)\n- [HANXU2018](https://github.com/HANXU2018)(网易工程师，还开源了 APIJSON-DOC)\n- [hclown9804](https://github.com/hclown9804)\n- [chenyanlann](https://github.com/chenyanlann)(还开源了 APIJSONDemo_ClickHouse)\n- [haolingzhang1](https://github.com/haolingzhang1)(腾讯工程师，还开源了 APIJson--demo)\n- [jerrylususu](https://github.com/jerrylususu)(还开源了 apijson_todo_demo 和 apijson_role_extend)\n- [Dalezee](https://github.com/Dalezee)(还开源了 apijson_camp)\n- [aaronlinv](https://github.com/aaronlinv)\n- [sy-records](https://github.com/sy-records)\n- [Finkyky](https://github.com/Finkyky)\n- [ifooling](https://github.com/ifooling)\n- [transtone](https://github.com/transtone)\n- [AwenJackson](https://github.com/AwenJackson)(上海信息出奇科技有限公司工程师，发布了 3 篇文章）\n- [andy19055](https://github.com/andy19055)\n- [glennliao](https://github.com/glennliao)(还开源了 [apijson-go](https://github.com/glennliao/apijson-go) 和 [apijson-go-ui](https://github.com/glennliao/apijson-go-ui)）\n- [eltociear](https://github.com/eltociear)\n- [wb04307201](https://github.com/wb04307201)(还开源了 [apijson-dynamic-datasource](https://github.com/wb04307201/apijson-dynamic-datasource)）\n- [cloudAndMonkey](https://github.com/cloudAndMonkey)(还贡献了 apijson-framework, APIJSON-Demo，新增支持了 Redis, Elasticsearch, Kafka, Lua 等并提供了多个 Demo）\n- [12345ZMTHL](https://github.com/12345ZMTHL)\n- [cnscoo](https://github.com/cnscoo)(阿里云工程师）\n- [aninZz](https://github.com/aninZz)\n- [leomiaomiao](https://github.com/leomiaomiao)\n- [YqxLzx](https://github.com/YqxLzx)\n- [hiteshbedre](https://github.com/hiteshbedre)\n- [wahowaho](https://github.com/wahowaho)\n- [jarrodquan](https://github.com/jarrodquan)\n- [gemufeng](https://github.com/gemufeng)(上海麦市工程师)\n- [komiblog](https://github.com/komiblog)\n- [ostrichManX](https://github.com/ostrichManX)\n- [jia199807](https://github.com/jia199807)\n\n#### 其中特别致谢: <br/>\ncloudAndMonkey 提交的 11 个 Commits, 对 APIJSON 做出了 1,496 增加和 845 处删减(截止 2022/12/15 日)； <br/>\njustinfengchen 提交的 6 个 Commits, 对 APIJSON 做出了 3,130 增加和 0 处删减(截止 2020/11/04 日)； <br/>\nruoranw 提交的 18 个 Commits, 对 APIJSON 做出了 328 增加和 520 处删减(截止 2020/11/04 日)； <br/>\nZerounary 提交的 6 个 Commits, 对 APIJSON 做出了 1,104 增加和 1 处删减(截止 2020/11/04 日)。 <br/>\n\n<br/>\nAPIJSON 持续招募贡献者，新增功能、修复 Bug、完善文档、修正错误、宣传推广、回答问题等，都能帮助项目及广大用户。 <br/>\nAPIJSON 已开发近 6 年，在此感谢所有开发者对于 APIJSON 的喜欢和支持，希望你能够成为 APIJSON 的核心贡献者， <br/>\n加入 APIJSON ，共同打造一个更棒的零代码、全功能、强安全 ORM 库，造福更多前后端开发者！🍾🎉\n\n### 为什么一定要贡献代码？\nAPIJSON 作为腾讯开源的知名热门项目，贡献代码除了可以给简历加亮点、为面试加分，还可以避免你碰到以下麻烦： <br/>\n1.你在 APIJSON 上更改的代码其他人看不到，不能帮你发现 Bug，更不可能帮你修复 Bug 甚至优化代码 <br/>\n2.作者和其它贡献者可能不兼容你更改的代码，导致你的项目在升级 APIJSON 版本后在功能甚至编译上出错 <br/>\n3.你需要自己维护你的代码，每次升级 APIJSON 版本时，你都需要下载 APIJSON 新代码再合并你自己的更改 <br/>\n#### 所以为了让你自己的更改始终能跟上项目版本，得到他人给予的可靠且持续的维护，强烈建议 [提交 Pull Request](/CONTRIBUTING.md#pull-request) 来贡献代码。\n\n​             \n\n##  Pull Request\n\n我们除了希望听到您的反馈和建议外，我们也希望您接受代码形式的直接帮助，对我们的 GitHub 发出 Pull Request 请求。\n\n### 如果是小改文档或代码\n\n直接点文件右上角的编辑图标按钮 <br/> \n![image](https://user-images.githubusercontent.com/5738175/130585672-8bd49ae5-2978-4ad6-a7a6-de0a0c2d0b68.png)\n\n<br/>\n\n然后底部简要输入修改说明，点击 Commit Change 按钮 <br/> \n![image](https://user-images.githubusercontent.com/5738175/130586073-4a6aea74-3c88-4cd9-9c93-ffaba1270ab8.png)\n\n\n### 如果有比较大的改动\n\n以下是具体步骤：(如果使用本步骤，GitHub 可能不会把贡献者添加到 Contributors 中，推荐用以下 [详细的图文步骤](https://github.com/Tencent/APIJSON/blob/master/CONTRIBUTING.md#%E8%AF%A6%E7%BB%86%E7%9A%84%E5%9B%BE%E6%96%87%E6%AD%A5%E9%AA%A4%E5%8F%AF%E5%8F%82%E8%80%83%E4%BB%A5%E4%B8%8B%E4%BB%BB%E6%84%8F%E4%B8%80%E7%AF%87))\n\n#### Fork 仓库\n\n点击 `Fork` 按钮，将需要参与的项目仓库 Fork 到自己的 Github 中。\n\n#### Clone 已 Fork 项目\n\n在自己的 Github 中，找到 Fork 下来的项目，git clone 到本地。\n\n```bash\n$ git clone git@github.com:<yourname>/APIJSON.git\n```\n\n#### 添加 APIJSON 仓库\n\n将 Fork 源仓库连接到本地仓库：\n\n```bash\n$ git remote add <name> <url>\n# 例如：\n$ git remote add APIJSON git@github.com:Tencent/APIJSON.git\n```\n\n#### 保持与 APIJSON 仓库的同步\n\n直接在 fork Repo 的首页点 Contribute > Open pull request\n\n![image](https://user-images.githubusercontent.com/5738175/131776033-74caf279-ebbf-45f1-a9c1-beff937a87fb.png)\n\n或者\n```bash\n$ git pull --rebase <name> <branch>\n# 等同于以下两条命令\n$ git fetch <name> <branch>\n$ git rebase <name>/<branch>\n```\n\n#### Commit 信息提交\n\nCommit 信息请遵循 [Commit 消息约定](./CONTRIBUTING_COMMIT.md)，以便可以自动生成 `CHANGELOG` 。具体格式请参考 Commit 文档规范。\n\n<br/><br/>\n \n#### 详细的图文步骤可参考以下任意一篇\nGitHub - 对项目做出贡献 <br/>\nhttps://www.jianshu.com/p/00cf29d2d66c\n<br/><br/>\n如何在 Github 上给别人的项目贡献代码 <br/>\nhttps://git-scm.com/book/zh/v2/GitHub-%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE\n\n\n​                       \n\n## Issue 提交\n\n#### 对于贡献者\n\n在提 Issue 前请确保满足一下条件：\n\n- 必须是一个 Bug 或者功能新增。\n- 必须是 APIJSON 相关问题。\n- 已经在 Issue 中搜索过，并且没有找到相似的 Issue 或者解决方案。\n- 完善下面模板中的信息\n\n如果已经满足以上条件，我们提供了 Issue 的标准模版，请按照模板填写。\n"
        },
        {
          "name": "CONTRIBUTING_COMMIT.md",
          "type": "blob",
          "size": 2.59375,
          "content": "# Commit 规范\n\n在对项目作出更改后，我们需要生成 Commit 来记录自己的更改。以下是参照 Angular 对 Commit 格式的规范：\n\n## (1) 格式\n\n提交信息包括三个部分：`Header`，`Body` 和 `Footer`。\n\n```\n<Header>\n\n<Body>\n\n<Footer>\n```\n\n其中，Header 是必需的，Body 和 Footer 可以省略。\n\n#### 1> Header\n\nHeader 部分只有一行，包括俩个字段：`type`（必需）和`subject`（必需）。\n\n```\n<type>: <subject>\n```\n\n**Type**\n\nType 用于说明 Commit 的类别，可以使用如下类别：\n\n- feat：新功能（Feature）\n- fix：修补 Bug\n- doc：文档（Documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改 Bug 的代码变动）\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n\n**Subject**\n\nSubject 是 Commit 目的的简短描述。\n\n- 以动词开头，使用第一人称现在时，比如改变，而不是改变了。\n- 结尾不加句号（。）\n\n#### 2> Body\n\nBody 部分是对本次 Commit 的详细描述，可以分成多行。下面是一个范例。\n\n```\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n\n**注意：**应该说明代码变动的动机，以及与以前行为的对比。\n\n#### 3> Footer\n\n​\tFooter 部分应该包含：(1)Breaking Changes;  (2)关闭 Issue；\n\n​\t**Breaking Changes**：\n\n​\t如果当前代码与上一个版本不兼容，则 Footer 部分以`BREAKING CHANGE`开头，后面是对变动的描述、以及变动理由和迁移方法。这种使用较少，了解即可。\n\n​\t**Issue 部分：**\n\n- 通过 Commit 关联 Issue：\n\n  如果当前提交信息关联了某个 Issue，那么可以在 Footer 部分关联这个 Issue：\n\n  ```\n  issue #2\n  ```\n\n- 通过 Commit 关闭 Issue，当提交到**默认分支**时，提交信息里可以使用 `fix/fixes/fixed` ， `close/closes/closed` 或者 `resolve/resolves/resolved`等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue：\n\n```\ncloses #1\n```\n\n​\t注意，如果不是提交到默认分支，那么并不能关闭这个 Issue，但是在这个 Issue 下面会显示相关的信息表示曾经想要关闭这个 Issue，当这个分支合并到默认分支时，就可以关闭这个 Issue 了。\n\n#### 4> 例子\n\n下面是一个完整的例子：\n\n```\nfeat: 添加了分享功能\n\n给每篇文章添加了分享功能\n\n- 添加分享到微信功能\n- 添加分享到朋友圈功能\n\nissue #1, #2\ncloses #1\n```\n"
        },
        {
          "name": "Document-English.md",
          "type": "blob",
          "size": 30.8447265625,
          "content": "### Examples:\r\n\r\n#### Get a User\r\nRequest:\r\n<pre><code class=\"language-json\">{\r\n  \"User\":{\r\n  }\r\n}\r\n</code></pre>\r\n\r\n[Click here to test](http://apijson.cn:8080/get/{\"User\":{}})\r\n\r\nResponse:\r\n<pre><code class=\"language-json\">{\r\n  \"User\":{\r\n    \"id\":38710,\r\n    \"sex\":0,\r\n    \"name\":\"TommyLemon\",\r\n    \"certified\":true,\r\n    \"tag\":\"Android&Java\",\r\n    \"phone\":13000038710,\r\n    \"head\":\"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\r\n    \"date\":1485948110000,\r\n    \"pictureList\":[\r\n      \"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\r\n      \"http://common.cnblogs.com/images/icon_weibo_24.png\"\r\n    ]\r\n  },\r\n  \"code\":200,\r\n  \"msg\":\"success\"\r\n}\r\n</code></pre>\r\n\r\n<br />\r\n\r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON single objects: simple queries, statistics, groups, orders, aggregations, comparisons, filters, aliases, etc.</a>\r\n</p> \r\n  \r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_single.gif)\r\n\r\n#### Get an array of Users\r\n\r\nRequest:\r\n<pre><code class=\"language-json\">{\r\n  \"[]\":{\r\n    \"count\":3,             //just get 3 results\r\n    \"User\":{\r\n      \"@column\":\"id,name\"  //just get ids and names\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n\r\n[Click here to test](http://apijson.cn:8080/get/{\"[]\":{\"count\":3,\"User\":{\"@column\":\"id,name\"}}})\r\n\r\nResponse:\r\n<pre><code class=\"language-json\">{\r\n  \"[]\":[\r\n    {\r\n      \"User\":{\r\n        \"id\":38710,\r\n        \"name\":\"TommyLemon\"\r\n      }\r\n    },\r\n    {\r\n      \"User\":{\r\n        \"id\":70793,\r\n        \"name\":\"Strong\"\r\n      }\r\n    },\r\n    {\r\n      \"User\":{\r\n        \"id\":82001,\r\n        \"name\":\"Android\"\r\n      }\r\n    }\r\n  ],\r\n  \"code\":200,\r\n  \"msg\":\"success\"\r\n}\r\n</code></pre>\r\n\r\n<br />\r\n\r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON single arrays: simple queries, statistics, groups, orders, aggregations, paginations, searches, regexps, combinations, etc.</a>\r\n</p> \r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_array.gif)\r\n\r\n\r\n#### Get a Moment and its publisher\r\nRequest:\r\n<pre><code class=\"language-json\">{\r\n  \"Moment\":{\r\n  },\r\n  \"User\":{\r\n    \"id@\":\"Moment/userId\"  //User.id = Moment.userId\r\n  }\r\n}\r\n</code></pre>\r\n\r\n[Click here to test](http://apijson.cn:8080/get/{\"Moment\":{},\"User\":{\"id@\":\"Moment%252FuserId\"}})\r\n\r\nResponse:\r\n<pre><code class=\"language-json\">{\r\n  \"Moment\":{\r\n    \"id\":12,\r\n    \"userId\":70793,\r\n    \"date\":\"2017-02-08 16:06:11.0\",\r\n    \"content\":\"1111534034\"\r\n  },\r\n  \"User\":{\r\n    \"id\":70793,\r\n    \"sex\":0,\r\n    \"name\":\"Strong\",\r\n    \"tag\":\"djdj\",\r\n    \"head\":\"http://static.oschina.net/uploads/user/585/1170143_50.jpg?t=1390226446000\",\r\n    \"contactIdList\":[\r\n      38710,\r\n      82002\r\n    ],\r\n    \"date\":\"2017-02-01 19:21:50.0\"\r\n  },\r\n  \"code\":200,\r\n  \"msg\":\"success\"\r\n}\r\n</code></pre>\r\n  \r\n<br />\r\n\r\n#### Get a Moment list like Twitter tweets\r\nRequest:\r\n<pre><code class=\"language-json\">{\r\n  \"[]\":{                             //get an array\r\n    \"page\":0,                        //pagination\r\n    \"count\":2,\r\n    \"Moment\":{                       //get a Moment\r\n      \"content$\":\"%a%\"               //filter condition: content contains 'a'\r\n    },\r\n    \"User\":{\r\n      \"id@\":\"/Moment/userId\",        //User.id = Moment.userId, short reference path，starts from grandparents path\r\n      \"@column\":\"id,name,head\"       //get specified keys with the written order \r\n    },\r\n    \"Comment[]\":{                    //get a Comment array, and unwrap Comment object\r\n      \"count\":2,\r\n      \"Comment\":{\r\n        \"momentId@\":\"[]/Moment/id\"   //Comment.momentId = Moment.id, full reference path\r\n      }\r\n    }\r\n  }\r\n}\r\n</code></pre>\r\n\r\n[Click here to test](http://apijson.cn:8080/get/{\"[]\":{\"page\":0,\"count\":2,\"Moment\":{\"content$\":\"%2525a%2525\"},\"User\":{\"id@\":\"%252FMoment%252FuserId\",\"@column\":\"id,name,head\"},\"Comment[]\":{\"count\":2,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\r\n\r\nResponse:\r\n<pre><code class=\"language-json\">{\r\n  \"[]\":[\r\n    {\r\n      \"Moment\":{\r\n        \"id\":15,\r\n        \"userId\":70793,\r\n        \"date\":1486541171000,\r\n        \"content\":\"APIJSON is a JSON Transmission Structure Protocol…\",\r\n        \"praiseUserIdList\":[\r\n          82055,\r\n          82002,\r\n          82001\r\n        ],\r\n        \"pictureList\":[\r\n          \"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\r\n          \"http://common.cnblogs.com/images/icon_weibo_24.png\"\r\n        ]\r\n      },\r\n      \"User\":{\r\n        \"id\":70793,\r\n        \"name\":\"Strong\",\r\n        \"head\":\"http://static.oschina.net/uploads/user/585/1170143_50.jpg?t=1390226446000\"\r\n      },\r\n      \"Comment[]\":[\r\n        {\r\n          \"id\":176,\r\n          \"toId\":166,\r\n          \"userId\":38710,\r\n          \"momentId\":15,\r\n          \"date\":1490444883000,\r\n          \"content\":\"thank you\"\r\n        },\r\n        {\r\n          \"id\":1490863469638,\r\n          \"toId\":0,\r\n          \"userId\":82002,\r\n          \"momentId\":15,\r\n          \"date\":1490863469000,\r\n          \"content\":\"Just do it\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"Moment\":{\r\n        \"id\":58,\r\n        \"userId\":90814,\r\n        \"date\":1485947671000,\r\n        \"content\":\"This is a Content...-435\",\r\n        \"praiseUserIdList\":[\r\n          38710,\r\n          82003,\r\n          82005,\r\n          93793,\r\n          82006,\r\n          82044,\r\n          82001\r\n        ],\r\n        \"pictureList\":[\r\n          \"http://static.oschina.net/uploads/img/201604/22172507_aMmH.jpg\"\r\n        ]\r\n      },\r\n      \"User\":{\r\n        \"id\":90814,\r\n        \"name\":7,\r\n        \"head\":\"http://static.oschina.net/uploads/user/51/102723_50.jpg?t=1449212504000\"\r\n      },\r\n      \"Comment[]\":[\r\n        {\r\n          \"id\":13,\r\n          \"toId\":0,\r\n          \"userId\":82005,\r\n          \"momentId\":58,\r\n          \"date\":1485948050000,\r\n          \"content\":\"This is a Content...-13\"\r\n        },\r\n        {\r\n          \"id\":77,\r\n          \"toId\":13,\r\n          \"userId\":93793,\r\n          \"momentId\":58,\r\n          \"date\":1485948050000,\r\n          \"content\":\"This is a Content...-77\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"code\":200,\r\n  \"msg\":\"success\"\r\n}\r\n</code></pre>\r\n\r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON query multi related tables: one to one, one to many, many to one, various conditions, etc.</a>\r\n</p> \r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_associate.gif)\r\n\r\n<br />\r\n  \r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON joins: < LEFT JOIN, & INNER JOIN, etc.</a>\r\n</p> \r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_join.gif)\r\n  \r\n<br />\r\n  \r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON subqueries：@from@ FROM, key@ =, key>@ >, key{}@ IN, key}{@ EXISTS, etc.</a>\r\n</p> \r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_subquery.gif)\r\n    \r\n<br />\r\n    \r\n<p align=\"center\" >\r\n  <a >[GIF] APIJSON: a set of some features, simple to complex</a>\r\n</p> \r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_summary.gif)\r\n\r\n<br />\r\n\r\n[Test it online](http://apijson.cn/api) \r\n\r\n<br />\r\n<br />\r\n\r\n## API Design Rules\r\n\r\n### 1. Methods and API endpoints\r\n\r\n  Methods | URL | Request | Response\r\n------------ | ------------ | ------------ | ------------\r\n**GET**: <br /> A general way to get data.<br /> You can use dev tools to make edits in a web browser. | base_url/get/ | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; //Add contiditions here.<br /> &nbsp;&nbsp; }<br />} <br /> <br /> Eg. To get a Moment with `id = 235`：<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235<br /> &nbsp;&nbsp; }<br />} | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; ...<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br />}<br />Eg.<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br /> }\r\n**HEAD**: <br /> A general way to get counts.<br /> You can use dev tools to make edits in a web browser. | base_url/head/ | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; …<br /> &nbsp;&nbsp; }<br /> } <br /> {…} are conditions. <br /><br /> Eg. Get the number of Moments posted by the user with `id = 38710`：<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710<br /> &nbsp;&nbsp; }<br />} | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"count\":10<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br />} <br /> Eg.<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"count\":10<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;  \"msg\":\"success\"<br />}\r\n**GETS**: <br /> Get data with high security and confidentiality.<br /> Eg. bank accounts, birth date. | base_url/gets/ | You need to add `\"tag\":tag` with the same level of `Moment:{}`. Others are the same as **GET**. | Same as **GET**.\r\n**HEADS**: <br /> Get counts of confidential data(eg. bank account).| base_url/heads/ | You need to add  `\"tag\":tag` with the same level of `Moment:{}`. Others are the same as **HEAD**. | Same as **HEAD**.\r\n**POST**: <br /> Add new data. | base_url/post/ | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; …<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":tag<br />} <br /> The id in {...} is generated automatically when table is built and can’t be set by the user. <br /><br />Eg. A user with `id = 38710` posts a new Moment：<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":\"Moment\"<br />} | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br />}<br />Eg.<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":120<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br />}\r\n**PUT**: <br /> Make changes to a specific item.<br /> Only change the part sent to server. | base_url/put/ | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":id,<br /> &nbsp;&nbsp;&nbsp;&nbsp; …<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":tag<br />} <br />  You can also add multiple id as `id{}`.<br /><br />Eg. Make changes to Moment's content with id= 235:<br />{<br /> &nbsp;&nbsp; \"Moment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":\"Moment\"<br />} | Same as **POST**.\r\n**DELETE**: <br /> Delete data. | base_url/delete/ | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id\":id<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":tag<br />} <br /> You can also add multiple id as `id{}`. <br /><br /> Or Delete contents with multiple id：<br />{<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id{}\":[100,110,120]<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"tag\":\"Comment[]\"<br />} | {<br /> &nbsp;&nbsp; TableName:{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id[]\":[100,110,120]<br />&nbsp;&nbsp; &nbsp;&nbsp; \"count\":3<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"code\":200,<br /> &nbsp;&nbsp; \"msg\":\"success\"<br />}<br />Eg.<br />{<br />&nbsp;&nbsp; \"Comment\":{<br />&nbsp;&nbsp; &nbsp;&nbsp; \"code\":200,<br />&nbsp;&nbsp; &nbsp;&nbsp; \"msg\":\"success\",<br />&nbsp;&nbsp; &nbsp;&nbsp; \"id[]\":[100,110,120],<br />&nbsp;&nbsp; &nbsp;&nbsp; \"count\":3<br />&nbsp;&nbsp; },<br />&nbsp;&nbsp; \"code\":200,<br />&nbsp;&nbsp; \"msg\":\"success\"<br />}\r\n\r\n**Note**:<br />\r\n1. TableName means the name of the table where you get data. It’ll respond with a JSON Object(the form is {....})with columns inside.\r\n2. `\"tag\":tag` is needed when methods are not GET or HEAD. The tag after the colon is the key in JSON Object of making requests. Generally, it’s the name of the table you’re looking for.\r\n3. GET, HEAD are methods for general data requests.They support versatile JSON Object structure. Other methods are used for requesting confidential data and the requesting JSON Object needs to be in the same form/order as that in the database. Otherwise, the request shall be denied.\r\n4. GETS and GET, HEADS and HEAD return the same type of data. But the request form is a little different.\r\n5. For HTTP, all API methods (get,gets,head,heads,post,put,delete) make requests with HTTP POST.\r\n6. All JSON Objects here are with {...} form. You can put items or objects in it.\r\n7. Each object in the database has a unique address.\r\n\r\n<br />\r\n\r\n### 2. Keyswords in URL parameters\r\n \r\n Functions | Key-value pairs | Examples\r\n------------ | ------------ | ------------\r\n Get data in arrays | `\"key[]\":{}`<br /> The part after the colon is a JSONObject. *key* is optional. When *key* is the same as the table name , the JSONObject will be in a simplified form. For example,  `{Table:{Content}}` will be written as `{Content}`.| [{\"User[]\":{\"User\":{}}}](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{}}}) <br />It is used for getting data from a user. Here, key and tablename are all \"User\", then <br />`{\"User\":{\"id\", ...}}` <br />will be written as <br /> `{\"id\", ...}`\r\n Get data that meets specific conditions | `\"key{}\":[]` <br />The part after the colon is a JSONArray with conditions inside.| [\"id{}\":[38710,82001,70793]](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"id{}\":[38710,82001,70793]}}}) <br />In SQL, this would be `id IN(38710,82001,70793)`. <br />It means getting data with id equals 38710,82001,70793.\r\n Get data with comparison operation| `\"key{}\":\"condition0,condition1...\"`<br />Conditions can be any SQL comparision operation. Use''to include any non-number characters.| [\"id{}\":\"<=80000,\\>90000\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"id{}\":\"<=80000,\\>90000\"}}}) <br />In SQL, it'd be <br /> `id<=80000 OR id>90000`, <br />which means get User array with id\\<=80000 \\| id>90000\r\n Get data that contains an element | `\"key<>\":Object`  =>  `\"key<>\":[Object]` <br /> *key* must be a JSONArray while *Object* cannot be JSON.|  [\"contactIdList<\\>\":38710](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"contactIdList<\\>\":38710}}}) <br />In SQL, this would be <br />`json_contains(contactIdList,38710)`. <br />It means find data of the User whose contactList contains 38710.\r\n See if it exists |`\"key}{@\":{`<br /> &nbsp;&nbsp; `\"from\":\"Table\",`<br /> &nbsp;&nbsp; `\"Table\":{ ... }`<br />`}`<br /><br />}{ means EXISTS.<br /> *key* is the one you want to check. <br />Here is a *Subquery* in it, see specifications below for more information. | [\"id}{@\":{<br /> &nbsp;&nbsp; \"from\":\"Comment\",<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;  &nbsp;&nbsp; \"momentId\":15 <br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"User\":{\"id}{@\":{\"from\":\"Comment\",\"Comment\":{\"momentId\":15}}}})<br /> WHERE EXISTS(SELECT * FROM Comment WHERE momentId=15)\r\n Include functions in parameters | `\"key()\":\"function (key0,key1...)\"`<br />This will trigger the back-end <br /> `function(JSONObject request, String key0, String key1...)` <br />to get or testify data.<br /> Use - and + to show the order of priority: analyze key-() > analyze the current object > analyze key() > analyze child object > analyze key+()| [\"isPraised()\":\"isContain(praiseUserIdList,userId)\"](http://apijson.cn:8080/get/{\"Moment\":{\"id\":301,\"isPraised()\":\"isContain(praiseUserIdList,userId)\"}}) <br />This will use function boolean isContain(JSONObject request, String array, String value). In this case, client will get \"isPraised\":true(In this case, client use function to testify if a user clicked ‘like’ button for a Moment.)\r\n Refer a value | `\"key@\":\"key0/key1/.../refKey\"`<br />Use / to show path. The part before the colon is the key that wants to refer. The path after the colon starts with the parent level of the key.| [\"Moment\":{<br /> &nbsp;&nbsp; \"userId\":38710<br />},<br />\"User\":{<br /> &nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br />}](http://apijson.cn:8080/get/{\"Moment\":{\"userId\":38710},\"User\":{\"id@\":\"%252FMoment%252FuserId\"}})<br /> In this example, the value of id in User refer to the *userId* in *Moment*, which means <br />`User.id = Moment.userId`. <br />After the request is sent, <br />`\"id@\":\"/Moment/userId\"` will be `\"id\":38710`.\r\n Subquery | `\"key@\":{`<br /> &nbsp;&nbsp; `\"range\":\"ALL\",` <br /> &nbsp;&nbsp; `\"from\":\"Table\",`<br /> &nbsp;&nbsp; `\"Table\":{ ... }`<br />`}`<br />*range* can be ALL, ANY.<br />*from* means which table you want to query. <br />It’s very similar to how you query in SQL. <br />You can also use *count*, *join*, etc. | [\"id@\":{<br /> &nbsp;&nbsp; \"from\":\"Comment\",<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;  &nbsp;&nbsp; \"@column\":\"min(userId)\" <br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"User\":{\"id@\":{\"from\":\"Comment\",\"Comment\":{\"@column\":\"min(userId)\"}}}})<br /> `WHERE id=(SELECT min(userId) FROM Comment)`.\r\n Fuzzy matching | `\"key$\":\"SQL search expressions\"`  =>  `\"key$\":[\"SQL search expressions\"]`<br />Any SQL search expressions.Eg.%key%(include key), key%(start with key),%k%e%y%(include k, e, y). % means any characters. | [\"name$\":\"%m%\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"name$\":\"%2525m%2525\"}}}) <br />In SQL, it's <br />`name LIKE '%m%'`, <br />meaning that get User with ‘m’ in name.\r\n Regular Expression| `\"key~\":\"regular expression\"`  =>  `\"key~\":[\"regular expression\"]`<br />It can be any regular expressions.Eg. ^[0-9]+$ ，*~ not case sensitive, advanced search is applicable.| [\"name~\":\"^[0-9]+$\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"name~\":\"^[0-9]%252B$\"}}}) <br />In SQL, it's <br />`name REGEXP '^[0-9]+$'`.\r\n Get data in a range| `\"key%\":\"start,end\"`  =>  `\"key%\":[\"start,end\"]`<br />The data type of start and end can only be either Boolean, Number or String. Eg. \"2017-01-01,2019-01-01\" ，[\"1,90000\", \"82001,100000\"]. It's used for getting data from a specific time range. | [\"date%\":\"2017-10-01,2018-10-01\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"date%2525\":\"2017-10-01,2018-10-01\"}}}) <br />In SQL, it's <br />`date BETWEEN '2017-10-01' AND '2018-10-01'`, <br />meaning to get User data that registered between 2017-10-01 and 2018-10-01.\r\n Make an alias | `\"name:alias\"`<br />this changes name to alias in returning results. It’s applicable to column, tableName, SQL Functions, etc. but only in GET, HEAD requests. | [\"@column\":\"toId:parentId\"](http://apijson.cn:8080/get/{\"Comment\":{\"@column\":\"id,toId:parentId\",\"id\":51}}) <br />In SQL, it's <br />`toId AS parentId`. <br />It'll return `parentId` instead of `toId`.\r\n Add / expand an item | `\"key+\":Object` <br /> The type of Object is decided by *key*. Types can be Number, String, JSONArray. Froms are 82001,\"apijson\",[\"url0\",\"url1\"] respectively. It’s only applicable to PUT request.| \"praiseUserIdList+\":[82001]. In SQL, it's <br />`json_insert(praiseUserIdList,82001)`. <br />Add an *id* that praised the Moment.\r\n Delete / decrease an item | `\"Key-\":Object`<br /> It’s the contrary of \"key+\" | \"balance-\":100.00. In SQL, it's <br />`balance = balance - 100.00`, <br />meaning there's 100 less in balance.\r\n Operations | &, \\|, ! <br /> They're used in logic operations. It’s the same as AND, OR, NOT in SQL respectively. <br />By default, for the same key, it’s ‘\\|’ (OR)operation among conditions; for different keys, the default operation among conditions is ‘&’(AND). <br /> |  ① [\"id&{}\":\">80000,<=90000\"](http://apijson.cn:8080/head/{\"User\":{\"id&{}\":\">80000,<=90000\"}}) <br />In SQL, it's <br />`id>80000 AND id<=90000`, <br />meaning *id* needs to be id>80000 & id<=90000<br /><br /> ② [\"id\\|{}\":\">90000,<=80000\"](http://apijson.cn:8080/head/{\"User\":{\"id\\|{}\":\">90000,<=80000\"}}) <br />It's the same as \"id{}\":\">90000,<=80000\". <br />In SQL, it's <br />`id>80000 OR id<=90000`, <br />meaning that *id* needs to be id>90000 \\| id<=80000<br /><br /> ③ [\"id!{}\":[82001,38710]](http://apijson.cn:8080/head/{\"User\":{\"id!{}\":[82001,38710]}}) <br />In SQL, it's <br />`id NOT IN(82001,38710)`, <br />meaning id needs to be ! (id=82001 \\| id=38710).\r\n Keywords in an Array: It can be self-defined. | As for `\"key\":Object`, *key* is the keyword of *{}* in *\"[]\":{}*. The type of *Object* is up to *key*.<br /><br />① `\"count\":Integer` It's used to count the number. The default largest number is 100. <br /><br />② `\"page\":Integer` It’s used for getting data from which page, starting from 0. The default largest number is 100. It’s usually used with COUNT. <br /><br />③ `\"query\":Integer` Get the number of items that match conditions<br />When to get the object, the integer should be 0; when to get the total number, it’s 1; when both above, it’s 2.<br />You can get the total number with keyword total. It can be referred to other values. <br />Eg. <br />`\"total@\":\"/[]/total\"` <br />Put it as the same level of query.  <br />*Query* and *total* are used in GET requests just for convenience. Generally, HEAD request is for getting numbers like the total number.<br /><br />④ `\"join\":\"&/Table0,</Table1\"`<br />Join tables：<br /> \"\\<\" - LEFT JOIN <br /> \">\" - RIGHT JOIN <br /> \"&\" - INNER JOIN <br /> \"\\|\" - FULL JOIN <br />  \"!\" - OUTER JOIN <br /> \"@\" - APP JOIN <br />Where @ APP JOIN is in application layer.It’ll get all the keys in tables that refKeys in result tables are referred to, like refKeys:[value0, value1….]. Then, as the results get data according to `key=$refKey` a number of times (COUNT), it uses key `IN($refKeys)` to put these counts together in just one SQL query, in order to improve the performance.<br /> Other JOIN functions are the same as those in SQL. <br />`\"join\":\"</ViceTable\",`<br />`\"MainTable\":{},`<br />`\"ViceTable\":{\"key@\":\"/MainTable/refKey\"}`<br />will return <br />`MainTable LEFT JOIN ViceTable` <br />`ON ViceTable.key=MainTable.refKey` <br /><br />⑤ `\"otherKey\":Object` Self-defined keyword other than those that already in the system. It also returns with self-defined keywords.| ① Get User arrays with maximum of 5：<br />[\"count\":5](http://apijson.cn:8080/get/{\"[]\":{\"count\":5,\"User\":{}}})<br /><br /> ② Look into User arrays on page 3. Show 5 of them each page. <br />[\"count\":5,<br />\"page\":3](http://apijson.cn:8080/get/{\"[]\":{\"count\":5,\"page\":3,\"User\":{}}})<br /><br /> ③ Get User Arrays and count the total number of Users：<br />[\"[]\":{<br /> &nbsp;&nbsp; \"query\":2,<br /> &nbsp;&nbsp; \"User\":{}<br />},<br />\"total@\":\"/[]/total\"](http://apijson.cn:8080/get/{\"[]\":{\"query\":2,\"count\":5,\"User\":{}},\"total@\":\"%252F[]%252Ftotal\"})<br />Questions like total page numbers or if there's next page can be solved by total,count,page functions，<br />Total page number: <br/>`int totalPage = Math.ceil(total / count)`<br />If this is the last page: <br />`boolean hasNextPage = total > count*page`<br />If this is the first page: <br />`boolean isFirstPage = page <= 0`<br />If it's the last page: <br />`boolean isLastPage = total <= count*page`<br />... <br /><br /> ④ Moment INNER JOIN User LEFT JOIN Comment：<br />[\"[]\":{<br /> &nbsp;&nbsp; \"join\": \"&/User,\\</Comment\",<br /> &nbsp;&nbsp; \"Moment\":{},<br /> &nbsp;&nbsp; \"User\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"name~\":\"t\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id@\": \"/Moment/userId\"<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\": \"/Moment/id\"<br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"[]\":{\"count\":5,\"join\":\"&%252FUser,\\<%252FComment\",\"Moment\":{\"@column\":\"id,userId,content\"},\"User\":{\"name~\":\"t\",\"id@\":\"%252FMoment%252FuserId\",\"@column\":\"id,name,head\"},\"Comment\":{\"momentId@\":\"%252FMoment%252Fid\",\"@column\":\"id,momentId,content\"}}})<br /><br /> ⑤ Add the current user to every level：<br />[\"User\":{},<br />\"[]\":{<br /> &nbsp;&nbsp; \"name@\":\"User/name\", //self-defined keyword<br /> &nbsp;&nbsp; \"Moment\":{}<br />}](http://apijson.cn:8080/get/{\"User\":{},\"[]\":{\"name@\":\"User%252Fname\",\"Moment\":{}}})\r\n Keywords in Objects: It can be self-defined. | `\"@key\":Object` @key is the keyword of {} in Table:{}. The type of Object is decided by @key<br /><br />① `\"@combine\":\"&key0,&key1,\\|key2,key3,`<br />`!key4,!key5,&key6,key7...\"`<br />First, it’ll group data with same operators. Within one group, it operates from left to right. Then it’ll follow the order of & \\| ! to do the operation. Different groups are connected with &. So the expression above will be : <br /> (key0 & key1 & key6 & other key) & (key2 \\| key3 \\| key7) & !(key4 \\| key5) <br />\\| is optional. <br /><br />② `\"@column\":\"column;function(arg)...\"` Return with specific columns.<br /><br />③ `\"@order\":\"column0+,column1-...\"` Decide the order of returning results:<br /><br />④ `\"@group\":\"column0,column1...\"` How to group data. If @column has declared Table id, this id need to be included in @group. In other situations, at least one of the following needs to be done:<br />1.Group id is declared in @column<br />2.Primary Key of the table is declared in @group.<br/><br/>⑤ `@having\":\"function0(...)?value0;function1(...)?value1;function2(...)?value2...\"` Add conditions on return results with @having. Usually working with@group, it’s declared in @column.<br /><br />⑥ `\"@schema\":\"sys\"` Can be set as default setting.<br /><br />⑦ `\"@database\":\"POSTGRESQL\"` Get data from a different database.Can be set as default setting.<br /><br />⑧ `\"@role\":\"OWNER\"` Get information of the user, including <br />UNKNOWN,LOGIN,CONTACT,CIRCLE,OWNER,ADMIN，<br />Can be set as default setting. <br />You can self-define a new role or rewrite a role.  Use`Verifier.verify` etc. to self-define validation methods. <br /><br />⑨ `\"@explain\":true` Profiling. Can be set as default setting. <br /><br />⑩ `\"@otherKey\":Object` Self-define keyword | ① Search *Users* that *name* or *tag* contains the letter \"a\":<br />[\"name~\":\"a\",<br />\"tag~\":\"a\",<br />\"@combine\":\"name~,tag~\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":10,\"User\":{\"@column\":\"id,name,tag\",\"name~\":\"a\",\"tag~\":\"a\",\"@combine\":\"name~,tag~\"}}})<br /><br /> ② Only search column id,sex,name and return with the same order:<br />[\"@column\":\"id,sex,name\"](http://apijson.cn:8080/get/{\"User\":{\"@column\":\"id,sex,name\",\"id\":38710}})<br /><br /> ③ Search Users that have descending order of name and default order of id:<br />[\"@order\":\"name-,id\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"User\":{\"@column\":\"name,id\",\"@order\":\"name-,id\"}}})<br /><br /> ④ Search Moment grouped with userId: <br />[\"@group\":\"userId,id\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":%7B\"@column\":\"userId,id\",\"@group\":\"userId,id\"}}})<br /><br /> ⑤ Search Moments that id equals or less than 100 and group with userId:<br />[\"@column\":\"userId;max(id)\",<br />\"@group\":\"userId\",<br />\"@having\":\"max(id)>=100\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":{\"@column\":\"userId%253Bmax(id)\",\"@group\":\"userId\",\"@having\":\"max(id)>=100\"}}})<br />You can also define the name of the returned function:<br />[\"@column\":\"userId;max(id):maxId\",<br />\"@group\":\"userId\",<br />\"@having\":\"(maxId)>=100\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":{\"@column\":\"userId%253Bmax(id):maxId\",\"@group\":\"userId\",\"@having\":\"(maxId)>=100\"}}})<br /><br /> ⑥ Check Users table in sys: <br />[\"@schema\":\"sys\"](http://apijson.cn:8080/get/{\"User\":{\"@schema\":\"sys\"}})<br /><br /> ⑦ Check Users table in PostgreSQL:<br />[\"@database\":\"POSTGRESQL\"](http://apijson.cn:8080/get/{\"User\":{\"@database\":\"POSTGRESQL\"}})<br /><br /> ⑧ Check the current user's activity:<br />[\"@role\":\"OWNER\"](http://apijson.cn:8080/get/{\"[]\":{\"Moment\":{\"@role\":\"OWNER\"}}})<br /><br /> ⑨ Turn on profiling: <br />[\"@explain\":true](http://apijson.cn:8080/get/{\"[]\":{\"Moment\":{\"@explain\":true}}})<br /><br /> ⑩ Get the No.0 picture from pictureList：<br />[\"@position\":0, //self-defined keyword<br />\"firstPicture()\":\"getFromArray(pictureList,@position)\"](http://apijson.cn:8080/get/{\"User\":{\"id\":38710,\"@position\":0,\"firstPicture()\":\"getFromArray(pictureList,@position)\"}})\r\n global keyword. | It is a keyword inside the outermost object {}. Among them, @database, @schema, @datasource, @role, and @explain are basically the same as object keywords, see the above description, the difference is that the global keywords will be automatically inserted in each table object as the default value. <br /><br />① \"tag\": String, the following tag is the identifier of the JSON structure matching the request in non-GET or HEAD requests, generally it is the name of the Table to be queried or the array Table[] or Table:[] corresponding to the name, determined by the backend specified in the Request table. <br /><br /> ② \"version\": Integer, the interface version. If the version is not passed, null or <=0, the highest version will be used. If other valid values are passed, the lowest version closest to it will be used, which is specified in the backend Request table.<br /><br /> ③ \"format\": Boolean, formatted to return the key of the Response JSON, generally converting TableName to tableName, TableName[] to tableNameList, Table:alias to alias, TableName-key[] to tableNameKeyList and other camelcase formats.  | ①  Check private information:：<br />[{\"tag\":\"Privacy\",\"Privacy\":{\"id\":82001}}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={%22tag%22:%22Privacy%22,%22Privacy%22:{%22id%22:82001}})<br /><br /> ② Use the version 1 interface to check private information:：<br />[{\"version\":1,\"tag\":\"Privacy\",\"Privacy\":{\"id\":82001}}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={%22version%22:1,%22tag%22:%22Privacy%22,%22Privacy%22:{%22id%22:82001}}) <br /><br /> ③ Format Moments interface to return in JSON key：<br />[{<br > &nbsp;&nbsp; \"format\":true, <br > &nbsp;&nbsp; \"[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{}, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"count\":3,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"[]/Moment/id\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"format\":true,\"[]\":{\"page\":0,\"count\":3,\"Moment\":{},\"User\":{\"id@\":\"%252FMoment%252FuserId\"},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\r\n\r\n<br />\r\n\r\n"
        },
        {
          "name": "Document.md",
          "type": "blob",
          "size": 63.064453125,
          "content": "[English](https://github.com/Tencent/APIJSON/blob/master/Document-English.md)\n<br />\n\n# APIJSON 通用文档 \n本文是通用文档，只和 APIJSON 协议有关，和 C#, Go, Java, JavaScript, PHP, Python, TypeScript 等开发语言无关。 <br />\n具体开发语言相关的 配置、运行、部署 等文档见各个相关项目的文档，可以在首页点击对应语言的入口来查看。<br />\nhttps://github.com/Tencent/APIJSON\n![image](https://user-images.githubusercontent.com/5738175/134520081-a63d3817-321c-4e7b-9e03-73c6827a19c1.png)\n\n\n后端开发者可以先看 [图文入门教程1](http://apijson.cn/doc/zh/) 或 [图文入门教程2](https://hanxu2018.github.io/APIJSON-DOC/) （和本文档有出入的点以本文档为准。例如正则匹配 key? 已废弃，用 key~ 替代；例如 \"@column\":\"store_id,sum(amt):totAmt\" 中逗号 , 有误，应该用分号 ; 隔开 SQL 函数，改为 \"@column\":\"store_id;sum(amt):totAmt\"）\n\n* ### [1.示例](#1)\n* ### [2.对比传统方式](#2)\n* [2.1 开发流程](#2.1)\n* [2.2 前端请求](#2.2)\n* [2.3 后端操作](#2.3)\n* [2.4 前端解析](#2.4)\n* [2.5 对应不同需求的请求](#2.5)\n* [2.6 对应不同请求的结果](#2.6)\n* ### [3.设计规范](#3)\n* [3.1 操作方法](#3.1)\n* [3.2 功能符](#3.2)\n\n\n## <h2 id=\"1\">1.示例<h2/>\n\n#### 获取用户\n请求：\n<pre><code class=\"language-json\">{\n  \"User\":{\n    \"id\":38710\n  }\n}\n</code></pre>\n\n[点击这里测试](http://apijson.cn:8080/get/{\"User\":{\"id\":38710}})\n\n返回：\n<pre><code class=\"language-json\">{\n  \"User\":{\n    \"id\":38710,\n    \"sex\":0,\n    \"name\":\"TommyLemon\",\n    \"tag\":\"Android&Java\",\n    \"head\":\"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\n    \"date\":1485948110000,\n    \"pictureList\":[\n      \"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\n      \"http://common.cnblogs.com/images/icon_weibo_24.png\"\n    ]\n  },\n  \"code\":200,\n  \"msg\":\"success\"\n}\n</code></pre>\n\n<p align=\"center\" >\n  <a >[GIF] APIJSON 各种单表对象查询：简单查询、统计、分组、排序、聚合、比较、筛选字段、字段别名 等</a>\n</p> \n  \n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_single.gif)\n  \n<br />\n\n#### 获取用户列表\n请求：\n<pre><code class=\"language-json\">{\n  \"[]\":{\n    \"count\":3,             //只要3个\n    \"User\":{\n      \"@column\":\"id,name\"  //只要id,name这两个字段\n    }\n  }\n}\n</code></pre>\n\n[点击这里测试](http://apijson.cn:8080/get/{\"[]\":{\"count\":3,\"User\":{\"@column\":\"id,name\"}}})\n\n返回：\n<pre><code class=\"language-json\">{\n  \"[]\":[\n    {\n      \"User\":{\n        \"id\":38710,\n        \"name\":\"TommyLemon\"\n      }\n    },\n    {\n      \"User\":{\n        \"id\":70793,\n        \"name\":\"Strong\"\n      }\n    },\n    {\n      \"User\":{\n        \"id\":82001,\n        \"name\":\"Android\"\n      }\n    }\n  ],\n  \"code\":200,\n  \"msg\":\"success\"\n}\n</code></pre>\n\n<p align=\"center\" >\n  <a >[GIF] APIJSON 各种单表数组查询：简单查询、统计、分组、排序、聚合、分页、比较、搜索、正则、条件组合 等</a>\n</p> \n\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_array.gif)\n\n<br />\n\n#### 获取动态及发布者用户\n请求：\n<pre><code class=\"language-json\">{\n  \"Moment\":{\n  },\n  \"User\":{\n    \"id@\":\"Moment/userId\"  //User.id = Moment.userId\n  }\n}\n</code></pre>\n\n[点击这里测试](http://apijson.cn:8080/get/{\"Moment\":{},\"User\":{\"id@\":\"Moment%252FuserId\"}})\n\n返回：\n<pre><code class=\"language-json\">{\n  \"Moment\":{\n    \"id\":12,\n    \"userId\":70793,\n    \"date\":\"2017-02-08 16:06:11.0\",\n    \"content\":\"1111534034\"\n  },\n  \"User\":{\n    \"id\":70793,\n    \"sex\":0,\n    \"name\":\"Strong\",\n    \"tag\":\"djdj\",\n    \"head\":\"http://static.oschina.net/uploads/user/585/1170143_50.jpg?t=1390226446000\",\n    \"contactIdList\":[\n      38710,\n      82002\n    ],\n    \"date\":\"2017-02-01 19:21:50.0\"\n  },\n  \"code\":200,\n  \"msg\":\"success\"\n}\n</code></pre>\n  \n<br />\n\n#### 获取类似微信朋友圈的动态列表\n请求：\n<pre><code class=\"language-json\">{\n  \"[]\":{                             //请求一个数组\n    \"page\":0,                        //数组条件\n    \"count\":2,\n    \"Moment\":{                       //请求一个名为Moment的对象\n      \"content$\":\"%a%\"               //对象条件，搜索content中包含a的动态\n    },\n    \"User\":{\n      \"id@\":\"/Moment/userId\",        //User.id = Moment.userId  缺省引用赋值路径，从所处容器的父容器路径开始\n      \"@column\":\"id,name,head\"       //指定返回字段\n    },\n    \"Comment[]\":{                    //请求一个名为Comment的数组，并去除Comment包装\n      \"count\":2,\n      \"Comment\":{\n        \"momentId@\":\"[]/Moment/id\"   //Comment.momentId = Moment.id  完整引用赋值路径\n      }\n    }\n  }\n}\n</code></pre>\n\n[点击这里测试](http://apijson.cn:8080/get/{\"[]\":{\"page\":0,\"count\":2,\"Moment\":{\"content$\":\"%2525a%2525\"},\"User\":{\"id@\":\"%252FMoment%252FuserId\",\"@column\":\"id,name,head\"},\"Comment[]\":{\"count\":2,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\n\n返回：\n<pre><code class=\"language-json\">{\n  \"[]\":[\n    {\n      \"Moment\":{\n        \"id\":15,\n        \"userId\":70793,\n        \"date\":1486541171000,\n        \"content\":\"APIJSON is a JSON Transmission Structure Protocol…\",\n        \"praiseUserIdList\":[\n          82055,\n          82002,\n          82001\n        ],\n        \"pictureList\":[\n          \"http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000\",\n          \"http://common.cnblogs.com/images/icon_weibo_24.png\"\n        ]\n      },\n      \"User\":{\n        \"id\":70793,\n        \"name\":\"Strong\",\n        \"head\":\"http://static.oschina.net/uploads/user/585/1170143_50.jpg?t=1390226446000\"\n      },\n      \"Comment[]\":[\n        {\n          \"id\":176,\n          \"toId\":166,\n          \"userId\":38710,\n          \"momentId\":15,\n          \"date\":1490444883000,\n          \"content\":\"thank you\"\n        },\n        {\n          \"id\":1490863469638,\n          \"toId\":0,\n          \"userId\":82002,\n          \"momentId\":15,\n          \"date\":1490863469000,\n          \"content\":\"Just do it\"\n        }\n      ]\n    },\n    {\n      \"Moment\":{\n        \"id\":58,\n        \"userId\":90814,\n        \"date\":1485947671000,\n        \"content\":\"This is a Content...-435\",\n        \"praiseUserIdList\":[\n          38710,\n          82003,\n          82005,\n          93793,\n          82006,\n          82044,\n          82001\n        ],\n        \"pictureList\":[\n          \"http://static.oschina.net/uploads/img/201604/22172507_aMmH.jpg\"\n        ]\n      },\n      \"User\":{\n        \"id\":90814,\n        \"name\":7,\n        \"head\":\"http://static.oschina.net/uploads/user/51/102723_50.jpg?t=1449212504000\"\n      },\n      \"Comment[]\":[\n        {\n          \"id\":13,\n          \"toId\":0,\n          \"userId\":82005,\n          \"momentId\":58,\n          \"date\":1485948050000,\n          \"content\":\"This is a Content...-13\"\n        },\n        {\n          \"id\":77,\n          \"toId\":13,\n          \"userId\":93793,\n          \"momentId\":58,\n          \"date\":1485948050000,\n          \"content\":\"This is a Content...-77\"\n        }\n      ]\n    }\n  ],\n  \"code\":200,\n  \"msg\":\"success\"\n}\n</code></pre>\n\n<p align=\"center\" >\n  <a >[GIF] APIJSON 各种多表关联查询：一对一、一对多、多对一、各种条件 等</a>\n</p> \n\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_associate.gif)\n\n<br />\n  \n<p align=\"center\" >\n  <a >[GIF] APIJSON 各种 JOIN：< LEFT JOIN, & INNER JOIN 等</a>\n</p> \n\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_join.gif)\n  \n<br />\n  \n<p align=\"center\" >\n  <a >[GIF] APIJSON 各种子查询：@from@ FROM, key@ =, key>@ >, key{}@ IN, key}{@ EXISTS 等 </a>\n</p> \n\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_subquery.gif)\n    \n<br />\n    \n<p align=\"center\" >\n  <a >[GIF] APIJSON 部分功能演示集合，由浅入深、由简单到复杂 </a>\n</p> \n\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_summary.gif)\n\n<br />\n\n[在线测试](http://apijson.cn/api)\n\n<br />\n<br />\n \n## <h2 id=\"2\">2.对比传统RESTful方式<h2/>\n\n### <h3 id=\"2.1\">2.1 开发流程<h3/>\n 开发流程 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n 接口传输 | 等后端编辑接口，然后更新文档，前端再按照文档编辑请求和解析代码 | 前端按照自己的需求编辑请求和解析代码。<br />没有接口，更不需要文档！前端再也不用和后端沟通接口或文档问题了！\n 兼容旧版 | 后端增加新接口，用v2表示第2版接口，然后更新文档 | 什么都不用做！\n \n <br />\n \n### <h3 id=\"2.2\">2.2 前端请求<h3/>\n 前端请求 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n 要求 | 前端按照文档在对应URL后面拼接键值对 | 前端按照自己的需求在固定URL后拼接JSON\n URL | 不同的请求对应不同的URL，基本上有多少个不同的请求就得有多少个接口URL | 相同的操作方法(增删改查)都用同一个URL，<br />大部分请求都用7个通用接口URL的其中一个\n 键值对 | key=value | key:value\n 结构 | 同一个URL内table_name只能有一个 <br /><br /> base_url/get/table_name?<br />key0=value0&key1=value1... | 同一个URL后TableName可传任意数量个 <br /><br /> base_url/get/<br />{<br > &nbsp;&nbsp; TableName0:{<br > &nbsp;&nbsp;&nbsp;&nbsp; key0:value0,<br > &nbsp;&nbsp;&nbsp;&nbsp; key1:value1,<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; TableName1:{<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; }<br > &nbsp;&nbsp; ...<br > }\n \n <br />\n \n### <h3 id=\"2.3\">2.3 后端操作<h3/>\n 后端操作 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n 解析和返回 | 取出键值对，把键值对作为条件用预设的的方式去查询数据库，最后封装JSON并返回给前端 | 把Parser#parse方法的返回值返回给前端就行\n 返回JSON结构的设定方式 | 由后端设定，前端不能修改 | 由前端设定，后端不能修改\n \n <br />\n \n### <h3 id=\"2.4\">2.4 前端解析<h3/>\n 前端解析 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n 查看方式 | 查文档或问后端，或等请求成功后看日志 | 看请求就行，所求即所得，不用查、不用问、不用等。也可以等请求成功后看日志\n 解析方法 | 用JSON解析器来解析JSONObject | 可以用JSONResponse解析JSONObject，或使用传统方式\n \n <br />\n \n### <h3 id=\"2.5\">2.5 前端对应不同需求的请求<h3/>\n 前端的请求 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n User | base_url/get/user?id=38710 | [base_url/get/<br >{<br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"User\":{\"id\":38710}})\n Moment和对应的User | 分两次请求<br />Moment: <br /> base_url/get/moment?userId=38710<br /><br />User: <br /> base_url/get/user?id=38710 | [base_url/get/<br >{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710<br > &nbsp;&nbsp; }, <br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"Moment\":{\"userId\":38710},\"User\":{\"id\":38710}})\n User列表 | base_url/get/user/list?<br />page=0&count=3&sex=0 | [base_url/get/<br >{<br > &nbsp;&nbsp; \"User[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0,<br > &nbsp;&nbsp;&nbsp;&nbsp;  \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"sex\":0<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"User[]\":{\"page\":0,\"count\":3,\"User\":{\"sex\":0}}})\n Moment列表，<br />每个Moment包括<br />1.发布者User<br />2.前3条Comment | Moment里必须有<br />1.User对象<br >2.Comment数组<br /><br /> base_url/get/moment/list?<br />page=0&count=3&commentCount=3 | [base_url/get/<br >{<br > &nbsp;&nbsp; \"[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{}, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"count\":3,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"[]/Moment/id\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"[]\":{\"page\":0,\"count\":3,\"Moment\":{},\"User\":{\"id@\":\"%252FMoment%252FuserId\"},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\n User发布的Moment列表，<br /> 每个Moment包括<br /> 1.发布者User<br /> 2.前3条Comment | 1.Moment里必须有User对象和Comment数组<br > 2.字段名必须查接口文档，例如评论数量字段名可能是<br /> commentCount,comment_count或者简写cmt_count等各种奇葩写法... <br /><br /> base_url/get/moment/list?<br />page=0&count=3<br />&commentCount=3&userId=38710 | 有以下几种方式:<br /><br /> ① 把以上请求里的<br >\"Moment\":{}, \"User\":{\"id@\":\"/Moment/userId\"}<br >改为<br >[\"Moment\":{\"userId\":38710}, \"User\":{\"id\":38710}](http://apijson.cn:8080/get/{\"[]\":{\"page\":0,\"count\":3,\"Moment\":{\"userId\":38710},\"User\":{\"id\":38710},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}}) <br /><br /> ② 或把User放在上面的最外层省去重复的User<br />[base_url/get/<br >{<br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710<br > &nbsp;&nbsp;&nbsp;&nbsp; }, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"count\":3,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"[]/Moment/id\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"User\":{\"id\":38710},\"[]\":{\"page\":0,\"count\":3,\"Moment\":{\"userId\":38710},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})<br /><br /> ③ 如果User之前已经获取到了，还可以不传User来节省请求和返回数据的流量并提升速度<br />[base_url/get/<br >{<br > &nbsp;&nbsp; \"[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"count\":3,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"[]/Moment/id\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"[]\":{\"page\":0,\"count\":3,\"Moment\":{\"userId\":38710},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\n \n <br />\n \n### <h3 id=\"2.6\">2.6 后端对应不同请求的返回结果<h3/>\n 后端的返回结果 | 传统方式 | APIJSON\n-------- | ------------ | ------------\n User | {<br > &nbsp;&nbsp; \"data\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} | {<br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\n Moment和对应的User | 分别返回两次请求的结果，获取到Moment后取出userId作为User的id条件去查询User <br /><br /> Moment: <br > {<br > &nbsp;&nbsp; \"data\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} <br /><br /> User: <br > {<br > &nbsp;&nbsp; \"data\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} | 一次性返回，没有传统方式导致的 长时间等待结果、两次结果间关联、线程多次切换 等问题 <br /><br /> {<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\n User列表 | {<br > &nbsp;&nbsp; \"data\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":82001,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} | {<br > &nbsp;&nbsp; \"User[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":82001,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\n Moment列表，每个Moment包括发布者User和前3条Comment | Moment里必须有<br />1.User对象<br />2.Comment数组 <br /><br /> {<br > &nbsp;&nbsp; \"data\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":301,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} | 1.高灵活，可任意组合<br />2.低耦合，逻辑很清晰<br /><br />{<br > &nbsp;&nbsp; \"[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":301,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\n User发布的Moment列表，每个Moment包括发布者User和前3条Comment | 1.大量重复User，浪费流量和服务器性能<br />2.优化很繁琐，需要后端扩展接口、写好文档，前端/前端再配合优化<br /><br />{<br > &nbsp;&nbsp; \"data\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":470,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":511,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":595,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} | 以上不同请求方式的结果:<br /><br /> ① 常规请求 <br > {<br > &nbsp;&nbsp; \"[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br /><br /> ② 省去重复的User <br > {<br > &nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"name\":\"Tommy\",<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br /><br /> ③ 不查询已获取到的User <br > {<br > &nbsp;&nbsp; \"[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp; {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"xxx\",<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":[<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\n\n\n1.base_url指基地址，一般是顶级域名，其它分支url都是在base_url后扩展。如base_url:http://apijson.cn:8080/ ，对应的GET分支url:http://apijson.cn:8080/get/ 。下同。<br >\n2.请求中的key或value任意一个为null值时，这个 key:value键值对 被视为无效。下同。<br >\n3.请求中的 / 需要转义。JSONRequest.java已经用URLEncoder.encode转义，不需要再写；但如果是浏览器或Postman等直接输入url/request，需要把request中的所有 / 都改成 %252F 。下同。<br >\n4.code，指返回结果中的状态码，200表示成功，其它都是错误码，值全部都是HTTP标准状态码。下同。<br >\n5.msg，指返回结果中的状态信息，对成功结果或错误原因的详细说明。下同。<br >\n6.code和msg总是在返回结果的同一层级成对出现。对所有请求的返回结果都会在最外层有一对总结式code和msg。下同。<br >\n7.id等字段对应的值仅供说明，不一定是数据库里存在的，请求里用的是真实存在的值。下同。\n\n<br />\n<br />\n\n## <h2 id=\"3\">3.设计规范<h2/>\n\n### <h3 id=\"3.1\">3.1 操作方法<h3/>\n\n  方法及说明 | URL | Request | Response\n------------ | ------------ | ------------ | ------------\nGET: <br > 普通获取数据，<br > 可用浏览器调试 | base_url/get/ | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; … <br > &nbsp;&nbsp; }<br >} <br > {…}内为限制条件<br ><br > 例如获取一个 id = 235 的 Moment：<br > [{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235<br > &nbsp;&nbsp; }<br >}](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fget&type=JSON&json={\"Moment\"%3A{\"id\"%3A235}}) <br > 后端校验通过后自动解析为 SQL 并执行：<br >`SELECT * FROM Moment WHERE id=235 LIMIT 1` | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; ...<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br >例如<br >{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br > }\nHEAD: <br > 普通获取数量，<br > 可用浏览器调试 | base_url/head/ | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp; }<br > } <br > {…}内为限制条件 <br ><br > 例如获取一个 id = 38710 的 User 所发布的 Moment 总数：<br > [{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"userId\":38710<br > &nbsp;&nbsp; }<br >}](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fhead&type=JSON&json={\"Moment\"%3A{\"userId\"%3A38710}}) <br > 后端校验通过后自动解析为 SQL 并执行：<br >`SELECT count(*) FROM Moment WHERE userId=38710 LIMIT 1`  | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":10<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} <br > 例如<br >{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":10<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;  \"msg\":\"success\"<br >}\nGETS: <br > 安全/私密获取数据，<br > 用于获取钱包等<br >对安全性要求高的数据 | base_url/gets/ | 最外层加一个 \"tag\":tag，例如 [\"tag\":\"Privacy\"](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={\"tag\"%3A\"Privacy\",\"Privacy\"%3A{\"id\"%3A82001}})，其它同GET | 同GET\nHEADS: <br > 安全/私密获取数量，<br > 用于获取银行卡数量等<br >对安全性要求高的数据总数 | base_url/heads/ | 最外层加一个 \"tag\":tag，例如 [\"tag\":\"Verify\"](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fheads&type=JSON&json={\"tag\"%3A\"Verify\",\"Verify\"%3A{\"phone\"%3A13000082001}})，其它同HEAD | 同HEAD\nPOST: <br > 新增数据 | base_url/post/ | 单个： <br > {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":tag<br >} <br > {…}中id由后端生成，不能传 <br ><br >例如当前登录用户 38710 发布一个新 Comment：<br >[{<br > &nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"momentId\":12,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\" <br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":\"Comment\"<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fpost&type=JSON&json={\"Comment\":{\"momentId\":12,\"content\":\"APIJSON,let%20interfaces%20and%20documents%20go%20to%20hell%20!\"},\"tag\":\"Comment\"}) <br > 后端校验通过后自动解析为 SQL 并执行：<br >`INSERT INTO Comment(userId,momentId,content) VALUES(38710,12,'APIJSON,let interfaces and documents go to hell !')` <br >  <br > 批量： <br > {<br > &nbsp;&nbsp; TableName\\[]:\\[{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp;&nbsp;&nbsp; }, {<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp; ],<br > &nbsp;&nbsp; \"tag\":tag<br >} <br > {…}中id由后端生成，不能传 <br ><br >例如当前登录用户 82001 发布 2 个 Comment：<br >[{<br > &nbsp;&nbsp; \"Comment[]\":[{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"momentId\":12,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br > &nbsp;&nbsp;&nbsp;&nbsp; }, {<br > &nbsp;&nbsp;&nbsp;&nbsp; \"momentId\":15,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON is a JSON transmision protocol.\"<br > &nbsp;&nbsp; }],<br > &nbsp;&nbsp; \"tag\":\"Comment:[]\"<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fpost&type=JSON&json={\"Comment[]\":[{\"momentId\":12,\"content\":\"APIJSON,let%20interfaces%20and%20documents%20go%20to%20hell%20!\"},{\"momentId\":15,\"content\":\"APIJSON%20is%20a%20JSON%20transmision%20protocol.\"}],\"tag\":\"Comment:[]\"})<br >  后端校验通过后自动解析为 SQL 并执行：<br >`INSERT INTO Comment(userId,momentId,content) VALUES(82001,12,'APIJSON,let interfaces and documents go to hell !');`<br ><br >`INSERT INTO Comment(userId,momentId,content) VALUES(82001,15,'APIJSON is a JSON transmision protocol.');`   | 单个： <br > {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":38710<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br >例如<br >{<br > &nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":120<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >} <br > <br > 批量： <br > {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":5,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id[]\":[1, 2, 3, 4, 5]<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br >例如<br >{<br > &nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":2,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id[]\":\\[1, 2]<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}\nPUT: <br > 修改数据，<br > 只修改所传的字段 | base_url/put/ | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":id,<br > &nbsp;&nbsp;&nbsp;&nbsp; …<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":tag<br >} <br > {…} 中 id 或 id{} 至少传一个 <br ><br >例如当前登录用户 82001 修改 id = 235 的 Moment 的 content：<br >[{<br > &nbsp;&nbsp; \"Moment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":235,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"APIJSON,let interfaces and documents go to hell !\"<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":\"Moment\"<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fput&type=JSON&json={\"Moment\":{\"id\":235,\"content\":\"APIJSON,let%20interfaces%20and%20documents%20go%20to%20hell%20!\"},\"tag\":\"Moment\"}) <br > 后端校验通过后自动解析为 SQL 并执行：<br >`UPDATE Moment SET content='APIJSON,let interfaces and documents go to hell !' WHERE id=235 AND userId=82001 LIMIT 1` <br ><br > 批量除了 id{}:\\[] 也可类似批量 POST，只是每个 {...} 里面都必须有 id。<br >\"tag\":\"Comment[]\" 对应对象 \"Comment\":{\"id{}\":[1,2,3]}，表示指定记录全部统一设置；<br >\"tag\":\"Comment:[]\" 多了冒号，对应数组 \"Comment[]\":[{\"id\":1},{\"id\":2},{\"id\":3}]，表示每项单独设置 | 同POST\nDELETE: <br > 删除数据 | base_url/delete/ | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id\":id<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":tag<br >} <br > {…} 中 id 或 id{} 至少传一个，一般只传 id 或 id{} <br ><br >例如当前登录用户 82001 批量删除 id = 100,110,120 的 Comment：<br >[{<br > &nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id{}\":[100,110,120]<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"tag\":\"Comment[]\"<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fdelete&type=JSON&json={\"Comment\":{\"id{}\":[100,110,120]},\"tag\":\"Comment[]\"}) <br > 后端校验通过后自动解析为 SQL 并执行：<br >`DELETE FROM Comment WHERE id IN(100,110,120) AND userId=82001 LIMIT 3` | {<br > &nbsp;&nbsp; TableName:{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp;&nbsp;&nbsp; \"msg\":\"success\",<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id[]\":[100,110,120]<br >&nbsp;&nbsp; &nbsp;&nbsp; \"count\":3<br > &nbsp;&nbsp; },<br > &nbsp;&nbsp; \"code\":200,<br > &nbsp;&nbsp; \"msg\":\"success\"<br >}<br >例如<br >{<br >&nbsp;&nbsp; \"Comment\":{<br >&nbsp;&nbsp; &nbsp;&nbsp; \"code\":200,<br >&nbsp;&nbsp; &nbsp;&nbsp; \"msg\":\"success\",<br >&nbsp;&nbsp; &nbsp;&nbsp; \"id[]\":[100,110,120],<br >&nbsp;&nbsp; &nbsp;&nbsp; \"count\":3<br >&nbsp;&nbsp; },<br >&nbsp;&nbsp; \"code\":200,<br >&nbsp;&nbsp; \"msg\":\"success\"<br >}\n以上接口的简单形式: <br > base_url/{method}/{tag} |  GET: 普通获取数据 <br > base_url/get/{tag} <br ><br > HEAD: 普通获取数量 <br > base_url/head/{tag} <br ><br > GETS: 安全/私密获取数据 <br >  base_url/gets/{tag} <br ><br > HEADS: 安全/私密获取数量 <br > base_url/heads/{tag} <br ><br > POST: 新增数据 <br >  base_url/post/{tag} <br ><br > PUT: 修改数据  base_url/put/{tag} <br ><br > DELETE: 删除数据 <br > base_url/delete/{tag} | 例如安全/私密获取一个 id = 82001 的 Privacy：<br > [base_url/gets/Privacy/ <br > {\"id\":82001}](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets%2FPrivacy&type=JSON&json={\"id\"%3A82001}) <br > 相当于 <br > [base_url/gets/ <br >{\"tag\":\"Privacy\", \"Privacy\":{\"id\":82001}}](http://apijson.cn/api/?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={\"tag\"%3A\"Privacy\",\"Privacy\"%3A{\"id\"%3A82001}}) <br > <br > 例如批量修改 id = 114, 124 的 Comment 的 content：<br >[base_url/put/Comemnt[]/ <br > {<br > &nbsp;&nbsp; \"id{}\":[114,124],<br > &nbsp;&nbsp; \"content\":\"test multi put\"<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fput%2FComment[]&type=JSON&json={\"id{}\"%3A[114,124],\"content\"%3A\"test%20multi%20put\"}) <br > 相当于 <br > [base_url/put/ <br > {<br > &nbsp;&nbsp; \"tag\":\"Comment[]\", <br > &nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"id{}\":[114,124],<br > &nbsp;&nbsp;&nbsp;&nbsp; \"content\":\"test multi put\"<br > &nbsp;&nbsp; }<br >}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fput&type=JSON&json={\"tag\"%3A\"Comment[]\",\"Comment\"%3A{\"id{}\"%3A[114,124],\"content\"%3A\"test%20multi%20put\"}})  | 同以上对应的方法\n\n1.TableName指要查询的数据库表Table的名称字符串。第一个字符为大写字母，剩下的字符要符合英语字母、数字、下划线中的任何一种。对应的值的类型为JSONObject，结构是 {...}，里面放的是Table的字段(列名)。下同。<br >\n2.\"tag\":tag 后面的tag是非GET、HEAD请求中匹配请求的JSON结构的标识，一般是要查询的Table的名称，由后端Request表中指定。下同。<br >\n3.GET、HEAD请求是开放请求，可任意组合任意嵌套。其它请求为受限制的安全/私密请求，对应的 方法（method）, 标识（tag）, 版本（version）, 结构（structure） 都必须和 后端Request表中所指定的 一一对应，否则请求将不被通过。version 不传、为 null 或 <=0 都会使用最高版本，传了其它有效值则会使用最接近它的最低版本。下同。<br >\n4.GETS与GET、HEADS与HEAD分别为同一类型的操作方法，请求稍有不同但返回结果相同。下同。<br >\n5.在HTTP通信中，自动化接口(get,gets,head,heads,post,put,delete) 全用HTTP POST请求。下同。<br >\n6.所有JSONObject都视为容器(或者文件夹)，结构为 {...} ，里面可以放普通对象或子容器。下同。<br >\n7.每个对象都有一个唯一的路径(或者叫地址)，假设对象名为refKey，则用 key0/key1/.../refKey 表示。下同。\n\n<br >\n\n### <h3 id=\"3.2\">3.2 功能符<h3/>\n \n 功能 | 键值对格式 | 使用示例\n------------ | ------------ | ------------\n 查询数组 | \"key[]\":{}，后面是 JSONObject，key 可省略。当 key 和里面的 Table 名相同时，Table 会被提取出来，即 {Table:{Content}} 会被转化为 {Content} | [{\"User[]\":{\"User\":{}}}](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{}}})，查询一个 User 数组。这里 key 和 Table 名都是 User，User 会被提取出来，即 {\"User\":{\"id\", ...}} 会被转化为 {\"id\", ...}，如果要进一步提取 User 中的 id，可以把 User[] 改为 User-id[]，其中 - 用来分隔路径中涉及的 key\n 匹配选项范围 | \"key{}\":[]，后面是 JSONArray，作为 key 可取的值的选项 | [\"id{}\":[38710,82001,70793]](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"id{}\":[38710,82001,70793]}}})，对应 SQL 是`id IN(38710,82001,70793)`，查询 id 符合 38710,82001,70793 中任意一个的一个 User 数组\n 匹配条件范围 | \"key{}\":\"条件0,条件1...\"，条件为 SQL 表达式字符串，可进行数字比较运算等 | [\"id{}\":\"<=80000,\\>90000\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"id{}\":\"<=80000,\\>90000\"}}})，对应 SQL 是`id<=80000 OR id>90000`，查询 id 符合 id\\<=80000 \\| id>90000 的一个 User 数组\n 包含选项范围 | \"key<\\>\":value  =>  \"key<\\>\":[value]，key 对应值的类型必须为 JSONArray，value 值类型只能为 Boolean, Number, String 中的一种 |  [\"contactIdList<\\>\":38710](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"contactIdList<\\>\":38710}}})，对应SQL是`json_contains(contactIdList,38710)`，查询 contactIdList 包含 38710 的一个 User 数组\n 判断是否存在 | \"key}{@\":{<br /> &nbsp;&nbsp; \"from\":\"Table\",<br /> &nbsp;&nbsp; \"Table\":{ ... }<br />}<br />其中：<br />}{ 表示 EXISTS；<br /> key 用来标识是哪个判断；<br /> @ 后面是 子查询 对象，具体见下方 子查询 的说明。 | [\"id}{@\":{<br /> &nbsp;&nbsp; \"from\":\"Comment\",<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;  &nbsp;&nbsp; \"momentId\":15 <br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"User\":{\"id}{@\":{\"from\":\"Comment\",\"Comment\":{\"momentId\":15}}}})<br /> WHERE EXISTS(SELECT * FROM Comment WHERE momentId=15)\n 远程调用函数 | \"key()\":\"函数表达式\"，函数表达式为 function(key0,key1...)，会调用后端对应的函数 function(JSONObject request, String key0, String key1...)，实现 参数校验、数值计算、数据同步、消息推送、字段拼接、结构变换 等特定的业务逻辑处理，<br>可使用 - 和 + 表示优先级，解析 key-() > 解析当前对象 > 解析 key() > 解析子对象 > 解析 key+()  | [\"isPraised()\":\"isContain(praiseUserIdList,userId)\"](http://apijson.cn:8080/get/{\"Moment\":{\"id\":301,\"isPraised()\":\"isContain(praiseUserIdList,userId)\"}})，会调用远程函数 [boolean isContain(JSONObject request, String array, String value)](https://github.com/APIJSON/apijson-framework/blob/master/src/main/java/apijson/framework/APIJSONFunctionParser.java#L361-L374) ，然后变为 \"isPraised\":true 这种（假设点赞用户 id 列表包含了 userId，即这个 User 点了赞）\n 存储过程 | \"@key()\":\"SQL函数表达式\"，函数表达式为 <br />  function(key0,key1...) <br /> 会调用后端数据库对应的存储过程 SQL 函数 <br /> function(String key0, String key1...) <br /> 除了参数会提前赋值，其它和 远程函数 一致 | [\"@limit\":10, <br /> \"@offset\":0, <br /> \"@procedure()\":\"getCommentByUserId(id,@limit,@offset)\"](http://apijson.cn:8080/get/{\"User\":{\"@limit\":10,\"@offset\":0,\"@procedure()\":\"getCommentByUserId(id,@limit,@offset)\"}}) <br /> 会转为 <br /> `getCommentByUserId(38710,10,0)` <br /> 来调用存储过程 SQL 函数 <br /> `getCommentByUserId(IN id bigint, IN limit int, IN offset int)` <br /> 然后变为 <br />\"procedure\":{<br /> &nbsp;&nbsp; \"count\":-1, <br /> &nbsp;&nbsp; \"update\":false, <br /> &nbsp;&nbsp; \"list\":[] <br /> } <br /> 其中 count 是指写操作影响记录行数，-1 表示不是写操作；update 是指是否为写操作（增删改）；list 为返回结果集\n 引用赋值 | \"key@\":\"key0/key1/.../refKey\"，引用路径为用 / 分隔的字符串。以 / 开头的是缺省引用路径，从声明 key 所处容器的父容器路径开始；其它是完整引用路径，从最外层开始。<br /> 被引用的 refKey 必须在声明 key 的上面。如果对 refKey 的容器指定了返回字段，则被引用的 refKey 必须写在 @column 对应的值内，例如 \"@column\":\"refKey,key1,...\" | [\"Moment\":{<br /> &nbsp;&nbsp; \"userId\":38710<br />},<br />\"User\":{<br /> &nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br />}](http://apijson.cn:8080/get/{\"Moment\":{\"userId\":38710},\"User\":{\"id@\":\"%252FMoment%252FuserId\"}})<br /> User 内的 id 引用了与 User 同级的 Moment 内的 userId，<br />即 User.id = Moment.userId，请求完成后<br > \"id@\":\"/Moment/userId\" 会变成 \"id\":38710\n 子查询 | \"key@\":{<br /> &nbsp;&nbsp; \"range\":\"ALL\", <br /> &nbsp;&nbsp; \"from\":\"Table\", // 可省略，默认为首个表对象 key 名<br /> &nbsp;&nbsp; \"Table\":{ ... }<br />}<br />其中：<br />range 可为 ALL,ANY；<br />from 为目标表 Table 的名称；<br />@ 后面的对象类似数组对象，可使用 count 和 join 等功能。 | [\"id@\":{<br /> &nbsp;&nbsp; \"from\":\"Comment\", // 可省略<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;  &nbsp;&nbsp; \"@column\":\"min(userId)\" <br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"User\":{\"id@\":{\"from\":\"Comment\",\"Comment\":{\"@column\":\"min(userId)\"}}}})<br /> WHERE id=(SELECT min(userId) FROM Comment)\n 模糊搜索 | `\"key$\":\"SQL搜索表达式\"` => `\"key$\":[\"SQL搜索表达式\"]`，任意 SQL 搜索表达式字符串，如 %key%(包含 key), key%(以 key 开始), %k%e%y%(包含字母 k,e,y) 等，% 表示任意字符 | [\"name$\":\"%m%\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"name$\":\"%2525m%2525\"}}})，对应 SQL 是`name LIKE '%m%'`，查询 name 包含 \"m\" 的一个 User 数组\n 正则匹配 | \"key~\":\"正则表达式\" => \"key~\":[\"正则表达式\"]，任意正则表达式字符串，如 ^[0-9]+$ ，*~ 忽略大小写，可用于高级搜索 | [\"name~\":\"^[0-9]+$\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"name~\":\"^[0-9]%252B$\"}}})，对应 SQL 是`name REGEXP '^[0-9]+$'`，查询 name 中字符全为数字的一个 User 数组\n 连续范围 | \"key%\":\"start,end\" => \"key%\":[\"start,end\"]，其中 start 和 end 都只能为 Number, String 中的一种，如 \"2017-01-01,2019-01-01\" ，[\"1,90000\", \"82001,100000\"] ，可用于连续范围内的筛选 | [\"date%\":\"2017-10-01,2018-10-01\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":3,\"User\":{\"date%2525\":\"2017-10-01,2018-10-01\"}}})，对应SQL是`date BETWEEN '2017-10-01' AND '2018-10-01'`，查询在2017-10-01和2018-10-01期间注册的用户的一个User数组\n 新建别名 | \"name:alias\"，name 映射为 alias，用 alias 替代 name。可用于 column,Table,SQL 函数 等。只用于 GET 类型、HEAD 类型的请求 | [\"@column\":\"toId:parentId\"](http://apijson.cn:8080/get/{\"Comment\":{\"@column\":\"id,toId:parentId\",\"id\":51}})，对应 SQL 是`toId AS parentId`，将查询的字段 toId 变为 parentId 返回\n 增加 或 扩展 | \"key+\":Object，Object的类型由key指定，且类型为 Number,String,JSONArray 中的一种。如 82001,\"apijson\",[\"url0\",\"url1\"] 等。只用于 PUT 请求 | \"praiseUserIdList+\":[82001]，对应 SQL 是`json_insert(praiseUserIdList,82001)`，添加一个点赞用户 id，即这个用户点了赞\n 减少 或 去除 | \"key-\":Object，与\"key+\"相反 | \"balance-\":100.00，对应SQL是`balance = balance - 100.00`，余额减少100.00，即花费了100元\n 比较运算 | >, <, >=, <= 比较运算符，用于 <br />① 提供 \"id{}\":\"<=90000\" 这种条件范围的简化写法 <br /><br />② 实现子查询相关比较运算<br /><br />不支持 \"key=\":Object 和 \"key!=\":Object 这两种写法，直接用更简单的 \"key\":Object 和 \"key!\":Object 替代。 |  ① [\"id<=\":90000](http://apijson.cn:8080/get/{\"[]\":{\"User\":{\"id<=\":90000}}})，对应 SQL 是`id<=90000`，查询符合id<=90000的一个User数组<br /><br /> ② [\"id>@\":{<br /> &nbsp;&nbsp; \"from\":\"Comment\",<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;  &nbsp;&nbsp; \"@column\":\"min(userId)\" <br /> &nbsp;&nbsp; }<br />}](http://apijson.cn:8080/get/{\"User\":{\"id>@\":{\"from\":\"Comment\",\"Comment\":{\"@column\":\"min(userId)\"}}}})<br /> WHERE id>(SELECT min(userId) FROM Comment)\n 逻辑运算 | &, \\|, ! 逻辑运算符，对应数据库 SQL 中的 AND, OR, NOT。 <br />横或纵与：同一键值对的值内条件默认 \\| 或连接，可以在 key 后加逻辑运算符来具体指定；不同键值对的条件默认 & 与连接，可以用下面说明的对象关键词 @combine 来具体指定。 <br /><br />① & 可用于 \"key&{}\":\"条件\"等<br /><br />② \\| 可用于 \"key\\|{}\":\"条件\", \"key\\|{}\":[]等，一般可省略<br /><br />③ ! 可单独使用，如 \"key!\":Object，也可像 &,\\| 一样配合其他功能符使用 <br /> \"key!\":null 无效，null 值会导致整个键值对被忽略解析，可以用 \"key{}\":\"!=null\" 替代，<br />\"key\":null 同理，用 \"key{}\":\"=null\" 替代。 |  ① [\"id&{}\":\">80000,<=90000\"](http://apijson.cn:8080/head/{\"User\":{\"id&{}\":\">80000,<=90000\"}})，对应SQL是`id>80000 AND id<=90000`，即id满足id>80000 & id<=90000<br /><br /> ② [\"id\\|{}\":\">90000,<=80000\"](http://apijson.cn:8080/head/{\"User\":{\"id\\|{}\":\">90000,<=80000\"}})，同 \"id{}\":\">90000,<=80000\"，对应 SQL 是`id>90000 OR id<=80000`，即 id 满足 id>90000 \\| id<=80000<br /><br /> ③ [\"id!{}\":[82001,38710]](http://apijson.cn:8080/head/{\"User\":{\"id!{}\":[82001,38710]}})，对应 SQL 是`id NOT IN(82001,38710)`，即 id 满足 ! (id=82001 \\| id=38710)，可过滤黑名单的消息\n 数组关键词，可自定义 | \"key\":Object，key为 \"[]\":{} 中 {} 内的关键词，Object 的类型由 key 指定<br /><br />① \"count\":5，查询数量，0 表示最大值，默认值为 10，默认最大值为 100 <br /><br />② \"page\":1，查询页码，从 0 开始，默认值为 0，默认最大值为 100，一般和 count 一起用<br /><br />③ \"query\":2，查询内容<br />0-对象，1-总数和分页详情，2-数据、总数和分页详情<br />总数关键词为 total，分页详情关键词为 info，<br /> 它们都和 query 同级，通过引用赋值得到自定义 key:value 键值对，不传则返回默认键值对，例如  <br />\"total@\":\"/[]/total\", \"info@\":\"/[]/info\" <br />这里query及total仅为GET类型的请求提供方便，<br /> 一般可直接用HEAD类型的请求获取总数<br /><br />④ \"join\":\"&/Table0,\\</Table1/key1@\" 或 <br />\"join\":{<br /> &nbsp;&nbsp; \"&/Table0\":{},  // 支持 ON 多个字段关联,<br /> &nbsp;&nbsp; \"\\</Table1/key1@\":{  // ON 只允许指定的 key1 关联<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"key0\":value0, // 其它ON条件 <br /> &nbsp;&nbsp;&nbsp;&nbsp; \"key2\":value2,<br /> &nbsp;&nbsp;&nbsp;&nbsp; ... <br /> &nbsp;&nbsp;&nbsp;&nbsp; \"@combine\":\"...\", // 其它ON条件的组合方式 <br /> &nbsp;&nbsp;&nbsp;&nbsp; \"@column\":\"...\", // 外层 SELECT <br /> &nbsp;&nbsp;&nbsp;&nbsp; \"@group\":\"...\", // 外层 GROUP BY <br /> &nbsp;&nbsp;&nbsp;&nbsp; \"@having\":\"...\" // 外层 HAVING <br /> &nbsp;&nbsp; }<br />}<br />多表连接方式：<br />  \"@\" - APP JOIN <br /> \"\\<\" - LEFT JOIN <br /> \">\" - RIGHT JOIN <br /> \"&\" - INNER JOIN <br /> \"\\|\" - FULL JOIN <br />  \"!\" - OUTER JOIN <br />  \"*\" - CROSS JOIN <br />  \"^\" - SIDE JOIN <br />  \"(\" - ANTI JOIN <br />  \")\" - FOREIGN JOIN <br />其中 @ APP JOIN 为应用层连表，会从已查出的主表里取得所有副表 key@ 关联的主表内的 refKey 作为一个数组 refKeys: [value0, value1...]，然后把原来副表 count 次查询 key=$refKey 的 SQL 用 key IN($refKeys) 的方式合并为一条 SQL 来优化性能；<br /> 其它 JOIN 都是 SQL JOIN，具体功能和 MySQL,PostgreSQL 等数据库的 JOIN 一一对应 <br />`\"join\":\"</ViceTable/key@\",`<br />`\"MainTable\":{},`<br />`\"ViceTable\":{\"key@\":\"/MainTable/refKey\"}`<br />会对应生成 <br />`MainTable LEFT JOIN ViceTable` <br />`ON ViceTable.key=MainTable.refKey` AND 其它ON条件 <br /> 除了 = 等价关联，也支持 ! 不等关联、\\> \\< \\>= \\<= 等比较关联和 $ ~ {} <> 等其它复杂关联方式 <br /><br />⑤ \"otherKey\":Object，自定义关键词，名称和以上系统关键词不一样，且原样返回上传的值  | ① 查询User数组，最多5个：<br />[\"count\":5](http://apijson.cn:8080/get/{\"[]\":{\"count\":5,\"User\":{}}})<br />对应 SQL 是`LIMIT 5` <br /><br /> ② 查询第3页的User数组，每页5个：<br />[\"count\":5,<br />\"page\":3](http://apijson.cn:8080/get/{\"[]\":{\"count\":5,\"page\":3,\"User\":{}}})<br />对应 SQL 是`LIMIT 5 OFFSET 15` <br /><br /> ③ 查询User数组和对应的User总数：<br />[\"[]\":{<br /> &nbsp;&nbsp; \"query\":2,<br /> &nbsp;&nbsp; \"User\":{}<br />},<br />\"total@\":\"/[]/total\", // 可省略<br />\"info@\":\"/[]/info\" // 可省略](http://apijson.cn:8080/get/{\"[]\":{\"query\":2,\"count\":5,\"User\":{}},\"total@\":\"%252F[]%252Ftotal\",\"info@\":\"%252F[]%252Finfo\"})<br /> 返回的数据中，总数及分页详情结构为： <br />  \"total\":139, // 总数 <br /> \"info\":{ // 分页详情 <br /> &nbsp;&nbsp; \"total\":139, // 总数 <br /> &nbsp;&nbsp; \"count\":5, // 每页数量 <br /> &nbsp;&nbsp; \"page\":0, // 当前页码 <br /> &nbsp;&nbsp; \"max\":27, // 最大页码 <br /> &nbsp;&nbsp; \"more\":true, // 是否还有更多 <br /> &nbsp;&nbsp; \"first\":true, // 是否为首页 <br /> &nbsp;&nbsp; \"last\":false // 是否为尾页 <br />} <br /><br /> ④ Moment INNER JOIN User LEFT JOIN Comment：<br />[\"[]\":{<br /> &nbsp;&nbsp; \"join\":\"&/User/id@,\\</Comment\",<br /> &nbsp;&nbsp; \"Moment\":{<br />&nbsp;&nbsp;&nbsp;&nbsp; \"@group\":\"id\" // 主副表不是一对一，要去除重复数据<br />&nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"User\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"name~\":\"t\",<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br /> &nbsp;&nbsp; },<br /> &nbsp;&nbsp; \"Comment\":{<br /> &nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"/Moment/id\"<br /> &nbsp;&nbsp; }<br />}](http://apijson.cn/api/?type=JSON&url=http://apijson.cn:8080/get&json=%7B%22%5B%5D%22:%7B%22count%22:5,%22join%22:%22%26%2FUser%2Fid@,%3C%2FComment%22,%22Moment%22:%7B%22@column%22:%22id,userId,content%22,%22@group%22:%22id%22%7D,%22User%22:%7B%22name~%22:%22t%22,%22id@%22:%22%2FMoment%2FuserId%22,%22@column%22:%22id,name,head%22%7D,%22Comment%22:%7B%22momentId@%22:%22%2FMoment%2Fid%22,%22@column%22:%22id,momentId,content%22%7D%7D%7D)<br /><br /> ⑤ 每一层都加当前用户名：<br />[\"User\":{},<br />\"[]\":{<br /> &nbsp;&nbsp; \"name@\":\"User/name\", // 自定义关键词<br /> &nbsp;&nbsp; \"Moment\":{}<br />}](http://apijson.cn:8080/get/{\"User\":{},\"[]\":{\"name@\":\"User%252Fname\",\"Moment\":{}}})\n 对象关键词，可自定义 | \"@key\":Object，@key 为 Table:{} 中 {} 内的关键词，Object 的类型由 @key 指定<br /><br />① \"@combine\":\"key0 \\| (key1 & (key2 \\| !key3))...\"，条件组合方式，最终按 <br /> (其它key条件 AND 连接) AND (key0条件 OR (key1条件 AND (key2条件 OR (NOT key3条件)))) <br />这种方式连接，其中 \"其它key\" 是指与 @combine 在同一对象，且未被它声明的条件 key，默认都是 & 连接。注意不要缺少或多余任何一个空格。 <br /><br />② \"@column\":\"column;function(arg)...\"，返回字段<br /><br />③ \"@order\":\"column0+,column1-...\"，排序方式<br /><br />④ \"@group\":\"column0,column1...\"，分组方式。如果 @column 里声明了 Table 的 id，则 id 也必须在 @group 中声明；其它情况下必须满足至少一个条件:<br />1.分组的 key 在 @column 里声明<br />2.Table 主键在 @group 中声明 <br /><br />⑤ \"@having\":\"function0(...)?value0;function1(...)?value1;function2(...)?value2...\" // OR 连接，或 <br />\"@having&\":\"function0(...)?value0;function1(...)?value1;function2(...)?value2...\" // AND 连接，或 <br />\"@having\":{<br />&nbsp;&nbsp; \"h0\":\"function0(...)?value0\",<br />&nbsp;&nbsp; \"h1\":function1(...)?value1\",<br />&nbsp;&nbsp; \"h2\":function2(...)?value2...\",<br />&nbsp;&nbsp; \"@combine\":\"h0 & (h1 \\| !h2)\"  // 任意组合，非必传<br />}<br />SQL 函数条件，一般和 @group 一起用，函数一般在 @column 里声明<br /><br />⑥ \"@schema\":\"sys\"，集合空间(数据库名/模式)，非默认的值可通过它来指定，可以在最外层作为全局默认配置<br /><br />⑦ \"@database\":\"POSTGRESQL\"，数据库类型，非默认的值可通过它来指定，可以在最外层作为全局默认配置<br /><br />⑧ \"@datasource\":\"DRUID\"，跨数据源，非默认的值可通过它来指定，可以在最外层作为全局默认配置<br /><br />⑨ \"@json\":\"key0,key1...\"，转为 JSON 格式返回，符合 JSONObject 则转为 {...}，符合 JSONArray 则转为 \\[...] <br /><br />⑩ \"@role\":\"OWNER\"，来访角色，包括<br />UNKNOWN,LOGIN,CONTACT,CIRCLE,OWNER,ADMIN，<br />可以在最外层作为全局默认配置，<br />可自定义其它角色并重写 Verifier.verify 等相关方法来自定义校验 <br /><br />⑪ \"@explain\":true，性能分析，可以在最外层作为全局默认配置 <br /><br />⑫ \"@raw\":\"key0,key1...\"，其中 key0, key1 都对应有键值对<br /> \"key0\":\"SQL片段或SQL片段的别名\", <br /> \"key1\":\"SQL片段或SQL片段的别名\" <br /> 自定义原始SQL片段，可扩展嵌套SQL函数等复杂语句，必须是后端已配置的，只有其它功能符都做不到才考虑，谨慎使用，注意防 SQL 注入<br /><br />⑬ \"@null\":\"key1,key2...\"，空值键值对，自动插入 key1:null, key2:null ... 并作为有效键值对执行，作为条件时对应 SQL 是 `WHERE tag IS NULL`，作为值时对应 SQL 是 `SET tag = NULL`<br /><br />⑭ \"@otherKey\":Object，自定义关键词，名称和以上系统关键词不一样，且原样返回上传的值 | ① 搜索 name 或 tag 任何一个字段包含字符 a 的 User 列表：<br /> [\"name~\":\"a\",<br />\"tag~\":\"a\",<br />\"@combine\":\"name~ \\| tag~\"](http://apijson.cn:8080/get/{\"User[]\":{\"count\":10,\"User\":{\"@column\":\"id,name,tag\",\"name~\":\"a\",\"tag~\":\"a\",\"@combine\":\"name~%20%7C%20tag~\"}}}) <br />对应SQL是`name REGEXP 'a' OR tag REGEXP 'a'` <br /><br /> ② 只查询 id,sex,name 这几列并且请求结果也按照这个顺序：<br />[\"@column\":\"id,sex,name\"](http://apijson.cn:8080/get/{\"User\":{\"@column\":\"id,sex,name\",\"id\":38710}})<br />对应 SQL 是`SELECT id,sex,name` <br /><br /> ③ 查询按 name 降序、id 默认顺序 排序的 User 数组：<br />[\"@order\":\"name-,id\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"User\":{\"@column\":\"name,id\",\"@order\":\"name-,id\"}}})<br />对应 SQL 是`ORDER BY name DESC,id` <br /><br /> ④ 查询按 userId 分组的 Moment 数组：<br />[\"@group\":\"userId,id\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":%7B\"@column\":\"userId,id\",\"@group\":\"userId,id\"}}})<br />对应 SQL 是`GROUP BY userId,id` <br /><br /> ⑤ 查询 按 userId 分组、id 最大值>=100 的 Moment 数组：<br />[\"@column\":\"userId;max(id)\",<br />\"@group\":\"userId\",<br />\"@having\":\"max(id)>=100\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":{\"@column\":\"userId%253Bmax(id)\",\"@group\":\"userId\",\"@having\":\"max(id)>=100\"}}})<br />对应 SQL 是`SELECT userId,max(id) ... GROUP BY userId HAVING max(id)>=100` <br />还可以指定函数返回名：<br />[\"@column\":\"userId;max(id):maxId\",<br />\"@group\":\"userId\",<br />\"@having\":\"(maxId)>=100\"](http://apijson.cn:8080/get/{\"[]\":{\"count\":10,\"Moment\":{\"@column\":\"userId%253Bmax(id):maxId\",\"@group\":\"userId\",\"@having\":\"(maxId)>=100\"}}})<br />对应 SQL 是`SELECT userId,max(id) AS maxId ... GROUP BY userId HAVING (maxId)>=100` <br /><br /> ⑥ 查询 sys 内的 User 表：<br />[\"@schema\":\"sys\"](http://apijson.cn:8080/get/{\"User\":{\"@schema\":\"sys\"}})<br />对应 SQL 是`FROM sys.User` <br /><br /> ⑦ 查询 PostgreSQL 数据库的 User 表：<br />[\"@database\":\"POSTGRESQL\"](http://apijson.cn:8080/get/{\"User\":{\"@database\":\"POSTGRESQL\",\"@explain\":true}})<br /><br /> ⑧ 使用 Druid 连接池查询 User 表：<br />[\"@datasource\":\"DRUID\"](http://apijson.cn:8080/get/{\"User\":{\"@datasource\":\"DRUID\"}})<br /><br /> ⑨ 将 VARCHAR 字符串字段 get 转为 JSONArray 返回：<br />[\"@json\":\"get\"](http://apijson.cn:8080/get/{\"Access\":{\"@json\":\"get\"}})<br /><br /> ⑩ 查询当前用户的动态：<br />[\"@role\":\"OWNER\"](http://apijson.cn:8080/get/{\"[]\":{\"Moment\":{\"@role\":\"OWNER\"}}})<br /><br /> ⑪ 开启性能分析：<br />[\"@explain\":true](http://apijson.cn:8080/get/{\"[]\":{\"Moment\":{\"@explain\":true}}})<br />对应 SQL 是`EXPLAIN` <br /><br /> ⑫ 统计最近一周偶数 userId 的数量<br />[\"@column\":\"date;left(date,10):day;sum(if(userId%2=0,1,0))\",<br />\"@group\":\"day\",<br />\"@having\":\"to_days(now())-to_days(\\`date\\`)<=7\",<br />\"@raw\":\"@column,@having\"](http://apijson.cn:8080/get/{\"[]\":{\"Moment\":{\"@column\":\"date%3bleft(date,10):day%3bsum(if(userId%252=0,1,0))\",\"@group\":\"day\",\"@having\":\"to_days(now())-to_days(\\`date\\`)<=7\",\"@raw\":\"@column,@having\"}}})<br />对应 SQL 是``SELECT date, left(date,10) AS day, sum(if(userId%2=0,1,0)) ... GROUP BY day HAVING to_days(now())-to_days(`date`)<=7`` <br /><br /> ⑬ 把用户的标签设置为空 <br />[\"@null\":\"tag\"](http://apijson.cn/api/?type=JSON&url=http://apijson.cn:8080/put/User&json={%22id%22:82001,%22@null%22:%22tag%22,%22@explain%22:true}) <br /><br /> ⑭  从pictureList 获取第 0 张图片：<br />[\"@position\":0, // 自定义关键词<br />\"firstPicture()\":\"getFromArray(pictureList,@position)\"](http://apijson.cn:8080/get/{\"User\":{\"id\":38710,\"@position\":0,\"firstPicture()\":\"getFromArray(pictureList,@position)\"}})\n 全局关键词 | 为最外层对象 {} 内的关键词。其中 @database，@schema, @datasource, @role, @explain 基本同对象关键词，见上方说明，区别是全局关键词会每个表对象中没有时自动放入，作为默认值。 <br /><br />① \"tag\":\"Table\"，后面的 tag 是非 GET、HEAD 请求中匹配请求的 JSON 结构的标识，一般是要查询的 Table 的名称或该名称对应的数组 Table[] 或 Table:[]，由后端 Request 表中指定。 <br /><br />② \"version\":1，接口版本，version 不传、为 null 或 <=0 都会使用最高版本，传了其它有效值则会使用最接近它的最低版本，由后端 Request 表中指定。<br /><br />③ \"format\":true，格式化返回 Response JSON 的 key，一般是将 TableName 转为 tableName, TableName[] 转为 tableNameList, Table:alias 转为 alias, TableName-key[] 转为 tableNameKeyList 等小驼峰格式。  | ①  查隐私信息：<br />[{\"tag\":\"Privacy\",\"Privacy\":{\"id\":82001}}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={%22tag%22:%22Privacy%22,%22Privacy%22:{%22id%22:82001}})<br /><br /> ② 使用第 1 版接口查隐私信息：<br />[{\"version\":1,\"tag\":\"Privacy\",\"Privacy\":{\"id\":82001}}](http://apijson.cn/api?url=http%3A%2F%2Fapijson.cn%3A8080%2Fgets&type=JSON&json={%22version%22:1,%22tag%22:%22Privacy%22,%22Privacy%22:{%22id%22:82001}}) <br /><br /> ③ 格式化朋友圈接口返回 JSON 中的 key：<br />[{<br > &nbsp;&nbsp; \"format\":true, <br > &nbsp;&nbsp; \"[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp; \"page\":0, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"count\":3, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"Moment\":{}, <br > &nbsp;&nbsp;&nbsp;&nbsp; \"User\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id@\":\"/Moment/userId\"<br > &nbsp;&nbsp;&nbsp;&nbsp; },<br > &nbsp;&nbsp;&nbsp;&nbsp; \"Comment[]\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"count\":3,<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Comment\":{<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"momentId@\":\"[]/Moment/id\"<br > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp;&nbsp;&nbsp; }<br > &nbsp;&nbsp; }<br >}](http://apijson.cn:8080/get/{\"format\":true,\"[]\":{\"page\":0,\"count\":3,\"Moment\":{},\"User\":{\"id@\":\"%252FMoment%252FuserId\"},\"Comment[]\":{\"count\":3,\"Comment\":{\"momentId@\":\"[]%252FMoment%252Fid\"}}}})\n<br />\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5126953125,
          "content": "Tencent is pleased to support the open source community by making APIJSON available.  \n\nCopyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.\n\nAPIJSON is licensed under the Apache License Version 2.0.\nA copy of the Apache License Version 2.0 is included in this file.\n\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed under the Apache License Version 2.0:\n--------------------------------------------------------------------\n1.  fastjson\nCopyright 1999-2019 Alibaba Group Holding Ltd.\n\n\n\nTerms of  Apache License Version 2.0\n---------------------------------------------------\n\t\t\t\tApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   \n"
        },
        {
          "name": "Navigation.md",
          "type": "blob",
          "size": 2.3828125,
          "content": "# APIJSON 导航目录\n## [项目简介](/README.md#--apijson)\n\n### [特点功能](/README.md#%E7%89%B9%E7%82%B9%E5%8A%9F%E8%83%BD)\n#### [对于前端](/README.md#%E7%89%B9%E7%82%B9%E5%8A%9F%E8%83%BD)\n#### [对于后端](/README.md#%E5%AF%B9%E4%BA%8E%E5%90%8E%E7%AB%AF)\n<br />\n\n### [APIJSON 接口展示](/README.md#apijson-%E6%8E%A5%E5%8F%A3%E5%B1%95%E7%A4%BA)\n#### [Postman 展示 APIJSON](/README.md#postman-%E5%B1%95%E7%A4%BA-apijson)\n#### [APIAuto 展示 APIJSON](/README.md#apiauto-%E5%B1%95%E7%A4%BA-apijson)\n<br />\n\n### [APIJSON App 演示](/README.md#apijson-app-%E6%BC%94%E7%A4%BA)\n\n### [APIJSON 分享演讲](/README.md#apijson-%E5%88%86%E4%BA%AB%E6%BC%94%E8%AE%B2)\n\n### [为什么选择 APIJSON？](/README.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-apijson)\n<br />\n\n### [常见问题](/README.md#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n#### [1.如何定制业务逻辑？](/README.md#1%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91)\n#### [2.如何控制权限？](/README.md#2%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90)\n#### [3.如何校验参数？](/README.md#3%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C%E5%8F%82%E6%95%B0)\n<br />\n\n### [注意事项](/README.md#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)\n\n<br /><br />\n\n### [快速上手](/README.md#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B)\n#### [1.后端上手](/README.md#1%E5%90%8E%E7%AB%AF%E4%B8%8A%E6%89%8B)\n#### [2.前端上手](/README.md#2%E5%89%8D%E7%AB%AF%E4%B8%8A%E6%89%8B)\n<br />\n\n### [下载客户端 App](/README.md#%E4%B8%8B%E8%BD%BD%E5%AE%A2%E6%88%B7%E7%AB%AF-app)\n\n### [开源许可](/README.md#%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF)\n\n### [使用登记](/README.md#%E4%BD%BF%E7%94%A8%E7%99%BB%E8%AE%B0)\n\n### [贡献者们](/README.md#%E8%B4%A1%E7%8C%AE%E8%80%85%E4%BB%AC)\n\n### [统计分析](/README.md#%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90)\n\n### [规划及路线图](/README.md#%E8%A7%84%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E5%9B%BE)\n\n### [我要赞赏](/README.md#%E6%88%91%E8%A6%81%E8%B5%9E%E8%B5%8F)\n\n<br /><br />\n\n### [技术交流](/README.md#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81)\n\n### [相关推荐](/README.md#%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90)\n\n### [生态项目](/README.md#%E7%94%9F%E6%80%81%E9%A1%B9%E7%9B%AED)\n\n### [持续更新](/README.md#%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)\n\n### [工蜂主页](/README.md#%E5%B7%A5%E8%9C%82%E4%B8%BB%E9%A1%B5)\n\n### [码云主页](/README.md#%E7%A0%81%E4%BA%91%E4%B8%BB%E9%A1%B5)\n"
        },
        {
          "name": "README-English.md",
          "type": "blob",
          "size": 32.091796875,
          "content": "Tencent is pleased to support the open source community by making APIJSON available.   <br/>\nCopyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved. <br/>\nThis source code is licensed under the Apache License Version 2.0 <br/>\n\n<h1 align=\"center\" style=\"text-align:center;\">\n  APIJSON\n</h1>\n\n\n<p align=\"center\">🏆 Tencent Top 6 Open Source Project, Achieved 5 Awards Inside & Outside Tencent 🚀 <br />A JSON Transmission Protocol and an ORM Library for providing APIs and Documents without writing any code. </p>\n\n<p align=\"center\" >\n  <a href=\"https://github.com/Tencent/APIJSON/blob/master/README.md\">&nbsp;中文版&nbsp;</a>\n  <a href=\"https://github.com/Tencent/APIJSON/blob/master/Document-English.md\">&nbsp;Document&nbsp;</a>\n  <a href=\"https://search.bilibili.com/all?keyword=APIJSON\">&nbsp;Video&nbsp;</a>\n  <a href=\"http://apijson.cn/api\">&nbsp;Test&nbsp;</a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/MySQL-5.7%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/PostgreSQL\"><img src=\"https://img.shields.io/badge/PostgreSQL-9.5%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/SQLServer\"><img src=\"https://img.shields.io/badge/SQLServer-2012%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Oracle\"><img src=\"https://img.shields.io/badge/Oracle-12C%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/DB2\"><img src=\"https://img.shields.io/badge/DB2-7.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/TiDB-2.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Dameng\"><img src=\"https://img.shields.io/badge/Dameng-7.6%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/ClickHouse\"><img src=\"https://img.shields.io/badge/ClickHouse-21.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Elasticsearch\"><img src=\"https://img.shields.io/badge/Elasticsearch-7.17.5%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Cassandra-4.0.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Presto\"><img src=\"https://img.shields.io/badge/Presto-0.277%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Trino\"><img src=\"https://img.shields.io/badge/Trino-400%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/TDSQL-cloud-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Snowflake-7.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/chenyanlann/APIJSONBoot_Hive\"><img src=\"https://img.shields.io/badge/Hive-3.1.2%2B-brightgreen.svg?style=flat\"></a>  \n  <a href=\"https://github.com/chenyanlann/APIJSONBoot_Hive\"><img src=\"https://img.shields.io/badge/Hadoop-3.1.3%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Databricks-13.0%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/InfluxDB-2.6.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/TDengine\"><img src=\"https://img.shields.io/badge/TDengine-2.6.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Redis\"><img src=\"https://img.shields.io/badge/Redis-5.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Kafka\"><img src=\"https://img.shields.io/badge/Kafka-3.2.1%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server\"><img src=\"https://img.shields.io/badge/Java-1.8%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/glennliao/apijson-go\"><img src=\"https://img.shields.io/badge/Go-1.18%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/j2go/apijson-go\"><img src=\"https://img.shields.io/badge/Go-1.16%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/liaozb/APIJSON.NET\"><img src=\"https://img.shields.io/badge/CSharp-2.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/kvnZero/hyperf-APIJSON\"><img src=\"https://img.shields.io/badge/PHP-8.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/kevinaskin/apijson-node\"><img src=\"https://img.shields.io/badge/Node.js-ES6%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/zhangchunlin/uliweb-apijson\"><img src=\"https://img.shields.io/badge/Python-3%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-Script\"><img src=\"https://img.shields.io/badge/Lua-5.2%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONDemo/pom.xml#L48-L52\"><img src=\"https://img.shields.io/badge/Spring-4.3.2%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONDemo/pom.xml#L48-L52\"><img src=\"https://img.shields.io/badge/SpringBoot-1.4.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONFinal/pom.xml#L59-L68\"><img src=\"https://img.shields.io/badge/JFinal-3.5%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Android\"><img src=\"https://img.shields.io/badge/Android-4.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-iOS\"><img src=\"https://img.shields.io/badge/iOS-7%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-JavaScript\"><img src=\"https://img.shields.io/badge/JavaScript-ES6%2B-brightgreen.svg?style=flat\"></a>\n</p>\n\n<p align=\"center\" >\n  <img src=\"https://oscimg.oschina.net/oscnet/up-3299d6e53eb0534703a20e96807727fac63.png\" />\n</p>\n\n---\n\n#### A better online document is available at https://apijsondocs.readthedocs.io/\n\n* ### [1.About](#1)\n* ### [2.Backend usage](#2)\n* ### [3.Frontend usage](#3)\n* ### [4.Contributing](#4)\n* ### [5.Releases](#5)\n* ### [6.Author](#6)\n* ### [7.Donating](#7)\n\n<br />\n\n## <h2 id= \"1\">1. About <h2/>\n\nAPIJSON is a JSON based internet communication protocol and an ORM library  <br />\nthat largely simplifies the process of back-end API development.  <br />\nIt also allows users to get data more quickly with self-defined form and fewer endpoints requests.\n\n### Features:\n#### For getting data:\nYou can get any data by defining the specific information you want and send it to the server. <br />\nYou can get different types of data by making just one request to the server. <br />\nIt's very convenient and flexible, and dosen't require different API endpoints with multiple requests. <br />\nIt provides CRUD(read and write), Fuzzy Search, Remote Function Calls, etc. <br />\nYou can also save duplicate data, see request history, etc. <br />\n\n#### For API design:\nAPIJSON largely reduces API developers' workload by reducing most api design and documentation work. <br />\nWith APIJSON, client developers will no longer be suffered from possible errors in documents, <br />\nand it saves communication between server developers and client developers about APIs or documentations. <br />\nServer developers no longer need to worry about compatibility of APIs and documents with legacy apps. <br />\n\n![0F85206E116CCEE74DB68E5B9A3AEDAE](https://user-images.githubusercontent.com/5738175/196148099-d3a9e0ba-93e5-4e1a-a4f8-a714083c6f7e.jpg)\n#### Song Firework-Katy Parry(Modified for APIJSON)\nDo you ever feel like a backend slave <br />\nRepeating CRUD, wanting to make a change? <br />\nDo you ever feel, APIs' so paper thin <br />\nLike a house of cards, one blow from cavin' in? <br />\nDo you ever feel they always complain? <br />\nUrging doc and feedback bugs, even ask your refactoring <br />\nDo you know that there's still a chance for you? <br />\n'Cause there's a powerful tool <br />\nYou just gotta depend and configure <br />\nAnd let it init <br />\nJust start APIs <br />\nThey are so easy to try <br />\n'Cause baby, you're a firework <br />\nCome on, show 'em what you're worth <br />\nMake 'em go, \"Oh, oh, oh\" <br />\nAs you give 'em an A-T-M <br />\nBaby, you're a firework <br />\nCome on, let them serve themselves <br />\nMake 'em go, \"Oh, oh, oh\" <br />\nYou're gonna leave 'em all in awe, awe, awe. <br />\n\n<br/>\n\n**Tired with endless arguments about HTTP API dev or use?** <br/>\n**Use APIJSON-the ORM for providing infinity codeless CRUD APIs that fit almost all your needs.** <br />\n**Unfold the Power(In Your Soul) with ⭐Star & Clone.**\n\n### APIJSON Show\n#### Postman test APIJSON\n![](https://static.oschina.net/uploads/img/201711/12230359_f7fQ.jpg)\n<br/>\n\n#### APIAuto test APIJSON\nNote: The UI is APIAuto, the URL+JSON is APIJSON<br/>\n<br />\n<p align=\"center\" >\n  <a >APIJSON: query multi related tables, flexible data structures. APIAuto: multi test accounts, easily share test cases</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-bbbec4fc5edc472be127c02a4f3cd8f4ec2.JPEG) \n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_associate.gif) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto: generate request code for frontend/clients or Python test cases, easily download code</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-637193bbd89b41c3264827786319e842aee.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto: auto save test records, auto generate API doc, requests shortcut, easily replay</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-7dcb4ae71bd3892a909e4ffa37ba7c1d92a.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto: auto regression test without code, annotation, comment, etc.)</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-c1ba774f8e7fcc5adcdb05cad5bd414d766.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >A picture is worth a thousand words - some basic features show for APIJSON</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-e21240ef3770326ee6015e052226d0da184.JPEG) \n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_summary.gif) \n\n\n## <h2 id=\"2\">2.Backend usage<h2/>\nYou can skip this step and use 'apijson.cn:8080'. <br />\nSee https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/README-English.md\n\n<br />\n\n## <h2 id=\"3\">3. Frontend usage<h2/> \nYou can skip this step and use [APIAuto](https://github.com/TommyLemon/APIAuto) or download App.<br />\nSee [Android](https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Android/README-English.md), [iOS](https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-iOS/README-English.md) or [JavaScript](https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-JavaScript/README-English.md)<br />\n\n### Download App\n\nSimple demo App for testing APIJSON<br />\n[APIJSONTest.apk](http://files.cnblogs.com/files/tommylemon/APIJSONTest.apk)\n\t\nComplex production App like Twitter tweets<br />\n[APIJSONApp.apk](http://files.cnblogs.com/files/tommylemon/APIJSONApp.apk)\n\n<br />\n\t\n## <h2 id=\"4\">4. Contributing<h2/> \n\t\nWe are always looking for more developers to help implementing new features, fix bugs, etc. <br />\nPlease have a look at the [open issues](https://github.com/Tencent/APIJSON/issues) before opening a new one. <br />\n\nFork the project and send a pull request.<br />\n\nPlease also ⭐Star the project!\n<br />\n\n## <h2 id=\"5\">5. Releases<h2/> \n\t\nSee the latest release [here](https://github.com/Tencent/APIJSON/releases/tag/5.2.0).\n\n<br />\n\n## <h2 id=\"6\">6. Author<h2/> \t\n\t\nCheck out the author's [github account](https://github.com/TommyLemon) to see more related projects.<br>\n<img width=\"1279\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/196243428-da8abbbb-9622-4f26-a109-db5d17ab8b40.png\">\n\nIf you have any questions or suggestions, you can [create an issue](https://github.com/Tencent/APIJSON/issues) or [send me an e-mail](mailto:tommylemon@qq.com).\n\n<br />\n<br />\n\n### Users of APIJSON:\n\nhttps://github.com/Tencent/APIJSON/issues/187 \n<div style=\"float:left\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/126525534-461c3e33-57b1-4630-af7f-f1238ca4ab98.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/126525251-c05e64c6-6b60-4457-a46e-dea7dcfb80cd.png\" height=\"75\">\n  <br />\n  <img src=\"https://user-images.githubusercontent.com/5738175/195065513-c581e958-2386-4a34-8b78-f48e87d1e1f2.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195063764-dcc272a0-3c2c-4073-8f22-c501c22a0844.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195063874-9d37425d-f220-445f-8554-655d5c02931b.png\" height=\"75\">\n  <br />\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.transsion.com.jpeg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/shebaochina.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.xmfish.com.gif\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.xxwolo.com.jpeg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/t-think.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/xm.juhu.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.aipaipai-inc.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.8sso.com.jpeg\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758356-fbc89569-8b34-49d4-9f8e-272a8406440d.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.shulian8.com.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758846-1c055ae1-c235-498b-a64c-902a6068af76.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.hngtrust.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.hec-bang.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.toutou.com.cn.jpg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.yto.net.cn.jpg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.lepinyongche.com.jpg\"  height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.aupup.com.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758697-3267f031-a7bc-44f2-84bb-06a4a7e30a75.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758188-40294d75-ef7d-4ddc-9af8-5b8c195839cf.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758198-8ec01213-18f7-43d5-9942-7c49a898ccef.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/95326431/194802562-e7f92b39-edbb-401f-806a-1a22513e785e.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758742-28d79efd-6645-44ee-bb50-844aa39b25fe.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758753-0a3bb998-a533-4388-8224-4f9d743ff576.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758795-e49e3eae-12ba-4399-a8e1-75db94cb0a99.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758984-0fe2fcd9-5119-46d3-9e22-4632556c0b9e.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758995-db762406-627b-4ea5-8397-b99bb5711cce.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759031-bdcf4146-34cb-470c-a576-37d4e8fdca24.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759040-c7db99ff-3404-411d-b9ba-23547aaf1509.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759093-927fd5c3-9e1e-4648-8a35-c9d97630d086.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/10636d69-1d54-4666-aa8a-472c4ecb9413\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759079-ffc4483e-46a6-4e28-a0e0-25186ea008ab.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759186-a90a04db-0bd4-47bc-bab0-c160dcf48e53.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759204-7bdb09f5-2194-41c1-8e59-1461bd5ff4c1.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759227-2e5d42ae-b42d-4702-801d-566e70809e79.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759318-b0edad0d-9f6c-44b9-97a4-6c566880bc4b.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759239-1cb44526-abfa-4800-8d65-233d04b7c0d3.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759268-b4ad2945-704e-495c-b2b0-d0166dc5e33a.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759292-baa3924c-cf56-49cf-820c-d1e0a88cac3b.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652404-927a945e-22f5-42f8-99da-3a0863a5a3b5.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226653817-fcc57051-53e2-4c8d-bda6-3effba4032ee.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/7c71b8f9-f1cc-4305-8e97-c212f476e377\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652405-561963cb-73e4-4d65-986c-ebfafcfe7b73.jpeg\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652403-92546c06-6dc4-4f46-b697-02a4073833f8.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226657098-d63c0dd1-24d0-4819-9045-b8213ab2e31f.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226657183-b6bbf284-3eb4-431e-8549-6356b7929e45.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/9de7c199-4f29-44ed-9cb6-ad5e4fa44dfa\" height=\"90\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/d7155a65-22f7-49c6-8354-c309f36e4065\" height=\"60\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/f5a6ec8d-d9a8-49d0-a284-c50f1376647e\" height=\"75\">\n\n<br />\n\t\n[More APIJSON Users](https://github.com/Tencent/APIJSON/issues/73)\n\n### Contributers of APIJSON:\nContributers for the APIJSON core project(6 Tencent engineers, 1 Microsoft engineer, 1 Zhihu architect, 1 Bytedance(TikTok) engineer, 1 NetEase engineer, 1 Zoom engineer, 1 YTO Express engineer, 1 Zhilian engineer, 1 UC student、3 SUSTech students, etc.): <br />\nhttps://github.com/Tencent/APIJSON/blob/master/CONTRIBUTING.md <br />\n<div style=\"float:left\">\n  <a href=\"https://github.com/TommyLemon\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\" \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/41\"><img src=\"https://avatars0.githubusercontent.com/u/39320217?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/119\"><img src=\"https://avatars1.githubusercontent.com/u/25604004?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/223\"><img src=\"https://avatars.githubusercontent.com/u/49295281?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/43\"><img src=\"https://avatars0.githubusercontent.com/u/23173448?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/47\"><img src=\"https://avatars2.githubusercontent.com/u/31512287?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/212\"><img src=\"https://avatars.githubusercontent.com/u/8936328?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/70\"><img src=\"https://avatars1.githubusercontent.com/u/22228201?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/74\"><img src=\"https://avatars0.githubusercontent.com/u/1274536?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/92\"><img src=\"https://avatars3.githubusercontent.com/u/6327228?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/103\"><img src=\"https://avatars0.githubusercontent.com/u/25990237?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/194\"><img src=\"https://avatars0.githubusercontent.com/u/3982329?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/219\"><img src=\"https://avatars.githubusercontent.com/u/7135770?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/222\"><img src=\"https://avatars.githubusercontent.com/u/49233056?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/221\"><img src=\"https://avatars.githubusercontent.com/u/17545585?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/217\"><img src=\"https://avatars.githubusercontent.com/u/30771966?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/190\"><img src=\"https://avatars3.githubusercontent.com/u/25056767?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/69\"><img src=\"https://avatars0.githubusercontent.com/u/13880474?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/72\"><img src=\"https://avatars1.githubusercontent.com/u/10663804?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/33\"><img src=\"https://avatars1.githubusercontent.com/u/5328313?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/235\"><img src=\"https://avatars.githubusercontent.com/u/17243165?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/233\"><img src=\"https://avatars.githubusercontent.com/u/1252459?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/250\"><img src=\"https://avatars.githubusercontent.com/u/44310040?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/253\"><img src=\"https://avatars.githubusercontent.com/u/19265050?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/278\"><img src=\"https://avatars.githubusercontent.com/u/4099373?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/279\"><img src=\"https://avatars.githubusercontent.com/u/28685375?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/280\"><img src=\"https://avatars.githubusercontent.com/u/60541766?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/283\"><img src=\"https://avatars.githubusercontent.com/u/50007106?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/284\"><img src=\"https://avatars.githubusercontent.com/u/45117061?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/285\"><img src=\"https://avatars.githubusercontent.com/u/32100214?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/287\"><img src=\"https://avatars.githubusercontent.com/u/62465397?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/288\"><img src=\"https://avatars.githubusercontent.com/u/55579125?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/291\"><img src=\"https://avatars.githubusercontent.com/u/17522475?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/293\"><img src=\"https://avatars.githubusercontent.com/u/53826144?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/295\"><img src=\"https://avatars.githubusercontent.com/u/11210385?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/311\"><img src=\"https://avatars.githubusercontent.com/u/22066942?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/325\"><img src=\"https://avatars.githubusercontent.com/u/33931153?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/443\"><img src=\"https://avatars.githubusercontent.com/u/95326431?s=40&v=4\"  height=\"54\" width=\"54\" ></a>\n</div>\n<br />\n\t\nAuthors of other projects for ecosystem of APIJSON(2 Tencent engineers, 1 BAT(Baidu/Alibaba/Tencent) specialist, 1 Microsoft engineer, 2 Bytedance(TikTok) engineers,  1 Digital China engineer & Apache dubbo2js author, etc.): <br />\nhttps://github.com/search?o=desc&q=apijson&s=stars&type=Repositories <br />\nhttps://search.gitee.com/?skin=rec&type=repository&q=apijson&sort=stars_count <br />\n<div style=\"float:left\">\n  <a href=\"https://github.com/APIJSON/apijson-orm\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/liaozb/APIJSON.NET\"><img src=\"https://avatars3.githubusercontent.com/u/12622501?s=400&v=4\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/tiangao/apijson-go\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/43/130007_tiangao_1578918889.png!avatar200\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/qq547057827/apijson-php\"><img src=\"https://avatars3.githubusercontent.com/u/1657532?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/xianglong111/APIJSON-php\"><img src=\"https://avatars.githubusercontent.com/u/9738743?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/kevinaskin/apijson-node\"><img src=\"https://avatars3.githubusercontent.com/u/20034891?s=400&v=4\"\n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TEsTsLA/apijson\"><img src=\"https://avatars2.githubusercontent.com/u/17310639?s=400&v=4\"\n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/zhangchunlin/uliweb-apijson\"><img src=\"https://avatars0.githubusercontent.com/u/359281?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/crazytaxi824/APIJSON\"><img src=\"https://avatars3.githubusercontent.com/u/16500384?s=400&v=4\" \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/luckyxiaomo/APIJSONKOTLIN\"><img src=\"https://avatars2.githubusercontent.com/u/42728605?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Zerounary/APIJSONParser\"><img src=\"https://avatars2.githubusercontent.com/u/31512287?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson-framework\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson-column\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/jerrylususu/apijson_todo_demo\"><img src=\"https://avatars.githubusercontent.com/u/17522475?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/vcoolwind/apijson-practice\"><img src=\"https://avatars.githubusercontent.com/u/22070287?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/rainboy-learn/apijson-learn\"><img src=\"https://avatars.githubusercontent.com/u/43025876?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/greyzeng/apijson-sample\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/367/1102309_greyzeng_1578940307.png!avatar200\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/zhiyuexin/ApiJsonByJFinal\"><img src=\"https://avatar.gitee.com/uploads/90/490_zhiyuexin.jpg!avatar100?1368664499\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Airforce-1/SpringServer1.2-APIJSON\"><img src=\"https://avatars3.githubusercontent.com/u/6212428?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/JinShuProject/JinShuApiJson\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/232/698672_maxiaoji_1578931055.jpg!avatar200\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/qiujunlin/APIJSONDemo\"><img src=\"https://avatars.githubusercontent.com/u/50007106?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/chenyanlann/APIJSONDemo_ClickHouse\"><img src=\"https://avatars.githubusercontent.com/u/62465397?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/andream7/apijson-db2\"><img src=\"https://avatars.githubusercontent.com/u/60541766?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/APIJSON-Android-RxJava\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/APIAuto\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/UnitAuto\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/vincentCheng/apijson-doc\"><img src=\"https://avatars3.githubusercontent.com/u/6327228?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/ruoranw/APIJSONdocs\"><img src=\"https://avatars.githubusercontent.com/u/25990237?s=460&u=2143b95e5ed39185f2a03d66fbb5638795e16d5a&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/HANXU2018/APIJSON-DOC\"><img src=\"https://avatars.githubusercontent.com/u/45117061?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/kenlig/apijsondocs\"><img src=\"https://avatars.githubusercontent.com/u/28685375?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson.org\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/pengxianggui/apijson-builder\"><img src=\"https://avatars2.githubusercontent.com/u/16299169?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/AbsGrade\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/Android-ZBLibrary\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n</div>\n<br />\n\nThanks to all contributers of APIJSON!\n\n<br />\n\n### Statistics\nHundreds of employees from big famous companies(Tencent, Google, Apple, Microsoft, Amazon, Huawei, Alibaba, Paypal, Meituan, Bytedance(TikTok), IBM, Baidu, JD, NetEase, Kuaishou, Shopee, etc.) starred, <br >\na lot of employees from big famous companies(Tencent, Huawei, Microsoft, Zoom, etc.) created PR/Issue, thank you all~ <br >\n[![Stargazers over time](https://starchart.cc/Tencent/APIJSON.svg)](https://starchart.cc/Tencent/APIJSON)\n<img width=\"948\" alt=\"image\" src=\"https://github.com/Tencent/APIJSON/assets/5738175/2784e399-11c8-4eeb-8257-44533df61827\">\n<img width=\"948\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/195752839-554d0204-aa5d-48d8-b838-d1a0cb0e8690.png\">\n<img width=\"948\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/195752907-a09d9505-beb3-47a6-b7b9-079b58964b4d.png\">\n\n\n<br />\n"
        },
        {
          "name": "README-extend.md",
          "type": "blob",
          "size": 20.9951171875,
          "content": "# 功能点\n\n### 一个json(事务)同时支持新增、修改、删除、查询、别名\n\nhttps://github.com/Tencent/APIJSON/issues/468\n\n#### 使用说明\n\njson支持多种方式定义method\n\n第一种:\n\n \"@post\",\"@put\",\"@delete\",\"@head\",\"@get\",\"@gets\",\"@head\",\"@heads\"\n\n\"@post\": [\"Moment\",\"Comment[]\"] , 值为数组格式,  每个value = key\n\n需要保证每个key唯一, 唯一判断标准:\n\nkey = Moment \n\nkey= Moment[] \n\n会判断为相同key. 请通过别名区分, 别名格式: Sys_user_role:sur  xxx表名:别名\n\n```\n{\n   \"@post\": [\"Moment\",\"Comment:cArray[]\",\"User:u\"], // 分发到 POST 请求对应的解析处理\n   \"Moment\": {\n     // TODO 其它字段\n   },\n   \"Comment:cArray[]\": [\n      {\n        // TODO 其它字段\n      }\n   ],\n   \"@get\": [\"User\"], // 分发到 GET 请求对应的解析处理\n   \"User:u\": {\n     // TODO 其它字段\n   },\n   \"Privacy\": { // 按 URL 对应的默认方法处理\n     // TODO 其它字段\n   }\n}\n\n对于没有显式声明操作方法的，直接用 URL(/get, /post 等) 对应的默认操作方法\n\n```\n\n第二种:\n\n对象内定义\"@method\": \"GET\", value大写\n\n```\n{\n\t\"sql@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"角色1\"\n        }\n    },\n    \"Sys_user_role:sur[]\": {\n    \t\"@method\": \"GET\",\n        \"Sys_user_role\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"Sys_role_permission:srp[]\": {\n    \t\"@method\": \"GET\",\n        \"Sys_role_permission\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"@explain\": true\n}\n```\n\n#### 解析顺序\n\n1) 对象内 \"@method\"\n2) \"@post\",\"@put\",\"@delete\"\n3) 对于没有显式声明操作方法的，直接用 URL(/get, /post 等) 对应的默认操作方法\n\n#### tag自动生成规则\n\n/**\n * { \"xxx:aa\":{ \"@tag\": \"\" }}\n * 生成规则:\n * 1、@tag存在,tag=@tag\n * 2、@tag不存在\n * 1)、存在别名\n * key=对象: tag=key去除别名\n * key=数组: tag=key去除别名 + []\n * 2)、不存在别名\n * tag=key\n * tag=key + []\n */\n\n\n![image](https://user-images.githubusercontent.com/12228225/204079184-06dd08a7-95a3-4a46-8e05-f062fa406847.png)\n\n\n#### 建议\n\n1. 一个json包含不同操作方法, url method 使用 /post, /put\n2. value为JSONArray, 建议通过\"@post\" 方式配置, 如果没有配置,执行 3\n\n#### Request表 配置说明\n\n这只是我的配置仅供参考, 后续 测试会用到:\n\n```\n单条新增:\nPOST   User_address     {\"MUST\":\"addr\",\"UPDATE\": {\"@role\": \"OWNER,ADMIN\",\"childFunTest-()\": \"childFunTest(addr)\"}, \"REFUSE\": \"id\"}\n批量新增:\nPOST User_address[]  {\"User_address[]\": [{\"MUST\":\"addr\",\"REFUSE\": \"id\"}], \"UPDATE\": {\"@role\": \"OWNER,ADMIN\",\"childFunTest-()\": \"childFunTest(addr)\"}}\n单条修改:\nPUT User_address   {\"User_address\":{ \"MUST\":\"id\",\"REFUSE\": \"userId\", \"UPDATE\": {\"@role\": \"OWNER,ADMIN\",\"childFunTest-()\": \"childFunTest(addr)\"}} }\n批量修改:\nPUT User_address[]  {\"User_address[]\": [{\"MUST\": \"id\",\"REFUSE\": \"userId\"}], \"UPDATE\": {\"@role\": \"OWNER,ADMIN\"}}\n删除:\nDELETE User_address   {\"User_address\":{ \"MUST\":\"id{}\",\"REFUSE\": \"!\", \"INSERT\": {\"@role\": \"OWNER,ADMIN\"}} }\n\n```\n![image](https://user-images.githubusercontent.com/12228225/204079438-8f352496-4b73-4b72-88c0-914894335074.png)\n\n\n\n### 别名\n\n格式: \n\nSys_user_role:sur  xxx表名:别名\n\nComment:cArray[]\n\n#### 实现思路\n\n当时参考了作者的示例: 注册流程. 看到绕过校验, 可以将多条json语句组装在一起, 批量执行. 于是就想如何实现一个json支持不同操作方法,并支持事物. \n\n通过分析源码, 熟悉了校验流程、json解析执行流程、json解析生成sql语句流程、一些兼容、校验规则等\n\n经过和作者讨论, 很感谢作者提供了相关解决方案和思路. 逐步理解了apijson的设计原理和框架结构.\n\n一个json(事务)同时支持新增、修改、删除、查询、别名, 实现思路如下:\n\n1、校验模块\n\n将json解析成对象、临时变量、子查询、别名、tag等\n\n并将method 添加到 json对象属性中.\n\n```\n\"Sys_role\": {\n    \t\"@method\": \"PUT\",\n\t\t\"id\": \"6aedce0d-2a29-4fbe-aeed-0ba935ca6b41\",\n        \"id{}@\": \"sql\",\n        \"role_code\": \"code-subrange-4\",\n        \"role_name\": \"角色-subrange-4\"\n    }\n```\n\n2、对象解析\n\n用对象属性@method , 替换 Parser 的 method\n\n3、事物支持\n\n### 后续优化建议\n\n1、独立定义一个url method, 通过解析不同method执行不同流程\n\n和已有method区分开,避免歧义\n\n2、最外层新增传参 \"transaction\": true 来指定开启事务\n目前是url put、post来控制开启事物, 以及提交的时候 在 AbstractParser onCommit 判断 transactionIsolation (4 : 开启事物, 0: 非事物请求) \n\n![image](https://user-images.githubusercontent.com/12228225/204079532-26d9cd4b-d2d7-4c73-9f78-f425bbbcf623.png)\n\n详细实现请参见: https://github.com/Tencent/APIJSON/issues/468\n\n3、完善 \"[@Explain](https://github.com/Explain)\"\n\n如果没有执行计划,则返回sql语句. 能够在 reponse返回值中, 看到json中执行的每条sql,方便排错\n\n![image](https://user-images.githubusercontent.com/12228225/204079543-be464f67-a80f-4a33-87ea-d1870908e642.png)\n\n4、@version支持\n\n定义不同场景的 新增、修改、删除等执行规则. 请通过version版本区分\n\nRequest表是通过tag、method、version来保证唯一.\n\n![image](https://user-images.githubusercontent.com/12228225/204079562-00449c38-42b1-4d9c-b562-2d56c77e6218.png)\n\n5、前置函数\n\n前置函数能够将json语句, 加入到 当前事物中.\n\n例如:  像数组一样,解析成每一条语句去执行.\n\n### mysql8 with-as表达式\n\n#### 前提条件\n\n1、mysql版本: 8+\n\n2、mysql-connector-java: 8.0.31\n\n版本支持 with-as即可\n\n3、druid: 1.2.15\n\n版本支持 with-as即可\n\n4、去掉 durid wall配置\n\ndelete子查询,  druid wall 拦截器报错 sql injection violation\n\n![image](https://user-images.githubusercontent.com/12228225/204079572-19a4f50c-3bf3-4f9e-9677-6aa191276fef.png)\n\n#### 测试案例\n\n#### 查询单个range ref引用\n\n```\n// 测试 mysql8 with as表达式\n// 用户表\n// 用户角色表\n// 角色表\n// 示例一 单个range ref引用\n{\n\t\"sql@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"角色1\"\n        }\n    },\n    \"Sys_user_role:sur[]\": {\n    \t\"@method\": \"GET\",\n        \"Sys_user_role\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"Sys_role_permission:srp[]\": {\n    \t\"@method\": \"GET\",\n        \"Sys_role_permission\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"@explain\": true\n}  \n\n// 第二种写法\n{\n\t\"@get\": [\"sql@\",\"Sys_user_role:sur[]\",\"Sys_role_permission:srp[]\"],\n\t\"sql@\": {\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"角色1\"\n        }\n    },\n    \"Sys_user_role:sur[]\": {\n        \"Sys_user_role\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"Sys_role_permission:srp[]\": {\n        \"Sys_role_permission\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"@explain\": true\n} \n```\n\nmysql8执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079581-bf835db2-30ae-4265-bda2-ebf34c0d9e77.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079594-3ebc73a0-836e-4073-9aa4-acb665fe8d52.png)\n\n\n#### 查询多个range ref引用\n\n```\n{\n    \"sql@\": {\n        \"@method\": \"GET\", \n        \"with\": true, \n        \"from\": \"Sys_role\", \n        \"Sys_role\": {\n            \"@column\": \"id\", \n            \"role_name\": \"角色1\"\n        }\n    }, \n    \"sql_user@\": {\n        \"@method\": \"GET\", \n        \"with\": true, \n        \"from\": \"Sys_user\", \n        \"Sys_user\": {\n            \"@column\": \"id\", \n            \"id\": \"f0894db2-6940-4d89-a5b2-4405d0ad0c8f\"\n        }\n    }, \n    \"Sys_user_role:sur[]\": {\n        \"@method\": \"GET\", \n        \"Sys_user_role\": {\n            \"role_id{}@\": \"sql\", \n            \"user_id{}@\": \"sql_user\"\n        }\n    }, \n    \"Sys_role_permission:srp[]\": {\n        \"@method\": \"GET\", \n        \"Sys_role_permission\": {\n            \"role_id{}@\": \"sql\"\n        }\n    }, \n    \"@explain\": true\n}\n```\n\nmysql8执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079603-2ba224a3-3174-491a-a71b-7656c97d0146.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079611-155f6a33-ad56-4d03-8e5d-6f44c3649051.png)\n\n#### delete子查询\n\n```j s\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role_permission\",\n        \"Sys_role_permission\": {\n          \"@column\": \"id\",\n\t\t  \"role_id{}\": [\"e7129d5f-b07e-4996-9965-9528e370a393\"]\n        }\n    },\n    \"Sys_role_permission\": {\n    \t\"@method\": \"DELETE\",\n        \"id{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n\n```\n\n![image](https://user-images.githubusercontent.com/12228225/204079615-25185be5-a296-488f-9a13-98fb2b99a9d5.png)\n\nmysql8执行sql语句:\n\n```\nWITH  `sql` AS (SELECT `id` FROM `housekeeping`.`Sys_role_permission` WHERE  (  (`role_id` IN ('68877ee9-4cf4-4f32-86e6-16c505ca3b21'))  ) ) DELETE FROM `housekeeping`.`Sys_role_permission` WHERE  (  (`id` IN ( SELECT * FROM `sql`) )  ) \n\nPlain Text\n```\n\nmysql5.7执行结果:\n\n```\nDELETE FROM `housekeeping`.`Sys_role_permission` WHERE  (  (`id` IN ( SELECT * FROM (SELECT `id` FROM `housekeeping`.`Sys_role_permission` WHERE  (  (`role_id` IN ('20d337bb-9886-455f-8dce-f1cadab0ec4f'))  ) ) AS `sql`) )  ) \n\n\n\nPlain Text\n```\n\n#### update子查询\n\n```\n{\n   \"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role_permission\",\n        \"Sys_role_permission\": {\n          \"@column\": \"role_id\",\n\t\t  \"id{}\": [\"6aedce0d-2a29-4fbe-aeed-0ba935ca6b41\"]\n        }\n    },\n    \"Sys_role\": {\n    \t\"@method\": \"PUT\",\n\t\t\"id\": \"6aedce0d-2a29-4fbe-aeed-0ba935ca6b41\",\n        \"id{}@\": \"sql\",\n        \"role_code\": \"code-subrange-4\",\n        \"role_name\": \"角色-subrange-4\"\n    },\n    \"@explain\": true\n}\n\n第二种写法\n{\n\t\"@get\": [\"sql@\"],\n    \"sql@\": {\n        \"with\": true,\n        \"from\": \"Sys_role_permission\",\n        \"Sys_role_permission\": {\n          \"@column\": \"role_id\",\n\t\t  \"id{}\": [\"c95ef2d6-bf14-42b0-bb87-038cee8c78f1\"]\n        }\n    },\n    \"@put\": [\"Sys_role\"],\n    \"Sys_role\": {\n\t\t\"id\": \"0bb92d96-8ca6-469e-91e8-60308ce5b835\",\n        \"id{}@\": \"sql\",\n        \"role_code\": \"code-subrange-4\",\n        \"role_name\": \"角色-subrange-4\"\n    },\n    \"@explain\": true\n}\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079628-8536b4be-8078-42a5-b3f7-460159372a8a.png)\n\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079633-df9175bc-703f-4997-95f6-85bbc1134b0b.png)\n\n#### GETS 单条子查询\n\n会执行校验流程\n\n```\nhttp://localhost:8675/lowCodePlatform/forms/api/gets\n\n{\n\t\"sql@\": {\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"role_id\",\n\t\t  \"user_id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_role[]\": {\n        \"Sys_role\": {\n            \"id{}@\": \"sql\"\n        },\n        \"page\": 0,\n        \"count\": 10,\n        \"query\": 2\n    },\n    \"tag\":\"Sys_role[]\",\n    \"total@\": \"/Sys_role[]/total\",\n    \"@explain\": true\n}\n\n第二种写法\n{\n\t\"@gets\": [\"sql@\",\"Sys_role[]\"],\n\t\"sql@\": {\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"role_id\",\n\t\t  \"user_id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_role[]\": {\n        \"Sys_role\": {\n            \"id{}@\": \"sql\"\n        },\n        \"page\": 0,\n        \"count\": 10,\n        \"query\": 2\n    },\n    \"tag\":\"Sys_role[]\",\n    \"total@\": \"/Sys_role[]/total\",\n    \"@explain\": true\n}\n\n```\n\nAccess、Request需要配置鉴权信息:\n\n![image](https://user-images.githubusercontent.com/12228225/204079649-510a047b-2b8e-44d2-a32a-f6ea0e7f6a74.png)\n\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079657-6e62872a-2f29-478e-a29b-bcb0a92781a6.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079878-a9885b86-5a44-4ba2-b837-66adc43b07d3.png)\n\n#### GETS多条子查询\n\n会执行校验流程\n\n```\nhttp://localhost:8675/lowCodePlatform/forms/api/gets\n\n{\n\t\"sql@\": {\n    \t\"@method\": \"GETS\",\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"超级管理员\"\n        }\n    },\n    \"sql_user@\": {\n    \t\"@method\": \"GETS\",\n        \"with\": true,\n        \"from\": \"Sys_user\",\n        \"Sys_user\": {\n          \"@column\": \"id\",\n          \"id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_user_role:sur[]\": {\n    \t\"@method\": \"GETS\",\n        \"Sys_user_role\": {\n            \"role_id{}@\": \"sql\",\n            \"user_id{}@\": \"sql_user\"\n        }\n    },\n    \"Sys_role_permission:srp[]\": {\n    \t\"@method\": \"GETS\",\n        \"Sys_role_permission\": {\n            \"role_id{}@\": \"sql\"\n        }\n    },\n    \"@explain\": true\n}\n\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079892-bc71eb65-cfbd-4c3c-bda9-4b31902058ba.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079897-521a763f-bb08-44af-92c6-5e4117fe9d33.png)\n\n#### head 单个子查询\n\n普通获取数量, get/head不执行校验流程\n\n```\nhttp://localhost:8675/lowCodePlatform/forms/api/head\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"role_id\",\n\t\t  \"user_id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_role\": {\n    \t\"@method\": \"head\",\n        \"id{}@\": \"sql\"\n    },\n    \"@explain\": true\n}\n\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079903-e397a78a-1849-4678-ac41-0611165a1de1.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079908-1efb5b28-889d-4d9b-b4f9-5092925888c9.png)\n\n#### head 多个子查询\n\n普通获取数量, get/head不执行校验流程\n\n```\n{\n\t\"sql@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"超级管理员\"\n        }\n    },\n    \"sql_user@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user\",\n        \"Sys_user\": {\n          \"@column\": \"id\",\n          \"id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_user_role\": {\n        \"@method\": \"HEAD\",\n        \"role_id{}@\": \"sql\",\n            \"user_id{}@\": \"sql_user\"\n    },\n    \"Sys_role_permission\": {\n        \"@method\": \"HEAD\",\n        \"role_id{}@\": \"sql\"\n    },\n    \"@explain\": true\n}\n\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079919-5fba8f87-56d8-4d7d-b457-4a2505f27d1e.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079932-1e040caf-57fd-45a7-afa5-b26bdce83fba.png)\n\n#### heads 单个子查询\n\n普通获取数量\n\n会执行校验流程, Access、Request需要配置鉴权信息:\n![image](https://user-images.githubusercontent.com/12228225/204079942-d790a3c0-eb46-4512-bb58-45a16894608a.png)\n\n```\nhttp://localhost:8675/lowCodePlatform/forms/api/heads\n\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"role_id\",\n\t\t  \"user_id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_role\": {\n    \t\"@method\": \"heads\",\n        \"id{}@\": \"sql\"\n    },\n    \"@explain\": true\n}\n\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079952-976fa9b6-4a11-40ad-a2c7-6f901b186670.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079959-6bf95b45-5f35-474e-b428-b51bcb5b500d.png)\n\n#### heads 多个子查询\n\n会执行校验流程, Access、Request需要配置鉴权信息:\n\n![image](https://user-images.githubusercontent.com/12228225/204079967-a48f4f50-6e6b-476b-a281-b072ef8a352d.png)\n\n普通获取数量\n\n```\n{\n\t\"sql@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role\",\n        \"Sys_role\": {\n          \"@column\": \"id\",\n          \"role_name\": \"超级管理员\"\n        }\n    },\n    \"sql_user@\": {\n    \t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user\",\n        \"Sys_user\": {\n          \"@column\": \"id\",\n          \"id\": \"4732209c-5785-4827-b532-5092f154fd94\"\n        }\n    },\n    \"Sys_user_role\": {\n        \"@method\": \"HEADS\",\n        \"role_id{}@\": \"sql\",\n        \"user_id{}@\": \"sql_user\"\n    },\n    \"Sys_role_permission\": {\n        \"@method\": \"HEADS\",\n        \"role_id{}@\": \"sql\"\n    },\n    \"@explain\": true\n}\n\n```\n\nmysql8执行sql语句:\n\n![image](https://user-images.githubusercontent.com/12228225/204079980-c93ef595-0c4b-42a7-a3b3-1e7402d3cb13.png)\n\nmysql5.7执行结果:\n\n![image](https://user-images.githubusercontent.com/12228225/204079987-878d5937-3f42-4f59-93dc-b5a840f5548c.png)\n\n### delete、put 支持子查询\n\nhttps://github.com/Tencent/APIJSON/issues/471\n\n静态变量做全局处理，特殊接口用 Operation.MUST id/id{}/id{}@ 做自定义处理。\n\n之所以默认必传，是因为安全意识不够、编码粗心大意的人太多了，所以要有一个底线保障，尽可能避免安全隐患。\n\n1、全局配置 为 PUT, DELETE 强制要求必须有 id/id{}/id{}@ 条件\n\nAbstractVerifier.IS_UPDATE_MUST_HAVE_ID_CONDITION = true; // true: 必须有\n\n![image](https://user-images.githubusercontent.com/12228225/204080001-eef4ee65-0ad0-4a41-93ba-9b16cd1c2e0e.png)\n\n2、细粒度控制\n\n![image](https://user-images.githubusercontent.com/12228225/204080012-f7d781e9-0a53-461f-84db-3d6ecb167e20.png)\n\n#### 使用说明\n\n```\n// 条件删除\n{\n    \"User:del\": {\n        \"username\": \"test3\"\n    },\n    \"tag\": \"User\",\n    \"explain\": true\n}\n\n// 引用id{}@删除\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"user_id\",\n\t\t  \"role_id{}\": [\"023e1880-c0d4-4e7c-ae6c-7703199c2daf\"]\n        }\n    },\n    \"Sys_user:aa\": {\n    \t\"@method\": \"DELETE\",\n        \"id{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n// 子查询条件删除\nhttp://localhost:8675/lowCodePlatform/forms/api/delete\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"User\",\n        \"User\": {\n          \"@column\": \"username\",\n\t\t  \"username\": \"test-3\"\n        }\n    },\n    \"User\": {\n        \"username{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n\n第二种写法:\n{\n\t\"@get\": [\"sql@\"],\n\t\"sql@\": {\n        \"with\": true,\n        \"from\": \"User\",\n        \"User\": {\n          \"@column\": \"username\",\n\t\t  \"username\": \"test4\"\n        }\n    },\n    \"User\": {\n        \"username{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n\n\n```\n\n\n\n开启id删除, 删除失败:\n\n```\n{\n\t\"@get\": [\"sql@\"],\n\t\"sql@\": {\n        \"with\": true,\n        \"from\": \"User\",\n        \"User\": {\n          \"@column\": \"username\",\n\t\t  \"username\": \"test4\"\n        }\n    },\n    \"User\": {\n        \"username{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n```\n\n![image](https://user-images.githubusercontent.com/12228225/204080043-6614457c-a0ed-45b3-a26a-e75126dbb486.png)\n\n开启id删除、id引用 删除成功\n\n```\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_user_role\",\n        \"Sys_user_role\": {\n          \"@column\": \"user_id\",\n\t\t  \"role_id{}\": [\"0bb92d96-8ca6-469e-91e8-60308ce5b835\"]\n        }\n    },\n    \"Sys_user:aa\": {\n    \t\"@method\": \"DELETE\",\n        \"id{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n```\n![image](https://user-images.githubusercontent.com/12228225/204080050-e6f04fe6-319e-45b7-b1b2-bf4cda4ab2db.png)\n\nPUT 子查询 修改\n\n```\n{\n   \"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role_permission\",\n        \"Sys_role_permission\": {\n          \"@column\": \"role_id\",\n\t\t  \"id{}\": [\"ba2634f8-0bdc-4b50-9c5e-47786b1536ef\"]\n        }\n    },\n    \"Sys_role\": {\n    \t\"@method\": \"PUT\",\n        \"id{}@\": \"sql\",\n        \"role_code\": \"code-subrange-5\",\n        \"role_name\": \"角色-subrange-5\"\n    },\n    \"@explain\": true\n}\n```\n\n![image](https://user-images.githubusercontent.com/12228225/204080072-8f605595-cd8c-474b-975f-4ac97fb92a26.png)\n\n#### bug修复\n\n删除操作 主表 和 子查询 是同一张表\nmysql8以下 非with-as表达式 会报错:\n\"msg\": \"You can't specify target table 'User' for update in FROM clause\",\n\n需要调整sql语句,将子查询包一层(select * from (子查询) as xxx)\nDELETE FROM `housekeeping`.`User`\nWHERE ( (`username` IN (SELECT * FROM (SELECT `username` FROM `housekeeping`.`User` WHERE ( (`username` = 'test1') )) as a) ) )\n\n![image](https://user-images.githubusercontent.com/12228225/204080126-e1f7c82a-2f09-409d-b3f2-fe25badea180.png)\n\n![image](https://user-images.githubusercontent.com/12228225/204080131-0c15404d-3045-4d01-bd89-d2a1f1fa0360.png)\n\n\n### must、refuses判断、delete、PUT支持 ref\n\n```\n{\n\t\"sql@\": {\n\t\t\"@method\": \"GET\",\n        \"with\": true,\n        \"from\": \"Sys_role_permission\",\n        \"Sys_role_permission\": {\n          \"@column\": \"id\",\n\t\t  \"role_id{}\": [\"94f79f0b-331b-4cc5-bfc0-ebfc47d00f13\"]\n        }\n    },\n    \"Sys_role_permission\": {\n    \t\"@method\": \"DELETE\",\n        \"id{}@\": \"sql\"\n    },\n    \"explan\": true\n}\n```\n\n![image](https://user-images.githubusercontent.com/12228225/204080150-28972226-37e0-4280-962a-83f7ac12d37c.png)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 60.654296875,
          "content": "Tencent is pleased to support the open source community by making APIJSON available.   <br/>\nCopyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved. <br/>\nThis source code is licensed under the Apache License Version 2.0 <br/>\n\n<h1 align=\"center\" style=\"text-align:center;\">\n  APIJSON\n</h1>\n\n<p align=\"center\"> 🏆 实时 零代码、全功能、强安全 ORM 库 🚀 <br />后端接口和文档零代码，前端(客户端) 定制返回 JSON 的数据和结构</p>\n\n<p align=\"center\" >\n  <a href=\"https://github.com/Tencent/APIJSON/blob/master/README-English.md\">English</a>\n  <a href=\"https://github.com/Tencent/APIJSON/blob/master/Document.md\">通用文档</a>\n  <a href=\"https://search.bilibili.com/all?keyword=APIJSON\">视频教程</a>\n  <a href=\"http://apijson.cn/api\">测试用例</a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/MySQL-5.7%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/PostgreSQL\"><img src=\"https://img.shields.io/badge/PostgreSQL-9.5%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/SQLServer\"><img src=\"https://img.shields.io/badge/SQLServer-2012%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Oracle\"><img src=\"https://img.shields.io/badge/Oracle-12C%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/DB2\"><img src=\"https://img.shields.io/badge/DB2-7.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/TiDB-2.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Dameng\"><img src=\"https://img.shields.io/badge/Dameng-7.6%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/ClickHouse\"><img src=\"https://img.shields.io/badge/ClickHouse-21.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Elasticsearch\"><img src=\"https://img.shields.io/badge/Elasticsearch-7.17.5%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Presto\"><img src=\"https://img.shields.io/badge/Presto-0.277%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/Trino\"><img src=\"https://img.shields.io/badge/Trino-400%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Snowflake-7.0%2B-brightgreen.svg?style=flat\"></a>\n    <a ><img src=\"https://img.shields.io/badge/Databricks-13.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/chenyanlann/APIJSONBoot_Hive\"><img src=\"https://img.shields.io/badge/Hive-3.1.2%2B-brightgreen.svg?style=flat\"></a>  \n  <a href=\"https://github.com/chenyanlann/APIJSONBoot_Hive\"><img src=\"https://img.shields.io/badge/Hadoop-3.1.3%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Milvus-2.2.0%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/MongoDB-Altlas%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/Cassandra-2.1%2B-brightgreen.svg?style=flat\"></a>\n  <a ><img src=\"https://img.shields.io/badge/InfluxDB-2.6.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/TDengine\"><img src=\"https://img.shields.io/badge/TDengine-2.6.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/TDSQL-cloud-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL\"><img src=\"https://img.shields.io/badge/TencentDB-cloud-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Redis\"><img src=\"https://img.shields.io/badge/Redis-5.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-MultiDataSource-Kafka\"><img src=\"https://img.shields.io/badge/Kafka-3.2.1%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server\"><img src=\"https://img.shields.io/badge/Java-1.8%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/glennliao/apijson-go\"><img src=\"https://img.shields.io/badge/Go-1.18%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/j2go/apijson-go\"><img src=\"https://img.shields.io/badge/Go-1.16%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/liaozb/APIJSON.NET\"><img src=\"https://img.shields.io/badge/CSharp-2.1%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/kvnZero/hyperf-APIJSON\"><img src=\"https://img.shields.io/badge/PHP-8.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/kevinaskin/apijson-node\"><img src=\"https://img.shields.io/badge/Node.js-ES6%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/zhangchunlin/uliweb-apijson\"><img src=\"https://img.shields.io/badge/Python-3%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server/APIJSONDemo-Script\"><img src=\"https://img.shields.io/badge/Lua-5.2%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONDemo/pom.xml#L48-L52\"><img src=\"https://img.shields.io/badge/Spring-4.3.2%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONDemo/pom.xml#L48-L52\"><img src=\"https://img.shields.io/badge/SpringBoot-1.4.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONFinal/pom.xml#L59-L68\"><img src=\"https://img.shields.io/badge/JFinal-3.5%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/vincent109/apijson-nutz\"><img src=\"https://img.shields.io/badge/Nutz-2.4.2%2B-brightgreen.svg?style=flat\"></a>\n</p>\n<p align=\"center\" >\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Android\"><img src=\"https://img.shields.io/badge/Android-4.0%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-iOS\"><img src=\"https://img.shields.io/badge/iOS-7%2B-brightgreen.svg?style=flat\"></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-JavaScript\"><img src=\"https://img.shields.io/badge/JavaScript-ES6%2B-brightgreen.svg?style=flat\"></a>\n</p>\n\n<p align=\"center\" >\n  <img src=\"https://oscimg.oschina.net/oscnet/up-3299d6e53eb0534703a20e96807727fac63.png\" />\n</p>\n\n---\n\n<b >导航目录：</b> 项目简介 [上手使用](#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) [社区生态](#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81)  &nbsp;&nbsp;&nbsp;&nbsp;  完整详细的导航目录 [点这里查看](/Navigation.md) <br />\n\n\nAPIJSON 是一种专为 API 而生的 JSON 网络传输协议 以及 基于这套协议实现的 ORM 库。<br />\n为各种增删改查提供了完全自动化的万能通用接口，零代码实时满足千变万化的各种新增和变更需求。<br />\n能大幅降低开发和沟通成本，简化开发流程，缩短开发周期。<br />\n适合中小型前后端分离的项目，尤其是 创业项目、内部项目、低代码/零代码、小程序、BaaS、Serverless 等。<br />\n\n通过万能通用接口，前端可以定制任何数据、任何结构。<br />\n大部分 HTTP 请求后端再也不用写接口了，更不用写文档了。<br />\n前端再也不用和后端沟通接口或文档问题了。再也不会被文档各种错误坑了。<br />\n后端再也不用为了兼容旧接口写新版接口和文档了。再也不会被前端随时随地没完没了地烦了。\n\n### 特点功能\n\n#### 对于后端\n* 提供万能通用接口，大部分 HTTP API 不用再写\n* 零代码增删改查、各种跨库连表、JOIN 嵌套子查询等\n* 自动生成文档，不用再编写和维护，且自动静态检查\n* 自动校验权限、自动管理版本、自动防 SQL 注入\n* 开放 HTTP API 无需划分版本，始终保持兼容\n\n#### 对于前端\n* 不用再向后端催接口、求文档\n* 数据和结构完全定制，要啥有啥\n* 看请求知结果，所求即所得\n* 可一次获取任何数据、任何结构\n* 能去除多余数据，节省流量提高速度\n\n<br />\n\n### APIJSON 接口展示\n#### Postman 展示 APIJSON\n![](https://static.oschina.net/uploads/img/201711/12230359_f7fQ.jpg)\n<br/>\n\n#### APIAuto 展示 APIJSON\n**使用 APIAuto-机器学习接口工具 来管理和测试 HTTP API 可大幅 减少传参错误、提升联调效率** <br/>\n(注意网页工具界面是 APIAuto，里面的 URL+JSON 才是 APIJSON 的 HTTP API)： <br/>\n<br />\n<p align=\"center\" >\n  <a >APIJSON 多表关联查询、结构自由组合，APIAuto 多个测试账号、一键共享测试用例</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-bbbec4fc5edc472be127c02a4f3cd8f4ec2.JPEG) \n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_associate.gif) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto 自动生成前端(客户端)请求代码 和 Python 测试用例代码，一键下载</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-637193bbd89b41c3264827786319e842aee.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto 自动保存请求记录、自动生成接口文档，可添加常用请求、快捷查看一键恢复</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-7dcb4ae71bd3892a909e4ffa37ba7c1d92a.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >APIAuto 一键自动接口回归测试，不需要写任何代码(注解、注释等全都不要)</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-c1ba774f8e7fcc5adcdb05cad5bd414d766.JPEG) \n\n<br />\n<p align=\"center\" >\n  <a >一图胜千言 - APIJSON 部分基础功能概览</a>\n</p> \n\n![](https://oscimg.oschina.net/oscnet/up-e21240ef3770326ee6015e052226d0da184.JPEG) \n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_query_summary.gif) \n\n\n<br /><br />\n\n### APIJSON App 演示\n使用 APIJSON + ZBLibrary 开发的 Android 客户端 Demo (以下 Gif 图看起来比较卡，实际上运行很流畅)：\n<br />\n![](https://oscimg.oschina.net/oscnet/up-a3f167e593080e8a3fc09c3d5fc09330c98.gif) \n![](https://oscimg.oschina.net/oscnet/up-141abcb5dabc01c890d70c461bd1fdc751f.gif) \n![](https://oscimg.oschina.net/oscnet/up-58aecc2701c2c4ea33e53f246e427773b09.gif)\n\n<br />\n\n### APIJSON 分享演讲\n#### APIJSON-零代码接口与文档 ORM 库（国际开源谷 Gitee Meetup）\n\nhttps://www.bilibili.com/video/BV1Tv411t74v\n\n![image](http://apijson.cn/images/comparison/APIJSON_vs_PreviousWays.jpg)\n\n\n#### APIJSON 和 APIAuto-零代码开发和测试（QECon 全球软件质量&效能大会）\n\nhttps://www.bilibili.com/video/BV1yv411p7Y4\n\n<img width=\"1360\" alt=\"wecom-temp-377bbd0daf5aed716baf7ebcb003d94c\" src=\"https://user-images.githubusercontent.com/5738175/121370207-1b35de00-c96f-11eb-840e-cc2ff2995888.png\">\n\n\n<br />\n\n### 为什么选择 APIJSON？\n前后端 关于接口的 开发、文档、联调 等 10 大痛点解析 <br />\nhttps://github.com/Tencent/APIJSON/wiki\n\n* **解决十大痛点** (可帮前后端开发大幅提振开发效率、强力杜绝联调扯皮、巧妙规避文档缺陷、非常节省流量带宽)\n* **开发提速很大** (CRUD 零代码热更新全自动，APIJSONBoot 对比 SSM、SSH 等保守估计可提速 20 倍以上)\n* **腾讯官方开源** (使用 GitHub、Gitee、工蜂 等平台的官方账号开源，微信公众号、腾讯云+社区 等官方公告)\n* **社区影响力大** (GitHub 17K+ Star 在 400W Java 项目排名前 100，远超 FLAG, BAT 等国内外绝大部分开源项目)\n* **各项荣誉成就** (腾讯内外 5 个奖项、腾讯开源前六、腾讯后端 Star 第一、Trending 日周月榜大满贯 等)\n* **多样用户案例** (腾讯内有互娱、音乐、微信、云与智慧，外部有华为、华能、百度、快手、中兴、圆通、传音等)\n* **适用场景广泛** (社交聊天、阅读资讯、影音娱乐、办公学习 等各种 App、网站、小程序、公众号 等非金融类项目)\n* **周边生态丰富** (Android, iOS, Web 等各种 Demo、继承 JSON 的海量生态、零代码 接口测试 和 单元测试 工具等)\n* **文档视频齐全** (项目介绍、快速上手、安装部署 等后端、前端、客户端的 图文解说、视频教程、代码注释 等)\n* **功能丰富强大** (增删改查、分页排序、分组聚合、各种条件、各种 JOIN、各种子查询、跨库连表 等零代码实现)\n* **使用安全简单** (自动增删改查、自动生成文档、自动管理版本、自动控制权限、自动校验参数、自动防 SQL 注入)\n* **灵活定制业务** (在后端编写 远程函数，可以拿到 session、version、当前 JSON 对象 等，然后自定义处理)\n* **高质可靠代码** (代码严谨规范，蚂蚁集团源伞 Pinpoint 代码扫描分析报告平均每行代码 Bug 率低至 0.15%)\n* **兼容各种项目** (协议不限 HTTP，与其它库无冲突，对各类 Web 框架集成友好且提供 SpringBoot, JFinal 的示例)\n* **工程轻量小巧** (仅依赖 fastjson，Jar 仅 280KB，Java 文件仅 59 个共 13719 行代码，例如 APIJSONORM 4.3.1)\n* **多年持续迭代** (自 2016 年起已连续维护 8 年多，70+ 贡献者、100+ 发版、3000+ 提交，不断更新迭代中...)\n\n**按照一般互联网中小型项目情况可得出以下对比表格：**\n\n表数量 T | 平均每表字段数 C |         SSMH 按快估计     | APIJSONBoot 按慢估计 | APIJSONBoot 提速倍数\n--------  |   ---------  |  ---------------------  |  ------------------ |  -----------\n1         |    3         |  179 min(约一上午)        | 11 min(约十分钟)     |  15.27\n5         |    4         |  1935 min(约朝九晚六一周)  | 70 min(约一小时)     |  26.64\n10        |    10        |  8550 min(大小周超半个月)  | 320 min(约一下午)    |  25.72\n20        |    15        |  31900 min(约 996 两个月) | 940 min(约上班两天)  |  32.94\n50        |    20        |  176750 min(11117 超半年) | 3100 min(约上班一周) |  56.02             \n \n### 用户反馈\n**腾讯 IEG 数据产品开发组负责人 xinlin：**\n“腾讯的 APIJSON 开源方案，它可以做到零代码生成接口和文档，并且整个生成过程是自动化。当企业有元数据的时候，马上就可以获得接口”\n\n**腾讯科技 后台开发高级工程师 雷大锤：**\n“可以抽出时间来看apijson了，这个可以为T10做准备，也是业界很火的东西，可以提升个人影响力！”\n\n**腾讯 bodian520：**\n“在调试GET、POST、PUT接口时遇到了一些问题，把个人的摸索经验分享一下，希望作者能梳理下文档，方便我们更好的接入”\n\n**华为 minshiwu：**\n“demo工程，默认使用apijson-framework，可以做到无任何配置即可体验apijson的各种能力。”\n\n**字节跳动 qiujunlin：**\n“初次见到这个项目，觉得太惊艳了，眼前一亮。给我的感受是，项目大大简化了开发流程，开发效率提升了很多倍。”\n\n**百度智慧城市研发 lpeng：**\n“很兴奋的发现APIJSON很适合我们的一个开发场景，作为我们协议定义的一部分” \n\n**中兴 duyijiang：**\n“感谢腾讯大大提供的框架，很好用”\n\nhttps://github.com/Tencent/APIJSON/issues/132#issuecomment-1106669540\n\n<br />\n\n### 常见问题\n#### 1.如何定制业务逻辑？\n在后端编写 远程函数，可以拿到 session、version、当前 JSON 对象、参数名称 等，然后对查到的数据自定义处理 <br />\nhttps://github.com/Tencent/APIJSON/issues/101\n\n#### 2.如何控制权限？\n在 Access 表配置校验规则，默认不允许访问，需要对 每张表、每种角色、每种操作 做相应的配置，粒度细分到行级 <br />\nhttps://github.com/Tencent/APIJSON/issues/12\n\n#### 3.如何校验参数？\n在 Request 表配置校验规则 structure，提供 MUST、TYPE、VERIFY 等通用方法，可通过 远程函数 来完全自定义 <br />\nhttps://github.com/Tencent/APIJSON/wiki#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\n\n更多常见问题及提问前必看 <br />\nhttps://github.com/Tencent/APIJSON/issues/36\n<br />\n\n### 注意事项\n**请求参数 JSON 中表名、字段名、关键词及对应的值都是大小写敏感、逗号敏感、分号敏感、空格敏感、换行敏感， <br />\n大部分情况都不允许空格和换行，表名以大写字母开头，不要想当然，请严格按照 [设计规范](https://github.com/Tencent/APIJSON/blob/master/Document.md#3) 来调用 API ！**\n[#181](https://github.com/Tencent/APIJSON/issues/181)\n<br />\n<br />\n<br />\n<br />\n\n<b >导航目录：</b> [项目简介](#--apijson) 上手使用 [社区生态](#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81)  &nbsp;&nbsp;&nbsp;&nbsp;  完整详细的导航目录 [点这里查看](/Navigation.md) <br />\n\n### 快速上手\n\n#### 1.后端上手\n可以跳过这个步骤，直接用APIJSON服务器IP地址 apijson.cn:8080 来测试接口。<br />\n见&nbsp; [APIJSON后端上手 - Java](https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server)<br />\n\n#### 2.前端上手\n可以跳过这个步骤，直接使用 [APIAuto-机器学习HTTP接口工具](https://github.com/TommyLemon/APIAuto) 或 下载客户端App。<br />\n见&nbsp; [Android](https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Android) &nbsp;或&nbsp; [iOS](https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-iOS) &nbsp;或&nbsp; [JavaScript](https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-JavaScript)<br />\n\n\n### 下载客户端 App\n\n仿微信朋友圈动态实战项目<br />\n[APIJSONApp.apk](http://files.cnblogs.com/files/tommylemon/APIJSONApp.apk)\n\n测试及自动生成代码工具<br />\n[APIJSONTest.apk](http://files.cnblogs.com/files/tommylemon/APIJSONTest.apk)\n\n### 开源许可\n使用 [Apache License 2.0](/LICENSE)，对 公司、团队、个人 等 商用、非商用 都自由免费且非常友好，请放心使用和登记\n\n### 使用登记\n如果您在使用 APIJSON，请让我们知道，您的使用对我们非常重要(新的按登记顺序排列、专群优先答疑解惑)：<br />\nhttps://github.com/Tencent/APIJSON/issues/187 \n<div style=\"float:left\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/126525534-461c3e33-57b1-4630-af7f-f1238ca4ab98.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/126525251-c05e64c6-6b60-4457-a46e-dea7dcfb80cd.png\" height=\"75\">\n  <br />\n  <img src=\"https://user-images.githubusercontent.com/5738175/195065513-c581e958-2386-4a34-8b78-f48e87d1e1f2.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195063764-dcc272a0-3c2c-4073-8f22-c501c22a0844.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195063874-9d37425d-f220-445f-8554-655d5c02931b.png\" height=\"75\">\n  <br />\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.transsion.com.jpeg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/shebaochina.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.xmfish.com.gif\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.xxwolo.com.jpeg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/t-think.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/xm.juhu.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.aipaipai-inc.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.8sso.com.jpeg\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758356-fbc89569-8b34-49d4-9f8e-272a8406440d.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.shulian8.com.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758846-1c055ae1-c235-498b-a64c-902a6068af76.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.hngtrust.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.hec-bang.com.png\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.toutou.com.cn.jpg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.yto.net.cn.jpg\" height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.lepinyongche.com.jpg\"  height=\"75\">\n  <img src=\"https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/User/www.aupup.com.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758697-3267f031-a7bc-44f2-84bb-06a4a7e30a75.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758188-40294d75-ef7d-4ddc-9af8-5b8c195839cf.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758198-8ec01213-18f7-43d5-9942-7c49a898ccef.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/95326431/194802562-e7f92b39-edbb-401f-806a-1a22513e785e.png\"  height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758742-28d79efd-6645-44ee-bb50-844aa39b25fe.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758753-0a3bb998-a533-4388-8224-4f9d743ff576.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758795-e49e3eae-12ba-4399-a8e1-75db94cb0a99.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758984-0fe2fcd9-5119-46d3-9e22-4632556c0b9e.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195758995-db762406-627b-4ea5-8397-b99bb5711cce.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759031-bdcf4146-34cb-470c-a576-37d4e8fdca24.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759040-c7db99ff-3404-411d-b9ba-23547aaf1509.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759093-927fd5c3-9e1e-4648-8a35-c9d97630d086.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/10636d69-1d54-4666-aa8a-472c4ecb9413\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759079-ffc4483e-46a6-4e28-a0e0-25186ea008ab.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759186-a90a04db-0bd4-47bc-bab0-c160dcf48e53.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759204-7bdb09f5-2194-41c1-8e59-1461bd5ff4c1.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759227-2e5d42ae-b42d-4702-801d-566e70809e79.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759318-b0edad0d-9f6c-44b9-97a4-6c566880bc4b.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759239-1cb44526-abfa-4800-8d65-233d04b7c0d3.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759268-b4ad2945-704e-495c-b2b0-d0166dc5e33a.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/195759292-baa3924c-cf56-49cf-820c-d1e0a88cac3b.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652404-927a945e-22f5-42f8-99da-3a0863a5a3b5.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226653817-fcc57051-53e2-4c8d-bda6-3effba4032ee.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/7c71b8f9-f1cc-4305-8e97-c212f476e377\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652405-561963cb-73e4-4d65-986c-ebfafcfe7b73.jpeg\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226652403-92546c06-6dc4-4f46-b697-02a4073833f8.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226657098-d63c0dd1-24d0-4819-9045-b8213ab2e31f.png\" height=\"75\">\n  <img src=\"https://user-images.githubusercontent.com/5738175/226657183-b6bbf284-3eb4-431e-8549-6356b7929e45.png\" height=\"75\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/9de7c199-4f29-44ed-9cb6-ad5e4fa44dfa\" height=\"90\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/d7155a65-22f7-49c6-8354-c309f36e4065\" height=\"60\">\n  <img src=\"https://github.com/Tencent/APIJSON/assets/5738175/f5a6ec8d-d9a8-49d0-a284-c50f1376647e\" height=\"75\">\n  <img src=\"https://gitee.com/linksame-ivan/APIJSON/blob/master/assets/logo-name.9f99700f.png\" height=\"75\">\n<br />\n  \n * [腾讯科技有限公司](https://www.tencent.com)\n * [腾讯音乐娱乐集团](https://www.tencentmusic.com)\n * [深圳市传音通讯有限公司](https://www.transsion.com)\n * [社宝信息科技（上海）有限公司](https://shebaochina.com)\n * [华能贵诚信托有限公司](https://www.hngtrust.com)\n * [投投科技](https://www.toutou.com.cn)\n * [圆通速递](https://www.yto.net.cn)\n * [乐拼科技](https://www.lepinyongche.com)\n * [珠海采筑电子商务有限公司](https://www.aupup.com)\n * [爱投斯智能技术（深圳）有限公司](http://www.aiotos.net)\n * [邻盛科技（武汉）有限公司](http://www.linksame.com)\n * [上海麦市信息科技有限公司](https://www.masscms.com)\n * [上海翊丞互联网科技有限公司](http://www.renrencjl.com/home)\n * [上海直真君智科技有限公司](http://www.zzjunzhi.com)\n * [北明软件有限公司](https://www.bmsoft.com.cn/)\n * [上海钰亿环保科技有限公司](#)\n\n### 贡献者们\n主项目 APIJSON 的贡献者们(6 个腾讯工程师、1 个微软工程师、1 个阿里云工程师、1 个字节跳动工程师、1 个网易工程师、1 个 Zoom 工程师、1 个圆通工程师、1 个知乎基础研发架构师、1 个智联招聘工程师、gorm-plus 作者、1 个美国加州大学学生、3 个 SUSTech 学生等)：<br />\nhttps://github.com/Tencent/APIJSON/blob/master/CONTRIBUTING.md <br />\n<div style=\"float:left\">\n  <a href=\"https://github.com/TommyLemon\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\" \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/41\"><img src=\"https://avatars0.githubusercontent.com/u/39320217?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/119\"><img src=\"https://avatars1.githubusercontent.com/u/25604004?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/223\"><img src=\"https://avatars.githubusercontent.com/u/49295281?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/43\"><img src=\"https://avatars0.githubusercontent.com/u/23173448?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/47\"><img src=\"https://avatars2.githubusercontent.com/u/31512287?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/212\"><img src=\"https://avatars.githubusercontent.com/u/8936328?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/70\"><img src=\"https://avatars1.githubusercontent.com/u/22228201?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/74\"><img src=\"https://avatars0.githubusercontent.com/u/1274536?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/92\"><img src=\"https://avatars3.githubusercontent.com/u/6327228?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/103\"><img src=\"https://avatars0.githubusercontent.com/u/25990237?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/194\"><img src=\"https://avatars0.githubusercontent.com/u/3982329?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/219\"><img src=\"https://avatars.githubusercontent.com/u/7135770?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/222\"><img src=\"https://avatars.githubusercontent.com/u/49233056?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/221\"><img src=\"https://avatars.githubusercontent.com/u/17545585?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/217\"><img src=\"https://avatars.githubusercontent.com/u/30771966?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/190\"><img src=\"https://avatars3.githubusercontent.com/u/25056767?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/69\"><img src=\"https://avatars0.githubusercontent.com/u/13880474?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/72\"><img src=\"https://avatars1.githubusercontent.com/u/10663804?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/33\"><img src=\"https://avatars1.githubusercontent.com/u/5328313?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/235\"><img src=\"https://avatars.githubusercontent.com/u/17243165?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/233\"><img src=\"https://avatars.githubusercontent.com/u/1252459?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/250\"><img src=\"https://avatars.githubusercontent.com/u/44310040?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/253\"><img src=\"https://avatars.githubusercontent.com/u/19265050?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/278\"><img src=\"https://avatars.githubusercontent.com/u/4099373?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/279\"><img src=\"https://avatars.githubusercontent.com/u/28685375?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/280\"><img src=\"https://avatars.githubusercontent.com/u/60541766?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/283\"><img src=\"https://avatars.githubusercontent.com/u/50007106?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/284\"><img src=\"https://avatars.githubusercontent.com/u/45117061?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/285\"><img src=\"https://avatars.githubusercontent.com/u/32100214?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/287\"><img src=\"https://avatars.githubusercontent.com/u/62465397?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/288\"><img src=\"https://avatars.githubusercontent.com/u/55579125?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/291\"><img src=\"https://avatars.githubusercontent.com/u/17522475?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/293\"><img src=\"https://avatars.githubusercontent.com/u/53826144?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/295\"><img src=\"https://avatars.githubusercontent.com/u/11210385?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/311\"><img src=\"https://avatars.githubusercontent.com/u/22066942?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/325\"><img src=\"https://avatars.githubusercontent.com/u/33931153?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/443\"><img src=\"https://avatars.githubusercontent.com/u/95326431?s=40&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/447\"><img src=\"https://avatars.githubusercontent.com/u/46688?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/452\"><img src=\"https://avatars.githubusercontent.com/u/45644893?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/456\"><img src=\"https://avatars.githubusercontent.com/u/14543369?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/472\"><img src=\"https://avatars.githubusercontent.com/u/22633385?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/480\"><img src=\"https://avatars.githubusercontent.com/u/35208417?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/481\"><img src=\"https://avatars.githubusercontent.com/u/12228225?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/483\"><img src=\"https://avatars.githubusercontent.com/u/46614808?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/489\"><img src=\"https://avatars.githubusercontent.com/u/3324416?s=60&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/498\"><img src=\"https://avatars.githubusercontent.com/u/41458196?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/505\"><img src=\"https://avatars.githubusercontent.com/u/30490359?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/535\"><img src=\"https://avatars.githubusercontent.com/u/68573559?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/543\"><img src=\"https://avatars.githubusercontent.com/u/32206192?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/545\"><img src=\"https://avatars.githubusercontent.com/u/28621460?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/610\"><img src=\"https://avatars.githubusercontent.com/u/33263203?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/616\"><img src=\"https://avatars.githubusercontent.com/u/42954433?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/668\"><img src=\"https://avatars.githubusercontent.com/u/102006886?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/684\"><img src=\"https://avatars.githubusercontent.com/u/159116925?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/685\"><img src=\"https://avatars.githubusercontent.com/u/44639807?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Tencent/APIJSON/pull/691\"><img src=\"https://avatars.githubusercontent.com/u/19484446?s=96&v=4\"  height=\"54\" width=\"54\" ></a>\n</div>\n<br />\n\n生态周边项目的作者们(2 个腾讯工程师、1 个 BAT 技术专家、1 个微软工程师、2 个字节跳动工程师、1 个神州数码工程师&Apache dubbo2js 作者 等)：<br />\nhttps://github.com/search?o=desc&q=apijson&s=stars&type=Repositories <br />\nhttps://search.gitee.com/?skin=rec&type=repository&q=apijson&sort=stars_count <br />\n<div style=\"float:left\">\n  <a href=\"https://github.com/APIJSON/apijson-orm\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/liaozb/APIJSON.NET\"><img src=\"https://avatars3.githubusercontent.com/u/12622501?s=400&v=4\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/tiangao/apijson-go\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/43/130007_tiangao_1578918889.png!avatar200\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/qq547057827/apijson-php\"><img src=\"https://avatars3.githubusercontent.com/u/1657532?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/xianglong111/APIJSON-php\"><img src=\"https://avatars.githubusercontent.com/u/9738743?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/kevinaskin/apijson-node\"><img src=\"https://avatars3.githubusercontent.com/u/20034891?s=400&v=4\"\n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TEsTsLA/apijson\"><img src=\"https://avatars2.githubusercontent.com/u/17310639?s=400&v=4\"\n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/zhangchunlin/uliweb-apijson\"><img src=\"https://avatars0.githubusercontent.com/u/359281?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/crazytaxi824/APIJSON\"><img src=\"https://avatars3.githubusercontent.com/u/16500384?s=400&v=4\" \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/luckyxiaomo/APIJSONKOTLIN\"><img src=\"https://avatars2.githubusercontent.com/u/42728605?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Zerounary/APIJSONParser\"><img src=\"https://avatars2.githubusercontent.com/u/31512287?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson-framework\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/APIJSON-Demo\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson-column\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/jerrylususu/apijson_todo_demo\"><img src=\"https://avatars.githubusercontent.com/u/17522475?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/vcoolwind/apijson-practice\"><img src=\"https://avatars.githubusercontent.com/u/22070287?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/rainboy-learn/apijson-learn\"><img src=\"https://avatars.githubusercontent.com/u/43025876?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/greyzeng/apijson-sample\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/367/1102309_greyzeng_1578940307.png!avatar200\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/zhiyuexin/ApiJsonByJFinal\"><img src=\"https://avatar.gitee.com/uploads/90/490_zhiyuexin.jpg!avatar100?1368664499\"  \n height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/Airforce-1/SpringServer1.2-APIJSON\"><img src=\"https://avatars3.githubusercontent.com/u/6212428?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://gitee.com/JinShuProject/JinShuApiJson\"><img src=\"https://portrait.gitee.com/uploads/avatars/user/232/698672_maxiaoji_1578931055.jpg!avatar200\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/qiujunlin/APIJSONDemo\"><img src=\"https://avatars.githubusercontent.com/u/50007106?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/chenyanlann/APIJSONDemo_ClickHouse\"><img src=\"https://avatars.githubusercontent.com/u/62465397?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/andream7/apijson-db2\"><img src=\"https://avatars.githubusercontent.com/u/60541766?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/APIJSON-Android-RxJava\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/APIAuto\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/UnitAuto\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/vincentCheng/apijson-doc\"><img src=\"https://avatars3.githubusercontent.com/u/6327228?s=400&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/ruoranw/APIJSONdocs\"><img src=\"https://avatars.githubusercontent.com/u/25990237?s=460&u=2143b95e5ed39185f2a03d66fbb5638795e16d5a&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/HANXU2018/APIJSON-DOC\"><img src=\"https://avatars.githubusercontent.com/u/45117061?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/kenlig/apijsondocs\"><img src=\"https://avatars.githubusercontent.com/u/28685375?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/apijson.org\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/pengxianggui/apijson-builder\"><img src=\"https://avatars2.githubusercontent.com/u/16299169?s=460&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/creasy2010/apijson-docker\"><img src=\"https://avatars.githubusercontent.com/u/1592277?v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/APIJSON/AbsGrade\"><img src=\"https://avatars.githubusercontent.com/u/41146037?s=200&v=4\"  height=\"54\" width=\"54\" ></a>\n  <a href=\"https://github.com/TommyLemon/Android-ZBLibrary\"><img src=\"https://avatars1.githubusercontent.com/u/5738175?s=400&u=5b2f372f0c03fae8f249d2d754e38971c2e17b92&v=4\"  height=\"54\" width=\"54\" ></a>\n</div>\n<br />\n\n还有为 APIJSON 扫描代码贡献 Issue 的 [蚂蚁集团源伞](https://www.sourcebrella.com) 和 [奇安信代码卫士](https://github.com/QiAnXinCodeSafe)\n<div style=\"float:left\">\n  <a href=\"https://www.sourcebrella.com\" style=\"padding: 5px\"><img src=\"https://github.com/user-attachments/assets/2d580664-9df9-4275-8346-5ba2d04936b9\" height=\"90\" ></a>\n  <a href=\"https://github.com/QiAnXinCodeSafe\" style=\"margin-right: 20px\"><img src=\"https://avatars.githubusercontent.com/u/39950310?s=460&u=8c4ad8c2174ba78c0604614a6e2feced07521ce6&v=4\"  height=\"90\" ></a>\n</div>\n<br />\n\n感谢大家的贡献。\n\n### 统计分析 \n腾讯、华为、阿里巴巴、美团、字节跳动、百度、京东、网易、快手等和 Google, Apple, Microsoft, Amazon, Paypal, IBM, Shopee 等 <br >\n数百名知名大厂员工点了 Star，也有腾讯、华为、字节跳动、Microsoft、Zoom 等不少知名大厂员工提了 PR/Issue，感谢大家的支持~ <br >\n[![Stargazers over time](https://starchart.cc/Tencent/APIJSON.svg)](https://starchart.cc/Tencent/APIJSON)\n<img width=\"948\" alt=\"image\" src=\"https://github.com/Tencent/APIJSON/assets/5738175/2784e399-11c8-4eeb-8257-44533df61827\">\n<img width=\"948\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/195752839-554d0204-aa5d-48d8-b838-d1a0cb0e8690.png\">\n<img width=\"948\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/195752907-a09d9505-beb3-47a6-b7b9-079b58964b4d.png\">\n\n根据开源指南针报告，APIJSON Java 版已经是国内顶级、国际一流的 Java 开源项目了 [#518](https://github.com/Tencent/APIJSON/issues/518) <br >\n<img width=\"1495\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/227158515-4e8bab65-a4b9-402b-b60b-29c08b4d930d.png\">\n\n### 规划及路线图\n新增功能、强化安全、提高性能、增强稳定、完善文档、丰富周边、推广使用 <br />\nhttps://github.com/Tencent/APIJSON/blob/master/Roadmap.md\n\n理论上所有支持 SQL 与 JDBC/ODBC 的软件，都可以用本项目对接 CRUD，待测试: <br />\n[OceanBase](https://www.oceanbase.com/docs/oceanbase/V2.2.50/ss-sr-select_daur3l), [Spark](https://spark.apache.org/docs/3.3.0/sql-ref-syntax-qry-select.html)(可用 Hive 对接), [Phoenix](http://phoenix.apache.org/language/index.html#select)(延伸支持 HBase)\n\n### 我要赞赏\n创作不易，坚持更难，右上角点 ⭐Star 来支持/收藏下吧，谢谢 ^_^ <br />\nhttps://github.com/Tencent/APIJSON\n  \n<br />\n<br />\n<br />\n\n<b >导航目录：</b> [项目简介](#--apijson) [上手使用](#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B) 社区生态  &nbsp;&nbsp;&nbsp;&nbsp;  完整详细的导航目录 [点这里查看](/Navigation.md)<br />\n\n### 技术交流\n如果有什么问题或建议可以 [填问卷](https://wj.qq.com/s2/10971431/2a09) 或 [提 Issue](https://github.com/Tencent/APIJSON/issues/36)，交流技术，分享经验。 <br >\n如果你解决了某些 bug，或者新增了一些功能，欢迎 [贡献代码](https://github.com/Tencent/APIJSON/pulls)，感激不尽~ <br >\nhttps://github.com/Tencent/APIJSON/blob/master/CONTRIBUTING.md\n  \n**开发者也是人，也需要工作、休息、恋爱、陪伴家人、走亲会友等，也有心情不好和身体病痛，** <br > \n**往往没有额外的时间精力顾及一些小问题，请理解和支持，开源要大家参与贡献才会更美好~** <br >\n**少数个人的热情终有被耗尽的一天，只有大家共同建设和繁荣社区，才能让开源可持续发展！** <br >  \n\n**开发者时间精力有限，原则上优先解决 登记用户 和 贡献者 的问题，** <br >\n**不解决 文档/视频/常见问题 已明确说明、描述简陋 或 态度无礼 的问题！** <br >\n**如果你已经多次得到帮助，却仍然只索取不贡献，那就别指望大家再帮你！** <br >\n**私聊作者请教技术问题 或者 频繁在互助群 @ 作者 可能会被拉黑/禁言/踢群，请尊重和理解，谢谢！** <br >\n\n如果你 [提 PR 登记了自己使用 APIJSON 的公司](https://github.com/Tencent/APIJSON/issues/187)，可以加 **企业用户支持专群**，作者亲自且优先答疑，<br >\n作者只有解答完了这个专群里的全部问题，才看情况解答 Issue/问卷 里的问题(对 Issue/问卷 不保证解答、更不保证及时)；<br >\n之前的几个互助群，由于大多数问题 在文档/Issue 已有答案却反复提 或者 缺少必要信息要来来回回沟通问清细节 已浪费太多时间，<br >\n甚至有白嫖还把自己当大爷的自私自利伸手党输出情绪，我们不再支持，建议未登记企业的用户 [填问卷](https://wj.qq.com/s2/10971431/2a09) 或 [提 Issue](https://github.com/Tencent/APIJSON/issues/36)。<br >\n\n如果你为 APIJSON 做出了以下任何一个贡献，我们将优先为你答疑解惑： <br >\n[提交了 PR 且被合并](https://github.com/Tencent/APIJSON/pull/92)、[提交了优质 Issue](https://github.com/Tencent/APIJSON/issues/189)、[发表了优质文章](https://blog.csdn.net/qq_41829492/article/details/88670940)、[开发了可用的生态项目](https://github.com/zhangchunlin/uliweb-apijson)， <br >\nIssue/问卷 一般解答顺序：贡献者 > 帮助他人的用户 > 提供任职企业的用户 > 其他用户。\n  \n\n### 相关推荐\n[APIJSON, 让接口和文档见鬼去吧！](https://my.oschina.net/tommylemon/blog/805459)\n\n[腾讯业务百万数据 6s 响应，APIJSON 性能优化背后的故事](https://my.oschina.net/tommylemon/blog/5375645)  \n\n[仿QQ空间和微信朋友圈，高解耦高复用高灵活](https://my.oschina.net/tommylemon/blog/885787)\n\n[后端开挂:3行代码写出8个接口！](https://my.oschina.net/tommylemon/blog/1574430)\n\n[后端自动化版本管理，再也不用改URL了！](https://my.oschina.net/tommylemon/blog/1576587)\n\n[3步创建APIJSON后端新表及配置](https://my.oschina.net/tommylemon/blog/889074)\n\n[APIJSON对接分布式HTAP数据库TiDB](https://asktug.com/t/htap-tidb/395)\n\n[APIJSON教程（一）：上手apijson项目，学习apijson语法，并实现持久层配置](https://zhuanlan.zhihu.com/p/375681893)\n\n[apijson简单demo](https://blog.csdn.net/dmw412724/article/details/113558115)\n\n[apijson简单使用](https://www.cnblogs.com/greyzeng/p/14311995.html)\n\n[APIJSON简单部署和使用](https://blog.csdn.net/m450744192/article/details/108462611)\n\n[学习自动化接口APIJSON](https://www.jianshu.com/p/981a2a630c7b)\n\n[APIJSON 接口调试实践](https://github.com/Tencent/APIJSON/issues/189)\n  \n[关于APIJSON远程函数](https://mp.weixin.qq.com/s?__biz=Mzg3NTc1NDUyNA==&mid=2247483950&idx=1&sn=b11e70bdf083c55d72238e107449ae2e&chksm=cf3de75df84a6e4b3a4acd0846531b0bd12bc90379523fbaf6b4f900fc3cdc1b1ce3eff97fd9&scene=178&cur_album_id=2548737392338354178#rd)\n  \n[APIJSON新增方法实例](https://cloud.tencent.com/developer/article/2098890)\n  \n[APIJSON-APIJSON的那些事儿](https://cloud.tencent.com/developer/article/2098888)\n\n[APIJSON-零代码接口和文档 JSON 协议 与 ORM 库](https://cloud.tencent.com/developer/article/2077042)\n\n[APIJSON使用例子总结](https://blog.csdn.net/weixin_41077841/article/details/110518007)\n\n[APIJSON 自动化接口和文档的快速开发神器 （一）](https://blog.csdn.net/qq_41829492/article/details/88670940)\n\n[APIJSON在mac电脑环境下配置去连接SQL Server](https://juejin.im/post/5e16d21ef265da3e2e4f4956)\n\n[APIJSON复杂业务深入实践（类似12306订票系统）](https://blog.csdn.net/aa330233789/article/details/105309571)\n\n[全国行政区划数据抓取与处理](https://www.xlongwei.com/detail/21032616)\n\n[新手搭建 APIJSON 项目指北](https://github.com/jerrylususu/apijson_todo_demo/blob/master/FULLTEXT.md)  \n\n[使用APIJSON写低代码Crud接口](https://blog.csdn.net/weixin_42375862/article/details/121654264)\n  \n[apijson在同一个接口调用中 使用远程函数写入更新时间和创建时间](https://blog.csdn.net/qietingfengsong/article/details/124097229)\n\n[APIJSON（一：综述）](https://blog.csdn.net/qq_50861917/article/details/120556168)\n\n[APIJSON 代码分析（三：demo主体代码）](https://blog.csdn.net/qq_50861917/article/details/120751630)\n\n[APIJSON 代码分析（二）AbstractParser类(解析器)](https://blog.csdn.net/weixin_45767055/article/details/120815927)\n\n[APIJSON 代码分析（四：AbstractObjectParser源码阅读）](https://blog.csdn.net/qq_50861917/article/details/120896381)\n\n[APIJSON 代码分析 AbstractSQLConfig 第二篇](https://blog.csdn.net/csascscascd/article/details/120684889)\n\n[APIJSON 代码分析（六）APIJSON—Verifier检查类](https://blog.csdn.net/weixin_45767055/article/details/121321731)\n\n[APIJSON 代码分析（四）AbstractSQLExecutor—SQL执行器](https://blog.csdn.net/weixin_45767055/article/details/121069887)\n\n[APIJSON使用](https://juejin.cn/post/7148253873478565902)\n\n[apijson 初探](https://www.cnblogs.com/x3d/p/apijson-lowcode.html)\n\n[APIJSON使用介绍](http://api.flyrise.cn:9099/docs/open-docs//1459)\n\n[MassCMS With APIJSON最佳实践](https://zhuanlan.zhihu.com/p/655826966)\n\n[APIJSON语法使用，超详细](https://blog.csdn.net/qq_36565607/article/details/139167040)\n\n[wend看源码-ORM-APIJSON](https://itwend.blog.csdn.net/article/details/143980281)\n\n### 生态项目\n[APIJSON-Demo](https://github.com/APIJSON/APIJSON-Demo) APIJSON 各种语言、各种框架 的 使用示例项目、上手文档、测试数据 SQL 文件 等\n\n[apijson-orm](https://github.com/APIJSON/apijson-orm) APIJSON ORM 库，可通过 Maven, Gradle 等远程依赖\n\n[apijson-framework](https://github.com/APIJSON/apijson-framework) APIJSON 服务端框架，通过数据库表配置角色权限、参数校验等，简化使用\n\n[apijson-router](https://github.com/APIJSON/apijson-router) APIJSON 的路由插件，可控地对公网暴露类 RESTful 简单接口，内部转成 APIJSON 格式请求来执行\n  \n[apijson-column](https://github.com/APIJSON/apijson-column) APIJSON 的字段插件，支持 字段名映射 和 !key 反选字段\n\n[apijson-milvus](https://github.com/APIJSON/apijson-milvus) APIJSON 的 Milvus AI 向量数据库插件\n\n[apijson-influxdb](https://github.com/APIJSON/apijson-influxdb) APIJSON 的 InfluxDB 物联网时序数据库插件\n\n[apijson-mongodb](https://github.com/APIJSON/apijson-mongodb) APIJSON 的 MongoDB NoSQL 数据库插件\n\n[apijson-cassandra](https://github.com/APIJSON/apijson-cassandra) APIJSON 的 Cassandra NoSQL 数据库插件\n\n[APIAuto](https://github.com/TommyLemon/APIAuto) 敏捷开发最强大易用的接口工具，机器学习零代码测试、生成代码与静态检查、生成文档与光标悬浮注释\n\n[UnitAuto](https://github.com/TommyLemon/UnitAuto) 最先进、最省事、ROI 最高的单元测试，机器学习 零代码、全方位、自动化 测试 方法/函数，用户包含腾讯、快手、某 500 强巨头等\n\n[SQLAuto](https://github.com/TommyLemon/SQLAuto) 智能零代码自动化测试 SQL 语句执行结果的数据库工具，一键批量生成参数组合、快速构造大量测试数据\n\n[UIGO](https://github.com/TommyLemon/UIGO) 📱 零代码快准稳 UI 智能录制回放平台 🚀 自动兼容任意宽高比分辨率屏幕、自动精准等待网络请求，录制回放快、准、稳！\n\n[apijson-doc](https://github.com/vincentCheng/apijson-doc) APIJSON 官方文档，提供排版清晰、搜索方便的文档内容展示，包括设计规范、图文教程等\n\n[APIJSONdocs](https://github.com/ruoranw/APIJSONdocs) APIJSON 英文文档，提供排版清晰的文档内容展示，包括详细介绍、设计规范、使用方式等\n\n[apijson.org](https://github.com/APIJSON/apijson.org) APIJSON 官方网站，提供 APIJSON 的 功能简介、登记用户、作者与贡献者、相关链接 等\n\n[APIJSON.NET](https://github.com/liaozb/APIJSON.NET) C# 版 APIJSON ，支持 MySQL, PostgreSQL, SQL Server, Oracle, SQLite\n\n[apijson-go](https://github.com/glennliao/apijson-go) Go 版 APIJSON ， 基于Go(>=1.18) + GoFrame2, 支持查询、单表增删改、权限管理等\n  \n[apijson-go](https://gitee.com/tiangao/apijson-go) Go 版 APIJSON ，支持单表查询、数组查询、多表一对一关联查询、多表一对多关联查询 等\n\n[apijson-hyperf](https://github.com/kvnZero/hyperf-APIJSON.git) PHP 版 APIJSON，基于 Hyperf 支持 MySQL\n\n[APIJSON-php](https://github.com/xianglong111/APIJSON-php) PHP 版 APIJSON，基于 ThinkPHP，支持 MySQL, PostgreSQL, SQL Server, Oracle 等\n\n[apijson-php](https://github.com/qq547057827/apijson-php) PHP 版 APIJSON，基于 ThinkPHP，支持 MySQL, PostgreSQL, SQL Server, Oracle 等\n\n[apijson-node](https://github.com/kevinaskin/apijson-node) 字节跳动工程师开源的 Node.ts 版 APIJSON，提供 nestjs 和 typeorm 的 Demo 及后台管理\n\n[uliweb-apijson](https://github.com/zhangchunlin/uliweb-apijson) Python 版 APIJSON，支持 MySQL, PostgreSQL, SQL Server, Oracle, SQLite 等\n\n[APIJSONParser](https://github.com/Zerounary/APIJSONParser) 第三方 APIJSON 解析器，将 JSON 动态解析成 SQL\n\n[FfApiJson](https://gitee.com/own_3_0/ff-api-json) 用 JSON 格式直接生成 SQL，借鉴 APIJSON 支持多数据源\n\n[APIJSON-ToDo-Demo](https://github.com/jerrylususu/apijson_todo_demo) 一个简单的 todo 示例项目，精简数据，简化上手流程，带自定义鉴权逻辑 \n\n[apijson-learn](https://github.com/rainboy-learn/apijson-learn) APIJSON 学习笔记和源码解析\n\n[apijson-practice](https://github.com/vcoolwind/apijson-practice) BAT 技术专家开源的 APIJSON 参数校验注解 Library 及相关 Demo\n\n[apijson-db2](https://github.com/andream7/apijson-db2) 微软工程师接入 IBM 数据库 DB2 的 APIJSON 使用 Demo\n\n[APIJSONDemo](https://github.com/qiujunlin/APIJSONDemo) 字节跳动工程师接入 ClickHouse 的 APIJSON 使用 Demo\n  \n[APIJSONDemo_ClickHouse](https://github.com/chenyanlann/APIJSONDemo_ClickHouse) APIJSON + SpringBoot 连接 ClickHouse 使用的 Demo\n\n[APIJSONBoot_Hive](https://github.com/chenyanlann/APIJSONBoot_Hive) APIJSON + SpringBoot 连接 Hive 使用的 Demo\n\n[apijson-sample](https://gitee.com/greyzeng/apijson-sample) APIJSON 简单使用 Demo 及教程\n\n[apijson-examples](https://gitee.com/drone/apijson-examples) APIJSON 的前端、业务后端、管理后端 Demo\n\n[apijson-ruoyi](https://gitee.com/yxiedd/apijson-ruoyi) APIJSON 和 RuoYi 框架整合，实现零代码生成页面模板接口，在线维护 APIJSON 数据库配置等\n\n[light4j](https://github.com/xlongwei/light4j) 整合 APIJSON 和微服务框架 light-4j 的 Demo，同时接入了 Redis\n\n[SpringServer1.2-APIJSON](https://github.com/Airforce-1/SpringServer1.2-APIJSON) 智慧党建服务器端，提供 上传 和 下载 文件的接口\n\n[apijson_template](https://github.com/abliger/apijson_template) APIJSON Java 模版，使用 gradle 管理依赖和构建应用\n  \n[api-json-demo](https://gitee.com/hxdwd/api-json-demo) 基于 APIJSON，实现低代码写 CURD 代码，代替传统 ORM 框架，适配 Oracle 事务\n\n[ApiJsonByJFinal](https://gitee.com/zhiyuexin/ApiJsonByJFinal) 整合 APIJSON 和 JFinal 的 Demo\n\n[apijson-go-demo](https://github.com/glennliao/apijson-go-demo) apijson-go demos，提供 3 个从简单到复杂的不同场景 Demo\n\n[apijson-builder](https://github.com/pengxianggui/apijson-builder) 一个方便为 APIJSON 构建 RESTful 请求的 JavaScript 库\n\n[apijson-go-ui](https://github.com/glennliao/apijson-go-ui) apijson-go UI 界面配置, 支持权限管理、请求规则配置等\n\n[AbsGrade](https://github.com/APIJSON/AbsGrade) 列表级联算法，支持微信朋友圈单层评论、QQ空间双层评论、百度网盘多层(无限层)文件夹等\n\n[APIJSON-Android-RxJava](https://github.com/TommyLemon/APIJSON-Android-RxJava) 仿微信朋友圈动态实战项目，ZBLibrary(UI) + APIJSON(HTTP) + RxJava(Data)\n\n[Android-ZBLibrary](https://github.com/TommyLemon/Android-ZBLibrary) Android MVP 快速开发框架，Demo 全面，注释详细，使用简单，代码严谨\n  \n[apijson-dynamic-datasource](https://github.com/wb04307201/apijson-dynamic-datasource) 基于APIJSON，动态切换数据源、同一数据源批量操作事务一致性DEMO\n  \n[xyerp](https://gitee.com/yinjg1997/xyerp) 基于ApiJson的低代码ERP\n  \n[quick-boot](https://github.com/csx-bill/quick-boot) 基于 Spring Cloud 2022、Spring Boot 3、AMIS 和 APIJSON 的低代码系统。\n\n[apijson-query-spring-boot-starter](https://gitee.com/mingbaobaba/apijson-query-spring-boot-starter) 一个快速构建 APIJSON 查询条件的插件\n\n[apijson-builder](https://github.com/yeli19950109/apijson-builder) 简单包装 APIJSON，相比直接构造查询 JSON 更好记，ts 编写，调整了一些参数和使用方式\n\n[lanmuc](https://gitee.com/element-admin/lanmuc) 后端低代码生产接口的平台，兼容配置式接口和编写式接口，可做到快速生产接口，上线项目\n\n[review_plan](https://gitee.com/PPXcodeTry/review_plan) 复习提醒Web版（Java技术练习项目）\n\n[apijson-nutz](https://github.com/vincent109/apijson-nutz) APIJSON + Nutz 框架 + NutzBoot 的 Demo\n  \n感谢热心的作者们的贡献，点 ⭐Star 支持下他们吧~\n\n  \n### 腾讯犀牛鸟开源人才培养计划\nhttps://github.com/Tencent/APIJSON/issues/229\n\n\n####  qiujunlin **2.接入 presto/hive/clickhouse/db2 任意一个**\n\nAPIJSON 接入 clickhouse 使用demo <br />\nhttps://github.com/qiujunlin/APIJSONDemo\n\n#### zhangshukun 2.接入 presto/hive/clickhouse/db2 任意一个 \nAPIJSON-Demo接入db2 <br />\nhttps://github.com/andream7/apijson-db2\n\n#### hanxu 1.完善入门介绍视频 \n重构 APIJSON 文档 <br /> \nhttps://hanxu2018.github.io/APIJSON-DOC/ <br /> \n文档源码  <br /> \nhttps://github.com/HANXU2018/APIJSON-DOC  <br /> \n配套评论区 apijson-doc-Comment  <br /> \nhttps://github.com/HANXU2018/apijson-doc-Comment\n\n#### chenyanlan 2.接入 presto/hive/clickhouse/db2 任意一个 \nAPIJSON + SpringBoot连接ClickHouse使用的Demo <br /> \nhttps://github.com/chenyanlann/APIJSONDemo_ClickHouse\n\n#### zhaoqiming 1.完善入门介绍视频  \nAPIJSON 后端教程（1）：简介\nhttps://www.bilibili.com/video/BV1vL411W7yd\n\nAPIJSON 后端教程（2）：数据库 \nhttps://www.bilibili.com/video/BV1eB4y1N77s\n\nAPIJSON 后端教程（3）：Demo\nhttps://www.bilibili.com/video/BV1FX4y1c7ug\n\nAPIJSON 后端教程（4）：Boot\nhttps://www.bilibili.com/video/BV18h411z7FK\n\nAPIJSON 后端教程（5）：Final\nhttps://www.bilibili.com/video/BV1GM4y1N7XJ\n\nAPIJSON 后端教程（6）：uliweb_apijson\nhttps://www.bilibili.com/video/BV1yb4y1S79v/\n\nAPIJSON 后端教程（7）：问题答疑\nhttps://www.bilibili.com/video/BV1dQ4y1h7Df\n  \nAPIJSON配套文档：\nhttps://github.com/kenlig/apijsondocs\n\n#### huwen 2.接入 presto/hive/clickhouse/db2 任意一个\nAPIJSON-Demo 接入presto\nhttps://github.com/hclown9804/APIJSONDemo_presto\n\n#### zhanghaoling 1.完善入门介绍视频\nAPIJSON结合已有项目，简化开发流程\nhttps://github.com/haolingzhang1/APIJson--demo\n\n说明文档\nhttps://github.com/haolingzhang1/APIJson--demo/tree/main/APIJson集成项目说明\n  \n(1)官方demo\nhttps://github.com/haolingzhang1/APIJson--demo/blob/main/APIJson集成项目说明/APIJson集成现有项目（1）-%20官方demo.pdf\n  \n(2)单表配置\nhttps://github.com/haolingzhang1/APIJson--demo/blob/main/APIJson集成项目说明/APIJson集成现有项目（2）-%20单表配置.pdf \n  \n#### zhoukaile 1.完善入门介绍视频\n\n视频链接：https://www.bilibili.com/video/BV1Uh411z7kZ/\n\n文档链接：https://gitee.com/funkiz/apijson_camp\n\n#### lintao 1.完善入门介绍视频\n\nAPIJSON 上手教程：https://www.bilibili.com/video/BV1Pq4y1n7rJ\n\n### 持续更新\n\nhttps://github.com/Tencent/APIJSON/commits/master\n\n### 工蜂主页\nhttps://git.code.tencent.com/Tencent_Open_Source/APIJSON\n\n### 码云主页\nhttps://gitee.com/Tencent/APIJSON\n"
        },
        {
          "name": "Roadmap.md",
          "type": "blob",
          "size": 17.8427734375,
          "content": "\n<h1 align=\"center\" style=\"text-align:center;\">\n  APIJSON 规划及路线图\n</h1>\n\n\n### 新增功能\n部分功能描述可在 [APIAuto](https://github.com/TommyLemon/APIAuto) 上查看 <br />\n账号 13000002020 密码 123456 <br />\nhttp://apijson.cn/api <br />\n\n##### 基本原则\n1.一定要有相关的应用场景，不能是伪需求，最好举例说明 <br />\n2.能用 远程函数 或者 @raw 等现有功能很好地实现的，都不新增，避免冗余 <br />\n3.不影响现有功能的使用，不能让现有功能不可用或者使用更复杂 <br />\n\n#### 新增支持假删除\n20230106 更新：已支持，感谢 @cloudAndMonkey 的贡献 <br />\nhttps://github.com/Tencent/APIJSON/pull/493\n\n一般对于互联网项目，数据非常重要，基本不会物理删除， <br />\n只是用 is_deleted 等字段来标记已删除，然后 CRUD 时默认过滤已标记的记录。 <br />\n这个功能非常必要，可以通过重写 SQLConfig.isFakeDelete() 来标记， <br />\n然后如果 true，则把 DELETE 改为 PUT 并且通过重写 <br />\nSQLConfig.onFakeDelete(Map<String, Object> map) 来新增条件： <br />\nGET: map.put(\"deleted\", 0) <br />\nPUT:  map.put(\"deleted\", 0) <br />\nDELETE:  map.put(\"deleted\", 1) <br />\nPOST:  用不上，不处理 <br />\n当然也可以再加一个删除时间 deletedTime 之类的。 <br />\n <br />\n还可以在 apijson-framework 层支持 Access 表新增字段 deletedKey, deletedValue, notDeletedValue， <br />\n然后读表自动配置是否为假删除 StringUtil.isNotEmpty(deletedKey, true) ，是假删除时 put 相应键值对。 <br />\n \n#### 新增支持 @having& \n20220328 更新：5.0.0 已支持 <br />\nhttps://github.com/Tencent/APIJSON/releases/tag/5.0.0\n\n来实现内部条件 AND 连接，原来的 @having 由 AND 连接变为 OR 连接，保持 横或纵与 的统一规则。<br />\n@having! 必须性不大，可通过反转内部条件来实现，但如果实现简单、且不影响原来的功能，则可以顺便加上。<br />\n\n#### 新增支持 @column!\n20210415 更新：已提供字段插件 [apijson-column](https://github.com/APIJSON/apijson-column)，支持 字段名映射 和 !key 反选字段。\n\n这个只在 [apijson-framework](https://github.com/APIJSON/apijson-framework) 支持，需要配置每个接口版本、每张表所拥有的全部字段，然后排除掉 @column! 的。<br />\n可新增一个 VersionedColumn 表记录来代替 HashMap 代码配置。<br />\n需要注意的是，可能前端传参里既有 @column 又有 @column! ，碰到这种情况：<br />\n如果没有重合字段就忽略 @column! ，只让 @column 生效；<br />\n如果有有重合字段，则抛异常，转为错误码和错误信息返回。<br />\n\n#### 新增支持 TSQL 的 @explain\n20220809 更新：已支持 Oracle 的 EXPLAIN，感谢 @ifooling 的贡献 <br />\nhttps://github.com/Tencent/APIJSON/pull/434\n\n目前 APIJSON 支持 [Oracle](https://github.com/APIJSON/APIJSON-Demo/tree/master/Oracle), [SQL Server](https://github.com/APIJSON/APIJSON-Demo/tree/master/SQLServer), DB2 这 3 种 TSQL 数据库。<br />\n但是 \"@explain\": true 使用的是 SET STATISTICS PROFILE ON(具体见 [AbstractSQLConfig](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java) 和 [AbstrctSQLExecutor](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstrctSQLExecutor.java))  <br />\n执行后居然是 SELECT 查到的放在默认的 ResultSet，性能分析放在 moreResult，<br />\n因为这个问题目前以上两个数据库的性能分析 @explain 实际并不可用，需要改用其它方式或解决现有方式的 bug。<br />\n\n#### 新增支持 page 从 1 开始\n目前只能从 0 开始，实际使用 1 更广泛，而且这方面用户习惯很强，支持它成本也不高。 <br />\n[Parser](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/Parser.java) 新增 DEFAULT_QUERY_PAGE 和 getDefaultQueryPage， <br />\n与 DEFAULT_QUERY_COUNT 和 getDefaultQueryCount 统一， <br />\n方便前端直接用页码的值传参，以及 info.page 的值来渲染页码。 <br />\n建议在 [AbstractParser](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractParser.java)，[AbstractSQLConfig](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java) 用到 page 的地方判断 getDefaultQueryPage，做兼容处理。 <br />\n\n#### 新增支持分布式\n\n \"@url\": \"http://apijson.cn:8080/get\"\n```js\n{\n    \"User\": {\n        \"@url\": \"http://apijson.cn:8080/get\"  //转发给其它服务器执行\n    },\n    \"[]\": {\n        \"Comment\": {\n            \"userId@\": \"User/id\"\n        }\n    },\n    \"@explain\": true\n}\n```\n考虑到引用赋值的依赖关系要保持先后顺序，必须同步阻塞处理。<br />\n或许可以加一个 ~ 前缀表示异步？例如 \"@url\": \"\\~http://apijson.cn:8080/get\"，由调用方保证没有被下方对象依赖。<br />\n\n\n#### 新增支持 Union\n\n虽然可以通过 INNER JOIN + 条件 OR 连接来替代它的功能，但没法达到它能用索引的性能。<br />\n支持 UNION 很有必要，但 UNION ALL 几乎没有需求，如果实现简单、且不影响原来的功能，则可以顺便加上。 <br />\n\n\"@union\": Integer  // 0 - 不使用，1 - UNION，2 - UNION ALL\n```js\n{\n    \"[]\": {\n        \"User\": {\n            \"name~\": \"a\",\n            \"tag~\": \"a\",\n            \"@combine\": \"name~,tag~\",    \n            \"@union\": 1  //将 @combine 中的 N 个 OR 连接字段用 UNION 替换，原本一条 SQL 需要拆分成 N 条 SQL 来 UNION \n        }\n    },\n    \"@explain\": true\n}\n```\n生成的 SQL\n```sql\nSELECT * FROM `sys`.`apijson_user` WHERE ( (`name` REGEXP BINARY 'a') OR (`tag` REGEXP BINARY 'a') ) LIMIT 10 OFFSET 0\n```\n需要变为\n```sql\nSELECT * FROM `sys`.`apijson_user` WHERE ( (`name` REGEXP BINARY 'a') )\nUNION\nSELECT * FROM `sys`.`apijson_user` WHERE ( (`tag` REGEXP BINARY 'a') )\nLIMIT 10 OFFSET 0\n```\n\n\n#### 新增支持 With\n20221126 更新：已支持，感谢 @cloudAndMonkey 的贡献 <br /> \nhttps://github.com/Tencent/APIJSON/pull/481\n\n可以减少子查询执行次数，提高性能。\n```js\n{   //看看关注的人最近有什么动态（分享、评论）\n    \"sql@\": {\n        \"with\": true,  //生成 WITH(SELECT id ...) AS `sql`\n        \"from\": \"User\",\n        \"User\": {\n            \"@column\": \"id\",\n            \"@role\": \"CONTACT\"\n        }\n    },\n    \"Moment[]\": {\n        \"Moment\": {\n            \"userId{}@\": \"sql\",\n            \"@order\": \"date-\"\n        }\n    },\n    \"Comment[]\": {\n        \"Comment\": {\n            \"userId{}@\": \"sql\",\n            \"@order\": \"date-\"\n        }\n    },\n    \"@explain\": true\n}\n```\n生成的 SQL\n```sql\nSELECT * FROM `sys`.`Moment` WHERE ( (`userId` IN (SELECT `id` FROM `sys`.`User` WHERE `id` IN($contactIdList)) ) ) ORDER BY `date` DESC LIMIT 10 OFFSET 0\n```\n和\n```sql\nSELECT * FROM `sys`.`Moment` WHERE ( (`userId` IN (SELECT `id` FROM `sys`.`User` WHERE `id` IN($contactIdList)) ) ) ORDER BY `date` DESC LIMIT 10 OFFSET 0\n```\n\n需要变为\n```sql\nWITH (SELECT `id` FROM `sys`.`User` WHERE `id` IN($contactIdList)) AS `sql`\nSELECT * FROM `sys`.`Moment` WHERE ( (`userId` IN `sql` ) ) ORDER BY `date` DESC LIMIT 10 OFFSET 0\n```\n和\n```sql\nWITH (SELECT `id` FROM `sys`.`User` WHERE `id` IN($contactIdList)) AS `sql`\nSELECT * FROM `sys`.`Comment` WHERE ( (`userId` IN `sql` ) ) ORDER BY `date` DESC LIMIT 10 OFFSET 0\n```\n\n\n#### 新增支持 Case\n【更新：不用实现了，直接按 SQL 的语法写 CASE WHEN，然后用 @raw】\n实现远程函数也不方便的 SQL 内字段转换 CASE WHEN THEN ，<br />\n暂时还没有想好如何设计。如果是 SQL 原来的写法，则有点繁琐。<br />\n\n\n#### 新增支持 id 与其它字段同时作为增删改条件\nAbstractVerifier.IS_UPDATE_MUST_HAVE_ID_CONDITION = false <br />\n就同时支持 id、其它条件删除 <br />\nhttps://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java#L84-L86\n\n但因为 Operation 没有 AT_LEAST_ONE/ANY_ONE 这样的操作， <br />\n所以如果只配置一条规则，只能允许 MUST 配置传一种条件，不能单独传 id/其它字段。 <br />\n <br />\n如果都传了，因为 id 强制作为 AND 条件，所以不能和其它条件 OR， <br />\n可以配置两条不同规则，用不同的 tag 对应使用不同的条件。 <br />\n <br />\nmethod: DELETE <br />\n\n通过 id 删除 \n```\ntag: Comment-by-id // 当然写成 Comment:id 等其它任何不符合表名格式的名称都可\nstructure: ... \"MUST\":\"id\" ...\n```\n <br />\n \n通过 date 条件删除 \n```\ntag: Comment-by-date\nstructure: ... \"MUST\":\"date\" ...\n```\n\n <br />\n如果想只配置一条规则，则 Operation 加上 AT_LEAST_ONE/ANY_ONE ，然后配置 \n\n```\ntag: Comment\nstructure: ... \"AT_LEAST_ONE\":\"id,date\" ... // 至少传其中一个\n```\n\n或 \n\n```\ntag: Comment\nstructure: ... \"ANY_ONE\":\"id,date\" ... // 必须传其中一个，不能同时传 2 个以上\n```\n <br />\n \nAT_LEAST_ONE/ANY_ONE 其中一个也可以通过扩展 MUST 来实现（目前看这种方式更好） <br />\n\"MUST\":\"id | date,其它\" 通过 | 或来表示其中任何一个，注意左右一定要各有一个空格，因为可能有 \"name|$\" \"id|{}\" 等包含 \"|\" 的 key <br />\nhttps://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/Operation.java\n\n <br />\n还可以设置更复杂的表达方式\n\n```\n\"MUST\":\"1:id | date,其它\" // id, date 必须传其中一个，且不能多传 <br />\n\"MUST\":\">=2:id | momentId|{} | date>=,其它\" // id, momentId|{}, date>= 必须至少其中 2 个\n\"MUST\":\"2+:id | momentId|{} | date>=,其它\" // id, momentId|{}, date>= 必须至少其中 2 个，替代 >= 2，更方便解析，并且不用考虑 >1, != 2 等其它各种不等式\n\"MUST\":\"2-:id | momentId|{} | date>=,其它\" // id, momentId|{}, date>= 最多传其中 2 个，替代 <= 2\n```\n\n <br />\n这样的话就不用加 Operation 了，不过 AbstractVerifier 仍然要处理下 REFUSE 和 MUST 的互斥关系 <br />\nhttps://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java#L1012-L1042\n<img width=\"1117\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5738175/211016885-9e752b6c-94e5-46c0-b87d-a7be68387a9f.png\">\n\n##### 需求来源及具体讨论\nhttps://github.com/Tencent/APIJSON/pull/493#issuecomment-1373376359\n\n#### ...  //欢迎补充\n\n\n\n### 强化安全\nAPIJSON 提供了各种安全机制，可在目前的基础上新增或改进。\n\n20220504 更新：新增插件 apijson-router，可控地对公网暴露类 RESTful 简单接口，内部转成 APIJSON 格式请求来执行。 <br />\nhttps://github.com/APIJSON/apijson-router\n\n#### 防越权操作\n\n目前有 RBAC 自动化权限管理。<br />\nAPIJSONORM 提供 [@MethodAccess](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/MethodAccess.java) 注解来配置 <br />\n[apijson-framework](https://github.com/APIJSON/apijson-framework) 则使用 [Access 表](https://github.com/APIJSON/APIJSON-Demo/blob/master/MySQL/single/sys_Access.sql) 记录来配置 <br />\n在 [AbstractVerifier](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java) 中，假定真实、强制匹配。 <br />\n\n\n#### 防 SQL 注入\n\n目前有 预编译 + 白名单 校验机制。具体见 [AbstractSQLExecutor](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java)  和 [AbstractSQLConfig](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java) 。 <br />\n\n#### 防恶意请求\n\n目前有限流机制，getMaxQueryCount, getMaxUpdateCount, getMaxObjectCount, getMaxSQLCount, getMaxQueryDepth 等。 <br />\nhttps://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/Parser.java <br />\n\n\n#### ...  //欢迎补充\n\n\n### 提高性能\n20200205 更新：最近的及次大幅提升性能相关优化及 Release <br />\n[新增支持 ClickHouse、窗口函数 OVER、反引号 `key`、单引号 'value'；大幅提升单表数组查询性能](https://github.com/Tencent/APIJSON/releases/tag/4.8.0) <br />\n[4.6.0【性能】大幅提升数组内主表查询性能](https://github.com/Tencent/APIJSON/releases/tag/4.6.0) <br />\n[4.4.5【性能】大幅提升增删改的性能](https://github.com/Tencent/APIJSON/releases/tag/4.4.5) <br />\n\n#### 解析 JSON\n\n优化 [AbstractParser](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractParser.java) 和 [AbstractObjectParser](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java) 解析 JSON 性能。 <br />\n\n#### 封装 JSON\n\n优化 [AbstractSQLExecutor](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java) 封装 JSON 性能。 <br />\n\n#### 拼接 SQL\n\n优化 [AbstractSQLConfig](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java) 拼接 SQL 性能。<br />\n[完善功能](https://github.com/Tencent/APIJSON/blob/master/Roadmap.md#%E5%AE%8C%E5%96%84%E5%8A%9F%E8%83%BD) 中 Union 和 With 也是优化 SQL 性能的方式。 <br />\n\n#### 读写缓存\n20230105 更新：新增 Redis 缓存 Demo\nhttps://github.com/APIJSON/APIJSON-Demo/commit/060a10e56818b31ab332770815467af9f052c261\n\n在 [AbstractParser](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractParser.java) 使用了 HashMap<String, JSONObject> queryResultMap 存已解析的对象、总数等数据。<br />\n在 [AbstractSQLExecutor](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java) 使用了 HashMap<String, JSONObject> cacheMap 存已通过 SQL 查出的结果集。<br />\n\n#### ...  //欢迎补充\n\n\n\n### 增强稳定\nAPIJSON 代码经过商业分析软件 [源伞Pinpoint](https://www.sourcebrella.com/) 的质检，报告说明 APIJSON 非常可靠。<br />\nhttps://github.com/Tencent/APIJSON/issues/48 <br />\n但我们需要再接再厉，尽可能做到 99.999% 可靠度，降低使用风险，让用户放心和安心。 <br />\n\n20200205 更新：已经解决了 [源伞科技](https://www.sourcebrella.com) 以上报告中的大部分问题 及 [奇安信代码卫士](https://github.com/QiAnXinCodeSafe) 发现的部分问题\nhttps://github.com/Tencent/APIJSON/issues/created_by/QiAnXinCodeSafe\n\n#### 减少 Bug\n\n##### [APIAuto](https://github.com/TommyLemon/APIAuto) 上统计的 bug\n账号 13000002000 密码 123456 <br />\nhttp://apijson.cn/api <br />\n\n##### 其它发现的 Bug\nhttps://github.com/Tencent/APIJSON/issues?q=is%3Aissue+is%3Aopen+label%3Abug <br />\n\n#### 完善测试\n\n##### 在 APIAuto-机器学习自动化接口管理平台 上传更多、更全面、更细致的测试用例、动态参数等\nhttp://apijson.cn/api <br />\n\n##### 在 UnitAuto-机器学习自动化单元测试平台 上传更多、更全面、更细致的测试用例、动态参数等\nhttp://apijson.cn/unit <br />\n\n\n### 完善文档\n20211112 更新：已在官网部署文档 http://apijson.cn/doc/zh\n20200205 更新：最近完善及更新了通用文档、上手文档、图文入门文档等，还对首页引导文档加了导航目录\nhttps://github.com/Tencent/APIJSON/blob/master/Navigation.md\n\n#### 中文文档\n\n##### 通用文档\nhttps://github.com/Tencent/APIJSON/blob/master/Document.md <br />\n\n##### 配置与部署\nhttps://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server <br />\n\n##### ...  //欢迎补充\n\n\n#### English Document\n\nTranslation for Chinese document. <br />\nhttps://github.com/Tencent/APIJSON/blob/master/README-English.md <br />\nhttps://github.com/Tencent/APIJSON/blob/master/Document-English.md <br />\nhttps://github.com/ruoranw/APIJSONdocs <br />\n\n\n\n### 丰富周边\n#### 新增或完善各种语言 ORM 库\n\nGo, Node(js/ts), C#, PHP, Kotlin, Ruby 等。<br />\nhttps://github.com/Tencent/APIJSON#%E7%94%9F%E6%80%81%E9%A1%B9%E7%9B%AE <br />\n\n#### 新增或完善 Demo\n\nJavaScript 前端，TypeScript 前端，微信等小程序，<br />\nAndroid 客户端，iOS 客户端，C# 游戏客户端等。<br />\nJava, C#, PHP, Node, Python 等后端 Demo 及数据。<br />\nhttps://github.com/APIJSON/APIJSON-Demo <br />\n\n#### 新增扩展\n目前官方有 apijson-column, apijson-router 两个插件\n\n##### 1.基于或整合 [APIJSONORM](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM) 或 [apijson-framework](https://github.com/APIJSON/apijson-framework) 来实现的库/框架\n\n##### 2.扩展 [APIJSONORM](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM) 或 [apijson-framework](https://github.com/APIJSON/apijson-framework) 功能的插件\n可以通过扩展对象关键词 @key，数组关键词 key，远程函数，重写部分方法等来实现。<br />\n\n##### 3.前端/客户端 封装/解析 APIJSON 的库/框架\n因为 APIJSON 基于 JSON，大部分情况下都可以直接用 fastjson 等 JSON 封装/解析库或其它工具等，<br />\n只是 APIJSON 有部分功能需要在 key 里放 [], @ 等特殊符号，返回 [] 在某些情况下不方便解析，<br />\n目前可使用 \"format\": true 让后端格式化后返回，但也会对服务器性能有一些损耗，<br />\n如果 前端/客户端 有对应的格式化工具等（例如 [apijson-orm](https://github.com/APIJSON/apijson-orm) 可供 Android 使用 format），选择就会更多一些。<br />\n\n##### ...  //欢迎补充\n\n### 推广使用\n#### 为 APIJSON 编写/发表 博客/文章/资讯 等\n\nhttps://github.com/Tencent/APIJSON#%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90\n\n20200205 更新：最近首页相关推荐新增了 1 篇官方发的文章和 6 篇用户发的文章\nhttps://github.com/Tencent/APIJSON/blob/master/README.md#%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90\n\n#### 登记正在使用 APIJSON 的公司或项目\n\nhttps://github.com/Tencent/APIJSON/issues/73\n\n#### 在社交技术群、论坛等聊天或评论时推荐 APIJSON\n\n#### ...  //欢迎补充\n\n\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "jitpack.yml",
          "type": "blob",
          "size": 0.099609375,
          "content": "jdk:\n  - openjdk17\n  \nbefore_install:\n   - sdk install java 17.0.6-open\n   - sdk use java 17.0.6-open\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 10.0361328125,
          "content": null
        },
        {
          "name": "详细的说明文档.md",
          "type": "blob",
          "size": 27.9365234375,
          "content": "# APIJSON 入门教程\r\n\r\n可以先看更清晰直观的视频教程 <br >\r\nhttps://search.bilibili.com/all?keyword=APIJSON\r\n![image](https://user-images.githubusercontent.com/5738175/135413311-0207ec13-f7ea-4767-9e34-1a6d08438295.png)\r\n\r\n本文档已部署到官网，浏览和检索体验更好，但官网更新滞后，如有疏漏以本文档为准 <br >\r\nhttp://apijson.cn/doc/zh/\r\n\r\n其它各种官方和第三方文档见首页相关推荐 <br >\r\nhttps://github.com/Tencent/APIJSON#%E7%9B%B8%E5%85%B3%E6%8E%A8%E8%8D%90\r\n\r\n## A.介绍\r\n\r\n### A1.关于接口开发\r\n\r\n首先是看名字 `APIJSON`，API 是说这个项目是属于接口开发的项目，JSON 是指传输数据格式是 JSON 格式。介于各位看官的水平高低不齐，这里就先为没有项目经验朋友啰嗦两句接口开发的内容。有经验的朋友可以跳到 `A2` 继续查看。完整的详细介绍见项目首页 <br >\r\nhttps://github.com/Tencent/APIJSON#--apijson\r\n\r\n### A2.功能说明\r\n\r\n一个接口的开发，比如 Java 用 SpringBoot + Mybatis 来开发一般来说就像下面这个流程\r\n\r\n![1545468341131](assets/1545468341131.png)\r\n\r\n部署上这个项目后，流程变成了这样\r\n\r\n![1545468361962](assets/1545468361962.png)\r\n\r\n如果使用 [apijson-framework](https://github.com/APIJSON/apijson-framework)，还可进一步简化流程\r\n\r\n![1543975563776](https://raw.githubusercontent.com/Tencent/APIJSON/master/assets/1543975563776.png)\r\n\r\n\r\n换句话说，使用这个项目作为后端的支持的话，是不需要对每个表写增删改查等接口的，只需在该项目连接的数据里进行表的创建，以及配置接口权限即可。无需进行过多的开发，哪怕是要改结构也仅仅只需要修改表字段而已。想想仅仅是部署一个后端项目，现在需要写的接口就基本写好了，直接调用就行了，是不是挺爽的。\r\n\r\n说这么多，咱们直接开干吧！\r\n\r\n\r\n\r\n# B.安装&使用\r\n\r\n## B1.环境配置\r\n\r\nJDK: 1.8+\r\n\r\nMAVEN: 3.0+\r\n\r\nMySQL 5.7+ / PostgreSQL 9.5+ / Oracle 12C+ / ClickHouse 21.1+ / Presto 0.277+ / Hive 3.1.2+ / ...\r\n\r\nIntelliJ IDEA 2018+ / Eclipse Java EE IDE 4.5.1+\r\n\r\n## B2.下载项目\r\n\r\n```git\r\ngit clone https://github.com/APIJSON/APIJSON-Demo.git\r\n```\r\n\r\n或者，直接下载 ZIP 打包好的项目文件。\r\n\r\n![image](https://user-images.githubusercontent.com/5738175/135412855-574cae7b-402c-4fe0-9959-711e580799af.png)\r\n\r\n## B3.导入项目\r\n\r\nEclipse 导入：\r\n\r\n顶部菜单 File > Import > Maven > Existing Maven Projects > Next > Browse\r\n\r\n选择项目所在目录 [/APIJSON-Demo-Master/APIJSON-Java-Server](https://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server)/APIJSONBoot\r\n\r\n当报依赖错误的时候，将同目录下的 libs 里面的 jar 包添加到 Build Path 中。\r\n![1542345887787](assets/1542345887787.png)\r\n\r\n为了方便修改源代码，你可以像我一样不添加 libs/APIJSON.jar 文件到 Build Path 中。而是将 libs/APIJSON.jar 的源码，复制到当前项目里，然后添加到 Build Path 中。\r\n\r\n源代码在 [APIJSON-Master/APIJSON-Java-Server](https://github.com/Tencent/APIJSON)/APIJSONORM。\r\n\r\nIntelliJ IDEA 导入具体见：\r\n\r\nhttps://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server#3%E7%94%A8-intellij-idea-ultimate-%E6%88%96-eclipse-for-javaee-%E8%BF%90%E8%A1%8C%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B\r\n\r\n## B4.错误修改\r\n\r\n有可能 pom.xml 会报错，例如：\r\n\r\n```java\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n```\r\n\r\n这段代码中的这一句提示错误：\r\n\r\n```java\r\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n```\r\n\r\n修改步骤：\r\n\r\n- 请修改 Eclipse 中的 Maven 镜像地址，以便更快下载或者更新，具体方法自行百度；\r\n- 打开 Eclipse->Windows->Preferences->Maven->Installations->Add 这个按钮用于指定 Maven 的安装目录。这里不建议使用 Eclipse 自带的，需要再自己设置。最终效果如下图所示：\r\n  ![install3](https://raw.githubusercontent.com/APIJSON/APIJSON-Doc/master/docs/.vuepress/public/assets/install3.png)\r\n- 打开 Eclipse->Windows->Preferences->Maven->User Settings 这是指定 setting.xml 的位置，同时导向自己的本地 maven 仓库。最终效果如下图所示：\r\n  ![install4](https://raw.githubusercontent.com/APIJSON/APIJSON-Doc/master/docs/.vuepress/public/assets/install4.png)\r\n\r\n以上截图仅为示例，实际路径请以自己设定为准。\r\n\r\n\r\n## C.开发说明\r\n\r\n### C-1.基于 MySQL 数据库的开发流程\r\n\r\n####  C-1-1.修改数据库链接\r\n\r\n如我的数据库信息是这样的\r\n\r\n| 数据库参数 | 值                  |\r\n| ---------- | ------------------- |\r\n| 地址       | localhost:3306 |\r\n| 用户       | root                |\r\n| 密码       | apijson                |\r\n| 数据库     | sys                |\r\n\r\n那么需要在 `DemoSQLConfig` 配置数据库\r\n\r\n```java\r\n\tstatic {\r\n\t\tDEFAULT_DATABASE = DATABASE_MYSQL;  // TODO 默认数据库类型，改成你自己的\r\n\t\tDEFAULT_SCHEMA = \"sys\";  // TODO 默认数据库名/模式，改成你自己的，默认情况是 MySQL: sys, PostgreSQL: public, SQL Server: dbo, Oracle: \r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic String getDBVersion() {\r\n\t\treturn \"5.7.22\";  // \"8.0.11\";  // TODO 改成你自己的 MySQL 或 PostgreSQL 数据库版本号  // MYSQL 8 和 7 使用的 JDBC 配置不一样\r\n\t}\r\n\t\r\n\t@JSONField(serialize = false)  // 不在日志打印 账号/密码 等敏感信息\r\n\t@Override\r\n\tpublic String getDBUri() {\r\n\t\t// 这个是 MySQL 8.0 及以上，要加 userSSL=false  return \"jdbc:mysql://localhost:3306?userSSL=false&serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8\";\r\n\t\t// 以下是 MySQL 5.7 及以下\r\n\t\treturn \"jdbc:mysql://localhost:3306?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8\"; //TODO 改成你自己的，TiDB 可以当成 MySQL 使用，默认端口为 4000\r\n\t}\r\n\t\r\n\t@JSONField(serialize = false)  // 不在日志打印 账号/密码 等敏感信息\r\n\t@Override\r\n\tpublic String getDBAccount() {\r\n\t\treturn \"root\";  // TODO 改成你自己的\r\n\t}\r\n\t\r\n\t@JSONField(serialize = false)  // 不在日志打印 账号/密码 等敏感信息\r\n\t@Override\r\n\tpublic String getDBPassword() {\r\n\t\treturn \"apijson\";  // TODO 改成你自己的，TiDB 可以当成 MySQL 使用， 默认密码为空字符串 \"\"\r\n\t}\r\n```\r\n具体见源码 <br >\r\nhttps://github.com/APIJSON/APIJSON-Demo/blob/master/APIJSON-Java-Server/APIJSONDemo/src/main/java/apijson/demo/DemoSQLConfig.java\r\n\r\n#### C-1-2.导入表\r\n\r\n在 [APIJSON-Demo-Master/MySQL](https://github.com/APIJSON/APIJSON-Demo/tree/master/MySQL) 目录下有一批 SQL 脚本，他们看起来是这样的\r\n\r\n![1542345654422](assets/1542345654422.png)\r\n\r\nMySQLWorkbench/Datagrip/Navicat 导入表具体见：\r\n\r\nhttps://github.com/APIJSON/APIJSON-Demo/tree/master/APIJSON-Java-Server#2%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%96%87%E4%BB%B6%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93\r\n\r\n导入完成之后。我们可以把项目跑起来看下，以刚刚配置的项目，项目是否能够连上数据库。其中也有一些初始化数据，可以方便我们测试。\r\n\r\n### C-1-2-1.更多测试用例\r\n\r\n如果需要更多测试用例，请按照以下步骤获取：\r\n1. 用 Chrome(或 Firefox 等)浏览器中打开 http://apijson.cn/api ，或者 http://apijson.cn 然后点击按钮 \\[接口 APIAuto 测试] 也行；\r\n2. 点击右上角的“登录”按钮登录；\r\n3. 点击“测试账号”按钮左边第二个按钮，（也就是“-”左边的第一个）获取各种测试用例；\r\n4. 欢迎大家踊跃共享自己的测试用例；\r\n\r\n也可以参考 APIAuto 的文档或视频：\r\n\r\nhttps://github.com/TommyLemon/APIAuto\r\n\r\n#### C-1-3.测试查询\r\n\r\n为了方便测试，我这里使用的 Chrome 浏览器的 Restlet Client 插件，大家可以根据自己的喜好使用不同的工具测试。\r\n\r\n使用 `http://localhost:8080/get` 测试结果。（请注意 DemoApplication.java 中使用 Tomcat 默认的 8080 端口，如果不小心开着PC端的“微信”，8080 端口会被占用，建议改成 8081, 9090 等其它应用程序未占用的端口。）\r\n\r\n随便找一个表，比如 `Moment` 表，我们取其中 id 为 12 的一条出来看看\r\n\r\n![1542350018926](assets/1542350018926.png)\r\n\r\n对接口地址 `http://localhost:8080/get` 发送一个 JSON 格式的请求\r\n\r\n![1542350219020](assets/1542350219020.png)\r\n\r\n请求的JSON:\r\n\r\n```json\r\n{\r\n  \"Moment\": {\r\n    \"id\":12\r\n  }\r\n}\r\n```\r\n\r\n响应的JSON：\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"content\": \"1111534034\",\r\n        \"date\": \"2017-02-08 16:06:11.0\",\r\n        \"id\": 12,\r\n        \"pictureList\": [\r\n            \"http://static.oschina.net/uploads/img/201604/22172508_eGDi.jpg\",\r\n            \"http://static.oschina.net/uploads/img/201604/22172507_rrZ5.jpg\"\r\n        ],\r\n        \"praiseUserIdList\": [\r\n            70793,\r\n            93793,\r\n            82001\r\n        ],\r\n        \"userId\": 70793\r\n    },\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n\r\n\r\n##### 字段过滤\r\n\r\n这里这么多字段，如果我只想要这个 `content` 字段的信息怎么办？\r\n\r\n你可以这样请求：\r\n\r\n```json\r\n{\r\n  \"Moment\": {\r\n    \"id\":12,\r\n    \"@column\":\"content\"\r\n  }\r\n}\r\n```\r\n\r\n响应：\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"content\": \"1111534034\"\r\n    },\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n`@column` 表示你要筛选出的字段，如果是多个字段可以这样写 `\"@column\":\"id,date,content\"`\r\n\r\n\r\n\r\n##### 字段别名\r\n\r\n如果想要使用字段的别名应该这样写：`\"@column\":\"id,date:time,content:text\"`\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"text\": \"1111534034\",\r\n        \"time\": \"2017-02-08 16:06:11.0\",\r\n        \"id\": 12\r\n    }\r\n}\r\n```\r\n\r\n这样在返回的数据中 `date` 字段就变成了 `time`, `content` 字段变成了 `text`。\r\n\r\n\r\n\r\n##### 逻辑运算\r\n\r\n如果想要筛选出，id 在 `12,15,32` 中的这三条数据的`日期`和`内容`怎么办呢？\r\n\r\n请求：\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"id{}\":[12,15,32],\r\n        \"@column\":\"id,date,content\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n响应：\r\n\r\n```json\r\n{\r\n    \"[]\": [\r\n        {\r\n            \"Moment\": {\r\n                \"content\": \"1111534034\",\r\n                \"date\": \"2017-02-08 16:06:11.0\",\r\n                \"id\": 12\r\n            }\r\n        },\r\n        {\r\n            \"Moment\": {\r\n                \"content\": \"APIJSON is a JSON Transmission Structure Protocol…\",\r\n                \"date\": \"2017-02-08 16:06:11.0\",\r\n                \"id\": 15\r\n            }\r\n        },\r\n        {\r\n            \"Moment\": {\r\n                \"date\": \"2017-02-08 16:06:11.0\",\r\n                \"id\": 32\r\n            }\r\n        }\r\n    ],\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n\r\n\r\n如果所要筛选的数据的是在一定范围内的，比如 id 是 300 到 400 之间的\r\n\r\n你可以这样过滤 `\"id&{}\":\">=300,<=400\"`\r\n\r\n&的作用是表明后面的两个过滤条件的逻辑关系\r\n\r\n```sql\r\n(id >= 300 AND id <= 500)\r\n```\r\n\r\n\r\n\r\n现在的逻辑符号一共有三种，`&`，`|`，`!`\r\n\r\n默认的逻辑关系是 `|`，也就是说 `\"id|{}\":\"<=300,>=400\"` 和 `\"id{}\":\"<=300,>=400\"` 等价。\r\n\r\n`!`主要用于反选，黑名单之类的\r\n\r\n`\"id!{}\":[12,15,32]` 表示 `id` 不在 12，15，32 内的其他数据。\r\n\r\n复杂一些，如果多个条件相互组合，可以写多个关于id的过滤条件\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"id&{}\":\">=10,<=40\",\r\n        \"id!{}\":[12],\r\n        \"@column\":\"id,date,content:text\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n比如这里表示 id 在 10 到 40 之间，但是却不包含 12 的数据。\r\n\r\n\r\n\r\n##### 模糊查询\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"content$\":\"%APIJSON%\",\r\n        \"@column\":\"id,date,content:text\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n使用方式有多种：\r\n\r\n`keyword%`，以 `keyword` 开头的字符串。\r\n\r\n`%keyword`，以 `keyword` 结束的字符串。\r\n\r\n`%keyword%`，包含 `keyword` 的字符串，如：`keyword123`, `123keyword`, `123keyword123`\r\n\r\n`%k%e%y%`，包含字母 `k`, `e`, `y` 的字符串\r\n\r\n还有几种比较便捷的方式，我们这里如果使用 `\"content~\":\"keyword\"` 来代替 `\"content$\":\"%keyword%\"`，同样可以表示包含某字符串\r\n\r\n\r\n\r\n##### 正则匹配\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"content~\":\"^[0-9]+$\",\r\n        \"@column\":\"id,date,content:text\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n正则表达式 `^[0-9]+$`，查询 `content` 为纯数字的数据，[MySQL 的正则语法](http://www.runoob.com/mysql/mysql-regexp.html) 如下：\r\n\r\n| 模式       | 描述                                                         |\r\n| ---------- | ------------------------------------------------------------ |\r\n| ^          | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。 |\r\n| $          | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 |\r\n| .          | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用象 '[.\\n]' 的模式。 |\r\n| [...]      | 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。 |\r\n| [^...]     | 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'。 |\r\n| p1\\|p2\\|p3 | 匹配 p1 或 p2 或 p3。例如，'z\\|food' 能匹配 \"z\" 或 \"food\"。'(z\\|f)ood' 则匹配 \"zood\" 或 \"food\"。 |\r\n| *          | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\r\n| +          | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。 |\r\n| {n}        | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。 |\r\n| {n,m}      | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。 |\r\n\r\n\r\n\r\n##### 列表数据\r\n\r\n之前我们看到返回的数据是这样的\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"content\": \"1111534034\",\r\n        \"date\": \"2017-02-08 16:06:11.0\",\r\n        \"id\": 12,\r\n        \"pictureList\": [\r\n            \"http://static.oschina.net/uploads/img/201604/22172508_eGDi.jpg\",\r\n            \"http://static.oschina.net/uploads/img/201604/22172507_rrZ5.jpg\"\r\n        ],\r\n        \"praiseUserIdList\": [\r\n            70793,\r\n            93793,\r\n            82001\r\n        ],\r\n        \"userId\": 70793\r\n    },\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n里面的 `pictureList` 和 `praiseUserIdList` 是数组，这种数据在 MySQL 数据库中是 JSON 数据格式的。\r\n\r\n![1542357146401](assets/1542357146401.png)\r\n\r\n数据库里存储的值是这样的\r\n\r\n![1542357265371](assets/1542357265371.png)\r\n\r\n如果我们想过滤出里面有 `82001` 的数据，我们应该这样请求\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"praiseUserIdList<>\":82001,\r\n        \"@column\":\"id,date,content,praiseUserIdList\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n结果是类似这样的，为了显示方便剔除了一些数据。\r\n\r\n```js\r\n{\r\n    \"[]\": [ // JavaScript/TypeScript/Python 中可用 data[\"[]\"] 来提取不符合变量名格式的 key 对应的 value，Java 等可以用 data.getJSONArray(\"[]\") 等。\r\n        \r\n        {\r\n            \"Moment\": {\r\n                \"date\": \"2017-02-08 16:06:11.0\",\r\n                \"id\": 32,\r\n                \"praiseUserIdList\": [\r\n                    38710,\r\n                    82002,\r\n                    82001\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"Moment\": {\r\n                \"content\": \"This is a Content...-435\",\r\n                \"date\": \"2017-02-01 19:14:31.0\",\r\n                \"id\": 58,\r\n                \"praiseUserIdList\": [\r\n                    38710,\r\n                    82003,\r\n                    82001\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"Moment\": {\r\n                \"content\": \"https://gss2.bdstatic.com/-fo3dSag_xIb.jpg\",\r\n                \"date\": \"2018-10-27 17:58:02.0\",\r\n                \"id\": 1540634282433,\r\n                \"praiseUserIdList\": [\r\n                    82001\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n\r\n\r\n##### 分页\r\n\r\n对于数量太多的数据，我们很多时候都需要分页操作，这时候我们可以用类似下面这样的请求\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"@column\":\"id,date,content,praiseUserIdList\"\r\n      },\r\n    \"page\": 0,\r\n    \"count\": 5\r\n  }\r\n}\r\n```\r\n\r\n请注意，这里的 `page` 和 `count` 是放在 `[] `内的属性，而不是 `Moment` 对象里。这里 `count` 表示每页的数量，`page` 表示第几页，页数从 0 开始算。\r\n\r\n也许你想看看这个请求对应的SQL语句\r\n\r\n```sql\r\nSELECT `id`,`date`,`content`,`praiseUserIdList` FROM `sys`.`Moment` LIMIT 5 OFFSET 0\r\n```\r\n\r\n这里`sys`是我自己的`schema`的名字，你的可能会有所不同。\r\n\r\n如果不想分页的，也提供了一套特殊的查询方式。这种查询方式有三种，请求方式类型这样\r\n\r\n```js\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"@column\":\"id,date,content,praiseUserIdList\"\r\n      },\r\n      \"query\": 2\r\n  },\r\n  \"total@\":\"/[]/total\" // key 里的 total 可改成 num 等几乎任意其它名称，还可以用 \"info@\": \"/[]/info\" 获取更详细的分页信息\r\n}\r\n```\r\n\r\n这里因为 `query` 的值是 2，所有会同时查询 `Moment` 表中的数据和总数。如果是 1 的话，则只会返回当前表的总数：\r\n\r\n```json\r\n{\"total\":59,\"code\":200,\"msg\":\"success\"}\r\n```\r\n\r\n\r\n\r\n数据库中的数量：\r\n\r\n![1544515879364](assets/1544515879364.png)\r\n\r\n\r\n\r\n当然，如果你添加了过滤条件，返回的数量就会是你所过滤的数量，比如：\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"@column\":\"id,date,content,praiseUserIdList\",\r\n        \"praiseUserIdList<>\":38710\r\n      },\r\n      \"query\": 1\r\n  },\r\n  \"total@\":\"/[]/total\"\r\n}\r\n```\r\n\r\n返回：\r\n\r\n```json\r\n{\"total\":12,\"code\":200,\"msg\":\"success\"}\r\n```\r\n\r\n\r\n\r\n##### 排序\r\n\r\n要使用排序的话，这样操作\r\n\r\n```json\r\n{\r\n  \"[]\": {\r\n      \"Moment\":{\r\n        \"@column\":\"id,date,content,praiseUserIdList\",\r\n        \"praiseUserIdList<>\":38710,\r\n        \"@order\":\"date-,id,content+\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n`\"@order\": \"date-,id,content+\"` 其中，字段的前后顺序表示字段排序的优先级。`id` 和 `id+` 是等价的，默认就是升序排列。`date-` 表示将 `date` 字段降序排列。\r\n\r\n##### 关联查询\r\n\r\n在讲解关联查询的时候，我们需要先了解下表之间的关系\r\n\r\n现在有两张表 Moment 和 User，两张表的关系是下面这样\r\n\r\n![1545468294295](assets/1545468294295.png)\r\n\r\nMOMENT表示动态，类似微信朋友圈、QQ 空间的动态，每一条动态会有一个发表动态的用户 User，所以 Moment 表里会有一个和 User 表的外键关联：Moment.userId = User.id。\r\n\r\n对于这样的数据关系，我们在查询动态时，很多时候我们会连带着用户一起查处来，这样又如何操作呢\r\n\r\n```js\r\n{\r\n  \"[]\": {\r\n    \"Moment\":{\r\n        \"@column\":\"id,date,userId\",\r\n        \"id\":12 // 注意 id 是主键，这个数组最多返回 1 条子项（如果 id=12 的表记录存在）\r\n    },\r\n    \"User\":{\r\n      \"id@\":\"/Moment/userId\", // 不要求物理外键，只要能关联即可\r\n      \"@column\":\"id,name\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n这个请求稍微复杂点，首先我们用 `[]` 对象表示我们是想查询出一个列表，这个列表包含两个部分 `Moment` 和 `User`。\r\n\r\n其中 `Moment` 是我们想要查询的主要内容，它的写法也和一般查询数据时无异。\r\n\r\n`User` 是与 `Moment` 相关联的数据，所以查询的时候我们需要用 `id@` 来表示他们之间的关联关系\r\n\r\n`/Moment/userId` 中，最开始的 `/` 相当于是指明了 `[]` 的位置，`/Moment` 表示 `[]` 对象下的 `Moemnt` 对象，`/Moment/userId` 表示 `Moment` 的 `userId` 字段是与 `User` 的 `id` 关联的。这是一种缺省引用路径，这里等价于完整引用路径 `[]/Moment/userId`。\r\n\r\n响应的数据：\r\n\r\n```json\r\n{\r\n    \"[]\": [\r\n        {\r\n            \"Moment\": {\r\n                \"date\": \"2017-02-08 16:06:11.0\",\r\n                \"id\": 12,\r\n                \"userId\": 70793\r\n            },\r\n            \"User\": {\r\n                \"id\": 70793,\r\n                \"name\": \"Strong\"\r\n            }\r\n        }\r\n    ],\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n\r\n\r\n##### 分组查询\r\n\r\n在了解分组查询之前，我们需要先了解下 APIJSON 所支持的部分常见函数：\r\n\r\n| 函数名 | 说明                       |\r\n| ------ | -------------------------- |\r\n| count  | 统计分组下，某字段的个数   |\r\n| sum    | 统计分组下，某字段的和     |\r\n| max    | 统计分组下，某字段的最大值 |\r\n| min    | 统计分组下，某字段的最小值 |\r\n| avg    | 统计分组下，某字段的平均值 |\r\n\r\n具体见 AbstractSQLConfig 中 SQL_FUNCTION_MAP 配置的所有 SQL 函数 ：\r\n\r\nhttps://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java#L286-L765\r\n\r\n比如，如果只是单纯的查出最大值，这样请求就可以了\r\n\r\n```json\r\n{\r\n  \"Moment\":{\r\n     \"@column\":\"max(id):maxid\"\r\n  }\r\n}\r\n```\r\n\r\n响应：\r\n\r\n```json\r\n{\r\n  \"Moment\": {\r\n     \"maxid\": 1541912160047\r\n  },\r\n  \"code\": 200,\r\n  \"msg\": \"success\"\r\n}\r\n```\r\n\r\n这里 `maxid` 是我们取的别名\r\n\r\n如果是有分组条件的，那我们需要使用 `@group`\r\n\r\n比如，像下面 Sale 表，这张表表示，2018年1月1日某公司门下的 3 个店铺（store_id）的营业额（amt）数据\r\n\r\n| id   | store_id | amt  |\r\n| ---- | -------- | ---- |\r\n| 1    | 1        | 100  |\r\n| 2    | 1        | 80   |\r\n| 3    | 2        | 30   |\r\n| 4    | 2        | 100  |\r\n| 5    | 3        | 210  |\r\n\r\n如果，我们想要计算出这天每个店铺一共卖了多少，我们通过 APIJSON 可以这样查询\r\n\r\n```\r\n{\r\n  \"[]\": {\r\n      \"Sale\":{\r\n        \"@column\":\"store_id;sum(amt):totAmt\", // 注意 SQL 函数要用分号 ; 隔开\r\n        \"@group\":\"store_id\"\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n#### C-1-4.登录\r\n\r\n如果没有登录，由于权限的限制，是需要登录的。\r\n\r\n登录地址 `http://localhost:8080/login` 或 `http://127.0.0.1:8080/login`，发送请求\r\n\r\n```json\r\n{\r\n  \"phone\": \"13000038710\",\r\n  \"password\":\"apijson\"\r\n}\r\n```\r\n\r\n账号和密码，可以到 `apijson_privacy` 里面查询\r\n\r\n#### C-1-5.测试新增\r\n\r\n接口地址：`http://localhost:8080/post`\r\n\r\n我们想新增一条备注时，发送这样的请求\r\n\r\n请求\r\n\r\n```json\r\n{\r\n \"Moment\":{\r\n      \"content\":\"今天天气不错，到处都是提拉米苏雪\",\r\n      \"userId\":38710\r\n },\r\n  \"tag\":\"Moment\"\r\n}\r\n```\r\n\r\n`tag` 是我们在 `Request` 表里面配置的 `tag` 字段。\r\n\r\n响应\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"code\": 200,\r\n        \"count\": 1,\r\n        \"id\": 1544520921923,\r\n        \"msg\": \"success\"\r\n    },\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n返回的 `id` 是新增的数据的新主键值\r\n\r\n#### C-1-4.测试修改\r\n\r\n接口地址：`http://localhost:8080/put`\r\n\r\n修改备注和新增类似\r\n\r\n请求\r\n\r\n```json\r\n{\r\n \"Moment\":{\r\n      \"id\":1544520921923,\r\n      \"content\":\"海洋动物数量减少，如果非吃不可，不点杀也是在保护它们\"\r\n },\r\n  \"tag\":\"Moment\"\r\n}\r\n```\r\n\r\n响应\r\n\r\n```json\r\n{\r\n    \"Moment\": {\r\n        \"code\": 200,\r\n        \"count\": 1,\r\n        \"id\": 1544520921923,\r\n        \"msg\": \"success\"\r\n    },\r\n    \"code\": 200,\r\n    \"msg\": \"success\"\r\n}\r\n```\r\n\r\n如果要对 `json` 类型操作的话，这样请求\r\n\r\n```json\r\n{\r\n \"Moment\":{\r\n      \"id\":1544520921923,\r\n      \"praiseUserIdList+\": [123]\r\n },\r\n  \"tag\":\"Moment\"\r\n}\r\n```\r\n\r\n这里的 `praiseUserIdList` 是一个 `json` 类型的字段，在操作之前它是空的 `[]`，提交以后它是 `[123]`，如果再添加一个 21，则会变成 `[123,21]`\r\n\r\n要删除其中的值，把 `+` 变成 `-` 即可。如果没有 `+`, `-` 符号，\"praiseUserIdList\": \\[123] 将直接替换原本的值，可能丢失数据。\r\n\r\n#### C-1-5.测试删除\r\n\r\n接口地址：`http://localhost:8080/delete`\r\n\r\n请求\r\n\r\n```json\r\n{\r\n \"Moment\":{\r\n      \"id\":1544520921923\r\n },\r\n  \"tag\":\"Moment\"\r\n}\r\n```\r\n\r\n### C-2.新增接口\r\n\r\n#### 1. 后台添加数据表\r\n\r\n在自己的数据库里新增一个表，比如我这里新增 `b_stone`\r\n\r\n```sql\r\n-- 原石\r\nCREATE TABLE `b_stone` (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `cost` int(10) NULL COMMENT '成本',\r\n  `price` int(10) NULL COMMENT '卖价',\r\n  `length` int(10) NULL,\r\n  `width`  int(10) NULL,\r\n  `height` int(10) NULL,\r\n  `weight` float(8,1) NULL,\r\n  `creationdate` datetime default CURRENT_TIMESTAMP COMMENT '创建时间',\r\n  `modifydate` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',\r\n  `modifier` varchar(80) NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n```\r\n\r\n#### 2. 配置权限\r\n\r\nAPIJSON 3.7.0  版开始，依赖了 apijson-framework.jar 的不需要写任何代码：\r\n\r\n##### 2.1）在 Access 表里加一行记录即可\r\n\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_access_config-small.jpg) \r\n\r\n<br />\r\n<br />\r\n\r\n~~如果低于 3.7.0 或者未依赖 apijson-framework.jar，而是直接依赖 apijson-orm.jar，则需要编写代码：~~\r\n\r\n##### ~~2.1）在 Model 中添加对象并配置权限~~\r\n\r\n~~项目的 model 目录下，新增一个类~~\r\n\r\n```java\r\npackage apijson.demo.server.model;\r\n\r\nimport zuo.biao.apijson.MethodAccess;\r\n\r\n@MethodAccess\r\npublic class Stone {\r\n}\r\n```\r\n\r\n~~注解`@MethodAccess`的配置，可以参考其他类~~\r\n\r\n\r\n\r\n~~由于我们的类名和数据库表名不一致，需要注册一下。如果一样就不需要了。~~\r\n\r\n~~设置数据库的实际表名 `DemoSQLConfig`，38 行~~\r\n\r\n```java\r\n//表名映射，隐藏真实表名，对安全要求很高的表可以这么做\r\n\tstatic {\r\n\t\tTABLE_KEY_MAP.put(User.class.getSimpleName(), \"apijson_user\");\r\n\t\tTABLE_KEY_MAP.put(Privacy.class.getSimpleName(), \"apijson_privacy\");\r\n\t\tTABLE_KEY_MAP.put(Stone.class.getSimpleName(), \"b_stone\"); // <--这一句\r\n\t}\r\n```\r\n\r\n\r\n\r\n~~注册权限是必须的，这样程序才能使用你配置的类权限去管理你的接口~~\r\n\r\n~~脚本 `DemoVerifier.java` 的 48 行~~\r\n\r\n```java\r\nstatic { //注册权限\r\n\t\tACCESS_MAP.put(User.class.getSimpleName(), getAccessMap(User.class.getAnnotation(MethodAccess.class)));\r\n....\r\n\t\tACCESS_MAP.put(Stone.class.getSimpleName(), getAccessMap(Stone.class.getAnnotation(MethodAccess.class)));\r\n\t}\r\n```\r\n\r\n<br />\r\n<br />\r\n\r\n#### 3. 接口管理Request表的配置\r\n![](https://raw.githubusercontent.com/TommyLemon/StaticResources/master/APIJSON/APIJSON_request_config-small.jpg) \r\n可这样设置 structure 字段来配置自动校验请求 JSON 参数： <br />\r\n```json\r\n\"VERIFY\":{\r\n  \"type{}\":[0,1,2]\r\n}\r\n```\r\n就能校验 type 的值是不是 0，1，2 中的一个。<br />\r\n还有 <br />\r\n```js\r\n\"VERIFY\": { \"money&{}\":\">0,<=10000\" }              //自动验证是否 money>0 & money<=10000\r\n\"TYPE\": { \"balance\": \"DECIMAL\" }                    //自动验证 balance 类型是否为 DECIMAL（对应 Double 双精度浮点数）\r\n\"UNIQUE\": \"phone\"                                  //强制 phone 的值为数据库中没有的\r\n\"NECESSARY\": \"id,name\"                             //强制传 id,name 两个字段\r\n\"DISALLOW\": \"balance\"                              //禁止传 balance 字段\r\n\"INSERT\": { \"@role\": \"OWNER\" }                     //如果没传 @role 就自动添加\r\n\"UPDATE\": { \"id@\": \"User/id\" }                     //强制放入键值对\r\n```\r\n全部操作符见 [Operation.java](https://github.com/Tencent/APIJSON/blob/master/APIJSONORM/src/main/java/apijson/orm/Operation.java) 的注释\r\n<br />\r\n<br />\r\n\r\n\r\n:first_quarter_moon_with_face:此处的介绍都只是简要介绍，只是为了引导刚刚接触 APIJSON 的道友快速了解 APIJSON，并不代表 APIJSON 只有这些功能，具体功能详情参考下列图表\r\n\r\n#### 4. 完整功能图表\r\nhttps://github.com/Tencent/APIJSON/blob/master/Document.md#3\r\n\r\n\r\n"
        }
      ]
    }
  ]
}