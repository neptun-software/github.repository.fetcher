{
  "metadata": {
    "timestamp": 1736708832417,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iBotPeaches/Apktool",
      "stars": 20697,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2001953125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.java]\nij_java_use_single_class_imports = true\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2568359375,
          "content": "* text=auto eol=lf\n\n*.bat text eol=crlf\n*.jar binary\n/brut.apktool/apktool-lib/src/main/resources/prebuilt/windows/* binary\n/brut.apktool/apktool-lib/src/main/resources/prebuilt/macosx/* binary\n/brut.apktool/apktool-lib/src/main/resources/prebuilt/linux/* binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.220703125,
          "content": "# Gradle\n.gradle/\nbin/\ngradle.properties\n\n# Build\n**/build/\n\n# Eclipse\n**/nbproject/private/\n*.project\n*.classpath\n*.settings\n*.setting\n\n# Tmp Files\n*.kate-swp\n*~\n*.DS_Store\n\n# IntelliJ\n*.iml\n.idea/*\n**/out/\n\n# Patches\n*.patch"
        },
        {
          "name": ".jitpack.yml",
          "type": "blob",
          "size": 0.1298828125,
          "content": "jdk:\n  - openjdk9\ninstall:\n  - echo \"This is not supported. See iBotPeaches/Apktool#2102\"\n  - ./gradlew invalid-command-to-crash-out\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.4931640625,
          "content": "# Apktool Contributors\n\nThis product includes software developed by:\n\n  * Connor Tumbleson (connor.tumbleson@gmail.com)\n  * Ryszard Wiśniewski (brut.alll@gmail.com)\n  * Google (https://github.com/google/smali)\n  * JesusFreke (https://github.com/JesusFreke/smali)\n  * Dmitry Skiba (https://code.google.com/p/android4me/)\n  * Tahseen Ur Rehman (https://code.google.com/p/radixtree/)\n  * Android Open Source Project (https://source.android.com/)\n  * The Apache Software Foundation (https://www.apache.org/)\n"
        },
        {
          "name": "INTERNAL.md",
          "type": "blob",
          "size": 13.328125,
          "content": "# Releasing a new version.\n\nThe steps taken for slicing an official release of Apktool.\n\n### Ensuring proper license headers\n\n_Currently broken after movement to kotlin dsl._\n\n### Tagging the release.\n\nInside `build.gradle` there are two lines.\n\n    version\n    suffix\n\nThe version variable should be left unchanged. If done correctly, it will already be the version\nyou are about to release. In this case `2.2.2`. The suffix variable should read `SNAPSHOT` as\nthe `2.2.2` release up until this point was `SNAPSHOT` releases (Unofficial).\n\nWe need to remove the `SNAPSHOT` portion and leave the minor version blank. An example can be\nfound [here](https://github.com/iBotPeaches/Apktool/commit/96b70d0be7513c5a1e5d3a3b9a75e4e2b076ad79).\n\nAfter we remove `SNAPSHOT` we need to make the version commit. Organization and following patterns\nis crucial here. This commit should have 1 change only - the change above. Now commit this change\nwith the commit message - `version bump (x.x.x)`.\n\nAt this point we now have the commit of the release, but we need to tag it using the following message.\n\n    git tag -a vx.x.x -m \"changed version to vx.x.x\" -s\n\nFor example for the `2.2.1` release.\n\n    git tag -a v2.2.1 -m \"changed version to v2.2.1\" -s\n\n### Prepare for publishing.\n\nNew to Apktool is publishing releases to Maven, so plugin authors can directly integrate. You\nneed a `gradle.properties` file in root with the structure:\n\n```\nsigning.keyId={gpgKeyId}\nsigning.password={gpgPassphrase}\nsigning.secretKeyRingFile={gpgSecretKingRingLocation}\n\nossrhUsername={sonatypeUsername}\nossrhPassword={sonatypePassword}\n```\n\nRelease with maven with `./gradlew build shadowJar release publish`.\n\n### Building the binary.\n\nIn order to maintain a clean slate. Run `gradlew clean` to start from a clean slate. Now lets build\nthe new binary version. We should not have any new commits since the tagged commit.\n\n    ./gradlew build shadowJar proguard release\n\nThe build should tell you what version you are building and it should match the commits you made previously.\n\n    ➜ Apktool git:(master) ./gradlew build shadowJar proguard release\n    Building RELEASE (master): 2.2.2\n\n### Testing the binary.\n\nNow the release binary is built in the same location as all other builds. Run this version against\nsome of the fixed bugs in this release. This is a simple test to ensure the build had no errors.\n\nCopy the jar to any location to prep for uploading. The pattern we name the jars is\n\n    apktool_x.x.x.jar\n\nOr in the case of the last release - `apktool_2.2.1.jar`\n\nOnce you have the jar in this form. Record the md5 hash & sha256 hash of it. This can be done using `md5sum`\nand `sha256sum` on unix systems.\n\nThis can be shown for the `2.2.2` release like so\n\n    ➜  Desktop md5sum apktool_2.2.2.jar\n    1e6be08d3f9bb4b442bb85cf4e21f1c1  apktool_2.2.2.jar\n\n    ➜  Desktop sha256sum apktool-2.2.2.jar\n    1f1f186edcc09b8677bc1037f3f812dff89077187b24c8558ca2a89186ea3251  apktool-2.2.2.jar\n\nRemember these hashes. These are the local hashes. These are our master hashes. All others (Bitbucket, Backup)\nmust match these. If they do not - they are invalid.\n\n### Lets get uploading.\n\nLets make sure we actually pushed these release changes to the repo (Both Github & Bitbucket)\n\n    git push origin master\n    git push origin vx.x.x\n\n    git push bitbucket master\n    git push bitbucket vx.x.x\n\nWe upload the binaries into 3 places.\n\n1. [Bitbucket Downloads](https://bitbucket.org/iBotPeaches/apktool/downloads)\n2. [Github Releases](https://github.com/iBotPeaches/Apktool/releases) - Since `2.2.1`.\n3. [Backup Mirror](https://connortumbleson.com/apktool/)\n4. [Sonatype (Maven)](https://oss.sonatype.org)\n\n#### Bitbucket\n\nThis one is pretty easy. Head to the URL attached to the hyperlink #1 above. There will be a \"Add Files\"\nbutton on the top right of the page. Upload the `apktool_x.x.x.jar` file.\n\nAfter it is uploaded. Immediately visit the page and download it. Check the `md5` for a match.\n\n#### GitHub\n\nThis option will not work until the tag is pushed. You can head to this [page](https://github.com/iBotPeaches/Apktool/releases/new)\nto draft a new release. The `Tag version` dropdown will have the new tag. In this case `v2.2.2`.\n\nSelect that option and make the title `Apktool vx.x.x`. There will be a description field on this release.\nHold tight, we link the release blog post in this field, but we can edit the release after the fact to add this.\n\nUpload the binary `apktool_x.x.x.jar` and submit the release.\n\n#### Backup Server\n\nAccess to this server is probably limited so this option may not be possible. SSH into the\n`connortumbleson.com` server with username `connor`. Head to `public_html/apktool` and upload\nthe `apktool_x.x.x.jar` to it.\n\nNow re-generate the md5/sha256 hashes for these files.\n\n    md5sum *.jar > md5.md5sum\n    sha256 *.jar > sha256.shasum\n\nCheck the `md5.md5sum` file for the hashes. The file will look something like this.\n\n    6de3e097943c553da5db2e604bced332  apktool_1.4.10.jar\n    ...\n    1e6be08d3f9bb4b442bb85cf4e21f1c1  apktool_2.2.2.jar\n\nAdditionally check the `sha256.shasum` file for the hashes. This file will look almost identical to the above\nexcept for containing sha256 hashes.\n\nThe hashes match so we are good with the backup server.\n\n#### Sonatype\n\nYou'll want to log in and view the Staging repositories and confirm you see the recently made build. You'll want to:\n\n * Close it (Wait for audit report email)\n * Release it (Drop the staging repository)\n * Wait 20min - 2 hours for it to appear [here](https://mvnrepository.com/artifact/org.apktool/apktool-lib)\n\nWith those done, time to get writing the release post.\n\nWe currently blog the releases on the [Connor Tumbleson personal blog](https://connortumbleson.com/).\nThis may change and the formatting of these release posts change over time.\n\nSome recent releases for understanding the pattern can be found below.\n\n1. [2.2.1](https://connortumbleson.com/2016/10/18/apktool-v2-2-1-released/)\n2. [2.2.0](https://connortumbleson.com/2016/08/07/apktool-v2-2-0-released/)\n3. [2.0.2](https://connortumbleson.com/2015/10/12/apktool-v2-0-2-released/)\n4. [2.0.0](https://connortumbleson.com/2015/04/20/apktool-v2-0-0-released/)\n\nFor obtaining commit authors and counts. The following command does the legwork:\n\n    git shortlog -s -n --all --no-merges --since=\"05 Sept 2018\"\n\nObviously replacing the date with the release date of the last version.\n\nSo write the post. I tend to always include the following:\n\n1. Image of release for featured image when reshared on socials.\n2. Quick sentence or two for SEO to describe the meat of this release.\n3. Commit count and total for this release with author names.\n4. Changelog linking to the bugs that were fixed.\n5. Download including the md5/sha256 hash.\n6. Link dump to Project Site, GitHub, Bug Tracker and XDA Thread.\n\nNow that you've written this post. We need to go post it in places and update places where\nApktool is released.\n\n### XDA Thread\n\nWe have a [thread](https://forum.xda-developers.com/showthread.php?t=1755243) on XDA Developers.\nThis thread follows the same pattern for all releases.\n\nWhen writing a response to the XDA thread we follow another pattern of release notes. These examples\ncan be found below:\n\n1. [2.2.2](https://forum.xda-developers.com/showpost.php?p=70687935&postcount=4635)\n2. [2.2.1](http://forum.xda-developers.com/showpost.php?p=69188139&postcount=4478)\n3. [2.0.0](http://forum.xda-developers.com/showpost.php?p=60255972&postcount=3063)\n\n### Apktool Website\n\nThe Apktool project website has a few locations to update:\n\n1. The homepage intro\n2. The download link in header\n3. Migrating `unreleased.mx` to a new blog post.\n\nThe easiest way to describe this is to just link to a [previous release](https://github.com/iBotPeaches/Apktool/pull/3146/files).\n\n### Update Milestones\n\nNow that we've released a version, we should hopefully have no more tickets in the release just published.\nIf there are, move those tickets to the next milestone.\n\nYou can head to [milestones](https://github.com/iBotPeaches/Apktool/milestones) to close the just\nreleased version and create another.\n\nI tend to create the next release (In this case `2.2.3`) with an ETA of 3 months in the future. This\nis just a guideline but helps me to release a new version every 3 months.\n\n### Social Spam\n\nThe final step is to send this release into the wild via some social posting. Head to the blog\nwhere the release post was and send that link to Twitter, Google and whatever else you use.\n\nRelax and watch the bug tracker.\n\n# Building aapt2 binaries.\n\n> [!WARNING]\n> aapt (aapt1) is deprecated and no longer receives updates.\n\nThe steps taken for building our modified aapt2 binaries for apktool.\n\n### Getting the modified `frameworks/base` repo.\nFirst step is using the [platform_frameworks_base](https://github.com/iBotPeaches/platform_frameworks_base) repo.\n\nWhile previously unorganized, the repo now follows the branch naming convention depending on the current Android version.\nSo `apktool_7.1` corresponds to the 7.1 Android release. This branch should work for all `android-7.1.x` tags for AOSP.\n\nWe didn't follow this naming convention until Android 7.1. So don't go looking for older versions. The current version\nis `apktool-9.0.0`, which corresponds to the Android 9.0 (Pie) release.\n\nThis repo has a variety of changes applied. These changes range from disabling optimizations to lessening the rules\nthat aapt regularly has. We do this because apktool's job is to not fix apks, but rather keep them as close to the\noriginal as they were.\n\n### First we need the AOSP source\n\nAs cheesy as it is, just follow this [downloading](https://source.android.com/source/downloading.html) link in order\nto get the source downloaded. This is no small download, expect to use 150-250GB.\n\nSome optimization techniques for a smaller clone:\n\n * `~/bin/repo init -u https://android.googlesource.com/platform/manifest -b master --partial-clone` - Partial clone\n * `repo sync -c` - Only current branch\n\nAfter that, you need to build AOSP via this [documentation](https://source.android.com/source/building.html) guide. Now\nwe aren't building the entire AOSP package, the initial build is to just see if you are capable of building it.\n\nWe check out a certain tag or branch. Currently, we use\n\n * aapt2 - `android-14.0.0_r54`\n * aapt1 - `android-14.0.0_r2` (deprecated)\n\n### Including our modified `frameworks/base` package.\n\nThere is probably a more automated way to do this, but for now:\n\n1. `cd frameworks/base`\n2. `git remote add origin git@github.com:iBotPeaches/platform_frameworks_base.git`\n3. `git fetch origin -v`\n4. `git checkout origin/master`\n\n#### Mac Patch\n\nNormally you'll be building this on a recent Mac OS that isn't supported. You'll want to follow these steps:\n\n1. `vim build/soong/cc/config/darwin_host.go`\n2. Find `darwinSupportedSdkVersions` array.\n3. Add number that corresponds to output of: `find /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs -iname \"*.sdk\"`\n\n### Building the aapt1 (Legacy) binary.\n\nThe steps below are different per flavor and operating system.\n\n#### Linux / Windows\n1. `source build/envsetup.sh`\n2. `lunch aosp_arm64-trunk_staging-eng`\n3. `m aapt`\n4. `strip out/host/linux-x86/bin/aapt`\n5. `strip out/host/linux-x86/bin/aapt_64`\n6. `strip out/host/windows-x86/bin/aapt.exe`\n7. `strip out/host/windows-x86/bin/aapt_64.exe`\n\n#### Mac\n1. `source build/envsetup.sh`\n2. `m aapt`\n3. `strip out/host/darwin-x86/bin/aapt_64`\n\n32/64 bit binaries will be built for Linux and Windows.\n\n### Building the aapt2 binary.\n\nThe steps below are different per flavor and operating system.\n\n#### Linux / Windows\n1. `source build/envsetup.sh`\n1. `lunch aosp_arm64-trunk_staging-eng`\n1. `m aapt2`\n1. `strip out/host/linux-x86/bin/aapt2`\n1. `strip out/host/linux-x86/bin/aapt2_64`\n1. `strip out/host/windows-x86/bin/aapt2.exe`\n1. `strip out/host/windows-x86/bin/aapt2_64.exe`\n\n#### Mac\n1. `export ANDROID_JAVA_HOME=/Path/To/Jdk`\n1. `source build/envsetup.sh`\n1. `lunch aosp_arm64-trunk_staging-eng`\n1. `m aapt2`\n1. `strip out/host/darwin-x86/bin/aapt2_64`\n\n#### Confirming aapt/aapt2 builds are static\n\nThere are some issues with some dependencies (namely `libc++`) in which they are built in the shared state. This is\nalright in the scope and context of AOSP/Android Studio, but once you leave those two behind and start using aapt on\nits own, you encounter some issues. The key is to force `libc++` to be built statically which takes some tweaks with the\nAOSP build systems as that dependency isn't standard like `libz` and others.\n\nYou can test the finalized project using tools like `ldd` (unix) and `otool -L` (mac) for testing the binaries looking\nfor shared dependencies.\n\n# Gradle Tips n Tricks\n\n    ./gradlew build shadowJar proguard -x test\n\nThis skips the testing suite (which currently takes 2-4 minutes). Use this when making quick builds and save the testing\nsuite before pushing to GitHub.\n\n    ./gradlew test --debug-jvm\n\nThis enables debugging on the test suite. This starts the debugger on port 5005 which you can connect with IntelliJ.\n\n    ./gradlew :brut.apktool:apktool-lib:test ---tests \"*BuildAndDecodeTest\"\n\nThis runs the library project of Apktool, selecting a specific test to run. Comes in handy when writing a new test and\nonly wanting to run that one. The asterisk is used to the full path to the test can be ignored. You can additionally\nmatch this with the debugging parameter to debug a specific test. This command can be found below.\n\n    ./gradlew :brut.apktool:apktool-lib:test --tests \"*BuildAndDecodeTest\" --debug-jvm\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 10.513671875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2010 Ryszard Wiśniewski\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2763671875,
          "content": "### Apktool\n**This is the repository for Apktool. The website is on the [Apktool docs branch](https://github.com/iBotPeaches/Apktool/tree/docs).**\n\n[![CI](https://github.com/iBotPeaches/Apktool/actions/workflows/build.yml/badge.svg)](https://github.com/iBotPeaches/Apktool/actions/workflows/test.yml)\n[![Software License](https://img.shields.io/badge/license-Apache%202.0-brightgreen.svg)](https://github.com/iBotPeaches/Apktool/blob/master/LICENSE.md)\n\nApktool is a tool for reverse engineering third-party, closed, binary, Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes it possible to debug smali code step-by-step. It also makes working with apps easier thanks to project-like file structure and automation of some repetitive tasks such as building apk, etc.\n\nApktool is **NOT** intended for piracy and other non-legal uses. It could be used for localizing and adding features, adding support for custom platforms, and other GOOD purposes. Just try to be fair with the authors of an app, that you use and probably like.\n\n#### Support\n- [Project Page](https://ibotpeaches.github.io/Apktool/)\n- [#apktool on libera.chat](https://web.libera.chat/)\n\n#### Security Vulnerabilities\n\nIf you discover a security vulnerability within Apktool, please send an e-mail to Connor Tumbleson at connor.tumbleson(at)gmail.com. All security vulnerabilities will be promptly addressed.\n\n#### Links\n- [Downloads](https://bitbucket.org/iBotPeaches/apktool/downloads)\n- [Downloads Mirror](https://connortumbleson.com/apktool/)\n- [How to Build](https://ibotpeaches.github.io/Apktool/build/)\n- [Documentation](https://ibotpeaches.github.io/Apktool/documentation/)\n- [Bug Reports](https://github.com/iBotPeaches/Apktool/issues)\n- [Changelog/Information](https://ibotpeaches.github.io/Apktool/changes/)\n- [XDA Post](https://forum.xda-developers.com/t/util-dec-2-2020-apktool-tool-for-reverse-engineering-apk-files.1755243/)\n- [Source (Github)](https://github.com/iBotPeaches/Apktool)\n- [Source (Bitbucket)](https://bitbucket.org/iBotPeaches/apktool/)\n\n\n## Sponsors\n\nSpecial thanks goes to the following sponsors:\n\n### Sourcetoad\n[Sourcetoad](https://sourcetoad.com/) is an award-winning software and app development firm committed to the co-creation of technology solutions that solve complex business problems, delight users, and help our clients achieve their goals.\n\n<a href=\"https://www.sourcetoad.com\" alt=\"Sourcetoad\">\n    <picture>\n        <img src=\"https://github.com/ibotpeaches/apktool/raw/master/.github/assets/sponsors/sourcetoad-horizontal.svg\">\n    </picture>\n</a>\n\n### Emerge Tools\n\n[Emerge Tools](https://www.emergetools.com) is a suite of revolutionary products designed to supercharge mobile apps and the teams that build them.\n\n<a href=\"https://www.emergetools.com\" alt=\"Emerge Tools\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/ibotpeaches/apktool/raw/master/.github/assets/sponsors/emerge-tools-vertical-white.svg\">\n        <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/ibotpeaches/apktool/raw/master/.github/assets/sponsors/emerge-tools-vertical-black.svg\">\n        <img src=\"https://github.com/ibotpeaches/apktool/raw/master/.github/assets/sponsors/emerge-tools-vertical-black.svg\">\n    </picture>\n</a>\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 3.2509765625,
          "content": "## Automatic Remapping of ResourceId\nWe currently prevent resourceIds from changing, by utilizing the `public.xml` file which makes the resources public, but\nthen prevents them to be used in some locations (`android:scheme`). The correct fix would be to record the resourceIds\nand use dexlib2 (no regular expressions) to rewrite them to the new resourceId after the `resources.arsc` is built.\n\nThis would be a lookup table of old->new resourceIds leveraging the API of dexlib2 to do the replacement. Doing this\nproperly would nullify the need to do [#191](https://github.com/iBotPeaches/Apktool/issues/191)\n\nSuggestions: [#244](https://github.com/iBotPeaches/Apktool/issues/244)\nDiscussions: [#2062](https://github.com/iBotPeaches/Apktool/issues/2062)\n\n## Implicit Qualifiers Cleanup\nCurrently we have a mismatch between reading the folders and reading the qualifiers which leads to a mismatch between\nimplicit qualifiers like version (-v4, v13, etc).\n\nThis was first spotted in bug [#1272](https://github.com/iBotPeaches/Apktool/issues/1272).\n\nThis was attempted to be fixed in [!1758](https://github.com/iBotPeaches/Apktool/pull/1758/files), but had to be\nreverted due to [this](https://github.com/iBotPeaches/Apktool/issues/1272#issuecomment-379345005).\n\nSuggestions: [#2237](https://github.com/iBotPeaches/Apktool/issues/2237)\n\n## Qualifier Plugin System\nFor some OEMs, past and present. They re-use qualifiers that AOSP ends up using. This with CTS is becoming very\nrare and pretty much a problem of the past, but now custom modifications and more \"off the cuff\" OEMs are doing\nit.\n\nApktool can't do anything because it stays true to AOSP. It would need a plugin system that controls how to\nread the qualifiers. Or even an override file.\n\nSuggestions: [#1420](https://github.com/iBotPeaches/Apktool/issues/1420), [#2474](https://github.com/iBotPeaches/Apktool/issues/2474)\n\n## Non-reference Resources\nSome applications may shove resources into the /res folder, but have no references to them. Apktool follows\nthe resource table, so these files are effectively abandoned.\n\nCrawling the filesystem for non-checked files would be slow especially having to cross check with already\nparsed files.\n\nSuggestions: [#1366](https://github.com/iBotPeaches/Apktool/issues/1366)\n\n## Multi-threaded\nApplications are getting larger as well as frameworks, but Apktool is getting slower.\n\nSuggestions: [#2685](https://github.com/iBotPeaches/Apktool/issues/2685)\n\n## Android Support\nFolks have requested running Apktool on device itself. This has been a challenge due to the arch requirements\nthat would be placed on the aapt2/aapt binaries.\n\nSuggestions: [#2811](https://github.com/iBotPeaches/Apktool/issues/2811)\n\n## Split APK Support\nApplications are further getting split on qualifiers. Apktool has been built on the assumption of one apk.\n\nSuggestions: [#2283](https://github.com/iBotPeaches/Apktool/issues/2283), [#2218](https://github.com/iBotPeaches/Apktool/issues/2218), [#2880](https://github.com/iBotPeaches/Apktool/issues/2880)\n\n## Dummy Resources\nFolks want the ability to stop the auto generation of dummy resources.\n\nSuggestions: [#2683](https://github.com/iBotPeaches/Apktool/issues/2683), [#2104](https://github.com/iBotPeaches/Apktool/issues/2104)\nPull Request(s): [#2463](https://github.com/iBotPeaches/Apktool/pull/2463)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.234375,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you discover a security vulnerability within Apktool, please send an e-mail to Connor Tumbleson at connor.tumbleson(at)gmail.com. \nAll security vulnerabilities will be promptly addressed.\n"
        },
        {
          "name": "brut.apktool",
          "type": "tree",
          "content": null
        },
        {
          "name": "brut.j.common",
          "type": "tree",
          "content": null
        },
        {
          "name": "brut.j.dir",
          "type": "tree",
          "content": null
        },
        {
          "name": "brut.j.util",
          "type": "tree",
          "content": null
        },
        {
          "name": "brut.j.xml",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 4.8974609375,
          "content": "import java.io.ByteArrayOutputStream\n\nval version = \"2.10.1\"\nval suffix = \"SNAPSHOT\"\n\n// Strings embedded into the build.\nvar gitRevision by extra(\"\")\nvar apktoolVersion by extra(\"\")\n\ndefaultTasks(\"build\", \"shadowJar\", \"proguard\")\n\n// Functions\nval gitDescribe: String? by lazy {\n    val stdout = ByteArrayOutputStream()\n    try {\n        rootProject.exec {\n            commandLine(\"git\", \"describe\", \"--tags\")\n            standardOutput = stdout\n        }\n        stdout.toString().trim().replace(\"-g\", \"-\")\n    } catch (e: Exception) {\n        null\n    }\n}\n\nval gitBranch: String? by lazy {\n    val stdout = ByteArrayOutputStream()\n    try {\n        rootProject.exec {\n            commandLine(\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n            standardOutput = stdout\n        }\n        stdout.toString().trim()\n    } catch (e: Exception) {\n        null\n    }\n}\n\nif (\"release\" !in gradle.startParameter.taskNames) {\n    val hash = this.gitDescribe\n\n    if (hash == null) {\n        gitRevision = \"dirty\"\n        apktoolVersion = \"$version-dirty\"\n        project.logger.lifecycle(\"Building SNAPSHOT (no .git folder found)\")\n    } else {\n        gitRevision = hash\n        apktoolVersion = \"$hash-SNAPSHOT\"\n        project.logger.lifecycle(\"Building SNAPSHOT ($gitBranch): $gitRevision\")\n    }\n} else {\n    gitRevision = \"\"\n    apktoolVersion = if (suffix.isNotEmpty()) \"$version-$suffix\" else version;\n    project.logger.lifecycle(\"Building RELEASE ($gitBranch): $apktoolVersion\")\n}\n\nplugins {\n    `java-library`\n    `maven-publish`\n    signing\n}\n\ntasks.withType<JavaCompile> {\n    options.compilerArgs.add(\"-Xlint:-options\")\n    options.compilerArgs.add(\"--release 8\")\n\n    options.encoding = \"UTF-8\"\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        google()\n    }\n}\n\nsubprojects {\n    apply(plugin = \"java\")\n    apply(plugin = \"java-library\")\n\n    java {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n\n    val mavenProjects = arrayOf(\"brut.j.common\", \"brut.j.util\", \"brut.j.dir\", \"brut.j.xml\", \"apktool-lib\", \"apktool-cli\")\n\n    if (project.name in mavenProjects) {\n        apply(plugin = \"maven-publish\")\n        apply(plugin = \"signing\")\n\n        java {\n            withJavadocJar()\n            withSourcesJar()\n        }\n\n        publishing {\n            repositories {\n                maven {\n                    url = if (suffix.contains(\"SNAPSHOT\")) {\n                        uri(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n                    } else {\n                        uri(\"https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/\")\n                    }\n                    credentials {\n                        username = (project.properties[\"ossrhUsername\"] ?: \"\").toString()\n                        password = (project.properties[\"ossrhPassword\"] ?: \"\").toString()\n                    }\n                }\n            }\n            publications {\n                register(\"mavenJava\", MavenPublication::class) {\n                    from(components[\"java\"])\n                    groupId = \"org.apktool\"\n                    artifactId = project.name\n                    version = apktoolVersion\n\n                    pom {\n                        name = \"Apktool\"\n                        description = \"A tool for reverse engineering Android apk files.\"\n                        url = \"https://apktool.org\"\n\n                        licenses {\n                            license {\n                                name = \"The Apache License 2.0\"\n                                url = \"https://opensource.org/licenses/Apache-2.0\"\n                            }\n                        }\n                        developers {\n                            developer {\n                                id = \"iBotPeaches\"\n                                name = \"Connor Tumbleson\"\n                                email = \"connor.tumbleson@gmail.com\"\n                            }\n                            developer {\n                                id = \"brutall\"\n                                name = \"Ryszard Wiśniewski\"\n                                email = \"brut.alll@gmail.com\"\n                            }\n                        }\n                        scm {\n                            connection = \"scm:git:git://github.com/iBotPeaches/Apktool.git\"\n                            developerConnection = \"scm:git:git@github.com:iBotPeaches/Apktool.git\"\n                            url = \"https://github.com/iBotPeaches/Apktool\"\n                        }\n                    }\n                }\n            }\n        }\n\n        tasks.withType<Javadoc>() {\n            (options as StandardJavadocDocletOptions).addStringOption(\"Xdoclint:none\", \"-quiet\")\n        }\n\n        signing {\n            sign(publishing.publications[\"mavenJava\"])\n        }\n    }\n}\n\ntask(\"release\") {\n  // Used for official releases.\n}\n\ntasks.wrapper {\n    distributionType = Wrapper.DistributionType.ALL\n}\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.48828125,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.759765625,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.2412109375,
          "content": "rootProject.name = \"apktool-cli\"\ninclude(\"brut.j.common\", \"brut.j.util\", \"brut.j.dir\", \"brut.j.xml\", \"brut.apktool:apktool-lib\", \"brut.apktool:apktool-cli\")\n\ndependencyResolutionManagement {\n    versionCatalogs {\n        create(\"libs\") {}\n    }\n}\n"
        }
      ]
    }
  ]
}