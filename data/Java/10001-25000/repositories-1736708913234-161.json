{
  "metadata": {
    "timestamp": 1736708913234,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "clojure/clojure",
      "stars": 10511,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.109375,
          "content": "*.jar\ntarget\nclojure.iws\nclojure.ipr\nnbproject/private/\nmaven-classpath\nmaven-classpath.properties\n.idea/\n*.iml\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.412109375,
          "content": "Hi! Thanks for your interest in Clojure!\n\n## I want to ask a question\n\nIf you have a question about Clojure, please use the official Ask Clojure forum at https://ask.clojure.org. This forum is monitored by the Clojure maintainers.\n\n## I want to discuss an idea\n\nThere are many interactive Clojure forums for discussion and you can find a list at [Clojure Discussion](https://clojure.org/community/resources#_clojure_discussion).\n\n## I want to file a bug / suggest an enhancement\n\nPlease file it as a question on https://ask.clojure.org with the tag \"problem\" (possible bugs) or \"request\" (enhancements).\n\n## I want to provide a patch / PR\n\nIf you would like to contribute patches, the Clojure dev process is described in detail at https://clojure.org/dev.\n\nIn short, this process requires:\n\n- [Signing the Contributor Agreement](https://clojure.org/dev/contributor_agreement)\n- [Requesting jira access](https://clojure.atlassian.net/servicedesk/customer/portal/1)\n\nThis project does not accept pull requests.\n\n## I am looking for official documentation\n\nYou can find official documentation on the Clojure web site:\n\n* Reference docs https://clojure.org/reference\n* Tutorials and guides: https://clojure.org/guides\n* API: https://clojure.org/api/api\n\n## What release should I use?\n\nFind the current release info here:\n\nhttps://clojure.org/releases/downloads\n\nA list of all releases can be found here:\n\nhttps://clojure.org/releases/downloads_older\n"
        },
        {
          "name": "antsetup.sh",
          "type": "blob",
          "size": 0.26953125,
          "content": "#!/bin/bash\n\nmvn -q dependency:build-classpath -Dmdep.outputFile=maven-classpath\ncat <<EOF >maven-classpath.properties \nmaven.compile.classpath=`cat maven-classpath`\nmaven.test.classpath=`cat maven-classpath`\nEOF\necho \"Wrote maven-classpath.properties for standalone ant use\"\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 8.439453125,
          "content": "<project name=\"clojure\" default=\"all\">\n\n  <description>\n    Build with \"ant\" and then start the\n    REPL with: \"java -cp clojure.jar clojure.main\".\n  </description>\n\n  <property name=\"src\" location=\"src\"/>\n  <property name=\"test\" location=\"test\"/>\n  <property name=\"jsrc\" location=\"${src}/jvm\"/>\n  <property name=\"jtestsrc\" location=\"${test}/java\"/>\n  <property name=\"cljsrc\" location=\"${src}/clj\"/>\n  <property name=\"cljscript\" location=\"${src}/script\"/>\n  <property name=\"test-script\" location=\"${cljscript}/run_test.clj\"/>\n  <property name=\"test-generative-script\" location=\"${cljscript}/run_test_generative.clj\"/>\n  <property name=\"compile-script\" location=\"${cljscript}/bootstrap_compile.clj\"/>\n  <property name=\"target\" location=\"target\"/>\n  <property name=\"build\" location=\"${target}/classes\"/>\n  <property name=\"test-classes\" location=\"${target}/test-classes\"/>\n  <property name=\"dist\" location=\"dist\"/>\n  <property file=\"maven-classpath.properties\"/>\n\n  <!-- Get the version string out of the POM -->\n  <xmlproperty file=\"pom.xml\" prefix=\"pom\"/>\n  <property name=\"clojure.version.label\" value=\"${pom.project.version}\"/>\n  <property name=\"version.properties\" value=\"${build}/clojure/version.properties\"/>\n\n  <property name=\"clojure_jar\" location=\"clojure-${clojure.version.label}.jar\"/>\n  <property name=\"clojure_noversion_jar\" location=\"clojure.jar\"/>\n\n  <property name=\"directlinking\" value=\"true\"/>\n\n  <target name=\"init\" depends=\"clean\">\n    <tstamp/>\n    <mkdir dir=\"${build}\"/>\n    <mkdir dir=\"${build}/clojure\"/>\n    <echo file=\"${version.properties}\">version=${clojure.version.label}</echo>\n  </target>\n\n  <target name=\"compile-java\" depends=\"init\"\n          description=\"Compile Java sources.\">\n    <javac srcdir=\"${jsrc}\" destdir=\"${build}\" includeJavaRuntime=\"yes\"\n           includeAntRuntime=\"false\"\n           debug=\"true\" source=\"1.8\" target=\"1.8\"/>\n  </target>\n\n  <target name=\"compile-clojure\"\n          description=\"Compile Clojure sources.\">\n    <java classname=\"clojure.lang.Compile\"\n          classpath=\"${maven.compile.classpath}:${build}:${cljsrc}\"\n          failonerror=\"true\"\n          fork=\"true\">\n      <sysproperty key=\"clojure.compile.path\" value=\"${build}\"/>\n         <!--<sysproperty key=\"clojure.compiler.elide-meta\" value=\"[:doc :file :line :added]\"/>-->\n         <!--<sysproperty key=\"clojure.compiler.disable-locals-clearing\" value=\"true\"/>-->\n       <!--<sysproperty key=\"clojure.compile.warn-on-reflection\" value=\"true\"/>-->\n        <sysproperty key=\"clojure.compiler.direct-linking\" value=\"true\"/>\n      <sysproperty key=\"java.awt.headless\" value=\"true\"/>\n      <arg value=\"clojure.core\"/>\n      <arg value=\"clojure.core.protocols\"/>\n      <arg value=\"clojure.core.server\"/>\n      <arg value=\"clojure.main\"/>\n      <arg value=\"clojure.set\"/>\n      <arg value=\"clojure.edn\"/>\n      <arg value=\"clojure.xml\"/>\n      <arg value=\"clojure.zip\"/>\n      <arg value=\"clojure.inspector\"/>\n      <arg value=\"clojure.walk\"/>\n      <arg value=\"clojure.stacktrace\"/>\n      <arg value=\"clojure.template\"/>\n      <arg value=\"clojure.test\"/>\n      <arg value=\"clojure.test.tap\"/>\n      <arg value=\"clojure.test.junit\"/>\n      <arg value=\"clojure.pprint\"/>\n      <arg value=\"clojure.java.io\"/>\n      <arg value=\"clojure.repl\"/>\n      <arg value=\"clojure.java.browse\"/>\n      <arg value=\"clojure.java.javadoc\"/>\n      <arg value=\"clojure.java.shell\"/>\n      <arg value=\"clojure.java.process\"/>\n      <arg value=\"clojure.java.browse-ui\"/>\n      <arg value=\"clojure.java.basis.impl\"/>\n      <arg value=\"clojure.java.basis\"/>\n      <arg value=\"clojure.string\"/>\n      <arg value=\"clojure.data\"/>\n      <arg value=\"clojure.reflect\"/>\n      <arg value=\"clojure.datafy\"/>\n      <arg value=\"clojure.instant\"/>\n      <arg value=\"clojure.uuid\"/>\n      <arg value=\"clojure.core.reducers\"/>\n      <arg value=\"clojure.math\"/>\n      <arg value=\"clojure.tools.deps.interop\"/>\n      <arg value=\"clojure.repl.deps\"/>\n    </java>\n  </target>\n\n  <target name=\"compile-tests\" \n          description=\"Compile the subset of tests that require compilation.\"\n          unless=\"maven.test.skip\">\n    <mkdir dir=\"${test-classes}\"/>\n    <javac srcdir=\"${jtestsrc}\" destdir=\"${test-classes}\" includeJavaRuntime=\"yes\"\n           debug=\"true\" source=\"1.8\" target=\"1.8\" includeantruntime=\"no\"/>\n    <echo>Direct linking = ${directlinking}</echo>\n    <java classname=\"clojure.lang.Compile\"\n          classpath=\"${test-classes}:${test}:${build}:${cljsrc}:${maven.test.classpath}\"\n          failonerror=\"true\"\n\t  fork=\"true\">\n      <sysproperty key=\"clojure.compile.path\" value=\"${test-classes}\"/>\n        <!--<sysproperty key=\"clojure.compiler.elide-meta\" value=\"[:doc]\"/>-->\n        <!--<sysproperty key=\"clojure.compiler.disable-locals-clearing\" value=\"true\"/>-->\n      <sysproperty key=\"clojure.compiler.direct-linking\" value=\"${directlinking}\"/>\n      <arg value=\"clojure.test-clojure.protocols.examples\"/>\n      <arg value=\"clojure.test-clojure.proxy.examples\"/>\n      <arg value=\"clojure.test-clojure.genclass.examples\"/>\n      <arg value=\"clojure.test-clojure.compilation.load-ns\"/>\n      <arg value=\"clojure.test-clojure.annotations\"/>\n    </java>\n  </target>\n\n  <target name=\"test-example\"\n          description=\"Run clojure tests without recompiling clojure.\"\n          depends=\"compile-tests\"\n          unless=\"maven.test.skip\">\n    <java classname=\"clojure.main\" failonerror=\"true\" fork=\"true\">\n      <sysproperty key=\"clojure.test-clojure.exclude-namespaces\"\n                   value=\"#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.ns-libs-load-later}\"/>\n      <sysproperty key=\"clojure.compiler.direct-linking\" value=\"${directlinking}\"/>\n      <classpath>\n        <pathelement path=\"${maven.test.classpath}\"/>\n        <path location=\"${test-classes}\"/>\n        <path location=\"${test}\"/>\n        <path location=\"${build}\"/>\n\t<path location=\"${cljsrc}\"/>\n      </classpath>\n      <arg value=\"${test-script}\"/>\n    </java>\n  </target>\n\n  <target name=\"test-generative\"\n          description=\"Run test generative tests without recompiling clojure.\"\n          depends=\"compile-tests\"\n          unless=\"maven.test.skip\">\n    <java classname=\"clojure.main\" failonerror=\"true\" fork=\"true\">\n      <sysproperty key=\"clojure.compiler.direct-linking\" value=\"${directlinking}\"/>\n      <classpath>\n        <pathelement path=\"${maven.test.classpath}\"/>\n        <path location=\"${test-classes}\"/>\n        <path location=\"${test}\"/>\n        <path location=\"${build}\"/>\n\t<path location=\"${cljsrc}\"/>\n      </classpath>\n      <arg value=\"${test-generative-script}\"/>\n    </java>\n  </target>\n\n  <target name=\"test\"\n          description=\"Run all the tests\"\n          depends=\"test-example,test-generative\"/>\n\n  <target name=\"build\"\n          description=\"Build Clojure (compilation only, no tests).\"\n          depends=\"compile-java, compile-clojure\"/>\n\n  <target name=\"jar\" depends=\"build\"\n          description=\"Create clojure jar file.\">\n    <jar jarfile=\"${clojure_jar}\" basedir=\"${build}\">\n      <fileset dir=\"${cljsrc}\">\n        <include name=\"**/*.clj\"/>\n      </fileset>\n      <manifest>\n        <attribute name=\"Main-Class\" value=\"clojure.main\"/>\n        <attribute name=\"Class-Path\" value=\".\"/>\n      </manifest>\n    </jar>\n    <copy file=\"${clojure_jar}\" tofile=\"${clojure_noversion_jar}\"/>\n  </target>\n\n  <target name=\"javadoc\"\n\t  description=\"Creates javadoc for Clojure API.\">\n    <copy file=\"src/jvm/clojure/lang/IFn.java\" tofile=\"target/tmpjd/IFn.java\"/>\n    <copy file=\"src/jvm/clojure/lang/package.html\" tofile=\"target/tmpjd/package.html\"/>\n    <replaceregexp file=\"target/tmpjd/IFn.java\" match=\"(static public interface .*})\" replace=\"\" byline=\"true\"/>\n    <javadoc destdir=\"target/javadoc\"\n\t    nodeprecatedlist=\"true\" nohelp=\"true\" nonavbar=\"true\" notree=\"true\"\n\t    link=\"http://docs.oracle.com/javase/7/docs/api/\"\n\t    windowtitle=\"Clojure API\">\n      <classpath>\n        <path location=\"${build}\"/>\n      </classpath>\n      <fileset dir=\"${basedir}\">\n\t<include name=\"src/jvm/clojure/java/api/Clojure.java\"/>\n\t<include name=\"target/tmpjd/IFn.java\"/>\n      </fileset>\n    </javadoc>\n  </target>\n\n  <target name=\"all\" depends=\"build,test,jar\"/>\n\n  <target name=\"clean\"\n          description=\"Remove autogenerated files and directories.\">\n    <delete dir=\"${target}\"/>\n    <delete verbose=\"true\">\n      <fileset dir=\"${basedir}\" includes=\"*.jar\"/>\n      <fileset dir=\"${basedir}\" includes=\"*.zip\"/>\n    </delete>\n  </target>\n\n  <target name=\"local\">\n    <exec executable=\"mvn\">\n      <arg value=\"-Plocal\"/>\n      <arg value=\"-Dmaven.test.skip=true\"/>\n      <arg value=\"package\"/>\n    </exec>\n  </target>\n</project>\n"
        },
        {
          "name": "changes.md",
          "type": "blob",
          "size": 144.8046875,
          "content": "<!-- -*- mode: markdown ; mode: visual-line ; coding: utf-8 -*- -->\n\n# Changes to Clojure in Version 1.12.0\n\n## 1 Compatibility\n\n### 1.1 Java 8 - Compatiblity EOL notice\n\nClojure 1.12 produces Java 8 bytecode (same as Clojure 1.10 and 1.11), but this is expected to be the last release using a Java 8 baseline. Future releases will move the bytecode and minimum Java compatibility to a newer Java LTS release.\n\n### 1.2 Java 21 - Virtual thread pinning from user code under `synchronized`\n\nClojure users want to use virtual threads on JDK 21. Prior to 1.12, Clojure lazy-seqs and delays, in order to enforce run-once behavior, ran user code under synchronized blocks, which as of JDK 21 don't yet participate in cooperative blocking. Thus if that code did e.g. blocking I/O it would pin a real thread. JDK 21 may emit warnings for this when using `-Djdk.tracePinnedThreads=full`.\n\nTo avoid this pinning, in 1.12 `lazy-seq` and `delay` use locks instead of synchronized blocks.\n\nSee: [CLJ-2804](https://clojure.atlassian.net/browse/CLJ-2804)\n\n### 1.3 Security\n\nFix [CVE-2024-22871](https://nvd.nist.gov/vuln/detail/CVE-2024-22871) detailed in [GHSA-vr64-r9qj-h27f](https://github.com/advisories/GHSA-vr64-r9qj-h27f):\n\n* [CLJ-2839](https://clojure.atlassian.net/browse/CLJ-2839) `iterate`, `cycle`, `repeat` - infinite seqs have infinite `hashCode()`\n\n### 1.4 Serialization\n\n[CLJ-1327](https://clojure.atlassian.net/browse/CLJ-1327) explicitly sets the Java serialization identifier for the classes in Clojure that implement Java serialization. In Clojure 1.11.0 this changed for two classes unnecessarily and we reverted those changes in Clojure 1.11.1 - this completes that work for the rest of the classes.\n\nClojure data types have implemented the Java serialization interfaces since Clojure 1.0. Java serialization is designed to save graphs of Java instances into a byte stream. Every class has an identifier (the serialVersionUID) that is automatically generated based on the class name, it's type hierarchy, and the serialized fields. At deserialization time, deserialization can only occur when the available class has an identifier that matches the class id recorded in the serialized bytes.\n\nClojure has never provided a guarantee of serialization consistency across Clojure versions, but we do not wish to break compatibility any more than necessary and these changes will give us more control over that in the future.\n\nSee: [CLJ-1327](https://clojure.atlassian.net/browse/CLJ-1327)\n\n### 1.5 Dependencies\n\nUpdated dependencies:\n\n* spec.alpha dependency to 0.5.238 - [changes](https://github.com/clojure/spec.alpha/blob/master/CHANGES.md)\n* core.specs.alpha dependency to 0.4.74 - [changes](https://github.com/clojure/core.specs.alpha/blob/master/CHANGES.md)\n\nSee: [CLJ-2852](https://clojure.atlassian.net/browse/CLJ-2852)\n\n## 2 Features\n\n### 2.1 Add libraries for interactive use\n\nThere are many development-time cases where it would be useful to add a library interactively without restarting the JVM - speculative evaluation, adding a known dependency to your project, or adding a library to accomplish a specific task.\n\nClojure now provides new functions to add libraries interactively, without restarting the JVM or losing the state of your work:\n\n* [add-lib](https://clojure.github.io/clojure/branch-master/clojure.repl-api.html#clojure.repl.deps/add-lib) takes a lib that is not available on the classpath, and makes it available by downloading (if necessary) and adding to the classloader. Libs already on the classpath are not updated. If the coordinate is not provided, the newest Maven or git (if the library has an inferred git repo name) version or tag are used.\n* [add-libs](https://clojure.github.io/clojure/branch-master/clojure.repl-api.html#clojure.repl.deps/add-libs) is like `add-lib`, but resolves a set of new libraries and versions together.\n* [sync-deps](https://clojure.github.io/clojure/branch-master/clojure.repl-api.html#clojure.repl.deps/sync-deps) calls `add-libs` with any libs present in deps.edn, but not yet present on the classpath.\n\nThese new functions are intended only for development-time interactive use at the repl - using a deps.edn is still the proper way to build and maintain production code. To this end, these functions all check that [\\*repl*](https://clojure.github.io/clojure/branch-master/clojure.core-api.html#clojure.core/%2Arepl%2A) is bound to true (that flag is bound automatically by `clojure.main/repl`). In a clojure.main REPL, these new functions are automatically referred in the `user` namespace. In other repls, you may need to `(require '[clojure.repl.deps :refer :all])` before use.\n\nLibrary resolution and download are provided by [tools.deps](https://github.com/clojure/tools.deps). However, you do not want to add tools.deps and its many dependencies to your project classpath during development, and thus we have also added a new api for invoking functions out of process via the Clojure CLI.\n\nSee: [CLJ-2761](https://clojure.atlassian.net/browse/CLJ-2761), [CLJ-2757](https://clojure.atlassian.net/browse/CLJ-2757), [CLJ-2788](https://clojure.atlassian.net/browse/CLJ-2788), [CLJ-2767](https://clojure.atlassian.net/browse/CLJ-2767), [CLJ-2769](https://clojure.atlassian.net/browse/CLJ-2769), [CLJ-2770](https://clojure.atlassian.net/browse/CLJ-2770)\n\n### 2.2 Invoke tool functions out of process\n\nThere are many useful tools you can use at development time, but which are not part of your project's actual dependencies. The Clojure CLI provides explicit support for [tools](https://clojure.org/reference/clojure_cli#tools) with their own classpath, but there was not previously a way to invoke these interactively.\n\nClojure now includes [clojure.tools.deps.interop/invoke-tool](https://clojure.github.io/clojure/branch-master/clojure.tools.deps.interop-api.html#clojure.tools.deps.interop/invoke-tool) to invoke a tool function out of process. The classpath for the tool is defined in deps.edn and you do not need to add the tool's dependencies to your project classpath.\n\n`add-lib` functionality is built using `invoke-tool` but you can also use it to build or invoke your own tools for interactive use. Find more about the function execution protocol on the [CLI reference](https://clojure.org/reference/clojure_cli#function_protocol).\n\nSee: [CLJ-2760](https://clojure.atlassian.net/browse/CLJ-2760), [CLJ-2819](https://clojure.atlassian.net/browse/CLJ-2819)\n\n### 2.3 Start and control external processes\n\nFor a long time, we've had the `clojure.java.shell` namespace, but over time Java has provided new APIs for process info, process control, and I/O redirection. This release adds a new namespace [clojure.java.process](https://clojure.github.io/clojure/branch-master/index.html#clojure.java.process) that takes advantage of these APIs and is easier to use. See:\n\n* [start](https://clojure.github.io/clojure/branch-master/clojure.java.process-api.html#clojure.java.process/start) - full control over streams with access to the underlying Java objects for advanced usage\n* [exec](https://clojure.github.io/clojure/branch-master/clojure.java.process-api.html#clojure.java.process/exec) - covers the common case of executing an external process and returning its stdout on completion\n\nSee: [CLJ-2759](https://clojure.atlassian.net/browse/CLJ-2759), [CLJ-2777](https://clojure.atlassian.net/browse/CLJ-2777), [CLJ-2828](https://clojure.atlassian.net/browse/CLJ-2828), [CLJ-2773](https://clojure.atlassian.net/browse/CLJ-2773), [CLJ-2776](https://clojure.atlassian.net/browse/CLJ-2776), [CLJ-2774](https://clojure.atlassian.net/browse/CLJ-2774), [CLJ-2778](https://clojure.atlassian.net/browse/CLJ-2778), [CLJ-2779](https://clojure.atlassian.net/browse/CLJ-2779), [CLJ-2865](https://clojure.atlassian.net/browse/CLJ-2865)\n\n### 2.4 Method values\n\nClojure programmers often want to use Java methods in higher-order functions (e.g. passing a Java method to `map`). Until now, programmers have had to manually wrap methods in functions. This is verbose, and might require manual hinting for overload disambiguation, or incur incidental reflection or boxing.\n\nProgrammers can now use [qualified methods](#25-qualified-methods---classmethod-classmethod-and-classnew) as ordinary functions in value contexts - the compiler will automatically generate the wrapping function. The compiler will generate a reflective call when a qualified method does not resolve due to overloading. Developers can supply [:param-tags](#26-param-tags-metadata) metadata on qualified methods to specify the signature of a single desired method, 'resolving' it.\n\nSee: [CLJ-2793](https://clojure.atlassian.net/browse/CLJ-2793), [CLJ-2844](https://clojure.atlassian.net/browse/CLJ-2844), [CLJ-2835](https://clojure.atlassian.net/browse/CLJ-2835)\n\n### 2.5 Qualified methods - `Class/method`, `Class/.method`, and `Class/new`\n\nJava members inherently exist in a class.  For method values we need a way to explicitly specify the class of an instance method because there is no possibility for inference.\n\nQualified methods have value semantics when used in non-invocation positions:\n\n* `Classname/method` - value is a Clojure function that invokes a static method\n* `Classname/.method` - value is a Clojure function that invokes an instance method\n* `Classname/new` - value is a Clojure function that invokes a constructor\n\nNote: developers must use `Classname/method` and `Classname/.method` syntax to differentiate between static and instance methods.\n\nQualified method invocations with [param-tags](#26-param-tags-metadata) use only the tags to resolve the method. Without param-tags they behave like the equivalent [dot syntax](https://clojure.org/reference/java_interop#_the_dot_special_form), except the qualifying class takes precedence over hints of the target object, and over its runtime type when invoked via reflection.\n\nNote: Static fields are values and should be referenced without parens unless they are intended as function calls, e.g `(System/out)` should be `System/out`. Future Clojure releases will treat the field's value as something invokable and invoke it.\n\nSee: [CLJ-2844](https://clojure.atlassian.net/browse/CLJ-2844), [CLJ-2848](https://clojure.atlassian.net/browse/CLJ-2848), [CLJ-2847](https://clojure.atlassian.net/browse/CLJ-2847), [CLJ-2853](https://clojure.atlassian.net/browse/CLJ-2853), [CLJ-2867](https://clojure.atlassian.net/browse/CLJ-2867)\n\n### 2.6 :param-tags metadata\n\nWhen used as values, qualified methods supply only the class and method name, and thus cannot resolve overloaded methods.\n\nDevelopers can supply `:param-tags` metadata on qualified methods to specify the signature of a single desired method, 'resolving' it. The `:param-tags` metadata is a vector of zero or more tags: `[tag ...]`. A tag is any existing valid `:tag` metadata value. Each tag corresponds to a parameter in the desired signature (arity should match the number of tags). Parameters with non-overloaded types can use the placeholder `_` in lieu of the tag. When you supply :param-tags metadata on a qualified method, the metadata must allow the compiler to resolve it to a single method at compile time.\n\nA new metadata reader syntax `^[tag ...]` attaches `:param-tags` metadata to member symbols, just as `^tag` attaches `:tag` metadata to a symbol.\n\nSee: [CLJ-2805](https://clojure.atlassian.net/browse/CLJ-2805)\n\n### 2.7 Array class syntax\n\nClojure supports symbols naming classes both as a value (for class object) and as a type hint, but has not provided syntax for array classes other than strings.\n\nDevelopers can now refer to an array class using a symbol of the form `ComponentClass/#dimensions`, eg `String/2` refers to the class of a 2 dimensional array of Strings. Component classes can be fully-qualified classes, imported classes, or primitives. Array class syntax can be used as both type hints and values.\n\nExamples: `String/1`, `java.lang.String/1`, `long/2`. \n\nSee: [CLJ-2807](https://clojure.atlassian.net/browse/CLJ-2807)\n\n### 2.8 Functional interfaces\n\nJava programs define \"functions\" with Java functional interfaces (marked with the [@FunctionalInterface](https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html) annotation), which have a single method.\n\nClojure developers can now invoke Java methods taking functional interfaces by passing functions with matching arity. The Clojure compiler implicitly converts Clojure functions to the required functional interface by constructing a lambda adapter. You can explicitly coerce a Clojure function to a functional interface by hinting the binding name in a `let` binding, e.g. to avoid repeated adapter construction in a loop, e.g. `(let [^java.util.function.Predicate p even?] ...)`.\n\nSee: [CLJ-2799](https://clojure.atlassian.net/browse/CLJ-2799), [CLJ-2858](https://clojure.atlassian.net/browse/CLJ-2858), [CLJ-2856](https://clojure.atlassian.net/browse/CLJ-2856), [CLJ-2863](https://clojure.atlassian.net/browse/CLJ-2863), [CLJ-2864](https://clojure.atlassian.net/browse/CLJ-2864)\n\n### 2.9 Java Supplier interop\n\nCalling methods that take a [Supplier](https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html) (a method that supplies a value) had required writing an adapter with reify. Clojure has a \"value supplier\" interface with semantic support already - `IDeref`. All `IDeref` impls (`delay`, `future`, `atom`, etc) now implement the `Supplier` interface directly.\n\nSee: [CLJ-2792](https://clojure.atlassian.net/browse/CLJ-2792), [CLJ-2841](https://clojure.atlassian.net/browse/CLJ-2841)\n\n### 2.10 Streams with seq, into, reduce, and transduce support\n\nJava APIs increasingly return [Stream](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)s and are hard to consume because they do not implement interfaces that Clojure already supports, and hard to interop with because Clojure doesn't directly implement Java functional interfaces.\n\nIn addition to functional interface support, Clojure now provides these functions to interoperate with streams in an idiomatic manner, all functions behave analogously to their Clojure counterparts:\n\n* `(stream-seq! stream) => seq`\n* `(stream-reduce! f [init-val] stream) => val`\n* `(stream-transduce! xf f [init-val] stream) => val`\n* `(stream-into! to-coll [xf] stream) => to-coll`\n\nAll of these operations are terminal stream operations (they consume the stream).\n\nSee: [CLJ-2775](https://clojure.atlassian.net/browse/CLJ-2775)\n\n### 2.11 PersistentVector implements Spliterable\n\nJava collections implement streams via [\"spliterators\"](https://docs.oracle.com/javase/8/docs/api/java/util/Spliterator.html), iterators that can be split for faster parallel traversal. `PersistentVector` now provides a custom spliterator that supports parallelism, with greatly improved performance.\n\nSee: [CLJ-2791](https://clojure.atlassian.net/browse/CLJ-2791)\n\n### 2.12 Efficient drop and partition for persistent or algorithmic collections\n\nPartitioning of a collection uses a series of takes (to build a partition) and drops (to skip past that partition). [CLJ-2713](https://clojure.atlassian.net/browse/CLJ-2713) adds a new internal interface (IDrop) indicating that a collection can drop more efficiently than sequential traversal, and implements that for persistent collections and algorithmic collections like `range` and `repeat`. These optimizations are used in `drop`, `nthrest`, and `nthnext`.\n\nAdditionally, there are new functions `partitionv`, `partitionv-all`, and `splitv-at` that are more efficient than their existing counterparts and produce vector partitions instead of realized seq partitions.\n\nSee: [CLJ-2713](https://clojure.atlassian.net/browse/CLJ-2713), [CLJ-2742](https://clojure.atlassian.net/browse/CLJ-2742), [CLJ-2740](https://clojure.atlassian.net/browse/CLJ-2740), [CLJ-2715](https://clojure.atlassian.net/browse/CLJ-2715), [CLJ-2718](https://clojure.atlassian.net/browse/CLJ-2718), [CLJ-2772](https://clojure.atlassian.net/browse/CLJ-2772), [CLJ-2741](https://clojure.atlassian.net/browse/CLJ-2741)\n\n### 2.13 Var interning policy\n\n[Interning](https://clojure.org/reference/vars#interning) a var in a namespace (vs aliasing) must create a stable reference that is never displaced, so that all references to an interned var get the same object. There were some cases where interned vars could get displaced and those have been tightened up in 1.12.0-alpha1. If you encounter this situation, you'll see a warning like \"REJECTED: attempt to replace interned var #'some-ns/foo with #'other-ns/foo in some-ns, you must ns-unmap first\".\n\nThis addresses the root cause of an issue encountered with Clojure 1.11.0, which added new functions to clojure.core (particularly `abs`). Compiled code from an earlier version of Clojure with var names that matched the newly added functions in clojure.core would be unbound when loaded in a 1.11.0 runtime. In addition to [CLJ-2711](https://clojure.atlassian.net/browse/CLJ-2711), we rolled back a previous fix in this area ([CLJ-1604](https://clojure.atlassian.net/browse/CLJ-1604)).\n\nSee: [CLJ-2711](https://clojure.atlassian.net/browse/CLJ-2711)\n\n## 3 Fixes and enhancements\n\n### 3.1 Reader and Compiler\n\n* [CLJ-2726](https://clojure.atlassian.net/browse/CLJ-2726) `#uuid` data reader - Fix exception on invalid input so it flows through reader\n* [CLJ-2813](https://clojure.atlassian.net/browse/CLJ-2813) anonymous function arg reader - no longer accepts invalid arg symbols\n* [CLJ-2843](https://clojure.atlassian.net/browse/CLJ-2843) Reflective calls to Java methods that take primitive long or double now work when passed a narrower boxed number at runtime (Integer, Short, Byte, Float). Previously, these methods were not matched during reflection and an error was thrown.\n* [CLJ-2145](https://clojure.atlassian.net/browse/CLJ-2145) - Fix clearing of closed overs in `^:once` fns\n* [CLJ-2317](https://clojure.atlassian.net/browse/CLJ-2317) - `recur` to head of `:once` fn cancels once\n\n### 3.2 Core\n\n* [CLJ-2739](https://clojure.atlassian.net/browse/CLJ-2739) ArityException - Fix message when function incorrectly called with >20 args\n* [CLJ-2709](https://clojure.atlassian.net/browse/CLJ-2709) `range` - Use optimized range for int args\n* [CLJ-2721](https://clojure.atlassian.net/browse/CLJ-2721) `range` - Fix invalid arg order when adding meta to non-optimized range\n* [CLJ-2683](https://clojure.atlassian.net/browse/CLJ-2683) `with-open` - Fix to not qualify `.close` method on expansion\n* [CLJ-2724](https://clojure.atlassian.net/browse/CLJ-2724) `clojure.java.io/do-copy` - Fix incorrect type hint\n* [CLJ-2640](https://clojure.atlassian.net/browse/CLJ-2640) `ex-info` - now handles nil data map\n* [CLJ-2717](https://clojure.atlassian.net/browse/CLJ-2717) `nthrest` now returns rest output on n=0 or past end of seq\n* [CLJ-1872](https://clojure.atlassian.net/browse/CLJ-1872) `empty?` - adds support for `counted?` collections\n* [CLJ-2694](https://clojure.atlassian.net/browse/CLJ-2694) Fix ratio invariants violated when using Long/MIN_VALUE\n* [CLJ-2568](https://clojure.atlassian.net/browse/CLJ-2568) `clojure.walk/walk` - preserve metadata on lists and seqs\n* [CLJ-2686](https://clojure.atlassian.net/browse/CLJ-2686) `clojure.core.server/parse-props` - Fix exception if system properties concurrently modified during initialization\n* [CLJ-2645](https://clojure.atlassian.net/browse/CLJ-2645) `PrintWriter-on` should support auto-flush, and prepl should use it for the err stream\n* [CLJ-2698](https://clojure.atlassian.net/browse/CLJ-2698) `defprotocol` - ignore unused primitive return type hints\n* [CLJ-2783](https://clojure.atlassian.net/browse/CLJ-2783) replace calls to deprecated URL constructor\n\n### 3.3 Docstrings\n\n* [CLJ-2225](https://clojure.atlassian.net/browse/CLJ-2225) `assert` and `\\*assert*` - improve docstrings to add context\n* [CLJ-2290](https://clojure.atlassian.net/browse/CLJ-2290) `into` - add 0- and 1-arity to docstring\n* [CLJ-2552](https://clojure.atlassian.net/browse/CLJ-2552) `reify` - improve docstring and fix example\n* [CLJ-1385](https://clojure.atlassian.net/browse/CLJ-1385) `transient` - include usage model from reference docs\n\n# Changes to Clojure in Version 1.11.4\n\n* [CLJ-2145](https://clojure.atlassian.net/browse/CLJ-2145) - Fix clearing of closed overs in `^:once` fns\n* [CLJ-2317](https://clojure.atlassian.net/browse/CLJ-2317) - `recur` to head of `:once` fn cancels once\n\n# Changes to Clojure in Version 1.11.3\n\n* [CLJ-2843](https://clojure.atlassian.net/browse/CLJ-2843) - Reflective calls to Java methods that take primitive long or double now work when passed a narrower boxed number at runtime (Integer, Short, Byte, Float). Previously, these methods were not matched during reflection and an error was thrown.\n\n# Changes to Clojure in Version 1.11.2\n\nFixes [CVE-2024-22871](https://nvd.nist.gov/vuln/detail/CVE-2024-22871) detailed in [GHSA-vr64-r9qj-h27f](https://github.com/advisories/GHSA-vr64-r9qj-h27f):\n\n* [CLJ-2839](https://clojure.atlassian.net/browse/CLJ-2839) - `iterate`, `cycle`, `repeat` - infinite seqs have infinite `hashCode()`\n\n# Changes to Clojure in Version 1.11.1\n\n* [CLJ-2701](https://clojure.atlassian.net/browse/CLJ-2701)\n  Pin serialVersionUID for Keyword and ArraySeq back to 1.10.3 values to retain binary serialization\n\n# Changes to Clojure in Version 1.11.0\n\n## 1 Compatibility\n\n### 1.1 Security\n\nBecause XML external entity (XXE) attacks can be used to disclose local files using file schemes or relative paths in the system identifier, `clojure.xml/parse` now disables external entity processing by default.\n\nSee: https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing\n\nThis change disables the following SAX parser features:\n\n* `http://apache.org/xml/features/nonvalidating/load-external-dtd`\n* `http://xml.org/sax/features/external-general-entities`\n* `http://xml.org/sax/features/external-parameter-entities`\n\nIf you rely on these features, modify your calls to `clojure.xml/parse` to explicitly\nsupply `startparse-sax` function as the final argument: \n`(clojure.xml/parse the-string clojure.xml/startparse-sax)`\nThis modification also works on prior Clojure versions.\n\n* [CLJ-2611](http://dev.clojure.org/jira/browse/CLJ-2611) clojure.xml now disables XXE processing by default\n\n### 1.2 Dependencies\n\nUpdated dependencies:\n\n* spec.alpha dependency to 0.3.218 - [changes](https://github.com/clojure/spec.alpha/blob/master/CHANGES.md)\n* core.specs.alpha dependency to 0.2.62 - [changes](https://github.com/clojure/core.specs.alpha/blob/master/CHANGES.md)\n\n## 2 Features\n\n### 2.1 Keyword argument functions take a trailing map\n\nKeyword arguments are optional trailing variadic arguments of the form *akey aval bkey bval...​*.\nIn Clojure 1.11, functions taking keyword arguments can now be passed a map instead of or in addition\nto and following the key/value pairs. When a lone map is passed, it is used for destructuring, else\na trailing map is added to the key/value pair map by `conj`.\n\nAlso see: https://clojure.org/news/2021/03/18/apis-serving-people-and-programs\n\n* [CLJ-2603](https://clojure.atlassian.net/browse/CLJ-2603) Clojure keyword argument functions now also accept a map\n\n### 2.2 `:as-alias` in `require`\n\nSpec (and other libs) rely on qualified keywords as spec names.\nNamespace aliasing in `ns` makes long names shorter but required namespaces to be loadable.\nThis change adds `:as-alias` to `require`, which is like `:as` but does not require the namespace to load.\n\n* [CLJ-2123](https://clojure.atlassian.net/browse/CLJ-2123) Add :as-alias option to require like :as but not load\n* [CLJ-2665](https://clojure.atlassian.net/browse/CLJ-2665) Fix require with :as and :as-alias to load\n\n## 3 New functions and namespaces\n\n### 3.1 clojure.math and numeric helper functions\n\nAdded a new clojure.math namespace which provides wrappers for the functions available in java.lang.Math.\nThese functions are narrowed to only `long` and `double` overloads and provide primitive support without reflection.\n\nIn addition, the following functions were added to clojure.core:\n\n* `abs` - absolute value in optimized form for all Clojure numeric types (long, double, ratio, bigint, bigdecimal)\n* `NaN?` - predicate for doubles to check whether \"not a number\"\n* `infinite?` - predicate for doubles to check whether positive or negative infinity\n\n* [CLJ-2668](https://clojure.atlassian.net/browse/CLJ-2668) Add NaN? and infinite? predicates\n* [CLJ-2664](https://clojure.atlassian.net/browse/CLJ-2664) Add clojure.java.math namespace, wrappers for java.lang.Math\n* [CLJ-2673](https://clojure.atlassian.net/browse/CLJ-2673) Add `abs`, and update `min` and `max` to use Math impls when possible\n* [CLJ-2677](https://clojure.atlassian.net/browse/CLJ-2677) clojure.math - fix method reflection in bodies and inlines, fix docstrings, renamed\n* [CLJ-2689](https://clojure.atlassian.net/browse/CLJ-2689) Fix clojure.math tests to be more tolerant of floating point comparisons\n\n### 3.2 Parser functions\n\nAdded the following parsing functions to clojure.core:\n\n* `parse-double` - parses floating point number, including scientific notation\n* `parse-long` - parses integer in long range\n* `parse-boolean` - parses `\"true\"` or `\"false\"` to the canonical boolean values\n* `parse-uuid` - parses a UUID string to java.util.UUID\n\nAll of these functions expect a string argument and return either the parsed value or `nil` if the value\nis in invalid format.\n\n* [CLJ-2667](https://clojure.atlassian.net/browse/CLJ-2667) Add functions to parse a single long/double/uuid/boolean from a string\n\n### 3.2 `random-uuid`\n\nAdded `random-uuid`, a function to construct a random java.util.UUID.\n\n* [CLJ-1925](https://clojure.atlassian.net/browse/CLJ-1925) Add random-uuid\n\n### 3.3 `update-keys` and `update-vals`\n\nAdded:\n\n* `update-keys` - applies a function to every key in a map, `m f => {(f k) v ...}`\n* `update-vals` - applies a function to every value in a map, `m f => {k (f v) ...}`\n\n* [CLJ-1959](https://clojure.atlassian.net/browse/CLJ-1959) Add implementation of update-keys\n* [CLJ-2651](https://clojure.atlassian.net/browse/CLJ-2651) Add implementation of update-vals\n\n### 3.4 `iteration`\n\nAdded `iteration`, to repeatedly apply a (possibly impure) step function with continuation state.\nThis can be used e.g. to consume APIs that return paginated or batched data.\n\n* [CLJ-2555](https://clojure.atlassian.net/browse/CLJ-2555) Add `iteration` generator function\n* [CLJ-2690](https://clojure.atlassian.net/browse/CLJ-2690) Improve `iteration` docstring and arg names\n* [CLJ-2685](https://clojure.atlassian.net/browse/CLJ-2685) Fix `iteration` generative test failure\n\n## 4 Fixes\n\n### 4.1 Compiler\n\n* [CLJ-2680](https://clojure.atlassian.net/browse/CLJ-2680) Fix type hinting a primitive local with matching type hint to not error\n* [CLJ-1180](https://clojure.atlassian.net/browse/CLJ-1180) Fix resolution of class type hints in `defprotocol`\n* [CLJ-1973](https://clojure.atlassian.net/browse/CLJ-1973) Make order of emitted protocol methods in generated classes reproducible\n\n### 4.2 Core\n\n* [CLJ-1879](https://clojure.atlassian.net/browse/CLJ-1879) IKVReduce - make IPersistentMap case faster and extend to Object, detaching it from any fully enumerable set of types\n* [CLJ-2065](https://clojure.atlassian.net/browse/CLJ-2065) IKVReduce - add direct support for SubVector\n* [CLJ-2663](https://clojure.atlassian.net/browse/CLJ-2663) Fix vector `=` not terminating when called with infinite sequence\n* [CLJ-2679](https://clojure.atlassian.net/browse/CLJ-2679) Fix hash collisions in `case` expressions on symbols\n* [CLJ-2600](https://clojure.atlassian.net/browse/CLJ-2600) Don't block `realized?` of `delay` on pending result\n* [CLJ-2649](https://clojure.atlassian.net/browse/CLJ-2649) Fix order of checks in `some-fn` and `every-pred` for 3 predicate case to match other unrollings\n* [CLJ-2234](https://clojure.atlassian.net/browse/CLJ-2234) Fix multimethod preferences to correctly use local hierarchy when it exists\n* [CLJ-2556](https://clojure.atlassian.net/browse/CLJ-2556) Fix `into` completion so `halt-when` works\n\n### 4.3 Performance\n\n* [CLJ-1808](https://clojure.atlassian.net/browse/CLJ-1808) `map-invert` should use `reduce-kv` and transient\n* [CLJ-2621](https://clojure.atlassian.net/browse/CLJ-2621) Fix unnecessary boxing of unused return in statement context for instance method expr\n* [CLJ-2670](https://clojure.atlassian.net/browse/CLJ-2670) Use Math.exact... methods for checked long math ops for performance\n* [CLJ-2636](https://clojure.atlassian.net/browse/CLJ-2636) Get rid of reflection on java.util.Properties when defining `*clojure-version*`\n* [CLJ-1509](https://clojure.atlassian.net/browse/CLJ-1509) AOT compile clojure.instant, clojure.uuid, clojure.core.reducers in build\n\n### 4.4 Error messages\n\n* [CLJ-2529](https://clojure.atlassian.net/browse/CLJ-2529) Fix incorrect reporting of runtime errors as compiler errors in calls through `Compiler.load()`\n* [CLJ-2350](https://clojure.atlassian.net/browse/CLJ-2350) Improve keyword arity exception message\n\n### 4.5 Docstrings\n\n* [CLJ-2249](https://clojure.atlassian.net/browse/CLJ-2249) Clarify `get` docstring regarding sets, strings, arrays, ILookup\n* [CLJ-2488](https://clojure.atlassian.net/browse/CLJ-2488) Add definition to `reify` docstring\n* [CLJ-1360](https://clojure.atlassian.net/browse/CLJ-1360) Update `clojure.string/split` docstring regarding trailing empty parts\n* [CLJ-2444](https://clojure.atlassian.net/browse/CLJ-2444) Fix typo in `test-vars` docstring\n* [CLJ-2666](https://clojure.atlassian.net/browse/CLJ-2666) Make Clojure Java API javadoc text match the example\n\n### 4.6 Other enhancements\n\n* [CLJ-2493](https://clojure.atlassian.net/browse/CLJ-2493) clojure.java.browse - Fix `browse-url` hanging on call to xdg-open\n* [CLJ-1908](https://clojure.atlassian.net/browse/CLJ-1908) clojure.test - Add `run-test` and `run-test-var` to run single test with fixtures and report\n* [CLJ-1379](https://clojure.atlassian.net/browse/CLJ-1379) clojure.test - Fix quoting of `:actual` form in `:pass` maps\n* [CLJ-2620](https://clojure.atlassian.net/browse/CLJ-2620) clojure.server - Fix asymmetric handling of `:exception` `:val`s in `prepl`\n* [CLJ-2387](https://clojure.atlassian.net/browse/CLJ-2387) clojure.server - Fix off-by-one in socket server port validation\n\n\n# Changes to Clojure in Version 1.10.3\n\n## 1 Changes reverted\n\n* [CLJ-2564](https://clojure.atlassian.net/browse/CLJ-2564)\n  Improve error message for case\n\n## 2 Fixes\n\n* [CLJ-2453](https://clojure.atlassian.net/browse/CLJ-2453)\n  Enable reader conditionals in Clojure prepl\n\n# Changes to Clojure in Version 1.10.2\n\n## 1 Dependencies\n\nUpdated dependencies:\n\n* spec.alpha dependency to 0.2.194 - [changes](https://github.com/clojure/spec.alpha/blob/master/CHANGES.md)\n* core.specs.alpha dependency to 0.2.56 - [changes](https://github.com/clojure/core.specs.alpha/blob/master/CHANGES.md)\n\n## 2 Fixes\n\n## 2.1 Interop / JVM\n\n* [CLJ-1472](https://clojure.atlassian.net/browse/CLJ-1472)\n  Ensure monitor object is on stack, for verifiers\n* [CLJ-2517](https://clojure.atlassian.net/browse/CLJ-2517)\n  More fixes for invocation of static interface methods with primitive args\n* [CLJ-2492](https://clojure.atlassian.net/browse/CLJ-2492)\n  Remove uses of deprecated Class.newInstance()\n* [CLJ-2534](https://clojure.atlassian.net/browse/CLJ-2534)\n  Fix javadoc urls for JDK 11+\n* [CLJ-2571](https://clojure.atlassian.net/browse/CLJ-2571)\n  Add Throwable return type hint to ex-cause\n* [CLJ-2572](https://clojure.atlassian.net/browse/CLJ-2572)\n  Avoid reflection in clojure.data\n* [CLJ-2502](https://clojure.atlassian.net/browse/CLJ-2502)\n  Fix reflection warnings in clojure.stacktrace/print-stack-trace\n* [CLJ-2597](https://clojure.atlassian.net/browse/CLJ-2597)\n  proxy should emit Java 1.8 bytecode\n\n## 2.2 Core\n\n* [CLJ-2580](https://clojure.atlassian.net/browse/CLJ-2580)\n  Fix case expression branch analysis that resulted in compilation error\n* [CLJ-2564](https://clojure.atlassian.net/browse/CLJ-2564)\n  Improve error message for case\n* [CLJ-2585](https://clojure.atlassian.net/browse/CLJ-2585)\n  nth with not-found on regex matcher returns not-found on last group index\n* [CLJ-1364](https://clojure.atlassian.net/browse/CLJ-1364)\n  vector-of does not implement equals or hashing methods\n* [CLJ-2549](https://clojure.atlassian.net/browse/CLJ-2549)\n  vector-of does not implement IObj for metadata\n* [CLJ-1187](https://clojure.atlassian.net/browse/CLJ-1187)\n  quoted metadata on empty literal colls is lost\n* [CLJ-2459](https://clojure.atlassian.net/browse/CLJ-2459)\n  ExceptionInInitializerError if jars executed with java -jar\n\n## 2.3 Printing\n\n* [CLJ-2469](https://clojure.atlassian.net/browse/CLJ-2469)\n  Fix errors in printing some maps with namespace syntax\n* [CLJ-1445](https://clojure.atlassian.net/browse/CLJ-1445)\n  pprint doesn't print collection metadata when `*print-meta*` is true\n\n## 2.4 Docstrings\n\n* [CLJ-2295](https://clojure.atlassian.net/browse/CLJ-2295)\n  Eliminate duplicate doc string printing for special forms\n* [CLJ-2495](https://clojure.atlassian.net/browse/CLJ-2495)\n  prepl docstring is incorrect\n* [CLJ-2169](https://clojure.atlassian.net/browse/CLJ-2169)\n  conj has out-of-date :arglists\n\n## 3 Performance\n\n* [CLJ-1005](https://clojure.atlassian.net/browse/CLJ-1005)\n  Use transient map in zipmap\n\n# Changes to Clojure in Version 1.10.1\n\n## 1 Features and Major Changes\n\n### 1.1 Workaround Java Performance Regression When Loading user.clj\n\nRecent builds of Java 8 (u202), 11 (11.0.2), 12, and 13 included\nsome changes that [drastically affect](https://bugs.openjdk.java.net/browse/JDK-8219233)\noptimization performance of calls from static initializers to static fields.\nClojure provides support for loading code on startup from a user.clj file and this\noccurred in the static initializer of the Clojure runtime (RT) class and was thus\naffected.\n\nThis issue may eventually be resolved in Java, but in Clojure we have\nmodified runtime initialization to avoid loading user.clj in a static\ninitializer, which mitigates the case where this caused a performance\ndegradation.\n\n* [CLJ-2484](https://clojure.atlassian.net/browse/CLJ-2484)\n  Significant performance regression of code loaded in user.clj in Java 8u202/11.0.\n\n### 1.2 clojure.main Error Reporting\n\nclojure.main is frequently used as a Clojure program launcher by external tools.\nPreviously, uncaught exceptions would be automatically printed by the JVM, which\nwould also print the stack trace.\n\nThis release will now catch exceptions and use the same error triage and printing\nfunctionality as the Clojure repl. The full stack trace, ex-info, and other\ninformation will be printed to a target specified by the configuration.\n\nThe three available error targets are:\n\n* file - write to a temp file (default, falls back to stderr)\n* stderr - write to stderr stream\n* none - don't write\n\nThese error targets can be specified either as options to clojure.main, or as\nJava system properties (flags take precedence). When invoking clojure.main\n(or using the clj tool), use `--report <target>`. For Java system property,\nuse `-Dclojure.main.report=<target>`.\n\n* [CLJ-2463](https://clojure.atlassian.net/browse/CLJ-2463)\n  Improve error printing in clojure.main with -m, -e, etc\n* [CLJ-2497](https://clojure.atlassian.net/browse/CLJ-2497)\n  Put error report location on its own line\n* [CLJ-2504](https://clojure.atlassian.net/browse/CLJ-2504)\n  Provide more options for error reporting in clojure.main\n\n## 2 Fixes\n\n* [CLJ-2499](http://dev.clojure.org/jira/browse/CLJ-2499)\n  Some compiler expr evals report as wrong error phase\n* [CLJ-2491](https://clojure.atlassian.net/browse/CLJ-2491)\n  Updated fragile tests so Clojure test suite runs on Java 12\n\n# Changes to Clojure in Version 1.10\n\n## 1 Compatibility and Dependencies\n\n### 1.1 Java\n\nClojure 1.10 now requires Java 8 or above. There were a number of updates related to this change and/or Java compatibility fixes for Java 8, 9, 10, and 11:\n\n* [CLJ-2363](http://dev.clojure.org/jira/browse/CLJ-2363)\n  Bump to Java 8 as minimum requirement, update embedded ASM to 6.2,\n  remove reliance on jsr166 jar, update javadoc links, and remove\n  conditional logic.\n* [CLJ-2367](http://dev.clojure.org/jira/browse/CLJ-2367)\n  ASM regression fix\n* [CLJ-2284](http://dev.clojure.org/jira/browse/CLJ-2284)\n  Fix invalid bytecode generation for static interface method calls in Java 9+\n* [CLJ-2066](http://dev.clojure.org/jira/browse/CLJ-2066)\n  Add reflection fallback for --illegal-access warnings in Java 9+\n* [CLJ-2330](http://dev.clojure.org/jira/browse/CLJ-2330)\n  Fix brittle test that fails on Java 10 build due to serialization drift\n* [CLJ-2374](http://dev.clojure.org/jira/browse/CLJ-2374)\n  Add type hint to address reflection ambiguity in JDK 11\n* [CLJ-2375](http://dev.clojure.org/jira/browse/CLJ-2375)\n  Fix usage of deprecated JDK apis\n* [CLJ-2414](http://dev.clojure.org/jira/browse/CLJ-2414)\n  Regression in reflectively finding default methods\n\n### 1.2 Dependencies\n\nUpdated dependencies:\n\n* spec.alpha dependency to 0.2.176 - [changes](https://github.com/clojure/spec.alpha/blob/master/CHANGES.md)\n* core.specs.alpha dependency to 0.2.44 - [changes](https://github.com/clojure/core.specs.alpha/blob/master/CHANGES.md)\n\n## 2 Features and major changes\n\n### 2.1 Error messages\n\nClojure errors can occur in several distinct \"phases\" - reading source, macroexpansion, compilation, execution, and result printing. Clojure (and the REPL) now identify these phases in the exception and the message.\n\nThe read/macroexpand/compile phases produce a CompilerException and indicate the location in the caller source code where the problem occurred (previously macroexpansion reported the error in the macroexpansion stack). CompilerException now implements IExceptionInfo and ex-data will report exception data including the following (optional) keys:\n\n* :clojure.error/phase - phase (:read-source, :macro-syntax-check, :macroexpansion, :compile-syntax-check, :compilation, :execution, :read-eval-result, :print-eval-result)\n* :clojure.error/source - source file\n* :clojure.error/line - line in source file\n* :clojure.error/column - column of line in source file\n* :clojure.error/symbol - symbol being macroexpanded or compiled\n* :clojure.error/class - cause exception class symbol\n* :clojure.error/cause - cause exception message\n* :clojure.error/spec - explain-data for spec errors\n\nclojure.main also contains two new functions: `ex-triage` and `ex-str` that can be used by external tools to mimic some or all of the Clojure repl reporting. `ex-triage` takes the output of `Throwable->map` and produces a concise analysis of the error phase, cause, etc (same keys as above). `ex-str` takes that analysis data and produces a message to print at the repl.\n\n* [CLJ-2373](http://dev.clojure.org/jira/browse/CLJ-2373)\n  Detect phase and overhaul exception message and printing\n* [CLJ-2415](http://dev.clojure.org/jira/browse/CLJ-2415)\n  Error cause should always be on 2nd line of error message\n* [CLJ-2420](http://dev.clojure.org/jira/browse/CLJ-2420)\n  Refinement of error phases, `ex-triage`, execution error line reporting\n* [CLJ-2427](http://dev.clojure.org/jira/browse/CLJ-2427)\n  CompilerException.toString() can throw if making message during initialization\n* [CLJ-2430](http://dev.clojure.org/jira/browse/CLJ-2430)\n  Elevate phase in throwable data and conveyance for prepl\n* [CLJ-2435](http://dev.clojure.org/jira/browse/CLJ-2435)\n  Include root cause class name in compilation and macroexpansion error phases\n* [CLJ-2438](http://dev.clojure.org/jira/browse/CLJ-2438)\n  Demunge source symbol in execution error messages\n\n\n### 2.2 Protocol extension by metadata\n\n`defprotocol` has a new option `:extend-via-metadata`. When :extend-via-metadata is true, values can extend protocols by adding metadata where keys are fully-qualified protocol function symbols and values are function implementations. Protocol implementations are checked first for direct definitions (defrecord, deftype, reify), then metadata definitions, then external extensions (extend, extend-type, extend-protocol).\n\n### 2.3 tap\n\ntap is a shared, globally accessible system for distributing a series of informational or diagnostic values to a set of (presumably effectful) handler functions. It can be used as a better debug prn, or for facilities like logging etc.\n\n`tap>` sends a value to the set of taps. Taps can be added with `add-tap` and will be called with any value sent to `tap>`. The tap function may (briefly) block (e.g. for streams) and will never impede calls to `tap>`, but blocking indefinitely may cause tap values to be dropped. If no taps are registered, `tap>` discards. Remove taps with `remove-tap`.\n\n### 2.4 Read string capture mode\n\n`read+string` is a new function that mimics `read` but also captures the string that is read and returns both the read value and the (whitespace-trimmed) read string. `read+string` requires a LineNumberingPushbackReader.\n\n### 2.5 prepl (alpha)\n\nprepl is a new stream-based REPL with structured output (suitable for programmatic use). Forms are read from the reader, evaluated, and return data maps for the return value (if successful), output to `*out*` (possibly many), output to `*err*` (possibly many), or tap> values (possibly many).\n\nNew functions in clojure.core.server:\n\n* `prepl` - the repl\n* `io-prepl` - a prepl bound to `*in*` and `*out*` suitable for use with the Clojure socket server\n* `remote-prepl` - a prepl that can be connected to a remote prepl over a socket\n\nprepl is alpha and subject to change.\n\n### 2.6 datafy and nav\n\nclojure.datafy is a facility for object to data transformation. The `datafy` and `nav` functions can be used used to transform and (lazily) navigate through object graphs. The data transformation process can be influenced by consumers using protocols or metadata.\n\ndatafy is alpha and subject to change.\n\n* [CLJ-2429](http://dev.clojure.org/jira/browse/CLJ-2429)\n  Datafy JavaReflector\n\n\n### 2.6 Other new functions in core\n\nThese functions have been added to match existing functions in ClojureScript to increase the portability of error-handling code:\n\n* `ex-cause` - extract the cause exception\n* `ex-message` - extract the cause message\n\nThis function has been added to construct a PrintWriter implementation whose behavior on flush and close is provided as functions:\n\n* `PrintWriter-on` - create a PrintWriter from flush-fn and close-fn\n\nThe following function has been added, extending `resolve`:\n\n* `requiring-resolve` - resolve or, if needed, require symbol's namespace, then resolve\n* `serialized-require` - like `require` but for use in asynchronous load uses\n\n## 3 Enhancements\n\n### 3.1 Error messages\n\n* [CLJ-1279](http://dev.clojure.org/jira/browse/CLJ-1279)\n  Report correct arity count for function arity errors inside macros\n* [CLJ-2386](http://dev.clojure.org/jira/browse/CLJ-2386)\n  Omit ex-info construction frames\n* [CLJ-2394](http://dev.clojure.org/jira/browse/CLJ-2394)\n  Warn in pst that stack trace for syntax error failed before execution\n* [CLJ-2396](http://dev.clojure.org/jira/browse/CLJ-2396)\n  Omit :in clauses when printing spec function errors if using default explain printer\n* [CLJ-1797](http://dev.clojure.org/jira/browse/CLJ-1797)\n  Mention cljc in error when require fails\n* [CLJ-1130](http://dev.clojure.org/jira/browse/CLJ-1130)\n  Improve error message when unable to match static method\n\n### 3.2 Documentation\n\n* [CLJ-2044](http://dev.clojure.org/jira/browse/CLJ-2044)\n  clojure.instant - add arglist meta for functions\n* [CLJ-2257](http://dev.clojure.org/jira/browse/CLJ-2257)\n  `proxy` - fix typo\n* [CLJ-2332](http://dev.clojure.org/jira/browse/CLJ-2332)\n  `remove-tap` - fix repetition\n* [CLJ-2122](http://dev.clojure.org/jira/browse/CLJ-2122)\n  `flatten` - describe result as lazy\n\n### 3.3 Performance\n\n* [CLJ-1654](http://dev.clojure.org/jira/browse/CLJ-1654)\n  Reuse seq in `some`\n* [CLJ-1366](http://dev.clojure.org/jira/browse/CLJ-1366)\n  The empty map literal is read as a different map each time\n* [CLJ-2362](http://dev.clojure.org/jira/browse/CLJ-2362)\n  `with-meta` should return identity when new meta is identical to prior\n\n### 3.4 Other enhancements\n\n* `symbol` can now take a var or a keyword argument\n* [CLJ-1209](http://dev.clojure.org/jira/browse/CLJ-1209)\n  Print ex-data in clojure.test error reports\n* [CLJ-2163](http://dev.clojure.org/jira/browse/CLJ-2163)\n  Add test for var serialization\n* [CLJ-2417](http://dev.clojure.org/jira/browse/CLJ-2417)\n  `sort` and `sort-by` should retain meta\n\n## 4 Fixes\n\n### 4.1 Collections\n\n* [CLJ-2297](http://dev.clojure.org/jira/browse/CLJ-2297)\n  PersistentHashMap leaks memory when keys are removed with `without`\n* [CLJ-1587](http://dev.clojure.org/jira/browse/CLJ-1587)\n  PersistentArrayMap’s assoc doesn’t respect HASHTABLE_THRESHOLD\n* [CLJ-2050](http://dev.clojure.org/jira/browse/CLJ-2050)\n  Remove redundant key comparisons in HashCollisionNode\n* [CLJ-2089](http://dev.clojure.org/jira/browse/CLJ-2089)\n  Sorted colls with default comparator don’t check that first element is Comparable\n\n### 4.2 API\n\n* [CLJ-2031](http://dev.clojure.org/jira/browse/CLJ-2031)\n  clojure.walk/postwalk does not preserve MapEntry type objects\n* [CLJ-2349](http://dev.clojure.org/jira/browse/CLJ-2349)\n  Report correct line number for uncaught ExceptionInfo in clojure.test\n* [CLJ-1764](http://dev.clojure.org/jira/browse/CLJ-1764)\n  partition-by runs infinite loop when one element of infinite partition is accessed\n* [CLJ-1832](http://dev.clojure.org/jira/browse/CLJ-1832)\n  unchecked-* functions have different behavior on primitive longs vs boxed Longs\n\n### 4.3 Other\n\n* [CLJ-1403](http://dev.clojure.org/jira/browse/CLJ-1403)\n  ns-resolve might throw ClassNotFoundException but should return nil\n* [CLJ-2407](http://dev.clojure.org/jira/browse/CLJ-2407)\n  Fix bugs in Clojure unit tests\n* [CLJ-1079](http://dev.clojure.org/jira/browse/CLJ-1079)\n  In reader, don't ignore explicit :line :col meta\n\n# Changes to Clojure in Version 1.9\n\n## 1 New and Improved Features\n\n### 1.1 spec\n\nspec is a new core library for describing, validating, and testing the structure of data and functions.\n\nFor more information, see:\n\n* [About spec](https://clojure.org/about/spec)\n* [spec Guide](https://clojure.org/guides/spec)\n\nNote that spec is in alpha state and API compatibility is not guaranteed. Also, spec and the specs for the Clojure core API are distributed as external libraries that must be included to use Clojure.\n\n### 1.2 Support for working with maps with qualified keys\n\nSeveral enhancements have been made to add support for working with maps with qualified keys:\n\n* Map namespace syntax - specify the default namespace context for the keys (or symbols) in a map once - `#:car{:make \"Jeep\" :model \"Wrangler\"}`. For more information see https://clojure.org/reference/reader#_maps ([CLJ-1910](http://dev.clojure.org/jira/browse/CLJ-1910))\n* Destructuring support - namespaced map keys can now specified once as a namespace for :keys or :syms. For more information see https://clojure.org/reference/special_forms#_map_binding_destructuring ([CLJ-1919](http://dev.clojure.org/jira/browse/CLJ-1919))\n* `*print-namespace-maps*` - by default maps will not print with the map namespace syntax except in the clojure.main repl. This dynamic var is a flag to allow you to control whether the namespace map syntax is used.\n\n### 1.3 New predicates\n\nSpecs rely heavily on predicates and many new type and value oriented predicates have been added to clojure.core:\n\n* `boolean?`\n* `int?` `pos-int?` `neg-int?` `nat-int?`\n* `double?`\n* `ident?` `simple-ident?` `qualified-ident?`\n* `simple-symbol?` `qualified-symbol?`\n* `simple-keyword?` `qualified-keyword?`\n* `bytes?` (for `byte[]`)\n* `indexed?`\n* `uuid?` `uri?`\n* `seqable?`\n* `any?`\n\n### 1.4 More support for instants\n\nMore support has been added for the notion of instants in time:\n\n* Added a new protocol `Inst` for instant types\n* `Inst` is extended for `java.util.Date`\n* `Inst` is optionally extended for `java.time.Instant` in Java 1.8+\n* New functions that work for instants: `inst?`, `inst-ms`\n\n### 1.5 Other new core functions\n\nThese are some other new functions in clojure.core:\n\n* `bounded-count` - a count that avoids realizing the entire collection beyond a bound\n* `swap-vals!` and `reset-vals!` - new atom functions that return both the old and new values ([CLJ-1454](http://dev.clojure.org/jira/browse/CLJ-1454))\n* `halt-when` - new transducer that ends transduction when pred is satisfied\n\n### 1.6 Other reader enhancements\n\n* Can now bind `*reader-resolver*` to an impl of LispReader$Resolver to control the reader’s use of namespace interactions when resolving autoresolved keywords and maps.\n* Add new ## reader macro for symbolic values, and read/print support for double vals ##Inf, ##-Inf, ##NaN ([CLJ-1074](http://dev.clojure.org/jira/browse/CLJ-1074))\n\n## 2 Enhancements\n\n### 2.1 Spec syntax checking\n\nIf a macro has a spec defined via fdef, that spec will be checked at compile time. Specs have been defined for many clojure.core macros and errors will be reported for these based on the specs at compile time.\n\n### 2.2 Documentation\n\n* `doc` will now report specs for functions with specs defined using `fdef`\n* `doc` can now be invoked with a fully-qualified keyword representing a spec name\n\n### 2.3 Performance\n\n* Improved update-in performance\n* Optimized seq & destructuring\n* [CLJ-2210](http://dev.clojure.org/jira/browse/CLJ-2210)\n  Cache class derivation in compiler to improve compiler performance\n* [CLJ-2188](http://dev.clojure.org/jira/browse/CLJ-2188)\n  `slurp` - mark return type as String\n* [CLJ-2070](http://dev.clojure.org/jira/browse/CLJ-2070)\n  `clojure.core/delay` - improve performance\n* [CLJ-1917](http://dev.clojure.org/jira/browse/CLJ-1917)\n  Reducing seq over string should call String/length outside of loop\n* [CLJ-1901](http://dev.clojure.org/jira/browse/CLJ-1901)\n  `amap` - should call alength only once\n* [CLJ-1224](http://dev.clojure.org/jira/browse/CLJ-1935)\n  Record instances now cache hasheq and hashCode like maps\n* [CLJ-99](http://dev.clojure.org/jira/browse/CLJ-99)\n  `min-key` and `max-key` - evaluate k on each arg at most once\n\n### 2.4 Other enhancements\n\n* Added Var serialization for identity, not value\n* `into` now has a 0-arity (returns `[]`) and 1-arity (returns the coll that's passed)\n* [CLJ-2184](http://dev.clojure.org/jira/browse/CLJ-2184)\n  Propagate meta in doto forms to improve error reporting\n* [CLJ-1744](http://dev.clojure.org/jira/browse/CLJ-1744)\n  Clear unused locals, which can prevent memory leaks in some cases\n* [CLJ-1673](http://dev.clojure.org/jira/browse/CLJ-1673)\n  `clojure.repl/dir-fn` now works on namespace aliases\n* [CLJ-1423](http://dev.clojure.org/jira/browse/CLJ-1423)\n  Allow vars to be invoked with infinite arglists (also, faster)\n\n## 3 Fixes\n\n### 3.1 Security\n\n* [CLJ-2204](http://dev.clojure.org/jira/browse/CLJ-2204)\n  Disable serialization of proxy classes to avoid potential issue when deserializing\n\n### 3.2 Docs\n\n* [CLJ-2170](http://dev.clojure.org/jira/browse/CLJ-2170)\n  fix improperly located docstrings\n* [CLJ-2156](http://dev.clojure.org/jira/browse/CLJ-2156)\n  `clojure.java.io/copy` - doc char[] support\n* [CLJ-2104](http://dev.clojure.org/jira/browse/CLJ-2104)\n  `clojure.pprint` docstring - fix typo\n* [CLJ-2051](http://dev.clojure.org/jira/browse/CLJ-2051)\n  `clojure.instant/validated` docstring - fix typo\n* [CLJ-2039](http://dev.clojure.org/jira/browse/CLJ-2039)\n  `deftype` - fix typo in docstring\n* [CLJ-2028](http://dev.clojure.org/jira/browse/CLJ-2028)\n  `filter`, `filterv`, `remove`, `take-while` - fix docstrings\n* [CLJ-1918](http://dev.clojure.org/jira/browse/CLJ-1918)\n  `await` - improve docstring re `shutdown-agents`\n* [CLJ-1873](http://dev.clojure.org/jira/browse/CLJ-1873)\n  `require`, `*data-readers*` - add .cljc files to docstrings\n* [CLJ-1859](http://dev.clojure.org/jira/browse/CLJ-1859)\n  `zero?`, `pos?`, `neg?` - fix docstrings\n* [CLJ-1837](http://dev.clojure.org/jira/browse/CLJ-1837)\n  `index-of`, `last-index-of` - clarify docstrings\n* [CLJ-1826](http://dev.clojure.org/jira/browse/CLJ-1826)\n  `drop-last` - fix docstring\n* [CLJ-1159](http://dev.clojure.org/jira/browse/CLJ-1159)\n  `clojure.java.io/delete-file` - improve docstring\n\n### 3.3 Other fixes\n\n* `clojure.core/Throwable->map` formerly returned `StackTraceElement`s which were later handled by the printer. Now the StackTraceElements are converted to data such that the return value is pure Clojure data, as intended.\n* [CLJ-2091](http://dev.clojure.org/jira/browse/CLJ-2091)\n  `clojure.lang.APersistentVector#hashCode` is not thread-safe\n* [CLJ-2077](http://dev.clojure.org/jira/browse/CLJ-2077)\n  Clojure can't be loaded from the boot classpath under java 9\n* [CLJ-2048](http://dev.clojure.org/jira/browse/CLJ-2048)\n  Specify type to avoid ClassCastException when stack trace is elided by JVM\n* [CLJ-1914](http://dev.clojure.org/jira/browse/CLJ-1914)\n  Fixed race condition in concurrent `range` realization\n* [CLJ-1887](http://dev.clojure.org/jira/browse/CLJ-1887)\n  `IPersistentVector.length()` - implement missing method\n* [CLJ-1870](http://dev.clojure.org/jira/browse/CLJ-1870)\n  Fixed reloading a `defmulti` removes metadata on the var\n* [CLJ-1860](http://dev.clojure.org/jira/browse/CLJ-1860)\n  Make -0.0 hash consistent with 0.0\n* [CLJ-1841](http://dev.clojure.org/jira/browse/CLJ-1841)\n  `bean` - iterator was broken\n* [CLJ-1793](http://dev.clojure.org/jira/browse/CLJ-1793)\n  Clear 'this' before calls in tail position\n* [CLJ-1790](http://dev.clojure.org/jira/browse/CLJ-1790)\n  Fixed error extending protocols to Java arrays\n* [CLJ-1714](http://dev.clojure.org/jira/browse/CLJ-1714)\n  using a class in a type hint shouldn’t load the class\n* [CLJ-1705](http://dev.clojure.org/jira/browse/CLJ-1705)\n  `vector-of` - fix NullPointerException if given unrecognized type\n* [CLJ-1398](http://dev.clojure.org/jira/browse/CLJ-1398)\n  `clojure.java.javadoc/javadoc` - update doc urls\n* [CLJ-1371](http://dev.clojure.org/jira/browse/CLJ-1371)\n  `Numbers.divide(Object, Object)` - add checks for NaN\n* [CLJ-1358](http://dev.clojure.org/jira/browse/CLJ-1358)\n  `doc` - does not expand special cases properly (try, catch)\n* [CLJ-1242](http://dev.clojure.org/jira/browse/CLJ-1242)\n  equals doesn't throw on sorted collections\n* [CLJ-700](http://dev.clojure.org/jira/browse/CLJ-700)\n  `contains?`, `get`, and `find` broken for transient collections\n\n# Changes to Clojure in Version 1.8\n\n## 1 New and Improved Features\n\n### 1.1 Direct Linking\n\nDirect linking can be enabled with `-Dclojure.compiler.direct-linking=true`\n\nDirect linking allows functions compiled with direct linking on to make direct\nstatic method calls to most other functions, instead of going through the var\nand the Fn object. This can enable further optimization by the jit, at a cost\nin dynamism. In particular, directly-linked calls will not see redefinitions.\n\nWith this change, clojure.core itself is compiled with direct linking\nand therefore other namespaces cannot redefine core fns and have those\nredefinitions seen by core code.\n\nA new metadata key ^:redef is provided. A function declared with this key can\nbe redefined and will never be direct linked. Also, functions declared as\n^:dynamic will never be direct linked.\n\n* [CLJ-1809](http://dev.clojure.org/jira/browse/CLJ-1809)\n* [CLJ-1805](http://dev.clojure.org/jira/browse/CLJ-1805)\n* [CLJ-1854](http://dev.clojure.org/jira/browse/CLJ-1854)\n* [CLJ-1856](http://dev.clojure.org/jira/browse/CLJ-1856)\n\n### 1.2 String Functions\n\nSeveral new string functions were added to clojure.string to increase\nportability and reduce the need for Java interop calls:\n\n* index-of - search for the index of a char or string in a string\n* last-index-of - search for the index of a char or string backwards in a string\n* starts-with? - true if string starts with a substring\n* ends-with? - true if string ends with a substring\n* includes? - true if string includes a substring\n\n* [CLJ-1449](http://dev.clojure.org/jira/browse/CLJ-1449)\n\n### 1.3 Socket Server and REPL\n\nThe Clojure runtime now has the ability to start a socket server at initialization\nbased on system properties. One expected use for this is serving a socket-based\nREPL, but it also has many other potential uses for dynamically adding server\ncapability to existing programs without code changes.\n\nA socket server will be started for each JVM system property like\n`clojure.server.<server-name>`. The value for this property is an edn map\nrepresenting the configuration of the socket server with the following properties:\n\n* address - host or address, defaults to loopback\n* port - positive integer, required\n* accept - namespaced symbol of function to invoke on socket accept, required\n* args - sequential collection of args to pass to accept\n* bind-err - defaults to true, binds `*err*` to socket out stream\n* server-daemon - defaults to true, socket server thread doesn't block exit\n* client-daemon - defaults to true, socket client thread doesn't block exit\n\nAdditionally, there is a repl function provided that is slightly customized for\nuse with the socket server in `clojure.core.server/repl`.\n\nFollowing is an example of starting a socket server with a repl listener.\nThis can be added to any existing Clojure program to allow it to accept\nexternal REPL clients.\n\n```\n-Dclojure.server.repl=\"{:port 5555 :accept clojure.core.server/repl}\"\n```\n\nAn example client you can use to connect to this socket repl is telnet:\n\n```\n$ telnet 127.0.0.1 5555\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nuser=> (println \"hello\")\nhello\n```\n\nSee:\n\n* [CLJ-1671](http://dev.clojure.org/jira/browse/CLJ-1671)\n* [CLJ-1853](http://dev.clojure.org/jira/browse/CLJ-1853)\n* [Socket REPL design page](http://dev.clojure.org/display/design/Socket+Server+REPL)\n* [CLJ-1829](http://dev.clojure.org/jira/browse/CLJ-1829)\n\n## 2 Enhancements\n\n### 2.1 Error handling\n\n* [CLJ-1778](http://dev.clojure.org/jira/browse/CLJ-1778)\n  let-bound namespace-qualified bindings should throw (if not map destructuring)\n* [CLJ-1456](http://dev.clojure.org/jira/browse/CLJ-1456)\n  Compiler now errors if too few or too many arguments to throw\n* [CLJ-1282](http://dev.clojure.org/jira/browse/CLJ-1282)\n  quote now throws if passed more or less than one arg\n* [CLJ-1210](http://dev.clojure.org/jira/browse/CLJ-1210)\n  Improved error message for (clojure.java.io/reader nil)\n\n### 2.2 Documentation strings\n\n* [CLJ-1060](http://dev.clojure.org/jira/browse/CLJ-1060)\n  'list*' returns not a list\n* [CLJ-1722](http://dev.clojure.org/jira/browse/CLJ-1722)\n  Typo in the docstring of 'with-bindings'\n* [CLJ-1769](http://dev.clojure.org/jira/browse/CLJ-1769)\n  Docstrings for *' and +' refer to * and +\n* [CLJ-1414](http://dev.clojure.org/jira/browse/CLJ-1414)\n  sort and sort-by now indicate sort is stable in docstring\n\n### 2.3 Performance\n\n* [CLJ-703](http://dev.clojure.org/jira/browse/CLJ-703)\n  Improve writeClassFile performance\n* [CLJ-1765](http://dev.clojure.org/jira/browse/CLJ-1765)\n  areduce performance improvements\n* [CLJ-1724](http://dev.clojure.org/jira/browse/CLJ-1724)\n  Remove unnecessary call to seq() in LazySeq.hashCode()\n* [CLJ-1295](http://dev.clojure.org/jira/browse/CLJ-1295)\n  Improved array-map dissoc performance\n* [CLJ-1277](http://dev.clojure.org/jira/browse/CLJ-1277)\n  Speed up printing of time instants with type hints\n* [CLJ-1259](http://dev.clojure.org/jira/browse/CLJ-1259)\n  Speed up pprint and cl-format with type hints\n* [CLJ-668](http://dev.clojure.org/jira/browse/CLJ-668)\n  Improve slurp performance by using StringWriter and jio/copy\n\n### 2.4 Other enhancements\n\n* [CLJ-1208](http://dev.clojure.org/jira/browse/CLJ-1208)\n  Optionally require namespace on defrecord class init\n* [CLJ-1823](http://dev.clojure.org/jira/browse/CLJ-1823)\n  Document new :load-ns option to defrecord/deftype\n* [CLJ-1810](http://dev.clojure.org/jira/browse/CLJ-1810)\n  ATransientMap now marked public\n* [CLJ-1653](http://dev.clojure.org/jira/browse/CLJ-1653)\n  str of an empty list should be \"()\"\n* [CLJ-1567](http://dev.clojure.org/jira/browse/CLJ-1567)\n  Removed unused local in condp implementation\n* [CLJ-1351](http://dev.clojure.org/jira/browse/CLJ-1351)\n  Unused swapThunk method was being emitted for fns with keyword callsites\n* [CLJ-1329](http://dev.clojure.org/jira/browse/CLJ-1329)\n  Removed unused local in PersistentVector.cons()\n* [CLJ-1831](http://dev.clojure.org/jira/browse/CLJ-1831)\n  Add clojure.core/map-entry? predicate\n* [CLJ-1845](http://dev.clojure.org/jira/browse/CLJ-1845)\n  Make clojure.core/load dynamic so it can be redef'ed even with direct linking\n\n## 3 Bug Fixes\n\n* [CLJ-130](http://dev.clojure.org/jira/browse/CLJ-130)\n  Namespace metadata lost in AOT compile\n* [CLJ-1134](http://dev.clojure.org/jira/browse/CLJ-1134)\n  star-directive in clojure.pprint/cl-format with at-prefix (\"~n@*\") does\n  not obey its specification\n* [CLJ-1137](http://dev.clojure.org/jira/browse/CLJ-1137)\n  Metadata on a def gets evaluated twice\n* [CLJ-1157](http://dev.clojure.org/jira/browse/CLJ-1157)\n  Classes generated by gen-class aren't loadable from remote codebase\n* [CLJ-1225](http://dev.clojure.org/jira/browse/CLJ-1225)\n  quot overflow issues around Long/MIN_VALUE for BigInt\n* [CLJ-1313](http://dev.clojure.org/jira/browse/CLJ-1313)\n  Correct a few unit tests\n* [CLJ-1319](http://dev.clojure.org/jira/browse/CLJ-1319)\n  array-map fails lazily if passed an odd number of arguments\n* [CLJ-1361](http://dev.clojure.org/jira/browse/CLJ-1361)\n  pprint with code-dispatch incorrectly prints a simple ns macro call\n* [CLJ-1390](http://dev.clojure.org/jira/browse/CLJ-1390)\n  pprint a GregorianCalendar results in Arity exception\n* [CLJ-1399](http://dev.clojure.org/jira/browse/CLJ-1399)\n  field name unmunged when recreating deftypes serialized into bytecode\n* [CLJ-1485](http://dev.clojure.org/jira/browse/CLJ-1485)\n  clojure.test.junit/with-junit-output doesn't handle multiple expressions\n* [CLJ-1528](http://dev.clojure.org/jira/browse/CLJ-1528)\n  clojure.test/inc-report-counter is not thread-safe\n* [CLJ-1533](http://dev.clojure.org/jira/browse/CLJ-1533)\n  invokePrim path does not take into account var or form meta\n* [CLJ-1562](http://dev.clojure.org/jira/browse/CLJ-1562)\n  some->,some->>,cond->,cond->> and as-> doesn't work with (recur)\n* [CLJ-1565](http://dev.clojure.org/jira/browse/CLJ-1565)\n  pprint produces infinite output for a protocol\n* [CLJ-1588](http://dev.clojure.org/jira/browse/CLJ-1588)\n  StackOverflow in clojure.test macroexpand with `are` and anon `fn`\n* [CLJ-1644](http://dev.clojure.org/jira/browse/CLJ-1644)\n  into-array fails for sequences starting with nil\n* [CLJ-1645](http://dev.clojure.org/jira/browse/CLJ-1645)\n  protocol class does not set the source file\n* [CLJ-1657](http://dev.clojure.org/jira/browse/CLJ-1657)\n  proxy bytecode calls super methods of abstract classes\n* [CLJ-1659](http://dev.clojure.org/jira/browse/CLJ-1659)\n  compile leaks files\n* [CLJ-1761](http://dev.clojure.org/jira/browse/CLJ-1761)\n  clojure.core/run! does not always return nil per docstring\n* [CLJ-1782](http://dev.clojure.org/jira/browse/CLJ-1782)\n  Spelling mistake in clojure.test/use-fixtures\n* [CLJ-1785](http://dev.clojure.org/jira/browse/CLJ-1785)\n  Reader conditionals throw when returning nil\n* [CLJ-1766](http://dev.clojure.org/jira/browse/CLJ-1766)\n  Serializing+deserializing lists breaks their hash\n* [CLJ-1609](http://dev.clojure.org/jira/browse/CLJ-1609)\n  Edge case in Reflector's search for a public method declaration\n* [CLJ-1586](http://dev.clojure.org/jira/browse/CLJ-1586)\n  Compiler doesn't preserve metadata for LazySeq literals\n* [CLJ-1232](http://dev.clojure.org/jira/browse/CLJ-1232)\n  Functions with non-qualified return type hints will now work without\n  import from other namespace\n* [CLJ-1812](http://dev.clojure.org/jira/browse/CLJ-1812)\n  Fix test failure on windows due to line endings\n* [CLJ-1380](http://dev.clojure.org/jira/browse/CLJ-1380)\n  3-arg ExceptionInfo constructor permitted nil data\n* [CLJ-1226](http://dev.clojure.org/jira/browse/CLJ-1226)\n  set! of a deftype field using field-access syntax caused ClassCastException\n* Records and types without fields eval to empty map\n* [CLJ-1827](http://dev.clojure.org/jira/browse/CLJ-1827)\n  Fix reflection warning introduced in CLJ-1259\n* [CLJ-1453](http://dev.clojure.org/jira/browse/CLJ-1453)\n  Ensure that all Iterator implementations throw NoSuchElementException\n  on next() when exhausted\n* [CLJ-1868](http://dev.clojure.org/jira/browse/CLJ-1868)\n  Avoid compiler NPE when checking class return type\n\n# Changes to Clojure in Version 1.7\n\n## 1 Compatibility Notes\n\nPlease be aware of the following issues when upgrading to Clojure 1.7.\n\n### Seqs on Java iterators that return the same mutating object\n\nSeqs are fundamentally incompatible with Java iterators that return\nthe same mutating object on every call to next().  Some Clojure\nlibraries incorrectly rely on calling seq on such iterators.\n\nIn 1.7, iterator-seqs are chunked, which will cause many of these\nincorrect usages to return incorrect results immediately.\n\nThe `seq` and `iterator-seq` docstrings have been updated to include\nan explicit warning. Libraries that incorrectly use `seq` and\n`iterator-seq` will need to be fixed before running against 1.7.\n\n* [CLJ-1669](http://dev.clojure.org/jira/browse/CLJ-1669)\n* [CLJ-1738](http://dev.clojure.org/jira/browse/CLJ-1738)\n\n### Thread owner check removed on transients\n\nPrior to Clojure 1.7, transients would allow modification only from the\nthread that created the transient. This check has been removed. It is\nstill a requirement that transients should be updated by only a single\nthread at a time.\n\nThis constraint was relaxed to allow transients to be used in cases where\ncode is multiplexed across multiple threads in a pool (such as go blocks\nin core.async).\n\n### keys/vals require custom map type to implement Iterable\n\nInvoking `keys` or `vals` on a custom map type that implements IPersistentMap\nwill now use the Iterable iterator() method instead of accessing entries\nvia the seq of the map. There have been no changes in the type hierarchy\n(IPersistentMap has always extended Iterable) but former map-like instances\nmay have skipped implementing this method in the past.\n\n* [CLJ-1602](http://dev.clojure.org/jira/browse/CLJ-1602)\n\n## 2 New and Improved Features\n\n### 2.1 Transducers\n\nTransducers is a new way to decouple algorithmic transformations from their\napplication in different contexts. Transducers are functions that transform\nreducing functions to build up a \"recipe\" for transformation.\n\nAlso see: http://clojure.org/transducers\n\nMany existing sequence functions now have a new arity (one fewer argument\nthan before). This arity will return a transducer that represents the same\nlogic but is independent of lazy sequence processing. Functions included are:\n\n* map\n* mapcat\n* filter\n* remove\n* take\n* take-while\n* drop\n* drop-while\n* take-nth\n* replace\n* partition-by\n* partition-all\n* keep\n* keep-indexed\n* map-indexed\n* distinct\n* interpose\n\nAdditionally some new transducer functions have been added:\n\n* cat - concatenates the contents of each input\n* dedupe - removes consecutive duplicated values\n* random-sample - returns items from coll with random probability\n\nAnd this function can be used to make completing transforms:\n\n* completing\n\nThere are also several new or modified functions that can be used to apply\ntransducers in different ways:\n\n* sequence - takes a transformation and a coll and produces a lazy seq\n* transduce - reduce with a transformation (eager)\n* eduction - returns a reducible/iterable of applications of the transducer to items in coll. Applications are re-performed with every reduce/iterator.\n\nThere have been a number of internal changes to support transducers:\n\n* volatiles - there are a new set of functions (volatile!, vswap!, vreset!, volatile?) to create and use volatile \"boxes\" to hold state in stateful transducers. Volatiles are faster than atoms but give up atomicity guarantees so should only be used with thread isolation.\n* array iterators - added support for iterators over arrays\n* conj can be used as a reducing function and will conj to []\n\nSome related issues addressed during development:\n* [CLJ-1511](http://dev.clojure.org/jira/browse/CLJ-1511)\n* [CLJ-1497](http://dev.clojure.org/jira/browse/CLJ-1497)\n* [CLJ-1549](http://dev.clojure.org/jira/browse/CLJ-1549)\n* [CLJ-1537](http://dev.clojure.org/jira/browse/CLJ-1537)\n* [CLJ-1554](http://dev.clojure.org/jira/browse/CLJ-1554)\n* [CLJ-1601](http://dev.clojure.org/jira/browse/CLJ-1601)\n* [CLJ-1606](http://dev.clojure.org/jira/browse/CLJ-1606)\n* [CLJ-1621](http://dev.clojure.org/jira/browse/CLJ-1621)\n* [CLJ-1600](http://dev.clojure.org/jira/browse/CLJ-1600)\n* [CLJ-1635](http://dev.clojure.org/jira/browse/CLJ-1635)\n* [CLJ-1683](http://dev.clojure.org/jira/browse/CLJ-1683)\n* [CLJ-1669](http://dev.clojure.org/jira/browse/CLJ-1669)\n* [CLJ-1723](http://dev.clojure.org/jira/browse/CLJ-1723)\n\n### 2.2 Reader Conditionals\n\nReader Conditionals are a new capability to support portable code that\ncan run on multiple Clojure platforms with only small changes. In\nparticular, this feature aims to support the increasingly common case\nof libraries targeting both Clojure and ClojureScript.\n\nCode intended to be common across multiple platforms should use a new\nsupported file extension: \".cljc\". When requested to load a namespace,\nthe platform-specific file extension (.clj, .cljs) will be checked\nprior to .cljc.\n\nA new reader form can be used to specify \"reader conditional\" code in\ncljc files (and *only* cljc files). Each platform defines a feature\nidentifying the platform (:clj, :cljs, :cljr). The reader conditional\nspecifies code that is read conditionally based on the feature. The\nREPL also allows reader conditionals.\n\nForm #? takes a list of alternating feature and expression. These are\nchecked like cond and the selected expression is read and returned. Other\nbranches are read but skipped. If no branch is selected, the reader reads\nnothing (not nil, but literally as if reading no form). An optional\n`:default` branch can be used as a fallthrough.\n\nReader conditional with 2 features and a default:\n\n\t#?(:clj     Double/NaN\n\t   :cljs    js/NaN\n\t   :default nil)\n\nThere is also a reader conditional splicing form. The evaluated expression\nshould be sequential and will be spliced into the surrounded code, similar\nto unquote-splicing.\n\nFor example:\n\n   [1 2 #?@(:clj [3 4] :cljs [5 6])]\n\nThis form would read as [1 2 3 4] on Clojure, [1 2 5 6] on ClojureScript,\nand [1 2] on any other platform. Splicing is not allowed at the top level.\n\nAdditionally, the reader can now be invoked with options for the features\nto use and how to interpret reader conditionals. By default, reader conditionals\nare not allowed, but that can be turned on, or a \"preserve\" mode can be used to\npreserve all branches (most likely useful for tooling or source transforms).\n\nIn the preserve mode, the reader conditional itself and any tagged literals\nwithin the unselected branches are returned as tagged literal data.\n\nFor more information, see:\nhttp://dev.clojure.org/display/design/Reader+Conditionals\n\n* [CLJ-1424](http://dev.clojure.org/jira/browse/CLJ-1424)\n* [CLJ-1685](http://dev.clojure.org/jira/browse/CLJ-1685)\n* [CLJ-1698](http://dev.clojure.org/jira/browse/CLJ-1698)\n* [CLJ-1699](http://dev.clojure.org/jira/browse/CLJ-1699)\n* [CLJ-1700](http://dev.clojure.org/jira/browse/CLJ-1700)\n* [CLJ-1728](http://dev.clojure.org/jira/browse/CLJ-1728)\n* [CLJ-1706](http://dev.clojure.org/jira/browse/CLJ-1706)\n\n### 2.3 Keyword and Symbol Construction\n\nIn response to issues raised in [CLJ-1439](http://dev.clojure.org/jira/browse/CLJ-1439),\nseveral changes have been made in symbol and keyword construction:\n\n1) The main bottleneck in construction of symbols (which also occurs inside keywords) was\ninterning of the name and namespace strings. This interning has been removed, resulting\nin a performance increase.\n\n2) Keywords are cached and keyword construction includes a cache check. A change was made\nto only clear the cache reference queue when there is a cache miss.\n\n### 2.4 Warn on Boxed Math\n\nOne source of performance issues is the (unintended) use of arithmetic operations on\nboxed numbers. To make detecting the presence of boxed math easier, a warning will now\nbe emitted about boxed math if \\*unchecked-math* is set to :warn-on-boxed (any truthy\nvalue will enable unchecked-math, only this specific value enables the warning).\n\nExample use:\n\n    user> (defn plus-2 [x] (+ x 2))  ;; no warning, but boxed\n\t#'user/plus-2\n    user> (set! *unchecked-math* :warn-on-boxed)\n\ttrue\n    user> (defn plus-2 [x] (+ x 2)) ;; now we see a warning\n    Boxed math warning, NO_SOURCE_PATH:10:18 - call: public static java.lang.Number\n\tclojure.lang.Numbers.unchecked_add(java.lang.Object,long).\n    #'user/plus-2\n\tuser> (defn plus-2 [^long x] (+ x 2)) ;; use a hint to avoid boxing\n\t#'user/plus-2\n\n* [CLJ-1325](http://dev.clojure.org/jira/browse/CLJ-1325)\n* [CLJ-1535](http://dev.clojure.org/jira/browse/CLJ-1535)\n* [CLJ-1642](http://dev.clojure.org/jira/browse/CLJ-1642)\n\n### 2.5 update - like update-in for first level\n\n`update` is a new function that is like update-in specifically for first-level keys:\n\n    (update m k f args...)\n\nExample use:\n\n    user> (update {:a 1} :a inc)\n\t{:a 2}\n\tuser> (update {:a 1} :a + 2)\n\t{:a 3}\n\tuser> (update {} :a identity)  ;; missing returns nil\n\t{:a nil}\n\n* [CLJ-1251](http://dev.clojure.org/jira/browse/CLJ-1251)\n\n### 2.6 Faster reduce and iterator paths\n\nSeveral important Clojure functions now return sequences that also\ncontain fast reduce() (or in some cases iterator()) paths. In many\ncases, the new implementations are also faster for lazy sequences\n\n* repeat - now implements IReduce\n* cycle - implements IReduceInit\n* iterate - implements IReduceInit\n* range - implements IReduce, specialized case handles common case of all longs\n* keys - iterates directly over the keys of a map, without seq or MapEntry allocation\n* vals - iterates directly over the vals of a map, without seq or MapEntry allocation\n* iterator-seq - creates a chunked sequence when previously it was unchunked\n\nAdditionally, hash-maps and hash-sets now provide iterators that walk\nthe data structure directly rather than via a sequence.\n\nA new interface (IMapIterable) for direct key and val iterators on maps\nwas added. External data structures can use this interface to provide\ndirect key and val iterators via keys and vals.\n\nThese enhancements are particularly effective when used\nin tandem with transducers via transduce, sequence, into, and\neduction.\n\n* [CLJ-1603](http://dev.clojure.org/jira/browse/CLJ-1603)\n* [CLJ-1515](http://dev.clojure.org/jira/browse/CLJ-1515)\n* [CLJ-1602](http://dev.clojure.org/jira/browse/CLJ-1602)\n* [CLJ-1669](http://dev.clojure.org/jira/browse/CLJ-1669)\n* [CLJ-1692](http://dev.clojure.org/jira/browse/CLJ-1692)\n* [CLJ-1694](http://dev.clojure.org/jira/browse/CLJ-1694)\n* [CLJ-1711](http://dev.clojure.org/jira/browse/CLJ-1711)\n* [CLJ-1709](http://dev.clojure.org/jira/browse/CLJ-1709)\n* [CLJ-1713](http://dev.clojure.org/jira/browse/CLJ-1713)\n* [CLJ-1726](http://dev.clojure.org/jira/browse/CLJ-1726)\n* [CLJ-1727](http://dev.clojure.org/jira/browse/CLJ-1727)\n\n### 2.7 Printing as data\n\nThere have been enhancements in how the REPL prints values without a\nprint-method, specifically Throwable and the fallthrough Object case.\nBoth cases now print in a tagged literal data form that can be read\nby the reader.\n\nUnhandled objects print with the class, hash code, and toString:\n\n\tuser=> *ns*\n\t#object[clojure.lang.Namespace 0x55aa628 \"user\"]\n\nThrown exceptions will still be printed in the normal way by the default\nREPL but printing them to a stream will show a different form:\n\n\tuser=> (/ 1 0)\n\tArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)\n\tuser=> (println *e)\n\t#error {\n\t :cause Divide by zero\n\t :via\n\t [{:type java.lang.ArithmeticException\n\t   :message Divide by zero\n\t   :at [clojure.lang.Numbers divide Numbers.java 158]}]\n\t :trace\n\t [[clojure.lang.Numbers divide Numbers.java 158]\n\t  [clojure.lang.Numbers divide Numbers.java 3808]\n\t  ;; ... elided frames\n\t  ]}\n\nAdditionally, there is a new function available to obtain a Throwable as \nmap data: `Throwable->map`.\n\n* [CLJ-1703](http://dev.clojure.org/jira/browse/CLJ-1703)\n* [CLJ-1716](http://dev.clojure.org/jira/browse/CLJ-1716)\n* [CLJ-1735](http://dev.clojure.org/jira/browse/CLJ-1735)\n\n### 2.8 run!\n\nrun! is a new function that takes a side effect reducing function and runs\nit for all items in a collection via reduce. The accumulator is ignored and\nnil is returned.\n\n    (run! println (range 10))\n\n## 3 Enhancements\n\n### 3.1 Error messages\n\n* [CLJ-1261](http://dev.clojure.org/jira/browse/CLJ-1261)\n  Invalid defrecord results in exception attributed to consuming ns instead of defrecord ns\n* [CLJ-1297](http://dev.clojure.org/jira/browse/CLJ-1297)\n  Give more specific hint if namespace with \"-\" not found to check file uses \"_\"\n\n### 3.2 Documentation strings\n\n* [CLJ-1417](http://dev.clojure.org/jira/browse/CLJ-1417)\n  clojure.java.io/input-stream has incorrect docstring\n* [CLJ-1357](http://dev.clojure.org/jira/browse/CLJ-1357)\n  Fix typo in gen-class doc-string\n* [CLJ-1479](http://dev.clojure.org/jira/browse/CLJ-1479)\n  Fix typo in filterv example\n* [CLJ-1480](http://dev.clojure.org/jira/browse/CLJ-1480)\n  Fix typo in defmulti docstring\n* [CLJ-1477](http://dev.clojure.org/jira/browse/CLJ-1477)\n  Fix typo in deftype docstring\n* [CLJ-1478](http://dev.clojure.org/jira/browse/CLJ-1378)\n  Fix typo in clojure.main usage\n* [CLJ-1738](http://dev.clojure.org/jira/browse/CLJ-1738)\n  Clarify usage on Java iterators in seq and iterator-seq\n\n### 3.3 Performance\n\n* [CLJ-1430](http://dev.clojure.org/jira/browse/CLJ-1430)\n  Improve performance of partial with more unrolling\n* [CLJ-1384](http://dev.clojure.org/jira/browse/CLJ-1384)\n  clojure.core/set should use transients for better performance\n* [CLJ-1429](http://dev.clojure.org/jira/browse/CLJ-1429)\n  Cache unknown multimethod value default dispatch\n* [CLJ-1529](http://dev.clojure.org/jira/browse/CLJ-1529)\n  Reduce compile times by avoiding unnecessary calls to Class.forName()\n* [CLJ-1546](http://dev.clojure.org/jira/browse/CLJ-1546)\n  vec is now faster on almost all inputs\n* [CLJ-1618](http://dev.clojure.org/jira/browse/CLJ-1618)\n  set is now faster on almost all inputs\n* [CLJ-1695](http://dev.clojure.org/jira/browse/CLJ-1695)\n  Fixed reflection call in variadic vector-of constructor\n\n### 3.4 Other enhancements\n\n* [CLJ-1191](http://dev.clojure.org/jira/browse/CLJ-1191)\n  Improve apropos to show some indication of namespace of symbols found\n* [CLJ-1378](http://dev.clojure.org/jira/browse/CLJ-1378)\n  Hints don't work with #() form of function\n* [CLJ-1498](http://dev.clojure.org/jira/browse/CLJ-1498)\n  Removes owner-thread check from transients - this check was preventing some valid usage of transients in core.async where a transient is created on one thread and then used again in another pooled thread (while still maintaining thread isolation).\n* [CLJ-803](http://dev.clojure.org/jira/browse/CLJ-803)\n  Extracted IAtom interface implemented by Atom.\n* [CLJ-1315](http://dev.clojure.org/jira/browse/CLJ-1315)\n  Don't initialize classes when importing them\n* [CLJ-1330](http://dev.clojure.org/jira/browse/CLJ-1330)\n  Class name clash between top-level functions and defn'ed ones\n* [CLJ-1349](http://dev.clojure.org/jira/browse/CLJ-1349)\n  Update to latest test.generative and add dependency on test.check\n* [CLJ-1546](http://dev.clojure.org/jira/browse/CLJ-1546)\n  vec now works with things that only implement Iterable or IReduceInit\n* [CLJ-1618](http://dev.clojure.org/jira/browse/CLJ-1618)\n  set now works with things that only implement Iterable or IReduceInit\n* [CLJ-1633](http://dev.clojure.org/jira/browse/CLJ-1633)\n  PersistentList/creator doesn't handle ArraySeqs correctly\n* [CLJ-1589](http://dev.clojure.org/jira/browse/CLJ-1589)\n  Clean up unused paths in InternalReduce\n* [CLJ-1677](http://dev.clojure.org/jira/browse/CLJ-1677)\n  Add setLineNumber() to LineNumberingPushbackReader\n* [CLJ-1667](http://dev.clojure.org/jira/browse/CLJ-1667)\n  Change test to avoid using hard-coded socket port\n* [CLJ-1683](http://dev.clojure.org/jira/browse/CLJ-1683)\n  Change reduce tests to better catch reduce without init bugs\n\n## 4 Bug Fixes\n\n* [CLJ-1362](http://dev.clojure.org/jira/browse/CLJ-1362)\n  Reduce broken on some primitive vectors\n* [CLJ-1388](http://dev.clojure.org/jira/browse/CLJ-1388)\n  Equality bug on records created with nested calls to map->record\n* [CLJ-1274](http://dev.clojure.org/jira/browse/CLJ-1274)\n  Unable to set compiler options via system properties except for AOT compilation\n* [CLJ-1241](http://dev.clojure.org/jira/browse/CLJ-1241)\n  NPE when AOTing overrided clojure.core functions\n* [CLJ-1185](http://dev.clojure.org/jira/browse/CLJ-1185)\n  reductions does not check for reduced value\n* [CLJ-1039](http://dev.clojure.org/jira/browse/CLJ-1039)\n  Using def with metadata {:type :anything} throws ClassCastException during printing\n* [CLJ-887](http://dev.clojure.org/jira/browse/CLJ-887)\n  Error when calling primitive functions with destructuring in the arg vector\n* [CLJ-823](http://dev.clojure.org/jira/browse/CLJ-823)\n  Piping seque into seque can deadlock\n* [CLJ-738](http://dev.clojure.org/jira/browse/CLJ-738)\n  <= is incorrect when args include Double/NaN\n* [CLJ-1408](http://dev.clojure.org/jira/browse/CLJ-1408)\n  Make cached string value of Keyword and Symbol transient\n* [CLJ-1466](http://dev.clojure.org/jira/browse/CLJ-1466)\n  clojure.core/bean should implement Iterable\n* [CLJ-1578](http://dev.clojure.org/jira/browse/CLJ-1578)\n  Make refer of Clojure core function not throw exception on reload\n* [CLJ-1501](http://dev.clojure.org/jira/browse/CLJ-1501)\n  LazySeq equals() should not use equiv() logic\n* [CLJ-1572](http://dev.clojure.org/jira/browse/CLJ-1572)\n  into (and other fns that rely on reduce) require only IReduceInit\n* [CLJ-1619](http://dev.clojure.org/jira/browse/CLJ-1619)\n  PersistentVector now directly implements reduce without init\n* [CLJ-1580](http://dev.clojure.org/jira/browse/CLJ-1580)\n  Transient collections should guarantee thread visibility\n* [CLJ-1590](http://dev.clojure.org/jira/browse/CLJ-1590)\n  Some IReduce/IReduceInit implementors don't respect reduced\n* [CLJ-979](http://dev.clojure.org/jira/browse/CLJ-979)\n  Clojure resolves to wrong deftype classes when AOT compiling or reloading\n* [CLJ-1636](http://dev.clojure.org/jira/browse/CLJ-1636)\n  Fix intermittent SeqIterator problem by removing use of this as a sentinel\n* [CLJ-1637](http://dev.clojure.org/jira/browse/CLJ-1636)\n  Fix regression from CLJ-1546 that broke vec on MapEntry\n* [CLJ-1663](http://dev.clojure.org/jira/browse/CLJ-1663)\n  Fix regression from CLJ-979 for DynamicClassLoader classloader delegation\n* [CLJ-1604](http://dev.clojure.org/jira/browse/CLJ-1604)\n  Fix error from AOT'ed code defining a var with a clojure.core symbol name\n* [CLJ-1561](http://dev.clojure.org/jira/browse/CLJ-1561)\n  Fix incorrect line number reporting for error locations\n* [CLJ-1568](http://dev.clojure.org/jira/browse/CLJ-1568)\n  Fix incorrect line number reporting for error locations\n* [CLJ-1638](http://dev.clojure.org/jira/browse/CLJ-1638)\n  Fix regression from CLJ-1546 removed PersistentVector.create(List) method\n* [CLJ-1681](http://dev.clojure.org/jira/browse/CLJ-1681)\n  Fix regression from CLJ-1248 (1.6) in reflection warning with literal nil argument\n* [CLJ-1648](http://dev.clojure.org/jira/browse/CLJ-1648)\n  Use equals() instead of == when resolving Symbol\n* [CLJ-1195](http://dev.clojure.org/jira/browse/CLJ-1195)\n  emit-hinted-impl expands to ns-qualified invocation of fn\n* [CLJ-1237](http://dev.clojure.org/jira/browse/CLJ-1237)\n  reduce of sequence that switches between chunked and unchunked many times throws StackOverflow\n\n# Changes to Clojure in Version 1.6\n\n## CONTENTS\n\n## 1 Compatibility and Dependencies\n\n## 1.1 JDK Version Update\n\nClojure now builds with Java SE 1.6 and emits bytecode requiring Java\nSE 1.6 instead of Java SE 1.5. [CLJ-1268]\n\n## 1.2 ASM Library Update\n\nThe embedded version of the ASM bytecode library has been upgraded to\nASM 4.1. [CLJ-713]\n\n## 1.3 Promoted \"Alpha\" Features\n\nThe following features are no longer marked Alpha in Clojure:\n\n* Watches - add-watch, remove-watch\n* Transients - transient, persistent!, conj!, assoc!, dissoc!, pop!, disj!\n* Exception data - ex-info, ex-data\n* Promises - promise, deliver\n* Records - defrecord\n* Types - deftype\n* Pretty-print tables - print-table\n\n## 2 New and Improved Features\n\n### 2.1 Java API\n\nThe clojure.java.api package provides a minimal interface to bootstrap\nClojure access from other JVM languages. It does this by providing:\n1. The ability to use Clojure's namespaces to locate an arbitrary var,\n   returning the var's clojure.lang.IFn interface.\n2. A convenience method read for reading data using Clojure's edn\n   reader.\n\nIFns provide complete access to Clojure's APIs. You can also access\nany other library written in Clojure, after adding either its source\nor compiled form to the classpath.\n\nThe public Java API for Clojure consists of the following classes and interfaces:\n\n* clojure.java.api.Clojure\n* clojure.lang.IFn\n\nAll other Java classes should be treated as implementation details,\nand applications should avoid relying on them.\n\nTo look up and call a Clojure function:\n\n    IFn plus = Clojure.var(\"clojure.core\", \"+\");\n    plus.invoke(1, 2);\n\nFunctions in clojure.core are automatically loaded. Other namespaces\ncan be loaded via require:\n\n    IFn require = Clojure.var(\"clojure.core\", \"require\");\n    require.invoke(Clojure.read(\"clojure.set\"));\n   \nIFns can be passed to higher order functions, e.g. the example below\npasses plus to read:\n\n    IFn map = Clojure.var(\"clojure.core\", \"map\");\n    IFn inc = Clojure.var(\"clojure.core\", \"inc\");\n    map.invoke(inc, Clojure.read(\"[1 2 3]\"));\n\nMost IFns in Clojure refer to functions. A few, however, refer to\nnon-function data values. To access these, use deref instead of fn:\n\n    IFn printLength = Clojure.var(\"clojure.core\", \"*print-length*\");\n    Clojure.var(\"clojure.core\", \"deref\").invoke(printLength);\n\n### 2.2 Map destructuring extended to support namespaced keys\n\n* [CLJ-1318](http://dev.clojure.org/jira/browse/CLJ-1318)\n\nIn the past, map destructuring with :keys and :syms would not work\nwith maps containing namespaced keys or symbols. The :keys and :syms\nforms have been updated to allow them to match namespaced keys and\nbind to a local variable based on the name.\n\nExamples:\n\n    (let [m {:x/a 1, :y/b 2}\n          {:keys [x/a y/b]} m]\n      (+ a b))\n\n    (let [m {'x/a 1, 'y/b 2}\n          {:syms [x/a y/b]} m]\n      (+ a b))\n\nAdditionally, the :keys form can now take keywords instead of symbols.\nThis provides support specifically for auto-resolved keywords:\n\n    (let [m {:x/a 1, :y/b 2}\n          {:keys [:x/a :y/b]} m]\n      (+ a b))\n\n    (let [m {::x 1}\n          {:keys [::x]} m]\n      x)\n\n### 2.3 New \"some\" operations\n\nMany conditional functions rely on logical truth (where \"falsey\"\nvalues are nil or false). Sometimes it is useful to have functions\nthat rely on \"not nilness\" instead. These functions have been added to\nsupport these cases [CLJ-1343]:\n\n* some? - same as (not (nil? x))\n* if-some - like if-let, but checks (some? test) instead of test\n* when-some - like when-let, but checks (some? test) instead of test\n\n### 2.4 Hashing\n\nClojure 1.6 provides new hashing algorithms for primitives and\ncollections, accessible via IHashEq/hasheq (in Java) or the\nclojure.core/hash function (in Clojure). In general, these changes\nshould be transparent to users, except hash codes used inside hashed\ncollections like maps and sets will have better properties.\n\nHash codes returned by the Java .hashCode() method are unchanged and\ncontinue to match Java behavior or conform to the Java specification\nas appropriate.\n\nAny collections implementing IHashEq or wishing to interoperate with\nClojure collections should conform to the hashing algorithms specified\nin http://clojure.org/data_structures#hash and use the new function\n`mix-collection-hash` for the final mixing operation. Alternatively,\nyou may call the helper functions `hash-ordered-coll` and\n`hash-unordered-coll`.\n\nAny details of the current hashing algorithm not specified on that\npage should be considered subject to future change.\n\nRelated tickets for dev and regressions:\n\n* [CLJ-1328](http://dev.clojure.org/jira/browse/CLJ-1328)\n  Make several Clojure tests independent of ordering\n* [CLJ-1331](http://dev.clojure.org/jira/browse/CLJ-1331)\n  Update primitive vectors to use Murmur3 hash\n* [CLJ-1335](http://dev.clojure.org/jira/browse/CLJ-1335)\n  Update hash for empty PersistentList and LazySeq\n* [CLJ-1336](http://dev.clojure.org/jira/browse/CLJ-1336)\n  Make hashing mixing functions available in Clojure\n* [CLJ-1338](http://dev.clojure.org/jira/browse/CLJ-1338)\n  Make Murmur3 class public\n* [CLJ-1344](http://dev.clojure.org/jira/browse/CLJ-1344)\n  Update mapHasheq to call Murmur3 algorithm\n* [CLJ-1348](http://dev.clojure.org/jira/browse/CLJ-1348)\n  Add hash-ordered-coll and hash-unordered-coll\n* [CLJ-1355](http://dev.clojure.org/jira/browse/CLJ-1355)\n  Restore cached hashCode for Symbol and (uncached) hashCode for Keyword\n* [CLJ-1365](http://dev.clojure.org/jira/browse/CLJ-1365)\n  Add type hints for new collection hash functions\n\n### 2.5 bitops\n\n* [CLJ-827](http://dev.clojure.org/jira/browse/CLJ-827) - unsigned-bit-shift-right\n\nA new unsigned-bit-shift-right (Java's >>>) has been added to the core\nlibrary. The shift distance is truncated to the least 6 bits (per the\nJava specification for long >>>).\n\nExamples:\n  (unsigned-bit-shift-right 2r100 1) ;; 2r010\n  (unsigned-bit-shift-right 2r100 2) ;; 2r001\n  (unsigned-bit-shift-right 2r100 3) ;; 2r000\n\n### 2.6 clojure.test\n\n* [CLJ-866](http://dev.clojure.org/jira/browse/CLJ-866) - test-vars\n* [CLJ-1352](http://dev.clojure.org/jira/browse/CLJ-1352) - fix\n  regression in CLJ-866\n\nAdded a new clojure.test/test-vars function that takes a list of vars, groups them by namespace, and\nruns them *with their fixtures*.\n\n## 3 Enhancements\n\n### 3.1 Printing\n\n* [CLJ-908](http://dev.clojure.org/jira/browse/CLJ-908)\n  Print metadata for functions when *print-meta* is true and remove errant space at beginning.\n* [CLJ-937](http://dev.clojure.org/jira/browse/CLJ-937)\n  pprint cl-format now supports E, F, and G formats for ratios.\n\n### 3.2 Error messages\n\n* [CLJ-1248](http://dev.clojure.org/jira/browse/CLJ-1248)\n  Include type information in reflection warning messages\n* [CLJ-1099](http://dev.clojure.org/jira/browse/CLJ-1099)\n  If non-seq passed where seq is needed, error message now is an\n  ExceptionInfo with the instance value, retrievable via ex-data.\n* [CLJ-1083](http://dev.clojure.org/jira/browse/CLJ-1083)\n  Fix error message reporting for \"munged\" function names (like a->b).\n* [CLJ-1056](http://dev.clojure.org/jira/browse/CLJ-1056)\n  Handle more cases and improve error message for errors in defprotocol definitions.\n* [CLJ-1102](http://dev.clojure.org/jira/browse/CLJ-1102)\n  Better handling of exceptions with empty stack traces.\n* [CLJ-939](http://dev.clojure.org/jira/browse/CLJ-939)\n  Exceptions thrown in the top level ns form are reported without file or line number.\n\n### 3.3 Documentation strings\n\n* [CLJ-1164](http://dev.clojure.org/jira/browse/CLJ-1164)\n  Fix typos in clojure.instant/validated and other internal instant functions.\n* [CLJ-1143](http://dev.clojure.org/jira/browse/CLJ-1143)\n  Correct doc string for ns macro.\n* [CLJ-196](http://dev.clojure.org/jira/browse/CLJ-196)\n  Clarify value of *file* is undefined in the REPL.\n* [CLJ-1228](http://dev.clojure.org/jira/browse/CLJ-1228)\n  Fix a number of spelling errors in namespace and doc strings.\n* [CLJ-835](http://dev.clojure.org/jira/browse/CLJ-835)\n  Update defmulti doc to clarify expectations for hierarchy argument.\n* [CLJ-1304](http://dev.clojure.org/jira/browse/CLJ-1304)\n  Fix minor typos in documentation and comments\n* [CLJ-1302](http://dev.clojure.org/jira/browse/CLJ-1302)\n  Mention that keys and vals order are consistent with seq order\n\n### 3.4 Performance\n\n* [CLJ-858](http://dev.clojure.org/jira/browse/CLJ-858)\n  Improve speed of STM by removing System.currentTimeMillis.\n* [CLJ-669](http://dev.clojure.org/jira/browse/CLJ-669)\n  clojure.java.io/do-copy: use java.nio for Files\n* [commit](https://github.com/clojure/clojure/commit/0b73494c3c855e54b1da591eeb687f24f608f346)\n  Reduce overhead of protocol callsites by removing unneeded generated\n  cache fields.\n\n### 3.5 Other enhancements\n\n* [CLJ-908](http://dev.clojure.org/jira/browse/CLJ-908)\n  Make *default-data-reader-fn* set!-able in REPL, similar to *data-readers*.\n* [CLJ-783](http://dev.clojure.org/jira/browse/CLJ-783)\n  Make clojure.inspector/inspect-tree work on sets.\n* [CLJ-896](http://dev.clojure.org/jira/browse/CLJ-896)\n  Make browse-url aware of xdg-open.\n* [CLJ-1160](http://dev.clojure.org/jira/browse/CLJ-1160)\n  Fix clojure.core.reducers/mapcat does not stop on reduced? values.\n* [CLJ-1121](http://dev.clojure.org/jira/browse/CLJ-1121)\n  -> and ->> have been rewritten to work with a broader set of macros.\n* [CLJ-1105](http://dev.clojure.org/jira/browse/CLJ-1105)\n  clojure.walk now supports records.\n* [CLJ-949](http://dev.clojure.org/jira/browse/CLJ-949)\n  Removed all unnecessary cases of sneakyThrow.\n* [CLJ-1238](http://dev.clojure.org/jira/browse/CLJ-1238)\n  Allow EdnReader to read foo// (matches LispReader behavior).\n* [CLJ-1264](http://dev.clojure.org/jira/browse/CLJ-1264)\n  Remove uses of _ as a var in the Java code (causes warning in Java 8).\n* [CLJ-394](http://dev.clojure.org/jira/browse/CLJ-394)\n  Add record? predicate.\n* [CLJ-1200](http://dev.clojure.org/jira/browse/CLJ-1200)\n  ArraySeq dead code cleanup, ArraySeq_short support added.\n* [CLJ-1331](http://dev.clojure.org/jira/browse/CLJ-1331)\n  Primitive vectors should implement hasheq and use new hash algorithm\n* [CLJ-1354](http://dev.clojure.org/jira/browse/CLJ-1354)\n  Make APersistentVector.SubVector public so other collections can access\n* [CLJ-1353](http://dev.clojure.org/jira/browse/CLJ-1353)\n  Make awt run headless during the build process\n\n## 4 Bug Fixes\n\n* [CLJ-1018](http://dev.clojure.org/jira/browse/CLJ-1018)\n  Make range consistently return infinite sequence of start with a step of 0.\n* [CLJ-863](http://dev.clojure.org/jira/browse/CLJ-863)\n  Make interleave return () on 0 args and identity on 1 args.\n* [CLJ-1072](http://dev.clojure.org/jira/browse/CLJ-1072)\n  Update internal usages of the old metadata reader syntax to new syntax.\n* [CLJ-1193](http://dev.clojure.org/jira/browse/CLJ-1193)\n  Make bigint and biginteger functions work on double values outside long range.\n* [CLJ-1154](http://dev.clojure.org/jira/browse/CLJ-1154)\n  Make Compile.java flush but not close stdout so errors can be reported.\n* [CLJ-1161](http://dev.clojure.org/jira/browse/CLJ-1161)\n  Remove bad version.properties from sources jar.\n* [CLJ-1175](http://dev.clojure.org/jira/browse/CLJ-1175)\n  Fix invalid behavior of Delay/deref if an exception is thrown - exception will\n  now be rethrown on subsequent calls and not enter a corrupted state.\n* [CLJ-1171](http://dev.clojure.org/jira/browse/CLJ-1171)\n  Fix several issues with instance? to make it consistent when used with apply.\n* [CLJ-1202](http://dev.clojure.org/jira/browse/CLJ-1202)\n  Protocol fns with dashes may get incorrectly compiled into field accesses.\n* [CLJ-850](http://dev.clojure.org/jira/browse/CLJ-850)\n  Add check to emit invokePrim with return type of double or long if type-hinted.\n* [CLJ-1177](http://dev.clojure.org/jira/browse/CLJ-1177)\n  clojure.java.io URL to File coercion corrupts path containing UTF-8 characters.\n* [CLJ-1234](http://dev.clojure.org/jira/browse/CLJ-1234)\n  Accept whitespace in Record and Type reader forms (similar to data literals).\n* [CLJ-1233](http://dev.clojure.org/jira/browse/CLJ-1233)\n  Allow ** as a valid symbol name without triggering dynamic warnings.\n* [CLJ-1246](http://dev.clojure.org/jira/browse/CLJ-1246)\n  Add support to clojure.reflect for classes with annotations.\n  * [CLJ-1184](http://dev.clojure.org/jira/browse/CLJ-1184)\n  Evaling #{do ...} or [do ...] is treated as do special form.\n* [CLJ-1090](http://dev.clojure.org/jira/browse/CLJ-1090)\n  Indirect function calls through Var instances fail to clear locals.\n* [CLJ-1076](http://dev.clojure.org/jira/browse/CLJ-1076)\n  pprint tests fail on Windows, expecting \\n.\n* [CLJ-766](http://dev.clojure.org/jira/browse/CLJ-766)\n  Make into-array work consistently with short-array and byte-array on\n  bigger types.\n* [CLJ-1285](http://dev.clojure.org/jira/browse/CLJ-1285)\n  Data structure invariants are violated after persistent operations when\n  collision node created by transients.\n* [CLJ-1222](http://dev.clojure.org/jira/browse/CLJ-1222)\n  Multiplication overflow issues around Long/MIN_VALUE\n* [CLJ-1118](http://dev.clojure.org/jira/browse/CLJ-1118)\n  Inconsistent numeric comparison semantics between BigDecimals and other numerics\n* [CLJ-1125](http://dev.clojure.org/jira/browse/CLJ-1125)\n  Clojure can leak memory in a servlet container when using dynamic\n  bindings or STM transactions.\n* [CLJ-1082](http://dev.clojure.org/jira/browse/CLJ-1082)\n  Subvecs of primitve vectors cannot be reduced\n* [CLJ-1301](http://dev.clojure.org/jira/browse/CLJ-1301)\n  Case expressions use a mixture of hashCode and hasheq, potentially\n  leading to missed case matches when these differ.\n* [CLJ-983](http://dev.clojure.org/jira/browse/CLJ-983)\n  proxy-super does not restore original binding if call throws exception\n* [CLJ-1176](http://dev.clojure.org/jira/browse/CLJ-1176)\n  clojure.repl/source errors when *read-eval* bound to :unknown\n* [CLJ-935](http://dev.clojure.org/jira/browse/CLJ-935)\n  clojure.string/trim uses different definition of whitespace than\n  triml and trimr\n* [CLJ-1058](http://dev.clojure.org/jira/browse/CLJ-1058)\n  StackOverflowError on exception in reducef for PersistentHashMap\n  fold\n* [CLJ-1328](http://dev.clojure.org/jira/browse/CLJ-1328)\n  Fix some tests in the Clojure test suite to make their names unique\n  and independent of hashing order\n* [CLJ-1339](http://dev.clojure.org/jira/browse/CLJ-1339)\n  Empty primitive vectors throw NPE on .equals with non-vector\n  sequential types\n* [CLJ-1363](http://dev.clojure.org/jira/browse/CLJ-1363)\n  Field access via .- in reflective case does not work\n* [CLJ-944](http://dev.clojure.org/jira/browse/CLJ-944)\n  Compiler gives constant collections types which mismatch their\n  runtime values\n* [CLJ-1387](http://dev.clojure.org/jira/browse/CLJ-1387)\n  reduce-kv on large hash maps ignores reduced result\n\n# Changes to Clojure in Version 1.5.1\n\n* fix for leak caused by ddc65a96fdb1163b\n\n# Changes to Clojure in Version 1.5\n\n## CONTENTS\n\n<pre>\n 1 Deprecated and Removed Features\n    1.1 Clojure 1.5 reducers library requires Java 6 or later\n 2 New and Improved Features\n    2.1 Reducers\n    2.2 Reader Literals improved\n    2.3 clojure.core/set-agent-send-executor!, set-agent-send-off-executor!, and send-via\n    2.4 New threading macros\n    2.5 Column metadata captured by reader\n    2.6 gen-class improvements\n    2.7 Support added for marker protocols\n    2.8 clojure.pprint/print-table output compatible with Emacs Org mode\n    2.9 clojure.string/replace and replace-first handle special characters more predictably\n    2.10 Set and map constructor functions allow duplicates\n    2.11 More functions preserve metadata\n    2.12 New edn reader, improvements to *read-eval*\n 3 Performance Enhancements\n 4 Improved error messages\n 5 Improved documentation strings\n 6 Bug Fixes\n 7 Binary Compatibility Notes\n</pre>\n\n## 1 Deprecated and Removed Features\n\n### 1.1 Clojure 1.5 reducers library requires Java 6 or later\n\nThe new reducers library (see below) requires Java 6 plus a ForkJoin\nlibrary, or Java 7 or later.  Clojure 1.5 can still be compiled and\nrun with Java 5.  The only limitations with Java 5 are that the new\nreducers library will not work, and building Clojure requires skipping\nthe test suite (e.g. by using the command \"ant jar\").\n\n\n## 2 New and Improved Features\n\n### 2.1 Reducers\n\nReducers provide a set of high performance functions for working with collections. The actual fold/reduce algorithms are specified via the collection being reduced. This allows each collection to define the most efficient way to reduce its contents.\n\nThe implementation details of reducers are available at the  [Clojure blog](http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html) and therefore won't be repeated in these change notes. However, as a summary:\n\n* There is a new namespace: clojure.core.reducers\n* It contains new versions of map, filter etc based upon transforming reducing functions - reducers\n* It contains a new function, fold, which is a parallel reduce+combine\nfold uses fork/join when working with (the existing!) Clojure vectors and maps\n* Your new parallel code has exactly the same shape as your existing seq-based code\n* The reducers are composable\n* Reducer implementations are primarily functional - no iterators\n* The model uses regular data structures, not 'parallel collections' or other OO malarkey\n* It's fast, and can become faster still\n* This is work-in-progress\n\nExamples:\n\n\tuser=> (require '[clojure.core.reducers :as r])\n\tuser=> (reduce + (r/filter even? (r/map inc [1 1 1 2])))\n\t;=> 6\n\n\n\t;;red is a reducer awaiting a collection\n\tuser=> (def red (comp (r/filter even?) (r/map inc)))\n\tuser=> (reduce + (red [1 1 1 2]))\n\t;=> 6\n\n\tuser=> (into #{} (r/filter even? (r/map inc [1 1 1 2])))\n\t;=> #{2}\n\n### 2.2 Reader Literals improved\n\n* [CLJ-1034](http://dev.clojure.org/jira/browse/CLJ-1034)\n  \"Conflicting data-reader mapping\" should no longer be thrown where there really isn't a conflict. Until this patch, having data_readers.clj on the classpath twice would cause the above exception.\n\n* [CLJ-927](http://dev.clojure.org/jira/browse/CLJ-927)\n  Added `*default-data-reader-fn*` to clojure.core. When no data reader is found for a tag and `*default-data-reader-fn*`is non-nil, it will be called with two arguments, the tag and the value.  If `*default-data-reader-fn*` is nil (the default), an exception will be thrown for the unknown tag.\n\n### 2.3 clojure.core/set-agent-send-executor!, set-agent-send-off-executor!, and send-via\n\nAdded two new functions:\n\n* clojure.core/set-agent-send-executor!\n\n  Allows the user to set the `java.util.concurrent.Executor` used when calling `clojure.core/send`. Defaults to a fixed thread pool of size: (numCores + 2)\n\n* clojure.core/set-agent-send-off-executor!\n\n \tAllows the user to set the `java.util.concurrent.Executor` used when calling `clojure.core/send-off`. Defaults to a cached thread pool.\n\n* clojure.core/send-via\n\n\tLike `send`, and `send-off`, except the first argument to this function is an executor to use when sending.\n\n\n\n\n### 2.4 New threading macros\n\n* clojure.core/cond-> [expr & clauses]\n\n\tTakes an expression and a set of test/form pairs. Threads the expression (via ->) through each form for which the corresponding test expression (not threaded) is true.\n\nExample:\n\n\tuser=> (cond-> 1\n\t\t\t\t   true inc\n\t               false (* 42)\n\t               (= 2 2) (* 3))\n\t6\n\n* clojure.core/cond->> [expr & clauses]\n\n\tTakes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression (not threaded) is true.\n\nExample:\n\n\tuser=> (def d [0 1 2 3])\n\t#'user/d\n\tuser=> (cond->> d\n\t\t\t\t    true (map inc)\n\t\t\t\t\t(seq? d) (map dec)\n\t\t\t\t\t(= (count d) 4) (reduce +)) ;; no threading in the test expr\n\t\t\t\t\t                            ;; so d must be passed in explicitly\n\t10\n\n\n* clojure.core/as-> [expr name & forms]\n\nBinds name to expr, evaluates the first form in the lexical context of that binding, then binds name to that result, repeating for each successive form\n\nNote: this form does not actually perform any threading. Instead it allows the user to assign a name and lexical context to a value created by a parent threading form.\n\nExample:\n\n\tuser=> (-> 84\n\t    \t   (/ 4)\n\t    \t   (as-> twenty-one          ;; uses the value from ->\n\t           \t\t  (* 2 twenty-one)))  ;; no threading here\n\t42\n\n* clojure.core/some-> [expr & forms]\n\n\nWhen expr is not nil, threads it into the first form (via ->),\n and when that result is not nil, through the next etc.\n\nExample:\n\n\tuser=> (defn die [x] (assert false))\n\t#'user/die\n\tuser=> (-> 1 inc range next next next die)\n\tAssertionError Assert failed: false  user/die (NO_SOURCE_FILE:65)\n\tuser=> (some-> 1 inc range next next next die)\n\tnil\n\n\n\n* clojure.core/some->> [expr & forms]\n\n  When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc.\n\n  Same as some-> except the value is threaded as the last argument in each form.\n\n### 2.5 Column metadata captured by reader\n\n* [CLJ-960](http://dev.clojure.org/jira/browse/CLJ-960)\n  Data read by the clojure reader is now tagged with :column in addition to :line.\n\n\n### 2.6 gen-class improvements\n\n* [CLJ-745](http://dev.clojure.org/jira/browse/CLJ-745)\n  It is now possible to expose protected final methods via `:exposes-methods` in `gen-class`. This allows Clojure classes created via gen-class to access protected methods of its parent class.\n\nExample:\n\n\t(gen-class :name clojure.test_clojure.genclass.examples.ProtectedFinalTester\n    \t       :extends java.lang.ClassLoader\n        \t   :main false\n           \t   :prefix \"pf-\"\n           \t   :exposes-methods {findSystemClass superFindSystemClass})\n\n* [CLJ-948](http://dev.clojure.org/jira/browse/CLJ-948)\n  It is now possible to annotate constructors via `gen-class`.\n\nExample:\n\n\t(gen-class :name foo.Bar\n    \t       :extends clojure.lang.Box\n        \t   :constructors {^{Deprecated true} [Object] [Object]}\n           \t   :init init\n           \t   :prefix \"foo\")\n\n### 2.7 Support added for marker protocols\n\n* [CLJ-966](http://dev.clojure.org/jira/browse/CLJ-966)\n  `defprotocol` no longer requires that at least one method be given in the definition of the protocol. This allows for marker protocols, whose sole reason of existence is to allow `satisfies?` to be true for a given type.\n\n\nExample:\n\n\tuser=> (defprotocol P (hi [_]))\n    P\n    user=> (defprotocol M) ; marker protocol\n    M\n    user=> (deftype T [a] M P (hi [_] \"hi there\"))\n    user.T\n    user=> (satisfies? P (T. 1))\n    true\n    user=> (satisfies? M (T. 1))\n    true\n    user=> (hi (T. 1))\n    \"hi there\"\n    user=> (defprotocol M2 \"marker for 2\") ; marker protocol again\n    M2\n    user=> (extend-type T M2)\n    nil\n    user=> (satisfies? M2 (T. 1))\n    true\n\n\n### 2.8 clojure.pprint/print-table output compatible with Emacs Org mode\n\nFor the convenience of those that use Emacs Org mode,\n`clojure.pprint/print-table` now prints tables in the form used by\nthat mode.  Emacs Org mode has features to make it easy to edit such\ntables, and even to do spreadsheet-like calculations on their\ncontents.  See the [Org mode documentation on\ntables](http://orgmode.org/manual/Tables.html) for details.\n\n    user=> (clojure.pprint/print-table [:name :initial-impression]\n               [{:name \"Rich\" :initial-impression \"rock star\"}\n                {:name \"Andy\" :initial-impression \"engineer\"}])\n    | :name | :initial-impression |\n    |-------+---------------------|\n    |  Rich |           rock star |\n    |  Andy |            engineer |\n\n\n### 2.9 clojure.string/replace and replace-first handle special characters more predictably\n\n`clojure.string/replace` and `clojure.string/replace-first` are now\nconsistent in the way that they handle the replacement strings: all\ncharacters in the replacement strings are treated literally, including\nbackslash and dollar sign characters.\n\n    user=> (require '[clojure.string :as s])\n\n    user=> (s/replace-first \"munge.this\" \".\" \"$\")\n    ;=> \"munge$this\"\n\n    user=> (s/replace \"/my/home/dir\" #\"/\" (fn [s] \"\\\\\"))\n    ;=> \"\\\\my\\\\home\\\\dir\"\n\nThere is one exception, which is described in the doc strings.  If you\ncall these functions with a regex to search for and a string as the\nreplacement, then dollar sign and backslash characters in the\nreplacement string are treated specially.  Occurrences of `$1` in the\nreplacement string are replaced with the string that matched the first\nparenthesized subexpression of the regex, occurrences of `$2` are\nreplaced with the match of the second parenthesized subexpression,\netc.\n\n    user=> (s/replace \"x12, b4\" #\"([a-z]+)([0-9]+)\" \"$1 <- $2\")\n    ;=> \"x <- 12, b <- 4\"\n\nIndividual occurrences of `$` or `\\` in the replacement string that\nyou wish to be treated literally can be escaped by prefixing them with\na `\\`.  If you wish your replacement string to be treated literally\nand its contents are unknown to you at compile time (or you don't wish\nto tarnish your constant string with lots of backslashes), you can use\nthe new function `clojure.string/re-quote-replacement` to do the\nnecessary escaping of special characters for you.\n\n    user=> (s/replace \"x12, b4\" #\"([a-z]+)([0-9]+)\"\n                         (s/re-quote-replacement \"$1 <- $2\"))\n    ;=> \"$1 <- $2, $1 <- $2\"\n\n\n### 2.10 Set and map constructor functions allow duplicates\n\nAll of the functions that construct sets such as `set` and\n`sorted-set` allow duplicate elements to appear in their arguments,\nand they are documented to treat this case as if by repeated uses of\n`conj`.\n\nSimilarly, all map constructor functions such as `hash-map`,\n`array-map`, and `sorted-map` allow duplicate keys, and are documented\nto treat this case as if by repeated uses of `assoc`.\n\nAs before, literal sets, e.g. `#{1 2 3}`, do not allow duplicate\nelements, and while elements can be expressions evaluated at run time\nsuch as `#{(inc x) (dec y)}`, this leads to a check for duplicates at\nrun time whenever the set needs to be constructed, throwing an\nexception if any duplicates are found.\n\nSimilarly, literal maps do not allow duplicate keys.  New to Clojure\n1.5 is a performance optimization: if all keys are compile time\nconstants but one or more values are expressions requiring evaluation\nat run time, duplicate keys are checked for once at compile time only,\nnot each time a map is constructed at run time.\n\n* [CLJ-1065](http://dev.clojure.org/jira/browse/CLJ-1065)\n  Allow duplicate set elements and map keys for all set and map constructors\n\n\n### 2.11 More functions preserve metadata\n\nMost functions that take a collection and return a \"modified\" version\nof that collection preserve the metadata that was on the input\ncollection, e.g. `conj`, `assoc`, `dissoc`, etc.  One notable\nexception was `into`, which would return a collection with metadata\n`nil` for several common types of input collections.\n\nNow the functions `into`, `select-keys`, `clojure.set/project`, and\n`clojure.set/rename` return collections with the same metadata as\ntheir input collections.\n\n### 2.12 New edn reader, improvements to `*read-eval*`\n\nThe new `clojure.edn` namespace reads edn (http://edn-format.org) data,\nand should be used for reading data from untrusted sources.\n\nClojure's core read* functions can evaluate code, and should not be\nused to read data from untrusted sources. As of 1.5, `*read-eval*`\nsupports a documented set of thread-local bindings, see the doc string\nfor details.\n\n`*read-eval*`'s default can be set to false by setting a system property:\n\n    -Dclojure.read.eval=false\n\n## 3 Performance and Memory Enhancements\n\n* [CLJ-988](http://dev.clojure.org/jira/browse/CLJ-988)\n  Multimethod tables are now protected by a read/write lock instead of a synchronized method. This should result in a performance boost for multithreaded code using multimethods.\n* [CLJ-1061](http://dev.clojure.org/jira/browse/CLJ-1061)\n  `when-first` now evaluates its expression only once.\n* [CLJ-1084](http://dev.clojure.org/jira/browse/CLJ-1084)\n  `PersistentVector$ChunkedSeq` now implements `Counted` interface, to avoid some cases where vector elements were being counted by iterating over their elements.\n* [CLJ-867](http://dev.clojure.org/jira/browse/CLJ-867)\n  Records with same fields and field values, but different types, now usually hash to different values.\n* [CLJ-1000](http://dev.clojure.org/jira/browse/CLJ-1000)\n  Cache hasheq() for seqs, sets, vectors, maps and queues\n* (no ticket) array-map perf tweaks\n* [CLJ-1111](http://dev.clojure.org/jira/browse/CLJ-1111)\n  Allows loop to evaluate to primitive values\n* (no ticket) Move loop locals into same clearing context as loop body\n\n\n## 4 Improved error messages\n\n* [CLJ-103](http://dev.clojure.org/jira/browse/CLJ-103)\n  Improved if-let error message when form has a improperly defined body.\n* [CLJ-897](http://dev.clojure.org/jira/browse/CLJ-897)\n  Don't use destructuring in defrecord/deftype arglists to get a slightly better error message when forgetting to specify the fields vector\n* [CLJ-788](http://dev.clojure.org/jira/browse/CLJ-788)\n  Add source and line members and getters to CompilerException\n* [CLJ-157](http://dev.clojure.org/jira/browse/CLJ-157)\n  Better error messages for syntax errors w/ defn and fn\n* [CLJ-940](http://dev.clojure.org/jira/browse/CLJ-940)\n  Passing a non-sequence to refer :only results in uninformative exception\n* [CLJ-1052](http://dev.clojure.org/jira/browse/CLJ-1052)\n  `assoc` now throws an exception if the last key argument is missing a value.\n\n\n## 5 Improved documentation strings\n\n* [CLJ-893](http://dev.clojure.org/jira/browse/CLJ-893)\n  Document that vec will alias Java arrays\n* [CLJ-892](http://dev.clojure.org/jira/browse/CLJ-892)\n  Clarify doc strings of sort and sort-by: they will modify Java array arguments\n* [CLJ-1019](http://dev.clojure.org/jira/browse/CLJ-1019)\n  ns-resolve doc has a typo\n* [CLJ-1038](http://dev.clojure.org/jira/browse/CLJ-1038)\n  Docstring for deliver doesn't match behavior\n* [CLJ-1055](http://dev.clojure.org/jira/browse/CLJ-1055)\n  \"be come\" should be \"become\"\n* [CLJ-917](http://dev.clojure.org/jira/browse/CLJ-917)\n  clojure.core/definterface is not included in the API docs\n* (no ticket) clojure.core/read, read-string, and *read-eval* all have more extensive documentation.\n\n\n## 6 Bug Fixes\n\n* [CLJ-962](http://dev.clojure.org/jira/browse/CLJ-962)\n  Vectors returned by subvec allow access at negative indices\n* [CLJ-952](http://dev.clojure.org/jira/browse/CLJ-952)\n  bigdec does not properly convert a clojure.lang.BigInt\n* [CLJ-975](http://dev.clojure.org/jira/browse/CLJ-975)\n  inconsistent destructuring behaviour when using nested maps\n* [CLJ-954](http://dev.clojure.org/jira/browse/CLJ-954)\n  TAP support in clojure.test.tap Needs Updating\n* [CLJ-881](http://dev.clojure.org/jira/browse/CLJ-881)\n  exception when cl-format is given some ~f directive/value combinations\n* [CLJ-763](http://dev.clojure.org/jira/browse/CLJ-763)\n  Do not check for duplicates in destructuring map creation\n* [CLJ-667](http://dev.clojure.org/jira/browse/CLJ-667)\n  Allow loops fully nested in catch/finally\n* [CLJ-768](http://dev.clojure.org/jira/browse/CLJ-768)\n  cl-format bug in ~f formatting\n* [CLJ-844](http://dev.clojure.org/jira/browse/CLJ-844)\n  NPE calling keyword on map from bean\n* [CLJ-934](http://dev.clojure.org/jira/browse/CLJ-934)\n  disj! Throws exception when attempting to remove multiple items in one call\n* [CLJ-943](http://dev.clojure.org/jira/browse/CLJ-943)\n  When load-lib fails, a namespace is still created\n* [CLJ-981](http://dev.clojure.org/jira/browse/CLJ-981)\n  clojure.set/rename-keys deletes keys when there's a collision\n* [CLJ-961](http://dev.clojure.org/jira/browse/CLJ-961)\n  with-redefs loses a Var's root binding if the Var is thread-bound\n* [CLJ-1032](http://dev.clojure.org/jira/browse/CLJ-1032)\n  seque leaks threads from the send-off pool\n* [CLJ-1041](http://dev.clojure.org/jira/browse/CLJ-1041)\n  reduce-kv on sorted maps should stop on seeing a Reduced value\n* [CLJ-1011](http://dev.clojure.org/jira/browse/CLJ-1011)\n  clojure.data/diff should cope with null and false values in maps\n* [CLJ-977](http://dev.clojure.org/jira/browse/CLJ-977)\n  (int \\a) returns a value, (long \\a) throws an exception\n* [CLJ-964](http://dev.clojure.org/jira/browse/CLJ-964)\n  test-clojure/rt.clj has undeclared dependency on clojure.set\n* [CLJ-923](http://dev.clojure.org/jira/browse/CLJ-923)\n  Reading ratios prefixed by + is not working\n* [CLJ-1012](http://dev.clojure.org/jira/browse/CLJ-1012)\n  partial function should also accept 1 arg (just f)\n* [CLJ-932](http://dev.clojure.org/jira/browse/CLJ-932)\n  contains? Should throw exception on non-keyed collections\n* [CLJ-730](http://dev.clojure.org/jira/browse/CLJ-730) Create test suite for functional fns (e.g. juxt, comp, partial, etc.)\n* [CLJ-757](http://dev.clojure.org/jira/browse/CLJ-757)\n  Empty transient maps/sets return wrong value for .contains\n* [CLJ-828](http://dev.clojure.org/jira/browse/CLJ-828)\n  clojure.core/bases returns a cons when passed a class and a Java array when passed an interface\n* [CLJ-1062](http://dev.clojure.org/jira/browse/CLJ-1062)\n  CLJ-940 breaks compilation of namespaces that don't have any public functions\n* [CLJ-1070](http://dev.clojure.org/jira/browse/CLJ-1070)\n  PersistentQueue's hash function does not match its equality\n* [CLJ-987](http://dev.clojure.org/jira/browse/CLJ-987)\n  pprint doesn't flush the underlying stream\n* [CLJ-963](http://dev.clojure.org/jira/browse/CLJ-963)\n  Support pretty printing namespace declarations under code-dispatch\n* [CLJ-902](http://dev.clojure.org/jira/browse/CLJ-902)\n  doc macro broken for namespaces\n* [CLJ-909](http://dev.clojure.org/jira/browse/CLJ-909) Make LineNumberingPushbackReader's buffer size configurable\n* [CLJ-910](http://dev.clojure.org/jira/browse/CLJ-910) Allow for type-hinting the method receiver in memfn\n* [CLJ-1048](http://dev.clojure.org/jira/browse/CLJ-1048) add test.generative to Clojure's tests\n* [CLJ-1071](http://dev.clojure.org/jira/browse/CLJ-1071) ExceptionInfo does no abstraction\n* [CLJ-1085](http://dev.clojure.org/jira/browse/CLJ-1085) clojure.main/repl unconditionally refers REPL utilities into `*ns*`\n* (no ticket) Rich Hickey fix: syntax-quote was walking records, returning maps\n* [CLJ-1116](http://dev.clojure.org/jira/browse/CLJ-1116) More REPL-friendly 'ns macro\n* (no ticket) Rich Hickey fix: deref any j.u.c.Future\n* [CLJ-1092](http://dev.clojure.org/jira/browse/CLJ-1092) New function re-quote-replacement has incorrect :added metadata\n* [CLJ-1098](http://dev.clojure.org/jira/browse/CLJ-1098) Implement IKVReduce and CollFold for nil\n* (no ticket) Rich Hickey fix: impose once semantics on fabricated closures for e.g. loops\n* [CLJ-1140](http://dev.clojure.org/jira/browse/CLJ-1140) Restore {:as x} destructuring for empty lists\n* [CLJ-1150](http://dev.clojure.org/jira/browse/CLJ-1150) Make some PersistentVector's and APersistentVector.SubVector's internals public\n* (no ticket) Rich Hickey fix: use non-loading classForName\n* [CLJ-1106](http://dev.clojure.org/jira/browse/CLJ-1106) Fixing set equality\n\n## 7 Binary Compatibility Notes\n\n* `public static inner class LispReader.ReaderException(int line, Throwable cause)`\n  Constructor changed to `ReaderException(int line, int column, Throwable cause)`\n* `public Object clojure.lang.Agent.dispatch(IFn fn, ISeq args, boolean solo)`\n  Replaced with `dispatch(IFn fn, ISeq args, Executor exec)`\n\n# Changes to Clojure in Version 1.4\n\n## CONTENTS\n\n<pre>\n 1 Deprecated and Removed Features\n    1.1 Fields that Start With a Dash Can No Longer Be Accessed Using Dot Syntax\n 2 New/Improved Features\n    2.1 Reader Literals\n    2.2 clojure.core/mapv\n    2.3 clojure.core/filterv\n    2.4 clojure.core/ex-info and clojure.core/ex-data\n    2.5 clojure.core/reduce-kv\n    2.6 clojure.core/contains? Improved\n    2.7 clojure.core/min and clojure.core/max prefer NaN\n    2.8 clojure.java.io/as-file and clojure.java.io/as-url Handle URL-Escaping Better\n    2.9 New Dot Syntax for Record and Type Field Access\n    2.10 Record Factory Methods Available Inside defrecord\n    2.11 assert-args Displays Namespace and Line Number on Errors\n    2.12 File and Line Number Added to Earmuff Dynamic Warning\n    2.13 require Can Take a :refer Option\n    2.14 *compiler-options* Var\n    2.15 Improved Reporting of Invalid Characters in Unicode String Literals\n    2.16 clojure.core/hash No Longer Relies on .hashCode\n    2.17 Java 7 Documentation\n    2.18 loadLibrary Loads Library Using System ClassLoader\n    2.19 Java int is boxed as java.lang.Integer\n 3 Performance Enhancements\n 4 Bug Fixes\n</pre>\n\n## 1 Deprecated and Removed Features\n\n### 1.1 Record and Type Fields that Start With a Dash Can No Longer Be Accessed Using Dot Syntax\n\nClojure 1.4 introduces a field accessor syntax for the dot special form that aligns Clojure field lookup syntax with ClojureScript's.\n\nFor example, in Clojure 1.3, one can declare a record with a field starting with dash and access it like this:\n\n    (defrecord Bar [-a]) ;=> user.Bar\n    (.-a (Bar. 10)) ;=> 10\n\nIn 1.4, the above code results in `IllegalArgumentException No matching field found: a for class user.Bar`\n\nHowever, the field may still be accessed as a keyword:\n\n    (:-a (Bar. 10)) ;=> 10\n\n## 2 New and Improved Features\n\n### 2.1 Reader Literals\n\nClojure 1.4 supports reader literals, which are data structures tagged\nby a symbol to denote how they will be read.\n\nWhen Clojure starts, it searches for files named `data_readers.clj`\nat the root of the classpath. Each such file must contain a Clojure\nmap of symbols, like this:\n\n    {foo/bar my.project.foo/bar\n     foo/baz my.project/baz}\n\nThe key in each pair is a tag that will be recognized by\nthe Clojure reader. The value in the pair is the\nfully-qualified name of a Var which will be invoked by the reader to\nparse the form following the tag. For example, given the\ndata_readers.clj file above, the Clojure reader would parse this\nform:\n\n    #foo/bar [1 2 3]\n\nby invoking the Var `#'my.project.foo/bar` on the vector `[1 2 3]`. The\ndata reader function is invoked on the form AFTER it has been read\nas a normal Clojure data structure by the reader.\n\nReader tags without namespace qualifiers are reserved for Clojure. Default\nreader tags are defined in `clojure.core/default-data-readers` but may be\noverridden in `data_readers.clj` or by rebinding `*data-readers*`.\n\n#### 2.1.1 Instant Literals\n\nClojure supports literals for instants in the form\n`#inst \"yyyy-mm-ddThh:mm:ss.fff+hh:mm\"`. These literals are parsed as `java.util.Date`s\nby default. They can be parsed as `java.util.Calendar`s or `java.util.Timestamp`s\nby binding `*data-readers*` to use `clojure.instant/read-instant-calendar` or\n`clojure.instant/read-instant-timestamp`.\n\n    (def instant \"#inst \\\"@2010-11-12T13:14:15.666\\\"\")\n\n    ; Instants are read as java.util.Date by default\n    (= java.util.Date (class (read-string instant)))\n    ;=> true\n\n    ; Instants can be read as java.util.Calendar or java.util.Timestamp\n\n    (binding [*data-readers* {'inst read-instant-calendar}]\n      (= java.util.Calendar (class (read-string instant))))\n    ;=> true\n\n    (binding [*data-readers* {'inst read-instant-timestamp}]\n      (= java.util.Timestamp (class (read-string instant))))\n    ;=> true\n\n#### 2.1.2 UUID Literals\n\nClojure supports literals for UUIDs in the form `#uuid \"uuid-string\"`. These\nliterals are parsed as `java.util.UUID`s.\n\n### 2.2 clojure.core/mapv\n\n`mapv` takes a function `f` and one or more collections and returns a\nvector consisting of the result of applying `f` to the set of first items of\neach collection, followed by applying `f` to the set of second items in each\ncollection, until any one of the collections is exhausted. Any remaining\nitems in other collections are ignored. `f` should accept a number of arguments\nequal to the number of collections.\n\n    (= [1 2 3] (mapv + [1 2 3]))\n    ;=> true\n\n    (= [2 3 4] (mapv + [1 2 3] (repeat 1)))\n    ;=> true\n\n### 2.3 clojure.core/filterv\n\n`filterv` takes a predicate `pred` and a collection and returns a vector\nof the items in the collection for which `(pred item)` returns true. `pred`\nmust be free of side-effects.\n\n    (= [] (filterv even? [1 3 5]))\n    ;=> true\n\n    (= [2 4] (filterv even? [1 2 3 4 5]))\n    ;=> true\n\n### 2.4 clojure.core/ex-info and clojure.core/ex-data\n\n`ex-info` creates an instance of `ExceptionInfo`. `ExceptionInfo` is a\n`RuntimeException` subclass that takes a string `msg` and a map of data.\n\n    (ex-info \"Invalid use of robots\" {:robots false})\n    ;=> #<ExceptionInfo clojure.lang.ExceptionInfo: Invalid use of robots {:robots false}>\n\n`ex-data` is called with an exception and will retrieve that map of data\nif the exception is an instance of `ExceptionInfo`.\n\n    (ex-data (ex-info \"Invalid use of robots\" {:robots false}))\n    ;=> {:robots false}\n\n### 2.5 clojure.core/reduce-kv\n\n`reduce-kv` reduces an associative collection. It takes a function `f`,\nan initial value `init` and an associative collection `coll`. `f` should\nbe a function of 3 arguments. Returns the result of applying `f` to `init`,\nthe first key and the first value in `coll`, then applying `f` to that result\nand the 2nd key and value, etc. If `coll` contains no entries, returns `init`\nand f is not called. Note that `reduce-kv` is supported on vectors,\nwhere the keys will be the ordinals.\n\n    (reduce-kv str \"Hello \" {:w \\o :r \\l :d \\!})\n    ;=> \"Hello :rl:d!:wo\"\n    (reduce-kv str \"Hello \" [\\w \\o \\r \\l \\d \\!])\n    ;=> \"Hello 0w1o2r3l4d5!\"\n\n### 2.6 clojure.core/contains? Improved\n\n`contains?` now works with `java.util.Set`.\n\n### 2.7 clojure.core/min and clojure.core/max prefer NaN\n\n`min` and `max` now give preference to returning NaN if either of their\narguments is NaN.\n\n### 2.8 clojure.java.io/as-file and clojure.java.io/as-url Handle URL-Escaping Better\n\n`as-file` and `as-url` now handle URL-escaping in both directions.\n\n### 2.9 New Dot Syntax for Record and Type Field Access\n\nClojure 1.4 introduces a field accessor syntax for the dot special\nform that aligns Clojure field lookup syntax with ClojureScript's.\n\nIn 1.4, to declare a record type and access its property `x`, one can\nwrite:\n\n    (defrecord Foo [x]) ;=> user.Foo\n    (.-x (Foo. 10)) ;=> 10\n\nThis addition makes it easier to write code that will run as expected\nin both Clojure and ClojureScript.\n\n### 2.10 Record Factory Methods Available Inside defrecord\n\nPrior to 1.4, you could not use the factory functions (`->RecordClass`\nand `map->RecordClass`) to construct a new record from inside a\n`defrecord` definition.\n\nThe following example did not work prior to 1.4, but is now\nvalid. This example makes use of `->Mean` which would have not yet\nbeen available.\n\n    (defrecord Mean [last-winner]\n      Player\n      (choose [_] (if last-winner last-winner (random-choice)))\n      (update-strategy [_ me you] (->Mean (when (iwon? me you) me))))\n\n### 2.11 assert-args Displays Namespace and Line Number on Errors\n\n`assert-args` now uses &form to report the namespace and line number where\nmacro syntax errors occur.\n\n### 2.12 File and Line Number Added to Earmuff Dynamic Warning\n\nWhen a variable is defined using earmuffs but is not declared dynamic,\nClojure emits a warning. That warning now includes the file and line\nnumber.\n\n### 2.13 require Can Take a :refer Option\n\n`require` can now take a `:refer` option. `:refer` takes a list of symbols\nto refer from the namespace or `:all` to bring in all public vars.\n\n### 2.14 \\*compiler-options\\* Var\n\nThe dynamic var `*compiler-options*` contains a map of options to send\nto the Clojure compiler.\n\nSupported options:\n\n* `:elide-meta`: Have certain metadata elided during compilation. This\nshould be set to a collection of keywords.\n* `:disable-locals-clearing`: Set to true to disable clearing. Useful for\nusing a debugger.\n\nThe main function of the Clojure compiler sets the\n`*compiler-options*` from properties prefixed by `clojure.compiler`,\ne.g.\n\n    java -Dclojure.compiler.elide-meta='[:doc :file :line]'\n\n### 2.15 Improved Reporting of Invalid Characters in Unicode String Literals\n\nWhen the reader finds an invalid character in a Unicode string literal, it\nnow reports the character instead of its numerical representation.\n\n### 2.16 clojure.core/hash No Longer Relies on .hashCode\n\n`hash` no longer directly uses .hashCode() to return the hash of a Clojure\ndata structure. It calls `clojure.lang.Util.hasheq`, which has its own implementation\nfor Integer, Short, Byte, and Clojure collections. This ensures that the hash code\nreturned is consistent with `=`.\n\n### 2.17 Java 7 Documentation\n\n`*core-java-api*` will now return the URL for the Java 7 Javadoc when you are\nrunning Java 7.\n\n### 2.18 loadLibrary Loads Library Using System ClassLoader\n\nA static method, `loadLibrary`, was added to `clojure.lang.RT` to load a\nlibrary using the system ClassLoader instead of Clojure's class loader.\n\n### 2.19 Java int is Boxed As java.lang.Integer\n\nJava `int`s are now boxed as `java.lang.Integer`s. See\n[the discussion on clojure-dev](https://groups.google.com/forum/#!msg/clojure/7-hARL5c1lI/ntnnOweEGfUJ)\nfor more information.\n\n## 3 Performance Enhancements\n\n* `(= char char)` is now optimized\n* `equiv` is inlined in variadic =\n* `toString` cached on keywords and symbols\n\n## 4 Bug Fixes\n\n* [CLJ-829](http://dev.clojure.org/jira/browse/CLJ-829)\n  Transient hashmaps mishandle hash collisions\n* [CLJ-773](http://dev.clojure.org/jira/browse/CLJ-773)\n  Macros that are expanded away still have their vars referenced in the emitted byte code\n* [CLJ-837](http://dev.clojure.org/jira/browse/CLJ-837)\n  java.lang.VerifyError when compiling deftype or defrecord with argument name starting with double underscore characters\n* [CLJ-369](http://dev.clojure.org/jira/browse/CLJ-369)\n  Check for invalid interface method names\n* [CLJ-845](http://dev.clojure.org/jira/browse/CLJ-845)\n  Unexpected interaction between protocol extension and namespaced method keyword/symbols\n  * Ignoring namespace portion of symbols used to name methods in extend-type and extend-protocol\n* [CLJ-852](http://dev.clojure.org/jira/browse/CLJ-852)\n  IllegalArgumentException thrown when defining a var whose value is calculated with a primitive fn\n* [CLJ-855](http://dev.clojure.org/jira/browse/CLJ-855)\n  catch receives a RuntimeException rather than the expected checked exception\n* [CLJ-876](http://dev.clojure.org/jira/browse/CLJ-876)\n  #^:dynamic vars declared in a nested form are not immediately dynamic\n* [CLJ-886](http://dev.clojure.org/jira/browse/CLJ-886)\n  java.io/do-copy can garble multibyte characters\n* [CLJ-895](http://dev.clojure.org/jira/browse/CLJ-895)\n  Collection.toArray implementations do not conform to Java API docs\n  * obey contract for toArray return type\n* [CLJ-898](http://dev.clojure.org/jira/browse/CLJ-898)\n  Agent sends consume heap\n  * Only capture a shallow copy of the current Frame in binding-conveyor-fn, so that sends in agent actions don't build infinite Frame stacks\n* [CLJ-928](http://dev.clojure.org/jira/browse/CLJ-928)\n  Instant literal for Date and Timestamp should print in UTC\n* [CLJ-931](http://dev.clojure.org/jira/browse/CLJ-933)\n  Syntactically broken clojure.test/are tests succeed\n* [CLJ-933](http://dev.clojure.org/jira/browse/CLJ-933)\n  Compiler warning on clojure.test-clojure.require-scratch\n\n# Changes to Clojure in Version 1.3\n\n## CONTENTS\n<pre>\n 1 Deprecated and Removed Features\n    1.1 Earmuffed Vars are No Longer Automatically Considered Dynamic\n    1.2 ISeq No Longer Inherits from Sequential\n    1.3 Removed Bit Operation Support for Boxed Numbers\n    1.4 Ancillary Namespaces No Longer Auto-Load on Startup\n    1.5 Replicate Deprecated\n 2 New/Improved Features\n    2.1 Enhanced Primitive Support\n    2.2 defrecord and deftype Improvements\n    2.3 Better Exception Reporting\n    2.4 clojure.reflect/reflect\n    2.5 clojure.data/diff\n    2.6 clojure.core/every-pred and clojure.core/some-fn Combinators\n    2.7 clojure.core/realized?\n    2.8 clojure.core/with-redefs-fn & with-redefs\n    2.9 clojure.core/find-keyword\n    2.10 clojure.repl/pst\n    2.11 clojure.pprint/print-table\n    2.12 pprint respects *print-length*\n    2.13 compilation and deployment via Maven\n    2.14 internal keyword map uses weak refs\n    2.15 ^:const defs\n    2.16 Message Bearing Assert\n    2.17 Error Checking for defmulti Options\n    2.18 Removed Checked Exceptions\n    2.19 vector-of Takes Multiple Arguments\n    2.20 deref with timeout\n    2.21 Walk Support for sorted-by Collections\n    2.22 string.join Enhanced to Work with Sets\n    2.23 clojure.test-helper\n    2.24 Newline outputs platform-specific newline sequence\n    2.25 init-proxy and update-proxy return proxy\n    2.26 doc & find-doc moved to REPL\n    2.27 clojure.java.shell/sh accepts as input anything that clojure.java.io/copy does\n    2.28 InterruptedHandler Promoted to clojure.repl\n    2.29 Add support for running -main namespaces from clojure.main\n    2.30 Set thread names on agent thread pools\n    2.31 Add docstring support to def\n    2.32 Comp function returns identity when called with zero arity\n    2.33 Type hints can be applied to arg vectors\n    2.34 Binding Conveyance\n 3 Performance Enhancements\n 4 Bug Fixes\n 5 Modular Contrib\n</pre>\n\n## 1 Deprecated and Removed Features\n\n### 1.1 Earmuffed Vars Are No Longer Automatically Considered Dynamic.\n\n    (def *fred*)\n    => Warning: *fred* not declared dynamic and thus is not dynamically rebindable, but its name suggests otherwise. Please either indicate ^:dynamic ** or change the name.\n\n### 1.2 ISeq No Longer Inherits From Sequential\n\nThis allows ISeq implementers to be in the map or set equality partition.\n\n### 1.3 Removed Bit Operation Support for Boxed Numbers\n\nBit Operations map directly to primitive operations\n\n### 1.4 Ancillary Namespaces No Longer Auto-Load on Startup\n\nThe following namespaces are no longer loaded on startup: clojure.set, clojure.xml, clojure.zip\n\n### 1.5 Replicate Deprecated\n\nUse repeat instead.\n\n## 2 New/Improved Features\n\n### 2.1 Enhanced Primitive Support\n\nFull details here:\n\n - [Enhanced Primitive Support][EPS]\n - [Documentation for 1.3 Numerics][NUM]\n\n[EPS]: http://dev.clojure.org/display/doc/Enhanced+Primitive+Support\n[NUM]: http://dev.clojure.org/display/doc/Documentation+for+1.3+Numerics\n\n### 2.2 defrecord and deftype Improvements\n\nDetails here: [Defrecord Improvements](http://dev.clojure.org/display/design/defrecord+improvements)\n\n### 2.3 Better Exception Reporting\n\nDetails here: [Error Handling](http://dev.clojure.org/display/design/Error+Handling)\n\nAdditionally:\n\nBetter error messages:\n\n * When calling macros with arity\n * For Invalid Map Literals\n * For alias function if using unknown namespace\n * In the REPL\n * Add \"starting at <line>\" to EOF while reading exceptions\n * Better compilation error reporting\n\n### 2.4 clojure.reflect/reflect\n\nFull details here: [Reflection API](http://dev.clojure.org/display/design/Reflection+API)\n\n### 2.5 clojure.data/diff\n\nRecursively compares a and b, returning a tuple of [things-only-in-a things-only-in-b things-in-both]\n\n    (diff {:a 1 :b 2} {:a 1 :b 22 :c 3})\n    => ({:b 2} {:c 3, :b 22} {:a 1})\n\n### 2.6 clojure.core/every-pred and clojure.core/some-fn Combinators\n\nevery-pred takes a set of predicates and returns a function f that returns true if all of its composing predicates return a logical true value against all of its arguments, else it returns false.\n\n    ((every-pred even?) 2 4 6)\n    => true\n\n    ((every-pred even?) 2 4 5)\n    =>false\n\nsome-fn takes a set of predicates and returns a function f that returns the first logical true value  returned by one of its composing predicates against any of its arguments, else it returns logical false.\n\n    ((some-fn even?) 2 4 5)\n    => true\n    ((some-fn odd?) 2 4 6)\n    => false\n\n### 2.7 clojure.core/realized?\n\nReturns true if a value has been produced for a promise, delay, future or lazy sequence.\n\n    (let [x (range 5)]\n      (println (realized? x))\n      (first x)\n      (println (realized? x)))\n    => false\n    => true\n\n### 2.8 clojure.core/with-redefs-fn & clojure.core/with-redefs\n\nwith-redefs-fn temporarily redefines Vars during a call to func. with-redefs temporarily redefines Vars while executing the body.\n\n    (with-redefs [nil? :temp] (println nil?))\n    => :temp\n\n### 2.9 clojure.core/find-keyword\n\nReturns a Keyword with the given namespace and name if one already exists.\n\n    (find-keyword \"def\")\n    => :def\n    (find-keyword \"fred\")\n    => nil\n\n### 2.10 clojure.repl/pst\n\nPrints a stack trace of the exception\n\n\n    (pst (IllegalArgumentException.))\n\n    IllegalArgumentException\n        user/eval27 (NO_SOURCE_FILE:18)\n        clojure.lang.Compiler.eval (Compiler.java:6355)\n        clojure.lang.Compiler.eval (Compiler.java:6322)\n        clojure.core/eval (core.clj:2699)\n        clojure.main/repl/read-eval-print--5906 (main.clj:244)\n        clojure.main/repl/fn--5911 (main.clj:265)\n        clojure.main/repl (main.clj:265)\n        clojure.main/repl-opt (main.clj:331)\n        clojure.main/main (main.clj:427)\n        clojure.lang.Var.invoke (Var.java:397)\n        clojure.lang.Var.applyTo (Var.java:518)\n        clojure.main.main (main.java:37)\n\n### 2.11 clojure.pprint/print-table\n\nPrints a collection of maps in a textual table.\n\n    (print-table [:fred :barney]\n                 [{:fred \"ethel\"}\n                  {:fred \"wilma\" :barney \"betty\"}])\n\n    ===============\n    :fred | :barney\n    ===============\n    ethel |\n    wilma | betty\n    ===============\n\n### 2.12 pprint respects \\*print-length\\*\n\nAssigning \\*print-length\\* now affects output of pprint\n\n### 2.13 compilation and deployment via Maven\n\nSee the following pages for more information:\n\n - [Maven Settings and Repositories][MSR]\n - [Why Maven?][WM]\n - [Common Contrib Build][CCB]\n - [How to Make Releases][HMR]\n\n [MSR]: http://dev.clojure.org/display/doc/Maven+Settings+and+Repositories\n [WM]: http://dev.clojure.org/pages/viewpage.action?pageId=950842\n [CCB]: http://dev.clojure.org/display/design/Common+Contrib+Build\n [HMR]:http://dev.clojure.org/display/design/How+to+Make+Releases\n\n### 2.14 internal keyword map uses weak refs\n\n### 2.15 ^:const defs\n\n^:const lets you name primitive values with speedier reference.\n\n    (def constants\n     {:pi 3.14\n      :e 2.71})\n\n    (def ^:const pi (:pi constants))\n    (def ^:const e (:e constants))\n\nThe overhead of looking up :e and :pi in the map happens at compile time, as (:pi constants) and (:e constants) are evaluated when their parent def forms are evaluated.\n\n### 2.16 Message Bearing Assert\n\nAssert can take a second argument which will be printed when the assert fails\n\n    (assert (= 1 2) \"1 is not equal to 2\")\n    => AssertionError Assert failed: 1 is not equal to 2\n\n### 2.17 Error Checking for defmulti Options\n\ndefmulti will check to verify that its options are valid. For example, the following code will throw an exception:\n\n    (defmulti fred :ethel :lucy :ricky)\n    => IllegalArgumentException\n\n### 2.18 Removed Checked Exceptions\n\nClojure does not throw checked exceptions\n\n### 2.19 vector-of Takes Multiple Args\n\nvector-of takes multiple args used to populate the array\n\n    (vector-of :int 1 2 3)\n    => [1 2 3]\n\n### 2.20 deref with timeout\n\nderef now takes a timeout option - when given with a blocking reference, will return the timeout-val if the timeout (in milliseconds) is reached before value is available.\n\n    (deref (promise) 10 :ethel)\n    => :ethel\n\n### 2.21 Walk Support for sorted-by Collections\n\nWalk modified to work on sorted-by collections\n\n    let [x (sorted-set-by > 1 2 3)] (walk inc reverse x))\n    => (2 3 4)\n\n### 2.22 string.join Enhanced to Work with Sets\n\nJust like join works on other collections\n\n    (join \" and \" #{:fred :ethel :lucy})\n    => \":lucy and :fred and :ethel\"\n\n### 2.23 clojure.test-helper\n\nAll test helpers moved into clojure.test-helper\n\n### 2.24 Newline outputs platform-specific newline sequence\n\nNewline sequence is output as \\r\\n on Windows now.\n\n### 2.25 init-proxy and update-proxy return proxy\n\nNow you can chain calls on the proxy\n\n### 2.26 doc & find-doc moved to REPL\n\nAdds special form docs to the REPL\n\n### 2.27 clojure.java.shell/sh accepts as input anything that clojure.java.io/copy does\n\nThis adds InputStream, Reader, File, byte[] to the list of inputs for clojure.java.shell/sh\n\n### 2.28 Interrupt Handler Promoted to clojure.repl\n\nPromoting this library eliminates the need for a dependency on old contrib.\n\n### 2.29 Add support for running -main namespaces from clojure.main\n\nThis patch allows clojure.main to accept an argument pointing to a namespace to look for a -main function in. This allows users to write -main functions that will work the same whether the code is AOT-compiled for use in an executable jar or just run from source.\n\n### 2.30 Set thread names on agent thread pools\n\nIt's a best practice to name the threads in an executor thread pool with a custom ThreadFactory so that the purpose of these threads is clear in thread dumps and other runtime operational tools.\n\nPatch causes thread names like:\n\n    clojure-agent-send-pool-%d     (should be fixed # of threads)\n    clojure-agent-send-off-pool-%d (will be added and removed over time)\n\n### 2.31 Add docstring support to def\n\nA def can now have a docstring between name and value.\n\n    (def foo \"a foo\" :foo)\n\n### 2.32 Comp function returns identity when called with zero arity\n\n    (= (comp) identity)\n    => true\n\n### 2.33 Type hints can be applied to arg vectors\n\nYou can hint different arities separately:\n\n    (defn hinted\n      (^String [])\n      (^Integer [a])\n      (^java.util.List [a & args]))\n\nThis is preferred over hinting the function name. Hinting the function name is still allowed for backward compatibility, but will likely be deprecated in a future release.\n\n### 2.34 Binding Conveyance\n\nClojure APIs that pass work off to other threads (e.g. send, send-off, pmap, future) now convey the dynamic bindings of the calling thread:\n\n    (def ^:dynamic *num* 1)\n    (binding [*num* 2] (future (println *num*)))\n    ;; prints \"2\", not \"1\"\n\n## 3 Performance Enhancements\n\n  * Code path for using vars is now much faster for the common case\n  * Improved startup time\n  * Fix performance on some numeric overloads\n    See [CLJ-380](http://dev.clojure.org/jira/browse/CLJ-5) for more information\n  * Promises are lock free\n  * Functions only get metadata support code when metadata explicitly supplied\n  * definterface/gen-interface accepts array type hints\n  * inline nil?\n  * inline bit-functions & math ops\n  * inline n-ary min & max\n  * PersistentQueue count is now O(1)\n  * Intrinsics: unchecked math operators now emit bytecodes directly where possible\n\n## 4 Bug Fixes\n\n[Complete list of Tickets for 1.3 Release][ISSUES].\n\n[ISSUES]: http://dev.clojure.org/jira/secure/IssueNavigator.jspa?mode=hide&requestId=10052\n\n * [CLJ-8](http://dev.clojure.org/jira/browse/CLJ-8)\n   detect and report cyclic load dependencies\n    * Patch restore detection of cyclic load dependencies\n\n * [CLJ-31](http://dev.clojure.org/jira/browse/CLJ-31)\n   compiler now correctly rejects attempts to recur across try\n    (fn [x] (try (recur 1)))\n    => CompilerException\n\n * [CLJ-286](http://dev.clojure.org/jira/browse/CLJ-286)\n   \\*out\\* being used as java.io.PrintWriter\n    * Patch fixes using Writer instead of PrintWriter\n    * fix clojure.main to not assume that *err* is a PrintWriter\n\n * [CLJ-292](http://dev.clojure.org/jira/browse/CLJ-292)\n   LazySeq.sval() nests RuntimeExceptions\n    * Patch causes only the original RuntimeException to be thrown\n\n * [CLJ-390](http://dev.clojure.org/jira/browse/CLJ-390)\n   sends from agent error-handlers should be allowed\n    * Patch allows agent error-handler to send successfully\n\n * [CLJ-426](http://dev.clojure.org/jira/browse/CLJ-426)\n   case should handle hash collision\n    * There were situations where a hash collision would occur with case and an exception would be thrown. See [discussion](https://groups.google.com/d/topic/clojure/m4ZDWKSfmfo/discussion) for more details\n\n * [CLJ-430](http://dev.clojure.org/jira/browse/CLJ-430)\n   clojure.java.io URL Coercion throws java.lang.ClassCastException\n    * Patch correct exception to be thrown\n\n * [CLJ-432](http://dev.clojure.org/jira/browse/CLJ-432)\n   deftype does not work if containing ns contains dashes\n    * Patch munges namespaces with dashes properly\n\n * [CLJ-433](http://dev.clojure.org/jira/browse/CLJ-433)\n   munge should not munge $ (which isJavaIdentifierPart), should munge ' (which is not)\n\n * [CLJ-435](http://dev.clojure.org/jira/browse/CLJ-435)\n   stackoverflow exception in printing meta with :type\n    * Patch fixes exception being thrown on certain type metadata\n      (with-meta {:value 2} {:type Object})\n      => No message. [Thrown class java.lang.StackOverflowError]\n\n * [CLJ-437](http://dev.clojure.org/jira/browse/CLJ-437)\n   Bugs in clojure.set/subset? and superset? for sets with false/nil elements\n    * Patch fixes failing on subset? and superset? for sets with false/nil elements\n\n * [CLJ-439](http://dev.clojure.org/jira/browse/CLJ-439)\n   Automatic type translation from Integer to Long\n    * Patch fixes increase coercion from Integer to Long\n\n * [CLJ-444](http://dev.clojure.org/jira/browse/CLJ-444)\n   Infinite recursion in Keyword.intern leads to stack overflow\n    * No more infinite recursion with patch\n\n * [CLJ-673](http://dev.clojure.org/jira/browse/CLJ-673)\n   use system class loader when base loader is null\n    * facilitates placing Clojure on bootclasspath\n\n * [CLJ-678](http://dev.clojure.org/jira/browse/CLJ-678)\n   into-array should work with all primitive types\n\n * [CLJ-680](http://dev.clojure.org/jira/browse/CLJ-680)\n   printing promises should not block\n    * Patch allows printing of promises without blocking\n\n * [CLJ-682](http://dev.clojure.org/jira/browse/CLJ-682)\n   cl-format: ~w throws an exception when not wrapped in a pretty-writer\n    * Patch fixes the following bug in cl-format with ~w:\n\n * [CLJ-693](http://dev.clojure.org/jira/browse/CLJ-693)\n   VerifyError with symbol metadata, macros, and defrecord\n\n * [CLJ-702](http://dev.clojure.org/jira/browse/CLJ-702)\n   case gives NPE when used with nil\n    * Patch allows nil to be used with case\n\n * [CLJ-734](http://dev.clojure.org/jira/browse/CLJ-734)\n   starting scope of let bindings seems incorrect from jdi perspective\n    * Patch fixes local variables table to have the correct code index for let bindings.\n\n * [CLJ-739](http://dev.clojure.org/jira/browse/CLJ-739)\n   version.properties file is not closed\n    * Patch properly closes version.properties file\n\n * [CLJ-751](http://dev.clojure.org/jira/browse/CLJ-751)\n   cl-format: ~( throws an exception with an empty string\n    * Patch fixes the following bug in cl-format when format is nil\n    (cl-format nil \"~:(~a~)\" \"\")\n    => NullPointerException\n\n * [CLJ-780](http://dev.clojure.org/jira/browse/CLJ-780)\n   race condition in reference cache on Java 5\n    * Map.Entry instances can have null values prior to Java 6. This patch provides a workaround.\n\n * floats were being boxed as Doubles, now they are boxed as Floats\n\n * several \"holding onto head\" fixes\n    * Stop top-level defs from hanging onto the head of an expression that uses a lazy seq\n    * Stop multimethods from holding onto heads of their arguments\n\n## 5 Modular Contrib\n\nIn 1.3, the monolithic clojure-contrib.jar has been replaced by a modular system of contrib libraries, so that production systems can include only the code they actually need. This also allows individual contribs to have their own release cycles. Many contribs have moved forward by several point versions already. Documentation for updating applications to use the new contrib libraries is at http://dev.clojure.org/display/design/Where+Did+Clojure.Contrib+Go\n\nImportant Note: Many of the new modular contribs are compatible with both 1.2 and 1.3. This offers an incremental migration path: First, upgrade your contrib libraries while holding Clojure at 1.2, Then, in a separate step, upgrade to Clojure 1.3.\n"
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "epl-v10.html",
          "type": "blob",
          "size": 12.6142578125,
          "content": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" />\r\n<title>Eclipse Public License - Version 1.0</title>\r\n<style type=\"text/css\">\r\n  body {\r\n    size: 8.5in 11.0in;\r\n    margin: 0.25in 0.5in 0.25in 0.5in;\r\n    tab-interval: 0.5in;\r\n    }\r\n  p {  \t\r\n    margin-left: auto;\r\n    margin-top:  0.5em;\r\n    margin-bottom: 0.5em;\r\n    }\r\n  p.list {\r\n  \tmargin-left: 0.5in;\r\n    margin-top:  0.05em;\r\n    margin-bottom: 0.05em;\r\n    }\r\n  </style>\r\n\r\n</head>\r\n\r\n<body lang=\"EN-US\">\r\n\r\n<p align=center><b>Eclipse Public License - v 1.0</b></p>\r\n\r\n<p>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE\r\nPUBLIC LICENSE (&quot;AGREEMENT&quot;). ANY USE, REPRODUCTION OR\r\nDISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS\r\nAGREEMENT.</p>\r\n\r\n<p><b>1. DEFINITIONS</b></p>\r\n\r\n<p>&quot;Contribution&quot; means:</p>\r\n\r\n<p class=\"list\">a) in the case of the initial Contributor, the initial\r\ncode and documentation distributed under this Agreement, and</p>\r\n<p class=\"list\">b) in the case of each subsequent Contributor:</p>\r\n<p class=\"list\">i) changes to the Program, and</p>\r\n<p class=\"list\">ii) additions to the Program;</p>\r\n<p class=\"list\">where such changes and/or additions to the Program\r\noriginate from and are distributed by that particular Contributor. A\r\nContribution 'originates' from a Contributor if it was added to the\r\nProgram by such Contributor itself or anyone acting on such\r\nContributor's behalf. Contributions do not include additions to the\r\nProgram which: (i) are separate modules of software distributed in\r\nconjunction with the Program under their own license agreement, and (ii)\r\nare not derivative works of the Program.</p>\r\n\r\n<p>&quot;Contributor&quot; means any person or entity that distributes\r\nthe Program.</p>\r\n\r\n<p>&quot;Licensed Patents&quot; mean patent claims licensable by a\r\nContributor which are necessarily infringed by the use or sale of its\r\nContribution alone or when combined with the Program.</p>\r\n\r\n<p>&quot;Program&quot; means the Contributions distributed in accordance\r\nwith this Agreement.</p>\r\n\r\n<p>&quot;Recipient&quot; means anyone who receives the Program under\r\nthis Agreement, including all Contributors.</p>\r\n\r\n<p><b>2. GRANT OF RIGHTS</b></p>\r\n\r\n<p class=\"list\">a) Subject to the terms of this Agreement, each\r\nContributor hereby grants Recipient a non-exclusive, worldwide,\r\nroyalty-free copyright license to reproduce, prepare derivative works\r\nof, publicly display, publicly perform, distribute and sublicense the\r\nContribution of such Contributor, if any, and such derivative works, in\r\nsource code and object code form.</p>\r\n\r\n<p class=\"list\">b) Subject to the terms of this Agreement, each\r\nContributor hereby grants Recipient a non-exclusive, worldwide,\r\nroyalty-free patent license under Licensed Patents to make, use, sell,\r\noffer to sell, import and otherwise transfer the Contribution of such\r\nContributor, if any, in source code and object code form. This patent\r\nlicense shall apply to the combination of the Contribution and the\r\nProgram if, at the time the Contribution is added by the Contributor,\r\nsuch addition of the Contribution causes such combination to be covered\r\nby the Licensed Patents. The patent license shall not apply to any other\r\ncombinations which include the Contribution. No hardware per se is\r\nlicensed hereunder.</p>\r\n\r\n<p class=\"list\">c) Recipient understands that although each Contributor\r\ngrants the licenses to its Contributions set forth herein, no assurances\r\nare provided by any Contributor that the Program does not infringe the\r\npatent or other intellectual property rights of any other entity. Each\r\nContributor disclaims any liability to Recipient for claims brought by\r\nany other entity based on infringement of intellectual property rights\r\nor otherwise. As a condition to exercising the rights and licenses\r\ngranted hereunder, each Recipient hereby assumes sole responsibility to\r\nsecure any other intellectual property rights needed, if any. For\r\nexample, if a third party patent license is required to allow Recipient\r\nto distribute the Program, it is Recipient's responsibility to acquire\r\nthat license before distributing the Program.</p>\r\n\r\n<p class=\"list\">d) Each Contributor represents that to its knowledge it\r\nhas sufficient copyright rights in its Contribution, if any, to grant\r\nthe copyright license set forth in this Agreement.</p>\r\n\r\n<p><b>3. REQUIREMENTS</b></p>\r\n\r\n<p>A Contributor may choose to distribute the Program in object code\r\nform under its own license agreement, provided that:</p>\r\n\r\n<p class=\"list\">a) it complies with the terms and conditions of this\r\nAgreement; and</p>\r\n\r\n<p class=\"list\">b) its license agreement:</p>\r\n\r\n<p class=\"list\">i) effectively disclaims on behalf of all Contributors\r\nall warranties and conditions, express and implied, including warranties\r\nor conditions of title and non-infringement, and implied warranties or\r\nconditions of merchantability and fitness for a particular purpose;</p>\r\n\r\n<p class=\"list\">ii) effectively excludes on behalf of all Contributors\r\nall liability for damages, including direct, indirect, special,\r\nincidental and consequential damages, such as lost profits;</p>\r\n\r\n<p class=\"list\">iii) states that any provisions which differ from this\r\nAgreement are offered by that Contributor alone and not by any other\r\nparty; and</p>\r\n\r\n<p class=\"list\">iv) states that source code for the Program is available\r\nfrom such Contributor, and informs licensees how to obtain it in a\r\nreasonable manner on or through a medium customarily used for software\r\nexchange.</p>\r\n\r\n<p>When the Program is made available in source code form:</p>\r\n\r\n<p class=\"list\">a) it must be made available under this Agreement; and</p>\r\n\r\n<p class=\"list\">b) a copy of this Agreement must be included with each\r\ncopy of the Program.</p>\r\n\r\n<p>Contributors may not remove or alter any copyright notices contained\r\nwithin the Program.</p>\r\n\r\n<p>Each Contributor must identify itself as the originator of its\r\nContribution, if any, in a manner that reasonably allows subsequent\r\nRecipients to identify the originator of the Contribution.</p>\r\n\r\n<p><b>4. COMMERCIAL DISTRIBUTION</b></p>\r\n\r\n<p>Commercial distributors of software may accept certain\r\nresponsibilities with respect to end users, business partners and the\r\nlike. While this license is intended to facilitate the commercial use of\r\nthe Program, the Contributor who includes the Program in a commercial\r\nproduct offering should do so in a manner which does not create\r\npotential liability for other Contributors. Therefore, if a Contributor\r\nincludes the Program in a commercial product offering, such Contributor\r\n(&quot;Commercial Contributor&quot;) hereby agrees to defend and\r\nindemnify every other Contributor (&quot;Indemnified Contributor&quot;)\r\nagainst any losses, damages and costs (collectively &quot;Losses&quot;)\r\narising from claims, lawsuits and other legal actions brought by a third\r\nparty against the Indemnified Contributor to the extent caused by the\r\nacts or omissions of such Commercial Contributor in connection with its\r\ndistribution of the Program in a commercial product offering. The\r\nobligations in this section do not apply to any claims or Losses\r\nrelating to any actual or alleged intellectual property infringement. In\r\norder to qualify, an Indemnified Contributor must: a) promptly notify\r\nthe Commercial Contributor in writing of such claim, and b) allow the\r\nCommercial Contributor to control, and cooperate with the Commercial\r\nContributor in, the defense and any related settlement negotiations. The\r\nIndemnified Contributor may participate in any such claim at its own\r\nexpense.</p>\r\n\r\n<p>For example, a Contributor might include the Program in a commercial\r\nproduct offering, Product X. That Contributor is then a Commercial\r\nContributor. If that Commercial Contributor then makes performance\r\nclaims, or offers warranties related to Product X, those performance\r\nclaims and warranties are such Commercial Contributor's responsibility\r\nalone. Under this section, the Commercial Contributor would have to\r\ndefend claims against the other Contributors related to those\r\nperformance claims and warranties, and if a court requires any other\r\nContributor to pay any damages as a result, the Commercial Contributor\r\nmust pay those damages.</p>\r\n\r\n<p><b>5. NO WARRANTY</b></p>\r\n\r\n<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS\r\nPROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\nOF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION,\r\nANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY\r\nOR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely\r\nresponsible for determining the appropriateness of using and\r\ndistributing the Program and assumes all risks associated with its\r\nexercise of rights under this Agreement , including but not limited to\r\nthe risks and costs of program errors, compliance with applicable laws,\r\ndamage to or loss of data, programs or equipment, and unavailability or\r\ninterruption of operations.</p>\r\n\r\n<p><b>6. DISCLAIMER OF LIABILITY</b></p>\r\n\r\n<p>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT\r\nNOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,\r\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING\r\nWITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF\r\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR\r\nDISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED\r\nHEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>\r\n\r\n<p><b>7. GENERAL</b></p>\r\n\r\n<p>If any provision of this Agreement is invalid or unenforceable under\r\napplicable law, it shall not affect the validity or enforceability of\r\nthe remainder of the terms of this Agreement, and without further action\r\nby the parties hereto, such provision shall be reformed to the minimum\r\nextent necessary to make such provision valid and enforceable.</p>\r\n\r\n<p>If Recipient institutes patent litigation against any entity\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that the\r\nProgram itself (excluding combinations of the Program with other\r\nsoftware or hardware) infringes such Recipient's patent(s), then such\r\nRecipient's rights granted under Section 2(b) shall terminate as of the\r\ndate such litigation is filed.</p>\r\n\r\n<p>All Recipient's rights under this Agreement shall terminate if it\r\nfails to comply with any of the material terms or conditions of this\r\nAgreement and does not cure such failure in a reasonable period of time\r\nafter becoming aware of such noncompliance. If all Recipient's rights\r\nunder this Agreement terminate, Recipient agrees to cease use and\r\ndistribution of the Program as soon as reasonably practicable. However,\r\nRecipient's obligations under this Agreement and any licenses granted by\r\nRecipient relating to the Program shall continue and survive.</p>\r\n\r\n<p>Everyone is permitted to copy and distribute copies of this\r\nAgreement, but in order to avoid inconsistency the Agreement is\r\ncopyrighted and may only be modified in the following manner. The\r\nAgreement Steward reserves the right to publish new versions (including\r\nrevisions) of this Agreement from time to time. No one other than the\r\nAgreement Steward has the right to modify this Agreement. The Eclipse\r\nFoundation is the initial Agreement Steward. The Eclipse Foundation may\r\nassign the responsibility to serve as the Agreement Steward to a\r\nsuitable separate entity. Each new version of the Agreement will be\r\ngiven a distinguishing version number. The Program (including\r\nContributions) may always be distributed subject to the version of the\r\nAgreement under which it was received. In addition, after a new version\r\nof the Agreement is published, Contributor may elect to distribute the\r\nProgram (including its Contributions) under the new version. Except as\r\nexpressly stated in Sections 2(a) and 2(b) above, Recipient receives no\r\nrights or licenses to the intellectual property of any Contributor under\r\nthis Agreement, whether expressly, by implication, estoppel or\r\notherwise. All rights in the Program not expressly granted under this\r\nAgreement are reserved.</p>\r\n\r\n<p>This Agreement is governed by the laws of the State of New York and\r\nthe intellectual property laws of the United States of America. No party\r\nto this Agreement will bring a legal action under this Agreement more\r\nthan one year after the cause of action arose. Each party waives its\r\nrights to a jury trial in any resulting litigation.</p>\r\n\r\n</body>\r\n\r\n</html>\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 9.59375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>org.clojure</groupId>\n  <artifactId>clojure</artifactId>\n  <name>clojure</name>\n  <packaging>jar</packaging>\n  <version>1.13.0-master-SNAPSHOT</version>\n\n  <url>http://clojure.org/</url>\n  <description>Clojure core environment and runtime library.</description>\n\n  <developers>\n    <developer>\n      <name>Rich Hickey</name>\n      <email>richhickey@gmail.com</email>\n      <timezone>-5</timezone>\n    </developer>\n  </developers>\n\n  <licenses>\n    <license>\n      <name>Eclipse Public License 1.0</name>\n      <url>http://opensource.org/licenses/eclipse-1.0.php</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <scm>\n    <connection>scm:git:git@github.com:clojure/clojure.git</connection>\n    <developerConnection>scm:git:git@github.com:clojure/clojure.git</developerConnection>\n    <url>git@github.com:clojure/clojure.git</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <properties>\n    <directlinking>true</directlinking>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>spec.alpha</artifactId>\n       <version>0.5.238</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>core.specs.alpha</artifactId>\n      <version>0.4.74</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>test.generative</artifactId>\n      <version>1.1.0</version>\n      <scope>test</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>test.check</artifactId>\n      <version>1.1.1</version>\n      <scope>test</scope>\n      <exclusions>\n        <exclusion>\n          <groupId>org.clojure</groupId>\n          <artifactId>clojure</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>javax.xml.ws</groupId>\n      <artifactId>jaxws-api</artifactId>\n      <version>2.3.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <!-- This id is linked to the key setup on the CI server -->\n      <id>sonatype-nexus-staging</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <build>\n    <resources>\n      <resource>\n\t<directory>src/resources</directory>\n\t<filtering>true</filtering>\n      </resource>\n      <resource>\n\t<directory>src/clj</directory>\n      </resource>\n    </resources>\n    <testSourceDirectory>test/java</testSourceDirectory>\n    <plugins>\n      <plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-compiler-plugin</artifactId>\n\t<version>3.13.0</version>\n\t<configuration>\n\t  <source>1.8</source>\n\t  <target>1.8</target>\n\t  <encoding>UTF-8</encoding>\n\t</configuration>\n      </plugin>\n      <plugin>\n\t<artifactId>maven-antrun-plugin</artifactId>\n\t<version>3.1.0</version>\n\t<executions>\n\t  <execution>\n\t    <id>clojure-compile</id>\n\t    <phase>compile</phase>\n\t    <goals>\n\t      <goal>run</goal>\n\t    </goals>\n\t    <configuration>\n\t      <target>\n                <property name=\"maven.compile.classpath\" refid=\"maven.compile.classpath\" />\n\t\t<ant target=\"compile-clojure\" />\n\t      </target>\n\t    </configuration>\n\t  </execution>\n\t  <execution>\n\t    <id>clojure-test</id>\n\t    <phase>test</phase>\n\t    <goals>\n\t      <goal>run</goal>\n\t    </goals>\n\t    <configuration>\n\t      <target>\n                <property name=\"maven.test.classpath\" refid=\"maven.test.classpath\" />\n\t\t<ant target=\"test\" />\n\t      </target>\n\t    </configuration>\n\t  </execution>\n\t</executions>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <version>3.5.0</version>\n        <executions>\n          <execution>\n            <id>add-clojure-source-dirs</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>add-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n\t\t<source>src/jvm</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n\t<artifactId>maven-assembly-plugin</artifactId>\n        <version>3.7.1</version>\n\t<executions>\n\t  <execution>\n\t    <id>clojure-slim-jar</id>\n\t    <phase>package</phase>\n\t    <goals>\n\t      <goal>single</goal>\n\t    </goals>\n\t    <configuration>\n\t      <descriptors>\n\t\t<descriptor>src/assembly/slim.xml</descriptor>\n\t      </descriptors>\n\t    </configuration>\n\t  </execution>\n\t</executions>\n      </plugin>\n      <plugin>\n\t<artifactId>maven-jar-plugin</artifactId>\n\t<version>3.4.1</version>\n      </plugin>\n      <plugin>\n\t<artifactId>maven-source-plugin</artifactId>\n\t<version>3.3.1</version>\n\t<executions>\n\t  <execution>\n\t    <id>attach-sources</id>\n\t    <phase>package</phase>\n\t    <goals>\n\t      <goal>jar</goal>\n\t    </goals>\n            <configuration>\n              <excludes>\n                <exclude>clojure/version.properties</exclude>\n              </excludes>\n            </configuration>\n\t  </execution>\n\t</executions>\n      </plugin>\n      <plugin>\n\t<!-- do not push SCM changes to upstream repository;\n\t     prevents pushing tags/commits for failed releases;\n\t     instead, push SCM changes in Hudson configuration -->\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-release-plugin</artifactId>\n\t<version>3.0.1</version>\n\t<configuration>\n\t  <pushChanges>false</pushChanges>\n\t  <localCheckout>true</localCheckout>\n\t</configuration>\n      </plugin>\n      <plugin>\n\t<!-- disable the Surefire testing plugin -->\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>3.2.5</version>\n\t<configuration>\n\t  <skip>true</skip>\n\t</configuration>\n      </plugin>\n\n      <!-- deploy artifacts to sonatype -->\n      <plugin>\n        <groupId>org.sonatype.plugins</groupId>\n        <artifactId>nexus-staging-maven-plugin</artifactId>\n        <version>1.6.13</version>\n        <extensions>true</extensions>\n        <configuration>\n          <!-- The server \"id\" element from settings to use authentication from -->\n          <serverId>sonatype-nexus-staging</serverId>\n          <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n          <autoReleaseAfterClose>true</autoReleaseAfterClose>\n        </configuration>\n      </plugin>\n\n    </plugins>\n  </build>\n\n  <profiles>\n    <!-- Use \"mvn -Ptest-direct\" or \"mvn -Ptest-no-direct\" to choose testing with direct linking -->\n    <profile>\n      <id>test-direct</id>\n      <properties>\n        <directlinking>true</directlinking>\n      </properties>\n    </profile>\n    <profile>\n      <id>test-no-direct</id>\n      <properties>\n        <directlinking>false</directlinking>\n      </properties>\n    </profile>\n    <profile>\n      <!-- \"mvn -Pdistribution package\" builds a .zip file -->\n      <id>distribution</id>\n      <build>\n\t<plugins>\n\t  <plugin>\n\t    <artifactId>maven-assembly-plugin</artifactId>\n\t    <version>3.7.1</version>\n\t    <executions>\n\t      <execution>\n\t\t<id>clojure-distribution</id>\n\t\t<phase>package</phase>\n\t\t<goals>\n\t\t  <goal>single</goal>\n\t\t</goals>\n\t\t<configuration>\n\t\t  <appendAssemblyId>false</appendAssemblyId>\n\t\t  <descriptors>\n\t\t    <descriptor>src/assembly/distribution.xml</descriptor>\n\t\t  </descriptors>\n\t\t</configuration>\n\t      </execution>\n\t    </executions>\n\t  </plugin>\n\t</plugins>\n      </build>\n    </profile>\n    <profile>\n      <!-- sign artifacts for deployment -->\n      <id>sign</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>3.2.4</version>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>local</id>\n      <dependencies>\n        <dependency>\n          <groupId>org.clojure</groupId>\n          <artifactId>test.check</artifactId>\n          <version>1.1.1</version>\n          <exclusions>\n            <exclusion>\n              <groupId>org.clojure</groupId>\n              <artifactId>clojure</artifactId>\n            </exclusion>\n          </exclusions>\n        </dependency>\n      </dependencies>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>3.5.3</version>\n            <executions>\n              <execution>\n                <phase>package</phase>\n                <goals>\n                  <goal>shade</goal>\n                </goals>\n                <configuration>\n                  <transformers>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                      <mainClass>clojure.main</mainClass>\n                    </transformer>\n                  </transformers>\n\t\t  <outputFile>clojure.jar</outputFile>\n\t\t</configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "readme.txt",
          "type": "blob",
          "size": 12.953125,
          "content": " *   Clojure\n *   Copyright (c) Rich Hickey. All rights reserved.\n *   The use and distribution terms for this software are covered by the\n *   Eclipse Public License 1.0 (https://opensource.org/license/epl-1-0/)\n *   which can be found in the file epl-v10.html at the root of this distribution.\n *   By using this software in any fashion, you are agreeing to be bound by\n * \t the terms of this license.\n *   You must not remove this notice, or any other, from this software.\n\nDocs: https://clojure.org\nFeedback: https://ask.clojure.org\nGetting Started: https://clojure.org/guides/getting_started\n\nTo build and run locally with Ant:\n\n   One-time setup:    ./antsetup.sh\n   To build:          ant local\n   To run:            java -jar clojure.jar\n\nTo build locally with Maven:\n\n  To build (output JARs in target/):\n    mvn package\n\n  To build without testing:\n    mvn package -Dmaven.test.skip=true\n\n  To build and install in local Maven repository:\n    mvn install\n\n  To build a standalone jar with dependencies included:\n    mvn -Plocal -Dmaven.test.skip=true package\n\n  To run with the standalone jar:\n    java -jar clojure.jar\n\n--------------------------------------------------------------------------\nThis program uses the ASM bytecode engineering library which is distributed\nwith the following notice:\n\n ASM: a very small and fast Java bytecode manipulation framework\n Copyright (c) 2000-2011 INRIA, France Telecom\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n 3. Neither the name of the copyright holders nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\n-------------------------------------------------------------------------\nThis program uses the Guava Murmur3 hash implementation which is distributed\nunder the Apache License:\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}