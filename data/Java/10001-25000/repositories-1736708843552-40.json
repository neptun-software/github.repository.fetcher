{
  "metadata": {
    "timestamp": 1736708843552,
    "page": 40,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kunal-kushwaha/DSA-Bootcamp-Java",
      "stars": 17942,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.2158203125,
          "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/macos,intellij,java\n# Edit at https://www.toptal.com/developers/gitignore?templates=macos,intellij,java\n\n### Intellij ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# AWS User-specific\n.idea/**/aws.xml\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### Intellij Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n\n# Markdown Navigator plugin\n# https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced\n.idea/**/markdown-navigator.xml\n.idea/**/markdown-navigator-enh.xml\n.idea/**/markdown-navigator/\n\n# Cache file creation bug\n# See https://youtrack.jetbrains.com/issue/JBR-2257\n.idea/$CACHE_FILE$\n\n# CodeStream plugin\n# https://plugins.jetbrains.com/plugin/12206-codestream\n.idea/codestream.xml\n\n### Java ###\n# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# End of https://www.toptal.com/developers/gitignore/api/macos,intellij,java\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.4013671875,
          "content": "# DSA + Interview preparation bootcamp\n- Subscribe to the [YouTube channel](https://www.youtube.com/KunalKushwaha?sub_confirmation=1)\n- [Lectures](https://www.youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ)\n- [Course website](https://www.techwithkunal.com/courses/dsa)\n- [Assignments](https://github.com/kunal-kushwaha/DSA-Bootcamp-Java/tree/main/assignments) (solutions can be found on LeetCode)\n"
        },
        {
          "name": "SYLLABUS.md",
          "type": "blob",
          "size": 9.9443359375,
          "content": "- [Complete Git & GitHub Course](https://youtu.be/apGV9Kg7ics)\n- [Introduction to Programming](https://youtu.be/wn49bJOYAZM)\n    - [Types of languages](https://youtu.be/wn49bJOYAZM?t=171)\n    - [Memory management](https://youtu.be/wn49bJOYAZM?t=1488)\n- [Flow of the program](https://youtu.be/lhELGQAV4gg)\n    - [Flowcharts](https://youtu.be/lhELGQAV4gg)\n    - [Pseudocode](https://youtu.be/lhELGQAV4gg?t=715)\n- [Introduction to Java](https://youtu.be/4EP8YzcN0hQ)\n    - [Introduction](https://youtu.be/4EP8YzcN0hQ)\n    - [How it works](https://youtu.be/4EP8YzcN0hQ?t=93)\n    - [Setup Installation](https://youtu.be/4EP8YzcN0hQ?t=1486)\n    - [Input and Output in Java](https://youtu.be/TAtrPoaJ7gc)\n    - [Conditionals & Loops in Java](https://youtu.be/ldYLYRNaucM?t=88)\n        - [if-else](https://youtu.be/ldYLYRNaucM?t=88)\n        - [loops](https://youtu.be/ldYLYRNaucM?t=440)\n        - [Switch statements](https://youtu.be/mA23x39DjbI)\n    - [Data-types](https://youtu.be/TAtrPoaJ7gc?t=2800)\n    - [Coding best practices](https://youtu.be/waGfV-IoOt8)\n- [Functions](https://youtu.be/vvanI8NRlSI)\n    - [Introduction](https://youtu.be/vvanI8NRlSI)\n    - [Scoping in Java](https://youtu.be/vvanI8NRlSI?t=2801)\n    - [Shadowing](https://youtu.be/vvanI8NRlSI?t=3584)\n    - [Variable Length Arguments](https://youtu.be/vvanI8NRlSI?t=4013)\n    - [Overloading](https://youtu.be/vvanI8NRlSI?t=4327)\n- [Arrays](https://youtu.be/n60Dn0UsbEk)\n    - [Introduction](https://youtu.be/n60Dn0UsbEk)\n    - [Memory management](https://youtu.be/n60Dn0UsbEk?t=632)\n    - [Input and Output](https://youtu.be/n60Dn0UsbEk?t=1675)\n    - [ArrayList Introduction](https://youtu.be/n60Dn0UsbEk?t=4868)\n    - Searching\n        - [Linear Search](https://youtu.be/_HRA37X8N_Q)\n        - [Binary Search](https://youtu.be/f6UU7V3szVw)\n        - [Modified Binary Search](https://youtu.be/f6UU7V3szVw?t=2508)\n        - [Binary Search on 2D Arrays](https://www.youtube.com/watch?v=enI_KyGLYPo)\n    - Sorting\n        - [Insertion Sort](https://youtu.be/By_5-RRqVeE)\n        - [Selection Sort](https://youtu.be/Nd4SCCIHFWk)\n        - [Bubble Sort](https://youtu.be/F5MZyqRp_IM)\n        - [Cyclic Sort](https://youtu.be/JfinxytTYFQ)\n        - [Count Sort](https://youtu.be/FOo820lJV1Y)\n        - [Radix Sort](https://youtu.be/mLi6VQDqAOs)\n- [Pattern questions](https://youtu.be/lsOOs5J8ycw)\n- [Strings](https://www.youtube.com/watch?v=zL1DPZ0Ovlo)\n    - [Introduction](https://www.youtube.com/watch?v=zL1DPZ0Ovlo)\n    - [How Strings work](https://youtu.be/zL1DPZ0Ovlo?t=216)\n    - [Comparison of methods](https://youtu.be/zL1DPZ0Ovlo?t=977)\n    - [Operations in Strings](https://youtu.be/zL1DPZ0Ovlo?t=1681)\n    - [StringBuilder in Java](https://youtu.be/zL1DPZ0Ovlo?t=4199)\n    - [StringBuffer](https://www.youtube.com/watch?v=YFZai3fPUQI)\n- [Maths for DSA](https://youtu.be/fzip9Aml6og)\n    - [Introduction](https://youtu.be/fzip9Aml6og?t=20)\n    - [Complete Bitwise Operators](https://youtu.be/fzip9Aml6og?t=95)\n    - [Range of numbers](https://youtu.be/fzip9Aml6og?t=4169)\n    - [Prime numbers](https://youtu.be/lmSpZ0bjCyQ?t=57)\n    - [Sieve of Eratosthenes](https://youtu.be/lmSpZ0bjCyQ?t=850)\n    - [Newton's Square Root Method](https://youtu.be/lmSpZ0bjCyQ?t=1989)\n    - [Factors](https://youtu.be/lmSpZ0bjCyQ?t=3004)\n    - [Modulo properties](https://youtu.be/lmSpZ0bjCyQ?t=3980)\n    - [Number Theory](https://youtu.be/lmSpZ0bjCyQ?t=4405)\n    - [HCF / LCM](https://youtu.be/lmSpZ0bjCyQ?t=5110)\n    - [Euclidean algorithm](https://youtu.be/lmSpZ0bjCyQ?t=5520)\n    - [BigInteger & BigDecimal](https://www.youtube.com/watch?v=lHtoypC-4Ps)\n- [Recursion](https://www.youtube.com/playlist?list=PL9gnSGHSqcnp39cTyB1dTZ2pJ04Xmdrod)\n    - [Introduction](https://youtu.be/M2uO2nMT0Bk)\n    - [Flow of recursive programs - stacks](https://youtu.be/M2uO2nMT0Bk?t=2124)\n    - [Why recursion?](https://youtu.be/M2uO2nMT0Bk?t=2708)\n    - [Tree building of function calls](https://youtu.be/M2uO2nMT0Bk?t=3033)\n    - [Tail recursion](https://youtu.be/M2uO2nMT0Bk?t=4308)\n    - [Sorting](https://www.youtube.com/playlist?list=PL9gnSGHSqcnq-9CXLt9DsInytRMLoyZQ_)\n        - [Merge Sort](https://youtu.be/iKGAgWdgoRk)\n        - [Quick Sort](https://www.youtube.com/watch?v=Z8svOqamag8&list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&index=27)\n    - [Backtracking](https://youtu.be/zg5v2rlV1tM)\n        - [N-Queens](https://youtu.be/nC1rbW2YSz0)\n        - [N-Knights](https://youtu.be/nC1rbW2YSz0?t=2342)\n        - [Sudoku Solver](https://youtu.be/nC1rbW2YSz0?t=3190)\n        - [Maze problems](https://www.youtube.com/watch?v=zg5v2rlV1tM)\n    - [Recursion String Problems](https://youtu.be/gdifkIwCJyg)\n    - [Recursion Google, Amazon Questions](https://youtu.be/9ByWqPzfXDU)\n    - [Recursion Array Problems](https://youtu.be/sTdiMLom00U)\n    - [Recursion Pattern Problems](https://youtu.be/ymgnIIclCF0)\n    - [Subset Questions](https://youtu.be/9ByWqPzfXDU)\n- [Space and Time Complexity Analysis](https://youtu.be/mV3wrLBbuuE)\n    - [Introduction](https://youtu.be/mV3wrLBbuuE)\n    - [Comparisons of various cases](https://youtu.be/mV3wrLBbuuE?t=1039)\n    - [Solving Linear Recurrence Relations](https://youtu.be/mV3wrLBbuuE?t=6252)\n    - [Solving Divide and Conquer Recurrence Relations](https://youtu.be/mV3wrLBbuuE?t=4609)\n    - [Big-O, Big-Omega, Big-Theta Notations](https://youtu.be/mV3wrLBbuuE?t=2271)\n    - [Little Notations](https://youtu.be/mV3wrLBbuuE?t=2960)\n    - [Get equation of any relation easily - best and easiest approach](https://youtu.be/mV3wrLBbuuE?t=8189)\n    - [Complexity discussion of all the problems we do](https://youtu.be/mV3wrLBbuuE?t=3866)\n    - [Space Complexity](https://youtu.be/mV3wrLBbuuE?t=3330)\n    - [NP-Completeness Introduction](https://youtu.be/mV3wrLBbuuE?t=8695)\n- [Object Oriented Programming](https://www.youtube.com/playlist?list=PL9gnSGHSqcno1G3XjUbwzXHL8_EttOuKk)\n    - [Introduction](https://www.youtube.com/watch?v=BSVKUk58K6U)\n    - [Classes & its instances](https://youtu.be/BSVKUk58K6U?t=467)\n    - [this keyword in Java](https://youtu.be/BSVKUk58K6U?t=3380)\n    - [Properties](https://www.youtube.com/watch?v=46T2wD3IuhM)\n        - [Inheritance](https://youtu.be/46T2wD3IuhM?t=146)\n        - [Abstraction](https://youtu.be/46T2wD3IuhM?t=7102)\n        - [Polymorphism](https://youtu.be/46T2wD3IuhM?t=4226)\n        - [Encapsulation](https://youtu.be/46T2wD3IuhM?t=7022)\n    - [Overloading & Overriding](https://youtu.be/46T2wD3IuhM?t=4834)\n    - [Static & Non-Static](https://youtu.be/_Ya6CN13t8k?t=1137)\n    - [Packages](https://youtu.be/_Ya6CN13t8k?t=182)\n    - [Access Control](https://youtu.be/W145DXs8fFg)\n    - [Interfaces](https://youtu.be/rgHZa7-Dibg?t=1510)\n    - [Abstract Classes](https://youtu.be/rgHZa7-Dibg?t=68)\n    - [Annotations](https://youtu.be/rgHZa7-Dibg?t=3438)\n    - [Singleton Class](https://youtu.be/_Ya6CN13t8k?t=4240) \n    - [final, finalize, finally](https://youtu.be/46T2wD3IuhM?t=6317)\n    - [Object Cloning](https://youtu.be/OY2lPr8h93U?t=4352)\n    - [Object Class](https://youtu.be/W145DXs8fFg?t=1943)\n    - [Generics](https://www.youtube.com/watch?v=OY2lPr8h93U)\n    - [Exception Handling](https://youtu.be/OY2lPr8h93U?t=3405)\n    - [Collections Framework](https://youtu.be/9ogGan-R1pc?t=49)\n    - [Vector Class](https://youtu.be/9ogGan-R1pc?t=668)\n    - [Lambda Expression](https://youtu.be/OY2lPr8h93U?t=2894) \n    - [Enums](https://youtu.be/9ogGan-R1pc?t=909)\n- Linked List\n    - [Introduction](https://youtu.be/58YbpRDc4yw)\n    - [Singly + Doubly + Circular LinkedList](https://youtu.be/58YbpRDc4yw)\n    - [Fast and slow pointer](https://youtu.be/70tx7KcMROc)\n    - [Cycle Detection](https://youtu.be/70tx7KcMROc)\n    - [Reversal of LinkedList](https://youtu.be/70tx7KcMROc)\n    - [Linked List + Recursion](https://youtu.be/70tx7KcMROc)\n- [Stacks & Queues](https://www.youtube.com/watch?v=rHQI4mrJ3cg)\n    - Introduction\n    - Push efficient\n    - Pop efficient\n    - Queue using Stack and vice versa\n    - Circular Queue\n    - [Interview problems](https://www.youtube.com/watch?v=S9LUYztYLu4)\n- [File handling](https://www.youtube.com/watch?v=b35mlSPOlJg)\n- [Trees](https://www.youtube.com/playlist?list=PL9gnSGHSqcnqfctdbCQKaw5oZ9Up2cmsq)\n    - [Introduction](https://www.youtube.com/watch?v=4s1Tcvm00pA)\n      - Binary Trees\n      - Binary Search Trees\n    - [Interview questions](https://www.youtube.com/watch?v=9D-vP-jcc-Y)\n      - DFS\n      - BFS\n    - [AVL Trees](https://www.youtube.com/watch?v=CVA85JuJEn0)\n    - [Segment Tree](https://www.youtube.com/watch?v=ciHThtTVNto)\n    - Fenwick Tree / Binary Indexed Tree\n- Heaps\n    - [Introduction](https://youtu.be/Qf-TDPr0nYw)\n        - Theory\n        - Priority Queue\n        - Heapsort\n    - Two Heaps Method\n    - k-way merge\n    - Top k elements\n    - Interval problems\n- HashMap\n    - [Introduction](https://youtu.be/XLbvmMz8Fr8)\n        - Theory - how it works\n        - Comparisons of various forms\n        - Limitations and how to solve\n        - Map using LinkedList\n        - Map using Hash\n        - Chaining\n        - Probing\n    - [Huffman Coding](https://youtu.be/XLfgeaYHinM)\n    - [Karp-Rabin Strng matching algorithm](https://youtu.be/swciWFPq3NE)\n- Subarray Questions: Sliding window, Two Pointer, Kadane's Algorithm\n- Graphs\n    - Introduction\n    - BFS\n    - DFS\n    - Working with graph components\n    - Minimum Spanning Trees\n    - Kruskal Algorithm\n    - Prims Algorithm\n    - Dijkstra’s shortest path algorithm\n    - Topological Sort\n    - Bellman ford\n    - A* pathfinding Algorithm\n- Dynamic Programming\n    - Introduction\n    - Recursion + Recursion DP + Iteration + Iteration Space Optimized\n    - Complexity Analysis\n    - 0/1 Knapsack\n    - Subset Questions\n    - Unbounded Knapsack\n    - Subsequence questions\n    - String DP\n- Greedy Algorithms\n- Tries\n\n### Advanced concepts apart from interviews \n- Bitwise + DP\n- Extended Euclidean algorithm\n- Modulo Multiplicative Inverse\n- Linear Diophantine Equations\n- Matrix Exponentiation\n- Mathematical Expectation\n- Catalan Numbers\n- Fermat’s Theorem\n- Wilson's Theorem\n- Euler's Theorem\n- Lucas Theorem\n- Chinese Remainder Theorem\n- Euler Totient\n- NP-Completeness\n- Multithreading\n- Square Root Decomposition\n"
        },
        {
          "name": "assignments",
          "type": "tree",
          "content": null
        },
        {
          "name": "lectures",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}