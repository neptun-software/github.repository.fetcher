{
  "metadata": {
    "timestamp": 1736708915756,
    "page": 167,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PaperMC/Paper",
      "stars": 10382,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.0615234375,
          "content": "[*]\ncharset=utf-8\nend_of_line=lf\ninsert_final_newline=true\nindent_style=space\nindent_size=4\nij_any_block_comment_add_space = false\nij_any_block_comment_at_first_column = false\nij_any_line_comment_at_first_column = false\nij_any_line_comment_add_space = true\n\n[*.tiny]\nindent_style=tab\n\n[*.bat]\nend_of_line=crlf\n\n[*.yml]\nindent_size=2\n\n[*.patch]\ntrim_trailing_whitespace=false\n\n[*.java]\nij_continuation_indent_size = 4\nij_java_class_count_to_use_import_on_demand = 999999\nij_java_insert_inner_class_imports = false\nij_java_names_count_to_use_import_on_demand = 999999\nij_java_imports_layout = *,|,$*\nij_java_generate_final_locals = true\nij_java_generate_final_parameters = true\nij_java_method_parameters_new_line_after_left_paren = true\nij_java_method_parameters_right_paren_on_new_line = true\nij_java_use_fq_class_names = false\nij_java_class_names_in_javadoc = 1\n\n[paper-server/src/minecraft/java/**/*.java]\nij_java_use_fq_class_names = true\n\n[paper-server/src/minecraft/resources/data/**/*.json]\nindent_size = 2\n\n[paper-api-generator/generated/**/*.java]\nij_java_imports_layout = $*,|,*\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0888671875,
          "content": "* text=auto eol=lf\n\n*.sh text eol=lf\ngradlew text eol=lf\n*.bat text eol=crlf\n\n*.jar binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5341796875,
          "content": ".gradle/\nbuild/\n\n# Eclipse stuff\n.classpath\n.project\n.settings/\n\n# VSCode stuff\n.vscode/\n\n# netbeans\nnbproject/\nnbactions.xml\n\n# vim\n.*.sw[a-p]\n\n# various other potential build files\nbin/\ndist/\nmanifest.mf\n\n# Mac filesystem dust\n.DS_Store/\n.DS_Store\n\n# intellij\n*.iml\n*.ipr\n*.iws\n.idea/\nout/\n\n# JetBrains Fleet\n.fleet/\n\n# Linux temp files\n*~\n\n# other stuff\nrun/\nlogs/\n\n!gradle/wrapper/gradle-wrapper.jar\n\ntest-plugin.settings.gradle.kts\npaper-api-generator.settings.gradle.kts\n\n# Don't track patched vanilla submodules\npaper-server/src/minecraft/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 20.8369140625,
          "content": "Contributing to Paper\n==========================\nPaperMC is happy you're willing to contribute to our projects. We are usually\nvery lenient with all submitted PRs, but there are still some guidelines you\ncan follow to make the approval process go more smoothly.\n\n## Use a Personal Fork and not an Organization\n\nPaper will routinely modify your PR, whether it's a quick rebase or to take care\nof any minor nitpicks we might have. Often, it's better for us to solve these\nproblems for you than make you go back and forth trying to fix them yourself.\n\nUnfortunately, if you use an organization for your PR, it prevents Paper from\nmodifying it. To avoid this, please do not use repositories on organizations\nfor PRs.\n\n## Requirements\n\nTo get started with making changes, you'll need the following software, most of\nwhich can be obtained in (most) package managers such as `apt` (Debian / Ubuntu;\nyou will most likely use this for WSL), `homebrew` (macOS / Linux), and more:\n\n- `git` (package `git` everywhere);\n- A Java 21 or later JDK (packages vary, use Google/DuckDuckGo/etc.).\n  - [Adoptium](https://adoptium.net/) has builds for most operating systems.\n  - Paper requires JDK 21 to build, however, makes use of Gradle's\n    [Toolchains](https://docs.gradle.org/current/userguide/toolchains.html)\n    feature to allow building with only JRE 11 or later installed. (Gradle will\n    automatically provision JDK 21 for compilation if it cannot find an existing\n    install).\n\nIf you're on Windows, check\n[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n\nIf you're compiling with Docker, you can use Adoptium's\n[`eclipse-temurin`](https://hub.docker.com/_/eclipse-temurin/) images like so:\n\n```console\n# docker run -it -v \"$(pwd)\":/data --rm eclipse-temurin:21.0.5_11-jdk bash\nPulling image...\n\nroot@abcdefg1234:/# javac -version\njavac 21.0.5\n```\n\n## Understanding Patches\n\nUnlike the API and its implementation, modifications to Minecraft source files\nare done through patches. These patches/extensions are split into different\nthree different sets, which are:\n\n- `sources`: Per-file patches to Minecraft classes;\n- `resources`: Per-file patches to Minecraft data files;\n- `features`: Larger feature patches that modify multiple Minecraft classes.\n\nBecause this entire structure is based on patches and git, a basic understanding\nof how to use git is required. A basic tutorial can be found here:\n<https://git-scm.com/docs/gittutorial>.\n\nAssuming you have already forked the repository:\n\n1. Clone your fork to your local machine;\n2. Type `./gradlew applyPatches` in a terminal to apply the patches.\nOn Windows, remove the `./` the beginning of `gradlew` commands;\n3. cd into `paper-server` for server changes, and `paper-api` for API changes.\n**Only changes made in `paper-server/src/minecraft` have to deal with the patch system.**\n\n`paper-server/src/minecraft` is not a git repositories in the traditional sense. Its\ninitial commits are the decompiled and deobfuscated Minecraft source files. The per-file\npatches are applied on top of these files as a single, large commit, which is then followed\nby the individual feature-patch commits.\n\n## Modifying (per-file) Minecraft patches\n\nThis is generally what you need to do when editing Minecraft files. Updating our\nper-file patches is as easy as:\n1. Making your changes;\n2. Running `./gradlew fixupSourcePatches` in the root directory;\n3. If nothing went wrong, rebuilding patches with `./gradlew rebuildPatches`;\n\n### Resolving rebase conflicts\nIf you run into conflicts while running `fixupSourcePatches`, you need to go a more\nmanual route:\n\nThis method works by temporarily resetting your `HEAD` to the desired commit to\nedit it using `git rebase`.\n\n0. If you have changes you are working on, type `git stash` to store them for\n   later;\n    - You can type `git stash pop` to get them back at any point.\n1. cd into `paper-server/src/minecraft/java` and run `git rebase -i base`;\n    - It should show something like\n      [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n      the text editor you get.\n    - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n      If you don't know how to use `vim` and don't want to\n      learn, enter `:q!` and press enter. Before redoing this step, do\n      `export EDITOR=nano` for an easier editor to use.\n1. Replace `pick` with `edit` for the commit/patch you want to modify (in this\n   case the very first commit, `paper File Patches`), and\n   \"save\" the changes;\n1. Make the changes you want to make to the patch;\n1. Run `git add .` to add your changes;\n1. Run `git commit --amend` to commit;\n1. Run `git rebase --continue` to finish rebasing;\n1. Run `./gradlew rebuildPatches` in the root directory;\n\n## Adding larger feature patches\n\nFeature patches are exclusively used for large-scale changes that are hard to\ntrack and maintain and that can be optionally dropped, such as the more involved\noptimizations we have. This makes it easier to update Paper during Minecraft updates,\nsince we can temporarily drop these patches and reapply them later.\n\nThere is only a very small chance that you will have to use this system, but adding\nsuch patches is very simple:\n\n1. Modify `paper-server/src/minecraft` with the appropriate changes;\n1. Run `git add .` inside that directory to add your changes;\n1. Run `git commit` with the desired patch message;\n1. Run `./gradlew rebuildPatches` in the root directory.\n\nYour commit will be converted into a patch that you can then PR into Paper.\n\n> ❗ Please note that if you have some specific implementation detail you'd like\n> to document, you should do so in the patch message *or* in comments.\n\n## Modifying larger feature patches\n\nOne way of modifying feature patches is to reset to the patch commit and follow\nthe instructions from the [rebase section](#resolving-rebase-conflicts). If you\nare sure there won't be any conflicts from later patches, you can also use the\nfixup method.\n\n### Fixup method\n\n#### Manual method\n\n1. Make your changes;\n1. Make a temporary commit. You don't need to make a message for this;\n1. Type `git rebase -i base`, move (cut) your temporary commit and\n   move it under the line of the patch you wish to modify;\n1. Change the `pick` to the appropriate action:\n    1. `f`/`fixup`: Merge your changes into the patch without touching the\n       message.\n    1. `s`/`squash`: Merge your changes into the patch and use your commit message\n       and subject.\n1. Run `./gradlew rebuildPatches` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n\n#### Automatic method\n\n1. Make your changes;\n1. Make a fixup commit: `git commit -a --fixup <hash of patch to fix>`;\n    - If you want to modify a per-file patch, use `git commit -a --fixup file`\n    - You can also use `--squash` instead of `--fixup` if you want the commit\n      message to also be changed.\n    - You can get the hash by looking at `git log` or `git blame`; your IDE can\n      assist you too.\n    - Alternatively, if you only know the name of the patch, you can do\n      `git commit -a --fixup \"Subject of Patch name\"`.\n1. Rebase with autosquash: `git rebase -i --autosquash base`.\n   This will automatically move your fixup commit to the right place, and you just\n   need to \"save\" the changes.\n1. Run `./gradlew rebuildPatches` in the root directory. This will modify the\n   appropriate patches based on your commits.\n\n## Rebasing PRs\n\nSteps to rebase a PR to include the latest changes from `main`.  \nThese steps assume the `origin` remote is your fork of this repository and `upstream` is the official PaperMC repository.\n\n1. Fetch the latest changes from upstream's main: `git fetch upstream`.\n1. Checkout your feature/fix branch and rebase on main: `git switch patch-branch && git rebase upstream/main`.\n1. Apply updated patches: `./gradlew applyPatches`.\n1. If there are conflicts, fix them.\n1. If your PR creates new feature patches instead of modifying existing ones, ensure your newly-created patch is the last commit by either:\n    * Renaming the patch file with a large 4-digit number in front (e.g. 9999-Patch-to-add-some-new-stuff.patch), and re-applying patches.\n    * Running `git rebase --interactive base` and moving the commits to the end.\n1. Rebuild patches: `./gradlew rebuildPatches`.\n1. Commit modified patches.\n1. Force push changes: `git push --force`. Make sure you're not deleting any of your commits or changes here!\n\n## PR Policy\n\nWe'll accept changes that make sense. You should be able to justify their\nexistence, along with any maintenance costs that come with them. Using\n[obfuscation helpers](#obfuscation-helpers) aids in the maintenance costs.\nRemember that these changes will affect everyone who runs Paper, not just you\nand your server.\n\nWhile we will fix minor formatting issues, you should stick to the guide below\nwhen making and submitting changes.\n\n## Formatting\n\nAll modifications to Vanilla files should be marked. For historical reasons,\nAPI and API-implementation contain a lot of these too, but they are no longer\nrequired.\n\n- You need to add a comment with a short and identifiable description of the patch:\n  `// Paper start - <COMMIT DESCRIPTION>`\n    - The comments should generally be about the reason the change was made, what\n      it was before, or what the change is.\n    - After the general commit description, you can add additional information either\n      after a `;` or in the next line.\n- Multi-line changes start with `// Paper start - <COMMIT DESCRIPTION>` and end\n  with `// Paper end - <COMMIT DESCRIPTION>`.\n- One-line changes should have `// Paper - <COMMIT DESCRIPTION>` at the end of the line.\n\n> [!NOTE] These comments are incredibly important to be able to keep track of changes\n> across files and to remember what they are for, even a decade into the future.\n\nHere's an example of how to mark changes by Paper:\n\n```java\nentity.getWorld().dontBeStupid(); // Paper - Move away from beStupid()\nentity.getFriends().forEach(Entity::explode);\nentity.updateFriends();\n\n// Paper start - Use plugin-set spawn\n// entity.getWorld().explode(entity.getWorld().getSpawn());\nLocation spawnLocation = ((CraftWorld) entity.getWorld()).getSpawnLocation();\nentity.getWorld().explode(new BlockPosition(spawnLocation.getX(), spawnLocation.getY(), spawnLocation.getZ()));\n// Paper end - Use plugin-set spawn\n```\n\nWe generally follow the usual Java style (aka. Oracle style), or what is programmed\ninto most IDEs and formatters by default. There are a few notes, however:\n- It is fine to go over 80 lines as long as it doesn't hurt readability.  \nThere are exceptions, especially in Spigot-related files\n- When in doubt or the code around your change is in a clearly different style,\nuse the same style as the surrounding code.\n- Usage of the `var` keyword is discouraged, as it makes reading patch files a\nlot harder and can lead to confusion during updates due to changed return types.\nThe only exception to this is if a line would otherwise be way too long/filled with\nhard to parse generics in a case where the base type itself is already obvious.\n\n### Imports\nWhen adding new imports to a Vanilla class, use the fully qualified class name\ninstead of adding a new import to the top of the file. If you are using a type a significant number of times, you\ncan add an import with a comment. However, if it's only used a couple of times, the FQN is preferred to prevent future\npatch conflicts in the import section of the file.\n\n\n```java\nimport net.minecraft.server.MinecraftServer;\n// don't add import here, use FQN like below\n\npublic class SomeVanillaClass {\n    public final org.bukkit.Location newLocation; // Paper - add location\n}\n```\n\n### Nullability annotations\n\nWe are in the process of switching nullability annotation libraries, so you might need to use one or the other:\n\n**For classes we add**: Fields, method parameters and return types that are nullable should be marked via the\n`@Nullable` annotation from `org.jspecify.annotations`. Whenever you create a new class, add `@NullMarked`, meaning types\nare assumed to be non-null by default. For less obvious placing such as on generics or arrays, see the [JSpecify docs](https://jspecify.dev/docs/user-guide/).\n\n**For other classes**: Keep using both `@Nullable` and `@NotNull` from `org.jetbrains.annotations`. These\nwill be replaced later.\n\n## Access Transformers\nSometimes, Vanilla code already contains a field, method, or type you want to access\nbut the visibility is too low (e.g. a private field in an entity class). Paper can use access transformers\nto change the visibility or remove the final modifier from fields, methods, and classes. Inside the `build-data/paper.at`\nfile, you can add ATs that are applied when you `./gradlew applyPatches`. You can read about the format of ATs \n[here](https://mcforge.readthedocs.io/en/latest/advanced/accesstransformers/#access-modifiers).\n\n<!--\n## Patch Notes\n\nWhen submitting feature patches to Paper, we may ask you to add notes to the patch\nheader. While we do not require it for all changes, you should add patch notes\nwhen the changes you're making are technical, complex, or require an explanation\nof some kind. It is very likely that your patch will remain long after we've all\nforgotten about the details of your PR; patch notes will help us maintain it\nwithout having to dig back through GitHub history looking for your PR.\n\nThese notes should express the intent of your patch, as well as any pertinent\ntechnical details we should keep in mind long-term. Ultimately, they exist to\nmake it easier for us to maintain the patch across major version changes.\n\nIf you add a message to your commit in the Vanilla source directory,\nthe rebuild patches script will handle these patch notes\nautomatically as part of generating the patch file. If you are not\nextremely careful, you should always just `squash` or `amend` a patch (see the\nabove sections on modifying patches) and rebuild.\n\nEditing messages and patches by hand is possible, but you should patch and\nrebuild afterwards to make sure you did it correctly. This is slower than just\nmodifying the patches properly after a few times, so you will not really gain\nanything but headaches from doing it by hand.\n\nUnderneath is an example patch header/note:\n\n```patch\nFrom 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\nFrom: Shane Freeder <theboyetronic@gmail.com>\nDate: Sun, 15 Oct 2017 00:29:07 +0100\nSubject: [PATCH] revert serverside behavior of keepalives\n\nThis patch intends to bump up the time that a client has to reply to the\nserver back to 30 seconds as per pre 1.12.2, which allowed clients\nmore than enough time to reply potentially allowing them to be less\ntemperamental due to lag spikes on the network thread, e.g. that caused\nby plugins that are interacting with netty.\n\nWe also add a system property to allow people to tweak how long the server\nwill wait for a reply. There is a compromise here between lower and higher\nvalues, lower values will mean that dead connections can be closed sooner,\nwhereas higher values will make this less sensitive to issues such as spikes\nfrom networking or during connections flood of chunk packets on slower clients,\n at the cost of dead connections being kept open for longer.\n\ndiff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java\nindex a92bf8967..d0ab87d0f 100644\n--- a/src/main/java/net/minecraft/server/PlayerConnection.java\n+++ b/src/main/java/net/minecraft/server/PlayerConnection.java\n```\n-->\n\n## Obfuscation Helpers\n\nWhile rarely needed, obfuscation helpers are sometimes useful when it comes\nto unmapped local variables, or poorly named method parameters. In an effort\nto make future updates easier on ourselves, Paper tries to use obfuscation\nhelpers wherever it makes sense. The purpose of these helpers is to make the\ncode more readable and maintainable. These helpers should be made easy to\ninline by the JVM wherever possible.\n\nAn example of an obfuscation helper for a local variable:\n```java\ndouble d0 = entity.getX(); final double fromX = d0; // Paper - OBFHELPER\n// ...   \nthis.someMethod(fromX); // Paper\n```\n\nWhile they may not always be done in exactly the same way, the general goal is\nalways to improve readability and maintainability. Use your best judgment and do\nwhat fits best in your situation.\n\n## Configuration files\n\nTo use a configurable value in your patch, add a new field in either the\n`GlobalConfiguration` or `WorldConfiguration` classes (inside the \n`io.papermc.paper.configuration` package). Use `GlobalConfiguration` if a value\nmust remain the same throughout all worlds, or the latter if it can change\nbetween worlds. World-specific configuration options are preferred whenever\npossible.\n\n### Example\nThis is adding a new miscellaneous setting that doesn't seem to fit in other categories.\nTry to check and see if an existing category (inner class) exists that matches\nwhatever configuration option you are adding.\n```java\npublic class GlobalConfiguration {\n    // other sections\n    public class Misc extends ConfigurationPart {\n        // other settings\n        public boolean lagCompensateBlockBreaking = true;\n        public boolean useDimensionTypeForCustomSpawners = false;\n        public int maxNumOfPlayers = 20; // This is the new setting\n    }\n}\n```\nYou set the type of the setting as the field type, and the default value is the\ninitial field value. The name of the setting defaults to the snake-case of the\nfield name, so in this case it would be `misc.max-num-of-players`. You can use\nthe `@Setting` annotation to override that, but generally just try to set the \nfield name to what you want the setting to be called.\n\n#### Accessing the value\nIf you added a new global config value, you can access it in the code just by\ndoing\n```java\nint maxPlayers = GlobalConfiguration.get().misc.maxNumOfPlayers;\n```\nGenerally for global config values you will use the fully qualified class name,\n`io.papermc.paper.configuration.GlobalConfiguration` since it's not imported in\nmost places.\n---\nIf you are adding a new world config value, you must have access to an instance\nof the `net.minecraft.world.level.Level` which you can then access the config by doing\n```java\nint maxPlayers = level.paperConfig().misc.maxNumOfPlayers;\n```\n\n## Testing API changes\n\n### Using the Paper Test Plugin\n\nThe Paper project has a `test-plugin` module for easily testing out API changes\nand additions. To use the test plugin, enable it in `test-plugin.settings.gradle.kts`,\nwhich will be generated after running Gradle at least once. After this, you can edit\nthe test plugin, and run a server with the plugin using `./gradlew runDev` (or any\nof the other Paper run tasks).\n\n### Publishing to Maven local (use in external plugins)\n\nTo build and install the Paper APIs and Server to your local Maven repository, do the following:\n\n- Run `./gradlew publishToMavenLocal` in the base directory.\n\nIf you use Gradle to build your plugin:\n- Add `mavenLocal()` as a repository. Gradle checks repositories in the order they are declared,\n  so if you also have the Paper repository added, put the local repository above Paper's.\n- Make sure to remove `mavenLocal()` when you are done testing, see the [Gradle docs](https://docs.gradle.org/current/userguide/declaring_repositories.html#sec:case-for-maven-local)\n  for more details.\n\nIf you use Maven to build your plugin:\n- If you later need to use the Paper-API, you might want to remove the jar\n  from your local Maven repository.  \n  If you use Windows and don't usually build using WSL, you might not need to\n  do this.\n\n## Frequently Asked Questions\n\n### My commit doesn't need a build, what do I do?\n\nQuite simple: You add `[ci skip]` to the start of your commit subject.\n\nThis case most often applies to changes to files like `README.md`, this very\nfile (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n\n### Patching and building is *really* slow, what can I do?\n\nThis only applies if you're running Windows. If you're running a prior Windows\nrelease, either update to Windows 10/11 or move to macOS/Linux/BSD.\n\nIn order to speed up patching process on Windows, it's recommended you get WSL 2.\nThis is available in Windows 10 v2004, build 19041 or higher. (You can check\nyour version by running `winver` in the run window (Windows key + R)). If you're\nusing an out of date version of Windows 10, update your system with the\n[Windows 10 Update Assistant](https://www.microsoft.com/en-us/software-download/windows10) or [Windows 11 Update Assistant](https://www.microsoft.com/en-us/software-download/windows11).\n\nTo set up WSL 2, follow the information here:\n<https://docs.microsoft.com/en-us/windows/wsl/install>\n\nYou will most likely want to use the Ubuntu apps. Once it's set up, install the\nrequired tools with `sudo apt-get update && sudo apt-get install $TOOL_NAMES\n-y`. Replace `$TOOL_NAMES` with the packages found in the\n[requirements](#requirements). You can now clone the repository and do\neverything like usual.\n\n> ❗ Do not use the `/mnt/` directory in WSL! Instead, mount the WSL directories\n> in Windows like described here:\n> <https://docs.microsoft.com/en-us/windows/wsl/filesystems#view-your-current-directory-in-windows-file-explorer>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 2.6025390625,
          "content": "Paper inherits its licensing from the included upstream projects.\n\nAs such, Paper is licensed under the\n[GNU General Public License version 3](licenses/GPL.md); as it inherits it from Spigot,\nwho in turn inherits it from the original Bukkit and CraftBukkit projects.\n\nAny author who is _not_ listed below should be presumed to have released their work\nunder the original [GPL](licenses/GPL.md) license.\n\nIn the interest of promoting a better Minecraft platform for everyone, contributors\nmay choose to release their code under the more permissive [MIT License](licenses/MIT.md).\n\nThe authors listed below have chosen to release their code under that more permissive\n[MIT License](licenses/MIT.md). Any contributor who wants their name added below\nshould submit a pull request to this project to add their name.\n\n```text\nZach Brown <1254957+zachbr@users.noreply.github.com>\nDaniel Ennis <aikar@aikar.co>\nRiley Park <rileysebastianpark@gmail.com>\nBlack Hole <black-hole@live.com>\nMark Vainomaa <mikroskeem@mikroskeem.eu>\nMystiflow <mystiflow@gmail.com>\nShane Freeder <theboyetronic@gmail.com>\nGabscap <git@gabscap.de>\nJadon Fowler <jadonflower@gmail.com>\nchickeneer <emcchickeneer@gmail.com>\nMinecrell <minecrell@minecrell.net>\nTechcable <Techcable@outlook.com>\nBillyGalbreath <blake.galbreath@gmail.com>\nMiniDigger | Martin <admin@minidigger.dev>\nBrokkonaut <hannos17@gmx.de>\nvemacs <d@nkmem.es>\nstonar96 <minecraft.stonar96@gmail.com>\nHugo Manrique <hugmanrique@gmail.com>\nwillies952002 <admin@domnian.com>\nMicleBrick <miclebrick@outlook.com>\nTrigary <trigary0@gmail.com>\nrickyboy320 <rickw320@hotmail.com>\nDoNotSpamPls <7570108+DoNotSpamPls@users.noreply.github.com>\nJosh Roy <10731363+JRoy@users.noreply.github.com>\nysl3000 <yannicklamprecht@live.de>\nMachine_Maker <machine@machinemaker.me>\nIvan Pekov <ivan@mrivanplays.com>\nCamotoy <20743703+Camotoy@users.noreply.github.com>\nBjarne Koll <git@lynxplay.dev>\nMeFisto94 <MeFisto94@users.noreply.github.com>\nOwen1212055 <23108066+Owen1212055@users.noreply.github.com>\nLemonCaramel <admin@caramel.moe>\nNoah van der Aa <ndvdaa@gmail.com>\nDoc <nachito94@msn.com>\nNick Hensel <nickhensel25@icloud.com>\nvytskalt <vytskalt@protonmail.com>\nTheFruxz <cedricspitzer@outlook.de>\nKieran Wallbanks <kieran.wallbanks@gmail.com>\nDenery <dorofeevij@gmail.com>\nJakubk15 <jakubk15@protonmail.com>\nRedned <redned235@gmail.com>\nLuke Chambers <consolelogluke@gmail.com>\nEmily <emilia.lopezf.1999@gmail.com>\ndawon <dawon@dawon.eu>\nOllie <69084614+olijeffers0n@users.noreply.github.com>\nOliwier Miodun <naczs@blueflow.pl>\naerulion <aerulion@gmail.com>\nLukas Planz <lukas.planz@web.de>\ngranny <contact@granny.dev>\nmja00 <me@mja00.dev>\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.435546875,
          "content": "Paper [![Paper Build Status](https://img.shields.io/github/actions/workflow/status/PaperMC/Paper/build.yml?branch=main)](https://github.com/PaperMC/Paper/actions)\n[![Discord](https://img.shields.io/discord/289587909051416579.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/papermc)\n[![GitHub Sponsors](https://img.shields.io/github/sponsors/papermc?label=GitHub%20Sponsors)](https://github.com/sponsors/PaperMC)\n[![Open Collective](https://img.shields.io/opencollective/all/papermc?label=OpenCollective%20Sponsors)](https://opencollective.com/papermc)\n===========\n\nThe most widely used, high-performance Minecraft server that aims to fix gameplay and mechanics inconsistencies.\n\n\n**Support and Project Discussion:**\n- [Our forums](https://forums.papermc.io/) or [Discord](https://discord.gg/papermc)\n\nHow To (Server Admins)\n------\nPaperclip is a jar file that you can download and run just like a normal jar file.\n\nDownload Paper from our [downloads page](https://papermc.io/downloads/paper).\n\nRun the Paperclip jar directly from your server. Just like old times\n\n* Documentation on using Paper: [docs.papermc.io](https://docs.papermc.io)\n* For a sneak peek at upcoming features, [see here](https://github.com/PaperMC/Paper/projects)\n\nHow To (Plugin Developers)\n------\n* See our API [here](paper-api)\n* See upcoming, pending, and recently added API [here](https://github.com/orgs/PaperMC/projects/2/views/4)\n* Paper API javadocs here: [papermc.io/javadocs](https://papermc.io/javadocs/)\n#### Repository (for paper-api)\n##### Maven\n\n```xml\n<repository>\n    <id>papermc</id>\n    <url>https://repo.papermc.io/repository/maven-public/</url>\n</repository>\n```\n\n```xml\n<dependency>\n    <groupId>io.papermc.paper</groupId>\n    <artifactId>paper-api</artifactId>\n    <version>1.21.4-R0.1-SNAPSHOT</version>\n    <scope>provided</scope>\n</dependency>\n```\n##### Gradle\n```kotlin\nrepositories {\n    maven {\n        url = uri(\"https://repo.papermc.io/repository/maven-public/\")\n    }\n}\n\ndependencies {\n    compileOnly(\"io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT\")\n}\n\njava {\n    toolchain.languageVersion.set(JavaLanguageVersion.of(21))\n}\n```\n\nHow To (Compiling Jar From Source)\n------\nTo compile Paper, you need JDK 21 and an internet connection.\n\nClone this repo, run `./gradlew applyPatches`, then `./gradlew createMojmapBundlerJar` from your terminal. You can find the compiled jar in the `paper-server/build/libs` directory.\n\nTo get a full list of tasks, run `./gradlew tasks`.\n\nHow To (Pull Request)\n------\nSee [Contributing](CONTRIBUTING.md)\n\nOld Versions (1.21.3 and below)\n------\nFor branches of versions 1.8-1.21.3, please see our [archive repository](https://github.com/PaperMC/Paper-archive).\n\nSupport Us\n------\nFirst of all, thank you for considering helping out, we really appreciate that!\n\nPaperMC has various recurring expenses, mostly related to infrastructure. Paper uses [Open Collective](https://opencollective.com/) via the [Open Source Collective fiscal host](https://opencollective.com/opensource) to manage expenses. Open Collective allows us to be extremely transparent, so you can always see how your donations are used. You can read more about financially supporting PaperMC [on our website](https://papermc.io/sponsors).\n\nYou can find our collective [here](https://opencollective.com/papermc), or you can donate via GitHub Sponsors [here](https://github.com/sponsors/PaperMC), which will also go towards the collective.\n\nSpecial Thanks To:\n-------------\n\n[![YourKit-Logo](https://www.yourkit.com/images/yklogo.png)](https://www.yourkit.com/)\n\n[YourKit](https://www.yourkit.com/), makers of the outstanding java profiler, support open source projects of all kinds with their full featured [Java](https://www.yourkit.com/java/profiler) and [.NET](https://www.yourkit.com/.net/profiler) application profilers. We thank them for granting Paper an OSS license so that we can make our software the best it can be.\n\n[<img src=\"https://user-images.githubusercontent.com/21148213/121807008-8ffc6700-cc52-11eb-96a7-2f6f260f8fda.png\" alt=\"\" width=\"150\">](https://www.jetbrains.com)\n\n[JetBrains](https://www.jetbrains.com/), creators of the IntelliJ IDEA, supports Paper with one of their [Open Source Licenses](https://www.jetbrains.com/opensource/). IntelliJ IDEA is the recommended IDE for working with Paper, and most of the Paper team uses it.\n\nAll our sponsors!  \n[![Sponsor Image](https://raw.githubusercontent.com/PaperMC/papermc.io/data/sponsors.png)](https://papermc.io/sponsors)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7138671875,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe generally only fully support the latest version, the same applies to exploits such as server crashes and item\nduplication bugs. In the transition period during larger Minecraft updates, we may still backport important fixes to the\nlast minor or major release.\n\n## Reporting a Vulnerability\n\nFor any issues that are NOT duplication bugs, server/client crashes, or otherwise serious exploits, please open an issue\nthrough the [Issues tab](https://github.com/PaperMC/Paper/issues).\nFor exploits, please [join our Discord](https://discord.gg/papermc) and see the [#paper-exploit-report channel](https://discord.com/channels/289587909051416579/1208749386348101682) for\nfurther instructions.\n"
        },
        {
          "name": "build-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 11.5771484375,
          "content": "import io.papermc.paperweight.util.*\nimport io.papermc.paperweight.util.constants.*\nimport org.gradle.api.tasks.testing.logging.TestExceptionFormat\nimport org.gradle.api.tasks.testing.logging.TestLogEvent\nimport java.io.IOException\nimport java.net.URI\nimport java.nio.file.FileVisitResult\nimport java.nio.file.Files\nimport java.nio.file.SimpleFileVisitor\nimport kotlin.io.path.*\nimport java.nio.file.Path\nimport kotlin.random.Random\n\nplugins {\n    id(\"io.papermc.paperweight.core\") version \"2.0.0-beta.13\" apply false\n}\n\nsubprojects {\n    apply(plugin = \"java-library\")\n    apply(plugin = \"maven-publish\")\n\n    extensions.configure<JavaPluginExtension> {\n        toolchain {\n            languageVersion = JavaLanguageVersion.of(21)\n        }\n    }\n\n    tasks.withType<AbstractArchiveTask>().configureEach {\n        isPreserveFileTimestamps = false\n        isReproducibleFileOrder = true\n    }\n}\n\nval paperMavenPublicUrl = \"https://repo.papermc.io/repository/maven-public/\"\n\nsubprojects {\n    tasks.withType<JavaCompile> {\n        options.encoding = Charsets.UTF_8.name()\n        options.release = 21\n        options.isFork = true\n    }\n    tasks.withType<Javadoc> {\n        options.encoding = Charsets.UTF_8.name()\n    }\n    tasks.withType<ProcessResources> {\n        filteringCharset = Charsets.UTF_8.name()\n    }\n    tasks.withType<Test> {\n        testLogging {\n            showStackTraces = true\n            exceptionFormat = TestExceptionFormat.FULL\n            events(TestLogEvent.STANDARD_OUT)\n        }\n    }\n\n    repositories {\n        mavenCentral()\n        maven(paperMavenPublicUrl)\n    }\n\n    extensions.configure<PublishingExtension> {\n        repositories {\n            maven(\"https://repo.papermc.io/repository/maven-snapshots/\") {\n                name = \"paperSnapshots\"\n                credentials(PasswordCredentials::class)\n            }\n        }\n    }\n}\n\ntasks.register(\"printMinecraftVersion\") {\n    val mcVersion = providers.gradleProperty(\"mcVersion\")\n    doLast {\n        println(mcVersion.get().trim())\n    }\n}\n\ntasks.register(\"printPaperVersion\") {\n    val paperVersion = provider { project.version }\n    doLast {\n        println(paperVersion.get())\n    }\n}\n\n/*\n// Used when updating to a new Minecraft version\ntasks.register(\"pickUpdateDirectory\") {\n    val issue = providers.gradleProperty(\"updateTaskListIssue\").get()\n    val patchesFolder = layout.projectDirectory.dir(\"paper-server/patches/\").convertToPath()\n    val storage = layout.cache.resolve(\"last-updating-folder\").also { it.parent.createDirectories() }\n\n    doLast {\n        val html = URI(issue).toURL().readText()\n\n        val beginMarker = \"```[tasklist]\"\n        val start = html.indexOf(beginMarker)\n        val end = html.indexOf(\"```\", start + beginMarker.length)\n        val taskList = html.substring(start + beginMarker.length, end)\n\n        // Extract all incomplete tasks and select a random one\n        val incompleteTasks = taskList.split(\"\\\\n\").filter { it.startsWith(\"- [ ]\") }.map { it.replace(\"- [ ] \", \"\") }\n        if (incompleteTasks.isEmpty()) {\n            error(\"No incomplete tasks found in the task list.\")\n        }\n\n        val next = incompleteTasks[Random.nextInt(incompleteTasks.size)]\n\n        println(\"checking out $next...\")\n        val dir = patchesFolder.resolve(\"unapplied\").resolve(next)\n        if (!dir.exists()) {\n            error(\"Unapplied patch folder $next does not exist, did someone else already check it out and forgot to mark it?\")\n        }\n        dir.listDirectoryEntries(\"*.patch\").forEach { patch ->\n            patch.copyTo(patchesFolder.resolve(\"sources\").resolve(next).resolve(patch.fileName).also { it.createDirectories() }, overwrite = true)\n            patch.deleteIfExists()\n        }\n        if (dir.listDirectoryEntries().isEmpty()) {\n            dir.deleteIfExists()\n        }\n\n        storage.writeText(next)\n        println(\"please tick the box in the issue: $issue\")\n        println(\"if you don't finish it, uncheck the task again after you commited\")\n    }\n}\n\ntasks.register(\"showUpdateDirectories\") {\n    val patchDir = layout.projectDirectory.dir(\"paper-server/patches/unapplied/\").convertToPath()\n\n    doLast {\n        Files.walkFileTree(patchDir, object : SimpleFileVisitor<Path>() {\n            override fun postVisitDirectory(dir: Path?, exc: IOException?): FileVisitResult {\n                dir?.takeIf { it.listDirectoryEntries(\"*.patch\").isNotEmpty() }?.let {\n                    println(\"- [ ] ${patchDir.relativize(it).pathString.replace(\"\\\\\", \"/\")}\")\n                }\n                return FileVisitResult.CONTINUE\n            }\n        })\n    }\n}\n\ntasks.register(\"moveUpdateDirectory\") {\n    notCompatibleWithConfigurationCache(\"This task is interactive\")\n    fun expandUserHome(path: String): Path {\n        return Path.of(path.replaceFirst(\"^~\".toRegex(), System.getProperty(\"user.home\")))\n    }\n\n    val input = providers.fileContents(layout.projectDirectory.file(\"$CACHE_PATH/last-updating-folder\")).asText.map { it.trim() }\n    val patchFolder = layout.projectDirectory.dir(\"paper-server/patches/sources\").dir(input)\n    val sourceFolder = layout.projectDirectory.dir(\"paper-server/src/minecraft/java\").dir(input)\n    val targetFolder = providers.gradleProperty(\"cleanPaperRepo\").map {\n        expandUserHome(it).resolve(input.get())\n    }\n\n    fun copy(back: Boolean = false) {\n        patchFolder.path.listDirectoryEntries().forEach {\n            val relative = patchFolder.path.relativize(it).toString().replace(\".patch\", \"\")\n            val source = sourceFolder.path.resolve(relative)\n            val target = targetFolder.get().resolve(relative)\n            if (target.isDirectory()) { return@forEach }\n            if (back) {\n                target.copyTo(source, overwrite = true)\n            } else {\n                source.copyTo(target, overwrite = true)\n            }\n        }\n    }\n\n    doLast {\n        if (!targetFolder.isPresent) {\n            error(\"cleanPaperRepo is required, define it in gradle.properties\")\n        }\n        copy()\n        val files = patchFolder.path.listDirectoryEntries().map { it.fileName.toString().replace(\".patch\", \"\") }\n        println(\"Copied $files from $sourceFolder to $targetFolder\")\n        println(\"Make the files compile, then press enter to copy them back!\")\n        System.`in`.read()\n        copy(back = true)\n        println(\"copied back!\")\n    }\n}\n\n// see gradle.properties\nif (providers.gradleProperty(\"updatingMinecraft\").getOrElse(\"false\").toBoolean()) {\n    tasks.collectAtsFromPatches {\n        val dir = layout.projectDirectory.dir(\"patches/unapplied/server\")\n        if (dir.path.isDirectory()) {\n            extraPatchDir = dir\n        }\n    }\n    tasks.withType<io.papermc.paperweight.tasks.RebuildGitPatches>().configureEach {\n        filterPatches = false\n    }\n    tasks.register(\"continueServerUpdate\", RebasePatches::class) {\n        description = \"Moves the next X patches from unapplied to applied, and applies them. X being the number of patches that apply cleanly, plus the terminal failure if any.\"\n        projectDir = project.projectDir\n        appliedPatches = file(\"patches/server\")\n        unappliedPatches = file(\"patches/unapplied/server\")\n        applyTaskName = \"applyServerPatches\"\n        patchedDir = \"Paper-Server\"\n    }\n}\n\n@UntrackedTask(because = \"Does not make sense to track state\")\nabstract class RebasePatches : BaseTask() {\n    @get:Internal\n    abstract val projectDir: DirectoryProperty\n\n    @get:InputFiles\n    abstract val appliedPatches: DirectoryProperty\n\n    @get:InputFiles\n    abstract val unappliedPatches: DirectoryProperty\n\n    @get:Input\n    abstract val applyTaskName: Property<String>\n\n    @get:Input\n    abstract val patchedDir: Property<String>\n\n    private fun unapplied(): List<Path> =\n        unappliedPatches.path.listDirectoryEntries(\"*.patch\").sortedBy { it.name }\n\n    private fun appliedLoc(patch: Path): Path = appliedPatches.path.resolve(unappliedPatches.path.relativize(patch))\n\n    companion object {\n        val regex = Pattern.compile(\"Patch failed at ([0-9]{4}) (.*)\")\n        val continuationRegex = Pattern.compile(\"^\\\\s{1}.+\\$\")\n        const val subjectPrefix = \"Subject: [PATCH] \"\n    }\n\n    @TaskAction\n    fun run() {\n        val patchedDirPath = projectDir.path.resolve(patchedDir.get())\n        if (patchedDirPath.isDirectory()) {\n            val status = Git(patchedDirPath)(\"status\").getText()\n            if (status.contains(\"You are in the middle of an am session.\")) {\n                throw PaperweightException(\"Cannot continue update when $patchedDirPath is in the middle of an am session.\")\n            }\n        }\n\n        val unapplied = unapplied()\n        for (patch in unapplied) {\n            patch.copyTo(appliedLoc(patch))\n        }\n\n        val out = ByteArrayOutputStream()\n        val proc = ProcessBuilder()\n            .directory(projectDir.path)\n            .command(\"./gradlew\", applyTaskName.get())\n            .redirectErrorStream(true)\n            .start()\n\n        val f = redirect(proc.inputStream, out)\n\n        val exit = proc.waitFor()\n        f.get()\n\n        if (exit != 0) {\n            val outStr = String(out.toByteArray())\n            val matcher = regex.matcher(outStr)\n            if (!matcher.find()) error(\"Could not determine failure point\")\n            val failedSubjectFragment = matcher.group(2)\n            val failed = unapplied.single { p ->\n                p.useLines { lines ->\n                    val collect = mutableListOf<String>()\n                    for (line in lines) {\n                        if (line.startsWith(subjectPrefix)) {\n                            collect += line\n                        } else if (collect.size == 1) {\n                            if (continuationRegex.matcher(line).matches()) {\n                                collect += line\n                            } else {\n                                break\n                            }\n                        }\n                    }\n                    val subjectLine = collect.joinToString(\"\").substringAfter(subjectPrefix)\n                    subjectLine.startsWith(failedSubjectFragment)\n                }\n            }\n\n            // delete successful & failure point from unapplied patches dir\n            for (path in unapplied) {\n                path.deleteIfExists()\n                if (path == failed) {\n                    break\n                }\n            }\n\n            // delete failed from patches dir\n            var started = false\n            for (path in unapplied) {\n                if (path == failed) {\n                    started = true\n                    continue\n                }\n                if (started) {\n                    appliedLoc(path).deleteIfExists()\n                }\n            }\n\n            // Delete the build file before resetting the AM session in case it has compilation errors\n            patchedDirPath.resolve(\"build.gradle.kts\").deleteIfExists()\n            // Apply again to reset the am session (so it ends on the failed patch, to allow us to rebuild after fixing it)\n            val apply2 = ProcessBuilder()\n                .directory(projectDir.path)\n                .command(\"./gradlew\", applyTaskName.get())\n                .redirectErrorStream(true)\n                .start()\n\n            val f1 = redirect(apply2.inputStream, System.out)\n            apply2.waitFor()\n            f1.get()\n\n            logger.lifecycle(outStr)\n            logger.lifecycle(\"Patch failed at $failed; See Git output above.\")\n        } else {\n            unapplied.forEach { it.deleteIfExists() }\n            logger.lifecycle(\"All patches applied!\")\n        }\n\n        val git = Git(projectDir.path)\n        git(\"add\", appliedPatches.path.toString() + \"/*\").runSilently()\n        git(\"add\", unappliedPatches.path.toString() + \"/*\").runSilently()\n    }\n}\n */\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.3125,
          "content": "group=io.papermc.paper\nversion=1.21.4-R0.1-SNAPSHOT\nmcVersion=1.21.4\n\n# Set to true while updating Minecraft version\nupdatingMinecraft=false\nupdateTaskListIssue=https://github.com/PaperMC/Paper/issues/11736\n\norg.gradle.configuration-cache=true\norg.gradle.caching=true\norg.gradle.parallel=true\norg.gradle.vfs.watch=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper-api-generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 1.697265625,
          "content": "import java.util.Locale\n\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        maven(\"https://repo.papermc.io/repository/maven-public/\")\n    }\n}\n\nplugins {\n    id(\"org.gradle.toolchains.foojay-resolver-convention\") version \"0.9.0\"\n}\n\nif (!file(\".git\").exists()) {\n    val errorText = \"\"\"\n        \n        =====================[ ERROR ]=====================\n         The Paper project directory is not a properly cloned Git repository.\n         \n         In order to build Paper from source you must clone\n         the Paper repository using Git, not download a code\n         zip from GitHub.\n         \n         Built Paper jars are available for download at\n         https://papermc.io/downloads/paper\n         \n         See https://github.com/PaperMC/Paper/blob/main/CONTRIBUTING.md\n         for further information on building and modifying Paper.\n        ===================================================\n    \"\"\".trimIndent()\n    error(errorText)\n}\n\nrootProject.name = \"paper\"\n\nfor (name in listOf(\"paper-api\", \"paper-server\")) {\n    val projName = name.lowercase(Locale.ENGLISH)\n    include(projName)\n    file(name).mkdirs()\n    findProject(\":$projName\")!!.projectDir = file(name)\n}\n\noptionalInclude(\"test-plugin\")\noptionalInclude(\"paper-api-generator\")\n\nfun optionalInclude(name: String, op: (ProjectDescriptor.() -> Unit)? = null) {\n    val settingsFile = file(\"$name.settings.gradle.kts\")\n    if (settingsFile.exists()) {\n        apply(from = settingsFile)\n        findProject(\":$name\")?.let { op?.invoke(it) }\n    } else {\n        settingsFile.writeText(\n            \"\"\"\n            // Uncomment to enable the '$name' project\n            // include(\":$name\")\n\n            \"\"\".trimIndent()\n        )\n    }\n}\n"
        },
        {
          "name": "test-plugin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}