{
  "metadata": {
    "timestamp": 1736708900323,
    "page": 134,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "realm/realm-java",
      "stars": 11477,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.884765625,
          "content": "# Gradle build artifacts\nbuild\nrealm/build\n!realm-transformer/src/main/kotlin/io/realm/transformer/build\n\n# Gradle cache\n.gradle\n\n# Gradle local properties\nlocal.properties\n\n# Core\ncore\ncore-*\nrealm-sync-android-*\n!realm/realm-library/src/main/java/io/realm/internal/core/\n\n# Android Studio\n.idea\n*.iml\n\n# DS_Store\n.DS_Store\n*/.DS_Store\n\n# JNI libs\nrealm_version_check.timestamp\n\n# Build artifacts\n*.so\n*.d\n*.o\n\n# Backup files\n*.bak\n*~\n\n# Navigation Editor\n.navigation\n\n# Distribution files\nrealm*.jar\nrealm*.aar\ndistribution/*/realm\ndistribution/javadoc\ndistribution/version.txt\ndistribution/RealmGridViewExample/app/src\ndistribution/RealmIntroExample/app/src\ndistribution/RealmMigrationExample/app/src\n\n# Generated JNI headers\nrealm/realm-library/src/main/cpp/jni_include\n# Downloaded core\nrealm/realm-library/distribution\n# Cmake output\nrealm/realm-library/.externalNativeBuild\nrealm/realm-library/.cxx\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1533203125,
          "content": "[submodule \"realm/realm-library/src/main/cpp/realm-core\"]\n\tpath = realm/realm-library/src/main/cpp/realm-core\n\turl = https://github.com/realm/realm-core.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 225.478515625,
          "content": "## 11.0.0 (2024-09-DD)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* None.\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated links to new documentation URL.\n\n\n## 10.19.0 (2024-09-13)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* Use 16 KB ELF packaging for native artifacts produced by `realm-library`, allowing them to be loaded on devices with 16 KB memory page sizes. (Issue [#7894](https://github.com/realm/realm-java/issues/7894))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated links to new documentation URL.\n\n\n## 10.18.0 (2024-02-06)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* None.\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated to Realm Core 13.26.0, commit 5533505d18fda93a7a971d58a191db5005583c92.\n* Updated to CMake 3.27.7.\n\n\n## 10.17.0 (2023-10-13)\n\nThis release upgrades the Sync metadata in a way that is not compatible with older versions. To downgrade a Sync app from this version, you'll need to manually delete the metadata folder located at $[SYNC-ROOT-DIRECTORY]/mongodb-realm/[APP-ID]/server-utility/metadata/. This will log out all users.\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* [RealmApp] Simplified the number of error codes in `ErrorCode`. A number of enum entries have been deprecated. (Issue [#7837](https://github.com/realm/realm-java/pull/7837)).\n\n### Fixed\n* Rare corruption causing 'Invalid streaming format cookie'-exception. Typically following compact, convert or copying to a new file. (Issue [#7775](https://github.com/realm/realm-java/issues/7775), since v10.13.0 (Core v12.12.0))\n* [RealmApp] Crash when opening a Realm with a proxy enabled. (Issue [#7828](https://github.com/realm/realm-java/issues/7828))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated to Realm Core 13.23.0, commit 5abbf7f10fb3ef6bd622877cc840ada804bccb89.\n\n\n## 10.16.2 (2023-10-12)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* Realm objects accessors behave as an unmanaged object after an incremental build. (Issue [#7844](https://github.com/realm/realm-java/pull/7844))\n* [RealmApp] Crash when opening a Realm with a proxy enabled. (Issue [#7828](https://github.com/realm/realm-java/issues/7828))\n* [RealmApp] It was possible to create a `User` object with invalid state that would throw a `NullPointerException` when accessed. (Issue [#7847](https://github.com/realm/realm-java/issues/7847))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* None.\n\n\n## 10.16.1 (2023-06-26)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] Sync errors could return the error code UNKNOWN instead of the actual error code. (Issue [#7823](https://github.com/realm/realm-java/issues/7823))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* None.\n\n\n## 10.16.0 (2023-06-02)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* Add support for sorting query results on dictionary values through `RealmQuery.rawPredicate(\"<PREDICATE> SORT(<DICTIONARY-PROPERTY>['<DICTIONARY-KEY>'] <ORDER>)\")` (Issue [#7817](https://github.com/realm/realm-java/issues/7817)).\n* Improve performance of equality queries on a non-indexed mixed property by about 30%. (Core Issue [#6506](https://github.com/realm/realm-core/issues/6506))\n* [RealmApp] Support for migrating from Partition-based to Flexible Sync automatically on the device if the server has migrated to Flexible Sync. (Core Issue [#6554](https://github.com/realm/realm-core/issues/6554))\n\n### Fixed\n* Add support for incremental builds on the bytecode transformation with the new AGP transform API. Incremental builds can be disabled by setting the gradle property `io.realm.disableIncrementalBuilds` to `true`. (Issue [#7802](https://github.com/realm/realm-java/issues/7802))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated to Realm Core 13.13.0, commit 79183be6417821431fff44a6d416a68664957c66.\n\n\n## 10.15.1 (2023-05-20)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* Building with Realm on Java 17 would fail with `java.lang.IllegalAccessError: class io.realm.processor.Utils (in unnamed module @0x5316ec7f) cannot access class com.sun.tools.javac.code.Symbol$ClassSymbol`. (Issue [#7799](https://github.com/realm/realm-java/issues/7799))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* Updated to Google Compile Testing 0.21.0.\n* Updated Annotation Processor to use Java 11 reflection API's.\n\n\n## 10.15.0 (2023-04-19)\n\n### Breaking Changes\n* Minimum version of Android Gradle Plugin has been raised to 7.4.\n* Minimum version of Java has been raised to 11.\n* Minimum supported version of Gradle has been raised to 7.5.\n\n### Enhancements\n* None.\n\n### Fixed\n* Building with Realm on Java 17 would fail with `java.lang.IllegalAccessError: class io.realm.processor.Utils (in unnamed module @0x5316ec7f) cannot access class com.sun.tools.javac.code.Symbol$ClassSymbol`. (Issue [#7799](https://github.com/realm/realm-java/issues/7799))\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 13.0.0 or above is required to open Realms created by this version.\n* Gradle 7.5 and above.\n* Android Gradle Plugin 7.4.0 and above.\n\n### Internal\n* None.\n\n\n## 10.14.0-transformer-api (2023-04-14)\n\nThis release will bump the Realm file format from version 22 to 23. Opening a file with an older format will automatically upgrade it. Downgrading to a previous file format is not possible.\n\n### Breaking Changes\n* [RealmApp] As a result of a refactor on the some error codes and categories have been deleted and new ones have been added, see PR for more details. ([#7760](https://github.com/realm/realm-java/pull/7760))\n\n### Enhancements\n* Updated OpenSSL from 1.1.1n to 3.0.8.\n* Realm will now use a lot less memory and disk space when different versions of realm objects are used. (Core Issue [#5440](https://github.com/realm/realm-core/issues/5440))\n* Realm will now use a lot less memory and disk space when different versions of realm objects are used. (Core Issue [#5440](https://github.com/realm/realm-core/issues/5440))\n* Realm will now continuously track and reduce the size of the Realm file when it is in use rather that only when opening the file with Configuration.compactOnLaunch enabled. (Core Issue [#5754](https://github.com/realm/realm-core/issues/5754))\n* Multiple processes can now access the same encrypted Realm instead of throwing `Encrypted interprocess sharing is currently unsupported`. (Core Issue [#1845](https://github.com/realm/realm-core/issues/1845))\n\n### Fixed\n* Set<Mixed> consider string and binary data equivalent. This could cause the client to be inconsistent with the server if a string and some binary data with equivalent content was inserted from Atlas. ([#4860](https://github.com/realm/realm-core/issues/4860), since v11.0.0)\n* Fixed wrong assertion on query error that could result in a crash. ([#6038](https://github.com/realm/realm-core/issues/6038), since v11.7.0)\n* Fixed a bug that would result in `RealmDictionary` not being able to find `double` values due not taking the precision of the input parameter into consideration when using `RealmDictionary.contains`.\n* Not possible to open an encrypted file on a device with a page size bigger than the one on which the file was produced. ([#8030](https://github.com/realm/realm-swift/issues/8030), since v12.11.0)\n* Fix no notification for write transaction that contains only change to backlink property. ([#4994](https://github.com/realm/realm-core/issues/4994), since v11.4.1)\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 13.9.0, commit 063927de66f79a0afffbbe36c0bb14d27deba8f2.\n\n\n## 10.14.0 (2023-04-13)\n\nThis release will bump the Realm file format from version 22 to 23. Opening a file with an older format will automatically upgrade it. Downgrading to a previous file format is not possible.\n\n### Breaking Changes\n* [RealmApp] As a result of a refactor on the some error codes and categories have been deleted and new ones have been added, see PR for more details. ([#7760](https://github.com/realm/realm-java/pull/7760))\n\n### Enhancements\n* Updated OpenSSL from 1.1.1n to 3.0.8.\n* Realm will now use a lot less memory and disk space when different versions of realm objects are used. (Core Issue [#5440](https://github.com/realm/realm-core/issues/5440))\n* Realm will now continuously track and reduce the size of the Realm file when it is in use rather that only when opening the file with Configuration.compactOnLaunch enabled. (Core Issue [#5754](https://github.com/realm/realm-core/issues/5754))\n* Multiple processes can now access the same encrypted Realm instead of throwing `Encrypted interprocess sharing is currently unsupported`. (Core Issue [#1845](https://github.com/realm/realm-core/issues/1845))\n\n### Fixed\n* Set<Mixed> consider string and binary data equivalent. This could cause the client to be inconsistent with the server if a string and some binary data with equivalent content was inserted from Atlas. ([#4860](https://github.com/realm/realm-core/issues/4860), since v11.0.0)\n* Fixed wrong assertion on query error that could result in a crash. ([#6038](https://github.com/realm/realm-core/issues/6038), since v11.7.0)\n* Fixed a bug that would result in `RealmDictionary` not being able to find `double` values due not taking the precision of the input parameter into consideration when using `RealmDictionary.contains`.\n* Not possible to open an encrypted file on a device with a page size bigger than the one on which the file was produced. ([#8030](https://github.com/realm/realm-swift/issues/8030), since v12.11.0)\n* Fix no notification for write transaction that contains only change to backlink property. ([#4994](https://github.com/realm/realm-core/issues/4994), since v11.4.1)\n\n### Compatibility\n* File format: Generates Realms with format v23. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 13.9.0, commit 063927de66f79a0afffbbe36c0bb14d27deba8f2.\n\n\n## 10.13.3-transformer-api (2023-03-16)\n\n### Enhancements\n* None.\n\n### Fixed\n* Added support for automatic handling of orphan embedded objects after migrating regular object properties to become embedded objects. (Issue [#7769](https://github.com/realm/realm-java/issues/7769)).\n* Unit tests not being executed. (Issue [#7771](https://github.com/realm/realm-java/issues/7771))\n* Instrumented unit tests failed to execute because of the Realm dependencies being missing. (Issue [#7736](https://github.com/realm/realm-java/issues/7736))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* None.\n\n\n## 10.13.2-transformer-api (2023-01-27)\n\n### Enhancements\n* None.\n\n### Fixed\n* Fix zip path separator for transformer on Windows (Issue [#7757](https://github.com/realm/realm-java/issues/7757))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* None.\n\n\n## 10.13.1-transformer-api (2023-01-16)\n\n### Enhancements\n* None.\n\n### Fixed\n* Add support for Gradle configuration cache. (Issue [#7299](https://github.com/realm/realm-java/issues/7299))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* None.\n\n### Credits\n* Thanks to @pstavytskyi-turo for adding support for Gradle configuration cache. (Issue [#7299](https://github.com/realm/realm-java/issues/7299))\n\n\n## 10.13.1 (2023-03-16)\n\n### Enhancements\n* None.\n\n### Fixed\n* Added support for automatic handling of orphan embedded objects after migrating regular object properties to become embedded objects. (Issue [#7769](https://github.com/realm/realm-java/issues/7769)).\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* None.\n\n\n## 10.13.0-transformer-api (2012-12-12)\n\n### Enhancements\n* [RealmApp] Added option for working with Device Sync from an internal network. `SyncConfiguration.trustedRootCA(assetPath)` can embed a custom certificate in the app that will be used by Sync. (Issue [#7739](https://github.com/realm/realm-java/pull/7739)).\n* [RealmApp] Added option for working with Device Sync from an internal network. `SyncConfiguration.disableSSLVerification()` makes it possible to turn off local SSL validation. (Issue [#7739](https://github.com/realm/realm-java/pull/7739)).\n\n### Fixed\n* Fixed database corruption and encryption issues on apple platforms. (Issue [#5076](https://github.com/realm/realm-js/issues/5076))\n* [Sync] Bootstraps will not be applied in a single write transaction - they will be applied 1MB of changesets at a time. (Issue [#5999](https://github.com/realm/realm-core/pull/5999)).\n* [Sync] Fixed a race condition which could result in operation cancelled errors being delivered to `Realm.open` rather than the actual sync error which caused things to fail. (Issue [#5968](https://github.com/realm/realm-core/pull/5968)).\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 12.13.0, commit b77443ca7fa25407869ca537bf3ae912b1427bff.\n\n\n## 10.13.0 (2022-12-05)\n\n### Enhancements\n* [RealmApp] Added option for working with Device Sync from an internal network. `SyncConfiguration.trustedRootCA(assetPath)` can embed a custom certificate in the app that will be used by Sync. (Issue [#7739](https://github.com/realm/realm-java/pull/7739)).\n* [RealmApp] Added option for working with Device Sync from an internal network. `SyncConfiguration.disableSSLVerification()` makes it possible to turn off local SSL validation. (Issue [#7739](https://github.com/realm/realm-java/pull/7739)).\n\n### Fixed\n* Fixed database corruption and encryption issues on apple platforms. (Issue [#5076](https://github.com/realm/realm-js/issues/5076))\n* [Sync] Bootstraps will not be applied in a single write transaction - they will be applied 1MB of changesets at a time. (Issue [#5999](https://github.com/realm/realm-core/pull/5999)).\n* [Sync] Fixed a race condition which could result in operation cancelled errors being delivered to `Realm.open` rather than the actual sync error which caused things to fail. (Issue [#5968](https://github.com/realm/realm-core/pull/5968)).\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 12.13.0, commit b77443ca7fa25407869ca537bf3ae912b1427bff.\n\n\n## 10.12.0-transformer-api (2022-09-28)\n\n### Breaking Changes\n* Only works with Android Gradle Plugin 7.4 or newer. (Issue [#7714](https://github.com/realm/realm-java/issues/7714))\n\n### Enhancements\n* [RealmApp] Introduced `SyncSession.RecoverOrDiscardUnsyncedChangesStrategy`, an alternative automatic client reset strategy that tries to automatically recover any unsynced data from the client, and discards any unsynced data if not possible. This is now the default client reset policy if not explicitly set in the `SyncConfiguration`.\n* [RealmApp] Introduced `SyncSession.RecoverUnsyncedChangesStrategy`, an alternative automatic client reset strategy that tries to automatically recover any unsynced data from the client and will revert to manual client reset if not possible.\n* [RealmApp] Flexible sync client reset is no longer limited to `ManuallyRecoverChangesStrategy`, it now supports all available strategies: `RecoverOrDiscardUnsyncedChangesStrategy`, `RecoverUnsyncedChangesStrategy`, `DiscardUnsyncedChangesStrategy` and `ManuallyRecoverChangesStrategy`.\n\n### Fixed\n* Now queries can point to fields with query language-reserved words like 'desc', 'sort', 'distinct', etc. Issue [#7705](https://github.com/realm/realm-java/issues/7705)\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Update to Realm Core 12.6.0, commit: 5da7744b4056ad185c025bccf0924f17f73f7a91.\n\n\n## 10.12.0 (2022-09-22)\n\n### Enhancements\n* [RealmApp] Introduced `SyncSession.RecoverOrDiscardUnsyncedChangesStrategy`, an alternative automatic client reset strategy that tries to automatically recover any unsynced data from the client, and discards any unsynced data if not possible. This is now the default client reset policy if not explicitly set in the `SyncConfiguration`.\n* [RealmApp] Introduced `SyncSession.RecoverUnsyncedChangesStrategy`, an alternative automatic client reset strategy that tries to automatically recover any unsynced data from the client and will revert to manual client reset if not possible.\n* [RealmApp] Flexible sync client reset is no longer limited to `ManuallyRecoverChangesStrategy`, it now supports all available strategies: `RecoverOrDiscardUnsyncedChangesStrategy`, `RecoverUnsyncedChangesStrategy`, `DiscardUnsyncedChangesStrategy` and `ManuallyRecoverChangesStrategy`.\n\n### Fixed\n* Now queries can point to fields with query language-reserved words like 'desc', 'sort', 'distinct', etc. Issue [#7705](https://github.com/realm/realm-java/issues/7705)\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Update to Realm Core 12.6.0, commit: 5da7744b4056ad185c025bccf0924f17f73f7a91.\n\n\n## 10.11.1 (2022-07-14)\n\n### Enhancements\n* None\n\n### Fixed\n* Fixed deadlock while trying to close all Realm instances during a manual client reset. Issue [#7696](https://github.com/realm/realm-java/pull/7696))\n* [RealmApp] Throw RuntimeException if subscription set is requested and flexible sync is not enabled. (Realm Core issue [#5079](https://github.com/realm/realm-core/issues/5079))\n* Adding an object to a Set, deleting the parent object, and then deleting the previously mentioned object causes crash. (Realm Core issue [#5387](https://github.com/realm/realm-core/issues/5387), since 11.0.0)\n* [RealmApp] The sync client may have sent a corrupted upload cursor leading to a fatal error from the server due to an uninitialized variable. ([#5460](https://github.com/realm/realm-core/pull/5460, since v11.14.0)\n* [RealmApp] Flexible sync would not correctly resume syncing if a bootstrap was interrupted. ([#5466](https://github.com/realm/realm-core/pull/5466, since v11.8.0)\n* [RealmApp] Flexible sync subscription state changes will now correctly be reported after sync progress is reported. ([#5553](https://github.com/realm/realm-core/pull/5553, since v12.0.0)\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Update to Realm Core 12.3.0, commit: 55a48c287b5e3a8ca129c257ec7e3b92bcb2a05f.\n\n\n## 10.11.0 (2022-05-20)\n\n### Enhancements\n* Throw a more comprehensive error when initializing Realm on an Instant App.\n\n### Fixed\n* Fixed various corruption bugs when encryption is used. (Realm Core issue [#5360](https://github.com/realm/realm-core/issues/5360), since 10.10.0)\n* Fixed imprecise conversion from double/float to Decimal128. (Realm Core issue [#5191](https://github.com/realm/realm-core/pull/5191))\n* Fixed `RealmQuery.distinct` when it receives three or more arguments. (Issue [#7639](https://github.com/realm/realm-java/pull/7639))\n* Fix issues resolving class information for `copyToRealmOrUpdate` for already managed objects in multi module projects. (Issue [#7650](https://github.com/realm/realm-java/issues/7650))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Update to Realm Core 11.14.0, commit: db7ca86cf7ff8c9c3da6c7e742ecd46315ddc280.\n\n### Credits\n* Thanks to @Mr4Mike4 for fixing `RealmQuery.distinct` when it receives three or more arguments ([#7639](https://github.com/realm/realm-java/pull/7639)).\n* Thanks to @Waboodoo for fixing some typos ([#7646](https://github.com/realm/realm-java/pull/7646)).\n* Thanks to @ZherebtsovAlexandr for updating the use of the deprecated method `offer` to `trySend` ([#7648](https://github.com/realm/realm-java/pull/7648)).\n\n\n## 10.10.1 (2022-01-26)\n\n### Enhancements\n* [RealmApp] Add support for setting the filename on Flexible and Partition Sync configurations.\n\n### Fixed\n* [RealmApp] Creating multiple anonymous subscriptions for a Realm would throw an exception.\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Android Gradle Plugin 7.1.0\n* Updated to Gradle 7.3.3.\n\n\n## 10.10.0 (2022-01-18)\n\n### Enhancements\n* [RealmApp] Add support for a new mode for synchronized realms: Flexible Sync that only synchronizes selective parts of the backend data. The following classes have been added to support this: `Subscription`, `SubscriptionSet` and `MutableSubscriptionSet`. This mode and all APIs are marked as Beta.\n\n### Fixed\n* [RealmApp] The sync client will now drain the receive queue when send fails with ECONNRESET - ensuring that any error message from the server gets received and processed. (Realm Core issue [#5078](https://github.com/realm/realm-core/pull/5078))\n* [RealmApp] UserIdentity metadata table grows indefinitely. (Realm Core issue [#5152](https://github.com/realm/realm-core/issues/5152))\n* Schema validation was missing for embedded objects in sets, resulting in an unhelpful error being thrown if the user attempted to define one.\n* Output from the annotation processor was not deterministic, which could result in cache misses. (Issue [#7615](https://github.com/realm/realm-java/issues/7615))\n* Crashes when using `RealmAny` inside `RealmList` on ARM 32 devices. (Issue [#7626](https://github.com/realm/realm-java/issues/7626))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Update to Realm Core 11.9.0, commit: 733f12702d16ab0d0c7fea0831a2aee5ca5c26db.\n\n### Credits\n* Thanks to @jprinet for making the annotation processor output deterministic.\n\n\n## 10.9.0 (2021-12-06)\n\n### Enhancements\n* [RealmApp] Add support for UUID's as partition values. (Issue [#7598](https://github.com/realm/realm-java/issues/7598))\n* [RealmApp] Reduced native memory usage when working with synchronized Realms.\n* [RealmApp] Make it possible to bundle synchronized Realms in apps using `Realm.writeCopyTo()` and `SyncConfiguration.Builder.assetFile()`.\n* The Realm Transformer and Realm Gradle Plugin now supports the Gradle Configuration Cache. (Issue [#7299](https://github.com/realm/realm-java/issues/7299))\n* [RealmApp] Introduced `SyncSession.DiscardUnsyncedChangesStrategy`, an alternative automatic client reset strategy that doesn't require the Realm to be closed, but discards any unsynced data from the client. This is now the default policy if not overridden.\n\n### Deprecated\n* [RealmApp] `SyncSession.ClientResetHandler()`. Use `SyncSession.ManuallyRecoverUnsyncedChangesStrategy()` instead.\n* [RealmApp] `AppConfiguration.Builder.defaultClientResetHandler()`. Use `AppConfiguration.Builder.setDefaultSyncClientResetStrategy()` instead.\n* [RealmApp] `AppConfiguration.getDefaultClientResetHandler()`. Use `AppConfiguration.getDefaultSyncClientResetStrategy()` instead.\n* [RealmApp] `SyncConfiguration.Builder.clientResetHandler()`. Use `SyncConfiguration.Builder.setSyncClientResetStrategy()` instead.\n* [RealmApp] `SyncConfiguration.getClientResetHandler()`. Use `SyncConfiguration.getSyncClientResetStrategy()` instead.\n\n### Fixed\n* [RealmApp] Setting `AppConfiguration.syncRootDirectory()` didn't have any effect beside creating the new folder. Realms were still placed in the default location.\n* [RealmApp] Bug where progress notifiers continue to be called after the download of a synced realm is complete. (Issue [Realm Core #4919](https://github.com/realm/realm-core/issues/4919))\n* [RealmApp] User being left in the logged in state when the user's refresh token expires. (Issue [Realm Core #4882](https://github.com/realm/realm-core/issues/4882), since v10)\n* Using \"sort\", \"distinct\", or \"limit\" as field name in query expression would cause an \"Invalid predicate\" error. (Issue [#7545](), since v10.X.X)\n* Crash when quering with 'Not()' followed by empty group. (Issue [Realm Core #4168]() since v1.0.0)\n* Streaming download notifiers reported incorrect values for transferrable bytes. (Issue [Realm Core #5008]() since v11.5.2)\n* `@sum` and `@avg` queries on Dictionaries of floats or doubles used too much precision for intermediates, resulting in incorrect rounding.\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.7.0, commit: 81eafa44879eb5f5829b345005abf99adb306133.\n* Building the SDK now requires JDK 11.\n* Updated to Gradle 7.2.\n* Updated to Android Gradle Plugin 7.1.0-beta03.\n* Updated to Kotlin 1.5.31.\n* Updated to Kotlin Coroutines 1.5.2.\n* Updated to CMake 3.21.4.\n* Updated to NDK 23.1.7779620.\n* Disable analytics for any value of the `REALM_DISABLE_ANALYTICS` environment variable, not just `true`.\n* Disable analytics whenever the `CI` environment variable is set.\n\n\n## 10.8.1 (2021-10-28)\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] Failing to refresh the access token due to a 401/403 error will now correctly emit an error with `ErrorCode.BAD_AUTHENTICATION` rather than `ErrorCode.PERMISSION_DENIED`. (Realm Core [#4881](https://github.com/realm/realm-core/issues/4881), since 10.6.1)\n* [RealmApp] If an object with a null primary key was deleted by another sync client, the exception `KeyNotFound: No such object` could be triggered. ([Realm Core #4885](https://github.com/realm/realm-core/issues/4885), since 10.0.0)\n* Exceptions inside change listeners running on background looper threads would crash the Looper with a native `JNI DETECTED ERROR IN APPLICATION: JNI NewLocalRef called with pending exception` instead of the original Java exception. This could also happen when canceling a corutine using a background looper as a Dispatcher.\n* [RealmApp] Reduced native memory use when synchronizing changes with the server in the background.\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.4.1, commit: 23f60515a00f076a9e3f2dc672fe1ae07601ee90.\n\n\n## 10.8.0 (2021-08-27)\n\n### Enhancements\n* [RealmApp] `ErrorCode.INVALID_EMAIL_PASSWORD` has been added, and is now thrown instead of `ErrorCode.SERVICE_UNKNOWN` when loggin in with the wrong credentials.\n* `RealmQuery.rawPredicate()` now accepts a \"BETWEEN\" operator. Can be used like \"age BETWEEN {20, 60}\" which means \"'Age' must be in the open interval ]20;60[\".\n* [RealmApp] Added `User.remove()` and `User.removeAsync()` that makes it possible to delete a user's Realm(s) from the device.\n\n### Fixed\n* [RealmApp] Crash when integrating a schema from the server with a `RealmAny` property to a Realm File that already had that property defined locally. ([Realm Core #4873](https://github.com/realm/realm-core/issues/4873), since 10.0.0)\n* [RealmApp] Refreshing the access token after 30 minutes would fail silently, causing infinite retries every 10 seconds. This would also block opening Realms when opening an app with an already logged in user. (Issue [#7501](https://github.com/realm/realm-java/issues/7501), since 10.0.0)\n* [RealmApp] Clarified Javadoc for `User.logOut()` and `User.logOutAsync()` as these methods do not delete a user's Realm(s).\n* Build error when having cross module model references (Issue [#7474](https://github.com/realm/realm-java/issues/7474), since v10.4.0)\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.3.0, commit: 321c79a67119db8177af13eefd5378586648ba73.\n\n\n## 10.7.1 (2021-08-03)\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] Crash when an object which is linked to by a `RealmAny` is invalidated (Sync only). ([Realm Core #4828](https://github.com/realm/realm-core/issues/4828), since v10.6.0)\n* Object change listeners did not handle the object being deleted properly, which could result in assertion failures mentioning \"m_table\" in ObjectNotifier ([Realm Core #4824](https://github.com/realm/realm-core/issues/4824), since v10.6.0).\n* Crash when delivering notifications over a nested hierarchy of lists of `RealmAny` that contain object references. ([Realm Core #4803](https://github.com/realm/realm-core/issues/4803), since v10.6.0)\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.2.0, commit: 583fc73040709383470797813096bee17802398e.\n\n\n## 10.7.0 (2021-07-27)\n\n### Breaking Changes\n* Removed automatic injection of repositories from Gradle plugin. From now on `mavenCentral()` repository needs to be added manually. (Issue [#7365](https://github.com/realm/realm-java/issues/7365))\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] Realm.getInstanceAsync does not wait for the initial remote data. (Issue [#7517](https://github.com/realm/realm-java/issues/7517))\n* Build errors when doing incremental builds with Android Studio's _Apply Changes..._-actions. (Issue [#7473](https://github.com/realm/realm-java/issues/7473))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.1.1, commit: 71db56caba8f8ef0398eedfffb82a908cb94ccec.\n\n\n## 10.6.1 (2021-07-01)\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] Configuring HTTP timeout through `AppConfiguration.Builder.requestTimeout()` did not work correctly. (Issue [#7455](https://github.com/realm/realm-java/issues/7455))\n* [RealmApp] A recursive loop that would eventually crash trying to refresh a user app token when it had been revoked by an admin. Now this situation logs the user out and reports an error. (Issue [#7501](https://github.com/realm/realm-java/issues/7501))\n* An endless recursive loop that could cause a stack overflow when computing changes on a set of objects which contained cycles. (Realm Core Issue [#4767](https://github.com/realm/realm-core/issues/4767))\n* Opening cached Realms no longer trigger `android.os.strictmode.DiskReadViolation`. (Issue [#7500](https://github.com/realm/realm-java/issues/7500]))\n* `NullPointerException` was thrown instead of `IllegalStateException` when calling `Realm.executeTransaction()` on a closed Realm. (Issue [#7511](https://github.com/realm/realm-java/issues/7511), since 10.0.0)\n* `RealmDictionary` did not handle hash collisions correctly. (Realm Core issue [#4776](https://github.com/realm/realm-core/issues/4767))\n* Crash after clearing a List or Set of `RealmAny` containing references to objects (Realm Core issue [#4774](https://github.com/realm/realm-core/issues/4774))\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.0.4, commit: 44304ce6104c4a9fc7e2359990c75be3b867b8fe.\n\n\n## 10.6.0 (2021-06-15)\n\nThis release combines all changes from 10.6.0-BETA.1 and 10.6.0-BETA.2.\n\n### Breaking Changes\n* [RealmApp] Sync protocol version increased to 3. This version adds support for the new data types introduced in file format version 21.\n* Primary keys now have automatic indexes again. Indexes was removed in v10.0.0 because they were not needed, but it caused issues when upgrading from a pre v10 version of Realm, and in some cases resulted in large delays when upgrading the fileformat. (Issue [#7426](https://github.com/realm/realm-java/issues/7426), since 10.0.0).\n* Queries no longer do nullability checks on non-nullable fields, so using `null` as an argument will not throw an `IllegalArgumentException`.\n* String query filters `contains`, `beginsWith`, `endsWith`, and `like`, now throw a null pointer exception on null values.\n* The query builder no longer throw `IllegalStateException` but `IllegalArgumentException`.\n* The `distinct` query filter on unsupported fields no longer throws an exception when applied through when querying across relationships.\n* The `distinct` query filter no longer throws an exception when applied on non-existent fields.\n* `RealmFieldType` has been updated to account for the new types being added.\n\n### Enhancements\n* Added support for `java.util.UUID` as supported field in model classes.\n* Added support for `java.util.UUID` as a primary key.\n* Added support for `RealmAny` as supported field in model classes. A `RealmAny` is used to represent a polymorphic Realm value or Realm Object, is indexable but cannot be used as a primary key. See [Javadoc for RealmAny](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmAny.html).\n* Added support for `RealmDictionary` as supported field in model classes. A `RealmDictionary` is a `Map` of strings to values - all types under the `RealmAny` umbrella can be used as values. See [Javadoc for RealmDictionary](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmDictionary.html) and [Javadoc for RealmMap](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmMap.html). `RealmDictionary` is not yet supported by any of the `Realm.insert` and `Realm.createFromJson` methods - This support will be added in a future release.\n* Added support for `RealmSet` as supported field in model classes. A `RealmSet` is a collection that implements the Java `Set` interface and contains no duplicate values - all types under the `RealmAny` umbrella can be used as values. See [Javadoc for RealmSet](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmSet.html). `RealmSet` is not yet supported by any of the `Realm.insert` and `Realm.createFromJson` methods - This support will be added in a future release.\n* Allow UTF8 encoded characters in property names in string-based queries ([#4467](https://github.com/realm/realm-core/issues/4467))\n* The error message when the initial steps of opening a Realm file fails is now more descriptive.\n* Make conversion of Decimal128 to/from string work for numbers with more than 19 significant digits. ([#4548](https://github.com/realm/realm-core/issues/4548))\n* Remove type coercion on bool and ObjectId when doing queries.\n* Allow passing arguments into string-based query predicates.\n* Queries across relationships now support the `between` operator.\n* Queries on numerical fields (byte, short, int, long, float, double, decimal128) now accept any numerical value as an argument.\n* `isEmpty` query filter can now be applied on `RealmList` and `RealmObject` fields.\n\n### Fixed\n* Fix assertion failures such as \"!m_notifier_skip_version.version\" or \"m_notifier_sg->get_version() + 1 == new_version.version\" when performing writes inside change notification callbacks. Previously refreshing the Realm by beginning a write transaction would skip delivering notifications, leaving things in an inconsistent state. Notifications are now delivered recursively when needed instead. ([Cocoa #7165](https://github.com/realm/realm-cocoa/issues/7165)).\n* Fixed name aliasing not working in sort/distinct clauses when doing string-based queries. ([#4550](https://github.com/realm/realm-core/issues/4550), never before working).\n* Potential/unconfirmed fix for crashes associated with failure to memory map (low on memory, low on virtual address space). For example ([#4514](https://github.com/realm/realm-core/issues/4514)).\n* Syncing large Decimal128 values will cause \"Assertion failed: cx.w[1] == 0\" ([#4519](https://github.com/realm/realm-core/issues/4519), since v10.0.0)\n* Classes names \"class_class_...\" were not handled correctly when doing queries ([#4480](https://github.com/realm/realm-core/issues/4480))\n* Fix collection notification reporting for modifications. This could be observed by receiving the wrong indices of modifications on sorted or distinct results, or notification blocks sometimes not being called when only modifications have occurred. ([#4573](https://github.com/realm/realm-core/pull/4573) since v6).\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.0.3, commit de25ad9db783f931e7652d5c1431d5610b2ad67b.\n\n\n## 10.6.0-BETA.2 (2021-06-14)\n\n### Breaking Changes\n* `MapChangeSet.getDeletionsCount()` has been replaced with `MapChangeSet.getDeletions()` that return the keys for entries that has been deleted instead of just the number of deleted entries.\n* Primary keys now have automatic indexes again. Indexes was removed in v10.0.0 because they were not needed, but it caused issues when upgrading from a pre v10 version of Realm, and in some cases resulted in large delays when upgrading the fileformat. (Issue [#7426](https://github.com/realm/realm-java/issues/7426), since 10.0.0).\n\n### Enhancements\n* Allow `insert` and `insertOrUpdate` operations on `RealmObject` or `RealmObject` collections containing `RealmDictionary` or `RealmSet` fields.\n* Added support for `RealmDictionary` in `DynamicRealmObject` with `setDictionary(String fieldName, RealmDictionary<?> dictionary)`, `getDictionary(String fieldName, Class<?> primitiveType)`, and `getDictionary(String fieldName)`.\n* Added support for `RealmSet` in `DynamicRealmObject` with `setRealmSet(String fieldName, RealmSet<?> realmSet)`, `getRealmSet(String fieldName, Class<?> primitiveType)`, and `getRealmSet(String fieldName)`.\n\n### Fixed\n* Removed wrong `@Nullable` annotation on `RealmQuery.maxRealmAny()`.\n* Fixed `RealmAny.getValueClass()` returning the `RealmObject` proxy class instead of the model class on a `RealmAny` referencing a managed `RealmObject`.\n\n### Compatibility\n* File format: Generates Realms with format v22. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.0.2, commit a30382469eb72c0cf1824b44e7062071c2f3f3a9.\n* Updated to Gradle 6.8.3.\n\n\n## 10.6.0-BETA.1 (2021-05-17)\n\n### Breaking Changes\n* [RealmApp] Sync protocol version increased to 3. This version adds support for the new data types introduced in file format version 21.\n* File format version bumped to 21. In this version we support new basic datatypes `UUID` and `RealmAny`, as well as `RealmSet` and `RealmMap` collections with string-based keys (i.e. `RealmDictionary`).\n* Queries no longer do nullability checks on non-nullable fields, so using `null` as an argument will not throw an `IllegalArgumentException`.\n* String query filters `contains`, `beginsWith`, `endsWith`, and `like`, now throw a null pointer exception on null values.\n* The query builder no longer throw `IllegalStateException` but `IllegalArgumentException`.\n* The `distinct` query filter on unsupported fields no longer throws an exception when applied through when querying across relationships.\n* The `distinct` query filter no longer throws an exception when applied on non-existent fields.\n\n### Enhancements\n* Added support for `java.util.UUID` as supported field in model classes.\n* Added support for `java.util.UUID` as a primary key.\n* Added support for `RealmAny` as supported field in model classes. A `RealmAny` is used to represent a polymorphic Realm value or Realm Object, is indexable but cannot be used as a primary key. See [Javadoc for RealmAny](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmAny.html).\n* Added support for `RealmDictionary` as supported field in model classes. A `RealmDictionary` is a `Map` of strings to values - all types under the `RealmAny` umbrella can be used as values. See [Javadoc for RealmDictionary](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmDictionary.html) and [Javadoc for RealmMap](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmMap.html). `RealmDictionary` is not yet supported by any of the `Realm.insert` and `Realm.createFromJson` methods - This support will be added in a future release.\n* Added support for `RealmSet` as supported field in model classes. A `RealmSet` is a collection that implements the Java `Set` interface and contains no duplicate values - all types under the `RealmAny` umbrella can be used as values. See [Javadoc for RealmSet](https://docs.mongodb.com/realm-sdks/java/latest/io/realm/RealmSet.html). `RealmSet` is not yet supported by any of the `Realm.insert` and `Realm.createFromJson` methods - This support will be added in a future release.\n* Allow UTF8 encoded characters in property names in string-based queries ([#4467](https://github.com/realm/realm-core/issues/4467))\n* The error message when the initial steps of opening a Realm file fails is now more descriptive.\n* Make conversion of Decimal128 to/from string work for numbers with more than 19 significant digits. ([#4548](https://github.com/realm/realm-core/issues/4548))\n* Remove type coercion on bool and ObjectId when doing queries.\n* Allow passing arguments into string-based query predicates.\n* Queries across relationships now support the `between` operator.\n* Queries on numerical fields (byte, short, int, long, float, double, decimal128) now accept any numerical value as an argument.\n* `isEmpty` query filter can now be applied on `RealmList` and `RealmObject` fields.\n\n### Fixed\n* Fix assertion failures such as \"!m_notifier_skip_version.version\" or \"m_notifier_sg->get_version() + 1 == new_version.version\" when performing writes inside change notification callbacks. Previously refreshing the Realm by beginning a write transaction would skip delivering notifications, leaving things in an inconsistent state. Notifications are now delivered recursively when needed instead. ([Cocoa #7165](https://github.com/realm/realm-cocoa/issues/7165)).\n* Fixed name aliasing not working in sort/distinct clauses when doing string-based queries. ([#4550](https://github.com/realm/realm-core/issues/4550), never before working).\n* Potential/unconfirmed fix for crashes associated with failure to memory map (low on memory, low on virtual address space). For example ([#4514](https://github.com/realm/realm-core/issues/4514)).\n* Syncing large Decimal128 values will cause \"Assertion failed: cx.w[1] == 0\" ([#4519](https://github.com/realm/realm-core/issues/4519), since v10.0.0)\n* Classes names \"class_class_...\" were not handled correctly when doing queries ([#4480](https://github.com/realm/realm-core/issues/4480))\n* Fix collection notification reporting for modifications. This could be observed by receiving the wrong indices of modifications on sorted or distinct results, or notification blocks sometimes not being called when only modifications have occurred. ([#4573](https://github.com/realm/realm-core/pull/4573) since v6).\n\n### Compatibility\n* File format: Generates Realms with format v21. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.6.y series.\n* Realm Studio 11.0.0-alpha.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 11.0.0-beta.4, commit: d50aef63a8aaf435e3afed82b589b47d8e1ab1ab.\n\n\n## 10.5.1 (2021-06-14)\n\n### Enhancements\n* None.\n\n### Fixes\n* [RealmApp] Errors related to \"uncaught exception in notifier thread: N5realm11KeyNotFoundE: No such object\". This could happen in a sync'd app when a linked object was deleted by another client.\n* [RealmApp] Replacing a referenced embedded object could result in a \"ERROR: ArrayInsert: Invalid\" error. (Issue [#7480](https://github.com/realm/realm-java/issues/7480))\n* Notifications now trigger correctly on Linux kernel 5.5 and above. So far this only impacted the preview emulator image for Android 12. (Issue[#7321](https://github.com/realm/realm-java/issues/7321))\n* Raw query predicates not supporting integer constants above 32 bits on a 32 bit platform.\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 10.8.1, commit 2a67b996faf9e0b5d47ac402c4d3926713f99418.\n\n\n## 10.5.0 (2021-05-07)\n\n### Breaking Changes\n* [RealmApp] `SyncSession.State.WaitingForAccessToken` has been added. It represents the local access token not longer being valid, but is automatically being refreshed.\n\n### Enhancements\n* We now make a backup of a Realm file prior to any file format upgrade. The backup is retained for 3 months. Backups from before a file format upgrade allows for better analysis of any upgrade failure. We also restore a backup, if a) an attempt is made to open a realm file whith a \"future\" file format and b) a backup file exist that fits the current file format. The backup file is placed next to the real Realm file and is named `<fileName>.v<realmFileFormatVersion>.backup.realm`.\n* The error message when the intial steps of opening a Realm file fails is now more descriptive.\n\n### Fixes\n* [RealmApp] Client Reset errors now correctly forward the server error message. (Issue [#7363](https://github.com/realm/realm-java/issues/7363), since 10.0.0)\n* [RealmApp] All `AppException`s now correctly report the error message through `RuntimeException.getMessage()` instead of only through `AppException.getErrorMessage()`.\n* [RealmApp] Proactively check the expiry time on the access token and refresh it before attempting to initiate a sync session. This prevents some error logs from appearing on the client such as: \"ERROR: Connection[1]: Websocket: Expected HTTP response 101 Switching Protocols, but received: HTTP/1.1 401 Unauthorized\" (RCORE-473, since v10.0.0).\n* Fix name aliasing not working in sort/distinct clauses of raw string predicates.\n* Fix collection notification reporting for modifications. This could be observed by receiving the wrong indices of modifications on sorted or distinct results, or notification sometimes not being called when only modifications have occured. (since v7.0.0).\n* Make conversion of Decimal128 to/from string work for numbers with more than 19 significant digits. (#4548)\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 10.7.1, commit 5043c25e1d8f5971002e0fec85dea5ea3d7eb3d7.\n\n\n## 10.4.0 (2021-03-26)\n\nAll releases from 10.4.0 and forward are now found on `mavenCentral()` instead of `jcenter()`.\n\nA minimal supported setup will therefore now look like this:\n\n```\nallprojects {\n    buildscript {\n        repositories {\n            mavenCentral()\n        }\n        dependencies {\n            classpath \"io.realm:realm-gradle-plugin:10.4.0\"\n        }\n    }\n\n    repositories {\n        mavenCentral()\n    }\n}\n```\n\n`SNAPSHOT` releases have also been moved from `http://oss.jfrog.org/artifactory/oss-snapshot-local`\nto `https://oss.sonatype.org/content/repositories/snapshots/`. See [here](https://github.com/realm/realm-java/blob/master/README.md#using-snapshots)\nfor more information.\n\n### Enhancements\n* Added support for the string-based Realm Query Language through `RealmQuery.rawPredicate(...)`. This allows many new type of queries not previously supported by the typed query API. See the Javadoc on this method for further details. (Issue [#6116](https://github.com/realm/realm-java/pull/6116))\n* Performance of sorting on more than one property has been improved. Especially important if many elements match on the first property.\n\n### Fixes\n* Calling max/min/sum/avg on a List may give wrong results (Realm Core [#4252](https://github.com/realm/realm-core/issues/4252), since v10.0.0)\n* Fix an issue when using `RealmResults.freeze()` across threads with different transaction versions. Previously, copying the `RealmsResults`' native resource could result in a stale state or objects from a future version. (Realm Core [#4254](https://github.com/realm/realm-core/pull/4254)).\n* On 32-bit devices you may get exception with \"No such object\" when upgrading to v10.* ([#7314](https://github.com/realm/realm-java/issues/7314), since v10.0.0)\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core 10.5.6, commit 92129110dece2cee59839e20be3a7067084a1196.\n* Updated to NDK 22.0.7026061.\n* Updated to ReLinker 1.4.3.\n\n## 10.3.1 (2021-01-28)\n\n### Enhancements\n* None.\n\n### Fixes\n* RxJava Flowables/Observables and Coroutine Flows would crash if they were created from a `RealmList` and the parent object holding the list was deleted. Now, the stream is disposed/closed instead. (Issue [#7242](https://github.com/realm/realm-java/issues/7242))\n* Fixes Realm models default values containing objects with a PK might crash with a `RealmPrimaryKeyConstraintException`. (Issue [#7269] (https://github.com/realm/realm-java/issues/7269))\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* None.\n\n\n## 10.3.0 (2021-01-08)\n\n### Enhancements\n* [RealmApp] Upgraded to OpenSSL 1.1.1g.\n\n### Fixes\n* [RealmApp] Integrating a remote Sync changeset into the local Realm could result in an `Index out of range error`.\n* Change notifications not firing when removing and adding an object with the same primary key within a transaction (Issue [#7098](https://github.com/realm/realm-java/issues/7098)).\n* Race condition which would lead to \"uncaught exception in notifier thread: N5realm15InvalidTableRefE: transaction_ended\" and a crash when the source Realm was closed or invalidated at a very specific time during the first run of a collection notifier (Core issue [#3761](https://github.com/realm/realm-core/issues/3761), since v7.0.0).\n* Deleting and recreating objects with embedded objects could fail (Core issue [#4240](https://github.com/realm/realm-core/pull/4240), since v10.0.0)\n* Added `@Nullable` annotation to input parameter in `RealmObject.isValid(item)` to avoid mismatch warnings from Kotlin code (Issue [#7216](https://github.com/realm/realm-java/issues/7216)).\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Core: 10.3.3 (Monorepo).\n* Updated to Realm Core commit: 8af0f8d609491986b49f2c986e771d9dc445664d.\n\n\n## 10.2.0 (2020-12-02)\n\n### Deprecated\n* [RealmApp] `Credentials.google(authenticationCode: String)`. Use `Credentials.google(token: String, authType: GoogleAuthType)` instead.\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* [RealmApp] Added `Credentials.google(token: String, authType: GoogleAuthType)`, as MongoDB Realm now supports multiple ways of logging into Google Accounts.\n\n### Fixes\n* [RealmApp] Bug that would prevent eventual consistency during conflict resolution. Affected clients would experience data divergence and potentially consistency errors as a result if they experienced conflict resolution between cycles of Create-Erase-Create for objects with primary keys.\n* Clean up JNI references to prevent crash from JNI reference table overflow (Issue [#7217](https://github.com/realm/realm-java/issues/7217))\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Sync: 10.1.4.\n* Updated to Object Store commit: f838a27402c5b5243280102014defd844420abba66eb93c10334507d9c0fd513.\n\n\n## 10.1.2 (2020-12-02)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixes\n* Complementary fix for missed edge case in https://github.com/realm/realm-java/pull/7220 where KAPT crash if we process a RealmObject referencing a type in RealmList defined in another module. (Issue [#7213](https://github.com/realm/realm-java/issues/7213), since v10.0.0).\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n\n## 10.1.1 (2020-11-27)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixes\n* KAPT crash when processing a RealmObject referenced from another module (changed revealed after we started checking for embedded types). (Issue [#7213](https://github.com/realm/realm-java/issues/7213), since v10.0.0).\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Sync: 10.1.3.\n* Updated to Realm Core: 10.1.3.\n* Updated to Object Store commit: fc6daca61133aa9601e4cb34fbeb9ec7569e162e.\n\n\n## 10.1.0 (2020-11-23)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* Added `FlowFactory` interface that allows customization of `Flow` emissions, just as we do with `RxObservableFactory`. A default implementation, `RealmFlowFactory`, is provided when building `RealmConfiguration`s.\n* Added `toChangeSetFlow` methods (similar to the Rx `asChangesetFlowable` methods) for `RealmObject`, `RealmResults` and `RealmList`.\n\n### Fixes\n* Fixed crash when adding classes containing an `ObjectId` as primary key to the schema. (Issue [#7189](https://github.com/realm/realm-java/issues/7189), since v10.0.0)\n* Fixed crash when creating proxy classes containing an `ObjectId` as primary key. (Issue [#7197](https://github.com/realm/realm-java/issues/7197), since v10.0.0)\n* Fixed crash where calls to `toFlow` could crash if the Flow job is canceled and object updates are emitted after that happens. (Issue [7211](https://github.com/realm/realm-java/issues/7211), since v10.0.1)\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Sync: 10.1.3.\n* Updated to Realm Core: 10.1.3.\n* Updated to Object Store commit: fc6daca61133aa9601e4cb34fbeb9ec7569e162e.\n\n\n## 10.0.1 (2020-11-06)\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* Improved the error message for `NoSuchTable` errors. In some cases an outdated native reference was used,but the table was still there. In those cases an `InvalidTableRef` error is now used.\n\n### Fixes\n* [RealmApp] The `SyncConfiguration.Builder.allowQueriesOnUiThread` flag was wrongly initialized to `false` keeping users from running queries from the UI thread when using synced Realms. It now defaults to `true`, allowing queries to be run from the UI. (Issue [#7177](https://github.com/realm/realm-java/issues/7177), since 10.0.0)\n* Crash with `Assertion failed: m_method_id != nullptr with (method_name, signature) =  [\"<init>\", \"(Ljava/lang/String;)V\"]` when `Minify` is enabled. (Issue [#7159](https://github.com/realm/realm-java/pull/7159), since 10.0.0)\n* Fix crash in case insensitive query on indexed string columns when nothing matches (Cocoa issue [#6836](https://github.com/realm/realm-cocoa/issues/6836), since v10.0.0)\n* Fix list of primitives with nullable values where `Lst::is_null(ndx)` always false even on null values, (Core issue [#3987](https://github.com/realm/realm-core/pull/3987), since v10.0.0).\n* Fix queries for the size of a list of primitive nullable ints returning size + 1. (Core issue [#4016](https://github.com/realm/realm-core/pull/4016), since v10.0.0).\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Sync: 10.1.0.\n* Updated to Realm Core: 10.1.0.\n* Updated to Object Store commit: fd246c54de7d1fee6bcbeb3609de75a4eccd5b70.\n\n\n## 10.0.0 (2020-10-15)\n\nNOTE: This is a unified release note covering all v10.0.0-BETA.X v10.0.0-RC.X releases.\n\nNOTE: Support for syncing with realm.cloud.io and/or Realm Object Server has been replaced with support for syncing with MongoDB Realm Cloud.\n\nNOTE: This version upgrades the Realm file format to version 20. It is not possible to downgrade to earlier versions than v10.0.0-BETA.7. Non-sync Realms will be upgraded automatically. Synced Realms can only be automatically upgraded if created with Realm Java v10.0.0-BETA.1 and above.\n\n### Breaking Changes\n* [RealmApp] Most APIs for interacting with Realm Cloud have changed significantly. All new APIs can be found in the `io.realm.mongodb` package. The entry point is through the `App` class from which you can create and login users and otherwise interact with MongoDB Realm. See [the docs](https://docs.mongodb.com/realm/android/) for further details. Synced Realms still use a `SyncConfiguration` that are largely created the same way.\n* [RealmApp] Client Resets are now handled through a custom `SyncConfiguration.Builder.clientResetHandler()` instead of through the default session error handler `SyncConfiguration.Builder.errorHandler()`\n* [RealmApp] Realm files have changed location on disk. They are now located in `getFiles()/mongodb-realm`.\n* [RealmApp] All synced model classes not marked as embedded are required to have a primary key named `_id`. It is possible to use `@RealmField(name = \"_id\")` to map from any Java or Kotlin property.\n* From now on it is by default not allowed to run transactions with either `Realm.executeTransaction()` or `DynamicRealm.executeTransaction()` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, however, we do not recommend doing so. Instead, we recommend using `executeTransactionAsync()` or, alternatively, using non-UI threads when calling `executeTransaction()` for both `Realm`s and `DynamicRealm`s.\n\n### Enhancements\n* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll()`, `RealmQuery.findFirst()`, `RealmQuery.minimumDate()`, `RealmQuery.maximumDate()`, `RealmQuery.count()`, `RealmQuery.sum()`, `RealmQuery.max()`, `RealmQuery.min()`, `RealmQuery.average()` and `RealmQuery.averageDecimal128()` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`, or, alternatively, using a non-UI thread to launch them.\n* `BaseRealm.refresh()` will throw a `RealmException` if it is being called from the UI thread if `allowQueriesOnUiThread` is set to `false`, though it will be allowed by default.\n* Added `DynamicRealm.executeTransactionAsync()`.\n* Added Kotlin extension suspend function `Realm.executeTransactionAwait()` which runs transactions inside coroutines.\n* Added Kotlin extension function `RealmResults.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n* Added Kotlin extension function `RealmList.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n* Added Kotlin extension function `RealmModel.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n* RealmLists can now be marked final. (Issue [#6892](https://github.com/realm/realm-java/issues/6892))\n* Added support for `distinct` queries on non-index and linked fields. (Issue [#1906](https://github.com/realm/realm-java/issues/1906))\n* Added support for `org.bson.types.Decimal128` and `org.bson.types.ObjectId` as supported fields in model classes.\n* Added support for `org.bson.types.ObjectId` as a primary key.\n* Added support for \"Embedded Objects\". They are enabled using `@RealmClass(embedded = true)`. An embedded object must have exactly one parent object linking to it and it will be deleted when the parent is. Embedded objects can also be the parent of other embedded classes. Read more [here](https://docs.mongodb.com/realm/android/embedded-objects/). (Issue [#6713](https://github.com/realm/realm-java/issues/6713))\n\n\n### Fixes\n* None.\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java v10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 or above is required to open Realms created by this version.\n\n### Internal\n* Updated to Realm Sync: 10.0.0.\n* Updated to Realm Core: 10.0.0.\n\n\n## 10.0.0-RC.2 (2020-10-12)\n\n### Enhancements\n* [RealmApp] Illegal schemas where embedded object classes referenced each other is now correctly detected and throws and exception when opening a Realm with such a schema.\n\n### Fixed\n* [RealmApp] It is now possible to use types different than `ObjectId` for the `_id` field in documents inserted with `MongoCollection.insertOne` and `MongoCollection.insertMany`.\n* [RealmApp] Lossy round trip of Double and Timestamps through functions when using Bson. (ObjectStore issue (#1106)[https://github.com/realm/realm-object-store/issues/1106])\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java 10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: 6b44209e6fcac0137e193c96444f93c50d184d06.\n\n\n## 10.0.0-RC.1 (2020-10-02)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction()` or `DynamicRealm.executeTransaction()` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using `executeTransactionAsync()` or, alternatively, using non-UI threads when calling `executeTransaction()` for both `Realm`s and `DynamicRealm`s.\n\n### Enhancements\n* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll()`, `RealmQuery.findFirst()`, `RealmQuery.minimumDate()`, `RealmQuery.maximumDate()`, `RealmQuery.count()`, `RealmQuery.sum()`, `RealmQuery.max()`, `RealmQuery.min()`, `RealmQuery.average()` and `RealmQuery.averageDecimal128()` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`, or, alternatively, using a non-UI thread to launch them.\n* `BaseRealm.refresh()` will throw a `RealmException` if it is being called from the UI thread if `allowQueriesOnUiThread` is set to `false`, though it will be allowed by default.\n* Added `DynamicRealm.executeTransactionAsync()`.\n* Added Kotlin extension suspend function `Realm.executeTransactionAwait()` which runs transactions inside coroutines.\n* Added Kotlin extension function `RealmResults.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n* Added Kotlin extension function `RealmList.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n* Added Kotlin extension function `RealmModel.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n\n### Fixed\n* Using `Realm.copyToRealmOrUpdate()` and `Realm.insertOrUpdate()` did not correctly update objects if they contained lists of embedded objets. Instead of replacing the original list, list items was appended to the original list. Note, some corner cases are still not supported. See [#7138](https://github.com/realm/realm-java/issues/7138) for more information. (Issue [#7131](https://github.com/realm/realm-java/issues/7131), since 10.0.0-BETA.1).\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java 10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: ef6736cc07a8b94d1242c522969114bb8047deef\n* Updated to Realm Sync 10.0.0-beta.14.\n* Updated to Realm Core 10.0.0-beta.9.\n\n\n## 10.0.0-BETA.8 (2020-09-23)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Fixed\n* [RealmApp] Logging in caused an `token contains an invalid number of segments` error. (Issue [#7117](https://github.com/realm/realm-java/issues/7117), since 10.0.0-BETA.7)\n* [RealmApp] The order of arguments to `EmailPassword.resetPassword()` was not handled correctly, resulting in resetting the password failing. (Issue [#7116](https://github.com/realm/realm-java/issues/7116), since 10.0.0-BETA.1)\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java 10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: 035eb07f3ef313bfb78c046be9cf6b4f065d6772.\n\n\n## 10.0.0-BETA.7 (2020-09-16)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\nWARNING: This release upgrades the fileformat to 20. Non-sync Realms will be upgraded automatically. Synced Realms can only be automatically upgraded if created with Realm Java 10.0.0-BETA.1 and above.\n\n\n### Breaking Changes\n* [RealmApp] Moved `User.remove()` to `App.removeUser()`.\n* [RealmApp] Renamed `ApiKeyAuth.createApiKey()` to `ApiKeyAuth.create()` and `ApiKeyAuth.createApiKeyAsync()` to `ApiKeyAuth.createAsync()`.\n* [RealmApp] Renamed `ApiKeyAuth.fetchApiKey()` to `ApiKeyAuth.fetch()` and `ApiKeyAuth.fetchApiKeyAsync()` to `ApiKeyAuth.fetchAsync()`.\n* [RealmApp] Renamed `ApiKeyAuth.fetchAllApiKeys()` to `ApiKeyAuth.fetchAll()` and `ApiKeyAuth.fetchAllApiKeysAsync()` to `ApiKeyAuth.fetchAllAsync()`.\n* [RealmApp] Renamed `ApiKeyAuth.deleteApiKey()` to `ApiKeyAuth.delete()` and `ApiKeyAuth.deleteApiKeyAsync()` to `ApiKeyAuth.deleteAsync()`.\n* [RealmApp] Renamed `ApiKeyAuth.enableApiKey()` to `ApiKeyAuth.enable()` and `ApiKeyAuth.enableApiKeyAsync()` to `ApiKeyAuth.enableAsync()`.\n* [RealmApp] Renamed `ApiKeyAuth.disableApiKey()` to `ApiKeyAuth.disable()` and `ApiKeyAuth.disableApiKeyAsync()` to `ApiKeyAuth.disableAsync()`.\n* [RealmApp] Renamed `User.getApiKeysAuth()` to `User.getApiKeys()`.\n* [RealmApp] Renamed `UserApiKey` class to `ApiKey`.\n* [RealmApp] Removed support for `Credentials.serverApiKey()`.\n* [RealmApp] Renamed `App.getEmailPasswordAuth()` to `App.getEmailPassword()`.\n* [RealmApp] User profile methods `getName()`, `getEmail()`, `getPictureUrl()`, `getFirstName()`, `getLastName()`, `getGender()`, `getBirthday()`, `getMinAge()` and `getMaxAge()` are now available under a new class `UserProfile`. It can be accessed using `User.getProfile()`.\n* [RealmApp] Renamed `Sync.refreshConnections()` to `Sync.reconnect()`.\n* [RealmApp] Renamed `Credentials.IdentityProvider` to `Credentials.Provider`.\n* [RealmApp] Removed support for `User.getLocalId()`.\n* [RealmApp] Client Resets are now handled through a custom `SyncConfiguration.Builder.clientResetHandler()` instead of through the default session error handler `SyncConfiguration.Builder.errorHandler()`\n\n### Enhancements\n* [RealmApp] It is now possible to create App instances with different app id's.\n* [RealmApp] Support for using `null` as a partition value.\n* [RealmApp] Improve errors exception messages from `SyncSession.downloadAllServerChanges()` and `SyncSession.uploadAllLocalChanges()`.\n* [RealmApp] Support for watching MongoCollection change streams (Issue [#6912](https://github.com/realm/realm-java/issues/6912))\n* [RealmApp] Support for retrying a custom confirmation function on an User for a given email (Issue [#7079](https://github.com/realm/realm-java/pull/7079))\n* [RealmApp] Support for getting all app sessions via `Sync.getAllSessions()`.\n* [RealmApp] Support to retrieve the MongoClient service name using `MongoClient.getServiceName()`\n* [RealmApp] Support to retrieve the MongoDatabase name using `MongoDatabase.getName()`\n* [RealmApp] Support to retrieve the MongoCollection name using `MongoCollection.getName()`\n\n### Fixed\n* If you have a realm file growing towards 2Gb and have a table with more than 16 columns, then you may get a \"Key not found\" exception when updating an object. If asserts are enabled at the sdk level, you may get an \"assert(m_has_refs)\" instead. ([#3194](https://github.com/realm/realm-js/issues/3194), since v7.0.0)\n* In cases where you have more than 32 columns in a table, you may get a currrupted file resulting in various crashes ([#7057](https://github.com/realm/realm-java/issues/7057), since v7.0.0)\n\n### Compatibility\n* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java 10.0.0-BETA.1.\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: 6ab48d3b4b1e0865f68b84d5993bb2aad910320b.\n* Updated to Realm Sync 10.0.0-beta.11.\n* Updated to Realm Core 10.0.0-beta.7.\n\n\n## 10.0.0-BETA.6 (2020-08-17)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* [RealmApp] Realm files have changed location on disk, so Realms should upload all their data to the server before upgrading.\n* [RealmApp] Removed GMS Task framework and added RealmResultTask to provide with a mechanism to operate with asynchronous operations. MongoCollection has been updated to reflect this change.\n\n### Enhancements\n* [RealmApp] Credentials information (e.g. username, password) displayed in Logcat is now obfuscated by default, even if [LogLevel] is set to DEBUG, TRACE or ALL.\n* RealmLists can now be marked final. (Issue [#6892](https://github.com/realm/realm-java/issues/6892))\n* It is now possible to create embedded objects using [DynamicRealm]s. (Issue [#6982](https://github.com/realm/realm-java/pull/6982))\n* Added extra validation and more meaningful error messages when creating embedded objects pointing to the wrong parent property. (See issue above)\n\n### Fixed\n* [RealmApp] The same user opening different Realms with different partion key values would crash with an IllegalArgumentException. (Issue [#6882](https://github.com/realm/realm-java/issues/6882), since 10.0.0-BETA.1)\n* [RealmApp] Sync would not refresh the access token if started with an expired one. (Since 10.0.0-BETA.1)\n* [RealmApp] Leaking objects when registering session listeners. (Issue [#6916](https://github.com/realm/realm-java/issues/6916))\n* Added support for Json-import of objects containing embedded objects. (Issue [#6896](https://github.com/realm/realm-java/issues/6896))\n* Upgrading the file format result did in some cases not work correctly. This could result in a number of crashes, e.g. `FORMAT_UPGRADE_REQUIRED`. (Issue [#6889](https://github.com/realm/realm-java/issues/6889), since 7.0.0)\n* Bug in memory mapping management. This bug could result in multiple different asserts as well as segfaults. In many cases stack backtraces would include members of the EncyptedFileMapping near the top - even if encryption was not used at all. In other cases asserts or crashes would be in methods reading an array header or array element. In all cases the application would terminate immediately. (Realm Core PR [#3838](https://github.com/realm/realm-core/pull/3838), since 7.0.0)\n* It was possible to use `RealmObjectSchema` to mark a Class as embedded even if some of the objects broke the constraints for being embedded.\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Upgraded to Object Store commit: 5b5fb8a90192cb4ee6799e7465745cd2067f939b.\n* Upgraded to Realm Sync 10.0.0-beta.6.\n* Upgraded to Realm Core 10.0.0-beta.4.\n\n\n## 10.0.0-BETA.5 (2020-06-19)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy API's have undergone significant refactoring. The new API's are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Enhancements\n* [RealmApp] Added support for Api Keys, Server Api Keys and Custom Functions as Credential types when logging in.\n* Added support for `distinct` queries on non-index and linked fields. (Issue [#1906](https://github.com/realm/realm-java/issues/1906))\n\n### Fixed\n* None.\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Upgraded to Object Store commit: e1570f8d3d7cf4d77f049933e6a241a501301383.\n\n## 10.0.0-BETA.4 (2020-06-11)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy API's have undergone significant refactoring. The new API's are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* [RealmApp] Added support for Custom Data using `User.customData()` and `User.refreshCustomData()`.\n* [RealmApp] Added support for managing push notifications using `App.getPush()`.\n\n### Fixed\n* [RealmApp] Opening a synced Realm for a cached user with expired access token would crash the app with `Assertion failed: cls with (class_name) = [\"io/realm/internal/objectstore/OsJavaNetworkTransport$Response\"]`. (Issue [#6937](https://github.com/realm/realm-java/issues/6937), since 10.0.0-BETA.1)\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: 017d58fbec8a18ab003976b4c346308df88349a6.\n\n\n## 10.0.0-BETA.3 (2020-06-09)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy API's have undergone significant refactoring. The new API's are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] When restarting an app, the base URL used would in some cases be incorrect. (Since 10.0.0-BETA.2)\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: c02707bc28e1886970c5da29ef481dc0cb6c3dd8.\n\n\n## 10.0.0-BETA.2 (2020-06-08)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy API's have undergone significant refactoring. The new API's are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* None.\n\n### Enhancements\n* None.\n\n### Fixed\n* [RealmApp] `AppConfiguration` did not fallback to the correct default baseUrl if none was provided. (Since 10.0.0-BETA.1)\n* [RealmApp] When restarting an app, re-using the already logged in user would result in Sync not resuming. (Since 10.0.0-BETA.1)\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: c50be4dd178ef7e11d453f61a5ac2afa8c1c10bf.\n* Updated to Realm Sync 10.0.0-beta.2.\n\n\n## 10.0.0-BETA.1 (2020-06-05)\n\nWe no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n\nThe old Realm Cloud legacy API's have undergone significant refactoring. The new API's are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n\n### Breaking Changes\n* [RealmApp] Removed all references and API's releated to permissions. These are now managed through MongoDB Realm.\n* [RealmApp] Query Based Sync API's and Subscriptions. These API's are not initially supported by MongoDB Realm. They will be re-introduced in a future release. `SyncConfiguration.partitionKey()` has been added as a replacement.\n* [RealmApp] Removed support for Client Resync. These API's are not initially supported by MongoDB Realm. They will be re-introduced in a future release.\n* [RealmApp] Removed suppport for custom SSL certificates. These API's are not initially supported by MongoDB Realm. They will be re-introduced in a future release.\n* [RealmApp] Destructive updates of a schema of a synced Realm will now consistently throw an `UnsupportedOperationException` instead of some methods throwing `IllegalArgumentException`. The affected methods are `RealmSchema.remove(String)`, `RealmSchema.rename(String, String)`, `RealmObjectSchema.setClassName(String)`, `RealmObjectSchema.removeField(String)`, `RealmObjectSchema.renameField(String, String)`, `RealmObjectSchema.removeIndex(String)`, `RealmObjectSchema.removePrimaryKey()`, `RealmObjectSchema.addPrimaryKey(String)` and `RealmObjectSchema.addField(String, Class<?>, FieldAttribute)`\n\n### Enhancements\n* Added support for `org.bson.types.Decimal128` and `org.bson.types.ObjectId` as supported fields in model classes.\n* Added support for `org.bson.types.ObjectId` as a primary key.\n* Added support for \"Embedded Objects\". They are enabled using `@RealmClass(embedded = true)`. An embedded object must have exactly one parent object linking to it and it will be deleted when the the parent is. Embedded objects can also be the parent of other embedded classes. Read more [here](https://realm.io/docs/java/latest/#embedded-objects). (Issue [#6713](https://github.com/realm/realm-java/issues/6713))\n\n### Fixed\n* After upgrading a Realm file, you may at some point receive a 'NoSuchTable' exception. (Issue [Core#3701](https://github.com/realm/realm-core/issues/3701), since 7.0.0)\n* If the Realm file upgrade process was interrupted/killed for various reasons, the following run would some assertions failing. (Issue [#6866](https://github.com/realm/realm-java/issues/6866), since 7.0.0).\n\n### Compatibility\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n\n### Internal\n* Updated to Object Store commit: 6d081a53377514f9b77736cb03051a03d829da922.\n* Updated to Realm Sync 10.0.0-beta.1.\n* Updated to Realm Core 10.0.0-beta.1.\n* OKHttp was upgraded to 3.12.0 from 3.10.0.\n* Updated Android Gradle Plugin to 3.6.1.\n* Updated Gradle to 5.6.4\n* Updated Dokka to 0.10.1\n* Updated Android Build Tools to 29.0.2.\n* Updated compileSdkVersion to 29.\n\n\n## 7.0.8 (2020-10-01)\n\n### Enhancements\n* Slightly improve performance of most operations which read data from the Realm file.\n\n### Fixes\n* Making a query in an indexed property may give a \"Key not found\" exception. (.NET issue [#2025](https://github.com/realm/realm-dotnet/issues/2025), since 7.0.0)\n* Queries for null on non-nullable indexed integer properties could return wrong results if 0 entries should be found. (Since 7.0.0)\n* Rerunning an equals query on an indexed string column which previously had more than one match and now has one match would sometimes throw a \"key not found\" exception. (Cocoa issue [#6536](https://github.com/realm/realm-cocoa/issues/6536), Since 7.0.0)\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Object Store commit: 8a68df3e9fa7743c13d927eb7fc330ed9bb06693.\n* Upgraded to Realm Sync: 5.0.28.\n* Upgraded to Realm Core: 6.1.3.\n\n\n## 7.0.7 (2020-09-25)\n\n### Enhancements\n* None.\n\n### Fixes\n* When querying a class where object references are part of the condition, the application may crash if objects have recently been added to the target table. (Issue [#7118](https://github.com/realm/realm-java/issues/7118), since v7.0.0)\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Object Store commit: 37e86c2905bfd424c16fc5d7860a1298bfc0ffa2.\n* Upgraded to Realm Sync: 5.0.25.\n* Upgraded to Realm Core: 6.1.1.\n\n\n## 7.0.6 (2020-09-18)\n\n### Enhancements\n* Better exception messaging for UTF encoding errors. ([Issue #7093](https://github.com/realm/realm-java/pull/7093))\n\n### Fixes\n* Fixes concurrent modification exceptions in the schema when refreshing a Realm (Issue [#6876](https://github.com/realm/realm-java/issues/6876))\n* If you use encryption your application cound crash with a message like \"Opening Realm files of format version 0 is not supported by this version of Realm\". ([#6889](https://github.com/realm/realm-java/issues/6889) among others, since v7.0.0)\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 5.0.0 or later.\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Object Store commit: e29b5515df8b8adfe2454424b78878bb63879307.\n* Upgraded to Realm Sync: 5.0.23.\n* Upgraded to Realm Core: 6.0.26.\n\n\n## 7.0.5 (2020-09-09)\n\n### Enhancements\n* None.\n\n### Fixes\n* If you have a Realm file growing towards 2Gb and have a model class with more than 16 properties, then you may get a \"Key not found\" exception when updating an object. (Realm JS issue [#3194](https://github.com/realm/realm-js/issues/3194), since v7.0.0)\n* In cases where you have more than 32 properties in a model class, you may get a currrupted file resulting in various crashes (Issue [#7057](https://github.com/realm/realm-java/issues/7057), since v7.0.0)\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 5.0.0 or later.\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Realm Sync: 5.0.22.\n* Upgraded to Realm Core: 6.0.25.\n\n\n## 7.0.4 (2020-09-08)\n\nNote: Fileformat has been bumped from 10 to 11. This means that downgrading to an earlier version of Realm is not possible and Realm Studio 5.0.0 must be used to view Realm files.\n\n### Enhancements\n* None.\n\n### Fixes\n* In some cases a frozen Realm of the wrong version could be returned. ([ObjectStore issue #1078](https://github.com/realm/realm-object-store/pull/1078))\n* Upgrading files with string primary keys would result in a file where it was not possible to find the objects by primary key. ([Core issue #3893](https://github.com/realm/realm-core/pull/3893), since 7.0.0)\n* NullPointerException when calling `toString` on RealmObjects with a binary field containing `null`. (Issue [#7084](https://github.com/realm/realm-java/issues/7084), since 7.0.0)\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 5.0.0 or later.\n* File format: Generates Realms with format v11 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Object Store commit: 286d7cb2f10c41f89a2efb43b22938610ccad4cf.\n* Upgraded to Realm Sync: 5.0.21.\n* Upgraded to Realm Core: 6.0.24.\n\n## 7.0.3 (2020-09-01)\n\n### Enhancements\n* Added `Realm.getNumberOfActiveVersions()`, which returns the current number of active versions maintained by the Realm file.\n\n### Fixes\n* Creating a query inside a change listener could in some cases result in the version being pinned, which would either drastically increase filesize or cause `RealmConfiguration.maxNumberOfActiveVersions()` to trigger. (Issue [#6977](https://github.com/realm/realm-java/issues/6977), since 7.0.0)\n* If you upgrade a Realm file where you have \"\" elements in a list of non-nullable strings, the upgrade would crash.\n* If an attempt to upgrade a Realm file has ended with a crash with \"migrate_links\" in the call stack, the Realm ended in a corrupt state where further upgrade was not possible. A remedy for this situation is now provided.\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 4.0.0 or later.\n* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Object Store commit: eef80f42e6ede2294eb60f048228012d9b7bc627.\n* Upgraded to Realm Sync: 5.0.19.\n* Upgraded to Realm Core: 6.0.22.\n* The upgrade logic for upgrading fileformats has changed so that progress is now recorded explicitly in a table. This makes the logic simpler and reduces the chance of errors. It will also make it easier to detect if a file has only been partially upgraded.\n\n\n## 7.0.2 (2020-08-14)\n\n### Enhancements\n* None.\n\n### Fixes\n* [ObjectServer] Calling `SyncManager.refreshConnections()` did not correctly refresh connections in all cases, which could delay reconnects up to 5 minutes. (Issue [#7003](https://github.com/realm/realm-java/issues/7003))\n* Upgrading the file format result did in some cases not work correctly. This could result in a number of crashes, e.g. `FORMAT_UPGRADE_REQUIRED`. (Issue [#6889](https://github.com/realm/realm-java/issues/6889), since 7.0.0)\n* Bug in memory mapping management. This bug could result in multiple different asserts as well as segfaults. In many cases stack backtraces would include members of the EncyptedFileMapping near the top - even if encryption was not used at all. In other cases asserts or crashes would be in methods reading an array header or array element. In all cases the application would terminate immediately. (Issue [#3838](https://github.com/realm/realm-core/pull/3838), since 7.0.0)\n* Crash when retrieving `null` valued primitive fields from dynamic realm. (Issue [#7025](https://github.com/realm/realm-java/issues/7025))\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 4.0.0 or later.\n* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Realm Sync 5.0.15.\n* Upgraded to Realm Core 6.0.17.\n\n\n## 7.0.1 (2020-07-01)\n\n### Enhancements\n* None.\n\n### Fixes\n* Upgrading older Realm files with String indexes was very slow. (Issue [#6875](https://github.com/realm/realm-java/issues/6875), since 7.0.0)\n* Aborting upgrading a Realm file could result in the file getting corrupted. (Isse [#6866](https://github.com/realm/realm-java/issues/6866), since 7.0.0)\n* Automatic indexes on primary keys are now correctly stripped when upgrading the file as they are no longer needed. (Since 7.0.0)\n* `NoSuchTable` was thrown after comitting a transaction. (Issue [#6947](https://github.com/realm/realm-java/issues/6947))\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 4.0.0 or later.\n* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* Upgraded to Realm Sync 5.0.7.\n* Upgraded to Realm Core 6.0.8.\n\n\n## 7.0.0 (2020-05-16)\n\nNOTE: This version bumps the Realm file format to version 10. Files created with previous versions of Realm will be automatically upgraded. It is not possible to downgrade to version 9 or earlier. Only [Studio 3.11](https://github.com/realm/realm-studio/releases/tag/v3.11.0) or later will be able to open the new file format.\nNOTE: This version bumps the Realm file format to version 10. Files created with previous versions of Realm will be automatically upgraded. It is not possible to downgrade to version 9 or earlier. Only [Realm Studio 4](https://github.com/realm/realm-studio/releases/tag/v4.0.0) or later will be able to open the new file format.\n\n### Breaking Changes\n* [ObjectServer] Removed deprecated method `SyncConfiguration.Builder.partialRealm()`. Use `SyncConfiguration.Builder.fullSynchronization()` instead.\n* [ObjectServer] Removed deprecated methods `SyncConfiguration.automatic()` and `SyncConfiguration.automatic(User, Uri)`. Use `SyncUser.getDefaultConfiguration()` and `SyncUser.createConfiguration(Url)`.\n* [ObjectServer] Removed deprecated method `ErrorCode.fromInt(int)`.\n* [ObjectServer] Removed deprecated method `SyncCredentials.nickname(name)` and `SyncCredentials.nickname(name, isAdmin)`. Use `SyncCredentials.usernamePassword(username, password)` instead.\n* [ObjectServer] Deprecated state `SyncSession.State.ERROR` has been removed. Use `SyncConfiguration.Builder.errorHandler(ErrorHandler)` instead.\n* [ObjectServer] `IncompatibleSyncedFileException` is removed as it is no longer used.\n* [ObjectServer] New error codes thrown by the underlying sync layers now have proper enum mappings in `ErrorCode.java`. A few other errors have been renamed in order to have consistent naming. (Issue [#6387](https://github.com/realm/realm-java/issues/6387))\n* RxJava Flowables and Observables are now subscribed to and unsubscribed to asynchronously on the thread holding the live Realm, instead of previously where this was done synchronously.\n* All RxJava Flowables and Observables now return frozen objects instead of live objects. This can be configured using `RealmConfiguration.Builder.rxFactory(new RealmObservableFactory(true|false))`. By using frozen objects, it is possible to send RealmObjects across threads, which means that all RxJava operators should now be supported without the need to copy Realm data into unmanaged objects.\n* MIPS is not supported anymore.\n* Realm now requires `minSdkVersion` 16. Up from 9.\n* [ObjectServer] `IncompatibleSyncedFileException` is removed and no longer thrown.\n\n### Enhancements\n* Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))\n* Added `Realm.isFrozen()`, `RealmObject.isFrozen()`, `RealmObject.isFrozen(RealmModel)`, `RealmResults.isFrozen()` and `RealmList.isFrozen()`, which returns whether or not the data is frozen.\n* Added `RealmConfiguration.Builder.maxNumberOfActiveVersions(long number)`. Setting this will cause Realm to throw an `IllegalStateException` if too many versions of the Realm data are live at the same time. Having too many versions can dramatically increase the filesize of the Realm.\n* Storing large binary blobs in Realm files no longer forces the file to be at least 8x the size of the largest blob.\n* Reduce the size of transaction logs stored inside the Realm file, reducing file size growth from large transactions.\n* `RealmResults.asJSON()` is no longer `@Beta`\n* The default `toString()` for proxy objects now print the length of binary fields. (Issue [#6767](https://github.com/realm/realm-java/pull/6767))\n\n### Fixes\n* If a DynamicRealm and Realm was opened for the same file they would share transaction state by accident. The implication was that writes to a `Realm` would immediately show up in the `DynamicRealm`. This has been fixed, so now it is required to call `refresh()` on the other Realm or wait for normal change listeners to detect the change.\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* Realm Studio: 4.0.0 or later.\n* File format: Generates Realms with format v10 (Reads and upgrades all previous formats from Realm Java 2.0 and later).\n* APIs are backwards compatible with all previous release of realm-java in the 7.x.y series.\n\n### Internal\n* `OsSharedRealm.VersionID.hashCode()` was not implemented correctly and included the memory location in the hashcode.\n* OKHttp was upgraded to 3.10.0 from 3.9.0.\n* The NDK has been upgraded from r10e to r21.\n* The compiler used for C++ code has changed from GCC to Clang.\n* OpenSSL used by Realms encryption layer has been upgraded from 1.0.2k to 1.1.1b.\n* Updated to Object Store commit: 820b74e2378f111991877d43068a95d2b7a2e404.\n* Updated to Realm Sync 5.0.3.\n* Updated to Realm Core 6.0.4.\n\n### Credits\n* Thanks to @joxon for better support for binary fields in proxy objects.\n\n\n## 6.1.0(2020-01-17)\n\n### Fixed\n* None.\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 6.x.y series.\n\n### Internal\n* None.\n\n\n\n## 6.1.0(2020-01-17)\n\n### Enhancements\n* The Realm Gradle plugin now applies `kapt` when used in Kotlin Multiplatform projects. Note, Realm Java still only works for the Android part of a Kotlin Multiplatform project. (Issue [#6653](https://github.com/realm/realm-java/issues/6653))\n* The error message shown when no native code could be found for the device is now much more descriptive. This is particular helpful if an app is using App Bundle or APK Split and the resulting APK was side-loaded outside the Google Play Store. (Issue [#6673](https://github.com/realm/realm-java/issues/6673))\n* `RealmResults.asJson()` now encode binary data as Base64 and null object links are reported as `null` instead of `[]`.\n\n### Fixed\n* Fixed using `RealmList` with a primitive type sometimes crashing with `Destruction of mutex in use`. (Issue [#6689](https://github.com/realm/realm-java/issues/6689))\n* `RealmObjectSchema.transform()` would crash if one of the `DynamicRealmObject` provided are deleted from the Realm. (Issue [#6657](https://github.com/realm/realm-java/issues/6657), since 0.86.0)\n* The Realm Transformer will no longer attempt to send anonymous metrics when Gradle is invoked with `--offline`. (Issue [#6691](https://github.com/realm/realm-java/issues/6691))\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 6.x.y series.\n\n### Internal\n* Updated to ReLinker 1.4.0.\n* Updated to Object Store commit: 2a204063e1e1a366efbdd909fbea9effceb7d3c4.\n* Updated to Realm Sync 4.9.4.\n* Updated to Realm Core 5.23.8.\n\n### Credits\n* Thanks to @sellmair (Sebastian Sellmair) for improving Kotlin Multiplatform support.\n\n\n## 6.0.2(2019-11-21)\n\n### Enhancements\n* None.\n\n### Fixed\n* [ObjectServer] `SyncSession` progress listeners now work correctly in combination with `SyncConfiguration.waitForInitialRemoteData()`.\n* The `@RealmModule` annotation would be stripped on an empty class when using R8 resulting in apps crashing on startup with `io.realm.DefaultRealmModule is not a RealmModule. Add @RealmModule to the class definition.`. ([#6449](https://github.com/realm/realm-java/issues/6449))\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 6.x.y series.\n\n### Internal\n* Updated to Object Store commit: ad96a4c334b475dd67d50c1ca419e257d7a21e18.\n* Updated to Realm Sync v4.8.3.\n\n## 6.0.1(2019-11-11)\n\nNOTE: Anyone using encrypted Realms are strongly advised to upgrade to this version.\n\n### Enhancements\n* None\n\n### Fixed\n* When using encrypted Realms a race condition could lead to the Realm ending up corrupted when the file increased in size. This could manifest as a wide array of different error messages. Most commonly seen has been \"Fatal signal 11 (SIGSEGV) from Java_io_realm_internal_UncheckedRow_nativeGetString\", \"RealmFileException: Top ref outside file\" and \"Unable to open a realm at path. ACCESS_ERROR: Invalid mnemonic\". ([#6152](https://github.com/realm/realm-java/issues/6152), since 5.0.0)\n* `RealmResults.asJSON()` now prints lists with primitive values directly instead of wrapping each value in an object with an `!ARRAY_VALUE` property.\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 6.x.y series.\n\n### Internal\n* Updated to Realm Sync 4.7.12.\n* Updated to Realm Core 5.23.6.\n\n### Credits\n* Thanks to Vladimir Konkov (@vladimirfx) for help with isolating ([#6152](https://github.com/realm/realm-java/issues/6152)).\n\n\n## 6.0.0(2019-10-01)\n\n### Breaking Changes\n* [ObjectServer] The `PermissionManager` is no longer backed by Realms but instead a REST API. This means that the `PermissionManager` class has been removed and all methods have been moved to `SyncUser`. Some method names have been renamed slightly and return values for methods have changed from `RealmResults<Permission>` to `List<Permission>`. This should only have an impact if change listeners were used to listen for changes. In these cases, you must now manually retry the request.\n\n### Enhancements\nNone.\n\n### Fixed\nNone.\n\n### Compatibility\n* Realm Object Server: 3.23.1 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 6.x.y series.\n\n### Internal\n* [ObjectServer] The OKHttp client will now follow redirects from the Realm Object Server.\n\n\n## 5.15.2(2019-09-30)\n\n### Enhancements\n* None.\n\n### Fixed\n* `null` values were not printed correctly when using `RealmResults.asJSON()` (Realm Core Issue [#3399](https://github.com/realm/realm-core/pull/3399))\n* [ObjectServer] Queries with nullable `Date`'s did not serialize correctly. Only relevant if using Query-based Synchronization. (Realm Core issue [#3388](https://github.com/realm/realm-core/pull/3388))\n* [ObjectServer] Fixed crash with `java.lang.IllegalStateException: The following changes cannot be made in additive-only schema mode` when opening an old Realm created between Realm Java 5.10.0 and Realm Java 5.13.0. (Issue [#6619](https://github.com/realm/realm-java/issues/6619), since 5.13.0).\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Object Store commit: 8416010e4be5e32ba552ff3fb29e500f3102d3db.\n* Updated to Realm Sync 4.7.8.\n* Updated to Realm Core 5.23.5.\n* Updated Docker image used on CI to Node 10.\n\n\n## 5.15.1(2019-09-09)\n\n### Enhancements\n* None.\n\n### Fixed\n* Projects with `flatDirs` repositories defined crashed the build with `MissingPropertyException`. (Issue [#6610](https://github.com/realm/realm-java/issues/6610), since 5.15.0).\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* None.\n\n## 5.15.0(2019-09-05)\n\n### Enhancements\n* [ObjectServer] Added support for Client Resync for fully synchronized Realms which automatically will recover the local Realm in case the server is rolled back. This largely replaces the Client Reset mechanism. Can be configured using `SyncConfiguration.Builder.clientResyncMode()`. (Issue [#6487](https://github.com/realm/realm-java/issues/6487))\n\n### Fixed\n* Huawei devices reporting `Permission denied` when opening a Realm file after an app upgrade or factory reset. This does not automatically fix already existing Realm files. See [this FAQ entry](https://realm.io/docs/java/latest/#huawei-permission-denied) for more details. (Issue [#5715](https://github.com/realm/realm-java/issues/5715))\n* `Realm.copyToRealm()` and `Realm.insertOrUpdate()` crashed on model classes if `@LinkingObjects` was used to target a field with a re-defined internal name in the parent class (e.g. by using `@RealmField`). (Issue [#6581](https://github.com/realm/realm-java/issues/6581))\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Implemented direct access to sync workers on Cloud, bypassing the Sync Proxy: the binding will override the sync session's url prefix if the token refresh response for a realm contains a sync worker path field.\n* Updated to Object Store commit: 9f19d79fde248ba37cef0bd52fe64984f9d71be0.\n* Updated to Realm Sync 4.7.4.\n* Updated to Realm Core 5.23.2.\n\n\n## 5.14.0(2019-08-12)\n\n### Deprecated\n* [ObjectServer] `SyncCredentials.nickname()` has been deprecated in favour of `SyncCredentials.usernamePassword()`.\n* [ObjectServer] `SyncCredentials.IdentityProvider.NICKNAME` has been deprecated in favour of `SyncCredentials.IdentityProvider.USERNAME_PASSWORD`.\n\n### Enhancements\n* None.\n\n### Fixed\n* None.\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* None.\n\n\n## 5.13.1(2019-08-05)\n\n### Enhancements\n* None.\n\n### Fixed\n* [ObjectServer] The C++ networking layer now correctly uses any system defined proxy the same way the Java networking layer does. (Issue [#6574](https://github.com/realm/realm-java/pull/6574)).\n* The Realm bytecode transformer now works correctly with Android Gradle Plugin 3.6.0-alpha01 and beyond. (Issue [#6531](https://github.com/realm/realm-java/issues/6531)).\n* Queries on RealmLists with objects containing indexed integers could return the wrong result. (Issue [#6522](https://github.com/realm/realm-java/issues/6522), since 5.11.0)\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated JavaAssist in the Realm Transformer to 3.25.0-GA.\n* Updated to Realm Core 5.23.1.\n* Updated to Realm Sync 4.7.1.\n* Updated to Object Store commit: bcc6a7524e52071bfcd35cf740f506e0cc6a595e\n\n\n## 5.13.0(2019-07-23)\n\n### Enhancements\n* [ObjectServer] Added support for faster initial synchronization for fully synchronized Realms. (Issue [#6469](https://github.com/realm/realm-java/issues/6469))\n* [ObjectServer] Improved session lifecycle debug output. (Issue [#6552](https://github.com/realm/realm-java/pull/6552)).\n\n### Fixed\n* None.\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Realm Core 5.22.0.\n* Updated to Realm Sync 4.6.1.\n* Updated to Object Store commit f0d75261fc8d332c20dc82f643dd795c0f4c7aec\n\n\n## 5.12.0(2019-06-20)\n\n### Enhancements\n* [ObjectServer] Added `SyncManager.refreshConnections()` that can be used to manually trigger a reconnect for all sessions. This is useful if the device has been offline for a long time or fail to detect that it regained connectivity. (Issue [#259](https://github.com/realm/realm-java-private/issues/259))\n* Added `RealmResults.asJson()` in `@Beta` that returns the result of the query as a JSON payload (#6540).\n\n### Fixed\n* [ObjectServer] `PermissionManager` stopped working if an intermittent network error was reported. (Issue [#6492](https://github.com/realm/realm-java/issues/6492), since 3.7.0)\n* The Kotlin extensions library no longer defines a `app_name`, which in some cases conflicted with the `app_name` defined by applications. (Issue [#6536](https://github.com/realm/realm-java/issues/6536), since 4.3.0)\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Realm Core 5.22.0.\n* Updated to Realm Sync 4.6.1.\n* Updated to Object Store commit 7c3ff8235579550a3e3c6060c47140b2005174f5\n\n## 5.11.0(2019-05-01)\n\nNOTE: This version is only compatible with Realm Object Server 3.21.0 or later.\n\n### Enhancements\n* [ObjectServer] Added `RealmQuery.includeLinkingObjects()`. This is only relevant for Query-based Realms and tells subscriptions to include objects linked through `@LinkingObjects` fields as part of the subscription as well. Objects referenced through objects and lists are always included as a default. (Issue [#6426](https://github.com/realm/realm-java/issues/6426))\n* Encryption now uses hardware optimized functions, which significantly improves the performance of encrypted Realms. ([Realm Core PR #3241](https://github.com/realm/realm-core/pull/3241))\n* Improved query performance when using `RealmQuery.in()` queries. ([Realm Core PR #3250](https://github.com/realm/realm-core/pull/3250)).\n* Improved query performance when querying Integer fields with indexes, e.g. primary key fields. ([Realm Core PR #3272](https://github.com/realm/realm-core/pull/3272)).\n* Improved write performance when writing changes to disk ([Realm Core PR #2927](https://github.com/realm/realm-sync/issues/2927))\n* Added support for incremental annotation processing added in Gradle 4.7. (Issue [#5906](https://github.com/realm/realm-java/issues/5906)).\n\n### Fixed\n* [ObjectServer] Fix an error in the calculation of the `downloadableBytes` value sent by `ProgressListeners`.\n* [ObjectServer] HTTP requests made by the Sync client now always include a Host: header, as required by HTTP/1.1, although its value will be empty if no value is specified by the application.\n* [ObjectServer] The server no longer rejects subscriptions based on queries with distinct and/or limit clauses.\n* [ObjectServer] If a user had `canCreate` but not `canUpdate` privileges on a class, the user would be able to create the object, but not actually set any meaningful values on that object, despite the rule that objects created within the same transaction can always be modified.\n*  Native crash happening if bulk updating a field in a `RealmResult` would cause the object to no longer be part of the query result. (Issue [#6478](https://github.com/realm/realm-java/issues/6478), since 5.8.0).\n\n### Compatibility\n* Realm Object Server: 3.21.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Realm Core 5.19.1.\n* Updated to Relm Sync 4.4.2.\n* Updated to Object Store commit e4b1314d21b521fd604af7f1aacf3ca94272c19a\n\n\n## 5.10.0(2019-03-22)\n\n### Enhancements\n* [ObjectServer] Added 4 new fields to query-based Subscriptions: `createdAt`, `updatedAt`, `expiresAt` and `timeToLive`. These make it possible to better reason about and control current subscriptions. (Issue [#6453](https://github.com/realm/realm-java/issues/6453))\n* [ObjectServer] Added the option of updating the query controlled by a Subscription using either `RealmQuery.findAllAsync(String name, boolean update)`,  `RealmQuery.subscribe(String name, boolean update)` or `Subscription.setQuery(RealmQuery query)`. (Issue [#6453](https://github.com/realm/realm-java/issues/6453))\n* [ObjectServer] Added the option of setting a time-to-live for subscriptions. Setting this will automatically delete the subscription after the provided TTL has expired and the subscription hasn't been used. (Issue [#6453](https://github.com/realm/realm-java/issues/6453))\n\n### Fixed\n* Dates returned from the Realm file no longer overflow or underflow if they exceed `Long.MAX_VALUE` or `Long.MIN_VALUE` but instead clamp to their respective value. (Issue [#2722](https://github.com/realm/realm-java/issues/2722))\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats).\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Object Store commit: e9819ed9c77ed87b5d7bed416a76cd5bcf255802\n\n\n## 5.9.1(2019-02-21)\n\n### Enhancements\n* None\n\n### Fixed\n* [ObjectServer] Reporting too many errors from the native layer resulted in a native crash with `local reference table overflow`. (Issue [#249](https://github.com/realm/realm-java-private/issues/249), since 5.9.0)\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* None\n\n## 5.9.0(2019-01-15)\n\n### Enhancements\n* [ObjectServer] Added `ObjectServerError.getErrorType()` and `ObjectServerError.getErrorType()` which returns the underlying native error information. This is especially relevant if `ObjectServerError.getErrorCode()` returns `UNKNOWN`. [#6364](https://github.com/realm/realm-java/issues/6364)\n* Added better checks for detecting corrupted files, both before and after the file is written to disk.\n\n### Fixed\n* [ObjectServer] Native errors sometimes mapped to the wrong Java ErrorCode. (Issue [#6364](https://github.com/realm/realm-java/issues/6364), since 2.0.0)\n* [ObjectServer] Query-based Sync queries involving LIMIT, limited the result before permissions were evaluated. This could sometimes result in the wrong number of elements being returned.\n* Removed Java 8 bytecode. Resulted in errors like `D8: Invoke-customs are only supported starting with Android O (--min-api 26)` if not compiled with Java 8. (Issue [#6300](https://github.com/realm/realm-java/issues/6300), since 5.8.0).\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Object Store commit: f964c2640f635e76839559cb703732e9e906ba4c\n* Updated Realm Sync to 3.14.13\n* Updated Realm Core to 5.12.7\n\n\n## 5.8.0 (2018-11-06)\n\nThis release also contains all changes from 5.8.0-BETA1 and 5.8.0-BETA2.\n\n### Enhancements\n* [ObjectServer] Added Subscription class available to Query-based Realms. This exposes a Subscription more directly. This class is in beta. [#6231](https://github.com/realm/realm-java/pull/6231).\n  * [ObjectServer] Added `Realm.getSubscriptions()`, `Realm.getSubscriptions(String pattern)` and `Realm.getSubscription` to make it easier to find existing subscriptions. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)\n  * [ObjectServer] Added `RealmQuery.subscribe()` and `RealmQuery.subscribe(String name)` to subscribe immediately inside a transaction. These API's are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)\n  * [ObjectServer] Added support for subscribing directly inside `SyncConfiguration.initialData()`. This can be coupled with `SyncConfiguration.waitForInitialRemoteData()` in order to block a Realm from opening until the initial subscriptions are ready and have downloaded data. This API are in beta. [#6231](https://github.com/realm/realm-java/pull/6231)\n* [ObjectServer] Improved performance when merging changes from the server.\n* [ObjectServer] Added support for timeouts when uploading or downloading data manually using `SyncSession.downloadAllServerChanges(long timeout, TimeUnit unit)` and `SyncSession.uploadAllLocalChanges(long timeout, TimeUnit unit)`. [#6073](https://github.com/realm/realm-java/pull/6073)\n* [ObjectServer] Added support for timing out when downloading initial data for synchronized Realms using `SyncConfiguration.waitForInitialRemoteData(long timeout, TimeUnit unit)`. [#6247](https://github.com/realm/realm-java/issues/6247)\n* [ObjectServer] Added `Realm.init(Context, String)` which defines a custom User-Agent String sent to the Realm Object Server when a session is created. Using this requires Realm Object Server 3.12.4 or later. [#6267](https://github.com/realm/realm-java/issues/6267)\n* Added support for `ImportFlag`s to `Realm.copyToRealm()` and `Realm.copyToRealmOrUpdate()`. This makes it possible to choose a mode so only fields that actually changed are written to disk. This improves notifications and Object Server performance. [#6224](https://github.com/realm/realm-java/pull/6224)\n* Added support for bulk updating the same property in all objects that are part of a query result using `RealmResults.setValue(String fieldName, Object value)` or one of the specialized overrides that have been added for all supported types, e.g. `RealmResults.setString(String fieldName, String value)`. [#762](https://github.com/realm/realm-java/issues/762)\n\n### Fixed\n* All known bugs introduced in 5.8.0-BETA1 and 5.8.0-BETA2. See the release notes for these releases.\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Object Store commit: f0dfe6c03be49194bc40777901059eaf55e7bff6\n* Updated Realm Sync to 3.13.1\n* Updated Realm Core to 5.12.0\n\n\n## 5.8.0-BETA2 (2018-10-19)\n\n### Enhancements\n* None\n\n### Fixed\n* `RealmResults` listeners not triggering the initial callback for Query-based Realm when the device is offline [#6235](https://github.com/realm/realm-java/issues/6235).\n\n### Known Bugs\n* `Realm.copyToRealm()` and `Realm.copyToRealmOrUpdate` has been rewritten to support import flags. It is currently ~30% slower than in 5.7.0.\n* IllegalStateException thrown when trying to create an object with a primary key that already exists when using `Realm.copyToRealm`, will always report \"null\" instead of the correct primary key value.\n* When using `ImportFlag.DO_NOT_SET_SAME_VALUES`, lists will still be written and reported as changed, even if they didn't change.\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* None\n\n\n## 5.8.0-BETA1 (2018-10-11)\n\n### Enhancements\n* Added new `ImportFlag` class that is used to specify additional behaviour when importing\n  data into Realm [#6224](https://github.com/realm/realm-java/pull/6224).\n* Added support for `ImportFlag` to `Realm.copyToRealm()` and `Realm.copyToRealmOrUpdate()` [#6224](https://github.com/realm/realm-java/pull/6224).\n\n### Fixed\n* None\n\n### Known Bugs\n* `Realm.copyToRealm()` and `Realm.copyToRealmOrUpdate` has been rewritten to support import flags. It is currently ~30% slower than in 5.7.0.\n* IllegalStateException thrown when trying to create an object with a primary key that already exists when using `Realm.copyToRealm`, will always report \"null\" instead of the correct primary key value.\n* When using `ImportFlag.DO_NOT_SET_SAME_VALUES`, lists will still be written and reported as changed, even if they didn't change.\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n\n## 5.7.1 (2018-10-22)\n\n### Enhancements\n* None\n\n### Fixed\n* [ObjectServer] `RealmResults` listeners not triggering the initial callback for Query-based Realm when the device is offline. (Issue [#6235](https://github.com/realm/realm-java/issues/6235), since 5.0.0).\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated to Object Store commit: 362b886628b3aefc5b7a0bc32293d794dc1d4ad5\n\n\n## 5.7.0 (2018-09-24)\n\n### Enhancements\n* [ObjectServer] Devices will now report download progress for read-only Realms which\n  will allow the server to compact files sooner, saving server space. This does not affect\n  the client. You will need to upgrade your Realm Object Server to at least version 3.11.0\n  or use [Realm Cloud](https://cloud.realm.io). If you try to connect to a ROS v3.10.x or\n  previous, you will see an error like `Wrong protocol version in Sync HTTP request,\n  client protocol version = 25, server protocol version = 24`.\n\n### Fixed\n* None\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Sync Protocol version increased to 25.\n* Updated Realm Sync to 3.10.1\n* Updated Realm Core to 5.10.2\n\n\n## 5.6.0 (2018-09-24)\n\n### Enhancements\n* [ObjectServer] Added `RealmPermissions.findOrCreate(String roleName)` and\n  `ClassPermissions.findOrCreate(String roleName)` ([#6168](https://github.com/realm/realm-java/issues/6168)).\n* `@RealmClass(\"name\")` and `@RealmField(\"name\")` can now be used as a shorthand for defining custom\n  name mappings ([#6145](https://github.com/realm/realm-java/issues/6145)).\n* Added support for `RealmQuery.limit(long limit)` ([#544](https://github.com/realm/realm-java/issues/544)).\n  When building a `RealmQuery`, `sort()`, `distinct()` and `limit()` will now be applied in the order\n  they are called. Before this release, `sort()`  and `distinct()` could be called any order, but\n  `sort()` would always be applied before `distinct()`.\n* Building with Android App Bundle is now supported ([#5977](https://github.com/realm/realm-java/issues/5977)).\n\n### Fixed\n* None\n\n### Compatibility\n* Realm Object Server: 3.11.0 or later.\n* File format: Generates Realms with format v9 (Reads and upgrades all previous formats)\n* APIs are backwards compatible with all previous release of realm-java in the 5.x.y series.\n\n### Internal\n* Updated ReLinker to 1.3.0.\n* Updated to Object Store commit: 7e19c51af72c3343b453b8a13c82dfda148e4bbc\n\n\n## 5.5.0 (2018-08-31)\n\n### Enhancements\n* [ObjectServer] Added `ConnectionState` enum describing the states a connection can be in.\n* [ObjectServer] Added `SyncSession.isConnected()` and `SyncSession.getConnectionState()`.\n* [ObjectServer] Added support for observing connection changes for a session using `SyncSession.addConnectionChangeListener()` and `SyncSession.removeConnectionChangeListener()`.\n* [ObjectServer] Added Kotlin extension property `Realm.syncSession` for synchronized Realms.\n* [ObjectServer] Added Kotlin extension method `Realm.classPermissions<RealmModel>()`.\n* [ObjectServer] Added support for starting and stopping synchronization using `SyncSession.start()` and `SyncSession.stop()` (#6135).\n* [ObjectServer] Added API's for making it easier to work with network proxies (#6163):\n  * `SyncManager.setAuthorizationHeaderName(String headerName)`\n  * `SyncManager.setAuthorizationHeaderName(String headerName, String host)`\n  * `SyncManager.addCustomRequestHeader(String headerName, String headerValue)`\n  * `SyncManager.addCustomRequestHeader(String headerName, String headerValue, String host)`\n  * `SyncManager.addCustomRequestHeaders(Map<String, String> headers)`\n  * `SyncManager.addCustomRequestHeaders(Map<String, String> headers, String host)`\n  * `SyncConfiguration.Builder.urlPrefix(String prefix)`\n\n### Fixed\n* Methods and classes requiring synchronized Realms have been removed from the standard AAR package. They are now only visible when enabling synchronized Realms in Gradle. The methods and classes will still be visible in the source files and docs, but annotated with `@ObjectServer` (#5799).\n\n### Internal\n* Updated to Realm Sync 3.9.4\n* Updated to Realm Core 5.8.0\n* Updated to Object Store commit: b0fc2814d9e6061ce5ba1da887aab6cfba4755ca\n\n### Credits\n* Thanks to @lucasdornelasv for improving the performance of `Realm.copyToRealm()`, `Realm.copyToRealmOrUpdate()` and `Realm.copyFromRealm()` #(6124).\n\n\n## 5.4.3 (YYYY-MM-DD)\n\n### Bug Fixes\n\n* [ObjectServer] ProGuard was not configured correctly when working with Subscriptions for Query-based Realms.\n\n\n## 5.4.2 (2018-08-09)\n\n### Bug Fixes\n\n* [ObjectServer] Fixed bugs in the Sync Client that could lead to memory corruption and crashes.\n\n### Internal\n\n* Upgraded to Realm Sync 3.8.8\n\n\n## 5.4.1 (2018-08-03)\n\n### Bug Fixes\n\n* Compile time crash if no `targetSdk` was defined in Gradle. This was introduced in 5.4.0 (#6082).\n* Fix Realm Gradle Plugin adding dependencies in a way incompatible with Kotlin Android Extensions. This was introduced in Realm Java 5.4.0 (#6080).\n\n\n## 5.4.0 (2018-07-22)\n\n### Enhancements\n\n* Removing a ChangeListener on invalid objects or `RealmResults` should warn instead of throwing (fixes #5855).\n\n### Bug Fixes\n\n* [ObjectServer] Using Android Network Security Configuration is necessary to install the custom root CA for tests (API >= 24) (#5970).\n* Fixes issue with the incremental build causing direct access to model without accessor to fail (#6056).\n* `RealmQuery.distinct()` is now correctly applied when calling `RealmQuery.count()` (#5958).\n\n### Internal\n\n* Upgraded to Realm Core 5.7.2\n* Upgraded to Realm Sync 3.8.1\n* [ObjectServer] Improved performance when integrating changes from the server.\n* Added extra information about the state of the Realm file if an exception is thrown due to Realm not being able to open it.\n* Removed internal dependency on Groovy in the Realm Transformer (#3971).\n\n### Credits\n\n* Thanks to @kageiit for removing Groovy from the Realm Transformer (#3971).\n\n\n## 5.3.1 (2018-06-19)\n\n### Bug Fixes\n\n* [ObjectServer] Fixed a bug which could potentially flood Realm Object Server with PING messages.\n* Calling `Realm.deleteAll()` on a Realm file that contains more classes than in the schema throws exception (#5745).\n* `Realm.isEmpty()` returning false in some cases, even if all tables part of the schema are empty (#5745).\n* Fixed rare native crash materializing as `Assertion failed: ref + size <= after_ref with (ref, size, after_ref, ndx, m_free_positions.size())` (#5300).\n\n### Internal\n\n* Upgraded to Realm Core 5.6.2\n* Upgraded to Realm Sync 3.5.6\n* Upgraded to Object Store commit `0bcb9643b8fb14323df697999b79c4a5341a8a21`\n\n\n## 5.3.0 (2018-06-12)\n\n### Enhancements\n\n* [ObjectServer] `Realm.compactRealm(config)` now works on synchronized Realms (#5937).\n* [ObjectServer] `SyncConfiguration.compactOnLaunch()` and `SyncConfiguration.compactOnLaunch(callback)` has been added (#5937).\n* Added `RealmQuery.getRealm()`, `RealmResults.getRealm()`, `RealmList.getRealm()` and `OrderedRealmCollectionSnapshot.getRealm()` (#5997).\n* Removing a ChangeListener on invalid objects or `RealmResults` should warn instead of throwing (fixes #5855).\n\n\n### Internal\n\n* Upgraded to Realm Core 5.6.0\n* Upgraded to Realm Sync 3.5.2\n\n\n## 5.2.0 (2018-06-06)\n\nThe feature previously named Partial Sync is now called Query-Based Sync and is now the default mode when synchronizing Realms.\nThis has impacted a number of API's. See below for the details.\n\n### Deprecated\n\n* [ObjectServer] `SyncConfiguration.automatic()` has been deprecated in favour of `SyncUser.getDefaultConfiguration()`.\n* [ObjectServer] `new SyncConfiguration.Builder(user, url)` has been deprecated in favour of `SyncUser.createConfiguration(url)`. NOTE: Creating configurations using `SyncUser` will default to using query-based Realms, while creating them using `new SyncConfiguration.Builder(user, url)` will default to fully synchronized Realms.\n* [ObjectServer] With query-based sync being the default `SyncConfiguration.Builder.partialRealm()` has been deprecated. Use `SyncConfiguration.Builder.fullSynchronization()` if you want full synchronisation instead.\n\n### Enhancements\n\n* [ObjectServer] Added `SyncUser.createConfiguration(url)`. Realms created this way are query-based Realms by default.\n* [ObjectServer] Added `SyncUser.getDefaultConfiguration()`.\n* The Realm bytecode transformer now supports incremental builds (#3034).\n* Improved speed and allocations when parsing field descriptions in queries (#5547).\n\n### Bug Fixes\n\n* Having files that ends with `RealmProxy` will no longer break the Realm Transformer (#3709).\n\n### Internal\n\n* Module mediator classes being generated now produces a stable output enabling better support for incremental builds (#3034).\n\n\n## 5.1.0 (2018-04-25)\n\n### Enhancements\n\n* [ObjectServer] Added support for `SyncUser.requestPasswordReset()`, `SyncUser.completePasswordReset()`\n  and their async variants. This makes it possible to reset the password for users created using\n  `Credentials.usernamePassword()` where they used their email as username (#5821).\n* [ObjectServer] Added support for `SyncUser.requestEmailConfirmation()`, `SyncUser.confirmEmail()`\n  and their async variants. This makes it possible to ask users to confirm their email. This is only\n  supported for users created using `Credentials.usernamePassword()` who have used an email as their\n  username (#5821).\n* `RealmQuery.in()` now support `null` which will always return no matches (#4011).\n* Added support for `RealmQuery.alwaysTrue()` and `RealmQuery.alwaysFalse()`.\n\n### Bug Fixes\n\n* Changing a primary key from being nullable to being required could result in objects being deleted (##5899).\n\n\n## 5.0.1 (2018-04-09)\n\n### Enhancements\n\n* [ObjectServer] `SyncConfiguration.automatic()` will make use of the host port to work out the default Realm URL.\n* [ObjectServer] A role is now automatically created for each user with that user as its only member. This simplifies the common use case of restricting access to specific objects to a single user. This role can be accessed at `PermissionUser.getRole()`.\n* [ObjectServer] Expose `Role.getMembers()` to access the list of associated `UserPermission`.\n\n### Bug Fixes\n\n* `RealmList.move()` did not move items correctly for unmanaged lists (#5860).\n* `RealmObject.isValid()` not correctly returns `false` if `null` is provided as an argument (#5865).\n* `RealmQuery.findFirst()` and `RealmQuery.findFirstAsync()` not working correctly with sorting (#5714).\n* Permission `noPrivileges` and `allPrivileges` were returning opposite privileges.\n* Fixes an issue caused by JNI local table reference overflow (#5880).\n\n### Internal\n\n* Upgraded to Realm Sync 3.0.1\n* Upgraded to Realm Core 5.4.2\n\n## 5.0.0 (2018-03-15)\n\nThis release is compatible with the Realm Object Server 3.0.0-beta.3 or later.\n\n### Known Bugs\n\n* API's marked @ObjectServer are shipped as part of the base binary, they should only be available when enabling synchronized Realms.\n\n### Breaking Changes\n\n* [ObjectServer] Renamed `SyncUser.currentUser()` to `SyncUser.current()`.\n* [ObjectServer] Renamed `SyncUser.login(...)` and `SyncUser.loginAsync(...)` to `SyncUser.logIn(...)` and `SyncUser.logInAsync(...)`.\n* [ObjectServer] Renamed `SyncUser.logout()` to `SyncUser.logOut()`.\n* The `OrderedCollectionChangeSet` parameter in `OrderedRealmCollectionChangeListener.onChange()` is no longer nullable. Use `changeSet.getState()` instead (#5619).\n* `realm.subscribeForObjects()` have been removed. Use `RealmQuery.findAllAsync(String subscriptionName)` and `RealmQuery.findAllAsync()` instead.\n* Removed previously deprecated `RealmQuery.findAllSorted()`, `RealmQuery.findAllSortedAsync()` `RealmQuery.distinct()` and `RealmQuery.distinctAsync()`.\n* Renamed `RealmQuery.distinctValues()` to `RealmQuery.distinct()`\n\n### Enhancements\n\n* [ObjectServer] Added support for partial Realms. Read [here](https://realm.io/docs/java/latest/#partial-realms) for more information.\n* [ObjectServer] Added support for Object Level Permissions (requires partial synchronized Realms). Read [here](https://realm.io/docs/java/latest/#partial-realms) for more information.\n* [ObjectServer] Added `SyncConfiguration.automatic()` and `SyncConfiguration.automatic(SyncUser user)` (#5806).\n* Added two new methods to `OrderedCollectionChangeSet`: `getState()` and `getError()` (#5619).\n\n## Bug Fixes\n\n* Better exception message if a non model class is provided to methods only accepting those (#5779).\n\n### Internal\n\n* Upgraded to Realm Sync 3.0.0\n* Upgraded to Realm Core 5.3.0\n\n\n## 4.4.0 (2018-03-13)\n\n### Enhancements\n\n* Added support for mapping between a Java name and the underlying name in the Realm file using `@RealmModule`, `@RealmClass` and `@RealmField` annotations (#5280).\n\n## Bug Fixes\n\n* [ObjectServer] Fixed an issue where login after a logout will not resume Syncing (https://github.com/realm/my-first-realm-app/issues/22).\n\n\n## 4.3.4 (2018-02-06)\n\n## Bug Fixes\n\n* Added missing `RealmQuery.oneOf()` for Kotlin that accepts non-nullable types (#5717).\n* [ObjectServer] Fixed an issue preventing sync to resume when the network is back (#5677).\n\n## 4.3.3 (2018-01-19)\n\n### Internal\n\n* Downgrade JavaAssist to 3.21.0-GA to fix an issue with a `ClassNotFoundException` at runtime (#5641).\n\n\n## 4.3.2 (2018-01-17)\n\n### Bug Fixes\n\n* Throws a better exception message when calling `RealmObjectSchema.addField()` with a `RealmModel` class (#3388).\n* Use https for Realm version checker (#4043).\n* Prevent Realms Gradle plugin from transitively forcing specific versions of Google Build Tools onto downstream projects (#5640).\n* [ObjectServer] logging a warning message instead of throwing an exception, when sync report an unknown error code (#5403).\n\n### Enhancements\n\n* [ObjectServer] added support for both Anonymous and Nickname authentication.\n\n\n### Internal\n\n* Upgraded to Realm Sync 2.2.9\n* Upgraded to Realm Core 5.1.2\n\n## 4.3.1 (2017-12-06)\n\n### Bug Fixes\n\n* Fixed kotlin standard library being added to both Java and Kotlin projects (#5587).\n\n\n## 4.3.0 (2017-12-05)\n\n### Deprecated\n\n* Support for mips devices are deprecated.\n* `RealmQuery.findAllSorted()` and `RealmQuery.findAllSortedAsync()` variants in favor of predicate `RealmQuery.sort().findAll()`.\n* `RealmQuery.distinct()` and `RealmQuery.distinctAsync()` variants in favor of predicate `RealmQuery.distinctValues().findAll()`\n\n### Enhancements\n\n* [ObjectServer] Added explicit support for JSON Web Tokens (JWT) using `SyncCredentials.jwt(String token)`. It requires Object Server 2.0.23+ (#5580).\n* Projects using Kotlin now include additional extension functions that make working with Kotlin easier. See [docs](https://realm.io/docs/java/latest/#kotlin) for more info (#4684).\n* New query predicate: `sort()`.\n* New query predicate: `distinctValues()`. Will be renamed to `distinct` in next major version.\n* The Realm annotation processor now has a stable output when there are no changes to model classes, improving support for incremental compilers (#5567).\n\n### Bug Fixes\n\n* Added missing `toString()` for the implementation of `OrderedCollectionChangeSet`.\n* Sync queries are evaluated immediately to solve the performance issue when the query results are huge, `RealmResults.size()` takes too long time (#5387).\n* Correctly close the Realm instance if an exception was thrown while opening it. This avoids `IllegalStateException` when deleting the Realm in the catch block (#5570).\n* Fixed the listener on `RealmList` not being called when removing the listener then adding it again (#5507). Please notice that a similar issue still exists for `RealmResults`.\n\n### Internal\n\n* Use `OsList` instead of `OsResults` to add notification token on for `RealmList<RealmModel>`.\n* Updated Gradle and plugins to support Android Studio `3.0.0` (#5472).\n* Upgraded to Realm Sync 2.1.8.\n* Upgraded to Realm Core 4.0.4.\n\n### Credits\n\n* Thanks to @tbsandee for fixing a typo (#5548).\n* Thanks to @vivekkiran for updating Gradle and plugins to support Android Studio `3.0.0` (#5472).\n* Thanks to @madisp for adding better support for incremental compilers (#5567).\n\n\n## 4.2.0 (2017-11-17)\n\n### Enhancements\n\n* Added support for using non-encrypted Realms in multiple processes. Some caveats apply. Read [doc](https://realm.io/docs/java/latest/#multiprocess) for more info (#1091).\n* Added support for importing primitive lists from JSON (#5362).\n* [ObjectServer] Support SSL validation using Android TrustManager (no need to specify `trustedRootCA` in `SynConfiguration` if the certificate is installed on the device), fixes (#4759).\n* Added the and() function to `RealmQuery` in order to improve readability.\n\n### Bug Fixes\n\n* Leaked file handler in the Realm Transformer (#5521).\n* Potential fix for \"RealmError: Incompatible lock file\" crash (#2459).\n\n### Internal\n\n* Updated JavaAssist to 3.22.0-GA.\n* Upgraded to Realm Sync 2.1.4.\n* Upgraded to Realm Core 4.0.3.\n\n### Credits\n\n* Thanks to @rakshithravi1997 for adding `RealmQuery.and()` (#5520).\n\n\n## 4.1.1 (2017-10-27)\n\n### Bug Fixes\n\n* Fixed the compile warnings of using deprecated method `RealmProxyMediator.getTableName()` in generated mediator classes (#5455).\n* [ObjectServer] now retrying network query when encountering any `IOException` (#5453).\n* Fixed a `NoClassDefFoundError` due to using `@SafeVarargs` below API 19 (#5463).\n\n### Internal\n\n* Updated Realm Sync to 2.1.0.\n\n\n## 4.1.0 (2017-10-20)\n\n### Enhancements\n\n* `Realm.deleteRealm()` and `RealmConfiguration.assetFile()` are multi-processes safe now.\n\n### Bug Fixes\n\n* Fix some potential database corruption caused by deleting the Realm file while a Realm instance are still opened in another process or the sync client thread.\n* Added `realm.ignoreKotlinNullability` as a kapt argument to disable treating kotlin non-null types as `@Required` (#5412) (introduced in `v3.6.0`).\n* Increased http connect/write timeout for low bandwidth network.\n\n\n## 4.0.0 (2017-10-16)\n\n### Breaking Changes\n\nThe internal file format has been upgraded. Opening an older Realm will upgrade the file automatically, but older versions of Realm will no longer be able to read the file.\n\n* [ObjectServer] Updated protocol version to 22 which is only compatible with Realm Object Server >= 2.0.0.\n* [ObjectServer] Removed deprecated APIs `SyncUser.retrieveUser()` and `SyncUser.retrieveUserAsync()`. Use `SyncUser.retrieveInfoForUser()` and `retrieveInfoForUserAsync()` instead.\n* [ObjectServer] `SyncUser.Callback` now accepts a generic parameter indicating type of object returned when `onSuccess` is called.\n* [ObjectServer] Renamed `SyncUser.getAccessToken` to `SyncUser.getRefreshToken`.\n* [ObjectServer] Removed deprecated API `SyncUser.getManagementRealm()`.\n* Calling `distinct()` on a sorted `RealmResults` no longer clears any sorting defined (#3503).\n* Relaxed upper bound of type parameter of `RealmList`, `RealmQuery`, `RealmResults`, `RealmCollection`, `OrderedRealmCollection` and `OrderedRealmCollectionSnapshot`.\n* Realm has upgraded its RxJava1 support to RxJava2 (#3497)\n  * `Realm.asObservable()` has been renamed to `Realm.asFlowable()`.\n  * `RealmList.asObservable()` has been renamed to `RealmList.asFlowable()`.\n  * `RealmResults.asObservable()` has been renamed to `RealmResults.asFlowable()`.\n  * `RealmObject.asObservable()` has been renamed to `RealmObject.asFlowable()`.\n  * `RxObservableFactory` now return RxJava2 types instead of RxJava1 types.\n* Removed deprecated APIs `RealmSchema.close()` and `RealmObjectSchema.close()`. Those don't have to be called anymore.\n* Removed deprecated API `RealmResults.removeChangeListeners()`. Use `RealmResults.removeAllChangeListeners()` instead.\n* Removed deprecated API `RealmObject.removeChangeListeners()`. Use `RealmObject.removeAllChangeListeners()` instead.\n* Removed `UNSUPPORTED_TABLE`, `UNSUPPORTED_MIXED` and `UNSUPPORTED_DATE` from `RealmFieldType`.\n* Removed deprecated API `RealmResults.distinct()`/`RealmResults.distinctAsync()`. Use `RealmQuery.distinct()`/`RealmQuery.distinctAsync()` instead.\n* `RealmQuery.createQuery(Realm, Class)`, `RealmQuery.createDynamicQuery(DynamicRealm, String)`, `RealmQuery.createQueryFromResult(RealmResults)` and `RealmQuery.createQueryFromList(RealmList)` have been removed. Use `Realm.where(Class)`, `DynamicRealm.where(String)`, `RealmResults.where()` and `RealmList.where()` instead.\n\n### Enhancements\n\n* [ObjectServer] `SyncUserInfo` now also exposes a users metadata using `SyncUserInfo.getMetadata()`\n* `RealmList` can now contain `String`, `byte[]`, `Boolean`, `Long`, `Integer`, `Short`, `Byte`, `Double`, `Float` and `Date` values. [Queries](https://github.com/realm/realm-java/issues/5361) and [Importing primitive lists from JSON](https://github.com/realm/realm-java/issues/5362) are not supported yet.\n* Added support for lists of primitives in `RealmObjectSchema` with `addRealmListField(String fieldName, Class<?> primitiveType)`\n* Added support for lists of primitives in `DynamicRealmObject` with `setList(String fieldName, RealmList<?> list)` and `getList(String fieldName, Class<?> primitiveType)`.\n* Minor performance improvement when copy/insert objects into Realm.\n* Added `static RealmObject.getRealm(RealmModel)`, `RealmObject.getRealm()` and `DynamicRealmObject.getDynamicRealm()` (#4720).\n* Added `RealmResults.asChangesetObservable()` that emits the pair `(results, changeset)` (#4277).\n* Added `RealmList.asChangesetObservable()` that emits the pair `(list, changeset)` (#4277).\n* Added `RealmObject.asChangesetObservable()` that emits the pair `(object, changeset)` (#4277).\n* All Realm annotations are now kept at runtime, allowing runtime tools access to them (#5344).\n* Speedup schema initialization when a Realm file is first accessed (#5391).\n\n### Bug Fixes\n\n* [ObjectServer] Exposing a `RealmConfiguration` that allows a user to open the backup Realm after the client reset (#4759/#5223).\n* [ObjectServer] Realm no longer throws a native “unsupported instruction” exception in some cases when opening a synced Realm asynchronously (https://github.com/realm/realm-object-store/issues/502).\n* [ObjectServer] Fixed \"Cannot open the read only Realm\" issue when get`PermissionManager` (#5414).\n* Throw `IllegalArgumentException` instead of `IllegalStateException` when calling string/binary data setters if the data length exceeds the limit.\n* Added support for ISO8601 2-digit time zone designators (#5309).\n* \"Bad File Header\" caused by the device running out of space while compacting the Realm (#5011).\n* `RealmQuery.equalTo()` failed to find null values on an indexed field if using Case.INSENSITIVE (#5299).\n* Assigning a managed object's own list to itself would accidentally clear it (#5395).\n* Don't try to acquire `ApplicationContext` if not available in `Realm.init(Context)` (#5389).\n* Removing and re-adding a changelistener from inside a changelistener sometimes caused notifications to be missed (#5411).\n\n### Internal\n\n* Upgraded to Realm Sync 2.0.2.\n* Upgraded to Realm Core 4.0.2.\n* Upgraded to OkHttp 3.9.0.\n* Upgraded to RxJava 2.1.4.\n* Use Object Store to create the primary key table.\n\n### Credits\n\n* Thanks to @JussiPekonen for adding support for 2-digit time zone designators when importing JSON (#5309).\n\n\n## 3.7.2 (2017-09-12)\n\n### Bug Fixes\n\n* Fixed a JNI memory issue when doing queries which might potentially cause various native crashes.\n* Fixed a bug that `RealmList.deleteFromRealm(int)`, `RealmList.deleteFirstFromRealm()` and `RealmList.deleteLastFromRealm()` did not remove target objects from Realm. This bug was introduced in `3.7.1` (#5233).\n* Crash with \"'xxx' doesn't exist in current schema.\" when ProGuard is enabled (#5211).\n\n\n## 3.7.1 (2017-09-07)\n\n### Bug Fixes\n\n* Fixed potential memory leaks of `LinkView` when calling bulk insertions APIs.\n* Fixed possible assertion when using `PermissionManager` at the beginning (#5195).\n* Crash caused by JNI couldn't find `SharedRealm`'s inner classes when ProGuard is enabled (#5211).\n\n### Internal\n\n* Replaced LinkView with Object Store's List.\n* Renaming `io.realm.internal.CollectionChangeSet` to `io.realm.internal.OsCollectionChangeSet`.\n\n\n## 3.7.0 (2017-09-01)\n\n### Deprecated\n\n* [ObjectServer] `SyncUser.getManagementRealm()`. Use `SyncUser.getPermissionManager()` instead.\n\n### Enhancements\n\n* [ObjectServer] `SyncUser.getPermissionManager` added as a helper API for working with permissions and permission offers.\n\n### Internal\n\n* [ObjectServer] Upgraded OkHttp to 3.7.0.\n\n\n## 3.6.0 (2017-09-01)\n\n### Breaking Changes\n\n* [ObjectServer] `SyncUser.logout()` no longer throws an exception when associated Realms instances are not closed (#4962).\n\n### Deprecated\n\n* [ObjectServer] `SyncUser#retrieveUser` and `SyncUser#retrieveUserAsync` replaced by `SyncUser#retrieveInfoForUser`\nand `SyncUser#retrieveInfoForUserAsync` which returns a `SyncUserInfo` with mode information (#5008).\n* [ObjectServer] `SyncUser#Callback` replaced by the generic version `SyncUser#RequestCallback<T>`.\n\n### Enhancements\n\n* [ObjectServer] Added `SyncSession.uploadAllLocalChanges()`.\n* [ObjectServer] APIs of `UserStore` have been changed to support same user identity but different authentication server scenario.\n* [ObjectServer] Added `SyncUser.allSessions` to retrieve the all valid sessions belonging to the user (#4783).\n* Added `Nullable` annotation to methods that may return `null` in order to improve Kotlin usability. This also introduced a dependency to `com.google.code.findbugs:jsr305`.\n* `org.jetbrains.annotations.NotNull` is now an alias for `@Required`. This means that the Realm Schema now fully understand Kotlin non-null types.\n* Added support for new data type `MutableRealmIntegers`. The new type behaves almost exactly as a reference to a Long (mutable nullable, etc) but supports `increment` and `decrement` methods, which implement a Conflict Free Replicated Data Type, whose value will converge even when changed across distributed devices with poor connections (#4266).\n* Added more detailed exception message for `RealmMigrationNeeded`.\n* Bumping schema version only without any actual schema changes will just succeed even when the migration block is not supplied. It threw an `RealmMigrationNeededException` before in the same case.\n* Throw `IllegalStateException` when schema validation fails because of wrong declaration of `@LinkingObjects`.\n\n### Bug Fixes\n\n* Potential crash after using `Realm.getSchema()` to change the schema of a typed Realm. `Realm.getSchema()` now returns an immutable `RealmSchema` instance.\n* `Realm.copyToRealmOrUpdate()` could cause a `RealmList` field to contain duplicated elements (#4957).\n* `RealmSchema.create(String)` and `RealmObjectSchema.setClassName(String)` did not accept class name whose length was 51 to 57.\n* Workaround for an Android JVM crash when using `compactOnLaunch()` (#4964).\n* Class name in exception message from link query is wrong (#5096).\n* The `compactOnLaunch` callback is no longer invoked if the Realm at that path is already open on other threads.\n\n### Internal\n\n* [ObjectServer] removed `ObjectServerUser` and its inner classes, in a step to reduce `SyncUser` complexity (#3741).\n* [ObjectServer] changed the `SyncSessionStopPolicy` to `AfterChangesUploaded` to align with other binding and to prevent use cases where the Realm might be deleted before the last changes get synchronized (#5028).\n* Upgraded Realm Sync to 1.10.8\n* Let Object Store handle migration.\n\n\n## 3.5.0 (2017-07-11)\n\n### Enhancements\n\n* Added `RealmConfiguration.Builder.compactOnLaunch()` to compact the file on launch (#3739).\n* [ObjectServer] Adding user lookup API for administrators (#4828).\n* An `IllegalStateException` will be thrown if the given `RealmModule` doesn't include all required model classes (#3398).\n\n### Bug Fixes\n\n* Bug in `isNull()`, `isNotNull()`, `isEmpty()`, and `isNotEmpty()` when queries involve nullable fields in link queries (#4856).\n* Bug in how to resolve field names when querying `@LinkingObjects` as the last field (#4864).\n* Rare crash in `RealmLog` when log level was set to `LogLevel.DEBUG`.\n* Broken case insensitive query with indexed field (#4788).\n* [ObjectServer] Bug related to the behaviour of `SyncUser#logout` and the use of invalid `SyncUser` with `SyncConfiguration` (#4822).\n* [ObjectServer] Not all error codes from the server were recognized correctly, resulting in UNKNOWN being reported instead.\n* [ObjectServer] Prevent the use of a `SyncUser` that explicitly logged out, to open a Realm (#4975).\n\n### Internal\n\n* Use Object Store to do table initialization.\n* Removed `Table#Table()`, `Table#addEmptyRow()`, `Table#addEmptyRows()`, `Table#add(Object...)`, `Table#pivot(long,long,PivotType)` and `Table#createnative()`.\n* Upgraded Realm Core to 2.8.6\n* Upgraded Realm Sync to 1.10.5\n* Removed `io.realm.internal.OutOfMemoryError`. `java.lang.OutOfMemoryError` will be thrown instead.\n\n\n## 3.4.0 (2017-06-22)\n\n### Breaking Changes\n\n* [ObjectServer] Updated protocol version to 18 which is only compatible with ROS > 1.6.0.\n\n### Deprecated\n\n* `RealmSchema.close()` and `RealmObjectSchema.close()`. They don't need to be closed manually. They were added to the public API by mistake.\n\n### Enhancements\n\n* [ObjectServer] Added support for Sync Progress Notifications through `SyncSession.addDownloadProgressListener(ProgressMode, ProgressListener)` and `SyncSession.addUploadProgressListener(ProgressMode, ProgressListener)` (#4104).\n* [ObjectServer] Added `SyncSession.getState()` (#4784).\n* Added support for querying inverse relationships (#2904).\n* Moved inverse relationships out of beta stage.\n* Added `Realm.getDefaultConfiguration()` (#4725).\n\n### Bug Fixes\n\n* [ObjectServer] Bug which may crash when the JNI local reference limitation was reached on sync client thread.\n* [ObjectServer] Retrying connections with exponential backoff, when encountering `ConnectException` (#4310).\n* When converting nullable BLOB field to required, `null` values should be converted to `byte[0]` instead of `byte[1]`.\n* Bug which may cause duplicated primary key values when migrating a nullable primary key field to not nullable. `RealmObjectSchema.setRequired()` and `RealmObjectSchema.setNullable()` will throw when converting a nullable primary key field with null values stored to a required primary key field.\n\n### Internal\n\n* Upgraded to Realm Sync 1.10.1\n* Upgraded to Realm Core 2.8.4\n\n### Credits\n\n* Thanks to Anis Ben Nsir (@abennsir) for upgrading Roboelectric in the unitTestExample (#4698).\n\n\n## 3.3.2 (2017-06-09)\n\n### Bug Fixes\n\n* [ObjectServer] Crash when an authentication error happens (#4726).\n* [ObjectServer] Enabled encryption with Sync (#4561).\n* [ObjectServer] Admin users did not connect correctly to the server (#4750).\n\n### Internal\n\n* Factor out internal interface ManagedObject.\n\n## 3.3.1 (2017-05-26)\n\n### Bug Fixes\n\n* [ObjectServer] Accepted extra columns against synced Realm (#4706).\n\n\n## 3.3.0 (2017-05-24)\n\n### Enhancements\n\n* [ObjectServer] Added two options to `SyncConfiguration` to provide a trusted root CA `trustedRootCA` and to disable SSL validation `disableSSLVerification` (#4371).\n* [ObjectServer] Added support for changing passwords through `SyncUser.changePassword()` using an admin user (#4588).\n\n### Bug Fixes\n\n* Queries on proguarded Realm model classes, failed with \"Table not found\" (#4673).\n\n\n## 3.2.1 (2017-05-19)\n\n### Enhancements\n\n* Not in transaction illegal state exception message changed to \"Cannot modify managed objects outside of a write transaction.\".\n\n### Bug Fixes\n\n* [ObjectServer] `schemaVersion` was mistakenly required in order to trigger migrations (#4658).\n* [ObjectServer] Fields removed from model classes will now correctly be hidden instead of throwing an exception when opening the Realm (#4658).\n* Random crashes which were caused by a race condition in encrypted Realm (#4343).\n\n### Internal\n\n* Upgraded to Realm Sync 1.8.5.\n* Upgraded to Realm Core 2.8.0.\n\n## 3.2.0 (2017-05-16)\n\n### Enhancements\n\n* [ObjectServer] Added support for `SyncUser.isAdmin()` (#4353).\n* [ObjectServer] New set of Permission API's have been added to `SyncUser` through `SyncUser.getPermissionManager()` (#4296).\n* [ObjectServer] Added support for changing passwords through `SyncUser.changePassword()` (#4423).\n* [ObjectServer] Added support for `SyncConfiguration.Builder.waitForInitialRemoteData()` (#4270).\n* Transient fields are now allowed in model classes, but are implicitly treated as having the `@Ignore` annotation (#4279).\n* Added `Realm.refresh()` and `DynamicRealm.refresh()` (#3476).\n* Added `Realm.getInstanceAsync()` and `DynamicRealm.getInstanceAsync()` (#2299).\n* Added `DynamicRealmObject#linkingObjects(String,String)` to support linking objects on `DynamicRealm` (#4492).\n* Added support for read only Realms using `RealmConfiguration.Builder.readOnly()` and `SyncConfiguration.Builder.readOnly()`(#1147).\n* Change listeners will now auto-expand variable names to be more descriptive when using Android Studio.\n* The `toString()` methods for the standard and dynamic proxies now print \"proxy\", or \"dynamic\" before the left bracket enclosing the data.\n\n### Bug Fixes\n\n* `@LinkingObjects` annotation now also works with Kotlin (#4611).\n\n### Internal\n\n* Use separated locks for different `RealmCache`s (#4551).\n\n## 3.1.4 (2017-05-04)\n\n## Bug fixes\n\n* Added missing row validation check in certain cases on invalidated/deleted objects (#4540).\n* Initializing Realm is now more resilient if `Context.getFilesDir()` isn't working correctly (#4493).\n* `OrderedRealmCollectionSnapshot.get()` returned a wrong object (#4554).\n* `onSuccess` callback got triggered infinitely if a synced transaction was committed in the async transaction's `onSuccess` callback (#4594).\n\n## 3.1.3 (2017-04-20)\n\n### Enhancements\n\n* [ObjectServer] Resume synchronization as soon as the connectivity is back (#4141).\n\n### Bug Fixes\n\n* `equals()` and `hashCode()` of managed `RealmObject`s that come from linking objects don't work correctly (#4487).\n* Field name was missing in exception message when `null` was set to required field (#4484).\n* Now throws `IllegalStateException` when a getter of linking objects is called against deleted or not yet loaded `RealmObject`s (#4499).\n* `NullPointerException` caused by local transaction inside the listener of `findFirstAsync()`'s results (#4495).\n* Native crash when adding listeners to `RealmObject` after removing listeners from the same `RealmObject` before (#4502).\n* Native crash with \"Invalid argument\" error happened on some Android 7.1.1 devices when opening Realm on external storage (#4461).\n* `OrderedRealmCollectionChangeListener` didn't report change ranges correctly when circular link's field changed (#4474).\n\n### Internal\n\n* Upgraded to Realm Sync 1.6.0.\n* Upgraded to Realm Core 2.6.1.\n\n## 3.1.2 (2017-04-12)\n\n### Bug Fixes\n\n* Crash caused by JNI couldn't find `OsObject.notifyChangeListeners` when ProGuard is enabled (#4461).\n* Incompatible return type of `RealmSchema.getAll()` and `BaseRealm.getSchema()` (#4443).\n* Memory leaked when synced Realm was initialized (#4465).\n* An `IllegalStateException` will be thrown when starting iterating `OrderedRealmCollection` if the Realm is closed (#4471).\n\n## 3.1.1 (2017-04-07)\n\n### Bug Fixes\n\n* Crash caused by Listeners on `RealmObject` getting triggered the 2nd time with different changed field (#4437).\n* Unintentionally exposing `StandardRealmSchema` (#4443).\n* Workaround for crashes on specific Samsung devices which are caused by a buggy `memmove` call (#3651).\n\n## 3.1.0 (2017-04-05)\n\n### Breaking Changes\n\n* Updated file format of Realm files. Existing Realm files will automatically be migrated to the new format when they are opened, but older versions of Realm cannot open these files.\n* [ObjectServer] Due to file format changes, Realm Object Server 1.3.0 or later is required.\n\n### Enhancements\n\n* Added support for reverse relationships through the `@LinkingObjects` annotation. See `io.realm.annotations.LinkingObjects` for documentation.\n  * This feature is in `@Beta`.\n  * Queries on linking objects do not work.  Queries like `where(...).equalTo(\"field.linkingObjects.id\", 7).findAll()` are not yet supported.\n  * Backlink verification is incomplete.  Evil code can cause native crashes.\n* The listener on `RealmObject` will only be triggered if the object changes (#3894).\n* Added `RealmObjectChangeListener` interface that provide detailed information about `RealmObject` field changes.\n* Listeners on `RealmList` and `RealmResults` will be triggered immediately when the transaction is committed on the same thread (#4245).\n* The real `RealmMigrationNeededException` is now thrown instead of `IllegalArgumentException` if no migration is provided for a Realm that requires it.\n* `RealmQuery.distinct()` can be performed on unindexed fields (#2285).\n* `targetSdkVersion` is now 25.\n* [ObjectServer] In case of a Client Reset, information about the location of the backed up Realm file is now reported through the `ErrorHandler` interface (#4080).\n* [ObjectServer] Authentication URLs now automatically append `/auth` if no other path segment is set (#4370).\n\n### Bug Fixes\n\n* Crash with `LogicError` with `Bad version number` on notifier thread (#4369).\n* `Realm.migrateRealm(RealmConfiguration)` now fails correctly with an `IllegalArgumentException` if a `SyncConfiguration` is provided (#4075).\n* Potential cause for Realm file corruptions (never reported).\n* Add `@Override` annotation to proxy class accessors and stop using raw type in proxy classes in order to remove warnings from javac (#4329).\n* `findFirstAsync()` now returns an invalid object if there is no object matches the query condition instead of running the query repeatedly until it can find one (#4352).\n* [ObjectServer] Changing the log level after starting a session now works correctly (#4337).\n\n### Internal\n\n* Using the Object Store's Session and SyncManager.\n* Upgraded to Realm Sync 1.5.0.\n* Upgraded to Realm Core 2.5.1.\n* Upgraded Gradle to 3.4.1\n\n## 3.0.0 (2017-02-28)\n\n### Breaking Changes\n\n* `RealmResults.distinct()` returns a new `RealmResults` object instead of filtering on the original object (#2947).\n* `RealmResults` is auto-updated continuously. Any transaction on the current thread which may have an impact on the order or elements of the `RealmResults` will change the `RealmResults` immediately instead of change it in the next event loop. The standard `RealmResults.iterator()` will continue to work as normal, which means that you can still delete or modify elements without impacting the iterator. The same is not true for simple for-loops. In some cases a simple for-loop will not work (https://realm.io/docs/java/3.0.0/api/io/realm/OrderedRealmCollection.html#loops), and you must use the new createSnapshot() method.\n* `RealmChangeListener` on `RealmObject` will now also be triggered when the object is deleted. Use `RealmObject.isValid()` to check this state(#3138).\n* `RealmObject.asObservable()` will now emit the object when it is deleted. Use `RealmObject.isValid()` to check this state (#3138).\n* Removed deprecated classes `Logger` and `AndroidLogger` (#4050).\n\n### Deprecated\n\n* `RealmResults.removeChangeListeners()`. Use `RealmResults.removeAllChangeListeners()` instead.\n* `RealmObject.removeChangeListeners()`. Use `RealmObject.removeAllChangeListeners()` instead.\n* `RealmResults.distinct()` and `RealmResults.distinctAsync()`. Use `RealmQuery.distinct()` and `RealmQuery.distinctAsync()` instead.\n\n### Enhancements\n\n* Added support for sorting by link's field (#672).\n* Added `OrderedRealmCollectionSnapshot` class and `OrderedRealmCollection.createSnapshot()` method. `OrderedRealmCollectionSnapshot` is useful when changing `RealmResults` or `RealmList` in simple loops.\n* Added `OrderedRealmCollectionChangeListener` interface for supporting fine-grained collection notifications.\n* Added support for ChangeListeners on `RealmList`.\n* Added `RealmList.asObservable()`.\n\n### Bug Fixes\n\n* Element type checking in `DynamicRealmObject#setList()` (#4252).\n* Now throws `IllegalStateException` instead of process crash when any of thread confined methods in `RealmQuery` is called from wrong thread (#4228).\n* Now throws `IllegalStateException` when any of thread confined methods in `DynamicRealmObject` is called from wrong thread (#4258).\n\n### Internal\n\n* Use Object Store's `Results` as the backend for `RealmResults` (#3372).\n  - Use Object Store's notification mechanism to trigger listeners.\n  - Local commits triggers Realm global listener and `RealmObject` listener on current thread immediately instead of in the next event loop.\n\n\n## 2.3.2 (2017-02-27)\n\n### Bug fixes\n\n* Log levels in JNI layer were all reported as \"Error\" (#4204).\n* Encrypted realms can end up corrupted if many threads are reading and writing at the same time (#4128).\n* \"Read-only file system\" exception when compacting Realm file on external storage (#4140).\n\n### Internal\n\n* Updated to Realm Sync v1.2.1.\n* Updated to Realm Core v2.3.2.\n\n### Enhancements\n\n* Improved performance of getters and setters in proxy classes.\n\n\n## 2.3.1 (2017-02-07)\n\n### Enhancements\n\n* [ObjectServer] The `serverUrl` given to `SyncConfiguration.Builder()` is now more lenient and will also accept only paths as argument (#4144).\n* [ObjectServer] Add a timer to refresh periodically the access_token.\n\n### Bug fixes\n\n* NPE problem in SharedRealm.finalize() (#3730).\n* `RealmList.contains()` and `RealmResults.contains()` now correctly use custom `equals()` method on Realm model classes.\n* Build error when the project is using Kotlin (#4087).\n* Bug causing classes to be replaced by classes already in Gradle's classpath (#3568).\n* NullPointerException when notifying a single object that it changed (#4086).\n\n\n## 2.3.0 (2017-01-19)\n\n### Object Server API Changes\n\n* Realm Sync v1.0.0 has been released, and Realm Mobile Platform is no longer considered in beta.\n* Breaking change: Location of Realm files are now placed in `getFilesDir()/<userIdentifier>` instead of `getFilesDir()/`.\n  This is done in order to support shared Realms among users, while each user retaining their own local copy.\n* Breaking change: `SyncUser.all()` now returns Map instead of List.\n* Breaking change: Added a default `UserStore` saving users in a Realm file (`RealmFileUserStore`).\n* Breaking change: Added multi-user support to `UserStore`. Added `get(String)` and `remove(String)`, removed `remove()` and renamed `get()` to `getCurrent()`.\n* Breaking change: Changed the order of arguments to `SyncCredentials.custom()` to match iOS: token, provider, userInfo.\n* Added support for `PermissionOffer` and `PermissionOfferResponse` to `SyncUser.getManagementRealm()`.\n* Exceptions thrown in error handlers are ignored but logged (#3559).\n* Removed unused public constants in `SyncConfiguration` (#4047).\n* Fixed bug, preventing Sync client to renew the access token (#4038) (#4039).\n* Now `SyncUser.logout()` properly revokes tokens (#3639).\n\n### Bug fixes\n\n* Fixed native memory leak setting the value of a primary key (#3993).\n* Activated Realm's annotation processor on connectedTest when the project is using kapt (#4008).\n* Fixed \"too many open files\" issue (#4002).\n* Added temporary work-around for bug crashing Samsung Tab 3 devices on startup (#3651).\n\n### Enhancements\n\n* Added `like` predicate for String fields (#3752).\n\n### Internal\n\n* Updated to Realm Sync v1.0.0.\n* Added a Realm backup when receiving a Sync client reset message from the server.\n\n## 2.2.2 (2017-01-16)\n\n### Object Server API Changes (In Beta)\n\n* Disabled `Realm.compactRealm()` when sync is enabled as it might corrupt the Realm (https://github.com/realm/realm-core/issues/2345).\n\n### Bug fixes\n\n* \"operation not permitted\" issue when creating Realm file on some devices' external storage (#3629).\n* Crash on API 10 devices (#3726).\n* `UnsatisfiedLinkError` caused by `pipe2` (#3945).\n* Unrecoverable error with message \"Try again\" when the notification fifo is full (#3964).\n* Realm migration wasn't triggered when the primary key definition was altered (#3966).\n* Use phantom reference to solve the finalize time out issue (#2496).\n\n### Enhancements\n\n* All major public classes are now non-final. This is mostly a compromise to support Mockito. All protected fields/methods are still not considered part of the public API and can change without notice (#3869).\n* All Realm instances share a single notification daemon thread.\n* Fixed Java lint warnings with generated proxy classes (#2929).\n\n### Internal\n\n* Upgraded Realm Core to 2.3.0.\n* Upgraded Realm Sync to 1.0.0-BETA-6.5.\n\n## 2.2.1 (2016-11-12)\n\n### Object Server API Changes (In Beta)\n\n* Fixed `SyncConfiguration.toString()` so it now outputs a correct description instead of an empty string (#3787).\n\n### Bug fixes\n\n* Added version number to the native library, preventing ReLinker from accidentally loading old code (#3775).\n* `Realm.getLocalInstanceCount(config)` throwing NullPointerException if called after all Realms have been closed (#3791).\n\n## 2.2.0 (2016-11-12)\n\n### Object Server API Changes (In Beta)\n\n* Added support for `SyncUser.getManagementRealm()` and permission changes.\n\n### Bug fixes\n\n* Kotlin projects no longer create the `RealmDefaultModule` if no Realm model classes are present (#3746).\n* Remove `includedescriptorclasses` option from ProGuard rule file in order to support built-in shrinker of Android Gradle Plugin (#3714).\n* Unexpected `RealmMigrationNeededException` was thrown when a field was added to synced Realm.\n\n### Enhancements\n\n* Added support for the `annotationProcessor` configuration provided by Android Gradle Plugin 2.2.0 or later. Realm plugin adds its annotation processor to the `annotationProcessor` configuration instead of `apt` configuration if it is available and the `com.neenbedankt.android-apt` plugin is not used. In Kotlin projects, `kapt` is used instead of the `annotationProcessor` configuration (#3026).\n\n## 2.1.1 (2016-10-27)\n\n### Bug fixes\n\n* Fixed a bug in `Realm.insert` and `Realm.insertOrUpdate` methods causing a `StackOverFlow` when you try to insert a cyclic graph of objects between Realms (#3732).\n\n### Object Server API Changes (In Beta)\n\n* Set default RxFactory to `SyncConfiguration`.\n\n### Bug fixes\n\n* ProGuard configuration introduced in 2.1.0 unexpectedly kept classes that did not have the @KeepMember annotation (#3689).\n\n## 2.1.0 (2016-10-25)\n\n### Breaking changes\n\n* * `SecureUserStore` has been moved to its own GitHub repository: https://github.com/realm/realm-android-user-store\n  See https://github.com/realm/realm-android-user-store/blob/master/README.md for further info on how to include it.\n\n\n### Object Server API Changes (In Beta)\n\n* Renamed `User` to `SyncUser`, `Credentials` to `SyncCredentials` and `Session` to `SyncSession` to align names with Cocoa.\n* Removed `SyncManager.setLogLevel()`. Use `RealmLog.setLevel()` instead.\n* `SyncUser.logout()` now correctly clears `SyncUser.currentUser()` (#3638).\n* Missing ProGuard configuration for libraries used by Sync extension (#3596).\n* Error handler was not called when sync session failed (#3597).\n* Added `User.all()` that returns all known Realm Object Server users.\n* Upgraded Realm Sync to 1.0.0-BETA-3.2\n\n### Deprecated\n\n* `Logger`. Use `RealmLogger` instead.\n* `AndroidLogger`. The logger for Android is implemented in native code instead.\n\n### Bug fixes\n\n* The following were not kept by ProGuard: names of native methods not in the `io.realm.internal` package, names of classes used in method signature (#3596).\n* Permission error when a database file was located on external storage (#3140).\n* Memory leak when unsubscribing from a RealmResults/RealmObject RxJava Observable (#3552).\n\n### Enhancements\n\n* `Realm.compactRealm()` now works for encrypted Realms.\n* Added `first(E defaultValue)` and `last(E defaultValue)` methods to `RealmList` and `RealmResult`. These methods will return the provided object instead of throwing an `IndexOutOfBoundsException` if the list is empty.\n* Reduce transformer logger verbosity (#3608).\n* `RealmLog.setLevel(int)` for setting the log level across all loggers.\n\n### Internal\n\n* Upgraded Realm Core to 2.1.3\n\n### Credits\n\n* Thanks to Max Furman (@maxfurman) for adding support for `first()` and `last()` default values.\n\n## 2.0.2 (2016-10-06)\n\nThis release is not protocol-compatible with previous versions of the Realm Mobile Platform. The base library is still fully compatible.\n\n### Bug fixes\n\n* Build error when using Java 7 (#3563).\n\n### Internal\n\n* Upgraded Realm Core to 2.1.0\n* Upgraded Realm Sync to 1.0.0-BETA-2.0.\n\n## 2.0.1 (2016-10-05)\n\n### Bug fixes\n\n* `android.net.conn.CONNECTIVITY_CHANGE` broadcast caused `RuntimeException` if sync extension was disabled (#3505).\n* `android.net.conn.CONNECTIVITY_CHANGE` was not delivered on Android 7 devices.\n* `distinctAsync` did not respect other query parameters (#3537).\n* `ConcurrentModificationException` from Gradle when building an application (#3501).\n\n### Internal\n\n* Upgraded to Realm Core 2.0.1 / Realm Sync 1.3-BETA\n\n## 2.0.0 (2016-09-27)\n\nThis release introduces support for the Realm Mobile Platform!\nSee <https://realm.io/news/introducing-realm-mobile-platform/> for an overview of these great new features.\n\n### Breaking Changes\n\n* Files written by Realm 2.0 cannot be read by 1.x or earlier versions. Old files can still be opened.\n* It is now required to call `Realm.init(Context)` before calling any other Realm API.\n* Removed `RealmConfiguration.Builder(Context)`, `RealmConfiguration.Builder(Context, File)` and `RealmConfiguration.Builder(File)` constructors.\n* `isValid()` now always returns `true` instead of `false` for unmanaged `RealmObject` and `RealmList`. This puts it in line with the behaviour of the Cocoa and .NET API's (#3101).\n* armeabi is not supported anymore.\n* Added new `RealmFileException`.\n  - `IncompatibleLockFileException` has been removed and replaced by `RealmFileException` with kind `INCOMPATIBLE_LOCK_FILE`.\n  - `RealmIOExcpetion` has been removed and replaced by `RealmFileException`.\n* `RealmConfiguration.Builder.assetFile(Context, String)` has been renamed to `RealmConfiguration.Builder.assetFile(String)`.\n* Object with primary key is now required to define it when the object is created. This means that `Realm.createObject(Class<E>)` and `DynamicRealm.createObject(String)` now throws `RealmException` if they are used to create an object with a primary key field. Use `Realm.createObject(Class<E>, Object)` or `DynamicRealm.createObject(String, Object)` instead.\n* Importing from JSON without the primary key field defined in the JSON object now throws `IllegalArgumentException`.\n* Now `Realm.beginTransaction()`, `Realm.executeTransaction()` and `Realm.waitForChange()` throw `RealmMigrationNeededException` if a remote process introduces incompatible schema changes (#3409).\n* The primary key value of an object can no longer be changed after the object was created. Instead a new object must be created and all fields copied over.\n* Now `Realm.createObject(Class)` and `Realm.createObject(Class,Object)` take the values from the model's fields and default constructor. Creating objects through the `DynamicRealm` does not use these values (#777).\n* When `Realm.create*FromJson()`s create a new `RealmObject`, now they take the default values defined by the field itself and its default constructor for those fields that are not defined in the JSON object.\n\n### Enhancements\n\n* Added `realmObject.isManaged()`, `RealmObject.isManaged(obj)` and `RealmCollection.isManaged()` (#3101).\n* Added `RealmConfiguration.Builder.directory(File)`.\n* `RealmLog` has been moved to the public API. It is now possible to control which events Realm emit to Logcat. See the `RealmLog` class for more details.\n* Typed `RealmObject`s can now continue to access their fields properly even though the schema was changed while the Realm was open (#3409).\n* A `RealmMigrationNeededException` will be thrown with a cause to show the detailed message when a migration is needed and the migration block is not in the `RealmConfiguration`.\n\n\n### Bug fixes\n\n* Fixed a lint error in proxy classes when the 'minSdkVersion' of user's project is smaller than 11 (#3356).\n* Fixed a potential crash when there were lots of async queries waiting in the queue.\n* Fixed a bug causing the Realm Transformer to not transform field access in the model's constructors (#3361).\n* Fixed a bug causing a build failure when the Realm Transformer adds accessors to a model class that was already transformed in other project (#3469).\n* Fixed a bug causing the `NullPointerException` when calling getters/setters in the model's constructors (#2536).\n\n### Internal\n\n* Moved JNI build to CMake.\n* Updated Realm Core to 2.0.0.\n* Updated ReLinker to 1.2.2.\n\n## 1.2.0 (2016-08-19)\n\n### Bug fixes\n\n* Throw a proper exception when operating on a non-existing field with the dynamic API (#3292).\n* `DynamicRealmObject.setList` should only accept `RealmList<DynamicRealmObject>` (#3280).\n* `DynamicRealmObject.getX(fieldName)` now throws a proper exception instead of a native crash when called with a field name of the wrong type (#3294).\n* Fixed a concurrency crash which might happen when `Realm.executeTransactionAsync()` tried to call `onSucess` after the Realm was closed.\n\n### Enhancements\n\n* Added `RealmQuery.in()` for a comparison against multiple values.\n* Added byte array (`byte[]`) support to `RealmQuery`'s `equalTo` and `notEqualTo` methods.\n* Optimized internal caching of schema classes (#3315).\n\n### Internal\n\n* Updated Realm Core to 1.5.1.\n* Improved sorting speed.\n* Completely removed the `OptionalAPITransformer`.\n\n### Credits\n\n* Thanks to Brenden Kromhout (@bkromhout) for adding binary array support to `equalTo` and `notEqualTo`.\n\n## 1.1.1 (2016-07-01)\n\n### Bug fixes\n\n* Fixed a wrong JNI method declaration which might cause \"method not found\" crash on some devices.\n* Fixed a bug that `Error` in the background async thread is not forwarded to the caller thread.\n* Fixed a crash when an empty `Collection` is passed to `insert()`/`insertOrUpdate()` (#3103).\n* Fixed a bug that does not transfer the primary key when `RealmSchemaObject.setClassName()` is called to rename a class (#3118).\n* Fixed bug in `Realm.insert` and `Realm.insertOrUpdate` methods causing a `RealmList` to be cleared when inserting a managed `RealmModel` (#3105).\n* Fixed a concurrency allocation bug in storage engine which might lead to some random crashes.\n* Bulk insertion now throws if it is not called in a transaction (#3173).\n* The IllegalStateException thrown when accessing an empty RealmObject is now more meaningful (#3200).\n* `insert()` now correctly throws an exception if two different objects have the same primary key (#3212).\n* Blackberry Z10 throwing \"Function not implemented\" (#3178).\n* Reduced the number of file descriptors used by Realm Core (#3197).\n* Throw a proper `IllegalStateException` if a `RealmChangeListener` is used inside an IntentService (#2875).\n\n### Enhancements\n\n* The Realm Annotation processor no longer consumes the Realm annotations. Allowing other annotation processors to run.\n\n### Internal\n\n* Updated Realm Core to 1.4.2.\n* Improved sorting speed.\n\n## 1.1.0 (2016-06-30)\n\n### Bug fixes\n\n* A number of bug fixes in the storage engine related to memory management in rare cases when a Realm has been compacted.\n* Disabled the optional API transformer since it has problems with DexGuard (#3022).\n* `OnSuccess.OnSuccess()` might not be called with the correct Realm version for async transaction (#1893).\n* Fixed a bug in `copyToRealm()` causing a cyclic dependency objects being duplicated.\n* Fixed a build failure when model class has a conflicting name such as `Map`, `List`, `String`, ... (#3077).\n\n### Enhancements\n\n* Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684).\n* Enhanced `Table.toString()` to show a PrimaryKey field details (#2903).\n* Enabled ReLinker when loading a Realm from a custom path by adding a `RealmConfiguration.Builder(Context, File)` constructor (#2900).\n* Changed `targetSdkVersion` of `realm-library` to 24.\n* Logs warning if `DynamicRealm` is not closed when GC happens as it does for `Realm`.\n\n### Deprecated\n\n* `RealmConfiguration.Builder(File)`. Use `RealmConfiguration.Builder(Context, File)` instead.\n\n### Internal\n\n* Updated Realm Core to 1.2.0.\n\n## 1.0.1 (2016-05-25)\n\n### Bug fixes\n\n* Fixed a crash when calling `Table.toString()` in debugger (#2429).\n* Fixed a race condition which would cause some `RealmResults` to not be properly updated inside a `RealmChangeListener`. This could result in crashes when accessing items from those results (#2926/#2951).\n* Revised `RealmResults.isLoaded()` description (#2895).\n* Fixed a bug that could cause Realm to lose track of primary key when using `RealmObjectSchema.removeField()` and `RealmObjectSchema.renameField()` (#2829/#2926).\n* Fixed a bug that prevented some devices from finding async related JNI methods correctly.\n* Updated ProGuard configuration in order not to depend on Android's default configuration (#2972).\n* Fixed a race condition between Realms notifications and other UI events. This could e.g. cause ListView to crash (#2990).\n* Fixed a bug that allowed both `RealmConfiguration.Builder.assetFile()`/`deleteRealmIfMigrationNeeded()` to be configured at the same time, which leads to the asset file accidentally being deleted in migrations (#2933).\n* Realm crashed outright when the same Realm file was opened in two processes. Realm will now optimistically retry opening for 1 second before throwing an Error (#2459).\n\n### Enhancements\n\n* Removes RxJava related APIs during bytecode transforming to make RealmObject plays well with reflection when rx.Observable doesn't exist.\n\n## 1.0.0 (2016-05-25)\n\nNo changes since 0.91.1.\n\n## 0.91.1 (2016-05-25)\n\n* Updated Realm Core to 1.0.1.\n\n### Bug fixes\n\n* Fixed a bug when opening a Realm causes a staled memory mapping. Symptoms are error messages like \"Bad or incompatible history type\", \"File format version doesn't match\", and \"Encrypted interprocess sharing is currently unsupported\".\n\n## 0.91.0 (2016-05-20)\n\n* Updated Realm Core to 1.0.0.\n\n### Breaking changes\n\n* Removed all `@Deprecated` methods.\n* Calling `Realm.setAutoRefresh()` or `DynamicRealm.setAutoRefresh()` from non-Looper thread throws `IllegalStateException` even if the `autoRefresh` is false (#2820).\n\n### Bug fixes\n\n* Calling RealmResults.deleteAllFromRealm() might lead to native crash (#2759).\n* The annotation processor now correctly reports an error if trying to reference interfaces in model classes (#2808).\n* Added null check to `addChangeListener` and `removeChangeListener` in `Realm` and `DynamicRealm` (#2772).\n* Calling `RealmObjectSchema.addPrimaryKey()` adds an index to the primary key field, and calling `RealmObjectSchema.removePrimaryKey()` removes the index from the field (#2832).\n* Log files are not deleted when calling `Realm.deleteRealm()` (#2834).\n\n### Enhancements\n\n* Upgrading to OpenSSL 1.0.1t. From July 11, 2016, Google Play only accept apps using OpenSSL 1.0.1r or later (https://support.google.com/faqs/answer/6376725, #2749).\n* Added support for automatically copying an initial database from assets using `RealmConfiguration.Builder.assetFile()`.\n* Better error messages when certain file operations fail.\n\n### Credits\n\n* Paweł Surówka (@thesurix) for adding the `RealmConfiguration.Builder.assetFile()`.\n\n## 0.90.1\n\n* Updated Realm Core to 0.100.2.\n\n### Bug fixes\n\n* Opening a Realm while closing a Realm in another thread could lead to a race condition.\n* Automatic migration to the new file format could in rare circumstances lead to a crash.\n* Fixing a race condition that may occur when using Async API (#2724).\n* Fixed CannotCompileException when related class definition in android.jar cannot be found (#2703).\n\n### Enhancements\n\n* Prints path when file related exceptions are thrown.\n\n## 0.90.0\n\n* Updated Realm Core to 0.100.0.\n\n### Breaking changes\n\n* RealmChangeListener provides the changed object/Realm/collection as well (#1594).\n* All JSON methods on Realm now only wraps JSONException in RealmException. All other Exceptions are thrown as they are.\n* Marked all methods on `RealmObject` and all public classes final (#1594).\n* Removed `BaseRealm` from the public API.\n* Removed `HandlerController` from the public API.\n* Removed constructor of `RealmAsyncTask` from the public API (#1594).\n* `RealmBaseAdapter` has been moved to its own GitHub repository: https://github.com/realm/realm-android-adapters\n  See https://github.com/realm/realm-android-adapters/blob/master/README.md for further info on how to include it.\n* File format of Realm files is changed. Files will be automatically upgraded but opening a Realm file with older\n  versions of Realm is not possible.\n\n### Deprecated\n\n* `Realm.allObjects*()`. Use `Realm.where(clazz).findAll*()` instead.\n* `Realm.distinct*()`. Use `Realm.where(clazz).distinct*()` instead.\n* `DynamicRealm.allObjects*()`. Use `DynamicRealm.where(className).findAll*()` instead.\n* `DynamicRealm.distinct*()`. Use `DynamicRealm.where(className).distinct*()` instead.\n* `Realm.allObjectsSorted(field, sort, field, sort, field, sort)`. Use `RealmQuery.findAllSorted(field[], sort[])` instead.\n* `RealmQuery.findAllSorted(field, sort, field, sort, field, sort)`. Use `RealmQuery.findAllSorted(field[], sort[])` instead.\n* `RealmQuery.findAllSortedAsync(field, sort, field, sort, field, sort)`. Use `RealmQuery.findAllSortedAsync(field[], sort[])` instead.\n* `RealmConfiguration.setModules()`. Use `RealmConfiguration.modules()` instead.\n* `Realm.refresh()` and `DynamicRealm.refresh()`. Use `Realm.waitForChange()`/`stopWaitForChange()` or `DynamicRealm.waitForChange()`/`stopWaitForChange()` instead.\n\n### Enhancements\n\n* `RealmObjectSchema.getPrimaryKey()` (#2636).\n* `Realm.createObject(Class, Object)` for creating objects with a primary key directly.\n* Unit tests in Android library projects now detect Realm model classes.\n* Better error message if `equals()` and `hashCode()` are not properly overridden in custom Migration classes.\n* Expanding the precision of `Date` fields to cover full range (#833).\n* `Realm.waitForChange()`/`stopWaitForChange()` and `DynamicRealm.waitForChange()`/`stopWaitForChange()` (#2386).\n\n### Bug fixes\n\n* `RealmChangeListener` on `RealmObject` is not triggered when adding listener on returned `RealmObject` of `copyToRealmOrUpdate()` (#2569).\n\n### Credits\n\n* Thanks to Brenden Kromhout (@bkromhout) for adding `RealmObjectSchema.getPrimaryKey()`.\n\n## 0.89.1\n\n### Bug fixes\n\n* @PrimaryKey + @Required on String type primary key no longer throws when using copyToRealm or copyToRealmOrUpdate (#2653).\n* Primary key is cleared/changed when calling RealmSchema.remove()/RealmSchema.rename() (#2555).\n* Objects implementing RealmModel can be used as a field of RealmModel/RealmObject (#2654).\n\n## 0.89.0\n\n### Breaking changes\n\n* @PrimaryKey field value can now be null for String, Byte, Short, Integer, and Long types. Older Realms should be migrated, using RealmObjectSchema.setNullable(), or by adding the @Required annotation (#2515).\n* `RealmResults.clear()` now throws UnsupportedOperationException. Use `RealmResults.deleteAllFromRealm()` instead.\n* `RealmResults.remove(int)` now throws UnsupportedOperationException. Use `RealmResults.deleteFromRealm(int)` instead.\n* `RealmResults.sort()` and `RealmList.sort()` now return the sorted result instead of sorting in-place.\n* `RealmList.first()` and `RealmList.last()` now throw `ArrayIndexOutOfBoundsException` if `RealmList` is empty.\n* Removed deprecated method `Realm.getTable()` from public API.\n* `Realm.refresh()` and `DynamicRealm.refresh()` on a Looper no longer have any effect. `RealmObject` and `RealmResults` are always updated on the next event loop.\n\n### Deprecated\n\n* `RealmObject.removeFromRealm()` in place of `RealmObject.deleteFromRealm()`\n* `Realm.clear(Class)` in favour of `Realm.delete(Class)`.\n* `DynamicRealm.clear(Class)` in place of `DynamicRealm.delete(Class)`.\n\n### Enhancements\n\n* Added a `RealmModel` interface that can be used instead of extending `RealmObject`.\n* `RealmCollection` and `OrderedRealmCollection` interfaces have been added. `RealmList` and `RealmResults` both implement these.\n* `RealmBaseAdapter` now accept an `OrderedRealmCollection` instead of only `RealmResults`.\n* `RealmObjectSchema.isPrimaryKey(String)` (#2440)\n* `RealmConfiguration.initialData(Realm.Transaction)` can now be used to populate a Realm file before it is used for the first time.\n\n### Bug fixes\n\n* `RealmObjectSchema.isRequired(String)` and `RealmObjectSchema.isNullable(String)` don't throw when the given field name doesn't exist.\n\n### Credits\n\n* Thanks to @thesurix for adding `RealmConfiguration.initialData()`.\n\n## 0.88.3\n\n* Updated Realm Core to 0.97.3.\n\n### Enhancements\n\n* Throws an IllegalArgumentException when calling Realm.copyToRealm()/Realm.copyToRealmOrUpdate() with a RealmObject which belongs to another Realm instance in a different thread.\n* Improved speed of cleaning up native resources (#2496).\n\n### Bug fixes\n\n* Field annotated with @Ignored should not have accessors generated by the bytecode transformer (#2478).\n* RealmResults and RealmObjects can no longer accidentially be GC'ed if using `asObservable()`. Previously this caused the observable to stop emitting (#2485).\n* Fixed an build issue when using Realm in library projects on Windows (#2484).\n* Custom equals(), toString() and hashCode() are no longer incorrectly overwritten by the proxy class (#2545).\n\n## 0.88.2\n\n* Updated Realm Core to 0.97.2.\n\n### Enhancements\n\n* Outputs additional information when incompatible lock file error occurs.\n\n### Bug fixes\n\n* Race condition causing BadVersionException when running multiple async writes and queries at the same time (#2021/#2391/#2417).\n\n## 0.88.1\n\n### Bug fixes\n\n* Prevent throwing NullPointerException in RealmConfiguration.equals(RealmConfiguration) when RxJava is not in the classpath (#2416).\n* RealmTransformer fails because of missing annotation classes in user's project (#2413).\n* Added SONAME header to shared libraries (#2432).\n* now DynamicRealmObject.toString() correctly shows null value as \"null\" and the format is aligned to the String from typed RealmObject (#2439).\n* Fixed an issue occurring while resolving ReLinker in apps using a library based on Realm (#2415).\n\n## 0.88.0 (2016-03-10)\n\n* Updated Realm Core to 0.97.0.\n\n### Breaking changes\n\n* Realm has now to be installed as a Gradle plugin.\n* DynamicRealm.executeTransaction() now directly throws any RuntimeException instead of wrapping it in a RealmException (#1682).\n* DynamicRealm.executeTransaction() now throws IllegalArgumentException instead of silently accepting a null Transaction object.\n* String setters now throw IllegalArgumentException instead of RealmError for invalid surrogates.\n* DynamicRealm.distinct()/distinctAsync() and Realm.distinct()/distinctAsync() now throw IllegalArgumentException instead of UnsupportedOperationException for invalid type or unindexed field.\n* All thread local change listeners are now delayed until the next Looper event instead of being triggered when committing.\n* Removed RealmConfiguration.getSchemaMediator() from public API which was deprecated in 0.86.0. Please use RealmConfiguration.getRealmObjectClasses() to obtain the set of model classes (#1797).\n* Realm.migrateRealm() throws a FileNotFoundException if the Realm file doesn't exist.\n* It is now required to unsubscribe from all Realm RxJava observables in order to fully close the Realm (#2357).\n\n### Deprecated\n\n* Realm.getInstance(Context). Use Realm.getInstance(RealmConfiguration) or Realm.getDefaultInstance() instead.\n* Realm.getTable(Class) which was public because of the old migration API. Use Realm.getSchema() or DynamicRealm.getSchema() instead.\n* Realm.executeTransaction(Transaction, Callback) and replaced it with Realm.executeTransactionAsync(Transaction), Realm.executeTransactionAsync(Transaction, OnSuccess), Realm.executeTransactionAsync(Transaction, OnError) and Realm.executeTransactionAsync(Transaction, OnSuccess, OnError).\n\n### Enhancements\n\n* Support for custom methods, custom logic in accessors, custom accessor names, interface implementation and public fields in Realm objects (#909).\n* Support to project Lombok (#502).\n* RealmQuery.isNotEmpty() (#2025).\n* Realm.deleteAll() and RealmList.deleteAllFromRealm() (#1560).\n* RealmQuery.distinct() and RealmResults.distinct() (#1568).\n* RealmQuery.distinctAsync() and RealmResults.distinctAsync() (#2118).\n* Improved .so loading by using [ReLinker](https://github.com/KeepSafe/ReLinker).\n* Improved performance of RealmList#contains() (#897).\n* distinct(...) for Realm, DynamicRealm, RealmQuery, and RealmResults can take multiple parameters (#2284).\n* \"realm\" and \"row\" can be used as field name in model classes (#2255).\n* RealmResults.size() now returns Integer.MAX_VALUE when actual size is greater than Integer.MAX_VALUE (#2129).\n* Removed allowBackup from AndroidManifest (#2307).\n\n### Bug fixes\n\n* Error occurring during test and (#2025).\n* Error occurring during test and connectedCheck of unit test example (#1934).\n* Bug in jsonExample (#2092).\n* Multiple calls of RealmResults.distinct() causes to return wrong results (#2198).\n* Calling DynamicRealmObject.setList() with RealmList<DynamicRealmObject> (#2368).\n* RealmChangeListeners did not triggering correctly if findFirstAsync() didn't find any object. findFirstAsync() Observables now also correctly call onNext when the query completes in that case (#2200).\n* Setting a null value to trigger RealmChangeListener (#2366).\n* Preventing throwing BadVersionException (#2391).\n\n### Credits\n\n* Thanks to Bill Best (@wmbest2) for snapshot testing.\n* Thanks to Graham Smith (@grahamsmith) for a detailed bug report (#2200).\n\n## 0.87.5 (2016-01-29)\n* Updated Realm Core to 0.96.2.\n  - IllegalStateException won't be thrown anymore in RealmResults.where() if the RealmList which the RealmResults is created on has been deleted. Instead, the RealmResults will be treated as empty forever.\n  - Fixed a bug causing a bad version exception, when using findFirstAsync (#2115).\n\n## 0.87.4 (2016-01-28)\n* Updated Realm Core to 0.96.0.\n  - Fixed bug causing BadVersionException or crashing core when running async queries.\n\n## 0.87.3 (2016-01-25)\n* IllegalArgumentException is now properly thrown when calling Realm.copyFromRealm() with a DynamicRealmObject (#2058).\n* Fixed a message in IllegalArgumentException thrown by the accessors of DynamicRealmObject (#2141).\n* Fixed RealmList not returning DynamicRealmObjects of the correct underlying type (#2143).\n* Fixed potential crash when rolling back removal of classes that reference each other (#1829).\n* Updated Realm Core to 0.95.8.\n  - Fixed a bug where undetected deleted object might lead to seg. fault (#1945).\n  - Better performance when deleting objects (#2015).\n\n## 0.87.2 (2016-01-08)\n* Removed explicit GC call when committing a transaction (#1925).\n* Fixed a bug when RealmObjectSchema.addField() was called with the PRIMARY_KEY modifier, the field was not set as a required field (#2001).\n* Fixed a bug which could throw a ConcurrentModificationException in RealmObject's or RealmResults' change listener (#1970).\n* Fixed RealmList.set() so it now correctly returns the old element instead of the new (#2044).\n* Fixed the deployment of source and javadoc jars (#1971).\n\n## 0.87.1 (2015-12-23)\n* Upgraded to NDK R10e. Using gcc 4.9 for all architectures.\n* Updated Realm Core to 0.95.6\n  - Fixed a bug where an async query can be copied incomplete in rare cases (#1717).\n* Fixed potential memory leak when using async query.\n* Added a check to prevent removing a RealmChangeListener from a non-Looper thread (#1962). (Thank you @hohnamkung.)\n\n## 0.87.0 (2015-12-17)\n* Added Realm.asObservable(), RealmResults.asObservable(), RealmObject.asObservable(), DynamicRealm.asObservable() and DynamicRealmObject.asObservable().\n* Added RealmConfiguration.Builder.rxFactory() and RxObservableFactory for custom RxJava observable factory classes.\n* Added Realm.copyFromRealm() for creating detached copies of Realm objects (#931).\n* Added RealmObjectSchema.getFieldType() (#1883).\n* Added unitTestExample to showcase unit and instrumentation tests. Examples include jUnit3, jUnit4, Espresso, Robolectric, and MPowermock usage with Realm (#1440).\n* Added support for ISO8601 based dates for JSON import. If JSON dates are invalid a RealmException will be thrown (#1213).\n* Added APK splits to gridViewExample (#1834).\n\n## 0.86.1 (2015-12-11)\n* Improved the performance of removing objects (RealmResults.clear() and RealmResults.remove()).\n* Updated Realm Core to 0.95.5.\n* Updated ProGuard configuration (#1904).\n* Fixed a bug where RealmQuery.findFirst() returned a wrong result if the RealmQuery had been created from a RealmResults.where() (#1905).\n* Fixed a bug causing DynamicRealmObject.getObject()/setObject() to use the wrong class (#1912).\n* Fixed a bug which could cause a crash when closing Realm instances in change listeners (#1900).\n* Fixed a crash occurring during update of multiple async queries (#1895).\n* Fixed listeners not triggered for RealmObject & RealmResults created using copy or create methods (#1884).\n* Fixed RealmChangeListener never called inside RealmResults (#1894).\n* Fixed crash when calling clear on a RealmList (#1886).\n\n## 0.86.0 (2015-12-03)\n* BREAKING CHANGE: The Migration API has been replaced with a new API.\n* BREAKING CHANGE: RealmResults.SORT_ORDER_ASCENDING and RealmResults.SORT_ORDER_DESCENDING constants have been replaced by Sort.ASCENDING and Sort.DESCENDING enums.\n* BREAKING CHANGE: RealmQuery.CASE_SENSITIVE and RealmQuery.CASE_INSENSITIVE constants have been replaced by Case.SENSITIVE and Case.INSENSITIVE enums.\n* BREAKING CHANGE: Realm.addChangeListener, RealmObject.addChangeListener and RealmResults.addChangeListener hold a strong reference to the listener, you should unregister the listener to avoid memory leaks.\n* BREAKING CHANGE: Removed deprecated methods RealmQuery.minimum{Int,Float,Double}, RealmQuery.maximum{Int,Float,Double}, RealmQuery.sum{Int,Float,Double} and RealmQuery.average{Int,Float,Double}. Use RealmQuery.min(), RealmQuery.max(), RealmQuery.sum() and RealmQuery.average() instead.\n* BREAKING CHANGE: Removed RealmConfiguration.getSchemaMediator() which is public by mistake. And RealmConfiguration.getRealmObjectClasses() is added as an alternative in order to obtain the set of model classes (#1797).\n* BREAKING CHANGE: Realm.addChangeListener, RealmObject.addChangeListener and RealmResults.addChangeListener will throw an IllegalStateException when invoked on a non-Looper thread. This is to prevent registering listeners that will not be invoked.\n* BREAKING CHANGE: trying to access a property on an unloaded RealmObject obtained asynchronously will throw an IllegalStateException\n* Added new Dynamic API using DynamicRealm and DynamicRealmObject.\n* Added Realm.getSchema() and DynamicRealm.getSchema().\n* Realm.createOrUpdateObjectFromJson() now works correctly if the RealmObject class contains a primary key (#1777).\n* Realm.compactRealm() doesn't throw an exception if the Realm file is opened. It just returns false instead.\n* Updated Realm Core to 0.95.3.\n  - Fixed a bug where RealmQuery.average(String) returned a wrong value for a nullable Long/Integer/Short/Byte field (#1803).\n  - Fixed a bug where RealmQuery.average(String) wrongly counted the null value for average calculation (#1854).\n\n## 0.85.1 (2015-11-23)\n* Fixed a bug which could corrupt primary key information when updating from a Realm version <= 0.84.1 (#1775).\n\n## 0.85.0 (2016-11-19)\n* BREAKING CHANGE: Removed RealmEncryptionNotSupportedException since the encryption implementation changed in Realm's underlying storage engine. Encryption is now supported on all devices.\n* BREAKING CHANGE: Realm.executeTransaction() now directly throws any RuntimeException instead of wrapping it in a RealmException (#1682).\n* BREAKING CHANGE: RealmQuery.isNull() and RealmQuery.isNotNull() now throw IllegalArgumentException instead of RealmError if the fieldname is a linked field and the last element is a link (#1693).\n* Added Realm.isEmpty().\n* Setters in managed object for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid (unmanaged, removed, closed, from different Realm) object (#1749).\n* Attempting to refresh a Realm while a transaction is in process will now throw an IllegalStateException (#1712).\n* The Realm AAR now also contains the ProGuard configuration (#1767). (Thank you @skyisle.)\n* Updated Realm Core to 0.95.\n  - Removed reliance on POSIX signals when using encryption.\n\n## 0.84.2\n* Fixed a bug making it impossible to convert a field to become required during a migration (#1695).\n* Fixed a bug making it impossible to read Realms created using primary keys and created by iOS (#1703).\n* Fixed some memory leaks when an Exception is thrown (#1730).\n* Fixed a memory leak when using relationships (#1285).\n* Fixed a bug causing cached column indices to be cleared too soon (#1732).\n\n## 0.84.1 (2015-10-28)\n* Updated Realm Core to 0.94.4.\n  - Fixed a bug that could cause a crash when running the same query multiple times.\n* Updated ProGuard configuration. See [documentation](https://realm.io/docs/java/latest/#proguard) for more details.\n* Updated Kotlin example to use 1.0.0-beta.\n* Fixed warnings reported by \"lint -Xlint:all\" (#1644).\n* Fixed a bug where simultaneous opening and closing a Realm from different threads might result in a NullPointerException (#1646).\n* Fixed a bug which made it possible to externally modify the encryption key in a RealmConfiguration (#1678).\n\n## 0.84.0 (2015-10-22)\n* Added support for async queries and transactions.\n* Added support for parsing JSON Dates with timezone information. (Thank you @LateralKevin.)\n* Added RealmQuery.isEmpty().\n* Added Realm.isClosed() method.\n* Added Realm.distinct() method.\n* Added RealmQuery.isValid(), RealmResults.isValid() and RealmList.isValid(). Each method checks whether the instance is still valid to use or not(for example, the Realm has been closed or any parent object has been removed).\n* Added Realm.isInTransaction() method.\n* Updated Realm Core to version 0.94.3.\n  - Fallback for mremap() now work correctly on BlackBerry devices.\n* Following methods in managed RealmList now throw IllegalStateException instead of native crash when RealmList.isValid() returns false: add(int,RealmObject), add(RealmObject)\n* Following methods in managed RealmList now throw IllegalStateException instead of ArrayIndexOutOfBoundsException when RealmList.isValid() returns false: set(int,RealmObject), move(int,int), remove(int), get(int)\n* Following methods in managed RealmList now throw IllegalStateException instead of returning 0/null when RealmList.isValid() returns false: clear(), removeAll(Collection), remove(RealmObject), first(), last(), size(), where()\n* RealmPrimaryKeyConstraintException is now thrown instead of RealmException if two objects with same primary key are inserted.\n* IllegalStateException is now thrown when calling Realm's clear(), RealmResults's remove(), removeLast(), clear() or RealmObject's removeFromRealm() from an incorrect thread.\n* Fixed a bug affecting RealmConfiguration.equals().\n* Fixed a bug in RealmQuery.isNotNull() which produced wrong results for binary data.\n* Fixed a bug in RealmQuery.isNull() and RealmQuery.isNotNull() which validated the query prematurely.\n* Fixed a bug where closed Realms were trying to refresh themselves resulting in a NullPointerException.\n* Fixed a bug that made it possible to migrate open Realms, which could cause undefined behavior when querying, reading or writing data.\n* Fixed a bug causing column indices to be wrong for some edge cases. See #1611 for details.\n\n## 0.83.1 (2015-10-15)\n* Updated Realm Core to version 0.94.1.\n  - Fixed a bug when using Realm.compactRealm() which could make it impossible to open the Realm file again.\n  - Fixed a bug, so isNull link queries now always return true if any part is null.\n\n## 0.83 (2015-10-08)\n* BREAKING CHANGE: Database file format update. The Realm file created by this version cannot be used by previous versions of Realm.\n* BREAKING CHANGE: Removed deprecated methods and constructors from the Realm class.\n* BREAKING CHANGE: Introduced boxed types Boolean, Byte, Short, Integer, Long, Float and Double. Added null support. Introduced annotation @Required to indicate a field is not nullable. String, Date and byte[] became nullable by default which means a RealmMigrationNeededException will be thrown if an previous version of a Realm file is opened.\n* Deprecated methods: RealmQuery.minimum{Int,Float,Double}, RealmQuery.maximum{Int,Float,Double}. Use RealmQuery.min() and RealmQuery.max() instead.\n* Added support for x86_64.\n* Fixed an issue where opening the same Realm file on two Looper threads could potentially lead to an IllegalStateException being thrown.\n* Fixed an issue preventing the call of listeners on refresh().\n* Opening a Realm file from one thread will no longer be blocked by a transaction from another thread.\n* Range restrictions of Date fields have been removed. Date fields now accepts any value. Milliseconds are still removed.\n\n## 0.82.2 (2015-09-04)\n* Fixed a bug which might cause failure when loading the native library.\n* Fixed a bug which might trigger a timeout in Context.finalize().\n* Fixed a bug which might cause RealmObject.isValid() to throw an exception if the object is deleted.\n* Updated Realm core to version 0.89.9\n  - Fixed a potential stack overflow issue which might cause a crash when encryption was used.\n  - Embedded crypto functions into Realm dynamic lib to avoid random issues on some devices.\n  - Throw RealmEncryptionNotSupportedException if the device doesn't support Realm encryption. At least one device type (HTC One X) contains system bugs that prevents Realm's encryption from functioning properly. This is now detected, and an exception is thrown when trying to open/create an encrypted Realm file. It's up to the application to catch this and decide if it's OK to proceed without encryption instead.\n\n## 0.82.1 (2015-08-06)\n* Fixed a bug where using the wrong encryption key first caused the right key to be seen as invalid.\n* Fixed a bug where String fields were ignored when updating objects from JSON with null values.\n* Fixed a bug when calling System.exit(0), the process might hang.\n\n## 0.82 (2015-07-28)\n* BREAKING CHANGE: Fields with annotation @PrimaryKey are indexed automatically now. Older schemas require a migration.\n* RealmConfiguration.setModules() now accept ignore null values which Realm.getDefaultModule() might return.\n* Trying to access a deleted Realm object throw throws a proper IllegalStateException.\n* Added in-memory Realm support.\n* Closing realm on another thread different from where it was created now throws an exception.\n* Realm will now throw a RealmError when Realm's underlying storage engine encounters an unrecoverable error.\n* @Index annotation can also be applied to byte/short/int/long/boolean/Date now.\n* Fixed a bug where RealmQuery objects are prematurely garbage collected.\n* Removed RealmQuery.between() for link queries.\n\n## 0.81.1 (2015-06-22)\n* Fixed memory leak causing Realm to never release Realm objects.\n\n## 0.81 (2015-06-19)\n* Introduced RealmModules for working with custom schemas in libraries and apps.\n* Introduced Realm.getDefaultInstance(), Realm.setDefaultInstance(RealmConfiguration) and Realm.getInstance(RealmConfiguration).\n* Deprecated most constructors. They have been been replaced by Realm.getInstance(RealmConfiguration) and Realm.getDefaultInstance().\n* Deprecated Realm.migrateRealmAtPath(). It has been replaced by Realm.migrateRealm(RealmConfiguration).\n* Deprecated Realm.deleteFile(). It has been replaced by Realm.deleteRealm(RealmConfiguration).\n* Deprecated Realm.compactFile(). It has been replaced by Realm.compactRealm(RealmConfiguration).\n* RealmList.add(), RealmList.addAt() and RealmList.set() now copy unmanaged objects transparently into Realm.\n* Realm now works with Kotlin (M12+). (Thank you @cypressious.)\n* Fixed a performance regression introduced in 0.80.3 occurring during the validation of the Realm schema.\n* Added a check to give a better error message when null is used as value for a primary key.\n* Fixed unchecked cast warnings when building with Realm.\n* Cleaned up examples (remove old test project).\n* Added checking for missing generic type in RealmList fields in annotation processor.\n\n## 0.80.3 (2015-05-22)\n* Calling Realm.copyToRealmOrUpdate() with an object with a null primary key now throws a proper exception.\n* Fixed a bug making it impossible to open Realms created by Realm-Cocoa if a model had a primary key defined.\n* Trying to using Realm.copyToRealmOrUpdate() with an object with a null primary key now throws a proper exception.\n* RealmChangedListener now also gets called on the same thread that did the commit.\n* Fixed bug where Realm.createOrUpdateWithJson() reset Date and Binary data to default values if not found in the JSON output.\n* Fixed a memory leak when using RealmBaseAdapter.\n* RealmBaseAdapter now allow RealmResults to be null. (Thanks @zaki50.)\n* Fixed a bug where a change to a model class (`RealmList<A>` to `RealmList<B>`) would not throw a RealmMigrationNeededException.\n* Fixed a bug where setting multiple RealmLists didn't remove the previously added objects.\n* Solved ConcurrentModificationException thrown when addChangeListener/removeChangeListener got called in the onChange. (Thanks @beeender)\n* Fixed duplicated listeners in the same realm instance. Trying to add duplicated listeners is ignored now. (Thanks @beeender)\n\n## 0.80.2 (2015-05-04)\n* Trying to use Realm.copyToRealmOrUpdate() with an object with a null primary key now throws a proper exception.\n* RealmMigrationNeedException can now return the path to the Realm that needs to be migrated.\n* Fixed bug where creating a Realm instance with a hashcode collision no longer returned the wrong Realm instance.\n* Updated Realm Core to version 0.89.2\n  - fixed bug causing a crash when opening an encrypted Realm file on ARM64 devices.\n\n## 0.80.1 (2015-04-16)\n* Realm.createOrUpdateWithJson() no longer resets fields to their default value if they are not found in the JSON input.\n* Realm.compactRealmFile() now uses Realm Core's compact() method which is more failure resilient.\n* Realm.copyToRealm() now correctly handles referenced child objects that are already in the Realm.\n* The ARM64 binary is now properly a part of the Eclipse distribution package.\n* A RealmMigrationExceptionNeeded is now properly thrown if @Index and @PrimaryKey are not set correctly during a migration.\n* Fixed bug causing Realms to be cached even though they failed to open correctly.\n* Added Realm.deleteRealmFile(File) method.\n* Fixed bug causing queries to fail if multiple Realms has different field ordering.\n* Fixed bug when using Realm.copyToRealm() with a primary key could crash if default value was already used in the Realm.\n* Updated Realm Core to version 0.89.0\n  - Improved performance for sorting RealmResults.\n  - Improved performance for refreshing a Realm after inserting or modifying strings or binary data.\n  - Fixed bug causing incorrect result when querying indexed fields.\n  - Fixed bug causing corruption of string index when deleting an object where there are duplicate values for the indexed field.\n  - Fixed bug causing a crash after compacting the Realm file.\n* Added RealmQuery.isNull() and RealmQuery.isNotNull() for querying relationships.\n* Fixed a potential NPE in the RealmList constructor.\n\n## 0.80 (2015-03-11)\n* Queries on relationships can be case sensitive.\n* Fixed bug when importing JSONObjects containing NULL values.\n* Fixed crash when trying to remove last element of a RealmList.\n* Fixed bug crashing annotation processor when using \"name\" in model classes for RealmObject references\n* Fixed problem occurring when opening an encrypted Realm with two different instances of the same key.\n* Version checker no longer reports that updates are available when latest version is used.\n* Added support for static fields in RealmObjects.\n* Realm.writeEncryptedCopyTo() has been reenabled.\n\n## 0.79.1 (2015-02-20)\n* copyToRealm() no longer crashes on cyclic data structures.\n* Fixed potential crash when using copyToRealmOrUpdate with an object graph containing a mix of elements with and without primary keys.\n\n## 0.79 (2015-02-16)\n* Added support for ARM64.\n* Added RealmQuery.not() to negate a query condition.\n* Added copyToRealmOrUpdate() and createOrUpdateFromJson() methods, that works for models with primary keys.\n* Made the native libraries much smaller. Arm went from 1.8MB to 800KB.\n* Better error reporting when trying to create or open a Realm file fails.\n* Improved error reporting in case of missing accessors in model classes.\n* Re-enabled RealmResults.remove(index) and RealmResults.removeLast().\n* Primary keys are now supported through the @PrimaryKey annotation.\n* Fixed error when instantiating a Realm with the wrong key.\n* Throw an exception if deleteRealmFile() is called when there is an open instance of the Realm.\n* Made migrations and compression methods synchronised.\n* Removed methods deprecated in 0.76. Now Realm.allObjectsSorted() and RealmQuery.findAllSorted() need to be used instead.\n* Reimplemented Realm.allObjectSorted() for better performance.\n\n## 0.78 (2015-01-22)\n* Added proper support for encryption. Encryption support is now included by default. Keys are now 64 bytes long.\n* Added support to write an encrypted copy of a Realm.\n* Realm no longer incorrectly warns that an instance has been closed too many times.\n* Realm now shows a log warning if an instance is being finalized without being closed.\n* Fixed bug causing Realms to be cached during a RealmMigration resulting in invalid realms being returned from Realm.getInstance().\n* Updated core to 0.88.\n\n## 0.77 (2015-01-16)\n* Added Realm.allObjectsSorted() and RealmQuery.findAllSorted() and extending RealmResults.sort() for multi-field sorting.\n* Added more logging capabilities at the JNI level.\n* Added proper encryption support. NOTE: The key has been increased from 32 bytes to 64 bytes (see example).\n* Added support for unmanaged objects and custom constructors.\n* Added more precise imports in proxy classes to avoid ambiguous references.\n* Added support for executing a transaction with a closure using Realm.executeTransaction().\n* Added RealmObject.isValid() to test if an object is still accessible.\n* RealmResults.sort() now has better error reporting.\n* Fixed bug when doing queries on the elements of a RealmList, ie. like Realm.where(Foo.class).getBars().where().equalTo(\"name\").\n* Fixed bug causing refresh() to be called on background threads with closed Realms.\n* Fixed bug where calling Realm.close() too many times could result in Realm not getting closed at all. This now triggers a log warning.\n* Throw NoSuchMethodError when RealmResults.indexOf() is called, since it's not implemented yet.\n* Improved handling of empty model classes in the annotation processor\n* Removed deprecated static constructors.\n* Introduced new static constructors based on File instead of Context, allowing to save Realm files in custom locations.\n* RealmList.remove() now properly returns the removed object.\n* Calling realm.close() no longer prevent updates to other open realm instances on the same thread.\n\n## 0.76.0 (2014-12-19)\n* RealmObjects can now be imported using JSON.\n* Gradle wrapper updated to support Android Studio 1.0.\n* Fixed bug in RealmObject.equals() so it now correctly compares two objects from the same Realm.\n* Fixed bug in Realm crashing for receiving notifications after close().\n* Realm class is now marked as final.\n* Replaced concurrency example with a better thread example.\n* Allowed to add/remove RealmChangeListeners in RealmChangeListeners.\n* Upgraded to core 0.87.0 (encryption support, API changes).\n* Close the Realm instance after migrations.\n* Added a check to deny the writing of objects outside of a transaction.\n\n## 0.75.1 (2014-12-03)\n* Changed sort to be an in-place method.\n* Renamed SORT_ORDER_DECENDING to SORT_ORDER_DESCENDING.\n* Added sorting functionality to allObjects() and findAll().\n* Fixed bug when querying a date column with equalTo(), it would act as lessThan()\n\n## 0.75.0 (2014-11-28)\n* Realm now implements Closeable, allowing better cleanup of native resources.\n* Added writeCopyTo() and compactRealmFile() to write and compact a Realm to a new file.\n* RealmObject.toString(), equals() and hashCode() now support models with cyclic references.\n* RealmResults.iterator() and listIterator() now correctly iterates the results when using remove().\n* Bug fixed in Exception text when field names was not matching the database.\n* Bug fixed so Realm no longer throws an Exception when removing the last object.\n* Bug fixed in RealmResults which prevented sub-querying.\n* The Date type does not support millisecond resolution, and dates before 1901-12-13 and dates after 2038-01-19 are not supported on 32 bit systems.\n* Fixed bug so Realm no longer throws an Exception when removing the last object.\n* Fixed bug in RealmResults which prevented sub-querying.\n\n## 0.74.0 (2014-11-19)\n* Added support for more field/accessors naming conventions.\n* Added case sensitive versions of string comparison operators equalTo and notEqualTo.\n* Added where() to RealmList to initiate queries.\n* Added verification of fields names in queries with links.\n* Added exception for queries with invalid field name.\n* Allow static methods in model classes.\n* An exception will now be thrown if you try to move Realm, RealmResults or RealmObject between threads.\n* Fixed a bug in the calculation of the maximum of date field in a RealmResults.\n* Updated core to 0.86.0, fixing a bug in cancelling an empty transaction, and major query speedups with floats/doubles.\n* Consistent handling of UTF-8 strings.\n* removeFromRealm() now calls moveLastOver() which is faster and more reliable when deleting multiple objects.\n\n## 0.73.1 (2014-11-05)\n* Fixed a bug that would send infinite notifications in some instances.\n\n## 0.73.0 (2014-11-04)\n* Fixed a bug not allowing queries with more than 1024 conditions.\n* Rewritten the notification system. The API did not change but it's now much more reliable.\n* Added support for switching auto-refresh on and off (Realm.setAutoRefresh).\n* Added RealmBaseAdapter and an example using it.\n* Added deleteFromRealm() method to RealmObject.\n\n## 0.72.0 (2014-10-27)\n* Extended sorting support to more types: boolean, byte, short, int, long, float, double, Date, and String fields are now supported.\n* Better support for Java 7 and 8 in the annotations processor.\n* Better support for the Eclipse annotations processor.\n* Added Eclipse support to the distribution folder.\n* Added Realm.cancelTransaction() to cancel/abort/rollback a transaction.\n* Added support for link queries in the form realm.where(Owner.class).equalTo(\"cat.age\", 12).findAll().\n* Faster implementation of RealmQuery.findFirst().\n* Upgraded core to 0.85.1 (deep copying of strings in queries; preparation for link queries).\n\n## 0.71.0 (2014-10-07)\n* Simplified the release artifact to a single Jar file.\n* Added support for Eclipse.\n* Added support for deploying to Maven.\n* Throw exception if nested transactions are used (it's not allowed).\n* Javadoc updated.\n* Fixed [bug in RealmResults](https://github.com/realm/realm-java/issues/453).\n* New annotation @Index to add search index to a field (currently only supporting String fields).\n* Made the annotations processor more verbose and strict.\n* Added RealmQuery.count() method.\n* Added a new example about concurrency.\n* Upgraded to core 0.84.0.\n\n## 0.70.1 (2014-09-30)\n* Enabled unit testing for the realm project.\n* Fixed handling of camel-cased field names.\n\n## 0.70.0 (2014-09-29)\n* This is the first public beta release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.330078125,
          "content": "# Contributing\n\n## Filing Issues\n\nWhether you find a bug, typo or an API call that could be clarified, please [file an issue](https://github.com/realm/realm-java/issues) on our GitHub repository.\n\nWhen filing an issue, please provide as much of the following information as possible in order to help us fix it:\n\n1. **Goals**\n2. **Expected results**\n3. **Actual results**\n4. **Steps to reproduce**\n5. **Code sample that highlights the issue** (link to full Android Studio projects that we can compile ourselves are ideal)\n6. **Version of Realm/Android Studio/OS**\n\nIf you'd like to send us sensitive sample code to help troubleshoot your issue, you can email <help@realm.io> directly.\n\n## Contributing Enhancements\n\nWe love contributions to Realm! If you'd like to contribute code, documentation, or any other improvements, please [file a Pull Request](https://github.com/realm/realm-java/pulls) on our GitHub repository. Make sure to accept our [CLA](#CLA)!\n\n### CLA\n\nRealm welcomes all contributions! The only requirement we have is that, like many other projects, we need to have a [Contributor License Agreement](https://en.wikipedia.org/wiki/Contributor_License_Agreement) (CLA) in place before we can accept any external code. Our own CLA is a modified version of the Apache Software Foundation’s CLA.\n\n[Please submit your CLA electronically using our Google form](https://docs.google.com/forms/d/e/1FAIpQLSeQ9ROFaTu9pyrmPhXc-dEnLD84DbLuT_-tPNZDOL9J10tOKQ/viewform) so we can accept your submissions. The GitHub username you file there will need to match that of your Pull Requests. If you have any questions or cannot file the CLA electronically, you can email <help@realm.io>.\n\n## Repository Guidelines\n\n### Code Style\n\nWhile we havn't described our code style yet, please just follow the existing style you see in the files you change.\n\nFor source code written in C++, we format it using `clang-format`. You can use the [plugin](https://plugins.jetbrains.com/plugin/8396-clangformatij): mark the entire file and right-click to execute `clang-format` before committing any changes. Of course, if you don't use Android Studio to edit C++ code, run `clang-format` on the command-line.\n\n### Nullability by Annotataion\n\nTo improve code quality and usability in Kotlin, nullability of parameters and return types must be annotated with JSR305 annotations.\n\nIf a parameter is nullable, you must add `@Nullable` annotation to the parameter. On the other hand, if a parameter is non-null, you don't need to add `@Nonnull` annotation since all parameters are treated as `@Nonnull` by default.\n\nFor return types, there is no default nullability. If a method can return `null` as a return value, you must add `@Nullable` annotation to the return type. Currently, `Nonnull` annotation is not mandatory if the method never return `null`.\n\nWhen you add a new package, you must add `package-info.java` and add `@javax.annotation.ParametersAreNonnullByDefault` to the package. Please note that you can't add multiple `package-info.java` in the same package but different location (for example, main and androidTest). When you add a package to both main and androidTest, you only need to add `package-info.java` to main.\n\n### Unit Tests\n\nAll PR's must be accompanied by related unit tests. All bug fixes must have a unit test proving that the bug is fixed.\nYou can use `./realm/gradlew connectedCheck createDebugCoverageReport` to generate a coverage report to check for \nmissing unit test coverage. The aim is 100% code coverage.\n\nWhen writing unit tests, use the following guide lines:\n\n1) Unit tests must be written using JUnit4.\n\n2) All tests for a class should be grouped in a class called `<className>Tests`, unless the functionality is cross-\n   cutting like [`RxJavaTests`](https://github.com/realm/realm-java/blob/master/realm/realm-library/src/androidTest/java/io/realm/RxJavaTests.java) \n   or [`RealmAsyncQueryTests`](https://github.com/realm/realm-java/blob/master/realm/realm-library/src/androidTest/java/io/realm/RealmAsyncQueryTests.java).\n\n3) Test methods should use camelCase and underscore `_` between logical sections to increase method name readability. \n   Methods should ideally start with the name of the method being tested. Patterns like: `<methodName>_<description>`, \n   `<methodName>_<param>_<description>` or `<description>` are encouraged.\n   \n4) All unit tests creating Realms must do so using the [`TestRealmConfigurationFactory`](https://github.com/realm/realm-java/blob/master/realm/realm-library/src/androidTest/java/io/realm/rule/TestRealmConfigurationFactory.java) \n   or [`RunInLooperThread`](https://github.com/realm/realm-java/blob/master/realm/realm-library/src/androidTest/java/io/realm/rule/RunInLooperThread.java) \n   test rules. This ensures that all Realms are properly closed and deleted between each test.\n\n5) Use the `@RunInLooperThread` rule for any test that depends on Realms notification system. \n\n6) Input-parameters should be boundary tested. Especially `Null/NotNull`, but also the state of Realm objects like\n   unmanaged objects, deleted objects, objects from other threads.\n\n7) Unit tests are not required to only have 1 test. It is acceptable to combine multiple tests into one unit test, but\n   if it fails, it should be clear why it failed. E.g. you can group related tests with the same setup like negative \n   tests. If you do so, make sure to separate each \"subtest\" with a comment stating what you test.\n\n8) Use only `@Test(expected = xxx.class)` if the test case contains one line. If the test contains multiple \n   lines and it is the last line that is tested, use the `ExceptedException` rule instead. In all other cases, use \n   the following pattern:\n   \n    try {\n      somethingThatThrowsIllegalArgument();   \n    } catch (IllegalArgumentException ignored) {\n    }\n\n9) Use comments to make the intent of the unit test easily understandable at a glance. A simple one line comment is \n   often easier to read `thanALongCamelCasedSentenceThatAttemptsToDescribeWhatHappens`. Describe the test steps inside \n   the method, if it's not glaringly obvious.\n\nThis is an example of how a unit test class could look like:\n\n    @RunWith(AndroidJUnit4.class)\n    public class RealmTests {\n    \n      @Rule\n      public final TestRealmConfigurationFactory configFactory = new TestRealmConfigurationFactory();\n    \n      @Rule\n      public final RunInLooperThread looperThread = new RunInLooperThread();\n    \n      private Realm realm;   \n    \n      @Before\n      public void setUp() {\n         RealmConfiguration config = configFactory.createConfiguration();\n         realm = Realm.getInstance(config);\n      }\n      \n      @After\n      public void tearDown() {\n        if (realm != null) {\n            realm.close();\n        }  \n      }\n    \n      @Test(expected = IllegalStateException.class)\n      public void createObject_outsideTransaction() {\n        realm.createObject(Foo.class);\n      }\n    \n      @Test\n      public void createObject_illegalInput {\n        // Class not part of the schema\n        try {\n          realm.createObject(Foo.class);    \n        } catch (IllegalArgumentException ignored) {\n        }\n    \n        // Null class\n        try {\n            realm.createObject(null);    \n        } catch (IllegalArgumentException ignored) {\n        }\n      }\n      \n      @Test\n      @RunTestInLooperThread\n      public void addChangeListener_notifiedOnLocalCommit() {\n        realm.addChangeListener(new RealmChangeListener() {\n            @Override\n            public void onChange() {\n                assert(1, realm.allObjects(Foo.class).size());\n                looperThread.testComplete();\n            }\n        });\n    \n        realm.beginTransaction();\n        realm.createObject(Foo.class);\n        realm.commitTransaction();\n      }\n    }\n  \n### Javadoc\n\nAll public classes and methods must have Javadoc describing their purpose.\n\n```java\n/**\n * Checks if given field is equal to the provided value. \n *\n * <pre>\n * {@code\n *   // A multi-line code sample should be formatted like this.\n *   // Please wrap the code element in a <pre> tag.\n * }\n * </pre>\n *\n * @param fieldName the field to compare.\n * @param fieldValue the value to compare with.\n * @param caseSensitive if {@code true}, substring matching is case sensitive. Setting this to {@code false} works for English locale characters only.\n * @param caseSensitive if true, substring matching is case sensitive. Setting this to false only works for English\n *                      locale characters.\n * @return the query object.\n * @throws java.lang.IllegalArgumentException if one or more arguments do not match class or field type.\n * @throws IllegalArgumentException if field name doesn't exists, it doesn't contain a list of links or the type\n * of the object represented by the DynamicRealmObject doesn't match.\n * @deprecated Please use {@link #average(String)} instead.\n * @see #endGroup()\n */\npublic RealmQuery<E> equalTo(String fieldName, String fieldValue, boolean caseSensitive) {\n  // ...\n}\n```\n\n* Method descriptions begin with a verb phrase, e.g. \"Checks\" instead of \"Check\". \n* Capitalize the first letter of the method and @deprecated descriptions. Everything else starts with lower case.\n* Empty line between method description and the rest.\n* End all descriptions with a period `.` (except @see).\n* Reference other Realm classes using `{@link ...}`.\n* Wrap Java values in `{@code ...}`.\n* @throws description must start with \"if\".\n* Never list generic exceptions like `RuntimeException`, `Exception` or `Error`. Always reference the specific error.\n* Line-length maximum is 120 chars. Parameter descriptions that go above this, should be split into multiple lines and indented. Otherwise do not use indentation (contrary to Oracle guidelines).\n\nAbove is based on the official guidelines from Oracle regarding Javadoc: http://www.oracle.com/technetwork/articles/java/index-137868.html\n\n### Branch Strategy\n\nWe have two branches for shared development: `master` and `releases`. We make releases from each.\n\n`master`:\n\n* The `master` branch is where major/minor versions are released from.\n* It is for new features and/or breaking changes.\n\n`releases`:\n\n* The releases branch is where patch versions are released from.\n* It is mainly for bug fixes.\n* Every commit is automatically merged to `master`.\n* Minor changes (e.g. to documentation, tests, and the build system) may not affect end users but should still be merged to `releases` to avoid diverging too far from `master` and to reduce the likelihood of merge conflicts.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.8662109375,
          "content": "FROM ubuntu:22.04\n\n# Locales\nRUN apt-get clean && apt-get -y update && apt-get install -y locales && locale-gen en_US.UTF-8\nENV LANG \"en_US.UTF-8\"\nENV LANGUAGE \"en_US.UTF-8\"\nENV LC_ALL \"en_US.UTF-8\"\nENV TZ=Europe/Copenhagen\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Set the environment variables\nENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64\nENV JAVA8_HOME /usr/lib/jvm/java-8-openjdk-amd64\nENV ANDROID_HOME /opt/android-sdk-linux\n# Need by cmake\nENV ANDROID_NDK_HOME /opt/android-ndk\nENV ANDROID_NDK /opt/android-ndk\nENV PATH ${PATH}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/cmdline-tools/latest:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools\nENV PATH ${PATH}:${NDK_HOME}\nENV NDK_CCACHE /usr/bin/ccache\nENV CCACHE_CPP2 yes\nENV REALM_DISABLE_ANALYTICS true\n\n# Keep the packages in alphabetical order to make it easy to avoid duplication\n# tzdata needs to be installed first. See https://askubuntu.com/questions/909277/avoiding-user-interaction-with-tzdata-when-installing-certbot-in-a-docker-contai\n# `file` is need by the Android Emulator\nRUN DEBIAN_FRONTEND=noninteractive \\\n    && apt-get update -qq \\\n    && apt-get install -y tzdata \\\n    && apt-get install -y \\\n                          bsdmainutils \\\n                          bridge-utils \\\n                          build-essential \\\n                          ccache \\\n                          curl \\\n                          file \\\n                          git \\\n                          jq \\\n                          libc6 \\\n                          libgcc1 \\\n                          libglu1 \\\n                          libncurses5 \\\n                          libstdc++6 \\\n                          libz1 \\\n                          libvirt-clients \\\n                          libvirt-daemon-system \\\n                          openjdk-11-jdk-headless \\\n                          openjdk-8-jdk-headless \\\n                          qemu-kvm \\\n                          s3cmd \\\n                          unzip \\\n                          virt-manager \\\n                          wget \\\n                          zip \\\n                          ninja-build \\\n    && apt-get clean\n\n# Install the Android SDK\n# See https://developer.android.com/studio/index.html#downloads for latest version\nRUN cd /opt && \\\n    wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O android-tools-linux.zip && \\\n    mkdir --parents ${ANDROID_HOME}/cmdline-tools/latest && \\\n    unzip android-tools-linux.zip -d ${ANDROID_HOME}/cmdline-tools/latest && \\\n    mv ${ANDROID_HOME}/cmdline-tools/latest/cmdline-tools/* ${ANDROID_HOME}/cmdline-tools/latest/ && \\\n    rm -f android-tools-linux.zip\n\n# Grab what's needed in the SDK\nRUN sdkmanager --update\n\n# Accept licenses before installing components, no need to echo y for each component\n# License is valid for all the standard components in versions installed from this file\n# Non-standard components: MIPS system images, preview versions, GDK (Google Glass) and Android Google TV require separate licenses, not accepted there\nRUN yes | sdkmanager --licenses\n\n# SDKs\n# The `yes` is for accepting all non-standard tool licenses.\n# Please keep all sections in descending order!\nRUN yes | sdkmanager \\\n    'build-tools;30.0.3' \\\n    'emulator' \\\n    'extras;android;m2repository' \\\n    'platforms;android-30' \\\n    'platform-tools' \\\n    'ndk;23.1.7779620' \\\n    'system-images;android-31;default;x86_64'\n\n# Make the SDK universally writable\nRUN chmod -R a+rwX ${ANDROID_HOME}\n\n# Ensure a new enough version of CMake is available.\nRUN cd /opt \\\n    && wget -nv https://cmake.org/files/v3.22/cmake-3.27.7-linux-x86_64.tar.gz \\\n    && tar zxf cmake-3.27.7-linux-x86_64.tar.gz\n\n# Workaround for https://issuetracker.google.com/issues/206099937\nRUN ln -s /usr/bin/ninja /opt/cmake-3.22.1-linux-x86_64/bin/ninja\n\nENV PATH \"/opt/cmake-3.27.7-linux-x86_64/bin:$PATH\"\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 21.0732421875,
          "content": "#!groovy\n\n@Library('realm-ci') _\n\nimport groovy.json.JsonOutput\n\n// CONSTANTS\n\n// Branches from which we release SNAPSHOT's. Only release branches need to run on actual hardware.\nreleaseBranches = ['main', 'next-major', 'support-new-datatypes', 'releases', 'release/transformer-api' ]\n// Branches that are \"important\", so if they do not compile they will generate a Slack notification\nslackNotificationBranches = [ 'main', 'releases', 'next-major', 'support-new-datatypes', 'release/transformer-api' ]\n// WARNING: Only set to `false` as an absolute last resort. Doing this will disable all integration\n// tests.\nenableIntegrationTests = true\n\n// RUNTIME PROPERTIES\n\n// Will store whether or not this build was successful.\nbuildSuccess = false\n// Will be set to `true` if this build is a full release that should be available on Maven Central.\n// This is determined by comparing the current git tag to the version number of the build.\npublishBuild = false\nmongoDbRealmContainer = null\nmongoDbRealmCommandServerContainer = null\nemulatorContainer = null\ndockerNetworkId = UUID.randomUUID().toString()\ncurrentBranch = (env.CHANGE_BRANCH == null) ? env.BRANCH_NAME : env.CHANGE_BRANCH\nisReleaseBranch = releaseBranches.contains(currentBranch)\n// FIXME: Always used the emulator until we can enable more reliable devices\n// 'android' nodes have android devices attached and 'brix' are physical machines in Copenhagen.\n// nodeSelector = (releaseBranches.contains(currentBranch)) ? 'android' : 'docker-cph-03' // Switch to `brix` when all CPH nodes work: https://jira.mongodb.org/browse/RCI-14\nnodeSelector = 'docker-cph-01'\ntry {\n  node(nodeSelector) {\n    timeout(time: 150, unit: 'MINUTES') {\n      // Allocate a custom workspace to avoid having % in the path (it breaks ld)\n      ws('/tmp/realm-java') {\n        stage('SCM') {\n          checkout([\n                  $class           : 'GitSCM',\n                  branches         : scm.branches,\n                  gitTool          : 'native git',\n                  extensions       : scm.extensions + [\n                          [$class: 'CleanCheckout'],\n                          [$class: 'SubmoduleOption', recursiveSubmodules: true]\n                  ],\n                  userRemoteConfigs: scm.userRemoteConfigs\n          ])\n        }\n\n        // Check type of Build. We are treating this as a release build if we are building\n        // the exact Git SHA that was tagged.\n        echo \"Building from branch: $currentBranch\"\n        gitTag = readGitTag()\n        echo \"Git tag: ${gitTag ?: 'none'}\"\n        if (!gitTag) {\n          gitSha = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(8)\n          echo \"Building non-release: ${gitSha}\"\n          setBuildName(gitSha)\n          publishBuild = false\n        } else {\n          def version = readFile('version.txt').trim()\n          if (gitTag != \"v${version}\") {\n            error \"Git tag '${gitTag}' does not match v${version}\"\n          } else {\n            echo \"Building release: '${gitTag}'\"\n            setBuildName(\"Tag ${gitTag}\")\n            sh \"\"\"\n              set +x\n              sh tools/publish_release.sh verify\n            \"\"\"\n            publishBuild = true\n          }\n        }\n\n        // Toggles for PR vs. Master builds.\n        // - For PR's, we favor speed > absolute correctness. So we just build for x86, use an\n        //   emulator and run unit tests for the ObjectServer variant.\n        // - For branches from which we make releases, we build all architectures and run tests\n        //   on an actual device.\n        def useEmulator = false\n        def emulatorImage = \"\"\n        def buildFlags = \"\"\n        def instrumentationTestTarget = \"connectedAndroidTest\"\n        def deviceSerial = \"\"\n\n        if (!isReleaseBranch) {\n          // Build development branch\n          useEmulator = true\n          emulatorImage = \"system-images;android-31;default;x86_64\"\n          // Build core from source instead of doing it from binary\n          buildFlags = \"-PbuildTargetABIs=x86_64 -PenableLTO=false -PbuildCore=true\"\n          instrumentationTestTarget = \"connectedObjectServerDebugAndroidTest\"\n          deviceSerial = \"emulator-5554\"\n        } else {\n          // Build main/release branch\n          // FIXME: Use emulator until we can get reliable devices on CI.\n          //  But still build all ABI's and run all types of tests.\n          useEmulator = true\n          emulatorImage = \"system-images;android-31;default;x86_64\"\n          buildFlags = \"-PenableLTO=true -PbuildCore=true\"\n          instrumentationTestTarget = \"connectedAndroidTest\"\n          deviceSerial = \"emulator-5554\"\n        }\n\n        try {\n\n          def buildEnv = null\n          stage('Prepare Docker Images') {\n            // TODO Caching is currently disabled (with -do-not-cache suffix) due to the upload speed\n            //  in Copenhagen being too slow. So the upload times out.\n            buildEnv = buildDockerEnv(\"ci/realm-java:main\", push: currentBranch == 'main-do-not-cache')\n            def props = readProperties file: 'dependencies.list'\n            echo \"Version in dependencies.list: ${props.MONGODB_REALM_SERVER}\"\n            def mdbRealmImage = docker.image(\"docker.pkg.github.com/realm/ci/mongodb-realm-test-server:${props.MONGODB_REALM_SERVER}\")\n            docker.withRegistry('https://docker.pkg.github.com', 'github-packages-token') {\n              mdbRealmImage.pull()\n            }\n            def commandServerEnv = docker.build 'mongodb-realm-command-server', \"tools/sync_test_server\"\n\n            // Prepare Docker containers used by Instrumentation tests\n            // TODO: How much of this logic can be moved to start_server.sh for shared logic with local testing.\n            withCredentials([\n                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'realm-kotlin-baas-aws-credentials', accessKeyVariable: 'BAAS_AWS_ACCESS_KEY_ID', secretKeyVariable: 'BAAS_AWS_SECRET_ACCESS_KEY']\n            ]) {\n              def tempDir = runCommand('mktemp -d -t app_config.XXXXXXXXXX')\n              sh \"tools/sync_test_server/app_config_generator.sh ${tempDir} tools/sync_test_server/app_template partition auto testapp1\"\n              sh \"tools/sync_test_server/app_config_generator.sh ${tempDir} tools/sync_test_server/app_template partition email testapp2\"\n              sh \"tools/sync_test_server/app_config_generator.sh ${tempDir} tools/sync_test_server/app_template flex function testapp3\"\n              sh \"docker network create ${dockerNetworkId}\"\n              mongoDbRealmContainer = mdbRealmImage.run(\"--network ${dockerNetworkId} -v$tempDir:/apps  -e AWS_ACCESS_KEY_ID='$BAAS_AWS_ACCESS_KEY_ID' -e AWS_SECRET_ACCESS_KEY='$BAAS_AWS_SECRET_ACCESS_KEY'\")\n              mongoDbRealmCommandServerContainer = commandServerEnv.run(\"--network container:${mongoDbRealmContainer.id} -v$tempDir:/apps\")\n              sh \"timeout 60 sh -c \\\"while [[ ! -f $tempDir/testapp1/app_id || ! -f $tempDir/testapp2/app_id ]]; do echo 'Waiting for server to start'; sleep 1; done\\\"\"\n            }\n          }\n\n          // There is a chance that real devices are attached to the host, so if the emulator is\n          // running we need to make sure that ADB and tests targets the correct device.\n          String restrictDevice = \"\"\n          if (deviceSerial != null) {\n            restrictDevice = \"-e ANDROID_SERIAL=${deviceSerial} \"\n          }\n\n          buildEnv.inside(\"-e HOME=/tmp \" +\n                  \"-e _JAVA_OPTIONS=-Duser.home=/tmp \" +\n                  \"--privileged \" +\n                  \"-v /dev/kvm:/dev/kvm \" +\n                  \"-v /dev/bus/usb:/dev/bus/usb \" +\n                  \"-v ${env.HOME}/gradle-cache:/tmp/.gradle \" +\n                  \"-v ${env.HOME}/.android:/tmp/.android \" +\n                  \"-v ${env.HOME}/ccache:/tmp/.ccache \" +\n                  restrictDevice +\n                  \"-e REALM_CORE_DOWNLOAD_DIR=/tmp/.gradle \" +\n                  \"--network container:${mongoDbRealmContainer.id} \") {\n\n            // Lock required around all usages of Gradle as it isn't\n            // able to share its cache between builds.\n            lock(\"${env.NODE_NAME}-android\") {\n              if (useEmulator) {\n                // TODO: We should wait until the emulator is online. For now assume it starts fast enough\n                //  before the tests will run, since the library needs to build first.\n                sh \"\"\"yes '\\n' | avdmanager create avd -n CIEmulator -k '${emulatorImage}' --force\"\"\"\n                sh \"adb start-server\" // https://stackoverflow.com/questions/56198290/problems-with-adb-exe\n                // Need to go to ANDROID_HOME due to https://askubuntu.com/questions/1005944/emulator-avd-does-not-launch-the-virtual-device\n                sh \"cd \\$ANDROID_HOME/tools && emulator -avd CIEmulator -no-boot-anim -no-window -wipe-data -noaudio -partition-size 4096 -memory 1536 &\"\n                try {\n                  runBuild(buildFlags, instrumentationTestTarget)\n                } finally {\n                  sh \"adb emu kill\"\n                }\n              } else {\n                runBuild(buildFlags, instrumentationTestTarget)\n              }\n\n              // Release the library if needed\n              if (publishBuild) {\n                runPublish()\n              }\n            }\n          }\n        } finally {\n          // We assume that creating these containers and the docker network can be considered an atomic operation.\n          if (mongoDbRealmContainer != null && mongoDbRealmCommandServerContainer != null) {\n            archiveServerLogs(mongoDbRealmContainer.id, mongoDbRealmCommandServerContainer.id)\n            mongoDbRealmContainer.stop()\n            mongoDbRealmCommandServerContainer.stop()\n            sh \"docker network rm ${dockerNetworkId}\"\n          }\n          if (emulatorContainer != null) {\n            emulatorContainer.stop()\n          }\n        }\n      }\n    }\n    currentBuild.rawBuild.setResult(Result.SUCCESS)\n    buildSuccess = true\n  }\n} catch(Exception e) {\n  currentBuild.rawBuild.setResult(Result.FAILURE)\n  buildSuccess = false\n  throw e\n} finally {\n  if (slackNotificationBranches.contains(currentBranch)) {\n    node {\n      withCredentials([[$class: 'StringBinding', credentialsId: 'slack-webhook-java-ci-channel', variable: 'SLACK_URL']]) {\n        def payload = null\n        if (!buildSuccess) {\n          payload = JsonOutput.toJson([\n                  username: \"Realm CI\",\n                  icon_emoji: \":realm_new:\",\n                  text: \"*The ${currentBranch} branch is broken!*\\n<${env.BUILD_URL}|Click here> to check the build.\"\n          ])\n        } else if (currentBuild.getPreviousBuild() && currentBuild.getPreviousBuild().getResult().toString() != \"SUCCESS\" && buildSuccess) {\n          payload = JsonOutput.toJson([\n                  username: \"Realm CI\",\n                  icon_emoji: \":realm_new:\",\n                  text: \"*${currentBranch} is back to normal!*\\n<${env.BUILD_URL}|Click here> to check the build.\"\n          ])\n        }\n\n        if (payload != null) {\n          sh \"curl -X POST --data-urlencode \\'payload=${payload}\\' ${env.SLACK_URL}\"\n        }\n      }\n    }\n  }\n}\n\n// Runs all build steps\ndef runBuild(buildFlags, instrumentationTestTarget) {\n\n  stage('Build') {\n    withCredentials([\n            [$class: 'StringBinding', credentialsId: 'maven-central-java-ring-file', variable: 'SIGN_KEY'],\n            [$class: 'StringBinding', credentialsId: 'maven-central-java-ring-file-password', variable: 'SIGN_KEY_PASSWORD'],\n    ]) {\n      sh \"chmod +x gradlew\"\n      def signingFlags = \"\"\n      if (isReleaseBranch) {\n        signingFlags = \"-PsignBuild=true -PsignSecretRingFile=\\\"${SIGN_KEY}\\\" -PsignPassword=${SIGN_KEY_PASSWORD}\"\n      }\n      sh \"./gradlew assemble ${buildFlags} ${signingFlags} --stacktrace\"\n    }\n  }\n\n  stage('Tests') {\n    parallel 'JVM' : {\n      try {\n        sh \"chmod +x gradlew && ./gradlew check ${buildFlags} --stacktrace\"\n      } finally {\n        storeJunitResults 'realm/realm-annotations-processor/build/test-results/test/TEST-*.xml'\n        storeJunitResults 'examples/unitTestExample/build/test-results/**/TEST-*.xml'\n        storeJunitResults 'realm/realm-library/build/test-results/**/TEST-*.xml'\n        step([$class: 'LintPublisher'])\n      }\n    },\n    // FIXME https://github.com/realm/realm-java/issues/7593\n    // 'JVM8 introExample check' : {\n    //   // Force build with JVM8, by disabling the cache, and check introExample.\n    //   sh \"\"\"\n    //     cd examples/moduleExample\n    //     JAVA_HOME=\\$JAVA8_HOME ../gradlew check ${buildFlags} --stacktrace\n    //   \"\"\"\n    // },\n    'Realm Transformer' : {\n      try {\n        gradle('realm-transformer', 'check')\n      } finally {\n        storeJunitResults 'realm-transformer/build/test-results/test/TEST-*.xml'\n      }\n    },\n    // 'Static code analysis' : {\n    //   try {\n    //     gradle('realm', \"spotbugsMain pmd checkstyle ${buildFlags}\")\n    //   } finally {\n    //     publishHTML(target: [\n    //       allowMissing: false,\n    //       alwaysLinkToLastBuild: false,\n    //       keepAll: true,\n    //       reportDir: 'realm/realm-library/build/reports/spotbugs',\n    //       reportFiles: 'main.html',\n    //       reportName: 'Spotbugs report'\n    //     ])\n\n    //     publishHTML(target: [\n    //       allowMissing: false,\n    //       alwaysLinkToLastBuild: false,\n    //       keepAll: true,\n    //       reportDir: 'realm/realm-library/build/reports/pmd',\n    //       reportFiles: 'pmd.html',\n    //       reportName: 'PMD report'\n    //     ])\n\n    //     publishHTML(target: [\n    //       allowMissing: false,\n    //       alwaysLinkToLastBuild: false,\n    //       keepAll: true,\n    //       reportDir: 'realm/realm-library/build/reports/checkstyle',\n    //       reportFiles: 'checkstyle.html',\n    //       reportName: 'Checkstyle report'\n    //     ])\n    //   }\n    // },\n    'Gradle Plugin' : {\n      try {\n        gradle('gradle-plugin', 'check')\n      } finally {\n        storeJunitResults 'gradle-plugin/build/test-results/test/TEST-*.xml'\n      }\n    },\n    'JavaDoc': {\n      sh \"./gradlew javadoc ${buildFlags} --stacktrace\"\n    }\n  }\n\n  stage('Device Tests') {\n      if (enableIntegrationTests) {\n        String backgroundPid\n        try {\n          backgroundPid = startLogCatCollector()\n          forwardAdbPorts()\n          gradle('realm', \"${instrumentationTestTarget} ${buildFlags}\")\n          gradle('examples', \":unitTestExample:connectedDebugAndroidTest\")\n        } finally {\n          stopLogCatCollector(backgroundPid)\n          storeJunitResults 'realm/realm-library/build/outputs/androidTest-results/connected/**/TEST-*.xml'\n          storeJunitResults 'realm/kotlin-extensions/build/outputs/androidTest-results/connected/**/TEST-*.xml'\n        }\n      } else {\n        echo \"Instrumentation tests were disabled.\"\n      }\n  }\n\n\n  // TODO: add support for running monkey on the example apps\n\n  def collectMetrics = ['main'].contains(currentBranch)\n  echo \"Collecting metrics: $collectMetrics\"\n  if (collectMetrics) {\n    stage('Collect metrics') {\n      collectAarMetrics()\n    }\n  }\n\n  echo \"Releasing SNAPSHOT: ($isReleaseBranch, $publishBuild)\"\n  if (isReleaseBranch && !publishBuild) {\n    stage('Publish SNAPSHOT') {\n      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'maven-central-credentials', passwordVariable: 'MAVEN_CENTRAL_PASSWORD', usernameVariable: 'MAVEN_CENTRAL_USER']]) {\n        sh \"chmod +x gradlew && ./gradlew mavenCentralUpload ${buildFlags} -PossrhUsername='$MAVEN_CENTRAL_USER' -PossrhPassword='$MAVEN_CENTRAL_PASSWORD' --stacktrace\"\n      }\n    }\n  }\n}\n\ndef runPublish() {\n  stage('Publish Release') {\n    withCredentials([\n            [$class: 'StringBinding', credentialsId: 'maven-central-java-ring-file', variable: 'SIGN_KEY'],\n            [$class: 'StringBinding', credentialsId: 'maven-central-java-ring-file-password', variable: 'SIGN_KEY_PASSWORD'],\n            [$class: 'StringBinding', credentialsId: 'slack-webhook-java-ci-channel', variable: 'SLACK_URL_CI'],\n            [$class: 'StringBinding', credentialsId: 'slack-webhook-releases-channel', variable: 'SLACK_URL_RELEASE'],\n            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'maven-central-credentials', passwordVariable: 'MAVEN_CENTRAL_PASSWORD', usernameVariable: 'MAVEN_CENTRAL_USER'],\n            [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'DOCS_S3_ACCESS_KEY', credentialsId: 'mongodb-realm-docs-s3', secretKeyVariable: 'DOCS_S3_SECRET_KEY'],\n            [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'REALM_S3_ACCESS_KEY', credentialsId: 'tightdb-s3-ci', secretKeyVariable: 'REALM_S3_SECRET_KEY']\n    ]) {\n      // TODO Make sure that buildFlags and signingFlags are unified across builds\n      sh \"\"\"\n        set +x\n        sh tools/publish_release.sh '$MAVEN_CENTRAL_USER' '$MAVEN_CENTRAL_PASSWORD' \\\n        '$REALM_S3_ACCESS_KEY' '$REALM_S3_SECRET_KEY' \\\n        '$DOCS_S3_ACCESS_KEY' '$DOCS_S3_SECRET_KEY' \\\n        '$SLACK_URL_RELEASE' '$SLACK_URL_CI' \\\n        '-PsignBuild=true -PsignSecretRingFile=\"${SIGN_KEY}\" -PsignPassword=${SIGN_KEY_PASSWORD} -PenableLTO=true -PbuildCore=true'\n      \"\"\"\n    }\n  }\n}\n\n\ndef forwardAdbPorts() {\n  sh \"\"\" adb reverse tcp:9080 tcp:9080 && adb reverse tcp:9443 tcp:9443 &&\n      adb reverse tcp:8888 tcp:8888 && adb reverse tcp:9090 tcp:9090\n  \"\"\"\n}\n\nString startLogCatCollector() {\n  // Cancel build quickly if no device is available. The lock acquired already should\n  // ensure we have access to a device. If not, it is most likely a more severe problem.\n  timeout(time: 1, unit: 'MINUTES') {\n    // Need ADB as root to clear all buffers: https://stackoverflow.com/a/47686978/1389357\n    sh 'adb devices'\n    sh \"\"\"adb root\n      adb logcat -b all -c\n      adb logcat -v time > 'logcat.txt' &\n      echo \\$! > pid\n    \"\"\"\n    return readFile(\"pid\").trim()\n  }\n}\n\ndef stopLogCatCollector(String backgroundPid) {\n  // The pid might not be available if the build was terminated early or stopped due to\n  // a build error.\n  if (backgroundPid != null) {\n    sh \"kill ${backgroundPid}\"\n    zip([\n      'zipFile': 'logcat.zip',\n      'archive': true,\n      'glob' : 'logcat.txt'\n    ])\n    sh 'rm logcat.txt'\n  }\n}\n\ndef archiveServerLogs(String mongoDbRealmContainerId, String commandServerContainerId) {\n  sh \"docker logs ${commandServerContainerId} > ./command-server.log\"\n  zip([\n    'zipFile': 'command-server-log.zip',\n    'archive': true,\n    'glob' : 'command-server.log'\n  ])\n  sh 'rm command-server.log'\n\n  sh \"docker cp ${mongoDbRealmContainerId}:/var/log/stitch.log ./stitch.log\"\n  zip([\n    'zipFile': 'stitchlog.zip',\n    'archive': true,\n    'glob' : 'stitch.log'\n  ])\n  sh 'rm stitch.log'\n\n  sh \"docker cp ${mongoDbRealmContainerId}:/var/log/mongodb.log ./mongodb.log\"\n  zip([\n    'zipFile': 'mongodb.zip',\n    'archive': true,\n    'glob' : 'mongodb.log'\n  ])\n  sh 'rm mongodb.log'\n}\n\ndef sendMetrics(String metricName, String metricValue, Map<String, String> tags) {\n  def tagsString = getTagsString(tags)\n  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '5b8ad2d9-61a4-43b5-b4df-b8ff6b1f16fa', passwordVariable: 'influx_pass', usernameVariable: 'influx_user']]) {\n    sh \"curl -i -XPOST 'https://influxdb.realmlab.net/write?db=realm' --data-binary '${metricName},${tagsString} value=${metricValue}i' --user '${env.influx_user}:${env.influx_pass}'\"\n  }\n}\n\n@NonCPS\ndef getTagsString(Map<String, String> tags) {\n  return tags.collect { k,v -> \"$k=$v\" }.join(',')\n}\n\ndef storeJunitResults(String path) {\n  step([\n    $class: 'JUnitResultArchiver',\n    allowEmptyResults: true,\n    testResults: path\n  ])\n}\n\ndef collectAarMetrics() {\n  def flavors = ['base', 'objectServer']\n  for (def i = 0; i < flavors.size(); i++) {\n    def flavor = flavors[i]\n    sh \"\"\"set -xe\n      cd realm/realm-library/build/outputs/aar\n      unzip realm-android-library-${flavor}-release.aar -d unzipped${flavor}\n      find \\$ANDROID_HOME -name d8 | sort -r | head -n 1 > d8\n      \\$(cat d8) --release --output ./unzipped${flavor} unzipped${flavor}/classes.jar\n      cat ./unzipped${flavor}/temp${flavor}.dex | head -c 92 | tail -c 4 | hexdump -e '1/4 \\\"%d\\\"' > methods${flavor}\n    \"\"\"\n\n    def methods = readFile(\"realm/realm-library/build/outputs/aar/methods${flavor}\")\n    sendMetrics('methods', methods, ['flavor':flavor])\n\n    def aarFile = findFiles(glob: \"realm/realm-library/build/outputs/aar/realm-android-library-${flavor}-release.aar\")[0]\n    sendMetrics('aar_size', aarFile.length as String, ['flavor':flavor])\n\n    def soFiles = findFiles(glob: \"realm/realm-library/build/outputs/aar/unzipped${flavor}/jni/*/librealm-jni.so\")\n    for (def j = 0; j < soFiles.size(); j++) {\n      def soFile = soFiles[j]\n      def abiName = soFile.path.tokenize('/')[-2]\n      def libSize = soFile.length as String\n      sendMetrics('abi_size', libSize, ['flavor':flavor, 'type':abiName])\n    }\n  }\n}\n\ndef gradle(String commands) {\n  sh \"chmod +x gradlew && ./gradlew ${commands} --stacktrace\"\n}\n\ndef gradle(String relativePath, String commands) {\n  sh \"cd ${relativePath} && chmod +x gradlew && ./gradlew ${commands} --stacktrace\"\n}\n\ndef readGitTag() {\n  def command = 'git describe --exact-match --tags HEAD'\n  def returnStatus = sh(returnStatus: true, script: command)\n  if (returnStatus != 0) {\n    return null\n  }\n  return sh(returnStdout: true, script: command).trim()\n}\n\ndef runCommand(String command){\n  return sh(script: command, returnStdout: true).trim()\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.4560546875,
          "content": "> [!WARNING]\n> We announced the deprecation of Atlas Device Sync + Realm SDKs in September 2024. For more information please see:\n> - [SDK Deprecation](https://www.mongodb.com/docs/atlas/device-sdks/deprecation/)\n> - [Device Sync Deprecation](https://www.mongodb.com/docs/atlas/app-services/sync/device-sync-deprecation/)\n>\n\n<picture>\n    <source srcset=\"./media/logo-dark.svg\" media=\"(prefers-color-scheme: dark)\" alt=\"realm by MongoDB\">\n    <img src=\"./media/logo.svg\" alt=\"realm by MongoDB\">\n</picture>\n\n[![Maven Central](https://img.shields.io/maven-central/v/io.realm/realm-gradle-plugin?colorB=4dc427&label=Maven%20Central)](https://search.maven.org/artifact/io.realm/realm-gradle-plugin)\n[![License](https://img.shields.io/badge/License-Apache-blue.svg)](https://github.com/realm/realm-java/blob/master/LICENSE)\n\nRealm is a mobile database that runs directly inside phones, tablets or wearables.\nThis repository holds the source code for the Java version of Realm, which currently runs only on Android.\n\n## Realm Kotlin\n\nThe [Realm Kotlin SDK](https://github.com/realm/realm-kotlin) is now GA and can be used for both Android and Kotlin Multiplatform. While we are still adding features, please consider using Realm Kotlin for any new project, and let us know if you miss anything there!\n\n## Features\n\n* **Mobile-first:** Realm is the first database built from the ground up to run directly inside phones, tablets, and wearables.\n* **Simple:** Data is directly exposed as objects and queryable by code, removing the need for ORM's riddled with performance & maintenance issues. Plus, we've worked hard to [keep our API down to very few classes](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/): most of our users pick it up intuitively, getting simple apps up & running in minutes.\n* **Modern:** Realm supports easy thread-safety, relationships & encryption.\n* **Fast:** Realm is faster than even raw SQLite on common operations while maintaining an extremely rich feature set.\n* **[Device Sync](https://www.mongodb.com/atlas/app-services/device-sync)**: Makes it simple to keep data in sync across users, devices, and your backend in real-time. Get started for free with [a template application](https://github.com/mongodb/template-app-react-native-todo) and [create the cloud backend](http://mongodb.com/realm/register?utm_medium=github_atlas_CTA&utm_source=realm_js_github).\n\n## Getting Started\n\nPlease see the [detailed instructions in our docs](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/install/) to add Realm to your project.\n\n## Documentation\n\nDocumentation for Realm can be found at [mongodb.com/docs/atlas/device-sdks/sdk/java/](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/).\nThe API reference is located at [mongodb.com/docs/atlas/device-sdks/sdk/java/api/](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/api/).\n\n## Getting Help\n\n- **Got a question?**: Look for previous questions on the [#realm tag](https://stackoverflow.com/questions/tagged/realm?sort=newest) — or [ask a new question](http://stackoverflow.com/questions/ask?tags=realm). We actively monitor & answer questions on StackOverflow! You can also check out our [Community Forum](https://developer.mongodb.com/community/forums/tags/c/realm/9/realm-sdk) where general questions about how to do something can be discussed.\n- **Think you found a bug?** [Open an issue](https://github.com/realm/realm-java/issues/new?template=bug_report.md). If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.\n- **Have a feature request?** [Open an issue](https://github.com/realm/realm-java/issues/new?template=feature_request.md). Tell us what the feature should do, and why you want the feature.\n\n## Using Snapshots\n\nIf you want to test recent bugfixes or features that have not been packaged in an official release yet, you can use a **-SNAPSHOT** release of the current development version of Realm via Gradle, available on [Sonatype OSS](https://oss.sonatype.org/#nexus-search;quick~realm-gradle-plugin)\n\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n        google()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots/'\n        }\n        jcenter()\n    }\n    dependencies {\n        classpath \"io.realm:realm-gradle-plugin:<version>-SNAPSHOT\"\n    }\n}\n\nallprojects {\n    repositories {\n        mavenCentral()\n        google()\n        maven {\n            url 'https://oss.sonatype.org/content/repositories/snapshots/'\n        }\n        jcenter()\n    }\n}\n```\n\nSee [version.txt](version.txt) for the latest version number.\n\n## Building Realm\n\nIn case you don't want to use the precompiled version, you can build Realm yourself from source.\n\n### Prerequisites\n\n * Download the [**JDK 8**](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) from Oracle and install it.\n * The latest stable version of Android Studio. Currently [4.1.1](https://developer.android.com/studio/).\n * Download & install the Android SDK **Build-Tools 29.0.3**, **Android Pie (API 29)** (for example through Android Studio’s **Android SDK Manager**).\n * Install CMake version 3.18.4 and build Ninja.\n * Install the NDK (Side-by-side) **21.0.6113669** from the SDK Manager in Android Studio. Remember to check `☑  Show package details` in the manager to display all available versions.\n\n * Add the Android home environment variable to your profile:\n\n    ```\n    export ANDROID_HOME=~/Library/Android/sdk\n    ```\n\n * If you are launching Android Studio from the macOS Finder, you should also run the following command:\n\n    ```\n    launchctl setenv ANDROID_HOME \"$ANDROID_HOME\"\n    ```\n\n * If you'd like to specify the location in which to store the archives of Realm Core, define the `REALM_CORE_DOWNLOAD_DIR` environment variable. It enables caching core release artifacts.\n\n   ```\n   export REALM_CORE_DOWNLOAD_DIR=~/.realmCore\n   ```\n\n   macOS users must also run the following command for Android Studio to see this environment variable.\n\n   ```\n   launchctl setenv REALM_CORE_DOWNLOAD_DIR \"$REALM_CORE_DOWNLOAD_DIR\"\n   ```\n\nIt would be a good idea to add all of the symbol definitions (and their accompanying `launchctl` commands, if you are using macOS) to your `~/.profile` (or `~/.zprofile` if the login shell is `zsh`)\n\n * If you develop Realm Java with Android Studio, we recommend you to exclude some directories from indexing target by executing following steps on Android Studio. It really speeds up indexing phase after the build.\n\n    - Under `/realm/realm-library/`, select `build`, `.cxx` and `distribution` folders in `Project` view.\n    - Press `Command + Shift + A` to open `Find action` dialog. If you are not using default keymap nor using macOS, you can find your shortcut key in `Keymap` preference by searching `Find action`.\n    - Search `Excluded` (not `Exclude`) action and select it. Selected folder icons should become orange (in default theme).\n    - Restart Android Studio.\n\n### Download sources\n\nYou can download the source code of Realm Java by using git. Since realm-java has git submodules, use `--recursive` when cloning the repository.\n\n```\ngit clone git@github.com:realm/realm-java.git --recursive\n```\n\nor\n\n```\ngit clone https://github.com/realm/realm-java.git --recursive\n```\n\n### Build\n\nOnce you have completed all the pre-requisites building Realm is done with a simple command.\n\n```\n./gradlew assemble\n```\n\nThat command will generate:\n\n * a jar file for the Realm Gradle plugin\n * an aar file for the Realm library\n * a jar file for the annotations\n * a jar file for the annotations processor\n\nThe full build may take an hour or more, to complete.\n\n### Building from source\n\nIt is possible to build Realm Java with the submodule version of Realm Core. This is done by providing the following parameter when building: `-PbuildCore=true`.\n\n```\n./gradlew assembleBase -PbuildCore=true\n```\n\nYou can turn off interprocedural optimizations with the following parameter: `-PenableLTO=false`. \n\n```\n./gradlew assembleBase -PenableLTO=false`\n```\n\nNote: Building the `Base` variant would always build realm-core.\n\nNote: Interprocedural optimizations are enabled by default.\n\nNote: If you want to build from source inside Android Studio, you need to update the Gradle parameters by going into the Realm projects settings `Settings > Build, Execution, Deployment > Compiler > Command-line options` and add `-PbuildCore=true` or `-PenableLTO=false` to it. Alternatively you can add it into your `gradle.properties`:\n\n```\nbuildCore=true\nenableLTO=false\n```\n\nNote: If building on OSX you might like to prevent Gatekeeper to block all NDK executables by disabling it: `sudo spctl --master-disable`. Remember to enable it afterwards: `sudo spctl --master-enable`\n\n### Other Commands\n\n * `./gradlew tasks` will show all the available tasks\n * `./gradlew javadoc` will generate the Javadocs\n * `./gradlew monkeyExamples` will run the monkey tests on all the examples\n * `./gradlew installRealmJava` will install the Realm library and plugin to mavenLocal()\n * `./gradlew clean -PdontCleanJniFiles` will remove all generated files except for JNI related files. This reduces recompilation time a lot.\n * `./gradlew connectedUnitTests -PbuildTargetABIs=$(adb shell getprop ro.product.cpu.abi)` will build JNI files only for the ABI which corresponds to the connected device.  These tests require a running Object Server (see below)\n\nGenerating the Javadoc using the command above may generate warnings. The Javadoc is generated despite the warnings.\n\n\n### Upgrading Gradle Wrappers\n\n All gradle projects in this repository have `wrapper` task to generate Gradle Wrappers. Those tasks refer to `gradle` property defined in `/dependencies.list` to determine Gradle Version of generating wrappers.\nWe have a script `./tools/update_gradle_wrapper.sh` to automate these steps. When you update Gradle Wrappers, please obey the following steps.\n\n 1. Edit `gradle` property in defined in `/dependencies.list` to new Gradle Wrapper version.\n 2. Execute `/tools/update_gradle_wrapper.sh`.\n\n### Gotchas\n\nThe repository is organized into six Gradle projects:\n\n * `realm`: it contains the actual library (including the JNI layer) and the annotations processor.\n * `realm-annotations`: it contains the annotations defined by Realm.\n * `realm-transformer`: it contains the bytecode transformer.\n * `gradle-plugin`: it contains the Gradle plugin.\n * `examples`: it contains the example projects. This project directly depends on `gradle-plugin` which adds a dependency to the artifacts produced by `realm`.\n * The root folder is another Gradle project.  All it does is orchestrate the other jobs.\n\nThis means that `./gradlew clean` and `./gradlew cleanExamples` will fail if `assembleExamples` has not been executed first.\nNote that IntelliJ [does not support multiple projects in the same window](https://youtrack.jetbrains.com/issue/IDEABKL-6118#)\nso each of the six Gradle projects must be imported as a separate IntelliJ project.\n\nSince the repository contains several completely independent Gradle projects, several independent builds are run to assemble it.\nSeeing a line like: `:realm:realm-library:compileBaseDebugAndroidTestSources UP-TO-DATE` in the build log does *not* imply\nthat you can run `./gradlew :realm:realm-library:compileBaseDebugAndroidTestSources`.\n\n## Examples\n\nThe `./examples` folder contains many example projects showing how Realm can be used. If this is the first time you checkout or pull a new version of this repository to try the examples, you must call `./gradlew installRealmJava` from the top-level directory first. Otherwise, the examples will not compile as they depend on all Realm artifacts being installed in `mavenLocal()`.\n\nStandalone examples can be [downloaded from website](https://www.mongodb.com/docs/realm/sdk/java/quick-starts/quick-start-local/#complete-example).\n\n## Running Tests on a Device\n\nTo run these tests, you must have a device connected to the build computer, and the `adb` command must be in your `PATH`\n\n1. Connect an Android device and verify that the command `adb devices` shows a connected device:\n\n    ```sh\n    adb devices\n    List of devices attached\n    004c03eb5615429f device\n    ```\n\n2. Run instrumentation tests:\n\n    ```sh\n    cd realm\n    ./gradlew connectedBaseDebugAndroidTest\n    ```\n\nThese tests may take as much as half an hour to complete.\n\n## Running Tests Using The Realm Object Server\n\nTests in `realm/realm-library/src/syncIntegrationTest` require a running testing server to work.\nA docker image can be built from `tools/sync_test_server/Dockerfile` to run the test server.\n`tools/sync_test_server/start_server.sh` will build the docker image automatically.\n\nTo run a testing server locally:\n\n1. Install [docker](https://www.docker.com/products/overview) and run it.\n\n2. Run `tools/sync_test_server/start_server.sh`:\n\n    ```sh\n    cd tools/sync_test_server\n    ./start_server.sh\n    ```\n\n    This command will not complete until the server has stopped.\n\n3. Run instrumentation tests\n\n    In a new terminal window, run:\n\n    ```sh\n    cd realm\n    ./gradlew connectedObjectServerDebugAndroidTest\n    ```\n\nNote that if using VirtualBox (Genymotion), the network needs to be bridged for the tests to work.\nThis is done in `VirtualBox > Network`. Set \"Adapter 2\" to \"Bridged Adapter\".\n\nThese tests may take as much as half an hour to complete.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more details!\n\nThis project adheres to the [MongoDB Code of Conduct](https://www.mongodb.com/community-code-of-conduct).\nBy participating, you are expected to uphold this code. Please report\nunacceptable behavior to [community-conduct@mongodb.com](mailto:community-conduct@mongodb.com).\n\nThe directory `realm/config/studio` contains lint and style files recommended for project code.\nImport them from Android Studio with Android Studio > Preferences... > Code Style > Manage... > Import,\nor Android Studio > Preferences... > Inspections > Manage... > Import.  Once imported select the\nstyle/lint in the drop-down to the left of the Manage... button.\n\n## License\n\nRealm Java is published under the Apache 2.0 license.\n\nRealm Core is also published under the Apache 2.0 license and is available\n[here](https://github.com/realm/realm-core).\n\n## Feedback\n\n**_If you use Realm and are happy with it, all we ask is that you, please consider sending out a tweet mentioning [@realm](http://twitter.com/realm) to share your thoughts!_**\n\n**_And if you don't like it, please let us know what you would like improved, so we can fix it!_**\n\n<img style=\"width: 0px; height: 0px;\" src=\"https://3eaz4mshcd.execute-api.us-east-1.amazonaws.com/prod?s=https://github.com/realm/realm-java#README.md\">\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 1.5458984375,
          "content": "# Support\n\nThe Realm team is here to help you with your Realm-related issues!\n\n## Documentation\n\nBefore asking questions, please familiarize yourself with our [Java](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/) documentation. We also have a number of [Troubleshooting Notes](https://www.mongodb.com/docs/atlas/device-sdks/sdk/java/troubleshooting/) which cover various topics that may be of interest.\n\n## Stack Overflow\n\nIf you have questions about configuring or using Realm you can ask them on Stack Overflow. We continually monitor the [`realm` tag](https://stackoverflow.com/tags/realm). Please also tag your question with `java`, `android`, or other tags as appropriate.\n\nWhen asking questions on Stack Overflow, please keep in mind Stack Overflow's [question guidelines](https://stackoverflow.com/help/how-to-ask), and please use their search functionality to see if your question has been asked before.\n\n## GitHub Issues\n\nIf you are running into issues with Realm, including potential bugs or feature requests, we encourage you to file an issue on our [GitHub issue tracker](https://github.com/realm/realm-java/issues). Please check out our [Contribution Guidelines](CONTRIBUTING.md) for information on how to properly file an issue.\n\nWe greatly appreciate demonstration projects that we can run for ourselves in order to see issues or potential bugs; we prioritize clearly-written tickets that include reproduction cases. You may attach these to the ticket; let us know if you need to share them confidentially, and we’ll provide instructions on how to do so.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 15.1025390625,
          "content": "buildscript {\n    def properties = new Properties()\n    properties.load(new FileInputStream(\"${projectDir}/dependencies.list\"))\n\n    repositories {\n        jcenter()\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n}\n\ndef currentVersion = file(\"${projectDir}/version.txt\").text.trim()\n\n// Find property in either System environment or Gradle properties.\n// If set in both places, Gradle properties win.\ndef getPropertyValueOrThrow(String propertyName) {\n    def value = System.getenv(propertyName)\n    if (project.hasProperty(propertyName)) {\n        value = project.getProperty(propertyName)\n    }\n    if (value == null || value.trim().isEmpty()) {\n        throw new GradleException(\"Could not find '$propertyName'. \" +\n                \"Most be provided as either environment variable or \" +\n                \"a Gradle property.\")\n    }\n    return value\n}\n\n// Shared configuration that copies relevant properties from the root level and parse them on to\n// child projects.\ndef copyProperties = {\n    if (project.hasProperty('buildTargetABIs')) {\n        // Valid options: armeabi-v7a, arm64-v8a, x86, x86_64\n        startParameter.projectProperties += [buildTargetABIs: project.getProperty('buildTargetABIs')]\n    }\n    if (project.hasProperty('coreSourcePath')) {\n        def absolutePath = file(project.getProperty('coreSourcePath')).absolutePath\n        startParameter.projectProperties += [coreSourcePath: absolutePath]\n    }\n    if (project.hasProperty('s3cfg')) {\n        startParameter.projectProperties += [s3cfg: project.getProperty('s3cfg')]\n    }\n    if (project.hasProperty('enableLTO')) {\n        startParameter.projectProperties += [enableLTO: project.getProperty('enableLTO')]\n    }\n    if (project.hasProperty('buildCore')) {\n        startParameter.projectProperties += [buildCore: project.getProperty('buildCore')]\n    }\n    if (project.hasProperty('signBuild')) {\n        startParameter.projectProperties += [signBuild: project.getProperty('signBuild')]\n    }\n    if (project.hasProperty('signPassword')) {\n        startParameter.projectProperties += [signPassword: project.getProperty('signPassword')]\n    }\n    if (project.hasProperty('signSecretRingFile')) {\n        startParameter.projectProperties += [signSecretRingFile: project.getProperty('signSecretRingFile')]\n    }\n    if (project.hasProperty('ossrhUsername')) {\n        startParameter.projectProperties += [ossrhUsername: project.getProperty('ossrhUsername')]\n    }\n    if (project.hasProperty('ossrhPassword')) {\n        startParameter.projectProperties += [ossrhPassword: project.getProperty('ossrhPassword')]\n    }\n}\n\ntask assembleAnnotations(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble the Realm annotations'\n    buildFile = file('realm-annotations/build.gradle')\n    tasks = ['assemble']\n}\n\ntask installAnnotations(type:GradleBuild) {\n    group = 'Install'\n    description = 'Install the jar realm-annotations into mavenLocal()'\n    buildFile = file('realm-annotations/build.gradle')\n    tasks = ['publishToMavenLocal']\n}\n\ntask assembleTransformer(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble the Realm transformer'\n    dependsOn installAnnotations\n    buildFile = file('realm-transformer/build.gradle')\n    tasks = ['assemble']\n}\n\ntask installTransformer(type:GradleBuild) {\n    group = 'Install'\n    description = 'Install the jar realm-transformer into mavenLocal()'\n    dependsOn installAnnotations\n    buildFile = file('realm-transformer/build.gradle')\n    tasks = ['publishToMavenLocal']\n}\n\ntask installBuildTransformer(type:GradleBuild) {\n    group = 'Install'\n    description = 'Install the jar realm-library-build-transformer into mavenLocal()'\n    buildFile = file('library-build-transformer/build.gradle')\n    tasks = ['publishToMavenLocal']\n}\n\ntask assembleRealm(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble the Realm project'\n    dependsOn installAnnotations\n    dependsOn installTransformer\n    dependsOn installBuildTransformer\n    buildFile = file('realm/build.gradle')\n    tasks = ['assemble', 'javadocJar', 'sourcesJar']\n    configure copyProperties\n}\n\ntask checkExamples(type:GradleBuild) {\n    group = 'Test'\n    description = 'Run the JVM tests and checks the examples'\n    buildFile = file('examples/build.gradle')\n    tasks = ['check']\n    configure copyProperties\n}\n\ntask checkRealm(type:GradleBuild) {\n    group = 'Test'\n    description = 'Run the JVM tests and checks Realm project'\n    buildFile = file('realm/build.gradle')\n    tasks = ['check']\n    configure copyProperties\n}\n\ntask check {\n    group = 'Test'\n    description = 'Run the JVM tests and checks in the realm and examples projects'\n    dependsOn checkRealm\n    dependsOn checkExamples\n}\n\ntask assembleUnitTests(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble Android unit tests of the Realm project'\n    dependsOn installTransformer\n    buildFile = file('realm/build.gradle')\n    tasks = ['assembleAndroidTest']\n    configure copyProperties\n}\n\ntask connectedUnitTests(type:GradleBuild) {\n    group = 'Test'\n    description = 'Run the Android unit tests of the Realm project'\n    dependsOn installTransformer\n    buildFile = file('realm/build.gradle')\n    tasks = ['connectedAndroidTest']\n    configure copyProperties\n}\n\ntask assembleBenchmarks(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble benchmark tests for the library '\n    dependsOn installTransformer\n    buildFile = file('library-benchmarks/build.gradle')\n    tasks = ['assembleAndroidTest']\n    configure copyProperties\n}\n\ntask connectedBenchmarks(type:GradleBuild) {\n    group = 'Test'\n    description = 'Run all the benchmark tests for the library '\n    dependsOn installTransformer\n    buildFile = file('library-benchmarks/build.gradle')\n    tasks = ['connectedAndroidTest']\n    configure copyProperties\n}\n\ntask installRealm(type:GradleBuild) {\n    group = 'Install'\n    description = 'Install the artifacts of Realm libraries into mavenLocal()'\n    dependsOn installTransformer\n    dependsOn installBuildTransformer\n    buildFile = file('realm/build.gradle')\n    tasks = ['publishToMavenLocal']\n    configure copyProperties\n}\n\ntask assembleGradlePlugin(type:GradleBuild) {\n    group = 'Build'\n    description = 'Assemble the Realm Gradle plugin'\n    dependsOn installRealm\n    dependsOn installTransformer\n    buildFile = file('gradle-plugin/build.gradle')\n    tasks = ['assemble']\n}\n\ntask installGradlePlugin(type:GradleBuild) {\n    description = 'Install the Realm Gradle plugin into mavenLocal()'\n    group = 'Install'\n    dependsOn installRealm\n    dependsOn installTransformer\n    buildFile = file('gradle-plugin/build.gradle')\n    tasks = ['publishToMavenLocal']\n}\n\ntask installRealmJava(type:Task) {\n    dependsOn installGradlePlugin\n    dependsOn installRealm\n    group = 'Install'\n    description = 'Install the Realm library and Gradle plugin into mavenLocal()'\n}\n\ntask assembleExamples(type:GradleBuild) {\n    dependsOn installGradlePlugin\n    dependsOn installRealm\n    group = 'Build'\n    description = 'Assemble the Realm examples'\n    buildFile = file('examples/build.gradle')\n    tasks = ['assemble']\n}\n\ntask monkeyExamples(type:GradleBuild) {\n    dependsOn installGradlePlugin\n    dependsOn installRealm\n    group = 'Build'\n    description = 'Run the monkey tests on the Realm examples'\n    buildFile = file('examples/build.gradle')\n    tasks = ['monkeyRelease']\n}\n\ntask javadoc(type:GradleBuild) {\n    description = 'Generate the Javadoc Jar for the Realm project'\n    group = 'Docs'\n    buildFile = file('realm/build.gradle')\n    tasks = ['javadocJar']\n    configure copyProperties\n}\n\ntask uploadJavadoc {\n    group = 'Release'\n    description = 'Upload Java and Kotlin docs to S3'\n    dependsOn javadoc\n\n    doLast {\n        def awsAccessKey = getPropertyValueOrThrow(\"SDK_DOCS_AWS_ACCESS_KEY\")\n        def awsSecretKey = getPropertyValueOrThrow(\"SDK_DOCS_AWS_SECRET_KEY\")\n\n        // Upload two copies, to 'latest' and a versioned folder for posterity.\n        // Symlinks would have been safer and faster, but this is not supported by S3.\n        [ \"${currentVersion}\", \"latest\"].forEach { version ->\n            exec {\n                commandLine 's3cmd', 'put', '--recursive', '--acl-public', \"--access_key=${awsAccessKey}\", \"--secret_key=${awsSecretKey}\", 'realm/realm-library/build/docs/javadoc/', \"s3://realm-sdks/realm-sdks/java/${version}/\"\n            }\n            // The stylesheet is being uploaded with the wrong Content-Type header, which causes the stylesheet to not be applied in some browsers.\n            // So we need to modify the stylesheet after it has been uploaded.\n            exec {\n                commandLine 's3cmd', 'modify', \"--access_key=${awsAccessKey}\", \"--secret_key=${awsSecretKey}\", \"--debug\", '--add-header=Content-Type: text/css', \"s3://realm-sdks/realm-sdks/java/${version}/stylesheet.css\"\n            }\n            // Upload Kotlin extension docs to a subdirectory of the Javadoc. This should not conflict with the Javadoc folder layout.\n            exec {\n                commandLine 's3cmd', 'put', '--recursive', '--acl-public', \"--access_key=${awsAccessKey}\", \"--secret_key=${awsSecretKey}\", 'realm/kotlin-extensions/build/dokka/', \"s3://realm-sdks/realm-sdks/java/${version}/kotlin-extensions/\"\n            }\n        }\n    }\n}\n\ntask sourcesJar(type:GradleBuild) {\n    description = 'Generate the sources Jar for the Realm project'\n    group = 'Docs'\n    buildFile = file('realm/build.gradle')\n    tasks = ['sourcesJar']\n    configure copyProperties\n}\n\ntask assemble {\n    group 'Build'\n    description = 'Build Realm, the Gradle plugin and the examples'\n    dependsOn assembleExamples\n}\n\ntask distributionJniUnstrippedPackage(type:Zip) {\n    description = 'Generate native libs package with debug symbols'\n\n    group = 'Artifact'\n    archiveName = \"realm-java-jni-libs-unstripped-${currentVersion}.zip\"\n    destinationDir = file(\"${buildDir}/outputs/distribution\")\n\n    from(\"realm/realm-library/build/outputs/jniLibs-unstripped\") {\n        include '**/*.so'\n    }\n}\n\ntask cleanRealm(type:GradleBuild) {\n    description = 'Clean the Realm project'\n    group = 'Clean'\n    buildFile = file('realm/build.gradle')\n    tasks = ['clean']\n    configure copyProperties\n}\n\ntask cleanGradlePlugin(type:GradleBuild) {\n    description = 'Clean the Realm Gradle plugin project'\n    group = 'Clean'\n    buildFile = file('gradle-plugin/build.gradle')\n    tasks = ['clean']\n}\n\ntask cleanExamples(type:GradleBuild) {\n    description = 'Clean the Realm examples'\n    group = 'Clean'\n    buildFile = file('examples/build.gradle')\n    tasks = ['clean']\n}\n\ntask cleanLocalMavenRepos(type:Delete) {\n    description = 'Remove any Realm artifacts from the local Maven repositories'\n    group = 'Clean'\n    delete \"${System.env.HOME}/.m2/repository/io/realm\"\n}\n\ntask clean {\n    description = 'Perform all the other clean tasks'\n    group = 'Clean'\n    cleanLocalMavenRepos.dependsOn cleanRealm\n    cleanLocalMavenRepos.dependsOn cleanGradlePlugin\n    cleanLocalMavenRepos.dependsOn cleanExamples\n    dependsOn cleanLocalMavenRepos\n}\n\ntask manualClean {\n    description = 'Clean build files without using clean tasks defined in sub projects'\n    group = 'Clean'\n\n    doLast {\n        // clean 'build' directories\n        exec {\n            workingDir \"${rootDir}\"\n            commandLine 'find', '.', '-type', 'd', '-name', 'build', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'\n        }\n\n        // clean '.externalNativeBuild' directories\n        exec {\n            workingDir \"${rootDir}\"\n            commandLine 'find', '.', '-type', 'd', '-name', '.externalNativeBuild', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'\n        }\n\n        // clean '.gradle' directories except one in the root\n        exec {\n            workingDir \"${rootDir}\"\n            commandLine 'find', '.', '-mindepth', '2', '-type', 'd', '-name', '.gradle', '-print', '-exec', 'rm', '-rf', '{}', ';', '-prune'\n        }\n\n        // clean ${System.env.HOME}/.m2/repository/io/realm\n        exec {\n            workingDir \"${rootDir}\"\n            commandLine 'sh', '-c', \"echo \\\"${System.env.HOME}/.m2/repository/io/realm\\\" && rm -rf \\\"${System.env.HOME}/.m2/repository/io/realm\\\"\"\n        }\n    }\n}\n\ntask uploadDistributionPackage {\n    group = 'Release'\n    description = 'Upload the distribution package to S3'\n    dependsOn distributionJniUnstrippedPackage\n    def s3AccessKey = \"${ -> getPropertyValueOrThrow('REALM_S3_ACCESS_KEY')}\"\n    def s3SecretKey = \"${ -> getPropertyValueOrThrow('REALM_S3_SECRET_KEY')}\"\n    doLast {\n\n        // Check that zip file exists. Creating the zip file will silently fail if no files exists, so check here.\n        def zipFile = file(\"${buildDir}/outputs/distribution/realm-java-jni-libs-unstripped-${currentVersion}.zip\")\n        if (!zipFile.exists()) {\n            throw new GradleException(\"Could not locate unstripped binary zip file in: ${zipFile.getPath()}\")\n        }\n\n        exec {\n            commandLine 's3cmd', \"--access_key=${s3AccessKey}\", \"--secret_key=${s3SecretKey}\", 'put', zipFile.getAbsolutePath(), 's3://static.realm.io/downloads/java/'\n        }\n    }\n}\n\ntask uploadUpdateVersion(type: Exec) {\n    group = 'Release'\n    description = 'Update the file on S3 containing the latest version'\n    def s3AccessKey = \"${ -> getPropertyValueOrThrow('REALM_S3_ACCESS_KEY')}\"\n    def s3SecretKey = \"${ -> getPropertyValueOrThrow('REALM_S3_SECRET_KEY')}\"\n    commandLine 's3cmd', \"--access_key=${s3AccessKey}\", \"--secret_key=${s3SecretKey}\", 'put', \"${rootDir}/version.txt\", 's3://static.realm.io/update/java'\n}\n\ntask distribute {\n    group = 'Release'\n    description = 'Distribute release artifacts to S3'\n    dependsOn uploadDistributionPackage\n    dependsOn uploadUpdateVersion\n}\n\ntask mavenCentralRealm(type: GradleBuild) {\n    description = 'Publish the Realm AAR and AP to Maven Central'\n    group = 'Publishing'\n    buildFile = file('realm/build.gradle')\n    tasks = ['publishToSonatype']\n    startParameter.projectProperties = gradle.startParameter.projectProperties\n    configure copyProperties\n}\n\ntask mavenCentralAnnotations(type: GradleBuild) {\n    description = 'Publish the Realm Annotations to Maven Central'\n    group = 'Publishing'\n    buildFile = file('realm-annotations/build.gradle')\n    tasks = ['publishToSonatype']\n    startParameter.projectProperties = gradle.startParameter.projectProperties\n    configure copyProperties\n}\n\ntask mavenCentralGradlePlugin(type: GradleBuild) {\n    description = 'Publish the Realm Gradle Plugin to Maven Central'\n    group = 'Publishing'\n    buildFile = file('gradle-plugin/build.gradle')\n    tasks = ['publishToSonatype']\n    startParameter.projectProperties = gradle.startParameter.projectProperties\n    configure copyProperties\n}\n\ntask mavenCentralTransformer(type: GradleBuild) {\n    description = 'Publish the Realm Transformer to Maven Central'\n    group = 'Publishing'\n    buildFile = file('realm-transformer/build.gradle')\n    tasks = ['publishToSonatype']\n    startParameter.projectProperties = gradle.startParameter.projectProperties\n    configure copyProperties\n}\n\ntask mavenCentralUpload {\n    description = 'Publish all the Realm artifacts to Maven Central'\n    group = 'Publishing'\n    dependsOn mavenCentralRealm\n    dependsOn mavenCentralAnnotations\n    dependsOn mavenCentralGradlePlugin\n    dependsOn mavenCentralTransformer\n}\n"
        },
        {
          "name": "dependencies.list",
          "type": "blob",
          "size": 1.0712890625,
          "content": "# Realm Core release used by Realm Java\n# https://github.com/realm/realm-core/releases\nREALM_CORE=13.26.0\n\n# Version of MongoDB Realm used by integration tests\n# See https://github.com/realm/ci/packages/147854 for available versions\nMONGODB_REALM_SERVER=2023-05-31\n\n# `BAAS` and `BAAS-UI` projects commit hashes matching MONGODB_REALM_SERVER image version\n# note that the MONGODB_REALM_SERVER image is a nightly build, find the matching commits\n# for that date within the following repositories: \n# https://github.com/10gen/baas/ \n# https://github.com/10gen/baas-ui/\nREALM_BAAS_GIT_HASH=1de3337309b9a89094f739efaa69afa2dbc2daa9\nREALM_BAAS_UI_GIT_HASH=9c4ef71f69776651cf0110052ce760920ac8c7da\n\n# Common Android settings across projects\nGRADLE_BUILD_TOOLS=7.4.0\nANDROID_BUILD_TOOLS=30.0.3\nKOTLIN=1.6.21\nKOTLIN_COROUTINES=1.6.0\n\n# Common classpath dependencies\ngradle=7.5\nndkVersion=23.1.7779620\nBUILD_INFO_EXTRACTOR_GRADLE=4.23.4\nGRADLE_NEXUS_PLUGIN=1.0.0\nCMAKE=3.27.7\n\n# Bson dependency version\nBSON_DEPENDENCY=3.12.1\n\n# RxJava dependency version\nRXJAVA_DEPENDENCY=2.1.5\nRXANDROID_DEPENDENCY=2.1.1\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.099609375,
          "content": "org.gradle.jvmargs=-Xmx2048M -XX:MaxMetaspaceSize=2048M\norg.gradle.caching=true\nandroid.enableD8=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.99609375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.771484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "latest",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "library-benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "library-build-transformer",
          "type": "tree",
          "content": null
        },
        {
          "name": "mavencentral-properties.gradle",
          "type": "blob",
          "size": 1.123046875,
          "content": "// Find property in either System environment or Gradle properties.\n// If set in both places, Gradle properties win.\ndef getPropertyValue(String propertyName) {\n    return project.findProperty(propertyName) ?: System.getenv(propertyName) ?: \"\"\n}\n\n// Default values\ndef rootExt = rootProject.ext\nrootExt[\"signing.keyId\"] = 'BD9104E9'\nrootExt[\"sonatypeStagingProfileId\"] = '78c19333e4450f'\n\n// Set properties either from a global properties file or environment parameters\nrootExt[\"signBuild\"] = getPropertyValue('signBuild')\nrootExt[\"signing.password\"] = getPropertyValue('signPassword')\n// Apparently Gradle treats properties define through a gradle.properties file differently\n// than those defined through the commandline using `-P`. This is a problem with new\n// line characters as found in an ascii-armoured PGP file. To ensure work around this, all newlines\n// have been replaced with `#` and thus needs to be reverted here.\nrootExt[\"signing.secretKeyRingFile\"] = getPropertyValue('signSecretRingFile').replaceAll('#','\\n')\nrootExt[\"ossrhUsername\"] = getPropertyValue('ossrhUsername')\nrootExt[\"ossrhPassword\"] = getPropertyValue('ossrhPassword')\n"
        },
        {
          "name": "mavencentral-publications.gradle",
          "type": "blob",
          "size": 4.4677734375,
          "content": "// This script is responsible for setting up the publications, so they are ready to be published\n// to Maven Central and other repositories. Publishing to Maven Central is configured in\n// `mavencentral-publish.gradle`. They are in separate files as the nexus publish plugin used\n// to deploy to Maven Central can only be applied to top level projects.\napply plugin: 'maven-publish'\napply plugin: 'signing'\napply from: buildscript.sourceFile.getParent() + \"/\" + \"mavencentral-properties.gradle\"\n\n// The publications doesn't know about our AAR dependencies, so we have to manually add them to the pom\n// Credit: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml\ndef createPomDependencies(configurationNames) {\n    return {\n        def dependenciesNode = asNode().appendNode('dependencies')\n        configurationNames.each { configurationName ->\n            configurations[configurationName].allDependencies.each {\n                // Also ignore `realm-library` because that is used by the Kotlin Extensions as\n                // a project dependency, but it is being written to the POM file in a wrong way.\n                // Instead we just ignore it as the Gradle Plugin makes sure it is always present.\n                if (it.group != null && it.name != null && it.name != 'realm-library') {\n                    def dependencyNode = dependenciesNode.appendNode('dependency')\n                    dependencyNode.appendNode('groupId', it.group)\n                    dependencyNode.appendNode('artifactId', it.name)\n                    dependencyNode.appendNode('version', it.version)\n\n                    //If there are any exclusions in dependency\n                    if (it.excludeRules.size() > 0) {\n                        def exclusionsNode = dependencyNode.appendNode('exclusions')\n                        it.excludeRules.each { rule ->\n                            def exclusionNode = exclusionsNode.appendNode('exclusion')\n                            exclusionNode.appendNode('groupId', rule.group)\n                            exclusionNode.appendNode('artifactId', rule.module)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// TODO: Consider refactoring this. See https://github.com/realm/realm-java/pull/7327#discussion_r586281652\ndef populatePom(publication, pomName, pomDescription, pomDependencies = null) {\n    publication.pom {\n        name = \"${pomName}\"\n        description = \"${pomDescription}\"\n        url = 'https://docs.mongodb.com/realm'\n        licenses {\n            license {\n                name = 'The Apache Software License, Version 2.0'\n                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                distribution = 'repo'\n            }\n        }\n        issueManagement {\n            system = 'github'\n            url = 'https://github.com/realm/realm-java/issues'\n        }\n        scm {\n            url = 'scm:https://github.com/realm/realm-java'\n            connection = 'scm:git@github.com:realm/realm-java.git'\n            developerConnection = 'scm:git@github.com:realm/realm-java.git'\n        }\n        developers {\n            developer {\n                name = 'Realm'\n                email = 'info@realm.io'\n                organization = 'MongoDB'\n                organizationUrl = 'https://www.mongodb.com'\n            }\n        }\n    }\n    if (pomDependencies) {\n        publication.pom.withXml(pomDependencies)\n    }\n}\n\npublishing {\n    repositories {\n        maven {\n            name = \"MavenCentral\"\n            def releasesRepoUrl = \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n            def snapshotsRepoUrl = \"https://oss.sonatype.org/content/repositories/snapshots/\"\n            url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n            credentials {\n                username = rootProject.ext[\"ossrhUsername\"]\n                password = rootProject.ext[\"ossrhPassword\"]\n            }\n        }\n    }\n}\n\nsigning {\n    required { signBuild }\n    def keyId = rootProject.ext[\"signing.keyId\"]\n    def ringFile = rootProject.ext[\"signing.secretKeyRingFile\"]\n    def password = rootProject.ext[\"signing.password\"]\n    useInMemoryPgpKeys(keyId, ringFile, password)\n    sign publishing.publications\n}\n\n// Export methods so they are available in other gradle files\n// https://stackoverflow.com/questions/18715137/extract-common-methods-from-gradle-build-script\next {\n    createPomDependencies = this.&createPomDependencies\n    populatePom = this.&populatePom\n}\n\n"
        },
        {
          "name": "mavencentral-publish.gradle",
          "type": "blob",
          "size": 0.962890625,
          "content": "// This script is responsible for setting up the configuration required to publish to Maven Central.\n// Setting up POM files and signing artifacts are done in `mavencentral-publications.gradle`. They\n// are separate as the nexus publish plugin used to publish to Maven Central be only applied to top\n// level projects.\napply plugin: 'io.github.gradle-nexus.publish-plugin'\napply from: buildscript.sourceFile.getParent() + \"/\" + \"mavencentral-properties.gradle\"\n\nnexusPublishing {\n    packageGroup = \"io.realm\"\n    repositories {\n        sonatype {\n            stagingProfileId = rootProject.ext[\"sonatypeStagingProfileId\"]\n            username = rootProject.ext[\"ossrhUsername\"]\n            password = rootProject.ext[\"ossrhPassword\"]\n        }\n    }\n    // Repository transitions seems, at times, to be really slow.\n    // This sets the timeout to 20 minutes\n    transitionCheckOptions {\n        maxRetries.set(120)\n        delayBetween.set(java.time.Duration.ofMillis(10000))\n    }\n}\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "realm-annotations",
          "type": "tree",
          "content": null
        },
        {
          "name": "realm-transformer",
          "type": "tree",
          "content": null
        },
        {
          "name": "realm",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.03125,
          "content": "rootProject.name = 'realm-java'\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "11.0.0\n"
        }
      ]
    }
  ]
}