{
  "metadata": {
    "timestamp": 1736708881562,
    "page": 100,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LuckSiege/PictureSelector",
      "stars": 13366,
      "defaultBranch": "version_component",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1025390625,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.DS_Store\n/build\n/captures\n/.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.68359375,
          "content": "# PictureSelector 3.0 \n   A PictureSelector for Android platform, which supports obtaining pictures, videos, audio & photos from photo albums, cutting (single picture or multi picture cutting), compression, theme custom configuration and other functions, and supports dynamic access & an open source picture selection framework suitable for Android 5.0 + system<br> \n   \n   [简体中文🇨🇳](README_CN.md)\n\n   [Download Demo Apk](https://github.com/LuckSiege/PictureSelector/raw/version_component/app/demo/demo_2023-12-17_060744_v3.11.2.apk)<br>\n\n[![Maven Central](https://img.shields.io/badge/maven%20central-v3.11.2-yellow)](https://github.com/LuckSiege)\n[![PRs Welcome](https://img.shields.io/badge/PRs-Welcome-brightgreen.svg)](https://github.com/LuckSiege)\n[![Star](https://img.shields.io/github/stars/LuckSiege/PictureSelector.svg)](https://github.com/LuckSiege/PictureSelector)\n\n\n## Contents\n-[Latest version](https://github.com/LuckSiege/PictureSelector/releases/tag/v3.11.2)<br>\n-[Download](#Download)<br>\n-[Usage](#Usage)<br>\n-[Permission](#Permission)<br>\n-[Result description](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-LocalMedia%E8%AF%B4%E6%98%8E)<br>\n-[Effect](#Effect)<br>\n-[ProGuard](#ProGuard)<br>\n-[Common errors](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF)<br>\n-[Issues](https://github.com/LuckSiege/PictureSelector/wiki/%E5%A6%82%E4%BD%95%E6%8F%90Issues%3F)<br>\n-[License](#License)<br>\n\n\n## Download\n\nUse Gradle\n\n```sh\nrepositories {\n  google()\n  mavenCentral()\n}\n\ndependencies {\n  // PictureSelector basic (Necessary)\n  implementation 'io.github.lucksiege:pictureselector:v3.11.2'\n\n  // image compress library (Not necessary)\n  implementation 'io.github.lucksiege:compress:v3.11.2'\n\n  // uCrop library (Not necessary)\n  implementation 'io.github.lucksiege:ucrop:v3.11.2'\n\n  // simple camerax library (Not necessary)\n  implementation 'io.github.lucksiege:camerax:v3.11.2'\n}\n```\n\nKotlin Version [Demo](https://github.com/LuckSiege/PictureSelector/tree/master)\n\n```sh\ndependencies {\n  // Please do not upgrade across versions, please check the Kotlin version demo first\n  implementation 'io.github.lucksiege:pictureselector:kotlin-v1.0.0-beta'\n}\n```\n\nOr Maven:\n\n```sh\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>pictureselector</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>compress</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>ucrop</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>camerax</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n```\n\n## Permission  \n\nPermission describe，see [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E6%9D%83%E9%99%90%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n```sh\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_MEDIA_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n\nAndroid 13版本适配，细化存储权限\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n```\n\nAndroid 11 use camera，AndroidManifest.xm add the code：\n\n```sh\n<queries package=\"${applicationId}\">\n    <intent>\n        <action android:name=\"android.media.action.IMAGE_CAPTURE\">\n\n        </action>\n    </intent>\n    <intent>\n        <action android:name=\"android.media.action.ACTION_VIDEO_CAPTURE\">\n\n        </action>\n    </intent>\n</queries>\n```\n\n## ImageEngine\n[GlideEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/GlideEngine.java)<br> \n[PicassoEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/PicassoEngine.java)<br>\n[CoilEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/CoilEngine.java)<br>\n\n## Usage\nFor more features, see [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%8A%9F%E8%83%BDapi%E8%AF%B4%E6%98%8E)\n\nA simple use case is shown below:\n\n1、Get picture \n\n```sh\nPictureSelector.create(this)\n   .openGallery(SelectMimeType.ofImage())\n   .setImageEngine(GlideEngine.createGlideEngine())\n   .forResult(new OnResultCallbackListener<LocalMedia>() {\n      @Override\n      public void onResult(ArrayList<LocalMedia> result) {\n\n      }\n\n      @Override\n      public void onCancel() {\n\n     }\n});\n```\n\nUsing system albums\n\n```sh\nPictureSelector.create(this)\n     .openSystemGallery(SelectMimeType.ofImage())\n     .forResult(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\n2、Only use camera\n\n```sh\nPictureSelector.create(this)\n     .openCamera(SelectMimeType.ofImage())\n     .forResult(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\nTo take photos separately in the Navigation Fragment scene, please use the following methods:\n\n```sh\nPictureSelector.create(this)\n     .openCamera(SelectMimeType.ofImage())\n     .forResultActivity(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\n3、You can also use the following example：\n\n(1)、Inject into any view fragment\n\n```sh\n\nPictureSelector.create(this)\n   .openGallery(SelectMimeType.ofAll())\n   .setImageEngine(GlideEngine.createGlideEngine())\n   .buildLaunch(R.id.fragment_container, new OnResultCallbackListener<LocalMedia>() {\n      @Override\n      public void onResult(ArrayList<LocalMedia> result) {\n      \n      }\n\n      @Override\n      public void onCancel() {\n      \n      }\n});\n\t\t\t\n```\n\n(2)、Custom Inject into any view fragment\n\n```sh\n\nPictureSelectorFragment selectorFragment = PictureSelector.create(this)\n     .openGallery(SelectMimeType.ofAll())\n     .setImageEngine(GlideEngine.createGlideEngine())\n     .build();\n     \ngetSupportFragmentManager().beginTransaction()\n     .add(R.id.fragment_container, selectorFragment, selectorFragment.getFragmentTag())\n     .addToBackStack(selectorFragment.getFragmentTag())\n     .commitAllowingStateLoss();\n\t\t\t\n```\n\n4、Only query data source\n\n(1)、get album data\n\n```sh\n\nPictureSelector.create(this)\n    .dataSource(SelectMimeType.ofAll())\n    .obtainAlbumData(new OnQueryDataSourceListener<LocalMediaFolder>() {\n        @Override\n        public void onComplete(List<LocalMediaFolder> result) {\n\n        }\n   );\n\n```\n\n(2)、get media data\n\n```sh\n\nPictureSelector.create(this)\n    .dataSource(SelectMimeType.ofAll())\n    .obtainMediaData(new OnQueryDataSourceListener<LocalMedia>() {\n        @Override\n        public void onComplete(List<LocalMedia> result) {\n\n        }\n   );\n\n```\n\n(3)、IBridgeMediaLoader get data \n\n```sh\n\nIBridgeMediaLoader loader = PictureSelector.create(this)\n    .dataSource(SelectMimeType.ofImage()).buildMediaLoader();\n    loader.loadAllAlbum(new OnQueryAllAlbumListener<LocalMediaFolder>() {\n        @Override\n        public void onComplete(List<LocalMediaFolder> result) {\n\n        }\n  });\n\n```\n\n5、Preview image、video、audio\n\nIf you preview the online video AndroidManifest XML add the following code\n\n```sh\nandroid:usesCleartextTraffic=\"true\"\n```\n\n```sh\n\nPictureSelector.create(this)\n    .openPreview()\n    .setImageEngine(GlideEngine.createGlideEngine())\n    .setExternalPreviewEventListener(new OnExternalPreviewEventListener() {\n       @Override\n       public void onPreviewDelete(int position) {\n\n       }\n\n        @Override\n       public boolean onLongPressDownload(LocalMedia media) {\n           return false;\n       }\n    }).startActivityPreview(position, true, \"data\");\n\n```\n\n\nSet theme，see [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E4%B8%BB%E9%A2%98api%E8%AF%B4%E6%98%8E)\n\n```sh\n.setSelectorUIStyle();\n```\nOr Overload layout，see [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E9%87%8D%E8%BD%BD%E5%B8%83%E5%B1%80%EF%BC%9F)\n\n```sh\n.setInjectLayoutResourceListener(new OnInjectLayoutResourceListener() {\n   @Override\n   public int getLayoutResourceId(Context context, int resourceSource) {\n\treturn 0;\n}\n```\n\nThe advanced use cases are as follow：\n\n1、Use the custom camera,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%EF%BC%9F)\n\n```sh\n.setCameraInterceptListener(new OnCameraInterceptListener() {\n    @Override\n    public void openCamera(Fragment fragment, int cameraMode, int requestCode){\n\n    }\n});\n```\n\n2、Use the image compress,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E5%8E%8B%E7%BC%A9%EF%BC%9F)\n\n```sh\n.setCompressEngine(new CompressFileEngine() {\n   @Override\n   public void onStartCompress(Context context, ArrayList<Uri> source, OnKeyValueResultCallbackListener call){\n\n   }\n});\n```\n\n3、Use the image uCrop,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%A3%81%E5%89%AA%EF%BC%9F)\n\n```sh\n\n.setCropEngine(new CropFileEngine() {\n   @Override\n   public void onStartCrop(Fragment fragment, Uri srcUri, Uri destinationUri, ArrayList<String> dataSource, int requestCode) {\n\n   }\n});\n```\n\n4、Use the image edit,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E7%BC%96%E8%BE%91%E5%9B%BE%E7%89%87%EF%BC%9F)\n\n```sh\n.setEditMediaInterceptListener(new OnMediaEditInterceptListener() {\n    @Override\n    public void onStartMediaEdit(Fragment fragment, LocalMedia currentLocalMedia, int requestCode) {\n\n    }\n});\n\n```\n\n5、Use the custom load data,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%9F)\n\n```sh\n.setExtendLoaderEngine(new ExtendLoaderEngine() {\n    @Override\n    public void loadAllAlbumData(Context context, OnQueryAllAlbumListener<LocalMediaFolder> query) {\n                                    \n    }\n\n    @Override\n    public void loadOnlyInAppDirAllMediaData(Context context, OnQueryAlbumListener<LocalMediaFolder> query) {\n\n    }\n\n    @Override\n    public void loadFirstPageMediaData(Context context, long bucketId, int page, int pageSize, OnQueryDataResultListener<LocalMedia> query) {\n\n    }\n\n    @Override\n    public void loadMoreMediaData(Context context, long bucketId, int page, int limit, int pageSize, OnQueryDataResultListener<LocalMedia> query) {\n\n    }\n });\n\n```\n\n6、Use the custom apply Permissions,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7-%EF%BC%9F)\n\n```sh\n.setPermissionsInterceptListener(new OnPermissionsInterceptListener() {\n      @Override\n      public void requestPermission(Fragment fragment, String[] permissionArray, OnRequestPermissionListener call) {\n\n      }\n\n      @Override\n      public boolean hasPermissions(Fragment fragment, String[] permissionArray) {\n      return false;\n  }\n});\n\n```\n\n7、Android 10 and above, Sandbox mechanism, file processing，Permissions,See [documentation](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E6%B2%99%E7%9B%92%E5%A4%96%E8%B5%84%E6%BA%90%EF%BC%9F)\n\n```sh\n.setSandboxFileEngine(new UriToFileTransformEngine() {\n    @Override\n    public void onUriToFileAsyncTransform(Context context, String srcPath, String mineType, OnKeyValueResultCallbackListener call) {\n                                        \n    }\n});\n```\n\n## ProGuard\n```sh\n-keep class com.luck.picture.lib.** { *; }\n\n// use Camerax\n-keep class com.luck.lib.camerax.** { *; }\n\n// use uCrop\n-dontwarn com.yalantis.ucrop**\n-keep class com.yalantis.ucrop** { *; }\n-keep interface com.yalantis.ucrop** { *; }\n```\n## License\n```sh\nCopyright 2016 Luck\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n\n\n## Effect\n\n| Function list |\n|:-----------:|\n|![](image/home.jpg)|\n\n| Default Style | Preview | Multiple Crop |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_default_style_1.jpg) | <img src=\"image/picture_default_style_2.jpg\"/> | ![](image/picture_default_style_new_3.jpg)|\n\n| Digital Style | Preview | Multiple Crop |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_num_style_new_1.jpg) | ![](image/picture_num_style_new_2.jpg) | ![](image/picture_num_style_new_3.jpg)|\n\n| White Style | Preview | Single Crop |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_sina_style_1.jpg) | ![](image/picture_sina_style_new_2.jpg) | ![](image/picture_sina_style_new_3.jpg)|\n\n| New Style | Preview | Multiple Crop |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_wechat_style_1.jpg) | ![](image/picture_wechat_style_2.jpg) | ![](image/picture_wechat_style_new_3.jpg)|\n\n| Photo Album Directory | Single Mode | Circular Crop|\n|:-----------:|:--------:|:--------:|\n|![](image/picture_wechat_album_style.jpg) |![](image/picture_wechat_single_style_3.jpg) | ![](image/picture_circular_crop_new_style.jpg)|\n\n| White Style | Video | Audio |\n|:-----------:|:-----------:|:--------:|\n|![](image/picture_white_style.jpeg) |![](image/picture_video.jpg) | ![](image/picture_audio.jpg)|\n\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 15.26171875,
          "content": "# PictureSelector 3.0\n   一款针对Android平台下的图片选择器，支持从相册获取图片、视频、音频&拍照，支持裁剪(单图or多图裁剪)、压缩、主题自定义配置等功能，支持动态获取权限&适配Android 5.0+系统的开源图片选择框架。<br>\n    \n   [English🇺🇸](README.md)\n\n   [效果体验](https://github.com/LuckSiege/PictureSelector/raw/version_component/app/demo/demo_2023-12-17_060744_v3.11.2.apk)<br>\n\n[![Maven Central](https://img.shields.io/badge/maven%20central-v3.11.2-yellow)](https://github.com/LuckSiege)\n[![PRs Welcome](https://img.shields.io/badge/PRs-Welcome-brightgreen.svg)](https://github.com/LuckSiege)\n[![Star](https://img.shields.io/github/stars/LuckSiege/PictureSelector.svg)](https://github.com/LuckSiege/PictureSelector)\n\n\n## 目录\n-[最新版本](https://github.com/LuckSiege/PictureSelector/releases/tag/v3.11.2)<br>\n-[如何引用](#如何引用)<br>\n-[进阶使用](#进阶使用)<br>\n-[权限](#权限)<br>\n-[返回结果说明](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-LocalMedia%E8%AF%B4%E6%98%8E)<br>\n-[演示效果](#演示效果)<br>\n-[混淆配置](#混淆配置)<br>\n-[常见错误](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF)<br>\n-[如何提Issues](https://github.com/LuckSiege/PictureSelector/wiki/%E5%A6%82%E4%BD%95%E6%8F%90Issues%3F)<br>\n-[兼容性测试](#兼容性测试)<br>\n-[联系方式](#联系方式)<br>\n-[License](#License)<br>\n\n\n\n## 如何引用\n\n使用Gradle\n```sh\nrepositories {\n  google()\n  mavenCentral()\n}\n\ndependencies {\n  // PictureSelector 基础 (必须)\n  implementation 'io.github.lucksiege:pictureselector:v3.11.2'\n\n  // 图片压缩 (按需引入)\n  implementation 'io.github.lucksiege:compress:v3.11.2'\n\n  // 图片裁剪 (按需引入)\n  implementation 'io.github.lucksiege:ucrop:v3.11.2'\n\n  // 自定义相机 (按需引入)\n  implementation 'io.github.lucksiege:camerax:v3.11.2'\n}\n```\n\nKotlin版本[Demo](https://github.com/LuckSiege/PictureSelector/tree/master)\n\n```sh\ndependencies {\n  // 请不要跨版本升级，请先查看Kotlin版Demo\n  implementation 'io.github.lucksiege:pictureselector:kotlin-v1.0.0-beta'\n}\n```\n\n或者Maven:\n\n```sh\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>pictureselector</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>compress</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>ucrop</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n\n<dependency>\n  <groupId>io.github.lucksiege</groupId>\n  <artifactId>camerax</artifactId>\n  <version>v3.11.2</version>\n</dependency>\n```\n\n## 权限\n\n权限使用说明，请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E6%9D%83%E9%99%90%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n```sh\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_MEDIA_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n\nAndroid 13版本适配，细化存储权限\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n```\n\nAndroid 11 使用相机，需要再AndroidManifest.xm 添加如下代码：\n\n```sh\n<queries package=\"${applicationId}\">\n    <intent>\n        <action android:name=\"android.media.action.IMAGE_CAPTURE\">\n\n        </action>\n    </intent>\n    <intent>\n        <action android:name=\"android.media.action.ACTION_VIDEO_CAPTURE\">\n\n        </action>\n    </intent>\n</queries>\n```\n\n## ImageEngine\n[GlideEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/GlideEngine.java)<br> \n[PicassoEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/PicassoEngine.java)<br>\n[CoilEngine](https://github.com/LuckSiege/PictureSelector/blob/version_component/app/src/main/java/com/luck/pictureselector/CoilEngine.java)<br>\n\n\n## 进阶使用\n想要了解更多功能，请参阅[文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%8A%9F%E8%83%BDapi%E8%AF%B4%E6%98%8E)\n\n简单用例如下所示:\n\n1、获取图片\n\n```sh\nPictureSelector.create(this)\n   .openGallery(SelectMimeType.ofImage())\n   .setImageEngine(GlideEngine.createGlideEngine())\n   .forResult(new OnResultCallbackListener<LocalMedia>() {\n      @Override\n      public void onResult(ArrayList<LocalMedia> result) {\n\n      }\n\n      @Override\n      public void onCancel() {\n\n      }\n});\n```\n\n使用系统相册\n\n```sh\nPictureSelector.create(this)\n     .openSystemGallery(SelectMimeType.ofImage())\n     .forResult(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\n2、单独拍照\n\n```sh\nPictureSelector.create(this)\n     .openCamera(SelectMimeType.ofImage())\n     .forResult(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\nNavigation Fragment场景下，单独拍照请使用如下方式:\n\n```sh\nPictureSelector.create(this)\n     .openCamera(SelectMimeType.ofImage())\n     .forResultActivity(new OnResultCallbackListener<LocalMedia>() {\n        @Override\n        public void onResult(ArrayList<LocalMedia> result) {\n\n        }\n\n        @Override\n        public void onCancel() {\n\n        }\n});\n```\n\n\n3、您还可以按如下示例使用：\n\n(1)、注入到任意视图层\n\n```sh\n\nPictureSelector.create(this)\n   .openGallery(SelectMimeType.ofAll())\n   .setImageEngine(GlideEngine.createGlideEngine())\n   .buildLaunch(R.id.fragment_container, new OnResultCallbackListener<LocalMedia>() {\n      @Override\n      public void onResult(ArrayList<LocalMedia> result) {\n      \n      }\n\n      @Override\n      public void onCancel() {\n      \n      }\n});\n\t\t\t\n```\n\n(2)、自行注入到任意视图层\n\n```sh\n\nPictureSelectorFragment selectorFragment = PictureSelector.create(this)\n     .openGallery(SelectMimeType.ofAll())\n     .setImageEngine(GlideEngine.createGlideEngine())\n     .build();\n     \ngetSupportFragmentManager().beginTransaction()\n     .add(R.id.fragment_container, selectorFragment, selectorFragment.getFragmentTag())\n     .addToBackStack(selectorFragment.getFragmentTag())\n     .commitAllowingStateLoss();\n\t\t\t\n```\n\n4、单独获取数据源\n\n(1)、专辑列表\n```sh\n\nPictureSelector.create(this)\n    .dataSource(SelectMimeType.ofAll())\n    .obtainAlbumData(new OnQueryDataSourceListener<LocalMediaFolder>() {\n        @Override\n        public void onComplete(List<LocalMediaFolder> result) {\n\n        }\n   );\n\n```\n\n(2)、相册列表\n```sh\n\nPictureSelector.create(this)\n    .dataSource(SelectMimeType.ofAll())\n    .obtainMediaData(new OnQueryDataSourceListener<LocalMedia>() {\n        @Override\n        public void onComplete(List<LocalMedia> result) {\n\n        }\n   );\n\n```\n\n(3)、根据IBridgeMediaLoader获取指定数据\n```sh\n\nIBridgeMediaLoader loader = PictureSelector.create(this)\n    .dataSource(SelectMimeType.ofImage()).buildMediaLoader();\n    loader.loadAllAlbum(new OnQueryAllAlbumListener<LocalMediaFolder>() {\n        @Override\n        public void onComplete(List<LocalMediaFolder> result) {\n\n        }\n  });\n\n```\n\n\n5、预览图片、视频、音频\n\n如果预览网络视频AndroidManifest.xml添加如下代码\n\n```sh\nandroid:usesCleartextTraffic=\"true\"\n```\n\n```sh\n\nPictureSelector.create(this)\n    .openPreview()\n    .setImageEngine(GlideEngine.createGlideEngine())\n    .setExternalPreviewEventListener(new OnExternalPreviewEventListener() {\n       @Override\n       public void onPreviewDelete(int position) {\n\n       }\n\n        @Override\n       public boolean onLongPressDownload(LocalMedia media) {\n           return false;\n       }\n    }).startActivityPreview(position, true, list);\n\n```\n\n\n设置图片选择器主题，更多请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E4%B8%BB%E9%A2%98api%E8%AF%B4%E6%98%8E)\n\n```sh\n.setSelectorUIStyle();\n```\n或者您可以重载布局，更多请参阅[文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E9%87%8D%E8%BD%BD%E5%B8%83%E5%B1%80%EF%BC%9F)\n\n```sh\n.setInjectLayoutResourceListener(new OnInjectLayoutResourceListener() {\n   @Override\n   public int getLayoutResourceId(Context context, int resourceSource) {\n\treturn 0;\n   }\n```\n\n高级用例如下所示：\n\n1、使用自定义相机功能，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA%EF%BC%9F)\n\n```sh\n.setCameraInterceptListener(new OnCameraInterceptListener() {\n    @Override\n    public void openCamera(Fragment fragment, int cameraMode, int requestCode){\n\t                                    \n    }\n});\n```\n\n2、使用图片压缩功能，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E5%8E%8B%E7%BC%A9%EF%BC%9F)\n\n```sh\n.setCompressEngine(new CompressFileEngine() {\n   @Override\n   public void onStartCompress(Context context, ArrayList<Uri> source, OnKeyValueResultCallbackListener call){\n                                    \n   }\n});\n```\n\n3、使用图片裁剪功能，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%A3%81%E5%89%AA%EF%BC%9F)\n\n```sh\n\n.setCropEngine(new CropFileEngine() {\n   @Override\n   public void onStartCrop(Fragment fragment, Uri srcUri, Uri destinationUri, ArrayList<String> dataSource, int requestCode) {\n                                    \n   }\n});\n```\n\n4、使用图片编辑功能，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E7%BC%96%E8%BE%91%E5%9B%BE%E7%89%87%EF%BC%9F)\n\n```sh\n.setEditMediaInterceptListener(new OnMediaEditInterceptListener() {\n    @Override\n    public void onStartMediaEdit(Fragment fragment, LocalMedia currentLocalMedia, int requestCode) {\n                                    \n    }\n});\n\n```\n\n5、加载自定义数据源，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90%EF%BC%9F)\n\n```sh\n.setExtendLoaderEngine(new ExtendLoaderEngine() {\n    @Override\n    public void loadAllAlbumData(Context context, OnQueryAllAlbumListener<LocalMediaFolder> query) {\n                                    \n    }\n\n    @Override\n    public void loadOnlyInAppDirAllMediaData(Context context, OnQueryAlbumListener<LocalMediaFolder> query) {\n\n    }\n\n    @Override\n    public void loadFirstPageMediaData(Context context, long bucketId, int page, int pageSize, OnQueryDataResultListener<LocalMedia> query) {\n\n    }\n\n    @Override\n    public void loadMoreMediaData(Context context, long bucketId, int page, int limit, int pageSize, OnQueryDataResultListener<LocalMedia> query) {\n\n    }\n });\n\n\n```\n\n6、自定义权限申请，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7-%EF%BC%9F)\n\n```sh\n.setPermissionsInterceptListener(new OnPermissionsInterceptListener() {\n      @Override\n      public void requestPermission(Fragment fragment, String[] permissionArray, OnRequestPermissionListener call) {\n\n      }\n\n      @Override\n      public boolean hasPermissions(Fragment fragment, String[] permissionArray) {\n      \treturn false;\n      }\n});\n\n```\n\n7、Android 10 及以上版本，沙盒机制文件处理，详情请参阅 [文档](https://github.com/LuckSiege/PictureSelector/wiki/PictureSelector-3.0-%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E6%B2%99%E7%9B%92%E5%A4%96%E8%B5%84%E6%BA%90%EF%BC%9F)\n\n```sh\n.setSandboxFileEngine(new UriToFileTransformEngine() {\n    @Override\n    public void onUriToFileAsyncTransform(Context context, String srcPath, String mineType, OnKeyValueResultCallbackListener call) {\n                                        \n    }\n});\n```\n\n\n## 混淆配置 \n```sh\n-keep class com.luck.picture.lib.** { *; }\n\n// 如果引入了Camerax库请添加混淆\n-keep class com.luck.lib.camerax.** { *; }\n\t\n// 如果引入了Ucrop库请添加混淆\n-dontwarn com.yalantis.ucrop**\n-keep class com.yalantis.ucrop** { *; }\n-keep interface com.yalantis.ucrop** { *; }\n```\n## License\n```sh\nCopyright 2016 Luck\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n## 联系方式\nAndroid开发交流  [662320389]() <br>\nAndroid开发交流  [619458861]() <br>\nAndroid开发交流  [679824206]() <br>\nAndroid开发交流  [854136996]() <br>\nQQ [893855882]() <br>\n\n\n## 兼容性测试\n******腾讯优测-深度测试-通过率达到100%******\n\n![image](https://github.com/LuckSiege/PictureSelector/blob/version_component/image/test.png)\n\n\n## 演示效果\n\n| 功能列表 |\n|:-----------:|\n|![](image/home.jpg)|\n\n| 默认风格 | 预览 | 多图裁剪 |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_default_style_1.jpg) | <img src=\"image/picture_default_style_2.jpg\"/> | ![](image/picture_default_style_new_3.jpg)|\n\n| 数字风格 | 预览 | 多图裁剪 |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_num_style_new_1.jpg) | ![](image/picture_num_style_new_2.jpg) | ![](image/picture_num_style_new_3.jpg)|\n\n| 白色风格 | 预览 | 单图裁剪 |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_sina_style_1.jpg) | ![](image/picture_sina_style_new_2.jpg) | ![](image/picture_sina_style_new_3.jpg)|\n\n| 全新风格 | 预览 | 多图裁剪 |\n|:-----------:|:--------:|:---------:|\n|![](image/picture_wechat_style_1.jpg) | ![](image/picture_wechat_style_2.jpg) | ![](image/picture_wechat_style_new_3.jpg)|\n\n| 相册目录 | 单选模式 | 头像裁剪|\n|:-----------:|:--------:|:--------:|\n|![](image/picture_wechat_album_style.jpg) |![](image/picture_wechat_single_style_3.jpg) | ![](image/picture_circular_crop_new_style.jpg)|\n\n| 白色风格 | 视频 | 音频 |\n|:-----------:|:-----------:|:--------:|\n|![](image/picture_white_style.jpeg) |![](image/picture_video.jpg) | ![](image/picture_audio.jpg)|\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 0.8115234375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\napply from: \"config.gradle\"\n\nbuildscript {\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.4.2'\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url 'https://maven.google.com/'\n            name 'Google'\n        }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"
        },
        {
          "name": "camerax",
          "type": "tree",
          "content": null
        },
        {
          "name": "compress",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.gradle",
          "type": "blob",
          "size": 1.1669921875,
          "content": "ext {\n    cfgs = [\n            versionCode                   : 93,\n            versionName                   : \"v3.11.2\",\n\n            //open version control\n            androidSupportVersion         : \"27.0.2\",\n            version_recyclerview          : \"1.2.1\",\n            version_appcompat             : \"1.3.1\",\n            activity_version              : \"1.3.1\",\n            fragment_version              : \"1.3.1\",\n            viewpage2                     : \"1.0.0\",\n            constraintlayout              : \"2.1.4\",\n            exoplayer                     : \"2.18.0\",\n            transition                    : \"1.4.1\",\n            okhttp                        : \"3.12.13\",\n            gson                          : \"2.8.6\",\n            futures                       : \"1.1.0\",\n\n            experimental_version          : \"1.1.0\",\n            futures_version               : \"1.1.0\",\n\n            exifinterface_version         : \"1.3.3\",\n\n            // glide\n            glide_version                 : \"4.15.1\",\n\n            // picasso\n            picasso_version               : \"2.71828\",\n\n            // coil\n            coil_version                  : \"2.1.0\"\n\n    ]\n}"
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.890625,
          "content": "# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\nandroid.useAndroidX=true\nandroid.injected.testOnly=false\n\n\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.171875,
          "content": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.125,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "ijkplayer-java",
          "type": "tree",
          "content": null
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.gradle",
          "type": "blob",
          "size": 5.5595703125,
          "content": "apply plugin: 'maven-publish'\napply plugin: 'signing'\n\nProperties localProperties = new Properties()\nlocalProperties.load(project.rootProject.file('local.properties').newDataInputStream())\nlocalProperties.each { name, value ->\n    project.ext[name] = value\n}\n\ndef mavenUsername = localProperties.getProperty(\"sonatype.username\")\ndef mavenPassword = localProperties.getProperty(\"sonatype.password\")\ndef projectGroupId = localProperties.getProperty(\"groupId\")\ndef projectArtifactId = PUBLISH_ARTIFACT_ID\ndef projectVersionName = cfgs.versionName\ndef projectDescription = localProperties.getProperty(\"description\")\ndef projectGitUrl = localProperties.getProperty(\"gitUrl\")\ndef projectLicense = localProperties.getProperty(\"license\")\ndef projectLicenseUrl = projectLicense ? \"https://opensource.org/licenses/${projectLicense.toString().replace(\" \", \"-\")} \" : null\ndef developerAuthorEmail = localProperties.getProperty(\"email\")\n\ndef developerAuthorId = mavenUsername\ndef developerAuthorName = mavenUsername\n\n\nprintln(\"${mavenUsername} ${mavenPassword} - ${projectGroupId}:${projectArtifactId}:${projectVersionName}\")\nprintln(\"${projectLicense} - ${projectLicenseUrl}\")\n\nif (!mavenUsername || !mavenPassword || !projectGroupId || !projectArtifactId || !projectVersionName) {\n    println('Error：缺少参数')\n    return\n}\nif (!projectDescription || !projectGitUrl || !projectLicense || !projectLicenseUrl || !developerAuthorId || !developerAuthorName || !developerAuthorEmail) {\n    println('Warning：缺少可选信息')\n}\n\ndef isAndroidProject = project.hasProperty('android')\nif (isAndroidProject) {\n    println(\"使用Android工程方式发布\")\n    task androidJavadocs(type: Javadoc) {\n        source = android.sourceSets.main.java.srcDirs\n        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    }\n    task javadocsJar(type: Jar, dependsOn: androidJavadocs) {\n        archiveClassifier.set(\"javadoc\")\n        from androidJavadocs.destinationDir\n    }\n    task sourcesJar(type: Jar) {\n        archiveClassifier.set(\"sources\")\n        from android.sourceSets.main.java.srcDirs\n    }\n} else {\n    println(\"使用Java工程方式发布\")\n    task javadocsJar(type: Jar, dependsOn: javadoc) {\n        archiveClassifier.set(\"javadoc\")\n        from javadoc.destinationDir\n    }\n    task sourcesJar(type: Jar) {\n        archiveClassifier.set(\"sources\")\n        from sourceSets.main.allJava\n    }\n}\n\ntasks.withType(Javadoc).all {\n    options {\n        encoding \"UTF-8\"\n        charSet 'UTF-8'\n        author true\n        version true\n        links \"http://docs.oracle.com/javase/8/docs/api\"\n        if (isAndroidProject) {\n            linksOffline \"http://d.android.com/reference\", \"${android.sdkDirectory}/docs/reference\"\n        }\n        failOnError = false\n    }\n    enabled = false\n}\n\nartifacts {\n    archives javadocsJar, sourcesJar\n}\n\npublishing {\n    publications {\n        aar(MavenPublication) {\n            groupId = projectGroupId\n            artifactId = projectArtifactId\n            version = projectVersionName\n            // Tell maven to prepare the generated \"*.aar\" file for publishing\n            if (isAndroidProject) {\n                artifact(\"$buildDir/outputs/aar/${project.getName()}-release.aar\")\n            } else {\n                artifact(\"$buildDir/libs/${project.getName()}.jar\")\n            }\n            artifact javadocsJar\n            artifact sourcesJar\n\n            pom {\n                name = projectArtifactId\n                description = projectDescription\n                // If your project has a dedicated site, use its URL here\n                url = projectGitUrl\n                licenses {\n                    license {\n                        name = projectLicense\n                        url = projectLicenseUrl\n                    }\n                }\n                developers {\n                    developer {\n                        id = developerAuthorId\n                        name = developerAuthorName\n                        email = developerAuthorEmail\n                    }\n                }\n                // Version control info, if you're using GitHub, follow the format as seen here\n                scm {\n                    connection = \"scm:git:${projectGitUrl}\"\n                    developerConnection = \"scm:git:${projectGitUrl}\"\n                    url = projectGitUrl\n                }\n                withXml {\n                    def dependenciesNode = asNode().appendNode('dependencies')\n                    project.configurations.implementation.allDependencies.each {\n                        def dependencyNode = dependenciesNode.appendNode('dependency')\n                        dependencyNode.appendNode('groupId', it.group)\n                        dependencyNode.appendNode('artifactId', it.name)\n                        dependencyNode.appendNode('version', it.version)\n                    }\n                }\n            }\n        }\n    }\n\n    repositories {\n        maven {\n            name = projectArtifactId\n\n            def releasesRepoUrl = \"https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/\"\n            def snapshotsRepoUrl = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\"\n            // You only need this if you want to publish snapshots, otherwise just set the URL\n            // to the release repo directly\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n\n            // The username and password we've fetched earlier\n            credentials {\n                username mavenUsername\n                password mavenPassword\n            }\n        }\n    }\n}\n\nsigning {\n    sign publishing.publications\n}"
        },
        {
          "name": "selector",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.091796875,
          "content": "include ':app', ':selector',':ucrop',':compress'\ninclude ':camerax'\ninclude ':ijkplayer-java'\n"
        },
        {
          "name": "ucrop",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}