{
  "metadata": {
    "timestamp": 1736708904714,
    "page": 146,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jhy/jsoup",
      "stars": 11020,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "*   text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": ".idea/\njsoup.iml\njsoup.ipr\njsoup.iws\ntarget/\n.classpath\n.project\n.settings/\n*Thrash*\nbin/\n.vscode/\n.java-version\n.DS_Store\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 13.7626953125,
          "content": "# jsoup Changelog\n\n## 1.19.1 (PENDING)\n\n### Changes\n\n* Added support for **http/2** requests in `Jsoup.connect()`, when running on Java 11+. In this version, this is not\n  enabled by default: use `System.setProperty(\"jsoup.useHttpClient\", \"true\");` to enable. If you are repackaging the\n  jsoup jar in your deployment (i.e. creating a shaded- or a fat-jar), make sure to specify that as a Multi-Release\n  JAR. If the `HttpClient` impl is not available in your JRE, requests will continue to be made via\n  `HttpURLConnection` (in `http/1.1` mode). [2257](https://github.com/jhy/jsoup/pull/2257)\n* Updated the minimum Android API Level validation from 10 to **21**. As with previous jsoup versions, Android\n  developers need to enable core library desugaring. The minimum Java version remains Java 8.\n  [2173](https://github.com/jhy/jsoup/pull/2173)\n* Removed previously deprecated class: `org.jsoup.UncheckedIOException` (replace with `java.io.UncheckedIOException`);\n  method `Element Element#forEach(Consumer)` to\n  `void Element#forEach(Consumer())`. [2246](https://github.com/jhy/jsoup/pull/2246)\n* Deprecated the methods `Document#updateMetaCharsetElement(bool)` and `#Document#updateMetaCharsetElement()`, as the\n  setting had no effect. When `Document#charset(Charset)` is called, the document's meta charset or XML encoding\n  instruction is always set. [2247](https://github.com/jhy/jsoup/pull/2247)\n\n### Improvements\n\n* When cleaning HTML with a `Safelist` that preserves relative links, the `isValid()` method will now consider these\n  links valid. Additionally, the enforced attribute `rel=nofollow` will only be added to external links when configured\n  in the safelist. [2245](https://github.com/jhy/jsoup/pull/2245)\n* Added `Element#selectStream(String query)` and `Element#selectStream(Evaluator )` methods, that return a `Stream` of\n  matching elements. Elements are evaluated and returned as they are found, and the stream can be\n  terminated early. [2092](https://github.com/jhy/jsoup/pull/2092)\n* `Element` objects now implement `Iterable`, enabling them to be used in enhanced for loops.\n* Added support for fragment parsing from a `Reader` via\n  `Parser#parseFragmentInput(Reader, Element, String)`. [1177](https://github.com/jhy/jsoup/issues/1177)\n* Reintroduced CLI executable examples, in `jsoup-examples.jar`. [1702](https://github.com/jhy/jsoup/issues/1702)\n* Optimized performance of selectors like `#id .class` (and other similar descendant queries) by around 4.6x, by better\n  balancing the Ancestor evaluator's cost function in the query\n  planner. [2254](https://github.com/jhy/jsoup/issues/2254)\n\n### Bug Fixes\n\n* For backwards compatibility, reverted the internal attribute key for doctype names to \n  \"name\". [2241](https://github.com/jhy/jsoup/issues/2241)\n* In `Connection`, skip cookies that have no name, rather than throwing a validation\n  exception. [2242](https://github.com/jhy/jsoup/issues/2242)\n* When running on JDK 1.8, the error `java.lang.NoSuchMethodError: java.nio.ByteBuffer.flip()Ljava/nio/ByteBuffer;`\n  could be thrown when calling `Response#body()` after parsing from a URL and the buffer size was\n  exceeded. [2250](https://github.com/jhy/jsoup/pull/2250)\n* For backwards compatibility, allow `null` InputStream inputs to `Jsoup.parse(InputStream stream, ...)`, by returning\n  an empty `Document`. [2252](https://github.com/jhy/jsoup/issues/2252)\n\n## 1.18.3 (2024-Dec-02)\n\n### Bug Fixes\n\n* When serializing to XML, attribute names containing `-`, `.`, or digits were incorrectly marked as invalid and\n  removed. [2235](https://github.com/jhy/jsoup/issues/2235) \n* If an element has an `;` in an attribute name, it could not be converted to a W3C DOM element, and so subsquent XPath\n  queries could miss that element. Now, the attribute name is more completely\n  normalized. [2244](https://github.com/jhy/jsoup/issues/2244)\n\n## 1.18.2 (2024-Nov-27)\n\n### Improvements\n\n* Optimized the throughput and memory use throughout the input read and parse flows, with heap allocations and GC \n  down between -6% and -89%, and throughput improved up to +143% for small inputs. Most inputs sizes will see \n  throughput increases of ~ 20%. These performance improvements come through recycling the backing `byte[]` and `char[]` \n  arrays used to read and parse the input. [2186](https://github.com/jhy/jsoup/pull/2186) \n* Speed optimized `html()` and `Entities.escape()` when the input contains UTF characters in a supplementary plane, by\n  around 49%. [2183](https://github.com/jhy/jsoup/pull/2183)\n* The form associated elements returned by `FormElement.elements()` now reflect changes made to the DOM,\n  subsequently to the original parse. [2140](https://github.com/jhy/jsoup/issues/2140)\n* In the `TreeBuilder`, the `onNodeInserted()` and `onNodeClosed()` events are now also fired for the outermost /\n  root `Document` node. This enables source position tracking on the Document node (which was previously unset). And\n  it also enables the node traversor to see the outer Document node. [2182](https://github.com/jhy/jsoup/pull/2182)\n* Selected Elements can now be position swapped inline using\n  `Elements#set()`. [2212](https://github.com/jhy/jsoup/issues/2212)\n\n### Bug Fixes\n\n* `Element.cssSelector()` would fail if the element's class contained a `*`\n  character. [2169](https://github.com/jhy/jsoup/issues/2169)\n* When tracking source ranges, a text node following an invalid self-closing element may be left\n  untracked. [2175](https://github.com/jhy/jsoup/issues/2175)\n* When a document has no doctype, or a doctype not named `html`, it should be parsed in Quirks\n  Mode. [2197](https://github.com/jhy/jsoup/issues/2197)\n* With a selector like `div:has(span + a)`, the `has()` component was not working correctly, as the inner combining\n  query caused the evaluator to match those against the outer's siblings, not\n  children. [2187](https://github.com/jhy/jsoup/issues/2187)\n* A selector query that included multiple `:has()` components in a nested `:has()` might incorrectly\n  execute. [2131](https://github.com/jhy/jsoup/issues/2131)\n* When cookie names in a response are duplicated, the simple view of cookies available via\n  `Connection.Response#cookies()` will provide the last one set. Generally it is better to use\n  the [Jsoup.newSession](https://jsoup.org/cookbook/web/request-session) method to maintain a cookie jar, as that\n  applies appropriate path selection on cookies when making requests. [1831](https://github.com/jhy/jsoup/issues/1831)\n* When parsing named HTML entities, base entities should resolve if they are a prefix of the input token (and not in an\n  attribute). [2207](https://github.com/jhy/jsoup/issues/2207)\n* Fixed incorrect tracking of source ranges for attributes merged from late-occurring elements that were implicitly\n  created (`html` or `body`). [2204](https://github.com/jhy/jsoup/issues/2204)\n* Follow the current HTML specification in the tokenizer to allow `<` as part of a tag name, instead of emitting it as a\n  character node. [2230](https://github.com/jhy/jsoup/issues/2230)\n* Similarly, allow a `<` as the start of an attribute name, vs creating a new element. The previous behavior was\n  intended to parse closer to what we anticipated the author's intent to be, but that does not align to the spec or to\n  how browsers behave. [1483](https://github.com/jhy/jsoup/issues/1483)\n\n## 1.18.1 (2024-Jul-10)\n\n### Improvements\n\n* **Stream Parser**: A `StreamParser` provides a progressive parse of its input. As each `Element` is completed, it is\n  emitted via a `Stream` or `Iterator` interface. Elements returned will be complete with all their children, and an\n  (empty) next sibling, if applicable. Elements (or their children) may be removed from the DOM during the parse,\n  for e.g. to conserve memory, providing a mechanism to parse an input document that would otherwise be too large to fit\n  into memory, yet still providing a DOM interface to the document and its elements. Additionally, the parser provides\n  a `selectFirst(String query)` / `selectNext(String query)`, which will run the parser until a hit is found, at which\n  point the parse is suspended. It can be resumed via another `select()` call, or via the `stream()` or `iterator()`\n  methods. [2096](https://github.com/jhy/jsoup/pull/2096)\n* **Download Progress**: added a Response Progress event interface, which reports progress and URLs are downloaded (and\n  parsed). Supported on both a session and a single connection\n  level. [2164](https://github.com/jhy/jsoup/pull/2164), [656](https://github.com/jhy/jsoup/issues/656)\n* Added `Path` accepting parse methods: `Jsoup.parse(Path)`, `Jsoup.parse(path, charsetName, baseUri, parser)`,\n  etc. [2055](https://github.com/jhy/jsoup/pull/2055)\n* Updated the `button` tag configuration to include a space between multiple button elements in the `Element.text()`\n  method. [2105](https://github.com/jhy/jsoup/issues/2105)\n* Added support for the `ns|*` all elements in namespace Selector. [1811](https://github.com/jhy/jsoup/issues/1811)\n* When normalising attribute names during serialization, invalid characters are now replaced with `_`, vs being\n  stripped. This should make the process clearer, and generally prevent an invalid attribute name being coerced\n  unexpectedly. [2143](https://github.com/jhy/jsoup/issues/2143)\n\n### Changes\n\n* Removed previously deprecated internal classes and methods. [2094](https://github.com/jhy/jsoup/pull/2094)\n* Build change: the built jar's OSGi manifest no longer imports itself. [2158](https://github.com/jhy/jsoup/issues/2158)\n\n### Bug Fixes\n\n* When tracking source positions, if the first node was a TextNode, its position was incorrectly set\n  to `-1.` [2106](https://github.com/jhy/jsoup/issues/2106)\n* When connecting (or redirecting) to URLs with characters such as `{`, `}` in the path, a Malformed URL exception would\n  be thrown (if in development), or the URL might otherwise not be escaped correctly (if in\n  production). The URL encoding process has been improved to handle these characters\n  correctly. [2142](https://github.com/jhy/jsoup/issues/2142)\n* When using `W3CDom` with a custom output Document, a Null Pointer Exception would be\n  thrown. [2114](https://github.com/jhy/jsoup/pull/2114)\n* The `:has()` selector did not match correctly when using sibling combinators (like\n  e.g.: `h1:has(+h2)`). [2137](https://github.com/jhy/jsoup/issues/2137)\n* The `:empty` selector incorrectly matched elements that started with a blank text node and were followed by \n  non-empty nodes, due to an incorrect short-circuit. [2130](https://github.com/jhy/jsoup/issues/2130) \n* `Element.cssSelector()` would fail with \"Did not find balanced marker\" when building a selector for elements that had\n  a `(` or `[` in their class names. And selectors with those characters escaped would not match as\n  expected. [2146](https://github.com/jhy/jsoup/issues/2146)\n* Updated `Entities.escape(string)` to make the escaped text suitable for both text nodes and attributes (previously was\n  only for text nodes). This does not impact the output of `Element.html()` which correctly applies a minimal escape\n  depending on if the use will be for text data or in a quoted\n  attribute. [1278](https://github.com/jhy/jsoup/issues/1278)\n* Fuzz: a Stack Overflow exception could occur when resolving a crafted `<base href>` URL, in the normalizing regex.\n  [2165](https://github.com/jhy/jsoup/issues/2165)\n\n---\n\n## 1.17.2 (2023-Dec-29)\n\n### Improvements\n\n* **Attribute object accessors**: Added `Element.attribute(String)` and `Attributes.attribute(String)` to more simply\n  obtain an `Attribute` object. [2069](https://github.com/jhy/jsoup/issues/2069)\n* **Attribute source tracking**: If source tracking is on, and an Attribute's key is changed (\n  via `Attribute.setKey(String)`), the source range is now still tracked\n  in `Attribute.sourceRange()`. [2070](https://github.com/jhy/jsoup/issues/2070)\n* **Wildcard attribute selector**: Added support for the `[*]` element with any attribute selector. And also restored\n  support for selecting by an empty attribute name prefix (`[^]`). [2079](https://github.com/jhy/jsoup/issues/2079)\n\n### Bug Fixes\n\n* **Mixed-cased source position**: When tracking the source position of attributes, if the source attribute name was\n  mix-cased but the parser was lower-case normalizing attribute names, the source position for that attribute was not\n  tracked correctly. [2067](https://github.com/jhy/jsoup/issues/2067)\n* **Source position NPE**: When tracking the source position of a body fragment parse, a null pointer\n  exception was thrown. [2068](https://github.com/jhy/jsoup/issues/2068)\n* **Multi-point emoji entity**: A multi-point encoded emoji entity may be incorrectly decoded to the replacement\n  character. [2074](https://github.com/jhy/jsoup/issues/2074)\n* **Selector sub-expressions**: (Regression) in a selector like `parent [attr=va], other`, the `, OR` was binding\n  to `[attr=va]` instead of `parent [attr=va]`, causing incorrect selections. The fix includes a EvaluatorDebug class\n  that generates a sexpr to represent the query, allowing simpler and more thorough query parse\n  tests. [2073](https://github.com/jhy/jsoup/issues/2073)\n* **XML CData output**: When generating XML-syntax output from parsed HTML, script nodes containing (pseudo) CData\n  sections would have an extraneous CData section added, causing script execution errors. Now, the data content is\n  emitted in a HTML/XML/XHTML polyglot format, if the data is not already within a CData\n  section. [2078](https://github.com/jhy/jsoup/issues/2078)\n* **Thread safety**: The `:has` evaluator held a non-thread-safe Iterator, and so if an Evaluator object was\n  shared across multiple concurrent threads, a NoSuchElement exception may be thrown, and the selected results may be\n  incorrect. Now, the iterator object is a thread-local. [2088](https://github.com/jhy/jsoup/issues/2088)\n\n---\nOlder changes for versions 0.1.1 (2010-Jan-31) through 1.17.1 (2023-Nov-27) may be found in\n[change-archive.txt](./change-archive.txt).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.076171875,
          "content": "The MIT License\n\nCopyright (c) 2009-2025 Jonathan Hedley <https://jsoup.org/>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# jsoup: Java HTML Parser\n\n**jsoup** is a Java library that makes it easy to work with real-world HTML and XML. It offers an easy-to-use API for URL fetching, data parsing, extraction, and manipulation using DOM API methods, CSS, and xpath selectors.\n\n**jsoup** implements the [WHATWG HTML5](https://html.spec.whatwg.org/multipage/) specification, and parses HTML to the same DOM as modern browsers.\n\n* scrape and [parse](https://jsoup.org/cookbook/input/parse-document-from-string) HTML from a URL, file, or string\n* find and [extract data](https://jsoup.org/cookbook/extracting-data/selector-syntax), using DOM traversal or CSS selectors\n* manipulate the [HTML elements](https://jsoup.org/cookbook/modifying-data/set-html), attributes, and text\n* [clean](https://jsoup.org/cookbook/cleaning-html/safelist-sanitizer) user-submitted content against a safe-list, to prevent XSS attacks\n* output tidy HTML\n\njsoup is designed to deal with all varieties of HTML found in the wild; from pristine and validating, to invalid tag-soup; jsoup will create a sensible parse tree.\n\nSee [**jsoup.org**](https://jsoup.org/) for downloads and the full [API documentation](https://jsoup.org/apidocs/).\n\n[![Build Status](https://github.com/jhy/jsoup/workflows/Build/badge.svg)](https://github.com/jhy/jsoup/actions?query=workflow%3ABuild)\n\n## Example\nFetch the [Wikipedia](https://en.wikipedia.org/wiki/Main_Page) homepage, parse it to a [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction), and select the headlines from the *In the News* section into a list of [Elements](https://jsoup.org/apidocs/org/jsoup/select/Elements.html):\n\n```java\nDocument doc = Jsoup.connect(\"https://en.wikipedia.org/\").get();\nlog(doc.title());\nElements newsHeadlines = doc.select(\"#mp-itn b a\");\nfor (Element headline : newsHeadlines) {\n  log(\"%s\\n\\t%s\", \n    headline.attr(\"title\"), headline.absUrl(\"href\"));\n}\n```\n[Online sample](https://try.jsoup.org/~LGB7rk_atM2roavV0d-czMt3J_g), [full source](https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/examples/Wikipedia.java).\n\n## Open source\njsoup is an open source project distributed under the liberal [MIT license](https://jsoup.org/license). The source code is available on [GitHub](https://github.com/jhy/jsoup).\n\n## Getting started\n1. [Download](https://jsoup.org/download) the latest jsoup jar (or add it to your Maven/Gradle build)\n2. Read the [cookbook](https://jsoup.org/cookbook/)\n3. Enjoy!\n\n### Android support\nWhen used in Android projects, [core library desugaring](https://developer.android.com/studio/write/java8-support#library-desugaring) with the [NIO specification](https://developer.android.com/studio/write/java11-nio-support-table) should be enabled to support Java 8+ features.\n\n## Development and support\nIf you have any questions on how to use jsoup, or have ideas for future development, please get in touch via [jsoup Discussions](https://github.com/jhy/jsoup/discussions).\n\nIf you find any issues, please file a [bug](https://jsoup.org/bugs) after checking for duplicates.\n\nThe [colophon](https://jsoup.org/colophon) talks about the history of and tools used to build jsoup.\n\n## Status\njsoup is in general, stable release.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.5107421875,
          "content": "# Security Policy\n\n## Supported Versions\n\nSecurity fixes are not back-ported. Please make sure you are running at least the latest [release version](https://jsoup.org/download) of jsoup.\n\nPlease remember that jsoup is an Open Source library and is provided without any warranty. Before using jsoup in a critical environment, you should satisfy yourself that it works correctly and securely for your needs.\n\n## Reporting a Vulnerability\n\nIf you believe or suspect you have identified a security vulnerability, please [report it](https://github.com/jhy/jsoup/security/advisories)\nvia the \"Report a Vulnerability\" button in Security Advisories. \n([Details](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability))\n\nWe follow [Coordinated Disclosure](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/about-coordinated-disclosure-of-security-vulnerabilities) practices and ask that you do too.\n\nPlease provide as much detail as possible in your report, including the steps to reproduce the vulnerability and sample code.\n\nAlternatively to using GitHub, or if you have a security question, please email `security@jsoup.org`.\n\n## Fixing Vulnerabilities\n\nWe take all vulnerability reports seriously and strive to fix them as quickly as possible. Once we receive a report, we will verify the vulnerability and its impact. We will then work to develop and test a fix for the vulnerability, and release it as soon as possible.\n"
        },
        {
          "name": "change-archive.txt",
          "type": "blob",
          "size": 98.4228515625,
          "content": "jsoup Changelog Archive\n\nContains change notes for versions 0.1.1 (2010-Jan-31) through 1.17.1 (2023-Nov-27).\nMore recent changes may be found in CHANGES.md.\n\nRelease 1.17.1 [27-Nov-2023]\n  * Improvement: in Jsoup.connect(), added support for request-level authentication, supporting authentication to\n    proxies and to servers.\n    <https://github.com/jhy/jsoup/pull/2046>\n\n  * Improvement: in the Elements list, added direct support for `#set(index, element)`, `#remove(index)`,\n    `#remove(object)`, `#clear()`, `#removeAll(collection)`, `#retainAll(collection)`, `#removeIf(filter)`,\n    `#replaceAll(operator)`. These methods update the original DOM, as well as the Elements list.\n    <https://github.com/jhy/jsoup/pull/2017>\n\n  * Improvement: added the NodeIterator class, to efficiently traverse a node tree using the Iterator interface. And\n    added Stream Element#stream() and Node#nodeStream() methods, to enable fluent composable stream pipelines of node\n    traversals.\n    <https://github.com/jhy/jsoup/pull/2051>\n\n  * Improvement: when changing the OutputSettings syntax to XML, the xhtml EscapeMode is automatically set by default.\n\n  * Improvement: added the `:is(selector list)` pseudo-selector, which finds elements that match any of the selectors in\n    the selector list. Useful for making large ORed selectors more readable.\n\n  * Improvement: repackaged the library with native (vs automatic) JPMS module support.\n    <https://github.com/jhy/jsoup/pull/2025>\n\n  * Improvement: better fidelity of source positions when tracking is enabled. And implicitly created or closed elements\n    are tracked and detectable via Range.isImplicit().\n    <https://github.com/jhy/jsoup/pull/2056>\n\n  * Improvement: when source tracking is enabled, the source position for attribute names and values is now available.\n    Attribute#sourceRange() provides the ranges.\n    <https://github.com/jhy/jsoup/pull/2057>\n\n  * Improvement: when running concurrently under Java 21+ Virtual Threads, virtual threads could be pinned to their\n    carrier platform thread when parsing an input stream. To improve performance, particularly when parsing fetched\n    URLs, the internal ConstrainableInputStream has been replaced by ControllableInputStream, which avoids the locking\n    which caused that pinning.\n    <https://github.com/jhy/jsoup/issues/2054>\n\n  * Improvement: in Jsoup.Connect, allow any XML mimetype as a supported mimetype. Was previously limited to\n    `{application|text}/xml`. This enables for e.g. fetching SVGs with a image/svg+xml mimetype, without having to\n    disable mimetype validation.\n    <https://github.com/jhy/jsoup/issues/2059>\n\n  * Bugfix: when outputting with XML syntax, HTML elements that were parsed as data nodes (<script> and <style>) should\n    be emitted as CDATA nodes, so that they can be parsed correctly by an XML parser.\n    <https://github.com/jhy/jsoup/pull/1720>\n\n  * Bugfix: the Immediate Parent selector `>` could match elements above the root context element, causing incorrect\n    elements to be returned when used on elements other than the root document.\n    <https://github.com/jhy/jsoup/issues/2018>\n\n  * Bugfix: in a sub-query such as `p:has(> span, > i)`, combinators following the `,` Or combinator would be\n    incorrectly skipped, such that the sub-query was parsed as `i` instead of `> i`.\n    <https://github.com/jhy/jsoup/issues/1707>\n\n  * Bugfix: in W3CDom, if the jsoup input document contained an empty doctype, the conversion would fail with a\n    DOMException. Now, said doctype is discarded, and the conversion continues.\n\n  * Bugfix: when cleaning a document containing SVG elements (or other foreign elements that have preserved case names),\n    the cleaned output would be incorrectly nested if the safelist had a different case than the input document.\n    <https://github.com/jhy/jsoup/issues/2049>\n\n  * Bugfix: when cleaning a document, the output style of unknown self-closing tags from the input was not preserved in\n    the output. (So a <foo /> in the input, if safe-listed, would be output as <foo></foo>.)\n    <https://github.com/jhy/jsoup/issues/2049>\n\n  * Build Improvement: added a local test proxy implementation, for proxy integration tests.\n    <https://github.com/jhy/jsoup/pull/2029>\n\n  * Build Improvement: added tests for HTTPS request support, using a local self-signed cert. Includes proxy tests.\n    <https://github.com/jhy/jsoup/pull/2032>\n\n  * Change: the InputStream returned in Connection.Response.bodyStream() is no longer a ConstrainedInputStream, and\n    so is not subject to settings such as timeout or maximum size. It is now a plain BufferedInputStream around the\n    response stream. Whilst this behaviour was not documented, you may have been inadvertently relying on those\n    constraints. The constraints are still applied to other methods such as .parse() and .bufferUp(). So if you do want\n    a constrained BufferedInputStream, you may do Connection.Response.bufferUp().bodyStream().\n    <https://github.com/jhy/jsoup/issues/2054>\n\nRelease 1.16.2 [20-Oct-2023]\n  * Improvement: optimized the performance of complex CSS selectors, by adding a cost-based query planner. Evaluators\n    are sorted by their relative execution cost, and executed in order of lower to higher cost. This speeds the\n    matching process by ensuring that simpler evaluations (such as a tag name match) are conducted prior to more\n    complex evaluations (such as an attribute regex, or a deep child scan with a :has).\n\n  * Improvement: added support for <svg> and <math> tags (and their children). This includes tag namespaces and case\n    preservation on applicable tags and attributes.\n    <https://github.com/jhy/jsoup/pull/2008>\n\n  * Improvement: when converting jsoup Documents to W3C Documents in W3CDom, HTML documents will be placed in the\n    `http://www.w3.org/1999/xhtml` namespace by default, per the HTML5 spec. This can be controlled by setting\n    `W3CDom#namespaceAware(false)`.\n    <https://github.com/jhy/jsoup/pull/1848>\n\n  * Improvement: speed optimized the Structural Evaluators by memoizing previous evaluations. Particularly the `~`\n    (any preceding sibling) and `:nth-of-type` selectors are improved.\n    <https://github.com/jhy/jsoup/issues/1956>\n\n  * Improvement: tweaked the performance of the Element nextElementSibling, previousElementSibling, firstElementSibling,\n    lastElementSibling, firstElementChild, and lastElementChild. They now inplace filter/skip in the child-node list, vs\n    having to allocate and scan a complete Element filtered list.\n\n  * Improvement: optimized internal methods that previously called Element.children() to use filter/skip child-node list\n    accessors instead, reducing new Element List allocations.\n\n  * Improvement: tweaked the performance of parsing :pseudo selectors.\n\n  * Improvement: when using the `:empty` pseudo-selector, blank textnodes are now considered empty. Previously,\n    an element containing any whitespace was not considered empty.\n    <https://github.com/jhy/jsoup/issues/1976>\n\n  * Improvement: in forms, <input type=\"image\"> should be excluded from formData() (and hence from form submissions).\n    <https://github.com/jhy/jsoup/pull/2010>\n\n  * Improvement: in Safelist, made isSafeTag and isSafeAttribute public methods, for extensibility.\n    <https://github.com/jhy/jsoup/issues/1780>\n\n  * Bugfix: `form` elements and empty elements (such as `img`) did not have their attributes de-duplicated.\n    <https://github.com/jhy/jsoup/pull/1950>\n\n  * Bugfix: if Document.OutputSettings was cloned from a clone, an NPE would be thrown when used.\n    <https://github.com/jhy/jsoup/pull/1964>\n\n  * Bugfix: in Jsoup.connect(url), URL paths containing a %2B were incorrectly recoded to a '+', or a '+' was recoded\n    to a ' '. Fixed by reverting to the previous behavior of not encoding supplied paths, other than normalizing to\n    ASCII.\n    <https://github.com/jhy/jsoup/issues/1952>\n\n  * Bugfix: in Jsoup.connect(url), strings containing supplemental characters (e.g. emoji) were not URL escaped\n    correctly.\n\n  * Bugfix: in Jsoup.connect(url), the ConstrainableInputStream would clear Thread interrupts when reading the body.\n    This precluded callers from spawning a thread, running a number of requests for a length of time, then joining that\n    thread after interrupting it.\n    <https://github.com/jhy/jsoup/issues/1991>\n\n  * Bugfix: when tracking HTML source positions, the closing tags for H1...H6 elements were not tracked correctly.\n    <https://github.com/jhy/jsoup/issues/1987>\n\n  * Bugfix: in Jsoup.connect(), a DELETE method request did not support a request body.\n    <https://github.com/jhy/jsoup/issues/1972>\n\n  * Bugfix: when calling Element.cssSelector() on an extremely deeply nested element, a StackOverflowError could occur.\n    Further, a StackOverflowError may occur when running the query.\n    <https://github.com/jhy/jsoup/issues/2001>\n\n  * Bugfix: appending a node back to its original Element after empty() would throw an Index out of bounds exception.\n    Also, now the child nodes that were removed have their parent node cleared, fully detaching them from the original\n    parent.\n    <https://github.com/jhy/jsoup/issues/2013>\n\n  * Bugfix: in Jsoup.Connection when adding headers, the value may have been assumed to be an incorrectly decoded\n    ISO_8859_1 string, and re-encoded as UTF-8. The value is now left as-is.\n\n  * Change: removed previously deprecated methods Document#normalise, Element#forEach(org.jsoup.helper.Consumer<>),\n    Node#forEach(org.jsoup.helper.Consumer<>), and the org.jsoup.helper.Consumer interface; the latter being a\n    previously required compatibility shim prior to Android's de-sugaring support.\n\n  * Change: the previous compatibility shim org.jsoup.UncheckedIOException is deprecated in favor of the now supported\n    java.io.UncheckedIOException. If you are catching the former, modify your code to catch the latter instead.\n    <https://github.com/jhy/jsoup/pull/1989>\n\n  * Change: blocked noscript tags from being added to Safelists, due to incompatibilities between parsers with and\n    without script-mode enabled.\n\nRelease 1.16.1 [29-Apr-2023]\n  * Improvement: in Jsoup.connect(url), natively support URLs with Unicode characters in the path or query string,\n    without having to be escaped by the caller.\n    <https://github.com/jhy/jsoup/issues/1914>\n\n  * Improvement: Calling Node.remove() on a node with no parent is now a no-op, vs a validation error.\n    <https://github.com/jhy/jsoup/issues/1898>\n\n  * Bugfix: aligned the HTML Tree Builder processing steps for AfterBody and AfterAfterBody to the updated WHATWG\n    standard, to not pop the stack to close <body> or <html> elements. This prevents an errant </html> closing preceding\n    structure. Also added appropriate error message outputs in this case.\n    <https://github.com/jhy/jsoup/issues/1851>\n\n  * Bugfix: Corrected support for ruby elements (<ruby>, <rp>, <rt>, and <rtc>) to current spec.\n    <https://github.com/jhy/jsoup/issues/1294>\n\n  * Bugfix: When using Node.before(node) or Node.after(node), if the incoming node was a sibling of the context node,\n    the incoming node may be inserted into the wrong relative location.\n    <https://github.com/jhy/jsoup/issues/1898>\n\n  * Bugfix: In Jsoup.connect(url), if the input URL had components that were already % escaped, they would be escaped\n    again, causing errors when fetched.\n    <https://github.com/jhy/jsoup/issues/1902>\n\n  * Bugfix: when tracking input source positions, text in tables that was fostered had invalid positions.\n    <https://github.com/jhy/jsoup/issues/1927>\n\n  * Bugfix: If the Document.OutputSettings class was initialized, and then Entities.escape(String) called, an NPE may be\n    thrown due to a class loading circular dependency.\n    <https://github.com/jhy/jsoup/issues/1910>\n\n  * Bugfix: when pretty-printing, the first inline Element or Comment in a block would not be wrap-indented if it were\n    preceded by a blank text node.\n    <https://github.com/jhy/jsoup/issues/1906>\n\n  * Bugfix: when pretty-printing a <pre> containing block tags, those tags were incorrectly indented.\n    <https://github.com/jhy/jsoup/issues/1891>\n\n  * Bugfix: when pretty-printing nested inlineable blocks (such as a <p> in a <td>), the inner element should be\n    indented.\n    <https://github.com/jhy/jsoup/issues/1926>\n\n  * Bugfix: <br> tags should be wrap-indented when in block tags (and not when in inline tags).\n    <https://github.com/jhy/jsoup/issues/1911>\n\n  * Bugfix: the contents of a sufficiently large <textarea> with un-escaped HTML closing tags may be incorrectly parsed\n    to an empty node.\n    <https://github.com/jhy/jsoup/issues/1929>\n\nRelease 1.15.4 [18-Feb-2023]\n  * Improvement: added the ability to escape CSS selectors (tags, IDs, classes) to match elements that don't follow\n    regular CSS syntax. For example, to match by classname <p class=\"one.two\">, use document.select(\"p.one\\\\.two\");\n    <https://github.com/jhy/jsoup/issues/838>\n\n  * Improvement: when pretty-printing, wrap text that follows a <br> tag.\n    <https://github.com/jhy/jsoup/issues/1858>\n\n  * Improvement: when pretty-printing, normalize newlines that follow self-closing tags in custom tags.\n    <https://github.com/jhy/jsoup/issues/1852>\n\n  * Improvement: when pretty-printing, collapse non-significant whitespace between a block and an inline tag.\n    <https://github.com/jhy/jsoup/issues/1802>\n\n  * Improvement: in Element#forEach and Node#forEachNode, use java.util.function.Consumer instead of the previous\n    Android compatibility shim org.jsoup.helper.Consumer. Subsequently, the latter has been deprecated.\n    <https://github.com/jhy/jsoup/pull/1870>\n\n  * Improvement: added a new method Document#forms(), to conveniently retrieve a List<FormElement> containing the <form>\n    elements in a document.\n\n  * Improvement: added a new method Document#expectForm(query), to find the first matching FormElement, or blow up\n    trying.\n    \n  * Bugfix: URLs containing characters such as [ and ] were not escaped correctly, and would throw a\n    MalformedURLException when fetched.\n    <https://github.com/jhy/jsoup/issues/1873>\n\n  * Bugfix: Element.cssSelector would create invalid selectors for elements where the tag name, ID, or classnames needed\n    to be escaped (e.g. if a class name contained a ':' or '.').\n    <https://github.com/jhy/jsoup/issues/1742>\n\n  * Bugfix: element.text() should have a space between a block and an inline element.\n    <https://github.com/jhy/jsoup/issues/1877>\n\n  * Bugfix: if a Node or an Element was replaced with itself, that node would incorrectly be orphaned.\n    <https://github.com/jhy/jsoup/issues/1843>\n\n  * Bugfix: form data on a previous request was copied to a new request in newRequest(), resulting in an accumulation of\n    form data when executing multi-step form submissions, or data sent to later requests incorrectly. Now, newRequest()\n    only copies session related settings (cookies, proxy settings, user-agent, etc) but not the request data nor the\n    body.\n    <https://github.com/jhy/jsoup/issues/1778>\n\n  * Bugfix: fixed an issue in Safelist.removeAttributes which could throw a ConcurrentModificationException when using\n    the \":all\" pseudo-attribute.\n\n  * Bugfix: given extremely deeply nested HTML, a number of methods in Element could throw a StackOverflowError due\n    to excessive recursion. Namely: #data(), #hasText(), #parents(), and #wrap(html).\n    <https://github.com/jhy/jsoup/issues/1864>\n\n  * Change: deprecated the unused Document#normalise() method. Normalization occurs during the HTML tree construction,\n    and no longer as a distinct phase.\n\nRelease 1.15.3 [2022-Aug-24]\n  * Security: fixed an issue where the jsoup cleaner may incorrectly sanitize crafted XSS attempts if\n    SafeList.preserveRelativeLinks is enabled.\n    <https://github.com/jhy/jsoup/security/advisories/GHSA-gp7f-rwcx-9369>\n\n  * Improvement: the Cleaner will preserve the source position of cleaned elements, if source tracking is enabled in the\n    original parse.\n\n  * Improvement: the error messages output from Validate are more descriptive. Exceptions are now ValidationExceptions\n    (extending IllegalArgumentException). Stack traces do not include the Validate class, to make it simpler to see\n    where the exception originated. Common validation errors including malformed URLs and empty selector results have\n    more explicit error messages.\n\n  * Bugfix: the DataUtil would incorrectly read from InputStreams that emitted reads less than the requested size. This\n    lead to incorrect results when parsing from chunked server responses, for example.\n    <https://github.com/jhy/jsoup/issues/1807>\n\n  * Build Improvement: added implementation version and related fields to the jar manifest.\n    <https://github.com/jhy/jsoup/issues/1809>\n\n*** Release 1.15.2 [2022-Jul-04]\n  * Improvement: added the ability to track the position (line, column, index) in the original input source from where\n    a given node was parsed. Accessible via Node.sourceRange() and Element.endSourceRange().\n    <https://github.com/jhy/jsoup/pull/1790>\n\n  * Improvement: added Element.firstElementChild(), Element.lastElementChild(), Node.firstChild(), Node.lastChild(),\n    as convenient accessors to those child nodes and elements.\n\n  * Improvement: added Element.expectFirst(cssQuery), which is just like Element.selectFirst(), but instead of returning\n    a null if there is no match, will throw an IllegalArgumentException. This is useful if you want to simply abort\n    processing if an expected match is not found.\n\n  * Improvement: when pretty-printing HTML, doctypes are emitted on a newline if there is a preceding comment.\n    <https://github.com/jhy/jsoup/pull/1664>\n\n  * Improvement: when pretty-printing, trim the leading and trailing spaces of textnodes in block tags when possible,\n    so that they are indented correctly.\n    <https://github.com/jhy/jsoup/issues/1798>\n\n  * Improvement: in Element#selectXpath(), disable namespace awareness. This makes it possible to always select elements\n    by their simple local name, regardless of whether an xmlns attribute was set.\n    <https://github.com/jhy/jsoup/issues/1801>\n\n  * Bugfix: when using the readToByteBuffer method, such as in Connection.Response.body(), if the document has not\n    already been parsed and must be read fully, and there is any maximum buffer size being applied, only the default\n    internal buffer size is read.\n    <https://github.com/jhy/jsoup/issues/1774>\n\n  * Bugfix: when serializing HTML, newlines in elements descending from a pre tag were incorrectly skipped. That caused\n    what should have been preformatted output to instead be a run of text.\n    <https://github.com/jhy/jsoup/issues/1776>\n\n  * Bugfix: when pretty-print serializing HTML, newlines separating phrasing content (e.g. a <span> tag within a <p> tag\n    would be incorrectly skipped, instead of normalized to a space. Additionally, improved space normalization between\n    other end of line occurrences, and whitespace handling after a closing </body>\n    <https://github.com/jhy/jsoup/issues/1787>\n\n*** Release 1.15.1 [2022-May-15]\n  * Change: removed previously deprecated methods and classes (including org.jsoup.safety.Whitelist; use\n    org.jsoup.safety.Safelist instead).\n\n  * Improvement: when converting jsoup Documents to W3C Documents in W3CDom, preserve HTML valid attribute names if the\n    input document is using the HTML syntax. (Previously, would always coerce using the more restrictive XML syntax.)\n    <https://github.com/jhy/jsoup/pull/1648>\n\n  * Improvement: added the :containsWholeText(text) selector, to match against non-normalized Element text. That can be\n    useful when elements can only be distinguished by e.g. specific case, or leading whitespace, etc.\n    <https://github.com/jhy/jsoup/issues/1636>\n\n  * Improvement: added Element#wholeOwnText() to retrieve the original (non-normalized) ownText of an Element. Also\n    added the :containsWholeOwnText(text) selector, to match against that. BR elements are now treated as newlines\n    in the wholeText methods.\n    <https://github.com/jhy/jsoup/issues/1636>\n\n  * Improvement: added the :matchesWholeText(regex) and :matchesWholeOwnText(regex) selectors, to match against whole\n    (non-normalized, case sensitive) element text and own text, respectively.\n    <https://github.com/jhy/jsoup/issues/1636>\n\n  * Improvement: when evaluating an XPath query against a context element, the complete document is now visible to the\n    query, vs only the context element's sub-tree. This enables support for queries outside (parent or sibling) the\n    element, e.g. ancestor-or-self::*.\n    <https://github.com/jhy/jsoup/issues/1652>\n\n  * Improvement: allow a maxPaddingWidth on the indent level in OutputSettings when pretty printing. This defaults to\n    30 to limit the indent level for very deeply nested elements, and may be disabled by setting to -1.\n    <https://github.com/jhy/jsoup/pull/1655>\n\n  * Improvement: when cloning a Node or an Element, the clone gets a cloned OwnerDocument containing only that clone, so\n    as to preserve applicable settings, such as the Pretty Print settings.\n    <https://github.com/jhy/jsoup/issues/763>\n\n  * Improvement: added a convenience method Jsoup.parse(File).\n    <https://github.com/jhy/jsoup/issues/1693>\n\n  * Improvement: in the NodeTraversor, added default implementations for NodeVisitor.tail() and NodeFilter.tail(), so\n    that code using only head() methods can be written as lambdas.\n\n  * Improvement: in NodeTraversor, added support for removing nodes via Node.remove() during NodeVisitor.head().\n    <https://github.com/jhy/jsoup/issues/1699>\n\n  * Improvement: added Node.forEachNode(Consumer<Node>) and Element.forEach(Consumer<Element) methods, to efficiently\n    traverse the DOM with a functional interface.\n    <https://github.com/jhy/jsoup/issues/1700>\n\n  * Bugfix: boolean attribute names should be case-insensitive, but were not when the parser was configured to preserve\n    case.\n    <https://github.com/jhy/jsoup/issues/1656>\n\n  * Bugfix: when reading from SequenceInputStreams across the buffer, the input stream was closed too early, resulting\n    in missed content.\n    <https://github.com/jhy/jsoup/pull/1671>\n\n  * Bugfix: a comment with all dashes (<!----->) should not emit a parse error.\n    <https://github.com/jhy/jsoup/issues/1667>\n\n  * Bugfix: when throwing a SelectorParseException for an invalid selector, don't try to String.format the input, as\n    that could throw an IllegalFormatException.\n    <https://github.com/jhy/jsoup/issues/1691>\n\n  * Bugfix: when serializing HTML with Pretty Print enabled, extraneous whitespace may be added on closing tags, or\n    extra newlines may be added at the end of script blocks.\n    <https://github.com/jhy/jsoup/issues/1688>\n    <https://github.com/jhy/jsoup/issues/1689>\n\n  * Bugfix: when copy-creating a Safelist from another, perform a deep-copy of the original's settings, so that changes\n    to the original after creation do not affect the copy.\n    <https://github.com/jhy/jsoup/pull/1763>\n\n  * Bugfix [Fuzz]: speed improvement when parsing constructed HTML containing very deeply incorrectly stacked formatting\n    elements with many attributes.\n    <https://github.com/jhy/jsoup/issues/1695>\n\n  * Bugfix [Fuzz]: during parsing, a StackOverflowException was possible given crafted HTML with hundreds of nested\n    table elements followed by invalid formatting elements.\n    <https://github.com/jhy/jsoup/issues/1697>\n\n*** Release 1.14.3 [2021-Sep-30]\n  * Improvement: added native XPath support in Element#selectXpath(String)\n    <https://github.com/jhy/jsoup/pull/1629>\n\n  * Improvement: added full support for the <template> tag to the HTML5 parser spec.\n    <https://github.com/jhy/jsoup/issues/1634>\n\n  * Improvement: added support in CharacterReader to track newlines, so that parse errors can be reported more\n    intuitively.\n    <https://github.com/jhy/jsoup/pull/1624>\n\n  * Improvement: tracked parse errors now have more details, including the erroneous token, to help clarify the errors.\n\n  * Improvement: speed and memory optimizations for the :has(subquery) selector.\n\n  * Improvement: the :contains(text) and :containsOwn(text) selectors are now whitespace normalized, aligning to the\n    document text that they are matching against.\n    <https://github.com/jhy/jsoup/issues/876>\n\n  * Improvement: in Element, speed optimized adopting all of an element's child nodes into a currently empty element.\n    Improves the HTML adoption agency algorithm when adopting elements with many children.\n    <https://github.com/jhy/jsoup/issues/1638>\n\n  * Improvement: increased the parse speed when in RCData (e.g. <title>) and unescaped <tag> tokens are found, by\n    memoizing the </title> scan and reducing GC.\n    <https://github.com/jhy/jsoup/issues/1644>\n\n  * Improvement: when parsing custom tags (in HTML or XML), added a flyweight cache on Tag.valueOf(name) to reduce\n    memory overhead when many tags are repeated. Also tuned other areas of the parser when many very deeply stacked\n    custom elements were present.\n    <https://github.com/jhy/jsoup/issues/1646>\n\n  * Bugfix: when tracking errors or checking for validity in the Cleaner, errors were incorrectly raised for missing\n    optional closing tags.\n\n  * Bugfix: the OSGi bundle meta-data incorrectly set a version on the import of javax.annotation (used as a build-time\n    dependency for nullability assertions).\n    <https://github.com/jhy/jsoup/issues/1616>\n\n  * Bugfix: the Attributes::equals() method was sensitive to the order of its contents, but it should not be.\n    <https://github.com/jhy/jsoup/issues/1492>\n\n  * Bugfix: when the HTML parser was configured to preserve case, Element text methods would miss adding whitespace for\n    \"BR\" tags.\n\n  * Bugfix: attribute names are now normalized & validated correctly for the specific output syntax (HTML or XML).\n    Previously, syntactically invalid attribute names could be output by the html() methods. Such attributes are still\n    available in the DOM, and will be normalized if possible on output.\n    <https://github.com/jhy/jsoup/issues/1474>\n\n  * Bugfix [Fuzz]: fixed an IOOB when an empty select tag was followed by a body tag that needed reparenting.\n    <https://github.com/jhy/jsoup/issues/1639>\n\n  * Build Improvement: fixed nullability annotations for Node.equals(other) and other equals methods.\n    <https://github.com/jhy/jsoup/issues/1628>\n\n  * Build Improvement: added JDK 17 to the CI builds.\n    <https://github.com/jhy/jsoup/pull/1641>\n\n*** Release 1.14.2 [2021-Aug-15]\n  * Improvement: support Pattern.quote \\Q and \\E escapes in the selector regex matchers.\n    <https://github.com/jhy/jsoup/pull/1536>\n\n  * Improvement: Element.absUrl() now supports tel: URLs, and other URLs that are already absolute but that Java does\n    not have input stream handlers for.\n    <https://github.com/jhy/jsoup/issues/1610>\n\n  * Bugfix: when serializing output, escape characters that are in the < 0x20 range. This improves XML output\n    compatibility, and makes HTML output with these characters easier to read (as they're otherwise invisible).\n    <https://github.com/jhy/jsoup/issues/1556>\n\n  * Bugfix: the *|el wildcard namespace selector now also matches elements with no namespace.\n    <https://github.com/jhy/jsoup/issues/1565>\n    \n  * Bugfix: corrected a potential case of the parser input stream not being closed immediately on a read exception.\n\n  * Bugfix: when making a HTTP POST, if the request write fails, make sure the connection is immediately cleaned up.\n\n  * Bugfix: in the XML parser, XML processing instructions without attributes would be serialized as if they did.\n    <https://github.com/jhy/jsoup/issues/770>\n\n  * Bugfix: updated the HtmlTreeParser resetInsertionMode to the current spec for supported elements.\n    <https://github.com/jhy/jsoup/issues/1491>\n\n  * Bugfix: fixed an NPE when parsing fragment HTML into a standalone table element.\n    <https://github.com/jhy/jsoup/issues/1603>\n\n  * Bugfix: fixed an NPE when parsing fragment heading HTML into a standalone p element.\n    <https://github.com/jhy/jsoup/issues/1601>\n\n  * Bugfix: fixed an IOOB when parsing a formatting fragment into a standalone p element.\n    <https://github.com/jhy/jsoup/issues/1602>\n\n  * Bugfix: tag names must start with an ascii-alpha character.\n    <https://github.com/jhy/jsoup/issues/1006>\n\n  * Bugfix [Fuzz]: fixed a slow parse when a tag or an attribute name has thousands of null characters in it.\n    <https://github.com/jhy/jsoup/issues/1580>\n\n  * Bugfix [Fuzz]: the adoption agency algorithm can have an incorrect bookmark position\n    <https://github.com/jhy/jsoup/issues/1576>\n\n  * Bugfix [Fuzz]: malformed HTML could result in null elements on stack\n    <https://github.com/jhy/jsoup/issues/1579>\n\n  * Bugfix [Fuzz]: malformed deeply nested table elements could create a stack overflow.\n    <https://github.com/jhy/jsoup/issues/1577>\n\n  * Bugfix [Fuzz]: Speed optimized malformed HTML creating elements with thousands of elements - limit the attribute\n    count per element when parsing to 512 (in real-world HTML, P99 is ~ 8).\n    <https://github.com/jhy/jsoup/issues/1578>\n\n  * Bugfix [Fuzz]: Speed improvement for the foster formatting elements algo, by limiting how far up a crafted stack\n    to scan.\n    <https://github.com/jhy/jsoup/issues/1593>\n\n  * Bugfix [Fuzz]: Speed improvement when parsing crafted HTML when transferring form attributes.\n    <https://github.com/jhy/jsoup/issues/1595>\n\n  * Bugfix [Fuzz]: Speed improvement when the stack was thousands of items deep, and non-matching close tags sent.\n    <https://github.com/jhy/jsoup/issues/1596>\n\n  * Bugfix [Fuzz]: Speed improvement when an attribute name is 600K of quote characters or otherwise needs accumulation\n    vs being able to read in one hit.\n    <https://github.com/jhy/jsoup/issues/1605>\n\n  * Bugfix [Fuzz]: Speed improvement when closing missing empty tags (in XML comment processed as HTML) when thousands\n    deep in stack.\n    <https://github.com/jhy/jsoup/issues/1606>\n\n  * Bugfix [Fuzz]: Fix a potential stack-overflow in the parser given crafted HTML, when the parser looped in the\n    InSelectInTable state.\n\n  * Bugfix [Fuzz]: Fix an IOOB when the HTML root was cleared from the stack and then attributes were merged onto it.\n    <https://github.com/jhy/jsoup/issues/1611>\n\n  * Bugfix [Fuzz]: Improved the speed of parsing when crafted HTML contains hundreds of active formatting elements\n    that were copied for all new elements (similar to an amplification attack). The number of considered active\n    formatting elements that will be cloned when mis-nested is now capped to 12.\n    <https://github.com/jhy/jsoup/issues/1613>\n\n*** Release 1.14.1 [2021-Jul-10]\n  * Change: updated the minimum supported Java version from Java 7 to Java 8.\n\n  * Change: updated the minimum Android API level from 8 to 10.\n\n  * Change: although Node#childNodes() returns an UnmodifiableList as a view into its children, it was still\n    directly backed by the internal child list. That made some uses, such as looping and moving those children to\n    another element, throw a ConcurrentModificationException. Now this method returns its own list so that they are\n    separated and changes to the parent's contents will not impact the children view. This aligns with similar methods\n    such as Element#children(). If you have code that iterates this list and makes parenting changes to its contents,\n    you may need to make a code update.\n    <https://github.com/jhy/jsoup/issues/1431>\n\n  * Change: the org.jsoup.Connection interface has been modified to introduce new methods for sessions and the cookie\n    store. If you have a custom implementation of this interface, you will need to add implementations of these methods.\n\n  * Improvement: added HTTP request session management support with Jsoup.newSession(). This extends the Connection\n    implementation to support (optional) sessions, which allow request defaults (timeout, proxy, etc) to be set once and\n    then applied to all requests within that session.\n\n    Cookies are re-implemented to correctly support path and domain filtering when used within a session. A default\n    in-memory cookie store is used for the session, or a custom implementation (perhaps disk-persistent, or pre-set)\n    can be used instead.\n\n    Forms submitted using the FormElement#submit() use the same session that was used to fetch the document and so pass\n    cookies and other defaults appropriately.\n\n    The session is multi-thread safe and can execute multiple requests concurrently. If the user accidentally tries to\n    execute the same request object across multiple threads (vs calling Connection#newRequest()),\n    that is detected cleanly and a clear exception is thrown (vs weird blowups in input stream reading, or forcing\n    everything through a synchronized bottleneck.\n    <https://github.com/jhy/jsoup/pull/1476>\n\n  * Improvement: renamed the Whitelist class to Safelist, with the goal of more inclusive language. A shim is provided\n    for backwards compatibility (source and binary). This shim is marked as deprecated and will be removed in the\n    jsoup 1.15.1 release.\n    <https://github.com/jhy/jsoup/pull/1464>\n\n  * Improvement: added support for Internationalized Domain Names (IDNs) in Jsoup.Connect.\n    <https://github.com/jhy/jsoup/issues/1300>\n\n  * Improvement: added support for loading and parsing gzipped HTML files in Jsoup.parse(File in, charset, baseUri).\n\n  * Improvement: reduced thread contention in HttpConnection and Document.\n    <https://github.com/jhy/jsoup/pull/1455>\n\n  * Improvement: better parsing performance when under high thread concurrency\n    <https://github.com/jhy/jsoup/pull/1402>\n\n  * Improvement: added Element#id(String) ID attribute setter.\n\n  * Improvement: in Document, #body() and #head() accessors will now automatically create those elements, if they were\n    missing (e.g. if the Document was not parsed from HTML). Additionally, the #body() method returns the frameset\n    element (instead of null) for frameset documents.\n\n  * Improvement: when cleaning a document, the output settings of the original document are cloned into the cleaned\n    document.\n    <https://github.com/jhy/jsoup/issues/1417>\n\n  * Improvement: when parsing XML, disable pretty-printing by default.\n    <https://github.com/jhy/jsoup/issues/1168>\n\n  * Improvement: much better performance in Node#clone() for large and deeply nested documents. Complexity was O(n^2) or\n    worse, now O(n).\n\n  * Improvement: during traversal using the NodeTraversor, nodes may now be replaced with Node#replaceWith(Node).\n    <https://github.com/jhy/jsoup/issues/1289>\n\n  * Improvement: added Element#insertChildren and Element#prependChildren, as convenience methods in addition to\n    Element#insertChildren(index, children), for bulk moving nodes.\n\n  * Improvement: clean up relative URLs with too many .. segments better.\n    <https://github.com/jhy/jsoup/pull/1482>\n\n  * Build Improvement: integrated jsoup into the OSS Fuzz project, which semi-randomly generates millions of different\n    HTML and XML input files, searching for areas to improve in the parser for increased robustness and throughput.\n    <https://github.com/jhy/jsoup/issues/1502>\n\n  * Build Improvement: integrated with GitHub's CodeQL static code analyzer.\n    <https://github.com/jhy/jsoup/pull/1494>\n\n  * Build Improvement: moved to GitHub Workflows for build verification.\n\n  * Build Improvement: updated Jetty (used for integration tests; not bundled) to 9.4.42.\n\n  * Build Improvement: added nullability annotations and initial settings.\n    <https://github.com/jhy/jsoup/pull/1467>\n\n  * Bugfix: corrected the adoption agency algorithm, to handle cases where e.g. a <a> tag incorrectly nests further <a>\n    tags.\n    <https://github.com/jhy/jsoup/pull/1517> <https://github.com/jhy/jsoup/issues/845>\n\n  * Bugfix: when parsing HTML, could throw NPEs on some tags (isindex or table>input).\n    <https://github.com/jhy/jsoup/issues/1404>\n\n  * Bugfix: in HttpConnection.Request, headers beginning with \"sec-\" (e.g. Sec-Fetch-Mode) were silently discarded by\n    the underlying Java HttpURLConnection. These are now settable correctly.\n    <https://github.com/jhy/jsoup/issues/1461>\n\n  * Bugfix: when adding child Nodes to a Node, could incorrectly reparent all nodes if the first parent had the same\n    length of children as the incoming node list.\n\n  * Bugfix: when wrapping an orphaned element, would throw an NPE.\n\n  * Bugfix: when wrapping an element with HTML that included multiple sibling elements, those siblings were incorrectly\n    added as children of the wrapper instead of siblings.\n\n  * Bugfix: when setting the content of a script or style tag via the Element#html(String) method, the content is now\n    treated as a DataNode, not a TextNode. This means that characters like '<' will no longer be incorrectly escaped.\n    As a related ergonomic improvement, the same behavior applies for Element#text(String) (i.e. the content will be\n    treated as a DataNode, despite calling the text() method.\n    <https://github.com/jhy/jsoup/issues/1419>\n\n  * Bugfix: when wrapping HTML around an existing element with Element#wrap(String), will now take the content as\n    provided and ignore normal HTML tree-building rules. This allows for e.g. a div tag to be placed inside of p tags.\n\n  * Bugfix: the Elements#forms() method should return the selected immediate elements that are Forms, not children.\n    <https://github.com/jhy/jsoup/pull/1403>\n\n  * Bugfix: when creating a selector for an element with Element#cssSelector, if the element used a non-unique ID\n    attribute, the returned selector may not match the desired element.\n    <https://github.com/jhy/jsoup/issues/1085>\n\n  * Bugfix: corrected the toString() methods of the Evaluator classes.\n\n  * Bugfix: when converting a jsoup document to a W3C document (in W3CDom#convert), if a tag had XML illegal characters,\n    a DOMException would be thrown. Now instead, that tag is represented as a text node.\n    <https://github.com/jhy/jsoup/issues/1093>\n\n  * Bugfix: if a HTML file ended with an open noscript tag, an \"EOF\" string would appear in the HTML output.\n\n  * Bugfix: when parsing a document as XML, automatically set the output syntax to XML, and ensure that \"<\" characters\n    in attributes are escaped as \"&lt\" (which is not required in HTML as the quoted attribute contents are safe, but is\n    required in XML).\n    <https://github.com/jhy/jsoup/issues/1420>\n\n  * Bugfix: [Fuzz] when parsing an attribute key containing \"abs:abs\", a validation error would be incorrectly\n    thrown.\n    <https://github.com/jhy/jsoup/issues/1541>\n\n  * Bugfix: [Fuzz] could NPE while parsing in resetInsertionMode().\n    <https://github.com/jhy/jsoup/issues/1538>\n\n  * Bugfix: [Fuzz] when parsing XML, could Stack Overflow when parsing XML declarations.\n    <https://github.com/jhy/jsoup/issues/1539>\n\n  * Bugfix: [Fuzz] fixed a potential Stack Overflow when parsing mis-nested tfoot tags, and updated the tree parser for\n    this situation to match the updated HTML5 spec.\n    <https://github.com/jhy/jsoup/issues/1543>\n\n  * Bugfix: [Fuzz] fixed a potentially slow HTML parse when tags are nested extremely deep (e.g. 88K depth), by limiting\n    the formatting tag search depth to 256. In practice, it's generally between 4 - 8.\n    <https://github.com/jhy/jsoup/issues/1544>\n\n  * Bugfix: [Fuzz] when parsing an unterminated RCDATA token (e.g. a <title> tag), could throw an IO Exception \"No\n    buffer left to unconsume\" when trying to rewind the buffer.\n    <https://github.com/jhy/jsoup/issues/1542>\n\n*** Release 1.13.1 [2020-Feb-29]\n  * Improvement: added Element#closest(selector), which walks up the tree to find the nearest element matching the\n    selector.\n    <https://github.com/jhy/jsoup/issues/1326>\n\n  * Improvement: memory optimizations, reducing the retained size of a Document by ~ 39%, and allocations by ~ 9%:\n      1. Attributes holder in Elements is only created if the element has attributes\n      2. Only track the baseUri in an element when it is set via DOM to a new value for a given tree\n      3. After parsing, do not retain the input character reader (and associated buffers) in the Document#parser\n\n  * Improvement: substantial parse speed improvements vs 1.12.x (bringing back to par with previous releases).\n    <https://github.com/jhy/jsoup/issues/1327>\n\n  * Improvement: when pretty-printing, comments in inline tags are not pushed to a newline\n\n  * Improvement: added Attributes#hasDeclaredValueForKey(key) and Attribute#hasDeclaredValueForKeyIgnoreCase(), to check\n    if an attribute is set but has no value. Useful in place of the deprecated and removed BooleanAttribute class and\n    instanceof test.\n\n  * Improvement: removed old methods and classes that were marked deprecated in previous releases.\n\n  * Improvement: added Element#select(Evaluator) and Element#selectFirst(Evaluator), to allow re-use of a parsed CSS\n    selector if using the same evaluator many times.\n    <https://github.com/jhy/jsoup/issues/1319>\n\n  * Improvement: added Elements#forms(), Elements#textNodes(), Elements#dataNodes(), and Elements#comments(), as a\n    convenient way to get access to these node types directly from an element selection.\n\n  * Improvement: preserve whitespace before html and head tag, if pretty-printing is off.\n\n  * Bugfix: in a <select> tag, a second <optgroup> would not automatically close an earlier open <optgroup>\n    <https://github.com/jhy/jsoup/issues/1313>\n\n  * Bugfix: in CharacterReader when parsing an input stream, could throw a Mark Invalid exception if the reader was\n    marked, a bufferUp occurred, and then the reader was rewound.\n    <https://github.com/jhy/jsoup/issues/1324>\n\n  * Bugfix: empty tags and form tags did not have their attributes normalized (lower-cased by default)\n    <https://github.com/jhy/jsoup/pull/1323>\n\n  * Bugfix: when preserve case was set to on, the HTML pretty-print formatter didn't indent capitalized tags correctly.\n\n  * Bugfix: ensure that script and style contents are parsed into DataNodes, not TextNodes, when in case-sensitive\n    parse mode.\n\n**** Release 1.12.2 [2020-Feb-08]\n  * Improvement: the :has() selector now supports relative selectors. For example, the query\n    \"div:has(> a)\" will select all \"div\" elements that have at least one direct child \"a\" element.\n    <https://github.com/jhy/jsoup/pull/1214>\n\n  * Improvement: added Element chaining methods for various overridden methods on Node.\n    <https://github.com/jhy/jsoup/issues/1193>\n\n  * Improvement: ensure HTTP keepalives work when fetching content via body() and bodyAsBytes().\n    <https://github.com/jhy/jsoup/issues/1232>\n\n  * Improvement: set the default max body size in Jsoup.Connection to 2MB (up from 1MB) so fewer people get trimmed\n    content if they have not set it, but still in sensible bounds. Also updated the default user-agent to improve\n    default compatibility.\n\n  * Improvement: dramatic speed improvement when bulk inserting child nodes into an element (wrapping contents).\n    <https://github.com/jhy/jsoup/issues/1281>\n\n  * Improvement: added Element#childrenSize() as a convenience to get the size of an element's element children.\n    <https://github.com/jhy/jsoup/pull/1291>\n\n  * Improvement: in W3CDom.asString, allow the output mode to be specified as HTML or as XML. It will default to\n    checking the content, and automatically selecting.\n\n  * Improvement: added a Document#documentType() method, to get a doc's doctype.\n\n  * Improvement: To DocumentType, added #name(), #publicID(), and #systemId() methods to fetch those fields.\n\n  * Improvement: in W3CDom conversions from jsoup documents, retain the DocumentType, and be able to serialize it.\n    <https://github.com/jhy/jsoup/issues/1183>\n\n  * Bugfix: on pages fetch by Jsoup.Connection, a \"Mark Invalid\" exception might be incorrectly thrown, or the page may\n    miss some data. This occurred on larger pages when the file transfer was chunked, and an invalid HTML entity\n    happened to cross a chunk boundary.\n    <https://github.com/jhy/jsoup/issues/1218>\n\n  * Bugfix: if duplicate attributes in an element exist, retain the first vs the last attribute with the same name. Case\n    aware (HTML case-insensitive names, XML are case-sensitive).\n    <https://github.com/jhy/jsoup/issues/1219>\n\n  * Bugfix: don't submit input type=button form elements.\n    <https://github.com/jhy/jsoup/issues/1231>\n\n  * Bugfix: handle error position reporting correctly and don't blow up in some edge cases.\n    <https://github.com/jhy/jsoup/issues/1251>\n    <https://github.com/jhy/jsoup/pull/1253>\n\n  * Bugfix: handle the ^= (starts with) selector correctly when the prefix starts with a space.\n    <https://github.com/jhy/jsoup/pull/1280>\n\n  * Bugfix: don't strip out zero-width-joiners (or zero-width-non-joiners) when normalizing text. That breaks combined\n    emoji (and other text semantics). 🤦‍♂️\n    <https://github.com/jhy/jsoup/issues/1269>\n\n  * Bugfix: Evaluator.TagEndsWith (namespaced elements) and Tag disagreed in case-sensitivity. Now correctly matches\n    case-insensitively.\n    <https://github.com/jhy/jsoup/issues/1257>\n\n  * Bugfix: Don't throw an exception if a selector ends in a space, just trim it.\n    <https://github.com/jhy/jsoup/issues/1274>\n    \n  * Bugfix: HTML parser adds redundant text when parsing self-closing textarea.\n    <https://github.com/jhy/jsoup/issues/1220>\n\n  * Bugfix: Don't add spurious whitespace or newlines to HTML or text for inline tags.\n    <https://github.com/jhy/jsoup/issues/1305>\n    <https://github.com/jhy/jsoup/issues/731>\n\n  * Bugfix: TextNode.outerHtml() wouldn't normalize correctly without a parent.\n    <https://github.com/jhy/jsoup/issues/1309>\n\n  * Bugfix: Removed binary input detection as it was causing too many false positives.\n    <https://github.com/jhy/jsoup/issues/1250>\n\n  * Bugfix: when cloning a TextNode, if .attributes() was hit before the clone() method, the text value would only be a\n    shallow clone.\n    <https://github.com/jhy/jsoup/issues/1176>\n\n  * Various code hygiene updates.\n\n**** Release 1.12.1 [2019-May-12]\n  * Change: removed deprecated method to disable TLS cert checking Connection.validateTLSCertificates().\n\n  * Change: some internal methods have been rearranged; if you extended any of the Jsoup internals you may need to make\n    updates.\n\n  * Improvement: documents now remember their parser, so when later manipulating them, the correct HTML or XML tree\n    builder is reused, as are the parser settings like case preservation.\n    <https://github.com/jhy/jsoup/issues/769>\n\n  * Improvement: Jsoup now detects the character set of the input if specified in an XML Declaration, when using the\n    HTML parser. Previously that only happened when the XML parser was specified.\n    <https://github.com/jhy/jsoup/issues/1009>\n\n  * Improvement: if the document's input character set does not support encoding, flip it to one that does.\n    <https://github.com/jhy/jsoup/issues/1007>\n\n  * Improvement: if a start tag is missing a > and a new tag is seen with a <, treat that as a new tag. (This differs\n    from the HTML5 spec, which would make at attribute with a name beginning with <, but in practice this impacts too\n    many pages.\n    <https://github.com/jhy/jsoup/issues/797>\n\n  * Improvement: performance tweaks when parsing start tags, data, tables.\n\n  * Improvement: added Element.nextElementSiblings() and Element.previousElementSiblings()\n    <https://github.com/jhy/jsoup/pull/1054>\n\n  * Improvement: treat center tags as block tags.\n    <https://github.com/jhy/jsoup/pull/1113>\n\n  * Improvement: allow forms to be submitted with Content-Type=multipart/form-data without requiring a file upload;\n    automatically set the mime boundary.\n    <https://github.com/jhy/jsoup/pull/1058>\n\n  * Improvement: Jsoup will now detect if an input file or URL is binary, and will refuse to attempt to parse it, with\n    an IO exception. This prevents runaway processing time and wasted effort creating meaningless parsed DOM trees.\n    <https://github.com/jhy/jsoup/issues/1192>\n\n  * Bugfix: when using the tag case preserving parsing settings, certain HTML tree building rules where not followed\n    for upper case tags.\n    <https://github.com/jhy/jsoup/issues/1149>\n\n  * Bugfix: when converting a Jsoup document to a W3C DOM, if an element is namespaced but not in a defined namespace,\n    set it to the global namespace.\n    <https://github.com/jhy/jsoup/issues/848>\n\n  * Bugfix: attributes created with the Attribute constructor with just spaces for names would incorrectly pass\n    validation.\n    <https://github.com/jhy/jsoup/issues/1159>\n\n  * Bugfix: some pseudo XML Declarations were incorrectly handled when using the XML Parser, leading to an IOOB\n    exception when parsing.\n    <https://github.com/jhy/jsoup/issues/1139>\n\n  * Bugfix: when parsing URL parameter names in an attribute that is not correctly HTML encoded, and near the end of the\n    current buffer, those parameters may be incorrectly dropped. (Improved CharacterReader mark/reset support.)\n    <https://github.com/jhy/jsoup/pull/1154>\n\n  * Bugfix: boolean attribute values would be returned as null, vs an empty string, when accessed via the\n    Attribute#getValue() method.\n    <https://github.com/jhy/jsoup/issues/1065>\n\n  * Bugfix: orphan Attribute objects (i.e. created outside of a parse or an Element) would throw an NPE on\n    Attribute#setValue(val)\n    <https://github.com/jhy/jsoup/issues/1107>\n\n  * Bugfix: Element.shallowClone() was not making a clone of its attributes.\n    <https://github.com/jhy/jsoup/issues/1201>\n\n  * Bugfix: fixed an ArrayIndexOutOfBoundsException in HttpConnection.looksLikeUtf8 when testing small strings in\n    specific ranges.\n    <https://github.com/jhy/jsoup/issues/1172>\n\n  * Updated jetty-server (which is used for integration tests) to latest 9.2 series (9.2.28).\n\n*** Release 1.11.3 [2018-Apr-15]\n  * Improvement: CDATA sections are now treated as whitespace preserving (regardless of the containing element), and are\n    round-tripped into output HTML.\n    <https://github.com/jhy/jsoup/issues/406>\n    <https://github.com/jhy/jsoup/issues/965>\n\n  * Improvement: added support for Deflate encoding.\n    <https://github.com/jhy/jsoup/pull/982>\n\n  * Improvement: when parsing <pre> tags, skip the first newline if present.\n    <https://github.com/jhy/jsoup/issues/825>\n\n  * Improvement: support nested quotes for attribute selection queries.\n    <https://github.com/jhy/jsoup/pull/988>\n\n  * Improvement: character references from Windows-1252 that are not valid Unicode are mapped to the appropriate\n    Unicode replacement.\n    <https://github.com/jhy/jsoup/pull/1046>\n\n  * Improvement: accept a custom SSL socket factory in Jsoup.Connection.\n    <https://github.com/jhy/jsoup/pull/1038>\n\n  * Bugfix: \"Mark has been invalidated\" exception was thrown when parsing some URLs on Android <= 6.\n    <https://github.com/jhy/jsoup/issues/990>\n\n  * Bugfix: The Element.text() for <div>One</div>Two was \"OneTwo\", not \"One Two\".\n    <https://github.com/jhy/jsoup/issues/812>\n\n  * Bugfix: boolean attributes with empty string values were not collapsing in HTML output.\n    <https://github.com/jhy/jsoup/issues/985>\n\n  * Bugfix: when using the XML Parser set to lowercase normalize tags, uppercase closing tags were not correctly\n    handled.\n    <https://github.com/jhy/jsoup/issues/998>\n\n  * Bugfix: when parsing from a URL, an end tag could be read incorrectly if it started on a buffer boundary.\n    <https://github.com/jhy/jsoup/issues/995>\n\n  * Bugfix: when parsing from a URL, if the remote server failed to complete its write (i.e. it writes less than the\n    Content Length header promised on a gzipped stream), the parse method would incorrectly throw an unchecked\n    exception. It now throws the declared IOException.\n    <https://github.com/jhy/jsoup/issues/980>\n\n  * Bugfix: leaf nodes (such as text nodes) where throwing an unsupported operation exception on childNodes(), instead\n    of just returning an empty list.\n    <https://github.com/jhy/jsoup/issues/1032>\n\n  * Bugfix: documents with a leading UTF-8 BOM did not have that BOM consumed, so it acted as a zero width no-break\n    space, which could impact the parse tree.\n    <https://github.com/jhy/jsoup/issues/1003>\n\n  * Bugfix: when parsing an invalid XML declaration, the parse would fail.\n    <https://github.com/jhy/jsoup/issues/1015>\n\n*** Release 1.11.2 [2017-Nov-19]\n  * Improvement: added a new pseudo selector :matchText, which allows text nodes to match as if they were elements.\n    This enables finding text that is only marked by a \"br\" tag, for example.\n    <https://github.com/jhy/jsoup/issues/550>\n\n  * Change: marked Connection.validateTLSCertificates() as deprecated.\n\n  * Improvement: normalize invisible characters (like soft-hyphens) in Element.text().\n    <https://github.com/jhy/jsoup/issues/978>\n\n  * Improvement: added Element.wholeText(), to easily get the un-normalized text value of an element and its children.\n    <https://github.com/jhy/jsoup/pull/564>\n    \n  * Bugfix: in a deep DOM stack, a StackOverFlow exception could occur when generating implied end tags.\n    <https://github.com/jhy/jsoup/issues/966>\n\n  * Bugfix: when parsing attribute values that happened to cross a buffer boundary, a character was dropped.\n    <https://github.com/jhy/jsoup/issues/967>\n\n  * Bugfix: fixed an issue that prevented using infinite timeouts in Jsoup.Connection.\n    <https://github.com/jhy/jsoup/issues/968>\n\n  * Bugfix: whitespace preserving tags were not honoured when nested deeper than two levels deep.\n    <https://github.com/jhy/jsoup/issues/722>\n\n  * Bugfix: an unterminated comment token at the end of the HTML input would cause an out of bounds exception.\n    <https://github.com/jhy/jsoup/issues/972>\n\n  * Bugfix: an NPE in the Cleaner which would occur if an <a href> attribute value was missing.\n    <https://github.com/jhy/jsoup/issues/973>\n\n  * Bugfix: when serializing the same document in a multiple threads, on Android, with a character set that is not ascii\n    or UTF-8, an encoding exception could occur.\n    <https://github.com/jhy/jsoup/issues/970>\n\n  * Bugfix: removing a form value from the DOM would not remove it from FormData.\n    <https://github.com/jhy/jsoup/pull/969>\n\n  * Bugfix: in the W3CDom transformer, siblings were incorrectly inheriting namespaces defined on previous siblings.\n    <https://github.com/jhy/jsoup/issues/977>\n\n*** Release 1.11.1 [2017-Nov-06]\n  * Updated language level to Java 7 from Java 5. To maintain Android support (of minversion 8), try-with-resources are\n    not used.\n    <https://github.com/jhy/jsoup/issues/899>\n\n  * When loading content from a URL or a file, the content is now parsed as it streams in from the network or disk,\n    rather than being fully buffered before parsing. This substantially reduces memory consumption & large garbage\n    objects when loading large files. Note that this change means that a response, once parsed, may not be parsed\n    again from the same response object unless you call response.bufferUp() first, which will buffer the full response\n    into memory.\n    <https://github.com/jhy/jsoup/issues/904>\n\n  * Added Connection.Response.bodyStream(), a method to get the response body as an input stream. This is useful for\n    saving a large response straight to a file, without buffering fully into memory first.\n\n  * Performance improvements in text and HTML generation (through less GC).\n\n  * Reduced memory consumption of text, scripts, and comments in the DOM by 40%, by refactoring the node\n    hierarchy to not track childnodes or attributes by default for lead nodes. For the average document, that's about a\n    30% memory reduction.\n    <https://github.com/jhy/jsoup/issues/911>\n\n  * Reduced memory consumption of Elements by refactoring their Attributes to be a simple pair of arrays, vs a\n    LinkedHashSet.\n    <https://github.com/jhy/jsoup/issues/911>\n\n  * Added support for Element.selectFirst(query), to efficiently find the first matching element.\n\n  * Added Element.appendTo(parent) to simplify slinging elements about.\n    <https://github.com/jhy/jsoup/pull/662>\n\n  * Added support for multiple headers with the same name in Jsoup.Connect\n\n  * Added Element.shallowClone() and Node.shallowClone(), to allow cloning nodes without getting all their children.\n    <https://github.com/jhy/jsoup/issues/900>\n\n  * Updated Element.text() and the :contains(text) selector to consider &nbsp; character as spaces.\n\n  * Updated Jsoup.connect().timeout() to implement a total connect + combined read timeout. Previously it specified\n    connect and buffer read times only, so to implement a combined total timeout, you had to have another thread send\n    an interrupt.\n\n  * Improved performance of Node.addChildren (was quadratic)\n    <https://github.com/jhy/jsoup/pull/930>\n\n  * Added missing support for template tags in tables\n    <https://github.com/jhy/jsoup/pull/901>\n\n  * In Jsoup.connect file uploads, added the ability to set the uploaded files' mimetype.\n     <https://github.com/jhy/jsoup/issues/936>\n\n  * Improved Node traversal, including less object creation, and partial and filtering traversor support.\n    <https://github.com/jhy/jsoup/pull/849>\n\n  * Bugfix: if a document was re-decoded after character set detection, the HTML parser was not reset correctly,\n    which could lead to an incorrect DOM.\n    <https://github.com/jhy/jsoup/issues/877>\n\n  * Bugfix: attributes with the same name but different case would be incorrectly treated as different attributes.\n    <https://github.com/jhy/jsoup/pull/903>\n\n  * Bugfix: self-closing tags for known empty elements were incorrectly treated as errors.\n    <https://github.com/jhy/jsoup/issues/868>\n\n  * Bugfix: fixed an issue where a self-closing title, noframes, or style tag would cause the rest of the page to be\n    incorrectly parsed as data or text.\n    <https://github.com/jhy/jsoup/issues/906>\n\n  * Bugfix: fixed an issue with unknown mixed-case tags\n    <https://github.com/jhy/jsoup/pull/942>\n\n  * Bugfix: fixed an issue where the entity resources were left open after startup, causing a warning.\n    <https://github.com/jhy/jsoup/pull/928>\n\n  * Bugfix: fixed an issue where Element.getElementsByIndexLessThan(index) would incorrectly provide the root element\n    <https://github.com/jhy/jsoup/pull/918>\n\n  * Improved parse time for pages with exceptionally deeply nested tags.\n    <https://github.com/jhy/jsoup/issues/955>\n\n  * Improvement / workaround: modified the Entities implementation to load its data from a .class vs from a jar resource.\n    Faster, and safer on Android.\n    <https://github.com/jhy/jsoup/issues/959>\n\n*** Release 1.10.3 [2017-Jun-11]\n  * Added Elements.eachText() and Elements.eachAttr(name), which return a list of Element's text or attribute values,\n    respectively. This makes it simpler to for example get a list of each URL on a page:\n    List<String> urls = doc.select(\"a\").eachAttr(\"abs:href\"\");\n\n  * Improved selector validation for :contains(...) with unbalanced quotes.\n    <https://github.com/jhy/jsoup/issues/803>\n\n  * Improved the speed of index based CSS selectors and other methods that use elementSiblingIndex, by a factor of 34x.\n    <https://github.com/jhy/jsoup/pull/862>\n\n  * Added Node.clearAttributes(), to simplify removing of all attributes of a Node / Element.\n    <https://github.com/jhy/jsoup/issues/829>\n\n  * Bugfix: if an attribute name started or ended with a control character, the parse would fail with a validation\n    exception.\n    <https://github.com/jhy/jsoup/issues/793>\n\n  * Bugfix: Element.hasClass() and the \".classname\" selector would not find the class attribute case-insensitively.\n    <https://github.com/jhy/jsoup/issues/814>\n\n  * Bugfix: In Jsoup.Connection, if a redirect contained a query string with %xx escapes, they would be double escaped\n    before the redirect was followed, leading to fetching an incorrect location.\n\n  * Bugfix: In Jsoup.Connection, if a request body was set and the connection was redirected, the body would incorrectly\n    still be sent.\n    <https://github.com/jhy/jsoup/pull/881>\n\n  * Bugfix: In DataUtil when detecting the character set from meta data, and there are two Content-Types defined, use\n    the one that defines a character set.\n    <https://github.com/jhy/jsoup/pull/835>\n\n  * Bugfix: when parsing unknown tags in case-sensitive HTML mode, end tags would not close scope correctly.\n    <https://github.com/jhy/jsoup/issues/819>\n\n  * In Jsoup.Connection, ensure there is no Content-Type set when being redirected to a GET.\n    <https://github.com/jhy/jsoup/pull/895>\n\n  * Bugfix: in certain locales (Turkey specifically), lowercasing and case insensitivity could fail for specific items.\n    <https://github.com/jhy/jsoup/pull/820>\n\n  * Bugfix: after an element was cloned, changes to its child list where not notifying the element correctly.\n    <https://github.com/jhy/jsoup/issues/951>\n\n*** Release 1.10.2 [2017-Jan-02]\n * Improved startup time, particularly on Android, by reducing garbage generation and CPU execution time when loading\n   the HTML entity files. About 1.72x faster in this area.\n\n * Added Element.is(query) to check if an element matches this CSS query.\n\n * Added new methods to Elements: next(query), nextAll(query), prev(query), prevAll(query) to select next and previous\n   element siblings from a current selection, with optional selectors.\n\n * Added Node.root() to get the topmost ancestor of a Node.\n\n * Added the new selector :containsData(), to find elements that hold data, like script and style tags.\n\n * Changed Jsoup.isValid(bodyHtml) to validate that the input contains only body HTML that is safe according to the\n   safelist, and does not include HTML errors. And in the Jsoup.Cleaner.isValid(Document) method, make sure the doc\n   only includes body HTML.\n   <https://github.com/jhy/jsoup/issues/245>\n   <https://github.com/jhy/jsoup/issues/632>\n\n * In Safelists, validate that a removed protocol exists before removing said protocol.\n\n * Allow the Jsoup.Connect thread to be interrupted when reading the input stream; helps when reading from a long stream\n   of data that doesn't read timeout.\n   <https://github.com/jhy/jsoup/pull/712>\n\n * Jsoup.Connect now uses a desktop user agent by default. Many developers were getting caught by not specifying the\n   user agent, and sending the default 'Java'. That causes many servers to return different content than what they would\n   to a desktop browser, and what the developer was expecting.\n\n * Increased the default connect/read timeout in Jsoup.Connect to 30 seconds.\n\n * Jsoup.Connect now detects if a header value is actually in UTF-8 vs the HTTP spec of ISO-8859, and converts\n   the header value appropriately. This improves compatibility with servers that are configured incorrectly.\n\n * Bugfix: in Jsoup.Connect, URLs containing non-URL-safe characters were not encoded to URL safe correctly.\n   <https://github.com/jhy/jsoup/issues/706>\n\n * Bugfix: a \"SYSTEM\" flag in doctype tags would be incorrectly removed.\n   <https://github.com/jhy/jsoup/issues/408>\n\n * Bugfix: removing attributes from an Element with removeAttr() would cause a ConcurrentModificationException.\n\n * Bugfix: the contents of Comment nodes were not returned by Element.data()\n\n * Bugfix: if source checked out on Windows with git autocrlf=true, Entities.load would fail because of the \\r char.\n\n*** Release 1.10.1 [2016-Oct-23]\n * New feature: added the option to preserve case for tags and/or attributes, with ParseSettings. By default, the HTML\n   parser will continue to normalize tag names and attribute names to lower case, and the XML parser will now preserve\n   case, according to the relevant spec. The CSS selectors for tags and attributes remain case insensitive, per the CSS\n   spec.\n\n * Improved support for extended HTML entities, including supplemental characters and multiple character references.\n   Also reduced memory consumption of the entity tables.\n   <https://github.com/jhy/jsoup/issues/602>\n   <https://github.com/jhy/jsoup/issues/603>\n\n * Added support for *|E wildcard namespace selectors.\n   <https://github.com/jhy/jsoup/pull/724>\n\n * Added support for setting multiple connection headers at once with Connection.headers(Map)\n   <https://github.com/jhy/jsoup/pull/725>\n\n * Added support for setting/overriding the response character set in Connection.Response, for cases where the charset\n   is not defined by the server, or is defined incorrectly.\n   <https://github.com/jhy/jsoup/issues/743>\n\n * Improved performance of class selectors by reducing memory allocation and garbage collection.\n   <https://github.com/jhy/jsoup/pull/753>\n\n * Improved performance of HTML output by reducing the creation of temporary attribute list iterators.\n   <https://github.com/jhy/jsoup/pull/755>\n\n * Fixed an issue when converting to the W3CDom XML, where valid (but ugly) HTML attribute names containing characters\n   like '\"' could not be converted into valid XML attribute names. These attribute names are now normalized if possible,\n   or not added to the XML DOM.\n   <https://github.com/jhy/jsoup/issues/721>\n\n * Fixed an OOB exception when loading an empty-body URL and parsing with the XML parser.\n   <https://github.com/jhy/jsoup/issues/727>\n\n * Fixed an issue where attribute names starting with a slash would be parsed incorrectly.\n   <https://github.com/jhy/jsoup/pull/748>\n\n * Don't reuse charset encoders from OutputSettings, to make threadsafe.\n   <https://github.com/jhy/jsoup/issues/740>\n\n * Fixed an issue in connections with a requestBody where a custom content-type header could be ignored.\n   <https://github.com/jhy/jsoup/issues/756>\n\n*** Release 1.9.2 [2016-May-17]\n * Fixed an issue where tag names that contained non-ascii characters but started with an ascii character\n   would cause the parser to get stuck in an infinite loop.\n   <https://github.com/jhy/jsoup/issues/704>\n\n * In XML documents, detect the charset from the XML prolog - <?xml encoding=\"UTF-8\"?>\n   <https://github.com/jhy/jsoup/issues/701>\n\n * Fixed an issue where created XML documents would have an incorrect prolog.\n   <https://github.com/jhy/jsoup/issues/652>\n\n * Fixed an issue where you could not use an attribute selector to find values containing unbalanced braces or\n   parentheses.\n   <https://github.com/jhy/jsoup/issues/611>\n\n * Fixed an issue where namespaced tags (like <fb:comment>) would cause Element.cssSelector() to fail.\n   <https://github.com/jhy/jsoup/pull/677>\n\n*** Release 1.9.1 [2016-Apr-16]\n * Added support for HTTP and SOCKS request proxies, specifiable per connection.\n   <https://github.com/jhy/jsoup/pull/570>\n\n * Added support for sending plain HTTP request bodies in POST and PUT requests, with Connection.requestBody(String).\n\n * Added support in Jsoup.Connect for HEAD, OPTIONS, TRACE.\n   <https://github.com/jhy/jsoup/issues/613>\n\n * Added support for HTTP 307 Temporary Redirect (replays posts, if applicable).\n   <https://github.com/jhy/jsoup/pull/666>\n\n * Performance improvements when parsing HTML, particularly for Android Dalvik.\n\n * Added support for writing HTML into Appendable objects (like OutputStreamWriter), to enable stream serialization.\n   <https://github.com/jhy/jsoup/pull/470/>\n\n * Added support for XML namespaces when converting jsoup documents to W3C documents.\n   <https://github.com/jhy/jsoup/pull/672>\n\n * Added support for UTF-16 and UTF-32 character set detection from byte-order-marks (BOM).\n   <https://github.com/jhy/jsoup/issues/695>\n\n * Added support for tags with non-ascii (unicode) letters.\n   <https://github.com/jhy/jsoup/issues/667>\n\n * Added Connection.data(key) to retrieve a data KeyVal by its key. Useful to update form data before submission.\n\n * Fixed an issue in the Parent selector where it would not match against the root element it was applied to.\n   <https://github.com/jhy/jsoup/pull/619>\n\n * Fix an issue where elements.select(query) would not return every matching element if they had the same content.\n   <https://github.com/jhy/jsoup/issues/614>\n\n * Added not-null validators to Element.appendText() and Element.prependText()\n   <https://github.com/jhy/jsoup/issues/690>\n\n * Fixed an issue when moving nodes using Element.insert(index, children) where the sibling index would be set\n   incorrectly, leading to the original loads being lost.\n   <https://github.com/jhy/jsoup/issues/689>\n\n * Reverted Node.equals() and Node.hashCode() back to identity (object) comparisons, as deep content inspection\n   had negative performance impacts and hashkey stability problems. Functionality replaced with Node.hasSameContent().\n   <https://github.com/jhy/jsoup/issues/688>\n\n * In Jsoup.Connect, if the same header key is seen multiple times, combine their values with a comma per the HTTP RFC,\n   instead of keeping just one value. Also fixes an issue where header values could be out of order.\n   <https://github.com/jhy/jsoup/issues/618>\n\n*** Release 1.8.3 [2015-Aug-02]\n * Added support for custom boolean attributes.\n   <https://github.com/jhy/jsoup/pull/555>\n\n * When fetching XML URLs, automatically switch to the XML parser instead of the HTML parser.\n   <https://github.com/jhy/jsoup/pull/574>\n\n * Performance improvement on parsing larger HTML pages. On Android KitKat, around 1.7x times faster. On Android\n   Lollipop, ~ 1.3x faster. Improvements largely from re-ordering the HtmlTreeBuilder methods based on analysis of\n   various websites; also from further memory reduction for nodes with no children, and other tweaks.\n   \n * Fixed an issue in Element.getElementSiblingIndex (and related methods) where sibling elements with the same content\n   would incorrectly have the same sibling index.\n   <https://github.com/jhy/jsoup/issues/554>\n\n * Fixed an issue where unexpected elements in a badly nested table could be moved to the wrong location in the\n   document.\n   <https://github.com/jhy/jsoup/issues/552>\n\n * Fixed an issue where a table nested within a TH cell would parse to an incorrect tree.\n   <https://github.com/jhy/jsoup/issues/575>\n\n * When serializing a document using the XHTML encoding entities, if the character set did not support &nbsp; chars\n   (such as Shift_JIS), the character would be skipped. For visibility, will now always output &xa0; when using XHTML\n   encoding entities (as &nbsp; is not defined), regardless of the output character set.\n   <https://github.com/jhy/jsoup/issues/523>\n\n * Fixed an issue when resolving URLs, if the absolute URL had no path, the relative URL was not normalized correctly.\n   Also fixed an issue where connections that were redirected to a relative URL did not have the same normalization\n   rules as a URL read from Nodes.absUrl(String).\n   <https://github.com/jhy/jsoup/issues/585>\n\n * When serialising XML, ensure that '<' characters in attributes are escaped, per spec. Not required in HTML.\n   <https://github.com/jhy/jsoup/issues/528>\n\n*** Release 1.8.2 [2015-Apr-13]\n * Performance improvements for parsing HTML on Android, of 1.5x to 1.9x, with larger parses getting a bigger\n   speed increase. For non-Android JREs, around 1.1x to 1.2x.\n\n * Dramatic performance improvement in HTML serialization on Android (KitKat and later), of 115x. Improvement by working\n   around a character set encoding speed regression in Android.\n   <https://github.com/jhy/jsoup/issues/383>\n\n * Performance improvement for the class name selector on Android (.class) of 2.5x to 14x. Around 1.2x\n   on non-Android JREs.\n\n * File upload support. Added the ability to specify input streams for POST data, which will upload content in\n   MIME multipart/form-data encoding.\n\n * Add a meta-charset element to documents when setting the character set, so that the document's charset is\n   unambiguous.\n   <https://github.com/jhy/jsoup/pull/486>\n\n * Added ability to disable TLS (SSL) certificate validation. Helpful if you're hitting a host with a bad cert,\n   or your JDK doesn't support SNI.\n   <https://github.com/jhy/jsoup/pull/343>\n\n * Added ability to further tweak the canned Cleaner Safelists by removing existing settings.\n   <https://github.com/jhy/jsoup/pull/449>\n\n * Added option in Cleaner Safelist to allow linking to in-page anchors (#)\n   <https://github.com/jhy/jsoup/pull/441>\n\n * Use a lowercase doctype tag for HTML5 documents.\n\n * Add support for 201 Created with redirect, and other status codes. Treats any HTTP status code 2xx or 3xx as an OK\n   response, and follow redirects whenever there is a Location header.\n   <https://github.com/jhy/jsoup/issues/312>\n\n * Added support for HTTP method verbs PUT, DELETE, and PATCH.\n\n * Added support for overriding the default POST character of UTF-8\n   <https://github.com/jhy/jsoup/pull/491>\n\n * W3C DOM support: added ability to convert from a jsoup document to a W3C document, with the W3Dom helper class.\n\n * In the HtmlToPlainText example program, added the ability to filter using a CSS selector. Also clarified\n   the usage documentation.\n\n * Fixed validation of cookie names in HttpConnection cookie methods.\n   <https://github.com/jhy/jsoup/pull/377>\n\n * Fixed an issue where <option> tags would be missed when preparing a form for submission if missing a selected\n   attribute.\n\n * Fixed an issue where submitting a form would incorrectly include radio and checkbox values without the checked\n   attribute.\n\n * Fixed an issue where Element.classNames() would return a set containing an empty class; and may have extraneous\n   whitespace.\n   <https://github.com/jhy/jsoup/pull/469>\n\n * Fixed an issue where attributes selected by value were not correctly space normalized.\n   <https://github.com/jhy/jsoup/pull/526>\n\n * In head+noscript elements, treat content as character data, instead of jumping out of head parsing.\n   <https://github.com/jhy/jsoup/pull/540>\n\n * Fixed performance issue when parsing HTML with elements with many children that need re-parenting.\n   <https://github.com/jhy/jsoup/pull/506>\n\n * Fixed an issue where a server returning an unsupported character set response would cause a runtime\n   UnsupportedCharsetException, instead of falling back to the default UTF-8 charset.\n   <https://github.com/jhy/jsoup/pull/509>\n\n * Fixed an issue where Jsoup.Connection would throw an IO Exception when reading a page with zero content-length.\n   <https://github.com/jhy/jsoup/issues/538>\n\n * Improved the equals() and hashcode() methods in Node, to consider all their child content, for DOM tree comparisons.\n   <https://github.com/jhy/jsoup/issues/537>\n\n * Improved performance in Selector when searching multiple roots.\n   <https://github.com/jhy/jsoup/issues/518>\n\n*** Release 1.8.1 [2014-Sep-27]\n * Introduced the ability to chose between HTML and XML output, and made HTML the default. This means img tags are\n   output as <img>, not <img />. XML is the default when using the XmlTreeBuilder. Control this with the\n   Document.OutputSettings.syntax() method.\n\n * Improved the performance of Element.text() by 3.2x\n\n * Improved the performance of Element.html() by 1.7x\n\n * Improved file read time by 2x, giving around a 10% speed improvement to file parses.\n   <https://github.com/jhy/jsoup/issues/248>\n\n * Tightened the scope of what characters are escaped in attributes and textnodes, to align with the spec. Also, when\n   using the extended escape entities map, only escape a character if the current output charset does not support it.\n   This produces smaller, more legible HTML, with greater control over the output (by setting charset and escape mode).\n\n * If pretty-print is disabled, don't trim outer whitespace in Element.html()\n   <https://github.com/jhy/jsoup/issues/368>\n\n * In the HTML Cleaner, allow span tags in the basic safelist, and span and div tags in the relaxed safelist.\n\n  * Added Element.cssSelector(), which returns a unique CSS selector/path for an element.\n    <https://github.com/jhy/jsoup/pull/459>\n\n * Fixed an issue where <svg><img/></svg> was parsed as <svg><image/></svg>\n   <https://github.com/jhy/jsoup/issues/364>\n\n * Fixed an issue where a UTF-8 BOM character was not detected if the HTTP response did not specify a charset, and\n   the HTML body did, leading to the head contents incorrectly being parsed into the body. Changed the behavior so that\n   when the UTF-8 BOM is detected, it will take precedence for determining the charset to decode with.\n   <https://github.com/jhy/jsoup/issues/348>\n\n * Relaxed doctype validation, allowing doctypes to not specify a name.\n   <https://github.com/jhy/jsoup/issues/460>\n\n * Fixed an issue in parsing a base URI when loading a URL containing a http-equiv element.\n   <https://github.com/jhy/jsoup/issues/440>\n\n * Fixed an issue for Java 1.5 / Android 2.2 compatibility, and verify it doesn't regress.\n   <https://github.com/jhy/jsoup/issues/375>\n   <https://github.com/jhy/jsoup/pull/403>\n\n * Fixed an issue that would throw an NPE when trying to set invalid HTML into a title element.\n   <https://github.com/jhy/jsoup/pull/410>\n\n * Added support for quoted attribute values in CSS Selectors\n   <https://github.com/jhy/jsoup/pull/400>\n\n * Fixed support for nth-of-type selectors with unknown tags.\n   <https://github.com/jhy/jsoup/pull/402>\n\n * Added support for 'application/*+xml' mimetypes.\n   <https://github.com/jhy/jsoup/pull/444>\n\n * Fixed support for allowing script tags in cleaner Safelists.\n   <https://github.com/jhy/jsoup/issues/299>\n   <https://github.com/jhy/jsoup/issues/388>\n\n * In FormElements, don't submit disabled inputs, and use 'on' as checkbox value default.\n   <https://github.com/jhy/jsoup/issues/489>\n\n*** Release 1.7.3 [2013-Nov-10]\n * Introduced FormElement, providing easy access to form controls and their data, and the ability to submit forms\n   with Jsoup.Connect.\n\n * Reduced GC impact during HTML parsing, with 17% fewer objects created, and 3% faster parses.\n\n * Reduced CSS selection time by 26% for common queries.\n\n * Improved HTTP character set detection.\n   <https://github.com/jhy/jsoup/pull/325> <https://github.com/jhy/jsoup/issues/321>\n\n * Added Document.location, to get the URL the document was retrieved from. Helpful if connection was redirected.\n   <https://github.com/jhy/jsoup/pull/306>\n\n * Fixed support for self-closing script tags.\n   <https://github.com/jhy/jsoup/issues/305>\n\n * Fixed a crash when reading an unterminated CDATA section.\n   <https://github.com/jhy/jsoup/issues/349>\n\n * Fixed an issue where elements added via the adoption agency algorithm did not preserve their attributes.\n   <https://github.com/jhy/jsoup/issues/313>\n\n * Fixed an issue when cloning a document with extremely nested elements that could cause a stack-overflow.\n   <https://github.com/jhy/jsoup/issues/290>\n\n * Fixed an issue when connecting or redirecting to a URL that contains a space.\n   <https://github.com/jhy/jsoup/pull/354> <https://github.com/jhy/jsoup/issues/114>\n\n * Added support for the HTTP/1.1 Temporary Redirect (307) status code.\n   <https://github.com/jhy/jsoup/issues/452>\n\n*** Release 1.7.2 [2013-Jan-27]\n * Added support for supplementary characters outside of the Basic Multilingual Plane.\n   <https://github.com/jhy/jsoup/issues/288> <https://github.com/jhy/jsoup/pull/289>\n\n * Added support for structural pseudo CSS selectors, including :first-child, :last-child, :nth-child, :nth-last-child,\n   :first-of-type, :last-of-type, :nth-of-type, :nth-last-of-type, :only-child, :only-of-type, :empty, and :root\n   <https://github.com/jhy/jsoup/pull/208>\n\n * Added a maximum body response size to Jsoup.Connection, to prevent running out of memory when trying to read\n   extremely large documents. The default is 1MB.\n\n * Refactored the Cleaner to traverse rather than recurse child nodes, to avoid the risk of overflowing the stack.\n   <https://github.com/jhy/jsoup/issues/246>\n\n * Added Element.insertChildren(), to easily insert a list of child nodes at a specific index.\n   <https://github.com/jhy/jsoup/issues/239>\n\n * Added Node.childNodesCopy(), to create an independent copy of a Node's children.\n\n * When parsing in XML mode, preserve XML declarations (<?xml ... ?>).\n   <https://github.com/jhy/jsoup/issues/242>\n\n * Introduced Parser.parseXmlFragment(), to allow easy parsing of XML fragments.\n   <https://github.com/jhy/jsoup/issues/279>\n\n * Allow Safelist test methods to be extended\n   <https://github.com/jhy/jsoup/issues/85>\n\n * Added Document.OutputSettings.outline mode, to aid HTML debugging by printing out in outline mode, similar to\n   browser HTML inspectors.\n   <https://github.com/jhy/jsoup/issues/273>\n\n * When parsing, allow all tags to self-close. Tags that aren't expected to self-close will get an end tag.\n   <https://github.com/jhy/jsoup/issues/258>\n\n * Fixed an issue when parsing <textarea>/RCData tags containing unescaped closing tags that would drop the trailing >.\n\n * Corrected the javadoc for Element#child() to note that it throws IndexOutOfBounds.\n   <https://github.com/jhy/jsoup/issues/277>\n\n * When cloning an Element, reset the classnames set so as not to hold a pointer to the source's.\n   <https://github.com/jhy/jsoup/issues/278>\n\n * Limit how far up the stack the formatting adoption agency algorithm will travel, to prevent the chance of a run-away\n   parse when the HTML stack is hopelessly deep.\n   <https://github.com/jhy/jsoup/issues/234>\n\n * Modified Element.text() to build text by traversing child nodes rather than recursing. This avoids stack-overflow\n   errors when the DOM is very deep and the VM stack-size is low.\n   <https://github.com/jhy/jsoup/issues/271>\n\n*** Release 1.7.1 [2012-Sep-23]\n * Improved parse time, now 2.3x faster than previous release, with lower memory consumption.\n\n * Reduced memory consumption when selecting elements.\n\n * Introduced finer granularity of exceptions in Jsoup.connect, including HttpStatusException and\n   UnsupportedMimeTypeException.\n   <https://github.com/jhy/jsoup/issues/229>\n\n * Fixed an issue when determining the Windows-1254 character-set from a meta tag when run in the Turkish locale.\n   <https://github.com/jhy/jsoup/issues/191>\n\n * Fixed whitespace preservation in <textarea> tags.\n   <https://github.com/jhy/jsoup/issues/167>\n\n * In jsoup.connect, fail faster if the return content type is not supported.\n   <https://github.com/jhy/jsoup/issues/153>\n\n * In jsoup.clean, allow custom OutputSettings, to control pretty printing, character set, and entity escaping.\n   <https://github.com/jhy/jsoup/issues/148>\n\n * Fixed an issue that prevented frameset documents to be cleaned by the Cleaner.\n   <https://github.com/jhy/jsoup/issues/154>\n\n * Fixed an issue when normalising whitespace for strings containing high-surrogate characters.\n   <https://github.com/jhy/jsoup/issues/214>\n\n * If a server doesn't specify a content-type header, treat that as OK.\n   <https://github.com/jhy/jsoup/issues/213>\n\n * If a server returns an unsupported character-set header, attempt to decode the content with the default charset\n   (UTF8), instead of bailing with an unsupported charset exception.\n   <https://github.com/jhy/jsoup/issues/215>\n\n * Removed an unnecessary synchronisation in Tag.valueOf, allowing multi-threaded parsing to run faster.\n   <https://github.com/jhy/jsoup/issues/238>\n\n * Made entity decoding less greedy, so that non-entities are less likely to be incorrectly treated as entities.\n   <https://github.com/jhy/jsoup/issues/224>\n\n * Whitespace normalise document.title() output.\n   <https://github.com/jhy/jsoup/issues/168>\n\n * In Jsoup.connection, enforce a connection disconnect after every connect. This precludes keep-alive connections to\n   the same host, but in practise many implementations will leak connections, particularly on error.\n\n*** Release 1.6.3 [2012-May-28]\n * Fixed parsing of group-or commas in CSS selectors, to correctly handle sub-queries containing commas.\n   <https://github.com/jhy/jsoup/issues/179>\n\n * If a node has no parent, return null on previousSibling and nextSibling instead of throwing a null pointer exception.\n   <https://github.com/jhy/jsoup/issues/184>\n\n * Updated Node.siblingNodes() and Element.siblingElements() to exclude the current node (a node is not its own sibling).\n\n * Fixed HTML entity parser to correctly parse entities like frac14 (letter + number combo).\n   <https://github.com/jhy/jsoup/issues/145>\n\n * Fixed issue where contents of a script tag within a comment could be incorrectly parsed.\n   <https://github.com/jhy/jsoup/issues/115>\n\n * Fixed GAE support: load HTML entities from a file on startup, instead of embedding in the class.\n\n * Fixed NPE when HTML fragment parsing a <style> tag\n   <https://github.com/jhy/jsoup/issues/189>\n\n * Fixed issue with :all pseudo-tag in HTML sanitizer when cleaning tags previously defined in safelist\n   <https://github.com/jhy/jsoup/issues/156>\n\n * Fixed NPE in Parser.parseFragment() when context parameter is null.\n   <https://github.com/jhy/jsoup/issues/195>\n\n * In HTML Safelists, when defining allowed attributes for a tag, automatically add the tag to the allowed list.\n\n*** Release 1.6.2 [2012-Mar-27]\n * Added a simplified XML parsing mode, which can usefully parse valid and invalid XML, but does not enforce any HTML\n   document structure or special tag behaviour.\n\n * Added the optional ability to track errors when tokenising and parsing.\n\n * Added jsoup.connect.cookies(Map) method, to set multiple cookies at once, possibly from a prior request.\n\n * Added Element.textNodes() and Element.dataNodes(), to easily access an element's children text nodes and data nodes.\n\n * Added an example program that demonstrates how to format HTML as plain-text, and the use of the NodeVisitor interface.\n\n * Added Node.traverse() and Elements.traverse() methods, to iterate through a node's descendants.\n \n * Updated jsoup.connect so that when requests made as POSTs are redirected, the redirect is followed as a GET.\n   <https://github.com/jhy/jsoup/issues/120>\n\n * Updated the Cleaner and Safelists to optionally preserve related links in elements, instead of converting them\n   to absolute links.\n\n * Updated the Cleaner to support custom allowed protocols such as \"cid:\" and \"data:\".\n   <https://github.com/jhy/jsoup/issues/127>\n\n * Updated handling of <base href> tags, to act on only the first one seen when parsing, to align with modern browsers.\n\n * Updated Node.setBaseUri(), to recursively set on all the node's descendants.\n\n * Fixed handling of null characters within comments.\n   <https://github.com/jhy/jsoup/issues/121>\n\n * Tweaked escaped entity detection in attributes to not treat &entity_... as an entity form.\n   <https://github.com/jhy/jsoup/issues/129>\n\n * Fixed doctype tokeniser to allow whitespace between name and public identifier.\n\n * Fixed issue where comments within a table tag would be duplicate-fostered into body.\n   <https://github.com/jhy/jsoup/pull/165>\n\n * Fixed an issue where a spurious byte-order-mark at the start of a document would cause the parser to miss head\n   contents.\n   <https://github.com/jhy/jsoup/issues/134>\n\n * Fixed an issue where content after a frameset could cause a NPE crash. Now correctly implements spec and ignores\n   the trailing content.\n   <https://github.com/jhy/jsoup/issues/162>\n\n * Tweaked whitespace checks to align with HTML spec\n   <https://github.com/jhy/jsoup/pull/175>\n\n * Tweaked HTML output of closing script and style tags to not add an extraneous newline when pretty-printing.\n\n * Substantially reduced default memory allocation within Node.outerHtml, to reduce memory pressure when serialising\n   smaller DOMs.\n   <https://github.com/jhy/jsoup/issues/143>\n\n*** Release 1.6.1 [2011-Jul-02]\n * Fixed Java 1.5 compatibility.\n   <https://github.com/jhy/jsoup/issues/103>\n\n * Fixed an issue when parsing <script> tags in body where the tokeniser wouldn't switch to the InScript state, which\n   meant that data wasn't parsed correctly.\n   <https://github.com/jhy/jsoup/issues/104>\n\n * Fixed an issue with a missing quote when serialising DocumentType nodes.\n   <https://github.com/jhy/jsoup/issues/109>\n\n * Fixed issue where a single 0 character was lexed incorrectly as a null character.\n   <https://github.com/jhy/jsoup/issues/107>\n\n * Fixed normalisation of carriage returns to newlines on input HTML.\n   <https://github.com/jhy/jsoup/issues/110>\n\n * Disabled memory mapped files when loading files from disk, to improve compatibility in Windows environments.\n\n*** Release 1.6.0 [2011-Jun-13]\n * HTML5 conformant parser. Complete reimplementation of HTML tokenisation and parsing, to implement the\n   http://whatwg.org/html spec. This ensures jsoup parses HTML identically to current modern browsers.\n\n * When parsing files from disk, files are loaded via memory mapping, to increase parse speed.\n\n * Reduced memory overhead and lowered garbage collector pressure with Attribute, Node and Element model optimisations.\n\n * Improved \"abs:\" absolute URL handling in Elements.attr(\"abs:href\") and Node.hasAttr(\"abs:href\").\n   <https://github.com/jhy/jsoup/issues/97>\n\n * Fixed cookie handling issue in jsoup.Connect where empty cookies would cause a validation exception.\n   <https://github.com/jhy/jsoup/issues/87>\n\n * Added jsoup.Connect configuration options to allow HTTP errors to be ignored, and the content-type to be ignored.\n   Contributed by Jesse Piascik (piascikj)\n   <https://github.com/jhy/jsoup/pull/78>\n\n * Added Node.before(node) and Node.after(node), to allow existing nodes to be moved, or new nodes to be inserted, into\n   precise DOM positions.\n\n * Added Node.unwrap() and Elements.unwrap(), to remove a node but keep its contents. Useful for e.g. removing unwanted\n   formatting tags.\n   <https://github.com/jhy/jsoup/issues/100>\n\n * Now handles unclosed <title> tags in document by breaking out of the title at the next start tag, instead of\n   eating up to the end of the document.\n   <https://github.com/jhy/jsoup/issues/82>\n\n * Added OSGi bundle support to the jsoup package jar.\n   <https://github.com/jhy/jsoup/issues/98>\n\n*** Release 1.5.2 [2011-Feb-27]\n * Fixed issue with selector parser where some boolean AND + OR combined queries (e.g. \"meta[http-equiv], meta[content]\")\n   were being parsed incorrectly as OR only queries (e.g. former as \"meta, [http-equiv], meta[content]\")\n\n * Fixed issue where a content-type specified in a meta tag may not be reliably detected, due to the above issue.\n\n * Updated Element.text() and Element.ownText() methods to ensure <br> tags output as whitespace.\n\n * Tweaked Element.outerHtml() method to not generate initial newline on first output element.\n\n *** Release 1.5.1 [2011-Feb-19]\n\n * Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov). This significantly speeds up\n   the execution of combined selector queries.\n\n * Implemented workaround to fix Scala support. Contributed by bbeck (Brandon Beck).\n\n * Added ability to change an element's tag with Element.tagName(String), and to change many at once\n   with Elements.tagName(String).\n\n * Added Node.wrap(html), Node.before(html), and Node.after(html), to allow HTML to be easily added to all nodes. These\n   functions were previously supported on Elements only.\n\n * Added TextNode.splitText(index), which allows a text node to be split into two nodes at a specified index point.\n   This is convenient if you need to surround some text in an element.\n\n * Updated Jsoup.Connection so that cookies set on a redirect response will be included on both the redirected request\n   and response.\n\n * Infinite redirection loops in Jsoup.Connect are now prevented.\n\n * Allow Jsoup.Connect to parse application/xml and application/xhtml+xml responses.\n\n * Modified Jsoup.Connect to always follow relative links, regardless of the underlying HTTP sub-system.\n\n * Defined U (underline) element as an inline tag.\n\n * Force strict entity matching (must be &xxx; and not &xxx) in element attributes.\n\n * Implemented clone method for Elements (contributed by knz).\n\n * Fixed tokeniser optimisation when scanning for missing data element close tags.\n\n * Fixed issue when using descendant regex attribute selectors. \n\n  *** Release 1.4.1 [2010-Nov-23]\n\n * Added ability to load and parse HTML from an input stream.\n\n * Implemented Node.clone() to create deep, independent copies of Nodes, Elements, and Documents.\n\n * Added :not() selector, to find elements that do not match the selector. E.g. div:not(.logo) finds divs that\n   do not have the \"logo\" class name.\n\n * Added Elements.not(selector) method, to remove undesired results from selector results.\n\n * Implemented DataNode.setWholeData() to allow updating of script and style data contents.\n\n * Relaxed parse rules of H1 - H6, to allow nested content. This is against spec, but matches browser and publisher\n   behaviour.\n\n * Relaxed parse rule of SPAN to treat as block, to allow nested block content.\n\n * Fixed issue in jsoup.connect when extracting character set from content-type header; now supports quoted\n   charset declaration.\n   \n * Fixed support for jsoup.connect to follow redirects between http & https URLs.\n\n * Document normalisation now more enthusiastically enforces the correct document structure.\n\n * Support node.outerHtml() method when node has no parent (e.g. when it has been removed from its DOM tree)\n\n * Fixed support for HTML entities with numbers in name (e.g. &frac34, &sup1).\n\n * Fixed absolute URL generation from relative URLs which are only query strings.\n\n*** Release 1.3.3 [2010-Sep-19]\n * Implemented Elements.empty() and Elements.remove(). This allows easy element removal, like:\n    doc.select(\"iframe\").remove();\n    \n * Fixed issue in Entities when unescaping &#36; (\"$\")\n   <http://github.com/jhy/jsoup/issues/issue/34>\n\n * Added restricted XHTML output entity option\n   <http://github.com/jhy/jsoup/issues/issue/35>\n\n*** Release 1.3.2 [2010-Aug-30]\n * Treat HTTP headers as case insensitive in Jsoup.Connection. Improves compatibility for HTTP responses.\n\n * Improved malformed table parsing by implementing ignorable end tags.\n\n*** Release 1.3.1 [2010-Aug-23]\n * Removed dependency on Apache Commons-lang. Jsoup now has no external dependencies.\n\n * Added new Connection implementation, to enable easier and richer HTTP requests that parse to Documents. This includes\n   support for gzip responses, cookies, headers, data parameters, user-agent, referrer, etc.\n  \n * Added Element.ownText() method, to get only the direct text of an element, not including the text of its children.\n \n * Added support for selectors :containsOwn(text) and :matchesOwn(regex), to supplement Element.ownText().\n\n * Added support for non-pretty-printed HTML output, to more closely mirror the input HTML.\n\n * Further speed optimisations for parsing and output generation.\n \n * Fixed support for case-sensitive HTML escape entities.\n   <http://github.com/jhy/jsoup/issues/issue/31>\n \n * Fixed issue when parsing tags with keyless attributes.\n   <http://github.com/jhy/jsoup/issues/issue/32>\n\n*** Release 1.2.3 [2010-Aug-04]\n * Added support for automatic input character set detection and decoding. Jsoup now automatically detects the encoding\n   character set when parsing HTML from a File or URL. The parser checks the content-type header, then the\n   <meta http-equiv> or <meta charset> tag, and finally falls back to UTF-8.\n\n * Added ability to configure the document's output charset, to control which characters are HTML escaped, and which\n   are kept intact. The output charset defaults to the document's input charset. This simplifies non-ascii output.\n\n * Added full support for all new HTML5 tags.\n\n * Added support for HTML5 dataset custom data attributes, with the Element.dataset() map.\n\n * Added support for the [^attributePrefix] selector query, to find elements with attributes starting with a prefix.\n   Useful for finding elements with datasets: [^data-] matches <p data-name=\"jsoup\">\n\n * Added support for namespaced elements (<fb:name>) and selectors to find them (fb|name)\n\n * Implemented Node.ownerDocument DOM method\n\n * Improved implicit table element handling (particularly around thead, tbody, and tfoot).\n\n * Improved HTML output format for empty elements and auto-detected self closing tags\n\n * Changed DT & DD tags to block-mode tags, to follow practice over spec\n\n * Added support for tag names with - and _ (<abc_foo>, <abc-foo>)\n\n * Handle tags with internal trailing space (<foo >)\n \n * Fixed support for character class regular expressions in [attr=~regex] selector\n\n*** Release 1.2.2 [2010-Jul-11]\n \n * Performance optimisation:\n    - core HTML parser engine now 3.5 times faster\n    - HTML generator now 2.5 times faster\n    - much lower memory use and garbage collection time\n    \n * Added support for :matches(regex) selector, to find elements containing text matching regular expression\n \n * Added support for [key~=regex] attribute selector, to find elements with attribute values matching regular expression\n\n * Upgraded the selector query parser to allow nested selectors like 'div:has(p:matches(regex))'\n\n*** Release 1.2.1 [2010-Jun-21]\n * Added .before(html) and .after(html) methods to Element and Elements, to insert sibling HTML\n \n * Added :contains(text) selector, to search for elements containing the specified text\n\n * Added :has(selector) pseudo-selector\n     <http://github.com/jhy/jsoup/issues/issue/20>\n\n * Added Element#parents and Elements#parents to retrieve an element's ancestor chain\n     <http://github.com/jhy/jsoup/issues/issue/20>\n\n * Fixes an issue where appending / prepending rows to a table (or  to similar implicit\n    element structures) would create a redundant wrapping elements\n       <http://github.com/jhy/jsoup/issues/issue/21>\n\n * Improved implicit close tag heuristic detection when parsing malformed HTML\n\n * Fixes an issue where text content after a script (or other data-node) was\n     incorrectly added to the data node.\n       <http://github.com/jhy/jsoup/issues/issue/22>\n\n * Fixes an issue where text order was incorrect when parsing pre-document\n    HTML.\n      <http://github.com/jhy/jsoup/issues/issue/23>\n\n*** Release 1.1.1 [2010-Jun-08]\n * Added selector support for :eq, :lt, and :gt\n \t<http://github.com/jhy/jsoup/issues/issue/16>\n\n * Added TextNode#text and TextNode#text(String)\n \t<http://github.com/jhy/jsoup/issues/issue/18>\n\n * Throw exception if trying to parse non-text content\n \t<http://github.com/jhy/jsoup/issues/issue/17>\n\n * Added Node#remove and Node#replaceWith\n \t<http://github.com/jhy/jsoup/issues/issue/19>\n\n * Allow _ and - in CSS ID selectors (per CSS spec).\n \t<http://github.com/jhy/jsoup/issues/issue/10>\n \n * Relative links are resolved to absolute when cleaning, to normalize\n    output and to verify safe protocol. (Were previously discarded.)\n      <http://github.com/jhy/jsoup/issues/issue/12>\n \n * Allow combinators at start of selector query, for query refinements\n \t  <http://github.com/jhy/jsoup/issues/issue/13>\n\n * Added Element#val() and #val(String) methods, for form values\n \t  <http://github.com/jhy/jsoup/issues/issue/14>\n\n * Changed textarea contents to parse as TextNodes, not DataNodes,\n    so contents visible to text() (and val(), as treated as form input)\n\n * Fixed support for Java 1.5\n\n*** Release 0.3.1 (2010-Feb-20)\n * New features: supports Elements#html(), html(String),\n    prepend(String), append(String); bulk methods for corresponding\n    methods in Element.\n\n * New feature: Jsoup.isValid(html, safelist) method for user input\n    form validation.\n \n * Improved Elements.attr(String) to find first matching element\n    with attribute.\n\n * Fixed assertion error when cleaning HTML with empty attribute\n \t  <http://github.com/jhy/jsoup/issues/issue/7>\n\n*** Release 0.2.2 (2010-Feb-07)\n * jsoup packages are now available in the Maven central repository.\n \n * New feature: supports Element#addClass, removeClass, toggleClass;\n    also collection class methods on Elements.\n * New feature: supports Element#wrap(html) and Elements#wrap(html).\n * New selector syntax: supports E + F adjacent sibling selector\n * New selector syntax: supports E ~ F preceding sibling selector\n * New: supports Element#elementSiblingIndex()\n\n * Improved document normalisation.\n * Improved HTML string output format (pretty-print)\n \n * Fixed absolute URL resolution issue when a base tag has no href.\n\n*** Release 0.1.2 (2010-Feb-02)\n * Fixed unrecognised tag handler to be more permissive\n    <http://github.com/jhy/jsoup/issues/issue/1>\n\n\n*** Release 0.1.1 (2010-Jan-31)\n * Initial beta release of jsoup\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 20.029296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <name>jsoup Java HTML Parser</name>\n\n  <groupId>org.jsoup</groupId>\n  <artifactId>jsoup</artifactId>\n  <version>1.19.1-SNAPSHOT</version><!-- remember to update previous version below for japicmp -->\n  <url>https://jsoup.org/</url>\n  <description>jsoup is a Java library that simplifies working with real-world HTML and XML. It offers an easy-to-use API for URL fetching, data parsing, extraction, and manipulation using DOM API methods, CSS, and xpath selectors. jsoup implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers.</description>\n  <inceptionYear>2009</inceptionYear>\n  <issueManagement>\n    <system>GitHub</system>\n    <url>https://github.com/jhy/jsoup/issues</url>\n  </issueManagement>\n  <licenses>\n    <license>\n      <name>The MIT License</name>\n      <url>https://jsoup.org/license</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <scm>\n    <url>https://github.com/jhy/jsoup</url>\n    <connection>scm:git:https://github.com/jhy/jsoup.git</connection>\n    <!-- <developerConnection>scm:git:git@github.com:jhy/jsoup.git</developerConnection> -->\n    <tag>HEAD</tag>\n  </scm>\n  <organization>\n    <name>Jonathan Hedley</name>\n    <url>https://jhy.io/</url>\n  </organization>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <jetty.version>9.4.56.v20240826</jetty.version>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.13.0</version>\n        <configuration>\n          <encoding>UTF-8</encoding>\n          <useIncrementalCompilation>false</useIncrementalCompilation>\n          <compilerArgs>\n            <arg>-Xpkginfo:always</arg>\n          </compilerArgs>\n        </configuration>\n        <executions>\n          <!-- Disable the default compile, so the profiles activated below execute -->\n          <execution>\n            <id>default-compile</id>\n            <phase>none</phase>\n          </execution>\n          <execution>\n            <id>default-testCompile</id>\n            <phase>none</phase>\n          </execution>\n        </executions>\n      </plugin>\n\n      <!-- Ensure Java 8 and Android 10 API compatibility -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>animal-sniffer-maven-plugin</artifactId>\n        <version>1.24</version>\n        <executions>\n          <execution>\n            <id>api-java8</id>\n            <phase>compile</phase>\n            <goals>\n              <goal>check</goal>\n            </goals>\n            <configuration>\n              <signature>\n                <groupId>org.codehaus.mojo.signature</groupId>\n                <artifactId>java18</artifactId>\n                <version>1.0</version>\n              </signature>\n              <ignores>\n                <ignore>java.net.HttpURLConnection</ignore><!-- .setAuthenticator(java.net.Authenticator) in Java 9; only used in multirelease 9+ version -->\n                <ignore>java.net.http.*</ignore><!-- HttpClient in Java 11; only used in multirelease 11+ version -->\n              </ignores>\n            </configuration>\n          </execution>\n          <execution>\n            <id>api-android21</id>\n            <phase>compile</phase>\n            <goals>\n              <goal>check</goal>\n            </goals>\n            <configuration>\n              <signature>\n                <groupId>com.toasttab.android</groupId>\n                <artifactId>gummy-bears-api-21</artifactId>\n                <version>0.10.0</version>\n                <!-- <classifier>coreLib2</classifier> -->\n                <!-- ^^ https://github.com/open-toast/gummy-bears says coreLib2 classifier for desugar should work, but I can't seem to wrangle Animal Sniffer to support that, so reverting to ignores for desugar -->\n              </signature>\n              <ignores>\n                <ignore>java.io.File</ignore> <!-- File#toPath() -->\n                <ignore>java.nio.file.*</ignore>\n                <ignore>java.nio.channels.SeekableByteChannel</ignore>\n                <ignore>java.util.function.*</ignore>\n                <ignore>java.util.stream.*</ignore>\n                <ignore>java.lang.ThreadLocal</ignore>\n                <ignore>java.io.UncheckedIOException</ignore>\n                <ignore>java.util.Comparator</ignore> <!-- Comparator.comparingInt() -->\n                <ignore>java.util.List</ignore> <!-- List#stream() -->\n                <ignore>java.util.ArrayList</ignore> <!-- List / ArrayList #sort() -->\n                <ignore>java.util.LinkedHashMap</ignore> <!-- LinkedHashMap#computeIfAbsent() -->\n                <ignore>java.util.Map</ignore> <!-- Map#computeIfAbsent() -->\n                <ignore>java.util.Objects</ignore>\n                <ignore>java.util.Optional</ignore>\n                <ignore>java.util.Set</ignore> <!-- Set#stream() -->\n                <ignore>java.util.Spliterator</ignore>\n                <ignore>java.util.Spliterators</ignore>\n                <ignore>java.nio.ByteBuffer</ignore> <!-- .flip(); added in API1; possibly due to .flip previously returning Buffer, later ByteBuffer; return unused -->\n                <ignore>java.net.HttpURLConnection</ignore><!-- .setAuthenticator(java.net.Authenticator) in Java 9; only used in multirelease 9+ version -->\n                <!-- HttpClient and following in Java 11; only used in multirelease 11+ version, guarded and not on Android -->\n                <ignore>java.net.http.*</ignore>\n                <ignore>java.time.Duration</ignore>\n                <ignore>java.util.OptionalLong</ignore>\n              </ignores>\n              <!-- ^ Provided by https://developer.android.com/studio/write/java8-support#library-desugaring -->\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <version>3.11.2</version>\n        <configuration>\n          <doclint>none</doclint>\n          <source>8</source>\n          <linksource>true</linksource>\n        </configuration>\n        <executions>\n          <execution>\n            <id>attach-javadoc</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-source-plugin</artifactId>\n        <version>3.3.1</version>\n        <configuration>\n          <excludes>\n            <exclude>org/jsoup/examples/**</exclude>\n          </excludes>\n        </configuration>\n        <executions>\n          <execution>\n            <id>attach-sources</id>\n            <goals>\n              <goal>jar-no-fork</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jar-plugin</artifactId>\n        <version>3.4.2</version>\n        <configuration>\n          <archive>\n            <manifest>\n              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n            </manifest>\n            <manifestEntries>\n              <Multi-Release>true</Multi-Release>\n            </manifestEntries>\n            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n          </archive>\n        </configuration>\n        <executions>\n          <execution>\n            <id>default-jar</id>\n            <phase>package</phase>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n            <configuration>\n              <excludes>\n                <exclude>org/jsoup/examples/**</exclude>\n              </excludes>\n            </configuration>\n          </execution>\n          <execution>\n            <id>jar-examples</id>\n            <phase>package</phase>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n            <configuration>\n              <classifier>examples</classifier>\n              <includes>\n                <include>org/jsoup/**</include>\n                <include>org/jsoup/examples/**</include>\n              </includes>\n              <archive>\n                <manifest>\n                  <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n                  <mainClass>org.jsoup.examples.HtmlToPlainText</mainClass>\n                </manifest>\n              </archive>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <version>5.1.9</version>\n        <executions>\n          <execution>\n            <id>bundle-manifest</id>\n            <phase>process-classes</phase>\n            <goals>\n              <goal>manifest</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <instructions>\n            <Bundle-DocURL>https://jsoup.org/</Bundle-DocURL>\n            <Export-Package>org.jsoup.*</Export-Package>\n            <Import-Package>!org.jsoup.*,org.jspecify.annotations;version=!;resolution:=optional,*</Import-Package>\n          </instructions>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>3.3.1</version>\n      </plugin>\n      <plugin>\n        <artifactId>maven-release-plugin</artifactId>\n        <version>3.1.1</version>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>3.5.2</version>\n        <configuration>\n          <!-- smaller stack to find stack overflows. Was 256, but Zulu on MacOS ARM needs >= 640 -->\n          <argLine>-Xss640k</argLine>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-failsafe-plugin</artifactId>\n        <version>3.5.2</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>integration-test</goal>\n              <goal>verify</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <parallel>methods</parallel>\n          <threadCount>8</threadCount>\n        </configuration>\n      </plugin>\n      <plugin>\n        <!-- API version compat check - https://siom79.github.io/japicmp/ -->\n        <groupId>com.github.siom79.japicmp</groupId>\n        <artifactId>japicmp-maven-plugin</artifactId>\n        <version>0.23.0</version>\n        <configuration>\n          <!-- hard code previous version; can't detect when running stateless on build server -->\n          <oldVersion>\n            <dependency>\n              <groupId>org.jsoup</groupId>\n              <artifactId>jsoup</artifactId>\n              <version>1.18.3</version>\n              <type>jar</type>\n            </dependency>\n          </oldVersion>\n          <parameter>\n            <!-- jsoup policy is ok to remove deprecated methods on minor but not builds. will need to temp remove on bump to 1.15.1 and manually validate -->\n            <onlyModified>false</onlyModified>\n            <breakBuildOnBinaryIncompatibleModifications>true</breakBuildOnBinaryIncompatibleModifications>\n            <breakBuildOnSourceIncompatibleModifications>true</breakBuildOnSourceIncompatibleModifications>\n            <excludes>\n              <!-- <exclude>@java.lang.Deprecated</exclude> -->\n              <exclude>org.jsoup.UncheckedIOException</exclude>\n              <exclude>org.jsoup.nodes.Element</exclude> <!-- forEach previously deprecated -->\n            </excludes>\n            <overrideCompatibilityChangeParameters>\n              <!-- allows new default and move to default methods. compatible as long as existing binaries aren't making calls via reflection. if so, they need to catch errors anyway. -->\n              <overrideCompatibilityChangeParameter>\n                <compatibilityChange>METHOD_NEW_DEFAULT</compatibilityChange>\n                <binaryCompatible>true</binaryCompatible>\n                <sourceCompatible>true</sourceCompatible>\n              </overrideCompatibilityChangeParameter>\n              <overrideCompatibilityChangeParameter>\n                <compatibilityChange>METHOD_ABSTRACT_NOW_DEFAULT</compatibilityChange>\n                <binaryCompatible>true</binaryCompatible>\n                <sourceCompatible>true</sourceCompatible>\n              </overrideCompatibilityChangeParameter>\n            </overrideCompatibilityChangeParameters>\n          </parameter>\n        </configuration>\n        <executions>\n          <execution>\n            <phase>package</phase>\n            <goals>\n              <goal>cmp</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n    <resources>\n      <resource>\n        <directory>./</directory>\n        <targetPath>META-INF/jsoup/</targetPath>\n        <filtering>false</filtering>\n        <includes>\n          <include>LICENSE</include>\n        </includes>\n      </resource>\n    </resources>\n  </build>\n\n  <distributionManagement>\n    <snapshotRepository>\n      <id>sonatype-nexus-snapshots</id>\n      <name>Sonatype Nexus Snapshots</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n      <id>sonatype-nexus-staging</id>\n      <name>Nexus Release Repository</name>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n\n  <profiles>\n    <!-- Profile for Java 8 -->\n    <profile>\n      <id>java-8</id>\n      <activation>\n        <jdk>1.8</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>compile</id>\n                <phase>compile</phase>\n                <goals>\n                  <goal>compile</goal>\n                  <goal>testCompile</goal>\n                </goals>\n                <configuration>\n                  <source>1.8</source>\n                  <target>1.8</target>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <!-- Compiles the multi-release jar when executed on JDK11+ -->\n    <profile>\n      <id>compile-multi-release</id>\n      <activation>\n        <jdk>[11,2000)</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <executions>\n\n              <execution>\n                <id>compile-java-8</id>\n                <phase>compile</phase>\n                <goals>\n                  <goal>compile</goal>\n                  <goal>testCompile</goal>\n                </goals>\n                <configuration>\n                  <release>8</release>\n                </configuration>\n              </execution>\n\n              <execution>\n                <id>compile-java-11</id>\n                <phase>compile</phase>\n                <goals>\n                  <goal>compile</goal>\n                </goals>\n                <configuration>\n                  <release>11</release>\n                  <compileSourceRoots>\n                    <compileSourceRoot>${project.basedir}/src/main/java11</compileSourceRoot>\n                  </compileSourceRoots>\n                  <multiReleaseOutput>true</multiReleaseOutput>\n                </configuration>\n              </execution>\n\n              <!-- Tests for multi-release jar on 11: mark tests to be compiled; then and add to class path -->\n              <execution>\n                <id>testcompile-java-11</id>\n                <phase>test-compile</phase>\n                <goals>\n                  <goal>testCompile</goal>\n                </goals>\n                <configuration>\n                  <release>11</release>\n\n                  <compileSourceRoots>\n                    <compileSourceRoot>${project.basedir}/src/test/java11</compileSourceRoot>\n                  </compileSourceRoots>\n                </configuration>\n              </execution>\n\n            </executions>\n          </plugin>\n\n          <!-- Add the Java 11-specific test directory to the test runtime classpath -->\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n              <additionalClasspathElements>\n                <additionalClasspathElement>${project.build.outputDirectory}/META-INF/versions/11</additionalClasspathElement>\n              </additionalClasspathElements>\n              <useModulePath>false</useModulePath>  <!-- tests use classpath -->\n            </configuration>\n          </plugin>\n\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>release-sign-artifacts</id>\n      <activation>\n        <property>\n          <name>performRelease</name>\n          <value>true</value>\n        </property>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>package</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>failsafe</id>\n      <build>\n        <plugins>\n          <plugin>\n            <artifactId>maven-failsafe-plugin</artifactId>\n            <version>3.5.2</version>\n            <executions>\n              <execution>\n                <goals>\n                  <goal>integration-test</goal>\n                  <goal>verify</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n\n  <dependencies>\n\n    <!-- junit -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <version>5.11.4</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <!-- gson, to fetch entities from w3.org -->\n      <groupId>com.google.code.gson</groupId>\n      <artifactId>gson</artifactId>\n      <version>2.11.0</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <!-- jetty for webserver integration tests. 9.x is last with Java7 support -->\n      <groupId>org.eclipse.jetty</groupId>\n      <artifactId>jetty-server</artifactId>\n      <version>${jetty.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <!-- jetty for webserver integration tests -->\n      <groupId>org.eclipse.jetty</groupId>\n      <artifactId>jetty-servlet</artifactId>\n      <version>${jetty.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <!-- jetty proxy, for integration tests -->\n      <groupId>org.eclipse.jetty</groupId>\n      <artifactId>jetty-proxy</artifactId>\n      <version>${jetty.version}</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <!-- org.jspecify.annotations.nonnull, with Apache 2 license. Build time only. -->\n      <groupId>org.jspecify</groupId>\n      <artifactId>jspecify</artifactId>\n      <version>1.0.0</version>\n      <scope>provided</scope>\n    </dependency>\n  </dependencies>\n\n  <dependencyManagement>\n    <dependencies>\n    </dependencies>\n  </dependencyManagement>\n\n  <developers>\n    <developer>\n      <id>jhy</id>\n      <name>Jonathan Hedley</name>\n      <email>jonathan@hedley.net</email>\n      <roles>\n        <role>Lead Developer</role>\n      </roles>\n      <timezone>+11</timezone>\n    </developer>\n  </developers>\n\n</project>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}